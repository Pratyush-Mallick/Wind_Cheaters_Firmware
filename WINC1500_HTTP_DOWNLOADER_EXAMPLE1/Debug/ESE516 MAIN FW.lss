
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ed68  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000208  20000000  0000ed68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004c7c  20000208  0000ef70  00020208  2**2
                  ALLOC
  3 .stack        00002004  20004e84  00013bec  00020208  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
  6 .debug_info   0007cf92  00000000  00000000  00020289  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000093c0  00000000  00000000  0009d21b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00027fbf  00000000  00000000  000a65db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001c48  00000000  00000000  000ce59a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002350  00000000  00000000  000d01e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001365b  00000000  00000000  000d2532  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00025908  00000000  00000000  000e5b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000afe85  00000000  00000000  0010b495  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00006600  00000000  00000000  001bb31c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	88 6e 00 20 e5 82 00 00 c9 82 00 00 c9 82 00 00     .n. ............
	...
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
		if (time.hour == 0) {
      2c:	a5 40 00 00 00 00 00 00 00 00 00 00 81 41 00 00     .@...........A..
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      3c:	c5 41 00 00 c9 82 00 00 c9 82 00 00 c9 82 00 00     .A..............
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
      4c:	4d 6c 00 00 51 6b 00 00 c9 82 00 00 c9 82 00 00     Ml..Qk..........
			time.hour = 12;
      5c:	c9 82 00 00 c9 82 00 00 75 70 00 00 85 70 00 00     ........up...p..
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
			}
			module->clock_24h = false;
      6c:	95 70 00 00 a5 70 00 00 b5 70 00 00 c5 70 00 00     .p...p...p...p..
		/* Change value in configuration structure. */
		module->clock_24h = true;
	}

	/* Disable RTC so new configuration can be set. */
	rtc_calendar_disable(module);
      7c:	99 82 00 00 a9 82 00 00 b9 82 00 00 e9 2c 00 00     .............,..

	/* Toggle mode. */
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;

	/* Enable RTC. */
	rtc_calendar_enable(module);
      8c:	f9 2c 00 00 09 2d 00 00 00 00 00 00 00 00 00 00     .,...-..........
		if (time.pm == 1) {
      9c:	c9 82 00 00 c9 82 00 00 c9 82 00 00 c9 82 00 00     ................
			time.pm = 0;
      ac:	c9 82 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
			if (alarm.time.pm == 1) {
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
			} else if (alarm.time.hour == 12) {
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
		module->clock_24h = true;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
		} else if (time.hour == 12) {
      ce:	bd10      	pop	{r4, pc}
      d0:	20000208 	.word	0x20000208
      d4:	00000000 	.word	0x00000000
			time.hour = 0;
      d8:	0000ed68 	.word	0x0000ed68

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
				alarm.time.hour = alarm.time.hour + 12;
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
				alarm.time.pm = 0;
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
				module->clock_24h = true;
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
				alarm.time.hour = 0;
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000020c 	.word	0x2000020c
     108:	0000ed68 	.word	0x0000ed68
     10c:	0000ed68 	.word	0x0000ed68
     110:	00000000 	.word	0x00000000

00000114 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     114:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     116:	2207      	movs	r2, #7
     118:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     11a:	421a      	tst	r2, r3
     11c:	d1fc      	bne.n	118 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     11e:	4770      	bx	lr

00000120 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     120:	b570      	push	{r4, r5, r6, lr}
     122:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     124:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     126:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     128:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     12a:	8b83      	ldrh	r3, [r0, #28]
     12c:	1aed      	subs	r5, r5, r3
     12e:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     130:	8b83      	ldrh	r3, [r0, #28]
     132:	3b01      	subs	r3, #1
     134:	b29b      	uxth	r3, r3
     136:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     138:	0113      	lsls	r3, r2, #4
     13a:	d51d      	bpl.n	178 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     13c:	7ac3      	ldrb	r3, [r0, #11]
     13e:	2b00      	cmp	r3, #0
     140:	d003      	beq.n	14a <_i2c_master_read+0x2a>
     142:	8b83      	ldrh	r3, [r0, #28]
     144:	b29b      	uxth	r3, r3
     146:	2b01      	cmp	r3, #1
     148:	d010      	beq.n	16c <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     14a:	8ba3      	ldrh	r3, [r4, #28]
     14c:	b29b      	uxth	r3, r3
     14e:	2b00      	cmp	r3, #0
     150:	d102      	bne.n	158 <_i2c_master_read+0x38>
		if (module->send_stop) {
     152:	7aa3      	ldrb	r3, [r4, #10]
     154:	2b00      	cmp	r3, #0
     156:	d11c      	bne.n	192 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     158:	0020      	movs	r0, r4
     15a:	4b12      	ldr	r3, [pc, #72]	; (1a4 <_i2c_master_read+0x84>)
     15c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     15e:	6a23      	ldr	r3, [r4, #32]
     160:	195d      	adds	r5, r3, r5
     162:	2328      	movs	r3, #40	; 0x28
     164:	5cf3      	ldrb	r3, [r6, r3]
     166:	b2db      	uxtb	r3, r3
     168:	702b      	strb	r3, [r5, #0]
}
     16a:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     16c:	6872      	ldr	r2, [r6, #4]
     16e:	2380      	movs	r3, #128	; 0x80
     170:	02db      	lsls	r3, r3, #11
     172:	4313      	orrs	r3, r2
     174:	6073      	str	r3, [r6, #4]
     176:	e7e8      	b.n	14a <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     178:	7ac3      	ldrb	r3, [r0, #11]
     17a:	2b00      	cmp	r3, #0
     17c:	d0e5      	beq.n	14a <_i2c_master_read+0x2a>
     17e:	8b83      	ldrh	r3, [r0, #28]
     180:	b29b      	uxth	r3, r3
     182:	2b00      	cmp	r3, #0
     184:	d1e1      	bne.n	14a <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     186:	6872      	ldr	r2, [r6, #4]
     188:	2380      	movs	r3, #128	; 0x80
     18a:	02db      	lsls	r3, r3, #11
     18c:	4313      	orrs	r3, r2
     18e:	6073      	str	r3, [r6, #4]
     190:	e7db      	b.n	14a <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     192:	0020      	movs	r0, r4
     194:	4b03      	ldr	r3, [pc, #12]	; (1a4 <_i2c_master_read+0x84>)
     196:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     198:	6872      	ldr	r2, [r6, #4]
     19a:	23c0      	movs	r3, #192	; 0xc0
     19c:	029b      	lsls	r3, r3, #10
     19e:	4313      	orrs	r3, r2
     1a0:	6073      	str	r3, [r6, #4]
     1a2:	e7d9      	b.n	158 <_i2c_master_read+0x38>
     1a4:	00000115 	.word	0x00000115

000001a8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     1a8:	b570      	push	{r4, r5, r6, lr}
     1aa:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     1ac:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     1ae:	8b6b      	ldrh	r3, [r5, #26]
     1b0:	075b      	lsls	r3, r3, #29
     1b2:	d503      	bpl.n	1bc <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     1b4:	221e      	movs	r2, #30
     1b6:	2325      	movs	r3, #37	; 0x25
     1b8:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     1ba:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     1bc:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     1be:	8b83      	ldrh	r3, [r0, #28]
     1c0:	1af6      	subs	r6, r6, r3
     1c2:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     1c4:	8b83      	ldrh	r3, [r0, #28]
     1c6:	3b01      	subs	r3, #1
     1c8:	b29b      	uxth	r3, r3
     1ca:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     1cc:	4b04      	ldr	r3, [pc, #16]	; (1e0 <_i2c_master_write+0x38>)
     1ce:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     1d0:	6a23      	ldr	r3, [r4, #32]
     1d2:	199e      	adds	r6, r3, r6
     1d4:	7833      	ldrb	r3, [r6, #0]
     1d6:	b2db      	uxtb	r3, r3
     1d8:	2228      	movs	r2, #40	; 0x28
     1da:	54ab      	strb	r3, [r5, r2]
     1dc:	e7ed      	b.n	1ba <_i2c_master_write+0x12>
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	00000115 	.word	0x00000115

000001e4 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     1e4:	b570      	push	{r4, r5, r6, lr}
     1e6:	0005      	movs	r5, r0
     1e8:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     1ea:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     1ec:	7a4b      	ldrb	r3, [r1, #9]
     1ee:	2b00      	cmp	r3, #0
     1f0:	d11a      	bne.n	228 <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     1f2:	6873      	ldr	r3, [r6, #4]
     1f4:	4a13      	ldr	r2, [pc, #76]	; (244 <_i2c_master_write_packet+0x60>)
     1f6:	4013      	ands	r3, r2
     1f8:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     1fa:	6863      	ldr	r3, [r4, #4]
     1fc:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     1fe:	8863      	ldrh	r3, [r4, #2]
     200:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     202:	2200      	movs	r2, #0
     204:	2324      	movs	r3, #36	; 0x24
     206:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     208:	3205      	adds	r2, #5
     20a:	3301      	adds	r3, #1
     20c:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     20e:	3b22      	subs	r3, #34	; 0x22
     210:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     212:	7a23      	ldrb	r3, [r4, #8]
     214:	2b00      	cmp	r3, #0
     216:	d10b      	bne.n	230 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     218:	8823      	ldrh	r3, [r4, #0]
     21a:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     21c:	7a62      	ldrb	r2, [r4, #9]
     21e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     220:	4313      	orrs	r3, r2
     222:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     224:	2000      	movs	r0, #0
     226:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     228:	7a89      	ldrb	r1, [r1, #10]
     22a:	4b07      	ldr	r3, [pc, #28]	; (248 <_i2c_master_write_packet+0x64>)
     22c:	4798      	blx	r3
     22e:	e7e0      	b.n	1f2 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     230:	8823      	ldrh	r3, [r4, #0]
     232:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     234:	7a62      	ldrb	r2, [r4, #9]
     236:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     238:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     23a:	2280      	movs	r2, #128	; 0x80
     23c:	0212      	lsls	r2, r2, #8
     23e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     240:	6273      	str	r3, [r6, #36]	; 0x24
     242:	e7ef      	b.n	224 <_i2c_master_write_packet+0x40>
     244:	fffbffff 	.word	0xfffbffff
     248:	00002c65 	.word	0x00002c65

0000024c <_i2c_master_read_packet>:
{
     24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     24e:	0005      	movs	r5, r0
     250:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     252:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
     254:	684b      	ldr	r3, [r1, #4]
     256:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     258:	884b      	ldrh	r3, [r1, #2]
     25a:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     25c:	2201      	movs	r2, #1
     25e:	2324      	movs	r3, #36	; 0x24
     260:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     262:	3204      	adds	r2, #4
     264:	3301      	adds	r3, #1
     266:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     268:	6837      	ldr	r7, [r6, #0]
     26a:	013f      	lsls	r7, r7, #4
     26c:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
     26e:	7a4b      	ldrb	r3, [r1, #9]
     270:	2b00      	cmp	r3, #0
     272:	d117      	bne.n	2a4 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
     274:	2f00      	cmp	r7, #0
     276:	d002      	beq.n	27e <_i2c_master_read_packet+0x32>
     278:	8863      	ldrh	r3, [r4, #2]
     27a:	2b01      	cmp	r3, #1
     27c:	d016      	beq.n	2ac <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     27e:	6873      	ldr	r3, [r6, #4]
     280:	4a20      	ldr	r2, [pc, #128]	; (304 <_i2c_master_read_packet+0xb8>)
     282:	4013      	ands	r3, r2
     284:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
     286:	7a23      	ldrb	r3, [r4, #8]
     288:	2b00      	cmp	r3, #0
     28a:	d115      	bne.n	2b8 <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
     28c:	2303      	movs	r3, #3
     28e:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     290:	8823      	ldrh	r3, [r4, #0]
     292:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     294:	7a62      	ldrb	r2, [r4, #9]
     296:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     298:	4313      	orrs	r3, r2
     29a:	2201      	movs	r2, #1
     29c:	4313      	orrs	r3, r2
     29e:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
     2a0:	2000      	movs	r0, #0
}
     2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     2a4:	7a89      	ldrb	r1, [r1, #10]
     2a6:	4b18      	ldr	r3, [pc, #96]	; (308 <_i2c_master_read_packet+0xbc>)
     2a8:	4798      	blx	r3
     2aa:	e7e3      	b.n	274 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     2ac:	6872      	ldr	r2, [r6, #4]
     2ae:	2380      	movs	r3, #128	; 0x80
     2b0:	02db      	lsls	r3, r3, #11
     2b2:	4313      	orrs	r3, r2
     2b4:	6073      	str	r3, [r6, #4]
     2b6:	e7e6      	b.n	286 <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     2b8:	8823      	ldrh	r3, [r4, #0]
     2ba:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     2bc:	7a62      	ldrb	r2, [r4, #9]
     2be:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     2c0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     2c2:	2280      	movs	r2, #128	; 0x80
     2c4:	0212      	lsls	r2, r2, #8
     2c6:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     2c8:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     2ca:	0028      	movs	r0, r5
     2cc:	4b0f      	ldr	r3, [pc, #60]	; (30c <_i2c_master_read_packet+0xc0>)
     2ce:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     2d0:	6873      	ldr	r3, [r6, #4]
     2d2:	4a0c      	ldr	r2, [pc, #48]	; (304 <_i2c_master_read_packet+0xb8>)
     2d4:	4013      	ands	r3, r2
     2d6:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     2d8:	2800      	cmp	r0, #0
     2da:	d1e2      	bne.n	2a2 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     2dc:	0028      	movs	r0, r5
     2de:	4b0c      	ldr	r3, [pc, #48]	; (310 <_i2c_master_read_packet+0xc4>)
     2e0:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     2e2:	2800      	cmp	r0, #0
     2e4:	d1dd      	bne.n	2a2 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     2e6:	2303      	movs	r3, #3
     2e8:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     2ea:	8823      	ldrh	r3, [r4, #0]
     2ec:	0a1b      	lsrs	r3, r3, #8
     2ee:	2278      	movs	r2, #120	; 0x78
     2f0:	4313      	orrs	r3, r2
     2f2:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     2f4:	7a62      	ldrb	r2, [r4, #9]
     2f6:	0392      	lsls	r2, r2, #14
     2f8:	2101      	movs	r1, #1
     2fa:	430a      	orrs	r2, r1
     2fc:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     2fe:	6273      	str	r3, [r6, #36]	; 0x24
     300:	e7cf      	b.n	2a2 <_i2c_master_read_packet+0x56>
     302:	46c0      	nop			; (mov r8, r8)
     304:	fffbffff 	.word	0xfffbffff
     308:	00002c65 	.word	0x00002c65
     30c:	00002c39 	.word	0x00002c39
     310:	00002c09 	.word	0x00002c09

00000314 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     314:	1c93      	adds	r3, r2, #2
     316:	009b      	lsls	r3, r3, #2
     318:	18c3      	adds	r3, r0, r3
     31a:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     31c:	7e03      	ldrb	r3, [r0, #24]
     31e:	2101      	movs	r1, #1
     320:	4091      	lsls	r1, r2
     322:	430b      	orrs	r3, r1
     324:	b2db      	uxtb	r3, r3
     326:	7603      	strb	r3, [r0, #24]
}
     328:	4770      	bx	lr
	...

0000032c <i2c_master_read_packet_job>:
{
     32c:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     32e:	8b83      	ldrh	r3, [r0, #28]
     330:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     332:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     334:	2b00      	cmp	r3, #0
     336:	d001      	beq.n	33c <i2c_master_read_packet_job+0x10>
}
     338:	0010      	movs	r0, r2
     33a:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     33c:	3301      	adds	r3, #1
     33e:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     340:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     342:	4b02      	ldr	r3, [pc, #8]	; (34c <i2c_master_read_packet_job+0x20>)
     344:	4798      	blx	r3
     346:	0002      	movs	r2, r0
     348:	e7f6      	b.n	338 <i2c_master_read_packet_job+0xc>
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	0000024d 	.word	0x0000024d

00000350 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     350:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     352:	8b83      	ldrh	r3, [r0, #28]
     354:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     356:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     358:	2b00      	cmp	r3, #0
     35a:	d001      	beq.n	360 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     35c:	0010      	movs	r0, r2
     35e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     360:	3301      	adds	r3, #1
     362:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     364:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     366:	4b02      	ldr	r3, [pc, #8]	; (370 <i2c_master_write_packet_job+0x20>)
     368:	4798      	blx	r3
     36a:	0002      	movs	r2, r0
     36c:	e7f6      	b.n	35c <i2c_master_write_packet_job+0xc>
     36e:	46c0      	nop			; (mov r8, r8)
     370:	000001e5 	.word	0x000001e5

00000374 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     374:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     376:	0080      	lsls	r0, r0, #2
     378:	4b75      	ldr	r3, [pc, #468]	; (550 <_i2c_master_interrupt_handler+0x1dc>)
     37a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     37c:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     37e:	682b      	ldr	r3, [r5, #0]
     380:	011b      	lsls	r3, r3, #4
     382:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     384:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     386:	7e26      	ldrb	r6, [r4, #24]
     388:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     38a:	8b63      	ldrh	r3, [r4, #26]
     38c:	b29b      	uxth	r3, r3
     38e:	2b00      	cmp	r3, #0
     390:	d103      	bne.n	39a <_i2c_master_interrupt_handler+0x26>
     392:	8ba3      	ldrh	r3, [r4, #28]
     394:	b29b      	uxth	r3, r3
     396:	2b00      	cmp	r3, #0
     398:	d123      	bne.n	3e2 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     39a:	8b63      	ldrh	r3, [r4, #26]
     39c:	b29b      	uxth	r3, r3
     39e:	2b00      	cmp	r3, #0
     3a0:	d008      	beq.n	3b4 <_i2c_master_interrupt_handler+0x40>
     3a2:	8ba3      	ldrh	r3, [r4, #28]
     3a4:	b29b      	uxth	r3, r3
     3a6:	2b00      	cmp	r3, #0
     3a8:	d104      	bne.n	3b4 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     3aa:	3325      	adds	r3, #37	; 0x25
     3ac:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     3ae:	2b05      	cmp	r3, #5
     3b0:	d100      	bne.n	3b4 <_i2c_master_interrupt_handler+0x40>
     3b2:	e06d      	b.n	490 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     3b4:	8b63      	ldrh	r3, [r4, #26]
     3b6:	b29b      	uxth	r3, r3
     3b8:	2b00      	cmp	r3, #0
     3ba:	d024      	beq.n	406 <_i2c_master_interrupt_handler+0x92>
     3bc:	8ba3      	ldrh	r3, [r4, #28]
     3be:	b29b      	uxth	r3, r3
     3c0:	2b00      	cmp	r3, #0
     3c2:	d020      	beq.n	406 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     3c4:	8b6b      	ldrh	r3, [r5, #26]
     3c6:	069b      	lsls	r3, r3, #26
     3c8:	d500      	bpl.n	3cc <_i2c_master_interrupt_handler+0x58>
     3ca:	e081      	b.n	4d0 <_i2c_master_interrupt_handler+0x15c>
     3cc:	2a00      	cmp	r2, #0
     3ce:	d004      	beq.n	3da <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     3d0:	8ba3      	ldrh	r3, [r4, #28]
     3d2:	b29b      	uxth	r3, r3
     3d4:	2b01      	cmp	r3, #1
     3d6:	d100      	bne.n	3da <_i2c_master_interrupt_handler+0x66>
     3d8:	e07a      	b.n	4d0 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     3da:	2241      	movs	r2, #65	; 0x41
     3dc:	2325      	movs	r3, #37	; 0x25
     3de:	54e2      	strb	r2, [r4, r3]
     3e0:	e011      	b.n	406 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     3e2:	7e2b      	ldrb	r3, [r5, #24]
     3e4:	07db      	lsls	r3, r3, #31
     3e6:	d507      	bpl.n	3f8 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     3e8:	2301      	movs	r3, #1
     3ea:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     3ec:	8b6b      	ldrh	r3, [r5, #26]
     3ee:	079b      	lsls	r3, r3, #30
     3f0:	d52e      	bpl.n	450 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     3f2:	2241      	movs	r2, #65	; 0x41
     3f4:	2325      	movs	r3, #37	; 0x25
     3f6:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     3f8:	8ba3      	ldrh	r3, [r4, #28]
     3fa:	b29b      	uxth	r3, r3
     3fc:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     3fe:	2325      	movs	r3, #37	; 0x25
     400:	5ce3      	ldrb	r3, [r4, r3]
     402:	2b05      	cmp	r3, #5
     404:	d038      	beq.n	478 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     406:	8b63      	ldrh	r3, [r4, #26]
     408:	b29b      	uxth	r3, r3
     40a:	2b00      	cmp	r3, #0
     40c:	d007      	beq.n	41e <_i2c_master_interrupt_handler+0xaa>
     40e:	8ba3      	ldrh	r3, [r4, #28]
     410:	b29b      	uxth	r3, r3
     412:	2b00      	cmp	r3, #0
     414:	d103      	bne.n	41e <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     416:	3325      	adds	r3, #37	; 0x25
     418:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     41a:	2b05      	cmp	r3, #5
     41c:	d064      	beq.n	4e8 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     41e:	2325      	movs	r3, #37	; 0x25
     420:	5ce3      	ldrb	r3, [r4, r3]
     422:	2b05      	cmp	r3, #5
     424:	d013      	beq.n	44e <_i2c_master_interrupt_handler+0xda>
     426:	2325      	movs	r3, #37	; 0x25
     428:	5ce3      	ldrb	r3, [r4, r3]
     42a:	2b00      	cmp	r3, #0
     42c:	d00f      	beq.n	44e <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     42e:	2303      	movs	r3, #3
     430:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     432:	2300      	movs	r3, #0
     434:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     436:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     438:	3325      	adds	r3, #37	; 0x25
     43a:	5ce3      	ldrb	r3, [r4, r3]
     43c:	2b41      	cmp	r3, #65	; 0x41
     43e:	d003      	beq.n	448 <_i2c_master_interrupt_handler+0xd4>
     440:	7aa3      	ldrb	r3, [r4, #10]
     442:	2b00      	cmp	r3, #0
     444:	d000      	beq.n	448 <_i2c_master_interrupt_handler+0xd4>
     446:	e075      	b.n	534 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     448:	0773      	lsls	r3, r6, #29
     44a:	d500      	bpl.n	44e <_i2c_master_interrupt_handler+0xda>
     44c:	e07b      	b.n	546 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     44e:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     450:	8b6b      	ldrh	r3, [r5, #26]
     452:	075b      	lsls	r3, r3, #29
     454:	d5d0      	bpl.n	3f8 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     456:	2218      	movs	r2, #24
     458:	2325      	movs	r3, #37	; 0x25
     45a:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     45c:	2300      	movs	r3, #0
     45e:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     460:	7aa3      	ldrb	r3, [r4, #10]
     462:	2b00      	cmp	r3, #0
     464:	d0c8      	beq.n	3f8 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     466:	0020      	movs	r0, r4
     468:	4b3a      	ldr	r3, [pc, #232]	; (554 <_i2c_master_interrupt_handler+0x1e0>)
     46a:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     46c:	686a      	ldr	r2, [r5, #4]
     46e:	23c0      	movs	r3, #192	; 0xc0
     470:	029b      	lsls	r3, r3, #10
     472:	4313      	orrs	r3, r2
     474:	606b      	str	r3, [r5, #4]
     476:	e7bf      	b.n	3f8 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     478:	331f      	adds	r3, #31
     47a:	5ce3      	ldrb	r3, [r4, r3]
     47c:	2b00      	cmp	r3, #0
     47e:	d003      	beq.n	488 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     480:	0020      	movs	r0, r4
     482:	4b35      	ldr	r3, [pc, #212]	; (558 <_i2c_master_interrupt_handler+0x1e4>)
     484:	4798      	blx	r3
     486:	e7be      	b.n	406 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     488:	0020      	movs	r0, r4
     48a:	4b34      	ldr	r3, [pc, #208]	; (55c <_i2c_master_interrupt_handler+0x1e8>)
     48c:	4798      	blx	r3
     48e:	e7ba      	b.n	406 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     490:	331f      	adds	r3, #31
     492:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     494:	2b00      	cmp	r3, #0
     496:	d000      	beq.n	49a <_i2c_master_interrupt_handler+0x126>
     498:	e78c      	b.n	3b4 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     49a:	3303      	adds	r3, #3
     49c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     49e:	2300      	movs	r3, #0
     4a0:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     4a2:	3325      	adds	r3, #37	; 0x25
     4a4:	2200      	movs	r2, #0
     4a6:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     4a8:	7aa3      	ldrb	r3, [r4, #10]
     4aa:	2b00      	cmp	r3, #0
     4ac:	d107      	bne.n	4be <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     4ae:	2301      	movs	r3, #1
     4b0:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     4b2:	07f3      	lsls	r3, r6, #31
     4b4:	d5a7      	bpl.n	406 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     4b6:	68e3      	ldr	r3, [r4, #12]
     4b8:	0020      	movs	r0, r4
     4ba:	4798      	blx	r3
     4bc:	e7a3      	b.n	406 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     4be:	0020      	movs	r0, r4
     4c0:	4b24      	ldr	r3, [pc, #144]	; (554 <_i2c_master_interrupt_handler+0x1e0>)
     4c2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     4c4:	686a      	ldr	r2, [r5, #4]
     4c6:	23c0      	movs	r3, #192	; 0xc0
     4c8:	029b      	lsls	r3, r3, #10
     4ca:	4313      	orrs	r3, r2
     4cc:	606b      	str	r3, [r5, #4]
     4ce:	e7f0      	b.n	4b2 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     4d0:	2324      	movs	r3, #36	; 0x24
     4d2:	5ce3      	ldrb	r3, [r4, r3]
     4d4:	2b00      	cmp	r3, #0
     4d6:	d103      	bne.n	4e0 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     4d8:	0020      	movs	r0, r4
     4da:	4b20      	ldr	r3, [pc, #128]	; (55c <_i2c_master_interrupt_handler+0x1e8>)
     4dc:	4798      	blx	r3
     4de:	e792      	b.n	406 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     4e0:	0020      	movs	r0, r4
     4e2:	4b1d      	ldr	r3, [pc, #116]	; (558 <_i2c_master_interrupt_handler+0x1e4>)
     4e4:	4798      	blx	r3
     4e6:	e78e      	b.n	406 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     4e8:	331f      	adds	r3, #31
     4ea:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     4ec:	2b01      	cmp	r3, #1
     4ee:	d196      	bne.n	41e <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     4f0:	7e2b      	ldrb	r3, [r5, #24]
     4f2:	079b      	lsls	r3, r3, #30
     4f4:	d501      	bpl.n	4fa <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     4f6:	2302      	movs	r3, #2
     4f8:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     4fa:	2303      	movs	r3, #3
     4fc:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     4fe:	2300      	movs	r3, #0
     500:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     502:	3325      	adds	r3, #37	; 0x25
     504:	2200      	movs	r2, #0
     506:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     508:	07b3      	lsls	r3, r6, #30
     50a:	d503      	bpl.n	514 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     50c:	2324      	movs	r3, #36	; 0x24
     50e:	5ce3      	ldrb	r3, [r4, r3]
     510:	2b01      	cmp	r3, #1
     512:	d00b      	beq.n	52c <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     514:	07f3      	lsls	r3, r6, #31
     516:	d400      	bmi.n	51a <_i2c_master_interrupt_handler+0x1a6>
     518:	e781      	b.n	41e <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     51a:	2324      	movs	r3, #36	; 0x24
     51c:	5ce3      	ldrb	r3, [r4, r3]
     51e:	2b00      	cmp	r3, #0
     520:	d000      	beq.n	524 <_i2c_master_interrupt_handler+0x1b0>
     522:	e77c      	b.n	41e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     524:	68e3      	ldr	r3, [r4, #12]
     526:	0020      	movs	r0, r4
     528:	4798      	blx	r3
     52a:	e778      	b.n	41e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     52c:	6923      	ldr	r3, [r4, #16]
     52e:	0020      	movs	r0, r4
     530:	4798      	blx	r3
     532:	e774      	b.n	41e <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     534:	0020      	movs	r0, r4
     536:	4b07      	ldr	r3, [pc, #28]	; (554 <_i2c_master_interrupt_handler+0x1e0>)
     538:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     53a:	686a      	ldr	r2, [r5, #4]
     53c:	23e0      	movs	r3, #224	; 0xe0
     53e:	02db      	lsls	r3, r3, #11
     540:	4313      	orrs	r3, r2
     542:	606b      	str	r3, [r5, #4]
     544:	e780      	b.n	448 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     546:	6963      	ldr	r3, [r4, #20]
     548:	0020      	movs	r0, r4
     54a:	4798      	blx	r3
}
     54c:	e77f      	b.n	44e <_i2c_master_interrupt_handler+0xda>
     54e:	46c0      	nop			; (mov r8, r8)
     550:	20004dc4 	.word	0x20004dc4
     554:	00000115 	.word	0x00000115
     558:	00000121 	.word	0x00000121
     55c:	000001a9 	.word	0x000001a9

00000560 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
     560:	b5f0      	push	{r4, r5, r6, r7, lr}
     562:	b083      	sub	sp, #12
     564:	000d      	movs	r5, r1
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
     566:	4c21      	ldr	r4, [pc, #132]	; (5ec <calc_temperature+0x8c>)
     568:	47a0      	blx	r4
     56a:	1c07      	adds	r7, r0, #0
     56c:	8be8      	ldrh	r0, [r5, #30]
     56e:	47a0      	blx	r4
     570:	1c06      	adds	r6, r0, #0

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
     572:	4c1f      	ldr	r4, [pc, #124]	; (5f0 <calc_temperature+0x90>)
     574:	21dc      	movs	r1, #220	; 0xdc
     576:	0589      	lsls	r1, r1, #22
     578:	1c38      	adds	r0, r7, #0
     57a:	47a0      	blx	r4
     57c:	9001      	str	r0, [sp, #4]
     57e:	21e4      	movs	r1, #228	; 0xe4
     580:	0589      	lsls	r1, r1, #22
     582:	9600      	str	r6, [sp, #0]
     584:	1c30      	adds	r0, r6, #0
     586:	47a0      	blx	r4
     588:	1c01      	adds	r1, r0, #0
     58a:	4e1a      	ldr	r6, [pc, #104]	; (5f4 <calc_temperature+0x94>)
     58c:	9801      	ldr	r0, [sp, #4]
     58e:	47b0      	blx	r6
     590:	9001      	str	r0, [sp, #4]
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
     592:	21e2      	movs	r1, #226	; 0xe2
     594:	0589      	lsls	r1, r1, #22
     596:	1c38      	adds	r0, r7, #0
     598:	47a0      	blx	r4
     59a:	1c07      	adds	r7, r0, #0
     59c:	21ea      	movs	r1, #234	; 0xea
     59e:	0589      	lsls	r1, r1, #22
     5a0:	9800      	ldr	r0, [sp, #0]
     5a2:	47a0      	blx	r4
     5a4:	1c01      	adds	r1, r0, #0
     5a6:	1c38      	adds	r0, r7, #0
     5a8:	47b0      	blx	r6
     5aa:	1c06      	adds	r6, r0, #0
     5ac:	2320      	movs	r3, #32
     5ae:	5ee8      	ldrsh	r0, [r5, r3]
     5b0:	4f11      	ldr	r7, [pc, #68]	; (5f8 <calc_temperature+0x98>)
     5b2:	47b8      	blx	r7
     5b4:	1c01      	adds	r1, r0, #0
     5b6:	1c30      	adds	r0, r6, #0
     5b8:	47a0      	blx	r4
     5ba:	1c06      	adds	r6, r0, #0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
     5bc:	2322      	movs	r3, #34	; 0x22
     5be:	56e8      	ldrsb	r0, [r5, r3]
     5c0:	47b8      	blx	r7
     5c2:	2183      	movs	r1, #131	; 0x83
     5c4:	05c9      	lsls	r1, r1, #23
     5c6:	47a0      	blx	r4
     5c8:	1c07      	adds	r7, r0, #0
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
     5ca:	9801      	ldr	r0, [sp, #4]
     5cc:	1c01      	adds	r1, r0, #0
     5ce:	47a0      	blx	r4
     5d0:	1c01      	adds	r1, r0, #0
    var2 =
     5d2:	1c38      	adds	r0, r7, #0
     5d4:	47a0      	blx	r4
     5d6:	1c01      	adds	r1, r0, #0

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
     5d8:	1c30      	adds	r0, r6, #0
     5da:	4b08      	ldr	r3, [pc, #32]	; (5fc <calc_temperature+0x9c>)
     5dc:	4798      	blx	r3
     5de:	63a8      	str	r0, [r5, #56]	; 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
     5e0:	4907      	ldr	r1, [pc, #28]	; (600 <calc_temperature+0xa0>)
     5e2:	4b08      	ldr	r3, [pc, #32]	; (604 <calc_temperature+0xa4>)
     5e4:	4798      	blx	r3

    return calc_temp;
}
     5e6:	b003      	add	sp, #12
     5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	0000bad1 	.word	0x0000bad1
     5f0:	0000b479 	.word	0x0000b479
     5f4:	0000b6b9 	.word	0x0000b6b9
     5f8:	0000ba31 	.word	0x0000ba31
     5fc:	0000ad75 	.word	0x0000ad75
     600:	45a00000 	.word	0x45a00000
     604:	0000b099 	.word	0x0000b099

00000608 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
     608:	b5f0      	push	{r4, r5, r6, r7, lr}
     60a:	46ce      	mov	lr, r9
     60c:	b500      	push	{lr}
     60e:	b084      	sub	sp, #16
     610:	9002      	str	r0, [sp, #8]
     612:	4689      	mov	r9, r1
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
     614:	4f5e      	ldr	r7, [pc, #376]	; (790 <calc_pressure+0x188>)
     616:	21fc      	movs	r1, #252	; 0xfc
     618:	0589      	lsls	r1, r1, #22
     61a:	464b      	mov	r3, r9
     61c:	6b98      	ldr	r0, [r3, #56]	; 0x38
     61e:	47b8      	blx	r7
     620:	495c      	ldr	r1, [pc, #368]	; (794 <calc_pressure+0x18c>)
     622:	4b5d      	ldr	r3, [pc, #372]	; (798 <calc_pressure+0x190>)
     624:	4798      	blx	r3
     626:	1c04      	adds	r4, r0, #0
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
     628:	2328      	movs	r3, #40	; 0x28
     62a:	464a      	mov	r2, r9
     62c:	56d0      	ldrsb	r0, [r2, r3]
     62e:	4e5b      	ldr	r6, [pc, #364]	; (79c <calc_pressure+0x194>)
     630:	47b0      	blx	r6
     632:	1c21      	adds	r1, r4, #0
     634:	47b8      	blx	r7
     636:	1c21      	adds	r1, r4, #0
     638:	47b8      	blx	r7
     63a:	21e2      	movs	r1, #226	; 0xe2
     63c:	0589      	lsls	r1, r1, #22
     63e:	47b8      	blx	r7
     640:	1c05      	adds	r5, r0, #0
     642:	464b      	mov	r3, r9
     644:	2026      	movs	r0, #38	; 0x26
     646:	5e18      	ldrsh	r0, [r3, r0]
     648:	47b0      	blx	r6
     64a:	1c21      	adds	r1, r4, #0
     64c:	47b8      	blx	r7
     64e:	1c01      	adds	r1, r0, #0
     650:	4e53      	ldr	r6, [pc, #332]	; (7a0 <calc_pressure+0x198>)
     652:	1c28      	adds	r0, r5, #0
     654:	47b0      	blx	r6
     656:	21d8      	movs	r1, #216	; 0xd8
     658:	0589      	lsls	r1, r1, #22
     65a:	47b8      	blx	r7
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
     65c:	21e0      	movs	r1, #224	; 0xe0
     65e:	0589      	lsls	r1, r1, #22
     660:	47b8      	blx	r7
     662:	21fe      	movs	r1, #254	; 0xfe
     664:	0589      	lsls	r1, r1, #22
     666:	47b0      	blx	r6
     668:	1c05      	adds	r5, r0, #0
     66a:	464b      	mov	r3, r9
     66c:	8c98      	ldrh	r0, [r3, #36]	; 0x24
     66e:	4b4d      	ldr	r3, [pc, #308]	; (7a4 <calc_pressure+0x19c>)
     670:	4798      	blx	r3
     672:	1c29      	adds	r1, r5, #0
     674:	47b8      	blx	r7
    calc_pres = (1048576.0f - ((float)pres_adc));

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
     676:	9001      	str	r0, [sp, #4]
     678:	4b4b      	ldr	r3, [pc, #300]	; (7a8 <calc_pressure+0x1a0>)
     67a:	4798      	blx	r3
     67c:	2800      	cmp	r0, #0
     67e:	d100      	bne.n	682 <calc_pressure+0x7a>
     680:	e083      	b.n	78a <calc_pressure+0x182>
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
     682:	232e      	movs	r3, #46	; 0x2e
     684:	464a      	mov	r2, r9
     686:	56d0      	ldrsb	r0, [r2, r3]
     688:	4d44      	ldr	r5, [pc, #272]	; (79c <calc_pressure+0x194>)
     68a:	47a8      	blx	r5
     68c:	003e      	movs	r6, r7
     68e:	21dc      	movs	r1, #220	; 0xdc
     690:	0589      	lsls	r1, r1, #22
     692:	47b8      	blx	r7
     694:	1c07      	adds	r7, r0, #0
     696:	1c21      	adds	r1, r4, #0
     698:	1c20      	adds	r0, r4, #0
     69a:	47b0      	blx	r6
     69c:	1c01      	adds	r1, r0, #0
     69e:	1c38      	adds	r0, r7, #0
     6a0:	47b0      	blx	r6
     6a2:	1c07      	adds	r7, r0, #0
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
     6a4:	464a      	mov	r2, r9
     6a6:	202c      	movs	r0, #44	; 0x2c
     6a8:	5e10      	ldrsh	r0, [r2, r0]
     6aa:	47a8      	blx	r5
     6ac:	1c21      	adds	r1, r4, #0
     6ae:	47b0      	blx	r6
     6b0:	4c3b      	ldr	r4, [pc, #236]	; (7a0 <calc_pressure+0x198>)
     6b2:	1c01      	adds	r1, r0, #0
     6b4:	47a0      	blx	r4
     6b6:	1c39      	adds	r1, r7, #0
     6b8:	47a0      	blx	r4
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
     6ba:	21fa      	movs	r1, #250	; 0xfa
     6bc:	0589      	lsls	r1, r1, #22
     6be:	47b0      	blx	r6
     6c0:	9003      	str	r0, [sp, #12]
    calc_pres = (1048576.0f - ((float)pres_adc));
     6c2:	9802      	ldr	r0, [sp, #8]
     6c4:	4b37      	ldr	r3, [pc, #220]	; (7a4 <calc_pressure+0x19c>)
     6c6:	4798      	blx	r3
     6c8:	1c01      	adds	r1, r0, #0
     6ca:	4f33      	ldr	r7, [pc, #204]	; (798 <calc_pressure+0x190>)
     6cc:	2093      	movs	r0, #147	; 0x93
     6ce:	05c0      	lsls	r0, r0, #23
     6d0:	47b8      	blx	r7
     6d2:	9002      	str	r0, [sp, #8]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
     6d4:	464a      	mov	r2, r9
     6d6:	202a      	movs	r0, #42	; 0x2a
     6d8:	5e10      	ldrsh	r0, [r2, r0]
     6da:	47a8      	blx	r5
     6dc:	218f      	movs	r1, #143	; 0x8f
     6de:	05c9      	lsls	r1, r1, #23
     6e0:	47b0      	blx	r6
     6e2:	9903      	ldr	r1, [sp, #12]
     6e4:	47a0      	blx	r4
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
     6e6:	21e6      	movs	r1, #230	; 0xe6
     6e8:	0589      	lsls	r1, r1, #22
     6ea:	47b0      	blx	r6
     6ec:	1c01      	adds	r1, r0, #0
     6ee:	9802      	ldr	r0, [sp, #8]
     6f0:	47b8      	blx	r7
     6f2:	492e      	ldr	r1, [pc, #184]	; (7ac <calc_pressure+0x1a4>)
     6f4:	47b0      	blx	r6
     6f6:	9901      	ldr	r1, [sp, #4]
     6f8:	4b2d      	ldr	r3, [pc, #180]	; (7b0 <calc_pressure+0x1a8>)
     6fa:	4798      	blx	r3
     6fc:	1c07      	adds	r7, r0, #0
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
     6fe:	21ee      	movs	r1, #238	; 0xee
     700:	0589      	lsls	r1, r1, #22
     702:	47b0      	blx	r6
     704:	9001      	str	r0, [sp, #4]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
     706:	464a      	mov	r2, r9
     708:	2032      	movs	r0, #50	; 0x32
     70a:	5e10      	ldrsh	r0, [r2, r0]
     70c:	47a8      	blx	r5
     70e:	1c39      	adds	r1, r7, #0
     710:	47b0      	blx	r6
     712:	1c39      	adds	r1, r7, #0
     714:	47b0      	blx	r6
     716:	21c0      	movs	r1, #192	; 0xc0
     718:	0589      	lsls	r1, r1, #22
     71a:	47b0      	blx	r6
     71c:	9002      	str	r0, [sp, #8]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
     71e:	464a      	mov	r2, r9
     720:	2030      	movs	r0, #48	; 0x30
     722:	5e10      	ldrsh	r0, [r2, r0]
     724:	47a8      	blx	r5
     726:	21e0      	movs	r1, #224	; 0xe0
     728:	0589      	lsls	r1, r1, #22
     72a:	47b0      	blx	r6
     72c:	1c39      	adds	r1, r7, #0
     72e:	47b0      	blx	r6
     730:	1c01      	adds	r1, r0, #0
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
     732:	9802      	ldr	r0, [sp, #8]
     734:	47a0      	blx	r4
     736:	9002      	str	r0, [sp, #8]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
     738:	2334      	movs	r3, #52	; 0x34
     73a:	464a      	mov	r2, r9
     73c:	5cd0      	ldrb	r0, [r2, r3]
     73e:	47a8      	blx	r5
     740:	21dc      	movs	r1, #220	; 0xdc
     742:	0589      	lsls	r1, r1, #22
     744:	47b0      	blx	r6
     746:	9003      	str	r0, [sp, #12]
     748:	9b01      	ldr	r3, [sp, #4]
     74a:	1c19      	adds	r1, r3, #0
     74c:	1c18      	adds	r0, r3, #0
     74e:	47b0      	blx	r6
     750:	9901      	ldr	r1, [sp, #4]
     752:	47b0      	blx	r6
     754:	1c01      	adds	r1, r0, #0
     756:	9803      	ldr	r0, [sp, #12]
     758:	47b0      	blx	r6
     75a:	1c01      	adds	r1, r0, #0
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
     75c:	9802      	ldr	r0, [sp, #8]
     75e:	47a0      	blx	r4
     760:	9001      	str	r0, [sp, #4]
     762:	232f      	movs	r3, #47	; 0x2f
     764:	464a      	mov	r2, r9
     766:	56d0      	ldrsb	r0, [r2, r3]
     768:	47a8      	blx	r5
     76a:	2186      	movs	r1, #134	; 0x86
     76c:	05c9      	lsls	r1, r1, #23
     76e:	47b0      	blx	r6
     770:	1c01      	adds	r1, r0, #0
     772:	9801      	ldr	r0, [sp, #4]
     774:	47a0      	blx	r4
     776:	21f6      	movs	r1, #246	; 0xf6
     778:	0589      	lsls	r1, r1, #22
     77a:	47b0      	blx	r6
     77c:	1c01      	adds	r1, r0, #0
     77e:	1c38      	adds	r0, r7, #0
     780:	47a0      	blx	r4
    {
        calc_pres = 0;
    }

    return calc_pres;
}
     782:	b004      	add	sp, #16
     784:	bc04      	pop	{r2}
     786:	4691      	mov	r9, r2
     788:	bdf0      	pop	{r4, r5, r6, r7, pc}
        calc_pres = 0;
     78a:	2000      	movs	r0, #0
    return calc_pres;
     78c:	e7f9      	b.n	782 <calc_pressure+0x17a>
     78e:	46c0      	nop			; (mov r8, r8)
     790:	0000b479 	.word	0x0000b479
     794:	477a0000 	.word	0x477a0000
     798:	0000b6b9 	.word	0x0000b6b9
     79c:	0000ba31 	.word	0x0000ba31
     7a0:	0000ad75 	.word	0x0000ad75
     7a4:	0000bad1 	.word	0x0000bad1
     7a8:	0000b9f1 	.word	0x0000b9f1
     7ac:	45c35000 	.word	0x45c35000
     7b0:	0000b099 	.word	0x0000b099

000007b4 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
     7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7b6:	46ce      	mov	lr, r9
     7b8:	b500      	push	{lr}
     7ba:	b084      	sub	sp, #16
     7bc:	9001      	str	r0, [sp, #4]
     7be:	000d      	movs	r5, r1
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
     7c0:	493a      	ldr	r1, [pc, #232]	; (8ac <calc_humidity+0xf8>)
     7c2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
     7c4:	4b3a      	ldr	r3, [pc, #232]	; (8b0 <calc_humidity+0xfc>)
     7c6:	4798      	blx	r3
     7c8:	1c06      	adds	r6, r0, #0
    var1 = (float)((float)hum_adc) -
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
     7ca:	2015      	movs	r0, #21
     7cc:	5628      	ldrsb	r0, [r5, r0]
     7ce:	4b39      	ldr	r3, [pc, #228]	; (8b4 <calc_humidity+0x100>)
     7d0:	4699      	mov	r9, r3
     7d2:	4798      	blx	r3
     7d4:	4c38      	ldr	r4, [pc, #224]	; (8b8 <calc_humidity+0x104>)
     7d6:	21e2      	movs	r1, #226	; 0xe2
     7d8:	0589      	lsls	r1, r1, #22
     7da:	47a0      	blx	r4
     7dc:	9600      	str	r6, [sp, #0]
     7de:	1c31      	adds	r1, r6, #0
     7e0:	47a0      	blx	r4
     7e2:	4e36      	ldr	r6, [pc, #216]	; (8bc <calc_humidity+0x108>)
     7e4:	21fe      	movs	r1, #254	; 0xfe
     7e6:	0589      	lsls	r1, r1, #22
     7e8:	47b0      	blx	r6
     7ea:	1c07      	adds	r7, r0, #0
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
     7ec:	2016      	movs	r0, #22
     7ee:	5628      	ldrsb	r0, [r5, r0]
     7f0:	47c8      	blx	r9
     7f2:	21d6      	movs	r1, #214	; 0xd6
     7f4:	0589      	lsls	r1, r1, #22
     7f6:	47a0      	blx	r4
     7f8:	9900      	ldr	r1, [sp, #0]
     7fa:	47a0      	blx	r4
     7fc:	9900      	ldr	r1, [sp, #0]
     7fe:	47a0      	blx	r4
     800:	1c01      	adds	r1, r0, #0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
     802:	1c38      	adds	r0, r7, #0
     804:	47b0      	blx	r6
     806:	9002      	str	r0, [sp, #8]
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
     808:	8a68      	ldrh	r0, [r5, #18]
     80a:	4f2d      	ldr	r7, [pc, #180]	; (8c0 <calc_humidity+0x10c>)
     80c:	47b8      	blx	r7
     80e:	21da      	movs	r1, #218	; 0xda
     810:	0589      	lsls	r1, r1, #22
     812:	47a0      	blx	r4
     814:	1c01      	adds	r1, r0, #0
     816:	9802      	ldr	r0, [sp, #8]
     818:	47a0      	blx	r4
     81a:	9002      	str	r0, [sp, #8]
    var1 = (float)((float)hum_adc) -
     81c:	9801      	ldr	r0, [sp, #4]
     81e:	47b8      	blx	r7
     820:	9001      	str	r0, [sp, #4]
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
     822:	2014      	movs	r0, #20
     824:	5628      	ldrsb	r0, [r5, r0]
     826:	47c8      	blx	r9
     828:	21fc      	movs	r1, #252	; 0xfc
     82a:	0589      	lsls	r1, r1, #22
     82c:	47a0      	blx	r4
     82e:	9900      	ldr	r1, [sp, #0]
     830:	47a0      	blx	r4
     832:	9003      	str	r0, [sp, #12]
     834:	8a28      	ldrh	r0, [r5, #16]
     836:	47b8      	blx	r7
     838:	2183      	movs	r1, #131	; 0x83
     83a:	05c9      	lsls	r1, r1, #23
     83c:	47a0      	blx	r4
     83e:	1c01      	adds	r1, r0, #0
     840:	9803      	ldr	r0, [sp, #12]
     842:	47b0      	blx	r6
     844:	1c01      	adds	r1, r0, #0
    var1 = (float)((float)hum_adc) -
     846:	9801      	ldr	r0, [sp, #4]
     848:	4b1e      	ldr	r3, [pc, #120]	; (8c4 <calc_humidity+0x110>)
     84a:	4798      	blx	r3
     84c:	1c01      	adds	r1, r0, #0
    var2 = var1 *
     84e:	9802      	ldr	r0, [sp, #8]
     850:	47a0      	blx	r4
     852:	9001      	str	r0, [sp, #4]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
     854:	2018      	movs	r0, #24
     856:	5628      	ldrsb	r0, [r5, r0]
     858:	47c8      	blx	r9
     85a:	21d4      	movs	r1, #212	; 0xd4
     85c:	0589      	lsls	r1, r1, #22
     85e:	47a0      	blx	r4
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
     860:	9900      	ldr	r1, [sp, #0]
     862:	47a0      	blx	r4
     864:	9000      	str	r0, [sp, #0]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
     866:	7de8      	ldrb	r0, [r5, #23]
     868:	47b8      	blx	r7
     86a:	21e2      	movs	r1, #226	; 0xe2
     86c:	0589      	lsls	r1, r1, #22
     86e:	47a0      	blx	r4
     870:	1c01      	adds	r1, r0, #0
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
     872:	9800      	ldr	r0, [sp, #0]
     874:	47b0      	blx	r6
     876:	9d01      	ldr	r5, [sp, #4]
     878:	1c29      	adds	r1, r5, #0
     87a:	47a0      	blx	r4
     87c:	1c29      	adds	r1, r5, #0
     87e:	47a0      	blx	r4
     880:	1c29      	adds	r1, r5, #0
     882:	47b0      	blx	r6
     884:	1c04      	adds	r4, r0, #0
    if (calc_hum > 100.0f)
     886:	4910      	ldr	r1, [pc, #64]	; (8c8 <calc_humidity+0x114>)
     888:	4b10      	ldr	r3, [pc, #64]	; (8cc <calc_humidity+0x118>)
     88a:	4798      	blx	r3
     88c:	2800      	cmp	r0, #0
     88e:	d107      	bne.n	8a0 <calc_humidity+0xec>
    {
        calc_hum = 100.0f;
    }
    else if (calc_hum < 0.0f)
     890:	2100      	movs	r1, #0
     892:	1c20      	adds	r0, r4, #0
     894:	4b0e      	ldr	r3, [pc, #56]	; (8d0 <calc_humidity+0x11c>)
     896:	4798      	blx	r3
     898:	2800      	cmp	r0, #0
     89a:	d002      	beq.n	8a2 <calc_humidity+0xee>
    {
        calc_hum = 0.0f;
     89c:	2400      	movs	r4, #0
     89e:	e000      	b.n	8a2 <calc_humidity+0xee>
        calc_hum = 100.0f;
     8a0:	4c09      	ldr	r4, [pc, #36]	; (8c8 <calc_humidity+0x114>)
    }

    return calc_hum;
}
     8a2:	1c20      	adds	r0, r4, #0
     8a4:	b004      	add	sp, #16
     8a6:	bc04      	pop	{r2}
     8a8:	4691      	mov	r9, r2
     8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8ac:	45a00000 	.word	0x45a00000
     8b0:	0000b099 	.word	0x0000b099
     8b4:	0000ba31 	.word	0x0000ba31
     8b8:	0000b479 	.word	0x0000b479
     8bc:	0000ad75 	.word	0x0000ad75
     8c0:	0000bad1 	.word	0x0000bad1
     8c4:	0000b6b9 	.word	0x0000b6b9
     8c8:	42c80000 	.word	0x42c80000
     8cc:	0000acc9 	.word	0x0000acc9
     8d0:	0000aca1 	.word	0x0000aca1

000008d4 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
     8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8d6:	46de      	mov	lr, fp
     8d8:	4657      	mov	r7, sl
     8da:	464e      	mov	r6, r9
     8dc:	b5c0      	push	{r6, r7, lr}
     8de:	b0a2      	sub	sp, #136	; 0x88
     8e0:	0004      	movs	r4, r0
     8e2:	4689      	mov	r9, r1
     8e4:	0016      	movs	r6, r2
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
    const float lookup_k1_range[16] = {
     8e6:	ab12      	add	r3, sp, #72	; 0x48
     8e8:	469b      	mov	fp, r3
     8ea:	4d29      	ldr	r5, [pc, #164]	; (990 <calc_gas_resistance_low+0xbc>)
     8ec:	2240      	movs	r2, #64	; 0x40
     8ee:	0029      	movs	r1, r5
     8f0:	0018      	movs	r0, r3
     8f2:	4f28      	ldr	r7, [pc, #160]	; (994 <calc_gas_resistance_low+0xc0>)
     8f4:	47b8      	blx	r7
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
     8f6:	0029      	movs	r1, r5
     8f8:	3140      	adds	r1, #64	; 0x40
     8fa:	2240      	movs	r2, #64	; 0x40
     8fc:	a802      	add	r0, sp, #8
     8fe:	47b8      	blx	r7
    float gas_res_f = gas_res_adc;
     900:	4f25      	ldr	r7, [pc, #148]	; (998 <calc_gas_resistance_low+0xc4>)
     902:	0020      	movs	r0, r4
     904:	47b8      	blx	r7
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
     906:	2188      	movs	r1, #136	; 0x88
     908:	05c9      	lsls	r1, r1, #23
     90a:	4b24      	ldr	r3, [pc, #144]	; (99c <calc_gas_resistance_low+0xc8>)
     90c:	4798      	blx	r3
     90e:	9000      	str	r0, [sp, #0]
    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
     910:	233e      	movs	r3, #62	; 0x3e
     912:	56f0      	ldrsb	r0, [r6, r3]
     914:	4b22      	ldr	r3, [pc, #136]	; (9a0 <calc_gas_resistance_low+0xcc>)
     916:	4798      	blx	r3
     918:	4c22      	ldr	r4, [pc, #136]	; (9a4 <calc_gas_resistance_low+0xd0>)
     91a:	4923      	ldr	r1, [pc, #140]	; (9a8 <calc_gas_resistance_low+0xd4>)
     91c:	47a0      	blx	r4
     91e:	4e23      	ldr	r6, [pc, #140]	; (9ac <calc_gas_resistance_low+0xd8>)
     920:	4923      	ldr	r1, [pc, #140]	; (9b0 <calc_gas_resistance_low+0xdc>)
     922:	47b0      	blx	r6
     924:	9001      	str	r0, [sp, #4]
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
     926:	464b      	mov	r3, r9
     928:	009b      	lsls	r3, r3, #2
     92a:	469a      	mov	sl, r3
     92c:	4d21      	ldr	r5, [pc, #132]	; (9b4 <calc_gas_resistance_low+0xe0>)
     92e:	4922      	ldr	r1, [pc, #136]	; (9b8 <calc_gas_resistance_low+0xe4>)
     930:	465b      	mov	r3, fp
     932:	4652      	mov	r2, sl
     934:	58d0      	ldr	r0, [r2, r3]
     936:	47a8      	blx	r5
     938:	21fe      	movs	r1, #254	; 0xfe
     93a:	0589      	lsls	r1, r1, #22
     93c:	47b0      	blx	r6
     93e:	1c01      	adds	r1, r0, #0
     940:	9801      	ldr	r0, [sp, #4]
     942:	47a0      	blx	r4
     944:	1c01      	adds	r1, r0, #0
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
     946:	9800      	ldr	r0, [sp, #0]
     948:	47a8      	blx	r5
     94a:	21fe      	movs	r1, #254	; 0xfe
     94c:	0589      	lsls	r1, r1, #22
     94e:	47b0      	blx	r6
     950:	9000      	str	r0, [sp, #0]
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
     952:	4919      	ldr	r1, [pc, #100]	; (9b8 <calc_gas_resistance_low+0xe4>)
     954:	ab02      	add	r3, sp, #8
     956:	4652      	mov	r2, sl
     958:	58d0      	ldr	r0, [r2, r3]
     95a:	47a8      	blx	r5
     95c:	21fe      	movs	r1, #254	; 0xfe
     95e:	0589      	lsls	r1, r1, #22
     960:	47b0      	blx	r6
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
     962:	4916      	ldr	r1, [pc, #88]	; (9bc <calc_gas_resistance_low+0xe8>)
     964:	47a0      	blx	r4
     966:	1c06      	adds	r6, r0, #0
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
     968:	2001      	movs	r0, #1
     96a:	464b      	mov	r3, r9
     96c:	4098      	lsls	r0, r3
     96e:	47b8      	blx	r7
     970:	1c01      	adds	r1, r0, #0
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
     972:	1c30      	adds	r0, r6, #0
     974:	47a0      	blx	r4
     976:	1c01      	adds	r1, r0, #0
     978:	9800      	ldr	r0, [sp, #0]
     97a:	47a0      	blx	r4
     97c:	1c01      	adds	r1, r0, #0
     97e:	20fe      	movs	r0, #254	; 0xfe
     980:	0580      	lsls	r0, r0, #22
     982:	47a8      	blx	r5

    return calc_gas_res;
}
     984:	b022      	add	sp, #136	; 0x88
     986:	bc1c      	pop	{r2, r3, r4}
     988:	4691      	mov	r9, r2
     98a:	469a      	mov	sl, r3
     98c:	46a3      	mov	fp, r4
     98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     990:	0000d790 	.word	0x0000d790
     994:	0000864d 	.word	0x0000864d
     998:	0000bad1 	.word	0x0000bad1
     99c:	0000b6b9 	.word	0x0000b6b9
     9a0:	0000ba31 	.word	0x0000ba31
     9a4:	0000b479 	.word	0x0000b479
     9a8:	40a00000 	.word	0x40a00000
     9ac:	0000ad75 	.word	0x0000ad75
     9b0:	44a78000 	.word	0x44a78000
     9b4:	0000b099 	.word	0x0000b099
     9b8:	42c80000 	.word	0x42c80000
     9bc:	340637bd 	.word	0x340637bd

000009c0 <calc_res_heat>:
    return calc_gas_res;
}

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
     9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9c2:	46ce      	mov	lr, r9
     9c4:	b500      	push	{lr}
     9c6:	b082      	sub	sp, #8
     9c8:	0004      	movs	r4, r0
     9ca:	000d      	movs	r5, r1
    {
        temp = 400;
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
     9cc:	231a      	movs	r3, #26
     9ce:	5ec8      	ldrsh	r0, [r1, r3]
     9d0:	4b33      	ldr	r3, [pc, #204]	; (aa0 <calc_res_heat+0xe0>)
     9d2:	4798      	blx	r3
     9d4:	4e33      	ldr	r6, [pc, #204]	; (aa4 <calc_res_heat+0xe4>)
     9d6:	21e0      	movs	r1, #224	; 0xe0
     9d8:	0589      	lsls	r1, r1, #22
     9da:	47b0      	blx	r6
     9dc:	4932      	ldr	r1, [pc, #200]	; (aa8 <calc_res_heat+0xe8>)
     9de:	47b0      	blx	r6
     9e0:	4932      	ldr	r1, [pc, #200]	; (aac <calc_res_heat+0xec>)
     9e2:	4b33      	ldr	r3, [pc, #204]	; (ab0 <calc_res_heat+0xf0>)
     9e4:	4798      	blx	r3
     9e6:	1c06      	adds	r6, r0, #0
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
     9e8:	1c20      	adds	r0, r4, #0
     9ea:	23c8      	movs	r3, #200	; 0xc8
     9ec:	005b      	lsls	r3, r3, #1
     9ee:	429c      	cmp	r4, r3
     9f0:	d901      	bls.n	9f6 <calc_res_heat+0x36>
     9f2:	4b30      	ldr	r3, [pc, #192]	; (ab4 <calc_res_heat+0xf4>)
     9f4:	8818      	ldrh	r0, [r3, #0]
     9f6:	b280      	uxth	r0, r0
     9f8:	4f2f      	ldr	r7, [pc, #188]	; (ab8 <calc_res_heat+0xf8>)
     9fa:	47b8      	blx	r7
     9fc:	1c01      	adds	r1, r0, #0
     9fe:	4c29      	ldr	r4, [pc, #164]	; (aa4 <calc_res_heat+0xe4>)
     a00:	1c30      	adds	r0, r6, #0
     a02:	47a0      	blx	r4
     a04:	4e2a      	ldr	r6, [pc, #168]	; (ab0 <calc_res_heat+0xf0>)
     a06:	21fe      	movs	r1, #254	; 0xfe
     a08:	0589      	lsls	r1, r1, #22
     a0a:	47b0      	blx	r6
     a0c:	9000      	str	r0, [sp, #0]
    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
     a0e:	2019      	movs	r0, #25
     a10:	5628      	ldrsb	r0, [r5, r0]
     a12:	4b23      	ldr	r3, [pc, #140]	; (aa0 <calc_res_heat+0xe0>)
     a14:	4699      	mov	r9, r3
     a16:	4798      	blx	r3
     a18:	21f6      	movs	r1, #246	; 0xf6
     a1a:	0589      	lsls	r1, r1, #22
     a1c:	47a0      	blx	r4
     a1e:	4927      	ldr	r1, [pc, #156]	; (abc <calc_res_heat+0xfc>)
     a20:	47b0      	blx	r6
     a22:	1c01      	adds	r1, r0, #0
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
     a24:	9800      	ldr	r0, [sp, #0]
     a26:	47a0      	blx	r4
     a28:	9000      	str	r0, [sp, #0]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
     a2a:	201c      	movs	r0, #28
     a2c:	5628      	ldrsb	r0, [r5, r0]
     a2e:	47c8      	blx	r9
     a30:	21ea      	movs	r1, #234	; 0xea
     a32:	0589      	lsls	r1, r1, #22
     a34:	47a0      	blx	r4
     a36:	9001      	str	r0, [sp, #4]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
     a38:	200e      	movs	r0, #14
     a3a:	5628      	ldrsb	r0, [r5, r0]
     a3c:	47c8      	blx	r9
     a3e:	1c01      	adds	r1, r0, #0
     a40:	9801      	ldr	r0, [sp, #4]
     a42:	47a0      	blx	r4
     a44:	1c01      	adds	r1, r0, #0
     a46:	9800      	ldr	r0, [sp, #0]
     a48:	47b0      	blx	r6
     a4a:	9000      	str	r0, [sp, #0]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
     a4c:	233c      	movs	r3, #60	; 0x3c
     a4e:	5ce8      	ldrb	r0, [r5, r3]
     a50:	47b8      	blx	r7
     a52:	2181      	movs	r1, #129	; 0x81
     a54:	05c9      	lsls	r1, r1, #23
     a56:	47b0      	blx	r6
     a58:	1c01      	adds	r1, r0, #0
     a5a:	4f19      	ldr	r7, [pc, #100]	; (ac0 <calc_res_heat+0x100>)
     a5c:	2081      	movs	r0, #129	; 0x81
     a5e:	05c0      	lsls	r0, r0, #23
     a60:	47b8      	blx	r7
     a62:	1c01      	adds	r1, r0, #0
     a64:	9800      	ldr	r0, [sp, #0]
     a66:	47a0      	blx	r4
     a68:	9000      	str	r0, [sp, #0]
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
     a6a:	233d      	movs	r3, #61	; 0x3d
     a6c:	56e8      	ldrsb	r0, [r5, r3]
     a6e:	47c8      	blx	r9
     a70:	4914      	ldr	r1, [pc, #80]	; (ac4 <calc_res_heat+0x104>)
     a72:	47a0      	blx	r4
     a74:	21fe      	movs	r1, #254	; 0xfe
     a76:	0589      	lsls	r1, r1, #22
     a78:	47b0      	blx	r6
     a7a:	1c01      	adds	r1, r0, #0
     a7c:	20fe      	movs	r0, #254	; 0xfe
     a7e:	0580      	lsls	r0, r0, #22
     a80:	47b8      	blx	r7
     a82:	1c01      	adds	r1, r0, #0
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
     a84:	9800      	ldr	r0, [sp, #0]
     a86:	47a0      	blx	r4
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
     a88:	490f      	ldr	r1, [pc, #60]	; (ac8 <calc_res_heat+0x108>)
     a8a:	4b10      	ldr	r3, [pc, #64]	; (acc <calc_res_heat+0x10c>)
     a8c:	4798      	blx	r3
        (uint8_t)(3.4f *
     a8e:	4910      	ldr	r1, [pc, #64]	; (ad0 <calc_res_heat+0x110>)
     a90:	47a0      	blx	r4
    res_heat =
     a92:	4b10      	ldr	r3, [pc, #64]	; (ad4 <calc_res_heat+0x114>)
     a94:	4798      	blx	r3
                   25));

    return res_heat;
     a96:	b2c0      	uxtb	r0, r0
}
     a98:	b002      	add	sp, #8
     a9a:	bc04      	pop	{r2}
     a9c:	4691      	mov	r9, r2
     a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     aa0:	0000ba31 	.word	0x0000ba31
     aa4:	0000b479 	.word	0x0000b479
     aa8:	3a03126f 	.word	0x3a03126f
     aac:	3b1a0275 	.word	0x3b1a0275
     ab0:	0000ad75 	.word	0x0000ad75
     ab4:	0000d78c 	.word	0x0000d78c
     ab8:	0000bad1 	.word	0x0000bad1
     abc:	42440000 	.word	0x42440000
     ac0:	0000b099 	.word	0x0000b099
     ac4:	3b03126f 	.word	0x3b03126f
     ac8:	41c80000 	.word	0x41c80000
     acc:	0000b6b9 	.word	0x0000b6b9
     ad0:	4059999a 	.word	0x4059999a
     ad4:	0000ad45 	.word	0x0000ad45

00000ad8 <null_ptr_check>:
/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
    int8_t rslt = BME68X_OK;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay__us == NULL))
     ad8:	2800      	cmp	r0, #0
     ada:	d00a      	beq.n	af2 <null_ptr_check+0x1a>
     adc:	6c03      	ldr	r3, [r0, #64]	; 0x40
     ade:	2b00      	cmp	r3, #0
     ae0:	d00a      	beq.n	af8 <null_ptr_check+0x20>
     ae2:	6c43      	ldr	r3, [r0, #68]	; 0x44
     ae4:	2b00      	cmp	r3, #0
     ae6:	d00a      	beq.n	afe <null_ptr_check+0x26>
     ae8:	6c83      	ldr	r3, [r0, #72]	; 0x48
     aea:	4258      	negs	r0, r3
     aec:	4158      	adcs	r0, r3
     aee:	4240      	negs	r0, r0
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
    }

    return rslt;
}
     af0:	4770      	bx	lr
        rslt = BME68X_E_NULL_PTR;
     af2:	2001      	movs	r0, #1
     af4:	4240      	negs	r0, r0
     af6:	e7fb      	b.n	af0 <null_ptr_check+0x18>
     af8:	2001      	movs	r0, #1
     afa:	4240      	negs	r0, r0
     afc:	e7f8      	b.n	af0 <null_ptr_check+0x18>
     afe:	2001      	movs	r0, #1
     b00:	4240      	negs	r0, r0
     b02:	e7f5      	b.n	af0 <null_ptr_check+0x18>

00000b04 <set_mem_page>:
{
     b04:	b530      	push	{r4, r5, lr}
     b06:	b083      	sub	sp, #12
     b08:	0004      	movs	r4, r0
     b0a:	000d      	movs	r5, r1
    rslt = null_ptr_check(dev);
     b0c:	0008      	movs	r0, r1
     b0e:	4b18      	ldr	r3, [pc, #96]	; (b70 <set_mem_page+0x6c>)
     b10:	4798      	blx	r3
    if (rslt == BME68X_OK)
     b12:	2800      	cmp	r0, #0
     b14:	d114      	bne.n	b40 <set_mem_page+0x3c>
        if (reg_addr > 0x7f)
     b16:	b263      	sxtb	r3, r4
            mem_page = BME68X_MEM_PAGE0;
     b18:	43db      	mvns	r3, r3
     b1a:	0fdb      	lsrs	r3, r3, #31
     b1c:	011b      	lsls	r3, r3, #4
        if (mem_page != dev->mem_page)
     b1e:	7b6a      	ldrb	r2, [r5, #13]
     b20:	429a      	cmp	r2, r3
     b22:	d00d      	beq.n	b40 <set_mem_page+0x3c>
            dev->mem_page = mem_page;
     b24:	736b      	strb	r3, [r5, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
     b26:	686b      	ldr	r3, [r5, #4]
     b28:	2201      	movs	r2, #1
     b2a:	4669      	mov	r1, sp
     b2c:	3107      	adds	r1, #7
     b2e:	30f3      	adds	r0, #243	; 0xf3
     b30:	6c2c      	ldr	r4, [r5, #64]	; 0x40
     b32:	47a0      	blx	r4
     b34:	234c      	movs	r3, #76	; 0x4c
     b36:	54e8      	strb	r0, [r5, r3]
            if (dev->intf_rslt != 0)
     b38:	2800      	cmp	r0, #0
     b3a:	d003      	beq.n	b44 <set_mem_page+0x40>
                rslt = BME68X_E_COM_FAIL;
     b3c:	2002      	movs	r0, #2
     b3e:	4240      	negs	r0, r0
}
     b40:	b003      	add	sp, #12
     b42:	bd30      	pop	{r4, r5, pc}
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
     b44:	466b      	mov	r3, sp
     b46:	1dd9      	adds	r1, r3, #7
     b48:	7b6a      	ldrb	r2, [r5, #13]
     b4a:	2310      	movs	r3, #16
     b4c:	4013      	ands	r3, r2
                reg = reg & (~BME68X_MEM_PAGE_MSK);
     b4e:	780a      	ldrb	r2, [r1, #0]
     b50:	2010      	movs	r0, #16
     b52:	4382      	bics	r2, r0
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
     b54:	4313      	orrs	r3, r2
     b56:	700b      	strb	r3, [r1, #0]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
     b58:	686b      	ldr	r3, [r5, #4]
     b5a:	2201      	movs	r2, #1
     b5c:	3063      	adds	r0, #99	; 0x63
     b5e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
     b60:	47a0      	blx	r4
     b62:	224c      	movs	r2, #76	; 0x4c
     b64:	54a8      	strb	r0, [r5, r2]
                if (dev->intf_rslt != 0)
     b66:	2800      	cmp	r0, #0
     b68:	d0ea      	beq.n	b40 <set_mem_page+0x3c>
                    rslt = BME68X_E_COM_FAIL;
     b6a:	2002      	movs	r0, #2
     b6c:	4240      	negs	r0, r0
    return rslt;
     b6e:	e7e7      	b.n	b40 <set_mem_page+0x3c>
     b70:	00000ad9 	.word	0x00000ad9

00000b74 <get_mem_page>:
{
     b74:	b530      	push	{r4, r5, lr}
     b76:	b083      	sub	sp, #12
     b78:	0004      	movs	r4, r0
    rslt = null_ptr_check(dev);
     b7a:	4b0d      	ldr	r3, [pc, #52]	; (bb0 <get_mem_page+0x3c>)
     b7c:	4798      	blx	r3
    if (rslt == BME68X_OK)
     b7e:	2800      	cmp	r0, #0
     b80:	d001      	beq.n	b86 <get_mem_page+0x12>
}
     b82:	b003      	add	sp, #12
     b84:	bd30      	pop	{r4, r5, pc}
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
     b86:	6863      	ldr	r3, [r4, #4]
     b88:	2201      	movs	r2, #1
     b8a:	4669      	mov	r1, sp
     b8c:	3107      	adds	r1, #7
     b8e:	30f3      	adds	r0, #243	; 0xf3
     b90:	6c25      	ldr	r5, [r4, #64]	; 0x40
     b92:	47a8      	blx	r5
     b94:	224c      	movs	r2, #76	; 0x4c
     b96:	54a0      	strb	r0, [r4, r2]
        if (dev->intf_rslt != 0)
     b98:	2800      	cmp	r0, #0
     b9a:	d105      	bne.n	ba8 <get_mem_page+0x34>
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
     b9c:	466b      	mov	r3, sp
     b9e:	79da      	ldrb	r2, [r3, #7]
     ba0:	2310      	movs	r3, #16
     ba2:	4013      	ands	r3, r2
     ba4:	7363      	strb	r3, [r4, #13]
     ba6:	e7ec      	b.n	b82 <get_mem_page+0xe>
            rslt = BME68X_E_COM_FAIL;
     ba8:	2002      	movs	r0, #2
     baa:	4240      	negs	r0, r0
     bac:	e7e9      	b.n	b82 <get_mem_page+0xe>
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	00000ad9 	.word	0x00000ad9

00000bb4 <boundary_check>:
{
     bb4:	b570      	push	{r4, r5, r6, lr}
     bb6:	0004      	movs	r4, r0
     bb8:	000e      	movs	r6, r1
     bba:	0015      	movs	r5, r2
    rslt = null_ptr_check(dev);
     bbc:	0010      	movs	r0, r2
     bbe:	4b0b      	ldr	r3, [pc, #44]	; (bec <boundary_check+0x38>)
     bc0:	4798      	blx	r3
    if ((value != NULL) && (rslt == BME68X_OK))
     bc2:	2c00      	cmp	r4, #0
     bc4:	d00b      	beq.n	bde <boundary_check+0x2a>
     bc6:	2800      	cmp	r0, #0
     bc8:	d10c      	bne.n	be4 <boundary_check+0x30>
        if (*value > max)
     bca:	7823      	ldrb	r3, [r4, #0]
     bcc:	42b3      	cmp	r3, r6
     bce:	d905      	bls.n	bdc <boundary_check+0x28>
            *value = max;
     bd0:	7026      	strb	r6, [r4, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
     bd2:	224d      	movs	r2, #77	; 0x4d
     bd4:	5cab      	ldrb	r3, [r5, r2]
     bd6:	2101      	movs	r1, #1
     bd8:	430b      	orrs	r3, r1
     bda:	54ab      	strb	r3, [r5, r2]
}
     bdc:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BME68X_E_NULL_PTR;
     bde:	2001      	movs	r0, #1
     be0:	4240      	negs	r0, r0
     be2:	e7fb      	b.n	bdc <boundary_check+0x28>
     be4:	2001      	movs	r0, #1
     be6:	4240      	negs	r0, r0
     be8:	e7f8      	b.n	bdc <boundary_check+0x28>
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	00000ad9 	.word	0x00000ad9

00000bf0 <bme68x_i2c_read>:

/*!
 * I2C read function map to SAMD21 Platform
 */
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
     bf0:	b570      	push	{r4, r5, r6, lr}
     bf2:	b082      	sub	sp, #8
     bf4:	000e      	movs	r6, r1
     bf6:	0015      	movs	r5, r2

    //(void)intf_ptr;

	uint8_t reg_add;

	Bme680Data.lenIn = len;
     bf8:	4b0c      	ldr	r3, [pc, #48]	; (c2c <bme68x_i2c_read+0x3c>)
     bfa:	819a      	strh	r2, [r3, #12]
	Bme680Data.msgIn = MsgOutBme680;
     bfc:	4c0c      	ldr	r4, [pc, #48]	; (c30 <bme68x_i2c_read+0x40>)
     bfe:	609c      	str	r4, [r3, #8]

	reg_add = reg_addr;
     c00:	466a      	mov	r2, sp
     c02:	71d0      	strb	r0, [r2, #7]
     c04:	3207      	adds	r2, #7
	Bme680Data.msgOut = &reg_add;
     c06:	605a      	str	r2, [r3, #4]
	Bme680Data.lenOut = 1;
     c08:	2201      	movs	r2, #1
     c0a:	81da      	strh	r2, [r3, #14]
	Bme680Data.address = BME68X_I2C_ADDR_HIGH;
     c0c:	3276      	adds	r2, #118	; 0x76
     c0e:	701a      	strb	r2, [r3, #0]

	I2cReadDataWait(&Bme680Data, 0, 1000);
     c10:	22fa      	movs	r2, #250	; 0xfa
     c12:	0092      	lsls	r2, r2, #2
     c14:	2100      	movs	r1, #0
     c16:	0018      	movs	r0, r3
     c18:	4b06      	ldr	r3, [pc, #24]	; (c34 <bme68x_i2c_read+0x44>)
     c1a:	4798      	blx	r3
	memcpy(reg_data, MsgOutBme680, len);
     c1c:	002a      	movs	r2, r5
     c1e:	0021      	movs	r1, r4
     c20:	0030      	movs	r0, r6
     c22:	4b05      	ldr	r3, [pc, #20]	; (c38 <bme68x_i2c_read+0x48>)
     c24:	4798      	blx	r3
	
	return BME68X_INTF_RET_SUCCESS;
}
     c26:	2000      	movs	r0, #0
     c28:	b002      	add	sp, #8
     c2a:	bd70      	pop	{r4, r5, r6, pc}
     c2c:	20003854 	.word	0x20003854
     c30:	20003864 	.word	0x20003864
     c34:	00002099 	.word	0x00002099
     c38:	0000864d 	.word	0x0000864d

00000c3c <bme68x_i2c_write>:

/*!
 * I2C write function map to SAMD21 Platform
 */
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
     c3c:	b570      	push	{r4, r5, r6, lr}
    //uint8_t device_addr = *(uint8_t*)intf_ptr;

    (void)intf_ptr;
	
	Bme680Data.lenIn = 0;
     c3e:	4c0a      	ldr	r4, [pc, #40]	; (c68 <bme68x_i2c_write+0x2c>)
     c40:	2300      	movs	r3, #0
     c42:	81a3      	strh	r3, [r4, #12]
	Bme680Data.lenOut = len+1; // accounting for register write byte as well.
     c44:	1c53      	adds	r3, r2, #1
     c46:	81e3      	strh	r3, [r4, #14]
	Bme680Data.msgIn =  MsgOutBme680;
     c48:	4b08      	ldr	r3, [pc, #32]	; (c6c <bme68x_i2c_write+0x30>)
     c4a:	60a3      	str	r3, [r4, #8]
	Bme680Data.msgOut = MsgOutBme680;
     c4c:	6063      	str	r3, [r4, #4]
	Bme680Data.address = BME68X_I2C_ADDR_HIGH;
     c4e:	2577      	movs	r5, #119	; 0x77
     c50:	7025      	strb	r5, [r4, #0]
	MsgOutBme680[0] = reg_addr;
     c52:	7018      	strb	r0, [r3, #0]
	
	/* Copying data into buffer starting from 2nd byte */
	memcpy(&MsgOutBme680[1], reg_data, len);
     c54:	1c58      	adds	r0, r3, #1
     c56:	4b06      	ldr	r3, [pc, #24]	; (c70 <bme68x_i2c_write+0x34>)
     c58:	4798      	blx	r3
	I2cWriteDataWait(&Bme680Data, 1000);
     c5a:	21fa      	movs	r1, #250	; 0xfa
     c5c:	0089      	lsls	r1, r1, #2
     c5e:	0020      	movs	r0, r4
     c60:	4b04      	ldr	r3, [pc, #16]	; (c74 <bme68x_i2c_write+0x38>)
     c62:	4798      	blx	r3
	
	return BME68X_INTF_RET_SUCCESS;
}
     c64:	2000      	movs	r0, #0
     c66:	bd70      	pop	{r4, r5, r6, pc}
     c68:	20003854 	.word	0x20003854
     c6c:	20003864 	.word	0x20003864
     c70:	0000864d 	.word	0x0000864d
     c74:	00002039 	.word	0x00002039

00000c78 <bme68x_delay__us>:

/*!
 * Delay function map to SAMD21 Platform
 */
void bme68x_delay__us(uint32_t period, void *intf_ptr)
{
     c78:	b510      	push	{r4, lr}
    (void)intf_ptr;
	vTaskDelay(pdMS_TO_TICKS((uint32_t) period / 1000.0f));  // Best I could do.
     c7a:	4b07      	ldr	r3, [pc, #28]	; (c98 <bme68x_delay__us+0x20>)
     c7c:	4798      	blx	r3
     c7e:	4907      	ldr	r1, [pc, #28]	; (c9c <bme68x_delay__us+0x24>)
     c80:	4b07      	ldr	r3, [pc, #28]	; (ca0 <bme68x_delay__us+0x28>)
     c82:	4798      	blx	r3
     c84:	4b07      	ldr	r3, [pc, #28]	; (ca4 <bme68x_delay__us+0x2c>)
     c86:	4798      	blx	r3
     c88:	21fa      	movs	r1, #250	; 0xfa
     c8a:	0089      	lsls	r1, r1, #2
     c8c:	4348      	muls	r0, r1
     c8e:	4b06      	ldr	r3, [pc, #24]	; (ca8 <bme68x_delay__us+0x30>)
     c90:	4798      	blx	r3
     c92:	4b06      	ldr	r3, [pc, #24]	; (cac <bme68x_delay__us+0x34>)
     c94:	4798      	blx	r3
}
     c96:	bd10      	pop	{r4, pc}
     c98:	0000bad1 	.word	0x0000bad1
     c9c:	447a0000 	.word	0x447a0000
     ca0:	0000b099 	.word	0x0000b099
     ca4:	0000ad45 	.word	0x0000ad45
     ca8:	0000a915 	.word	0x0000a915
     cac:	00005b69 	.word	0x00005b69

00000cb0 <bme68x_set_regs>:
{
     cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     cb2:	46de      	mov	lr, fp
     cb4:	4657      	mov	r7, sl
     cb6:	464e      	mov	r6, r9
     cb8:	4645      	mov	r5, r8
     cba:	b5e0      	push	{r5, r6, r7, lr}
     cbc:	b087      	sub	sp, #28
     cbe:	4681      	mov	r9, r0
     cc0:	468a      	mov	sl, r1
     cc2:	4690      	mov	r8, r2
     cc4:	001f      	movs	r7, r3
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
     cc6:	2214      	movs	r2, #20
     cc8:	2100      	movs	r1, #0
     cca:	a801      	add	r0, sp, #4
     ccc:	4b2e      	ldr	r3, [pc, #184]	; (d88 <bme68x_set_regs+0xd8>)
     cce:	4798      	blx	r3
    rslt = null_ptr_check(dev);
     cd0:	0038      	movs	r0, r7
     cd2:	4b2e      	ldr	r3, [pc, #184]	; (d8c <bme68x_set_regs+0xdc>)
     cd4:	4798      	blx	r3
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
     cd6:	2800      	cmp	r0, #0
     cd8:	d149      	bne.n	d6e <bme68x_set_regs+0xbe>
     cda:	464b      	mov	r3, r9
     cdc:	2b00      	cmp	r3, #0
     cde:	d049      	beq.n	d74 <bme68x_set_regs+0xc4>
     ce0:	4653      	mov	r3, sl
     ce2:	2b00      	cmp	r3, #0
     ce4:	d049      	beq.n	d7a <bme68x_set_regs+0xca>
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
     ce6:	4643      	mov	r3, r8
     ce8:	3b01      	subs	r3, #1
     cea:	2b09      	cmp	r3, #9
     cec:	d848      	bhi.n	d80 <bme68x_set_regs+0xd0>
            for (index = 0; index < len; index++)
     cee:	4643      	mov	r3, r8
     cf0:	2b00      	cmp	r3, #0
     cf2:	d02b      	beq.n	d4c <bme68x_set_regs+0x9c>
     cf4:	2500      	movs	r5, #0
     cf6:	2400      	movs	r4, #0
                    tmp_buff[(2 * index)] = reg_addr[index];
     cf8:	ae01      	add	r6, sp, #4
     cfa:	e016      	b.n	d2a <bme68x_set_regs+0x7a>
                    rslt = set_mem_page(reg_addr[index], dev);
     cfc:	46ab      	mov	fp, r5
     cfe:	44cb      	add	fp, r9
     d00:	465b      	mov	r3, fp
     d02:	7818      	ldrb	r0, [r3, #0]
     d04:	0039      	movs	r1, r7
     d06:	4b22      	ldr	r3, [pc, #136]	; (d90 <bme68x_set_regs+0xe0>)
     d08:	4798      	blx	r3
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
     d0a:	0063      	lsls	r3, r4, #1
     d0c:	465a      	mov	r2, fp
     d0e:	7812      	ldrb	r2, [r2, #0]
     d10:	217f      	movs	r1, #127	; 0x7f
     d12:	400a      	ands	r2, r1
     d14:	559a      	strb	r2, [r3, r6]
                tmp_buff[(2 * index) + 1] = reg_data[index];
     d16:	0063      	lsls	r3, r4, #1
     d18:	18f3      	adds	r3, r6, r3
     d1a:	4652      	mov	r2, sl
     d1c:	5d52      	ldrb	r2, [r2, r5]
     d1e:	705a      	strb	r2, [r3, #1]
            for (index = 0; index < len; index++)
     d20:	3401      	adds	r4, #1
     d22:	b2a4      	uxth	r4, r4
     d24:	0025      	movs	r5, r4
     d26:	45a0      	cmp	r8, r4
     d28:	d907      	bls.n	d3a <bme68x_set_regs+0x8a>
                if (dev->intf == BME68X_SPI_INTF)
     d2a:	7b3b      	ldrb	r3, [r7, #12]
     d2c:	2b00      	cmp	r3, #0
     d2e:	d0e5      	beq.n	cfc <bme68x_set_regs+0x4c>
                    tmp_buff[(2 * index)] = reg_addr[index];
     d30:	0063      	lsls	r3, r4, #1
     d32:	464a      	mov	r2, r9
     d34:	5d52      	ldrb	r2, [r2, r5]
     d36:	559a      	strb	r2, [r3, r6]
     d38:	e7ed      	b.n	d16 <bme68x_set_regs+0x66>
            if (rslt == BME68X_OK)
     d3a:	2800      	cmp	r0, #0
     d3c:	d006      	beq.n	d4c <bme68x_set_regs+0x9c>
}
     d3e:	b007      	add	sp, #28
     d40:	bc3c      	pop	{r2, r3, r4, r5}
     d42:	4690      	mov	r8, r2
     d44:	4699      	mov	r9, r3
     d46:	46a2      	mov	sl, r4
     d48:	46ab      	mov	fp, r5
     d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
     d4c:	4643      	mov	r3, r8
     d4e:	005a      	lsls	r2, r3, #1
     d50:	3a01      	subs	r2, #1
     d52:	ab01      	add	r3, sp, #4
     d54:	7818      	ldrb	r0, [r3, #0]
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	4669      	mov	r1, sp
     d5a:	3105      	adds	r1, #5
     d5c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
     d5e:	47a0      	blx	r4
     d60:	224c      	movs	r2, #76	; 0x4c
     d62:	54b8      	strb	r0, [r7, r2]
                if (dev->intf_rslt != 0)
     d64:	2800      	cmp	r0, #0
     d66:	d0ea      	beq.n	d3e <bme68x_set_regs+0x8e>
                    rslt = BME68X_E_COM_FAIL;
     d68:	2002      	movs	r0, #2
     d6a:	4240      	negs	r0, r0
     d6c:	e7e7      	b.n	d3e <bme68x_set_regs+0x8e>
        rslt = BME68X_E_NULL_PTR;
     d6e:	2001      	movs	r0, #1
     d70:	4240      	negs	r0, r0
     d72:	e7e4      	b.n	d3e <bme68x_set_regs+0x8e>
     d74:	2001      	movs	r0, #1
     d76:	4240      	negs	r0, r0
     d78:	e7e1      	b.n	d3e <bme68x_set_regs+0x8e>
     d7a:	2001      	movs	r0, #1
     d7c:	4240      	negs	r0, r0
     d7e:	e7de      	b.n	d3e <bme68x_set_regs+0x8e>
            rslt = BME68X_E_INVALID_LENGTH;
     d80:	2004      	movs	r0, #4
     d82:	4240      	negs	r0, r0
     d84:	e7db      	b.n	d3e <bme68x_set_regs+0x8e>
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	0000865f 	.word	0x0000865f
     d8c:	00000ad9 	.word	0x00000ad9
     d90:	00000b05 	.word	0x00000b05

00000d94 <bme68x_get_regs>:
{
     d94:	b5f0      	push	{r4, r5, r6, r7, lr}
     d96:	b083      	sub	sp, #12
     d98:	0006      	movs	r6, r0
     d9a:	000d      	movs	r5, r1
     d9c:	9201      	str	r2, [sp, #4]
     d9e:	001f      	movs	r7, r3
    rslt = null_ptr_check(dev);
     da0:	0018      	movs	r0, r3
     da2:	4b14      	ldr	r3, [pc, #80]	; (df4 <bme68x_get_regs+0x60>)
     da4:	4798      	blx	r3
     da6:	1e04      	subs	r4, r0, #0
    if ((rslt == BME68X_OK) && reg_data)
     da8:	d11d      	bne.n	de6 <bme68x_get_regs+0x52>
     daa:	2d00      	cmp	r5, #0
     dac:	d01e      	beq.n	dec <bme68x_get_regs+0x58>
        if (dev->intf == BME68X_SPI_INTF)
     dae:	7b3b      	ldrb	r3, [r7, #12]
     db0:	2b00      	cmp	r3, #0
     db2:	d00c      	beq.n	dce <bme68x_get_regs+0x3a>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	9a01      	ldr	r2, [sp, #4]
     db8:	0029      	movs	r1, r5
     dba:	0030      	movs	r0, r6
     dbc:	6c3d      	ldr	r5, [r7, #64]	; 0x40
     dbe:	47a8      	blx	r5
     dc0:	234c      	movs	r3, #76	; 0x4c
     dc2:	54f8      	strb	r0, [r7, r3]
        if (dev->intf_rslt != 0)
     dc4:	2800      	cmp	r0, #0
     dc6:	d10b      	bne.n	de0 <bme68x_get_regs+0x4c>
}
     dc8:	0020      	movs	r0, r4
     dca:	b003      	add	sp, #12
     dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rslt = set_mem_page(reg_addr, dev);
     dce:	0039      	movs	r1, r7
     dd0:	0030      	movs	r0, r6
     dd2:	4b09      	ldr	r3, [pc, #36]	; (df8 <bme68x_get_regs+0x64>)
     dd4:	4798      	blx	r3
     dd6:	1e04      	subs	r4, r0, #0
            if (rslt == BME68X_OK)
     dd8:	d1ec      	bne.n	db4 <bme68x_get_regs+0x20>
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
     dda:	2380      	movs	r3, #128	; 0x80
     ddc:	431e      	orrs	r6, r3
     dde:	e7e9      	b.n	db4 <bme68x_get_regs+0x20>
            rslt = BME68X_E_COM_FAIL;
     de0:	2402      	movs	r4, #2
     de2:	4264      	negs	r4, r4
     de4:	e7f0      	b.n	dc8 <bme68x_get_regs+0x34>
        rslt = BME68X_E_NULL_PTR;
     de6:	2401      	movs	r4, #1
     de8:	4264      	negs	r4, r4
     dea:	e7ed      	b.n	dc8 <bme68x_get_regs+0x34>
     dec:	2401      	movs	r4, #1
     dee:	4264      	negs	r4, r4
     df0:	e7ea      	b.n	dc8 <bme68x_get_regs+0x34>
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	00000ad9 	.word	0x00000ad9
     df8:	00000b05 	.word	0x00000b05

00000dfc <bme68x_soft_reset>:
{
     dfc:	b530      	push	{r4, r5, lr}
     dfe:	b083      	sub	sp, #12
     e00:	0005      	movs	r5, r0
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
     e02:	22e0      	movs	r2, #224	; 0xe0
     e04:	466b      	mov	r3, sp
     e06:	71da      	strb	r2, [r3, #7]
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
     e08:	3a2a      	subs	r2, #42	; 0x2a
     e0a:	466b      	mov	r3, sp
     e0c:	719a      	strb	r2, [r3, #6]
    rslt = null_ptr_check(dev);
     e0e:	4b12      	ldr	r3, [pc, #72]	; (e58 <bme68x_soft_reset+0x5c>)
     e10:	4798      	blx	r3
     e12:	1e04      	subs	r4, r0, #0
    if (rslt == BME68X_OK)
     e14:	d11d      	bne.n	e52 <bme68x_soft_reset+0x56>
        if (dev->intf == BME68X_SPI_INTF)
     e16:	7b2b      	ldrb	r3, [r5, #12]
     e18:	2b00      	cmp	r3, #0
     e1a:	d015      	beq.n	e48 <bme68x_soft_reset+0x4c>
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
     e1c:	002b      	movs	r3, r5
     e1e:	2201      	movs	r2, #1
     e20:	4669      	mov	r1, sp
     e22:	3106      	adds	r1, #6
     e24:	4668      	mov	r0, sp
     e26:	3007      	adds	r0, #7
     e28:	4c0c      	ldr	r4, [pc, #48]	; (e5c <bme68x_soft_reset+0x60>)
     e2a:	47a0      	blx	r4
     e2c:	1e04      	subs	r4, r0, #0
            if (rslt == BME68X_OK)
     e2e:	d110      	bne.n	e52 <bme68x_soft_reset+0x56>
                dev->delay__us(BME68X_PERIOD_RESET, dev->intf_ptr);
     e30:	6869      	ldr	r1, [r5, #4]
     e32:	480b      	ldr	r0, [pc, #44]	; (e60 <bme68x_soft_reset+0x64>)
     e34:	6cab      	ldr	r3, [r5, #72]	; 0x48
     e36:	4798      	blx	r3
                if (dev->intf == BME68X_SPI_INTF)
     e38:	7b2b      	ldrb	r3, [r5, #12]
     e3a:	2b00      	cmp	r3, #0
     e3c:	d109      	bne.n	e52 <bme68x_soft_reset+0x56>
                    rslt = get_mem_page(dev);
     e3e:	0028      	movs	r0, r5
     e40:	4b08      	ldr	r3, [pc, #32]	; (e64 <bme68x_soft_reset+0x68>)
     e42:	4798      	blx	r3
     e44:	0004      	movs	r4, r0
     e46:	e004      	b.n	e52 <bme68x_soft_reset+0x56>
            rslt = get_mem_page(dev);
     e48:	0028      	movs	r0, r5
     e4a:	4b06      	ldr	r3, [pc, #24]	; (e64 <bme68x_soft_reset+0x68>)
     e4c:	4798      	blx	r3
     e4e:	1e04      	subs	r4, r0, #0
        if (rslt == BME68X_OK)
     e50:	d0e4      	beq.n	e1c <bme68x_soft_reset+0x20>
}
     e52:	0020      	movs	r0, r4
     e54:	b003      	add	sp, #12
     e56:	bd30      	pop	{r4, r5, pc}
     e58:	00000ad9 	.word	0x00000ad9
     e5c:	00000cb1 	.word	0x00000cb1
     e60:	00002710 	.word	0x00002710
     e64:	00000b75 	.word	0x00000b75

00000e68 <bme68x_init>:
{
     e68:	b570      	push	{r4, r5, r6, lr}
     e6a:	b08c      	sub	sp, #48	; 0x30
     e6c:	0004      	movs	r4, r0
    (void) bme68x_soft_reset(dev);
     e6e:	4b52      	ldr	r3, [pc, #328]	; (fb8 <bme68x_init+0x150>)
     e70:	4798      	blx	r3
    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
     e72:	0023      	movs	r3, r4
     e74:	2201      	movs	r2, #1
     e76:	0021      	movs	r1, r4
     e78:	20d0      	movs	r0, #208	; 0xd0
     e7a:	4d50      	ldr	r5, [pc, #320]	; (fbc <bme68x_init+0x154>)
     e7c:	47a8      	blx	r5
     e7e:	1e05      	subs	r5, r0, #0
    if (rslt == BME68X_OK)
     e80:	d118      	bne.n	eb4 <bme68x_init+0x4c>
        if (dev->chip_id == BME68X_CHIP_ID)
     e82:	7823      	ldrb	r3, [r4, #0]
     e84:	2b61      	cmp	r3, #97	; 0x61
     e86:	d000      	beq.n	e8a <bme68x_init+0x22>
     e88:	e093      	b.n	fb2 <bme68x_init+0x14a>
    uint8_t reg_data = 0;
     e8a:	a901      	add	r1, sp, #4
     e8c:	2300      	movs	r3, #0
     e8e:	700b      	strb	r3, [r1, #0]
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
     e90:	0023      	movs	r3, r4
     e92:	2201      	movs	r2, #1
     e94:	20f0      	movs	r0, #240	; 0xf0
     e96:	4e49      	ldr	r6, [pc, #292]	; (fbc <bme68x_init+0x154>)
     e98:	47b0      	blx	r6
     e9a:	1e06      	subs	r6, r0, #0
    if (rslt == BME68X_OK)
     e9c:	d10a      	bne.n	eb4 <bme68x_init+0x4c>
        dev->variant_id = reg_data;
     e9e:	a901      	add	r1, sp, #4
     ea0:	780b      	ldrb	r3, [r1, #0]
     ea2:	60a3      	str	r3, [r4, #8]
    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
     ea4:	0023      	movs	r3, r4
     ea6:	2217      	movs	r2, #23
     ea8:	208a      	movs	r0, #138	; 0x8a
     eaa:	4d44      	ldr	r5, [pc, #272]	; (fbc <bme68x_init+0x154>)
     eac:	47a8      	blx	r5
    if (rslt == BME68X_OK)
     eae:	2800      	cmp	r0, #0
     eb0:	d003      	beq.n	eba <bme68x_init+0x52>
			rslt = BME68X_OK;
     eb2:	0035      	movs	r5, r6
}
     eb4:	0028      	movs	r0, r5
     eb6:	b00c      	add	sp, #48	; 0x30
     eb8:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
     eba:	0023      	movs	r3, r4
     ebc:	220e      	movs	r2, #14
     ebe:	211b      	movs	r1, #27
     ec0:	4469      	add	r1, sp
     ec2:	30e1      	adds	r0, #225	; 0xe1
     ec4:	4d3d      	ldr	r5, [pc, #244]	; (fbc <bme68x_init+0x154>)
     ec6:	47a8      	blx	r5
    if (rslt == BME68X_OK)
     ec8:	2800      	cmp	r0, #0
     eca:	d1f2      	bne.n	eb2 <bme68x_init+0x4a>
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
     ecc:	0023      	movs	r3, r4
     ece:	2205      	movs	r2, #5
     ed0:	2129      	movs	r1, #41	; 0x29
     ed2:	4469      	add	r1, sp
     ed4:	4d39      	ldr	r5, [pc, #228]	; (fbc <bme68x_init+0x154>)
     ed6:	47a8      	blx	r5
    if (rslt == BME68X_OK)
     ed8:	2800      	cmp	r0, #0
     eda:	d1ea      	bne.n	eb2 <bme68x_init+0x4a>
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
     edc:	ab01      	add	r3, sp, #4
     ede:	2220      	movs	r2, #32
     ee0:	5c99      	ldrb	r1, [r3, r2]
     ee2:	0209      	lsls	r1, r1, #8
     ee4:	7fda      	ldrb	r2, [r3, #31]
     ee6:	430a      	orrs	r2, r1
        dev->calib.par_t1 =
     ee8:	83e2      	strh	r2, [r4, #30]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
     eea:	7859      	ldrb	r1, [r3, #1]
     eec:	0209      	lsls	r1, r1, #8
     eee:	781a      	ldrb	r2, [r3, #0]
     ef0:	430a      	orrs	r2, r1
        dev->calib.par_t2 =
     ef2:	8422      	strh	r2, [r4, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
     ef4:	2522      	movs	r5, #34	; 0x22
     ef6:	789a      	ldrb	r2, [r3, #2]
     ef8:	5562      	strb	r2, [r4, r5]
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
     efa:	7959      	ldrb	r1, [r3, #5]
     efc:	0209      	lsls	r1, r1, #8
     efe:	791a      	ldrb	r2, [r3, #4]
     f00:	430a      	orrs	r2, r1
        dev->calib.par_p1 =
     f02:	84a2      	strh	r2, [r4, #36]	; 0x24
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
     f04:	79d9      	ldrb	r1, [r3, #7]
     f06:	0209      	lsls	r1, r1, #8
     f08:	799a      	ldrb	r2, [r3, #6]
     f0a:	430a      	orrs	r2, r1
        dev->calib.par_p2 =
     f0c:	84e2      	strh	r2, [r4, #38]	; 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
     f0e:	7a19      	ldrb	r1, [r3, #8]
     f10:	2228      	movs	r2, #40	; 0x28
     f12:	54a1      	strb	r1, [r4, r2]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
     f14:	7ad9      	ldrb	r1, [r3, #11]
     f16:	0209      	lsls	r1, r1, #8
     f18:	7a9a      	ldrb	r2, [r3, #10]
     f1a:	430a      	orrs	r2, r1
        dev->calib.par_p4 =
     f1c:	8562      	strh	r2, [r4, #42]	; 0x2a
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
     f1e:	7b59      	ldrb	r1, [r3, #13]
     f20:	0209      	lsls	r1, r1, #8
     f22:	7b1a      	ldrb	r2, [r3, #12]
     f24:	430a      	orrs	r2, r1
        dev->calib.par_p5 =
     f26:	85a2      	strh	r2, [r4, #44]	; 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
     f28:	7bd9      	ldrb	r1, [r3, #15]
     f2a:	222e      	movs	r2, #46	; 0x2e
     f2c:	54a1      	strb	r1, [r4, r2]
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
     f2e:	7b99      	ldrb	r1, [r3, #14]
     f30:	3201      	adds	r2, #1
     f32:	54a1      	strb	r1, [r4, r2]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
     f34:	7cd9      	ldrb	r1, [r3, #19]
     f36:	0209      	lsls	r1, r1, #8
     f38:	7c9a      	ldrb	r2, [r3, #18]
     f3a:	430a      	orrs	r2, r1
        dev->calib.par_p8 =
     f3c:	8622      	strh	r2, [r4, #48]	; 0x30
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
     f3e:	7d59      	ldrb	r1, [r3, #21]
     f40:	0209      	lsls	r1, r1, #8
     f42:	7d1a      	ldrb	r2, [r3, #20]
     f44:	430a      	orrs	r2, r1
        dev->calib.par_p9 =
     f46:	8662      	strh	r2, [r4, #50]	; 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
     f48:	7d99      	ldrb	r1, [r3, #22]
     f4a:	2234      	movs	r2, #52	; 0x34
     f4c:	54a1      	strb	r1, [r4, r2]
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
     f4e:	7e1a      	ldrb	r2, [r3, #24]
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
     f50:	7e58      	ldrb	r0, [r3, #25]
     f52:	0100      	lsls	r0, r0, #4
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
     f54:	210f      	movs	r1, #15
     f56:	4011      	ands	r1, r2
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
     f58:	4301      	orrs	r1, r0
        dev->calib.par_h1 =
     f5a:	8221      	strh	r1, [r4, #16]
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
     f5c:	7dd9      	ldrb	r1, [r3, #23]
     f5e:	0109      	lsls	r1, r1, #4
     f60:	0912      	lsrs	r2, r2, #4
     f62:	430a      	orrs	r2, r1
        dev->calib.par_h2 =
     f64:	8262      	strh	r2, [r4, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
     f66:	7e9a      	ldrb	r2, [r3, #26]
     f68:	7522      	strb	r2, [r4, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
     f6a:	7eda      	ldrb	r2, [r3, #27]
     f6c:	7562      	strb	r2, [r4, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
     f6e:	7f1a      	ldrb	r2, [r3, #28]
     f70:	75a2      	strb	r2, [r4, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
     f72:	7f5a      	ldrb	r2, [r3, #29]
     f74:	75e2      	strb	r2, [r4, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
     f76:	7f9a      	ldrb	r2, [r3, #30]
     f78:	7622      	strb	r2, [r4, #24]
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
     f7a:	2223      	movs	r2, #35	; 0x23
     f7c:	5c9a      	ldrb	r2, [r3, r2]
     f7e:	7662      	strb	r2, [r4, #25]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
     f80:	5d59      	ldrb	r1, [r3, r5]
     f82:	0209      	lsls	r1, r1, #8
     f84:	2221      	movs	r2, #33	; 0x21
     f86:	5c9a      	ldrb	r2, [r3, r2]
     f88:	430a      	orrs	r2, r1
        dev->calib.par_gh2 =
     f8a:	8362      	strh	r2, [r4, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
     f8c:	2224      	movs	r2, #36	; 0x24
     f8e:	5c9a      	ldrb	r2, [r3, r2]
     f90:	7722      	strb	r2, [r4, #28]
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
     f92:	2227      	movs	r2, #39	; 0x27
     f94:	5c9a      	ldrb	r2, [r3, r2]
     f96:	0692      	lsls	r2, r2, #26
     f98:	0f92      	lsrs	r2, r2, #30
     f9a:	213c      	movs	r1, #60	; 0x3c
     f9c:	5462      	strb	r2, [r4, r1]
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
     f9e:	2225      	movs	r2, #37	; 0x25
     fa0:	5c99      	ldrb	r1, [r3, r2]
     fa2:	3218      	adds	r2, #24
     fa4:	54a1      	strb	r1, [r4, r2]
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
     fa6:	3a14      	subs	r2, #20
     fa8:	569b      	ldrsb	r3, [r3, r2]
     faa:	111b      	asrs	r3, r3, #4
     fac:	3215      	adds	r2, #21
     fae:	54a3      	strb	r3, [r4, r2]
     fb0:	e77f      	b.n	eb2 <bme68x_init+0x4a>
            rslt = BME68X_E_DEV_NOT_FOUND;
     fb2:	2503      	movs	r5, #3
     fb4:	426d      	negs	r5, r5
     fb6:	e77d      	b.n	eb4 <bme68x_init+0x4c>
     fb8:	00000dfd 	.word	0x00000dfd
     fbc:	00000d95 	.word	0x00000d95

00000fc0 <bme68x_set_op_mode>:
{
     fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fc2:	46ce      	mov	lr, r9
     fc4:	4647      	mov	r7, r8
     fc6:	b580      	push	{r7, lr}
     fc8:	b083      	sub	sp, #12
     fca:	4681      	mov	r9, r0
     fcc:	000e      	movs	r6, r1
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
     fce:	2274      	movs	r2, #116	; 0x74
     fd0:	466b      	mov	r3, sp
     fd2:	719a      	strb	r2, [r3, #6]
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
     fd4:	466b      	mov	r3, sp
     fd6:	1ddd      	adds	r5, r3, #7
     fd8:	4f1b      	ldr	r7, [pc, #108]	; (1048 <bme68x_set_op_mode+0x88>)
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
     fda:	4b1c      	ldr	r3, [pc, #112]	; (104c <bme68x_set_op_mode+0x8c>)
     fdc:	4698      	mov	r8, r3
     fde:	e00f      	b.n	1000 <bme68x_set_op_mode+0x40>
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
     fe0:	2203      	movs	r2, #3
     fe2:	4393      	bics	r3, r2
     fe4:	702b      	strb	r3, [r5, #0]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
     fe6:	0033      	movs	r3, r6
     fe8:	3a02      	subs	r2, #2
     fea:	0029      	movs	r1, r5
     fec:	4668      	mov	r0, sp
     fee:	3006      	adds	r0, #6
     ff0:	47c0      	blx	r8
     ff2:	0004      	movs	r4, r0
                dev->delay__us(BME68X_PERIOD_POLL, dev->intf_ptr);
     ff4:	6871      	ldr	r1, [r6, #4]
     ff6:	4816      	ldr	r0, [pc, #88]	; (1050 <bme68x_set_op_mode+0x90>)
     ff8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
     ffa:	4798      	blx	r3
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
     ffc:	2c00      	cmp	r4, #0
     ffe:	d11c      	bne.n	103a <bme68x_set_op_mode+0x7a>
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
    1000:	0033      	movs	r3, r6
    1002:	2201      	movs	r2, #1
    1004:	0029      	movs	r1, r5
    1006:	2074      	movs	r0, #116	; 0x74
    1008:	47b8      	blx	r7
    100a:	1e04      	subs	r4, r0, #0
        if (rslt == BME68X_OK)
    100c:	d115      	bne.n	103a <bme68x_set_op_mode+0x7a>
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
    100e:	782b      	ldrb	r3, [r5, #0]
            if (pow_mode != BME68X_SLEEP_MODE)
    1010:	079a      	lsls	r2, r3, #30
    1012:	d1e5      	bne.n	fe0 <bme68x_set_op_mode+0x20>
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
    1014:	464b      	mov	r3, r9
    1016:	2b00      	cmp	r3, #0
    1018:	d00f      	beq.n	103a <bme68x_set_op_mode+0x7a>
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
    101a:	466b      	mov	r3, sp
    101c:	1dd9      	adds	r1, r3, #7
    101e:	780b      	ldrb	r3, [r1, #0]
    1020:	2203      	movs	r2, #3
    1022:	4393      	bics	r3, r2
    1024:	4648      	mov	r0, r9
    1026:	4002      	ands	r2, r0
    1028:	4313      	orrs	r3, r2
    102a:	700b      	strb	r3, [r1, #0]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
    102c:	0033      	movs	r3, r6
    102e:	2201      	movs	r2, #1
    1030:	4668      	mov	r0, sp
    1032:	3006      	adds	r0, #6
    1034:	4c05      	ldr	r4, [pc, #20]	; (104c <bme68x_set_op_mode+0x8c>)
    1036:	47a0      	blx	r4
    1038:	0004      	movs	r4, r0
}
    103a:	0020      	movs	r0, r4
    103c:	b003      	add	sp, #12
    103e:	bc0c      	pop	{r2, r3}
    1040:	4690      	mov	r8, r2
    1042:	4699      	mov	r9, r3
    1044:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	00000d95 	.word	0x00000d95
    104c:	00000cb1 	.word	0x00000cb1
    1050:	00002710 	.word	0x00002710

00001054 <bme68x_get_op_mode>:
{
    1054:	b570      	push	{r4, r5, r6, lr}
    1056:	b082      	sub	sp, #8
    1058:	1e04      	subs	r4, r0, #0
    if (op_mode)
    105a:	d00d      	beq.n	1078 <bme68x_get_op_mode+0x24>
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
    105c:	466b      	mov	r3, sp
    105e:	1ddd      	adds	r5, r3, #7
    1060:	000b      	movs	r3, r1
    1062:	2201      	movs	r2, #1
    1064:	0029      	movs	r1, r5
    1066:	2074      	movs	r0, #116	; 0x74
    1068:	4e05      	ldr	r6, [pc, #20]	; (1080 <bme68x_get_op_mode+0x2c>)
    106a:	47b0      	blx	r6
        *op_mode = mode & BME68X_MODE_MSK;
    106c:	782a      	ldrb	r2, [r5, #0]
    106e:	2303      	movs	r3, #3
    1070:	4013      	ands	r3, r2
    1072:	7023      	strb	r3, [r4, #0]
}
    1074:	b002      	add	sp, #8
    1076:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BME68X_E_NULL_PTR;
    1078:	2001      	movs	r0, #1
    107a:	4240      	negs	r0, r0
    107c:	e7fa      	b.n	1074 <bme68x_get_op_mode+0x20>
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	00000d95 	.word	0x00000d95

00001084 <bme68x_set_conf>:
{
    1084:	b570      	push	{r4, r5, r6, lr}
    1086:	b084      	sub	sp, #16
    1088:	0005      	movs	r5, r0
    108a:	000c      	movs	r4, r1
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
    108c:	4b4b      	ldr	r3, [pc, #300]	; (11bc <bme68x_set_conf+0x138>)
    108e:	681a      	ldr	r2, [r3, #0]
    1090:	9202      	str	r2, [sp, #8]
    1092:	791a      	ldrb	r2, [r3, #4]
    1094:	ab02      	add	r3, sp, #8
    1096:	711a      	strb	r2, [r3, #4]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
    1098:	2205      	movs	r2, #5
    109a:	2100      	movs	r1, #0
    109c:	4668      	mov	r0, sp
    109e:	4b48      	ldr	r3, [pc, #288]	; (11c0 <bme68x_set_conf+0x13c>)
    10a0:	4798      	blx	r3
    rslt = bme68x_get_op_mode(&current_op_mode, dev);
    10a2:	0021      	movs	r1, r4
    10a4:	200f      	movs	r0, #15
    10a6:	4468      	add	r0, sp
    10a8:	4b46      	ldr	r3, [pc, #280]	; (11c4 <bme68x_set_conf+0x140>)
    10aa:	4798      	blx	r3
    if (rslt == BME68X_OK)
    10ac:	2800      	cmp	r0, #0
    10ae:	d00e      	beq.n	10ce <bme68x_set_conf+0x4a>
    if (conf == NULL)
    10b0:	2d00      	cmp	r5, #0
    10b2:	d100      	bne.n	10b6 <bme68x_set_conf+0x32>
    10b4:	e07f      	b.n	11b6 <bme68x_set_conf+0x132>
    else if (rslt == BME68X_OK)
    10b6:	2800      	cmp	r0, #0
    10b8:	d00d      	beq.n	10d6 <bme68x_set_conf+0x52>
    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
    10ba:	230f      	movs	r3, #15
    10bc:	446b      	add	r3, sp
    10be:	781b      	ldrb	r3, [r3, #0]
    10c0:	2b00      	cmp	r3, #0
    10c2:	d002      	beq.n	10ca <bme68x_set_conf+0x46>
    10c4:	2800      	cmp	r0, #0
    10c6:	d100      	bne.n	10ca <bme68x_set_conf+0x46>
    10c8:	e070      	b.n	11ac <bme68x_set_conf+0x128>
}
    10ca:	b004      	add	sp, #16
    10cc:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
    10ce:	0021      	movs	r1, r4
    10d0:	4b3d      	ldr	r3, [pc, #244]	; (11c8 <bme68x_set_conf+0x144>)
    10d2:	4798      	blx	r3
    10d4:	e7ec      	b.n	10b0 <bme68x_set_conf+0x2c>
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
    10d6:	ab02      	add	r3, sp, #8
    10d8:	7818      	ldrb	r0, [r3, #0]
    10da:	0023      	movs	r3, r4
    10dc:	2205      	movs	r2, #5
    10de:	4669      	mov	r1, sp
    10e0:	4e3a      	ldr	r6, [pc, #232]	; (11cc <bme68x_set_conf+0x148>)
    10e2:	47b0      	blx	r6
        dev->info_msg = BME68X_OK;
    10e4:	2200      	movs	r2, #0
    10e6:	234d      	movs	r3, #77	; 0x4d
    10e8:	54e2      	strb	r2, [r4, r3]
        if (rslt == BME68X_OK)
    10ea:	2800      	cmp	r0, #0
    10ec:	d03f      	beq.n	116e <bme68x_set_conf+0xea>
        if (rslt == BME68X_OK)
    10ee:	2800      	cmp	r0, #0
    10f0:	d1eb      	bne.n	10ca <bme68x_set_conf+0x46>
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
    10f2:	1d28      	adds	r0, r5, #4
    10f4:	0022      	movs	r2, r4
    10f6:	2108      	movs	r1, #8
    10f8:	4b35      	ldr	r3, [pc, #212]	; (11d0 <bme68x_set_conf+0x14c>)
    10fa:	4798      	blx	r3
        if (rslt == BME68X_OK)
    10fc:	2800      	cmp	r0, #0
    10fe:	d1dc      	bne.n	10ba <bme68x_set_conf+0x36>
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
    1100:	78ea      	ldrb	r2, [r5, #3]
    1102:	0092      	lsls	r2, r2, #2
    1104:	261c      	movs	r6, #28
    1106:	301c      	adds	r0, #28
    1108:	4002      	ands	r2, r0
    110a:	466b      	mov	r3, sp
    110c:	7919      	ldrb	r1, [r3, #4]
    110e:	43b1      	bics	r1, r6
    1110:	4311      	orrs	r1, r2
    1112:	b249      	sxtb	r1, r1
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
    1114:	78da      	ldrb	r2, [r3, #3]
    1116:	231f      	movs	r3, #31
    1118:	4013      	ands	r3, r2
    111a:	786a      	ldrb	r2, [r5, #1]
    111c:	0152      	lsls	r2, r2, #5
    111e:	4313      	orrs	r3, r2
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
    1120:	43b3      	bics	r3, r6
    1122:	78aa      	ldrb	r2, [r5, #2]
    1124:	0092      	lsls	r2, r2, #2
    1126:	4010      	ands	r0, r2
    1128:	4303      	orrs	r3, r0
    112a:	466a      	mov	r2, sp
    112c:	70d3      	strb	r3, [r2, #3]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
    112e:	7853      	ldrb	r3, [r2, #1]
    1130:	2207      	movs	r2, #7
    1132:	4393      	bics	r3, r2
    1134:	7828      	ldrb	r0, [r5, #0]
    1136:	4002      	ands	r2, r0
    1138:	4313      	orrs	r3, r2
    113a:	466a      	mov	r2, sp
    113c:	7053      	strb	r3, [r2, #1]
            if (conf->odr != BME68X_ODR_NONE)
    113e:	7928      	ldrb	r0, [r5, #4]
    1140:	2808      	cmp	r0, #8
    1142:	d030      	beq.n	11a6 <bme68x_set_conf+0x122>
                odr3 = 0;
    1144:	2500      	movs	r5, #0
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
    1146:	221f      	movs	r2, #31
    1148:	400a      	ands	r2, r1
    114a:	0140      	lsls	r0, r0, #5
    114c:	4302      	orrs	r2, r0
    114e:	466b      	mov	r3, sp
    1150:	711a      	strb	r2, [r3, #4]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
    1152:	781a      	ldrb	r2, [r3, #0]
    1154:	237f      	movs	r3, #127	; 0x7f
    1156:	4013      	ands	r3, r2
    1158:	01ed      	lsls	r5, r5, #7
    115a:	432b      	orrs	r3, r5
    115c:	466a      	mov	r2, sp
    115e:	7013      	strb	r3, [r2, #0]
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
    1160:	0023      	movs	r3, r4
    1162:	2205      	movs	r2, #5
    1164:	4669      	mov	r1, sp
    1166:	a802      	add	r0, sp, #8
    1168:	4d1a      	ldr	r5, [pc, #104]	; (11d4 <bme68x_set_conf+0x150>)
    116a:	47a8      	blx	r5
    116c:	e7a5      	b.n	10ba <bme68x_set_conf+0x36>
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
    116e:	1ce8      	adds	r0, r5, #3
    1170:	0022      	movs	r2, r4
    1172:	2107      	movs	r1, #7
    1174:	4b16      	ldr	r3, [pc, #88]	; (11d0 <bme68x_set_conf+0x14c>)
    1176:	4798      	blx	r3
        if (rslt == BME68X_OK)
    1178:	2800      	cmp	r0, #0
    117a:	d1bf      	bne.n	10fc <bme68x_set_conf+0x78>
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
    117c:	1c68      	adds	r0, r5, #1
    117e:	0022      	movs	r2, r4
    1180:	2105      	movs	r1, #5
    1182:	4b13      	ldr	r3, [pc, #76]	; (11d0 <bme68x_set_conf+0x14c>)
    1184:	4798      	blx	r3
        if (rslt == BME68X_OK)
    1186:	2800      	cmp	r0, #0
    1188:	d1b1      	bne.n	10ee <bme68x_set_conf+0x6a>
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
    118a:	1ca8      	adds	r0, r5, #2
    118c:	0022      	movs	r2, r4
    118e:	2105      	movs	r1, #5
    1190:	4b0f      	ldr	r3, [pc, #60]	; (11d0 <bme68x_set_conf+0x14c>)
    1192:	4798      	blx	r3
        if (rslt == BME68X_OK)
    1194:	2800      	cmp	r0, #0
    1196:	d000      	beq.n	119a <bme68x_set_conf+0x116>
    1198:	e78f      	b.n	10ba <bme68x_set_conf+0x36>
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
    119a:	0022      	movs	r2, r4
    119c:	2105      	movs	r1, #5
    119e:	0028      	movs	r0, r5
    11a0:	4b0b      	ldr	r3, [pc, #44]	; (11d0 <bme68x_set_conf+0x14c>)
    11a2:	4798      	blx	r3
    11a4:	e7a3      	b.n	10ee <bme68x_set_conf+0x6a>
    uint8_t odr20 = 0, odr3 = 1;
    11a6:	2501      	movs	r5, #1
    11a8:	2000      	movs	r0, #0
    11aa:	e7cc      	b.n	1146 <bme68x_set_conf+0xc2>
        rslt = bme68x_set_op_mode(current_op_mode, dev);
    11ac:	0021      	movs	r1, r4
    11ae:	0018      	movs	r0, r3
    11b0:	4b05      	ldr	r3, [pc, #20]	; (11c8 <bme68x_set_conf+0x144>)
    11b2:	4798      	blx	r3
    return rslt;
    11b4:	e789      	b.n	10ca <bme68x_set_conf+0x46>
        rslt = BME68X_E_NULL_PTR;
    11b6:	2001      	movs	r0, #1
    11b8:	4240      	negs	r0, r0
    11ba:	e77e      	b.n	10ba <bme68x_set_conf+0x36>
    11bc:	0000d810 	.word	0x0000d810
    11c0:	0000865f 	.word	0x0000865f
    11c4:	00001055 	.word	0x00001055
    11c8:	00000fc1 	.word	0x00000fc1
    11cc:	00000d95 	.word	0x00000d95
    11d0:	00000bb5 	.word	0x00000bb5
    11d4:	00000cb1 	.word	0x00000cb1

000011d8 <bme68x_get_data>:
{
    11d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11da:	46de      	mov	lr, fp
    11dc:	4657      	mov	r7, sl
    11de:	464e      	mov	r6, r9
    11e0:	4645      	mov	r5, r8
    11e2:	b5e0      	push	{r5, r6, r7, lr}
    11e4:	b0b1      	sub	sp, #196	; 0xc4
    11e6:	0005      	movs	r5, r0
    11e8:	4689      	mov	r9, r1
    11ea:	4692      	mov	sl, r2
    11ec:	4698      	mov	r8, r3
    struct bme68x_data *field_ptr[3] = { 0 };
    11ee:	220c      	movs	r2, #12
    11f0:	2100      	movs	r1, #0
    11f2:	a82d      	add	r0, sp, #180	; 0xb4
    11f4:	4edb      	ldr	r6, [pc, #876]	; (1564 <bme68x_get_data+0x38c>)
    11f6:	47b0      	blx	r6
    struct bme68x_data field_data[3] = { { 0 } };
    11f8:	ac1b      	add	r4, sp, #108	; 0x6c
    11fa:	2248      	movs	r2, #72	; 0x48
    11fc:	2100      	movs	r1, #0
    11fe:	0020      	movs	r0, r4
    1200:	47b0      	blx	r6
    field_ptr[0] = &field_data[0];
    1202:	942d      	str	r4, [sp, #180]	; 0xb4
    field_ptr[1] = &field_data[1];
    1204:	ab21      	add	r3, sp, #132	; 0x84
    1206:	932e      	str	r3, [sp, #184]	; 0xb8
    field_ptr[2] = &field_data[2];
    1208:	ab27      	add	r3, sp, #156	; 0x9c
    120a:	932f      	str	r3, [sp, #188]	; 0xbc
    rslt = null_ptr_check(dev);
    120c:	4640      	mov	r0, r8
    120e:	4bd6      	ldr	r3, [pc, #856]	; (1568 <bme68x_get_data+0x390>)
    1210:	4798      	blx	r3
    if ((rslt == BME68X_OK) && (data != NULL))
    1212:	2800      	cmp	r0, #0
    1214:	d000      	beq.n	1218 <bme68x_get_data+0x40>
    1216:	e1e3      	b.n	15e0 <bme68x_get_data+0x408>
    1218:	464b      	mov	r3, r9
    121a:	2b00      	cmp	r3, #0
    121c:	d100      	bne.n	1220 <bme68x_get_data+0x48>
    121e:	e1e3      	b.n	15e8 <bme68x_get_data+0x410>
        if (op_mode == BME68X_FORCED_MODE)
    1220:	2d01      	cmp	r5, #1
    1222:	d013      	beq.n	124c <bme68x_get_data+0x74>
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
    1224:	3d02      	subs	r5, #2
    1226:	2d01      	cmp	r5, #1
    1228:	d800      	bhi.n	122c <bme68x_get_data+0x54>
    122a:	e0a9      	b.n	1380 <bme68x_get_data+0x1a8>
    uint8_t i = 0, j = 0, new_fields = 0;
    122c:	2500      	movs	r5, #0
            rslt = BME68X_W_DEFINE_OP_MODE;
    122e:	2301      	movs	r3, #1
    1230:	9300      	str	r3, [sp, #0]
        if (n_data == NULL)
    1232:	4653      	mov	r3, sl
    1234:	2b00      	cmp	r3, #0
    1236:	d100      	bne.n	123a <bme68x_get_data+0x62>
    1238:	e1da      	b.n	15f0 <bme68x_get_data+0x418>
            *n_data = new_fields;
    123a:	701d      	strb	r5, [r3, #0]
}
    123c:	9800      	ldr	r0, [sp, #0]
    123e:	b031      	add	sp, #196	; 0xc4
    1240:	bc3c      	pop	{r2, r3, r4, r5}
    1242:	4690      	mov	r8, r2
    1244:	4699      	mov	r9, r3
    1246:	46a2      	mov	sl, r4
    1248:	46ab      	mov	fp, r5
    124a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
    124c:	ac0e      	add	r4, sp, #56	; 0x38
    124e:	2211      	movs	r2, #17
    1250:	2100      	movs	r1, #0
    1252:	0020      	movs	r0, r4
    1254:	4bc3      	ldr	r3, [pc, #780]	; (1564 <bme68x_get_data+0x38c>)
    1256:	4798      	blx	r3
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
    1258:	4643      	mov	r3, r8
    125a:	2211      	movs	r2, #17
    125c:	0021      	movs	r1, r4
    125e:	201d      	movs	r0, #29
    1260:	4ec2      	ldr	r6, [pc, #776]	; (156c <bme68x_get_data+0x394>)
    1262:	47b0      	blx	r6
    1264:	9000      	str	r0, [sp, #0]
        data->status = buff[0] & BME68X_NEW_DATA_MSK;
    1266:	7823      	ldrb	r3, [r4, #0]
    1268:	227f      	movs	r2, #127	; 0x7f
    126a:	001f      	movs	r7, r3
    126c:	4397      	bics	r7, r2
    126e:	464a      	mov	r2, r9
    1270:	7017      	strb	r7, [r2, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
    1272:	210f      	movs	r1, #15
    1274:	400b      	ands	r3, r1
    1276:	7053      	strb	r3, [r2, #1]
        data->meas_index = buff[1];
    1278:	7863      	ldrb	r3, [r4, #1]
    127a:	7093      	strb	r3, [r2, #2]
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
    127c:	78a6      	ldrb	r6, [r4, #2]
    127e:	0336      	lsls	r6, r6, #12
    1280:	78e3      	ldrb	r3, [r4, #3]
    1282:	011b      	lsls	r3, r3, #4
    1284:	431e      	orrs	r6, r3
    1286:	7923      	ldrb	r3, [r4, #4]
    1288:	091b      	lsrs	r3, r3, #4
    128a:	431e      	orrs	r6, r3
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
    128c:	7960      	ldrb	r0, [r4, #5]
    128e:	0300      	lsls	r0, r0, #12
    1290:	79a3      	ldrb	r3, [r4, #6]
    1292:	011b      	lsls	r3, r3, #4
    1294:	4318      	orrs	r0, r3
    1296:	79e3      	ldrb	r3, [r4, #7]
    1298:	091b      	lsrs	r3, r3, #4
    129a:	4318      	orrs	r0, r3
    129c:	9001      	str	r0, [sp, #4]
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
    129e:	7a23      	ldrb	r3, [r4, #8]
    12a0:	021b      	lsls	r3, r3, #8
    12a2:	7a62      	ldrb	r2, [r4, #9]
    12a4:	431a      	orrs	r2, r3
    12a6:	9202      	str	r2, [sp, #8]
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
    12a8:	7ba3      	ldrb	r3, [r4, #14]
    12aa:	7b62      	ldrb	r2, [r4, #13]
    12ac:	0092      	lsls	r2, r2, #2
    12ae:	0998      	lsrs	r0, r3, #6
    12b0:	4310      	orrs	r0, r2
    12b2:	9003      	str	r0, [sp, #12]
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
    12b4:	7be2      	ldrb	r2, [r4, #15]
    12b6:	4693      	mov	fp, r2
    12b8:	7c24      	ldrb	r4, [r4, #16]
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
    12ba:	4019      	ands	r1, r3
    12bc:	9104      	str	r1, [sp, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
    12be:	4642      	mov	r2, r8
    12c0:	6892      	ldr	r2, [r2, #8]
    12c2:	2a01      	cmp	r2, #1
    12c4:	d032      	beq.n	132c <bme68x_get_data+0x154>
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
    12c6:	b25b      	sxtb	r3, r3
    12c8:	2220      	movs	r2, #32
    12ca:	401a      	ands	r2, r3
    12cc:	4317      	orrs	r7, r2
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
    12ce:	2210      	movs	r2, #16
    12d0:	4013      	ands	r3, r2
    12d2:	431f      	orrs	r7, r3
    12d4:	464b      	mov	r3, r9
    12d6:	701f      	strb	r7, [r3, #0]
                data->temperature = calc_temperature(adc_temp, dev);
    12d8:	4641      	mov	r1, r8
    12da:	9801      	ldr	r0, [sp, #4]
    12dc:	4ba4      	ldr	r3, [pc, #656]	; (1570 <bme68x_get_data+0x398>)
    12de:	4798      	blx	r3
    12e0:	464b      	mov	r3, r9
    12e2:	6098      	str	r0, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
    12e4:	4641      	mov	r1, r8
    12e6:	0030      	movs	r0, r6
    12e8:	4ba2      	ldr	r3, [pc, #648]	; (1574 <bme68x_get_data+0x39c>)
    12ea:	4798      	blx	r3
    12ec:	464b      	mov	r3, r9
    12ee:	60d8      	str	r0, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
    12f0:	4641      	mov	r1, r8
    12f2:	9802      	ldr	r0, [sp, #8]
    12f4:	4ba0      	ldr	r3, [pc, #640]	; (1578 <bme68x_get_data+0x3a0>)
    12f6:	4798      	blx	r3
    12f8:	464b      	mov	r3, r9
    12fa:	6118      	str	r0, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
    12fc:	4643      	mov	r3, r8
    12fe:	689b      	ldr	r3, [r3, #8]
    1300:	2b01      	cmp	r3, #1
    1302:	d01d      	beq.n	1340 <bme68x_get_data+0x168>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
    1304:	4642      	mov	r2, r8
    1306:	9904      	ldr	r1, [sp, #16]
    1308:	9803      	ldr	r0, [sp, #12]
    130a:	4b9c      	ldr	r3, [pc, #624]	; (157c <bme68x_get_data+0x3a4>)
    130c:	4798      	blx	r3
    130e:	464b      	mov	r3, r9
    1310:	6158      	str	r0, [r3, #20]
            if (rslt == BME68X_OK)
    1312:	9b00      	ldr	r3, [sp, #0]
    1314:	2b00      	cmp	r3, #0
    1316:	d000      	beq.n	131a <bme68x_get_data+0x142>
    1318:	e160      	b.n	15dc <bme68x_get_data+0x404>
                if (data->status & BME68X_NEW_DATA_MSK)
    131a:	464b      	mov	r3, r9
    131c:	781b      	ldrb	r3, [r3, #0]
    131e:	2b7f      	cmp	r3, #127	; 0x7f
    1320:	d900      	bls.n	1324 <bme68x_get_data+0x14c>
    1322:	e786      	b.n	1232 <bme68x_get_data+0x5a>
                    new_fields = 0;
    1324:	2500      	movs	r5, #0
                    rslt = BME68X_W_NO_NEW_DATA;
    1326:	2302      	movs	r3, #2
    1328:	9300      	str	r3, [sp, #0]
    132a:	e782      	b.n	1232 <bme68x_get_data+0x5a>
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
    132c:	b262      	sxtb	r2, r4
    132e:	2320      	movs	r3, #32
    1330:	4013      	ands	r3, r2
    1332:	431f      	orrs	r7, r3
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
    1334:	2310      	movs	r3, #16
    1336:	401a      	ands	r2, r3
    1338:	4317      	orrs	r7, r2
    133a:	464b      	mov	r3, r9
    133c:	701f      	strb	r7, [r3, #0]
    133e:	e7cb      	b.n	12d8 <bme68x_get_data+0x100>
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
    1340:	465b      	mov	r3, fp
    1342:	009b      	lsls	r3, r3, #2
    1344:	09a2      	lsrs	r2, r4, #6
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
    1346:	4313      	orrs	r3, r2
    1348:	4a8d      	ldr	r2, [pc, #564]	; (1580 <bme68x_get_data+0x3a8>)
    134a:	4694      	mov	ip, r2
    134c:	4463      	add	r3, ip
    var2 *= INT32_C(3);
    134e:	005e      	lsls	r6, r3, #1
    1350:	18f6      	adds	r6, r6, r3
    uint32_t var1 = UINT32_C(262144) >> gas_range;
    1352:	230f      	movs	r3, #15
    1354:	4023      	ands	r3, r4
    1356:	2080      	movs	r0, #128	; 0x80
    1358:	02c0      	lsls	r0, r0, #11
    135a:	40d8      	lsrs	r0, r3
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
    135c:	4b89      	ldr	r3, [pc, #548]	; (1584 <bme68x_get_data+0x3ac>)
    135e:	4798      	blx	r3
    1360:	4989      	ldr	r1, [pc, #548]	; (1588 <bme68x_get_data+0x3b0>)
    1362:	4b8a      	ldr	r3, [pc, #552]	; (158c <bme68x_get_data+0x3b4>)
    1364:	4798      	blx	r3
    1366:	1c04      	adds	r4, r0, #0
    var2 = INT32_C(4096) + var2;
    1368:	2380      	movs	r3, #128	; 0x80
    136a:	015b      	lsls	r3, r3, #5
    136c:	18f0      	adds	r0, r6, r3
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
    136e:	4b88      	ldr	r3, [pc, #544]	; (1590 <bme68x_get_data+0x3b8>)
    1370:	4798      	blx	r3
    1372:	1c01      	adds	r1, r0, #0
    1374:	1c20      	adds	r0, r4, #0
    1376:	4b87      	ldr	r3, [pc, #540]	; (1594 <bme68x_get_data+0x3bc>)
    1378:	4798      	blx	r3
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
    137a:	464b      	mov	r3, r9
    137c:	6158      	str	r0, [r3, #20]
    137e:	e7c8      	b.n	1312 <bme68x_get_data+0x13a>
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
    1380:	2233      	movs	r2, #51	; 0x33
    1382:	2100      	movs	r1, #0
    1384:	a80e      	add	r0, sp, #56	; 0x38
    1386:	4c77      	ldr	r4, [pc, #476]	; (1564 <bme68x_get_data+0x38c>)
    1388:	47a0      	blx	r4
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
    138a:	221e      	movs	r2, #30
    138c:	2100      	movs	r1, #0
    138e:	a806      	add	r0, sp, #24
    1390:	47a0      	blx	r4
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
    1392:	4643      	mov	r3, r8
    1394:	2233      	movs	r2, #51	; 0x33
    1396:	a90e      	add	r1, sp, #56	; 0x38
    1398:	201d      	movs	r0, #29
    139a:	4c74      	ldr	r4, [pc, #464]	; (156c <bme68x_get_data+0x394>)
    139c:	47a0      	blx	r4
    139e:	9000      	str	r0, [sp, #0]
    if (rslt == BME68X_OK)
    13a0:	2800      	cmp	r0, #0
    13a2:	d00a      	beq.n	13ba <bme68x_get_data+0x1e2>
            new_fields = 0;
    13a4:	2500      	movs	r5, #0
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
    13a6:	9b00      	ldr	r3, [sp, #0]
    13a8:	2b00      	cmp	r3, #0
    13aa:	d000      	beq.n	13ae <bme68x_get_data+0x1d6>
    13ac:	e110      	b.n	15d0 <bme68x_get_data+0x3f8>
    13ae:	ae2d      	add	r6, sp, #180	; 0xb4
    13b0:	2300      	movs	r3, #0
    13b2:	469c      	mov	ip, r3
    13b4:	46e3      	mov	fp, ip
    13b6:	46ac      	mov	ip, r5
    13b8:	e0f2      	b.n	15a0 <bme68x_get_data+0x3c8>
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
    13ba:	4643      	mov	r3, r8
    13bc:	221e      	movs	r2, #30
    13be:	a906      	add	r1, sp, #24
    13c0:	2050      	movs	r0, #80	; 0x50
    13c2:	4c6a      	ldr	r4, [pc, #424]	; (156c <bme68x_get_data+0x394>)
    13c4:	47a0      	blx	r4
    13c6:	9000      	str	r0, [sp, #0]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
    13c8:	2800      	cmp	r0, #0
    13ca:	d000      	beq.n	13ce <bme68x_get_data+0x1f6>
    13cc:	e114      	b.n	15f8 <bme68x_get_data+0x420>
    13ce:	ac0e      	add	r4, sp, #56	; 0x38
    13d0:	4683      	mov	fp, r0
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
    13d2:	4653      	mov	r3, sl
    13d4:	9305      	str	r3, [sp, #20]
    13d6:	e030      	b.n	143a <bme68x_get_data+0x262>
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
    13d8:	4669      	mov	r1, sp
    13da:	7b09      	ldrb	r1, [r1, #12]
    13dc:	b249      	sxtb	r1, r1
    13de:	2620      	movs	r6, #32
    13e0:	400e      	ands	r6, r1
    13e2:	4332      	orrs	r2, r6
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
    13e4:	2610      	movs	r6, #16
    13e6:	4031      	ands	r1, r6
    13e8:	430a      	orrs	r2, r1
    13ea:	702a      	strb	r2, [r5, #0]
    13ec:	e05c      	b.n	14a8 <bme68x_get_data+0x2d0>
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
    13ee:	9b04      	ldr	r3, [sp, #16]
    13f0:	0098      	lsls	r0, r3, #2
    13f2:	9a03      	ldr	r2, [sp, #12]
    13f4:	0997      	lsrs	r7, r2, #6
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
    13f6:	4338      	orrs	r0, r7
    13f8:	4b61      	ldr	r3, [pc, #388]	; (1580 <bme68x_get_data+0x3a8>)
    13fa:	469c      	mov	ip, r3
    13fc:	4460      	add	r0, ip
    var2 *= INT32_C(3);
    13fe:	0047      	lsls	r7, r0, #1
    1400:	183f      	adds	r7, r7, r0
    uint32_t var1 = UINT32_C(262144) >> gas_range;
    1402:	230f      	movs	r3, #15
    1404:	4013      	ands	r3, r2
    1406:	2080      	movs	r0, #128	; 0x80
    1408:	02c0      	lsls	r0, r0, #11
    140a:	40d8      	lsrs	r0, r3
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
    140c:	4b5d      	ldr	r3, [pc, #372]	; (1584 <bme68x_get_data+0x3ac>)
    140e:	4798      	blx	r3
    1410:	495d      	ldr	r1, [pc, #372]	; (1588 <bme68x_get_data+0x3b0>)
    1412:	4b5e      	ldr	r3, [pc, #376]	; (158c <bme68x_get_data+0x3b4>)
    1414:	4798      	blx	r3
    1416:	1c06      	adds	r6, r0, #0
    var2 = INT32_C(4096) + var2;
    1418:	2380      	movs	r3, #128	; 0x80
    141a:	015b      	lsls	r3, r3, #5
    141c:	18f8      	adds	r0, r7, r3
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
    141e:	4b5c      	ldr	r3, [pc, #368]	; (1590 <bme68x_get_data+0x3b8>)
    1420:	4798      	blx	r3
    1422:	1c01      	adds	r1, r0, #0
    1424:	1c30      	adds	r0, r6, #0
    1426:	4b5b      	ldr	r3, [pc, #364]	; (1594 <bme68x_get_data+0x3bc>)
    1428:	4798      	blx	r3
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
    142a:	6168      	str	r0, [r5, #20]
    142c:	3411      	adds	r4, #17
    142e:	2304      	movs	r3, #4
    1430:	469c      	mov	ip, r3
    1432:	44e3      	add	fp, ip
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
    1434:	465b      	mov	r3, fp
    1436:	2b0c      	cmp	r3, #12
    1438:	d05d      	beq.n	14f6 <bme68x_get_data+0x31e>
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
    143a:	ab2d      	add	r3, sp, #180	; 0xb4
    143c:	465a      	mov	r2, fp
    143e:	58d5      	ldr	r5, [r2, r3]
    1440:	7823      	ldrb	r3, [r4, #0]
    1442:	227f      	movs	r2, #127	; 0x7f
    1444:	0019      	movs	r1, r3
    1446:	4391      	bics	r1, r2
    1448:	000a      	movs	r2, r1
    144a:	7029      	strb	r1, [r5, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
    144c:	210f      	movs	r1, #15
    144e:	400b      	ands	r3, r1
    1450:	706b      	strb	r3, [r5, #1]
        data[i]->meas_index = buff[off + 1];
    1452:	7861      	ldrb	r1, [r4, #1]
    1454:	70a9      	strb	r1, [r5, #2]
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
    1456:	78a6      	ldrb	r6, [r4, #2]
    1458:	0336      	lsls	r6, r6, #12
    145a:	78e1      	ldrb	r1, [r4, #3]
    145c:	0109      	lsls	r1, r1, #4
    145e:	430e      	orrs	r6, r1
                        ((uint32_t) buff[off + 4] / 16));
    1460:	7921      	ldrb	r1, [r4, #4]
    1462:	0909      	lsrs	r1, r1, #4
        adc_pres =
    1464:	430e      	orrs	r6, r1
    1466:	9601      	str	r6, [sp, #4]
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
    1468:	7960      	ldrb	r0, [r4, #5]
    146a:	0300      	lsls	r0, r0, #12
    146c:	79a1      	ldrb	r1, [r4, #6]
    146e:	0109      	lsls	r1, r1, #4
    1470:	4308      	orrs	r0, r1
                        ((uint32_t) buff[off + 7] / 16));
    1472:	79e1      	ldrb	r1, [r4, #7]
    1474:	0909      	lsrs	r1, r1, #4
        adc_temp =
    1476:	4308      	orrs	r0, r1
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
    1478:	7a21      	ldrb	r1, [r4, #8]
    147a:	0209      	lsls	r1, r1, #8
    147c:	7a67      	ldrb	r7, [r4, #9]
    147e:	430f      	orrs	r7, r1
    1480:	9702      	str	r7, [sp, #8]
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
    1482:	7b61      	ldrb	r1, [r4, #13]
    1484:	468a      	mov	sl, r1
    1486:	7ba7      	ldrb	r7, [r4, #14]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
    1488:	7be1      	ldrb	r1, [r4, #15]
    148a:	9104      	str	r1, [sp, #16]
    148c:	7c21      	ldrb	r1, [r4, #16]
    148e:	9103      	str	r1, [sp, #12]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
    1490:	4641      	mov	r1, r8
    1492:	6889      	ldr	r1, [r1, #8]
    1494:	2901      	cmp	r1, #1
    1496:	d09f      	beq.n	13d8 <bme68x_get_data+0x200>
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
    1498:	b279      	sxtb	r1, r7
    149a:	2620      	movs	r6, #32
    149c:	400e      	ands	r6, r1
    149e:	4332      	orrs	r2, r6
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
    14a0:	2610      	movs	r6, #16
    14a2:	4031      	ands	r1, r6
    14a4:	430a      	orrs	r2, r1
    14a6:	702a      	strb	r2, [r5, #0]
        data[i]->idac = set_val[data[i]->gas_index];
    14a8:	aa06      	add	r2, sp, #24
    14aa:	5cd2      	ldrb	r2, [r2, r3]
    14ac:	712a      	strb	r2, [r5, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
    14ae:	aa06      	add	r2, sp, #24
    14b0:	4694      	mov	ip, r2
    14b2:	4463      	add	r3, ip
    14b4:	7a9a      	ldrb	r2, [r3, #10]
    14b6:	70ea      	strb	r2, [r5, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
    14b8:	7d1b      	ldrb	r3, [r3, #20]
    14ba:	716b      	strb	r3, [r5, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
    14bc:	4641      	mov	r1, r8
    14be:	4b2c      	ldr	r3, [pc, #176]	; (1570 <bme68x_get_data+0x398>)
    14c0:	4798      	blx	r3
    14c2:	60a8      	str	r0, [r5, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
    14c4:	4641      	mov	r1, r8
    14c6:	9801      	ldr	r0, [sp, #4]
    14c8:	4b2a      	ldr	r3, [pc, #168]	; (1574 <bme68x_get_data+0x39c>)
    14ca:	4798      	blx	r3
    14cc:	60e8      	str	r0, [r5, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
    14ce:	4641      	mov	r1, r8
    14d0:	9802      	ldr	r0, [sp, #8]
    14d2:	4b29      	ldr	r3, [pc, #164]	; (1578 <bme68x_get_data+0x3a0>)
    14d4:	4798      	blx	r3
    14d6:	6128      	str	r0, [r5, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
    14d8:	4643      	mov	r3, r8
    14da:	689b      	ldr	r3, [r3, #8]
    14dc:	2b01      	cmp	r3, #1
    14de:	d086      	beq.n	13ee <bme68x_get_data+0x216>
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
    14e0:	210f      	movs	r1, #15
    14e2:	4039      	ands	r1, r7
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
    14e4:	4653      	mov	r3, sl
    14e6:	0098      	lsls	r0, r3, #2
    14e8:	09bf      	lsrs	r7, r7, #6
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
    14ea:	4338      	orrs	r0, r7
    14ec:	4642      	mov	r2, r8
    14ee:	4b23      	ldr	r3, [pc, #140]	; (157c <bme68x_get_data+0x3a4>)
    14f0:	4798      	blx	r3
    14f2:	6168      	str	r0, [r5, #20]
    14f4:	e79a      	b.n	142c <bme68x_get_data+0x254>
    14f6:	9b05      	ldr	r3, [sp, #20]
    14f8:	469a      	mov	sl, r3
    14fa:	2300      	movs	r3, #0
    14fc:	2500      	movs	r5, #0
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
    14fe:	a92d      	add	r1, sp, #180	; 0xb4
    1500:	e003      	b.n	150a <bme68x_get_data+0x332>
    1502:	3304      	adds	r3, #4
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
    1504:	2b0c      	cmp	r3, #12
    1506:	d100      	bne.n	150a <bme68x_get_data+0x332>
    1508:	e751      	b.n	13ae <bme68x_get_data+0x1d6>
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
    150a:	585a      	ldr	r2, [r3, r1]
    150c:	7812      	ldrb	r2, [r2, #0]
    150e:	2a7f      	cmp	r2, #127	; 0x7f
    1510:	d9f7      	bls.n	1502 <bme68x_get_data+0x32a>
                    new_fields++;
    1512:	3501      	adds	r5, #1
    1514:	b2ed      	uxtb	r5, r5
    1516:	e7f4      	b.n	1502 <bme68x_get_data+0x32a>
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
    1518:	7821      	ldrb	r1, [r4, #0]
    151a:	297f      	cmp	r1, #127	; 0x7f
    151c:	d813      	bhi.n	1546 <bme68x_get_data+0x36e>
                for (j = i + 1; j < 3; j++)
    151e:	3301      	adds	r3, #1
    1520:	b2db      	uxtb	r3, r3
    1522:	2b03      	cmp	r3, #3
    1524:	d038      	beq.n	1598 <bme68x_get_data+0x3c0>
    1526:	0037      	movs	r7, r6
    meas_index1 = (int16_t)field[low_index]->meas_index;
    1528:	6830      	ldr	r0, [r6, #0]
    meas_index2 = (int16_t)field[high_index]->meas_index;
    152a:	009a      	lsls	r2, r3, #2
    152c:	a92d      	add	r1, sp, #180	; 0xb4
    152e:	4688      	mov	r8, r1
    1530:	4442      	add	r2, r8
    1532:	6814      	ldr	r4, [r2, #0]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
    1534:	7801      	ldrb	r1, [r0, #0]
    1536:	297f      	cmp	r1, #127	; 0x7f
    1538:	d8ee      	bhi.n	1518 <bme68x_get_data+0x340>
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
    153a:	7821      	ldrb	r1, [r4, #0]
    153c:	297f      	cmp	r1, #127	; 0x7f
    153e:	d9ee      	bls.n	151e <bme68x_get_data+0x346>
    field[index1] = field[index2];
    1540:	6034      	str	r4, [r6, #0]
    field[index2] = temp;
    1542:	6010      	str	r0, [r2, #0]
    1544:	e7eb      	b.n	151e <bme68x_get_data+0x346>
        int16_t diff = meas_index2 - meas_index1;
    1546:	78a5      	ldrb	r5, [r4, #2]
    1548:	7881      	ldrb	r1, [r0, #2]
    154a:	1a69      	subs	r1, r5, r1
    154c:	b289      	uxth	r1, r1
    154e:	b20d      	sxth	r5, r1
        if (((diff > -3) && (diff < 0)) || (diff > 2))
    1550:	3102      	adds	r1, #2
    1552:	b289      	uxth	r1, r1
    1554:	2901      	cmp	r1, #1
    1556:	d901      	bls.n	155c <bme68x_get_data+0x384>
    1558:	2d02      	cmp	r5, #2
    155a:	dde0      	ble.n	151e <bme68x_get_data+0x346>
    field[index1] = field[index2];
    155c:	603c      	str	r4, [r7, #0]
    field[index2] = temp;
    155e:	6010      	str	r0, [r2, #0]
    1560:	e7dd      	b.n	151e <bme68x_get_data+0x346>
    1562:	46c0      	nop			; (mov r8, r8)
    1564:	0000865f 	.word	0x0000865f
    1568:	00000ad9 	.word	0x00000ad9
    156c:	00000d95 	.word	0x00000d95
    1570:	00000561 	.word	0x00000561
    1574:	00000609 	.word	0x00000609
    1578:	000007b5 	.word	0x000007b5
    157c:	000008d5 	.word	0x000008d5
    1580:	fffffe00 	.word	0xfffffe00
    1584:	0000bad1 	.word	0x0000bad1
    1588:	49742400 	.word	0x49742400
    158c:	0000b479 	.word	0x0000b479
    1590:	0000ba31 	.word	0x0000ba31
    1594:	0000b099 	.word	0x0000b099
    1598:	3604      	adds	r6, #4
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
    159a:	465b      	mov	r3, fp
    159c:	2b02      	cmp	r3, #2
    159e:	d007      	beq.n	15b0 <bme68x_get_data+0x3d8>
                for (j = i + 1; j < 3; j++)
    15a0:	465d      	mov	r5, fp
    15a2:	3501      	adds	r5, #1
    15a4:	b2eb      	uxtb	r3, r5
    15a6:	469b      	mov	fp, r3
    15a8:	2b02      	cmp	r3, #2
    15aa:	d9bc      	bls.n	1526 <bme68x_get_data+0x34e>
    15ac:	3604      	adds	r6, #4
    15ae:	e7f7      	b.n	15a0 <bme68x_get_data+0x3c8>
    15b0:	4665      	mov	r5, ip
    15b2:	464a      	mov	r2, r9
            new_fields = 0;
    15b4:	2000      	movs	r0, #0
                data[i] = *field_ptr[i];
    15b6:	ac2d      	add	r4, sp, #180	; 0xb4
    15b8:	46ac      	mov	ip, r5
    15ba:	0011      	movs	r1, r2
    15bc:	5903      	ldr	r3, [r0, r4]
    15be:	cbe0      	ldmia	r3!, {r5, r6, r7}
    15c0:	c1e0      	stmia	r1!, {r5, r6, r7}
    15c2:	cbe0      	ldmia	r3!, {r5, r6, r7}
    15c4:	c1e0      	stmia	r1!, {r5, r6, r7}
    15c6:	3218      	adds	r2, #24
    15c8:	3004      	adds	r0, #4
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
    15ca:	280c      	cmp	r0, #12
    15cc:	d1f5      	bne.n	15ba <bme68x_get_data+0x3e2>
    15ce:	4665      	mov	r5, ip
            if (new_fields == 0)
    15d0:	2d00      	cmp	r5, #0
    15d2:	d000      	beq.n	15d6 <bme68x_get_data+0x3fe>
    15d4:	e62d      	b.n	1232 <bme68x_get_data+0x5a>
                rslt = BME68X_W_NO_NEW_DATA;
    15d6:	2302      	movs	r3, #2
    15d8:	9300      	str	r3, [sp, #0]
    15da:	e62a      	b.n	1232 <bme68x_get_data+0x5a>
    uint8_t i = 0, j = 0, new_fields = 0;
    15dc:	2500      	movs	r5, #0
    15de:	e628      	b.n	1232 <bme68x_get_data+0x5a>
        rslt = BME68X_E_NULL_PTR;
    15e0:	2301      	movs	r3, #1
    15e2:	425b      	negs	r3, r3
    15e4:	9300      	str	r3, [sp, #0]
    15e6:	e629      	b.n	123c <bme68x_get_data+0x64>
    15e8:	2301      	movs	r3, #1
    15ea:	425b      	negs	r3, r3
    15ec:	9300      	str	r3, [sp, #0]
    15ee:	e625      	b.n	123c <bme68x_get_data+0x64>
            rslt = BME68X_E_NULL_PTR;
    15f0:	2301      	movs	r3, #1
    15f2:	425b      	negs	r3, r3
    15f4:	9300      	str	r3, [sp, #0]
    return rslt;
    15f6:	e621      	b.n	123c <bme68x_get_data+0x64>
            new_fields = 0;
    15f8:	2500      	movs	r5, #0
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
    15fa:	9b00      	ldr	r3, [sp, #0]
    15fc:	2b00      	cmp	r3, #0
    15fe:	d0d8      	beq.n	15b2 <bme68x_get_data+0x3da>
    1600:	e7e6      	b.n	15d0 <bme68x_get_data+0x3f8>
    1602:	46c0      	nop			; (mov r8, r8)

00001604 <bme68x_set_heatr_conf>:
{
    1604:	b5f0      	push	{r4, r5, r6, r7, lr}
    1606:	46de      	mov	lr, fp
    1608:	4657      	mov	r7, sl
    160a:	464e      	mov	r6, r9
    160c:	4645      	mov	r5, r8
    160e:	b5e0      	push	{r5, r6, r7, lr}
    1610:	b095      	sub	sp, #84	; 0x54
    1612:	9001      	str	r0, [sp, #4]
    1614:	9102      	str	r1, [sp, #8]
    1616:	0010      	movs	r0, r2
    1618:	9200      	str	r2, [sp, #0]
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
    161a:	4bbc      	ldr	r3, [pc, #752]	; (190c <bme68x_set_heatr_conf+0x308>)
    161c:	891a      	ldrh	r2, [r3, #8]
    161e:	ab12      	add	r3, sp, #72	; 0x48
    1620:	801a      	strh	r2, [r3, #0]
    if (conf != NULL)
    1622:	2900      	cmp	r1, #0
    1624:	d100      	bne.n	1628 <bme68x_set_heatr_conf+0x24>
    1626:	e136      	b.n	1896 <bme68x_set_heatr_conf+0x292>
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
    1628:	0001      	movs	r1, r0
    162a:	2000      	movs	r0, #0
    162c:	4bb8      	ldr	r3, [pc, #736]	; (1910 <bme68x_set_heatr_conf+0x30c>)
    162e:	4798      	blx	r3
    1630:	1e05      	subs	r5, r0, #0
        if (rslt == BME68X_OK)
    1632:	d007      	beq.n	1644 <bme68x_set_heatr_conf+0x40>
}
    1634:	0028      	movs	r0, r5
    1636:	b015      	add	sp, #84	; 0x54
    1638:	bc3c      	pop	{r2, r3, r4, r5}
    163a:	4690      	mov	r8, r2
    163c:	4699      	mov	r9, r3
    163e:	46a2      	mov	sl, r4
    1640:	46ab      	mov	fp, r5
    1642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
    1644:	226e      	movs	r2, #110	; 0x6e
    1646:	ab04      	add	r3, sp, #16
    1648:	71da      	strb	r2, [r3, #7]
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    164a:	3a64      	subs	r2, #100	; 0x64
    164c:	2100      	movs	r1, #0
    164e:	a806      	add	r0, sp, #24
    1650:	4cb0      	ldr	r4, [pc, #704]	; (1914 <bme68x_set_heatr_conf+0x310>)
    1652:	47a0      	blx	r4
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    1654:	220a      	movs	r2, #10
    1656:	2100      	movs	r1, #0
    1658:	a809      	add	r0, sp, #36	; 0x24
    165a:	47a0      	blx	r4
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    165c:	220a      	movs	r2, #10
    165e:	2100      	movs	r1, #0
    1660:	a80c      	add	r0, sp, #48	; 0x30
    1662:	47a0      	blx	r4
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    1664:	220a      	movs	r2, #10
    1666:	2100      	movs	r1, #0
    1668:	a80f      	add	r0, sp, #60	; 0x3c
    166a:	47a0      	blx	r4
    switch (op_mode)
    166c:	9b01      	ldr	r3, [sp, #4]
    166e:	2b02      	cmp	r3, #2
    1670:	d100      	bne.n	1674 <bme68x_set_heatr_conf+0x70>
    1672:	e0ad      	b.n	17d0 <bme68x_set_heatr_conf+0x1cc>
    1674:	2b03      	cmp	r3, #3
    1676:	d064      	beq.n	1742 <bme68x_set_heatr_conf+0x13e>
    1678:	2b01      	cmp	r3, #1
    167a:	d006      	beq.n	168a <bme68x_set_heatr_conf+0x86>
    uint8_t write_len = 0;
    167c:	2300      	movs	r3, #0
    167e:	9301      	str	r3, [sp, #4]
            rslt = BME68X_W_DEFINE_OP_MODE;
    1680:	2501      	movs	r5, #1
    if (rslt == BME68X_OK)
    1682:	2d00      	cmp	r5, #0
    1684:	d1d6      	bne.n	1634 <bme68x_set_heatr_conf+0x30>
    1686:	9c01      	ldr	r4, [sp, #4]
    1688:	e014      	b.n	16b4 <bme68x_set_heatr_conf+0xb0>
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
    168a:	225a      	movs	r2, #90	; 0x5a
    168c:	ab06      	add	r3, sp, #24
    168e:	701a      	strb	r2, [r3, #0]
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
    1690:	9c02      	ldr	r4, [sp, #8]
    1692:	8860      	ldrh	r0, [r4, #2]
    1694:	9900      	ldr	r1, [sp, #0]
    1696:	4ba0      	ldr	r3, [pc, #640]	; (1918 <bme68x_set_heatr_conf+0x314>)
    1698:	4798      	blx	r3
    169a:	ab09      	add	r3, sp, #36	; 0x24
    169c:	7018      	strb	r0, [r3, #0]
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
    169e:	2264      	movs	r2, #100	; 0x64
    16a0:	ab0c      	add	r3, sp, #48	; 0x30
    16a2:	701a      	strb	r2, [r3, #0]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
    16a4:	88a1      	ldrh	r1, [r4, #4]
    if (dur >= 0xfc0)
    16a6:	4b9d      	ldr	r3, [pc, #628]	; (191c <bme68x_set_heatr_conf+0x318>)
        durval = 0xff; /* Max duration*/
    16a8:	329b      	adds	r2, #155	; 0x9b
    if (dur >= 0xfc0)
    16aa:	4299      	cmp	r1, r3
    16ac:	d93b      	bls.n	1726 <bme68x_set_heatr_conf+0x122>
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
    16ae:	ab0f      	add	r3, sp, #60	; 0x3c
    16b0:	701a      	strb	r2, [r3, #0]
            (*nb_conv) = 0;
    16b2:	2400      	movs	r4, #0
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
    16b4:	9b00      	ldr	r3, [sp, #0]
    16b6:	9a01      	ldr	r2, [sp, #4]
    16b8:	a909      	add	r1, sp, #36	; 0x24
    16ba:	a806      	add	r0, sp, #24
    16bc:	4d98      	ldr	r5, [pc, #608]	; (1920 <bme68x_set_heatr_conf+0x31c>)
    16be:	47a8      	blx	r5
    16c0:	0005      	movs	r5, r0
    if (rslt == BME68X_OK)
    16c2:	2d00      	cmp	r5, #0
    16c4:	d1b6      	bne.n	1634 <bme68x_set_heatr_conf+0x30>
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
    16c6:	9e00      	ldr	r6, [sp, #0]
    16c8:	0033      	movs	r3, r6
    16ca:	9a01      	ldr	r2, [sp, #4]
    16cc:	a90f      	add	r1, sp, #60	; 0x3c
    16ce:	a80c      	add	r0, sp, #48	; 0x30
    16d0:	4d93      	ldr	r5, [pc, #588]	; (1920 <bme68x_set_heatr_conf+0x31c>)
    16d2:	47a8      	blx	r5
    16d4:	1e05      	subs	r5, r0, #0
        if (rslt == BME68X_OK)
    16d6:	d1ad      	bne.n	1634 <bme68x_set_heatr_conf+0x30>
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
    16d8:	0033      	movs	r3, r6
    16da:	2202      	movs	r2, #2
    16dc:	a913      	add	r1, sp, #76	; 0x4c
    16de:	2070      	movs	r0, #112	; 0x70
    16e0:	4d90      	ldr	r5, [pc, #576]	; (1924 <bme68x_set_heatr_conf+0x320>)
    16e2:	47a8      	blx	r5
    16e4:	1e05      	subs	r5, r0, #0
            if (rslt == BME68X_OK)
    16e6:	d1a5      	bne.n	1634 <bme68x_set_heatr_conf+0x30>
                if (conf->enable == BME68X_ENABLE)
    16e8:	9b02      	ldr	r3, [sp, #8]
    16ea:	781b      	ldrb	r3, [r3, #0]
    16ec:	2b01      	cmp	r3, #1
    16ee:	d100      	bne.n	16f2 <bme68x_set_heatr_conf+0xee>
    16f0:	e0c6      	b.n	1880 <bme68x_set_heatr_conf+0x27c>
                    run_gas = BME68X_DISABLE_GAS_MEAS;
    16f2:	2000      	movs	r0, #0
                    hctrl = BME68X_DISABLE_HEATER;
    16f4:	2301      	movs	r3, #1
                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
    16f6:	a913      	add	r1, sp, #76	; 0x4c
    16f8:	780a      	ldrb	r2, [r1, #0]
    16fa:	2508      	movs	r5, #8
    16fc:	43aa      	bics	r2, r5
    16fe:	00db      	lsls	r3, r3, #3
    1700:	431a      	orrs	r2, r3
    1702:	700a      	strb	r2, [r1, #0]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
    1704:	784b      	ldrb	r3, [r1, #1]
    1706:	220f      	movs	r2, #15
    1708:	4393      	bics	r3, r2
    170a:	4014      	ands	r4, r2
    170c:	4323      	orrs	r3, r4
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
    170e:	3221      	adds	r2, #33	; 0x21
    1710:	4393      	bics	r3, r2
    1712:	0100      	lsls	r0, r0, #4
    1714:	4303      	orrs	r3, r0
    1716:	704b      	strb	r3, [r1, #1]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
    1718:	9b00      	ldr	r3, [sp, #0]
    171a:	3a2e      	subs	r2, #46	; 0x2e
    171c:	a812      	add	r0, sp, #72	; 0x48
    171e:	4c80      	ldr	r4, [pc, #512]	; (1920 <bme68x_set_heatr_conf+0x31c>)
    1720:	47a0      	blx	r4
    1722:	0005      	movs	r5, r0
    1724:	e786      	b.n	1634 <bme68x_set_heatr_conf+0x30>
        while (dur > 0x3F)
    1726:	293f      	cmp	r1, #63	; 0x3f
    1728:	d909      	bls.n	173e <bme68x_set_heatr_conf+0x13a>
    172a:	2300      	movs	r3, #0
            dur = dur / 4;
    172c:	0889      	lsrs	r1, r1, #2
            factor += 1;
    172e:	3301      	adds	r3, #1
    1730:	b2db      	uxtb	r3, r3
        while (dur > 0x3F)
    1732:	293f      	cmp	r1, #63	; 0x3f
    1734:	d8fa      	bhi.n	172c <bme68x_set_heatr_conf+0x128>
        durval = (uint8_t)(dur + (factor * 64));
    1736:	019b      	lsls	r3, r3, #6
    1738:	185b      	adds	r3, r3, r1
    173a:	b2da      	uxtb	r2, r3
    173c:	e7b7      	b.n	16ae <bme68x_set_heatr_conf+0xaa>
        while (dur > 0x3F)
    173e:	2300      	movs	r3, #0
    1740:	e7f9      	b.n	1736 <bme68x_set_heatr_conf+0x132>
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
    1742:	9b02      	ldr	r3, [sp, #8]
    1744:	68df      	ldr	r7, [r3, #12]
    1746:	2f00      	cmp	r7, #0
    1748:	d100      	bne.n	174c <bme68x_set_heatr_conf+0x148>
    174a:	e0bb      	b.n	18c4 <bme68x_set_heatr_conf+0x2c0>
    174c:	689c      	ldr	r4, [r3, #8]
    174e:	2c00      	cmp	r4, #0
    1750:	d100      	bne.n	1754 <bme68x_set_heatr_conf+0x150>
    1752:	e0bc      	b.n	18ce <bme68x_set_heatr_conf+0x2ca>
            for (i = 0; i < conf->profile_len; i++)
    1754:	7c1b      	ldrb	r3, [r3, #16]
    1756:	9301      	str	r3, [sp, #4]
    1758:	2b00      	cmp	r3, #0
    175a:	d100      	bne.n	175e <bme68x_set_heatr_conf+0x15a>
    175c:	e0b0      	b.n	18c0 <bme68x_set_heatr_conf+0x2bc>
    175e:	335a      	adds	r3, #90	; 0x5a
    1760:	b2db      	uxtb	r3, r3
    1762:	4699      	mov	r9, r3
    1764:	255a      	movs	r5, #90	; 0x5a
    1766:	2600      	movs	r6, #0
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
    1768:	4b6b      	ldr	r3, [pc, #428]	; (1918 <bme68x_set_heatr_conf+0x314>)
    176a:	469a      	mov	sl, r3
    if (dur >= 0xfc0)
    176c:	4b6b      	ldr	r3, [pc, #428]	; (191c <bme68x_set_heatr_conf+0x318>)
    176e:	469b      	mov	fp, r3
    1770:	e00e      	b.n	1790 <bme68x_set_heatr_conf+0x18c>
        while (dur > 0x3F)
    1772:	2300      	movs	r3, #0
        durval = (uint8_t)(dur + (factor * 64));
    1774:	019b      	lsls	r3, r3, #6
    1776:	185b      	adds	r3, r3, r1
    1778:	b2db      	uxtb	r3, r3
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
    177a:	aa04      	add	r2, sp, #16
    177c:	212c      	movs	r1, #44	; 0x2c
    177e:	1852      	adds	r2, r2, r1
    1780:	5593      	strb	r3, [r2, r6]
    1782:	3601      	adds	r6, #1
    1784:	3501      	adds	r5, #1
    1786:	b2ed      	uxtb	r5, r5
    1788:	3402      	adds	r4, #2
    178a:	3702      	adds	r7, #2
            for (i = 0; i < conf->profile_len; i++)
    178c:	454d      	cmp	r5, r9
    178e:	d01d      	beq.n	17cc <bme68x_set_heatr_conf+0x1c8>
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
    1790:	ab04      	add	r3, sp, #16
    1792:	2208      	movs	r2, #8
    1794:	189b      	adds	r3, r3, r2
    1796:	559d      	strb	r5, [r3, r6]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
    1798:	8820      	ldrh	r0, [r4, #0]
    179a:	9900      	ldr	r1, [sp, #0]
    179c:	47d0      	blx	sl
    179e:	ab04      	add	r3, sp, #16
    17a0:	2214      	movs	r2, #20
    17a2:	189b      	adds	r3, r3, r2
    17a4:	5598      	strb	r0, [r3, r6]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
    17a6:	002b      	movs	r3, r5
    17a8:	330a      	adds	r3, #10
    17aa:	aa04      	add	r2, sp, #16
    17ac:	2120      	movs	r1, #32
    17ae:	1852      	adds	r2, r2, r1
    17b0:	5593      	strb	r3, [r2, r6]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
    17b2:	8839      	ldrh	r1, [r7, #0]
        durval = 0xff; /* Max duration*/
    17b4:	23ff      	movs	r3, #255	; 0xff
    if (dur >= 0xfc0)
    17b6:	4559      	cmp	r1, fp
    17b8:	d8df      	bhi.n	177a <bme68x_set_heatr_conf+0x176>
        while (dur > 0x3F)
    17ba:	293f      	cmp	r1, #63	; 0x3f
    17bc:	d9d9      	bls.n	1772 <bme68x_set_heatr_conf+0x16e>
    17be:	2300      	movs	r3, #0
            dur = dur / 4;
    17c0:	0889      	lsrs	r1, r1, #2
            factor += 1;
    17c2:	3301      	adds	r3, #1
    17c4:	b2db      	uxtb	r3, r3
        while (dur > 0x3F)
    17c6:	293f      	cmp	r1, #63	; 0x3f
    17c8:	d8fa      	bhi.n	17c0 <bme68x_set_heatr_conf+0x1bc>
    17ca:	e7d3      	b.n	1774 <bme68x_set_heatr_conf+0x170>
            for (i = 0; i < conf->profile_len; i++)
    17cc:	9c01      	ldr	r4, [sp, #4]
    17ce:	e771      	b.n	16b4 <bme68x_set_heatr_conf+0xb0>
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
    17d0:	9902      	ldr	r1, [sp, #8]
    17d2:	68cb      	ldr	r3, [r1, #12]
    17d4:	2b00      	cmp	r3, #0
    17d6:	d100      	bne.n	17da <bme68x_set_heatr_conf+0x1d6>
    17d8:	e07e      	b.n	18d8 <bme68x_set_heatr_conf+0x2d4>
    17da:	688a      	ldr	r2, [r1, #8]
    17dc:	2a00      	cmp	r2, #0
    17de:	d100      	bne.n	17e2 <bme68x_set_heatr_conf+0x1de>
    17e0:	e07f      	b.n	18e2 <bme68x_set_heatr_conf+0x2de>
            if (conf->shared_heatr_dur == 0)
    17e2:	8a48      	ldrh	r0, [r1, #18]
    17e4:	4681      	mov	r9, r0
    17e6:	2800      	cmp	r0, #0
    17e8:	d058      	beq.n	189c <bme68x_set_heatr_conf+0x298>
            for (i = 0; i < conf->profile_len; i++)
    17ea:	7c09      	ldrb	r1, [r1, #16]
    17ec:	9101      	str	r1, [sp, #4]
    17ee:	2900      	cmp	r1, #0
    17f0:	d07c      	beq.n	18ec <bme68x_set_heatr_conf+0x2e8>
    17f2:	001f      	movs	r7, r3
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
    17f4:	2664      	movs	r6, #100	; 0x64
    17f6:	2400      	movs	r4, #0
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
    17f8:	9503      	str	r5, [sp, #12]
    17fa:	0015      	movs	r5, r2
    17fc:	9b01      	ldr	r3, [sp, #4]
    17fe:	4698      	mov	r8, r3
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
    1800:	0033      	movs	r3, r6
    1802:	3b0a      	subs	r3, #10
    1804:	aa04      	add	r2, sp, #16
    1806:	2108      	movs	r1, #8
    1808:	1852      	adds	r2, r2, r1
    180a:	5513      	strb	r3, [r2, r4]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
    180c:	8828      	ldrh	r0, [r5, #0]
    180e:	9900      	ldr	r1, [sp, #0]
    1810:	4b41      	ldr	r3, [pc, #260]	; (1918 <bme68x_set_heatr_conf+0x314>)
    1812:	4798      	blx	r3
    1814:	ab04      	add	r3, sp, #16
    1816:	2214      	movs	r2, #20
    1818:	189b      	adds	r3, r3, r2
    181a:	5518      	strb	r0, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
    181c:	ab04      	add	r3, sp, #16
    181e:	320c      	adds	r2, #12
    1820:	189b      	adds	r3, r3, r2
    1822:	551e      	strb	r6, [r3, r4]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
    1824:	883b      	ldrh	r3, [r7, #0]
    1826:	aa04      	add	r2, sp, #16
    1828:	212c      	movs	r1, #44	; 0x2c
    182a:	1852      	adds	r2, r2, r1
    182c:	5513      	strb	r3, [r2, r4]
    182e:	3401      	adds	r4, #1
    1830:	3502      	adds	r5, #2
    1832:	3601      	adds	r6, #1
    1834:	b2f6      	uxtb	r6, r6
    1836:	3702      	adds	r7, #2
            for (i = 0; i < conf->profile_len; i++)
    1838:	b2e3      	uxtb	r3, r4
    183a:	4543      	cmp	r3, r8
    183c:	d3e0      	bcc.n	1800 <bme68x_set_heatr_conf+0x1fc>
    183e:	9d03      	ldr	r5, [sp, #12]
    if (dur >= 0x783)
    1840:	4a39      	ldr	r2, [pc, #228]	; (1928 <bme68x_set_heatr_conf+0x324>)
        heatdurval = 0xff; /* Max duration */
    1842:	23ff      	movs	r3, #255	; 0xff
    if (dur >= 0x783)
    1844:	4649      	mov	r1, r9
    1846:	4291      	cmp	r1, r2
    1848:	d905      	bls.n	1856 <bme68x_set_heatr_conf+0x252>
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
    184a:	aa04      	add	r2, sp, #16
    184c:	7193      	strb	r3, [r2, #6]
            if (rslt == BME68X_OK)
    184e:	2d00      	cmp	r5, #0
    1850:	d052      	beq.n	18f8 <bme68x_set_heatr_conf+0x2f4>
    if (rslt == BME68X_OK)
    1852:	9c01      	ldr	r4, [sp, #4]
    1854:	e735      	b.n	16c2 <bme68x_set_heatr_conf+0xbe>
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
    1856:	20fa      	movs	r0, #250	; 0xfa
    1858:	0080      	lsls	r0, r0, #2
    185a:	464b      	mov	r3, r9
    185c:	4358      	muls	r0, r3
    185e:	21de      	movs	r1, #222	; 0xde
    1860:	31ff      	adds	r1, #255	; 0xff
    1862:	4b32      	ldr	r3, [pc, #200]	; (192c <bme68x_set_heatr_conf+0x328>)
    1864:	4798      	blx	r3
    1866:	b280      	uxth	r0, r0
    uint8_t factor = 0;
    1868:	2300      	movs	r3, #0
        while (dur > 0x3F)
    186a:	283f      	cmp	r0, #63	; 0x3f
    186c:	d904      	bls.n	1878 <bme68x_set_heatr_conf+0x274>
            dur = dur >> 2;
    186e:	0880      	lsrs	r0, r0, #2
            factor += 1;
    1870:	3301      	adds	r3, #1
    1872:	b2db      	uxtb	r3, r3
        while (dur > 0x3F)
    1874:	283f      	cmp	r0, #63	; 0x3f
    1876:	d8fa      	bhi.n	186e <bme68x_set_heatr_conf+0x26a>
        heatdurval = (uint8_t)(dur + (factor * 64));
    1878:	019b      	lsls	r3, r3, #6
    187a:	181b      	adds	r3, r3, r0
    187c:	b2db      	uxtb	r3, r3
    187e:	e7e4      	b.n	184a <bme68x_set_heatr_conf+0x246>
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
    1880:	9b00      	ldr	r3, [sp, #0]
    1882:	689b      	ldr	r3, [r3, #8]
    1884:	9301      	str	r3, [sp, #4]
    1886:	2b01      	cmp	r3, #1
    1888:	d002      	beq.n	1890 <bme68x_set_heatr_conf+0x28c>
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
    188a:	2001      	movs	r0, #1
                    hctrl = BME68X_ENABLE_HEATER;
    188c:	2300      	movs	r3, #0
    188e:	e732      	b.n	16f6 <bme68x_set_heatr_conf+0xf2>
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
    1890:	2002      	movs	r0, #2
                    hctrl = BME68X_ENABLE_HEATER;
    1892:	2300      	movs	r3, #0
    1894:	e72f      	b.n	16f6 <bme68x_set_heatr_conf+0xf2>
        rslt = BME68X_E_NULL_PTR;
    1896:	2501      	movs	r5, #1
    1898:	426d      	negs	r5, r5
    return rslt;
    189a:	e6cb      	b.n	1634 <bme68x_set_heatr_conf+0x30>
            for (i = 0; i < conf->profile_len; i++)
    189c:	9902      	ldr	r1, [sp, #8]
    189e:	7c09      	ldrb	r1, [r1, #16]
    18a0:	9101      	str	r1, [sp, #4]
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
    18a2:	2503      	movs	r5, #3
            for (i = 0; i < conf->profile_len; i++)
    18a4:	2900      	cmp	r1, #0
    18a6:	d1a4      	bne.n	17f2 <bme68x_set_heatr_conf+0x1ee>
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
    18a8:	20fa      	movs	r0, #250	; 0xfa
    18aa:	0080      	lsls	r0, r0, #2
    18ac:	464b      	mov	r3, r9
    18ae:	4358      	muls	r0, r3
    18b0:	21de      	movs	r1, #222	; 0xde
    18b2:	31ff      	adds	r1, #255	; 0xff
    18b4:	4b1d      	ldr	r3, [pc, #116]	; (192c <bme68x_set_heatr_conf+0x328>)
    18b6:	4798      	blx	r3
    18b8:	b280      	uxth	r0, r0
    uint8_t factor = 0;
    18ba:	9b01      	ldr	r3, [sp, #4]
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
    18bc:	2503      	movs	r5, #3
    18be:	e7db      	b.n	1878 <bme68x_set_heatr_conf+0x274>
            for (i = 0; i < conf->profile_len; i++)
    18c0:	9c01      	ldr	r4, [sp, #4]
    18c2:	e6f7      	b.n	16b4 <bme68x_set_heatr_conf+0xb0>
    uint8_t write_len = 0;
    18c4:	2300      	movs	r3, #0
    18c6:	9301      	str	r3, [sp, #4]
                rslt = BME68X_E_NULL_PTR;
    18c8:	2501      	movs	r5, #1
    18ca:	426d      	negs	r5, r5
    18cc:	e7c1      	b.n	1852 <bme68x_set_heatr_conf+0x24e>
    uint8_t write_len = 0;
    18ce:	2300      	movs	r3, #0
    18d0:	9301      	str	r3, [sp, #4]
                rslt = BME68X_E_NULL_PTR;
    18d2:	2501      	movs	r5, #1
    18d4:	426d      	negs	r5, r5
    18d6:	e7bc      	b.n	1852 <bme68x_set_heatr_conf+0x24e>
    uint8_t write_len = 0;
    18d8:	2300      	movs	r3, #0
    18da:	9301      	str	r3, [sp, #4]
                rslt = BME68X_E_NULL_PTR;
    18dc:	2501      	movs	r5, #1
    18de:	426d      	negs	r5, r5
    18e0:	e7b7      	b.n	1852 <bme68x_set_heatr_conf+0x24e>
    uint8_t write_len = 0;
    18e2:	2300      	movs	r3, #0
    18e4:	9301      	str	r3, [sp, #4]
                rslt = BME68X_E_NULL_PTR;
    18e6:	2501      	movs	r5, #1
    18e8:	426d      	negs	r5, r5
    18ea:	e7b2      	b.n	1852 <bme68x_set_heatr_conf+0x24e>
    if (dur >= 0x783)
    18ec:	4b0e      	ldr	r3, [pc, #56]	; (1928 <bme68x_set_heatr_conf+0x324>)
    18ee:	4298      	cmp	r0, r3
    18f0:	d9b1      	bls.n	1856 <bme68x_set_heatr_conf+0x252>
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
    18f2:	22ff      	movs	r2, #255	; 0xff
    18f4:	ab04      	add	r3, sp, #16
    18f6:	719a      	strb	r2, [r3, #6]
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
    18f8:	9b00      	ldr	r3, [sp, #0]
    18fa:	2201      	movs	r2, #1
    18fc:	a904      	add	r1, sp, #16
    18fe:	3106      	adds	r1, #6
    1900:	a804      	add	r0, sp, #16
    1902:	3007      	adds	r0, #7
    1904:	4c06      	ldr	r4, [pc, #24]	; (1920 <bme68x_set_heatr_conf+0x31c>)
    1906:	47a0      	blx	r4
    1908:	0005      	movs	r5, r0
    190a:	e6ba      	b.n	1682 <bme68x_set_heatr_conf+0x7e>
    190c:	0000d810 	.word	0x0000d810
    1910:	00000fc1 	.word	0x00000fc1
    1914:	0000865f 	.word	0x0000865f
    1918:	000009c1 	.word	0x000009c1
    191c:	00000fbf 	.word	0x00000fbf
    1920:	00000cb1 	.word	0x00000cb1
    1924:	00000d95 	.word	0x00000d95
    1928:	00000782 	.word	0x00000782
    192c:	0000a915 	.word	0x0000a915

00001930 <bme68x_default_config>:
int8_t bme68x_default_config(struct bme68x_dev *dev) {
    1930:	b530      	push	{r4, r5, lr}
    1932:	b089      	sub	sp, #36	; 0x24
    1934:	0004      	movs	r4, r0
	conf.os_hum = BME68X_OS_1X;
    1936:	a806      	add	r0, sp, #24
    1938:	2501      	movs	r5, #1
    193a:	7005      	strb	r5, [r0, #0]
	conf.os_pres = BME68X_OS_16X;
    193c:	2305      	movs	r3, #5
    193e:	7083      	strb	r3, [r0, #2]
	conf.os_temp = BME68X_OS_2X;
    1940:	3b03      	subs	r3, #3
    1942:	7043      	strb	r3, [r0, #1]
	rslt = bme68x_set_conf(&conf, dev);
    1944:	0021      	movs	r1, r4
    1946:	4b08      	ldr	r3, [pc, #32]	; (1968 <bme68x_default_config+0x38>)
    1948:	4798      	blx	r3
	heatr_conf.enable = BME68X_ENABLE;
    194a:	a901      	add	r1, sp, #4
    194c:	700d      	strb	r5, [r1, #0]
	heatr_conf.heatr_dur = BME68X_HEATR_DUR1;
    194e:	23fa      	movs	r3, #250	; 0xfa
    1950:	009b      	lsls	r3, r3, #2
    1952:	808b      	strh	r3, [r1, #4]
	heatr_conf.heatr_temp = BME68X_HIGH_TEMP;
    1954:	23af      	movs	r3, #175	; 0xaf
    1956:	005b      	lsls	r3, r3, #1
    1958:	804b      	strh	r3, [r1, #2]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, dev);
    195a:	0022      	movs	r2, r4
    195c:	2001      	movs	r0, #1
    195e:	4b03      	ldr	r3, [pc, #12]	; (196c <bme68x_default_config+0x3c>)
    1960:	4798      	blx	r3
}
    1962:	b009      	add	sp, #36	; 0x24
    1964:	bd30      	pop	{r4, r5, pc}
    1966:	46c0      	nop			; (mov r8, r8)
    1968:	00001085 	.word	0x00001085
    196c:	00001605 	.word	0x00001605

00001970 <bme68x_interface_init>:
/*!
 * BME680 interface init function. Maps platform specific functions to 
 * device descriptor.
 */
int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf)
{
    1970:	b510      	push	{r4, lr}
    1972:	b082      	sub	sp, #8
    1974:	1e04      	subs	r4, r0, #0
	// Assuming the I2C has been initialized before. 
    int8_t rslt = BME68X_OK;
	uint8_t dev_addr;

    if (bme != NULL)
    1976:	d018      	beq.n	19aa <bme68x_interface_init+0x3a>

#if defined(PC)
        setbuf(stdout, NULL);
#endif
        /* Bus configuration : I2C */
        if (intf == BME68X_I2C_INTF)
    1978:	2901      	cmp	r1, #1
    197a:	d00c      	beq.n	1996 <bme68x_interface_init+0x26>
        else if (intf == BME68X_SPI_INTF)
        {
			/* Not required for our application */
        }

        delay_ms(100);
    197c:	2064      	movs	r0, #100	; 0x64
    197e:	4b0c      	ldr	r3, [pc, #48]	; (19b0 <bme68x_interface_init+0x40>)
    1980:	4798      	blx	r3

        bme->delay__us = bme68x_delay__us;
    1982:	4b0c      	ldr	r3, [pc, #48]	; (19b4 <bme68x_interface_init+0x44>)
    1984:	64a3      	str	r3, [r4, #72]	; 0x48
        bme->intf_ptr = &dev_addr;
    1986:	466b      	mov	r3, sp
    1988:	3307      	adds	r3, #7
    198a:	6063      	str	r3, [r4, #4]
        bme->amb_temp = 25; /* The ambient temperature in deg C is used for defining the heater temperature */
    198c:	2319      	movs	r3, #25
    198e:	73a3      	strb	r3, [r4, #14]
    int8_t rslt = BME68X_OK;
    1990:	2000      	movs	r0, #0
    {
        rslt = BME68X_E_NULL_PTR;
    }

    return rslt;
}
    1992:	b002      	add	sp, #8
    1994:	bd10      	pop	{r4, pc}
            dev_addr = BME68X_I2C_ADDR_HIGH;
    1996:	2277      	movs	r2, #119	; 0x77
    1998:	466b      	mov	r3, sp
    199a:	71da      	strb	r2, [r3, #7]
            bme->read = bme68x_i2c_read;
    199c:	4b06      	ldr	r3, [pc, #24]	; (19b8 <bme68x_interface_init+0x48>)
    199e:	6403      	str	r3, [r0, #64]	; 0x40
            bme->write = bme68x_i2c_write;
    19a0:	4b06      	ldr	r3, [pc, #24]	; (19bc <bme68x_interface_init+0x4c>)
    19a2:	6443      	str	r3, [r0, #68]	; 0x44
            bme->intf = BME68X_I2C_INTF;
    19a4:	2301      	movs	r3, #1
    19a6:	7303      	strb	r3, [r0, #12]
    19a8:	e7e8      	b.n	197c <bme68x_interface_init+0xc>
        rslt = BME68X_E_NULL_PTR;
    19aa:	2001      	movs	r0, #1
    19ac:	4240      	negs	r0, r0
    19ae:	e7f0      	b.n	1992 <bme68x_interface_init+0x22>
    19b0:	00006a7d 	.word	0x00006a7d
    19b4:	00000c79 	.word	0x00000c79
    19b8:	00000bf1 	.word	0x00000bf1
    19bc:	00000c3d 	.word	0x00000c3d

000019c0 <CLI_ResetDevice>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    19c0:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    19c4:	4a02      	ldr	r2, [pc, #8]	; (19d0 <CLI_ResetDevice+0x10>)
    19c6:	4b03      	ldr	r3, [pc, #12]	; (19d4 <CLI_ResetDevice+0x14>)
    19c8:	60da      	str	r2, [r3, #12]
    19ca:	f3bf 8f4f 	dsb	sy
    19ce:	e7fe      	b.n	19ce <CLI_ResetDevice+0xe>
    19d0:	05fa0004 	.word	0x05fa0004
    19d4:	e000ed00 	.word	0xe000ed00

000019d8 <CLI_GetTempData>:
/******************************************************************************
* CLI Functions - Define here
******************************************************************************/
//Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetTempData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
    19d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19da:	b0ab      	sub	sp, #172	; 0xac
    19dc:	0005      	movs	r5, r0
	int8_t rslt;
	uint8_t n_fields;
	uint8_t i = 0;
	struct bme68x_data data[BME68X_N_MEAS] = { { 0 } };
    19de:	2290      	movs	r2, #144	; 0x90
    19e0:	2100      	movs	r1, #0
    19e2:	a805      	add	r0, sp, #20
    19e4:	4b13      	ldr	r3, [pc, #76]	; (1a34 <CLI_GetTempData+0x5c>)
    19e6:	4798      	blx	r3
	//struct bme68x_dev t_dev;

	rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &bme); /* Trigger a measurement */
    19e8:	4c13      	ldr	r4, [pc, #76]	; (1a38 <CLI_GetTempData+0x60>)
    19ea:	0021      	movs	r1, r4
    19ec:	2001      	movs	r0, #1
    19ee:	4b13      	ldr	r3, [pc, #76]	; (1a3c <CLI_GetTempData+0x64>)
    19f0:	4798      	blx	r3

	/* Wait for the measurement to complete */
	//t_dev.delay__us(BME68X_HEATR_DUR1_DELAY, t_dev.intf_ptr);
	vTaskDelay(pdMS_TO_TICKS((uint32_t) 1000));
    19f2:	20fa      	movs	r0, #250	; 0xfa
    19f4:	0080      	lsls	r0, r0, #2
    19f6:	4b12      	ldr	r3, [pc, #72]	; (1a40 <CLI_GetTempData+0x68>)
    19f8:	4798      	blx	r3
	rslt = bme68x_get_data(BME68X_FORCED_MODE, &data[0], &n_fields, &bme);
    19fa:	0023      	movs	r3, r4
    19fc:	22a7      	movs	r2, #167	; 0xa7
    19fe:	446a      	add	r2, sp
    1a00:	a905      	add	r1, sp, #20
    1a02:	2001      	movs	r0, #1
    1a04:	4c0f      	ldr	r4, [pc, #60]	; (1a44 <CLI_GetTempData+0x6c>)
    1a06:	47a0      	blx	r4
		    
	sprintf(pcWriteBuffer,"Temp: %f  Hum: %f Press: %f \n", data->temperature, data->humidity, data->pressure);
    1a08:	4c0f      	ldr	r4, [pc, #60]	; (1a48 <CLI_GetTempData+0x70>)
    1a0a:	9807      	ldr	r0, [sp, #28]
    1a0c:	47a0      	blx	r4
    1a0e:	0006      	movs	r6, r0
    1a10:	000f      	movs	r7, r1
    1a12:	9808      	ldr	r0, [sp, #32]
    1a14:	47a0      	blx	r4
    1a16:	9002      	str	r0, [sp, #8]
    1a18:	9103      	str	r1, [sp, #12]
    1a1a:	9809      	ldr	r0, [sp, #36]	; 0x24
    1a1c:	47a0      	blx	r4
    1a1e:	9000      	str	r0, [sp, #0]
    1a20:	9101      	str	r1, [sp, #4]
    1a22:	0032      	movs	r2, r6
    1a24:	003b      	movs	r3, r7
    1a26:	4909      	ldr	r1, [pc, #36]	; (1a4c <CLI_GetTempData+0x74>)
    1a28:	0028      	movs	r0, r5
    1a2a:	4c09      	ldr	r4, [pc, #36]	; (1a50 <CLI_GetTempData+0x78>)
    1a2c:	47a0      	blx	r4
	
	return pdFALSE;
}
    1a2e:	2000      	movs	r0, #0
    1a30:	b02b      	add	sp, #172	; 0xac
    1a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a34:	0000865f 	.word	0x0000865f
    1a38:	20004df0 	.word	0x20004df0
    1a3c:	00000fc1 	.word	0x00000fc1
    1a40:	00005b69 	.word	0x00005b69
    1a44:	000011d9 	.word	0x000011d9
    1a48:	0000d6ad 	.word	0x0000d6ad
    1a4c:	0000d844 	.word	0x0000d844
    1a50:	00009129 	.word	0x00009129

00001a54 <CLI_GetImuData>:

//Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
    1a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a56:	b085      	sub	sp, #20
    1a58:	9002      	str	r0, [sp, #8]
    1a5a:	9103      	str	r1, [sp, #12]
	static int16_t  data_raw_acceleration[3];
	static int16_t  data_raw_angular_rate;
	static float acceleration_mg[3];
	uint8_t reg  = 1;
	stmdev_ctx_t *dev_ctx = GetImuStruct();
    1a5c:	4b17      	ldr	r3, [pc, #92]	; (1abc <CLI_GetImuData+0x68>)
    1a5e:	4798      	blx	r3
    1a60:	0007      	movs	r7, r0

	/* Read output only if new xl value is available */
	//lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);

	if (reg) {
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
    1a62:	4c17      	ldr	r4, [pc, #92]	; (1ac0 <CLI_GetImuData+0x6c>)
    1a64:	2206      	movs	r2, #6
    1a66:	2100      	movs	r1, #0
    1a68:	0020      	movs	r0, r4
    1a6a:	4b16      	ldr	r3, [pc, #88]	; (1ac4 <CLI_GetImuData+0x70>)
    1a6c:	4798      	blx	r3
		lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
    1a6e:	0021      	movs	r1, r4
    1a70:	0038      	movs	r0, r7
    1a72:	4b15      	ldr	r3, [pc, #84]	; (1ac8 <CLI_GetImuData+0x74>)
    1a74:	4798      	blx	r3
		acceleration_mg[0] =
		lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
    1a76:	2300      	movs	r3, #0
    1a78:	5ee0      	ldrsh	r0, [r4, r3]
    1a7a:	4f14      	ldr	r7, [pc, #80]	; (1acc <CLI_GetImuData+0x78>)
    1a7c:	47b8      	blx	r7
		acceleration_mg[0] =
    1a7e:	4e14      	ldr	r6, [pc, #80]	; (1ad0 <CLI_GetImuData+0x7c>)
    1a80:	6030      	str	r0, [r6, #0]
		acceleration_mg[1] =
		lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
    1a82:	2302      	movs	r3, #2
    1a84:	5ee0      	ldrsh	r0, [r4, r3]
    1a86:	47b8      	blx	r7
		acceleration_mg[1] =
    1a88:	6070      	str	r0, [r6, #4]
		acceleration_mg[2] =
		lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
    1a8a:	2304      	movs	r3, #4
    1a8c:	5ee0      	ldrsh	r0, [r4, r3]
    1a8e:	47b8      	blx	r7
    1a90:	1c04      	adds	r4, r0, #0
		acceleration_mg[2] =
    1a92:	60b0      	str	r0, [r6, #8]

		snprintf(pcWriteBuffer,xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n",
    1a94:	4d0f      	ldr	r5, [pc, #60]	; (1ad4 <CLI_GetImuData+0x80>)
    1a96:	6830      	ldr	r0, [r6, #0]
    1a98:	47a8      	blx	r5
    1a9a:	0007      	movs	r7, r0
    1a9c:	1c20      	adds	r0, r4, #0
    1a9e:	47a8      	blx	r5
    1aa0:	9001      	str	r0, [sp, #4]
    1aa2:	6870      	ldr	r0, [r6, #4]
    1aa4:	47a8      	blx	r5
    1aa6:	9000      	str	r0, [sp, #0]
    1aa8:	003b      	movs	r3, r7
    1aaa:	4a0b      	ldr	r2, [pc, #44]	; (1ad8 <CLI_GetImuData+0x84>)
    1aac:	9903      	ldr	r1, [sp, #12]
    1aae:	9802      	ldr	r0, [sp, #8]
    1ab0:	4c0a      	ldr	r4, [pc, #40]	; (1adc <CLI_GetImuData+0x88>)
    1ab2:	47a0      	blx	r4
	} else {
		snprintf(pcWriteBuffer,xWriteBufferLen, "No data ready! \r\n");
	}

	return pdFALSE;
}
    1ab4:	2000      	movs	r0, #0
    1ab6:	b005      	add	sp, #20
    1ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1aba:	46c0      	nop			; (mov r8, r8)
    1abc:	00002719 	.word	0x00002719
    1ac0:	20000240 	.word	0x20000240
    1ac4:	0000865f 	.word	0x0000865f
    1ac8:	000022e9 	.word	0x000022e9
    1acc:	000021cd 	.word	0x000021cd
    1ad0:	20000224 	.word	0x20000224
    1ad4:	0000b9f1 	.word	0x0000b9f1
    1ad8:	0000d820 	.word	0x0000d820
    1adc:	000090c5 	.word	0x000090c5

00001ae0 <xCliClearTerminalScreen>:
//THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
//SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
//CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen( char *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
    1ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ae2:	0006      	movs	r6, r0
    1ae4:	000f      	movs	r7, r1
	char clearScreen = ASCII_ESC;
	snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
    1ae6:	4d06      	ldr	r5, [pc, #24]	; (1b00 <xCliClearTerminalScreen+0x20>)
    1ae8:	231b      	movs	r3, #27
    1aea:	4a06      	ldr	r2, [pc, #24]	; (1b04 <xCliClearTerminalScreen+0x24>)
    1aec:	210f      	movs	r1, #15
    1aee:	0028      	movs	r0, r5
    1af0:	4c05      	ldr	r4, [pc, #20]	; (1b08 <xCliClearTerminalScreen+0x28>)
    1af2:	47a0      	blx	r4
	snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
    1af4:	002a      	movs	r2, r5
    1af6:	0039      	movs	r1, r7
    1af8:	0030      	movs	r0, r6
    1afa:	47a0      	blx	r4
	return pdFALSE;
}
    1afc:	2000      	movs	r0, #0
    1afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b00:	20000230 	.word	0x20000230
    1b04:	0000d994 	.word	0x0000d994
    1b08:	000090c5 	.word	0x000090c5

00001b0c <vCommandConsoleTask>:
{
    1b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b0e:	46d6      	mov	lr, sl
    1b10:	464f      	mov	r7, r9
    1b12:	b580      	push	{r7, lr}
    1b14:	b083      	sub	sp, #12
FreeRTOS_CLIRegisterCommand( &xTempGetCommand );
    1b16:	4866      	ldr	r0, [pc, #408]	; (1cb0 <vCommandConsoleTask+0x1a4>)
    1b18:	4c66      	ldr	r4, [pc, #408]	; (1cb4 <vCommandConsoleTask+0x1a8>)
    1b1a:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xImuGetCommand );
    1b1c:	4866      	ldr	r0, [pc, #408]	; (1cb8 <vCommandConsoleTask+0x1ac>)
    1b1e:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xClearScreen );
    1b20:	4866      	ldr	r0, [pc, #408]	; (1cbc <vCommandConsoleTask+0x1b0>)
    1b22:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xResetCommand );
    1b24:	4866      	ldr	r0, [pc, #408]	; (1cc0 <vCommandConsoleTask+0x1b4>)
    1b26:	47a0      	blx	r4
    SerialConsoleWriteString( pcWelcomeMessage);
    1b28:	4866      	ldr	r0, [pc, #408]	; (1cc4 <vCommandConsoleTask+0x1b8>)
    1b2a:	4b67      	ldr	r3, [pc, #412]	; (1cc8 <vCommandConsoleTask+0x1bc>)
    1b2c:	4798      	blx	r3
	cliCharReadySemaphore = xSemaphoreCreateBinary();
    1b2e:	2203      	movs	r2, #3
    1b30:	2100      	movs	r1, #0
    1b32:	2001      	movs	r0, #1
    1b34:	4b65      	ldr	r3, [pc, #404]	; (1ccc <vCommandConsoleTask+0x1c0>)
    1b36:	4798      	blx	r3
    1b38:	4b65      	ldr	r3, [pc, #404]	; (1cd0 <vCommandConsoleTask+0x1c4>)
    1b3a:	6018      	str	r0, [r3, #0]
	if(cliCharReadySemaphore == NULL)
    1b3c:	2800      	cmp	r0, #0
    1b3e:	d106      	bne.n	1b4e <vCommandConsoleTask+0x42>
		LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
    1b40:	4964      	ldr	r1, [pc, #400]	; (1cd4 <vCommandConsoleTask+0x1c8>)
    1b42:	3003      	adds	r0, #3
    1b44:	4b64      	ldr	r3, [pc, #400]	; (1cd8 <vCommandConsoleTask+0x1cc>)
    1b46:	4798      	blx	r3
		vTaskSuspend( NULL );
    1b48:	2000      	movs	r0, #0
    1b4a:	4b64      	ldr	r3, [pc, #400]	; (1cdc <vCommandConsoleTask+0x1d0>)
    1b4c:	4798      	blx	r3
            cInputIndex = 0;
    1b4e:	2400      	movs	r4, #0
int ret = SerialConsoleReadCharacter(character);
    1b50:	4b63      	ldr	r3, [pc, #396]	; (1ce0 <vCommandConsoleTask+0x1d4>)
    1b52:	4699      	mov	r9, r3
	xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
    1b54:	4b5e      	ldr	r3, [pc, #376]	; (1cd0 <vCommandConsoleTask+0x1c4>)
    1b56:	469a      	mov	sl, r3
    1b58:	e033      	b.n	1bc2 <vCommandConsoleTask+0xb6>
    1b5a:	2101      	movs	r1, #1
    1b5c:	4249      	negs	r1, r1
    1b5e:	4653      	mov	r3, sl
    1b60:	6818      	ldr	r0, [r3, #0]
    1b62:	4b60      	ldr	r3, [pc, #384]	; (1ce4 <vCommandConsoleTask+0x1d8>)
    1b64:	4798      	blx	r3
	SerialConsoleReadCharacter(character);
    1b66:	a801      	add	r0, sp, #4
    1b68:	4b5d      	ldr	r3, [pc, #372]	; (1ce0 <vCommandConsoleTask+0x1d4>)
    1b6a:	4798      	blx	r3
    1b6c:	e02d      	b.n	1bca <vCommandConsoleTask+0xbe>
            SerialConsoleWriteString("\r\n");
    1b6e:	485e      	ldr	r0, [pc, #376]	; (1ce8 <vCommandConsoleTask+0x1dc>)
    1b70:	4b55      	ldr	r3, [pc, #340]	; (1cc8 <vCommandConsoleTask+0x1bc>)
    1b72:	4798      	blx	r3
			isEscapeCode = false; pcEscapeCodePos = 0;
    1b74:	2400      	movs	r4, #0
    1b76:	4b5d      	ldr	r3, [pc, #372]	; (1cec <vCommandConsoleTask+0x1e0>)
    1b78:	701c      	strb	r4, [r3, #0]
    1b7a:	4b5d      	ldr	r3, [pc, #372]	; (1cf0 <vCommandConsoleTask+0x1e4>)
    1b7c:	701c      	strb	r4, [r3, #0]
			strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI-1);
    1b7e:	4d5d      	ldr	r5, [pc, #372]	; (1cf4 <vCommandConsoleTask+0x1e8>)
    1b80:	2231      	movs	r2, #49	; 0x31
    1b82:	495d      	ldr	r1, [pc, #372]	; (1cf8 <vCommandConsoleTask+0x1ec>)
    1b84:	0028      	movs	r0, r5
    1b86:	4b5d      	ldr	r3, [pc, #372]	; (1cfc <vCommandConsoleTask+0x1f0>)
    1b88:	4798      	blx	r3
			pcLastCommand[MAX_INPUT_LENGTH_CLI-1] = 0;	//Ensure null termination
    1b8a:	2331      	movs	r3, #49	; 0x31
    1b8c:	54ec      	strb	r4, [r5, r3]
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
    1b8e:	4c5c      	ldr	r4, [pc, #368]	; (1d00 <vCommandConsoleTask+0x1f4>)
    1b90:	4e59      	ldr	r6, [pc, #356]	; (1cf8 <vCommandConsoleTask+0x1ec>)
    1b92:	4f5c      	ldr	r7, [pc, #368]	; (1d04 <vCommandConsoleTask+0x1f8>)
    1b94:	2264      	movs	r2, #100	; 0x64
    1b96:	0021      	movs	r1, r4
    1b98:	0030      	movs	r0, r6
    1b9a:	47b8      	blx	r7
    1b9c:	0005      	movs	r5, r0
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
    1b9e:	2200      	movs	r2, #0
    1ba0:	2363      	movs	r3, #99	; 0x63
    1ba2:	54e2      	strb	r2, [r4, r3]
                SerialConsoleWriteString(pcOutputString);
    1ba4:	0020      	movs	r0, r4
    1ba6:	4b48      	ldr	r3, [pc, #288]	; (1cc8 <vCommandConsoleTask+0x1bc>)
    1ba8:	4798      	blx	r3
            } while( xMoreDataToFollow != pdFALSE );
    1baa:	2d00      	cmp	r5, #0
    1bac:	d1f2      	bne.n	1b94 <vCommandConsoleTask+0x88>
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
    1bae:	2232      	movs	r2, #50	; 0x32
    1bb0:	2100      	movs	r1, #0
    1bb2:	4851      	ldr	r0, [pc, #324]	; (1cf8 <vCommandConsoleTask+0x1ec>)
    1bb4:	4c54      	ldr	r4, [pc, #336]	; (1d08 <vCommandConsoleTask+0x1fc>)
    1bb6:	47a0      	blx	r4
			memset( pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
    1bb8:	2264      	movs	r2, #100	; 0x64
    1bba:	2100      	movs	r1, #0
    1bbc:	4850      	ldr	r0, [pc, #320]	; (1d00 <vCommandConsoleTask+0x1f4>)
    1bbe:	47a0      	blx	r4
            cInputIndex = 0;
    1bc0:	2400      	movs	r4, #0
int ret = SerialConsoleReadCharacter(character);
    1bc2:	a801      	add	r0, sp, #4
    1bc4:	47c8      	blx	r9
if(ret == -1)
    1bc6:	1c43      	adds	r3, r0, #1
    1bc8:	d0c7      	beq.n	1b5a <vCommandConsoleTask+0x4e>
	if( cRxedChar[0] == '\n' || cRxedChar[0] == '\r'  )
    1bca:	466b      	mov	r3, sp
    1bcc:	791b      	ldrb	r3, [r3, #4]
    1bce:	2b0a      	cmp	r3, #10
    1bd0:	d0cd      	beq.n	1b6e <vCommandConsoleTask+0x62>
    1bd2:	2b0d      	cmp	r3, #13
    1bd4:	d0cb      	beq.n	1b6e <vCommandConsoleTask+0x62>
			if (true == isEscapeCode) {
    1bd6:	4a45      	ldr	r2, [pc, #276]	; (1cec <vCommandConsoleTask+0x1e0>)
    1bd8:	7812      	ldrb	r2, [r2, #0]
    1bda:	2a00      	cmp	r2, #0
    1bdc:	d03f      	beq.n	1c5e <vCommandConsoleTask+0x152>
				if(pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
    1bde:	4a44      	ldr	r2, [pc, #272]	; (1cf0 <vCommandConsoleTask+0x1e4>)
    1be0:	7812      	ldrb	r2, [r2, #0]
    1be2:	2a03      	cmp	r2, #3
    1be4:	d813      	bhi.n	1c0e <vCommandConsoleTask+0x102>
					pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
    1be6:	1c51      	adds	r1, r2, #1
    1be8:	b2c9      	uxtb	r1, r1
    1bea:	4841      	ldr	r0, [pc, #260]	; (1cf0 <vCommandConsoleTask+0x1e4>)
    1bec:	7001      	strb	r1, [r0, #0]
    1bee:	4847      	ldr	r0, [pc, #284]	; (1d0c <vCommandConsoleTask+0x200>)
    1bf0:	5483      	strb	r3, [r0, r2]
				if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
    1bf2:	2901      	cmp	r1, #1
    1bf4:	d9e5      	bls.n	1bc2 <vCommandConsoleTask+0xb6>
					if(strcasecmp(pcEscapeCodes, "oa"))	{
    1bf6:	4946      	ldr	r1, [pc, #280]	; (1d10 <vCommandConsoleTask+0x204>)
    1bf8:	4844      	ldr	r0, [pc, #272]	; (1d0c <vCommandConsoleTask+0x200>)
    1bfa:	4b46      	ldr	r3, [pc, #280]	; (1d14 <vCommandConsoleTask+0x208>)
    1bfc:	4798      	blx	r3
    1bfe:	2800      	cmp	r0, #0
    1c00:	d10b      	bne.n	1c1a <vCommandConsoleTask+0x10e>
					isEscapeCode = false; pcEscapeCodePos = 0;
    1c02:	2300      	movs	r3, #0
    1c04:	4a39      	ldr	r2, [pc, #228]	; (1cec <vCommandConsoleTask+0x1e0>)
    1c06:	7013      	strb	r3, [r2, #0]
    1c08:	4a39      	ldr	r2, [pc, #228]	; (1cf0 <vCommandConsoleTask+0x1e4>)
    1c0a:	7013      	strb	r3, [r2, #0]
    1c0c:	e7d9      	b.n	1bc2 <vCommandConsoleTask+0xb6>
					isEscapeCode = false; pcEscapeCodePos = 0;
    1c0e:	2300      	movs	r3, #0
    1c10:	4a36      	ldr	r2, [pc, #216]	; (1cec <vCommandConsoleTask+0x1e0>)
    1c12:	7013      	strb	r3, [r2, #0]
    1c14:	4a36      	ldr	r2, [pc, #216]	; (1cf0 <vCommandConsoleTask+0x1e4>)
    1c16:	7013      	strb	r3, [r2, #0]
    1c18:	e7d3      	b.n	1bc2 <vCommandConsoleTask+0xb6>
                            sprintf(pcInputString, "%c[2K\r>", 27);
    1c1a:	4c37      	ldr	r4, [pc, #220]	; (1cf8 <vCommandConsoleTask+0x1ec>)
    1c1c:	221b      	movs	r2, #27
    1c1e:	493e      	ldr	r1, [pc, #248]	; (1d18 <vCommandConsoleTask+0x20c>)
    1c20:	0020      	movs	r0, r4
    1c22:	4b3e      	ldr	r3, [pc, #248]	; (1d1c <vCommandConsoleTask+0x210>)
    1c24:	4798      	blx	r3
				            SerialConsoleWriteString((char*)pcInputString);
    1c26:	0020      	movs	r0, r4
    1c28:	4b27      	ldr	r3, [pc, #156]	; (1cc8 <vCommandConsoleTask+0x1bc>)
    1c2a:	4798      	blx	r3
                            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
    1c2c:	2232      	movs	r2, #50	; 0x32
    1c2e:	2100      	movs	r1, #0
    1c30:	0020      	movs	r0, r4
    1c32:	4b35      	ldr	r3, [pc, #212]	; (1d08 <vCommandConsoleTask+0x1fc>)
    1c34:	4798      	blx	r3
						strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1); 	
    1c36:	2231      	movs	r2, #49	; 0x31
    1c38:	492e      	ldr	r1, [pc, #184]	; (1cf4 <vCommandConsoleTask+0x1e8>)
    1c3a:	0020      	movs	r0, r4
    1c3c:	4b2f      	ldr	r3, [pc, #188]	; (1cfc <vCommandConsoleTask+0x1f0>)
    1c3e:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
    1c40:	0020      	movs	r0, r4
    1c42:	4b37      	ldr	r3, [pc, #220]	; (1d20 <vCommandConsoleTask+0x214>)
    1c44:	4798      	blx	r3
    1c46:	2431      	movs	r4, #49	; 0x31
    1c48:	2830      	cmp	r0, #48	; 0x30
    1c4a:	d803      	bhi.n	1c54 <vCommandConsoleTask+0x148>
    1c4c:	4829      	ldr	r0, [pc, #164]	; (1cf4 <vCommandConsoleTask+0x1e8>)
    1c4e:	4b34      	ldr	r3, [pc, #208]	; (1d20 <vCommandConsoleTask+0x214>)
    1c50:	4798      	blx	r3
    1c52:	0004      	movs	r4, r0
    1c54:	b2e4      	uxtb	r4, r4
						SerialConsoleWriteString(pcInputString);
    1c56:	4828      	ldr	r0, [pc, #160]	; (1cf8 <vCommandConsoleTask+0x1ec>)
    1c58:	4b1b      	ldr	r3, [pc, #108]	; (1cc8 <vCommandConsoleTask+0x1bc>)
    1c5a:	4798      	blx	r3
    1c5c:	e7d1      	b.n	1c02 <vCommandConsoleTask+0xf6>
            else if( cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE )
    1c5e:	2b08      	cmp	r3, #8
    1c60:	d010      	beq.n	1c84 <vCommandConsoleTask+0x178>
    1c62:	2b7f      	cmp	r3, #127	; 0x7f
    1c64:	d00e      	beq.n	1c84 <vCommandConsoleTask+0x178>
			else if( cRxedChar[0] == ASCII_ESC) {
    1c66:	2b1b      	cmp	r3, #27
    1c68:	d01a      	beq.n	1ca0 <vCommandConsoleTask+0x194>
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
    1c6a:	2c31      	cmp	r4, #49	; 0x31
    1c6c:	d803      	bhi.n	1c76 <vCommandConsoleTask+0x16a>
                    pcInputString[ cInputIndex ] = cRxedChar[0];
    1c6e:	4a22      	ldr	r2, [pc, #136]	; (1cf8 <vCommandConsoleTask+0x1ec>)
    1c70:	5513      	strb	r3, [r2, r4]
                    cInputIndex++;
    1c72:	3401      	adds	r4, #1
    1c74:	b2e4      	uxtb	r4, r4
					cRxedChar[1] = 0;
    1c76:	2300      	movs	r3, #0
    1c78:	466a      	mov	r2, sp
    1c7a:	7153      	strb	r3, [r2, #5]
					SerialConsoleWriteString(&cRxedChar[0]);
    1c7c:	a801      	add	r0, sp, #4
    1c7e:	4b12      	ldr	r3, [pc, #72]	; (1cc8 <vCommandConsoleTask+0x1bc>)
    1c80:	4798      	blx	r3
    1c82:	e79e      	b.n	1bc2 <vCommandConsoleTask+0xb6>
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
    1c84:	4b27      	ldr	r3, [pc, #156]	; (1d24 <vCommandConsoleTask+0x218>)
    1c86:	681b      	ldr	r3, [r3, #0]
    1c88:	9300      	str	r3, [sp, #0]
				SerialConsoleWriteString(erase);
    1c8a:	4668      	mov	r0, sp
    1c8c:	4b0e      	ldr	r3, [pc, #56]	; (1cc8 <vCommandConsoleTask+0x1bc>)
    1c8e:	4798      	blx	r3
                if( cInputIndex > 0 )
    1c90:	2c00      	cmp	r4, #0
    1c92:	d096      	beq.n	1bc2 <vCommandConsoleTask+0xb6>
                    cInputIndex--;
    1c94:	3c01      	subs	r4, #1
    1c96:	b2e4      	uxtb	r4, r4
                    pcInputString[ cInputIndex ] = 0;
    1c98:	2200      	movs	r2, #0
    1c9a:	4b17      	ldr	r3, [pc, #92]	; (1cf8 <vCommandConsoleTask+0x1ec>)
    1c9c:	551a      	strb	r2, [r3, r4]
            {
    1c9e:	e790      	b.n	1bc2 <vCommandConsoleTask+0xb6>
				isEscapeCode = true; //Next characters will be code arguments
    1ca0:	2201      	movs	r2, #1
    1ca2:	4b12      	ldr	r3, [pc, #72]	; (1cec <vCommandConsoleTask+0x1e0>)
    1ca4:	701a      	strb	r2, [r3, #0]
				pcEscapeCodePos = 0;
    1ca6:	2200      	movs	r2, #0
    1ca8:	4b11      	ldr	r3, [pc, #68]	; (1cf0 <vCommandConsoleTask+0x1e4>)
    1caa:	701a      	strb	r2, [r3, #0]
    1cac:	e789      	b.n	1bc2 <vCommandConsoleTask+0xb6>
    1cae:	46c0      	nop			; (mov r8, r8)
    1cb0:	0000d9bc 	.word	0x0000d9bc
    1cb4:	00002d51 	.word	0x00002d51
    1cb8:	0000d99c 	.word	0x0000d99c
    1cbc:	0000d984 	.word	0x0000d984
    1cc0:	0000d9ac 	.word	0x0000d9ac
    1cc4:	0000d914 	.word	0x0000d914
    1cc8:	0000698d 	.word	0x0000698d
    1ccc:	000045a9 	.word	0x000045a9
    1cd0:	200038a4 	.word	0x200038a4
    1cd4:	0000d958 	.word	0x0000d958
    1cd8:	00006a3d 	.word	0x00006a3d
    1cdc:	00005d09 	.word	0x00005d09
    1ce0:	00006a11 	.word	0x00006a11
    1ce4:	0000508d 	.word	0x0000508d
    1ce8:	0000e9a8 	.word	0x0000e9a8
    1cec:	20000246 	.word	0x20000246
    1cf0:	20000247 	.word	0x20000247
    1cf4:	20000280 	.word	0x20000280
    1cf8:	2000024c 	.word	0x2000024c
    1cfc:	000091d9 	.word	0x000091d9
    1d00:	200002b4 	.word	0x200002b4
    1d04:	00002d95 	.word	0x00002d95
    1d08:	0000865f 	.word	0x0000865f
    1d0c:	20000248 	.word	0x20000248
    1d10:	0000d978 	.word	0x0000d978
    1d14:	0000916d 	.word	0x0000916d
    1d18:	0000d97c 	.word	0x0000d97c
    1d1c:	00009129 	.word	0x00009129
    1d20:	000091a9 	.word	0x000091a9
    1d24:	0000d81c 	.word	0x0000d81c

00001d28 <CliCharReadySemaphoreGiveFromISR>:
{
    1d28:	b510      	push	{r4, lr}
	xHigherPriorityTaskWoken = pdFALSE;
    1d2a:	4c08      	ldr	r4, [pc, #32]	; (1d4c <CliCharReadySemaphoreGiveFromISR+0x24>)
    1d2c:	2300      	movs	r3, #0
    1d2e:	6023      	str	r3, [r4, #0]
	xSemaphoreGiveFromISR( cliCharReadySemaphore, &xHigherPriorityTaskWoken );
    1d30:	4b07      	ldr	r3, [pc, #28]	; (1d50 <CliCharReadySemaphoreGiveFromISR+0x28>)
    1d32:	6818      	ldr	r0, [r3, #0]
    1d34:	0021      	movs	r1, r4
    1d36:	4b07      	ldr	r3, [pc, #28]	; (1d54 <CliCharReadySemaphoreGiveFromISR+0x2c>)
    1d38:	4798      	blx	r3
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    1d3a:	6823      	ldr	r3, [r4, #0]
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	d003      	beq.n	1d48 <CliCharReadySemaphoreGiveFromISR+0x20>
    1d40:	2280      	movs	r2, #128	; 0x80
    1d42:	0552      	lsls	r2, r2, #21
    1d44:	4b04      	ldr	r3, [pc, #16]	; (1d58 <CliCharReadySemaphoreGiveFromISR+0x30>)
    1d46:	601a      	str	r2, [r3, #0]
}
    1d48:	bd10      	pop	{r4, pc}
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	20000318 	.word	0x20000318
    1d50:	200038a4 	.word	0x200038a4
    1d54:	00004d71 	.word	0x00004d71
    1d58:	e000ed04 	.word	0xe000ed04

00001d5c <I2cSensorsTxComplete>:
				and is currently waiting for a notification that it has finished.
 * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsTxComplete(struct i2c_master_module *const module){
    1d5c:	b510      	push	{r4, lr}
    1d5e:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;			
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    1d60:	2400      	movs	r4, #0
    1d62:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    1d64:	4b07      	ldr	r3, [pc, #28]	; (1d84 <I2cSensorsTxComplete+0x28>)
    1d66:	6818      	ldr	r0, [r3, #0]
    1d68:	a901      	add	r1, sp, #4
    1d6a:	4b07      	ldr	r3, [pc, #28]	; (1d88 <I2cSensorsTxComplete+0x2c>)
    1d6c:	4798      	blx	r3
	sensorTransmitError = false;
    1d6e:	4b07      	ldr	r3, [pc, #28]	; (1d8c <I2cSensorsTxComplete+0x30>)
    1d70:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    1d72:	9b01      	ldr	r3, [sp, #4]
    1d74:	2b00      	cmp	r3, #0
    1d76:	d003      	beq.n	1d80 <I2cSensorsTxComplete+0x24>
    1d78:	2280      	movs	r2, #128	; 0x80
    1d7a:	0552      	lsls	r2, r2, #21
    1d7c:	4b04      	ldr	r3, [pc, #16]	; (1d90 <I2cSensorsTxComplete+0x34>)
    1d7e:	601a      	str	r2, [r3, #0]
}
    1d80:	b002      	add	sp, #8
    1d82:	bd10      	pop	{r4, pc}
    1d84:	200038d4 	.word	0x200038d4
    1d88:	00004d71 	.word	0x00004d71
    1d8c:	2000031c 	.word	0x2000031c
    1d90:	e000ed04 	.word	0xe000ed04

00001d94 <I2cSensorsRxComplete>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsRxComplete(struct i2c_master_module *const module){
    1d94:	b510      	push	{r4, lr}
    1d96:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    1d98:	2400      	movs	r4, #0
    1d9a:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    1d9c:	4b07      	ldr	r3, [pc, #28]	; (1dbc <I2cSensorsRxComplete+0x28>)
    1d9e:	6818      	ldr	r0, [r3, #0]
    1da0:	a901      	add	r1, sp, #4
    1da2:	4b07      	ldr	r3, [pc, #28]	; (1dc0 <I2cSensorsRxComplete+0x2c>)
    1da4:	4798      	blx	r3
	sensorTransmitError = false;
    1da6:	4b07      	ldr	r3, [pc, #28]	; (1dc4 <I2cSensorsRxComplete+0x30>)
    1da8:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    1daa:	9b01      	ldr	r3, [sp, #4]
    1dac:	2b00      	cmp	r3, #0
    1dae:	d003      	beq.n	1db8 <I2cSensorsRxComplete+0x24>
    1db0:	2280      	movs	r2, #128	; 0x80
    1db2:	0552      	lsls	r2, r2, #21
    1db4:	4b04      	ldr	r3, [pc, #16]	; (1dc8 <I2cSensorsRxComplete+0x34>)
    1db6:	601a      	str	r2, [r3, #0]
}
    1db8:	b002      	add	sp, #8
    1dba:	bd10      	pop	{r4, pc}
    1dbc:	200038d4 	.word	0x200038d4
    1dc0:	00004d71 	.word	0x00004d71
    1dc4:	2000031c 	.word	0x2000031c
    1dc8:	e000ed04 	.word	0xe000ed04

00001dcc <I2cSensorsError>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsError(struct i2c_master_module *const module){
    1dcc:	b510      	push	{r4, lr}
    1dce:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.txDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    1dd0:	2400      	movs	r4, #0
    1dd2:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    1dd4:	4b07      	ldr	r3, [pc, #28]	; (1df4 <I2cSensorsError+0x28>)
    1dd6:	6818      	ldr	r0, [r3, #0]
    1dd8:	a901      	add	r1, sp, #4
    1dda:	4b07      	ldr	r3, [pc, #28]	; (1df8 <I2cSensorsError+0x2c>)
    1ddc:	4798      	blx	r3
	sensorTransmitError = false;
    1dde:	4b07      	ldr	r3, [pc, #28]	; (1dfc <I2cSensorsError+0x30>)
    1de0:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    1de2:	9b01      	ldr	r3, [sp, #4]
    1de4:	2b00      	cmp	r3, #0
    1de6:	d003      	beq.n	1df0 <I2cSensorsError+0x24>
    1de8:	2280      	movs	r2, #128	; 0x80
    1dea:	0552      	lsls	r2, r2, #21
    1dec:	4b04      	ldr	r3, [pc, #16]	; (1e00 <I2cSensorsError+0x34>)
    1dee:	601a      	str	r2, [r3, #0]
}
    1df0:	b002      	add	sp, #8
    1df2:	bd10      	pop	{r4, pc}
    1df4:	200038d4 	.word	0x200038d4
    1df8:	00004d71 	.word	0x00004d71
    1dfc:	2000031c 	.word	0x2000031c
    1e00:	e000ed04 	.word	0xe000ed04

00001e04 <I2cDriverRegisterSensorBusCallbacks>:



void I2cDriverRegisterSensorBusCallbacks(void)
{
    1e04:	b570      	push	{r4, r5, r6, lr}
	/* Register callback function. */
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    1e06:	4c0c      	ldr	r4, [pc, #48]	; (1e38 <I2cDriverRegisterSensorBusCallbacks+0x34>)
    1e08:	2200      	movs	r2, #0
    1e0a:	490c      	ldr	r1, [pc, #48]	; (1e3c <I2cDriverRegisterSensorBusCallbacks+0x38>)
    1e0c:	0020      	movs	r0, r4
    1e0e:	4d0c      	ldr	r5, [pc, #48]	; (1e40 <I2cDriverRegisterSensorBusCallbacks+0x3c>)
    1e10:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    1e12:	7e63      	ldrb	r3, [r4, #25]
    1e14:	2201      	movs	r2, #1
    1e16:	4313      	orrs	r3, r2
    1e18:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
    1e1a:	490a      	ldr	r1, [pc, #40]	; (1e44 <I2cDriverRegisterSensorBusCallbacks+0x40>)
    1e1c:	0020      	movs	r0, r4
    1e1e:	47a8      	blx	r5
    1e20:	7e63      	ldrb	r3, [r4, #25]
    1e22:	2202      	movs	r2, #2
    1e24:	4313      	orrs	r3, r2
    1e26:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_READ_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError,I2C_MASTER_CALLBACK_ERROR);
    1e28:	4907      	ldr	r1, [pc, #28]	; (1e48 <I2cDriverRegisterSensorBusCallbacks+0x44>)
    1e2a:	0020      	movs	r0, r4
    1e2c:	47a8      	blx	r5
    1e2e:	7e63      	ldrb	r3, [r4, #25]
    1e30:	2204      	movs	r2, #4
    1e32:	4313      	orrs	r3, r2
    1e34:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_ERROR);
}
    1e36:	bd70      	pop	{r4, r5, r6, pc}
    1e38:	200038ac 	.word	0x200038ac
    1e3c:	00001d5d 	.word	0x00001d5d
    1e40:	00000315 	.word	0x00000315
    1e44:	00001d95 	.word	0x00001d95
    1e48:	00001dcd 	.word	0x00001dcd

00001e4c <I2cInitializeDriver>:
 * @fn			int32_t I2cInitializeDriver(void)
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note        
 *****************************************************************************/
 int32_t I2cInitializeDriver(void){
    1e4c:	b570      	push	{r4, r5, r6, lr}
    1e4e:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1e50:	ab01      	add	r3, sp, #4
    1e52:	2264      	movs	r2, #100	; 0x64
    1e54:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1e56:	4a33      	ldr	r2, [pc, #204]	; (1f24 <I2cInitializeDriver+0xd8>)
    1e58:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1e5a:	2200      	movs	r2, #0
    1e5c:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1e5e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    1e60:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1e62:	2180      	movs	r1, #128	; 0x80
    1e64:	0389      	lsls	r1, r1, #14
    1e66:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    1e68:	2101      	movs	r1, #1
    1e6a:	4249      	negs	r1, r1
    1e6c:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1e6e:	3125      	adds	r1, #37	; 0x25
    1e70:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1e72:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1e74:	3108      	adds	r1, #8
    1e76:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1e78:	3101      	adds	r1, #1
    1e7a:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    1e7c:	3101      	adds	r1, #1
    1e7e:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1e80:	32d7      	adds	r2, #215	; 0xd7
    1e82:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    1e84:	4a28      	ldr	r2, [pc, #160]	; (1f28 <I2cInitializeDriver+0xdc>)
    1e86:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    1e88:	4a28      	ldr	r2, [pc, #160]	; (1f2c <I2cInitializeDriver+0xe0>)
    1e8a:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.buffer_timeout = 10000;
    1e8c:	4a28      	ldr	r2, [pc, #160]	; (1f30 <I2cInitializeDriver+0xe4>)
    1e8e:	82da      	strh	r2, [r3, #22]
    1e90:	2403      	movs	r4, #3
		errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
    1e92:	4d28      	ldr	r5, [pc, #160]	; (1f34 <I2cInitializeDriver+0xe8>)
    1e94:	4e28      	ldr	r6, [pc, #160]	; (1f38 <I2cInitializeDriver+0xec>)
    1e96:	aa01      	add	r2, sp, #4
    1e98:	4928      	ldr	r1, [pc, #160]	; (1f3c <I2cInitializeDriver+0xf0>)
    1e9a:	0028      	movs	r0, r5
    1e9c:	47b0      	blx	r6
		if(STATUS_OK == errCodeAsf){
    1e9e:	2800      	cmp	r0, #0
    1ea0:	d006      	beq.n	1eb0 <I2cInitializeDriver+0x64>
			i2c_master_reset(&i2cSensorBusInstance);
    1ea2:	4824      	ldr	r0, [pc, #144]	; (1f34 <I2cInitializeDriver+0xe8>)
    1ea4:	4b26      	ldr	r3, [pc, #152]	; (1f40 <I2cInitializeDriver+0xf4>)
    1ea6:	4798      	blx	r3
    1ea8:	3c01      	subs	r4, #1
    1eaa:	b2e4      	uxtb	r4, r4
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
    1eac:	2c00      	cmp	r4, #0
    1eae:	d1f2      	bne.n	1e96 <I2cInitializeDriver+0x4a>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1eb0:	4b20      	ldr	r3, [pc, #128]	; (1f34 <I2cInitializeDriver+0xe8>)
    1eb2:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1eb4:	2207      	movs	r2, #7
    1eb6:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    1eb8:	421a      	tst	r2, r3
    1eba:	d1fc      	bne.n	1eb6 <I2cInitializeDriver+0x6a>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1ebc:	6823      	ldr	r3, [r4, #0]
    1ebe:	2202      	movs	r2, #2
    1ec0:	4313      	orrs	r3, r2
    1ec2:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1ec4:	4d1b      	ldr	r5, [pc, #108]	; (1f34 <I2cInitializeDriver+0xe8>)
    1ec6:	6828      	ldr	r0, [r5, #0]
    1ec8:	4b1e      	ldr	r3, [pc, #120]	; (1f44 <I2cInitializeDriver+0xf8>)
    1eca:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1ecc:	231f      	movs	r3, #31
    1ece:	4018      	ands	r0, r3
    1ed0:	3b1e      	subs	r3, #30
    1ed2:	4083      	lsls	r3, r0
    1ed4:	4a1c      	ldr	r2, [pc, #112]	; (1f48 <I2cInitializeDriver+0xfc>)
    1ed6:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1ed8:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1eda:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1edc:	2110      	movs	r1, #16
    1ede:	8b62      	ldrh	r2, [r4, #26]
    1ee0:	420a      	tst	r2, r1
    1ee2:	d104      	bne.n	1eee <I2cInitializeDriver+0xa2>
		timeout_counter++;
    1ee4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1ee6:	4283      	cmp	r3, r0
    1ee8:	d3f9      	bcc.n	1ede <I2cInitializeDriver+0x92>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1eea:	2310      	movs	r3, #16
    1eec:	8363      	strh	r3, [r4, #26]


	error = I2cDriverConfigureSensorBus();
	if(STATUS_OK != error) goto exit;
	
	I2cDriverRegisterSensorBusCallbacks();
    1eee:	4b17      	ldr	r3, [pc, #92]	; (1f4c <I2cInitializeDriver+0x100>)
    1ef0:	4798      	blx	r3
	
		
	sensorI2cMutexHandle = xSemaphoreCreateMutex();
    1ef2:	2001      	movs	r0, #1
    1ef4:	4b16      	ldr	r3, [pc, #88]	; (1f50 <I2cInitializeDriver+0x104>)
    1ef6:	4798      	blx	r3
    1ef8:	4c16      	ldr	r4, [pc, #88]	; (1f54 <I2cInitializeDriver+0x108>)
    1efa:	6020      	str	r0, [r4, #0]
	
	sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
    1efc:	2203      	movs	r2, #3
    1efe:	2100      	movs	r1, #0
    1f00:	2001      	movs	r0, #1
    1f02:	4b15      	ldr	r3, [pc, #84]	; (1f58 <I2cInitializeDriver+0x10c>)
    1f04:	4798      	blx	r3
    1f06:	4b15      	ldr	r3, [pc, #84]	; (1f5c <I2cInitializeDriver+0x110>)
    1f08:	6018      	str	r0, [r3, #0]
	//xSemaphoreGive(sensorI2cSemaphoreHandle);

	
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
    1f0a:	6823      	ldr	r3, [r4, #0]
    1f0c:	2b00      	cmp	r3, #0
    1f0e:	d004      	beq.n	1f1a <I2cInitializeDriver+0xce>
	error = I2cDriverConfigureSensorBus();
    1f10:	2300      	movs	r3, #0
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
    1f12:	2800      	cmp	r0, #0
    1f14:	d102      	bne.n	1f1c <I2cInitializeDriver+0xd0>
		error = STATUS_SUSPEND;	//Could not initialize mutex!
    1f16:	3306      	adds	r3, #6
    1f18:	e000      	b.n	1f1c <I2cInitializeDriver+0xd0>
    1f1a:	2306      	movs	r3, #6
		goto exit;
	}

	exit:
	return error;		
}
    1f1c:	0018      	movs	r0, r3
    1f1e:	b00e      	add	sp, #56	; 0x38
    1f20:	bd70      	pop	{r4, r5, r6, pc}
    1f22:	46c0      	nop			; (mov r8, r8)
    1f24:	00000d48 	.word	0x00000d48
    1f28:	00080002 	.word	0x00080002
    1f2c:	00090002 	.word	0x00090002
    1f30:	00002710 	.word	0x00002710
    1f34:	200038ac 	.word	0x200038ac
    1f38:	00002899 	.word	0x00002899
    1f3c:	42000800 	.word	0x42000800
    1f40:	00002b91 	.word	0x00002b91
    1f44:	00007045 	.word	0x00007045
    1f48:	e000e100 	.word	0xe000e100
    1f4c:	00001e05 	.word	0x00001e05
    1f50:	00004a0d 	.word	0x00004a0d
    1f54:	200038a8 	.word	0x200038a8
    1f58:	000045a9 	.word	0x000045a9
    1f5c:	200038d4 	.word	0x200038d4

00001f60 <I2cWriteData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData(I2C_Data *data){
    1f60:	b510      	push	{r4, lr}
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
    1f62:	2800      	cmp	r0, #0
    1f64:	d012      	beq.n	1f8c <I2cWriteData+0x2c>
    1f66:	6843      	ldr	r3, [r0, #4]
    1f68:	2b00      	cmp	r3, #0
    1f6a:	d012      	beq.n	1f92 <I2cWriteData+0x32>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
    1f6c:	490a      	ldr	r1, [pc, #40]	; (1f98 <I2cWriteData+0x38>)
    1f6e:	7802      	ldrb	r2, [r0, #0]
    1f70:	800a      	strh	r2, [r1, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
    1f72:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenOut;
    1f74:	89c3      	ldrh	r3, [r0, #14]
    1f76:	804b      	strh	r3, [r1, #2]
	
	//Write

	 hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    1f78:	4808      	ldr	r0, [pc, #32]	; (1f9c <I2cWriteData+0x3c>)
    1f7a:	4b09      	ldr	r3, [pc, #36]	; (1fa0 <I2cWriteData+0x40>)
    1f7c:	4798      	blx	r3
	int32_t error = ERROR_NONE;
    1f7e:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
    1f80:	2800      	cmp	r0, #0
    1f82:	d101      	bne.n	1f88 <I2cWriteData+0x28>
		goto exit;
	}
	
	exit:
	return error;
}
    1f84:	0018      	movs	r0, r3
    1f86:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
    1f88:	3b06      	subs	r3, #6
    1f8a:	e7fb      	b.n	1f84 <I2cWriteData+0x24>
		error = ERR_INVALID_ARG;
    1f8c:	2308      	movs	r3, #8
    1f8e:	425b      	negs	r3, r3
    1f90:	e7f8      	b.n	1f84 <I2cWriteData+0x24>
    1f92:	2308      	movs	r3, #8
    1f94:	425b      	negs	r3, r3
    1f96:	e7f5      	b.n	1f84 <I2cWriteData+0x24>
    1f98:	200038d8 	.word	0x200038d8
    1f9c:	200038ac 	.word	0x200038ac
    1fa0:	00000351 	.word	0x00000351

00001fa4 <I2cReadData>:
 * @details     
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
int32_t I2cReadData(I2C_Data *data){
    1fa4:	b510      	push	{r4, lr}
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
    1fa6:	2800      	cmp	r0, #0
    1fa8:	d013      	beq.n	1fd2 <I2cReadData+0x2e>
    1faa:	6843      	ldr	r3, [r0, #4]
    1fac:	2b00      	cmp	r3, #0
    1fae:	d013      	beq.n	1fd8 <I2cReadData+0x34>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to read
	sensorPacketWrite.address = data->address;
    1fb0:	490b      	ldr	r1, [pc, #44]	; (1fe0 <I2cReadData+0x3c>)
    1fb2:	7803      	ldrb	r3, [r0, #0]
    1fb4:	800b      	strh	r3, [r1, #0]
	sensorPacketWrite.data = data->msgIn;
    1fb6:	6883      	ldr	r3, [r0, #8]
    1fb8:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenIn;
    1fba:	8983      	ldrh	r3, [r0, #12]
    1fbc:	804b      	strh	r3, [r1, #2]
	
	//Read
	hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    1fbe:	4809      	ldr	r0, [pc, #36]	; (1fe4 <I2cReadData+0x40>)
    1fc0:	4b09      	ldr	r3, [pc, #36]	; (1fe8 <I2cReadData+0x44>)
    1fc2:	4798      	blx	r3
	int32_t error = ERROR_NONE;
    1fc4:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
    1fc6:	2800      	cmp	r0, #0
    1fc8:	d101      	bne.n	1fce <I2cReadData+0x2a>
		goto exit;
	}
	
	exit:
	return error;
}
    1fca:	0018      	movs	r0, r3
    1fcc:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
    1fce:	3b06      	subs	r3, #6
    1fd0:	e7fb      	b.n	1fca <I2cReadData+0x26>
		error = ERR_INVALID_ARG;
    1fd2:	2308      	movs	r3, #8
    1fd4:	425b      	negs	r3, r3
    1fd6:	e7f8      	b.n	1fca <I2cReadData+0x26>
    1fd8:	2308      	movs	r3, #8
    1fda:	425b      	negs	r3, r3
    1fdc:	e7f5      	b.n	1fca <I2cReadData+0x26>
    1fde:	46c0      	nop			; (mov r8, r8)
    1fe0:	200038d8 	.word	0x200038d8
    1fe4:	200038ac 	.word	0x200038ac
    1fe8:	0000032d 	.word	0x0000032d

00001fec <I2cFreeMutex>:
 * @details     
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (ERROR_NONE) if the bus is ready, (ERROR_NOT_INITIALIZED) if it is busy.
 * @note        STUDENTS TO FILL OUT!
 *****************************************************************************/
int32_t I2cFreeMutex(void){
    1fec:	b510      	push	{r4, lr}
	
	int32_t error = ERROR_NONE;
	
	//students to fill out. Check what the function has to return
	if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE)
    1fee:	4b07      	ldr	r3, [pc, #28]	; (200c <STACK_SIZE+0xc>)
    1ff0:	6818      	ldr	r0, [r3, #0]
    1ff2:	2300      	movs	r3, #0
    1ff4:	2200      	movs	r2, #0
    1ff6:	2100      	movs	r1, #0
    1ff8:	4c05      	ldr	r4, [pc, #20]	; (2010 <STACK_SIZE+0x10>)
    1ffa:	47a0      	blx	r4
	int32_t error = ERROR_NONE;
    1ffc:	2300      	movs	r3, #0
	if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE)
    1ffe:	2801      	cmp	r0, #1
    2000:	d101      	bne.n	2006 <STACK_SIZE+0x6>
		error = ERROR_NOT_INITIALIZED;
	
	return error;
}
    2002:	0018      	movs	r0, r3
    2004:	bd10      	pop	{r4, pc}
		error = ERROR_NOT_INITIALIZED;
    2006:	3b14      	subs	r3, #20
    2008:	e7fb      	b.n	2002 <STACK_SIZE+0x2>
    200a:	46c0      	nop			; (mov r8, r8)
    200c:	200038a8 	.word	0x200038a8
    2010:	000046e5 	.word	0x000046e5

00002014 <I2cGetMutex>:
 * @details     
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (ERROR_NONE) if we got the mutex, (ERROR_NOT_READY) if we time out before we got it
 * @note        
 *****************************************************************************/
int32_t I2cGetMutex(TickType_t waitTime){
    2014:	b510      	push	{r4, lr}
    2016:	0001      	movs	r1, r0
	
	int32_t error = ERROR_NONE;
	//students to fill out. Check what the function has to return
	
	if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE)
    2018:	4b05      	ldr	r3, [pc, #20]	; (2030 <I2cGetMutex+0x1c>)
    201a:	6818      	ldr	r0, [r3, #0]
    201c:	4b05      	ldr	r3, [pc, #20]	; (2034 <I2cGetMutex+0x20>)
    201e:	4798      	blx	r3
	int32_t error = ERROR_NONE;
    2020:	2300      	movs	r3, #0
	if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE)
    2022:	2801      	cmp	r0, #1
    2024:	d101      	bne.n	202a <I2cGetMutex+0x16>
		error = ERROR_NOT_READY;
		
	return error;
}
    2026:	0018      	movs	r0, r3
    2028:	bd10      	pop	{r4, pc}
		error = ERROR_NOT_READY;
    202a:	3b1d      	subs	r3, #29
    202c:	e7fb      	b.n	2026 <I2cGetMutex+0x12>
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	200038a8 	.word	0x200038a8
    2034:	0000508d 	.word	0x0000508d

00002038 <I2cWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime){
    2038:	b570      	push	{r4, r5, r6, lr}
    203a:	0005      	movs	r5, r0
    203c:	000c      	movs	r4, r1

	int32_t error = ERROR_NONE;
	SemaphoreHandle_t semHandle = NULL;

	//---0. Get Mutex
	error = I2cGetMutex(xMaxBlockTime);
    203e:	0008      	movs	r0, r1
    2040:	4b0f      	ldr	r3, [pc, #60]	; (2080 <I2cWriteDataWait+0x48>)
    2042:	4798      	blx	r3
	//error=0;
	if(ERROR_NONE != error) goto exit;
    2044:	2800      	cmp	r0, #0
    2046:	d000      	beq.n	204a <I2cWriteDataWait+0x12>
exitError0:
error = I2cFreeMutex();

return error;

}
    2048:	bd70      	pop	{r4, r5, r6, pc}
	*handle = sensorI2cSemaphoreHandle;
    204a:	4b0e      	ldr	r3, [pc, #56]	; (2084 <I2cWriteDataWait+0x4c>)
    204c:	681e      	ldr	r6, [r3, #0]
	error = I2cWriteData(data);
    204e:	0028      	movs	r0, r5
    2050:	4b0d      	ldr	r3, [pc, #52]	; (2088 <I2cWriteDataWait+0x50>)
    2052:	4798      	blx	r3
	if (ERROR_NONE != error){
    2054:	2800      	cmp	r0, #0
    2056:	d105      	bne.n	2064 <I2cWriteDataWait+0x2c>
	if( xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE ){
    2058:	0021      	movs	r1, r4
    205a:	0030      	movs	r0, r6
    205c:	4b0b      	ldr	r3, [pc, #44]	; (208c <I2cWriteDataWait+0x54>)
    205e:	4798      	blx	r3
    2060:	2801      	cmp	r0, #1
    2062:	d002      	beq.n	206a <I2cWriteDataWait+0x32>
error = I2cFreeMutex();
    2064:	4b0a      	ldr	r3, [pc, #40]	; (2090 <I2cWriteDataWait+0x58>)
    2066:	4798      	blx	r3
return error;
    2068:	e7ee      	b.n	2048 <I2cWriteDataWait+0x10>
	 return sensorTransmitError;
    206a:	4b0a      	ldr	r3, [pc, #40]	; (2094 <I2cWriteDataWait+0x5c>)
		if(I2cGetTaskErrorStatus()){
    206c:	781b      	ldrb	r3, [r3, #0]
    206e:	2b00      	cmp	r3, #0
    2070:	d003      	beq.n	207a <I2cWriteDataWait+0x42>
	sensorTransmitError = value;
    2072:	2200      	movs	r2, #0
    2074:	4b07      	ldr	r3, [pc, #28]	; (2094 <I2cWriteDataWait+0x5c>)
    2076:	701a      	strb	r2, [r3, #0]
    2078:	e7f4      	b.n	2064 <I2cWriteDataWait+0x2c>
	error |= I2cFreeMutex();
    207a:	4b05      	ldr	r3, [pc, #20]	; (2090 <I2cWriteDataWait+0x58>)
    207c:	4798      	blx	r3
    207e:	e7e3      	b.n	2048 <I2cWriteDataWait+0x10>
    2080:	00002015 	.word	0x00002015
    2084:	200038d4 	.word	0x200038d4
    2088:	00001f61 	.word	0x00001f61
    208c:	0000508d 	.word	0x0000508d
    2090:	00001fed 	.word	0x00001fed
    2094:	2000031c 	.word	0x2000031c

00002098 <I2cReadDataWait>:
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
				students to fill!
 *****************************************************************************/
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime) {
    2098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    209a:	0005      	movs	r5, r0
    209c:	000e      	movs	r6, r1
    209e:	0014      	movs	r4, r2
	
	int32_t error = ERROR_NONE;
	SemaphoreHandle_t semHandle = NULL;
	
	//---0. Get Mutex
	error = I2cGetMutex(xMaxBlockTime);
    20a0:	0010      	movs	r0, r2
    20a2:	4b1b      	ldr	r3, [pc, #108]	; (2110 <I2cReadDataWait+0x78>)
    20a4:	4798      	blx	r3
	if(ERROR_NONE != error) goto exit;
    20a6:	2800      	cmp	r0, #0
    20a8:	d000      	beq.n	20ac <I2cReadDataWait+0x14>

	exitError0:
	error = I2cFreeMutex();

	return error;
}
    20aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*handle = sensorI2cSemaphoreHandle;
    20ac:	4b19      	ldr	r3, [pc, #100]	; (2114 <I2cReadDataWait+0x7c>)
    20ae:	681f      	ldr	r7, [r3, #0]
	error = I2cWriteData(data);
    20b0:	0028      	movs	r0, r5
    20b2:	4b19      	ldr	r3, [pc, #100]	; (2118 <I2cReadDataWait+0x80>)
    20b4:	4798      	blx	r3
	if (ERROR_NONE != error){
    20b6:	2800      	cmp	r0, #0
    20b8:	d105      	bne.n	20c6 <I2cReadDataWait+0x2e>
	if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    20ba:	0021      	movs	r1, r4
    20bc:	0038      	movs	r0, r7
    20be:	4b17      	ldr	r3, [pc, #92]	; (211c <I2cReadDataWait+0x84>)
    20c0:	4798      	blx	r3
    20c2:	2801      	cmp	r0, #1
    20c4:	d002      	beq.n	20cc <I2cReadDataWait+0x34>
	error = I2cFreeMutex();
    20c6:	4b16      	ldr	r3, [pc, #88]	; (2120 <I2cReadDataWait+0x88>)
    20c8:	4798      	blx	r3
	return error;
    20ca:	e7ee      	b.n	20aa <I2cReadDataWait+0x12>
	 return sensorTransmitError;
    20cc:	4b15      	ldr	r3, [pc, #84]	; (2124 <I2cReadDataWait+0x8c>)
		if (I2cGetTaskErrorStatus()) {
    20ce:	781b      	ldrb	r3, [r3, #0]
    20d0:	2b00      	cmp	r3, #0
    20d2:	d003      	beq.n	20dc <I2cReadDataWait+0x44>
	sensorTransmitError = value;
    20d4:	2200      	movs	r2, #0
    20d6:	4b13      	ldr	r3, [pc, #76]	; (2124 <I2cReadDataWait+0x8c>)
    20d8:	701a      	strb	r2, [r3, #0]
    20da:	e7f4      	b.n	20c6 <I2cReadDataWait+0x2e>
		vTaskDelay(delay);
    20dc:	0030      	movs	r0, r6
    20de:	4b12      	ldr	r3, [pc, #72]	; (2128 <I2cReadDataWait+0x90>)
    20e0:	4798      	blx	r3
	error = I2cReadData(data);
    20e2:	0028      	movs	r0, r5
    20e4:	4b11      	ldr	r3, [pc, #68]	; (212c <I2cReadDataWait+0x94>)
    20e6:	4798      	blx	r3
	if (ERROR_NONE != error){
    20e8:	2800      	cmp	r0, #0
    20ea:	d1ec      	bne.n	20c6 <I2cReadDataWait+0x2e>
	if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE ) {
    20ec:	0021      	movs	r1, r4
    20ee:	0038      	movs	r0, r7
    20f0:	4b0a      	ldr	r3, [pc, #40]	; (211c <I2cReadDataWait+0x84>)
    20f2:	4798      	blx	r3
    20f4:	2801      	cmp	r0, #1
    20f6:	d1e6      	bne.n	20c6 <I2cReadDataWait+0x2e>
	 return sensorTransmitError;
    20f8:	4b0a      	ldr	r3, [pc, #40]	; (2124 <I2cReadDataWait+0x8c>)
		if (I2cGetTaskErrorStatus()) {
    20fa:	781b      	ldrb	r3, [r3, #0]
    20fc:	2b00      	cmp	r3, #0
    20fe:	d003      	beq.n	2108 <I2cReadDataWait+0x70>
	sensorTransmitError = value;
    2100:	2200      	movs	r2, #0
    2102:	4b08      	ldr	r3, [pc, #32]	; (2124 <I2cReadDataWait+0x8c>)
    2104:	701a      	strb	r2, [r3, #0]
    2106:	e7de      	b.n	20c6 <I2cReadDataWait+0x2e>
	error |= I2cFreeMutex();
    2108:	4b05      	ldr	r3, [pc, #20]	; (2120 <I2cReadDataWait+0x88>)
    210a:	4798      	blx	r3
    210c:	e7cd      	b.n	20aa <I2cReadDataWait+0x12>
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	00002015 	.word	0x00002015
    2114:	200038d4 	.word	0x200038d4
    2118:	00001f61 	.word	0x00001f61
    211c:	0000508d 	.word	0x0000508d
    2120:	00001fed 	.word	0x00001fed
    2124:	2000031c 	.word	0x2000031c
    2128:	00005b69 	.word	0x00005b69
    212c:	00001fa5 	.word	0x00001fa5

00002130 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    2130:	b5f0      	push	{r4, r5, r6, r7, lr}
    2132:	b085      	sub	sp, #20
    2134:	0005      	movs	r5, r0
    2136:	9200      	str	r2, [sp, #0]
    2138:	9301      	str	r3, [sp, #4]
	//imuData.msgIn =  msgOutImu;
	//imuData.msgOut = msgOutImu;
	//imuData.address = 0x6B;
	//msgOutImu[0] = reg;
	
	uint8_t reg_data = reg;
    213a:	a802      	add	r0, sp, #8
    213c:	1dc3      	adds	r3, r0, #7
    213e:	71c1      	strb	r1, [r0, #7]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2140:	4c08      	ldr	r4, [pc, #32]	; (2164 <platform_write+0x34>)
    2142:	2680      	movs	r6, #128	; 0x80
    2144:	02b6      	lsls	r6, r6, #10
    2146:	6166      	str	r6, [r4, #20]
	
	//spi_select_slave((struct spi_module*) handle, &slave, true);
	port_pin_set_output_level(SLAVE_SELECT_PIN, false);
	spi_write_buffer_wait((struct spi_module*) handle, &reg_data, 1);
    2148:	2201      	movs	r2, #1
    214a:	0019      	movs	r1, r3
    214c:	0028      	movs	r0, r5
    214e:	4f06      	ldr	r7, [pc, #24]	; (2168 <platform_write+0x38>)
    2150:	47b8      	blx	r7
	spi_write_buffer_wait((struct spi_module*) handle, bufp, len);
    2152:	9a01      	ldr	r2, [sp, #4]
    2154:	9900      	ldr	r1, [sp, #0]
    2156:	0028      	movs	r0, r5
    2158:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    215a:	61a6      	str	r6, [r4, #24]
	//spi_select_slave((struct spi_module*) handle, &slave, false);
	
	return 0;
	//memcpy(&msgOutImu[1], bufp, len);
	//return I2cWriteDataWait(&imuData, 100);
}
    215c:	2000      	movs	r0, #0
    215e:	b005      	add	sp, #20
    2160:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2162:	46c0      	nop			; (mov r8, r8)
    2164:	41004400 	.word	0x41004400
    2168:	0000745d 	.word	0x0000745d

0000216c <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    216c:	b5f0      	push	{r4, r5, r6, r7, lr}
    216e:	b085      	sub	sp, #20
    2170:	0004      	movs	r4, r0
    2172:	9201      	str	r2, [sp, #4]
    2174:	001e      	movs	r6, r3
	//imuData.address = 0x6B;
	//
	//error = I2cReadDataWait(&imuData, 0, 100);
	//memcpy(bufp, msgOutImu, len);
	
	uint8_t reg_data = reg | SPI_READ_COMMAND;
    2176:	ab02      	add	r3, sp, #8
    2178:	1dd8      	adds	r0, r3, #7
    217a:	2380      	movs	r3, #128	; 0x80
    217c:	425b      	negs	r3, r3
    217e:	430b      	orrs	r3, r1
    2180:	7003      	strb	r3, [r0, #0]
		port_base->OUTCLR.reg = pin_mask;
    2182:	4f09      	ldr	r7, [pc, #36]	; (21a8 <platform_read+0x3c>)
    2184:	2580      	movs	r5, #128	; 0x80
    2186:	02ad      	lsls	r5, r5, #10
    2188:	617d      	str	r5, [r7, #20]
	uint16_t dummy_data = 0;
	
	//spi_select_slave((struct spi_module*) handle, &slave, true);
	port_pin_set_output_level(SLAVE_SELECT_PIN, false);
	spi_write_buffer_wait((struct spi_module*) handle, &reg_data, 1);
    218a:	2201      	movs	r2, #1
    218c:	0001      	movs	r1, r0
    218e:	0020      	movs	r0, r4
    2190:	4b06      	ldr	r3, [pc, #24]	; (21ac <platform_read+0x40>)
    2192:	4798      	blx	r3
	spi_read_buffer_wait((struct spi_module*) handle, bufp, len, dummy_data);
    2194:	2300      	movs	r3, #0
    2196:	0032      	movs	r2, r6
    2198:	9901      	ldr	r1, [sp, #4]
    219a:	0020      	movs	r0, r4
    219c:	4c04      	ldr	r4, [pc, #16]	; (21b0 <platform_read+0x44>)
    219e:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
    21a0:	61bd      	str	r5, [r7, #24]
	port_pin_set_output_level(SLAVE_SELECT_PIN, true);
	//spi_select_slave((struct spi_module*) handle, &slave, false);
	
	return 0;
}
    21a2:	2000      	movs	r0, #0
    21a4:	b005      	add	sp, #20
    21a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21a8:	41004400 	.word	0x41004400
    21ac:	0000745d 	.word	0x0000745d
    21b0:	00007399 	.word	0x00007399

000021b4 <lsm6dso_read_reg>:
{
    21b4:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    21b6:	6885      	ldr	r5, [r0, #8]
    21b8:	6844      	ldr	r4, [r0, #4]
    21ba:	0028      	movs	r0, r5
    21bc:	47a0      	blx	r4
}
    21be:	bd70      	pop	{r4, r5, r6, pc}

000021c0 <lsm6dso_write_reg>:
{
    21c0:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    21c2:	6885      	ldr	r5, [r0, #8]
    21c4:	6804      	ldr	r4, [r0, #0]
    21c6:	0028      	movs	r0, r5
    21c8:	47a0      	blx	r4
}
    21ca:	bd70      	pop	{r4, r5, r6, pc}

000021cc <lsm6dso_from_fs2_to_mg>:
{
    21cc:	b510      	push	{r4, lr}
  return ((float_t)lsb) * 0.061f;
    21ce:	4b03      	ldr	r3, [pc, #12]	; (21dc <lsm6dso_from_fs2_to_mg+0x10>)
    21d0:	4798      	blx	r3
    21d2:	4903      	ldr	r1, [pc, #12]	; (21e0 <lsm6dso_from_fs2_to_mg+0x14>)
    21d4:	4b03      	ldr	r3, [pc, #12]	; (21e4 <lsm6dso_from_fs2_to_mg+0x18>)
    21d6:	4798      	blx	r3
}
    21d8:	bd10      	pop	{r4, pc}
    21da:	46c0      	nop			; (mov r8, r8)
    21dc:	0000ba31 	.word	0x0000ba31
    21e0:	3d79db23 	.word	0x3d79db23
    21e4:	0000b479 	.word	0x0000b479

000021e8 <lsm6dso_xl_full_scale_set>:
{
    21e8:	b570      	push	{r4, r5, r6, lr}
    21ea:	b082      	sub	sp, #8
    21ec:	0004      	movs	r4, r0
    21ee:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    21f0:	2301      	movs	r3, #1
    21f2:	aa01      	add	r2, sp, #4
    21f4:	2110      	movs	r1, #16
    21f6:	4e0a      	ldr	r6, [pc, #40]	; (2220 <lsm6dso_xl_full_scale_set+0x38>)
    21f8:	47b0      	blx	r6
  if (ret == 0)
    21fa:	2800      	cmp	r0, #0
    21fc:	d001      	beq.n	2202 <lsm6dso_xl_full_scale_set+0x1a>
}
    21fe:	b002      	add	sp, #8
    2200:	bd70      	pop	{r4, r5, r6, pc}
    reg.fs_xl = (uint8_t) val;
    2202:	aa01      	add	r2, sp, #4
    2204:	2103      	movs	r1, #3
    2206:	4029      	ands	r1, r5
    2208:	008b      	lsls	r3, r1, #2
    220a:	7811      	ldrb	r1, [r2, #0]
    220c:	300c      	adds	r0, #12
    220e:	4381      	bics	r1, r0
    2210:	4319      	orrs	r1, r3
    2212:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    2214:	2301      	movs	r3, #1
    2216:	2110      	movs	r1, #16
    2218:	0020      	movs	r0, r4
    221a:	4c02      	ldr	r4, [pc, #8]	; (2224 <lsm6dso_xl_full_scale_set+0x3c>)
    221c:	47a0      	blx	r4
  return ret;
    221e:	e7ee      	b.n	21fe <lsm6dso_xl_full_scale_set+0x16>
    2220:	000021b5 	.word	0x000021b5
    2224:	000021c1 	.word	0x000021c1

00002228 <lsm6dso_gy_full_scale_set>:
{
    2228:	b570      	push	{r4, r5, r6, lr}
    222a:	b082      	sub	sp, #8
    222c:	0004      	movs	r4, r0
    222e:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    2230:	2301      	movs	r3, #1
    2232:	aa01      	add	r2, sp, #4
    2234:	2111      	movs	r1, #17
    2236:	4e0a      	ldr	r6, [pc, #40]	; (2260 <lsm6dso_gy_full_scale_set+0x38>)
    2238:	47b0      	blx	r6
  if (ret == 0)
    223a:	2800      	cmp	r0, #0
    223c:	d001      	beq.n	2242 <lsm6dso_gy_full_scale_set+0x1a>
}
    223e:	b002      	add	sp, #8
    2240:	bd70      	pop	{r4, r5, r6, pc}
    reg.fs_g = (uint8_t) val;
    2242:	aa01      	add	r2, sp, #4
    2244:	2107      	movs	r1, #7
    2246:	4029      	ands	r1, r5
    2248:	004b      	lsls	r3, r1, #1
    224a:	7811      	ldrb	r1, [r2, #0]
    224c:	300e      	adds	r0, #14
    224e:	4381      	bics	r1, r0
    2250:	4319      	orrs	r1, r3
    2252:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    2254:	2301      	movs	r3, #1
    2256:	2111      	movs	r1, #17
    2258:	0020      	movs	r0, r4
    225a:	4c02      	ldr	r4, [pc, #8]	; (2264 <lsm6dso_gy_full_scale_set+0x3c>)
    225c:	47a0      	blx	r4
  return ret;
    225e:	e7ee      	b.n	223e <lsm6dso_gy_full_scale_set+0x16>
    2260:	000021b5 	.word	0x000021b5
    2264:	000021c1 	.word	0x000021c1

00002268 <lsm6dso_block_data_update_set>:
{
    2268:	b570      	push	{r4, r5, r6, lr}
    226a:	b082      	sub	sp, #8
    226c:	0004      	movs	r4, r0
    226e:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    2270:	2301      	movs	r3, #1
    2272:	aa01      	add	r2, sp, #4
    2274:	2112      	movs	r1, #18
    2276:	4e0a      	ldr	r6, [pc, #40]	; (22a0 <lsm6dso_block_data_update_set+0x38>)
    2278:	47b0      	blx	r6
  if (ret == 0)
    227a:	2800      	cmp	r0, #0
    227c:	d001      	beq.n	2282 <lsm6dso_block_data_update_set+0x1a>
}
    227e:	b002      	add	sp, #8
    2280:	bd70      	pop	{r4, r5, r6, pc}
    reg.bdu = val;
    2282:	aa01      	add	r2, sp, #4
    2284:	2101      	movs	r1, #1
    2286:	4029      	ands	r1, r5
    2288:	018b      	lsls	r3, r1, #6
    228a:	7811      	ldrb	r1, [r2, #0]
    228c:	3040      	adds	r0, #64	; 0x40
    228e:	4381      	bics	r1, r0
    2290:	4319      	orrs	r1, r3
    2292:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    2294:	2301      	movs	r3, #1
    2296:	2112      	movs	r1, #18
    2298:	0020      	movs	r0, r4
    229a:	4c02      	ldr	r4, [pc, #8]	; (22a4 <lsm6dso_block_data_update_set+0x3c>)
    229c:	47a0      	blx	r4
  return ret;
    229e:	e7ee      	b.n	227e <lsm6dso_block_data_update_set+0x16>
    22a0:	000021b5 	.word	0x000021b5
    22a4:	000021c1 	.word	0x000021c1

000022a8 <lsm6dso_xl_offset_weight_set>:
{
    22a8:	b570      	push	{r4, r5, r6, lr}
    22aa:	b082      	sub	sp, #8
    22ac:	0004      	movs	r4, r0
    22ae:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
    22b0:	2301      	movs	r3, #1
    22b2:	aa01      	add	r2, sp, #4
    22b4:	2115      	movs	r1, #21
    22b6:	4e0a      	ldr	r6, [pc, #40]	; (22e0 <lsm6dso_xl_offset_weight_set+0x38>)
    22b8:	47b0      	blx	r6
  if (ret == 0)
    22ba:	2800      	cmp	r0, #0
    22bc:	d001      	beq.n	22c2 <lsm6dso_xl_offset_weight_set+0x1a>
}
    22be:	b002      	add	sp, #8
    22c0:	bd70      	pop	{r4, r5, r6, pc}
    reg.usr_off_w = (uint8_t)val;
    22c2:	aa01      	add	r2, sp, #4
    22c4:	2101      	movs	r1, #1
    22c6:	4029      	ands	r1, r5
    22c8:	00cb      	lsls	r3, r1, #3
    22ca:	7811      	ldrb	r1, [r2, #0]
    22cc:	3008      	adds	r0, #8
    22ce:	4381      	bics	r1, r0
    22d0:	4319      	orrs	r1, r3
    22d2:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
    22d4:	2301      	movs	r3, #1
    22d6:	2115      	movs	r1, #21
    22d8:	0020      	movs	r0, r4
    22da:	4c02      	ldr	r4, [pc, #8]	; (22e4 <lsm6dso_xl_offset_weight_set+0x3c>)
    22dc:	47a0      	blx	r4
  return ret;
    22de:	e7ee      	b.n	22be <lsm6dso_xl_offset_weight_set+0x16>
    22e0:	000021b5 	.word	0x000021b5
    22e4:	000021c1 	.word	0x000021c1

000022e8 <lsm6dso_acceleration_raw_get>:
{
    22e8:	b530      	push	{r4, r5, lr}
    22ea:	b083      	sub	sp, #12
    22ec:	000c      	movs	r4, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
    22ee:	2306      	movs	r3, #6
    22f0:	466a      	mov	r2, sp
    22f2:	2128      	movs	r1, #40	; 0x28
    22f4:	4d0a      	ldr	r5, [pc, #40]	; (2320 <lsm6dso_acceleration_raw_get+0x38>)
    22f6:	47a8      	blx	r5
  val[0] = (val[0] * 256) + (int16_t)buff[0];
    22f8:	466b      	mov	r3, sp
    22fa:	785a      	ldrb	r2, [r3, #1]
    22fc:	0212      	lsls	r2, r2, #8
    22fe:	781b      	ldrb	r3, [r3, #0]
    2300:	189b      	adds	r3, r3, r2
    2302:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
    2304:	466b      	mov	r3, sp
    2306:	78da      	ldrb	r2, [r3, #3]
    2308:	0212      	lsls	r2, r2, #8
    230a:	789b      	ldrb	r3, [r3, #2]
    230c:	189b      	adds	r3, r3, r2
    230e:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
    2310:	466b      	mov	r3, sp
    2312:	795a      	ldrb	r2, [r3, #5]
    2314:	0212      	lsls	r2, r2, #8
    2316:	791b      	ldrb	r3, [r3, #4]
    2318:	189b      	adds	r3, r3, r2
    231a:	80a3      	strh	r3, [r4, #4]
}
    231c:	b003      	add	sp, #12
    231e:	bd30      	pop	{r4, r5, pc}
    2320:	000021b5 	.word	0x000021b5

00002324 <lsm6dso_mem_bank_set>:
{
    2324:	b570      	push	{r4, r5, r6, lr}
    2326:	b082      	sub	sp, #8
    2328:	0004      	movs	r4, r0
    232a:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
    232c:	2301      	movs	r3, #1
    232e:	aa01      	add	r2, sp, #4
    2330:	2101      	movs	r1, #1
    2332:	4e09      	ldr	r6, [pc, #36]	; (2358 <lsm6dso_mem_bank_set+0x34>)
    2334:	47b0      	blx	r6
  if (ret == 0)
    2336:	2800      	cmp	r0, #0
    2338:	d001      	beq.n	233e <lsm6dso_mem_bank_set+0x1a>
}
    233a:	b002      	add	sp, #8
    233c:	bd70      	pop	{r4, r5, r6, pc}
    reg.reg_access = (uint8_t)val;
    233e:	aa01      	add	r2, sp, #4
    2340:	01ad      	lsls	r5, r5, #6
    2342:	7813      	ldrb	r3, [r2, #0]
    2344:	213f      	movs	r1, #63	; 0x3f
    2346:	4019      	ands	r1, r3
    2348:	4329      	orrs	r1, r5
    234a:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
    234c:	2301      	movs	r3, #1
    234e:	2101      	movs	r1, #1
    2350:	0020      	movs	r0, r4
    2352:	4c02      	ldr	r4, [pc, #8]	; (235c <lsm6dso_mem_bank_set+0x38>)
    2354:	47a0      	blx	r4
  return ret;
    2356:	e7f0      	b.n	233a <lsm6dso_mem_bank_set+0x16>
    2358:	000021b5 	.word	0x000021b5
    235c:	000021c1 	.word	0x000021c1

00002360 <lsm6dso_device_id_get>:
{
    2360:	b510      	push	{r4, lr}
    2362:	000a      	movs	r2, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
    2364:	2301      	movs	r3, #1
    2366:	210f      	movs	r1, #15
    2368:	4c01      	ldr	r4, [pc, #4]	; (2370 <lsm6dso_device_id_get+0x10>)
    236a:	47a0      	blx	r4
}
    236c:	bd10      	pop	{r4, pc}
    236e:	46c0      	nop			; (mov r8, r8)
    2370:	000021b5 	.word	0x000021b5

00002374 <lsm6dso_xl_filter_lp2_set>:
{
    2374:	b570      	push	{r4, r5, r6, lr}
    2376:	b082      	sub	sp, #8
    2378:	0004      	movs	r4, r0
    237a:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    237c:	2301      	movs	r3, #1
    237e:	aa01      	add	r2, sp, #4
    2380:	2110      	movs	r1, #16
    2382:	4e0a      	ldr	r6, [pc, #40]	; (23ac <lsm6dso_xl_filter_lp2_set+0x38>)
    2384:	47b0      	blx	r6
  if (ret == 0)
    2386:	2800      	cmp	r0, #0
    2388:	d001      	beq.n	238e <lsm6dso_xl_filter_lp2_set+0x1a>
}
    238a:	b002      	add	sp, #8
    238c:	bd70      	pop	{r4, r5, r6, pc}
    reg.lpf2_xl_en = val;
    238e:	aa01      	add	r2, sp, #4
    2390:	2101      	movs	r1, #1
    2392:	4029      	ands	r1, r5
    2394:	004b      	lsls	r3, r1, #1
    2396:	7811      	ldrb	r1, [r2, #0]
    2398:	3002      	adds	r0, #2
    239a:	4381      	bics	r1, r0
    239c:	4319      	orrs	r1, r3
    239e:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    23a0:	2301      	movs	r3, #1
    23a2:	2110      	movs	r1, #16
    23a4:	0020      	movs	r0, r4
    23a6:	4c02      	ldr	r4, [pc, #8]	; (23b0 <lsm6dso_xl_filter_lp2_set+0x3c>)
    23a8:	47a0      	blx	r4
  return ret;
    23aa:	e7ee      	b.n	238a <lsm6dso_xl_filter_lp2_set+0x16>
    23ac:	000021b5 	.word	0x000021b5
    23b0:	000021c1 	.word	0x000021c1

000023b4 <lsm6dso_xl_hp_path_on_out_set>:
{
    23b4:	b570      	push	{r4, r5, r6, lr}
    23b6:	b082      	sub	sp, #8
    23b8:	0004      	movs	r4, r0
    23ba:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
    23bc:	2301      	movs	r3, #1
    23be:	aa01      	add	r2, sp, #4
    23c0:	2117      	movs	r1, #23
    23c2:	4e10      	ldr	r6, [pc, #64]	; (2404 <lsm6dso_xl_hp_path_on_out_set+0x50>)
    23c4:	47b0      	blx	r6
  if (ret == 0)
    23c6:	2800      	cmp	r0, #0
    23c8:	d001      	beq.n	23ce <lsm6dso_xl_hp_path_on_out_set+0x1a>
}
    23ca:	b002      	add	sp, #8
    23cc:	bd70      	pop	{r4, r5, r6, pc}
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
    23ce:	aa01      	add	r2, sp, #4
    23d0:	092b      	lsrs	r3, r5, #4
    23d2:	2101      	movs	r1, #1
    23d4:	400b      	ands	r3, r1
    23d6:	0098      	lsls	r0, r3, #2
    23d8:	7813      	ldrb	r3, [r2, #0]
    23da:	2604      	movs	r6, #4
    23dc:	43b3      	bics	r3, r6
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
    23de:	096e      	lsrs	r6, r5, #5
    23e0:	4031      	ands	r1, r6
    23e2:	0109      	lsls	r1, r1, #4
    23e4:	4303      	orrs	r3, r0
    23e6:	2010      	movs	r0, #16
    23e8:	4383      	bics	r3, r0
    reg.hpcf_xl = (uint8_t)val & 0x07U;
    23ea:	016d      	lsls	r5, r5, #5
    23ec:	430b      	orrs	r3, r1
    23ee:	211f      	movs	r1, #31
    23f0:	400b      	ands	r3, r1
    23f2:	431d      	orrs	r5, r3
    23f4:	7015      	strb	r5, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
    23f6:	2301      	movs	r3, #1
    23f8:	3908      	subs	r1, #8
    23fa:	0020      	movs	r0, r4
    23fc:	4c02      	ldr	r4, [pc, #8]	; (2408 <lsm6dso_xl_hp_path_on_out_set+0x54>)
    23fe:	47a0      	blx	r4
  return ret;
    2400:	e7e3      	b.n	23ca <lsm6dso_xl_hp_path_on_out_set+0x16>
    2402:	46c0      	nop			; (mov r8, r8)
    2404:	000021b5 	.word	0x000021b5
    2408:	000021c1 	.word	0x000021c1

0000240c <lsm6dso_i3c_disable_set>:
{
    240c:	b570      	push	{r4, r5, r6, lr}
    240e:	b082      	sub	sp, #8
    2410:	0004      	movs	r4, r0
    2412:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    2414:	2301      	movs	r3, #1
    2416:	466a      	mov	r2, sp
    2418:	2118      	movs	r1, #24
    241a:	4e16      	ldr	r6, [pc, #88]	; (2474 <lsm6dso_i3c_disable_set+0x68>)
    241c:	47b0      	blx	r6
  if (ret == 0)
    241e:	2800      	cmp	r0, #0
    2420:	d001      	beq.n	2426 <lsm6dso_i3c_disable_set+0x1a>
}
    2422:	b002      	add	sp, #8
    2424:	bd70      	pop	{r4, r5, r6, pc}
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
    2426:	09ea      	lsrs	r2, r5, #7
    2428:	0052      	lsls	r2, r2, #1
    242a:	466b      	mov	r3, sp
    242c:	781b      	ldrb	r3, [r3, #0]
    242e:	2102      	movs	r1, #2
    2430:	438b      	bics	r3, r1
    2432:	4313      	orrs	r3, r2
    2434:	466a      	mov	r2, sp
    2436:	7013      	strb	r3, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    2438:	2301      	movs	r3, #1
    243a:	3116      	adds	r1, #22
    243c:	0020      	movs	r0, r4
    243e:	4e0e      	ldr	r6, [pc, #56]	; (2478 <lsm6dso_i3c_disable_set+0x6c>)
    2440:	47b0      	blx	r6
  if (ret == 0)
    2442:	2800      	cmp	r0, #0
    2444:	d1ed      	bne.n	2422 <lsm6dso_i3c_disable_set+0x16>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    2446:	2301      	movs	r3, #1
    2448:	aa01      	add	r2, sp, #4
    244a:	2162      	movs	r1, #98	; 0x62
    244c:	0020      	movs	r0, r4
    244e:	4e09      	ldr	r6, [pc, #36]	; (2474 <lsm6dso_i3c_disable_set+0x68>)
    2450:	47b0      	blx	r6
  if (ret == 0)
    2452:	2800      	cmp	r0, #0
    2454:	d1e5      	bne.n	2422 <lsm6dso_i3c_disable_set+0x16>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
    2456:	aa01      	add	r2, sp, #4
    2458:	2103      	movs	r1, #3
    245a:	4029      	ands	r1, r5
    245c:	00cb      	lsls	r3, r1, #3
    245e:	7811      	ldrb	r1, [r2, #0]
    2460:	3018      	adds	r0, #24
    2462:	4381      	bics	r1, r0
    2464:	4319      	orrs	r1, r3
    2466:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    2468:	2301      	movs	r3, #1
    246a:	2162      	movs	r1, #98	; 0x62
    246c:	0020      	movs	r0, r4
    246e:	4c02      	ldr	r4, [pc, #8]	; (2478 <lsm6dso_i3c_disable_set+0x6c>)
    2470:	47a0      	blx	r4
  return ret;
    2472:	e7d6      	b.n	2422 <lsm6dso_i3c_disable_set+0x16>
    2474:	000021b5 	.word	0x000021b5
    2478:	000021c1 	.word	0x000021c1

0000247c <lsm6dso_fsm_enable_get>:
{
    247c:	b570      	push	{r4, r5, r6, lr}
    247e:	0004      	movs	r4, r0
    2480:	000d      	movs	r5, r1
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    2482:	2102      	movs	r1, #2
    2484:	4b08      	ldr	r3, [pc, #32]	; (24a8 <lsm6dso_fsm_enable_get+0x2c>)
    2486:	4798      	blx	r3
  if (ret == 0)
    2488:	2800      	cmp	r0, #0
    248a:	d000      	beq.n	248e <lsm6dso_fsm_enable_get+0x12>
}
    248c:	bd70      	pop	{r4, r5, r6, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
    248e:	2302      	movs	r3, #2
    2490:	002a      	movs	r2, r5
    2492:	2146      	movs	r1, #70	; 0x46
    2494:	0020      	movs	r0, r4
    2496:	4d05      	ldr	r5, [pc, #20]	; (24ac <lsm6dso_fsm_enable_get+0x30>)
    2498:	47a8      	blx	r5
  if (ret == 0)
    249a:	2800      	cmp	r0, #0
    249c:	d1f6      	bne.n	248c <lsm6dso_fsm_enable_get+0x10>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    249e:	2100      	movs	r1, #0
    24a0:	0020      	movs	r0, r4
    24a2:	4b01      	ldr	r3, [pc, #4]	; (24a8 <lsm6dso_fsm_enable_get+0x2c>)
    24a4:	4798      	blx	r3
  return ret;
    24a6:	e7f1      	b.n	248c <lsm6dso_fsm_enable_get+0x10>
    24a8:	00002325 	.word	0x00002325
    24ac:	000021b5 	.word	0x000021b5

000024b0 <lsm6dso_fsm_data_rate_get>:
{
    24b0:	b570      	push	{r4, r5, r6, lr}
    24b2:	b082      	sub	sp, #8
    24b4:	0004      	movs	r4, r0
    24b6:	000d      	movs	r5, r1
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    24b8:	2102      	movs	r1, #2
    24ba:	4b17      	ldr	r3, [pc, #92]	; (2518 <lsm6dso_fsm_data_rate_get+0x68>)
    24bc:	4798      	blx	r3
  if (ret == 0)
    24be:	2800      	cmp	r0, #0
    24c0:	d001      	beq.n	24c6 <lsm6dso_fsm_data_rate_get+0x16>
}
    24c2:	b002      	add	sp, #8
    24c4:	bd70      	pop	{r4, r5, r6, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
    24c6:	2301      	movs	r3, #1
    24c8:	aa01      	add	r2, sp, #4
    24ca:	215f      	movs	r1, #95	; 0x5f
    24cc:	0020      	movs	r0, r4
    24ce:	4e13      	ldr	r6, [pc, #76]	; (251c <lsm6dso_fsm_data_rate_get+0x6c>)
    24d0:	47b0      	blx	r6
  if (ret == 0)
    24d2:	2800      	cmp	r0, #0
    24d4:	d1f5      	bne.n	24c2 <lsm6dso_fsm_data_rate_get+0x12>
    switch (reg.fsm_odr)
    24d6:	ab01      	add	r3, sp, #4
    24d8:	781b      	ldrb	r3, [r3, #0]
    24da:	06db      	lsls	r3, r3, #27
    24dc:	0f9b      	lsrs	r3, r3, #30
    24de:	b2da      	uxtb	r2, r3
    24e0:	2a01      	cmp	r2, #1
    24e2:	d00f      	beq.n	2504 <lsm6dso_fsm_data_rate_get+0x54>
    24e4:	2a00      	cmp	r2, #0
    24e6:	d006      	beq.n	24f6 <lsm6dso_fsm_data_rate_get+0x46>
    24e8:	2a02      	cmp	r2, #2
    24ea:	d00e      	beq.n	250a <lsm6dso_fsm_data_rate_get+0x5a>
    24ec:	2a03      	cmp	r2, #3
    24ee:	d00f      	beq.n	2510 <lsm6dso_fsm_data_rate_get+0x60>
        *val = LSM6DSO_ODR_FSM_12Hz5;
    24f0:	2300      	movs	r3, #0
    24f2:	702b      	strb	r3, [r5, #0]
        break;
    24f4:	e001      	b.n	24fa <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_12Hz5;
    24f6:	2300      	movs	r3, #0
    24f8:	702b      	strb	r3, [r5, #0]
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    24fa:	2100      	movs	r1, #0
    24fc:	0020      	movs	r0, r4
    24fe:	4b06      	ldr	r3, [pc, #24]	; (2518 <lsm6dso_fsm_data_rate_get+0x68>)
    2500:	4798      	blx	r3
  return ret;
    2502:	e7de      	b.n	24c2 <lsm6dso_fsm_data_rate_get+0x12>
        *val = LSM6DSO_ODR_FSM_26Hz;
    2504:	2301      	movs	r3, #1
    2506:	702b      	strb	r3, [r5, #0]
        break;
    2508:	e7f7      	b.n	24fa <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_52Hz;
    250a:	2302      	movs	r3, #2
    250c:	702b      	strb	r3, [r5, #0]
        break;
    250e:	e7f4      	b.n	24fa <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_104Hz;
    2510:	2303      	movs	r3, #3
    2512:	702b      	strb	r3, [r5, #0]
        break;
    2514:	e7f1      	b.n	24fa <lsm6dso_fsm_data_rate_get+0x4a>
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	00002325 	.word	0x00002325
    251c:	000021b5 	.word	0x000021b5

00002520 <lsm6dso_xl_data_rate_set>:
{
    2520:	b570      	push	{r4, r5, r6, lr}
    2522:	b082      	sub	sp, #8
    2524:	0004      	movs	r4, r0
    2526:	000d      	movs	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    2528:	a901      	add	r1, sp, #4
    252a:	4b38      	ldr	r3, [pc, #224]	; (260c <lsm6dso_xl_data_rate_set+0xec>)
    252c:	4798      	blx	r3
  if (ret == 0)
    252e:	2800      	cmp	r0, #0
    2530:	d142      	bne.n	25b8 <lsm6dso_xl_data_rate_set+0x98>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    2532:	a901      	add	r1, sp, #4
    2534:	780a      	ldrb	r2, [r1, #0]
    2536:	07d0      	lsls	r0, r2, #31
         fsm_enable.fsm_enable_a.fsm2_en  |
    2538:	0793      	lsls	r3, r2, #30
    253a:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    253c:	0753      	lsls	r3, r2, #29
    253e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
    2540:	0710      	lsls	r0, r2, #28
    2542:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
    2544:	06d0      	lsls	r0, r2, #27
    2546:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    2548:	0693      	lsls	r3, r2, #26
    254a:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    254c:	0653      	lsls	r3, r2, #25
    254e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
    2550:	0fdb      	lsrs	r3, r3, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    2552:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_a.fsm7_en  |
    2554:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_b.fsm9_en  |
    2556:	784a      	ldrb	r2, [r1, #1]
    2558:	07d1      	lsls	r1, r2, #31
    255a:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    255c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
    255e:	0791      	lsls	r1, r2, #30
    2560:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm9_en  |
    2562:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
    2564:	0751      	lsls	r1, r2, #29
    2566:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm10_en |
    2568:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
    256a:	0711      	lsls	r1, r2, #28
    256c:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm11_en |
    256e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
    2570:	06d1      	lsls	r1, r2, #27
    2572:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm12_en |
    2574:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
    2576:	0691      	lsls	r1, r2, #26
    2578:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm13_en |
    257a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
    257c:	0651      	lsls	r1, r2, #25
    257e:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm14_en |
    2580:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    2582:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_b.fsm15_en |
    2584:	4313      	orrs	r3, r2
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    2586:	b2db      	uxtb	r3, r3
    2588:	2b01      	cmp	r3, #1
    258a:	d017      	beq.n	25bc <lsm6dso_xl_data_rate_set+0x9c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    258c:	2301      	movs	r3, #1
    258e:	466a      	mov	r2, sp
    2590:	2110      	movs	r1, #16
    2592:	0020      	movs	r0, r4
    2594:	4e1e      	ldr	r6, [pc, #120]	; (2610 <lsm6dso_xl_data_rate_set+0xf0>)
    2596:	47b0      	blx	r6
  if (ret == 0)
    2598:	2800      	cmp	r0, #0
    259a:	d10d      	bne.n	25b8 <lsm6dso_xl_data_rate_set+0x98>
    reg.odr_xl = (uint8_t) odr_xl;
    259c:	012b      	lsls	r3, r5, #4
    259e:	466a      	mov	r2, sp
    25a0:	7812      	ldrb	r2, [r2, #0]
    25a2:	250f      	movs	r5, #15
    25a4:	4015      	ands	r5, r2
    25a6:	431d      	orrs	r5, r3
    25a8:	466b      	mov	r3, sp
    25aa:	701d      	strb	r5, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    25ac:	2301      	movs	r3, #1
    25ae:	466a      	mov	r2, sp
    25b0:	2110      	movs	r1, #16
    25b2:	0020      	movs	r0, r4
    25b4:	4c17      	ldr	r4, [pc, #92]	; (2614 <lsm6dso_xl_data_rate_set+0xf4>)
    25b6:	47a0      	blx	r4
}
    25b8:	b002      	add	sp, #8
    25ba:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    25bc:	466b      	mov	r3, sp
    25be:	1cd9      	adds	r1, r3, #3
    25c0:	0020      	movs	r0, r4
    25c2:	4b15      	ldr	r3, [pc, #84]	; (2618 <lsm6dso_xl_data_rate_set+0xf8>)
    25c4:	4798      	blx	r3
      if (ret == 0)
    25c6:	2800      	cmp	r0, #0
    25c8:	d1f6      	bne.n	25b8 <lsm6dso_xl_data_rate_set+0x98>
        switch (fsm_odr)
    25ca:	466b      	mov	r3, sp
    25cc:	3303      	adds	r3, #3
    25ce:	781b      	ldrb	r3, [r3, #0]
    25d0:	2b01      	cmp	r3, #1
    25d2:	d00f      	beq.n	25f4 <lsm6dso_xl_data_rate_set+0xd4>
    25d4:	2b00      	cmp	r3, #0
    25d6:	d009      	beq.n	25ec <lsm6dso_xl_data_rate_set+0xcc>
    25d8:	2b02      	cmp	r3, #2
    25da:	d011      	beq.n	2600 <lsm6dso_xl_data_rate_set+0xe0>
    25dc:	2b03      	cmp	r3, #3
    25de:	d1d5      	bne.n	258c <lsm6dso_xl_data_rate_set+0x6c>
    25e0:	1c2b      	adds	r3, r5, #0
    25e2:	2d03      	cmp	r5, #3
    25e4:	d800      	bhi.n	25e8 <lsm6dso_xl_data_rate_set+0xc8>
    25e6:	2304      	movs	r3, #4
    25e8:	b2dd      	uxtb	r5, r3
    25ea:	e7cf      	b.n	258c <lsm6dso_xl_data_rate_set+0x6c>
            if (val == LSM6DSO_XL_ODR_OFF)
    25ec:	2d00      	cmp	r5, #0
    25ee:	d1cd      	bne.n	258c <lsm6dso_xl_data_rate_set+0x6c>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
    25f0:	2501      	movs	r5, #1
    25f2:	e7cb      	b.n	258c <lsm6dso_xl_data_rate_set+0x6c>
    25f4:	1c2b      	adds	r3, r5, #0
    25f6:	2d01      	cmp	r5, #1
    25f8:	d800      	bhi.n	25fc <lsm6dso_xl_data_rate_set+0xdc>
    25fa:	2302      	movs	r3, #2
    25fc:	b2dd      	uxtb	r5, r3
    25fe:	e7c5      	b.n	258c <lsm6dso_xl_data_rate_set+0x6c>
    2600:	1c2b      	adds	r3, r5, #0
    2602:	2d02      	cmp	r5, #2
    2604:	d800      	bhi.n	2608 <lsm6dso_xl_data_rate_set+0xe8>
    2606:	2303      	movs	r3, #3
    2608:	b2dd      	uxtb	r5, r3
    260a:	e7bf      	b.n	258c <lsm6dso_xl_data_rate_set+0x6c>
    260c:	0000247d 	.word	0x0000247d
    2610:	000021b5 	.word	0x000021b5
    2614:	000021c1 	.word	0x000021c1
    2618:	000024b1 	.word	0x000024b1

0000261c <lsm6dso_gy_data_rate_set>:
{
    261c:	b570      	push	{r4, r5, r6, lr}
    261e:	b082      	sub	sp, #8
    2620:	0004      	movs	r4, r0
    2622:	000d      	movs	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    2624:	a901      	add	r1, sp, #4
    2626:	4b38      	ldr	r3, [pc, #224]	; (2708 <lsm6dso_gy_data_rate_set+0xec>)
    2628:	4798      	blx	r3
  if (ret == 0)
    262a:	2800      	cmp	r0, #0
    262c:	d142      	bne.n	26b4 <lsm6dso_gy_data_rate_set+0x98>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    262e:	a901      	add	r1, sp, #4
    2630:	780a      	ldrb	r2, [r1, #0]
    2632:	07d0      	lsls	r0, r2, #31
         fsm_enable.fsm_enable_a.fsm2_en  |
    2634:	0793      	lsls	r3, r2, #30
    2636:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    2638:	0753      	lsls	r3, r2, #29
    263a:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
    263c:	0710      	lsls	r0, r2, #28
    263e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
    2640:	06d0      	lsls	r0, r2, #27
    2642:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    2644:	0693      	lsls	r3, r2, #26
    2646:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    2648:	0653      	lsls	r3, r2, #25
    264a:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
    264c:	0fdb      	lsrs	r3, r3, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    264e:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_a.fsm7_en  |
    2650:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_b.fsm9_en  |
    2652:	784a      	ldrb	r2, [r1, #1]
    2654:	07d1      	lsls	r1, r2, #31
    2656:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    2658:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
    265a:	0791      	lsls	r1, r2, #30
    265c:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm9_en  |
    265e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
    2660:	0751      	lsls	r1, r2, #29
    2662:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm10_en |
    2664:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
    2666:	0711      	lsls	r1, r2, #28
    2668:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm11_en |
    266a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
    266c:	06d1      	lsls	r1, r2, #27
    266e:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm12_en |
    2670:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
    2672:	0691      	lsls	r1, r2, #26
    2674:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm13_en |
    2676:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
    2678:	0651      	lsls	r1, r2, #25
    267a:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm14_en |
    267c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    267e:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_b.fsm15_en |
    2680:	4313      	orrs	r3, r2
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    2682:	b2db      	uxtb	r3, r3
    2684:	2b01      	cmp	r3, #1
    2686:	d017      	beq.n	26b8 <lsm6dso_gy_data_rate_set+0x9c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    2688:	2301      	movs	r3, #1
    268a:	466a      	mov	r2, sp
    268c:	2111      	movs	r1, #17
    268e:	0020      	movs	r0, r4
    2690:	4e1e      	ldr	r6, [pc, #120]	; (270c <lsm6dso_gy_data_rate_set+0xf0>)
    2692:	47b0      	blx	r6
  if (ret == 0)
    2694:	2800      	cmp	r0, #0
    2696:	d10d      	bne.n	26b4 <lsm6dso_gy_data_rate_set+0x98>
    reg.odr_g = (uint8_t) odr_gy;
    2698:	012b      	lsls	r3, r5, #4
    269a:	466a      	mov	r2, sp
    269c:	7812      	ldrb	r2, [r2, #0]
    269e:	250f      	movs	r5, #15
    26a0:	4015      	ands	r5, r2
    26a2:	431d      	orrs	r5, r3
    26a4:	466b      	mov	r3, sp
    26a6:	701d      	strb	r5, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    26a8:	2301      	movs	r3, #1
    26aa:	466a      	mov	r2, sp
    26ac:	2111      	movs	r1, #17
    26ae:	0020      	movs	r0, r4
    26b0:	4c17      	ldr	r4, [pc, #92]	; (2710 <lsm6dso_gy_data_rate_set+0xf4>)
    26b2:	47a0      	blx	r4
}
    26b4:	b002      	add	sp, #8
    26b6:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    26b8:	466b      	mov	r3, sp
    26ba:	1cd9      	adds	r1, r3, #3
    26bc:	0020      	movs	r0, r4
    26be:	4b15      	ldr	r3, [pc, #84]	; (2714 <lsm6dso_gy_data_rate_set+0xf8>)
    26c0:	4798      	blx	r3
      if (ret == 0)
    26c2:	2800      	cmp	r0, #0
    26c4:	d1f6      	bne.n	26b4 <lsm6dso_gy_data_rate_set+0x98>
        switch (fsm_odr)
    26c6:	466b      	mov	r3, sp
    26c8:	3303      	adds	r3, #3
    26ca:	781b      	ldrb	r3, [r3, #0]
    26cc:	2b01      	cmp	r3, #1
    26ce:	d00f      	beq.n	26f0 <lsm6dso_gy_data_rate_set+0xd4>
    26d0:	2b00      	cmp	r3, #0
    26d2:	d009      	beq.n	26e8 <lsm6dso_gy_data_rate_set+0xcc>
    26d4:	2b02      	cmp	r3, #2
    26d6:	d011      	beq.n	26fc <lsm6dso_gy_data_rate_set+0xe0>
    26d8:	2b03      	cmp	r3, #3
    26da:	d1d5      	bne.n	2688 <lsm6dso_gy_data_rate_set+0x6c>
    26dc:	1c2b      	adds	r3, r5, #0
    26de:	2d03      	cmp	r5, #3
    26e0:	d800      	bhi.n	26e4 <lsm6dso_gy_data_rate_set+0xc8>
    26e2:	2304      	movs	r3, #4
    26e4:	b2dd      	uxtb	r5, r3
    26e6:	e7cf      	b.n	2688 <lsm6dso_gy_data_rate_set+0x6c>
            if (val == LSM6DSO_GY_ODR_OFF)
    26e8:	2d00      	cmp	r5, #0
    26ea:	d1cd      	bne.n	2688 <lsm6dso_gy_data_rate_set+0x6c>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
    26ec:	2501      	movs	r5, #1
    26ee:	e7cb      	b.n	2688 <lsm6dso_gy_data_rate_set+0x6c>
    26f0:	1c2b      	adds	r3, r5, #0
    26f2:	2d01      	cmp	r5, #1
    26f4:	d800      	bhi.n	26f8 <lsm6dso_gy_data_rate_set+0xdc>
    26f6:	2302      	movs	r3, #2
    26f8:	b2dd      	uxtb	r5, r3
    26fa:	e7c5      	b.n	2688 <lsm6dso_gy_data_rate_set+0x6c>
    26fc:	1c2b      	adds	r3, r5, #0
    26fe:	2d02      	cmp	r5, #2
    2700:	d800      	bhi.n	2704 <lsm6dso_gy_data_rate_set+0xe8>
    2702:	2303      	movs	r3, #3
    2704:	b2dd      	uxtb	r5, r3
    2706:	e7bf      	b.n	2688 <lsm6dso_gy_data_rate_set+0x6c>
    2708:	0000247d 	.word	0x0000247d
    270c:	000021b5 	.word	0x000021b5
    2710:	000021c1 	.word	0x000021c1
    2714:	000024b1 	.word	0x000024b1

00002718 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
 return &dev_ctx;
}
    2718:	4800      	ldr	r0, [pc, #0]	; (271c <GetImuStruct+0x4>)
    271a:	4770      	bx	lr
    271c:	20000000 	.word	0x20000000

00002720 <InitImu>:



int32_t InitImu(void)
{
    2720:	b510      	push	{r4, lr}
    2722:	b082      	sub	sp, #8
	uint8_t rst;
	int32_t error = 0;
	uint8_t whoamI = 0;
    2724:	466b      	mov	r3, sp
    2726:	1ddc      	adds	r4, r3, #7
    2728:	2300      	movs	r3, #0
    272a:	7023      	strb	r3, [r4, #0]

  /* Check device ID */
  lsm6dso_device_id_get(&dev_ctx, &whoamI);
    272c:	0021      	movs	r1, r4
    272e:	4818      	ldr	r0, [pc, #96]	; (2790 <InitImu+0x70>)
    2730:	4b18      	ldr	r3, [pc, #96]	; (2794 <InitImu+0x74>)
    2732:	4798      	blx	r3
  
   if (whoamI != LSM6DSO_ID)
    2734:	7823      	ldrb	r3, [r4, #0]
    2736:	2b6c      	cmp	r3, #108	; 0x6c
    2738:	d127      	bne.n	278a <InitImu+0x6a>
  //do {
    //error |= lsm6dso_reset_get(&dev_ctx, &rst);
  //} while (rst);   // edited reset not working on the PCB

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
    273a:	4c15      	ldr	r4, [pc, #84]	; (2790 <InitImu+0x70>)
    273c:	2180      	movs	r1, #128	; 0x80
    273e:	0020      	movs	r0, r4
    2740:	4b15      	ldr	r3, [pc, #84]	; (2798 <InitImu+0x78>)
    2742:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    2744:	2101      	movs	r1, #1
    2746:	0020      	movs	r0, r4
    2748:	4b14      	ldr	r3, [pc, #80]	; (279c <InitImu+0x7c>)
    274a:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
    274c:	2100      	movs	r1, #0
    274e:	0020      	movs	r0, r4
    2750:	4b13      	ldr	r3, [pc, #76]	; (27a0 <InitImu+0x80>)
    2752:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_833Hz);  // edited change speed here
    2754:	2107      	movs	r1, #7
    2756:	0020      	movs	r0, r4
    2758:	4b12      	ldr	r3, [pc, #72]	; (27a4 <InitImu+0x84>)
    275a:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx,  LSM6DSO_GY_ODR_833Hz);
    275c:	2107      	movs	r1, #7
    275e:	0020      	movs	r0, r4
    2760:	4b11      	ldr	r3, [pc, #68]	; (27a8 <InitImu+0x88>)
    2762:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
    2764:	2100      	movs	r1, #0
    2766:	0020      	movs	r0, r4
    2768:	4b10      	ldr	r3, [pc, #64]	; (27ac <InitImu+0x8c>)
    276a:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
    276c:	2106      	movs	r1, #6
    276e:	0020      	movs	r0, r4
    2770:	4b0f      	ldr	r3, [pc, #60]	; (27b0 <InitImu+0x90>)
    2772:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
    2774:	2104      	movs	r1, #4
    2776:	0020      	movs	r0, r4
    2778:	4b0e      	ldr	r3, [pc, #56]	; (27b4 <InitImu+0x94>)
    277a:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
    277c:	2101      	movs	r1, #1
    277e:	0020      	movs	r0, r4
    2780:	4b0d      	ldr	r3, [pc, #52]	; (27b8 <InitImu+0x98>)
    2782:	4798      	blx	r3

  return error;
    2784:	2000      	movs	r0, #0
}
    2786:	b002      	add	sp, #8
    2788:	bd10      	pop	{r4, pc}
		return -1;
    278a:	2001      	movs	r0, #1
    278c:	4240      	negs	r0, r0
    278e:	e7fa      	b.n	2786 <InitImu+0x66>
    2790:	20000000 	.word	0x20000000
    2794:	00002361 	.word	0x00002361
    2798:	0000240d 	.word	0x0000240d
    279c:	00002269 	.word	0x00002269
    27a0:	000022a9 	.word	0x000022a9
    27a4:	00002521 	.word	0x00002521
    27a8:	0000261d 	.word	0x0000261d
    27ac:	000021e9 	.word	0x000021e9
    27b0:	00002229 	.word	0x00002229
    27b4:	000023b5 	.word	0x000023b5
    27b8:	00002375 	.word	0x00002375

000027bc <configure_spi_master>:
* @param[out]	
* @return		
* @note         
*****************************************************************************/
void configure_spi_master(void)
{
    27bc:	b530      	push	{r4, r5, lr}
    27be:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    27c0:	4c27      	ldr	r4, [pc, #156]	; (2860 <configure_spi_master+0xa4>)
    27c2:	2311      	movs	r3, #17
    27c4:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    27c6:	2300      	movs	r3, #0
    27c8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    27ca:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    27cc:	a901      	add	r1, sp, #4
    27ce:	2201      	movs	r2, #1
    27d0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    27d2:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    27d4:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    27d6:	2011      	movs	r0, #17
    27d8:	4b22      	ldr	r3, [pc, #136]	; (2864 <configure_spi_master+0xa8>)
    27da:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    27dc:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    27de:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    27e0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    27e2:	2900      	cmp	r1, #0
    27e4:	d104      	bne.n	27f0 <configure_spi_master+0x34>
		return &(ports[port_index]->Group[group_index]);
    27e6:	0953      	lsrs	r3, r2, #5
    27e8:	01db      	lsls	r3, r3, #7
    27ea:	491f      	ldr	r1, [pc, #124]	; (2868 <configure_spi_master+0xac>)
    27ec:	468c      	mov	ip, r1
    27ee:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    27f0:	211f      	movs	r1, #31
    27f2:	4011      	ands	r1, r2
    27f4:	2201      	movs	r2, #1
    27f6:	0010      	movs	r0, r2
    27f8:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    27fa:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    27fc:	ac02      	add	r4, sp, #8
    27fe:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2800:	2500      	movs	r5, #0
    2802:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2804:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    2806:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    2808:	74a2      	strb	r2, [r4, #18]
	config->master_slave_select_enable= false;
    280a:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    280c:	2324      	movs	r3, #36	; 0x24
    280e:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2810:	320b      	adds	r2, #11
    2812:	2100      	movs	r1, #0
    2814:	a808      	add	r0, sp, #32
    2816:	4b15      	ldr	r3, [pc, #84]	; (286c <configure_spi_master+0xb0>)
    2818:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
	spi_attach_slave(&slave, &slave_dev_config);
	
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
    281a:	2398      	movs	r3, #152	; 0x98
    281c:	035b      	lsls	r3, r3, #13
    281e:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
    2820:	4b13      	ldr	r3, [pc, #76]	; (2870 <configure_spi_master+0xb4>)
    2822:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
    2824:	4b13      	ldr	r3, [pc, #76]	; (2874 <configure_spi_master+0xb8>)
    2826:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
    2828:	2301      	movs	r3, #1
    282a:	425b      	negs	r3, r3
    282c:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
    282e:	4b12      	ldr	r3, [pc, #72]	; (2878 <configure_spi_master+0xbc>)
    2830:	6363      	str	r3, [r4, #52]	; 0x34
	
	/* Works upto 1 MHZ with small jumpers. Doesn't work with long jumper wires. 	*/
	config_spi_master.mode_specific.master.baudrate = 1000000;  // 1 MHZ clock.
    2832:	4b12      	ldr	r3, [pc, #72]	; (287c <configure_spi_master+0xc0>)
    2834:	61a3      	str	r3, [r4, #24]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;  // works with both mode 0 and mode 1
    2836:	2380      	movs	r3, #128	; 0x80
    2838:	055b      	lsls	r3, r3, #21
    283a:	60a3      	str	r3, [r4, #8]
	config_spi_master.select_slave_low_detect_enable = false;
    283c:	74e5      	strb	r5, [r4, #19]

	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
    283e:	4d10      	ldr	r5, [pc, #64]	; (2880 <configure_spi_master+0xc4>)
    2840:	0022      	movs	r2, r4
    2842:	4910      	ldr	r1, [pc, #64]	; (2884 <configure_spi_master+0xc8>)
    2844:	0028      	movs	r0, r5
    2846:	4b10      	ldr	r3, [pc, #64]	; (2888 <configure_spi_master+0xcc>)
    2848:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    284a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    284c:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    284e:	2b00      	cmp	r3, #0
    2850:	d1fc      	bne.n	284c <configure_spi_master+0x90>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2852:	6813      	ldr	r3, [r2, #0]
    2854:	2102      	movs	r1, #2
    2856:	430b      	orrs	r3, r1
    2858:	6013      	str	r3, [r2, #0]
	spi_enable(&spi_master_instance);
    285a:	b011      	add	sp, #68	; 0x44
    285c:	bd30      	pop	{r4, r5, pc}
    285e:	46c0      	nop			; (mov r8, r8)
    2860:	2000000c 	.word	0x2000000c
    2864:	00006c29 	.word	0x00006c29
    2868:	41004400 	.word	0x41004400
    286c:	0000865f 	.word	0x0000865f
    2870:	00220003 	.word	0x00220003
    2874:	00230003 	.word	0x00230003
    2878:	00150002 	.word	0x00150002
    287c:	000f4240 	.word	0x000f4240
    2880:	200038e4 	.word	0x200038e4
    2884:	42001c00 	.word	0x42001c00
    2888:	000070d5 	.word	0x000070d5

0000288c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    288c:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    288e:	2207      	movs	r2, #7
    2890:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    2892:	421a      	tst	r2, r3
    2894:	d1fc      	bne.n	2890 <_i2c_master_wait_for_sync+0x4>
}
    2896:	4770      	bx	lr

00002898 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    2898:	b5f0      	push	{r4, r5, r6, r7, lr}
    289a:	46d6      	mov	lr, sl
    289c:	464f      	mov	r7, r9
    289e:	4646      	mov	r6, r8
    28a0:	b5c0      	push	{r6, r7, lr}
    28a2:	b08a      	sub	sp, #40	; 0x28
    28a4:	0006      	movs	r6, r0
    28a6:	000f      	movs	r7, r1
    28a8:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    28aa:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    28ac:	0008      	movs	r0, r1
    28ae:	4ba0      	ldr	r3, [pc, #640]	; (2b30 <i2c_master_init+0x298>)
    28b0:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    28b2:	4aa0      	ldr	r2, [pc, #640]	; (2b34 <i2c_master_init+0x29c>)
    28b4:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    28b6:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    28b8:	2301      	movs	r3, #1
    28ba:	40ab      	lsls	r3, r5
    28bc:	430b      	orrs	r3, r1
    28be:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    28c0:	a909      	add	r1, sp, #36	; 0x24
    28c2:	7b23      	ldrb	r3, [r4, #12]
    28c4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    28c6:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    28c8:	b2c5      	uxtb	r5, r0
    28ca:	0028      	movs	r0, r5
    28cc:	4b9a      	ldr	r3, [pc, #616]	; (2b38 <i2c_master_init+0x2a0>)
    28ce:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    28d0:	0028      	movs	r0, r5
    28d2:	4b9a      	ldr	r3, [pc, #616]	; (2b3c <i2c_master_init+0x2a4>)
    28d4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    28d6:	7b20      	ldrb	r0, [r4, #12]
    28d8:	2100      	movs	r1, #0
    28da:	4b99      	ldr	r3, [pc, #612]	; (2b40 <i2c_master_init+0x2a8>)
    28dc:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    28de:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    28e0:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    28e2:	079b      	lsls	r3, r3, #30
    28e4:	d505      	bpl.n	28f2 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    28e6:	b00a      	add	sp, #40	; 0x28
    28e8:	bc1c      	pop	{r2, r3, r4}
    28ea:	4690      	mov	r8, r2
    28ec:	4699      	mov	r9, r3
    28ee:	46a2      	mov	sl, r4
    28f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    28f2:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    28f4:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    28f6:	07db      	lsls	r3, r3, #31
    28f8:	d4f5      	bmi.n	28e6 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    28fa:	6830      	ldr	r0, [r6, #0]
    28fc:	4b8c      	ldr	r3, [pc, #560]	; (2b30 <i2c_master_init+0x298>)
    28fe:	4699      	mov	r9, r3
    2900:	4798      	blx	r3
    2902:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    2904:	498f      	ldr	r1, [pc, #572]	; (2b44 <i2c_master_init+0x2ac>)
    2906:	4b90      	ldr	r3, [pc, #576]	; (2b48 <i2c_master_init+0x2b0>)
    2908:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    290a:	00ad      	lsls	r5, r5, #2
    290c:	4b8f      	ldr	r3, [pc, #572]	; (2b4c <i2c_master_init+0x2b4>)
    290e:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
    2910:	2300      	movs	r3, #0
    2912:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
    2914:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
    2916:	2500      	movs	r5, #0
    2918:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
    291a:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
    291c:	2225      	movs	r2, #37	; 0x25
    291e:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
    2920:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    2922:	3314      	adds	r3, #20
    2924:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2926:	6833      	ldr	r3, [r6, #0]
    2928:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    292a:	0018      	movs	r0, r3
    292c:	47c8      	blx	r9
    292e:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2930:	2380      	movs	r3, #128	; 0x80
    2932:	aa08      	add	r2, sp, #32
    2934:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2936:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2938:	2301      	movs	r3, #1
    293a:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    293c:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    293e:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    2940:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    2942:	2800      	cmp	r0, #0
    2944:	d100      	bne.n	2948 <i2c_master_init+0xb0>
    2946:	e0af      	b.n	2aa8 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
    2948:	ab08      	add	r3, sp, #32
    294a:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    294c:	2302      	movs	r3, #2
    294e:	aa08      	add	r2, sp, #32
    2950:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    2952:	0c00      	lsrs	r0, r0, #16
    2954:	b2c0      	uxtb	r0, r0
    2956:	0011      	movs	r1, r2
    2958:	4b7d      	ldr	r3, [pc, #500]	; (2b50 <i2c_master_init+0x2b8>)
    295a:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    295c:	2f00      	cmp	r7, #0
    295e:	d100      	bne.n	2962 <i2c_master_init+0xca>
    2960:	e0a7      	b.n	2ab2 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
    2962:	ab08      	add	r3, sp, #32
    2964:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    2966:	2302      	movs	r3, #2
    2968:	aa08      	add	r2, sp, #32
    296a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    296c:	0c3f      	lsrs	r7, r7, #16
    296e:	b2f8      	uxtb	r0, r7
    2970:	0011      	movs	r1, r2
    2972:	4b77      	ldr	r3, [pc, #476]	; (2b50 <i2c_master_init+0x2b8>)
    2974:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    2976:	8aa3      	ldrh	r3, [r4, #20]
    2978:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    297a:	8ae3      	ldrh	r3, [r4, #22]
    297c:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    297e:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    2980:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    2982:	2b00      	cmp	r3, #0
    2984:	d104      	bne.n	2990 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2986:	4b73      	ldr	r3, [pc, #460]	; (2b54 <i2c_master_init+0x2bc>)
    2988:	789b      	ldrb	r3, [r3, #2]
    298a:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    298c:	0fdb      	lsrs	r3, r3, #31
    298e:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    2990:	68a1      	ldr	r1, [r4, #8]
    2992:	6923      	ldr	r3, [r4, #16]
    2994:	430b      	orrs	r3, r1
    2996:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    2998:	2224      	movs	r2, #36	; 0x24
    299a:	5ca2      	ldrb	r2, [r4, r2]
    299c:	2a00      	cmp	r2, #0
    299e:	d002      	beq.n	29a6 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    29a0:	2280      	movs	r2, #128	; 0x80
    29a2:	05d2      	lsls	r2, r2, #23
    29a4:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    29a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    29a8:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    29aa:	222c      	movs	r2, #44	; 0x2c
    29ac:	5ca2      	ldrb	r2, [r4, r2]
    29ae:	2a00      	cmp	r2, #0
    29b0:	d103      	bne.n	29ba <i2c_master_init+0x122>
    29b2:	2280      	movs	r2, #128	; 0x80
    29b4:	0492      	lsls	r2, r2, #18
    29b6:	4291      	cmp	r1, r2
    29b8:	d102      	bne.n	29c0 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    29ba:	2280      	movs	r2, #128	; 0x80
    29bc:	0512      	lsls	r2, r2, #20
    29be:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    29c0:	222d      	movs	r2, #45	; 0x2d
    29c2:	5ca2      	ldrb	r2, [r4, r2]
    29c4:	2a00      	cmp	r2, #0
    29c6:	d002      	beq.n	29ce <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    29c8:	2280      	movs	r2, #128	; 0x80
    29ca:	0412      	lsls	r2, r2, #16
    29cc:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    29ce:	222e      	movs	r2, #46	; 0x2e
    29d0:	5ca2      	ldrb	r2, [r4, r2]
    29d2:	2a00      	cmp	r2, #0
    29d4:	d002      	beq.n	29dc <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    29d6:	2280      	movs	r2, #128	; 0x80
    29d8:	03d2      	lsls	r2, r2, #15
    29da:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    29dc:	4642      	mov	r2, r8
    29de:	6812      	ldr	r2, [r2, #0]
    29e0:	4313      	orrs	r3, r2
    29e2:	4642      	mov	r2, r8
    29e4:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    29e6:	2380      	movs	r3, #128	; 0x80
    29e8:	005b      	lsls	r3, r3, #1
    29ea:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    29ec:	4648      	mov	r0, r9
    29ee:	3014      	adds	r0, #20
    29f0:	b2c0      	uxtb	r0, r0
    29f2:	4b59      	ldr	r3, [pc, #356]	; (2b58 <i2c_master_init+0x2c0>)
    29f4:	4798      	blx	r3
    29f6:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    29f8:	23fa      	movs	r3, #250	; 0xfa
    29fa:	009b      	lsls	r3, r3, #2
    29fc:	6822      	ldr	r2, [r4, #0]
    29fe:	435a      	muls	r2, r3
    2a00:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    2a02:	6863      	ldr	r3, [r4, #4]
    2a04:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    2a06:	4d55      	ldr	r5, [pc, #340]	; (2b5c <i2c_master_init+0x2c4>)
    2a08:	47a8      	blx	r5
    2a0a:	9000      	str	r0, [sp, #0]
    2a0c:	9101      	str	r1, [sp, #4]
    2a0e:	464b      	mov	r3, r9
    2a10:	0058      	lsls	r0, r3, #1
    2a12:	47a8      	blx	r5
    2a14:	9002      	str	r0, [sp, #8]
    2a16:	9103      	str	r1, [sp, #12]
    2a18:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    2a1a:	47a8      	blx	r5
    2a1c:	9004      	str	r0, [sp, #16]
    2a1e:	9105      	str	r1, [sp, #20]
    2a20:	4f4f      	ldr	r7, [pc, #316]	; (2b60 <i2c_master_init+0x2c8>)
    2a22:	4a50      	ldr	r2, [pc, #320]	; (2b64 <i2c_master_init+0x2cc>)
    2a24:	4b50      	ldr	r3, [pc, #320]	; (2b68 <i2c_master_init+0x2d0>)
    2a26:	9800      	ldr	r0, [sp, #0]
    2a28:	9901      	ldr	r1, [sp, #4]
    2a2a:	47b8      	blx	r7
    2a2c:	0002      	movs	r2, r0
    2a2e:	000b      	movs	r3, r1
    2a30:	9804      	ldr	r0, [sp, #16]
    2a32:	9905      	ldr	r1, [sp, #20]
    2a34:	47b8      	blx	r7
    2a36:	4e4d      	ldr	r6, [pc, #308]	; (2b6c <i2c_master_init+0x2d4>)
    2a38:	2200      	movs	r2, #0
    2a3a:	4b4d      	ldr	r3, [pc, #308]	; (2b70 <i2c_master_init+0x2d8>)
    2a3c:	47b0      	blx	r6
    2a3e:	9004      	str	r0, [sp, #16]
    2a40:	9105      	str	r1, [sp, #20]
    2a42:	4648      	mov	r0, r9
    2a44:	47a8      	blx	r5
    2a46:	0002      	movs	r2, r0
    2a48:	000b      	movs	r3, r1
    2a4a:	9804      	ldr	r0, [sp, #16]
    2a4c:	9905      	ldr	r1, [sp, #20]
    2a4e:	47b8      	blx	r7
    2a50:	0002      	movs	r2, r0
    2a52:	000b      	movs	r3, r1
    2a54:	4d47      	ldr	r5, [pc, #284]	; (2b74 <i2c_master_init+0x2dc>)
    2a56:	9800      	ldr	r0, [sp, #0]
    2a58:	9901      	ldr	r1, [sp, #4]
    2a5a:	47a8      	blx	r5
    2a5c:	9a02      	ldr	r2, [sp, #8]
    2a5e:	9b03      	ldr	r3, [sp, #12]
    2a60:	47b0      	blx	r6
    2a62:	2200      	movs	r2, #0
    2a64:	4b44      	ldr	r3, [pc, #272]	; (2b78 <i2c_master_init+0x2e0>)
    2a66:	47a8      	blx	r5
    2a68:	9a02      	ldr	r2, [sp, #8]
    2a6a:	9b03      	ldr	r3, [sp, #12]
    2a6c:	4d43      	ldr	r5, [pc, #268]	; (2b7c <i2c_master_init+0x2e4>)
    2a6e:	47a8      	blx	r5
    2a70:	4b43      	ldr	r3, [pc, #268]	; (2b80 <i2c_master_init+0x2e8>)
    2a72:	4798      	blx	r3
    2a74:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    2a76:	2380      	movs	r3, #128	; 0x80
    2a78:	049b      	lsls	r3, r3, #18
    2a7a:	68a2      	ldr	r2, [r4, #8]
    2a7c:	429a      	cmp	r2, r3
    2a7e:	d01e      	beq.n	2abe <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    2a80:	0003      	movs	r3, r0
    2a82:	2040      	movs	r0, #64	; 0x40
    2a84:	2dff      	cmp	r5, #255	; 0xff
    2a86:	d900      	bls.n	2a8a <i2c_master_init+0x1f2>
    2a88:	e72d      	b.n	28e6 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    2a8a:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    2a8c:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    2a8e:	25ff      	movs	r5, #255	; 0xff
    2a90:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    2a92:	0624      	lsls	r4, r4, #24
    2a94:	4325      	orrs	r5, r4
    2a96:	0400      	lsls	r0, r0, #16
    2a98:	23ff      	movs	r3, #255	; 0xff
    2a9a:	041b      	lsls	r3, r3, #16
    2a9c:	4018      	ands	r0, r3
    2a9e:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    2aa0:	4643      	mov	r3, r8
    2aa2:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    2aa4:	2000      	movs	r0, #0
    2aa6:	e71e      	b.n	28e6 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    2aa8:	2100      	movs	r1, #0
    2aaa:	4640      	mov	r0, r8
    2aac:	4b35      	ldr	r3, [pc, #212]	; (2b84 <i2c_master_init+0x2ec>)
    2aae:	4798      	blx	r3
    2ab0:	e74a      	b.n	2948 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    2ab2:	2101      	movs	r1, #1
    2ab4:	4640      	mov	r0, r8
    2ab6:	4b33      	ldr	r3, [pc, #204]	; (2b84 <i2c_master_init+0x2ec>)
    2ab8:	4798      	blx	r3
    2aba:	0007      	movs	r7, r0
    2abc:	e751      	b.n	2962 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    2abe:	26fa      	movs	r6, #250	; 0xfa
    2ac0:	00b6      	lsls	r6, r6, #2
    2ac2:	4653      	mov	r3, sl
    2ac4:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    2ac6:	9800      	ldr	r0, [sp, #0]
    2ac8:	9901      	ldr	r1, [sp, #4]
    2aca:	0002      	movs	r2, r0
    2acc:	000b      	movs	r3, r1
    2ace:	4c27      	ldr	r4, [pc, #156]	; (2b6c <i2c_master_init+0x2d4>)
    2ad0:	47a0      	blx	r4
    2ad2:	9000      	str	r0, [sp, #0]
    2ad4:	9101      	str	r1, [sp, #4]
    2ad6:	0030      	movs	r0, r6
    2ad8:	4b20      	ldr	r3, [pc, #128]	; (2b5c <i2c_master_init+0x2c4>)
    2ada:	4798      	blx	r3
    2adc:	2200      	movs	r2, #0
    2ade:	4b2a      	ldr	r3, [pc, #168]	; (2b88 <i2c_master_init+0x2f0>)
    2ae0:	47b8      	blx	r7
    2ae2:	0002      	movs	r2, r0
    2ae4:	000b      	movs	r3, r1
    2ae6:	9800      	ldr	r0, [sp, #0]
    2ae8:	9901      	ldr	r1, [sp, #4]
    2aea:	4c24      	ldr	r4, [pc, #144]	; (2b7c <i2c_master_init+0x2e4>)
    2aec:	47a0      	blx	r4
    2aee:	2200      	movs	r2, #0
    2af0:	4b21      	ldr	r3, [pc, #132]	; (2b78 <i2c_master_init+0x2e0>)
    2af2:	4c20      	ldr	r4, [pc, #128]	; (2b74 <i2c_master_init+0x2dc>)
    2af4:	47a0      	blx	r4
    2af6:	4b22      	ldr	r3, [pc, #136]	; (2b80 <i2c_master_init+0x2e8>)
    2af8:	4798      	blx	r3
    2afa:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    2afc:	d00c      	beq.n	2b18 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    2afe:	0031      	movs	r1, r6
    2b00:	9807      	ldr	r0, [sp, #28]
    2b02:	4b22      	ldr	r3, [pc, #136]	; (2b8c <i2c_master_init+0x2f4>)
    2b04:	4798      	blx	r3
    2b06:	3802      	subs	r0, #2
    2b08:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    2b0a:	002b      	movs	r3, r5
    2b0c:	2dff      	cmp	r5, #255	; 0xff
    2b0e:	d80c      	bhi.n	2b2a <i2c_master_init+0x292>
    2b10:	28ff      	cmp	r0, #255	; 0xff
    2b12:	d9bc      	bls.n	2a8e <i2c_master_init+0x1f6>
    2b14:	2040      	movs	r0, #64	; 0x40
    2b16:	e6e6      	b.n	28e6 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    2b18:	0071      	lsls	r1, r6, #1
    2b1a:	1e48      	subs	r0, r1, #1
    2b1c:	9b07      	ldr	r3, [sp, #28]
    2b1e:	469c      	mov	ip, r3
    2b20:	4460      	add	r0, ip
    2b22:	4b1a      	ldr	r3, [pc, #104]	; (2b8c <i2c_master_init+0x2f4>)
    2b24:	4798      	blx	r3
    2b26:	3801      	subs	r0, #1
    2b28:	e7ef      	b.n	2b0a <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    2b2a:	2040      	movs	r0, #64	; 0x40
    2b2c:	e6db      	b.n	28e6 <i2c_master_init+0x4e>
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	00006fcd 	.word	0x00006fcd
    2b34:	40000400 	.word	0x40000400
    2b38:	000080c5 	.word	0x000080c5
    2b3c:	00008039 	.word	0x00008039
    2b40:	00006e09 	.word	0x00006e09
    2b44:	00000375 	.word	0x00000375
    2b48:	00007009 	.word	0x00007009
    2b4c:	20004dc4 	.word	0x20004dc4
    2b50:	000081ed 	.word	0x000081ed
    2b54:	41002000 	.word	0x41002000
    2b58:	000080e1 	.word	0x000080e1
    2b5c:	0000d63d 	.word	0x0000d63d
    2b60:	0000c9e5 	.word	0x0000c9e5
    2b64:	e826d695 	.word	0xe826d695
    2b68:	3e112e0b 	.word	0x3e112e0b
    2b6c:	0000bb5d 	.word	0x0000bb5d
    2b70:	40240000 	.word	0x40240000
    2b74:	0000cee5 	.word	0x0000cee5
    2b78:	3ff00000 	.word	0x3ff00000
    2b7c:	0000c17d 	.word	0x0000c17d
    2b80:	0000d551 	.word	0x0000d551
    2b84:	00006e55 	.word	0x00006e55
    2b88:	40080000 	.word	0x40080000
    2b8c:	0000a915 	.word	0x0000a915

00002b90 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    2b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b92:	46ce      	mov	lr, r9
    2b94:	4647      	mov	r7, r8
    2b96:	b580      	push	{r7, lr}
    2b98:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2b9a:	6803      	ldr	r3, [r0, #0]
    2b9c:	4699      	mov	r9, r3

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    2b9e:	4e14      	ldr	r6, [pc, #80]	; (2bf0 <i2c_master_reset+0x60>)
    2ba0:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2ba2:	6825      	ldr	r5, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2ba4:	0028      	movs	r0, r5
    2ba6:	4b13      	ldr	r3, [pc, #76]	; (2bf4 <i2c_master_reset+0x64>)
    2ba8:	4698      	mov	r8, r3
    2baa:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2bac:	231f      	movs	r3, #31
    2bae:	4018      	ands	r0, r3
    2bb0:	2701      	movs	r7, #1
    2bb2:	0039      	movs	r1, r7
    2bb4:	4081      	lsls	r1, r0
    2bb6:	3361      	adds	r3, #97	; 0x61
    2bb8:	4a0f      	ldr	r2, [pc, #60]	; (2bf8 <i2c_master_reset+0x68>)
    2bba:	50d1      	str	r1, [r2, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    2bbc:	0020      	movs	r0, r4
    2bbe:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    2bc0:	2383      	movs	r3, #131	; 0x83
    2bc2:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    2bc4:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    2bc6:	682b      	ldr	r3, [r5, #0]
    2bc8:	2202      	movs	r2, #2
    2bca:	4393      	bics	r3, r2
    2bcc:	602b      	str	r3, [r5, #0]
	cpu_irq_enter_critical();
    2bce:	4b0b      	ldr	r3, [pc, #44]	; (2bfc <i2c_master_reset+0x6c>)
    2bd0:	4798      	blx	r3
	i2c_master_disable(module);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    2bd2:	6820      	ldr	r0, [r4, #0]
    2bd4:	47c0      	blx	r8
    2bd6:	4b0a      	ldr	r3, [pc, #40]	; (2c00 <i2c_master_reset+0x70>)
    2bd8:	4798      	blx	r3
	cpu_irq_leave_critical();
    2bda:	4b0a      	ldr	r3, [pc, #40]	; (2c04 <i2c_master_reset+0x74>)
    2bdc:	4798      	blx	r3
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    2bde:	0020      	movs	r0, r4
    2be0:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    2be2:	464b      	mov	r3, r9
    2be4:	601f      	str	r7, [r3, #0]
}
    2be6:	bc0c      	pop	{r2, r3}
    2be8:	4690      	mov	r8, r2
    2bea:	4699      	mov	r9, r3
    2bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2bee:	46c0      	nop			; (mov r8, r8)
    2bf0:	0000288d 	.word	0x0000288d
    2bf4:	00007045 	.word	0x00007045
    2bf8:	e000e100 	.word	0xe000e100
    2bfc:	00006aa9 	.word	0x00006aa9
    2c00:	00008115 	.word	0x00008115
    2c04:	00006ae9 	.word	0x00006ae9

00002c08 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2c08:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    2c0a:	7e1a      	ldrb	r2, [r3, #24]
    2c0c:	0792      	lsls	r2, r2, #30
    2c0e:	d507      	bpl.n	2c20 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2c10:	2202      	movs	r2, #2
    2c12:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    2c14:	8b5b      	ldrh	r3, [r3, #26]
    2c16:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    2c18:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    2c1a:	17db      	asrs	r3, r3, #31
    2c1c:	4018      	ands	r0, r3
}
    2c1e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    2c20:	8b5a      	ldrh	r2, [r3, #26]
    2c22:	0752      	lsls	r2, r2, #29
    2c24:	d506      	bpl.n	2c34 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2c26:	6859      	ldr	r1, [r3, #4]
    2c28:	22c0      	movs	r2, #192	; 0xc0
    2c2a:	0292      	lsls	r2, r2, #10
    2c2c:	430a      	orrs	r2, r1
    2c2e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    2c30:	2018      	movs	r0, #24
    2c32:	e7f4      	b.n	2c1e <_i2c_master_address_response+0x16>
	return STATUS_OK;
    2c34:	2000      	movs	r0, #0
    2c36:	e7f2      	b.n	2c1e <_i2c_master_address_response+0x16>

00002c38 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    2c38:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2c3a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    2c3c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    2c3e:	2401      	movs	r4, #1
    2c40:	2502      	movs	r5, #2
    2c42:	7e11      	ldrb	r1, [r2, #24]
    2c44:	4221      	tst	r1, r4
    2c46:	d10b      	bne.n	2c60 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    2c48:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    2c4a:	4229      	tst	r1, r5
    2c4c:	d106      	bne.n	2c5c <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    2c4e:	3301      	adds	r3, #1
    2c50:	b29b      	uxth	r3, r3
    2c52:	8901      	ldrh	r1, [r0, #8]
    2c54:	4299      	cmp	r1, r3
    2c56:	d8f4      	bhi.n	2c42 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    2c58:	2012      	movs	r0, #18
    2c5a:	e002      	b.n	2c62 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    2c5c:	2000      	movs	r0, #0
    2c5e:	e000      	b.n	2c62 <_i2c_master_wait_for_bus+0x2a>
    2c60:	2000      	movs	r0, #0
}
    2c62:	bd30      	pop	{r4, r5, pc}

00002c64 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    2c64:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2c66:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2c68:	6862      	ldr	r2, [r4, #4]
    2c6a:	2380      	movs	r3, #128	; 0x80
    2c6c:	02db      	lsls	r3, r3, #11
    2c6e:	4313      	orrs	r3, r2
    2c70:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    2c72:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    2c74:	4b02      	ldr	r3, [pc, #8]	; (2c80 <_i2c_master_send_hs_master_code+0x1c>)
    2c76:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    2c78:	2301      	movs	r3, #1
    2c7a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    2c7c:	bd10      	pop	{r4, pc}
    2c7e:	46c0      	nop			; (mov r8, r8)
    2c80:	00002c39 	.word	0x00002c39

00002c84 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2c84:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    2c86:	0080      	lsls	r0, r0, #2
    2c88:	4b16      	ldr	r3, [pc, #88]	; (2ce4 <_tc_interrupt_handler+0x60>)
    2c8a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2c8c:	6823      	ldr	r3, [r4, #0]
    2c8e:	7b9d      	ldrb	r5, [r3, #14]
    2c90:	7e22      	ldrb	r2, [r4, #24]
    2c92:	7e63      	ldrb	r3, [r4, #25]
    2c94:	4013      	ands	r3, r2
    2c96:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2c98:	07eb      	lsls	r3, r5, #31
    2c9a:	d406      	bmi.n	2caa <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2c9c:	07ab      	lsls	r3, r5, #30
    2c9e:	d40b      	bmi.n	2cb8 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2ca0:	06eb      	lsls	r3, r5, #27
    2ca2:	d410      	bmi.n	2cc6 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2ca4:	06ab      	lsls	r3, r5, #26
    2ca6:	d415      	bmi.n	2cd4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    2ca8:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    2caa:	0020      	movs	r0, r4
    2cac:	68a3      	ldr	r3, [r4, #8]
    2cae:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2cb0:	2301      	movs	r3, #1
    2cb2:	6822      	ldr	r2, [r4, #0]
    2cb4:	7393      	strb	r3, [r2, #14]
    2cb6:	e7f1      	b.n	2c9c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    2cb8:	0020      	movs	r0, r4
    2cba:	68e3      	ldr	r3, [r4, #12]
    2cbc:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2cbe:	2302      	movs	r3, #2
    2cc0:	6822      	ldr	r2, [r4, #0]
    2cc2:	7393      	strb	r3, [r2, #14]
    2cc4:	e7ec      	b.n	2ca0 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2cc6:	0020      	movs	r0, r4
    2cc8:	6923      	ldr	r3, [r4, #16]
    2cca:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2ccc:	2310      	movs	r3, #16
    2cce:	6822      	ldr	r2, [r4, #0]
    2cd0:	7393      	strb	r3, [r2, #14]
    2cd2:	e7e7      	b.n	2ca4 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2cd4:	0020      	movs	r0, r4
    2cd6:	6963      	ldr	r3, [r4, #20]
    2cd8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    2cda:	6823      	ldr	r3, [r4, #0]
    2cdc:	2220      	movs	r2, #32
    2cde:	739a      	strb	r2, [r3, #14]
}
    2ce0:	e7e2      	b.n	2ca8 <_tc_interrupt_handler+0x24>
    2ce2:	46c0      	nop			; (mov r8, r8)
    2ce4:	200038f0 	.word	0x200038f0

00002ce8 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2ce8:	b510      	push	{r4, lr}
    2cea:	2000      	movs	r0, #0
    2cec:	4b01      	ldr	r3, [pc, #4]	; (2cf4 <TC3_Handler+0xc>)
    2cee:	4798      	blx	r3
    2cf0:	bd10      	pop	{r4, pc}
    2cf2:	46c0      	nop			; (mov r8, r8)
    2cf4:	00002c85 	.word	0x00002c85

00002cf8 <TC4_Handler>:
    2cf8:	b510      	push	{r4, lr}
    2cfa:	2001      	movs	r0, #1
    2cfc:	4b01      	ldr	r3, [pc, #4]	; (2d04 <TC4_Handler+0xc>)
    2cfe:	4798      	blx	r3
    2d00:	bd10      	pop	{r4, pc}
    2d02:	46c0      	nop			; (mov r8, r8)
    2d04:	00002c85 	.word	0x00002c85

00002d08 <TC5_Handler>:
    2d08:	b510      	push	{r4, lr}
    2d0a:	2002      	movs	r0, #2
    2d0c:	4b01      	ldr	r3, [pc, #4]	; (2d14 <TC5_Handler+0xc>)
    2d0e:	4798      	blx	r3
    2d10:	bd10      	pop	{r4, pc}
    2d12:	46c0      	nop			; (mov r8, r8)
    2d14:	00002c85 	.word	0x00002c85

00002d18 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
    2d18:	b570      	push	{r4, r5, r6, lr}
    2d1a:	000a      	movs	r2, r1
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
    2d1c:	4b09      	ldr	r3, [pc, #36]	; (2d44 <prvHelpCommand+0x2c>)
    2d1e:	681b      	ldr	r3, [r3, #0]
    2d20:	2b00      	cmp	r3, #0
    2d22:	d00a      	beq.n	2d3a <prvHelpCommand+0x22>
		pxCommand = &xRegisteredCommands;
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
    2d24:	4c07      	ldr	r4, [pc, #28]	; (2d44 <prvHelpCommand+0x2c>)
    2d26:	6825      	ldr	r5, [r4, #0]
    2d28:	682b      	ldr	r3, [r5, #0]
    2d2a:	6859      	ldr	r1, [r3, #4]
    2d2c:	4b06      	ldr	r3, [pc, #24]	; (2d48 <prvHelpCommand+0x30>)
    2d2e:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
    2d30:	6868      	ldr	r0, [r5, #4]
    2d32:	6020      	str	r0, [r4, #0]

	if( pxCommand == NULL )
    2d34:	1e43      	subs	r3, r0, #1
    2d36:	4198      	sbcs	r0, r3
	{
		xReturn = pdTRUE;
	}

	return xReturn;
}
    2d38:	bd70      	pop	{r4, r5, r6, pc}
		pxCommand = &xRegisteredCommands;
    2d3a:	4904      	ldr	r1, [pc, #16]	; (2d4c <prvHelpCommand+0x34>)
    2d3c:	4b01      	ldr	r3, [pc, #4]	; (2d44 <prvHelpCommand+0x2c>)
    2d3e:	6019      	str	r1, [r3, #0]
    2d40:	e7f0      	b.n	2d24 <prvHelpCommand+0xc>
    2d42:	46c0      	nop			; (mov r8, r8)
    2d44:	20000324 	.word	0x20000324
    2d48:	000091d9 	.word	0x000091d9
    2d4c:	20000014 	.word	0x20000014

00002d50 <FreeRTOS_CLIRegisterCommand>:
{
    2d50:	b570      	push	{r4, r5, r6, lr}
    2d52:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
    2d54:	d006      	beq.n	2d64 <FreeRTOS_CLIRegisterCommand+0x14>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
    2d56:	2008      	movs	r0, #8
    2d58:	4b0a      	ldr	r3, [pc, #40]	; (2d84 <FreeRTOS_CLIRegisterCommand+0x34>)
    2d5a:	4798      	blx	r3
    2d5c:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
    2d5e:	d103      	bne.n	2d68 <FreeRTOS_CLIRegisterCommand+0x18>
    2d60:	b672      	cpsid	i
    2d62:	e7fe      	b.n	2d62 <FreeRTOS_CLIRegisterCommand+0x12>
	configASSERT( pxCommandToRegister );
    2d64:	b672      	cpsid	i
    2d66:	e7fe      	b.n	2d66 <FreeRTOS_CLIRegisterCommand+0x16>
		taskENTER_CRITICAL();
    2d68:	4b07      	ldr	r3, [pc, #28]	; (2d88 <FreeRTOS_CLIRegisterCommand+0x38>)
    2d6a:	4798      	blx	r3
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
    2d6c:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
    2d6e:	2300      	movs	r3, #0
    2d70:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
    2d72:	4b06      	ldr	r3, [pc, #24]	; (2d8c <FreeRTOS_CLIRegisterCommand+0x3c>)
    2d74:	681a      	ldr	r2, [r3, #0]
    2d76:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
    2d78:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
    2d7a:	4b05      	ldr	r3, [pc, #20]	; (2d90 <FreeRTOS_CLIRegisterCommand+0x40>)
    2d7c:	4798      	blx	r3
}
    2d7e:	2001      	movs	r0, #1
    2d80:	bd70      	pop	{r4, r5, r6, pc}
    2d82:	46c0      	nop			; (mov r8, r8)
    2d84:	000041f5 	.word	0x000041f5
    2d88:	00004131 	.word	0x00004131
    2d8c:	20000010 	.word	0x20000010
    2d90:	00004149 	.word	0x00004149

00002d94 <FreeRTOS_CLIProcessCommand>:
{
    2d94:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d96:	46de      	mov	lr, fp
    2d98:	4657      	mov	r7, sl
    2d9a:	464e      	mov	r6, r9
    2d9c:	4645      	mov	r5, r8
    2d9e:	b5e0      	push	{r5, r6, r7, lr}
    2da0:	b083      	sub	sp, #12
    2da2:	0006      	movs	r6, r0
    2da4:	9100      	str	r1, [sp, #0]
    2da6:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
    2da8:	4b39      	ldr	r3, [pc, #228]	; (2e90 <FreeRTOS_CLIProcessCommand+0xfc>)
    2daa:	681b      	ldr	r3, [r3, #0]
    2dac:	2b00      	cmp	r3, #0
    2dae:	d011      	beq.n	2dd4 <FreeRTOS_CLIProcessCommand+0x40>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
    2db0:	681b      	ldr	r3, [r3, #0]
    2db2:	689b      	ldr	r3, [r3, #8]
    2db4:	0032      	movs	r2, r6
    2db6:	9901      	ldr	r1, [sp, #4]
    2db8:	9800      	ldr	r0, [sp, #0]
    2dba:	4798      	blx	r3
		if( xReturn == pdFALSE )
    2dbc:	2800      	cmp	r0, #0
    2dbe:	d102      	bne.n	2dc6 <FreeRTOS_CLIProcessCommand+0x32>
			pxCommand = NULL;
    2dc0:	2200      	movs	r2, #0
    2dc2:	4b33      	ldr	r3, [pc, #204]	; (2e90 <FreeRTOS_CLIProcessCommand+0xfc>)
    2dc4:	601a      	str	r2, [r3, #0]
}
    2dc6:	b003      	add	sp, #12
    2dc8:	bc3c      	pop	{r2, r3, r4, r5}
    2dca:	4690      	mov	r8, r2
    2dcc:	4699      	mov	r9, r3
    2dce:	46a2      	mov	sl, r4
    2dd0:	46ab      	mov	fp, r5
    2dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    2dd4:	4c2f      	ldr	r4, [pc, #188]	; (2e94 <FreeRTOS_CLIProcessCommand+0x100>)
    2dd6:	4b2e      	ldr	r3, [pc, #184]	; (2e90 <FreeRTOS_CLIProcessCommand+0xfc>)
    2dd8:	601c      	str	r4, [r3, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    2dda:	4b2f      	ldr	r3, [pc, #188]	; (2e98 <FreeRTOS_CLIProcessCommand+0x104>)
    2ddc:	4699      	mov	r9, r3
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    2dde:	2320      	movs	r3, #32
    2de0:	4698      	mov	r8, r3
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    2de2:	4b2e      	ldr	r3, [pc, #184]	; (2e9c <FreeRTOS_CLIProcessCommand+0x108>)
    2de4:	469b      	mov	fp, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    2de6:	4b2a      	ldr	r3, [pc, #168]	; (2e90 <FreeRTOS_CLIProcessCommand+0xfc>)
    2de8:	469a      	mov	sl, r3
    2dea:	e00a      	b.n	2e02 <FreeRTOS_CLIProcessCommand+0x6e>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    2dec:	0002      	movs	r2, r0
    2dee:	0029      	movs	r1, r5
    2df0:	0030      	movs	r0, r6
    2df2:	47d8      	blx	fp
    2df4:	2800      	cmp	r0, #0
    2df6:	d00d      	beq.n	2e14 <FreeRTOS_CLIProcessCommand+0x80>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    2df8:	6864      	ldr	r4, [r4, #4]
    2dfa:	4653      	mov	r3, sl
    2dfc:	601c      	str	r4, [r3, #0]
    2dfe:	2c00      	cmp	r4, #0
    2e00:	d03e      	beq.n	2e80 <FreeRTOS_CLIProcessCommand+0xec>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
    2e02:	6827      	ldr	r7, [r4, #0]
    2e04:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    2e06:	0028      	movs	r0, r5
    2e08:	47c8      	blx	r9
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    2e0a:	5c33      	ldrb	r3, [r6, r0]
    2e0c:	4642      	mov	r2, r8
    2e0e:	4393      	bics	r3, r2
    2e10:	d1f2      	bne.n	2df8 <FreeRTOS_CLIProcessCommand+0x64>
    2e12:	e7eb      	b.n	2dec <FreeRTOS_CLIProcessCommand+0x58>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
    2e14:	7b3f      	ldrb	r7, [r7, #12]
    2e16:	b27f      	sxtb	r7, r7
    2e18:	2f00      	cmp	r7, #0
    2e1a:	db2d      	blt.n	2e78 <FreeRTOS_CLIProcessCommand+0xe4>
{
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
    2e1c:	7833      	ldrb	r3, [r6, #0]
    2e1e:	2b00      	cmp	r3, #0
    2e20:	d028      	beq.n	2e74 <FreeRTOS_CLIProcessCommand+0xe0>
    2e22:	0032      	movs	r2, r6
    2e24:	2500      	movs	r5, #0
    2e26:	2100      	movs	r1, #0
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
    2e28:	2401      	movs	r4, #1
    2e2a:	e008      	b.n	2e3e <FreeRTOS_CLIProcessCommand+0xaa>
    2e2c:	2901      	cmp	r1, #1
    2e2e:	d00a      	beq.n	2e46 <FreeRTOS_CLIProcessCommand+0xb2>
			{
				cParameters++;
    2e30:	3501      	adds	r5, #1
    2e32:	b26d      	sxtb	r5, r5
				xLastCharacterWasSpace = pdTRUE;
    2e34:	0021      	movs	r1, r4
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
    2e36:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
    2e38:	7813      	ldrb	r3, [r2, #0]
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	d005      	beq.n	2e4a <FreeRTOS_CLIProcessCommand+0xb6>
		if( ( *pcCommandString ) == ' ' )
    2e3e:	2b20      	cmp	r3, #32
    2e40:	d0f4      	beq.n	2e2c <FreeRTOS_CLIProcessCommand+0x98>
			xLastCharacterWasSpace = pdFALSE;
    2e42:	0001      	movs	r1, r0
    2e44:	e7f7      	b.n	2e36 <FreeRTOS_CLIProcessCommand+0xa2>
			if( xLastCharacterWasSpace != pdTRUE )
    2e46:	0021      	movs	r1, r4
    2e48:	e7f5      	b.n	2e36 <FreeRTOS_CLIProcessCommand+0xa2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
    2e4a:	2901      	cmp	r1, #1
    2e4c:	d00f      	beq.n	2e6e <FreeRTOS_CLIProcessCommand+0xda>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    2e4e:	4b10      	ldr	r3, [pc, #64]	; (2e90 <FreeRTOS_CLIProcessCommand+0xfc>)
    2e50:	681b      	ldr	r3, [r3, #0]
    2e52:	2b00      	cmp	r3, #0
    2e54:	d014      	beq.n	2e80 <FreeRTOS_CLIProcessCommand+0xec>
    2e56:	42af      	cmp	r7, r5
    2e58:	d0aa      	beq.n	2db0 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    2e5a:	9a01      	ldr	r2, [sp, #4]
    2e5c:	4910      	ldr	r1, [pc, #64]	; (2ea0 <FreeRTOS_CLIProcessCommand+0x10c>)
    2e5e:	9800      	ldr	r0, [sp, #0]
    2e60:	4b10      	ldr	r3, [pc, #64]	; (2ea4 <FreeRTOS_CLIProcessCommand+0x110>)
    2e62:	4798      	blx	r3
		pxCommand = NULL;
    2e64:	2200      	movs	r2, #0
    2e66:	4b0a      	ldr	r3, [pc, #40]	; (2e90 <FreeRTOS_CLIProcessCommand+0xfc>)
    2e68:	601a      	str	r2, [r3, #0]
    2e6a:	2000      	movs	r0, #0
    2e6c:	e7ab      	b.n	2dc6 <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
    2e6e:	3d01      	subs	r5, #1
    2e70:	b26d      	sxtb	r5, r5
    2e72:	e7ec      	b.n	2e4e <FreeRTOS_CLIProcessCommand+0xba>
	while( *pcCommandString != 0x00 )
    2e74:	2500      	movs	r5, #0
    2e76:	e7ea      	b.n	2e4e <FreeRTOS_CLIProcessCommand+0xba>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    2e78:	4b05      	ldr	r3, [pc, #20]	; (2e90 <FreeRTOS_CLIProcessCommand+0xfc>)
    2e7a:	681b      	ldr	r3, [r3, #0]
    2e7c:	2b00      	cmp	r3, #0
    2e7e:	d197      	bne.n	2db0 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    2e80:	9a01      	ldr	r2, [sp, #4]
    2e82:	4909      	ldr	r1, [pc, #36]	; (2ea8 <FreeRTOS_CLIProcessCommand+0x114>)
    2e84:	9800      	ldr	r0, [sp, #0]
    2e86:	4b07      	ldr	r3, [pc, #28]	; (2ea4 <FreeRTOS_CLIProcessCommand+0x110>)
    2e88:	4798      	blx	r3
		xReturn = pdFALSE;
    2e8a:	2000      	movs	r0, #0
	return xReturn;
    2e8c:	e79b      	b.n	2dc6 <FreeRTOS_CLIProcessCommand+0x32>
    2e8e:	46c0      	nop			; (mov r8, r8)
    2e90:	20000320 	.word	0x20000320
    2e94:	20000014 	.word	0x20000014
    2e98:	000091a9 	.word	0x000091a9
    2e9c:	000091b7 	.word	0x000091b7
    2ea0:	0000d9cc 	.word	0x0000d9cc
    2ea4:	000091d9 	.word	0x000091d9
    2ea8:	0000da24 	.word	0x0000da24

00002eac <prvTraceGetQueueType>:
	return (uint32_t)uxQueueGetQueueNumber(handle);
}
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
    2eac:	b510      	push	{r4, lr}
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
    2eae:	4b01      	ldr	r3, [pc, #4]	; (2eb4 <prvTraceGetQueueType+0x8>)
    2eb0:	4798      	blx	r3
}
    2eb2:	bd10      	pop	{r4, pc}
    2eb4:	000053e5 	.word	0x000053e5

00002eb8 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
    2eb8:	b510      	push	{r4, lr}
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
    2eba:	4b02      	ldr	r3, [pc, #8]	; (2ec4 <prvTraceGetTaskNumberLow16+0xc>)
    2ebc:	4798      	blx	r3
    2ebe:	b280      	uxth	r0, r0
}
    2ec0:	bd10      	pop	{r4, pc}
    2ec2:	46c0      	nop			; (mov r8, r8)
    2ec4:	00006035 	.word	0x00006035

00002ec8 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
    2ec8:	b510      	push	{r4, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
    2eca:	4b02      	ldr	r3, [pc, #8]	; (2ed4 <prvTraceGetTaskNumberHigh16+0xc>)
    2ecc:	4798      	blx	r3
    2ece:	0c00      	lsrs	r0, r0, #16
}
    2ed0:	bd10      	pop	{r4, pc}
    2ed2:	46c0      	nop			; (mov r8, r8)
    2ed4:	00006035 	.word	0x00006035

00002ed8 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
    2ed8:	b570      	push	{r4, r5, r6, lr}
    2eda:	0004      	movs	r4, r0
    2edc:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
    2ede:	4b04      	ldr	r3, [pc, #16]	; (2ef0 <prvTraceSetTaskNumberLow16+0x18>)
    2ee0:	4798      	blx	r3
    2ee2:	0c01      	lsrs	r1, r0, #16
    2ee4:	0409      	lsls	r1, r1, #16
    2ee6:	4329      	orrs	r1, r5
    2ee8:	0020      	movs	r0, r4
    2eea:	4b02      	ldr	r3, [pc, #8]	; (2ef4 <prvTraceSetTaskNumberLow16+0x1c>)
    2eec:	4798      	blx	r3
}
    2eee:	bd70      	pop	{r4, r5, r6, pc}
    2ef0:	00006035 	.word	0x00006035
    2ef4:	00006041 	.word	0x00006041

00002ef8 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
    2ef8:	b570      	push	{r4, r5, r6, lr}
    2efa:	0004      	movs	r4, r0
    2efc:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
    2efe:	4b05      	ldr	r3, [pc, #20]	; (2f14 <prvTraceSetTaskNumberHigh16+0x1c>)
    2f00:	4798      	blx	r3
    2f02:	0401      	lsls	r1, r0, #16
    2f04:	0c09      	lsrs	r1, r1, #16
    2f06:	042d      	lsls	r5, r5, #16
    2f08:	4329      	orrs	r1, r5
    2f0a:	0020      	movs	r0, r4
    2f0c:	4b02      	ldr	r3, [pc, #8]	; (2f18 <prvTraceSetTaskNumberHigh16+0x20>)
    2f0e:	4798      	blx	r3
}
    2f10:	bd70      	pop	{r4, r5, r6, pc}
    2f12:	46c0      	nop			; (mov r8, r8)
    2f14:	00006035 	.word	0x00006035
    2f18:	00006041 	.word	0x00006041

00002f1c <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
    2f1c:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
    2f1e:	4b02      	ldr	r3, [pc, #8]	; (2f28 <prvTraceGetQueueNumberLow16+0xc>)
    2f20:	4798      	blx	r3
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
    2f22:	b280      	uxth	r0, r0
}
    2f24:	bd10      	pop	{r4, pc}
    2f26:	46c0      	nop			; (mov r8, r8)
    2f28:	000053dd 	.word	0x000053dd

00002f2c <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
    2f2c:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
    2f2e:	4b02      	ldr	r3, [pc, #8]	; (2f38 <prvTraceGetQueueNumberHigh16+0xc>)
    2f30:	4798      	blx	r3
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
    2f32:	0c00      	lsrs	r0, r0, #16
}
    2f34:	bd10      	pop	{r4, pc}
    2f36:	46c0      	nop			; (mov r8, r8)
    2f38:	000053dd 	.word	0x000053dd

00002f3c <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
    2f3c:	b570      	push	{r4, r5, r6, lr}
    2f3e:	0004      	movs	r4, r0
    2f40:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
    2f42:	4b04      	ldr	r3, [pc, #16]	; (2f54 <prvTraceSetQueueNumberLow16+0x18>)
    2f44:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
    2f46:	0c01      	lsrs	r1, r0, #16
    2f48:	0409      	lsls	r1, r1, #16
    2f4a:	4329      	orrs	r1, r5
    2f4c:	0020      	movs	r0, r4
    2f4e:	4b02      	ldr	r3, [pc, #8]	; (2f58 <prvTraceSetQueueNumberLow16+0x1c>)
    2f50:	4798      	blx	r3
}
    2f52:	bd70      	pop	{r4, r5, r6, pc}
    2f54:	000053dd 	.word	0x000053dd
    2f58:	000053e1 	.word	0x000053e1

00002f5c <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
    2f5c:	b570      	push	{r4, r5, r6, lr}
    2f5e:	0004      	movs	r4, r0
    2f60:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
    2f62:	4b05      	ldr	r3, [pc, #20]	; (2f78 <prvTraceSetQueueNumberHigh16+0x1c>)
    2f64:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
    2f66:	0401      	lsls	r1, r0, #16
    2f68:	0c09      	lsrs	r1, r1, #16
    2f6a:	042d      	lsls	r5, r5, #16
    2f6c:	4329      	orrs	r1, r5
    2f6e:	0020      	movs	r0, r4
    2f70:	4b02      	ldr	r3, [pc, #8]	; (2f7c <prvTraceSetQueueNumberHigh16+0x20>)
    2f72:	4798      	blx	r3
}
    2f74:	bd70      	pop	{r4, r5, r6, pc}
    2f76:	46c0      	nop			; (mov r8, r8)
    2f78:	000053dd 	.word	0x000053dd
    2f7c:	000053e1 	.word	0x000053e1

00002f80 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
    2f80:	b510      	push	{r4, lr}
	return xTaskGetCurrentTaskHandle();
    2f82:	4b01      	ldr	r3, [pc, #4]	; (2f88 <prvTraceGetCurrentTaskHandle+0x8>)
    2f84:	4798      	blx	r3
}
    2f86:	bd10      	pop	{r4, pc}
    2f88:	00006049 	.word	0x00006049

00002f8c <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
    2f8c:	b510      	push	{r4, lr}
    2f8e:	0004      	movs	r4, r0
	prvTraceInitTraceData();
    2f90:	4b09      	ldr	r3, [pc, #36]	; (2fb8 <vTraceEnable+0x2c>)
    2f92:	4798      	blx	r3

	if (startOption == TRC_START)
    2f94:	2c01      	cmp	r4, #1
    2f96:	d004      	beq.n	2fa2 <vTraceEnable+0x16>
	{
		vTraceStart();
	}
	else if (startOption == TRC_START_AWAIT_HOST)
    2f98:	2c02      	cmp	r4, #2
    2f9a:	d005      	beq.n	2fa8 <vTraceEnable+0x1c>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
	}
	else if (startOption != TRC_INIT)
    2f9c:	2c00      	cmp	r4, #0
    2f9e:	d107      	bne.n	2fb0 <vTraceEnable+0x24>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
    2fa0:	bd10      	pop	{r4, pc}
		vTraceStart();
    2fa2:	4b06      	ldr	r3, [pc, #24]	; (2fbc <vTraceEnable+0x30>)
    2fa4:	4798      	blx	r3
    2fa6:	e7fb      	b.n	2fa0 <vTraceEnable+0x14>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
    2fa8:	4805      	ldr	r0, [pc, #20]	; (2fc0 <vTraceEnable+0x34>)
    2faa:	4b06      	ldr	r3, [pc, #24]	; (2fc4 <vTraceEnable+0x38>)
    2fac:	4798      	blx	r3
    2fae:	e7f7      	b.n	2fa0 <vTraceEnable+0x14>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
    2fb0:	4805      	ldr	r0, [pc, #20]	; (2fc8 <vTraceEnable+0x3c>)
    2fb2:	4b04      	ldr	r3, [pc, #16]	; (2fc4 <vTraceEnable+0x38>)
    2fb4:	4798      	blx	r3
}
    2fb6:	e7f3      	b.n	2fa0 <vTraceEnable+0x14>
    2fb8:	000031b1 	.word	0x000031b1
    2fbc:	00003f91 	.word	0x00003f91
    2fc0:	0000dde0 	.word	0x0000dde0
    2fc4:	00003389 	.word	0x00003389
    2fc8:	0000de20 	.word	0x0000de20

00002fcc <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
    2fcc:	b510      	push	{r4, lr}
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
    2fce:	4b2f      	ldr	r3, [pc, #188]	; (308c <vTraceInitObjectPropertyTable+0xc0>)
    2fd0:	681b      	ldr	r3, [r3, #0]
    2fd2:	2209      	movs	r2, #9
    2fd4:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
    2fd6:	3201      	adds	r2, #1
    2fd8:	2164      	movs	r1, #100	; 0x64
    2fda:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
    2fdc:	3101      	adds	r1, #1
    2fde:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
    2fe0:	3101      	adds	r1, #1
    2fe2:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
    2fe4:	3205      	adds	r2, #5
    2fe6:	3101      	adds	r1, #1
    2fe8:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
    2fea:	3962      	subs	r1, #98	; 0x62
    2fec:	2068      	movs	r0, #104	; 0x68
    2fee:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
    2ff0:	3001      	adds	r0, #1
    2ff2:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
    2ff4:	3001      	adds	r0, #1
    2ff6:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
    2ff8:	3001      	adds	r0, #1
    2ffa:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
    2ffc:	3001      	adds	r0, #1
    2ffe:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
    3000:	316b      	adds	r1, #107	; 0x6b
    3002:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
    3004:	3101      	adds	r1, #1
    3006:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
    3008:	3101      	adds	r1, #1
    300a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
    300c:	3101      	adds	r1, #1
    300e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
    3010:	3101      	adds	r1, #1
    3012:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
    3014:	3101      	adds	r1, #1
    3016:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
    3018:	3101      	adds	r1, #1
    301a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
    301c:	3101      	adds	r1, #1
    301e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
    3020:	3101      	adds	r1, #1
    3022:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
    3024:	3968      	subs	r1, #104	; 0x68
    3026:	326d      	adds	r2, #109	; 0x6d
    3028:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
    302a:	3201      	adds	r2, #1
    302c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
    302e:	3201      	adds	r2, #1
    3030:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
    3032:	3a6b      	subs	r2, #107	; 0x6b
    3034:	3013      	adds	r0, #19
    3036:	541a      	strb	r2, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
    3038:	2411      	movs	r4, #17
    303a:	3001      	adds	r0, #1
    303c:	541c      	strb	r4, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
    303e:	3001      	adds	r0, #1
    3040:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
    3042:	3172      	adds	r1, #114	; 0x72
    3044:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
    3046:	3101      	adds	r1, #1
    3048:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
    304a:	3101      	adds	r1, #1
    304c:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
    304e:	2100      	movs	r1, #0
    3050:	3275      	adds	r2, #117	; 0x75
    3052:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
    3054:	31a0      	adds	r1, #160	; 0xa0
    3056:	3202      	adds	r2, #2
    3058:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
    305a:	31a0      	adds	r1, #160	; 0xa0
    305c:	3202      	adds	r2, #2
    305e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
    3060:	31a0      	adds	r1, #160	; 0xa0
    3062:	3202      	adds	r2, #2
    3064:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
    3066:	490a      	ldr	r1, [pc, #40]	; (3090 <vTraceInitObjectPropertyTable+0xc4>)
    3068:	3202      	adds	r2, #2
    306a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
    306c:	4909      	ldr	r1, [pc, #36]	; (3094 <vTraceInitObjectPropertyTable+0xc8>)
    306e:	3202      	adds	r2, #2
    3070:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
    3072:	4909      	ldr	r1, [pc, #36]	; (3098 <vTraceInitObjectPropertyTable+0xcc>)
    3074:	3202      	adds	r2, #2
    3076:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
    3078:	4908      	ldr	r1, [pc, #32]	; (309c <vTraceInitObjectPropertyTable+0xd0>)
    307a:	3202      	adds	r2, #2
    307c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
    307e:	315f      	adds	r1, #95	; 0x5f
    3080:	3202      	adds	r2, #2
    3082:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
    3084:	4a06      	ldr	r2, [pc, #24]	; (30a0 <vTraceInitObjectPropertyTable+0xd4>)
    3086:	661a      	str	r2, [r3, #96]	; 0x60
}
    3088:	bd10      	pop	{r4, pc}
    308a:	46c0      	nop			; (mov r8, r8)
    308c:	20000328 	.word	0x20000328
    3090:	000002fd 	.word	0x000002fd
    3094:	00000352 	.word	0x00000352
    3098:	000003a2 	.word	0x000003a2
    309c:	00000401 	.word	0x00000401
    30a0:	000004bf 	.word	0x000004bf

000030a4 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
    30a4:	4b17      	ldr	r3, [pc, #92]	; (3104 <vTraceInitObjectHandleStack+0x60>)
    30a6:	2200      	movs	r2, #0
    30a8:	825a      	strh	r2, [r3, #18]
    30aa:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
    30ac:	320a      	adds	r2, #10
    30ae:	829a      	strh	r2, [r3, #20]
    30b0:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
    30b2:	320a      	adds	r2, #10
    30b4:	82da      	strh	r2, [r3, #22]
    30b6:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
    30b8:	320a      	adds	r2, #10
    30ba:	831a      	strh	r2, [r3, #24]
    30bc:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
    30be:	320f      	adds	r2, #15
    30c0:	835a      	strh	r2, [r3, #26]
    30c2:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
    30c4:	3205      	adds	r2, #5
    30c6:	839a      	strh	r2, [r3, #28]
    30c8:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
    30ca:	3205      	adds	r2, #5
    30cc:	83da      	strh	r2, [r3, #30]
    30ce:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
    30d0:	3205      	adds	r2, #5
    30d2:	841a      	strh	r2, [r3, #32]
    30d4:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
    30d6:	3205      	adds	r2, #5
    30d8:	845a      	strh	r2, [r3, #34]	; 0x22
    30da:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
    30dc:	3a38      	subs	r2, #56	; 0x38
    30de:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
    30e0:	320a      	adds	r2, #10
    30e2:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
    30e4:	320a      	adds	r2, #10
    30e6:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
    30e8:	320f      	adds	r2, #15
    30ea:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
    30ec:	3205      	adds	r2, #5
    30ee:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
    30f0:	3205      	adds	r2, #5
    30f2:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
    30f4:	3205      	adds	r2, #5
    30f6:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
    30f8:	3205      	adds	r2, #5
    30fa:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
    30fc:	3205      	adds	r2, #5
    30fe:	869a      	strh	r2, [r3, #52]	; 0x34
}
    3100:	4770      	bx	lr
    3102:	46c0      	nop			; (mov r8, r8)
    3104:	20000344 	.word	0x20000344

00003108 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
	switch(objectclass)
    3108:	2808      	cmp	r0, #8
    310a:	d813      	bhi.n	3134 <pszTraceGetErrorNotEnoughHandles+0x2c>
    310c:	0080      	lsls	r0, r0, #2
    310e:	4b0b      	ldr	r3, [pc, #44]	; (313c <pszTraceGetErrorNotEnoughHandles+0x34>)
    3110:	581b      	ldr	r3, [r3, r0]
    3112:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
    3114:	480a      	ldr	r0, [pc, #40]	; (3140 <pszTraceGetErrorNotEnoughHandles+0x38>)
    3116:	e010      	b.n	313a <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
    3118:	480a      	ldr	r0, [pc, #40]	; (3144 <pszTraceGetErrorNotEnoughHandles+0x3c>)
    311a:	e00e      	b.n	313a <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
    311c:	480a      	ldr	r0, [pc, #40]	; (3148 <pszTraceGetErrorNotEnoughHandles+0x40>)
    311e:	e00c      	b.n	313a <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
    3120:	480a      	ldr	r0, [pc, #40]	; (314c <pszTraceGetErrorNotEnoughHandles+0x44>)
    3122:	e00a      	b.n	313a <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
    3124:	480a      	ldr	r0, [pc, #40]	; (3150 <pszTraceGetErrorNotEnoughHandles+0x48>)
    3126:	e008      	b.n	313a <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
    3128:	480a      	ldr	r0, [pc, #40]	; (3154 <pszTraceGetErrorNotEnoughHandles+0x4c>)
    312a:	e006      	b.n	313a <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
    312c:	480a      	ldr	r0, [pc, #40]	; (3158 <pszTraceGetErrorNotEnoughHandles+0x50>)
    312e:	e004      	b.n	313a <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
    3130:	480a      	ldr	r0, [pc, #40]	; (315c <pszTraceGetErrorNotEnoughHandles+0x54>)
    3132:	e002      	b.n	313a <pszTraceGetErrorNotEnoughHandles+0x32>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
    3134:	480a      	ldr	r0, [pc, #40]	; (3160 <pszTraceGetErrorNotEnoughHandles+0x58>)
    3136:	e000      	b.n	313a <pszTraceGetErrorNotEnoughHandles+0x32>
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
    3138:	480a      	ldr	r0, [pc, #40]	; (3164 <pszTraceGetErrorNotEnoughHandles+0x5c>)
	}
}
    313a:	4770      	bx	lr
    313c:	0000dabc 	.word	0x0000dabc
    3140:	0000db28 	.word	0x0000db28
    3144:	0000db70 	.word	0x0000db70
    3148:	0000dbc4 	.word	0x0000dbc4
    314c:	0000dc10 	.word	0x0000dc10
    3150:	0000dc5c 	.word	0x0000dc5c
    3154:	0000dca8 	.word	0x0000dca8
    3158:	0000dcfc 	.word	0x0000dcfc
    315c:	0000dd54 	.word	0x0000dd54
    3160:	0000ddb0 	.word	0x0000ddb0
    3164:	0000dae0 	.word	0x0000dae0

00003168 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
    3168:	b510      	push	{r4, lr}
	uint32_t i;
	for (i = 0; i < maxLength; i++)
    316a:	2a00      	cmp	r2, #0
    316c:	d00d      	beq.n	318a <prvStrncpy+0x22>
	{
		dst[i] = src[i];
    316e:	780b      	ldrb	r3, [r1, #0]
    3170:	7003      	strb	r3, [r0, #0]
		if (src[i] == 0)
    3172:	780b      	ldrb	r3, [r1, #0]
    3174:	2b00      	cmp	r3, #0
    3176:	d008      	beq.n	318a <prvStrncpy+0x22>
    3178:	2300      	movs	r3, #0
	for (i = 0; i < maxLength; i++)
    317a:	3301      	adds	r3, #1
    317c:	429a      	cmp	r2, r3
    317e:	d004      	beq.n	318a <prvStrncpy+0x22>
		dst[i] = src[i];
    3180:	5ccc      	ldrb	r4, [r1, r3]
    3182:	54c4      	strb	r4, [r0, r3]
		if (src[i] == 0)
    3184:	5ccc      	ldrb	r4, [r1, r3]
    3186:	2c00      	cmp	r4, #0
    3188:	d1f7      	bne.n	317a <prvStrncpy+0x12>
			break;
	}
}
    318a:	bd10      	pop	{r4, pc}

0000318c <vTraceStop>:
{
    318c:	b510      	push	{r4, lr}
	if (RecorderDataPtr != NULL)
    318e:	4b06      	ldr	r3, [pc, #24]	; (31a8 <vTraceStop+0x1c>)
    3190:	681b      	ldr	r3, [r3, #0]
    3192:	2b00      	cmp	r3, #0
    3194:	d001      	beq.n	319a <vTraceStop+0xe>
		RecorderDataPtr->recorderActive = 0;
    3196:	2200      	movs	r2, #0
    3198:	631a      	str	r2, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
    319a:	4b04      	ldr	r3, [pc, #16]	; (31ac <vTraceStop+0x20>)
    319c:	681b      	ldr	r3, [r3, #0]
    319e:	2b00      	cmp	r3, #0
    31a0:	d000      	beq.n	31a4 <vTraceStop+0x18>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
    31a2:	4798      	blx	r3
}
    31a4:	bd10      	pop	{r4, pc}
    31a6:	46c0      	nop			; (mov r8, r8)
    31a8:	20000328 	.word	0x20000328
    31ac:	200003f0 	.word	0x200003f0

000031b0 <prvTraceInitTraceData>:
{	
    31b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31b2:	46de      	mov	lr, fp
    31b4:	4657      	mov	r7, sl
    31b6:	464e      	mov	r6, r9
    31b8:	4645      	mov	r5, r8
    31ba:	b5e0      	push	{r5, r6, r7, lr}
	if (RecorderDataPtr == NULL)
    31bc:	4b51      	ldr	r3, [pc, #324]	; (3304 <prvTraceInitTraceData+0x154>)
    31be:	681b      	ldr	r3, [r3, #0]
    31c0:	2b00      	cmp	r3, #0
    31c2:	d100      	bne.n	31c6 <prvTraceInitTraceData+0x16>
    31c4:	e099      	b.n	32fa <prvTraceInitTraceData+0x14a>
		if (RecorderDataPtr->startmarker0 == 1)
    31c6:	781b      	ldrb	r3, [r3, #0]
    31c8:	2b01      	cmp	r3, #1
    31ca:	d100      	bne.n	31ce <prvTraceInitTraceData+0x1e>
    31cc:	e08f      	b.n	32ee <prvTraceInitTraceData+0x13e>
	init_hwtc_count = TRC_HWTC_COUNT;
    31ce:	4b4e      	ldr	r3, [pc, #312]	; (3308 <prvTraceInitTraceData+0x158>)
    31d0:	681a      	ldr	r2, [r3, #0]
    31d2:	4b4e      	ldr	r3, [pc, #312]	; (330c <prvTraceInitTraceData+0x15c>)
    31d4:	601a      	str	r2, [r3, #0]
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
    31d6:	4c4b      	ldr	r4, [pc, #300]	; (3304 <prvTraceInitTraceData+0x154>)
    31d8:	4d4d      	ldr	r5, [pc, #308]	; (3310 <prvTraceInitTraceData+0x160>)
    31da:	002a      	movs	r2, r5
    31dc:	2100      	movs	r1, #0
    31de:	6820      	ldr	r0, [r4, #0]
    31e0:	4b4c      	ldr	r3, [pc, #304]	; (3314 <prvTraceInitTraceData+0x164>)
    31e2:	4798      	blx	r3
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
    31e4:	6823      	ldr	r3, [r4, #0]
    31e6:	4a4c      	ldr	r2, [pc, #304]	; (3318 <prvTraceInitTraceData+0x168>)
    31e8:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
    31ea:	2205      	movs	r2, #5
    31ec:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
    31ee:	2200      	movs	r2, #0
    31f0:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
    31f2:	611d      	str	r5, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
    31f4:	21c8      	movs	r1, #200	; 0xc8
    31f6:	0049      	lsls	r1, r1, #1
    31f8:	6199      	str	r1, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
    31fa:	4948      	ldr	r1, [pc, #288]	; (331c <prvTraceInitTraceData+0x16c>)
    31fc:	6559      	str	r1, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
    31fe:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
    3200:	635a      	str	r2, [r3, #52]	; 0x34
	vTraceInitObjectPropertyTable();
    3202:	4b47      	ldr	r3, [pc, #284]	; (3320 <prvTraceInitTraceData+0x170>)
    3204:	4798      	blx	r3
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
    3206:	6820      	ldr	r0, [r4, #0]
    3208:	4a46      	ldr	r2, [pc, #280]	; (3324 <prvTraceInitTraceData+0x174>)
    320a:	4b47      	ldr	r3, [pc, #284]	; (3328 <prvTraceInitTraceData+0x178>)
    320c:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
    320e:	22c8      	movs	r2, #200	; 0xc8
    3210:	0092      	lsls	r2, r2, #2
    3212:	3304      	adds	r3, #4
    3214:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
    3216:	4b45      	ldr	r3, [pc, #276]	; (332c <prvTraceInitTraceData+0x17c>)
    3218:	2201      	movs	r2, #1
    321a:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
    321c:	4a44      	ldr	r2, [pc, #272]	; (3330 <prvTraceInitTraceData+0x180>)
    321e:	2391      	movs	r3, #145	; 0x91
    3220:	011b      	lsls	r3, r3, #4
    3222:	50c2      	str	r2, [r0, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
    3224:	4b43      	ldr	r3, [pc, #268]	; (3334 <prvTraceInitTraceData+0x184>)
    3226:	469c      	mov	ip, r3
    3228:	4460      	add	r0, ip
    322a:	2250      	movs	r2, #80	; 0x50
    322c:	4942      	ldr	r1, [pc, #264]	; (3338 <prvTraceInitTraceData+0x188>)
    322e:	4b43      	ldr	r3, [pc, #268]	; (333c <prvTraceInitTraceData+0x18c>)
    3230:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
    3232:	6823      	ldr	r3, [r4, #0]
    3234:	4942      	ldr	r1, [pc, #264]	; (3340 <prvTraceInitTraceData+0x190>)
    3236:	4a43      	ldr	r2, [pc, #268]	; (3344 <prvTraceInitTraceData+0x194>)
    3238:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
    323a:	210a      	movs	r1, #10
    323c:	4a42      	ldr	r2, [pc, #264]	; (3348 <prvTraceInitTraceData+0x198>)
    323e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
    3240:	3101      	adds	r1, #1
    3242:	4a42      	ldr	r2, [pc, #264]	; (334c <prvTraceInitTraceData+0x19c>)
    3244:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
    3246:	3101      	adds	r1, #1
    3248:	4a41      	ldr	r2, [pc, #260]	; (3350 <prvTraceInitTraceData+0x1a0>)
    324a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
    324c:	3101      	adds	r1, #1
    324e:	4a41      	ldr	r2, [pc, #260]	; (3354 <prvTraceInitTraceData+0x1a4>)
    3250:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
    3252:	3201      	adds	r2, #1
    3254:	3164      	adds	r1, #100	; 0x64
    3256:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
    3258:	2572      	movs	r5, #114	; 0x72
    325a:	4a3f      	ldr	r2, [pc, #252]	; (3358 <prvTraceInitTraceData+0x1a8>)
    325c:	549d      	strb	r5, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
    325e:	2673      	movs	r6, #115	; 0x73
    3260:	4a3e      	ldr	r2, [pc, #248]	; (335c <prvTraceInitTraceData+0x1ac>)
    3262:	549e      	strb	r6, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
    3264:	2774      	movs	r7, #116	; 0x74
    3266:	4a3e      	ldr	r2, [pc, #248]	; (3360 <prvTraceInitTraceData+0x1b0>)
    3268:	549f      	strb	r7, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
    326a:	22f1      	movs	r2, #241	; 0xf1
    326c:	4690      	mov	r8, r2
    326e:	4a3d      	ldr	r2, [pc, #244]	; (3364 <prvTraceInitTraceData+0x1b4>)
    3270:	4641      	mov	r1, r8
    3272:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
    3274:	22f2      	movs	r2, #242	; 0xf2
    3276:	4691      	mov	r9, r2
    3278:	4a3b      	ldr	r2, [pc, #236]	; (3368 <prvTraceInitTraceData+0x1b8>)
    327a:	4649      	mov	r1, r9
    327c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
    327e:	22f3      	movs	r2, #243	; 0xf3
    3280:	4692      	mov	sl, r2
    3282:	4a3a      	ldr	r2, [pc, #232]	; (336c <prvTraceInitTraceData+0x1bc>)
    3284:	4651      	mov	r1, sl
    3286:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
    3288:	22f4      	movs	r2, #244	; 0xf4
    328a:	4693      	mov	fp, r2
    328c:	4a38      	ldr	r2, [pc, #224]	; (3370 <prvTraceInitTraceData+0x1c0>)
    328e:	4659      	mov	r1, fp
    3290:	5499      	strb	r1, [r3, r2]
	vTraceInitObjectHandleStack();
    3292:	4b38      	ldr	r3, [pc, #224]	; (3374 <prvTraceInitTraceData+0x1c4>)
    3294:	4798      	blx	r3
	RecorderDataPtr->startmarker11 = 0xF4;
    3296:	6823      	ldr	r3, [r4, #0]
    3298:	465a      	mov	r2, fp
    329a:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
    329c:	4652      	mov	r2, sl
    329e:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
    32a0:	464a      	mov	r2, r9
    32a2:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
    32a4:	4642      	mov	r2, r8
    32a6:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
    32a8:	71df      	strb	r7, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
    32aa:	719e      	strb	r6, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
    32ac:	715d      	strb	r5, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
    32ae:	2271      	movs	r2, #113	; 0x71
    32b0:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
    32b2:	2204      	movs	r2, #4
    32b4:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
    32b6:	2303      	movs	r3, #3
    32b8:	6822      	ldr	r2, [r4, #0]
    32ba:	7093      	strb	r3, [r2, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
    32bc:	3b01      	subs	r3, #1
    32be:	6822      	ldr	r2, [r4, #0]
    32c0:	7053      	strb	r3, [r2, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
    32c2:	6823      	ldr	r3, [r4, #0]
    32c4:	2201      	movs	r2, #1
    32c6:	701a      	strb	r2, [r3, #0]
	if (traceErrorMessage != NULL)
    32c8:	4b2b      	ldr	r3, [pc, #172]	; (3378 <prvTraceInitTraceData+0x1c8>)
    32ca:	6819      	ldr	r1, [r3, #0]
    32cc:	2900      	cmp	r1, #0
    32ce:	d00e      	beq.n	32ee <prvTraceInitTraceData+0x13e>
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    32d0:	4c0c      	ldr	r4, [pc, #48]	; (3304 <prvTraceInitTraceData+0x154>)
    32d2:	6823      	ldr	r3, [r4, #0]
    32d4:	4a17      	ldr	r2, [pc, #92]	; (3334 <prvTraceInitTraceData+0x184>)
    32d6:	4694      	mov	ip, r2
    32d8:	4463      	add	r3, ip
    32da:	0018      	movs	r0, r3
    32dc:	2250      	movs	r2, #80	; 0x50
    32de:	4b17      	ldr	r3, [pc, #92]	; (333c <prvTraceInitTraceData+0x18c>)
    32e0:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
    32e2:	6822      	ldr	r2, [r4, #0]
    32e4:	2101      	movs	r1, #1
    32e6:	4b25      	ldr	r3, [pc, #148]	; (337c <prvTraceInitTraceData+0x1cc>)
    32e8:	50d1      	str	r1, [r2, r3]
		vTraceStop();
    32ea:	4b25      	ldr	r3, [pc, #148]	; (3380 <prvTraceInitTraceData+0x1d0>)
    32ec:	4798      	blx	r3
}
    32ee:	bc3c      	pop	{r2, r3, r4, r5}
    32f0:	4690      	mov	r8, r2
    32f2:	4699      	mov	r9, r3
    32f4:	46a2      	mov	sl, r4
    32f6:	46ab      	mov	fp, r5
    32f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	RecorderDataPtr = &RecorderData;
    32fa:	4a22      	ldr	r2, [pc, #136]	; (3384 <prvTraceInitTraceData+0x1d4>)
    32fc:	4b01      	ldr	r3, [pc, #4]	; (3304 <prvTraceInitTraceData+0x154>)
    32fe:	601a      	str	r2, [r3, #0]
    3300:	e765      	b.n	31ce <prvTraceInitTraceData+0x1e>
    3302:	46c0      	nop			; (mov r8, r8)
    3304:	20000328 	.word	0x20000328
    3308:	e000e018 	.word	0xe000e018
    330c:	200048b4 	.word	0x200048b4
    3310:	00000fb8 	.word	0x00000fb8
    3314:	0000865f 	.word	0x0000865f
    3318:	00001aa1 	.word	0x00001aa1
    331c:	f0f0f0f0 	.word	0xf0f0f0f0
    3320:	00002fcd 	.word	0x00002fcd
    3324:	f1f1f1f1 	.word	0xf1f1f1f1
    3328:	0000055c 	.word	0x0000055c
    332c:	00000564 	.word	0x00000564
    3330:	f2f2f2f2 	.word	0xf2f2f2f2
    3334:	00000914 	.word	0x00000914
    3338:	0000e020 	.word	0x0000e020
    333c:	00003169 	.word	0x00003169
    3340:	f3f3f3f3 	.word	0xf3f3f3f3
    3344:	00000964 	.word	0x00000964
    3348:	00000fac 	.word	0x00000fac
    334c:	00000fad 	.word	0x00000fad
    3350:	00000fae 	.word	0x00000fae
    3354:	00000faf 	.word	0x00000faf
    3358:	00000fb1 	.word	0x00000fb1
    335c:	00000fb2 	.word	0x00000fb2
    3360:	00000fb3 	.word	0x00000fb3
    3364:	00000fb4 	.word	0x00000fb4
    3368:	00000fb5 	.word	0x00000fb5
    336c:	00000fb6 	.word	0x00000fb6
    3370:	00000fb7 	.word	0x00000fb7
    3374:	000030a5 	.word	0x000030a5
    3378:	200003e0 	.word	0x200003e0
    337c:	0000090c 	.word	0x0000090c
    3380:	0000318d 	.word	0x0000318d
    3384:	200038fc 	.word	0x200038fc

00003388 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
    3388:	b510      	push	{r4, lr}
    338a:	0004      	movs	r4, r0
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
    338c:	4b0e      	ldr	r3, [pc, #56]	; (33c8 <prvTraceError+0x40>)
    338e:	681b      	ldr	r3, [r3, #0]
    3390:	2b00      	cmp	r3, #0
    3392:	d001      	beq.n	3398 <prvTraceError+0x10>
	{
		vTraceStop();
    3394:	4b0d      	ldr	r3, [pc, #52]	; (33cc <prvTraceError+0x44>)
    3396:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
    3398:	4b0d      	ldr	r3, [pc, #52]	; (33d0 <prvTraceError+0x48>)
    339a:	681b      	ldr	r3, [r3, #0]
    339c:	2b00      	cmp	r3, #0
    339e:	d000      	beq.n	33a2 <prvTraceError+0x1a>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
			RecorderDataPtr->internalErrorOccured = 1;
		}
	}
}
    33a0:	bd10      	pop	{r4, pc}
		traceErrorMessage = (char*)(intptr_t) msg;
    33a2:	4b0b      	ldr	r3, [pc, #44]	; (33d0 <prvTraceError+0x48>)
    33a4:	601c      	str	r4, [r3, #0]
		if (RecorderDataPtr != NULL)
    33a6:	4b08      	ldr	r3, [pc, #32]	; (33c8 <prvTraceError+0x40>)
    33a8:	6818      	ldr	r0, [r3, #0]
    33aa:	2800      	cmp	r0, #0
    33ac:	d0f8      	beq.n	33a0 <prvTraceError+0x18>
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    33ae:	4b09      	ldr	r3, [pc, #36]	; (33d4 <prvTraceError+0x4c>)
    33b0:	469c      	mov	ip, r3
    33b2:	4460      	add	r0, ip
    33b4:	2250      	movs	r2, #80	; 0x50
    33b6:	0021      	movs	r1, r4
    33b8:	4b07      	ldr	r3, [pc, #28]	; (33d8 <prvTraceError+0x50>)
    33ba:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
    33bc:	4b02      	ldr	r3, [pc, #8]	; (33c8 <prvTraceError+0x40>)
    33be:	681a      	ldr	r2, [r3, #0]
    33c0:	2101      	movs	r1, #1
    33c2:	4b06      	ldr	r3, [pc, #24]	; (33dc <prvTraceError+0x54>)
    33c4:	50d1      	str	r1, [r2, r3]
}
    33c6:	e7eb      	b.n	33a0 <prvTraceError+0x18>
    33c8:	20000328 	.word	0x20000328
    33cc:	0000318d 	.word	0x0000318d
    33d0:	200003e0 	.word	0x200003e0
    33d4:	00000914 	.word	0x00000914
    33d8:	00003169 	.word	0x00003169
    33dc:	0000090c 	.word	0x0000090c

000033e0 <prvTraceNextFreeEventBufferSlot>:
{
    33e0:	b510      	push	{r4, lr}
	if (! RecorderDataPtr->recorderActive)
    33e2:	4b0b      	ldr	r3, [pc, #44]	; (3410 <prvTraceNextFreeEventBufferSlot+0x30>)
    33e4:	6818      	ldr	r0, [r3, #0]
    33e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    33e8:	2b00      	cmp	r3, #0
    33ea:	d00f      	beq.n	340c <prvTraceNextFreeEventBufferSlot+0x2c>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    33ec:	69c3      	ldr	r3, [r0, #28]
    33ee:	2290      	movs	r2, #144	; 0x90
    33f0:	32ff      	adds	r2, #255	; 0xff
    33f2:	4293      	cmp	r3, r2
    33f4:	d805      	bhi.n	3402 <prvTraceNextFreeEventBufferSlot+0x22>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
    33f6:	009b      	lsls	r3, r3, #2
    33f8:	4a06      	ldr	r2, [pc, #24]	; (3414 <prvTraceNextFreeEventBufferSlot+0x34>)
    33fa:	4694      	mov	ip, r2
    33fc:	4463      	add	r3, ip
    33fe:	18c0      	adds	r0, r0, r3
}
    3400:	bd10      	pop	{r4, pc}
		prvTraceError("Attempt to index outside event buffer!");
    3402:	4805      	ldr	r0, [pc, #20]	; (3418 <prvTraceNextFreeEventBufferSlot+0x38>)
    3404:	4b05      	ldr	r3, [pc, #20]	; (341c <prvTraceNextFreeEventBufferSlot+0x3c>)
    3406:	4798      	blx	r3
		return NULL;
    3408:	2000      	movs	r0, #0
    340a:	e7f9      	b.n	3400 <prvTraceNextFreeEventBufferSlot+0x20>
		return NULL;
    340c:	2000      	movs	r0, #0
    340e:	e7f7      	b.n	3400 <prvTraceNextFreeEventBufferSlot+0x20>
    3410:	20000328 	.word	0x20000328
    3414:	00000968 	.word	0x00000968
    3418:	0000e034 	.word	0x0000e034
    341c:	00003389 	.word	0x00003389

00003420 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
    3420:	b5f0      	push	{r4, r5, r6, r7, lr}
    3422:	46c6      	mov	lr, r8
    3424:	b500      	push	{lr}
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    3426:	2800      	cmp	r0, #0
    3428:	d006      	beq.n	3438 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x18>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
    342a:	0007      	movs	r7, r0
    342c:	2500      	movs	r5, #0
    342e:	2800      	cmp	r0, #0
    3430:	d005      	beq.n	343e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
    3432:	4b23      	ldr	r3, [pc, #140]	; (34c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa0>)
    3434:	4698      	mov	r8, r3
    3436:	e00a      	b.n	344e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x2e>
	TRACE_ASSERT(nofEntriesToCheck != 0, 
    3438:	4822      	ldr	r0, [pc, #136]	; (34c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa4>)
    343a:	4b23      	ldr	r3, [pc, #140]	; (34c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa8>)
    343c:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
    343e:	bc04      	pop	{r2}
    3440:	4690      	mov	r8, r2
    3442:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
    3444:	2a01      	cmp	r2, #1
    3446:	d020      	beq.n	348a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x6a>
		i++;
    3448:	3501      	adds	r5, #1
	while (i < nofEntriesToCheck)
    344a:	42bd      	cmp	r5, r7
    344c:	d2f7      	bcs.n	343e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
		e = RecorderDataPtr->nextFreeIndex + i;
    344e:	4643      	mov	r3, r8
    3450:	681c      	ldr	r4, [r3, #0]
    3452:	69e3      	ldr	r3, [r4, #28]
    3454:	18eb      	adds	r3, r5, r3
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    3456:	009e      	lsls	r6, r3, #2
    3458:	19a2      	adds	r2, r4, r6
    345a:	491c      	ldr	r1, [pc, #112]	; (34cc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    345c:	468c      	mov	ip, r1
    345e:	4462      	add	r2, ip
    3460:	7812      	ldrb	r2, [r2, #0]
    3462:	0011      	movs	r1, r2
    3464:	3167      	adds	r1, #103	; 0x67
    3466:	b2c9      	uxtb	r1, r1
    3468:	290e      	cmp	r1, #14
    346a:	d8eb      	bhi.n	3444 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x24>
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
    346c:	3268      	adds	r2, #104	; 0x68
    346e:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
    3470:	18d3      	adds	r3, r2, r3
    3472:	69a1      	ldr	r1, [r4, #24]
    3474:	428b      	cmp	r3, r1
    3476:	d2e7      	bcs.n	3448 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
    3478:	3201      	adds	r2, #1
    347a:	0092      	lsls	r2, r2, #2
    347c:	4663      	mov	r3, ip
    347e:	18f0      	adds	r0, r6, r3
    3480:	1820      	adds	r0, r4, r0
    3482:	2100      	movs	r1, #0
    3484:	4b12      	ldr	r3, [pc, #72]	; (34d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    3486:	4798      	blx	r3
    3488:	e7de      	b.n	3448 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
			if ((e + 1) < RecorderDataPtr->maxEvents)
    348a:	3301      	adds	r3, #1
    348c:	69a2      	ldr	r2, [r4, #24]
    348e:	4293      	cmp	r3, r2
    3490:	d207      	bcs.n	34a2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x82>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
    3492:	4b0e      	ldr	r3, [pc, #56]	; (34cc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    3494:	18f0      	adds	r0, r6, r3
    3496:	1820      	adds	r0, r4, r0
    3498:	2208      	movs	r2, #8
    349a:	2100      	movs	r1, #0
    349c:	4b0c      	ldr	r3, [pc, #48]	; (34d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    349e:	4798      	blx	r3
    34a0:	e7d2      	b.n	3448 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
    34a2:	4b0a      	ldr	r3, [pc, #40]	; (34cc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    34a4:	18e0      	adds	r0, r4, r3
    34a6:	2204      	movs	r2, #4
    34a8:	2100      	movs	r1, #0
    34aa:	4b09      	ldr	r3, [pc, #36]	; (34d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    34ac:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
    34ae:	4b07      	ldr	r3, [pc, #28]	; (34cc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    34b0:	18f0      	adds	r0, r6, r3
    34b2:	1820      	adds	r0, r4, r0
    34b4:	2204      	movs	r2, #4
    34b6:	2100      	movs	r1, #0
    34b8:	4b05      	ldr	r3, [pc, #20]	; (34d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    34ba:	4798      	blx	r3
    34bc:	e7c4      	b.n	3448 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
    34be:	46c0      	nop			; (mov r8, r8)
    34c0:	20000328 	.word	0x20000328
    34c4:	0000de54 	.word	0x0000de54
    34c8:	00003389 	.word	0x00003389
    34cc:	00000968 	.word	0x00000968
    34d0:	0000865f 	.word	0x0000865f

000034d4 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
    34d4:	b510      	push	{r4, lr}
	if (RecorderDataPtr->recorderActive == 0)
    34d6:	4b0b      	ldr	r3, [pc, #44]	; (3504 <prvTraceUpdateCounters+0x30>)
    34d8:	681b      	ldr	r3, [r3, #0]
    34da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    34dc:	2a00      	cmp	r2, #0
    34de:	d010      	beq.n	3502 <prvTraceUpdateCounters+0x2e>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
    34e0:	695a      	ldr	r2, [r3, #20]
    34e2:	3201      	adds	r2, #1
    34e4:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
    34e6:	69da      	ldr	r2, [r3, #28]
    34e8:	3201      	adds	r2, #1
    34ea:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    34ec:	2190      	movs	r1, #144	; 0x90
    34ee:	31ff      	adds	r1, #255	; 0xff
    34f0:	428a      	cmp	r2, r1
    34f2:	d903      	bls.n	34fc <prvTraceUpdateCounters+0x28>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
    34f4:	2201      	movs	r2, #1
    34f6:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
    34f8:	2200      	movs	r2, #0
    34fa:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    34fc:	2001      	movs	r0, #1
    34fe:	4b02      	ldr	r3, [pc, #8]	; (3508 <prvTraceUpdateCounters+0x34>)
    3500:	4798      	blx	r3
#endif
}
    3502:	bd10      	pop	{r4, pc}
    3504:	20000328 	.word	0x20000328
    3508:	00003421 	.word	0x00003421

0000350c <prvTraceGetParam>:
{
    350c:	b570      	push	{r4, r5, r6, lr}
    350e:	0004      	movs	r4, r0
    3510:	000d      	movs	r5, r1
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    3512:	28ff      	cmp	r0, #255	; 0xff
    3514:	d002      	beq.n	351c <prvTraceGetParam+0x10>
    3516:	4b0d      	ldr	r3, [pc, #52]	; (354c <prvTraceGetParam+0x40>)
    3518:	4298      	cmp	r0, r3
    351a:	d103      	bne.n	3524 <prvTraceGetParam+0x18>
	if (param <= param_max)
    351c:	42ac      	cmp	r4, r5
    351e:	d305      	bcc.n	352c <prvTraceGetParam+0x20>
}
    3520:	0028      	movs	r0, r5
    3522:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    3524:	480a      	ldr	r0, [pc, #40]	; (3550 <prvTraceGetParam+0x44>)
    3526:	4b0b      	ldr	r3, [pc, #44]	; (3554 <prvTraceGetParam+0x48>)
    3528:	4798      	blx	r3
    352a:	e7f9      	b.n	3520 <prvTraceGetParam+0x14>
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
    352c:	4b0a      	ldr	r3, [pc, #40]	; (3558 <prvTraceGetParam+0x4c>)
    352e:	4798      	blx	r3
		if (xps != NULL)
    3530:	2800      	cmp	r0, #0
    3532:	d009      	beq.n	3548 <prvTraceGetParam+0x3c>
			xps->type = DIV_XPS;
    3534:	2301      	movs	r3, #1
    3536:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
    3538:	002b      	movs	r3, r5
    353a:	43a3      	bics	r3, r4
    353c:	0a1a      	lsrs	r2, r3, #8
    353e:	7042      	strb	r2, [r0, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
    3540:	0c1b      	lsrs	r3, r3, #16
    3542:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
    3544:	4b05      	ldr	r3, [pc, #20]	; (355c <prvTraceGetParam+0x50>)
    3546:	4798      	blx	r3
		return param & param_max;
    3548:	4025      	ands	r5, r4
    354a:	e7e9      	b.n	3520 <prvTraceGetParam+0x14>
    354c:	0000ffff 	.word	0x0000ffff
    3550:	0000df58 	.word	0x0000df58
    3554:	00003389 	.word	0x00003389
    3558:	000033e1 	.word	0x000033e1
    355c:	000034d5 	.word	0x000034d5

00003560 <uiIndexOfObject>:
{
    3560:	b510      	push	{r4, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    3562:	2908      	cmp	r1, #8
    3564:	d814      	bhi.n	3590 <uiIndexOfObject+0x30>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    3566:	2800      	cmp	r0, #0
    3568:	d017      	beq.n	359a <uiIndexOfObject+0x3a>
    356a:	4b0e      	ldr	r3, [pc, #56]	; (35a4 <uiIndexOfObject+0x44>)
    356c:	681a      	ldr	r2, [r3, #0]
    356e:	1853      	adds	r3, r2, r1
    3570:	3364      	adds	r3, #100	; 0x64
    3572:	781b      	ldrb	r3, [r3, #0]
    3574:	4283      	cmp	r3, r0
    3576:	d310      	bcc.n	359a <uiIndexOfObject+0x3a>
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    3578:	1853      	adds	r3, r2, r1
    357a:	337c      	adds	r3, #124	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    357c:	781b      	ldrb	r3, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    357e:	3801      	subs	r0, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    3580:	4358      	muls	r0, r3
    3582:	3140      	adds	r1, #64	; 0x40
    3584:	0049      	lsls	r1, r1, #1
    3586:	1851      	adds	r1, r2, r1
    3588:	890b      	ldrh	r3, [r1, #8]
    358a:	18c0      	adds	r0, r0, r3
    358c:	b280      	uxth	r0, r0
    358e:	e008      	b.n	35a2 <uiIndexOfObject+0x42>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    3590:	4805      	ldr	r0, [pc, #20]	; (35a8 <uiIndexOfObject+0x48>)
    3592:	4b06      	ldr	r3, [pc, #24]	; (35ac <uiIndexOfObject+0x4c>)
    3594:	4798      	blx	r3
    3596:	2000      	movs	r0, #0
    3598:	e003      	b.n	35a2 <uiIndexOfObject+0x42>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    359a:	4805      	ldr	r0, [pc, #20]	; (35b0 <uiIndexOfObject+0x50>)
    359c:	4b03      	ldr	r3, [pc, #12]	; (35ac <uiIndexOfObject+0x4c>)
    359e:	4798      	blx	r3
    35a0:	2000      	movs	r0, #0
}
    35a2:	bd10      	pop	{r4, pc}
    35a4:	20000328 	.word	0x20000328
    35a8:	0000e5e8 	.word	0x0000e5e8
    35ac:	00003389 	.word	0x00003389
    35b0:	0000e628 	.word	0x0000e628

000035b4 <prvMarkObjectAsUsed>:
{
    35b4:	b510      	push	{r4, lr}
    35b6:	000b      	movs	r3, r1
	uint16_t idx = uiIndexOfObject(handle, objectclass);
    35b8:	0001      	movs	r1, r0
    35ba:	0018      	movs	r0, r3
    35bc:	4b04      	ldr	r3, [pc, #16]	; (35d0 <prvMarkObjectAsUsed+0x1c>)
    35be:	4798      	blx	r3
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
    35c0:	4b04      	ldr	r3, [pc, #16]	; (35d4 <prvMarkObjectAsUsed+0x20>)
    35c2:	681b      	ldr	r3, [r3, #0]
    35c4:	1818      	adds	r0, r3, r0
    35c6:	309c      	adds	r0, #156	; 0x9c
    35c8:	2301      	movs	r3, #1
    35ca:	7003      	strb	r3, [r0, #0]
}
    35cc:	bd10      	pop	{r4, pc}
    35ce:	46c0      	nop			; (mov r8, r8)
    35d0:	00003561 	.word	0x00003561
    35d4:	20000328 	.word	0x20000328

000035d8 <prvTraceSetPriorityProperty>:
{
    35d8:	b570      	push	{r4, r5, r6, lr}
    35da:	0004      	movs	r4, r0
    35dc:	0008      	movs	r0, r1
    35de:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    35e0:	2c08      	cmp	r4, #8
    35e2:	d813      	bhi.n	360c <prvTraceSetPriorityProperty+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    35e4:	4b0d      	ldr	r3, [pc, #52]	; (361c <prvTraceSetPriorityProperty+0x44>)
    35e6:	681b      	ldr	r3, [r3, #0]
    35e8:	191b      	adds	r3, r3, r4
    35ea:	3364      	adds	r3, #100	; 0x64
    35ec:	781b      	ldrb	r3, [r3, #0]
    35ee:	428b      	cmp	r3, r1
    35f0:	d310      	bcc.n	3614 <prvTraceSetPriorityProperty+0x3c>
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
    35f2:	0021      	movs	r1, r4
    35f4:	4b0a      	ldr	r3, [pc, #40]	; (3620 <prvTraceSetPriorityProperty+0x48>)
    35f6:	4798      	blx	r3
    35f8:	4b08      	ldr	r3, [pc, #32]	; (361c <prvTraceSetPriorityProperty+0x44>)
    35fa:	681b      	ldr	r3, [r3, #0]
    35fc:	191c      	adds	r4, r3, r4
    35fe:	3470      	adds	r4, #112	; 0x70
    3600:	7822      	ldrb	r2, [r4, #0]
    3602:	181b      	adds	r3, r3, r0
    3604:	189b      	adds	r3, r3, r2
    3606:	339d      	adds	r3, #157	; 0x9d
    3608:	701d      	strb	r5, [r3, #0]
}
    360a:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    360c:	4805      	ldr	r0, [pc, #20]	; (3624 <prvTraceSetPriorityProperty+0x4c>)
    360e:	4b06      	ldr	r3, [pc, #24]	; (3628 <prvTraceSetPriorityProperty+0x50>)
    3610:	4798      	blx	r3
    3612:	e7fa      	b.n	360a <prvTraceSetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    3614:	4805      	ldr	r0, [pc, #20]	; (362c <prvTraceSetPriorityProperty+0x54>)
    3616:	4b04      	ldr	r3, [pc, #16]	; (3628 <prvTraceSetPriorityProperty+0x50>)
    3618:	4798      	blx	r3
    361a:	e7f6      	b.n	360a <prvTraceSetPriorityProperty+0x32>
    361c:	20000328 	.word	0x20000328
    3620:	00003561 	.word	0x00003561
    3624:	0000e170 	.word	0x0000e170
    3628:	00003389 	.word	0x00003389
    362c:	0000e1bc 	.word	0x0000e1bc

00003630 <prvTraceGetPriorityProperty>:
{
    3630:	b510      	push	{r4, lr}
    3632:	0004      	movs	r4, r0
    3634:	0008      	movs	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    3636:	2c08      	cmp	r4, #8
    3638:	d813      	bhi.n	3662 <prvTraceGetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    363a:	4b0f      	ldr	r3, [pc, #60]	; (3678 <prvTraceGetPriorityProperty+0x48>)
    363c:	681b      	ldr	r3, [r3, #0]
    363e:	191b      	adds	r3, r3, r4
    3640:	3364      	adds	r3, #100	; 0x64
    3642:	781b      	ldrb	r3, [r3, #0]
    3644:	428b      	cmp	r3, r1
    3646:	d311      	bcc.n	366c <prvTraceGetPriorityProperty+0x3c>
	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
    3648:	0021      	movs	r1, r4
    364a:	4b0c      	ldr	r3, [pc, #48]	; (367c <prvTraceGetPriorityProperty+0x4c>)
    364c:	4798      	blx	r3
    364e:	4b0a      	ldr	r3, [pc, #40]	; (3678 <prvTraceGetPriorityProperty+0x48>)
    3650:	681b      	ldr	r3, [r3, #0]
    3652:	191c      	adds	r4, r3, r4
    3654:	3470      	adds	r4, #112	; 0x70
    3656:	7822      	ldrb	r2, [r4, #0]
    3658:	181b      	adds	r3, r3, r0
    365a:	189b      	adds	r3, r3, r2
    365c:	339d      	adds	r3, #157	; 0x9d
    365e:	7818      	ldrb	r0, [r3, #0]
}
    3660:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    3662:	4807      	ldr	r0, [pc, #28]	; (3680 <prvTraceGetPriorityProperty+0x50>)
    3664:	4b07      	ldr	r3, [pc, #28]	; (3684 <prvTraceGetPriorityProperty+0x54>)
    3666:	4798      	blx	r3
    3668:	2000      	movs	r0, #0
    366a:	e7f9      	b.n	3660 <prvTraceGetPriorityProperty+0x30>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    366c:	4806      	ldr	r0, [pc, #24]	; (3688 <prvTraceGetPriorityProperty+0x58>)
    366e:	4b05      	ldr	r3, [pc, #20]	; (3684 <prvTraceGetPriorityProperty+0x54>)
    3670:	4798      	blx	r3
    3672:	2000      	movs	r0, #0
    3674:	e7f4      	b.n	3660 <prvTraceGetPriorityProperty+0x30>
    3676:	46c0      	nop			; (mov r8, r8)
    3678:	20000328 	.word	0x20000328
    367c:	00003561 	.word	0x00003561
    3680:	0000df94 	.word	0x0000df94
    3684:	00003389 	.word	0x00003389
    3688:	0000dfe0 	.word	0x0000dfe0

0000368c <prvTraceSetObjectState>:
{
    368c:	b570      	push	{r4, r5, r6, lr}
    368e:	0004      	movs	r4, r0
    3690:	0008      	movs	r0, r1
    3692:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    3694:	2c08      	cmp	r4, #8
    3696:	d813      	bhi.n	36c0 <prvTraceSetObjectState+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    3698:	4b0d      	ldr	r3, [pc, #52]	; (36d0 <prvTraceSetObjectState+0x44>)
    369a:	681b      	ldr	r3, [r3, #0]
    369c:	191b      	adds	r3, r3, r4
    369e:	3364      	adds	r3, #100	; 0x64
    36a0:	781b      	ldrb	r3, [r3, #0]
    36a2:	428b      	cmp	r3, r1
    36a4:	d310      	bcc.n	36c8 <prvTraceSetObjectState+0x3c>
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
    36a6:	0021      	movs	r1, r4
    36a8:	4b0a      	ldr	r3, [pc, #40]	; (36d4 <prvTraceSetObjectState+0x48>)
    36aa:	4798      	blx	r3
    36ac:	4b08      	ldr	r3, [pc, #32]	; (36d0 <prvTraceSetObjectState+0x44>)
    36ae:	681b      	ldr	r3, [r3, #0]
    36b0:	191c      	adds	r4, r3, r4
    36b2:	3470      	adds	r4, #112	; 0x70
    36b4:	7822      	ldrb	r2, [r4, #0]
    36b6:	181b      	adds	r3, r3, r0
    36b8:	189b      	adds	r3, r3, r2
    36ba:	339c      	adds	r3, #156	; 0x9c
    36bc:	701d      	strb	r5, [r3, #0]
}
    36be:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    36c0:	4805      	ldr	r0, [pc, #20]	; (36d8 <prvTraceSetObjectState+0x4c>)
    36c2:	4b06      	ldr	r3, [pc, #24]	; (36dc <prvTraceSetObjectState+0x50>)
    36c4:	4798      	blx	r3
    36c6:	e7fa      	b.n	36be <prvTraceSetObjectState+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    36c8:	4805      	ldr	r0, [pc, #20]	; (36e0 <prvTraceSetObjectState+0x54>)
    36ca:	4b04      	ldr	r3, [pc, #16]	; (36dc <prvTraceSetObjectState+0x50>)
    36cc:	4798      	blx	r3
    36ce:	e7f6      	b.n	36be <prvTraceSetObjectState+0x32>
    36d0:	20000328 	.word	0x20000328
    36d4:	00003561 	.word	0x00003561
    36d8:	0000e0f0 	.word	0x0000e0f0
    36dc:	00003389 	.word	0x00003389
    36e0:	0000e134 	.word	0x0000e134

000036e4 <prvTraceSetTaskInstanceFinished>:
{
    36e4:	b510      	push	{r4, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    36e6:	4b0b      	ldr	r3, [pc, #44]	; (3714 <prvTraceSetTaskInstanceFinished+0x30>)
    36e8:	681a      	ldr	r2, [r3, #0]
    36ea:	2367      	movs	r3, #103	; 0x67
    36ec:	5cd3      	ldrb	r3, [r2, r3]
    36ee:	4283      	cmp	r3, r0
    36f0:	d30c      	bcc.n	370c <prvTraceSetTaskInstanceFinished+0x28>
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
    36f2:	2103      	movs	r1, #3
    36f4:	4b08      	ldr	r3, [pc, #32]	; (3718 <prvTraceSetTaskInstanceFinished+0x34>)
    36f6:	4798      	blx	r3
    36f8:	4b06      	ldr	r3, [pc, #24]	; (3714 <prvTraceSetTaskInstanceFinished+0x30>)
    36fa:	681b      	ldr	r3, [r3, #0]
    36fc:	2273      	movs	r2, #115	; 0x73
    36fe:	5c9a      	ldrb	r2, [r3, r2]
    3700:	181b      	adds	r3, r3, r0
    3702:	189b      	adds	r3, r3, r2
    3704:	339c      	adds	r3, #156	; 0x9c
    3706:	2200      	movs	r2, #0
    3708:	701a      	strb	r2, [r3, #0]
}
    370a:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    370c:	4803      	ldr	r0, [pc, #12]	; (371c <prvTraceSetTaskInstanceFinished+0x38>)
    370e:	4b04      	ldr	r3, [pc, #16]	; (3720 <prvTraceSetTaskInstanceFinished+0x3c>)
    3710:	4798      	blx	r3
    3712:	e7fa      	b.n	370a <prvTraceSetTaskInstanceFinished+0x26>
    3714:	20000328 	.word	0x20000328
    3718:	00003561 	.word	0x00003561
    371c:	0000e1fc 	.word	0x0000e1fc
    3720:	00003389 	.word	0x00003389

00003724 <prvTraceGetObjectHandle>:
{
    3724:	b570      	push	{r4, r5, r6, lr}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    3726:	4b2d      	ldr	r3, [pc, #180]	; (37dc <prvTraceGetObjectHandle+0xb8>)
    3728:	681b      	ldr	r3, [r3, #0]
    372a:	2b00      	cmp	r3, #0
    372c:	d046      	beq.n	37bc <prvTraceGetObjectHandle+0x98>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    372e:	2808      	cmp	r0, #8
    3730:	d849      	bhi.n	37c6 <prvTraceGetObjectHandle+0xa2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3732:	f3ef 8410 	mrs	r4, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3736:	2301      	movs	r3, #1
    3738:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    373c:	4a28      	ldr	r2, [pc, #160]	; (37e0 <prvTraceGetObjectHandle+0xbc>)
    373e:	6813      	ldr	r3, [r2, #0]
    3740:	3301      	adds	r3, #1
    3742:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
    3744:	4a27      	ldr	r2, [pc, #156]	; (37e4 <prvTraceGetObjectHandle+0xc0>)
    3746:	0043      	lsls	r3, r0, #1
    3748:	5a9b      	ldrh	r3, [r3, r2]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
    374a:	18d2      	adds	r2, r2, r3
    374c:	3248      	adds	r2, #72	; 0x48
    374e:	7812      	ldrb	r2, [r2, #0]
    3750:	2a00      	cmp	r2, #0
    3752:	d10a      	bne.n	376a <prvTraceGetObjectHandle+0x46>
		objectHandleStacks.objectHandles[indexOfHandle] =
    3754:	4923      	ldr	r1, [pc, #140]	; (37e4 <prvTraceGetObjectHandle+0xc0>)
    3756:	18cd      	adds	r5, r1, r3
    3758:	3548      	adds	r5, #72	; 0x48
			(traceHandle)(1 + indexOfHandle -
    375a:	1c5a      	adds	r2, r3, #1
			objectHandleStacks.lowestIndexOfClass[objectclass]);
    375c:	0006      	movs	r6, r0
    375e:	3608      	adds	r6, #8
    3760:	0076      	lsls	r6, r6, #1
    3762:	1989      	adds	r1, r1, r6
			(traceHandle)(1 + indexOfHandle -
    3764:	8849      	ldrh	r1, [r1, #2]
    3766:	1a52      	subs	r2, r2, r1
		objectHandleStacks.objectHandles[indexOfHandle] =
    3768:	702a      	strb	r2, [r5, #0]
		> objectHandleStacks.highestIndexOfClass[objectclass])
    376a:	0001      	movs	r1, r0
    376c:	3110      	adds	r1, #16
    376e:	0049      	lsls	r1, r1, #1
    3770:	4a1c      	ldr	r2, [pc, #112]	; (37e4 <prvTraceGetObjectHandle+0xc0>)
    3772:	1852      	adds	r2, r2, r1
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    3774:	8892      	ldrh	r2, [r2, #4]
    3776:	429a      	cmp	r2, r3
    3778:	d32a      	bcc.n	37d0 <prvTraceGetObjectHandle+0xac>
	handle = objectHandleStacks.objectHandles[indexOfHandle];
    377a:	491a      	ldr	r1, [pc, #104]	; (37e4 <prvTraceGetObjectHandle+0xc0>)
    377c:	18ca      	adds	r2, r1, r3
    377e:	3248      	adds	r2, #72	; 0x48
    3780:	7812      	ldrb	r2, [r2, #0]
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
    3782:	3301      	adds	r3, #1
    3784:	b29b      	uxth	r3, r3
    3786:	0045      	lsls	r5, r0, #1
    3788:	526b      	strh	r3, [r5, r1]
			objectHandleStacks.lowestIndexOfClass[objectclass];
    378a:	0005      	movs	r5, r0
    378c:	3508      	adds	r5, #8
    378e:	006d      	lsls	r5, r5, #1
    3790:	194d      	adds	r5, r1, r5
    3792:	886d      	ldrh	r5, [r5, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    3794:	1b5b      	subs	r3, r3, r5
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
    3796:	0005      	movs	r5, r0
    3798:	3518      	adds	r5, #24
    379a:	006d      	lsls	r5, r5, #1
    379c:	1949      	adds	r1, r1, r5
    379e:	88c9      	ldrh	r1, [r1, #6]
		if (hndCount >
    37a0:	428b      	cmp	r3, r1
    37a2:	dd03      	ble.n	37ac <prvTraceGetObjectHandle+0x88>
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    37a4:	490f      	ldr	r1, [pc, #60]	; (37e4 <prvTraceGetObjectHandle+0xc0>)
    37a6:	1948      	adds	r0, r1, r5
				(traceHandle)hndCount;
    37a8:	b2db      	uxtb	r3, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    37aa:	80c3      	strh	r3, [r0, #6]
	trcCRITICAL_SECTION_END();
    37ac:	490c      	ldr	r1, [pc, #48]	; (37e0 <prvTraceGetObjectHandle+0xbc>)
    37ae:	680b      	ldr	r3, [r1, #0]
    37b0:	3b01      	subs	r3, #1
    37b2:	600b      	str	r3, [r1, #0]
    37b4:	f384 8810 	msr	PRIMASK, r4
}
    37b8:	0010      	movs	r0, r2
    37ba:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    37bc:	480a      	ldr	r0, [pc, #40]	; (37e8 <prvTraceGetObjectHandle+0xc4>)
    37be:	4b0b      	ldr	r3, [pc, #44]	; (37ec <prvTraceGetObjectHandle+0xc8>)
    37c0:	4798      	blx	r3
    37c2:	2200      	movs	r2, #0
    37c4:	e7f8      	b.n	37b8 <prvTraceGetObjectHandle+0x94>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    37c6:	480a      	ldr	r0, [pc, #40]	; (37f0 <prvTraceGetObjectHandle+0xcc>)
    37c8:	4b08      	ldr	r3, [pc, #32]	; (37ec <prvTraceGetObjectHandle+0xc8>)
    37ca:	4798      	blx	r3
    37cc:	2200      	movs	r2, #0
    37ce:	e7f3      	b.n	37b8 <prvTraceGetObjectHandle+0x94>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    37d0:	4b08      	ldr	r3, [pc, #32]	; (37f4 <prvTraceGetObjectHandle+0xd0>)
    37d2:	4798      	blx	r3
    37d4:	4b05      	ldr	r3, [pc, #20]	; (37ec <prvTraceGetObjectHandle+0xc8>)
    37d6:	4798      	blx	r3
		handle = 0;
    37d8:	2200      	movs	r2, #0
    37da:	e7e7      	b.n	37ac <prvTraceGetObjectHandle+0x88>
    37dc:	20000328 	.word	0x20000328
    37e0:	200003d8 	.word	0x200003d8
    37e4:	20000344 	.word	0x20000344
    37e8:	0000e6ec 	.word	0x0000e6ec
    37ec:	00003389 	.word	0x00003389
    37f0:	0000df10 	.word	0x0000df10
    37f4:	00003109 	.word	0x00003109

000037f8 <prvTraceSetObjectName>:
{
    37f8:	b570      	push	{r4, r5, r6, lr}
    37fa:	0004      	movs	r4, r0
    37fc:	0008      	movs	r0, r1
    37fe:	1e15      	subs	r5, r2, #0
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    3800:	d012      	beq.n	3828 <prvTraceSetObjectName+0x30>
	if (objectclass >= TRACE_NCLASSES)
    3802:	2c08      	cmp	r4, #8
    3804:	d814      	bhi.n	3830 <prvTraceSetObjectName+0x38>
	if (handle == 0)
    3806:	2900      	cmp	r1, #0
    3808:	d016      	beq.n	3838 <prvTraceSetObjectName+0x40>
	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
    380a:	4b16      	ldr	r3, [pc, #88]	; (3864 <prvTraceSetObjectName+0x6c>)
    380c:	681b      	ldr	r3, [r3, #0]
    380e:	191b      	adds	r3, r3, r4
    3810:	3364      	adds	r3, #100	; 0x64
    3812:	781b      	ldrb	r3, [r3, #0]
    3814:	428b      	cmp	r3, r1
    3816:	d313      	bcc.n	3840 <prvTraceSetObjectName+0x48>
		idx = uiIndexOfObject(handle, objectclass);
    3818:	0021      	movs	r1, r4
    381a:	4b13      	ldr	r3, [pc, #76]	; (3868 <prvTraceSetObjectName+0x70>)
    381c:	4798      	blx	r3
		if (traceErrorMessage == NULL)
    381e:	4b13      	ldr	r3, [pc, #76]	; (386c <prvTraceSetObjectName+0x74>)
    3820:	681b      	ldr	r3, [r3, #0]
    3822:	2b00      	cmp	r3, #0
    3824:	d012      	beq.n	384c <prvTraceSetObjectName+0x54>
}
    3826:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    3828:	4811      	ldr	r0, [pc, #68]	; (3870 <prvTraceSetObjectName+0x78>)
    382a:	4b12      	ldr	r3, [pc, #72]	; (3874 <prvTraceSetObjectName+0x7c>)
    382c:	4798      	blx	r3
    382e:	e7fa      	b.n	3826 <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal object class in prvTraceSetObjectName");
    3830:	4811      	ldr	r0, [pc, #68]	; (3878 <prvTraceSetObjectName+0x80>)
    3832:	4b10      	ldr	r3, [pc, #64]	; (3874 <prvTraceSetObjectName+0x7c>)
    3834:	4798      	blx	r3
		return;
    3836:	e7f6      	b.n	3826 <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
    3838:	4810      	ldr	r0, [pc, #64]	; (387c <prvTraceSetObjectName+0x84>)
    383a:	4b0e      	ldr	r3, [pc, #56]	; (3874 <prvTraceSetObjectName+0x7c>)
    383c:	4798      	blx	r3
		return;
    383e:	e7f2      	b.n	3826 <prvTraceSetObjectName+0x2e>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    3840:	0020      	movs	r0, r4
    3842:	4b0f      	ldr	r3, [pc, #60]	; (3880 <prvTraceSetObjectName+0x88>)
    3844:	4798      	blx	r3
    3846:	4b0b      	ldr	r3, [pc, #44]	; (3874 <prvTraceSetObjectName+0x7c>)
    3848:	4798      	blx	r3
    384a:	e7ec      	b.n	3826 <prvTraceSetObjectName+0x2e>
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    384c:	4b05      	ldr	r3, [pc, #20]	; (3864 <prvTraceSetObjectName+0x6c>)
    384e:	681b      	ldr	r3, [r3, #0]
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
    3850:	191c      	adds	r4, r3, r4
    3852:	3470      	adds	r4, #112	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    3854:	7822      	ldrb	r2, [r4, #0]
    3856:	309c      	adds	r0, #156	; 0x9c
    3858:	1818      	adds	r0, r3, r0
    385a:	0029      	movs	r1, r5
    385c:	4b09      	ldr	r3, [pc, #36]	; (3884 <prvTraceSetObjectName+0x8c>)
    385e:	4798      	blx	r3
    3860:	e7e1      	b.n	3826 <prvTraceSetObjectName+0x2e>
    3862:	46c0      	nop			; (mov r8, r8)
    3864:	20000328 	.word	0x20000328
    3868:	00003561 	.word	0x00003561
    386c:	200003e0 	.word	0x200003e0
    3870:	0000e05c 	.word	0x0000e05c
    3874:	00003389 	.word	0x00003389
    3878:	0000e090 	.word	0x0000e090
    387c:	0000e0c0 	.word	0x0000e0c0
    3880:	00003109 	.word	0x00003109
    3884:	00003169 	.word	0x00003169

00003888 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
    3888:	b570      	push	{r4, r5, r6, lr}
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
    388a:	4b1e      	ldr	r3, [pc, #120]	; (3904 <prvTracePortGetTimeStamp+0x7c>)
    388c:	681b      	ldr	r3, [r3, #0]
    388e:	2b01      	cmp	r3, #1
    3890:	d02b      	beq.n	38ea <prvTracePortGetTimeStamp+0x62>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
    3892:	4b1d      	ldr	r3, [pc, #116]	; (3908 <prvTracePortGetTimeStamp+0x80>)
    3894:	6819      	ldr	r1, [r3, #0]
    3896:	4b1d      	ldr	r3, [pc, #116]	; (390c <prvTracePortGetTimeStamp+0x84>)
    3898:	681b      	ldr	r3, [r3, #0]
    389a:	3101      	adds	r1, #1
    389c:	1ac9      	subs	r1, r1, r3
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
    389e:	4b1c      	ldr	r3, [pc, #112]	; (3910 <prvTracePortGetTimeStamp+0x88>)
    38a0:	681b      	ldr	r3, [r3, #0]
    38a2:	4a1c      	ldr	r2, [pc, #112]	; (3914 <prvTracePortGetTimeStamp+0x8c>)
    38a4:	6814      	ldr	r4, [r2, #0]
    38a6:	43e2      	mvns	r2, r4
    38a8:	42da      	cmn	r2, r3
    38aa:	d424      	bmi.n	38f6 <prvTracePortGetTimeStamp+0x6e>
		traceTickCount = uiTraceTickCount;
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    38ac:	4a1a      	ldr	r2, [pc, #104]	; (3918 <prvTracePortGetTimeStamp+0x90>)
    38ae:	6814      	ldr	r4, [r2, #0]
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
    38b0:	42a1      	cmp	r1, r4
    38b2:	41a4      	sbcs	r4, r4
    38b4:	4264      	negs	r4, r4
    38b6:	191c      	adds	r4, r3, r4
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
    38b8:	2800      	cmp	r0, #0
    38ba:	d01f      	beq.n	38fc <prvTracePortGetTimeStamp+0x74>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
    38bc:	4d12      	ldr	r5, [pc, #72]	; (3908 <prvTracePortGetTimeStamp+0x80>)
    38be:	682b      	ldr	r3, [r5, #0]
    38c0:	3301      	adds	r3, #1
    38c2:	089b      	lsrs	r3, r3, #2
    38c4:	4363      	muls	r3, r4
    38c6:	001a      	movs	r2, r3
    38c8:	4e14      	ldr	r6, [pc, #80]	; (391c <prvTracePortGetTimeStamp+0x94>)
    38ca:	6033      	str	r3, [r6, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
    38cc:	682d      	ldr	r5, [r5, #0]
    38ce:	3501      	adds	r5, #1
    38d0:	2303      	movs	r3, #3
    38d2:	402b      	ands	r3, r5
    38d4:	4363      	muls	r3, r4
    38d6:	185b      	adds	r3, r3, r1
    38d8:	089b      	lsrs	r3, r3, #2
    38da:	189b      	adds	r3, r3, r2
    38dc:	6033      	str	r3, [r6, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
    38de:	4a0c      	ldr	r2, [pc, #48]	; (3910 <prvTracePortGetTimeStamp+0x88>)
    38e0:	6014      	str	r4, [r2, #0]
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
		*pTimestamp = last_timestamp;
    38e2:	6003      	str	r3, [r0, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
    38e4:	4b0c      	ldr	r3, [pc, #48]	; (3918 <prvTracePortGetTimeStamp+0x90>)
    38e6:	6019      	str	r1, [r3, #0]
}
    38e8:	bd70      	pop	{r4, r5, r6, pc}
		if (pTimestamp)
    38ea:	2800      	cmp	r0, #0
    38ec:	d0fc      	beq.n	38e8 <prvTracePortGetTimeStamp+0x60>
			*pTimestamp = last_timestamp;
    38ee:	4b0b      	ldr	r3, [pc, #44]	; (391c <prvTracePortGetTimeStamp+0x94>)
    38f0:	681b      	ldr	r3, [r3, #0]
    38f2:	6003      	str	r3, [r0, #0]
    38f4:	e7f8      	b.n	38e8 <prvTracePortGetTimeStamp+0x60>
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    38f6:	42a3      	cmp	r3, r4
    38f8:	d1de      	bne.n	38b8 <prvTracePortGetTimeStamp+0x30>
    38fa:	e7d7      	b.n	38ac <prvTracePortGetTimeStamp+0x24>
	last_traceTickCount = traceTickCount;
    38fc:	4b04      	ldr	r3, [pc, #16]	; (3910 <prvTracePortGetTimeStamp+0x88>)
    38fe:	601c      	str	r4, [r3, #0]
    3900:	e7f0      	b.n	38e4 <prvTracePortGetTimeStamp+0x5c>
    3902:	46c0      	nop			; (mov r8, r8)
    3904:	200003e4 	.word	0x200003e4
    3908:	e000e014 	.word	0xe000e014
    390c:	e000e018 	.word	0xe000e018
    3910:	20000340 	.word	0x20000340
    3914:	200003ec 	.word	0x200003ec
    3918:	20000338 	.word	0x20000338
    391c:	2000033c 	.word	0x2000033c

00003920 <prvTraceGetDTS>:
{
    3920:	b5f0      	push	{r4, r5, r6, r7, lr}
    3922:	b083      	sub	sp, #12
    3924:	0005      	movs	r5, r0
	uint32_t timestamp = 0;
    3926:	2300      	movs	r3, #0
    3928:	9301      	str	r3, [sp, #4]
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    392a:	28ff      	cmp	r0, #255	; 0xff
    392c:	d002      	beq.n	3934 <prvTraceGetDTS+0x14>
    392e:	4b39      	ldr	r3, [pc, #228]	; (3a14 <prvTraceGetDTS+0xf4>)
    3930:	4298      	cmp	r0, r3
    3932:	d135      	bne.n	39a0 <prvTraceGetDTS+0x80>
	if (RecorderDataPtr->frequency == 0)
    3934:	4b38      	ldr	r3, [pc, #224]	; (3a18 <prvTraceGetDTS+0xf8>)
    3936:	681c      	ldr	r4, [r3, #0]
    3938:	6a63      	ldr	r3, [r4, #36]	; 0x24
    393a:	2b00      	cmp	r3, #0
    393c:	d105      	bne.n	394a <prvTraceGetDTS+0x2a>
		if (timestampFrequency != 0)
    393e:	4b37      	ldr	r3, [pc, #220]	; (3a1c <prvTraceGetDTS+0xfc>)
    3940:	681b      	ldr	r3, [r3, #0]
    3942:	2b00      	cmp	r3, #0
    3944:	d031      	beq.n	39aa <prvTraceGetDTS+0x8a>
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
    3946:	089b      	lsrs	r3, r3, #2
    3948:	6263      	str	r3, [r4, #36]	; 0x24
	prvTracePortGetTimeStamp(&timestamp);	
    394a:	a801      	add	r0, sp, #4
    394c:	4b34      	ldr	r3, [pc, #208]	; (3a20 <prvTraceGetDTS+0x100>)
    394e:	4798      	blx	r3
	dts = timestamp - old_timestamp;
    3950:	9b01      	ldr	r3, [sp, #4]
    3952:	4a34      	ldr	r2, [pc, #208]	; (3a24 <prvTraceGetDTS+0x104>)
    3954:	6811      	ldr	r1, [r2, #0]
    3956:	1a5c      	subs	r4, r3, r1
	old_timestamp = timestamp;
    3958:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->frequency > 0)
    395a:	4a2f      	ldr	r2, [pc, #188]	; (3a18 <prvTraceGetDTS+0xf8>)
    395c:	6816      	ldr	r6, [r2, #0]
    395e:	6a77      	ldr	r7, [r6, #36]	; 0x24
    3960:	2f00      	cmp	r7, #0
    3962:	d032      	beq.n	39ca <prvTraceGetDTS+0xaa>
		if (dts > RecorderDataPtr->frequency)
    3964:	42bc      	cmp	r4, r7
    3966:	d92c      	bls.n	39c2 <prvTraceGetDTS+0xa2>
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
    3968:	0039      	movs	r1, r7
    396a:	0020      	movs	r0, r4
    396c:	4b2e      	ldr	r3, [pc, #184]	; (3a28 <prvTraceGetDTS+0x108>)
    396e:	4798      	blx	r3
    3970:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3972:	469c      	mov	ip, r3
    3974:	4460      	add	r0, ip
    3976:	62f0      	str	r0, [r6, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
    3978:	0039      	movs	r1, r7
    397a:	0020      	movs	r0, r4
    397c:	4b2b      	ldr	r3, [pc, #172]	; (3a2c <prvTraceGetDTS+0x10c>)
    397e:	4798      	blx	r3
    3980:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3982:	469c      	mov	ip, r3
    3984:	4461      	add	r1, ip
    3986:	62b1      	str	r1, [r6, #40]	; 0x28
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
    3988:	4b23      	ldr	r3, [pc, #140]	; (3a18 <prvTraceGetDTS+0xf8>)
    398a:	681b      	ldr	r3, [r3, #0]
    398c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    398e:	6a59      	ldr	r1, [r3, #36]	; 0x24
    3990:	428a      	cmp	r2, r1
    3992:	d31b      	bcc.n	39cc <prvTraceGetDTS+0xac>
			RecorderDataPtr->absTimeLastEventSecond++;
    3994:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    3996:	3001      	adds	r0, #1
    3998:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
    399a:	1a52      	subs	r2, r2, r1
    399c:	629a      	str	r2, [r3, #40]	; 0x28
    399e:	e015      	b.n	39cc <prvTraceGetDTS+0xac>
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    39a0:	4823      	ldr	r0, [pc, #140]	; (3a30 <prvTraceGetDTS+0x110>)
    39a2:	4b24      	ldr	r3, [pc, #144]	; (3a34 <prvTraceGetDTS+0x114>)
    39a4:	4798      	blx	r3
    39a6:	2000      	movs	r0, #0
    39a8:	e014      	b.n	39d4 <prvTraceGetDTS+0xb4>
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
    39aa:	4b23      	ldr	r3, [pc, #140]	; (3a38 <prvTraceGetDTS+0x118>)
    39ac:	681a      	ldr	r2, [r3, #0]
    39ae:	4b23      	ldr	r3, [pc, #140]	; (3a3c <prvTraceGetDTS+0x11c>)
    39b0:	681b      	ldr	r3, [r3, #0]
    39b2:	429a      	cmp	r2, r3
    39b4:	d0c9      	beq.n	394a <prvTraceGetDTS+0x2a>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
    39b6:	2000      	movs	r0, #0
    39b8:	4b21      	ldr	r3, [pc, #132]	; (3a40 <prvTraceGetDTS+0x120>)
    39ba:	4798      	blx	r3
    39bc:	0880      	lsrs	r0, r0, #2
    39be:	6260      	str	r0, [r4, #36]	; 0x24
    39c0:	e7c3      	b.n	394a <prvTraceGetDTS+0x2a>
			RecorderDataPtr->absTimeLastEvent += dts;
    39c2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    39c4:	191b      	adds	r3, r3, r4
    39c6:	62b3      	str	r3, [r6, #40]	; 0x28
    39c8:	e7de      	b.n	3988 <prvTraceGetDTS+0x68>
		RecorderDataPtr->absTimeLastEvent = timestamp;
    39ca:	62b3      	str	r3, [r6, #40]	; 0x28
	if (dts > param_maxDTS)
    39cc:	42ac      	cmp	r4, r5
    39ce:	d803      	bhi.n	39d8 <prvTraceGetDTS+0xb8>
	return (uint16_t)dts & param_maxDTS;
    39d0:	0020      	movs	r0, r4
    39d2:	4028      	ands	r0, r5
}
    39d4:	b003      	add	sp, #12
    39d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
    39d8:	4b1a      	ldr	r3, [pc, #104]	; (3a44 <prvTraceGetDTS+0x124>)
    39da:	4798      	blx	r3
		if (xts != NULL)
    39dc:	2800      	cmp	r0, #0
    39de:	d0f7      	beq.n	39d0 <prvTraceGetDTS+0xb0>
			if (param_maxDTS == 0xFFFF)
    39e0:	4b0c      	ldr	r3, [pc, #48]	; (3a14 <prvTraceGetDTS+0xf4>)
    39e2:	429d      	cmp	r5, r3
    39e4:	d007      	beq.n	39f6 <prvTraceGetDTS+0xd6>
			else if (param_maxDTS == 0xFF)
    39e6:	2dff      	cmp	r5, #255	; 0xff
    39e8:	d00c      	beq.n	3a04 <prvTraceGetDTS+0xe4>
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
    39ea:	4817      	ldr	r0, [pc, #92]	; (3a48 <prvTraceGetDTS+0x128>)
    39ec:	4b11      	ldr	r3, [pc, #68]	; (3a34 <prvTraceGetDTS+0x114>)
    39ee:	4798      	blx	r3
			prvTraceUpdateCounters();
    39f0:	4b16      	ldr	r3, [pc, #88]	; (3a4c <prvTraceGetDTS+0x12c>)
    39f2:	4798      	blx	r3
    39f4:	e7ec      	b.n	39d0 <prvTraceGetDTS+0xb0>
				xts->type = XTS16;
    39f6:	23a9      	movs	r3, #169	; 0xa9
    39f8:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
    39fa:	0c23      	lsrs	r3, r4, #16
    39fc:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = 0;
    39fe:	2300      	movs	r3, #0
    3a00:	7043      	strb	r3, [r0, #1]
    3a02:	e7f5      	b.n	39f0 <prvTraceGetDTS+0xd0>
				xts->type = XTS8;
    3a04:	23a8      	movs	r3, #168	; 0xa8
    3a06:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
    3a08:	0a23      	lsrs	r3, r4, #8
    3a0a:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
    3a0c:	0e23      	lsrs	r3, r4, #24
    3a0e:	7043      	strb	r3, [r0, #1]
    3a10:	e7ee      	b.n	39f0 <prvTraceGetDTS+0xd0>
    3a12:	46c0      	nop			; (mov r8, r8)
    3a14:	0000ffff 	.word	0x0000ffff
    3a18:	20000328 	.word	0x20000328
    3a1c:	200003dc 	.word	0x200003dc
    3a20:	00003889 	.word	0x00003889
    3a24:	200003d4 	.word	0x200003d4
    3a28:	0000a915 	.word	0x0000a915
    3a2c:	0000aa21 	.word	0x0000aa21
    3a30:	0000deac 	.word	0x0000deac
    3a34:	00003389 	.word	0x00003389
    3a38:	e000e018 	.word	0xe000e018
    3a3c:	200048b4 	.word	0x200048b4
    3a40:	00007fad 	.word	0x00007fad
    3a44:	000033e1 	.word	0x000033e1
    3a48:	0000deec 	.word	0x0000deec
    3a4c:	000034d5 	.word	0x000034d5

00003a50 <prvTraceStoreTaskReady>:
{
    3a50:	b570      	push	{r4, r5, r6, lr}
    3a52:	1e04      	subs	r4, r0, #0
	if (handle == 0)
    3a54:	d01d      	beq.n	3a92 <prvTraceStoreTaskReady+0x42>
	if (! readyEventsEnabled)
    3a56:	4b1b      	ldr	r3, [pc, #108]	; (3ac4 <prvTraceStoreTaskReady+0x74>)
    3a58:	681b      	ldr	r3, [r3, #0]
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	d019      	beq.n	3a92 <prvTraceStoreTaskReady+0x42>
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    3a5e:	280f      	cmp	r0, #15
    3a60:	d818      	bhi.n	3a94 <prvTraceStoreTaskReady+0x44>
	if (recorder_busy)
    3a62:	4b19      	ldr	r3, [pc, #100]	; (3ac8 <prvTraceStoreTaskReady+0x78>)
    3a64:	681b      	ldr	r3, [r3, #0]
    3a66:	2b00      	cmp	r3, #0
    3a68:	d118      	bne.n	3a9c <prvTraceStoreTaskReady+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3a6a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3a6e:	2301      	movs	r3, #1
    3a70:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    3a74:	4a14      	ldr	r2, [pc, #80]	; (3ac8 <prvTraceStoreTaskReady+0x78>)
    3a76:	6813      	ldr	r3, [r2, #0]
    3a78:	3301      	adds	r3, #1
    3a7a:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
    3a7c:	4b13      	ldr	r3, [pc, #76]	; (3acc <prvTraceStoreTaskReady+0x7c>)
    3a7e:	681b      	ldr	r3, [r3, #0]
    3a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3a82:	2b00      	cmp	r3, #0
    3a84:	d10e      	bne.n	3aa4 <prvTraceStoreTaskReady+0x54>
	trcCRITICAL_SECTION_END();
    3a86:	4a10      	ldr	r2, [pc, #64]	; (3ac8 <prvTraceStoreTaskReady+0x78>)
    3a88:	6813      	ldr	r3, [r2, #0]
    3a8a:	3b01      	subs	r3, #1
    3a8c:	6013      	str	r3, [r2, #0]
    3a8e:	f385 8810 	msr	PRIMASK, r5
}
    3a92:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    3a94:	480e      	ldr	r0, [pc, #56]	; (3ad0 <prvTraceStoreTaskReady+0x80>)
    3a96:	4b0f      	ldr	r3, [pc, #60]	; (3ad4 <prvTraceStoreTaskReady+0x84>)
    3a98:	4798      	blx	r3
    3a9a:	e7fa      	b.n	3a92 <prvTraceStoreTaskReady+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
    3a9c:	480e      	ldr	r0, [pc, #56]	; (3ad8 <prvTraceStoreTaskReady+0x88>)
    3a9e:	4b0d      	ldr	r3, [pc, #52]	; (3ad4 <prvTraceStoreTaskReady+0x84>)
    3aa0:	4798      	blx	r3
		return;
    3aa2:	e7f6      	b.n	3a92 <prvTraceStoreTaskReady+0x42>
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    3aa4:	480d      	ldr	r0, [pc, #52]	; (3adc <prvTraceStoreTaskReady+0x8c>)
    3aa6:	4b0e      	ldr	r3, [pc, #56]	; (3ae0 <prvTraceStoreTaskReady+0x90>)
    3aa8:	4798      	blx	r3
    3aaa:	0006      	movs	r6, r0
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
    3aac:	4b0d      	ldr	r3, [pc, #52]	; (3ae4 <prvTraceStoreTaskReady+0x94>)
    3aae:	4798      	blx	r3
		if (tr != NULL)
    3ab0:	2800      	cmp	r0, #0
    3ab2:	d0e8      	beq.n	3a86 <prvTraceStoreTaskReady+0x36>
			tr->type = DIV_TASK_READY;
    3ab4:	2302      	movs	r3, #2
    3ab6:	7003      	strb	r3, [r0, #0]
			tr->dts = dts3;
    3ab8:	8046      	strh	r6, [r0, #2]
			tr->objHandle = hnd8;
    3aba:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
    3abc:	4b0a      	ldr	r3, [pc, #40]	; (3ae8 <prvTraceStoreTaskReady+0x98>)
    3abe:	4798      	blx	r3
    3ac0:	e7e1      	b.n	3a86 <prvTraceStoreTaskReady+0x36>
    3ac2:	46c0      	nop			; (mov r8, r8)
    3ac4:	20000028 	.word	0x20000028
    3ac8:	200003d8 	.word	0x200003d8
    3acc:	20000328 	.word	0x20000328
    3ad0:	0000e4ec 	.word	0x0000e4ec
    3ad4:	00003389 	.word	0x00003389
    3ad8:	0000e52c 	.word	0x0000e52c
    3adc:	0000ffff 	.word	0x0000ffff
    3ae0:	00003921 	.word	0x00003921
    3ae4:	000033e1 	.word	0x000033e1
    3ae8:	000034d5 	.word	0x000034d5

00003aec <vTraceStoreMemMangEvent>:
{
    3aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aee:	b083      	sub	sp, #12
    3af0:	9000      	str	r0, [sp, #0]
    3af2:	000c      	movs	r4, r1
	if (RecorderDataPtr == NULL)
    3af4:	4b28      	ldr	r3, [pc, #160]	; (3b98 <vTraceStoreMemMangEvent+0xac>)
    3af6:	681b      	ldr	r3, [r3, #0]
    3af8:	2b00      	cmp	r3, #0
    3afa:	d01d      	beq.n	3b38 <vTraceStoreMemMangEvent+0x4c>
		size = (uint32_t)(- signed_size);
    3afc:	17d3      	asrs	r3, r2, #31
    3afe:	18d6      	adds	r6, r2, r3
    3b00:	405e      	eors	r6, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3b02:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3b06:	2301      	movs	r3, #1
    3b08:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    3b0c:	4923      	ldr	r1, [pc, #140]	; (3b9c <vTraceStoreMemMangEvent+0xb0>)
    3b0e:	680b      	ldr	r3, [r1, #0]
    3b10:	3301      	adds	r3, #1
    3b12:	600b      	str	r3, [r1, #0]
	if (address != 0)
    3b14:	2c00      	cmp	r4, #0
    3b16:	d004      	beq.n	3b22 <vTraceStoreMemMangEvent+0x36>
		heapMemUsage += (uint32_t)signed_size;
    3b18:	4b21      	ldr	r3, [pc, #132]	; (3ba0 <vTraceStoreMemMangEvent+0xb4>)
    3b1a:	6819      	ldr	r1, [r3, #0]
    3b1c:	468c      	mov	ip, r1
    3b1e:	4462      	add	r2, ip
    3b20:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
    3b22:	4b1d      	ldr	r3, [pc, #116]	; (3b98 <vTraceStoreMemMangEvent+0xac>)
    3b24:	681b      	ldr	r3, [r3, #0]
    3b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3b28:	2b00      	cmp	r3, #0
    3b2a:	d107      	bne.n	3b3c <vTraceStoreMemMangEvent+0x50>
	trcCRITICAL_SECTION_END();
    3b2c:	4a1b      	ldr	r2, [pc, #108]	; (3b9c <vTraceStoreMemMangEvent+0xb0>)
    3b2e:	6813      	ldr	r3, [r2, #0]
    3b30:	3b01      	subs	r3, #1
    3b32:	6013      	str	r3, [r2, #0]
    3b34:	f385 8810 	msr	PRIMASK, r5
}
    3b38:	b003      	add	sp, #12
    3b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
    3b3c:	20ff      	movs	r0, #255	; 0xff
    3b3e:	4b19      	ldr	r3, [pc, #100]	; (3ba4 <vTraceStoreMemMangEvent+0xb8>)
    3b40:	4798      	blx	r3
    3b42:	9001      	str	r0, [sp, #4]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
    3b44:	0031      	movs	r1, r6
    3b46:	4818      	ldr	r0, [pc, #96]	; (3ba8 <vTraceStoreMemMangEvent+0xbc>)
    3b48:	4b18      	ldr	r3, [pc, #96]	; (3bac <vTraceStoreMemMangEvent+0xc0>)
    3b4a:	4798      	blx	r3
    3b4c:	0006      	movs	r6, r0
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
    3b4e:	4b18      	ldr	r3, [pc, #96]	; (3bb0 <vTraceStoreMemMangEvent+0xc4>)
    3b50:	4798      	blx	r3
    3b52:	1e07      	subs	r7, r0, #0
		if (ms != NULL)
    3b54:	d0ea      	beq.n	3b2c <vTraceStoreMemMangEvent+0x40>
			ms->dts = dts1;
    3b56:	466b      	mov	r3, sp
    3b58:	791b      	ldrb	r3, [r3, #4]
    3b5a:	7043      	strb	r3, [r0, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
    3b5c:	2300      	movs	r3, #0
    3b5e:	7003      	strb	r3, [r0, #0]
			ms->size = size_low;
    3b60:	8046      	strh	r6, [r0, #2]
			prvTraceUpdateCounters();
    3b62:	4b14      	ldr	r3, [pc, #80]	; (3bb4 <vTraceStoreMemMangEvent+0xc8>)
    3b64:	4798      	blx	r3
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
    3b66:	0021      	movs	r1, r4
    3b68:	480f      	ldr	r0, [pc, #60]	; (3ba8 <vTraceStoreMemMangEvent+0xbc>)
    3b6a:	4b10      	ldr	r3, [pc, #64]	; (3bac <vTraceStoreMemMangEvent+0xc0>)
    3b6c:	4798      	blx	r3
    3b6e:	0006      	movs	r6, r0
			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
    3b70:	4b0f      	ldr	r3, [pc, #60]	; (3bb0 <vTraceStoreMemMangEvent+0xc4>)
    3b72:	4798      	blx	r3
			if (ma != NULL)
    3b74:	2800      	cmp	r0, #0
    3b76:	d0d9      	beq.n	3b2c <vTraceStoreMemMangEvent+0x40>
				ma->addr_low = addr_low;
    3b78:	8046      	strh	r6, [r0, #2]
				ma->addr_high = addr_high;
    3b7a:	2300      	movs	r3, #0
    3b7c:	7043      	strb	r3, [r0, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
    3b7e:	466b      	mov	r3, sp
    3b80:	781c      	ldrb	r4, [r3, #0]
    3b82:	1c63      	adds	r3, r4, #1
    3b84:	7003      	strb	r3, [r0, #0]
				ms->type = (uint8_t) ecode;
    3b86:	703c      	strb	r4, [r7, #0]
				prvTraceUpdateCounters();					
    3b88:	4b0a      	ldr	r3, [pc, #40]	; (3bb4 <vTraceStoreMemMangEvent+0xc8>)
    3b8a:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
    3b8c:	4b02      	ldr	r3, [pc, #8]	; (3b98 <vTraceStoreMemMangEvent+0xac>)
    3b8e:	681b      	ldr	r3, [r3, #0]
    3b90:	4a03      	ldr	r2, [pc, #12]	; (3ba0 <vTraceStoreMemMangEvent+0xb4>)
    3b92:	6812      	ldr	r2, [r2, #0]
    3b94:	651a      	str	r2, [r3, #80]	; 0x50
    3b96:	e7c9      	b.n	3b2c <vTraceStoreMemMangEvent+0x40>
    3b98:	20000328 	.word	0x20000328
    3b9c:	200003d8 	.word	0x200003d8
    3ba0:	20000330 	.word	0x20000330
    3ba4:	00003921 	.word	0x00003921
    3ba8:	0000ffff 	.word	0x0000ffff
    3bac:	0000350d 	.word	0x0000350d
    3bb0:	000033e1 	.word	0x000033e1
    3bb4:	000034d5 	.word	0x000034d5

00003bb8 <prvTraceStoreKernelCall>:
{
    3bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bba:	0005      	movs	r5, r0
    3bbc:	0014      	movs	r4, r2
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    3bbe:	28fe      	cmp	r0, #254	; 0xfe
    3bc0:	d825      	bhi.n	3c0e <prvTraceStoreKernelCall+0x56>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    3bc2:	2908      	cmp	r1, #8
    3bc4:	d827      	bhi.n	3c16 <prvTraceStoreKernelCall+0x5e>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    3bc6:	4b21      	ldr	r3, [pc, #132]	; (3c4c <prvTraceStoreKernelCall+0x94>)
    3bc8:	681b      	ldr	r3, [r3, #0]
    3bca:	1859      	adds	r1, r3, r1
    3bcc:	3164      	adds	r1, #100	; 0x64
    3bce:	780b      	ldrb	r3, [r1, #0]
    3bd0:	4293      	cmp	r3, r2
    3bd2:	d324      	bcc.n	3c1e <prvTraceStoreKernelCall+0x66>
	if (recorder_busy)
    3bd4:	4b1e      	ldr	r3, [pc, #120]	; (3c50 <prvTraceStoreKernelCall+0x98>)
    3bd6:	681b      	ldr	r3, [r3, #0]
    3bd8:	2b00      	cmp	r3, #0
    3bda:	d124      	bne.n	3c26 <prvTraceStoreKernelCall+0x6e>
	if (handle_of_last_logged_task == 0)
    3bdc:	4b1d      	ldr	r3, [pc, #116]	; (3c54 <prvTraceStoreKernelCall+0x9c>)
    3bde:	781b      	ldrb	r3, [r3, #0]
    3be0:	2b00      	cmp	r3, #0
    3be2:	d013      	beq.n	3c0c <prvTraceStoreKernelCall+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3be4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3be8:	2301      	movs	r3, #1
    3bea:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    3bee:	4a18      	ldr	r2, [pc, #96]	; (3c50 <prvTraceStoreKernelCall+0x98>)
    3bf0:	6813      	ldr	r3, [r2, #0]
    3bf2:	3301      	adds	r3, #1
    3bf4:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
    3bf6:	4b15      	ldr	r3, [pc, #84]	; (3c4c <prvTraceStoreKernelCall+0x94>)
    3bf8:	681b      	ldr	r3, [r3, #0]
    3bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3bfc:	2b00      	cmp	r3, #0
    3bfe:	d116      	bne.n	3c2e <prvTraceStoreKernelCall+0x76>
	trcCRITICAL_SECTION_END();
    3c00:	4a13      	ldr	r2, [pc, #76]	; (3c50 <prvTraceStoreKernelCall+0x98>)
    3c02:	6813      	ldr	r3, [r2, #0]
    3c04:	3b01      	subs	r3, #1
    3c06:	6013      	str	r3, [r2, #0]
    3c08:	f386 8810 	msr	PRIMASK, r6
}
    3c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    3c0e:	4812      	ldr	r0, [pc, #72]	; (3c58 <prvTraceStoreKernelCall+0xa0>)
    3c10:	4b12      	ldr	r3, [pc, #72]	; (3c5c <prvTraceStoreKernelCall+0xa4>)
    3c12:	4798      	blx	r3
    3c14:	e7fa      	b.n	3c0c <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    3c16:	4812      	ldr	r0, [pc, #72]	; (3c60 <prvTraceStoreKernelCall+0xa8>)
    3c18:	4b10      	ldr	r3, [pc, #64]	; (3c5c <prvTraceStoreKernelCall+0xa4>)
    3c1a:	4798      	blx	r3
    3c1c:	e7f6      	b.n	3c0c <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    3c1e:	4811      	ldr	r0, [pc, #68]	; (3c64 <prvTraceStoreKernelCall+0xac>)
    3c20:	4b0e      	ldr	r3, [pc, #56]	; (3c5c <prvTraceStoreKernelCall+0xa4>)
    3c22:	4798      	blx	r3
    3c24:	e7f2      	b.n	3c0c <prvTraceStoreKernelCall+0x54>
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
    3c26:	4810      	ldr	r0, [pc, #64]	; (3c68 <prvTraceStoreKernelCall+0xb0>)
    3c28:	4b0c      	ldr	r3, [pc, #48]	; (3c5c <prvTraceStoreKernelCall+0xa4>)
    3c2a:	4798      	blx	r3
		return;
    3c2c:	e7ee      	b.n	3c0c <prvTraceStoreKernelCall+0x54>
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
    3c2e:	480f      	ldr	r0, [pc, #60]	; (3c6c <prvTraceStoreKernelCall+0xb4>)
    3c30:	4b0f      	ldr	r3, [pc, #60]	; (3c70 <prvTraceStoreKernelCall+0xb8>)
    3c32:	4798      	blx	r3
    3c34:	0007      	movs	r7, r0
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
    3c36:	4b0f      	ldr	r3, [pc, #60]	; (3c74 <prvTraceStoreKernelCall+0xbc>)
    3c38:	4798      	blx	r3
		if (kse != NULL)
    3c3a:	2800      	cmp	r0, #0
    3c3c:	d0e0      	beq.n	3c00 <prvTraceStoreKernelCall+0x48>
			kse->dts = dts1;
    3c3e:	8047      	strh	r7, [r0, #2]
			kse->type = (uint8_t)ecode;
    3c40:	7005      	strb	r5, [r0, #0]
			kse->objHandle = hnd8;
    3c42:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
    3c44:	4b0c      	ldr	r3, [pc, #48]	; (3c78 <prvTraceStoreKernelCall+0xc0>)
    3c46:	4798      	blx	r3
    3c48:	e7da      	b.n	3c00 <prvTraceStoreKernelCall+0x48>
    3c4a:	46c0      	nop			; (mov r8, r8)
    3c4c:	20000328 	.word	0x20000328
    3c50:	200003d8 	.word	0x200003d8
    3c54:	2000032c 	.word	0x2000032c
    3c58:	0000e244 	.word	0x0000e244
    3c5c:	00003389 	.word	0x00003389
    3c60:	0000e27c 	.word	0x0000e27c
    3c64:	0000e2c4 	.word	0x0000e2c4
    3c68:	0000e30c 	.word	0x0000e30c
    3c6c:	0000ffff 	.word	0x0000ffff
    3c70:	00003921 	.word	0x00003921
    3c74:	000033e1 	.word	0x000033e1
    3c78:	000034d5 	.word	0x000034d5

00003c7c <prvTraceStoreKernelCallWithParam>:
{
    3c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c7e:	46c6      	mov	lr, r8
    3c80:	b500      	push	{lr}
    3c82:	0006      	movs	r6, r0
    3c84:	0014      	movs	r4, r2
    3c86:	001d      	movs	r5, r3
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    3c88:	28fe      	cmp	r0, #254	; 0xfe
    3c8a:	d827      	bhi.n	3cdc <prvTraceStoreKernelCallWithParam+0x60>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    3c8c:	2908      	cmp	r1, #8
    3c8e:	d829      	bhi.n	3ce4 <prvTraceStoreKernelCallWithParam+0x68>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    3c90:	4b24      	ldr	r3, [pc, #144]	; (3d24 <prvTraceStoreKernelCallWithParam+0xa8>)
    3c92:	681b      	ldr	r3, [r3, #0]
    3c94:	1859      	adds	r1, r3, r1
    3c96:	3164      	adds	r1, #100	; 0x64
    3c98:	780b      	ldrb	r3, [r1, #0]
    3c9a:	4293      	cmp	r3, r2
    3c9c:	d326      	bcc.n	3cec <prvTraceStoreKernelCallWithParam+0x70>
	if (recorder_busy)
    3c9e:	4b22      	ldr	r3, [pc, #136]	; (3d28 <prvTraceStoreKernelCallWithParam+0xac>)
    3ca0:	681b      	ldr	r3, [r3, #0]
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	d126      	bne.n	3cf4 <prvTraceStoreKernelCallWithParam+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3ca6:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3caa:	2301      	movs	r3, #1
    3cac:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    3cb0:	4a1d      	ldr	r2, [pc, #116]	; (3d28 <prvTraceStoreKernelCallWithParam+0xac>)
    3cb2:	6813      	ldr	r3, [r2, #0]
    3cb4:	3301      	adds	r3, #1
    3cb6:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    3cb8:	4b1a      	ldr	r3, [pc, #104]	; (3d24 <prvTraceStoreKernelCallWithParam+0xa8>)
    3cba:	681b      	ldr	r3, [r3, #0]
    3cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	d003      	beq.n	3cca <prvTraceStoreKernelCallWithParam+0x4e>
    3cc2:	4b1a      	ldr	r3, [pc, #104]	; (3d2c <prvTraceStoreKernelCallWithParam+0xb0>)
    3cc4:	781b      	ldrb	r3, [r3, #0]
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d118      	bne.n	3cfc <prvTraceStoreKernelCallWithParam+0x80>
	trcCRITICAL_SECTION_END();
    3cca:	4a17      	ldr	r2, [pc, #92]	; (3d28 <prvTraceStoreKernelCallWithParam+0xac>)
    3ccc:	6813      	ldr	r3, [r2, #0]
    3cce:	3b01      	subs	r3, #1
    3cd0:	6013      	str	r3, [r2, #0]
    3cd2:	f388 8810 	msr	PRIMASK, r8
}
    3cd6:	bc04      	pop	{r2}
    3cd8:	4690      	mov	r8, r2
    3cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    3cdc:	4814      	ldr	r0, [pc, #80]	; (3d30 <prvTraceStoreKernelCallWithParam+0xb4>)
    3cde:	4b15      	ldr	r3, [pc, #84]	; (3d34 <prvTraceStoreKernelCallWithParam+0xb8>)
    3ce0:	4798      	blx	r3
    3ce2:	e7f8      	b.n	3cd6 <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    3ce4:	4814      	ldr	r0, [pc, #80]	; (3d38 <prvTraceStoreKernelCallWithParam+0xbc>)
    3ce6:	4b13      	ldr	r3, [pc, #76]	; (3d34 <prvTraceStoreKernelCallWithParam+0xb8>)
    3ce8:	4798      	blx	r3
    3cea:	e7f4      	b.n	3cd6 <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    3cec:	4813      	ldr	r0, [pc, #76]	; (3d3c <prvTraceStoreKernelCallWithParam+0xc0>)
    3cee:	4b11      	ldr	r3, [pc, #68]	; (3d34 <prvTraceStoreKernelCallWithParam+0xb8>)
    3cf0:	4798      	blx	r3
    3cf2:	e7f0      	b.n	3cd6 <prvTraceStoreKernelCallWithParam+0x5a>
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
    3cf4:	4812      	ldr	r0, [pc, #72]	; (3d40 <prvTraceStoreKernelCallWithParam+0xc4>)
    3cf6:	4b0f      	ldr	r3, [pc, #60]	; (3d34 <prvTraceStoreKernelCallWithParam+0xb8>)
    3cf8:	4798      	blx	r3
		return;
    3cfa:	e7ec      	b.n	3cd6 <prvTraceStoreKernelCallWithParam+0x5a>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
    3cfc:	20ff      	movs	r0, #255	; 0xff
    3cfe:	4b11      	ldr	r3, [pc, #68]	; (3d44 <prvTraceStoreKernelCallWithParam+0xc8>)
    3d00:	4798      	blx	r3
    3d02:	0007      	movs	r7, r0
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
    3d04:	0029      	movs	r1, r5
    3d06:	20ff      	movs	r0, #255	; 0xff
    3d08:	4b0f      	ldr	r3, [pc, #60]	; (3d48 <prvTraceStoreKernelCallWithParam+0xcc>)
    3d0a:	4798      	blx	r3
    3d0c:	0005      	movs	r5, r0
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
    3d0e:	4b0f      	ldr	r3, [pc, #60]	; (3d4c <prvTraceStoreKernelCallWithParam+0xd0>)
    3d10:	4798      	blx	r3
		if (kse != NULL)
    3d12:	2800      	cmp	r0, #0
    3d14:	d0d9      	beq.n	3cca <prvTraceStoreKernelCallWithParam+0x4e>
			kse->dts = dts2;
    3d16:	70c7      	strb	r7, [r0, #3]
			kse->type = (uint8_t)evtcode;
    3d18:	7006      	strb	r6, [r0, #0]
			kse->objHandle = hnd8;
    3d1a:	7044      	strb	r4, [r0, #1]
			kse->param = p8;
    3d1c:	7085      	strb	r5, [r0, #2]
			prvTraceUpdateCounters();
    3d1e:	4b0c      	ldr	r3, [pc, #48]	; (3d50 <prvTraceStoreKernelCallWithParam+0xd4>)
    3d20:	4798      	blx	r3
    3d22:	e7d2      	b.n	3cca <prvTraceStoreKernelCallWithParam+0x4e>
    3d24:	20000328 	.word	0x20000328
    3d28:	200003d8 	.word	0x200003d8
    3d2c:	2000032c 	.word	0x2000032c
    3d30:	0000e3d4 	.word	0x0000e3d4
    3d34:	00003389 	.word	0x00003389
    3d38:	0000e414 	.word	0x0000e414
    3d3c:	0000e464 	.word	0x0000e464
    3d40:	0000e4b4 	.word	0x0000e4b4
    3d44:	00003921 	.word	0x00003921
    3d48:	0000350d 	.word	0x0000350d
    3d4c:	000033e1 	.word	0x000033e1
    3d50:	000034d5 	.word	0x000034d5

00003d54 <prvTraceStoreKernelCallWithNumericParamOnly>:
{
    3d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d56:	0004      	movs	r4, r0
    3d58:	000d      	movs	r5, r1
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    3d5a:	28fe      	cmp	r0, #254	; 0xfe
    3d5c:	d81c      	bhi.n	3d98 <prvTraceStoreKernelCallWithNumericParamOnly+0x44>
	if (recorder_busy)
    3d5e:	4b1c      	ldr	r3, [pc, #112]	; (3dd0 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    3d60:	681b      	ldr	r3, [r3, #0]
    3d62:	2b00      	cmp	r3, #0
    3d64:	d11c      	bne.n	3da0 <prvTraceStoreKernelCallWithNumericParamOnly+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3d66:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3d6a:	2301      	movs	r3, #1
    3d6c:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    3d70:	4a17      	ldr	r2, [pc, #92]	; (3dd0 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    3d72:	6813      	ldr	r3, [r2, #0]
    3d74:	3301      	adds	r3, #1
    3d76:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    3d78:	4b16      	ldr	r3, [pc, #88]	; (3dd4 <prvTraceStoreKernelCallWithNumericParamOnly+0x80>)
    3d7a:	681b      	ldr	r3, [r3, #0]
    3d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3d7e:	2b00      	cmp	r3, #0
    3d80:	d003      	beq.n	3d8a <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
    3d82:	4b15      	ldr	r3, [pc, #84]	; (3dd8 <prvTraceStoreKernelCallWithNumericParamOnly+0x84>)
    3d84:	781b      	ldrb	r3, [r3, #0]
    3d86:	2b00      	cmp	r3, #0
    3d88:	d10e      	bne.n	3da8 <prvTraceStoreKernelCallWithNumericParamOnly+0x54>
	trcCRITICAL_SECTION_END();
    3d8a:	4a11      	ldr	r2, [pc, #68]	; (3dd0 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    3d8c:	6813      	ldr	r3, [r2, #0]
    3d8e:	3b01      	subs	r3, #1
    3d90:	6013      	str	r3, [r2, #0]
    3d92:	f386 8810 	msr	PRIMASK, r6
}
    3d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    3d98:	4810      	ldr	r0, [pc, #64]	; (3ddc <prvTraceStoreKernelCallWithNumericParamOnly+0x88>)
    3d9a:	4b11      	ldr	r3, [pc, #68]	; (3de0 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
    3d9c:	4798      	blx	r3
    3d9e:	e7fa      	b.n	3d96 <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
    3da0:	4810      	ldr	r0, [pc, #64]	; (3de4 <prvTraceStoreKernelCallWithNumericParamOnly+0x90>)
    3da2:	4b0f      	ldr	r3, [pc, #60]	; (3de0 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
    3da4:	4798      	blx	r3
		return;
    3da6:	e7f6      	b.n	3d96 <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
    3da8:	20ff      	movs	r0, #255	; 0xff
    3daa:	4b0f      	ldr	r3, [pc, #60]	; (3de8 <prvTraceStoreKernelCallWithNumericParamOnly+0x94>)
    3dac:	4798      	blx	r3
    3dae:	0007      	movs	r7, r0
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
    3db0:	0029      	movs	r1, r5
    3db2:	480e      	ldr	r0, [pc, #56]	; (3dec <prvTraceStoreKernelCallWithNumericParamOnly+0x98>)
    3db4:	4b0e      	ldr	r3, [pc, #56]	; (3df0 <prvTraceStoreKernelCallWithNumericParamOnly+0x9c>)
    3db6:	4798      	blx	r3
    3db8:	0005      	movs	r5, r0
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
    3dba:	4b0e      	ldr	r3, [pc, #56]	; (3df4 <prvTraceStoreKernelCallWithNumericParamOnly+0xa0>)
    3dbc:	4798      	blx	r3
		if (kse != NULL)
    3dbe:	2800      	cmp	r0, #0
    3dc0:	d0e3      	beq.n	3d8a <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
			kse->dts = dts6;
    3dc2:	7047      	strb	r7, [r0, #1]
			kse->type = (uint8_t)evtcode;
    3dc4:	7004      	strb	r4, [r0, #0]
			kse->param = restParam;
    3dc6:	8045      	strh	r5, [r0, #2]
			prvTraceUpdateCounters();
    3dc8:	4b0b      	ldr	r3, [pc, #44]	; (3df8 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>)
    3dca:	4798      	blx	r3
    3dcc:	e7dd      	b.n	3d8a <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
    3dce:	46c0      	nop			; (mov r8, r8)
    3dd0:	200003d8 	.word	0x200003d8
    3dd4:	20000328 	.word	0x20000328
    3dd8:	2000032c 	.word	0x2000032c
    3ddc:	0000e344 	.word	0x0000e344
    3de0:	00003389 	.word	0x00003389
    3de4:	0000e39c 	.word	0x0000e39c
    3de8:	00003921 	.word	0x00003921
    3dec:	0000ffff 	.word	0x0000ffff
    3df0:	0000350d 	.word	0x0000350d
    3df4:	000033e1 	.word	0x000033e1
    3df8:	000034d5 	.word	0x000034d5

00003dfc <prvTraceStoreTaskswitch>:
{
    3dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3dfe:	0004      	movs	r4, r0
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    3e00:	280f      	cmp	r0, #15
    3e02:	d818      	bhi.n	3e36 <prvTraceStoreTaskswitch+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3e04:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3e08:	2301      	movs	r3, #1
    3e0a:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
    3e0e:	4a26      	ldr	r2, [pc, #152]	; (3ea8 <prvTraceStoreTaskswitch+0xac>)
    3e10:	6813      	ldr	r3, [r2, #0]
    3e12:	3301      	adds	r3, #1
    3e14:	6013      	str	r3, [r2, #0]
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
    3e16:	4b25      	ldr	r3, [pc, #148]	; (3eac <prvTraceStoreTaskswitch+0xb0>)
    3e18:	781b      	ldrb	r3, [r3, #0]
    3e1a:	4283      	cmp	r3, r0
    3e1c:	d004      	beq.n	3e28 <prvTraceStoreTaskswitch+0x2c>
    3e1e:	4b24      	ldr	r3, [pc, #144]	; (3eb0 <prvTraceStoreTaskswitch+0xb4>)
    3e20:	681b      	ldr	r3, [r3, #0]
    3e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3e24:	2b00      	cmp	r3, #0
    3e26:	d10a      	bne.n	3e3e <prvTraceStoreTaskswitch+0x42>
	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
    3e28:	4a1f      	ldr	r2, [pc, #124]	; (3ea8 <prvTraceStoreTaskswitch+0xac>)
    3e2a:	6813      	ldr	r3, [r2, #0]
    3e2c:	3b01      	subs	r3, #1
    3e2e:	6013      	str	r3, [r2, #0]
    3e30:	f385 8810 	msr	PRIMASK, r5
}
    3e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    3e36:	481f      	ldr	r0, [pc, #124]	; (3eb4 <prvTraceStoreTaskswitch+0xb8>)
    3e38:	4b1f      	ldr	r3, [pc, #124]	; (3eb8 <prvTraceStoreTaskswitch+0xbc>)
    3e3a:	4798      	blx	r3
    3e3c:	e7fa      	b.n	3e34 <prvTraceStoreTaskswitch+0x38>
		isPendingContextSwitch = 0;
    3e3e:	2200      	movs	r2, #0
    3e40:	4b1e      	ldr	r3, [pc, #120]	; (3ebc <prvTraceStoreTaskswitch+0xc0>)
    3e42:	601a      	str	r2, [r3, #0]
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    3e44:	481e      	ldr	r0, [pc, #120]	; (3ec0 <prvTraceStoreTaskswitch+0xc4>)
    3e46:	4b1f      	ldr	r3, [pc, #124]	; (3ec4 <prvTraceStoreTaskswitch+0xc8>)
    3e48:	4798      	blx	r3
    3e4a:	0007      	movs	r7, r0
		handle_of_last_logged_task = task_handle;
    3e4c:	4b17      	ldr	r3, [pc, #92]	; (3eac <prvTraceStoreTaskswitch+0xb0>)
    3e4e:	701c      	strb	r4, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
    3e50:	4b1d      	ldr	r3, [pc, #116]	; (3ec8 <prvTraceStoreTaskswitch+0xcc>)
    3e52:	4798      	blx	r3
    3e54:	1e06      	subs	r6, r0, #0
		if (ts != NULL)
    3e56:	d0e7      	beq.n	3e28 <prvTraceStoreTaskswitch+0x2c>
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    3e58:	4b14      	ldr	r3, [pc, #80]	; (3eac <prvTraceStoreTaskswitch+0xb0>)
    3e5a:	7818      	ldrb	r0, [r3, #0]
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    3e5c:	4b14      	ldr	r3, [pc, #80]	; (3eb0 <prvTraceStoreTaskswitch+0xb4>)
    3e5e:	681a      	ldr	r2, [r3, #0]
    3e60:	2367      	movs	r3, #103	; 0x67
    3e62:	5cd3      	ldrb	r3, [r2, r3]
    3e64:	4283      	cmp	r3, r0
    3e66:	d30f      	bcc.n	3e88 <prvTraceStoreTaskswitch+0x8c>
	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
    3e68:	2103      	movs	r1, #3
    3e6a:	4b18      	ldr	r3, [pc, #96]	; (3ecc <prvTraceStoreTaskswitch+0xd0>)
    3e6c:	4798      	blx	r3
    3e6e:	4b10      	ldr	r3, [pc, #64]	; (3eb0 <prvTraceStoreTaskswitch+0xb4>)
    3e70:	681b      	ldr	r3, [r3, #0]
    3e72:	2273      	movs	r2, #115	; 0x73
    3e74:	5c9a      	ldrb	r2, [r3, r2]
    3e76:	181b      	adds	r3, r3, r0
    3e78:	189b      	adds	r3, r3, r2
    3e7a:	339c      	adds	r3, #156	; 0x9c
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    3e7c:	781b      	ldrb	r3, [r3, #0]
    3e7e:	2b01      	cmp	r3, #1
    3e80:	d105      	bne.n	3e8e <prvTraceStoreTaskswitch+0x92>
				ts->type = TS_TASK_RESUME;
    3e82:	3306      	adds	r3, #6
    3e84:	7033      	strb	r3, [r6, #0]
    3e86:	e004      	b.n	3e92 <prvTraceStoreTaskswitch+0x96>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    3e88:	4811      	ldr	r0, [pc, #68]	; (3ed0 <prvTraceStoreTaskswitch+0xd4>)
    3e8a:	4b0b      	ldr	r3, [pc, #44]	; (3eb8 <prvTraceStoreTaskswitch+0xbc>)
    3e8c:	4798      	blx	r3
				ts->type = TS_TASK_BEGIN;
    3e8e:	2306      	movs	r3, #6
    3e90:	7033      	strb	r3, [r6, #0]
			ts->dts = dts3;
    3e92:	8077      	strh	r7, [r6, #2]
			ts->objHandle = hnd8;
    3e94:	7074      	strb	r4, [r6, #1]
			prvTraceSetObjectState(TRACE_CLASS_TASK,
    3e96:	4b05      	ldr	r3, [pc, #20]	; (3eac <prvTraceStoreTaskswitch+0xb0>)
    3e98:	7819      	ldrb	r1, [r3, #0]
    3e9a:	2201      	movs	r2, #1
    3e9c:	2003      	movs	r0, #3
    3e9e:	4b0d      	ldr	r3, [pc, #52]	; (3ed4 <prvTraceStoreTaskswitch+0xd8>)
    3ea0:	4798      	blx	r3
			prvTraceUpdateCounters();
    3ea2:	4b0d      	ldr	r3, [pc, #52]	; (3ed8 <prvTraceStoreTaskswitch+0xdc>)
    3ea4:	4798      	blx	r3
    3ea6:	e7bf      	b.n	3e28 <prvTraceStoreTaskswitch+0x2c>
    3ea8:	200003d8 	.word	0x200003d8
    3eac:	2000032c 	.word	0x2000032c
    3eb0:	20000328 	.word	0x20000328
    3eb4:	0000e564 	.word	0x0000e564
    3eb8:	00003389 	.word	0x00003389
    3ebc:	20000334 	.word	0x20000334
    3ec0:	0000ffff 	.word	0x0000ffff
    3ec4:	00003921 	.word	0x00003921
    3ec8:	000033e1 	.word	0x000033e1
    3ecc:	00003561 	.word	0x00003561
    3ed0:	0000e5ac 	.word	0x0000e5ac
    3ed4:	0000368d 	.word	0x0000368d
    3ed8:	000034d5 	.word	0x000034d5

00003edc <uiTraceStart>:
{
    3edc:	b570      	push	{r4, r5, r6, lr}
	if (RecorderDataPtr == NULL)
    3ede:	4b20      	ldr	r3, [pc, #128]	; (3f60 <uiTraceStart+0x84>)
    3ee0:	681b      	ldr	r3, [r3, #0]
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d00a      	beq.n	3efc <uiTraceStart+0x20>
	if (RecorderDataPtr->recorderActive == 1)
    3ee6:	6b18      	ldr	r0, [r3, #48]	; 0x30
    3ee8:	2801      	cmp	r0, #1
    3eea:	d006      	beq.n	3efa <uiTraceStart+0x1e>
	if (traceErrorMessage == NULL)
    3eec:	4b1d      	ldr	r3, [pc, #116]	; (3f64 <uiTraceStart+0x88>)
    3eee:	681b      	ldr	r3, [r3, #0]
    3ef0:	2b00      	cmp	r3, #0
    3ef2:	d008      	beq.n	3f06 <uiTraceStart+0x2a>
	return RecorderDataPtr->recorderActive;
    3ef4:	4b1a      	ldr	r3, [pc, #104]	; (3f60 <uiTraceStart+0x84>)
    3ef6:	681b      	ldr	r3, [r3, #0]
    3ef8:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
    3efa:	bd70      	pop	{r4, r5, r6, pc}
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
    3efc:	481a      	ldr	r0, [pc, #104]	; (3f68 <uiTraceStart+0x8c>)
    3efe:	4b1b      	ldr	r3, [pc, #108]	; (3f6c <uiTraceStart+0x90>)
    3f00:	4798      	blx	r3
    3f02:	2000      	movs	r0, #0
    3f04:	e7f9      	b.n	3efa <uiTraceStart+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3f06:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3f0a:	2201      	movs	r2, #1
    3f0c:	f382 8810 	msr	PRIMASK, r2
		trcCRITICAL_SECTION_BEGIN();
    3f10:	4917      	ldr	r1, [pc, #92]	; (3f70 <uiTraceStart+0x94>)
    3f12:	680b      	ldr	r3, [r1, #0]
    3f14:	3301      	adds	r3, #1
    3f16:	600b      	str	r3, [r1, #0]
		RecorderDataPtr->recorderActive = 1;
    3f18:	4b11      	ldr	r3, [pc, #68]	; (3f60 <uiTraceStart+0x84>)
    3f1a:	681b      	ldr	r3, [r3, #0]
    3f1c:	631a      	str	r2, [r3, #48]	; 0x30
		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
    3f1e:	4b15      	ldr	r3, [pc, #84]	; (3f74 <uiTraceStart+0x98>)
    3f20:	4798      	blx	r3
    3f22:	4b15      	ldr	r3, [pc, #84]	; (3f78 <uiTraceStart+0x9c>)
    3f24:	4798      	blx	r3
    3f26:	b2c4      	uxtb	r4, r0
		if (handle == 0)
    3f28:	2c00      	cmp	r4, #0
    3f2a:	d009      	beq.n	3f40 <uiTraceStart+0x64>
		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
    3f2c:	0020      	movs	r0, r4
    3f2e:	4b13      	ldr	r3, [pc, #76]	; (3f7c <uiTraceStart+0xa0>)
    3f30:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
    3f32:	4a0f      	ldr	r2, [pc, #60]	; (3f70 <uiTraceStart+0x94>)
    3f34:	6813      	ldr	r3, [r2, #0]
    3f36:	3b01      	subs	r3, #1
    3f38:	6013      	str	r3, [r2, #0]
    3f3a:	f385 8810 	msr	PRIMASK, r5
    3f3e:	e7d9      	b.n	3ef4 <uiTraceStart+0x18>
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
    3f40:	2003      	movs	r0, #3
    3f42:	4b0f      	ldr	r3, [pc, #60]	; (3f80 <uiTraceStart+0xa4>)
    3f44:	4798      	blx	r3
    3f46:	0006      	movs	r6, r0
    3f48:	0004      	movs	r4, r0
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
    3f4a:	4a0e      	ldr	r2, [pc, #56]	; (3f84 <uiTraceStart+0xa8>)
    3f4c:	0001      	movs	r1, r0
    3f4e:	2003      	movs	r0, #3
    3f50:	4b0d      	ldr	r3, [pc, #52]	; (3f88 <uiTraceStart+0xac>)
    3f52:	4798      	blx	r3
			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
    3f54:	2200      	movs	r2, #0
    3f56:	0031      	movs	r1, r6
    3f58:	2003      	movs	r0, #3
    3f5a:	4b0c      	ldr	r3, [pc, #48]	; (3f8c <uiTraceStart+0xb0>)
    3f5c:	4798      	blx	r3
    3f5e:	e7e5      	b.n	3f2c <uiTraceStart+0x50>
    3f60:	20000328 	.word	0x20000328
    3f64:	200003e0 	.word	0x200003e0
    3f68:	0000e668 	.word	0x0000e668
    3f6c:	00003389 	.word	0x00003389
    3f70:	200003d8 	.word	0x200003d8
    3f74:	00002f81 	.word	0x00002f81
    3f78:	00002eb9 	.word	0x00002eb9
    3f7c:	00003dfd 	.word	0x00003dfd
    3f80:	00003725 	.word	0x00003725
    3f84:	0000e6ac 	.word	0x0000e6ac
    3f88:	000037f9 	.word	0x000037f9
    3f8c:	000035d9 	.word	0x000035d9

00003f90 <vTraceStart>:
{
    3f90:	b510      	push	{r4, lr}
	(void)uiTraceStart();
    3f92:	4b01      	ldr	r3, [pc, #4]	; (3f98 <vTraceStart+0x8>)
    3f94:	4798      	blx	r3
}
    3f96:	bd10      	pop	{r4, pc}
    3f98:	00003edd 	.word	0x00003edd

00003f9c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3f9c:	0003      	movs	r3, r0
    3f9e:	3308      	adds	r3, #8
    3fa0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3fa2:	2201      	movs	r2, #1
    3fa4:	4252      	negs	r2, r2
    3fa6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3fa8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3faa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    3fac:	2300      	movs	r3, #0
    3fae:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    3fb0:	4770      	bx	lr

00003fb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3fb2:	2300      	movs	r3, #0
    3fb4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    3fb6:	4770      	bx	lr

00003fb8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    3fb8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    3fba:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    3fbc:	689a      	ldr	r2, [r3, #8]
    3fbe:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3fc0:	689a      	ldr	r2, [r3, #8]
    3fc2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    3fc4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3fc6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    3fc8:	6803      	ldr	r3, [r0, #0]
    3fca:	3301      	adds	r3, #1
    3fcc:	6003      	str	r3, [r0, #0]
}
    3fce:	4770      	bx	lr

00003fd0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    3fd0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    3fd2:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3fd4:	0002      	movs	r2, r0
    3fd6:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
    3fd8:	1c63      	adds	r3, r4, #1
    3fda:	d102      	bne.n	3fe2 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
    3fdc:	6902      	ldr	r2, [r0, #16]
    3fde:	e004      	b.n	3fea <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3fe0:	001a      	movs	r2, r3
    3fe2:	6853      	ldr	r3, [r2, #4]
    3fe4:	681d      	ldr	r5, [r3, #0]
    3fe6:	42ac      	cmp	r4, r5
    3fe8:	d2fa      	bcs.n	3fe0 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3fea:	6853      	ldr	r3, [r2, #4]
    3fec:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    3fee:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3ff0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    3ff2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3ff4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    3ff6:	6803      	ldr	r3, [r0, #0]
    3ff8:	3301      	adds	r3, #1
    3ffa:	6003      	str	r3, [r0, #0]
}
    3ffc:	bd30      	pop	{r4, r5, pc}

00003ffe <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    3ffe:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    4000:	6842      	ldr	r2, [r0, #4]
    4002:	6881      	ldr	r1, [r0, #8]
    4004:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    4006:	6882      	ldr	r2, [r0, #8]
    4008:	6841      	ldr	r1, [r0, #4]
    400a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    400c:	685a      	ldr	r2, [r3, #4]
    400e:	4290      	cmp	r0, r2
    4010:	d006      	beq.n	4020 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    4012:	2200      	movs	r2, #0
    4014:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    4016:	681a      	ldr	r2, [r3, #0]
    4018:	3a01      	subs	r2, #1
    401a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    401c:	6818      	ldr	r0, [r3, #0]
}
    401e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    4020:	6882      	ldr	r2, [r0, #8]
    4022:	605a      	str	r2, [r3, #4]
    4024:	e7f5      	b.n	4012 <uxListRemove+0x14>
	...

00004028 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    4028:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
    402a:	2300      	movs	r3, #0
    402c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    402e:	4b06      	ldr	r3, [pc, #24]	; (4048 <prvTaskExitError+0x20>)
    4030:	681b      	ldr	r3, [r3, #0]
    4032:	3301      	adds	r3, #1
    4034:	d001      	beq.n	403a <prvTaskExitError+0x12>
    4036:	b672      	cpsid	i
    4038:	e7fe      	b.n	4038 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
    403a:	b672      	cpsid	i
	while( ulDummy == 0 )
    403c:	9b01      	ldr	r3, [sp, #4]
    403e:	2b00      	cmp	r3, #0
    4040:	d0fc      	beq.n	403c <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    4042:	b002      	add	sp, #8
    4044:	4770      	bx	lr
    4046:	46c0      	nop			; (mov r8, r8)
    4048:	2000002c 	.word	0x2000002c
    404c:	00000000 	.word	0x00000000

00004050 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    4050:	4a0b      	ldr	r2, [pc, #44]	; (4080 <pxCurrentTCBConst2>)
    4052:	6813      	ldr	r3, [r2, #0]
    4054:	6818      	ldr	r0, [r3, #0]
    4056:	3020      	adds	r0, #32
    4058:	f380 8809 	msr	PSP, r0
    405c:	2002      	movs	r0, #2
    405e:	f380 8814 	msr	CONTROL, r0
    4062:	f3bf 8f6f 	isb	sy
    4066:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    4068:	46ae      	mov	lr, r5
    406a:	bc08      	pop	{r3}
    406c:	bc04      	pop	{r2}
    406e:	b662      	cpsie	i
    4070:	4718      	bx	r3
    4072:	46c0      	nop			; (mov r8, r8)
    4074:	46c0      	nop			; (mov r8, r8)
    4076:	46c0      	nop			; (mov r8, r8)
    4078:	46c0      	nop			; (mov r8, r8)
    407a:	46c0      	nop			; (mov r8, r8)
    407c:	46c0      	nop			; (mov r8, r8)
    407e:	46c0      	nop			; (mov r8, r8)

00004080 <pxCurrentTCBConst2>:
    4080:	200036c4 	.word	0x200036c4

00004084 <pxPortInitialiseStack>:
{
    4084:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    4086:	1f03      	subs	r3, r0, #4
    4088:	2480      	movs	r4, #128	; 0x80
    408a:	0464      	lsls	r4, r4, #17
    408c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    408e:	3b04      	subs	r3, #4
    4090:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    4092:	3b04      	subs	r3, #4
    4094:	4902      	ldr	r1, [pc, #8]	; (40a0 <pxPortInitialiseStack+0x1c>)
    4096:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    4098:	3b14      	subs	r3, #20
    409a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    409c:	3840      	subs	r0, #64	; 0x40
}
    409e:	bd10      	pop	{r4, pc}
    40a0:	00004029 	.word	0x00004029

000040a4 <SVC_Handler>:
}
    40a4:	4770      	bx	lr
	...

000040a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    40a8:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    40aa:	4b13      	ldr	r3, [pc, #76]	; (40f8 <xPortStartScheduler+0x50>)
    40ac:	6819      	ldr	r1, [r3, #0]
    40ae:	22ff      	movs	r2, #255	; 0xff
    40b0:	0412      	lsls	r2, r2, #16
    40b2:	430a      	orrs	r2, r1
    40b4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    40b6:	6819      	ldr	r1, [r3, #0]
    40b8:	22ff      	movs	r2, #255	; 0xff
    40ba:	0612      	lsls	r2, r2, #24
    40bc:	430a      	orrs	r2, r1
    40be:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    40c0:	4d0e      	ldr	r5, [pc, #56]	; (40fc <xPortStartScheduler+0x54>)
    40c2:	2400      	movs	r4, #0
    40c4:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    40c6:	4b0e      	ldr	r3, [pc, #56]	; (4100 <xPortStartScheduler+0x58>)
    40c8:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    40ca:	2000      	movs	r0, #0
    40cc:	4b0d      	ldr	r3, [pc, #52]	; (4104 <xPortStartScheduler+0x5c>)
    40ce:	4798      	blx	r3
    40d0:	21fa      	movs	r1, #250	; 0xfa
    40d2:	0089      	lsls	r1, r1, #2
    40d4:	4b0c      	ldr	r3, [pc, #48]	; (4108 <xPortStartScheduler+0x60>)
    40d6:	4798      	blx	r3
    40d8:	3801      	subs	r0, #1
    40da:	4b0c      	ldr	r3, [pc, #48]	; (410c <xPortStartScheduler+0x64>)
    40dc:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    40de:	2307      	movs	r3, #7
    40e0:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
    40e2:	4b0b      	ldr	r3, [pc, #44]	; (4110 <xPortStartScheduler+0x68>)
    40e4:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
    40e6:	4b0b      	ldr	r3, [pc, #44]	; (4114 <xPortStartScheduler+0x6c>)
    40e8:	4798      	blx	r3
	vTaskSwitchContext();
    40ea:	4b0b      	ldr	r3, [pc, #44]	; (4118 <xPortStartScheduler+0x70>)
    40ec:	4798      	blx	r3
	prvTaskExitError();
    40ee:	4b0b      	ldr	r3, [pc, #44]	; (411c <xPortStartScheduler+0x74>)
    40f0:	4798      	blx	r3
}
    40f2:	2000      	movs	r0, #0
    40f4:	bd70      	pop	{r4, r5, r6, pc}
    40f6:	46c0      	nop			; (mov r8, r8)
    40f8:	e000ed20 	.word	0xe000ed20
    40fc:	e000e010 	.word	0xe000e010
    4100:	e000e018 	.word	0xe000e018
    4104:	00007fad 	.word	0x00007fad
    4108:	0000a915 	.word	0x0000a915
    410c:	e000e014 	.word	0xe000e014
    4110:	2000002c 	.word	0x2000002c
    4114:	00004051 	.word	0x00004051
    4118:	00005c09 	.word	0x00005c09
    411c:	00004029 	.word	0x00004029

00004120 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    4120:	2280      	movs	r2, #128	; 0x80
    4122:	0552      	lsls	r2, r2, #21
    4124:	4b01      	ldr	r3, [pc, #4]	; (412c <vPortYield+0xc>)
    4126:	601a      	str	r2, [r3, #0]
}
    4128:	4770      	bx	lr
    412a:	46c0      	nop			; (mov r8, r8)
    412c:	e000ed04 	.word	0xe000ed04

00004130 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
    4130:	b672      	cpsid	i
    uxCriticalNesting++;
    4132:	4a04      	ldr	r2, [pc, #16]	; (4144 <vPortEnterCritical+0x14>)
    4134:	6813      	ldr	r3, [r2, #0]
    4136:	3301      	adds	r3, #1
    4138:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
    413a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    413e:	f3bf 8f6f 	isb	sy
}
    4142:	4770      	bx	lr
    4144:	2000002c 	.word	0x2000002c

00004148 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    4148:	4b06      	ldr	r3, [pc, #24]	; (4164 <vPortExitCritical+0x1c>)
    414a:	681b      	ldr	r3, [r3, #0]
    414c:	2b00      	cmp	r3, #0
    414e:	d101      	bne.n	4154 <vPortExitCritical+0xc>
    4150:	b672      	cpsid	i
    4152:	e7fe      	b.n	4152 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    4154:	3b01      	subs	r3, #1
    4156:	4a03      	ldr	r2, [pc, #12]	; (4164 <vPortExitCritical+0x1c>)
    4158:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    415a:	2b00      	cmp	r3, #0
    415c:	d100      	bne.n	4160 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
    415e:	b662      	cpsie	i
}
    4160:	4770      	bx	lr
    4162:	46c0      	nop			; (mov r8, r8)
    4164:	2000002c 	.word	0x2000002c

00004168 <ulSetInterruptMaskFromISR>:
	__asm volatile(
    4168:	f3ef 8010 	mrs	r0, PRIMASK
    416c:	b672      	cpsid	i
    416e:	4770      	bx	lr

00004170 <vClearInterruptMaskFromISR>:
	__asm volatile(
    4170:	f380 8810 	msr	PRIMASK, r0
    4174:	4770      	bx	lr
	...

00004180 <PendSV_Handler>:
	__asm volatile
    4180:	f3ef 8009 	mrs	r0, PSP
    4184:	4b0e      	ldr	r3, [pc, #56]	; (41c0 <pxCurrentTCBConst>)
    4186:	681a      	ldr	r2, [r3, #0]
    4188:	3820      	subs	r0, #32
    418a:	6010      	str	r0, [r2, #0]
    418c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    418e:	4644      	mov	r4, r8
    4190:	464d      	mov	r5, r9
    4192:	4656      	mov	r6, sl
    4194:	465f      	mov	r7, fp
    4196:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    4198:	b508      	push	{r3, lr}
    419a:	b672      	cpsid	i
    419c:	f001 fd34 	bl	5c08 <vTaskSwitchContext>
    41a0:	b662      	cpsie	i
    41a2:	bc0c      	pop	{r2, r3}
    41a4:	6811      	ldr	r1, [r2, #0]
    41a6:	6808      	ldr	r0, [r1, #0]
    41a8:	3010      	adds	r0, #16
    41aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    41ac:	46a0      	mov	r8, r4
    41ae:	46a9      	mov	r9, r5
    41b0:	46b2      	mov	sl, r6
    41b2:	46bb      	mov	fp, r7
    41b4:	f380 8809 	msr	PSP, r0
    41b8:	3820      	subs	r0, #32
    41ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    41bc:	4718      	bx	r3
    41be:	46c0      	nop			; (mov r8, r8)

000041c0 <pxCurrentTCBConst>:
    41c0:	200036c4 	.word	0x200036c4

000041c4 <SysTick_Handler>:
{
    41c4:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    41c6:	4b07      	ldr	r3, [pc, #28]	; (41e4 <SysTick_Handler+0x20>)
    41c8:	4798      	blx	r3
    41ca:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
    41cc:	4b06      	ldr	r3, [pc, #24]	; (41e8 <SysTick_Handler+0x24>)
    41ce:	4798      	blx	r3
    41d0:	2800      	cmp	r0, #0
    41d2:	d003      	beq.n	41dc <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    41d4:	2280      	movs	r2, #128	; 0x80
    41d6:	0552      	lsls	r2, r2, #21
    41d8:	4b04      	ldr	r3, [pc, #16]	; (41ec <SysTick_Handler+0x28>)
    41da:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    41dc:	0020      	movs	r0, r4
    41de:	4b04      	ldr	r3, [pc, #16]	; (41f0 <SysTick_Handler+0x2c>)
    41e0:	4798      	blx	r3
}
    41e2:	bd10      	pop	{r4, pc}
    41e4:	00004169 	.word	0x00004169
    41e8:	000058b1 	.word	0x000058b1
    41ec:	e000ed04 	.word	0xe000ed04
    41f0:	00004171 	.word	0x00004171

000041f4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    41f4:	b570      	push	{r4, r5, r6, lr}
    41f6:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    41f8:	0743      	lsls	r3, r0, #29
    41fa:	d002      	beq.n	4202 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    41fc:	2307      	movs	r3, #7
    41fe:	439c      	bics	r4, r3
    4200:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
    4202:	4b18      	ldr	r3, [pc, #96]	; (4264 <pvPortMalloc+0x70>)
    4204:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    4206:	4b18      	ldr	r3, [pc, #96]	; (4268 <pvPortMalloc+0x74>)
    4208:	681b      	ldr	r3, [r3, #0]
    420a:	2b00      	cmp	r3, #0
    420c:	d017      	beq.n	423e <pvPortMalloc+0x4a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    420e:	4b17      	ldr	r3, [pc, #92]	; (426c <pvPortMalloc+0x78>)
    4210:	681a      	ldr	r2, [r3, #0]
    4212:	18a3      	adds	r3, r4, r2
    4214:	4916      	ldr	r1, [pc, #88]	; (4270 <pvPortMalloc+0x7c>)
    4216:	428b      	cmp	r3, r1
    4218:	d818      	bhi.n	424c <pvPortMalloc+0x58>
    421a:	429a      	cmp	r2, r3
    421c:	d216      	bcs.n	424c <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    421e:	4912      	ldr	r1, [pc, #72]	; (4268 <pvPortMalloc+0x74>)
    4220:	680d      	ldr	r5, [r1, #0]
    4222:	18ad      	adds	r5, r5, r2
			xNextFreeByte += xWantedSize;
    4224:	4a11      	ldr	r2, [pc, #68]	; (426c <pvPortMalloc+0x78>)
    4226:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
    4228:	2d00      	cmp	r5, #0
    422a:	d00f      	beq.n	424c <pvPortMalloc+0x58>
    422c:	0022      	movs	r2, r4
    422e:	0029      	movs	r1, r5
    4230:	2094      	movs	r0, #148	; 0x94
    4232:	4b10      	ldr	r3, [pc, #64]	; (4274 <pvPortMalloc+0x80>)
    4234:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
    4236:	4b10      	ldr	r3, [pc, #64]	; (4278 <pvPortMalloc+0x84>)
    4238:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    423a:	0028      	movs	r0, r5
    423c:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    423e:	2207      	movs	r2, #7
    4240:	4b0e      	ldr	r3, [pc, #56]	; (427c <pvPortMalloc+0x88>)
    4242:	3308      	adds	r3, #8
    4244:	4393      	bics	r3, r2
    4246:	4a08      	ldr	r2, [pc, #32]	; (4268 <pvPortMalloc+0x74>)
    4248:	6013      	str	r3, [r2, #0]
    424a:	e7e0      	b.n	420e <pvPortMalloc+0x1a>
		traceMALLOC( pvReturn, xWantedSize );
    424c:	0022      	movs	r2, r4
    424e:	2100      	movs	r1, #0
    4250:	20e8      	movs	r0, #232	; 0xe8
    4252:	4b08      	ldr	r3, [pc, #32]	; (4274 <pvPortMalloc+0x80>)
    4254:	4798      	blx	r3
	( void ) xTaskResumeAll();
    4256:	4b08      	ldr	r3, [pc, #32]	; (4278 <pvPortMalloc+0x84>)
    4258:	4798      	blx	r3
			vApplicationMallocFailedHook();
    425a:	4b09      	ldr	r3, [pc, #36]	; (4280 <pvPortMalloc+0x8c>)
    425c:	4798      	blx	r3
    425e:	2500      	movs	r5, #0
	return pvReturn;
    4260:	e7eb      	b.n	423a <pvPortMalloc+0x46>
    4262:	46c0      	nop			; (mov r8, r8)
    4264:	00005895 	.word	0x00005895
    4268:	200003f4 	.word	0x200003f4
    426c:	200036c0 	.word	0x200036c0
    4270:	000032bf 	.word	0x000032bf
    4274:	00003aed 	.word	0x00003aed
    4278:	00005a3d 	.word	0x00005a3d
    427c:	200003f8 	.word	0x200003f8
    4280:	000085c9 	.word	0x000085c9

00004284 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    4284:	2800      	cmp	r0, #0
    4286:	d001      	beq.n	428c <vPortFree+0x8>
    4288:	b672      	cpsid	i
    428a:	e7fe      	b.n	428a <vPortFree+0x6>
}
    428c:	4770      	bx	lr
	...

00004290 <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    4290:	4b02      	ldr	r3, [pc, #8]	; (429c <xPortGetFreeHeapSize+0xc>)
    4292:	681b      	ldr	r3, [r3, #0]
    4294:	20cb      	movs	r0, #203	; 0xcb
    4296:	0180      	lsls	r0, r0, #6
    4298:	1ac0      	subs	r0, r0, r3
}
    429a:	4770      	bx	lr
    429c:	200036c0 	.word	0x200036c0

000042a0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    42a0:	b510      	push	{r4, lr}
    42a2:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    42a4:	4b03      	ldr	r3, [pc, #12]	; (42b4 <prvIsQueueEmpty+0x14>)
    42a6:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    42a8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    42aa:	4b03      	ldr	r3, [pc, #12]	; (42b8 <prvIsQueueEmpty+0x18>)
    42ac:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    42ae:	4260      	negs	r0, r4
    42b0:	4160      	adcs	r0, r4

	return xReturn;
}
    42b2:	bd10      	pop	{r4, pc}
    42b4:	00004131 	.word	0x00004131
    42b8:	00004149 	.word	0x00004149

000042bc <prvCopyDataToQueue>:
{
    42bc:	b570      	push	{r4, r5, r6, lr}
    42be:	0004      	movs	r4, r0
    42c0:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    42c2:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    42c4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    42c6:	2a00      	cmp	r2, #0
    42c8:	d10b      	bne.n	42e2 <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
    42ca:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    42cc:	6823      	ldr	r3, [r4, #0]
    42ce:	4283      	cmp	r3, r0
    42d0:	d104      	bne.n	42dc <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    42d2:	6860      	ldr	r0, [r4, #4]
    42d4:	4b16      	ldr	r3, [pc, #88]	; (4330 <prvCopyDataToQueue+0x74>)
    42d6:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    42d8:	2300      	movs	r3, #0
    42da:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    42dc:	3501      	adds	r5, #1
    42de:	63a5      	str	r5, [r4, #56]	; 0x38
}
    42e0:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    42e2:	2e00      	cmp	r6, #0
    42e4:	d10e      	bne.n	4304 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    42e6:	6880      	ldr	r0, [r0, #8]
    42e8:	4b12      	ldr	r3, [pc, #72]	; (4334 <prvCopyDataToQueue+0x78>)
    42ea:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    42ec:	68a3      	ldr	r3, [r4, #8]
    42ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
    42f0:	4694      	mov	ip, r2
    42f2:	4463      	add	r3, ip
    42f4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
    42f6:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    42f8:	6862      	ldr	r2, [r4, #4]
    42fa:	4293      	cmp	r3, r2
    42fc:	d3ee      	bcc.n	42dc <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    42fe:	6823      	ldr	r3, [r4, #0]
    4300:	60a3      	str	r3, [r4, #8]
    4302:	e7eb      	b.n	42dc <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4304:	68c0      	ldr	r0, [r0, #12]
    4306:	4b0b      	ldr	r3, [pc, #44]	; (4334 <prvCopyDataToQueue+0x78>)
    4308:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    430a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    430c:	425b      	negs	r3, r3
    430e:	68e2      	ldr	r2, [r4, #12]
    4310:	18d2      	adds	r2, r2, r3
    4312:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    4314:	6821      	ldr	r1, [r4, #0]
    4316:	428a      	cmp	r2, r1
    4318:	d203      	bcs.n	4322 <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    431a:	6862      	ldr	r2, [r4, #4]
    431c:	4694      	mov	ip, r2
    431e:	4463      	add	r3, ip
    4320:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    4322:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    4324:	2e02      	cmp	r6, #2
    4326:	d1d9      	bne.n	42dc <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    4328:	4285      	cmp	r5, r0
    432a:	d0d7      	beq.n	42dc <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
    432c:	3d01      	subs	r5, #1
    432e:	e7d5      	b.n	42dc <prvCopyDataToQueue+0x20>
    4330:	0000618d 	.word	0x0000618d
    4334:	0000864d 	.word	0x0000864d

00004338 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    4338:	b5f0      	push	{r4, r5, r6, r7, lr}
    433a:	46ce      	mov	lr, r9
    433c:	4647      	mov	r7, r8
    433e:	b580      	push	{r7, lr}
    4340:	b083      	sub	sp, #12
    4342:	9001      	str	r0, [sp, #4]
    4344:	9100      	str	r1, [sp, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    4346:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    4348:	2c00      	cmp	r4, #0
    434a:	d005      	beq.n	4358 <prvNotifyQueueSetContainer+0x20>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    434c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    434e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4350:	429a      	cmp	r2, r3
    4352:	d303      	bcc.n	435c <prvNotifyQueueSetContainer+0x24>
    4354:	b672      	cpsid	i
    4356:	e7fe      	b.n	4356 <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer );
    4358:	b672      	cpsid	i
    435a:	e7fe      	b.n	435a <prvNotifyQueueSetContainer+0x22>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    435c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    435e:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    4360:	4293      	cmp	r3, r2
    4362:	d805      	bhi.n	4370 <prvNotifyQueueSetContainer+0x38>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    4364:	0030      	movs	r0, r6
    4366:	b003      	add	sp, #12
    4368:	bc0c      	pop	{r2, r3}
    436a:	4690      	mov	r8, r2
    436c:	4699      	mov	r9, r3
    436e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    4370:	2345      	movs	r3, #69	; 0x45
    4372:	5ce5      	ldrb	r5, [r4, r3]
    4374:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND( pxQueueSetContainer );
    4376:	4b2c      	ldr	r3, [pc, #176]	; (4428 <prvNotifyQueueSetContainer+0xf0>)
    4378:	4798      	blx	r3
    437a:	4b2c      	ldr	r3, [pc, #176]	; (442c <prvNotifyQueueSetContainer+0xf4>)
    437c:	4798      	blx	r3
    437e:	4b2c      	ldr	r3, [pc, #176]	; (4430 <prvNotifyQueueSetContainer+0xf8>)
    4380:	881b      	ldrh	r3, [r3, #0]
    4382:	4203      	tst	r3, r0
    4384:	d01e      	beq.n	43c4 <prvNotifyQueueSetContainer+0x8c>
    4386:	0020      	movs	r0, r4
    4388:	4b2a      	ldr	r3, [pc, #168]	; (4434 <prvNotifyQueueSetContainer+0xfc>)
    438a:	4798      	blx	r3
    438c:	4b28      	ldr	r3, [pc, #160]	; (4430 <prvNotifyQueueSetContainer+0xf8>)
    438e:	881b      	ldrh	r3, [r3, #0]
    4390:	4203      	tst	r3, r0
    4392:	d017      	beq.n	43c4 <prvNotifyQueueSetContainer+0x8c>
    4394:	3625      	adds	r6, #37	; 0x25
    4396:	9b00      	ldr	r3, [sp, #0]
    4398:	2b00      	cmp	r3, #0
    439a:	d106      	bne.n	43aa <prvNotifyQueueSetContainer+0x72>
    439c:	0020      	movs	r0, r4
    439e:	4b26      	ldr	r3, [pc, #152]	; (4438 <prvNotifyQueueSetContainer+0x100>)
    43a0:	4798      	blx	r3
    43a2:	4b26      	ldr	r3, [pc, #152]	; (443c <prvNotifyQueueSetContainer+0x104>)
    43a4:	5c1e      	ldrb	r6, [r3, r0]
    43a6:	3620      	adds	r6, #32
    43a8:	b2f6      	uxtb	r6, r6
    43aa:	0020      	movs	r0, r4
    43ac:	4b22      	ldr	r3, [pc, #136]	; (4438 <prvNotifyQueueSetContainer+0x100>)
    43ae:	4798      	blx	r3
    43b0:	4b22      	ldr	r3, [pc, #136]	; (443c <prvNotifyQueueSetContainer+0x104>)
    43b2:	5c1f      	ldrb	r7, [r3, r0]
    43b4:	0020      	movs	r0, r4
    43b6:	4b22      	ldr	r3, [pc, #136]	; (4440 <prvNotifyQueueSetContainer+0x108>)
    43b8:	4798      	blx	r3
    43ba:	b2c2      	uxtb	r2, r0
    43bc:	0039      	movs	r1, r7
    43be:	0030      	movs	r0, r6
    43c0:	4b20      	ldr	r3, [pc, #128]	; (4444 <prvNotifyQueueSetContainer+0x10c>)
    43c2:	4798      	blx	r3
    43c4:	0020      	movs	r0, r4
    43c6:	4f1c      	ldr	r7, [pc, #112]	; (4438 <prvNotifyQueueSetContainer+0x100>)
    43c8:	47b8      	blx	r7
    43ca:	4e1c      	ldr	r6, [pc, #112]	; (443c <prvNotifyQueueSetContainer+0x104>)
    43cc:	5c33      	ldrb	r3, [r6, r0]
    43ce:	4698      	mov	r8, r3
    43d0:	0020      	movs	r0, r4
    43d2:	4b1b      	ldr	r3, [pc, #108]	; (4440 <prvNotifyQueueSetContainer+0x108>)
    43d4:	4798      	blx	r3
    43d6:	b2c3      	uxtb	r3, r0
    43d8:	4699      	mov	r9, r3
    43da:	0020      	movs	r0, r4
    43dc:	47b8      	blx	r7
    43de:	5c33      	ldrb	r3, [r6, r0]
    43e0:	2b02      	cmp	r3, #2
    43e2:	d019      	beq.n	4418 <prvNotifyQueueSetContainer+0xe0>
    43e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    43e6:	3201      	adds	r2, #1
    43e8:	b2d2      	uxtb	r2, r2
    43ea:	4649      	mov	r1, r9
    43ec:	4640      	mov	r0, r8
    43ee:	4b16      	ldr	r3, [pc, #88]	; (4448 <prvNotifyQueueSetContainer+0x110>)
    43f0:	4798      	blx	r3
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    43f2:	9a00      	ldr	r2, [sp, #0]
    43f4:	a901      	add	r1, sp, #4
    43f6:	0020      	movs	r0, r4
    43f8:	4b14      	ldr	r3, [pc, #80]	; (444c <prvNotifyQueueSetContainer+0x114>)
    43fa:	4798      	blx	r3
    43fc:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
    43fe:	1c6b      	adds	r3, r5, #1
    4400:	d10c      	bne.n	441c <prvNotifyQueueSetContainer+0xe4>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    4402:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4404:	2b00      	cmp	r3, #0
    4406:	d0ad      	beq.n	4364 <prvNotifyQueueSetContainer+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    4408:	0020      	movs	r0, r4
    440a:	3024      	adds	r0, #36	; 0x24
    440c:	4b10      	ldr	r3, [pc, #64]	; (4450 <prvNotifyQueueSetContainer+0x118>)
    440e:	4798      	blx	r3
    4410:	2800      	cmp	r0, #0
    4412:	d0a7      	beq.n	4364 <prvNotifyQueueSetContainer+0x2c>
						xReturn = pdTRUE;
    4414:	2601      	movs	r6, #1
    4416:	e7a5      	b.n	4364 <prvNotifyQueueSetContainer+0x2c>
			traceQUEUE_SEND( pxQueueSetContainer );
    4418:	2200      	movs	r2, #0
    441a:	e7e6      	b.n	43ea <prvNotifyQueueSetContainer+0xb2>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    441c:	3501      	adds	r5, #1
    441e:	b26d      	sxtb	r5, r5
    4420:	2345      	movs	r3, #69	; 0x45
    4422:	54e5      	strb	r5, [r4, r3]
    4424:	e79e      	b.n	4364 <prvNotifyQueueSetContainer+0x2c>
    4426:	46c0      	nop			; (mov r8, r8)
    4428:	00002f81 	.word	0x00002f81
    442c:	00002ec9 	.word	0x00002ec9
    4430:	20000024 	.word	0x20000024
    4434:	00002f2d 	.word	0x00002f2d
    4438:	00002ead 	.word	0x00002ead
    443c:	2000001c 	.word	0x2000001c
    4440:	00002f1d 	.word	0x00002f1d
    4444:	00003bb9 	.word	0x00003bb9
    4448:	0000368d 	.word	0x0000368d
    444c:	000042bd 	.word	0x000042bd
    4450:	00005eed 	.word	0x00005eed

00004454 <prvCopyDataFromQueue>:
{
    4454:	b510      	push	{r4, lr}
    4456:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    4458:	6c02      	ldr	r2, [r0, #64]	; 0x40
    445a:	2a00      	cmp	r2, #0
    445c:	d00b      	beq.n	4476 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    445e:	68c3      	ldr	r3, [r0, #12]
    4460:	189b      	adds	r3, r3, r2
    4462:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    4464:	6841      	ldr	r1, [r0, #4]
    4466:	428b      	cmp	r3, r1
    4468:	d301      	bcc.n	446e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    446a:	6803      	ldr	r3, [r0, #0]
    446c:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    446e:	68c1      	ldr	r1, [r0, #12]
    4470:	0020      	movs	r0, r4
    4472:	4b01      	ldr	r3, [pc, #4]	; (4478 <prvCopyDataFromQueue+0x24>)
    4474:	4798      	blx	r3
}
    4476:	bd10      	pop	{r4, pc}
    4478:	0000864d 	.word	0x0000864d

0000447c <prvUnlockQueue>:
{
    447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    447e:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
    4480:	4b25      	ldr	r3, [pc, #148]	; (4518 <prvUnlockQueue+0x9c>)
    4482:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    4484:	2345      	movs	r3, #69	; 0x45
    4486:	5cfc      	ldrb	r4, [r7, r3]
    4488:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    448a:	2c00      	cmp	r4, #0
    448c:	dd1c      	ble.n	44c8 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    448e:	4e23      	ldr	r6, [pc, #140]	; (451c <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4490:	4d23      	ldr	r5, [pc, #140]	; (4520 <prvUnlockQueue+0xa4>)
    4492:	e00b      	b.n	44ac <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4496:	2b00      	cmp	r3, #0
    4498:	d016      	beq.n	44c8 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    449a:	0038      	movs	r0, r7
    449c:	3024      	adds	r0, #36	; 0x24
    449e:	47a8      	blx	r5
    44a0:	2800      	cmp	r0, #0
    44a2:	d10e      	bne.n	44c2 <prvUnlockQueue+0x46>
    44a4:	3c01      	subs	r4, #1
    44a6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    44a8:	2c00      	cmp	r4, #0
    44aa:	d00d      	beq.n	44c8 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    44ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    44ae:	2b00      	cmp	r3, #0
    44b0:	d0f0      	beq.n	4494 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    44b2:	2100      	movs	r1, #0
    44b4:	0038      	movs	r0, r7
    44b6:	47b0      	blx	r6
    44b8:	2800      	cmp	r0, #0
    44ba:	d0f3      	beq.n	44a4 <prvUnlockQueue+0x28>
						vTaskMissedYield();
    44bc:	4b19      	ldr	r3, [pc, #100]	; (4524 <prvUnlockQueue+0xa8>)
    44be:	4798      	blx	r3
    44c0:	e7f0      	b.n	44a4 <prvUnlockQueue+0x28>
							vTaskMissedYield();
    44c2:	4b18      	ldr	r3, [pc, #96]	; (4524 <prvUnlockQueue+0xa8>)
    44c4:	4798      	blx	r3
    44c6:	e7ed      	b.n	44a4 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
    44c8:	22ff      	movs	r2, #255	; 0xff
    44ca:	2345      	movs	r3, #69	; 0x45
    44cc:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    44ce:	4b16      	ldr	r3, [pc, #88]	; (4528 <prvUnlockQueue+0xac>)
    44d0:	4798      	blx	r3
	taskENTER_CRITICAL();
    44d2:	4b11      	ldr	r3, [pc, #68]	; (4518 <prvUnlockQueue+0x9c>)
    44d4:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    44d6:	2344      	movs	r3, #68	; 0x44
    44d8:	5cfc      	ldrb	r4, [r7, r3]
    44da:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    44dc:	2c00      	cmp	r4, #0
    44de:	dd14      	ble.n	450a <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    44e0:	693b      	ldr	r3, [r7, #16]
    44e2:	2b00      	cmp	r3, #0
    44e4:	d011      	beq.n	450a <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    44e6:	003d      	movs	r5, r7
    44e8:	3510      	adds	r5, #16
    44ea:	4e0d      	ldr	r6, [pc, #52]	; (4520 <prvUnlockQueue+0xa4>)
    44ec:	e006      	b.n	44fc <prvUnlockQueue+0x80>
    44ee:	3c01      	subs	r4, #1
    44f0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    44f2:	2c00      	cmp	r4, #0
    44f4:	d009      	beq.n	450a <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    44f6:	693b      	ldr	r3, [r7, #16]
    44f8:	2b00      	cmp	r3, #0
    44fa:	d006      	beq.n	450a <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    44fc:	0028      	movs	r0, r5
    44fe:	47b0      	blx	r6
    4500:	2800      	cmp	r0, #0
    4502:	d0f4      	beq.n	44ee <prvUnlockQueue+0x72>
					vTaskMissedYield();
    4504:	4b07      	ldr	r3, [pc, #28]	; (4524 <prvUnlockQueue+0xa8>)
    4506:	4798      	blx	r3
    4508:	e7f1      	b.n	44ee <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
    450a:	22ff      	movs	r2, #255	; 0xff
    450c:	2344      	movs	r3, #68	; 0x44
    450e:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    4510:	4b05      	ldr	r3, [pc, #20]	; (4528 <prvUnlockQueue+0xac>)
    4512:	4798      	blx	r3
}
    4514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4516:	46c0      	nop			; (mov r8, r8)
    4518:	00004131 	.word	0x00004131
    451c:	00004339 	.word	0x00004339
    4520:	00005eed 	.word	0x00005eed
    4524:	00006029 	.word	0x00006029
    4528:	00004149 	.word	0x00004149

0000452c <xQueueGenericReset>:
{
    452c:	b570      	push	{r4, r5, r6, lr}
    452e:	0004      	movs	r4, r0
    4530:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    4532:	2800      	cmp	r0, #0
    4534:	d021      	beq.n	457a <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
    4536:	4b17      	ldr	r3, [pc, #92]	; (4594 <xQueueGenericReset+0x68>)
    4538:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    453a:	6822      	ldr	r2, [r4, #0]
    453c:	6c21      	ldr	r1, [r4, #64]	; 0x40
    453e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4540:	434b      	muls	r3, r1
    4542:	18d0      	adds	r0, r2, r3
    4544:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    4546:	2000      	movs	r0, #0
    4548:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    454a:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    454c:	1a5b      	subs	r3, r3, r1
    454e:	18d3      	adds	r3, r2, r3
    4550:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    4552:	23ff      	movs	r3, #255	; 0xff
    4554:	2244      	movs	r2, #68	; 0x44
    4556:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    4558:	3201      	adds	r2, #1
    455a:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
    455c:	2d00      	cmp	r5, #0
    455e:	d111      	bne.n	4584 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4560:	6923      	ldr	r3, [r4, #16]
    4562:	2b00      	cmp	r3, #0
    4564:	d005      	beq.n	4572 <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4566:	0020      	movs	r0, r4
    4568:	3010      	adds	r0, #16
    456a:	4b0b      	ldr	r3, [pc, #44]	; (4598 <xQueueGenericReset+0x6c>)
    456c:	4798      	blx	r3
    456e:	2800      	cmp	r0, #0
    4570:	d105      	bne.n	457e <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
    4572:	4b0a      	ldr	r3, [pc, #40]	; (459c <xQueueGenericReset+0x70>)
    4574:	4798      	blx	r3
}
    4576:	2001      	movs	r0, #1
    4578:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    457a:	b672      	cpsid	i
    457c:	e7fe      	b.n	457c <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
    457e:	4b08      	ldr	r3, [pc, #32]	; (45a0 <xQueueGenericReset+0x74>)
    4580:	4798      	blx	r3
    4582:	e7f6      	b.n	4572 <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    4584:	0020      	movs	r0, r4
    4586:	3010      	adds	r0, #16
    4588:	4d06      	ldr	r5, [pc, #24]	; (45a4 <xQueueGenericReset+0x78>)
    458a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    458c:	0020      	movs	r0, r4
    458e:	3024      	adds	r0, #36	; 0x24
    4590:	47a8      	blx	r5
    4592:	e7ee      	b.n	4572 <xQueueGenericReset+0x46>
    4594:	00004131 	.word	0x00004131
    4598:	00005eed 	.word	0x00005eed
    459c:	00004149 	.word	0x00004149
    45a0:	00004121 	.word	0x00004121
    45a4:	00003f9d 	.word	0x00003f9d

000045a8 <xQueueGenericCreate>:
	{
    45a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45aa:	0006      	movs	r6, r0
    45ac:	000d      	movs	r5, r1
    45ae:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    45b0:	2800      	cmp	r0, #0
    45b2:	d101      	bne.n	45b8 <xQueueGenericCreate+0x10>
    45b4:	b672      	cpsid	i
    45b6:	e7fe      	b.n	45b6 <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    45b8:	0008      	movs	r0, r1
    45ba:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    45bc:	3054      	adds	r0, #84	; 0x54
    45be:	4b38      	ldr	r3, [pc, #224]	; (46a0 <xQueueGenericCreate+0xf8>)
    45c0:	4798      	blx	r3
    45c2:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    45c4:	d05b      	beq.n	467e <xQueueGenericCreate+0xd6>
	if( uxItemSize == ( UBaseType_t ) 0 )
    45c6:	2d00      	cmp	r5, #0
    45c8:	d13b      	bne.n	4642 <xQueueGenericCreate+0x9a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    45ca:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    45cc:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    45ce:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    45d0:	2101      	movs	r1, #1
    45d2:	0020      	movs	r0, r4
    45d4:	4b33      	ldr	r3, [pc, #204]	; (46a4 <xQueueGenericCreate+0xfc>)
    45d6:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    45d8:	2350      	movs	r3, #80	; 0x50
    45da:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
    45dc:	2300      	movs	r3, #0
    45de:	64a3      	str	r3, [r4, #72]	; 0x48
	traceQUEUE_CREATE( pxNewQueue );
    45e0:	0020      	movs	r0, r4
    45e2:	4e31      	ldr	r6, [pc, #196]	; (46a8 <xQueueGenericCreate+0x100>)
    45e4:	47b0      	blx	r6
    45e6:	4d31      	ldr	r5, [pc, #196]	; (46ac <xQueueGenericCreate+0x104>)
    45e8:	5c28      	ldrb	r0, [r5, r0]
    45ea:	4b31      	ldr	r3, [pc, #196]	; (46b0 <xQueueGenericCreate+0x108>)
    45ec:	4798      	blx	r3
    45ee:	b281      	uxth	r1, r0
    45f0:	0020      	movs	r0, r4
    45f2:	4b30      	ldr	r3, [pc, #192]	; (46b4 <xQueueGenericCreate+0x10c>)
    45f4:	4798      	blx	r3
    45f6:	4b30      	ldr	r3, [pc, #192]	; (46b8 <xQueueGenericCreate+0x110>)
    45f8:	8819      	ldrh	r1, [r3, #0]
    45fa:	0020      	movs	r0, r4
    45fc:	4b2f      	ldr	r3, [pc, #188]	; (46bc <xQueueGenericCreate+0x114>)
    45fe:	4798      	blx	r3
    4600:	0020      	movs	r0, r4
    4602:	47b0      	blx	r6
    4604:	5c2d      	ldrb	r5, [r5, r0]
    4606:	0020      	movs	r0, r4
    4608:	4b2d      	ldr	r3, [pc, #180]	; (46c0 <xQueueGenericCreate+0x118>)
    460a:	4798      	blx	r3
    460c:	b2c1      	uxtb	r1, r0
    460e:	0028      	movs	r0, r5
    4610:	4b2c      	ldr	r3, [pc, #176]	; (46c4 <xQueueGenericCreate+0x11c>)
    4612:	4798      	blx	r3
    4614:	4b2c      	ldr	r3, [pc, #176]	; (46c8 <xQueueGenericCreate+0x120>)
    4616:	4798      	blx	r3
    4618:	4b2c      	ldr	r3, [pc, #176]	; (46cc <xQueueGenericCreate+0x124>)
    461a:	4798      	blx	r3
    461c:	4b2c      	ldr	r3, [pc, #176]	; (46d0 <xQueueGenericCreate+0x128>)
    461e:	881b      	ldrh	r3, [r3, #0]
    4620:	4203      	tst	r3, r0
    4622:	d112      	bne.n	464a <xQueueGenericCreate+0xa2>
    4624:	0020      	movs	r0, r4
    4626:	4b20      	ldr	r3, [pc, #128]	; (46a8 <xQueueGenericCreate+0x100>)
    4628:	4798      	blx	r3
    462a:	4b20      	ldr	r3, [pc, #128]	; (46ac <xQueueGenericCreate+0x104>)
    462c:	5c1d      	ldrb	r5, [r3, r0]
    462e:	0020      	movs	r0, r4
    4630:	4b23      	ldr	r3, [pc, #140]	; (46c0 <xQueueGenericCreate+0x118>)
    4632:	4798      	blx	r3
    4634:	b2c1      	uxtb	r1, r0
    4636:	2200      	movs	r2, #0
    4638:	0028      	movs	r0, r5
    463a:	4b26      	ldr	r3, [pc, #152]	; (46d4 <xQueueGenericCreate+0x12c>)
    463c:	4798      	blx	r3
	}
    463e:	0020      	movs	r0, r4
    4640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    4642:	0003      	movs	r3, r0
    4644:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    4646:	6003      	str	r3, [r0, #0]
    4648:	e7c0      	b.n	45cc <xQueueGenericCreate+0x24>
	traceQUEUE_CREATE( pxNewQueue );
    464a:	0020      	movs	r0, r4
    464c:	4b22      	ldr	r3, [pc, #136]	; (46d8 <xQueueGenericCreate+0x130>)
    464e:	4798      	blx	r3
    4650:	4b1f      	ldr	r3, [pc, #124]	; (46d0 <xQueueGenericCreate+0x128>)
    4652:	881b      	ldrh	r3, [r3, #0]
    4654:	4203      	tst	r3, r0
    4656:	d0e5      	beq.n	4624 <xQueueGenericCreate+0x7c>
    4658:	0020      	movs	r0, r4
    465a:	4f13      	ldr	r7, [pc, #76]	; (46a8 <xQueueGenericCreate+0x100>)
    465c:	47b8      	blx	r7
    465e:	4e13      	ldr	r6, [pc, #76]	; (46ac <xQueueGenericCreate+0x104>)
    4660:	5c35      	ldrb	r5, [r6, r0]
    4662:	3518      	adds	r5, #24
    4664:	b2ed      	uxtb	r5, r5
    4666:	0020      	movs	r0, r4
    4668:	47b8      	blx	r7
    466a:	5c36      	ldrb	r6, [r6, r0]
    466c:	0020      	movs	r0, r4
    466e:	4b14      	ldr	r3, [pc, #80]	; (46c0 <xQueueGenericCreate+0x118>)
    4670:	4798      	blx	r3
    4672:	b2c2      	uxtb	r2, r0
    4674:	0031      	movs	r1, r6
    4676:	0028      	movs	r0, r5
    4678:	4b18      	ldr	r3, [pc, #96]	; (46dc <xQueueGenericCreate+0x134>)
    467a:	4798      	blx	r3
    467c:	e7d2      	b.n	4624 <xQueueGenericCreate+0x7c>
			traceQUEUE_CREATE_FAILED( ucQueueType );
    467e:	4b12      	ldr	r3, [pc, #72]	; (46c8 <xQueueGenericCreate+0x120>)
    4680:	4798      	blx	r3
    4682:	4b12      	ldr	r3, [pc, #72]	; (46cc <xQueueGenericCreate+0x124>)
    4684:	4798      	blx	r3
    4686:	4b12      	ldr	r3, [pc, #72]	; (46d0 <xQueueGenericCreate+0x128>)
    4688:	881b      	ldrh	r3, [r3, #0]
    468a:	4203      	tst	r3, r0
    468c:	d0d7      	beq.n	463e <xQueueGenericCreate+0x96>
    468e:	4b07      	ldr	r3, [pc, #28]	; (46ac <xQueueGenericCreate+0x104>)
    4690:	5dd8      	ldrb	r0, [r3, r7]
    4692:	3040      	adds	r0, #64	; 0x40
    4694:	b2c0      	uxtb	r0, r0
    4696:	2100      	movs	r1, #0
    4698:	4b11      	ldr	r3, [pc, #68]	; (46e0 <xQueueGenericCreate+0x138>)
    469a:	4798      	blx	r3
    469c:	e7cf      	b.n	463e <xQueueGenericCreate+0x96>
    469e:	46c0      	nop			; (mov r8, r8)
    46a0:	000041f5 	.word	0x000041f5
    46a4:	0000452d 	.word	0x0000452d
    46a8:	00002ead 	.word	0x00002ead
    46ac:	2000001c 	.word	0x2000001c
    46b0:	00003725 	.word	0x00003725
    46b4:	00002f3d 	.word	0x00002f3d
    46b8:	20000022 	.word	0x20000022
    46bc:	00002f5d 	.word	0x00002f5d
    46c0:	00002f1d 	.word	0x00002f1d
    46c4:	000035b5 	.word	0x000035b5
    46c8:	00002f81 	.word	0x00002f81
    46cc:	00002ec9 	.word	0x00002ec9
    46d0:	20000024 	.word	0x20000024
    46d4:	0000368d 	.word	0x0000368d
    46d8:	00002f2d 	.word	0x00002f2d
    46dc:	00003bb9 	.word	0x00003bb9
    46e0:	00003d55 	.word	0x00003d55

000046e4 <xQueueGenericSend>:
{
    46e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    46e6:	46ce      	mov	lr, r9
    46e8:	4647      	mov	r7, r8
    46ea:	b580      	push	{r7, lr}
    46ec:	b085      	sub	sp, #20
    46ee:	0004      	movs	r4, r0
    46f0:	9100      	str	r1, [sp, #0]
    46f2:	9201      	str	r2, [sp, #4]
    46f4:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    46f6:	2800      	cmp	r0, #0
    46f8:	d00d      	beq.n	4716 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    46fa:	9b00      	ldr	r3, [sp, #0]
    46fc:	2b00      	cmp	r3, #0
    46fe:	d00c      	beq.n	471a <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    4700:	2d02      	cmp	r5, #2
    4702:	d00f      	beq.n	4724 <xQueueGenericSend+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    4704:	4bab      	ldr	r3, [pc, #684]	; (49b4 <xQueueGenericSend+0x2d0>)
    4706:	4798      	blx	r3
    4708:	2800      	cmp	r0, #0
    470a:	d110      	bne.n	472e <xQueueGenericSend+0x4a>
    470c:	9b01      	ldr	r3, [sp, #4]
    470e:	2b00      	cmp	r3, #0
    4710:	d010      	beq.n	4734 <xQueueGenericSend+0x50>
    4712:	b672      	cpsid	i
    4714:	e7fe      	b.n	4714 <xQueueGenericSend+0x30>
	configASSERT( pxQueue );
    4716:	b672      	cpsid	i
    4718:	e7fe      	b.n	4718 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    471a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    471c:	2b00      	cmp	r3, #0
    471e:	d0ef      	beq.n	4700 <xQueueGenericSend+0x1c>
    4720:	b672      	cpsid	i
    4722:	e7fe      	b.n	4722 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    4724:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4726:	2b01      	cmp	r3, #1
    4728:	d0ec      	beq.n	4704 <xQueueGenericSend+0x20>
    472a:	b672      	cpsid	i
    472c:	e7fe      	b.n	472c <xQueueGenericSend+0x48>
    472e:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    4730:	4ea1      	ldr	r6, [pc, #644]	; (49b8 <xQueueGenericSend+0x2d4>)
    4732:	e0bc      	b.n	48ae <xQueueGenericSend+0x1ca>
    4734:	2700      	movs	r7, #0
    4736:	e7fb      	b.n	4730 <xQueueGenericSend+0x4c>
				traceQUEUE_SEND( pxQueue );
    4738:	4ba0      	ldr	r3, [pc, #640]	; (49bc <xQueueGenericSend+0x2d8>)
    473a:	4798      	blx	r3
    473c:	4ba0      	ldr	r3, [pc, #640]	; (49c0 <xQueueGenericSend+0x2dc>)
    473e:	4798      	blx	r3
    4740:	4ba0      	ldr	r3, [pc, #640]	; (49c4 <xQueueGenericSend+0x2e0>)
    4742:	881b      	ldrh	r3, [r3, #0]
    4744:	4203      	tst	r3, r0
    4746:	d01d      	beq.n	4784 <xQueueGenericSend+0xa0>
    4748:	0020      	movs	r0, r4
    474a:	4b9f      	ldr	r3, [pc, #636]	; (49c8 <xQueueGenericSend+0x2e4>)
    474c:	4798      	blx	r3
    474e:	4b9d      	ldr	r3, [pc, #628]	; (49c4 <xQueueGenericSend+0x2e0>)
    4750:	881b      	ldrh	r3, [r3, #0]
    4752:	4203      	tst	r3, r0
    4754:	d016      	beq.n	4784 <xQueueGenericSend+0xa0>
    4756:	2725      	movs	r7, #37	; 0x25
    4758:	2d00      	cmp	r5, #0
    475a:	d106      	bne.n	476a <xQueueGenericSend+0x86>
    475c:	0020      	movs	r0, r4
    475e:	4b9b      	ldr	r3, [pc, #620]	; (49cc <xQueueGenericSend+0x2e8>)
    4760:	4798      	blx	r3
    4762:	4b9b      	ldr	r3, [pc, #620]	; (49d0 <xQueueGenericSend+0x2ec>)
    4764:	5c1f      	ldrb	r7, [r3, r0]
    4766:	3720      	adds	r7, #32
    4768:	b2ff      	uxtb	r7, r7
    476a:	0020      	movs	r0, r4
    476c:	4b97      	ldr	r3, [pc, #604]	; (49cc <xQueueGenericSend+0x2e8>)
    476e:	4798      	blx	r3
    4770:	4b97      	ldr	r3, [pc, #604]	; (49d0 <xQueueGenericSend+0x2ec>)
    4772:	5c1e      	ldrb	r6, [r3, r0]
    4774:	0020      	movs	r0, r4
    4776:	4b97      	ldr	r3, [pc, #604]	; (49d4 <xQueueGenericSend+0x2f0>)
    4778:	4798      	blx	r3
    477a:	b2c2      	uxtb	r2, r0
    477c:	0031      	movs	r1, r6
    477e:	0038      	movs	r0, r7
    4780:	4b95      	ldr	r3, [pc, #596]	; (49d8 <xQueueGenericSend+0x2f4>)
    4782:	4798      	blx	r3
    4784:	0020      	movs	r0, r4
    4786:	4e91      	ldr	r6, [pc, #580]	; (49cc <xQueueGenericSend+0x2e8>)
    4788:	47b0      	blx	r6
    478a:	4f91      	ldr	r7, [pc, #580]	; (49d0 <xQueueGenericSend+0x2ec>)
    478c:	5c3b      	ldrb	r3, [r7, r0]
    478e:	4698      	mov	r8, r3
    4790:	0020      	movs	r0, r4
    4792:	4b90      	ldr	r3, [pc, #576]	; (49d4 <xQueueGenericSend+0x2f0>)
    4794:	4798      	blx	r3
    4796:	b2c3      	uxtb	r3, r0
    4798:	4699      	mov	r9, r3
    479a:	0020      	movs	r0, r4
    479c:	47b0      	blx	r6
    479e:	5c3b      	ldrb	r3, [r7, r0]
    47a0:	2b02      	cmp	r3, #2
    47a2:	d01f      	beq.n	47e4 <xQueueGenericSend+0x100>
    47a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    47a6:	3201      	adds	r2, #1
    47a8:	b2d2      	uxtb	r2, r2
    47aa:	4649      	mov	r1, r9
    47ac:	4640      	mov	r0, r8
    47ae:	4b8b      	ldr	r3, [pc, #556]	; (49dc <xQueueGenericSend+0x2f8>)
    47b0:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    47b2:	002a      	movs	r2, r5
    47b4:	9900      	ldr	r1, [sp, #0]
    47b6:	0020      	movs	r0, r4
    47b8:	4b89      	ldr	r3, [pc, #548]	; (49e0 <xQueueGenericSend+0x2fc>)
    47ba:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    47bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    47be:	2b00      	cmp	r3, #0
    47c0:	d012      	beq.n	47e8 <xQueueGenericSend+0x104>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    47c2:	0029      	movs	r1, r5
    47c4:	0020      	movs	r0, r4
    47c6:	4b87      	ldr	r3, [pc, #540]	; (49e4 <xQueueGenericSend+0x300>)
    47c8:	4798      	blx	r3
    47ca:	2800      	cmp	r0, #0
    47cc:	d001      	beq.n	47d2 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
    47ce:	4b86      	ldr	r3, [pc, #536]	; (49e8 <xQueueGenericSend+0x304>)
    47d0:	4798      	blx	r3
				taskEXIT_CRITICAL();
    47d2:	4b86      	ldr	r3, [pc, #536]	; (49ec <xQueueGenericSend+0x308>)
    47d4:	4798      	blx	r3
				return pdPASS;
    47d6:	2301      	movs	r3, #1
}
    47d8:	0018      	movs	r0, r3
    47da:	b005      	add	sp, #20
    47dc:	bc0c      	pop	{r2, r3}
    47de:	4690      	mov	r8, r2
    47e0:	4699      	mov	r9, r3
    47e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_SEND( pxQueue );
    47e4:	2200      	movs	r2, #0
    47e6:	e7e0      	b.n	47aa <xQueueGenericSend+0xc6>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    47e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    47ea:	2b00      	cmp	r3, #0
    47ec:	d008      	beq.n	4800 <xQueueGenericSend+0x11c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    47ee:	0020      	movs	r0, r4
    47f0:	3024      	adds	r0, #36	; 0x24
    47f2:	4b7f      	ldr	r3, [pc, #508]	; (49f0 <xQueueGenericSend+0x30c>)
    47f4:	4798      	blx	r3
    47f6:	2800      	cmp	r0, #0
    47f8:	d0eb      	beq.n	47d2 <xQueueGenericSend+0xee>
								queueYIELD_IF_USING_PREEMPTION();
    47fa:	4b7b      	ldr	r3, [pc, #492]	; (49e8 <xQueueGenericSend+0x304>)
    47fc:	4798      	blx	r3
    47fe:	e7e8      	b.n	47d2 <xQueueGenericSend+0xee>
						else if( xYieldRequired != pdFALSE )
    4800:	2800      	cmp	r0, #0
    4802:	d0e6      	beq.n	47d2 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
    4804:	4b78      	ldr	r3, [pc, #480]	; (49e8 <xQueueGenericSend+0x304>)
    4806:	4798      	blx	r3
    4808:	e7e3      	b.n	47d2 <xQueueGenericSend+0xee>
					taskEXIT_CRITICAL();
    480a:	4b78      	ldr	r3, [pc, #480]	; (49ec <xQueueGenericSend+0x308>)
    480c:	4798      	blx	r3
					traceQUEUE_SEND_FAILED( pxQueue );
    480e:	4b6b      	ldr	r3, [pc, #428]	; (49bc <xQueueGenericSend+0x2d8>)
    4810:	4798      	blx	r3
    4812:	4b6b      	ldr	r3, [pc, #428]	; (49c0 <xQueueGenericSend+0x2dc>)
    4814:	4798      	blx	r3
    4816:	4b6b      	ldr	r3, [pc, #428]	; (49c4 <xQueueGenericSend+0x2e0>)
    4818:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
    481a:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
    481c:	4202      	tst	r2, r0
    481e:	d0db      	beq.n	47d8 <xQueueGenericSend+0xf4>
    4820:	0020      	movs	r0, r4
    4822:	4b69      	ldr	r3, [pc, #420]	; (49c8 <xQueueGenericSend+0x2e4>)
    4824:	4798      	blx	r3
    4826:	4b67      	ldr	r3, [pc, #412]	; (49c4 <xQueueGenericSend+0x2e0>)
    4828:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
    482a:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
    482c:	4202      	tst	r2, r0
    482e:	d0d3      	beq.n	47d8 <xQueueGenericSend+0xf4>
    4830:	264d      	movs	r6, #77	; 0x4d
    4832:	2d00      	cmp	r5, #0
    4834:	d106      	bne.n	4844 <xQueueGenericSend+0x160>
    4836:	0020      	movs	r0, r4
    4838:	4b64      	ldr	r3, [pc, #400]	; (49cc <xQueueGenericSend+0x2e8>)
    483a:	4798      	blx	r3
    483c:	4b64      	ldr	r3, [pc, #400]	; (49d0 <xQueueGenericSend+0x2ec>)
    483e:	5c1e      	ldrb	r6, [r3, r0]
    4840:	3648      	adds	r6, #72	; 0x48
    4842:	b2f6      	uxtb	r6, r6
    4844:	0020      	movs	r0, r4
    4846:	4b61      	ldr	r3, [pc, #388]	; (49cc <xQueueGenericSend+0x2e8>)
    4848:	4798      	blx	r3
    484a:	4b61      	ldr	r3, [pc, #388]	; (49d0 <xQueueGenericSend+0x2ec>)
    484c:	5c1d      	ldrb	r5, [r3, r0]
    484e:	0020      	movs	r0, r4
    4850:	4b60      	ldr	r3, [pc, #384]	; (49d4 <xQueueGenericSend+0x2f0>)
    4852:	4798      	blx	r3
    4854:	b2c2      	uxtb	r2, r0
    4856:	0029      	movs	r1, r5
    4858:	0030      	movs	r0, r6
    485a:	4b5f      	ldr	r3, [pc, #380]	; (49d8 <xQueueGenericSend+0x2f4>)
    485c:	4798      	blx	r3
					return errQUEUE_FULL;
    485e:	2300      	movs	r3, #0
    4860:	e7ba      	b.n	47d8 <xQueueGenericSend+0xf4>
		prvLockQueue( pxQueue );
    4862:	4b62      	ldr	r3, [pc, #392]	; (49ec <xQueueGenericSend+0x308>)
    4864:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4866:	a901      	add	r1, sp, #4
    4868:	a802      	add	r0, sp, #8
    486a:	4b62      	ldr	r3, [pc, #392]	; (49f4 <xQueueGenericSend+0x310>)
    486c:	4798      	blx	r3
    486e:	2800      	cmp	r0, #0
    4870:	d16e      	bne.n	4950 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
    4872:	4b51      	ldr	r3, [pc, #324]	; (49b8 <xQueueGenericSend+0x2d4>)
    4874:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    4876:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4878:	4699      	mov	r9, r3
    487a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    487c:	4b5b      	ldr	r3, [pc, #364]	; (49ec <xQueueGenericSend+0x308>)
    487e:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    4880:	45b9      	cmp	r9, r7
    4882:	d15f      	bne.n	4944 <xQueueGenericSend+0x260>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    4884:	4b4d      	ldr	r3, [pc, #308]	; (49bc <xQueueGenericSend+0x2d8>)
    4886:	4798      	blx	r3
    4888:	4b4d      	ldr	r3, [pc, #308]	; (49c0 <xQueueGenericSend+0x2dc>)
    488a:	4798      	blx	r3
    488c:	4b4d      	ldr	r3, [pc, #308]	; (49c4 <xQueueGenericSend+0x2e0>)
    488e:	881b      	ldrh	r3, [r3, #0]
    4890:	4203      	tst	r3, r0
    4892:	d134      	bne.n	48fe <xQueueGenericSend+0x21a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    4894:	0020      	movs	r0, r4
    4896:	3010      	adds	r0, #16
    4898:	9901      	ldr	r1, [sp, #4]
    489a:	4b57      	ldr	r3, [pc, #348]	; (49f8 <xQueueGenericSend+0x314>)
    489c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    489e:	0020      	movs	r0, r4
    48a0:	4b56      	ldr	r3, [pc, #344]	; (49fc <xQueueGenericSend+0x318>)
    48a2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    48a4:	4b56      	ldr	r3, [pc, #344]	; (4a00 <xQueueGenericSend+0x31c>)
    48a6:	4798      	blx	r3
    48a8:	2800      	cmp	r0, #0
    48aa:	d048      	beq.n	493e <xQueueGenericSend+0x25a>
    48ac:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    48ae:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    48b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    48b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    48b4:	4293      	cmp	r3, r2
    48b6:	d200      	bcs.n	48ba <xQueueGenericSend+0x1d6>
    48b8:	e73e      	b.n	4738 <xQueueGenericSend+0x54>
    48ba:	2d02      	cmp	r5, #2
    48bc:	d100      	bne.n	48c0 <xQueueGenericSend+0x1dc>
    48be:	e73b      	b.n	4738 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
    48c0:	9b01      	ldr	r3, [sp, #4]
    48c2:	2b00      	cmp	r3, #0
    48c4:	d0a1      	beq.n	480a <xQueueGenericSend+0x126>
				else if( xEntryTimeSet == pdFALSE )
    48c6:	2f00      	cmp	r7, #0
    48c8:	d102      	bne.n	48d0 <xQueueGenericSend+0x1ec>
					vTaskInternalSetTimeOutState( &xTimeOut );
    48ca:	a802      	add	r0, sp, #8
    48cc:	4b4d      	ldr	r3, [pc, #308]	; (4a04 <xQueueGenericSend+0x320>)
    48ce:	4798      	blx	r3
		taskEXIT_CRITICAL();
    48d0:	4b46      	ldr	r3, [pc, #280]	; (49ec <xQueueGenericSend+0x308>)
    48d2:	4798      	blx	r3
		vTaskSuspendAll();
    48d4:	4b4c      	ldr	r3, [pc, #304]	; (4a08 <xQueueGenericSend+0x324>)
    48d6:	4798      	blx	r3
		prvLockQueue( pxQueue );
    48d8:	4b37      	ldr	r3, [pc, #220]	; (49b8 <xQueueGenericSend+0x2d4>)
    48da:	4798      	blx	r3
    48dc:	2344      	movs	r3, #68	; 0x44
    48de:	5ce3      	ldrb	r3, [r4, r3]
    48e0:	b25b      	sxtb	r3, r3
    48e2:	3301      	adds	r3, #1
    48e4:	d102      	bne.n	48ec <xQueueGenericSend+0x208>
    48e6:	2200      	movs	r2, #0
    48e8:	2344      	movs	r3, #68	; 0x44
    48ea:	54e2      	strb	r2, [r4, r3]
    48ec:	2345      	movs	r3, #69	; 0x45
    48ee:	5ce3      	ldrb	r3, [r4, r3]
    48f0:	b25b      	sxtb	r3, r3
    48f2:	3301      	adds	r3, #1
    48f4:	d1b5      	bne.n	4862 <xQueueGenericSend+0x17e>
    48f6:	2200      	movs	r2, #0
    48f8:	2345      	movs	r3, #69	; 0x45
    48fa:	54e2      	strb	r2, [r4, r3]
    48fc:	e7b1      	b.n	4862 <xQueueGenericSend+0x17e>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    48fe:	0020      	movs	r0, r4
    4900:	4b31      	ldr	r3, [pc, #196]	; (49c8 <xQueueGenericSend+0x2e4>)
    4902:	4798      	blx	r3
    4904:	4b2f      	ldr	r3, [pc, #188]	; (49c4 <xQueueGenericSend+0x2e0>)
    4906:	881b      	ldrh	r3, [r3, #0]
    4908:	4203      	tst	r3, r0
    490a:	d0c3      	beq.n	4894 <xQueueGenericSend+0x1b0>
    490c:	2775      	movs	r7, #117	; 0x75
    490e:	2d00      	cmp	r5, #0
    4910:	d106      	bne.n	4920 <xQueueGenericSend+0x23c>
    4912:	0020      	movs	r0, r4
    4914:	4b2d      	ldr	r3, [pc, #180]	; (49cc <xQueueGenericSend+0x2e8>)
    4916:	4798      	blx	r3
    4918:	4b2d      	ldr	r3, [pc, #180]	; (49d0 <xQueueGenericSend+0x2ec>)
    491a:	5c1f      	ldrb	r7, [r3, r0]
    491c:	3770      	adds	r7, #112	; 0x70
    491e:	b2ff      	uxtb	r7, r7
    4920:	0020      	movs	r0, r4
    4922:	4b2a      	ldr	r3, [pc, #168]	; (49cc <xQueueGenericSend+0x2e8>)
    4924:	4798      	blx	r3
    4926:	4b2a      	ldr	r3, [pc, #168]	; (49d0 <xQueueGenericSend+0x2ec>)
    4928:	5c1b      	ldrb	r3, [r3, r0]
    492a:	4699      	mov	r9, r3
    492c:	0020      	movs	r0, r4
    492e:	4b29      	ldr	r3, [pc, #164]	; (49d4 <xQueueGenericSend+0x2f0>)
    4930:	4798      	blx	r3
    4932:	b2c2      	uxtb	r2, r0
    4934:	4649      	mov	r1, r9
    4936:	0038      	movs	r0, r7
    4938:	4b27      	ldr	r3, [pc, #156]	; (49d8 <xQueueGenericSend+0x2f4>)
    493a:	4798      	blx	r3
    493c:	e7aa      	b.n	4894 <xQueueGenericSend+0x1b0>
					portYIELD_WITHIN_API();
    493e:	4b2a      	ldr	r3, [pc, #168]	; (49e8 <xQueueGenericSend+0x304>)
    4940:	4798      	blx	r3
    4942:	e7b3      	b.n	48ac <xQueueGenericSend+0x1c8>
				prvUnlockQueue( pxQueue );
    4944:	0020      	movs	r0, r4
    4946:	4b2d      	ldr	r3, [pc, #180]	; (49fc <xQueueGenericSend+0x318>)
    4948:	4798      	blx	r3
				( void ) xTaskResumeAll();
    494a:	4b2d      	ldr	r3, [pc, #180]	; (4a00 <xQueueGenericSend+0x31c>)
    494c:	4798      	blx	r3
    494e:	e7ad      	b.n	48ac <xQueueGenericSend+0x1c8>
			prvUnlockQueue( pxQueue );
    4950:	0020      	movs	r0, r4
    4952:	4b2a      	ldr	r3, [pc, #168]	; (49fc <xQueueGenericSend+0x318>)
    4954:	4798      	blx	r3
			( void ) xTaskResumeAll();
    4956:	4b2a      	ldr	r3, [pc, #168]	; (4a00 <xQueueGenericSend+0x31c>)
    4958:	4798      	blx	r3
			traceQUEUE_SEND_FAILED( pxQueue );
    495a:	4b18      	ldr	r3, [pc, #96]	; (49bc <xQueueGenericSend+0x2d8>)
    495c:	4798      	blx	r3
    495e:	4b18      	ldr	r3, [pc, #96]	; (49c0 <xQueueGenericSend+0x2dc>)
    4960:	4798      	blx	r3
    4962:	4b18      	ldr	r3, [pc, #96]	; (49c4 <xQueueGenericSend+0x2e0>)
    4964:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
    4966:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
    4968:	4202      	tst	r2, r0
    496a:	d100      	bne.n	496e <xQueueGenericSend+0x28a>
    496c:	e734      	b.n	47d8 <xQueueGenericSend+0xf4>
    496e:	0020      	movs	r0, r4
    4970:	4b15      	ldr	r3, [pc, #84]	; (49c8 <xQueueGenericSend+0x2e4>)
    4972:	4798      	blx	r3
    4974:	4b13      	ldr	r3, [pc, #76]	; (49c4 <xQueueGenericSend+0x2e0>)
    4976:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
    4978:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
    497a:	4202      	tst	r2, r0
    497c:	d100      	bne.n	4980 <xQueueGenericSend+0x29c>
    497e:	e72b      	b.n	47d8 <xQueueGenericSend+0xf4>
    4980:	264d      	movs	r6, #77	; 0x4d
    4982:	2d00      	cmp	r5, #0
    4984:	d106      	bne.n	4994 <xQueueGenericSend+0x2b0>
    4986:	0020      	movs	r0, r4
    4988:	4b10      	ldr	r3, [pc, #64]	; (49cc <xQueueGenericSend+0x2e8>)
    498a:	4798      	blx	r3
    498c:	4b10      	ldr	r3, [pc, #64]	; (49d0 <xQueueGenericSend+0x2ec>)
    498e:	5c1e      	ldrb	r6, [r3, r0]
    4990:	3648      	adds	r6, #72	; 0x48
    4992:	b2f6      	uxtb	r6, r6
    4994:	0020      	movs	r0, r4
    4996:	4b0d      	ldr	r3, [pc, #52]	; (49cc <xQueueGenericSend+0x2e8>)
    4998:	4798      	blx	r3
    499a:	4b0d      	ldr	r3, [pc, #52]	; (49d0 <xQueueGenericSend+0x2ec>)
    499c:	5c1d      	ldrb	r5, [r3, r0]
    499e:	0020      	movs	r0, r4
    49a0:	4b0c      	ldr	r3, [pc, #48]	; (49d4 <xQueueGenericSend+0x2f0>)
    49a2:	4798      	blx	r3
    49a4:	b2c2      	uxtb	r2, r0
    49a6:	0029      	movs	r1, r5
    49a8:	0030      	movs	r0, r6
    49aa:	4b0b      	ldr	r3, [pc, #44]	; (49d8 <xQueueGenericSend+0x2f4>)
    49ac:	4798      	blx	r3
			return errQUEUE_FULL;
    49ae:	2300      	movs	r3, #0
    49b0:	e712      	b.n	47d8 <xQueueGenericSend+0xf4>
    49b2:	46c0      	nop			; (mov r8, r8)
    49b4:	00006055 	.word	0x00006055
    49b8:	00004131 	.word	0x00004131
    49bc:	00002f81 	.word	0x00002f81
    49c0:	00002ec9 	.word	0x00002ec9
    49c4:	20000024 	.word	0x20000024
    49c8:	00002f2d 	.word	0x00002f2d
    49cc:	00002ead 	.word	0x00002ead
    49d0:	2000001c 	.word	0x2000001c
    49d4:	00002f1d 	.word	0x00002f1d
    49d8:	00003bb9 	.word	0x00003bb9
    49dc:	0000368d 	.word	0x0000368d
    49e0:	000042bd 	.word	0x000042bd
    49e4:	00004339 	.word	0x00004339
    49e8:	00004121 	.word	0x00004121
    49ec:	00004149 	.word	0x00004149
    49f0:	00005eed 	.word	0x00005eed
    49f4:	00005fb9 	.word	0x00005fb9
    49f8:	00005e25 	.word	0x00005e25
    49fc:	0000447d 	.word	0x0000447d
    4a00:	00005a3d 	.word	0x00005a3d
    4a04:	00005fa1 	.word	0x00005fa1
    4a08:	00005895 	.word	0x00005895

00004a0c <xQueueCreateMutex>:
	{
    4a0c:	b570      	push	{r4, r5, r6, lr}
    4a0e:	0002      	movs	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    4a10:	2100      	movs	r1, #0
    4a12:	2001      	movs	r0, #1
    4a14:	4b06      	ldr	r3, [pc, #24]	; (4a30 <xQueueCreateMutex+0x24>)
    4a16:	4798      	blx	r3
    4a18:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    4a1a:	d007      	beq.n	4a2c <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
    4a1c:	2300      	movs	r3, #0
    4a1e:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    4a20:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
    4a22:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    4a24:	2200      	movs	r2, #0
    4a26:	2100      	movs	r1, #0
    4a28:	4d02      	ldr	r5, [pc, #8]	; (4a34 <xQueueCreateMutex+0x28>)
    4a2a:	47a8      	blx	r5
	}
    4a2c:	0020      	movs	r0, r4
    4a2e:	bd70      	pop	{r4, r5, r6, pc}
    4a30:	000045a9 	.word	0x000045a9
    4a34:	000046e5 	.word	0x000046e5

00004a38 <xQueueGenericSendFromISR>:
{
    4a38:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a3a:	46de      	mov	lr, fp
    4a3c:	4647      	mov	r7, r8
    4a3e:	b580      	push	{r7, lr}
    4a40:	b083      	sub	sp, #12
    4a42:	0004      	movs	r4, r0
    4a44:	9101      	str	r1, [sp, #4]
    4a46:	0016      	movs	r6, r2
    4a48:	001f      	movs	r7, r3
	configASSERT( pxQueue );
    4a4a:	2800      	cmp	r0, #0
    4a4c:	d02d      	beq.n	4aaa <xQueueGenericSendFromISR+0x72>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    4a4e:	9b01      	ldr	r3, [sp, #4]
    4a50:	2b00      	cmp	r3, #0
    4a52:	d02c      	beq.n	4aae <xQueueGenericSendFromISR+0x76>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    4a54:	2f02      	cmp	r7, #2
    4a56:	d02f      	beq.n	4ab8 <xQueueGenericSendFromISR+0x80>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4a58:	4b59      	ldr	r3, [pc, #356]	; (4bc0 <xQueueGenericSendFromISR+0x188>)
    4a5a:	4798      	blx	r3
    4a5c:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    4a5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4a60:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    4a62:	429a      	cmp	r2, r3
    4a64:	d85a      	bhi.n	4b1c <xQueueGenericSendFromISR+0xe4>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    4a66:	0020      	movs	r0, r4
    4a68:	4b56      	ldr	r3, [pc, #344]	; (4bc4 <xQueueGenericSendFromISR+0x18c>)
    4a6a:	4798      	blx	r3
    4a6c:	4b56      	ldr	r3, [pc, #344]	; (4bc8 <xQueueGenericSendFromISR+0x190>)
    4a6e:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
    4a70:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    4a72:	4203      	tst	r3, r0
    4a74:	d100      	bne.n	4a78 <xQueueGenericSendFromISR+0x40>
    4a76:	e09a      	b.n	4bae <xQueueGenericSendFromISR+0x176>
    4a78:	355d      	adds	r5, #93	; 0x5d
    4a7a:	2f00      	cmp	r7, #0
    4a7c:	d106      	bne.n	4a8c <xQueueGenericSendFromISR+0x54>
    4a7e:	0020      	movs	r0, r4
    4a80:	4b52      	ldr	r3, [pc, #328]	; (4bcc <xQueueGenericSendFromISR+0x194>)
    4a82:	4798      	blx	r3
    4a84:	4b52      	ldr	r3, [pc, #328]	; (4bd0 <xQueueGenericSendFromISR+0x198>)
    4a86:	5c1d      	ldrb	r5, [r3, r0]
    4a88:	3558      	adds	r5, #88	; 0x58
    4a8a:	b2ed      	uxtb	r5, r5
    4a8c:	0020      	movs	r0, r4
    4a8e:	4b4f      	ldr	r3, [pc, #316]	; (4bcc <xQueueGenericSendFromISR+0x194>)
    4a90:	4798      	blx	r3
    4a92:	4b4f      	ldr	r3, [pc, #316]	; (4bd0 <xQueueGenericSendFromISR+0x198>)
    4a94:	5c1f      	ldrb	r7, [r3, r0]
    4a96:	0020      	movs	r0, r4
    4a98:	4b4e      	ldr	r3, [pc, #312]	; (4bd4 <xQueueGenericSendFromISR+0x19c>)
    4a9a:	4798      	blx	r3
    4a9c:	b2c2      	uxtb	r2, r0
    4a9e:	0039      	movs	r1, r7
    4aa0:	0028      	movs	r0, r5
    4aa2:	4b4d      	ldr	r3, [pc, #308]	; (4bd8 <xQueueGenericSendFromISR+0x1a0>)
    4aa4:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    4aa6:	2500      	movs	r5, #0
    4aa8:	e081      	b.n	4bae <xQueueGenericSendFromISR+0x176>
	configASSERT( pxQueue );
    4aaa:	b672      	cpsid	i
    4aac:	e7fe      	b.n	4aac <xQueueGenericSendFromISR+0x74>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    4aae:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4ab0:	2b00      	cmp	r3, #0
    4ab2:	d0cf      	beq.n	4a54 <xQueueGenericSendFromISR+0x1c>
    4ab4:	b672      	cpsid	i
    4ab6:	e7fe      	b.n	4ab6 <xQueueGenericSendFromISR+0x7e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    4ab8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4aba:	2b01      	cmp	r3, #1
    4abc:	d027      	beq.n	4b0e <xQueueGenericSendFromISR+0xd6>
    4abe:	b672      	cpsid	i
    4ac0:	e7fe      	b.n	4ac0 <xQueueGenericSendFromISR+0x88>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    4ac4:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	d071      	beq.n	4bae <xQueueGenericSendFromISR+0x176>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4aca:	0020      	movs	r0, r4
    4acc:	3024      	adds	r0, #36	; 0x24
    4ace:	4b43      	ldr	r3, [pc, #268]	; (4bdc <xQueueGenericSendFromISR+0x1a4>)
    4ad0:	4798      	blx	r3
    4ad2:	2800      	cmp	r0, #0
    4ad4:	d06b      	beq.n	4bae <xQueueGenericSendFromISR+0x176>
								if( pxHigherPriorityTaskWoken != NULL )
    4ad6:	2e00      	cmp	r6, #0
    4ad8:	d00a      	beq.n	4af0 <xQueueGenericSendFromISR+0xb8>
									*pxHigherPriorityTaskWoken = pdTRUE;
    4ada:	2301      	movs	r3, #1
    4adc:	6033      	str	r3, [r6, #0]
    4ade:	e066      	b.n	4bae <xQueueGenericSendFromISR+0x176>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    4ae0:	3501      	adds	r5, #1
    4ae2:	b26d      	sxtb	r5, r5
    4ae4:	2345      	movs	r3, #69	; 0x45
    4ae6:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
    4ae8:	2501      	movs	r5, #1
    4aea:	e060      	b.n	4bae <xQueueGenericSendFromISR+0x176>
    4aec:	2501      	movs	r5, #1
    4aee:	e05e      	b.n	4bae <xQueueGenericSendFromISR+0x176>
    4af0:	2501      	movs	r5, #1
    4af2:	e05c      	b.n	4bae <xQueueGenericSendFromISR+0x176>
			const int8_t cTxLock = pxQueue->cTxLock;
    4af4:	2345      	movs	r3, #69	; 0x45
    4af6:	5ce5      	ldrb	r5, [r4, r3]
    4af8:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    4afa:	0020      	movs	r0, r4
    4afc:	4b31      	ldr	r3, [pc, #196]	; (4bc4 <xQueueGenericSendFromISR+0x18c>)
    4afe:	4798      	blx	r3
    4b00:	4b31      	ldr	r3, [pc, #196]	; (4bc8 <xQueueGenericSendFromISR+0x190>)
    4b02:	881b      	ldrh	r3, [r3, #0]
    4b04:	4203      	tst	r3, r0
    4b06:	d02d      	beq.n	4b64 <xQueueGenericSendFromISR+0x12c>
    4b08:	2335      	movs	r3, #53	; 0x35
    4b0a:	4698      	mov	r8, r3
    4b0c:	e01c      	b.n	4b48 <xQueueGenericSendFromISR+0x110>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4b0e:	4b2c      	ldr	r3, [pc, #176]	; (4bc0 <xQueueGenericSendFromISR+0x188>)
    4b10:	4798      	blx	r3
    4b12:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    4b14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4b16:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    4b18:	429a      	cmp	r2, r3
    4b1a:	d9eb      	bls.n	4af4 <xQueueGenericSendFromISR+0xbc>
			const int8_t cTxLock = pxQueue->cTxLock;
    4b1c:	2345      	movs	r3, #69	; 0x45
    4b1e:	5ce5      	ldrb	r5, [r4, r3]
    4b20:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    4b22:	0020      	movs	r0, r4
    4b24:	4b27      	ldr	r3, [pc, #156]	; (4bc4 <xQueueGenericSendFromISR+0x18c>)
    4b26:	4798      	blx	r3
    4b28:	4b27      	ldr	r3, [pc, #156]	; (4bc8 <xQueueGenericSendFromISR+0x190>)
    4b2a:	881b      	ldrh	r3, [r3, #0]
    4b2c:	4203      	tst	r3, r0
    4b2e:	d019      	beq.n	4b64 <xQueueGenericSendFromISR+0x12c>
    4b30:	2335      	movs	r3, #53	; 0x35
    4b32:	4698      	mov	r8, r3
    4b34:	2f00      	cmp	r7, #0
    4b36:	d107      	bne.n	4b48 <xQueueGenericSendFromISR+0x110>
    4b38:	0020      	movs	r0, r4
    4b3a:	4b24      	ldr	r3, [pc, #144]	; (4bcc <xQueueGenericSendFromISR+0x194>)
    4b3c:	4798      	blx	r3
    4b3e:	4b24      	ldr	r3, [pc, #144]	; (4bd0 <xQueueGenericSendFromISR+0x198>)
    4b40:	5c1b      	ldrb	r3, [r3, r0]
    4b42:	3330      	adds	r3, #48	; 0x30
    4b44:	b2db      	uxtb	r3, r3
    4b46:	4698      	mov	r8, r3
    4b48:	0020      	movs	r0, r4
    4b4a:	4b20      	ldr	r3, [pc, #128]	; (4bcc <xQueueGenericSendFromISR+0x194>)
    4b4c:	4798      	blx	r3
    4b4e:	4b20      	ldr	r3, [pc, #128]	; (4bd0 <xQueueGenericSendFromISR+0x198>)
    4b50:	5c1b      	ldrb	r3, [r3, r0]
    4b52:	469b      	mov	fp, r3
    4b54:	0020      	movs	r0, r4
    4b56:	4b1f      	ldr	r3, [pc, #124]	; (4bd4 <xQueueGenericSendFromISR+0x19c>)
    4b58:	4798      	blx	r3
    4b5a:	b2c2      	uxtb	r2, r0
    4b5c:	4659      	mov	r1, fp
    4b5e:	4640      	mov	r0, r8
    4b60:	4b1d      	ldr	r3, [pc, #116]	; (4bd8 <xQueueGenericSendFromISR+0x1a0>)
    4b62:	4798      	blx	r3
    4b64:	0020      	movs	r0, r4
    4b66:	4b19      	ldr	r3, [pc, #100]	; (4bcc <xQueueGenericSendFromISR+0x194>)
    4b68:	4798      	blx	r3
    4b6a:	4b19      	ldr	r3, [pc, #100]	; (4bd0 <xQueueGenericSendFromISR+0x198>)
    4b6c:	5c1b      	ldrb	r3, [r3, r0]
    4b6e:	4698      	mov	r8, r3
    4b70:	0020      	movs	r0, r4
    4b72:	4b18      	ldr	r3, [pc, #96]	; (4bd4 <xQueueGenericSendFromISR+0x19c>)
    4b74:	4798      	blx	r3
    4b76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4b78:	3201      	adds	r2, #1
    4b7a:	b2d2      	uxtb	r2, r2
    4b7c:	b2c1      	uxtb	r1, r0
    4b7e:	4640      	mov	r0, r8
    4b80:	4b17      	ldr	r3, [pc, #92]	; (4be0 <xQueueGenericSendFromISR+0x1a8>)
    4b82:	4798      	blx	r3
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4b84:	003a      	movs	r2, r7
    4b86:	9901      	ldr	r1, [sp, #4]
    4b88:	0020      	movs	r0, r4
    4b8a:	4b16      	ldr	r3, [pc, #88]	; (4be4 <xQueueGenericSendFromISR+0x1ac>)
    4b8c:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    4b8e:	1c6b      	adds	r3, r5, #1
    4b90:	d1a6      	bne.n	4ae0 <xQueueGenericSendFromISR+0xa8>
					if( pxQueue->pxQueueSetContainer != NULL )
    4b92:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    4b94:	2b00      	cmp	r3, #0
    4b96:	d094      	beq.n	4ac2 <xQueueGenericSendFromISR+0x8a>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    4b98:	0039      	movs	r1, r7
    4b9a:	0020      	movs	r0, r4
    4b9c:	4b12      	ldr	r3, [pc, #72]	; (4be8 <xQueueGenericSendFromISR+0x1b0>)
    4b9e:	4798      	blx	r3
			xReturn = pdPASS;
    4ba0:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    4ba2:	2800      	cmp	r0, #0
    4ba4:	d003      	beq.n	4bae <xQueueGenericSendFromISR+0x176>
							if( pxHigherPriorityTaskWoken != NULL )
    4ba6:	2e00      	cmp	r6, #0
    4ba8:	d0a0      	beq.n	4aec <xQueueGenericSendFromISR+0xb4>
								*pxHigherPriorityTaskWoken = pdTRUE;
    4baa:	2301      	movs	r3, #1
    4bac:	6033      	str	r3, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4bae:	9800      	ldr	r0, [sp, #0]
    4bb0:	4b0e      	ldr	r3, [pc, #56]	; (4bec <xQueueGenericSendFromISR+0x1b4>)
    4bb2:	4798      	blx	r3
}
    4bb4:	0028      	movs	r0, r5
    4bb6:	b003      	add	sp, #12
    4bb8:	bc0c      	pop	{r2, r3}
    4bba:	4690      	mov	r8, r2
    4bbc:	469b      	mov	fp, r3
    4bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bc0:	00004169 	.word	0x00004169
    4bc4:	00002f2d 	.word	0x00002f2d
    4bc8:	20000024 	.word	0x20000024
    4bcc:	00002ead 	.word	0x00002ead
    4bd0:	2000001c 	.word	0x2000001c
    4bd4:	00002f1d 	.word	0x00002f1d
    4bd8:	00003bb9 	.word	0x00003bb9
    4bdc:	00005eed 	.word	0x00005eed
    4be0:	0000368d 	.word	0x0000368d
    4be4:	000042bd 	.word	0x000042bd
    4be8:	00004339 	.word	0x00004339
    4bec:	00004171 	.word	0x00004171

00004bf0 <MyWrapper>:
{
    4bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bf2:	46d6      	mov	lr, sl
    4bf4:	4647      	mov	r7, r8
    4bf6:	b580      	push	{r7, lr}
    4bf8:	b083      	sub	sp, #12
    4bfa:	0004      	movs	r4, r0
    4bfc:	000f      	movs	r7, r1
    4bfe:	0016      	movs	r6, r2
	configASSERT( pxQueue );
    4c00:	2800      	cmp	r0, #0
    4c02:	d004      	beq.n	4c0e <MyWrapper+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
    4c04:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4c06:	2b00      	cmp	r3, #0
    4c08:	d003      	beq.n	4c12 <MyWrapper+0x22>
    4c0a:	b672      	cpsid	i
    4c0c:	e7fe      	b.n	4c0c <MyWrapper+0x1c>
	configASSERT( pxQueue );
    4c0e:	b672      	cpsid	i
    4c10:	e7fe      	b.n	4c10 <MyWrapper+0x20>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    4c12:	6803      	ldr	r3, [r0, #0]
    4c14:	2b00      	cmp	r3, #0
    4c16:	d055      	beq.n	4cc4 <MyWrapper+0xd4>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4c18:	4b4a      	ldr	r3, [pc, #296]	; (4d44 <MyWrapper+0x154>)
    4c1a:	4798      	blx	r3
    4c1c:	9001      	str	r0, [sp, #4]
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4c1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4c20:	4698      	mov	r8, r3
		if( uxMessagesWaiting < pxQueue->uxLength )
    4c22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4c24:	4598      	cmp	r8, r3
    4c26:	d267      	bcs.n	4cf8 <MyWrapper+0x108>
			const int8_t cTxLock = pxQueue->cTxLock;
    4c28:	2345      	movs	r3, #69	; 0x45
    4c2a:	5ce5      	ldrb	r5, [r4, r3]
    4c2c:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    4c2e:	0020      	movs	r0, r4
    4c30:	4b45      	ldr	r3, [pc, #276]	; (4d48 <MyWrapper+0x158>)
    4c32:	4798      	blx	r3
    4c34:	4b45      	ldr	r3, [pc, #276]	; (4d4c <MyWrapper+0x15c>)
    4c36:	881b      	ldrh	r3, [r3, #0]
    4c38:	4203      	tst	r3, r0
    4c3a:	d018      	beq.n	4c6e <MyWrapper+0x7e>
    4c3c:	2335      	movs	r3, #53	; 0x35
    4c3e:	469a      	mov	sl, r3
    4c40:	2e00      	cmp	r6, #0
    4c42:	d107      	bne.n	4c54 <MyWrapper+0x64>
    4c44:	0020      	movs	r0, r4
    4c46:	4b42      	ldr	r3, [pc, #264]	; (4d50 <MyWrapper+0x160>)
    4c48:	4798      	blx	r3
    4c4a:	4b42      	ldr	r3, [pc, #264]	; (4d54 <MyWrapper+0x164>)
    4c4c:	5c1b      	ldrb	r3, [r3, r0]
    4c4e:	3330      	adds	r3, #48	; 0x30
    4c50:	b2db      	uxtb	r3, r3
    4c52:	469a      	mov	sl, r3
    4c54:	0020      	movs	r0, r4
    4c56:	4b3e      	ldr	r3, [pc, #248]	; (4d50 <MyWrapper+0x160>)
    4c58:	4798      	blx	r3
    4c5a:	4b3e      	ldr	r3, [pc, #248]	; (4d54 <MyWrapper+0x164>)
    4c5c:	5c1e      	ldrb	r6, [r3, r0]
    4c5e:	0020      	movs	r0, r4
    4c60:	4b3d      	ldr	r3, [pc, #244]	; (4d58 <MyWrapper+0x168>)
    4c62:	4798      	blx	r3
    4c64:	b2c2      	uxtb	r2, r0
    4c66:	0031      	movs	r1, r6
    4c68:	4650      	mov	r0, sl
    4c6a:	4b3c      	ldr	r3, [pc, #240]	; (4d5c <MyWrapper+0x16c>)
    4c6c:	4798      	blx	r3
    4c6e:	0020      	movs	r0, r4
    4c70:	4b37      	ldr	r3, [pc, #220]	; (4d50 <MyWrapper+0x160>)
    4c72:	4798      	blx	r3
    4c74:	4b37      	ldr	r3, [pc, #220]	; (4d54 <MyWrapper+0x164>)
    4c76:	5c1e      	ldrb	r6, [r3, r0]
    4c78:	0020      	movs	r0, r4
    4c7a:	4b37      	ldr	r3, [pc, #220]	; (4d58 <MyWrapper+0x168>)
    4c7c:	4798      	blx	r3
    4c7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4c80:	3201      	adds	r2, #1
    4c82:	b2d2      	uxtb	r2, r2
    4c84:	b2c1      	uxtb	r1, r0
    4c86:	0030      	movs	r0, r6
    4c88:	4b35      	ldr	r3, [pc, #212]	; (4d60 <MyWrapper+0x170>)
    4c8a:	4798      	blx	r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    4c8c:	4643      	mov	r3, r8
    4c8e:	3301      	adds	r3, #1
    4c90:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
    4c92:	1c6b      	adds	r3, r5, #1
    4c94:	d12a      	bne.n	4cec <MyWrapper+0xfc>
					if( pxQueue->pxQueueSetContainer != NULL )
    4c96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    4c98:	2b00      	cmp	r3, #0
    4c9a:	d018      	beq.n	4cce <MyWrapper+0xde>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    4c9c:	2100      	movs	r1, #0
    4c9e:	0020      	movs	r0, r4
    4ca0:	4b30      	ldr	r3, [pc, #192]	; (4d64 <MyWrapper+0x174>)
    4ca2:	4798      	blx	r3
			xReturn = pdPASS;
    4ca4:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    4ca6:	2800      	cmp	r0, #0
    4ca8:	d003      	beq.n	4cb2 <MyWrapper+0xc2>
							if( pxHigherPriorityTaskWoken != NULL )
    4caa:	2f00      	cmp	r7, #0
    4cac:	d045      	beq.n	4d3a <MyWrapper+0x14a>
								*pxHigherPriorityTaskWoken = pdTRUE;
    4cae:	2301      	movs	r3, #1
    4cb0:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4cb2:	9801      	ldr	r0, [sp, #4]
    4cb4:	4b2c      	ldr	r3, [pc, #176]	; (4d68 <MyWrapper+0x178>)
    4cb6:	4798      	blx	r3
}
    4cb8:	0028      	movs	r0, r5
    4cba:	b003      	add	sp, #12
    4cbc:	bc0c      	pop	{r2, r3}
    4cbe:	4690      	mov	r8, r2
    4cc0:	469a      	mov	sl, r3
    4cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    4cc4:	6843      	ldr	r3, [r0, #4]
    4cc6:	2b00      	cmp	r3, #0
    4cc8:	d0a6      	beq.n	4c18 <MyWrapper+0x28>
    4cca:	b672      	cpsid	i
    4ccc:	e7fe      	b.n	4ccc <MyWrapper+0xdc>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    4cd0:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4cd2:	2b00      	cmp	r3, #0
    4cd4:	d0ed      	beq.n	4cb2 <MyWrapper+0xc2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4cd6:	0020      	movs	r0, r4
    4cd8:	3024      	adds	r0, #36	; 0x24
    4cda:	4b24      	ldr	r3, [pc, #144]	; (4d6c <MyWrapper+0x17c>)
    4cdc:	4798      	blx	r3
    4cde:	2800      	cmp	r0, #0
    4ce0:	d0e7      	beq.n	4cb2 <MyWrapper+0xc2>
								if( pxHigherPriorityTaskWoken != NULL )
    4ce2:	2f00      	cmp	r7, #0
    4ce4:	d02b      	beq.n	4d3e <MyWrapper+0x14e>
									*pxHigherPriorityTaskWoken = pdTRUE;
    4ce6:	2301      	movs	r3, #1
    4ce8:	603b      	str	r3, [r7, #0]
    4cea:	e7e2      	b.n	4cb2 <MyWrapper+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    4cec:	3501      	adds	r5, #1
    4cee:	b26d      	sxtb	r5, r5
    4cf0:	2345      	movs	r3, #69	; 0x45
    4cf2:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
    4cf4:	2501      	movs	r5, #1
    4cf6:	e7dc      	b.n	4cb2 <MyWrapper+0xc2>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    4cf8:	0020      	movs	r0, r4
    4cfa:	4b13      	ldr	r3, [pc, #76]	; (4d48 <MyWrapper+0x158>)
    4cfc:	4798      	blx	r3
    4cfe:	4b13      	ldr	r3, [pc, #76]	; (4d4c <MyWrapper+0x15c>)
    4d00:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
    4d02:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    4d04:	4203      	tst	r3, r0
    4d06:	d0d4      	beq.n	4cb2 <MyWrapper+0xc2>
    4d08:	355d      	adds	r5, #93	; 0x5d
    4d0a:	2e00      	cmp	r6, #0
    4d0c:	d106      	bne.n	4d1c <MyWrapper+0x12c>
    4d0e:	0020      	movs	r0, r4
    4d10:	4b0f      	ldr	r3, [pc, #60]	; (4d50 <MyWrapper+0x160>)
    4d12:	4798      	blx	r3
    4d14:	4b0f      	ldr	r3, [pc, #60]	; (4d54 <MyWrapper+0x164>)
    4d16:	5c1d      	ldrb	r5, [r3, r0]
    4d18:	3558      	adds	r5, #88	; 0x58
    4d1a:	b2ed      	uxtb	r5, r5
    4d1c:	0020      	movs	r0, r4
    4d1e:	4b0c      	ldr	r3, [pc, #48]	; (4d50 <MyWrapper+0x160>)
    4d20:	4798      	blx	r3
    4d22:	4b0c      	ldr	r3, [pc, #48]	; (4d54 <MyWrapper+0x164>)
    4d24:	5c1f      	ldrb	r7, [r3, r0]
    4d26:	0020      	movs	r0, r4
    4d28:	4b0b      	ldr	r3, [pc, #44]	; (4d58 <MyWrapper+0x168>)
    4d2a:	4798      	blx	r3
    4d2c:	b2c2      	uxtb	r2, r0
    4d2e:	0039      	movs	r1, r7
    4d30:	0028      	movs	r0, r5
    4d32:	4b0a      	ldr	r3, [pc, #40]	; (4d5c <MyWrapper+0x16c>)
    4d34:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    4d36:	2500      	movs	r5, #0
    4d38:	e7bb      	b.n	4cb2 <MyWrapper+0xc2>
			xReturn = pdPASS;
    4d3a:	2501      	movs	r5, #1
    4d3c:	e7b9      	b.n	4cb2 <MyWrapper+0xc2>
    4d3e:	2501      	movs	r5, #1
    4d40:	e7b7      	b.n	4cb2 <MyWrapper+0xc2>
    4d42:	46c0      	nop			; (mov r8, r8)
    4d44:	00004169 	.word	0x00004169
    4d48:	00002f2d 	.word	0x00002f2d
    4d4c:	20000024 	.word	0x20000024
    4d50:	00002ead 	.word	0x00002ead
    4d54:	2000001c 	.word	0x2000001c
    4d58:	00002f1d 	.word	0x00002f1d
    4d5c:	00003bb9 	.word	0x00003bb9
    4d60:	0000368d 	.word	0x0000368d
    4d64:	00004339 	.word	0x00004339
    4d68:	00004171 	.word	0x00004171
    4d6c:	00005eed 	.word	0x00005eed

00004d70 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
    4d70:	b510      	push	{r4, lr}
    4d72:	2200      	movs	r2, #0
    4d74:	4b01      	ldr	r3, [pc, #4]	; (4d7c <xQueueGiveFromISR+0xc>)
    4d76:	4798      	blx	r3
    4d78:	bd10      	pop	{r4, pc}
    4d7a:	46c0      	nop			; (mov r8, r8)
    4d7c:	00004bf1 	.word	0x00004bf1

00004d80 <xQueueReceive>:
{
    4d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d82:	46ce      	mov	lr, r9
    4d84:	4647      	mov	r7, r8
    4d86:	b580      	push	{r7, lr}
    4d88:	b085      	sub	sp, #20
    4d8a:	1e04      	subs	r4, r0, #0
    4d8c:	9100      	str	r1, [sp, #0]
    4d8e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    4d90:	d00b      	beq.n	4daa <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    4d92:	9b00      	ldr	r3, [sp, #0]
    4d94:	2b00      	cmp	r3, #0
    4d96:	d00a      	beq.n	4dae <xQueueReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    4d98:	4ba4      	ldr	r3, [pc, #656]	; (502c <xQueueReceive+0x2ac>)
    4d9a:	4798      	blx	r3
    4d9c:	2800      	cmp	r0, #0
    4d9e:	d10b      	bne.n	4db8 <xQueueReceive+0x38>
    4da0:	9b01      	ldr	r3, [sp, #4]
    4da2:	2b00      	cmp	r3, #0
    4da4:	d00c      	beq.n	4dc0 <xQueueReceive+0x40>
    4da6:	b672      	cpsid	i
    4da8:	e7fe      	b.n	4da8 <xQueueReceive+0x28>
	configASSERT( ( pxQueue ) );
    4daa:	b672      	cpsid	i
    4dac:	e7fe      	b.n	4dac <xQueueReceive+0x2c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    4dae:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4db0:	2b00      	cmp	r3, #0
    4db2:	d0f1      	beq.n	4d98 <xQueueReceive+0x18>
    4db4:	b672      	cpsid	i
    4db6:	e7fe      	b.n	4db6 <xQueueReceive+0x36>
    4db8:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    4dba:	4b9d      	ldr	r3, [pc, #628]	; (5030 <xQueueReceive+0x2b0>)
    4dbc:	4698      	mov	r8, r3
    4dbe:	e0b4      	b.n	4f2a <xQueueReceive+0x1aa>
    4dc0:	2500      	movs	r5, #0
    4dc2:	e7fa      	b.n	4dba <xQueueReceive+0x3a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4dc4:	9900      	ldr	r1, [sp, #0]
    4dc6:	0020      	movs	r0, r4
    4dc8:	4b9a      	ldr	r3, [pc, #616]	; (5034 <xQueueReceive+0x2b4>)
    4dca:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
    4dcc:	4b9a      	ldr	r3, [pc, #616]	; (5038 <xQueueReceive+0x2b8>)
    4dce:	4798      	blx	r3
    4dd0:	4b9a      	ldr	r3, [pc, #616]	; (503c <xQueueReceive+0x2bc>)
    4dd2:	4798      	blx	r3
    4dd4:	4b9a      	ldr	r3, [pc, #616]	; (5040 <xQueueReceive+0x2c0>)
    4dd6:	881b      	ldrh	r3, [r3, #0]
    4dd8:	4203      	tst	r3, r0
    4dda:	d019      	beq.n	4e10 <xQueueReceive+0x90>
    4ddc:	0020      	movs	r0, r4
    4dde:	4b99      	ldr	r3, [pc, #612]	; (5044 <xQueueReceive+0x2c4>)
    4de0:	4798      	blx	r3
    4de2:	4b97      	ldr	r3, [pc, #604]	; (5040 <xQueueReceive+0x2c0>)
    4de4:	881b      	ldrh	r3, [r3, #0]
    4de6:	4203      	tst	r3, r0
    4de8:	d012      	beq.n	4e10 <xQueueReceive+0x90>
    4dea:	0020      	movs	r0, r4
    4dec:	4b96      	ldr	r3, [pc, #600]	; (5048 <xQueueReceive+0x2c8>)
    4dee:	4698      	mov	r8, r3
    4df0:	4798      	blx	r3
    4df2:	4f96      	ldr	r7, [pc, #600]	; (504c <xQueueReceive+0x2cc>)
    4df4:	5c3d      	ldrb	r5, [r7, r0]
    4df6:	3528      	adds	r5, #40	; 0x28
    4df8:	b2ed      	uxtb	r5, r5
    4dfa:	0020      	movs	r0, r4
    4dfc:	47c0      	blx	r8
    4dfe:	5c3f      	ldrb	r7, [r7, r0]
    4e00:	0020      	movs	r0, r4
    4e02:	4b93      	ldr	r3, [pc, #588]	; (5050 <xQueueReceive+0x2d0>)
    4e04:	4798      	blx	r3
    4e06:	b2c2      	uxtb	r2, r0
    4e08:	0039      	movs	r1, r7
    4e0a:	0028      	movs	r0, r5
    4e0c:	4b91      	ldr	r3, [pc, #580]	; (5054 <xQueueReceive+0x2d4>)
    4e0e:	4798      	blx	r3
    4e10:	0020      	movs	r0, r4
    4e12:	4f8d      	ldr	r7, [pc, #564]	; (5048 <xQueueReceive+0x2c8>)
    4e14:	47b8      	blx	r7
    4e16:	4d8d      	ldr	r5, [pc, #564]	; (504c <xQueueReceive+0x2cc>)
    4e18:	5c2b      	ldrb	r3, [r5, r0]
    4e1a:	4699      	mov	r9, r3
    4e1c:	0020      	movs	r0, r4
    4e1e:	4b8c      	ldr	r3, [pc, #560]	; (5050 <xQueueReceive+0x2d0>)
    4e20:	4798      	blx	r3
    4e22:	b2c3      	uxtb	r3, r0
    4e24:	4698      	mov	r8, r3
    4e26:	0020      	movs	r0, r4
    4e28:	47b8      	blx	r7
    4e2a:	5c2b      	ldrb	r3, [r5, r0]
    4e2c:	2b02      	cmp	r3, #2
    4e2e:	d11e      	bne.n	4e6e <xQueueReceive+0xee>
    4e30:	4b81      	ldr	r3, [pc, #516]	; (5038 <xQueueReceive+0x2b8>)
    4e32:	4798      	blx	r3
    4e34:	4b88      	ldr	r3, [pc, #544]	; (5058 <xQueueReceive+0x2d8>)
    4e36:	4798      	blx	r3
    4e38:	b2c2      	uxtb	r2, r0
    4e3a:	4641      	mov	r1, r8
    4e3c:	4648      	mov	r0, r9
    4e3e:	4b87      	ldr	r3, [pc, #540]	; (505c <xQueueReceive+0x2dc>)
    4e40:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    4e42:	3e01      	subs	r6, #1
    4e44:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4e46:	6923      	ldr	r3, [r4, #16]
    4e48:	2b00      	cmp	r3, #0
    4e4a:	d007      	beq.n	4e5c <xQueueReceive+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4e4c:	0020      	movs	r0, r4
    4e4e:	3010      	adds	r0, #16
    4e50:	4b83      	ldr	r3, [pc, #524]	; (5060 <xQueueReceive+0x2e0>)
    4e52:	4798      	blx	r3
    4e54:	2800      	cmp	r0, #0
    4e56:	d001      	beq.n	4e5c <xQueueReceive+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
    4e58:	4b82      	ldr	r3, [pc, #520]	; (5064 <xQueueReceive+0x2e4>)
    4e5a:	4798      	blx	r3
				taskEXIT_CRITICAL();
    4e5c:	4b82      	ldr	r3, [pc, #520]	; (5068 <xQueueReceive+0x2e8>)
    4e5e:	4798      	blx	r3
				return pdPASS;
    4e60:	2301      	movs	r3, #1
}
    4e62:	0018      	movs	r0, r3
    4e64:	b005      	add	sp, #20
    4e66:	bc0c      	pop	{r2, r3}
    4e68:	4690      	mov	r8, r2
    4e6a:	4699      	mov	r9, r3
    4e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
    4e6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4e70:	3a01      	subs	r2, #1
    4e72:	b2d2      	uxtb	r2, r2
    4e74:	e7e1      	b.n	4e3a <xQueueReceive+0xba>
					taskEXIT_CRITICAL();
    4e76:	4b7c      	ldr	r3, [pc, #496]	; (5068 <xQueueReceive+0x2e8>)
    4e78:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    4e7a:	4b6f      	ldr	r3, [pc, #444]	; (5038 <xQueueReceive+0x2b8>)
    4e7c:	4798      	blx	r3
    4e7e:	4b6f      	ldr	r3, [pc, #444]	; (503c <xQueueReceive+0x2bc>)
    4e80:	4798      	blx	r3
    4e82:	4b6f      	ldr	r3, [pc, #444]	; (5040 <xQueueReceive+0x2c0>)
    4e84:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
    4e86:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    4e88:	4202      	tst	r2, r0
    4e8a:	d0ea      	beq.n	4e62 <xQueueReceive+0xe2>
    4e8c:	0020      	movs	r0, r4
    4e8e:	4b6d      	ldr	r3, [pc, #436]	; (5044 <xQueueReceive+0x2c4>)
    4e90:	4798      	blx	r3
    4e92:	4b6b      	ldr	r3, [pc, #428]	; (5040 <xQueueReceive+0x2c0>)
    4e94:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
    4e96:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    4e98:	4202      	tst	r2, r0
    4e9a:	d0e2      	beq.n	4e62 <xQueueReceive+0xe2>
    4e9c:	0020      	movs	r0, r4
    4e9e:	4f6a      	ldr	r7, [pc, #424]	; (5048 <xQueueReceive+0x2c8>)
    4ea0:	47b8      	blx	r7
    4ea2:	4e6a      	ldr	r6, [pc, #424]	; (504c <xQueueReceive+0x2cc>)
    4ea4:	5c35      	ldrb	r5, [r6, r0]
    4ea6:	3550      	adds	r5, #80	; 0x50
    4ea8:	b2ed      	uxtb	r5, r5
    4eaa:	0020      	movs	r0, r4
    4eac:	47b8      	blx	r7
    4eae:	5c36      	ldrb	r6, [r6, r0]
    4eb0:	0020      	movs	r0, r4
    4eb2:	4b67      	ldr	r3, [pc, #412]	; (5050 <xQueueReceive+0x2d0>)
    4eb4:	4798      	blx	r3
    4eb6:	b2c2      	uxtb	r2, r0
    4eb8:	0031      	movs	r1, r6
    4eba:	0028      	movs	r0, r5
    4ebc:	4b65      	ldr	r3, [pc, #404]	; (5054 <xQueueReceive+0x2d4>)
    4ebe:	4798      	blx	r3
					return errQUEUE_EMPTY;
    4ec0:	2300      	movs	r3, #0
    4ec2:	e7ce      	b.n	4e62 <xQueueReceive+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
    4ec4:	a802      	add	r0, sp, #8
    4ec6:	4b69      	ldr	r3, [pc, #420]	; (506c <xQueueReceive+0x2ec>)
    4ec8:	4798      	blx	r3
    4eca:	e038      	b.n	4f3e <xQueueReceive+0x1be>
		prvLockQueue( pxQueue );
    4ecc:	2200      	movs	r2, #0
    4ece:	2344      	movs	r3, #68	; 0x44
    4ed0:	54e2      	strb	r2, [r4, r3]
    4ed2:	e03f      	b.n	4f54 <xQueueReceive+0x1d4>
    4ed4:	2200      	movs	r2, #0
    4ed6:	2345      	movs	r3, #69	; 0x45
    4ed8:	54e2      	strb	r2, [r4, r3]
    4eda:	e040      	b.n	4f5e <xQueueReceive+0x1de>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    4edc:	0020      	movs	r0, r4
    4ede:	4b59      	ldr	r3, [pc, #356]	; (5044 <xQueueReceive+0x2c4>)
    4ee0:	4798      	blx	r3
    4ee2:	4b57      	ldr	r3, [pc, #348]	; (5040 <xQueueReceive+0x2c0>)
    4ee4:	881b      	ldrh	r3, [r3, #0]
    4ee6:	4203      	tst	r3, r0
    4ee8:	d04e      	beq.n	4f88 <xQueueReceive+0x208>
    4eea:	0020      	movs	r0, r4
    4eec:	4f56      	ldr	r7, [pc, #344]	; (5048 <xQueueReceive+0x2c8>)
    4eee:	47b8      	blx	r7
    4ef0:	4e56      	ldr	r6, [pc, #344]	; (504c <xQueueReceive+0x2cc>)
    4ef2:	5c35      	ldrb	r5, [r6, r0]
    4ef4:	3568      	adds	r5, #104	; 0x68
    4ef6:	b2ed      	uxtb	r5, r5
    4ef8:	0020      	movs	r0, r4
    4efa:	47b8      	blx	r7
    4efc:	5c36      	ldrb	r6, [r6, r0]
    4efe:	0020      	movs	r0, r4
    4f00:	4b53      	ldr	r3, [pc, #332]	; (5050 <xQueueReceive+0x2d0>)
    4f02:	4798      	blx	r3
    4f04:	b2c2      	uxtb	r2, r0
    4f06:	0031      	movs	r1, r6
    4f08:	0028      	movs	r0, r5
    4f0a:	4b52      	ldr	r3, [pc, #328]	; (5054 <xQueueReceive+0x2d4>)
    4f0c:	4798      	blx	r3
    4f0e:	e03b      	b.n	4f88 <xQueueReceive+0x208>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4f10:	0020      	movs	r0, r4
    4f12:	3024      	adds	r0, #36	; 0x24
    4f14:	9901      	ldr	r1, [sp, #4]
    4f16:	4b56      	ldr	r3, [pc, #344]	; (5070 <xQueueReceive+0x2f0>)
    4f18:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    4f1a:	0020      	movs	r0, r4
    4f1c:	4b55      	ldr	r3, [pc, #340]	; (5074 <xQueueReceive+0x2f4>)
    4f1e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    4f20:	4b55      	ldr	r3, [pc, #340]	; (5078 <xQueueReceive+0x2f8>)
    4f22:	4798      	blx	r3
    4f24:	2800      	cmp	r0, #0
    4f26:	d046      	beq.n	4fb6 <xQueueReceive+0x236>
    4f28:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    4f2a:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4f2c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    4f2e:	2e00      	cmp	r6, #0
    4f30:	d000      	beq.n	4f34 <xQueueReceive+0x1b4>
    4f32:	e747      	b.n	4dc4 <xQueueReceive+0x44>
				if( xTicksToWait == ( TickType_t ) 0 )
    4f34:	9b01      	ldr	r3, [sp, #4]
    4f36:	2b00      	cmp	r3, #0
    4f38:	d09d      	beq.n	4e76 <xQueueReceive+0xf6>
				else if( xEntryTimeSet == pdFALSE )
    4f3a:	2d00      	cmp	r5, #0
    4f3c:	d0c2      	beq.n	4ec4 <xQueueReceive+0x144>
		taskEXIT_CRITICAL();
    4f3e:	4b4a      	ldr	r3, [pc, #296]	; (5068 <xQueueReceive+0x2e8>)
    4f40:	4798      	blx	r3
		vTaskSuspendAll();
    4f42:	4b4e      	ldr	r3, [pc, #312]	; (507c <xQueueReceive+0x2fc>)
    4f44:	4798      	blx	r3
		prvLockQueue( pxQueue );
    4f46:	4b3a      	ldr	r3, [pc, #232]	; (5030 <xQueueReceive+0x2b0>)
    4f48:	4798      	blx	r3
    4f4a:	2344      	movs	r3, #68	; 0x44
    4f4c:	5ce3      	ldrb	r3, [r4, r3]
    4f4e:	b25b      	sxtb	r3, r3
    4f50:	3301      	adds	r3, #1
    4f52:	d0bb      	beq.n	4ecc <xQueueReceive+0x14c>
    4f54:	2345      	movs	r3, #69	; 0x45
    4f56:	5ce3      	ldrb	r3, [r4, r3]
    4f58:	b25b      	sxtb	r3, r3
    4f5a:	3301      	adds	r3, #1
    4f5c:	d0ba      	beq.n	4ed4 <xQueueReceive+0x154>
    4f5e:	4b42      	ldr	r3, [pc, #264]	; (5068 <xQueueReceive+0x2e8>)
    4f60:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4f62:	a901      	add	r1, sp, #4
    4f64:	a802      	add	r0, sp, #8
    4f66:	4b46      	ldr	r3, [pc, #280]	; (5080 <xQueueReceive+0x300>)
    4f68:	4798      	blx	r3
    4f6a:	2800      	cmp	r0, #0
    4f6c:	d12c      	bne.n	4fc8 <xQueueReceive+0x248>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4f6e:	0020      	movs	r0, r4
    4f70:	4b44      	ldr	r3, [pc, #272]	; (5084 <xQueueReceive+0x304>)
    4f72:	4798      	blx	r3
    4f74:	2800      	cmp	r0, #0
    4f76:	d021      	beq.n	4fbc <xQueueReceive+0x23c>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    4f78:	4b2f      	ldr	r3, [pc, #188]	; (5038 <xQueueReceive+0x2b8>)
    4f7a:	4798      	blx	r3
    4f7c:	4b2f      	ldr	r3, [pc, #188]	; (503c <xQueueReceive+0x2bc>)
    4f7e:	4798      	blx	r3
    4f80:	4b2f      	ldr	r3, [pc, #188]	; (5040 <xQueueReceive+0x2c0>)
    4f82:	881b      	ldrh	r3, [r3, #0]
    4f84:	4203      	tst	r3, r0
    4f86:	d1a9      	bne.n	4edc <xQueueReceive+0x15c>
    4f88:	0020      	movs	r0, r4
    4f8a:	4b2f      	ldr	r3, [pc, #188]	; (5048 <xQueueReceive+0x2c8>)
    4f8c:	4798      	blx	r3
    4f8e:	4b2f      	ldr	r3, [pc, #188]	; (504c <xQueueReceive+0x2cc>)
    4f90:	5c1b      	ldrb	r3, [r3, r0]
    4f92:	2b02      	cmp	r3, #2
    4f94:	d0bc      	beq.n	4f10 <xQueueReceive+0x190>
    4f96:	4b28      	ldr	r3, [pc, #160]	; (5038 <xQueueReceive+0x2b8>)
    4f98:	4798      	blx	r3
    4f9a:	4b28      	ldr	r3, [pc, #160]	; (503c <xQueueReceive+0x2bc>)
    4f9c:	4798      	blx	r3
    4f9e:	4b28      	ldr	r3, [pc, #160]	; (5040 <xQueueReceive+0x2c0>)
    4fa0:	881b      	ldrh	r3, [r3, #0]
    4fa2:	4203      	tst	r3, r0
    4fa4:	d0b4      	beq.n	4f10 <xQueueReceive+0x190>
    4fa6:	4b24      	ldr	r3, [pc, #144]	; (5038 <xQueueReceive+0x2b8>)
    4fa8:	4798      	blx	r3
    4faa:	4b2b      	ldr	r3, [pc, #172]	; (5058 <xQueueReceive+0x2d8>)
    4fac:	4798      	blx	r3
    4fae:	b2c0      	uxtb	r0, r0
    4fb0:	4b35      	ldr	r3, [pc, #212]	; (5088 <xQueueReceive+0x308>)
    4fb2:	4798      	blx	r3
    4fb4:	e7ac      	b.n	4f10 <xQueueReceive+0x190>
					portYIELD_WITHIN_API();
    4fb6:	4b2b      	ldr	r3, [pc, #172]	; (5064 <xQueueReceive+0x2e4>)
    4fb8:	4798      	blx	r3
    4fba:	e7b5      	b.n	4f28 <xQueueReceive+0x1a8>
				prvUnlockQueue( pxQueue );
    4fbc:	0020      	movs	r0, r4
    4fbe:	4b2d      	ldr	r3, [pc, #180]	; (5074 <xQueueReceive+0x2f4>)
    4fc0:	4798      	blx	r3
				( void ) xTaskResumeAll();
    4fc2:	4b2d      	ldr	r3, [pc, #180]	; (5078 <xQueueReceive+0x2f8>)
    4fc4:	4798      	blx	r3
    4fc6:	e7af      	b.n	4f28 <xQueueReceive+0x1a8>
			prvUnlockQueue( pxQueue );
    4fc8:	0020      	movs	r0, r4
    4fca:	4b2a      	ldr	r3, [pc, #168]	; (5074 <xQueueReceive+0x2f4>)
    4fcc:	4798      	blx	r3
			( void ) xTaskResumeAll();
    4fce:	4b2a      	ldr	r3, [pc, #168]	; (5078 <xQueueReceive+0x2f8>)
    4fd0:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4fd2:	0020      	movs	r0, r4
    4fd4:	4b2b      	ldr	r3, [pc, #172]	; (5084 <xQueueReceive+0x304>)
    4fd6:	4798      	blx	r3
    4fd8:	2800      	cmp	r0, #0
    4fda:	d0a5      	beq.n	4f28 <xQueueReceive+0x1a8>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    4fdc:	4b16      	ldr	r3, [pc, #88]	; (5038 <xQueueReceive+0x2b8>)
    4fde:	4798      	blx	r3
    4fe0:	4b16      	ldr	r3, [pc, #88]	; (503c <xQueueReceive+0x2bc>)
    4fe2:	4798      	blx	r3
    4fe4:	4b16      	ldr	r3, [pc, #88]	; (5040 <xQueueReceive+0x2c0>)
    4fe6:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
    4fe8:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    4fea:	4202      	tst	r2, r0
    4fec:	d100      	bne.n	4ff0 <xQueueReceive+0x270>
    4fee:	e738      	b.n	4e62 <xQueueReceive+0xe2>
    4ff0:	0020      	movs	r0, r4
    4ff2:	4b14      	ldr	r3, [pc, #80]	; (5044 <xQueueReceive+0x2c4>)
    4ff4:	4798      	blx	r3
    4ff6:	4b12      	ldr	r3, [pc, #72]	; (5040 <xQueueReceive+0x2c0>)
    4ff8:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
    4ffa:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    4ffc:	4202      	tst	r2, r0
    4ffe:	d100      	bne.n	5002 <xQueueReceive+0x282>
    5000:	e72f      	b.n	4e62 <xQueueReceive+0xe2>
    5002:	0020      	movs	r0, r4
    5004:	4f10      	ldr	r7, [pc, #64]	; (5048 <xQueueReceive+0x2c8>)
    5006:	47b8      	blx	r7
    5008:	4e10      	ldr	r6, [pc, #64]	; (504c <xQueueReceive+0x2cc>)
    500a:	5c35      	ldrb	r5, [r6, r0]
    500c:	3550      	adds	r5, #80	; 0x50
    500e:	b2ed      	uxtb	r5, r5
    5010:	0020      	movs	r0, r4
    5012:	47b8      	blx	r7
    5014:	5c36      	ldrb	r6, [r6, r0]
    5016:	0020      	movs	r0, r4
    5018:	4b0d      	ldr	r3, [pc, #52]	; (5050 <xQueueReceive+0x2d0>)
    501a:	4798      	blx	r3
    501c:	b2c2      	uxtb	r2, r0
    501e:	0031      	movs	r1, r6
    5020:	0028      	movs	r0, r5
    5022:	4b0c      	ldr	r3, [pc, #48]	; (5054 <xQueueReceive+0x2d4>)
    5024:	4798      	blx	r3
				return errQUEUE_EMPTY;
    5026:	2300      	movs	r3, #0
    5028:	e71b      	b.n	4e62 <xQueueReceive+0xe2>
    502a:	46c0      	nop			; (mov r8, r8)
    502c:	00006055 	.word	0x00006055
    5030:	00004131 	.word	0x00004131
    5034:	00004455 	.word	0x00004455
    5038:	00002f81 	.word	0x00002f81
    503c:	00002ec9 	.word	0x00002ec9
    5040:	20000024 	.word	0x20000024
    5044:	00002f2d 	.word	0x00002f2d
    5048:	00002ead 	.word	0x00002ead
    504c:	2000001c 	.word	0x2000001c
    5050:	00002f1d 	.word	0x00002f1d
    5054:	00003bb9 	.word	0x00003bb9
    5058:	00002eb9 	.word	0x00002eb9
    505c:	0000368d 	.word	0x0000368d
    5060:	00005eed 	.word	0x00005eed
    5064:	00004121 	.word	0x00004121
    5068:	00004149 	.word	0x00004149
    506c:	00005fa1 	.word	0x00005fa1
    5070:	00005e25 	.word	0x00005e25
    5074:	0000447d 	.word	0x0000447d
    5078:	00005a3d 	.word	0x00005a3d
    507c:	00005895 	.word	0x00005895
    5080:	00005fb9 	.word	0x00005fb9
    5084:	000042a1 	.word	0x000042a1
    5088:	000036e5 	.word	0x000036e5

0000508c <xQueueSemaphoreTake>:
{
    508c:	b5f0      	push	{r4, r5, r6, r7, lr}
    508e:	46ce      	mov	lr, r9
    5090:	4647      	mov	r7, r8
    5092:	b580      	push	{r7, lr}
    5094:	b085      	sub	sp, #20
    5096:	1e04      	subs	r4, r0, #0
    5098:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
    509a:	d004      	beq.n	50a6 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
    509c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    509e:	2b00      	cmp	r3, #0
    50a0:	d003      	beq.n	50aa <xQueueSemaphoreTake+0x1e>
    50a2:	b672      	cpsid	i
    50a4:	e7fe      	b.n	50a4 <xQueueSemaphoreTake+0x18>
	configASSERT( ( pxQueue ) );
    50a6:	b672      	cpsid	i
    50a8:	e7fe      	b.n	50a8 <xQueueSemaphoreTake+0x1c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    50aa:	4bb2      	ldr	r3, [pc, #712]	; (5374 <xQueueSemaphoreTake+0x2e8>)
    50ac:	4798      	blx	r3
    50ae:	2800      	cmp	r0, #0
    50b0:	d104      	bne.n	50bc <xQueueSemaphoreTake+0x30>
    50b2:	9b01      	ldr	r3, [sp, #4]
    50b4:	2b00      	cmp	r3, #0
    50b6:	d006      	beq.n	50c6 <xQueueSemaphoreTake+0x3a>
    50b8:	b672      	cpsid	i
    50ba:	e7fe      	b.n	50ba <xQueueSemaphoreTake+0x2e>
    50bc:	2500      	movs	r5, #0
    50be:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    50c0:	4bad      	ldr	r3, [pc, #692]	; (5378 <xQueueSemaphoreTake+0x2ec>)
    50c2:	4698      	mov	r8, r3
    50c4:	e0bd      	b.n	5242 <xQueueSemaphoreTake+0x1b6>
    50c6:	2500      	movs	r5, #0
    50c8:	2700      	movs	r7, #0
    50ca:	e7f9      	b.n	50c0 <xQueueSemaphoreTake+0x34>
				traceQUEUE_RECEIVE( pxQueue );
    50cc:	4bab      	ldr	r3, [pc, #684]	; (537c <xQueueSemaphoreTake+0x2f0>)
    50ce:	4798      	blx	r3
    50d0:	4bab      	ldr	r3, [pc, #684]	; (5380 <xQueueSemaphoreTake+0x2f4>)
    50d2:	4798      	blx	r3
    50d4:	4bab      	ldr	r3, [pc, #684]	; (5384 <xQueueSemaphoreTake+0x2f8>)
    50d6:	881b      	ldrh	r3, [r3, #0]
    50d8:	4203      	tst	r3, r0
    50da:	d019      	beq.n	5110 <xQueueSemaphoreTake+0x84>
    50dc:	0020      	movs	r0, r4
    50de:	4baa      	ldr	r3, [pc, #680]	; (5388 <xQueueSemaphoreTake+0x2fc>)
    50e0:	4798      	blx	r3
    50e2:	4ba8      	ldr	r3, [pc, #672]	; (5384 <xQueueSemaphoreTake+0x2f8>)
    50e4:	881b      	ldrh	r3, [r3, #0]
    50e6:	4203      	tst	r3, r0
    50e8:	d012      	beq.n	5110 <xQueueSemaphoreTake+0x84>
    50ea:	0020      	movs	r0, r4
    50ec:	4ba7      	ldr	r3, [pc, #668]	; (538c <xQueueSemaphoreTake+0x300>)
    50ee:	4698      	mov	r8, r3
    50f0:	4798      	blx	r3
    50f2:	4fa7      	ldr	r7, [pc, #668]	; (5390 <xQueueSemaphoreTake+0x304>)
    50f4:	5c3d      	ldrb	r5, [r7, r0]
    50f6:	3528      	adds	r5, #40	; 0x28
    50f8:	b2ed      	uxtb	r5, r5
    50fa:	0020      	movs	r0, r4
    50fc:	47c0      	blx	r8
    50fe:	5c3f      	ldrb	r7, [r7, r0]
    5100:	0020      	movs	r0, r4
    5102:	4ba4      	ldr	r3, [pc, #656]	; (5394 <xQueueSemaphoreTake+0x308>)
    5104:	4798      	blx	r3
    5106:	b2c2      	uxtb	r2, r0
    5108:	0039      	movs	r1, r7
    510a:	0028      	movs	r0, r5
    510c:	4ba2      	ldr	r3, [pc, #648]	; (5398 <xQueueSemaphoreTake+0x30c>)
    510e:	4798      	blx	r3
    5110:	0020      	movs	r0, r4
    5112:	4f9e      	ldr	r7, [pc, #632]	; (538c <xQueueSemaphoreTake+0x300>)
    5114:	47b8      	blx	r7
    5116:	4d9e      	ldr	r5, [pc, #632]	; (5390 <xQueueSemaphoreTake+0x304>)
    5118:	5c2b      	ldrb	r3, [r5, r0]
    511a:	4699      	mov	r9, r3
    511c:	0020      	movs	r0, r4
    511e:	4b9d      	ldr	r3, [pc, #628]	; (5394 <xQueueSemaphoreTake+0x308>)
    5120:	4798      	blx	r3
    5122:	b2c3      	uxtb	r3, r0
    5124:	4698      	mov	r8, r3
    5126:	0020      	movs	r0, r4
    5128:	47b8      	blx	r7
    512a:	5c2b      	ldrb	r3, [r5, r0]
    512c:	2b02      	cmp	r3, #2
    512e:	d124      	bne.n	517a <xQueueSemaphoreTake+0xee>
    5130:	4b92      	ldr	r3, [pc, #584]	; (537c <xQueueSemaphoreTake+0x2f0>)
    5132:	4798      	blx	r3
    5134:	4b99      	ldr	r3, [pc, #612]	; (539c <xQueueSemaphoreTake+0x310>)
    5136:	4798      	blx	r3
    5138:	b2c2      	uxtb	r2, r0
    513a:	4641      	mov	r1, r8
    513c:	4648      	mov	r0, r9
    513e:	4b98      	ldr	r3, [pc, #608]	; (53a0 <xQueueSemaphoreTake+0x314>)
    5140:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    5142:	3e01      	subs	r6, #1
    5144:	63a6      	str	r6, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    5146:	6823      	ldr	r3, [r4, #0]
    5148:	2b00      	cmp	r3, #0
    514a:	d102      	bne.n	5152 <xQueueSemaphoreTake+0xc6>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    514c:	4b95      	ldr	r3, [pc, #596]	; (53a4 <xQueueSemaphoreTake+0x318>)
    514e:	4798      	blx	r3
    5150:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5152:	6923      	ldr	r3, [r4, #16]
    5154:	2b00      	cmp	r3, #0
    5156:	d007      	beq.n	5168 <xQueueSemaphoreTake+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5158:	0020      	movs	r0, r4
    515a:	3010      	adds	r0, #16
    515c:	4b92      	ldr	r3, [pc, #584]	; (53a8 <xQueueSemaphoreTake+0x31c>)
    515e:	4798      	blx	r3
    5160:	2800      	cmp	r0, #0
    5162:	d001      	beq.n	5168 <xQueueSemaphoreTake+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
    5164:	4b91      	ldr	r3, [pc, #580]	; (53ac <xQueueSemaphoreTake+0x320>)
    5166:	4798      	blx	r3
				taskEXIT_CRITICAL();
    5168:	4b91      	ldr	r3, [pc, #580]	; (53b0 <xQueueSemaphoreTake+0x324>)
    516a:	4798      	blx	r3
				return pdPASS;
    516c:	2501      	movs	r5, #1
}
    516e:	0028      	movs	r0, r5
    5170:	b005      	add	sp, #20
    5172:	bc0c      	pop	{r2, r3}
    5174:	4690      	mov	r8, r2
    5176:	4699      	mov	r9, r3
    5178:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
    517a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    517c:	3a01      	subs	r2, #1
    517e:	b2d2      	uxtb	r2, r2
    5180:	e7db      	b.n	513a <xQueueSemaphoreTake+0xae>
						configASSERT( xInheritanceOccurred == pdFALSE );
    5182:	2d00      	cmp	r5, #0
    5184:	d001      	beq.n	518a <xQueueSemaphoreTake+0xfe>
    5186:	b672      	cpsid	i
    5188:	e7fe      	b.n	5188 <xQueueSemaphoreTake+0xfc>
					taskEXIT_CRITICAL();
    518a:	4b89      	ldr	r3, [pc, #548]	; (53b0 <xQueueSemaphoreTake+0x324>)
    518c:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    518e:	4b7b      	ldr	r3, [pc, #492]	; (537c <xQueueSemaphoreTake+0x2f0>)
    5190:	4798      	blx	r3
    5192:	4b7b      	ldr	r3, [pc, #492]	; (5380 <xQueueSemaphoreTake+0x2f4>)
    5194:	4798      	blx	r3
    5196:	4b7b      	ldr	r3, [pc, #492]	; (5384 <xQueueSemaphoreTake+0x2f8>)
    5198:	881b      	ldrh	r3, [r3, #0]
    519a:	4203      	tst	r3, r0
    519c:	d0e7      	beq.n	516e <xQueueSemaphoreTake+0xe2>
    519e:	0020      	movs	r0, r4
    51a0:	4b79      	ldr	r3, [pc, #484]	; (5388 <xQueueSemaphoreTake+0x2fc>)
    51a2:	4798      	blx	r3
    51a4:	4b77      	ldr	r3, [pc, #476]	; (5384 <xQueueSemaphoreTake+0x2f8>)
    51a6:	881b      	ldrh	r3, [r3, #0]
    51a8:	4203      	tst	r3, r0
    51aa:	d0e0      	beq.n	516e <xQueueSemaphoreTake+0xe2>
    51ac:	0020      	movs	r0, r4
    51ae:	4b77      	ldr	r3, [pc, #476]	; (538c <xQueueSemaphoreTake+0x300>)
    51b0:	4698      	mov	r8, r3
    51b2:	4798      	blx	r3
    51b4:	4f76      	ldr	r7, [pc, #472]	; (5390 <xQueueSemaphoreTake+0x304>)
    51b6:	5c3e      	ldrb	r6, [r7, r0]
    51b8:	3650      	adds	r6, #80	; 0x50
    51ba:	b2f6      	uxtb	r6, r6
    51bc:	0020      	movs	r0, r4
    51be:	47c0      	blx	r8
    51c0:	5c3f      	ldrb	r7, [r7, r0]
    51c2:	0020      	movs	r0, r4
    51c4:	4b73      	ldr	r3, [pc, #460]	; (5394 <xQueueSemaphoreTake+0x308>)
    51c6:	4798      	blx	r3
    51c8:	b2c2      	uxtb	r2, r0
    51ca:	0039      	movs	r1, r7
    51cc:	0030      	movs	r0, r6
    51ce:	4b72      	ldr	r3, [pc, #456]	; (5398 <xQueueSemaphoreTake+0x30c>)
    51d0:	4798      	blx	r3
    51d2:	e7cc      	b.n	516e <xQueueSemaphoreTake+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
    51d4:	a802      	add	r0, sp, #8
    51d6:	4b77      	ldr	r3, [pc, #476]	; (53b4 <xQueueSemaphoreTake+0x328>)
    51d8:	4798      	blx	r3
    51da:	e03c      	b.n	5256 <xQueueSemaphoreTake+0x1ca>
		prvLockQueue( pxQueue );
    51dc:	2200      	movs	r2, #0
    51de:	2344      	movs	r3, #68	; 0x44
    51e0:	54e2      	strb	r2, [r4, r3]
    51e2:	e043      	b.n	526c <xQueueSemaphoreTake+0x1e0>
    51e4:	2200      	movs	r2, #0
    51e6:	2345      	movs	r3, #69	; 0x45
    51e8:	54e2      	strb	r2, [r4, r3]
    51ea:	e044      	b.n	5276 <xQueueSemaphoreTake+0x1ea>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    51ec:	0020      	movs	r0, r4
    51ee:	4b66      	ldr	r3, [pc, #408]	; (5388 <xQueueSemaphoreTake+0x2fc>)
    51f0:	4798      	blx	r3
    51f2:	4b64      	ldr	r3, [pc, #400]	; (5384 <xQueueSemaphoreTake+0x2f8>)
    51f4:	881b      	ldrh	r3, [r3, #0]
    51f6:	4203      	tst	r3, r0
    51f8:	d052      	beq.n	52a0 <xQueueSemaphoreTake+0x214>
    51fa:	0020      	movs	r0, r4
    51fc:	4b63      	ldr	r3, [pc, #396]	; (538c <xQueueSemaphoreTake+0x300>)
    51fe:	4699      	mov	r9, r3
    5200:	4798      	blx	r3
    5202:	4f63      	ldr	r7, [pc, #396]	; (5390 <xQueueSemaphoreTake+0x304>)
    5204:	5c3e      	ldrb	r6, [r7, r0]
    5206:	3668      	adds	r6, #104	; 0x68
    5208:	b2f6      	uxtb	r6, r6
    520a:	0020      	movs	r0, r4
    520c:	47c8      	blx	r9
    520e:	5c3f      	ldrb	r7, [r7, r0]
    5210:	0020      	movs	r0, r4
    5212:	4b60      	ldr	r3, [pc, #384]	; (5394 <xQueueSemaphoreTake+0x308>)
    5214:	4798      	blx	r3
    5216:	b2c2      	uxtb	r2, r0
    5218:	0039      	movs	r1, r7
    521a:	0030      	movs	r0, r6
    521c:	4b5e      	ldr	r3, [pc, #376]	; (5398 <xQueueSemaphoreTake+0x30c>)
    521e:	4798      	blx	r3
    5220:	e03e      	b.n	52a0 <xQueueSemaphoreTake+0x214>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    5222:	6823      	ldr	r3, [r4, #0]
    5224:	2b00      	cmp	r3, #0
    5226:	d052      	beq.n	52ce <xQueueSemaphoreTake+0x242>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    5228:	0020      	movs	r0, r4
    522a:	3024      	adds	r0, #36	; 0x24
    522c:	9901      	ldr	r1, [sp, #4]
    522e:	4b62      	ldr	r3, [pc, #392]	; (53b8 <xQueueSemaphoreTake+0x32c>)
    5230:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    5232:	0020      	movs	r0, r4
    5234:	4b61      	ldr	r3, [pc, #388]	; (53bc <xQueueSemaphoreTake+0x330>)
    5236:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    5238:	4b61      	ldr	r3, [pc, #388]	; (53c0 <xQueueSemaphoreTake+0x334>)
    523a:	4798      	blx	r3
    523c:	2800      	cmp	r0, #0
    523e:	d04f      	beq.n	52e0 <xQueueSemaphoreTake+0x254>
    5240:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    5242:	47c0      	blx	r8
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    5244:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    5246:	2e00      	cmp	r6, #0
    5248:	d000      	beq.n	524c <xQueueSemaphoreTake+0x1c0>
    524a:	e73f      	b.n	50cc <xQueueSemaphoreTake+0x40>
				if( xTicksToWait == ( TickType_t ) 0 )
    524c:	9b01      	ldr	r3, [sp, #4]
    524e:	2b00      	cmp	r3, #0
    5250:	d097      	beq.n	5182 <xQueueSemaphoreTake+0xf6>
				else if( xEntryTimeSet == pdFALSE )
    5252:	2f00      	cmp	r7, #0
    5254:	d0be      	beq.n	51d4 <xQueueSemaphoreTake+0x148>
		taskEXIT_CRITICAL();
    5256:	4b56      	ldr	r3, [pc, #344]	; (53b0 <xQueueSemaphoreTake+0x324>)
    5258:	4798      	blx	r3
		vTaskSuspendAll();
    525a:	4b5a      	ldr	r3, [pc, #360]	; (53c4 <xQueueSemaphoreTake+0x338>)
    525c:	4798      	blx	r3
		prvLockQueue( pxQueue );
    525e:	4b46      	ldr	r3, [pc, #280]	; (5378 <xQueueSemaphoreTake+0x2ec>)
    5260:	4798      	blx	r3
    5262:	2344      	movs	r3, #68	; 0x44
    5264:	5ce3      	ldrb	r3, [r4, r3]
    5266:	b25b      	sxtb	r3, r3
    5268:	3301      	adds	r3, #1
    526a:	d0b7      	beq.n	51dc <xQueueSemaphoreTake+0x150>
    526c:	2345      	movs	r3, #69	; 0x45
    526e:	5ce3      	ldrb	r3, [r4, r3]
    5270:	b25b      	sxtb	r3, r3
    5272:	3301      	adds	r3, #1
    5274:	d0b6      	beq.n	51e4 <xQueueSemaphoreTake+0x158>
    5276:	4b4e      	ldr	r3, [pc, #312]	; (53b0 <xQueueSemaphoreTake+0x324>)
    5278:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    527a:	a901      	add	r1, sp, #4
    527c:	a802      	add	r0, sp, #8
    527e:	4b52      	ldr	r3, [pc, #328]	; (53c8 <xQueueSemaphoreTake+0x33c>)
    5280:	4798      	blx	r3
    5282:	2800      	cmp	r0, #0
    5284:	d135      	bne.n	52f2 <xQueueSemaphoreTake+0x266>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    5286:	0020      	movs	r0, r4
    5288:	4b50      	ldr	r3, [pc, #320]	; (53cc <xQueueSemaphoreTake+0x340>)
    528a:	4798      	blx	r3
    528c:	2800      	cmp	r0, #0
    528e:	d02a      	beq.n	52e6 <xQueueSemaphoreTake+0x25a>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    5290:	4b3a      	ldr	r3, [pc, #232]	; (537c <xQueueSemaphoreTake+0x2f0>)
    5292:	4798      	blx	r3
    5294:	4b3a      	ldr	r3, [pc, #232]	; (5380 <xQueueSemaphoreTake+0x2f4>)
    5296:	4798      	blx	r3
    5298:	4b3a      	ldr	r3, [pc, #232]	; (5384 <xQueueSemaphoreTake+0x2f8>)
    529a:	881b      	ldrh	r3, [r3, #0]
    529c:	4203      	tst	r3, r0
    529e:	d1a5      	bne.n	51ec <xQueueSemaphoreTake+0x160>
    52a0:	0020      	movs	r0, r4
    52a2:	4b3a      	ldr	r3, [pc, #232]	; (538c <xQueueSemaphoreTake+0x300>)
    52a4:	4798      	blx	r3
    52a6:	4b3a      	ldr	r3, [pc, #232]	; (5390 <xQueueSemaphoreTake+0x304>)
    52a8:	5c1b      	ldrb	r3, [r3, r0]
    52aa:	2b02      	cmp	r3, #2
    52ac:	d0b9      	beq.n	5222 <xQueueSemaphoreTake+0x196>
    52ae:	4b33      	ldr	r3, [pc, #204]	; (537c <xQueueSemaphoreTake+0x2f0>)
    52b0:	4798      	blx	r3
    52b2:	4b33      	ldr	r3, [pc, #204]	; (5380 <xQueueSemaphoreTake+0x2f4>)
    52b4:	4798      	blx	r3
    52b6:	4b33      	ldr	r3, [pc, #204]	; (5384 <xQueueSemaphoreTake+0x2f8>)
    52b8:	881b      	ldrh	r3, [r3, #0]
    52ba:	4203      	tst	r3, r0
    52bc:	d0b1      	beq.n	5222 <xQueueSemaphoreTake+0x196>
    52be:	4b2f      	ldr	r3, [pc, #188]	; (537c <xQueueSemaphoreTake+0x2f0>)
    52c0:	4798      	blx	r3
    52c2:	4b36      	ldr	r3, [pc, #216]	; (539c <xQueueSemaphoreTake+0x310>)
    52c4:	4798      	blx	r3
    52c6:	b2c0      	uxtb	r0, r0
    52c8:	4b41      	ldr	r3, [pc, #260]	; (53d0 <xQueueSemaphoreTake+0x344>)
    52ca:	4798      	blx	r3
    52cc:	e7a9      	b.n	5222 <xQueueSemaphoreTake+0x196>
						taskENTER_CRITICAL();
    52ce:	4b2a      	ldr	r3, [pc, #168]	; (5378 <xQueueSemaphoreTake+0x2ec>)
    52d0:	4798      	blx	r3
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    52d2:	6860      	ldr	r0, [r4, #4]
    52d4:	4b3f      	ldr	r3, [pc, #252]	; (53d4 <xQueueSemaphoreTake+0x348>)
    52d6:	4798      	blx	r3
    52d8:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
    52da:	4b35      	ldr	r3, [pc, #212]	; (53b0 <xQueueSemaphoreTake+0x324>)
    52dc:	4798      	blx	r3
    52de:	e7a3      	b.n	5228 <xQueueSemaphoreTake+0x19c>
					portYIELD_WITHIN_API();
    52e0:	4b32      	ldr	r3, [pc, #200]	; (53ac <xQueueSemaphoreTake+0x320>)
    52e2:	4798      	blx	r3
    52e4:	e7ac      	b.n	5240 <xQueueSemaphoreTake+0x1b4>
				prvUnlockQueue( pxQueue );
    52e6:	0020      	movs	r0, r4
    52e8:	4b34      	ldr	r3, [pc, #208]	; (53bc <xQueueSemaphoreTake+0x330>)
    52ea:	4798      	blx	r3
				( void ) xTaskResumeAll();
    52ec:	4b34      	ldr	r3, [pc, #208]	; (53c0 <xQueueSemaphoreTake+0x334>)
    52ee:	4798      	blx	r3
    52f0:	e7a6      	b.n	5240 <xQueueSemaphoreTake+0x1b4>
			prvUnlockQueue( pxQueue );
    52f2:	0020      	movs	r0, r4
    52f4:	4b31      	ldr	r3, [pc, #196]	; (53bc <xQueueSemaphoreTake+0x330>)
    52f6:	4798      	blx	r3
			( void ) xTaskResumeAll();
    52f8:	4b31      	ldr	r3, [pc, #196]	; (53c0 <xQueueSemaphoreTake+0x334>)
    52fa:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    52fc:	0020      	movs	r0, r4
    52fe:	4b33      	ldr	r3, [pc, #204]	; (53cc <xQueueSemaphoreTake+0x340>)
    5300:	4798      	blx	r3
    5302:	2800      	cmp	r0, #0
    5304:	d09c      	beq.n	5240 <xQueueSemaphoreTake+0x1b4>
					if( xInheritanceOccurred != pdFALSE )
    5306:	2d00      	cmp	r5, #0
    5308:	d00e      	beq.n	5328 <xQueueSemaphoreTake+0x29c>
						taskENTER_CRITICAL();
    530a:	4b1b      	ldr	r3, [pc, #108]	; (5378 <xQueueSemaphoreTake+0x2ec>)
    530c:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    530e:	6a63      	ldr	r3, [r4, #36]	; 0x24
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    5310:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    5312:	2b00      	cmp	r3, #0
    5314:	d003      	beq.n	531e <xQueueSemaphoreTake+0x292>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    5316:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5318:	681b      	ldr	r3, [r3, #0]
    531a:	3105      	adds	r1, #5
    531c:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    531e:	6860      	ldr	r0, [r4, #4]
    5320:	4b2d      	ldr	r3, [pc, #180]	; (53d8 <xQueueSemaphoreTake+0x34c>)
    5322:	4798      	blx	r3
						taskEXIT_CRITICAL();
    5324:	4b22      	ldr	r3, [pc, #136]	; (53b0 <xQueueSemaphoreTake+0x324>)
    5326:	4798      	blx	r3
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    5328:	4b14      	ldr	r3, [pc, #80]	; (537c <xQueueSemaphoreTake+0x2f0>)
    532a:	4798      	blx	r3
    532c:	4b14      	ldr	r3, [pc, #80]	; (5380 <xQueueSemaphoreTake+0x2f4>)
    532e:	4798      	blx	r3
    5330:	4b14      	ldr	r3, [pc, #80]	; (5384 <xQueueSemaphoreTake+0x2f8>)
    5332:	881b      	ldrh	r3, [r3, #0]
				return errQUEUE_EMPTY;
    5334:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    5336:	4203      	tst	r3, r0
    5338:	d100      	bne.n	533c <xQueueSemaphoreTake+0x2b0>
    533a:	e718      	b.n	516e <xQueueSemaphoreTake+0xe2>
    533c:	0020      	movs	r0, r4
    533e:	4b12      	ldr	r3, [pc, #72]	; (5388 <xQueueSemaphoreTake+0x2fc>)
    5340:	4798      	blx	r3
    5342:	4b10      	ldr	r3, [pc, #64]	; (5384 <xQueueSemaphoreTake+0x2f8>)
    5344:	881b      	ldrh	r3, [r3, #0]
    5346:	4203      	tst	r3, r0
    5348:	d100      	bne.n	534c <xQueueSemaphoreTake+0x2c0>
    534a:	e710      	b.n	516e <xQueueSemaphoreTake+0xe2>
    534c:	0020      	movs	r0, r4
    534e:	4f0f      	ldr	r7, [pc, #60]	; (538c <xQueueSemaphoreTake+0x300>)
    5350:	47b8      	blx	r7
    5352:	4e0f      	ldr	r6, [pc, #60]	; (5390 <xQueueSemaphoreTake+0x304>)
    5354:	5c35      	ldrb	r5, [r6, r0]
    5356:	3550      	adds	r5, #80	; 0x50
    5358:	b2ed      	uxtb	r5, r5
    535a:	0020      	movs	r0, r4
    535c:	47b8      	blx	r7
    535e:	5c36      	ldrb	r6, [r6, r0]
    5360:	0020      	movs	r0, r4
    5362:	4b0c      	ldr	r3, [pc, #48]	; (5394 <xQueueSemaphoreTake+0x308>)
    5364:	4798      	blx	r3
    5366:	b2c2      	uxtb	r2, r0
    5368:	0031      	movs	r1, r6
    536a:	0028      	movs	r0, r5
    536c:	4b0a      	ldr	r3, [pc, #40]	; (5398 <xQueueSemaphoreTake+0x30c>)
    536e:	4798      	blx	r3
				return errQUEUE_EMPTY;
    5370:	2500      	movs	r5, #0
    5372:	e6fc      	b.n	516e <xQueueSemaphoreTake+0xe2>
    5374:	00006055 	.word	0x00006055
    5378:	00004131 	.word	0x00004131
    537c:	00002f81 	.word	0x00002f81
    5380:	00002ec9 	.word	0x00002ec9
    5384:	20000024 	.word	0x20000024
    5388:	00002f2d 	.word	0x00002f2d
    538c:	00002ead 	.word	0x00002ead
    5390:	2000001c 	.word	0x2000001c
    5394:	00002f1d 	.word	0x00002f1d
    5398:	00003bb9 	.word	0x00003bb9
    539c:	00002eb9 	.word	0x00002eb9
    53a0:	0000368d 	.word	0x0000368d
    53a4:	00006385 	.word	0x00006385
    53a8:	00005eed 	.word	0x00005eed
    53ac:	00004121 	.word	0x00004121
    53b0:	00004149 	.word	0x00004149
    53b4:	00005fa1 	.word	0x00005fa1
    53b8:	00005e25 	.word	0x00005e25
    53bc:	0000447d 	.word	0x0000447d
    53c0:	00005a3d 	.word	0x00005a3d
    53c4:	00005895 	.word	0x00005895
    53c8:	00005fb9 	.word	0x00005fb9
    53cc:	000042a1 	.word	0x000042a1
    53d0:	000036e5 	.word	0x000036e5
    53d4:	00006075 	.word	0x00006075
    53d8:	00006281 	.word	0x00006281

000053dc <uxQueueGetQueueNumber>:
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    53dc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
    53de:	4770      	bx	lr

000053e0 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
    53e0:	64c1      	str	r1, [r0, #76]	; 0x4c
	}
    53e2:	4770      	bx	lr

000053e4 <ucQueueGetQueueType>:
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    53e4:	2350      	movs	r3, #80	; 0x50
    53e6:	5cc0      	ldrb	r0, [r0, r3]
	}
    53e8:	4770      	bx	lr
	...

000053ec <vQueueWaitForMessageRestricted>:
	{
    53ec:	b570      	push	{r4, r5, r6, lr}
    53ee:	0004      	movs	r4, r0
    53f0:	000d      	movs	r5, r1
    53f2:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
    53f4:	4b11      	ldr	r3, [pc, #68]	; (543c <vQueueWaitForMessageRestricted+0x50>)
    53f6:	4798      	blx	r3
    53f8:	2344      	movs	r3, #68	; 0x44
    53fa:	5ce3      	ldrb	r3, [r4, r3]
    53fc:	b25b      	sxtb	r3, r3
    53fe:	3301      	adds	r3, #1
    5400:	d00d      	beq.n	541e <vQueueWaitForMessageRestricted+0x32>
    5402:	2345      	movs	r3, #69	; 0x45
    5404:	5ce3      	ldrb	r3, [r4, r3]
    5406:	b25b      	sxtb	r3, r3
    5408:	3301      	adds	r3, #1
    540a:	d00c      	beq.n	5426 <vQueueWaitForMessageRestricted+0x3a>
    540c:	4b0c      	ldr	r3, [pc, #48]	; (5440 <vQueueWaitForMessageRestricted+0x54>)
    540e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    5410:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5412:	2b00      	cmp	r3, #0
    5414:	d00b      	beq.n	542e <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
    5416:	0020      	movs	r0, r4
    5418:	4b0a      	ldr	r3, [pc, #40]	; (5444 <vQueueWaitForMessageRestricted+0x58>)
    541a:	4798      	blx	r3
	}
    541c:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    541e:	2200      	movs	r2, #0
    5420:	2344      	movs	r3, #68	; 0x44
    5422:	54e2      	strb	r2, [r4, r3]
    5424:	e7ed      	b.n	5402 <vQueueWaitForMessageRestricted+0x16>
    5426:	2200      	movs	r2, #0
    5428:	2345      	movs	r3, #69	; 0x45
    542a:	54e2      	strb	r2, [r4, r3]
    542c:	e7ee      	b.n	540c <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    542e:	0020      	movs	r0, r4
    5430:	3024      	adds	r0, #36	; 0x24
    5432:	0032      	movs	r2, r6
    5434:	0029      	movs	r1, r5
    5436:	4b04      	ldr	r3, [pc, #16]	; (5448 <vQueueWaitForMessageRestricted+0x5c>)
    5438:	4798      	blx	r3
    543a:	e7ec      	b.n	5416 <vQueueWaitForMessageRestricted+0x2a>
    543c:	00004131 	.word	0x00004131
    5440:	00004149 	.word	0x00004149
    5444:	0000447d 	.word	0x0000447d
    5448:	00005e51 	.word	0x00005e51

0000544c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    544c:	4b08      	ldr	r3, [pc, #32]	; (5470 <prvResetNextTaskUnblockTime+0x24>)
    544e:	681b      	ldr	r3, [r3, #0]
    5450:	681b      	ldr	r3, [r3, #0]
    5452:	2b00      	cmp	r3, #0
    5454:	d007      	beq.n	5466 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    5456:	4b06      	ldr	r3, [pc, #24]	; (5470 <prvResetNextTaskUnblockTime+0x24>)
    5458:	681b      	ldr	r3, [r3, #0]
    545a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    545c:	68db      	ldr	r3, [r3, #12]
    545e:	685a      	ldr	r2, [r3, #4]
    5460:	4b04      	ldr	r3, [pc, #16]	; (5474 <prvResetNextTaskUnblockTime+0x28>)
    5462:	601a      	str	r2, [r3, #0]
	}
}
    5464:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    5466:	2201      	movs	r2, #1
    5468:	4252      	negs	r2, r2
    546a:	4b02      	ldr	r3, [pc, #8]	; (5474 <prvResetNextTaskUnblockTime+0x28>)
    546c:	601a      	str	r2, [r3, #0]
    546e:	e7f9      	b.n	5464 <prvResetNextTaskUnblockTime+0x18>
    5470:	200036c8 	.word	0x200036c8
    5474:	20003778 	.word	0x20003778

00005478 <prvIdleTask>:
{
    5478:	b5f0      	push	{r4, r5, r6, r7, lr}
    547a:	46d6      	mov	lr, sl
    547c:	464f      	mov	r7, r9
    547e:	4646      	mov	r6, r8
    5480:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    5482:	4b14      	ldr	r3, [pc, #80]	; (54d4 <prvIdleTask+0x5c>)
    5484:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
    5486:	4b14      	ldr	r3, [pc, #80]	; (54d8 <prvIdleTask+0x60>)
    5488:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    548a:	4f14      	ldr	r7, [pc, #80]	; (54dc <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    548c:	4b14      	ldr	r3, [pc, #80]	; (54e0 <prvIdleTask+0x68>)
    548e:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    5490:	464b      	mov	r3, r9
    5492:	681b      	ldr	r3, [r3, #0]
    5494:	2b00      	cmp	r3, #0
    5496:	d016      	beq.n	54c6 <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
    5498:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    549a:	68fb      	ldr	r3, [r7, #12]
    549c:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    549e:	1d28      	adds	r0, r5, #4
    54a0:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
    54a2:	4a10      	ldr	r2, [pc, #64]	; (54e4 <prvIdleTask+0x6c>)
    54a4:	6813      	ldr	r3, [r2, #0]
    54a6:	3b01      	subs	r3, #1
    54a8:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    54aa:	4c0a      	ldr	r4, [pc, #40]	; (54d4 <prvIdleTask+0x5c>)
    54ac:	6823      	ldr	r3, [r4, #0]
    54ae:	3b01      	subs	r3, #1
    54b0:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    54b2:	4b0d      	ldr	r3, [pc, #52]	; (54e8 <prvIdleTask+0x70>)
    54b4:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    54b6:	6b28      	ldr	r0, [r5, #48]	; 0x30
    54b8:	4e0c      	ldr	r6, [pc, #48]	; (54ec <prvIdleTask+0x74>)
    54ba:	47b0      	blx	r6
			vPortFree( pxTCB );
    54bc:	0028      	movs	r0, r5
    54be:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    54c0:	6823      	ldr	r3, [r4, #0]
    54c2:	2b00      	cmp	r3, #0
    54c4:	d1e8      	bne.n	5498 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    54c6:	4b0a      	ldr	r3, [pc, #40]	; (54f0 <prvIdleTask+0x78>)
    54c8:	681b      	ldr	r3, [r3, #0]
    54ca:	2b01      	cmp	r3, #1
    54cc:	d9e0      	bls.n	5490 <prvIdleTask+0x18>
				taskYIELD();
    54ce:	4b09      	ldr	r3, [pc, #36]	; (54f4 <prvIdleTask+0x7c>)
    54d0:	4798      	blx	r3
    54d2:	e7dd      	b.n	5490 <prvIdleTask+0x18>
    54d4:	20003738 	.word	0x20003738
    54d8:	00004131 	.word	0x00004131
    54dc:	200037ac 	.word	0x200037ac
    54e0:	00003fff 	.word	0x00003fff
    54e4:	20003734 	.word	0x20003734
    54e8:	00004149 	.word	0x00004149
    54ec:	00004285 	.word	0x00004285
    54f0:	200036d0 	.word	0x200036d0
    54f4:	00004121 	.word	0x00004121

000054f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    54f8:	b570      	push	{r4, r5, r6, lr}
    54fa:	0004      	movs	r4, r0
    54fc:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    54fe:	4b17      	ldr	r3, [pc, #92]	; (555c <prvAddCurrentTaskToDelayedList+0x64>)
    5500:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    5502:	4b17      	ldr	r3, [pc, #92]	; (5560 <prvAddCurrentTaskToDelayedList+0x68>)
    5504:	6818      	ldr	r0, [r3, #0]
    5506:	3004      	adds	r0, #4
    5508:	4b16      	ldr	r3, [pc, #88]	; (5564 <prvAddCurrentTaskToDelayedList+0x6c>)
    550a:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    550c:	1c63      	adds	r3, r4, #1
    550e:	d013      	beq.n	5538 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    5510:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    5512:	4b13      	ldr	r3, [pc, #76]	; (5560 <prvAddCurrentTaskToDelayedList+0x68>)
    5514:	681b      	ldr	r3, [r3, #0]
    5516:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    5518:	42a6      	cmp	r6, r4
    551a:	d816      	bhi.n	554a <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    551c:	4b12      	ldr	r3, [pc, #72]	; (5568 <prvAddCurrentTaskToDelayedList+0x70>)
    551e:	6818      	ldr	r0, [r3, #0]
    5520:	4b0f      	ldr	r3, [pc, #60]	; (5560 <prvAddCurrentTaskToDelayedList+0x68>)
    5522:	6819      	ldr	r1, [r3, #0]
    5524:	3104      	adds	r1, #4
    5526:	4b11      	ldr	r3, [pc, #68]	; (556c <prvAddCurrentTaskToDelayedList+0x74>)
    5528:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    552a:	4b11      	ldr	r3, [pc, #68]	; (5570 <prvAddCurrentTaskToDelayedList+0x78>)
    552c:	681b      	ldr	r3, [r3, #0]
    552e:	429c      	cmp	r4, r3
    5530:	d212      	bcs.n	5558 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
    5532:	4b0f      	ldr	r3, [pc, #60]	; (5570 <prvAddCurrentTaskToDelayedList+0x78>)
    5534:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    5536:	e00f      	b.n	5558 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    5538:	2d00      	cmp	r5, #0
    553a:	d0e9      	beq.n	5510 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    553c:	4b08      	ldr	r3, [pc, #32]	; (5560 <prvAddCurrentTaskToDelayedList+0x68>)
    553e:	6819      	ldr	r1, [r3, #0]
    5540:	3104      	adds	r1, #4
    5542:	480c      	ldr	r0, [pc, #48]	; (5574 <prvAddCurrentTaskToDelayedList+0x7c>)
    5544:	4b0c      	ldr	r3, [pc, #48]	; (5578 <prvAddCurrentTaskToDelayedList+0x80>)
    5546:	4798      	blx	r3
    5548:	e006      	b.n	5558 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    554a:	4b0c      	ldr	r3, [pc, #48]	; (557c <prvAddCurrentTaskToDelayedList+0x84>)
    554c:	6818      	ldr	r0, [r3, #0]
    554e:	4b04      	ldr	r3, [pc, #16]	; (5560 <prvAddCurrentTaskToDelayedList+0x68>)
    5550:	6819      	ldr	r1, [r3, #0]
    5552:	3104      	adds	r1, #4
    5554:	4b05      	ldr	r3, [pc, #20]	; (556c <prvAddCurrentTaskToDelayedList+0x74>)
    5556:	4798      	blx	r3
}
    5558:	bd70      	pop	{r4, r5, r6, pc}
    555a:	46c0      	nop			; (mov r8, r8)
    555c:	200037c0 	.word	0x200037c0
    5560:	200036c4 	.word	0x200036c4
    5564:	00003fff 	.word	0x00003fff
    5568:	200036c8 	.word	0x200036c8
    556c:	00003fd1 	.word	0x00003fd1
    5570:	20003778 	.word	0x20003778
    5574:	20003798 	.word	0x20003798
    5578:	00003fb9 	.word	0x00003fb9
    557c:	200036cc 	.word	0x200036cc

00005580 <xTaskCreate>:
	{
    5580:	b5f0      	push	{r4, r5, r6, r7, lr}
    5582:	46c6      	mov	lr, r8
    5584:	b500      	push	{lr}
    5586:	b084      	sub	sp, #16
    5588:	9001      	str	r0, [sp, #4]
    558a:	000d      	movs	r5, r1
    558c:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    558e:	0097      	lsls	r7, r2, #2
    5590:	0038      	movs	r0, r7
    5592:	4b81      	ldr	r3, [pc, #516]	; (5798 <xTaskCreate+0x218>)
    5594:	4798      	blx	r3
    5596:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    5598:	d100      	bne.n	559c <xTaskCreate+0x1c>
    559a:	e0b6      	b.n	570a <xTaskCreate+0x18a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    559c:	2054      	movs	r0, #84	; 0x54
    559e:	4b7e      	ldr	r3, [pc, #504]	; (5798 <xTaskCreate+0x218>)
    55a0:	4798      	blx	r3
    55a2:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    55a4:	d100      	bne.n	55a8 <xTaskCreate+0x28>
    55a6:	e0ad      	b.n	5704 <xTaskCreate+0x184>
					pxNewTCB->pxStack = pxStack;
    55a8:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    55aa:	003a      	movs	r2, r7
    55ac:	21a5      	movs	r1, #165	; 0xa5
    55ae:	0030      	movs	r0, r6
    55b0:	4b7a      	ldr	r3, [pc, #488]	; (579c <xTaskCreate+0x21c>)
    55b2:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    55b4:	1f3a      	subs	r2, r7, #4
    55b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    55b8:	469c      	mov	ip, r3
    55ba:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    55bc:	2307      	movs	r3, #7
    55be:	439a      	bics	r2, r3
    55c0:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    55c2:	782a      	ldrb	r2, [r5, #0]
    55c4:	332d      	adds	r3, #45	; 0x2d
    55c6:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    55c8:	782b      	ldrb	r3, [r5, #0]
    55ca:	2b00      	cmp	r3, #0
    55cc:	d00d      	beq.n	55ea <xTaskCreate+0x6a>
    55ce:	3501      	adds	r5, #1
    55d0:	0023      	movs	r3, r4
    55d2:	3335      	adds	r3, #53	; 0x35
    55d4:	0020      	movs	r0, r4
    55d6:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    55d8:	782a      	ldrb	r2, [r5, #0]
    55da:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
    55dc:	782a      	ldrb	r2, [r5, #0]
    55de:	2a00      	cmp	r2, #0
    55e0:	d003      	beq.n	55ea <xTaskCreate+0x6a>
    55e2:	3501      	adds	r5, #1
    55e4:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    55e6:	4283      	cmp	r3, r0
    55e8:	d1f6      	bne.n	55d8 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    55ea:	2200      	movs	r2, #0
    55ec:	233b      	movs	r3, #59	; 0x3b
    55ee:	54e2      	strb	r2, [r4, r3]
    55f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    55f2:	2f04      	cmp	r7, #4
    55f4:	d900      	bls.n	55f8 <xTaskCreate+0x78>
    55f6:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
    55f8:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    55fa:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    55fc:	2600      	movs	r6, #0
    55fe:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    5600:	1d23      	adds	r3, r4, #4
    5602:	9303      	str	r3, [sp, #12]
    5604:	0018      	movs	r0, r3
    5606:	4d66      	ldr	r5, [pc, #408]	; (57a0 <xTaskCreate+0x220>)
    5608:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    560a:	0020      	movs	r0, r4
    560c:	3018      	adds	r0, #24
    560e:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    5610:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5612:	2305      	movs	r3, #5
    5614:	1bdb      	subs	r3, r3, r7
    5616:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    5618:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    561a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    561c:	2350      	movs	r3, #80	; 0x50
    561e:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    5620:	9a02      	ldr	r2, [sp, #8]
    5622:	9901      	ldr	r1, [sp, #4]
    5624:	4640      	mov	r0, r8
    5626:	4b5f      	ldr	r3, [pc, #380]	; (57a4 <xTaskCreate+0x224>)
    5628:	4798      	blx	r3
    562a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    562c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    562e:	2b00      	cmp	r3, #0
    5630:	d000      	beq.n	5634 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    5632:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    5634:	4b5c      	ldr	r3, [pc, #368]	; (57a8 <xTaskCreate+0x228>)
    5636:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    5638:	4a5c      	ldr	r2, [pc, #368]	; (57ac <xTaskCreate+0x22c>)
    563a:	6813      	ldr	r3, [r2, #0]
    563c:	3301      	adds	r3, #1
    563e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    5640:	4b5b      	ldr	r3, [pc, #364]	; (57b0 <xTaskCreate+0x230>)
    5642:	681b      	ldr	r3, [r3, #0]
    5644:	2b00      	cmp	r3, #0
    5646:	d063      	beq.n	5710 <xTaskCreate+0x190>
			if( xSchedulerRunning == pdFALSE )
    5648:	4b5a      	ldr	r3, [pc, #360]	; (57b4 <xTaskCreate+0x234>)
    564a:	681b      	ldr	r3, [r3, #0]
    564c:	2b00      	cmp	r3, #0
    564e:	d107      	bne.n	5660 <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    5650:	4b57      	ldr	r3, [pc, #348]	; (57b0 <xTaskCreate+0x230>)
    5652:	681b      	ldr	r3, [r3, #0]
    5654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5656:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5658:	4293      	cmp	r3, r2
    565a:	d801      	bhi.n	5660 <xTaskCreate+0xe0>
					pxCurrentTCB = pxNewTCB;
    565c:	4b54      	ldr	r3, [pc, #336]	; (57b0 <xTaskCreate+0x230>)
    565e:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
    5660:	4a55      	ldr	r2, [pc, #340]	; (57b8 <xTaskCreate+0x238>)
    5662:	6813      	ldr	r3, [r2, #0]
    5664:	3301      	adds	r3, #1
    5666:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    5668:	63e3      	str	r3, [r4, #60]	; 0x3c
		traceTASK_CREATE( pxNewTCB );
    566a:	2003      	movs	r0, #3
    566c:	4b53      	ldr	r3, [pc, #332]	; (57bc <xTaskCreate+0x23c>)
    566e:	4798      	blx	r3
    5670:	b281      	uxth	r1, r0
    5672:	0020      	movs	r0, r4
    5674:	4b52      	ldr	r3, [pc, #328]	; (57c0 <xTaskCreate+0x240>)
    5676:	4798      	blx	r3
    5678:	4b52      	ldr	r3, [pc, #328]	; (57c4 <xTaskCreate+0x244>)
    567a:	8819      	ldrh	r1, [r3, #0]
    567c:	0020      	movs	r0, r4
    567e:	4b52      	ldr	r3, [pc, #328]	; (57c8 <xTaskCreate+0x248>)
    5680:	4798      	blx	r3
    5682:	0020      	movs	r0, r4
    5684:	4e51      	ldr	r6, [pc, #324]	; (57cc <xTaskCreate+0x24c>)
    5686:	47b0      	blx	r6
    5688:	0022      	movs	r2, r4
    568a:	3234      	adds	r2, #52	; 0x34
    568c:	b2c1      	uxtb	r1, r0
    568e:	2003      	movs	r0, #3
    5690:	4b4f      	ldr	r3, [pc, #316]	; (57d0 <xTaskCreate+0x250>)
    5692:	4798      	blx	r3
    5694:	0020      	movs	r0, r4
    5696:	47b0      	blx	r6
    5698:	232c      	movs	r3, #44	; 0x2c
    569a:	18e3      	adds	r3, r4, r3
    569c:	781a      	ldrb	r2, [r3, #0]
    569e:	b2c1      	uxtb	r1, r0
    56a0:	2003      	movs	r0, #3
    56a2:	4b4c      	ldr	r3, [pc, #304]	; (57d4 <xTaskCreate+0x254>)
    56a4:	4798      	blx	r3
    56a6:	4b4c      	ldr	r3, [pc, #304]	; (57d8 <xTaskCreate+0x258>)
    56a8:	4798      	blx	r3
    56aa:	4b4c      	ldr	r3, [pc, #304]	; (57dc <xTaskCreate+0x25c>)
    56ac:	4798      	blx	r3
    56ae:	4b4c      	ldr	r3, [pc, #304]	; (57e0 <xTaskCreate+0x260>)
    56b0:	881b      	ldrh	r3, [r3, #0]
    56b2:	4203      	tst	r3, r0
    56b4:	d154      	bne.n	5760 <xTaskCreate+0x1e0>
		prvAddTaskToReadyList( pxNewTCB );
    56b6:	0020      	movs	r0, r4
    56b8:	4b48      	ldr	r3, [pc, #288]	; (57dc <xTaskCreate+0x25c>)
    56ba:	4798      	blx	r3
    56bc:	4b48      	ldr	r3, [pc, #288]	; (57e0 <xTaskCreate+0x260>)
    56be:	881b      	ldrh	r3, [r3, #0]
    56c0:	4203      	tst	r3, r0
    56c2:	d15d      	bne.n	5780 <xTaskCreate+0x200>
    56c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    56c6:	4a47      	ldr	r2, [pc, #284]	; (57e4 <xTaskCreate+0x264>)
    56c8:	6812      	ldr	r2, [r2, #0]
    56ca:	4293      	cmp	r3, r2
    56cc:	d901      	bls.n	56d2 <xTaskCreate+0x152>
    56ce:	4a45      	ldr	r2, [pc, #276]	; (57e4 <xTaskCreate+0x264>)
    56d0:	6013      	str	r3, [r2, #0]
    56d2:	0098      	lsls	r0, r3, #2
    56d4:	18c0      	adds	r0, r0, r3
    56d6:	0080      	lsls	r0, r0, #2
    56d8:	4b43      	ldr	r3, [pc, #268]	; (57e8 <xTaskCreate+0x268>)
    56da:	1818      	adds	r0, r3, r0
    56dc:	9903      	ldr	r1, [sp, #12]
    56de:	4b43      	ldr	r3, [pc, #268]	; (57ec <xTaskCreate+0x26c>)
    56e0:	4798      	blx	r3
	taskEXIT_CRITICAL();
    56e2:	4b43      	ldr	r3, [pc, #268]	; (57f0 <xTaskCreate+0x270>)
    56e4:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    56e6:	4b33      	ldr	r3, [pc, #204]	; (57b4 <xTaskCreate+0x234>)
    56e8:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
    56ea:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    56ec:	2b00      	cmp	r3, #0
    56ee:	d005      	beq.n	56fc <xTaskCreate+0x17c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    56f0:	4b2f      	ldr	r3, [pc, #188]	; (57b0 <xTaskCreate+0x230>)
    56f2:	681b      	ldr	r3, [r3, #0]
    56f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    56f8:	429a      	cmp	r2, r3
    56fa:	d348      	bcc.n	578e <xTaskCreate+0x20e>
	}
    56fc:	b004      	add	sp, #16
    56fe:	bc04      	pop	{r2}
    5700:	4690      	mov	r8, r2
    5702:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    5704:	0030      	movs	r0, r6
    5706:	4b3b      	ldr	r3, [pc, #236]	; (57f4 <xTaskCreate+0x274>)
    5708:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    570a:	2001      	movs	r0, #1
    570c:	4240      	negs	r0, r0
    570e:	e7f5      	b.n	56fc <xTaskCreate+0x17c>
			pxCurrentTCB = pxNewTCB;
    5710:	4b27      	ldr	r3, [pc, #156]	; (57b0 <xTaskCreate+0x230>)
    5712:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    5714:	6813      	ldr	r3, [r2, #0]
    5716:	2b01      	cmp	r3, #1
    5718:	d1a2      	bne.n	5660 <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    571a:	4f33      	ldr	r7, [pc, #204]	; (57e8 <xTaskCreate+0x268>)
    571c:	0038      	movs	r0, r7
    571e:	4e36      	ldr	r6, [pc, #216]	; (57f8 <xTaskCreate+0x278>)
    5720:	47b0      	blx	r6
    5722:	0038      	movs	r0, r7
    5724:	3014      	adds	r0, #20
    5726:	47b0      	blx	r6
    5728:	0038      	movs	r0, r7
    572a:	3028      	adds	r0, #40	; 0x28
    572c:	47b0      	blx	r6
    572e:	0038      	movs	r0, r7
    5730:	303c      	adds	r0, #60	; 0x3c
    5732:	47b0      	blx	r6
    5734:	0038      	movs	r0, r7
    5736:	3050      	adds	r0, #80	; 0x50
    5738:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    573a:	4b30      	ldr	r3, [pc, #192]	; (57fc <xTaskCreate+0x27c>)
    573c:	4698      	mov	r8, r3
    573e:	0018      	movs	r0, r3
    5740:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    5742:	4f2f      	ldr	r7, [pc, #188]	; (5800 <xTaskCreate+0x280>)
    5744:	0038      	movs	r0, r7
    5746:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    5748:	482e      	ldr	r0, [pc, #184]	; (5804 <xTaskCreate+0x284>)
    574a:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    574c:	482e      	ldr	r0, [pc, #184]	; (5808 <xTaskCreate+0x288>)
    574e:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    5750:	482e      	ldr	r0, [pc, #184]	; (580c <xTaskCreate+0x28c>)
    5752:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    5754:	4b2e      	ldr	r3, [pc, #184]	; (5810 <xTaskCreate+0x290>)
    5756:	4642      	mov	r2, r8
    5758:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    575a:	4b2e      	ldr	r3, [pc, #184]	; (5814 <xTaskCreate+0x294>)
    575c:	601f      	str	r7, [r3, #0]
    575e:	e77f      	b.n	5660 <xTaskCreate+0xe0>
		traceTASK_CREATE( pxNewTCB );
    5760:	0020      	movs	r0, r4
    5762:	4b1e      	ldr	r3, [pc, #120]	; (57dc <xTaskCreate+0x25c>)
    5764:	4798      	blx	r3
    5766:	4b1e      	ldr	r3, [pc, #120]	; (57e0 <xTaskCreate+0x260>)
    5768:	881b      	ldrh	r3, [r3, #0]
    576a:	4203      	tst	r3, r0
    576c:	d0a3      	beq.n	56b6 <xTaskCreate+0x136>
    576e:	0020      	movs	r0, r4
    5770:	4b16      	ldr	r3, [pc, #88]	; (57cc <xTaskCreate+0x24c>)
    5772:	4798      	blx	r3
    5774:	b2c2      	uxtb	r2, r0
    5776:	2103      	movs	r1, #3
    5778:	201b      	movs	r0, #27
    577a:	4b27      	ldr	r3, [pc, #156]	; (5818 <xTaskCreate+0x298>)
    577c:	4798      	blx	r3
    577e:	e79a      	b.n	56b6 <xTaskCreate+0x136>
		prvAddTaskToReadyList( pxNewTCB );
    5780:	0020      	movs	r0, r4
    5782:	4b12      	ldr	r3, [pc, #72]	; (57cc <xTaskCreate+0x24c>)
    5784:	4798      	blx	r3
    5786:	b2c0      	uxtb	r0, r0
    5788:	4b24      	ldr	r3, [pc, #144]	; (581c <xTaskCreate+0x29c>)
    578a:	4798      	blx	r3
    578c:	e79a      	b.n	56c4 <xTaskCreate+0x144>
			taskYIELD_IF_USING_PREEMPTION();
    578e:	4b24      	ldr	r3, [pc, #144]	; (5820 <xTaskCreate+0x2a0>)
    5790:	4798      	blx	r3
			xReturn = pdPASS;
    5792:	2001      	movs	r0, #1
    5794:	e7b2      	b.n	56fc <xTaskCreate+0x17c>
    5796:	46c0      	nop			; (mov r8, r8)
    5798:	000041f5 	.word	0x000041f5
    579c:	0000865f 	.word	0x0000865f
    57a0:	00003fb3 	.word	0x00003fb3
    57a4:	00004085 	.word	0x00004085
    57a8:	00004131 	.word	0x00004131
    57ac:	20003734 	.word	0x20003734
    57b0:	200036c4 	.word	0x200036c4
    57b4:	20003794 	.word	0x20003794
    57b8:	20003744 	.word	0x20003744
    57bc:	00003725 	.word	0x00003725
    57c0:	00002ed9 	.word	0x00002ed9
    57c4:	20000022 	.word	0x20000022
    57c8:	00002ef9 	.word	0x00002ef9
    57cc:	00002eb9 	.word	0x00002eb9
    57d0:	000037f9 	.word	0x000037f9
    57d4:	000035d9 	.word	0x000035d9
    57d8:	00002f81 	.word	0x00002f81
    57dc:	00002ec9 	.word	0x00002ec9
    57e0:	20000024 	.word	0x20000024
    57e4:	20003748 	.word	0x20003748
    57e8:	200036d0 	.word	0x200036d0
    57ec:	00003fb9 	.word	0x00003fb9
    57f0:	00004149 	.word	0x00004149
    57f4:	00004285 	.word	0x00004285
    57f8:	00003f9d 	.word	0x00003f9d
    57fc:	2000374c 	.word	0x2000374c
    5800:	20003760 	.word	0x20003760
    5804:	20003780 	.word	0x20003780
    5808:	200037ac 	.word	0x200037ac
    580c:	20003798 	.word	0x20003798
    5810:	200036c8 	.word	0x200036c8
    5814:	200036cc 	.word	0x200036cc
    5818:	00003bb9 	.word	0x00003bb9
    581c:	00003a51 	.word	0x00003a51
    5820:	00004121 	.word	0x00004121

00005824 <vTaskStartScheduler>:
{
    5824:	b510      	push	{r4, lr}
    5826:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    5828:	4b11      	ldr	r3, [pc, #68]	; (5870 <vTaskStartScheduler+0x4c>)
    582a:	9301      	str	r3, [sp, #4]
    582c:	2300      	movs	r3, #0
    582e:	9300      	str	r3, [sp, #0]
    5830:	2296      	movs	r2, #150	; 0x96
    5832:	4910      	ldr	r1, [pc, #64]	; (5874 <vTaskStartScheduler+0x50>)
    5834:	4810      	ldr	r0, [pc, #64]	; (5878 <vTaskStartScheduler+0x54>)
    5836:	4c11      	ldr	r4, [pc, #68]	; (587c <vTaskStartScheduler+0x58>)
    5838:	47a0      	blx	r4
		if( xReturn == pdPASS )
    583a:	2801      	cmp	r0, #1
    583c:	d003      	beq.n	5846 <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    583e:	1c43      	adds	r3, r0, #1
    5840:	d013      	beq.n	586a <vTaskStartScheduler+0x46>
}
    5842:	b002      	add	sp, #8
    5844:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    5846:	4b0e      	ldr	r3, [pc, #56]	; (5880 <vTaskStartScheduler+0x5c>)
    5848:	4798      	blx	r3
	if( xReturn == pdPASS )
    584a:	2801      	cmp	r0, #1
    584c:	d1f7      	bne.n	583e <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
    584e:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    5850:	2201      	movs	r2, #1
    5852:	4252      	negs	r2, r2
    5854:	4b0b      	ldr	r3, [pc, #44]	; (5884 <vTaskStartScheduler+0x60>)
    5856:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    5858:	3202      	adds	r2, #2
    585a:	4b0b      	ldr	r3, [pc, #44]	; (5888 <vTaskStartScheduler+0x64>)
    585c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    585e:	2200      	movs	r2, #0
    5860:	4b0a      	ldr	r3, [pc, #40]	; (588c <vTaskStartScheduler+0x68>)
    5862:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    5864:	4b0a      	ldr	r3, [pc, #40]	; (5890 <vTaskStartScheduler+0x6c>)
    5866:	4798      	blx	r3
    5868:	e7eb      	b.n	5842 <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    586a:	b672      	cpsid	i
    586c:	e7fe      	b.n	586c <vTaskStartScheduler+0x48>
    586e:	46c0      	nop			; (mov r8, r8)
    5870:	20003774 	.word	0x20003774
    5874:	0000e730 	.word	0x0000e730
    5878:	00005479 	.word	0x00005479
    587c:	00005581 	.word	0x00005581
    5880:	00006449 	.word	0x00006449
    5884:	20003778 	.word	0x20003778
    5888:	20003794 	.word	0x20003794
    588c:	200037c0 	.word	0x200037c0
    5890:	000040a9 	.word	0x000040a9

00005894 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    5894:	4a02      	ldr	r2, [pc, #8]	; (58a0 <vTaskSuspendAll+0xc>)
    5896:	6813      	ldr	r3, [r2, #0]
    5898:	3301      	adds	r3, #1
    589a:	6013      	str	r3, [r2, #0]
}
    589c:	4770      	bx	lr
    589e:	46c0      	nop			; (mov r8, r8)
    58a0:	20003740 	.word	0x20003740

000058a4 <xTaskGetTickCount>:
		xTicks = xTickCount;
    58a4:	4b01      	ldr	r3, [pc, #4]	; (58ac <xTaskGetTickCount+0x8>)
    58a6:	6818      	ldr	r0, [r3, #0]
}
    58a8:	4770      	bx	lr
    58aa:	46c0      	nop			; (mov r8, r8)
    58ac:	200037c0 	.word	0x200037c0

000058b0 <xTaskIncrementTick>:
{
    58b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    58b2:	b083      	sub	sp, #12
	traceTASK_INCREMENT_TICK( xTickCount );
    58b4:	4b4c      	ldr	r3, [pc, #304]	; (59e8 <xTaskIncrementTick+0x138>)
    58b6:	681b      	ldr	r3, [r3, #0]
    58b8:	2b01      	cmp	r3, #1
    58ba:	d003      	beq.n	58c4 <xTaskIncrementTick+0x14>
    58bc:	4b4b      	ldr	r3, [pc, #300]	; (59ec <xTaskIncrementTick+0x13c>)
    58be:	681b      	ldr	r3, [r3, #0]
    58c0:	2b00      	cmp	r3, #0
    58c2:	d106      	bne.n	58d2 <xTaskIncrementTick+0x22>
    58c4:	4a4a      	ldr	r2, [pc, #296]	; (59f0 <xTaskIncrementTick+0x140>)
    58c6:	6813      	ldr	r3, [r2, #0]
    58c8:	3301      	adds	r3, #1
    58ca:	6013      	str	r3, [r2, #0]
    58cc:	2000      	movs	r0, #0
    58ce:	4b49      	ldr	r3, [pc, #292]	; (59f4 <xTaskIncrementTick+0x144>)
    58d0:	4798      	blx	r3
    58d2:	4b45      	ldr	r3, [pc, #276]	; (59e8 <xTaskIncrementTick+0x138>)
    58d4:	681b      	ldr	r3, [r3, #0]
    58d6:	2b00      	cmp	r3, #0
    58d8:	d010      	beq.n	58fc <xTaskIncrementTick+0x4c>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    58da:	4b43      	ldr	r3, [pc, #268]	; (59e8 <xTaskIncrementTick+0x138>)
    58dc:	681b      	ldr	r3, [r3, #0]
    58de:	2b00      	cmp	r3, #0
    58e0:	d175      	bne.n	59ce <xTaskIncrementTick+0x11e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    58e2:	4b45      	ldr	r3, [pc, #276]	; (59f8 <xTaskIncrementTick+0x148>)
    58e4:	681e      	ldr	r6, [r3, #0]
    58e6:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    58e8:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    58ea:	2e00      	cmp	r6, #0
    58ec:	d119      	bne.n	5922 <xTaskIncrementTick+0x72>
			taskSWITCH_DELAYED_LISTS();
    58ee:	4b43      	ldr	r3, [pc, #268]	; (59fc <xTaskIncrementTick+0x14c>)
    58f0:	681b      	ldr	r3, [r3, #0]
    58f2:	681b      	ldr	r3, [r3, #0]
    58f4:	2b00      	cmp	r3, #0
    58f6:	d008      	beq.n	590a <xTaskIncrementTick+0x5a>
    58f8:	b672      	cpsid	i
    58fa:	e7fe      	b.n	58fa <xTaskIncrementTick+0x4a>
	traceTASK_INCREMENT_TICK( xTickCount );
    58fc:	4b3e      	ldr	r3, [pc, #248]	; (59f8 <xTaskIncrementTick+0x148>)
    58fe:	6819      	ldr	r1, [r3, #0]
    5900:	3101      	adds	r1, #1
    5902:	2003      	movs	r0, #3
    5904:	4b3e      	ldr	r3, [pc, #248]	; (5a00 <xTaskIncrementTick+0x150>)
    5906:	4798      	blx	r3
    5908:	e7e7      	b.n	58da <xTaskIncrementTick+0x2a>
			taskSWITCH_DELAYED_LISTS();
    590a:	4a3c      	ldr	r2, [pc, #240]	; (59fc <xTaskIncrementTick+0x14c>)
    590c:	6811      	ldr	r1, [r2, #0]
    590e:	4b3d      	ldr	r3, [pc, #244]	; (5a04 <xTaskIncrementTick+0x154>)
    5910:	6818      	ldr	r0, [r3, #0]
    5912:	6010      	str	r0, [r2, #0]
    5914:	6019      	str	r1, [r3, #0]
    5916:	4a3c      	ldr	r2, [pc, #240]	; (5a08 <xTaskIncrementTick+0x158>)
    5918:	6813      	ldr	r3, [r2, #0]
    591a:	3301      	adds	r3, #1
    591c:	6013      	str	r3, [r2, #0]
    591e:	4b3b      	ldr	r3, [pc, #236]	; (5a0c <xTaskIncrementTick+0x15c>)
    5920:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    5922:	4b3b      	ldr	r3, [pc, #236]	; (5a10 <xTaskIncrementTick+0x160>)
    5924:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    5926:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    5928:	429e      	cmp	r6, r3
    592a:	d33a      	bcc.n	59a2 <xTaskIncrementTick+0xf2>
    592c:	2500      	movs	r5, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    592e:	4f33      	ldr	r7, [pc, #204]	; (59fc <xTaskIncrementTick+0x14c>)
    5930:	683b      	ldr	r3, [r7, #0]
    5932:	681b      	ldr	r3, [r3, #0]
    5934:	2b00      	cmp	r3, #0
    5936:	d030      	beq.n	599a <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    5938:	4b30      	ldr	r3, [pc, #192]	; (59fc <xTaskIncrementTick+0x14c>)
    593a:	681b      	ldr	r3, [r3, #0]
    593c:	68db      	ldr	r3, [r3, #12]
    593e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    5940:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
    5942:	429e      	cmp	r6, r3
    5944:	d339      	bcc.n	59ba <xTaskIncrementTick+0x10a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5946:	1d23      	adds	r3, r4, #4
    5948:	9301      	str	r3, [sp, #4]
    594a:	0018      	movs	r0, r3
    594c:	4b31      	ldr	r3, [pc, #196]	; (5a14 <xTaskIncrementTick+0x164>)
    594e:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    5950:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5952:	2b00      	cmp	r3, #0
    5954:	d003      	beq.n	595e <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    5956:	0020      	movs	r0, r4
    5958:	3018      	adds	r0, #24
    595a:	4b2e      	ldr	r3, [pc, #184]	; (5a14 <xTaskIncrementTick+0x164>)
    595c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    595e:	0020      	movs	r0, r4
    5960:	4b2d      	ldr	r3, [pc, #180]	; (5a18 <xTaskIncrementTick+0x168>)
    5962:	4798      	blx	r3
    5964:	4b2d      	ldr	r3, [pc, #180]	; (5a1c <xTaskIncrementTick+0x16c>)
    5966:	881b      	ldrh	r3, [r3, #0]
    5968:	4203      	tst	r3, r0
    596a:	d129      	bne.n	59c0 <xTaskIncrementTick+0x110>
    596c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    596e:	4a2c      	ldr	r2, [pc, #176]	; (5a20 <xTaskIncrementTick+0x170>)
    5970:	6812      	ldr	r2, [r2, #0]
    5972:	4293      	cmp	r3, r2
    5974:	d901      	bls.n	597a <xTaskIncrementTick+0xca>
    5976:	4a2a      	ldr	r2, [pc, #168]	; (5a20 <xTaskIncrementTick+0x170>)
    5978:	6013      	str	r3, [r2, #0]
    597a:	0098      	lsls	r0, r3, #2
    597c:	18c0      	adds	r0, r0, r3
    597e:	0080      	lsls	r0, r0, #2
    5980:	4b28      	ldr	r3, [pc, #160]	; (5a24 <xTaskIncrementTick+0x174>)
    5982:	1818      	adds	r0, r3, r0
    5984:	9901      	ldr	r1, [sp, #4]
    5986:	4b28      	ldr	r3, [pc, #160]	; (5a28 <xTaskIncrementTick+0x178>)
    5988:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    598a:	4b28      	ldr	r3, [pc, #160]	; (5a2c <xTaskIncrementTick+0x17c>)
    598c:	681b      	ldr	r3, [r3, #0]
    598e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5992:	429a      	cmp	r2, r3
    5994:	d3cc      	bcc.n	5930 <xTaskIncrementTick+0x80>
							xSwitchRequired = pdTRUE;
    5996:	2501      	movs	r5, #1
    5998:	e7ca      	b.n	5930 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    599a:	2201      	movs	r2, #1
    599c:	4252      	negs	r2, r2
    599e:	4b1c      	ldr	r3, [pc, #112]	; (5a10 <xTaskIncrementTick+0x160>)
    59a0:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    59a2:	4b22      	ldr	r3, [pc, #136]	; (5a2c <xTaskIncrementTick+0x17c>)
    59a4:	681b      	ldr	r3, [r3, #0]
    59a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59a8:	0093      	lsls	r3, r2, #2
    59aa:	189b      	adds	r3, r3, r2
    59ac:	009b      	lsls	r3, r3, #2
    59ae:	4a1d      	ldr	r2, [pc, #116]	; (5a24 <xTaskIncrementTick+0x174>)
    59b0:	589b      	ldr	r3, [r3, r2]
    59b2:	2b01      	cmp	r3, #1
    59b4:	d910      	bls.n	59d8 <xTaskIncrementTick+0x128>
				xSwitchRequired = pdTRUE;
    59b6:	2501      	movs	r5, #1
    59b8:	e00e      	b.n	59d8 <xTaskIncrementTick+0x128>
						xNextTaskUnblockTime = xItemValue;
    59ba:	4a15      	ldr	r2, [pc, #84]	; (5a10 <xTaskIncrementTick+0x160>)
    59bc:	6013      	str	r3, [r2, #0]
						break;
    59be:	e7f0      	b.n	59a2 <xTaskIncrementTick+0xf2>
					prvAddTaskToReadyList( pxTCB );
    59c0:	0020      	movs	r0, r4
    59c2:	4b1b      	ldr	r3, [pc, #108]	; (5a30 <xTaskIncrementTick+0x180>)
    59c4:	4798      	blx	r3
    59c6:	b2c0      	uxtb	r0, r0
    59c8:	4b1a      	ldr	r3, [pc, #104]	; (5a34 <xTaskIncrementTick+0x184>)
    59ca:	4798      	blx	r3
    59cc:	e7ce      	b.n	596c <xTaskIncrementTick+0xbc>
		++uxPendedTicks;
    59ce:	4a07      	ldr	r2, [pc, #28]	; (59ec <xTaskIncrementTick+0x13c>)
    59d0:	6813      	ldr	r3, [r2, #0]
    59d2:	3301      	adds	r3, #1
    59d4:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
    59d6:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
    59d8:	4b17      	ldr	r3, [pc, #92]	; (5a38 <xTaskIncrementTick+0x188>)
    59da:	681b      	ldr	r3, [r3, #0]
    59dc:	2b00      	cmp	r3, #0
    59de:	d000      	beq.n	59e2 <xTaskIncrementTick+0x132>
			xSwitchRequired = pdTRUE;
    59e0:	2501      	movs	r5, #1
}
    59e2:	0028      	movs	r0, r5
    59e4:	b003      	add	sp, #12
    59e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59e8:	20003740 	.word	0x20003740
    59ec:	2000373c 	.word	0x2000373c
    59f0:	200003ec 	.word	0x200003ec
    59f4:	00003889 	.word	0x00003889
    59f8:	200037c0 	.word	0x200037c0
    59fc:	200036c8 	.word	0x200036c8
    5a00:	00003d55 	.word	0x00003d55
    5a04:	200036cc 	.word	0x200036cc
    5a08:	2000377c 	.word	0x2000377c
    5a0c:	0000544d 	.word	0x0000544d
    5a10:	20003778 	.word	0x20003778
    5a14:	00003fff 	.word	0x00003fff
    5a18:	00002ec9 	.word	0x00002ec9
    5a1c:	20000024 	.word	0x20000024
    5a20:	20003748 	.word	0x20003748
    5a24:	200036d0 	.word	0x200036d0
    5a28:	00003fb9 	.word	0x00003fb9
    5a2c:	200036c4 	.word	0x200036c4
    5a30:	00002eb9 	.word	0x00002eb9
    5a34:	00003a51 	.word	0x00003a51
    5a38:	200037c4 	.word	0x200037c4

00005a3c <xTaskResumeAll>:
{
    5a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    5a3e:	4b37      	ldr	r3, [pc, #220]	; (5b1c <xTaskResumeAll+0xe0>)
    5a40:	681b      	ldr	r3, [r3, #0]
    5a42:	2b00      	cmp	r3, #0
    5a44:	d101      	bne.n	5a4a <xTaskResumeAll+0xe>
    5a46:	b672      	cpsid	i
    5a48:	e7fe      	b.n	5a48 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    5a4a:	4b35      	ldr	r3, [pc, #212]	; (5b20 <xTaskResumeAll+0xe4>)
    5a4c:	4798      	blx	r3
		--uxSchedulerSuspended;
    5a4e:	4b33      	ldr	r3, [pc, #204]	; (5b1c <xTaskResumeAll+0xe0>)
    5a50:	681a      	ldr	r2, [r3, #0]
    5a52:	3a01      	subs	r2, #1
    5a54:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5a56:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    5a58:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5a5a:	2b00      	cmp	r3, #0
    5a5c:	d103      	bne.n	5a66 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    5a5e:	4b31      	ldr	r3, [pc, #196]	; (5b24 <xTaskResumeAll+0xe8>)
    5a60:	681b      	ldr	r3, [r3, #0]
    5a62:	2b00      	cmp	r3, #0
    5a64:	d136      	bne.n	5ad4 <xTaskResumeAll+0x98>
	taskEXIT_CRITICAL();
    5a66:	4b30      	ldr	r3, [pc, #192]	; (5b28 <xTaskResumeAll+0xec>)
    5a68:	4798      	blx	r3
}
    5a6a:	0020      	movs	r0, r4
    5a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
    5a6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5a70:	4a2e      	ldr	r2, [pc, #184]	; (5b2c <xTaskResumeAll+0xf0>)
    5a72:	6812      	ldr	r2, [r2, #0]
    5a74:	4293      	cmp	r3, r2
    5a76:	d901      	bls.n	5a7c <xTaskResumeAll+0x40>
    5a78:	4a2c      	ldr	r2, [pc, #176]	; (5b2c <xTaskResumeAll+0xf0>)
    5a7a:	6013      	str	r3, [r2, #0]
    5a7c:	0098      	lsls	r0, r3, #2
    5a7e:	18c0      	adds	r0, r0, r3
    5a80:	0080      	lsls	r0, r0, #2
    5a82:	4b2b      	ldr	r3, [pc, #172]	; (5b30 <xTaskResumeAll+0xf4>)
    5a84:	1818      	adds	r0, r3, r0
    5a86:	0031      	movs	r1, r6
    5a88:	4b2a      	ldr	r3, [pc, #168]	; (5b34 <xTaskResumeAll+0xf8>)
    5a8a:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5a8c:	4b2a      	ldr	r3, [pc, #168]	; (5b38 <xTaskResumeAll+0xfc>)
    5a8e:	681b      	ldr	r3, [r3, #0]
    5a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5a92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5a94:	429a      	cmp	r2, r3
    5a96:	d302      	bcc.n	5a9e <xTaskResumeAll+0x62>
						xYieldPending = pdTRUE;
    5a98:	2201      	movs	r2, #1
    5a9a:	4b28      	ldr	r3, [pc, #160]	; (5b3c <xTaskResumeAll+0x100>)
    5a9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    5a9e:	682b      	ldr	r3, [r5, #0]
    5aa0:	2b00      	cmp	r3, #0
    5aa2:	d01a      	beq.n	5ada <xTaskResumeAll+0x9e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    5aa4:	68fb      	ldr	r3, [r7, #12]
    5aa6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    5aa8:	0020      	movs	r0, r4
    5aaa:	3018      	adds	r0, #24
    5aac:	4b24      	ldr	r3, [pc, #144]	; (5b40 <xTaskResumeAll+0x104>)
    5aae:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5ab0:	1d26      	adds	r6, r4, #4
    5ab2:	0030      	movs	r0, r6
    5ab4:	4b22      	ldr	r3, [pc, #136]	; (5b40 <xTaskResumeAll+0x104>)
    5ab6:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    5ab8:	0020      	movs	r0, r4
    5aba:	4b22      	ldr	r3, [pc, #136]	; (5b44 <xTaskResumeAll+0x108>)
    5abc:	4798      	blx	r3
    5abe:	4b22      	ldr	r3, [pc, #136]	; (5b48 <xTaskResumeAll+0x10c>)
    5ac0:	881b      	ldrh	r3, [r3, #0]
    5ac2:	4203      	tst	r3, r0
    5ac4:	d0d3      	beq.n	5a6e <xTaskResumeAll+0x32>
    5ac6:	0020      	movs	r0, r4
    5ac8:	4b20      	ldr	r3, [pc, #128]	; (5b4c <xTaskResumeAll+0x110>)
    5aca:	4798      	blx	r3
    5acc:	b2c0      	uxtb	r0, r0
    5ace:	4b20      	ldr	r3, [pc, #128]	; (5b50 <xTaskResumeAll+0x114>)
    5ad0:	4798      	blx	r3
    5ad2:	e7cc      	b.n	5a6e <xTaskResumeAll+0x32>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    5ad4:	4d1f      	ldr	r5, [pc, #124]	; (5b54 <xTaskResumeAll+0x118>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    5ad6:	002f      	movs	r7, r5
    5ad8:	e7e1      	b.n	5a9e <xTaskResumeAll+0x62>
				if( pxTCB != NULL )
    5ada:	2c00      	cmp	r4, #0
    5adc:	d001      	beq.n	5ae2 <xTaskResumeAll+0xa6>
					prvResetNextTaskUnblockTime();
    5ade:	4b1e      	ldr	r3, [pc, #120]	; (5b58 <xTaskResumeAll+0x11c>)
    5ae0:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    5ae2:	4b1e      	ldr	r3, [pc, #120]	; (5b5c <xTaskResumeAll+0x120>)
    5ae4:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    5ae6:	2c00      	cmp	r4, #0
    5ae8:	d00e      	beq.n	5b08 <xTaskResumeAll+0xcc>
							if( xTaskIncrementTick() != pdFALSE )
    5aea:	4f1d      	ldr	r7, [pc, #116]	; (5b60 <xTaskResumeAll+0x124>)
								xYieldPending = pdTRUE;
    5aec:	4e13      	ldr	r6, [pc, #76]	; (5b3c <xTaskResumeAll+0x100>)
    5aee:	2501      	movs	r5, #1
    5af0:	e002      	b.n	5af8 <xTaskResumeAll+0xbc>
							--uxPendedCounts;
    5af2:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    5af4:	2c00      	cmp	r4, #0
    5af6:	d004      	beq.n	5b02 <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
    5af8:	47b8      	blx	r7
    5afa:	2800      	cmp	r0, #0
    5afc:	d0f9      	beq.n	5af2 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
    5afe:	6035      	str	r5, [r6, #0]
    5b00:	e7f7      	b.n	5af2 <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
    5b02:	2200      	movs	r2, #0
    5b04:	4b15      	ldr	r3, [pc, #84]	; (5b5c <xTaskResumeAll+0x120>)
    5b06:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    5b08:	4b0c      	ldr	r3, [pc, #48]	; (5b3c <xTaskResumeAll+0x100>)
    5b0a:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    5b0c:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    5b0e:	2b00      	cmp	r3, #0
    5b10:	d0a9      	beq.n	5a66 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    5b12:	4b14      	ldr	r3, [pc, #80]	; (5b64 <xTaskResumeAll+0x128>)
    5b14:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    5b16:	3401      	adds	r4, #1
    5b18:	e7a5      	b.n	5a66 <xTaskResumeAll+0x2a>
    5b1a:	46c0      	nop			; (mov r8, r8)
    5b1c:	20003740 	.word	0x20003740
    5b20:	00004131 	.word	0x00004131
    5b24:	20003734 	.word	0x20003734
    5b28:	00004149 	.word	0x00004149
    5b2c:	20003748 	.word	0x20003748
    5b30:	200036d0 	.word	0x200036d0
    5b34:	00003fb9 	.word	0x00003fb9
    5b38:	200036c4 	.word	0x200036c4
    5b3c:	200037c4 	.word	0x200037c4
    5b40:	00003fff 	.word	0x00003fff
    5b44:	00002ec9 	.word	0x00002ec9
    5b48:	20000024 	.word	0x20000024
    5b4c:	00002eb9 	.word	0x00002eb9
    5b50:	00003a51 	.word	0x00003a51
    5b54:	20003780 	.word	0x20003780
    5b58:	0000544d 	.word	0x0000544d
    5b5c:	2000373c 	.word	0x2000373c
    5b60:	000058b1 	.word	0x000058b1
    5b64:	00004121 	.word	0x00004121

00005b68 <vTaskDelay>:
	{
    5b68:	b510      	push	{r4, lr}
    5b6a:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    5b6c:	d031      	beq.n	5bd2 <vTaskDelay+0x6a>
			configASSERT( uxSchedulerSuspended == 0 );
    5b6e:	4b1a      	ldr	r3, [pc, #104]	; (5bd8 <vTaskDelay+0x70>)
    5b70:	681b      	ldr	r3, [r3, #0]
    5b72:	2b00      	cmp	r3, #0
    5b74:	d001      	beq.n	5b7a <vTaskDelay+0x12>
    5b76:	b672      	cpsid	i
    5b78:	e7fe      	b.n	5b78 <vTaskDelay+0x10>
			vTaskSuspendAll();
    5b7a:	4b18      	ldr	r3, [pc, #96]	; (5bdc <vTaskDelay+0x74>)
    5b7c:	4798      	blx	r3
				traceTASK_DELAY();
    5b7e:	4b18      	ldr	r3, [pc, #96]	; (5be0 <vTaskDelay+0x78>)
    5b80:	6818      	ldr	r0, [r3, #0]
    5b82:	4b18      	ldr	r3, [pc, #96]	; (5be4 <vTaskDelay+0x7c>)
    5b84:	4798      	blx	r3
    5b86:	4b18      	ldr	r3, [pc, #96]	; (5be8 <vTaskDelay+0x80>)
    5b88:	881b      	ldrh	r3, [r3, #0]
    5b8a:	4203      	tst	r3, r0
    5b8c:	d00a      	beq.n	5ba4 <vTaskDelay+0x3c>
    5b8e:	0021      	movs	r1, r4
    5b90:	2089      	movs	r0, #137	; 0x89
    5b92:	4b16      	ldr	r3, [pc, #88]	; (5bec <vTaskDelay+0x84>)
    5b94:	4798      	blx	r3
    5b96:	4b12      	ldr	r3, [pc, #72]	; (5be0 <vTaskDelay+0x78>)
    5b98:	6818      	ldr	r0, [r3, #0]
    5b9a:	4b15      	ldr	r3, [pc, #84]	; (5bf0 <vTaskDelay+0x88>)
    5b9c:	4798      	blx	r3
    5b9e:	b2c0      	uxtb	r0, r0
    5ba0:	4b14      	ldr	r3, [pc, #80]	; (5bf4 <vTaskDelay+0x8c>)
    5ba2:	4798      	blx	r3
    5ba4:	4b14      	ldr	r3, [pc, #80]	; (5bf8 <vTaskDelay+0x90>)
    5ba6:	4798      	blx	r3
    5ba8:	4b0e      	ldr	r3, [pc, #56]	; (5be4 <vTaskDelay+0x7c>)
    5baa:	4798      	blx	r3
    5bac:	4b0e      	ldr	r3, [pc, #56]	; (5be8 <vTaskDelay+0x80>)
    5bae:	881b      	ldrh	r3, [r3, #0]
    5bb0:	4203      	tst	r3, r0
    5bb2:	d006      	beq.n	5bc2 <vTaskDelay+0x5a>
    5bb4:	4b10      	ldr	r3, [pc, #64]	; (5bf8 <vTaskDelay+0x90>)
    5bb6:	4798      	blx	r3
    5bb8:	4b0d      	ldr	r3, [pc, #52]	; (5bf0 <vTaskDelay+0x88>)
    5bba:	4798      	blx	r3
    5bbc:	b2c0      	uxtb	r0, r0
    5bbe:	4b0d      	ldr	r3, [pc, #52]	; (5bf4 <vTaskDelay+0x8c>)
    5bc0:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    5bc2:	2100      	movs	r1, #0
    5bc4:	0020      	movs	r0, r4
    5bc6:	4b0d      	ldr	r3, [pc, #52]	; (5bfc <vTaskDelay+0x94>)
    5bc8:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    5bca:	4b0d      	ldr	r3, [pc, #52]	; (5c00 <vTaskDelay+0x98>)
    5bcc:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    5bce:	2800      	cmp	r0, #0
    5bd0:	d101      	bne.n	5bd6 <vTaskDelay+0x6e>
			portYIELD_WITHIN_API();
    5bd2:	4b0c      	ldr	r3, [pc, #48]	; (5c04 <vTaskDelay+0x9c>)
    5bd4:	4798      	blx	r3
	}
    5bd6:	bd10      	pop	{r4, pc}
    5bd8:	20003740 	.word	0x20003740
    5bdc:	00005895 	.word	0x00005895
    5be0:	200036c4 	.word	0x200036c4
    5be4:	00002ec9 	.word	0x00002ec9
    5be8:	20000024 	.word	0x20000024
    5bec:	00003d55 	.word	0x00003d55
    5bf0:	00002eb9 	.word	0x00002eb9
    5bf4:	000036e5 	.word	0x000036e5
    5bf8:	00002f81 	.word	0x00002f81
    5bfc:	000054f9 	.word	0x000054f9
    5c00:	00005a3d 	.word	0x00005a3d
    5c04:	00004121 	.word	0x00004121

00005c08 <vTaskSwitchContext>:
{
    5c08:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    5c0a:	4b33      	ldr	r3, [pc, #204]	; (5cd8 <vTaskSwitchContext+0xd0>)
    5c0c:	681b      	ldr	r3, [r3, #0]
    5c0e:	2b00      	cmp	r3, #0
    5c10:	d125      	bne.n	5c5e <vTaskSwitchContext+0x56>
		xYieldPending = pdFALSE;
    5c12:	2200      	movs	r2, #0
    5c14:	4b31      	ldr	r3, [pc, #196]	; (5cdc <vTaskSwitchContext+0xd4>)
    5c16:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    5c18:	4b31      	ldr	r3, [pc, #196]	; (5ce0 <vTaskSwitchContext+0xd8>)
    5c1a:	681a      	ldr	r2, [r3, #0]
    5c1c:	681b      	ldr	r3, [r3, #0]
    5c1e:	6812      	ldr	r2, [r2, #0]
    5c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5c22:	429a      	cmp	r2, r3
    5c24:	d805      	bhi.n	5c32 <vTaskSwitchContext+0x2a>
    5c26:	4b2e      	ldr	r3, [pc, #184]	; (5ce0 <vTaskSwitchContext+0xd8>)
    5c28:	6818      	ldr	r0, [r3, #0]
    5c2a:	6819      	ldr	r1, [r3, #0]
    5c2c:	3134      	adds	r1, #52	; 0x34
    5c2e:	4b2d      	ldr	r3, [pc, #180]	; (5ce4 <vTaskSwitchContext+0xdc>)
    5c30:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    5c32:	4b2d      	ldr	r3, [pc, #180]	; (5ce8 <vTaskSwitchContext+0xe0>)
    5c34:	681b      	ldr	r3, [r3, #0]
    5c36:	009a      	lsls	r2, r3, #2
    5c38:	18d2      	adds	r2, r2, r3
    5c3a:	0092      	lsls	r2, r2, #2
    5c3c:	492b      	ldr	r1, [pc, #172]	; (5cec <vTaskSwitchContext+0xe4>)
    5c3e:	5852      	ldr	r2, [r2, r1]
    5c40:	2a00      	cmp	r2, #0
    5c42:	d110      	bne.n	5c66 <vTaskSwitchContext+0x5e>
    5c44:	2b00      	cmp	r3, #0
    5c46:	d008      	beq.n	5c5a <vTaskSwitchContext+0x52>
    5c48:	3b01      	subs	r3, #1
    5c4a:	009a      	lsls	r2, r3, #2
    5c4c:	18d2      	adds	r2, r2, r3
    5c4e:	0092      	lsls	r2, r2, #2
    5c50:	5852      	ldr	r2, [r2, r1]
    5c52:	2a00      	cmp	r2, #0
    5c54:	d107      	bne.n	5c66 <vTaskSwitchContext+0x5e>
    5c56:	2b00      	cmp	r3, #0
    5c58:	d1f6      	bne.n	5c48 <vTaskSwitchContext+0x40>
    5c5a:	b672      	cpsid	i
    5c5c:	e7fe      	b.n	5c5c <vTaskSwitchContext+0x54>
		xYieldPending = pdTRUE;
    5c5e:	2201      	movs	r2, #1
    5c60:	4b1e      	ldr	r3, [pc, #120]	; (5cdc <vTaskSwitchContext+0xd4>)
    5c62:	601a      	str	r2, [r3, #0]
}
    5c64:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    5c66:	4821      	ldr	r0, [pc, #132]	; (5cec <vTaskSwitchContext+0xe4>)
    5c68:	009a      	lsls	r2, r3, #2
    5c6a:	18d1      	adds	r1, r2, r3
    5c6c:	0089      	lsls	r1, r1, #2
    5c6e:	1841      	adds	r1, r0, r1
    5c70:	684c      	ldr	r4, [r1, #4]
    5c72:	6864      	ldr	r4, [r4, #4]
    5c74:	604c      	str	r4, [r1, #4]
    5c76:	18d2      	adds	r2, r2, r3
    5c78:	0092      	lsls	r2, r2, #2
    5c7a:	3208      	adds	r2, #8
    5c7c:	1882      	adds	r2, r0, r2
    5c7e:	4294      	cmp	r4, r2
    5c80:	d019      	beq.n	5cb6 <vTaskSwitchContext+0xae>
    5c82:	009a      	lsls	r2, r3, #2
    5c84:	18d2      	adds	r2, r2, r3
    5c86:	0092      	lsls	r2, r2, #2
    5c88:	4918      	ldr	r1, [pc, #96]	; (5cec <vTaskSwitchContext+0xe4>)
    5c8a:	188a      	adds	r2, r1, r2
    5c8c:	6852      	ldr	r2, [r2, #4]
    5c8e:	68d1      	ldr	r1, [r2, #12]
    5c90:	4a13      	ldr	r2, [pc, #76]	; (5ce0 <vTaskSwitchContext+0xd8>)
    5c92:	6011      	str	r1, [r2, #0]
    5c94:	4a14      	ldr	r2, [pc, #80]	; (5ce8 <vTaskSwitchContext+0xe0>)
    5c96:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
    5c98:	2201      	movs	r2, #1
    5c9a:	4b15      	ldr	r3, [pc, #84]	; (5cf0 <vTaskSwitchContext+0xe8>)
    5c9c:	601a      	str	r2, [r3, #0]
    5c9e:	4b15      	ldr	r3, [pc, #84]	; (5cf4 <vTaskSwitchContext+0xec>)
    5ca0:	4798      	blx	r3
    5ca2:	4b15      	ldr	r3, [pc, #84]	; (5cf8 <vTaskSwitchContext+0xf0>)
    5ca4:	4798      	blx	r3
    5ca6:	4b15      	ldr	r3, [pc, #84]	; (5cfc <vTaskSwitchContext+0xf4>)
    5ca8:	881b      	ldrh	r3, [r3, #0]
    5caa:	4203      	tst	r3, r0
    5cac:	d10b      	bne.n	5cc6 <vTaskSwitchContext+0xbe>
    5cae:	2202      	movs	r2, #2
    5cb0:	4b0f      	ldr	r3, [pc, #60]	; (5cf0 <vTaskSwitchContext+0xe8>)
    5cb2:	601a      	str	r2, [r3, #0]
}
    5cb4:	e7d6      	b.n	5c64 <vTaskSwitchContext+0x5c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    5cb6:	6860      	ldr	r0, [r4, #4]
    5cb8:	009a      	lsls	r2, r3, #2
    5cba:	18d2      	adds	r2, r2, r3
    5cbc:	0092      	lsls	r2, r2, #2
    5cbe:	490b      	ldr	r1, [pc, #44]	; (5cec <vTaskSwitchContext+0xe4>)
    5cc0:	188a      	adds	r2, r1, r2
    5cc2:	6050      	str	r0, [r2, #4]
    5cc4:	e7dd      	b.n	5c82 <vTaskSwitchContext+0x7a>
		traceTASK_SWITCHED_IN();
    5cc6:	4b0b      	ldr	r3, [pc, #44]	; (5cf4 <vTaskSwitchContext+0xec>)
    5cc8:	4798      	blx	r3
    5cca:	4b0d      	ldr	r3, [pc, #52]	; (5d00 <vTaskSwitchContext+0xf8>)
    5ccc:	4798      	blx	r3
    5cce:	b2c0      	uxtb	r0, r0
    5cd0:	4b0c      	ldr	r3, [pc, #48]	; (5d04 <vTaskSwitchContext+0xfc>)
    5cd2:	4798      	blx	r3
    5cd4:	e7eb      	b.n	5cae <vTaskSwitchContext+0xa6>
    5cd6:	46c0      	nop			; (mov r8, r8)
    5cd8:	20003740 	.word	0x20003740
    5cdc:	200037c4 	.word	0x200037c4
    5ce0:	200036c4 	.word	0x200036c4
    5ce4:	000085dd 	.word	0x000085dd
    5ce8:	20003748 	.word	0x20003748
    5cec:	200036d0 	.word	0x200036d0
    5cf0:	200003e8 	.word	0x200003e8
    5cf4:	00002f81 	.word	0x00002f81
    5cf8:	00002ec9 	.word	0x00002ec9
    5cfc:	20000024 	.word	0x20000024
    5d00:	00002eb9 	.word	0x00002eb9
    5d04:	00003dfd 	.word	0x00003dfd

00005d08 <vTaskSuspend>:
	{
    5d08:	b570      	push	{r4, r5, r6, lr}
    5d0a:	0005      	movs	r5, r0
		taskENTER_CRITICAL();
    5d0c:	4b33      	ldr	r3, [pc, #204]	; (5ddc <vTaskSuspend+0xd4>)
    5d0e:	4798      	blx	r3
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    5d10:	1e2c      	subs	r4, r5, #0
    5d12:	d02b      	beq.n	5d6c <vTaskSuspend+0x64>
			traceTASK_SUSPEND( pxTCB );
    5d14:	4b32      	ldr	r3, [pc, #200]	; (5de0 <vTaskSuspend+0xd8>)
    5d16:	4798      	blx	r3
    5d18:	4b32      	ldr	r3, [pc, #200]	; (5de4 <vTaskSuspend+0xdc>)
    5d1a:	4798      	blx	r3
    5d1c:	4b32      	ldr	r3, [pc, #200]	; (5de8 <vTaskSuspend+0xe0>)
    5d1e:	881b      	ldrh	r3, [r3, #0]
    5d20:	4203      	tst	r3, r0
    5d22:	d126      	bne.n	5d72 <vTaskSuspend+0x6a>
    5d24:	0020      	movs	r0, r4
    5d26:	4b31      	ldr	r3, [pc, #196]	; (5dec <vTaskSuspend+0xe4>)
    5d28:	4798      	blx	r3
    5d2a:	b2c0      	uxtb	r0, r0
    5d2c:	4b30      	ldr	r3, [pc, #192]	; (5df0 <vTaskSuspend+0xe8>)
    5d2e:	4798      	blx	r3
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    5d30:	1d25      	adds	r5, r4, #4
    5d32:	0028      	movs	r0, r5
    5d34:	4b2f      	ldr	r3, [pc, #188]	; (5df4 <vTaskSuspend+0xec>)
    5d36:	4798      	blx	r3
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    5d38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5d3a:	2b00      	cmp	r3, #0
    5d3c:	d003      	beq.n	5d46 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    5d3e:	0020      	movs	r0, r4
    5d40:	3018      	adds	r0, #24
    5d42:	4b2c      	ldr	r3, [pc, #176]	; (5df4 <vTaskSuspend+0xec>)
    5d44:	4798      	blx	r3
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    5d46:	0029      	movs	r1, r5
    5d48:	482b      	ldr	r0, [pc, #172]	; (5df8 <vTaskSuspend+0xf0>)
    5d4a:	4b2c      	ldr	r3, [pc, #176]	; (5dfc <vTaskSuspend+0xf4>)
    5d4c:	4798      	blx	r3
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    5d4e:	2350      	movs	r3, #80	; 0x50
    5d50:	5ce3      	ldrb	r3, [r4, r3]
    5d52:	2b01      	cmp	r3, #1
    5d54:	d01d      	beq.n	5d92 <vTaskSuspend+0x8a>
		taskEXIT_CRITICAL();
    5d56:	4b2a      	ldr	r3, [pc, #168]	; (5e00 <vTaskSuspend+0xf8>)
    5d58:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
    5d5a:	4b2a      	ldr	r3, [pc, #168]	; (5e04 <vTaskSuspend+0xfc>)
    5d5c:	681b      	ldr	r3, [r3, #0]
    5d5e:	2b00      	cmp	r3, #0
    5d60:	d11b      	bne.n	5d9a <vTaskSuspend+0x92>
		if( pxTCB == pxCurrentTCB )
    5d62:	4b29      	ldr	r3, [pc, #164]	; (5e08 <vTaskSuspend+0x100>)
    5d64:	681b      	ldr	r3, [r3, #0]
    5d66:	429c      	cmp	r4, r3
    5d68:	d01e      	beq.n	5da8 <vTaskSuspend+0xa0>
	}
    5d6a:	bd70      	pop	{r4, r5, r6, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    5d6c:	4b26      	ldr	r3, [pc, #152]	; (5e08 <vTaskSuspend+0x100>)
    5d6e:	681c      	ldr	r4, [r3, #0]
    5d70:	e7d0      	b.n	5d14 <vTaskSuspend+0xc>
			traceTASK_SUSPEND( pxTCB );
    5d72:	0020      	movs	r0, r4
    5d74:	4b1b      	ldr	r3, [pc, #108]	; (5de4 <vTaskSuspend+0xdc>)
    5d76:	4798      	blx	r3
    5d78:	4b1b      	ldr	r3, [pc, #108]	; (5de8 <vTaskSuspend+0xe0>)
    5d7a:	881b      	ldrh	r3, [r3, #0]
    5d7c:	4203      	tst	r3, r0
    5d7e:	d0d1      	beq.n	5d24 <vTaskSuspend+0x1c>
    5d80:	0020      	movs	r0, r4
    5d82:	4b1a      	ldr	r3, [pc, #104]	; (5dec <vTaskSuspend+0xe4>)
    5d84:	4798      	blx	r3
    5d86:	b2c2      	uxtb	r2, r0
    5d88:	2103      	movs	r1, #3
    5d8a:	208a      	movs	r0, #138	; 0x8a
    5d8c:	4b1f      	ldr	r3, [pc, #124]	; (5e0c <vTaskSuspend+0x104>)
    5d8e:	4798      	blx	r3
    5d90:	e7c8      	b.n	5d24 <vTaskSuspend+0x1c>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5d92:	2200      	movs	r2, #0
    5d94:	334f      	adds	r3, #79	; 0x4f
    5d96:	54e2      	strb	r2, [r4, r3]
    5d98:	e7dd      	b.n	5d56 <vTaskSuspend+0x4e>
			taskENTER_CRITICAL();
    5d9a:	4b10      	ldr	r3, [pc, #64]	; (5ddc <vTaskSuspend+0xd4>)
    5d9c:	4798      	blx	r3
				prvResetNextTaskUnblockTime();
    5d9e:	4b1c      	ldr	r3, [pc, #112]	; (5e10 <vTaskSuspend+0x108>)
    5da0:	4798      	blx	r3
			taskEXIT_CRITICAL();
    5da2:	4b17      	ldr	r3, [pc, #92]	; (5e00 <vTaskSuspend+0xf8>)
    5da4:	4798      	blx	r3
    5da6:	e7dc      	b.n	5d62 <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
    5da8:	4b16      	ldr	r3, [pc, #88]	; (5e04 <vTaskSuspend+0xfc>)
    5daa:	681b      	ldr	r3, [r3, #0]
    5dac:	2b00      	cmp	r3, #0
    5dae:	d008      	beq.n	5dc2 <vTaskSuspend+0xba>
				configASSERT( uxSchedulerSuspended == 0 );
    5db0:	4b18      	ldr	r3, [pc, #96]	; (5e14 <vTaskSuspend+0x10c>)
    5db2:	681b      	ldr	r3, [r3, #0]
    5db4:	2b00      	cmp	r3, #0
    5db6:	d001      	beq.n	5dbc <vTaskSuspend+0xb4>
    5db8:	b672      	cpsid	i
    5dba:	e7fe      	b.n	5dba <vTaskSuspend+0xb2>
				portYIELD_WITHIN_API();
    5dbc:	4b16      	ldr	r3, [pc, #88]	; (5e18 <vTaskSuspend+0x110>)
    5dbe:	4798      	blx	r3
    5dc0:	e7d3      	b.n	5d6a <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    5dc2:	4b0d      	ldr	r3, [pc, #52]	; (5df8 <vTaskSuspend+0xf0>)
    5dc4:	681a      	ldr	r2, [r3, #0]
    5dc6:	4b15      	ldr	r3, [pc, #84]	; (5e1c <vTaskSuspend+0x114>)
    5dc8:	681b      	ldr	r3, [r3, #0]
    5dca:	429a      	cmp	r2, r3
    5dcc:	d002      	beq.n	5dd4 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
    5dce:	4b14      	ldr	r3, [pc, #80]	; (5e20 <vTaskSuspend+0x118>)
    5dd0:	4798      	blx	r3
	}
    5dd2:	e7ca      	b.n	5d6a <vTaskSuspend+0x62>
					pxCurrentTCB = NULL;
    5dd4:	2200      	movs	r2, #0
    5dd6:	4b0c      	ldr	r3, [pc, #48]	; (5e08 <vTaskSuspend+0x100>)
    5dd8:	601a      	str	r2, [r3, #0]
    5dda:	e7c6      	b.n	5d6a <vTaskSuspend+0x62>
    5ddc:	00004131 	.word	0x00004131
    5de0:	00002f81 	.word	0x00002f81
    5de4:	00002ec9 	.word	0x00002ec9
    5de8:	20000024 	.word	0x20000024
    5dec:	00002eb9 	.word	0x00002eb9
    5df0:	000036e5 	.word	0x000036e5
    5df4:	00003fff 	.word	0x00003fff
    5df8:	20003798 	.word	0x20003798
    5dfc:	00003fb9 	.word	0x00003fb9
    5e00:	00004149 	.word	0x00004149
    5e04:	20003794 	.word	0x20003794
    5e08:	200036c4 	.word	0x200036c4
    5e0c:	00003bb9 	.word	0x00003bb9
    5e10:	0000544d 	.word	0x0000544d
    5e14:	20003740 	.word	0x20003740
    5e18:	00004121 	.word	0x00004121
    5e1c:	20003734 	.word	0x20003734
    5e20:	00005c09 	.word	0x00005c09

00005e24 <vTaskPlaceOnEventList>:
{
    5e24:	b510      	push	{r4, lr}
    5e26:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    5e28:	2800      	cmp	r0, #0
    5e2a:	d101      	bne.n	5e30 <vTaskPlaceOnEventList+0xc>
    5e2c:	b672      	cpsid	i
    5e2e:	e7fe      	b.n	5e2e <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    5e30:	4b04      	ldr	r3, [pc, #16]	; (5e44 <vTaskPlaceOnEventList+0x20>)
    5e32:	6819      	ldr	r1, [r3, #0]
    5e34:	3118      	adds	r1, #24
    5e36:	4b04      	ldr	r3, [pc, #16]	; (5e48 <vTaskPlaceOnEventList+0x24>)
    5e38:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    5e3a:	2101      	movs	r1, #1
    5e3c:	0020      	movs	r0, r4
    5e3e:	4b03      	ldr	r3, [pc, #12]	; (5e4c <vTaskPlaceOnEventList+0x28>)
    5e40:	4798      	blx	r3
}
    5e42:	bd10      	pop	{r4, pc}
    5e44:	200036c4 	.word	0x200036c4
    5e48:	00003fd1 	.word	0x00003fd1
    5e4c:	000054f9 	.word	0x000054f9

00005e50 <vTaskPlaceOnEventListRestricted>:
	{
    5e50:	b570      	push	{r4, r5, r6, lr}
    5e52:	000c      	movs	r4, r1
    5e54:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    5e56:	2800      	cmp	r0, #0
    5e58:	d031      	beq.n	5ebe <vTaskPlaceOnEventListRestricted+0x6e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    5e5a:	4b1a      	ldr	r3, [pc, #104]	; (5ec4 <vTaskPlaceOnEventListRestricted+0x74>)
    5e5c:	6819      	ldr	r1, [r3, #0]
    5e5e:	3118      	adds	r1, #24
    5e60:	4b19      	ldr	r3, [pc, #100]	; (5ec8 <vTaskPlaceOnEventListRestricted+0x78>)
    5e62:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    5e64:	2d00      	cmp	r5, #0
    5e66:	d001      	beq.n	5e6c <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    5e68:	2401      	movs	r4, #1
    5e6a:	4264      	negs	r4, r4
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
    5e6c:	4b15      	ldr	r3, [pc, #84]	; (5ec4 <vTaskPlaceOnEventListRestricted+0x74>)
    5e6e:	6818      	ldr	r0, [r3, #0]
    5e70:	4b16      	ldr	r3, [pc, #88]	; (5ecc <vTaskPlaceOnEventListRestricted+0x7c>)
    5e72:	4798      	blx	r3
    5e74:	4b16      	ldr	r3, [pc, #88]	; (5ed0 <vTaskPlaceOnEventListRestricted+0x80>)
    5e76:	881b      	ldrh	r3, [r3, #0]
    5e78:	4203      	tst	r3, r0
    5e7a:	d00c      	beq.n	5e96 <vTaskPlaceOnEventListRestricted+0x46>
    5e7c:	4b15      	ldr	r3, [pc, #84]	; (5ed4 <vTaskPlaceOnEventListRestricted+0x84>)
    5e7e:	6819      	ldr	r1, [r3, #0]
    5e80:	1861      	adds	r1, r4, r1
    5e82:	2088      	movs	r0, #136	; 0x88
    5e84:	4b14      	ldr	r3, [pc, #80]	; (5ed8 <vTaskPlaceOnEventListRestricted+0x88>)
    5e86:	4798      	blx	r3
    5e88:	4b0e      	ldr	r3, [pc, #56]	; (5ec4 <vTaskPlaceOnEventListRestricted+0x74>)
    5e8a:	6818      	ldr	r0, [r3, #0]
    5e8c:	4b13      	ldr	r3, [pc, #76]	; (5edc <vTaskPlaceOnEventListRestricted+0x8c>)
    5e8e:	4798      	blx	r3
    5e90:	b2c0      	uxtb	r0, r0
    5e92:	4b13      	ldr	r3, [pc, #76]	; (5ee0 <vTaskPlaceOnEventListRestricted+0x90>)
    5e94:	4798      	blx	r3
    5e96:	4b13      	ldr	r3, [pc, #76]	; (5ee4 <vTaskPlaceOnEventListRestricted+0x94>)
    5e98:	4798      	blx	r3
    5e9a:	4b0c      	ldr	r3, [pc, #48]	; (5ecc <vTaskPlaceOnEventListRestricted+0x7c>)
    5e9c:	4798      	blx	r3
    5e9e:	4b0c      	ldr	r3, [pc, #48]	; (5ed0 <vTaskPlaceOnEventListRestricted+0x80>)
    5ea0:	881b      	ldrh	r3, [r3, #0]
    5ea2:	4203      	tst	r3, r0
    5ea4:	d006      	beq.n	5eb4 <vTaskPlaceOnEventListRestricted+0x64>
    5ea6:	4b0f      	ldr	r3, [pc, #60]	; (5ee4 <vTaskPlaceOnEventListRestricted+0x94>)
    5ea8:	4798      	blx	r3
    5eaa:	4b0c      	ldr	r3, [pc, #48]	; (5edc <vTaskPlaceOnEventListRestricted+0x8c>)
    5eac:	4798      	blx	r3
    5eae:	b2c0      	uxtb	r0, r0
    5eb0:	4b0b      	ldr	r3, [pc, #44]	; (5ee0 <vTaskPlaceOnEventListRestricted+0x90>)
    5eb2:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    5eb4:	0029      	movs	r1, r5
    5eb6:	0020      	movs	r0, r4
    5eb8:	4b0b      	ldr	r3, [pc, #44]	; (5ee8 <vTaskPlaceOnEventListRestricted+0x98>)
    5eba:	4798      	blx	r3
	}
    5ebc:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    5ebe:	b672      	cpsid	i
    5ec0:	e7fe      	b.n	5ec0 <vTaskPlaceOnEventListRestricted+0x70>
    5ec2:	46c0      	nop			; (mov r8, r8)
    5ec4:	200036c4 	.word	0x200036c4
    5ec8:	00003fb9 	.word	0x00003fb9
    5ecc:	00002ec9 	.word	0x00002ec9
    5ed0:	20000024 	.word	0x20000024
    5ed4:	200037c0 	.word	0x200037c0
    5ed8:	00003d55 	.word	0x00003d55
    5edc:	00002eb9 	.word	0x00002eb9
    5ee0:	000036e5 	.word	0x000036e5
    5ee4:	00002f81 	.word	0x00002f81
    5ee8:	000054f9 	.word	0x000054f9

00005eec <xTaskRemoveFromEventList>:
{
    5eec:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5eee:	68c3      	ldr	r3, [r0, #12]
    5ef0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    5ef2:	2c00      	cmp	r4, #0
    5ef4:	d02e      	beq.n	5f54 <xTaskRemoveFromEventList+0x68>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5ef6:	0025      	movs	r5, r4
    5ef8:	3518      	adds	r5, #24
    5efa:	0028      	movs	r0, r5
    5efc:	4b1c      	ldr	r3, [pc, #112]	; (5f70 <xTaskRemoveFromEventList+0x84>)
    5efe:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5f00:	4b1c      	ldr	r3, [pc, #112]	; (5f74 <xTaskRemoveFromEventList+0x88>)
    5f02:	681b      	ldr	r3, [r3, #0]
    5f04:	2b00      	cmp	r3, #0
    5f06:	d12e      	bne.n	5f66 <xTaskRemoveFromEventList+0x7a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    5f08:	1d25      	adds	r5, r4, #4
    5f0a:	0028      	movs	r0, r5
    5f0c:	4b18      	ldr	r3, [pc, #96]	; (5f70 <xTaskRemoveFromEventList+0x84>)
    5f0e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    5f10:	0020      	movs	r0, r4
    5f12:	4b19      	ldr	r3, [pc, #100]	; (5f78 <xTaskRemoveFromEventList+0x8c>)
    5f14:	4798      	blx	r3
    5f16:	4b19      	ldr	r3, [pc, #100]	; (5f7c <xTaskRemoveFromEventList+0x90>)
    5f18:	881b      	ldrh	r3, [r3, #0]
    5f1a:	4203      	tst	r3, r0
    5f1c:	d11c      	bne.n	5f58 <xTaskRemoveFromEventList+0x6c>
    5f1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5f20:	4a17      	ldr	r2, [pc, #92]	; (5f80 <xTaskRemoveFromEventList+0x94>)
    5f22:	6812      	ldr	r2, [r2, #0]
    5f24:	4293      	cmp	r3, r2
    5f26:	d901      	bls.n	5f2c <xTaskRemoveFromEventList+0x40>
    5f28:	4a15      	ldr	r2, [pc, #84]	; (5f80 <xTaskRemoveFromEventList+0x94>)
    5f2a:	6013      	str	r3, [r2, #0]
    5f2c:	0098      	lsls	r0, r3, #2
    5f2e:	18c0      	adds	r0, r0, r3
    5f30:	0080      	lsls	r0, r0, #2
    5f32:	4b14      	ldr	r3, [pc, #80]	; (5f84 <xTaskRemoveFromEventList+0x98>)
    5f34:	1818      	adds	r0, r3, r0
    5f36:	0029      	movs	r1, r5
    5f38:	4b13      	ldr	r3, [pc, #76]	; (5f88 <xTaskRemoveFromEventList+0x9c>)
    5f3a:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    5f3c:	4b13      	ldr	r3, [pc, #76]	; (5f8c <xTaskRemoveFromEventList+0xa0>)
    5f3e:	681b      	ldr	r3, [r3, #0]
    5f40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    5f44:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    5f46:	429a      	cmp	r2, r3
    5f48:	d903      	bls.n	5f52 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
    5f4a:	2201      	movs	r2, #1
    5f4c:	4b10      	ldr	r3, [pc, #64]	; (5f90 <xTaskRemoveFromEventList+0xa4>)
    5f4e:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    5f50:	3001      	adds	r0, #1
}
    5f52:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    5f54:	b672      	cpsid	i
    5f56:	e7fe      	b.n	5f56 <xTaskRemoveFromEventList+0x6a>
		prvAddTaskToReadyList( pxUnblockedTCB );
    5f58:	0020      	movs	r0, r4
    5f5a:	4b0e      	ldr	r3, [pc, #56]	; (5f94 <xTaskRemoveFromEventList+0xa8>)
    5f5c:	4798      	blx	r3
    5f5e:	b2c0      	uxtb	r0, r0
    5f60:	4b0d      	ldr	r3, [pc, #52]	; (5f98 <xTaskRemoveFromEventList+0xac>)
    5f62:	4798      	blx	r3
    5f64:	e7db      	b.n	5f1e <xTaskRemoveFromEventList+0x32>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    5f66:	0029      	movs	r1, r5
    5f68:	480c      	ldr	r0, [pc, #48]	; (5f9c <xTaskRemoveFromEventList+0xb0>)
    5f6a:	4b07      	ldr	r3, [pc, #28]	; (5f88 <xTaskRemoveFromEventList+0x9c>)
    5f6c:	4798      	blx	r3
    5f6e:	e7e5      	b.n	5f3c <xTaskRemoveFromEventList+0x50>
    5f70:	00003fff 	.word	0x00003fff
    5f74:	20003740 	.word	0x20003740
    5f78:	00002ec9 	.word	0x00002ec9
    5f7c:	20000024 	.word	0x20000024
    5f80:	20003748 	.word	0x20003748
    5f84:	200036d0 	.word	0x200036d0
    5f88:	00003fb9 	.word	0x00003fb9
    5f8c:	200036c4 	.word	0x200036c4
    5f90:	200037c4 	.word	0x200037c4
    5f94:	00002eb9 	.word	0x00002eb9
    5f98:	00003a51 	.word	0x00003a51
    5f9c:	20003780 	.word	0x20003780

00005fa0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5fa0:	4b03      	ldr	r3, [pc, #12]	; (5fb0 <vTaskInternalSetTimeOutState+0x10>)
    5fa2:	681b      	ldr	r3, [r3, #0]
    5fa4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5fa6:	4b03      	ldr	r3, [pc, #12]	; (5fb4 <vTaskInternalSetTimeOutState+0x14>)
    5fa8:	681b      	ldr	r3, [r3, #0]
    5faa:	6043      	str	r3, [r0, #4]
}
    5fac:	4770      	bx	lr
    5fae:	46c0      	nop			; (mov r8, r8)
    5fb0:	2000377c 	.word	0x2000377c
    5fb4:	200037c0 	.word	0x200037c0

00005fb8 <xTaskCheckForTimeOut>:
{
    5fb8:	b570      	push	{r4, r5, r6, lr}
    5fba:	0006      	movs	r6, r0
    5fbc:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    5fbe:	2800      	cmp	r0, #0
    5fc0:	d01b      	beq.n	5ffa <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    5fc2:	2900      	cmp	r1, #0
    5fc4:	d01b      	beq.n	5ffe <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    5fc6:	4b13      	ldr	r3, [pc, #76]	; (6014 <xTaskCheckForTimeOut+0x5c>)
    5fc8:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    5fca:	4b13      	ldr	r3, [pc, #76]	; (6018 <xTaskCheckForTimeOut+0x60>)
    5fcc:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    5fce:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    5fd0:	682b      	ldr	r3, [r5, #0]
    5fd2:	1c58      	adds	r0, r3, #1
    5fd4:	d01c      	beq.n	6010 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    5fd6:	4811      	ldr	r0, [pc, #68]	; (601c <xTaskCheckForTimeOut+0x64>)
    5fd8:	6800      	ldr	r0, [r0, #0]
    5fda:	6834      	ldr	r4, [r6, #0]
    5fdc:	4284      	cmp	r4, r0
    5fde:	d002      	beq.n	5fe6 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    5fe0:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    5fe2:	428a      	cmp	r2, r1
    5fe4:	d205      	bcs.n	5ff2 <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    5fe6:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    5fe8:	429a      	cmp	r2, r3
    5fea:	d30a      	bcc.n	6002 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    5fec:	2300      	movs	r3, #0
    5fee:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    5ff0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    5ff2:	4b0b      	ldr	r3, [pc, #44]	; (6020 <xTaskCheckForTimeOut+0x68>)
    5ff4:	4798      	blx	r3
}
    5ff6:	0020      	movs	r0, r4
    5ff8:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    5ffa:	b672      	cpsid	i
    5ffc:	e7fe      	b.n	5ffc <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    5ffe:	b672      	cpsid	i
    6000:	e7fe      	b.n	6000 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    6002:	1a9b      	subs	r3, r3, r2
    6004:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    6006:	0030      	movs	r0, r6
    6008:	4b06      	ldr	r3, [pc, #24]	; (6024 <xTaskCheckForTimeOut+0x6c>)
    600a:	4798      	blx	r3
			xReturn = pdFALSE;
    600c:	2400      	movs	r4, #0
    600e:	e7f0      	b.n	5ff2 <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    6010:	2400      	movs	r4, #0
    6012:	e7ee      	b.n	5ff2 <xTaskCheckForTimeOut+0x3a>
    6014:	00004131 	.word	0x00004131
    6018:	200037c0 	.word	0x200037c0
    601c:	2000377c 	.word	0x2000377c
    6020:	00004149 	.word	0x00004149
    6024:	00005fa1 	.word	0x00005fa1

00006028 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    6028:	2201      	movs	r2, #1
    602a:	4b01      	ldr	r3, [pc, #4]	; (6030 <vTaskMissedYield+0x8>)
    602c:	601a      	str	r2, [r3, #0]
}
    602e:	4770      	bx	lr
    6030:	200037c4 	.word	0x200037c4

00006034 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
    6034:	2800      	cmp	r0, #0
    6036:	d001      	beq.n	603c <uxTaskGetTaskNumber+0x8>
			uxReturn = pxTCB->uxTaskNumber;
    6038:	6c00      	ldr	r0, [r0, #64]	; 0x40
	}
    603a:	4770      	bx	lr
			uxReturn = 0U;
    603c:	2000      	movs	r0, #0
		return uxReturn;
    603e:	e7fc      	b.n	603a <uxTaskGetTaskNumber+0x6>

00006040 <vTaskSetTaskNumber>:
		if( xTask != NULL )
    6040:	2800      	cmp	r0, #0
    6042:	d000      	beq.n	6046 <vTaskSetTaskNumber+0x6>
			pxTCB->uxTaskNumber = uxHandle;
    6044:	6401      	str	r1, [r0, #64]	; 0x40
	}
    6046:	4770      	bx	lr

00006048 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
    6048:	4b01      	ldr	r3, [pc, #4]	; (6050 <xTaskGetCurrentTaskHandle+0x8>)
    604a:	6818      	ldr	r0, [r3, #0]
	}
    604c:	4770      	bx	lr
    604e:	46c0      	nop			; (mov r8, r8)
    6050:	200036c4 	.word	0x200036c4

00006054 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    6054:	4b05      	ldr	r3, [pc, #20]	; (606c <xTaskGetSchedulerState+0x18>)
    6056:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    6058:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    605a:	2b00      	cmp	r3, #0
    605c:	d004      	beq.n	6068 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    605e:	4b04      	ldr	r3, [pc, #16]	; (6070 <xTaskGetSchedulerState+0x1c>)
    6060:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    6062:	4243      	negs	r3, r0
    6064:	4158      	adcs	r0, r3
    6066:	0040      	lsls	r0, r0, #1
	}
    6068:	4770      	bx	lr
    606a:	46c0      	nop			; (mov r8, r8)
    606c:	20003794 	.word	0x20003794
    6070:	20003740 	.word	0x20003740

00006074 <xTaskPriorityInherit>:
	{
    6074:	b570      	push	{r4, r5, r6, lr}
    6076:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    6078:	d100      	bne.n	607c <xTaskPriorityInherit+0x8>
    607a:	e06d      	b.n	6158 <xTaskPriorityInherit+0xe4>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    607c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    607e:	4b37      	ldr	r3, [pc, #220]	; (615c <xTaskPriorityInherit+0xe8>)
    6080:	681b      	ldr	r3, [r3, #0]
    6082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6084:	429a      	cmp	r2, r3
    6086:	d25f      	bcs.n	6148 <xTaskPriorityInherit+0xd4>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    6088:	6983      	ldr	r3, [r0, #24]
    608a:	2b00      	cmp	r3, #0
    608c:	db05      	blt.n	609a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    608e:	4b33      	ldr	r3, [pc, #204]	; (615c <xTaskPriorityInherit+0xe8>)
    6090:	681b      	ldr	r3, [r3, #0]
    6092:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    6094:	2305      	movs	r3, #5
    6096:	1a5b      	subs	r3, r3, r1
    6098:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    609a:	0093      	lsls	r3, r2, #2
    609c:	189b      	adds	r3, r3, r2
    609e:	009b      	lsls	r3, r3, #2
    60a0:	4a2f      	ldr	r2, [pc, #188]	; (6160 <xTaskPriorityInherit+0xec>)
    60a2:	18d3      	adds	r3, r2, r3
    60a4:	6962      	ldr	r2, [r4, #20]
    60a6:	429a      	cmp	r2, r3
    60a8:	d028      	beq.n	60fc <xTaskPriorityInherit+0x88>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    60aa:	4b2c      	ldr	r3, [pc, #176]	; (615c <xTaskPriorityInherit+0xe8>)
    60ac:	681b      	ldr	r3, [r3, #0]
    60ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    60b0:	62e3      	str	r3, [r4, #44]	; 0x2c
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    60b2:	0020      	movs	r0, r4
    60b4:	4b2b      	ldr	r3, [pc, #172]	; (6164 <xTaskPriorityInherit+0xf0>)
    60b6:	4798      	blx	r3
    60b8:	0003      	movs	r3, r0
    60ba:	4a2b      	ldr	r2, [pc, #172]	; (6168 <xTaskPriorityInherit+0xf4>)
    60bc:	8812      	ldrh	r2, [r2, #0]
				xReturn = pdTRUE;
    60be:	2001      	movs	r0, #1
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    60c0:	421a      	tst	r2, r3
    60c2:	d048      	beq.n	6156 <xTaskPriorityInherit+0xe2>
    60c4:	0020      	movs	r0, r4
    60c6:	4d29      	ldr	r5, [pc, #164]	; (616c <xTaskPriorityInherit+0xf8>)
    60c8:	47a8      	blx	r5
    60ca:	0006      	movs	r6, r0
    60cc:	0020      	movs	r0, r4
    60ce:	47a8      	blx	r5
    60d0:	b2c1      	uxtb	r1, r0
    60d2:	2003      	movs	r0, #3
    60d4:	4b26      	ldr	r3, [pc, #152]	; (6170 <xTaskPriorityInherit+0xfc>)
    60d6:	4798      	blx	r3
    60d8:	0003      	movs	r3, r0
    60da:	b2f2      	uxtb	r2, r6
    60dc:	2103      	movs	r1, #3
    60de:	208e      	movs	r0, #142	; 0x8e
    60e0:	4e24      	ldr	r6, [pc, #144]	; (6174 <xTaskPriorityInherit+0x100>)
    60e2:	47b0      	blx	r6
    60e4:	0020      	movs	r0, r4
    60e6:	47a8      	blx	r5
    60e8:	4b1c      	ldr	r3, [pc, #112]	; (615c <xTaskPriorityInherit+0xe8>)
    60ea:	681b      	ldr	r3, [r3, #0]
    60ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    60ee:	b2d2      	uxtb	r2, r2
    60f0:	b2c1      	uxtb	r1, r0
    60f2:	2003      	movs	r0, #3
    60f4:	4b20      	ldr	r3, [pc, #128]	; (6178 <xTaskPriorityInherit+0x104>)
    60f6:	4798      	blx	r3
				xReturn = pdTRUE;
    60f8:	2001      	movs	r0, #1
    60fa:	e02c      	b.n	6156 <xTaskPriorityInherit+0xe2>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    60fc:	1d25      	adds	r5, r4, #4
    60fe:	0028      	movs	r0, r5
    6100:	4b1e      	ldr	r3, [pc, #120]	; (617c <xTaskPriorityInherit+0x108>)
    6102:	4798      	blx	r3
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    6104:	4b15      	ldr	r3, [pc, #84]	; (615c <xTaskPriorityInherit+0xe8>)
    6106:	681b      	ldr	r3, [r3, #0]
    6108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    610a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    610c:	0020      	movs	r0, r4
    610e:	4b15      	ldr	r3, [pc, #84]	; (6164 <xTaskPriorityInherit+0xf0>)
    6110:	4798      	blx	r3
    6112:	4b15      	ldr	r3, [pc, #84]	; (6168 <xTaskPriorityInherit+0xf4>)
    6114:	881b      	ldrh	r3, [r3, #0]
    6116:	4203      	tst	r3, r0
    6118:	d10f      	bne.n	613a <xTaskPriorityInherit+0xc6>
    611a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    611c:	4a18      	ldr	r2, [pc, #96]	; (6180 <xTaskPriorityInherit+0x10c>)
    611e:	6812      	ldr	r2, [r2, #0]
    6120:	4293      	cmp	r3, r2
    6122:	d901      	bls.n	6128 <xTaskPriorityInherit+0xb4>
    6124:	4a16      	ldr	r2, [pc, #88]	; (6180 <xTaskPriorityInherit+0x10c>)
    6126:	6013      	str	r3, [r2, #0]
    6128:	0098      	lsls	r0, r3, #2
    612a:	18c0      	adds	r0, r0, r3
    612c:	0080      	lsls	r0, r0, #2
    612e:	4b0c      	ldr	r3, [pc, #48]	; (6160 <xTaskPriorityInherit+0xec>)
    6130:	1818      	adds	r0, r3, r0
    6132:	0029      	movs	r1, r5
    6134:	4b13      	ldr	r3, [pc, #76]	; (6184 <xTaskPriorityInherit+0x110>)
    6136:	4798      	blx	r3
    6138:	e7bb      	b.n	60b2 <xTaskPriorityInherit+0x3e>
    613a:	0020      	movs	r0, r4
    613c:	4b0b      	ldr	r3, [pc, #44]	; (616c <xTaskPriorityInherit+0xf8>)
    613e:	4798      	blx	r3
    6140:	b2c0      	uxtb	r0, r0
    6142:	4b11      	ldr	r3, [pc, #68]	; (6188 <xTaskPriorityInherit+0x114>)
    6144:	4798      	blx	r3
    6146:	e7e8      	b.n	611a <xTaskPriorityInherit+0xa6>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    6148:	4b04      	ldr	r3, [pc, #16]	; (615c <xTaskPriorityInherit+0xe8>)
    614a:	681b      	ldr	r3, [r3, #0]
    614c:	6c40      	ldr	r0, [r0, #68]	; 0x44
    614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6150:	4298      	cmp	r0, r3
    6152:	4180      	sbcs	r0, r0
    6154:	4240      	negs	r0, r0
	}
    6156:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    6158:	2000      	movs	r0, #0
    615a:	e7fc      	b.n	6156 <xTaskPriorityInherit+0xe2>
    615c:	200036c4 	.word	0x200036c4
    6160:	200036d0 	.word	0x200036d0
    6164:	00002ec9 	.word	0x00002ec9
    6168:	20000024 	.word	0x20000024
    616c:	00002eb9 	.word	0x00002eb9
    6170:	00003631 	.word	0x00003631
    6174:	00003c7d 	.word	0x00003c7d
    6178:	000035d9 	.word	0x000035d9
    617c:	00003fff 	.word	0x00003fff
    6180:	20003748 	.word	0x20003748
    6184:	00003fb9 	.word	0x00003fb9
    6188:	00003a51 	.word	0x00003a51

0000618c <xTaskPriorityDisinherit>:
	{
    618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    618e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    6190:	d05a      	beq.n	6248 <xTaskPriorityDisinherit+0xbc>
			configASSERT( pxTCB == pxCurrentTCB );
    6192:	4b2f      	ldr	r3, [pc, #188]	; (6250 <xTaskPriorityDisinherit+0xc4>)
    6194:	681b      	ldr	r3, [r3, #0]
    6196:	4298      	cmp	r0, r3
    6198:	d001      	beq.n	619e <xTaskPriorityDisinherit+0x12>
    619a:	b672      	cpsid	i
    619c:	e7fe      	b.n	619c <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    619e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    61a0:	2b00      	cmp	r3, #0
    61a2:	d101      	bne.n	61a8 <xTaskPriorityDisinherit+0x1c>
    61a4:	b672      	cpsid	i
    61a6:	e7fe      	b.n	61a6 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    61a8:	3b01      	subs	r3, #1
    61aa:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    61ac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    61ae:	6c41      	ldr	r1, [r0, #68]	; 0x44
    61b0:	428a      	cmp	r2, r1
    61b2:	d04b      	beq.n	624c <xTaskPriorityDisinherit+0xc0>
	BaseType_t xReturn = pdFALSE;
    61b4:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    61b6:	2b00      	cmp	r3, #0
    61b8:	d145      	bne.n	6246 <xTaskPriorityDisinherit+0xba>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    61ba:	1d25      	adds	r5, r4, #4
    61bc:	0028      	movs	r0, r5
    61be:	4b25      	ldr	r3, [pc, #148]	; (6254 <xTaskPriorityDisinherit+0xc8>)
    61c0:	4798      	blx	r3
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    61c2:	0020      	movs	r0, r4
    61c4:	4b24      	ldr	r3, [pc, #144]	; (6258 <xTaskPriorityDisinherit+0xcc>)
    61c6:	4798      	blx	r3
    61c8:	4b24      	ldr	r3, [pc, #144]	; (625c <xTaskPriorityDisinherit+0xd0>)
    61ca:	881b      	ldrh	r3, [r3, #0]
    61cc:	4203      	tst	r3, r0
    61ce:	d018      	beq.n	6202 <xTaskPriorityDisinherit+0x76>
    61d0:	0020      	movs	r0, r4
    61d2:	4e23      	ldr	r6, [pc, #140]	; (6260 <xTaskPriorityDisinherit+0xd4>)
    61d4:	47b0      	blx	r6
    61d6:	0007      	movs	r7, r0
    61d8:	0020      	movs	r0, r4
    61da:	47b0      	blx	r6
    61dc:	b2c1      	uxtb	r1, r0
    61de:	2003      	movs	r0, #3
    61e0:	4b20      	ldr	r3, [pc, #128]	; (6264 <xTaskPriorityDisinherit+0xd8>)
    61e2:	4798      	blx	r3
    61e4:	0003      	movs	r3, r0
    61e6:	b2fa      	uxtb	r2, r7
    61e8:	2103      	movs	r1, #3
    61ea:	208f      	movs	r0, #143	; 0x8f
    61ec:	4f1e      	ldr	r7, [pc, #120]	; (6268 <xTaskPriorityDisinherit+0xdc>)
    61ee:	47b8      	blx	r7
    61f0:	0020      	movs	r0, r4
    61f2:	47b0      	blx	r6
    61f4:	2344      	movs	r3, #68	; 0x44
    61f6:	18e3      	adds	r3, r4, r3
    61f8:	781a      	ldrb	r2, [r3, #0]
    61fa:	b2c1      	uxtb	r1, r0
    61fc:	2003      	movs	r0, #3
    61fe:	4b1b      	ldr	r3, [pc, #108]	; (626c <xTaskPriorityDisinherit+0xe0>)
    6200:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    6202:	6c62      	ldr	r2, [r4, #68]	; 0x44
    6204:	62e2      	str	r2, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6206:	2305      	movs	r3, #5
    6208:	1a9b      	subs	r3, r3, r2
    620a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    620c:	0020      	movs	r0, r4
    620e:	4b12      	ldr	r3, [pc, #72]	; (6258 <xTaskPriorityDisinherit+0xcc>)
    6210:	4798      	blx	r3
    6212:	4b12      	ldr	r3, [pc, #72]	; (625c <xTaskPriorityDisinherit+0xd0>)
    6214:	881b      	ldrh	r3, [r3, #0]
    6216:	4203      	tst	r3, r0
    6218:	d005      	beq.n	6226 <xTaskPriorityDisinherit+0x9a>
    621a:	0020      	movs	r0, r4
    621c:	4b10      	ldr	r3, [pc, #64]	; (6260 <xTaskPriorityDisinherit+0xd4>)
    621e:	4798      	blx	r3
    6220:	b2c0      	uxtb	r0, r0
    6222:	4b13      	ldr	r3, [pc, #76]	; (6270 <xTaskPriorityDisinherit+0xe4>)
    6224:	4798      	blx	r3
    6226:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6228:	4a12      	ldr	r2, [pc, #72]	; (6274 <xTaskPriorityDisinherit+0xe8>)
    622a:	6812      	ldr	r2, [r2, #0]
    622c:	4293      	cmp	r3, r2
    622e:	d901      	bls.n	6234 <xTaskPriorityDisinherit+0xa8>
    6230:	4a10      	ldr	r2, [pc, #64]	; (6274 <xTaskPriorityDisinherit+0xe8>)
    6232:	6013      	str	r3, [r2, #0]
    6234:	0098      	lsls	r0, r3, #2
    6236:	18c0      	adds	r0, r0, r3
    6238:	0080      	lsls	r0, r0, #2
    623a:	4b0f      	ldr	r3, [pc, #60]	; (6278 <xTaskPriorityDisinherit+0xec>)
    623c:	1818      	adds	r0, r3, r0
    623e:	0029      	movs	r1, r5
    6240:	4b0e      	ldr	r3, [pc, #56]	; (627c <xTaskPriorityDisinherit+0xf0>)
    6242:	4798      	blx	r3
					xReturn = pdTRUE;
    6244:	2001      	movs	r0, #1
	}
    6246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
    6248:	2000      	movs	r0, #0
    624a:	e7fc      	b.n	6246 <xTaskPriorityDisinherit+0xba>
    624c:	2000      	movs	r0, #0
    624e:	e7fa      	b.n	6246 <xTaskPriorityDisinherit+0xba>
    6250:	200036c4 	.word	0x200036c4
    6254:	00003fff 	.word	0x00003fff
    6258:	00002ec9 	.word	0x00002ec9
    625c:	20000024 	.word	0x20000024
    6260:	00002eb9 	.word	0x00002eb9
    6264:	00003631 	.word	0x00003631
    6268:	00003c7d 	.word	0x00003c7d
    626c:	000035d9 	.word	0x000035d9
    6270:	00003a51 	.word	0x00003a51
    6274:	20003748 	.word	0x20003748
    6278:	200036d0 	.word	0x200036d0
    627c:	00003fb9 	.word	0x00003fb9

00006280 <vTaskPriorityDisinheritAfterTimeout>:
	{
    6280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6282:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    6284:	d00d      	beq.n	62a2 <vTaskPriorityDisinheritAfterTimeout+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    6286:	6c83      	ldr	r3, [r0, #72]	; 0x48
    6288:	2b00      	cmp	r3, #0
    628a:	d101      	bne.n	6290 <vTaskPriorityDisinheritAfterTimeout+0x10>
    628c:	b672      	cpsid	i
    628e:	e7fe      	b.n	628e <vTaskPriorityDisinheritAfterTimeout+0xe>
    6290:	6c45      	ldr	r5, [r0, #68]	; 0x44
    6292:	428d      	cmp	r5, r1
    6294:	d200      	bcs.n	6298 <vTaskPriorityDisinheritAfterTimeout+0x18>
    6296:	000d      	movs	r5, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
    6298:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    629a:	42aa      	cmp	r2, r5
    629c:	d001      	beq.n	62a2 <vTaskPriorityDisinheritAfterTimeout+0x22>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    629e:	2b01      	cmp	r3, #1
    62a0:	d000      	beq.n	62a4 <vTaskPriorityDisinheritAfterTimeout+0x24>
	}
    62a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					configASSERT( pxTCB != pxCurrentTCB );
    62a4:	4b2b      	ldr	r3, [pc, #172]	; (6354 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
    62a6:	681b      	ldr	r3, [r3, #0]
    62a8:	429c      	cmp	r4, r3
    62aa:	d101      	bne.n	62b0 <vTaskPriorityDisinheritAfterTimeout+0x30>
    62ac:	b672      	cpsid	i
    62ae:	e7fe      	b.n	62ae <vTaskPriorityDisinheritAfterTimeout+0x2e>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    62b0:	0020      	movs	r0, r4
    62b2:	4b29      	ldr	r3, [pc, #164]	; (6358 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
    62b4:	4798      	blx	r3
    62b6:	4b29      	ldr	r3, [pc, #164]	; (635c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    62b8:	881b      	ldrh	r3, [r3, #0]
    62ba:	4203      	tst	r3, r0
    62bc:	d018      	beq.n	62f0 <vTaskPriorityDisinheritAfterTimeout+0x70>
    62be:	0020      	movs	r0, r4
    62c0:	4e27      	ldr	r6, [pc, #156]	; (6360 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    62c2:	47b0      	blx	r6
    62c4:	0007      	movs	r7, r0
    62c6:	0020      	movs	r0, r4
    62c8:	47b0      	blx	r6
    62ca:	b2c1      	uxtb	r1, r0
    62cc:	2003      	movs	r0, #3
    62ce:	4b25      	ldr	r3, [pc, #148]	; (6364 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
    62d0:	4798      	blx	r3
    62d2:	0003      	movs	r3, r0
    62d4:	b2fa      	uxtb	r2, r7
    62d6:	2103      	movs	r1, #3
    62d8:	208f      	movs	r0, #143	; 0x8f
    62da:	4f23      	ldr	r7, [pc, #140]	; (6368 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
    62dc:	47b8      	blx	r7
    62de:	0020      	movs	r0, r4
    62e0:	47b0      	blx	r6
    62e2:	2344      	movs	r3, #68	; 0x44
    62e4:	18e3      	adds	r3, r4, r3
    62e6:	781a      	ldrb	r2, [r3, #0]
    62e8:	b2c1      	uxtb	r1, r0
    62ea:	2003      	movs	r0, #3
    62ec:	4b1f      	ldr	r3, [pc, #124]	; (636c <vTaskPriorityDisinheritAfterTimeout+0xec>)
    62ee:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    62f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					pxTCB->uxPriority = uxPriorityToUse;
    62f2:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    62f4:	69a3      	ldr	r3, [r4, #24]
    62f6:	2b00      	cmp	r3, #0
    62f8:	db02      	blt.n	6300 <vTaskPriorityDisinheritAfterTimeout+0x80>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    62fa:	2205      	movs	r2, #5
    62fc:	1b55      	subs	r5, r2, r5
    62fe:	61a5      	str	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    6300:	008b      	lsls	r3, r1, #2
    6302:	185b      	adds	r3, r3, r1
    6304:	009b      	lsls	r3, r3, #2
    6306:	4a1a      	ldr	r2, [pc, #104]	; (6370 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
    6308:	18d3      	adds	r3, r2, r3
    630a:	6962      	ldr	r2, [r4, #20]
    630c:	429a      	cmp	r2, r3
    630e:	d1c8      	bne.n	62a2 <vTaskPriorityDisinheritAfterTimeout+0x22>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    6310:	1d25      	adds	r5, r4, #4
    6312:	0028      	movs	r0, r5
    6314:	4b17      	ldr	r3, [pc, #92]	; (6374 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
    6316:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
    6318:	0020      	movs	r0, r4
    631a:	4b0f      	ldr	r3, [pc, #60]	; (6358 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
    631c:	4798      	blx	r3
    631e:	4b0f      	ldr	r3, [pc, #60]	; (635c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    6320:	881b      	ldrh	r3, [r3, #0]
    6322:	4203      	tst	r3, r0
    6324:	d005      	beq.n	6332 <vTaskPriorityDisinheritAfterTimeout+0xb2>
    6326:	0020      	movs	r0, r4
    6328:	4b0d      	ldr	r3, [pc, #52]	; (6360 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    632a:	4798      	blx	r3
    632c:	b2c0      	uxtb	r0, r0
    632e:	4b12      	ldr	r3, [pc, #72]	; (6378 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
    6330:	4798      	blx	r3
    6332:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6334:	4a11      	ldr	r2, [pc, #68]	; (637c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
    6336:	6812      	ldr	r2, [r2, #0]
    6338:	4293      	cmp	r3, r2
    633a:	d901      	bls.n	6340 <vTaskPriorityDisinheritAfterTimeout+0xc0>
    633c:	4a0f      	ldr	r2, [pc, #60]	; (637c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
    633e:	6013      	str	r3, [r2, #0]
    6340:	0098      	lsls	r0, r3, #2
    6342:	18c0      	adds	r0, r0, r3
    6344:	0080      	lsls	r0, r0, #2
    6346:	4b0a      	ldr	r3, [pc, #40]	; (6370 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
    6348:	1818      	adds	r0, r3, r0
    634a:	0029      	movs	r1, r5
    634c:	4b0c      	ldr	r3, [pc, #48]	; (6380 <vTaskPriorityDisinheritAfterTimeout+0x100>)
    634e:	4798      	blx	r3
	}
    6350:	e7a7      	b.n	62a2 <vTaskPriorityDisinheritAfterTimeout+0x22>
    6352:	46c0      	nop			; (mov r8, r8)
    6354:	200036c4 	.word	0x200036c4
    6358:	00002ec9 	.word	0x00002ec9
    635c:	20000024 	.word	0x20000024
    6360:	00002eb9 	.word	0x00002eb9
    6364:	00003631 	.word	0x00003631
    6368:	00003c7d 	.word	0x00003c7d
    636c:	000035d9 	.word	0x000035d9
    6370:	200036d0 	.word	0x200036d0
    6374:	00003fff 	.word	0x00003fff
    6378:	00003a51 	.word	0x00003a51
    637c:	20003748 	.word	0x20003748
    6380:	00003fb9 	.word	0x00003fb9

00006384 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
    6384:	4b05      	ldr	r3, [pc, #20]	; (639c <pvTaskIncrementMutexHeldCount+0x18>)
    6386:	681b      	ldr	r3, [r3, #0]
    6388:	2b00      	cmp	r3, #0
    638a:	d004      	beq.n	6396 <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
    638c:	4b03      	ldr	r3, [pc, #12]	; (639c <pvTaskIncrementMutexHeldCount+0x18>)
    638e:	681a      	ldr	r2, [r3, #0]
    6390:	6c93      	ldr	r3, [r2, #72]	; 0x48
    6392:	3301      	adds	r3, #1
    6394:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
    6396:	4b01      	ldr	r3, [pc, #4]	; (639c <pvTaskIncrementMutexHeldCount+0x18>)
    6398:	6818      	ldr	r0, [r3, #0]
	}
    639a:	4770      	bx	lr
    639c:	200036c4 	.word	0x200036c4

000063a0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    63a0:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    63a2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    63a4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    63a6:	4291      	cmp	r1, r2
    63a8:	d80b      	bhi.n	63c2 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    63aa:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    63ac:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    63ae:	6983      	ldr	r3, [r0, #24]
    63b0:	429a      	cmp	r2, r3
    63b2:	d211      	bcs.n	63d8 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    63b4:	1d01      	adds	r1, r0, #4
    63b6:	4b09      	ldr	r3, [pc, #36]	; (63dc <prvInsertTimerInActiveList+0x3c>)
    63b8:	6818      	ldr	r0, [r3, #0]
    63ba:	4b09      	ldr	r3, [pc, #36]	; (63e0 <prvInsertTimerInActiveList+0x40>)
    63bc:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    63be:	2400      	movs	r4, #0
    63c0:	e00a      	b.n	63d8 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    63c2:	429a      	cmp	r2, r3
    63c4:	d202      	bcs.n	63cc <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    63c6:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    63c8:	4299      	cmp	r1, r3
    63ca:	d205      	bcs.n	63d8 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    63cc:	1d01      	adds	r1, r0, #4
    63ce:	4b05      	ldr	r3, [pc, #20]	; (63e4 <prvInsertTimerInActiveList+0x44>)
    63d0:	6818      	ldr	r0, [r3, #0]
    63d2:	4b03      	ldr	r3, [pc, #12]	; (63e0 <prvInsertTimerInActiveList+0x40>)
    63d4:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    63d6:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    63d8:	0020      	movs	r0, r4
    63da:	bd10      	pop	{r4, pc}
    63dc:	200037cc 	.word	0x200037cc
    63e0:	00003fd1 	.word	0x00003fd1
    63e4:	200037c8 	.word	0x200037c8

000063e8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    63e8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    63ea:	4b0e      	ldr	r3, [pc, #56]	; (6424 <prvCheckForValidListAndQueue+0x3c>)
    63ec:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    63ee:	4b0e      	ldr	r3, [pc, #56]	; (6428 <prvCheckForValidListAndQueue+0x40>)
    63f0:	681b      	ldr	r3, [r3, #0]
    63f2:	2b00      	cmp	r3, #0
    63f4:	d002      	beq.n	63fc <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    63f6:	4b0d      	ldr	r3, [pc, #52]	; (642c <prvCheckForValidListAndQueue+0x44>)
    63f8:	4798      	blx	r3
}
    63fa:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    63fc:	4d0c      	ldr	r5, [pc, #48]	; (6430 <prvCheckForValidListAndQueue+0x48>)
    63fe:	0028      	movs	r0, r5
    6400:	4e0c      	ldr	r6, [pc, #48]	; (6434 <prvCheckForValidListAndQueue+0x4c>)
    6402:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    6404:	4c0c      	ldr	r4, [pc, #48]	; (6438 <prvCheckForValidListAndQueue+0x50>)
    6406:	0020      	movs	r0, r4
    6408:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    640a:	4b0c      	ldr	r3, [pc, #48]	; (643c <prvCheckForValidListAndQueue+0x54>)
    640c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    640e:	4b0c      	ldr	r3, [pc, #48]	; (6440 <prvCheckForValidListAndQueue+0x58>)
    6410:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    6412:	2200      	movs	r2, #0
    6414:	210c      	movs	r1, #12
    6416:	2002      	movs	r0, #2
    6418:	4b0a      	ldr	r3, [pc, #40]	; (6444 <prvCheckForValidListAndQueue+0x5c>)
    641a:	4798      	blx	r3
    641c:	4b02      	ldr	r3, [pc, #8]	; (6428 <prvCheckForValidListAndQueue+0x40>)
    641e:	6018      	str	r0, [r3, #0]
    6420:	e7e9      	b.n	63f6 <prvCheckForValidListAndQueue+0xe>
    6422:	46c0      	nop			; (mov r8, r8)
    6424:	00004131 	.word	0x00004131
    6428:	200037fc 	.word	0x200037fc
    642c:	00004149 	.word	0x00004149
    6430:	200037d0 	.word	0x200037d0
    6434:	00003f9d 	.word	0x00003f9d
    6438:	200037e4 	.word	0x200037e4
    643c:	200037c8 	.word	0x200037c8
    6440:	200037cc 	.word	0x200037cc
    6444:	000045a9 	.word	0x000045a9

00006448 <xTimerCreateTimerTask>:
{
    6448:	b510      	push	{r4, lr}
    644a:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    644c:	4b0a      	ldr	r3, [pc, #40]	; (6478 <xTimerCreateTimerTask+0x30>)
    644e:	4798      	blx	r3
	if( xTimerQueue != NULL )
    6450:	4b0a      	ldr	r3, [pc, #40]	; (647c <xTimerCreateTimerTask+0x34>)
    6452:	681b      	ldr	r3, [r3, #0]
    6454:	2b00      	cmp	r3, #0
    6456:	d00d      	beq.n	6474 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
    6458:	4b09      	ldr	r3, [pc, #36]	; (6480 <xTimerCreateTimerTask+0x38>)
    645a:	9301      	str	r3, [sp, #4]
    645c:	2302      	movs	r3, #2
    645e:	9300      	str	r3, [sp, #0]
    6460:	2300      	movs	r3, #0
    6462:	2280      	movs	r2, #128	; 0x80
    6464:	4907      	ldr	r1, [pc, #28]	; (6484 <xTimerCreateTimerTask+0x3c>)
    6466:	4808      	ldr	r0, [pc, #32]	; (6488 <xTimerCreateTimerTask+0x40>)
    6468:	4c08      	ldr	r4, [pc, #32]	; (648c <xTimerCreateTimerTask+0x44>)
    646a:	47a0      	blx	r4
	configASSERT( xReturn );
    646c:	2800      	cmp	r0, #0
    646e:	d001      	beq.n	6474 <xTimerCreateTimerTask+0x2c>
}
    6470:	b002      	add	sp, #8
    6472:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    6474:	b672      	cpsid	i
    6476:	e7fe      	b.n	6476 <xTimerCreateTimerTask+0x2e>
    6478:	000063e9 	.word	0x000063e9
    647c:	200037fc 	.word	0x200037fc
    6480:	20003800 	.word	0x20003800
    6484:	0000e760 	.word	0x0000e760
    6488:	000065b5 	.word	0x000065b5
    648c:	00005581 	.word	0x00005581

00006490 <xTimerGenericCommand>:
{
    6490:	b530      	push	{r4, r5, lr}
    6492:	b085      	sub	sp, #20
    6494:	0004      	movs	r4, r0
    6496:	001d      	movs	r5, r3
	configASSERT( xTimer );
    6498:	2800      	cmp	r0, #0
    649a:	d014      	beq.n	64c6 <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    649c:	4b13      	ldr	r3, [pc, #76]	; (64ec <xTimerGenericCommand+0x5c>)
    649e:	6818      	ldr	r0, [r3, #0]
    64a0:	2800      	cmp	r0, #0
    64a2:	d021      	beq.n	64e8 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    64a4:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    64a6:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    64a8:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    64aa:	2905      	cmp	r1, #5
    64ac:	dc15      	bgt.n	64da <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    64ae:	4b10      	ldr	r3, [pc, #64]	; (64f0 <xTimerGenericCommand+0x60>)
    64b0:	4798      	blx	r3
    64b2:	2802      	cmp	r0, #2
    64b4:	d009      	beq.n	64ca <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    64b6:	4b0d      	ldr	r3, [pc, #52]	; (64ec <xTimerGenericCommand+0x5c>)
    64b8:	6818      	ldr	r0, [r3, #0]
    64ba:	2300      	movs	r3, #0
    64bc:	2200      	movs	r2, #0
    64be:	a901      	add	r1, sp, #4
    64c0:	4c0c      	ldr	r4, [pc, #48]	; (64f4 <xTimerGenericCommand+0x64>)
    64c2:	47a0      	blx	r4
    64c4:	e00e      	b.n	64e4 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    64c6:	b672      	cpsid	i
    64c8:	e7fe      	b.n	64c8 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    64ca:	4b08      	ldr	r3, [pc, #32]	; (64ec <xTimerGenericCommand+0x5c>)
    64cc:	6818      	ldr	r0, [r3, #0]
    64ce:	2300      	movs	r3, #0
    64d0:	9a08      	ldr	r2, [sp, #32]
    64d2:	a901      	add	r1, sp, #4
    64d4:	4c07      	ldr	r4, [pc, #28]	; (64f4 <xTimerGenericCommand+0x64>)
    64d6:	47a0      	blx	r4
    64d8:	e004      	b.n	64e4 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    64da:	2300      	movs	r3, #0
    64dc:	002a      	movs	r2, r5
    64de:	a901      	add	r1, sp, #4
    64e0:	4c05      	ldr	r4, [pc, #20]	; (64f8 <xTimerGenericCommand+0x68>)
    64e2:	47a0      	blx	r4
}
    64e4:	b005      	add	sp, #20
    64e6:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    64e8:	2000      	movs	r0, #0
	return xReturn;
    64ea:	e7fb      	b.n	64e4 <xTimerGenericCommand+0x54>
    64ec:	200037fc 	.word	0x200037fc
    64f0:	00006055 	.word	0x00006055
    64f4:	000046e5 	.word	0x000046e5
    64f8:	00004a39 	.word	0x00004a39

000064fc <prvSampleTimeNow>:
{
    64fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    64fe:	46d6      	mov	lr, sl
    6500:	464f      	mov	r7, r9
    6502:	4646      	mov	r6, r8
    6504:	b5c0      	push	{r6, r7, lr}
    6506:	b082      	sub	sp, #8
    6508:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    650a:	4b23      	ldr	r3, [pc, #140]	; (6598 <prvSampleTimeNow+0x9c>)
    650c:	4798      	blx	r3
    650e:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    6510:	4b22      	ldr	r3, [pc, #136]	; (659c <prvSampleTimeNow+0xa0>)
    6512:	681b      	ldr	r3, [r3, #0]
    6514:	4298      	cmp	r0, r3
    6516:	d317      	bcc.n	6548 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    6518:	2300      	movs	r3, #0
    651a:	4642      	mov	r2, r8
    651c:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    651e:	4b1f      	ldr	r3, [pc, #124]	; (659c <prvSampleTimeNow+0xa0>)
    6520:	4652      	mov	r2, sl
    6522:	601a      	str	r2, [r3, #0]
}
    6524:	4650      	mov	r0, sl
    6526:	b002      	add	sp, #8
    6528:	bc1c      	pop	{r2, r3, r4}
    652a:	4690      	mov	r8, r2
    652c:	4699      	mov	r9, r3
    652e:	46a2      	mov	sl, r4
    6530:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    6532:	2300      	movs	r3, #0
    6534:	9300      	str	r3, [sp, #0]
    6536:	003a      	movs	r2, r7
    6538:	2100      	movs	r1, #0
    653a:	0020      	movs	r0, r4
    653c:	4c18      	ldr	r4, [pc, #96]	; (65a0 <prvSampleTimeNow+0xa4>)
    653e:	47a0      	blx	r4
				configASSERT( xResult );
    6540:	2800      	cmp	r0, #0
    6542:	d104      	bne.n	654e <prvSampleTimeNow+0x52>
    6544:	b672      	cpsid	i
    6546:	e7fe      	b.n	6546 <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    6548:	4d16      	ldr	r5, [pc, #88]	; (65a4 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    654a:	4b17      	ldr	r3, [pc, #92]	; (65a8 <prvSampleTimeNow+0xac>)
    654c:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    654e:	682b      	ldr	r3, [r5, #0]
    6550:	681a      	ldr	r2, [r3, #0]
    6552:	2a00      	cmp	r2, #0
    6554:	d017      	beq.n	6586 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    6556:	68db      	ldr	r3, [r3, #12]
    6558:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    655a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    655c:	1d26      	adds	r6, r4, #4
    655e:	0030      	movs	r0, r6
    6560:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    6562:	0020      	movs	r0, r4
    6564:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6566:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    6568:	69e3      	ldr	r3, [r4, #28]
    656a:	2b01      	cmp	r3, #1
    656c:	d1ef      	bne.n	654e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    656e:	69a3      	ldr	r3, [r4, #24]
    6570:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    6572:	429f      	cmp	r7, r3
    6574:	d2dd      	bcs.n	6532 <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    6576:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    6578:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    657a:	4b0a      	ldr	r3, [pc, #40]	; (65a4 <prvSampleTimeNow+0xa8>)
    657c:	6818      	ldr	r0, [r3, #0]
    657e:	0031      	movs	r1, r6
    6580:	4b0a      	ldr	r3, [pc, #40]	; (65ac <prvSampleTimeNow+0xb0>)
    6582:	4798      	blx	r3
    6584:	e7e3      	b.n	654e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    6586:	4a0a      	ldr	r2, [pc, #40]	; (65b0 <prvSampleTimeNow+0xb4>)
    6588:	4906      	ldr	r1, [pc, #24]	; (65a4 <prvSampleTimeNow+0xa8>)
    658a:	6810      	ldr	r0, [r2, #0]
    658c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    658e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    6590:	2301      	movs	r3, #1
    6592:	4642      	mov	r2, r8
    6594:	6013      	str	r3, [r2, #0]
    6596:	e7c2      	b.n	651e <prvSampleTimeNow+0x22>
    6598:	000058a5 	.word	0x000058a5
    659c:	200037f8 	.word	0x200037f8
    65a0:	00006491 	.word	0x00006491
    65a4:	200037c8 	.word	0x200037c8
    65a8:	00003fff 	.word	0x00003fff
    65ac:	00003fd1 	.word	0x00003fd1
    65b0:	200037cc 	.word	0x200037cc

000065b4 <prvTimerTask>:
{
    65b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    65b6:	b089      	sub	sp, #36	; 0x24
		vApplicationDaemonTaskStartupHook();
    65b8:	4b53      	ldr	r3, [pc, #332]	; (6708 <prvTimerTask+0x154>)
    65ba:	4798      	blx	r3
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    65bc:	4f53      	ldr	r7, [pc, #332]	; (670c <prvTimerTask+0x158>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    65be:	4b54      	ldr	r3, [pc, #336]	; (6710 <prvTimerTask+0x15c>)
    65c0:	681b      	ldr	r3, [r3, #0]
    65c2:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    65c4:	2a00      	cmp	r2, #0
    65c6:	d00e      	beq.n	65e6 <prvTimerTask+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    65c8:	68db      	ldr	r3, [r3, #12]
    65ca:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    65cc:	4b51      	ldr	r3, [pc, #324]	; (6714 <prvTimerTask+0x160>)
    65ce:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    65d0:	a805      	add	r0, sp, #20
    65d2:	4b51      	ldr	r3, [pc, #324]	; (6718 <prvTimerTask+0x164>)
    65d4:	4798      	blx	r3
    65d6:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    65d8:	9b05      	ldr	r3, [sp, #20]
    65da:	2b00      	cmp	r3, #0
    65dc:	d15f      	bne.n	669e <prvTimerTask+0xea>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    65de:	4284      	cmp	r4, r0
    65e0:	d936      	bls.n	6650 <prvTimerTask+0x9c>
    65e2:	2200      	movs	r2, #0
    65e4:	e00f      	b.n	6606 <prvTimerTask+0x52>
	vTaskSuspendAll();
    65e6:	4b4b      	ldr	r3, [pc, #300]	; (6714 <prvTimerTask+0x160>)
    65e8:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    65ea:	a805      	add	r0, sp, #20
    65ec:	4b4a      	ldr	r3, [pc, #296]	; (6718 <prvTimerTask+0x164>)
    65ee:	4798      	blx	r3
    65f0:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    65f2:	9b05      	ldr	r3, [sp, #20]
    65f4:	2b00      	cmp	r3, #0
    65f6:	d152      	bne.n	669e <prvTimerTask+0xea>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    65f8:	4b48      	ldr	r3, [pc, #288]	; (671c <prvTimerTask+0x168>)
    65fa:	681b      	ldr	r3, [r3, #0]
    65fc:	681b      	ldr	r3, [r3, #0]
    65fe:	425a      	negs	r2, r3
    6600:	415a      	adcs	r2, r3
    6602:	b2d2      	uxtb	r2, r2
    6604:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    6606:	1b61      	subs	r1, r4, r5
    6608:	4b45      	ldr	r3, [pc, #276]	; (6720 <prvTimerTask+0x16c>)
    660a:	6818      	ldr	r0, [r3, #0]
    660c:	4b45      	ldr	r3, [pc, #276]	; (6724 <prvTimerTask+0x170>)
    660e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    6610:	4b45      	ldr	r3, [pc, #276]	; (6728 <prvTimerTask+0x174>)
    6612:	4798      	blx	r3
    6614:	2800      	cmp	r0, #0
    6616:	d03f      	beq.n	6698 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    6618:	4d41      	ldr	r5, [pc, #260]	; (6720 <prvTimerTask+0x16c>)
    661a:	4c44      	ldr	r4, [pc, #272]	; (672c <prvTimerTask+0x178>)
    661c:	2200      	movs	r2, #0
    661e:	a905      	add	r1, sp, #20
    6620:	6828      	ldr	r0, [r5, #0]
    6622:	47a0      	blx	r4
    6624:	2800      	cmp	r0, #0
    6626:	d0ca      	beq.n	65be <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    6628:	9b05      	ldr	r3, [sp, #20]
    662a:	9303      	str	r3, [sp, #12]
    662c:	2b00      	cmp	r3, #0
    662e:	dbf5      	blt.n	661c <prvTimerTask+0x68>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    6630:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    6632:	6973      	ldr	r3, [r6, #20]
    6634:	2b00      	cmp	r3, #0
    6636:	d001      	beq.n	663c <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    6638:	1d30      	adds	r0, r6, #4
    663a:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    663c:	a804      	add	r0, sp, #16
    663e:	4b36      	ldr	r3, [pc, #216]	; (6718 <prvTimerTask+0x164>)
    6640:	4798      	blx	r3
			switch( xMessage.xMessageID )
    6642:	9b05      	ldr	r3, [sp, #20]
    6644:	2b09      	cmp	r3, #9
    6646:	d8e9      	bhi.n	661c <prvTimerTask+0x68>
    6648:	009b      	lsls	r3, r3, #2
    664a:	4a39      	ldr	r2, [pc, #228]	; (6730 <prvTimerTask+0x17c>)
    664c:	58d3      	ldr	r3, [r2, r3]
    664e:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
    6650:	4b35      	ldr	r3, [pc, #212]	; (6728 <prvTimerTask+0x174>)
    6652:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    6654:	4b2e      	ldr	r3, [pc, #184]	; (6710 <prvTimerTask+0x15c>)
    6656:	681b      	ldr	r3, [r3, #0]
    6658:	68db      	ldr	r3, [r3, #12]
    665a:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    665c:	1d30      	adds	r0, r6, #4
    665e:	4b2b      	ldr	r3, [pc, #172]	; (670c <prvTimerTask+0x158>)
    6660:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    6662:	69f3      	ldr	r3, [r6, #28]
    6664:	2b01      	cmp	r3, #1
    6666:	d003      	beq.n	6670 <prvTimerTask+0xbc>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    6668:	6a73      	ldr	r3, [r6, #36]	; 0x24
    666a:	0030      	movs	r0, r6
    666c:	4798      	blx	r3
    666e:	e7d3      	b.n	6618 <prvTimerTask+0x64>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    6670:	69b3      	ldr	r3, [r6, #24]
    6672:	18e1      	adds	r1, r4, r3
    6674:	0023      	movs	r3, r4
    6676:	002a      	movs	r2, r5
    6678:	0030      	movs	r0, r6
    667a:	4d2e      	ldr	r5, [pc, #184]	; (6734 <prvTimerTask+0x180>)
    667c:	47a8      	blx	r5
    667e:	2800      	cmp	r0, #0
    6680:	d0f2      	beq.n	6668 <prvTimerTask+0xb4>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    6682:	2300      	movs	r3, #0
    6684:	9300      	str	r3, [sp, #0]
    6686:	0022      	movs	r2, r4
    6688:	2100      	movs	r1, #0
    668a:	0030      	movs	r0, r6
    668c:	4c2a      	ldr	r4, [pc, #168]	; (6738 <prvTimerTask+0x184>)
    668e:	47a0      	blx	r4
			configASSERT( xResult );
    6690:	2800      	cmp	r0, #0
    6692:	d1e9      	bne.n	6668 <prvTimerTask+0xb4>
    6694:	b672      	cpsid	i
    6696:	e7fe      	b.n	6696 <prvTimerTask+0xe2>
					portYIELD_WITHIN_API();
    6698:	4b28      	ldr	r3, [pc, #160]	; (673c <prvTimerTask+0x188>)
    669a:	4798      	blx	r3
    669c:	e7bc      	b.n	6618 <prvTimerTask+0x64>
			( void ) xTaskResumeAll();
    669e:	4b22      	ldr	r3, [pc, #136]	; (6728 <prvTimerTask+0x174>)
    66a0:	4798      	blx	r3
    66a2:	e7b9      	b.n	6618 <prvTimerTask+0x64>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    66a4:	9b06      	ldr	r3, [sp, #24]
    66a6:	69b2      	ldr	r2, [r6, #24]
    66a8:	4694      	mov	ip, r2
    66aa:	4463      	add	r3, ip
    66ac:	0019      	movs	r1, r3
    66ae:	9b06      	ldr	r3, [sp, #24]
    66b0:	0002      	movs	r2, r0
    66b2:	0030      	movs	r0, r6
    66b4:	4c1f      	ldr	r4, [pc, #124]	; (6734 <prvTimerTask+0x180>)
    66b6:	47a0      	blx	r4
    66b8:	2800      	cmp	r0, #0
    66ba:	d0ae      	beq.n	661a <prvTimerTask+0x66>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    66bc:	0030      	movs	r0, r6
    66be:	6a73      	ldr	r3, [r6, #36]	; 0x24
    66c0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    66c2:	69f3      	ldr	r3, [r6, #28]
    66c4:	2b01      	cmp	r3, #1
    66c6:	d1a8      	bne.n	661a <prvTimerTask+0x66>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    66c8:	9b06      	ldr	r3, [sp, #24]
    66ca:	69b1      	ldr	r1, [r6, #24]
    66cc:	468c      	mov	ip, r1
    66ce:	4463      	add	r3, ip
    66d0:	001a      	movs	r2, r3
    66d2:	2300      	movs	r3, #0
    66d4:	9300      	str	r3, [sp, #0]
    66d6:	2100      	movs	r1, #0
    66d8:	0030      	movs	r0, r6
    66da:	4c17      	ldr	r4, [pc, #92]	; (6738 <prvTimerTask+0x184>)
    66dc:	47a0      	blx	r4
							configASSERT( xResult );
    66de:	2800      	cmp	r0, #0
    66e0:	d19b      	bne.n	661a <prvTimerTask+0x66>
    66e2:	b672      	cpsid	i
    66e4:	e7fe      	b.n	66e4 <prvTimerTask+0x130>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    66e6:	9906      	ldr	r1, [sp, #24]
    66e8:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    66ea:	2900      	cmp	r1, #0
    66ec:	d006      	beq.n	66fc <prvTimerTask+0x148>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    66ee:	1841      	adds	r1, r0, r1
    66f0:	0003      	movs	r3, r0
    66f2:	0002      	movs	r2, r0
    66f4:	0030      	movs	r0, r6
    66f6:	4c0f      	ldr	r4, [pc, #60]	; (6734 <prvTimerTask+0x180>)
    66f8:	47a0      	blx	r4
    66fa:	e78e      	b.n	661a <prvTimerTask+0x66>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    66fc:	b672      	cpsid	i
    66fe:	e7fe      	b.n	66fe <prvTimerTask+0x14a>
						vPortFree( pxTimer );
    6700:	0030      	movs	r0, r6
    6702:	4b0f      	ldr	r3, [pc, #60]	; (6740 <prvTimerTask+0x18c>)
    6704:	4798      	blx	r3
    6706:	e788      	b.n	661a <prvTimerTask+0x66>
    6708:	00008479 	.word	0x00008479
    670c:	00003fff 	.word	0x00003fff
    6710:	200037c8 	.word	0x200037c8
    6714:	00005895 	.word	0x00005895
    6718:	000064fd 	.word	0x000064fd
    671c:	200037cc 	.word	0x200037cc
    6720:	200037fc 	.word	0x200037fc
    6724:	000053ed 	.word	0x000053ed
    6728:	00005a3d 	.word	0x00005a3d
    672c:	00004d81 	.word	0x00004d81
    6730:	0000e738 	.word	0x0000e738
    6734:	000063a1 	.word	0x000063a1
    6738:	00006491 	.word	0x00006491
    673c:	00004121 	.word	0x00004121
    6740:	00004285 	.word	0x00004285

00006744 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    6744:	b510      	push	{r4, lr}
    6746:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
    6748:	7c03      	ldrb	r3, [r0, #16]
    674a:	2b00      	cmp	r3, #0
    674c:	d005      	beq.n	675a <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    674e:	6883      	ldr	r3, [r0, #8]
    6750:	1c58      	adds	r0, r3, #1
    6752:	68e1      	ldr	r1, [r4, #12]
    6754:	4b07      	ldr	r3, [pc, #28]	; (6774 <advance_pointer+0x30>)
    6756:	4798      	blx	r3
    6758:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    675a:	6863      	ldr	r3, [r4, #4]
    675c:	1c58      	adds	r0, r3, #1
    675e:	68e1      	ldr	r1, [r4, #12]
    6760:	4b04      	ldr	r3, [pc, #16]	; (6774 <advance_pointer+0x30>)
    6762:	4798      	blx	r3
    6764:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    6766:	68a3      	ldr	r3, [r4, #8]
    6768:	1a59      	subs	r1, r3, r1
    676a:	424a      	negs	r2, r1
    676c:	414a      	adcs	r2, r1
    676e:	7422      	strb	r2, [r4, #16]
 }
    6770:	bd10      	pop	{r4, pc}
    6772:	46c0      	nop			; (mov r8, r8)
    6774:	0000aa21 	.word	0x0000aa21

00006778 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    6778:	b570      	push	{r4, r5, r6, lr}
    677a:	0005      	movs	r5, r0
    677c:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    677e:	2014      	movs	r0, #20
    6780:	4b04      	ldr	r3, [pc, #16]	; (6794 <circular_buf_init+0x1c>)
    6782:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    6784:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
    6786:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
    6788:	2300      	movs	r3, #0
    678a:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
    678c:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
    678e:	7403      	strb	r3, [r0, #16]
 }
    6790:	bd70      	pop	{r4, r5, r6, pc}
    6792:	46c0      	nop			; (mov r8, r8)
    6794:	00008639 	.word	0x00008639

00006798 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    6798:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    679a:	6803      	ldr	r3, [r0, #0]
    679c:	6842      	ldr	r2, [r0, #4]
    679e:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
    67a0:	4b01      	ldr	r3, [pc, #4]	; (67a8 <circular_buf_put+0x10>)
    67a2:	4798      	blx	r3
 }
    67a4:	bd10      	pop	{r4, pc}
    67a6:	46c0      	nop			; (mov r8, r8)
    67a8:	00006745 	.word	0x00006745

000067ac <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    67ac:	7c02      	ldrb	r2, [r0, #16]
    67ae:	2300      	movs	r3, #0
    67b0:	2a00      	cmp	r2, #0
    67b2:	d105      	bne.n	67c0 <circular_buf_empty+0x14>
    67b4:	6843      	ldr	r3, [r0, #4]
    67b6:	6880      	ldr	r0, [r0, #8]
    67b8:	1a1b      	subs	r3, r3, r0
    67ba:	4258      	negs	r0, r3
    67bc:	4143      	adcs	r3, r0
    67be:	b2db      	uxtb	r3, r3
    67c0:	0018      	movs	r0, r3
 }
    67c2:	4770      	bx	lr

000067c4 <circular_buf_get>:
 {
    67c4:	b570      	push	{r4, r5, r6, lr}
    67c6:	0004      	movs	r4, r0
    67c8:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
    67ca:	4b0a      	ldr	r3, [pc, #40]	; (67f4 <circular_buf_get+0x30>)
    67cc:	4798      	blx	r3
    67ce:	2800      	cmp	r0, #0
    67d0:	d10d      	bne.n	67ee <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
    67d2:	6823      	ldr	r3, [r4, #0]
    67d4:	68a2      	ldr	r2, [r4, #8]
    67d6:	5c9b      	ldrb	r3, [r3, r2]
    67d8:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
    67da:	2300      	movs	r3, #0
    67dc:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    67de:	68a3      	ldr	r3, [r4, #8]
    67e0:	1c58      	adds	r0, r3, #1
    67e2:	68e1      	ldr	r1, [r4, #12]
    67e4:	4b04      	ldr	r3, [pc, #16]	; (67f8 <circular_buf_get+0x34>)
    67e6:	4798      	blx	r3
    67e8:	60a1      	str	r1, [r4, #8]
		 r = 0;
    67ea:	2000      	movs	r0, #0
 }
    67ec:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
    67ee:	2001      	movs	r0, #1
    67f0:	4240      	negs	r0, r0
	 return r;
    67f2:	e7fb      	b.n	67ec <circular_buf_get+0x28>
    67f4:	000067ad 	.word	0x000067ad
    67f8:	0000aa21 	.word	0x0000aa21

000067fc <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    67fc:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    67fe:	4b06      	ldr	r3, [pc, #24]	; (6818 <usart_write_callback+0x1c>)
    6800:	6818      	ldr	r0, [r3, #0]
    6802:	4906      	ldr	r1, [pc, #24]	; (681c <usart_write_callback+0x20>)
    6804:	4b06      	ldr	r3, [pc, #24]	; (6820 <usart_write_callback+0x24>)
    6806:	4798      	blx	r3
    6808:	1c43      	adds	r3, r0, #1
    680a:	d004      	beq.n	6816 <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    680c:	2201      	movs	r2, #1
    680e:	4903      	ldr	r1, [pc, #12]	; (681c <usart_write_callback+0x20>)
    6810:	4804      	ldr	r0, [pc, #16]	; (6824 <usart_write_callback+0x28>)
    6812:	4b05      	ldr	r3, [pc, #20]	; (6828 <usart_write_callback+0x2c>)
    6814:	4798      	blx	r3
	}
	
}
    6816:	bd10      	pop	{r4, pc}
    6818:	20004d78 	.word	0x20004d78
    681c:	20004d74 	.word	0x20004d74
    6820:	000067c5 	.word	0x000067c5
    6824:	20004938 	.word	0x20004938
    6828:	00007909 	.word	0x00007909

0000682c <usart_read_callback>:
{
    682c:	b510      	push	{r4, lr}
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
    682e:	4c07      	ldr	r4, [pc, #28]	; (684c <usart_read_callback+0x20>)
    6830:	7821      	ldrb	r1, [r4, #0]
    6832:	4b07      	ldr	r3, [pc, #28]	; (6850 <usart_read_callback+0x24>)
    6834:	6818      	ldr	r0, [r3, #0]
    6836:	4b07      	ldr	r3, [pc, #28]	; (6854 <usart_read_callback+0x28>)
    6838:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
    683a:	2201      	movs	r2, #1
    683c:	0021      	movs	r1, r4
    683e:	4806      	ldr	r0, [pc, #24]	; (6858 <usart_read_callback+0x2c>)
    6840:	4b06      	ldr	r3, [pc, #24]	; (685c <usart_read_callback+0x30>)
    6842:	4798      	blx	r3
	CliCharReadySemaphoreGiveFromISR(); //Give binary semaphore
    6844:	4b06      	ldr	r3, [pc, #24]	; (6860 <usart_read_callback+0x34>)
    6846:	4798      	blx	r3
}
    6848:	bd10      	pop	{r4, pc}
    684a:	46c0      	nop			; (mov r8, r8)
    684c:	20004970 	.word	0x20004970
    6850:	2000496c 	.word	0x2000496c
    6854:	00006799 	.word	0x00006799
    6858:	20004938 	.word	0x20004938
    685c:	00007929 	.word	0x00007929
    6860:	00001d29 	.word	0x00001d29

00006864 <InitializeSerialConsole>:
{
    6864:	b530      	push	{r4, r5, lr}
    6866:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
    6868:	2580      	movs	r5, #128	; 0x80
    686a:	00ad      	lsls	r5, r5, #2
    686c:	0029      	movs	r1, r5
    686e:	4836      	ldr	r0, [pc, #216]	; (6948 <InitializeSerialConsole+0xe4>)
    6870:	4c36      	ldr	r4, [pc, #216]	; (694c <InitializeSerialConsole+0xe8>)
    6872:	47a0      	blx	r4
    6874:	4b36      	ldr	r3, [pc, #216]	; (6950 <InitializeSerialConsole+0xec>)
    6876:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
    6878:	0029      	movs	r1, r5
    687a:	4836      	ldr	r0, [pc, #216]	; (6954 <InitializeSerialConsole+0xf0>)
    687c:	47a0      	blx	r4
    687e:	4b36      	ldr	r3, [pc, #216]	; (6958 <InitializeSerialConsole+0xf4>)
    6880:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    6882:	2380      	movs	r3, #128	; 0x80
    6884:	05db      	lsls	r3, r3, #23
    6886:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    6888:	2300      	movs	r3, #0
    688a:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    688c:	22ff      	movs	r2, #255	; 0xff
    688e:	4669      	mov	r1, sp
    6890:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    6892:	2200      	movs	r2, #0
    6894:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    6896:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    6898:	2101      	movs	r1, #1
    689a:	2024      	movs	r0, #36	; 0x24
    689c:	466c      	mov	r4, sp
    689e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    68a0:	3001      	adds	r0, #1
    68a2:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    68a4:	3125      	adds	r1, #37	; 0x25
    68a6:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    68a8:	3101      	adds	r1, #1
    68aa:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    68ac:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    68ae:	3105      	adds	r1, #5
    68b0:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    68b2:	3101      	adds	r1, #1
    68b4:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    68b6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    68b8:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    68ba:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    68bc:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    68be:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    68c0:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    68c2:	2313      	movs	r3, #19
    68c4:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    68c6:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
    68c8:	23e1      	movs	r3, #225	; 0xe1
    68ca:	025b      	lsls	r3, r3, #9
    68cc:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    68ce:	23c4      	movs	r3, #196	; 0xc4
    68d0:	039b      	lsls	r3, r3, #14
    68d2:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    68d4:	2301      	movs	r3, #1
    68d6:	425b      	negs	r3, r3
    68d8:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    68da:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    68dc:	4b1f      	ldr	r3, [pc, #124]	; (695c <InitializeSerialConsole+0xf8>)
    68de:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    68e0:	4b1f      	ldr	r3, [pc, #124]	; (6960 <InitializeSerialConsole+0xfc>)
    68e2:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
    68e4:	4d1f      	ldr	r5, [pc, #124]	; (6964 <InitializeSerialConsole+0x100>)
    68e6:	4c20      	ldr	r4, [pc, #128]	; (6968 <InitializeSerialConsole+0x104>)
    68e8:	466a      	mov	r2, sp
    68ea:	4920      	ldr	r1, [pc, #128]	; (696c <InitializeSerialConsole+0x108>)
    68ec:	0028      	movs	r0, r5
    68ee:	47a0      	blx	r4
    68f0:	2800      	cmp	r0, #0
    68f2:	d1f9      	bne.n	68e8 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    68f4:	4d1b      	ldr	r5, [pc, #108]	; (6964 <InitializeSerialConsole+0x100>)
    68f6:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    68f8:	0020      	movs	r0, r4
    68fa:	4b1d      	ldr	r3, [pc, #116]	; (6970 <InitializeSerialConsole+0x10c>)
    68fc:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    68fe:	231f      	movs	r3, #31
    6900:	4018      	ands	r0, r3
    6902:	3b1e      	subs	r3, #30
    6904:	4083      	lsls	r3, r0
    6906:	4a1b      	ldr	r2, [pc, #108]	; (6974 <InitializeSerialConsole+0x110>)
    6908:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    690a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    690c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    690e:	2b00      	cmp	r3, #0
    6910:	d1fc      	bne.n	690c <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6912:	6823      	ldr	r3, [r4, #0]
    6914:	2202      	movs	r2, #2
    6916:	4313      	orrs	r3, r2
    6918:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
    691a:	4c12      	ldr	r4, [pc, #72]	; (6964 <InitializeSerialConsole+0x100>)
    691c:	2200      	movs	r2, #0
    691e:	4916      	ldr	r1, [pc, #88]	; (6978 <InitializeSerialConsole+0x114>)
    6920:	0020      	movs	r0, r4
    6922:	4d16      	ldr	r5, [pc, #88]	; (697c <InitializeSerialConsole+0x118>)
    6924:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
    6926:	2201      	movs	r2, #1
    6928:	4915      	ldr	r1, [pc, #84]	; (6980 <InitializeSerialConsole+0x11c>)
    692a:	0020      	movs	r0, r4
    692c:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    692e:	2231      	movs	r2, #49	; 0x31
    6930:	5ca3      	ldrb	r3, [r4, r2]
    6932:	2103      	movs	r1, #3
    6934:	430b      	orrs	r3, r1
    6936:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
    6938:	3a30      	subs	r2, #48	; 0x30
    693a:	4912      	ldr	r1, [pc, #72]	; (6984 <InitializeSerialConsole+0x120>)
    693c:	0020      	movs	r0, r4
    693e:	4b12      	ldr	r3, [pc, #72]	; (6988 <InitializeSerialConsole+0x124>)
    6940:	4798      	blx	r3
}
    6942:	b011      	add	sp, #68	; 0x44
    6944:	bd30      	pop	{r4, r5, pc}
    6946:	46c0      	nop			; (mov r8, r8)
    6948:	20004b74 	.word	0x20004b74
    694c:	00006779 	.word	0x00006779
    6950:	2000496c 	.word	0x2000496c
    6954:	20004974 	.word	0x20004974
    6958:	20004d78 	.word	0x20004d78
    695c:	002a0003 	.word	0x002a0003
    6960:	002b0003 	.word	0x002b0003
    6964:	20004938 	.word	0x20004938
    6968:	00007521 	.word	0x00007521
    696c:	42001800 	.word	0x42001800
    6970:	00007045 	.word	0x00007045
    6974:	e000e100 	.word	0xe000e100
    6978:	000067fd 	.word	0x000067fd
    697c:	000078f1 	.word	0x000078f1
    6980:	0000682d 	.word	0x0000682d
    6984:	20004970 	.word	0x20004970
    6988:	00007929 	.word	0x00007929

0000698c <SerialConsoleWriteString>:
{
    698c:	b5f0      	push	{r4, r5, r6, r7, lr}
    698e:	46c6      	mov	lr, r8
    6990:	b500      	push	{lr}
    6992:	0005      	movs	r5, r0
vTaskSuspendAll();
    6994:	4b14      	ldr	r3, [pc, #80]	; (69e8 <SerialConsoleWriteString+0x5c>)
    6996:	4798      	blx	r3
    6998:	2400      	movs	r4, #0
	if(string != NULL)
    699a:	2d00      	cmp	r5, #0
    699c:	d012      	beq.n	69c4 <SerialConsoleWriteString+0x38>
		for (size_t iter = 0; iter < strlen(string); iter++)
    699e:	4e13      	ldr	r6, [pc, #76]	; (69ec <SerialConsoleWriteString+0x60>)
			circular_buf_put(cbufTx, string[iter]);
    69a0:	4f13      	ldr	r7, [pc, #76]	; (69f0 <SerialConsoleWriteString+0x64>)
    69a2:	4b14      	ldr	r3, [pc, #80]	; (69f4 <SerialConsoleWriteString+0x68>)
    69a4:	4698      	mov	r8, r3
    69a6:	e003      	b.n	69b0 <SerialConsoleWriteString+0x24>
    69a8:	5d29      	ldrb	r1, [r5, r4]
    69aa:	6838      	ldr	r0, [r7, #0]
    69ac:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
    69ae:	3401      	adds	r4, #1
    69b0:	0028      	movs	r0, r5
    69b2:	47b0      	blx	r6
    69b4:	4284      	cmp	r4, r0
    69b6:	d3f7      	bcc.n	69a8 <SerialConsoleWriteString+0x1c>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
    69b8:	2101      	movs	r1, #1
    69ba:	480f      	ldr	r0, [pc, #60]	; (69f8 <SerialConsoleWriteString+0x6c>)
    69bc:	4b0f      	ldr	r3, [pc, #60]	; (69fc <SerialConsoleWriteString+0x70>)
    69be:	4798      	blx	r3
    69c0:	2800      	cmp	r0, #0
    69c2:	d004      	beq.n	69ce <SerialConsoleWriteString+0x42>
xTaskResumeAll();
    69c4:	4b0e      	ldr	r3, [pc, #56]	; (6a00 <SerialConsoleWriteString+0x74>)
    69c6:	4798      	blx	r3
}
    69c8:	bc04      	pop	{r2}
    69ca:	4690      	mov	r8, r2
    69cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
    69ce:	4c0d      	ldr	r4, [pc, #52]	; (6a04 <SerialConsoleWriteString+0x78>)
    69d0:	4b07      	ldr	r3, [pc, #28]	; (69f0 <SerialConsoleWriteString+0x64>)
    69d2:	6818      	ldr	r0, [r3, #0]
    69d4:	0021      	movs	r1, r4
    69d6:	4b0c      	ldr	r3, [pc, #48]	; (6a08 <SerialConsoleWriteString+0x7c>)
    69d8:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    69da:	2201      	movs	r2, #1
    69dc:	0021      	movs	r1, r4
    69de:	4806      	ldr	r0, [pc, #24]	; (69f8 <SerialConsoleWriteString+0x6c>)
    69e0:	4b0a      	ldr	r3, [pc, #40]	; (6a0c <SerialConsoleWriteString+0x80>)
    69e2:	4798      	blx	r3
    69e4:	e7ee      	b.n	69c4 <SerialConsoleWriteString+0x38>
    69e6:	46c0      	nop			; (mov r8, r8)
    69e8:	00005895 	.word	0x00005895
    69ec:	000091a9 	.word	0x000091a9
    69f0:	20004d78 	.word	0x20004d78
    69f4:	00006799 	.word	0x00006799
    69f8:	20004938 	.word	0x20004938
    69fc:	00007949 	.word	0x00007949
    6a00:	00005a3d 	.word	0x00005a3d
    6a04:	20004d74 	.word	0x20004d74
    6a08:	000067c5 	.word	0x000067c5
    6a0c:	00007909 	.word	0x00007909

00006a10 <SerialConsoleReadCharacter>:
{
    6a10:	b510      	push	{r4, lr}
    6a12:	0004      	movs	r4, r0
	vTaskSuspendAll();
    6a14:	4b05      	ldr	r3, [pc, #20]	; (6a2c <SerialConsoleReadCharacter+0x1c>)
    6a16:	4798      	blx	r3
	int a = circular_buf_get(cbufRx, (uint8_t*) rxChar);
    6a18:	4b05      	ldr	r3, [pc, #20]	; (6a30 <SerialConsoleReadCharacter+0x20>)
    6a1a:	6818      	ldr	r0, [r3, #0]
    6a1c:	0021      	movs	r1, r4
    6a1e:	4b05      	ldr	r3, [pc, #20]	; (6a34 <SerialConsoleReadCharacter+0x24>)
    6a20:	4798      	blx	r3
    6a22:	0004      	movs	r4, r0
	xTaskResumeAll();
    6a24:	4b04      	ldr	r3, [pc, #16]	; (6a38 <SerialConsoleReadCharacter+0x28>)
    6a26:	4798      	blx	r3
}
    6a28:	0020      	movs	r0, r4
    6a2a:	bd10      	pop	{r4, pc}
    6a2c:	00005895 	.word	0x00005895
    6a30:	2000496c 	.word	0x2000496c
    6a34:	000067c5 	.word	0x000067c5
    6a38:	00005a3d 	.word	0x00005a3d

00006a3c <LogMessage>:
{
    6a3c:	b40e      	push	{r1, r2, r3}
    6a3e:	b530      	push	{r4, r5, lr}
    6a40:	b082      	sub	sp, #8
return currentDebugLevel;
    6a42:	4b0a      	ldr	r3, [pc, #40]	; (6a6c <LogMessage+0x30>)
if(getLogLevel() <= level){
    6a44:	781b      	ldrb	r3, [r3, #0]
    6a46:	4283      	cmp	r3, r0
    6a48:	d904      	bls.n	6a54 <LogMessage+0x18>
};
    6a4a:	b002      	add	sp, #8
    6a4c:	bc30      	pop	{r4, r5}
    6a4e:	bc08      	pop	{r3}
    6a50:	b003      	add	sp, #12
    6a52:	4718      	bx	r3
	va_start(ap, format);
    6a54:	ab06      	add	r3, sp, #24
    6a56:	9301      	str	r3, [sp, #4]
	vsnprintf(debugBuffer, 127, format, ap);
    6a58:	4c05      	ldr	r4, [pc, #20]	; (6a70 <LogMessage+0x34>)
    6a5a:	9a05      	ldr	r2, [sp, #20]
    6a5c:	217f      	movs	r1, #127	; 0x7f
    6a5e:	0020      	movs	r0, r4
    6a60:	4d04      	ldr	r5, [pc, #16]	; (6a74 <LogMessage+0x38>)
    6a62:	47a8      	blx	r5
	SerialConsoleWriteString(debugBuffer);
    6a64:	0020      	movs	r0, r4
    6a66:	4b04      	ldr	r3, [pc, #16]	; (6a78 <LogMessage+0x3c>)
    6a68:	4798      	blx	r3
};
    6a6a:	e7ee      	b.n	6a4a <LogMessage+0xe>
    6a6c:	20003804 	.word	0x20003804
    6a70:	200048b8 	.word	0x200048b8
    6a74:	00009259 	.word	0x00009259
    6a78:	0000698d 	.word	0x0000698d

00006a7c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    6a7c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    6a7e:	4b08      	ldr	r3, [pc, #32]	; (6aa0 <delay_cycles_ms+0x24>)
    6a80:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    6a82:	4a08      	ldr	r2, [pc, #32]	; (6aa4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    6a84:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    6a86:	2180      	movs	r1, #128	; 0x80
    6a88:	0249      	lsls	r1, r1, #9
	while (n--) {
    6a8a:	3801      	subs	r0, #1
    6a8c:	d307      	bcc.n	6a9e <delay_cycles_ms+0x22>
	if (n > 0) {
    6a8e:	2c00      	cmp	r4, #0
    6a90:	d0fb      	beq.n	6a8a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    6a92:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    6a94:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    6a96:	6813      	ldr	r3, [r2, #0]
    6a98:	420b      	tst	r3, r1
    6a9a:	d0fc      	beq.n	6a96 <delay_cycles_ms+0x1a>
    6a9c:	e7f5      	b.n	6a8a <delay_cycles_ms+0xe>
	}
}
    6a9e:	bd30      	pop	{r4, r5, pc}
    6aa0:	20000030 	.word	0x20000030
    6aa4:	e000e010 	.word	0xe000e010

00006aa8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    6aa8:	4b0c      	ldr	r3, [pc, #48]	; (6adc <cpu_irq_enter_critical+0x34>)
    6aaa:	681b      	ldr	r3, [r3, #0]
    6aac:	2b00      	cmp	r3, #0
    6aae:	d106      	bne.n	6abe <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6ab0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    6ab4:	2b00      	cmp	r3, #0
    6ab6:	d007      	beq.n	6ac8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    6ab8:	2200      	movs	r2, #0
    6aba:	4b09      	ldr	r3, [pc, #36]	; (6ae0 <cpu_irq_enter_critical+0x38>)
    6abc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    6abe:	4a07      	ldr	r2, [pc, #28]	; (6adc <cpu_irq_enter_critical+0x34>)
    6ac0:	6813      	ldr	r3, [r2, #0]
    6ac2:	3301      	adds	r3, #1
    6ac4:	6013      	str	r3, [r2, #0]
}
    6ac6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    6ac8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    6aca:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    6ace:	2200      	movs	r2, #0
    6ad0:	4b04      	ldr	r3, [pc, #16]	; (6ae4 <cpu_irq_enter_critical+0x3c>)
    6ad2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    6ad4:	3201      	adds	r2, #1
    6ad6:	4b02      	ldr	r3, [pc, #8]	; (6ae0 <cpu_irq_enter_critical+0x38>)
    6ad8:	701a      	strb	r2, [r3, #0]
    6ada:	e7f0      	b.n	6abe <cpu_irq_enter_critical+0x16>
    6adc:	20003808 	.word	0x20003808
    6ae0:	2000380c 	.word	0x2000380c
    6ae4:	20000034 	.word	0x20000034

00006ae8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    6ae8:	4b08      	ldr	r3, [pc, #32]	; (6b0c <cpu_irq_leave_critical+0x24>)
    6aea:	681a      	ldr	r2, [r3, #0]
    6aec:	3a01      	subs	r2, #1
    6aee:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    6af0:	681b      	ldr	r3, [r3, #0]
    6af2:	2b00      	cmp	r3, #0
    6af4:	d109      	bne.n	6b0a <cpu_irq_leave_critical+0x22>
    6af6:	4b06      	ldr	r3, [pc, #24]	; (6b10 <cpu_irq_leave_critical+0x28>)
    6af8:	781b      	ldrb	r3, [r3, #0]
    6afa:	2b00      	cmp	r3, #0
    6afc:	d005      	beq.n	6b0a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    6afe:	2201      	movs	r2, #1
    6b00:	4b04      	ldr	r3, [pc, #16]	; (6b14 <cpu_irq_leave_critical+0x2c>)
    6b02:	701a      	strb	r2, [r3, #0]
    6b04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    6b08:	b662      	cpsie	i
	}
}
    6b0a:	4770      	bx	lr
    6b0c:	20003808 	.word	0x20003808
    6b10:	2000380c 	.word	0x2000380c
    6b14:	20000034 	.word	0x20000034

00006b18 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    6b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b1a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    6b1c:	ac01      	add	r4, sp, #4
    6b1e:	2501      	movs	r5, #1
    6b20:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    6b22:	2700      	movs	r7, #0
    6b24:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6b26:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    6b28:	0021      	movs	r1, r4
    6b2a:	2017      	movs	r0, #23
    6b2c:	4e06      	ldr	r6, [pc, #24]	; (6b48 <system_board_init+0x30>)
    6b2e:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    6b30:	2280      	movs	r2, #128	; 0x80
    6b32:	0412      	lsls	r2, r2, #16
    6b34:	4b05      	ldr	r3, [pc, #20]	; (6b4c <system_board_init+0x34>)
    6b36:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    6b38:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    6b3a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    6b3c:	0021      	movs	r1, r4
    6b3e:	2037      	movs	r0, #55	; 0x37
    6b40:	47b0      	blx	r6
}
    6b42:	b003      	add	sp, #12
    6b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b46:	46c0      	nop			; (mov r8, r8)
    6b48:	00006c29 	.word	0x00006c29
    6b4c:	41004400 	.word	0x41004400

00006b50 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    6b50:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    6b52:	2200      	movs	r2, #0
    6b54:	4b10      	ldr	r3, [pc, #64]	; (6b98 <EIC_Handler+0x48>)
    6b56:	701a      	strb	r2, [r3, #0]
    6b58:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    6b5a:	4910      	ldr	r1, [pc, #64]	; (6b9c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    6b5c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    6b5e:	4e10      	ldr	r6, [pc, #64]	; (6ba0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    6b60:	4c0d      	ldr	r4, [pc, #52]	; (6b98 <EIC_Handler+0x48>)
    6b62:	e00a      	b.n	6b7a <EIC_Handler+0x2a>
		return eics[eic_index];
    6b64:	490d      	ldr	r1, [pc, #52]	; (6b9c <EIC_Handler+0x4c>)
    6b66:	e008      	b.n	6b7a <EIC_Handler+0x2a>
    6b68:	7823      	ldrb	r3, [r4, #0]
    6b6a:	3301      	adds	r3, #1
    6b6c:	b2db      	uxtb	r3, r3
    6b6e:	7023      	strb	r3, [r4, #0]
    6b70:	2b0f      	cmp	r3, #15
    6b72:	d810      	bhi.n	6b96 <EIC_Handler+0x46>
		return NULL;
    6b74:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    6b76:	2b1f      	cmp	r3, #31
    6b78:	d9f4      	bls.n	6b64 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    6b7a:	0028      	movs	r0, r5
    6b7c:	4018      	ands	r0, r3
    6b7e:	2201      	movs	r2, #1
    6b80:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    6b82:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    6b84:	4210      	tst	r0, r2
    6b86:	d0ef      	beq.n	6b68 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    6b88:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    6b8a:	009b      	lsls	r3, r3, #2
    6b8c:	599b      	ldr	r3, [r3, r6]
    6b8e:	2b00      	cmp	r3, #0
    6b90:	d0ea      	beq.n	6b68 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    6b92:	4798      	blx	r3
    6b94:	e7e8      	b.n	6b68 <EIC_Handler+0x18>
			}
		}
	}
}
    6b96:	bd70      	pop	{r4, r5, r6, pc}
    6b98:	20004d7c 	.word	0x20004d7c
    6b9c:	40001800 	.word	0x40001800
    6ba0:	20004d80 	.word	0x20004d80

00006ba4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    6ba4:	4a04      	ldr	r2, [pc, #16]	; (6bb8 <_extint_enable+0x14>)
    6ba6:	7813      	ldrb	r3, [r2, #0]
    6ba8:	2102      	movs	r1, #2
    6baa:	430b      	orrs	r3, r1
    6bac:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    6bae:	7853      	ldrb	r3, [r2, #1]
    6bb0:	b25b      	sxtb	r3, r3
    6bb2:	2b00      	cmp	r3, #0
    6bb4:	dbfb      	blt.n	6bae <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    6bb6:	4770      	bx	lr
    6bb8:	40001800 	.word	0x40001800

00006bbc <_system_extint_init>:
{
    6bbc:	b500      	push	{lr}
    6bbe:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    6bc0:	4a12      	ldr	r2, [pc, #72]	; (6c0c <_system_extint_init+0x50>)
    6bc2:	6993      	ldr	r3, [r2, #24]
    6bc4:	2140      	movs	r1, #64	; 0x40
    6bc6:	430b      	orrs	r3, r1
    6bc8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    6bca:	a901      	add	r1, sp, #4
    6bcc:	2300      	movs	r3, #0
    6bce:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    6bd0:	2005      	movs	r0, #5
    6bd2:	4b0f      	ldr	r3, [pc, #60]	; (6c10 <_system_extint_init+0x54>)
    6bd4:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    6bd6:	2005      	movs	r0, #5
    6bd8:	4b0e      	ldr	r3, [pc, #56]	; (6c14 <_system_extint_init+0x58>)
    6bda:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    6bdc:	4a0e      	ldr	r2, [pc, #56]	; (6c18 <_system_extint_init+0x5c>)
    6bde:	7813      	ldrb	r3, [r2, #0]
    6be0:	2101      	movs	r1, #1
    6be2:	430b      	orrs	r3, r1
    6be4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    6be6:	7853      	ldrb	r3, [r2, #1]
    6be8:	b25b      	sxtb	r3, r3
    6bea:	2b00      	cmp	r3, #0
    6bec:	dbfb      	blt.n	6be6 <_system_extint_init+0x2a>
    6bee:	4b0b      	ldr	r3, [pc, #44]	; (6c1c <_system_extint_init+0x60>)
    6bf0:	0019      	movs	r1, r3
    6bf2:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    6bf4:	2200      	movs	r2, #0
    6bf6:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    6bf8:	4299      	cmp	r1, r3
    6bfa:	d1fc      	bne.n	6bf6 <_system_extint_init+0x3a>
    6bfc:	2210      	movs	r2, #16
    6bfe:	4b08      	ldr	r3, [pc, #32]	; (6c20 <_system_extint_init+0x64>)
    6c00:	601a      	str	r2, [r3, #0]
	_extint_enable();
    6c02:	4b08      	ldr	r3, [pc, #32]	; (6c24 <_system_extint_init+0x68>)
    6c04:	4798      	blx	r3
}
    6c06:	b003      	add	sp, #12
    6c08:	bd00      	pop	{pc}
    6c0a:	46c0      	nop			; (mov r8, r8)
    6c0c:	40000400 	.word	0x40000400
    6c10:	000080c5 	.word	0x000080c5
    6c14:	00008039 	.word	0x00008039
    6c18:	40001800 	.word	0x40001800
    6c1c:	20004d80 	.word	0x20004d80
    6c20:	e000e100 	.word	0xe000e100
    6c24:	00006ba5 	.word	0x00006ba5

00006c28 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    6c28:	b500      	push	{lr}
    6c2a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6c2c:	ab01      	add	r3, sp, #4
    6c2e:	2280      	movs	r2, #128	; 0x80
    6c30:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    6c32:	780a      	ldrb	r2, [r1, #0]
    6c34:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    6c36:	784a      	ldrb	r2, [r1, #1]
    6c38:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    6c3a:	788a      	ldrb	r2, [r1, #2]
    6c3c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    6c3e:	0019      	movs	r1, r3
    6c40:	4b01      	ldr	r3, [pc, #4]	; (6c48 <port_pin_set_config+0x20>)
    6c42:	4798      	blx	r3
}
    6c44:	b003      	add	sp, #12
    6c46:	bd00      	pop	{pc}
    6c48:	000081ed 	.word	0x000081ed

00006c4c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    6c4c:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    6c4e:	4b0f      	ldr	r3, [pc, #60]	; (6c8c <RTC_Handler+0x40>)
    6c50:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    6c52:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    6c54:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    6c56:	8a13      	ldrh	r3, [r2, #16]
    6c58:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    6c5a:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    6c5c:	79e3      	ldrb	r3, [r4, #7]
    6c5e:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    6c60:	b258      	sxtb	r0, r3
    6c62:	2800      	cmp	r0, #0
    6c64:	db06      	blt.n	6c74 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    6c66:	07db      	lsls	r3, r3, #31
    6c68:	d503      	bpl.n	6c72 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    6c6a:	07cb      	lsls	r3, r1, #31
    6c6c:	d40a      	bmi.n	6c84 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    6c6e:	2301      	movs	r3, #1
    6c70:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    6c72:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    6c74:	078b      	lsls	r3, r1, #30
    6c76:	d402      	bmi.n	6c7e <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    6c78:	2380      	movs	r3, #128	; 0x80
    6c7a:	7223      	strb	r3, [r4, #8]
    6c7c:	e7f9      	b.n	6c72 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    6c7e:	68d3      	ldr	r3, [r2, #12]
    6c80:	4798      	blx	r3
    6c82:	e7f9      	b.n	6c78 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    6c84:	6893      	ldr	r3, [r2, #8]
    6c86:	4798      	blx	r3
    6c88:	e7f1      	b.n	6c6e <RTC_Handler+0x22>
    6c8a:	46c0      	nop			; (mov r8, r8)
    6c8c:	20004dc0 	.word	0x20004dc0

00006c90 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    6c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c92:	46de      	mov	lr, fp
    6c94:	4657      	mov	r7, sl
    6c96:	464e      	mov	r6, r9
    6c98:	4645      	mov	r5, r8
    6c9a:	b5e0      	push	{r5, r6, r7, lr}
    6c9c:	b087      	sub	sp, #28
    6c9e:	4680      	mov	r8, r0
    6ca0:	9104      	str	r1, [sp, #16]
    6ca2:	0016      	movs	r6, r2
    6ca4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    6ca6:	2200      	movs	r2, #0
    6ca8:	2300      	movs	r3, #0
    6caa:	2100      	movs	r1, #0
    6cac:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    6cae:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    6cb0:	2001      	movs	r0, #1
    6cb2:	0021      	movs	r1, r4
    6cb4:	9600      	str	r6, [sp, #0]
    6cb6:	9701      	str	r7, [sp, #4]
    6cb8:	465c      	mov	r4, fp
    6cba:	9403      	str	r4, [sp, #12]
    6cbc:	4644      	mov	r4, r8
    6cbe:	9405      	str	r4, [sp, #20]
    6cc0:	e013      	b.n	6cea <long_division+0x5a>
    6cc2:	2420      	movs	r4, #32
    6cc4:	1a64      	subs	r4, r4, r1
    6cc6:	0005      	movs	r5, r0
    6cc8:	40e5      	lsrs	r5, r4
    6cca:	46a8      	mov	r8, r5
    6ccc:	e014      	b.n	6cf8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    6cce:	9c00      	ldr	r4, [sp, #0]
    6cd0:	9d01      	ldr	r5, [sp, #4]
    6cd2:	1b12      	subs	r2, r2, r4
    6cd4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    6cd6:	465c      	mov	r4, fp
    6cd8:	464d      	mov	r5, r9
    6cda:	432c      	orrs	r4, r5
    6cdc:	46a3      	mov	fp, r4
    6cde:	9c03      	ldr	r4, [sp, #12]
    6ce0:	4645      	mov	r5, r8
    6ce2:	432c      	orrs	r4, r5
    6ce4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    6ce6:	3901      	subs	r1, #1
    6ce8:	d325      	bcc.n	6d36 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    6cea:	2420      	movs	r4, #32
    6cec:	4264      	negs	r4, r4
    6cee:	190c      	adds	r4, r1, r4
    6cf0:	d4e7      	bmi.n	6cc2 <long_division+0x32>
    6cf2:	0005      	movs	r5, r0
    6cf4:	40a5      	lsls	r5, r4
    6cf6:	46a8      	mov	r8, r5
    6cf8:	0004      	movs	r4, r0
    6cfa:	408c      	lsls	r4, r1
    6cfc:	46a1      	mov	r9, r4
		r = r << 1;
    6cfe:	1892      	adds	r2, r2, r2
    6d00:	415b      	adcs	r3, r3
    6d02:	0014      	movs	r4, r2
    6d04:	001d      	movs	r5, r3
		if (n & bit_shift) {
    6d06:	9e05      	ldr	r6, [sp, #20]
    6d08:	464f      	mov	r7, r9
    6d0a:	403e      	ands	r6, r7
    6d0c:	46b4      	mov	ip, r6
    6d0e:	9e04      	ldr	r6, [sp, #16]
    6d10:	4647      	mov	r7, r8
    6d12:	403e      	ands	r6, r7
    6d14:	46b2      	mov	sl, r6
    6d16:	4666      	mov	r6, ip
    6d18:	4657      	mov	r7, sl
    6d1a:	433e      	orrs	r6, r7
    6d1c:	d003      	beq.n	6d26 <long_division+0x96>
			r |= 0x01;
    6d1e:	0006      	movs	r6, r0
    6d20:	4326      	orrs	r6, r4
    6d22:	0032      	movs	r2, r6
    6d24:	002b      	movs	r3, r5
		if (r >= d) {
    6d26:	9c00      	ldr	r4, [sp, #0]
    6d28:	9d01      	ldr	r5, [sp, #4]
    6d2a:	429d      	cmp	r5, r3
    6d2c:	d8db      	bhi.n	6ce6 <long_division+0x56>
    6d2e:	d1ce      	bne.n	6cce <long_division+0x3e>
    6d30:	4294      	cmp	r4, r2
    6d32:	d8d8      	bhi.n	6ce6 <long_division+0x56>
    6d34:	e7cb      	b.n	6cce <long_division+0x3e>
    6d36:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    6d38:	4658      	mov	r0, fp
    6d3a:	0019      	movs	r1, r3
    6d3c:	b007      	add	sp, #28
    6d3e:	bc3c      	pop	{r2, r3, r4, r5}
    6d40:	4690      	mov	r8, r2
    6d42:	4699      	mov	r9, r3
    6d44:	46a2      	mov	sl, r4
    6d46:	46ab      	mov	fp, r5
    6d48:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006d4a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    6d4a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    6d4c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6d4e:	2340      	movs	r3, #64	; 0x40
    6d50:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    6d52:	4281      	cmp	r1, r0
    6d54:	d202      	bcs.n	6d5c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    6d56:	0018      	movs	r0, r3
    6d58:	bd10      	pop	{r4, pc}
		baud_calculated++;
    6d5a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    6d5c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    6d5e:	1c63      	adds	r3, r4, #1
    6d60:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    6d62:	4288      	cmp	r0, r1
    6d64:	d9f9      	bls.n	6d5a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6d66:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    6d68:	2cff      	cmp	r4, #255	; 0xff
    6d6a:	d8f4      	bhi.n	6d56 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    6d6c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    6d6e:	2300      	movs	r3, #0
    6d70:	e7f1      	b.n	6d56 <_sercom_get_sync_baud_val+0xc>
	...

00006d74 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    6d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d76:	b083      	sub	sp, #12
    6d78:	000f      	movs	r7, r1
    6d7a:	0016      	movs	r6, r2
    6d7c:	aa08      	add	r2, sp, #32
    6d7e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    6d80:	0004      	movs	r4, r0
    6d82:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6d84:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    6d86:	42bc      	cmp	r4, r7
    6d88:	d902      	bls.n	6d90 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    6d8a:	0010      	movs	r0, r2
    6d8c:	b003      	add	sp, #12
    6d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    6d90:	2b00      	cmp	r3, #0
    6d92:	d114      	bne.n	6dbe <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    6d94:	0002      	movs	r2, r0
    6d96:	0008      	movs	r0, r1
    6d98:	2100      	movs	r1, #0
    6d9a:	4c19      	ldr	r4, [pc, #100]	; (6e00 <_sercom_get_async_baud_val+0x8c>)
    6d9c:	47a0      	blx	r4
    6d9e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    6da0:	003a      	movs	r2, r7
    6da2:	2300      	movs	r3, #0
    6da4:	2000      	movs	r0, #0
    6da6:	4c17      	ldr	r4, [pc, #92]	; (6e04 <_sercom_get_async_baud_val+0x90>)
    6da8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    6daa:	2200      	movs	r2, #0
    6dac:	2301      	movs	r3, #1
    6dae:	1a12      	subs	r2, r2, r0
    6db0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    6db2:	0c12      	lsrs	r2, r2, #16
    6db4:	041b      	lsls	r3, r3, #16
    6db6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    6db8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    6dba:	2200      	movs	r2, #0
    6dbc:	e7e5      	b.n	6d8a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    6dbe:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    6dc0:	2b01      	cmp	r3, #1
    6dc2:	d1f9      	bne.n	6db8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    6dc4:	000a      	movs	r2, r1
    6dc6:	2300      	movs	r3, #0
    6dc8:	2100      	movs	r1, #0
    6dca:	4c0d      	ldr	r4, [pc, #52]	; (6e00 <_sercom_get_async_baud_val+0x8c>)
    6dcc:	47a0      	blx	r4
    6dce:	0002      	movs	r2, r0
    6dd0:	000b      	movs	r3, r1
    6dd2:	9200      	str	r2, [sp, #0]
    6dd4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    6dd6:	0038      	movs	r0, r7
    6dd8:	2100      	movs	r1, #0
    6dda:	4c0a      	ldr	r4, [pc, #40]	; (6e04 <_sercom_get_async_baud_val+0x90>)
    6ddc:	47a0      	blx	r4
    6dde:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    6de0:	2380      	movs	r3, #128	; 0x80
    6de2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6de4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    6de6:	4298      	cmp	r0, r3
    6de8:	d8cf      	bhi.n	6d8a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    6dea:	0f79      	lsrs	r1, r7, #29
    6dec:	00f8      	lsls	r0, r7, #3
    6dee:	9a00      	ldr	r2, [sp, #0]
    6df0:	9b01      	ldr	r3, [sp, #4]
    6df2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    6df4:	00ea      	lsls	r2, r5, #3
    6df6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    6df8:	b2d2      	uxtb	r2, r2
    6dfa:	0352      	lsls	r2, r2, #13
    6dfc:	432a      	orrs	r2, r5
    6dfe:	e7db      	b.n	6db8 <_sercom_get_async_baud_val+0x44>
    6e00:	0000acf1 	.word	0x0000acf1
    6e04:	00006c91 	.word	0x00006c91

00006e08 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    6e08:	b510      	push	{r4, lr}
    6e0a:	b082      	sub	sp, #8
    6e0c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    6e0e:	4b0e      	ldr	r3, [pc, #56]	; (6e48 <sercom_set_gclk_generator+0x40>)
    6e10:	781b      	ldrb	r3, [r3, #0]
    6e12:	2b00      	cmp	r3, #0
    6e14:	d007      	beq.n	6e26 <sercom_set_gclk_generator+0x1e>
    6e16:	2900      	cmp	r1, #0
    6e18:	d105      	bne.n	6e26 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    6e1a:	4b0b      	ldr	r3, [pc, #44]	; (6e48 <sercom_set_gclk_generator+0x40>)
    6e1c:	785b      	ldrb	r3, [r3, #1]
    6e1e:	4283      	cmp	r3, r0
    6e20:	d010      	beq.n	6e44 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    6e22:	201d      	movs	r0, #29
    6e24:	e00c      	b.n	6e40 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    6e26:	a901      	add	r1, sp, #4
    6e28:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    6e2a:	2013      	movs	r0, #19
    6e2c:	4b07      	ldr	r3, [pc, #28]	; (6e4c <sercom_set_gclk_generator+0x44>)
    6e2e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    6e30:	2013      	movs	r0, #19
    6e32:	4b07      	ldr	r3, [pc, #28]	; (6e50 <sercom_set_gclk_generator+0x48>)
    6e34:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    6e36:	4b04      	ldr	r3, [pc, #16]	; (6e48 <sercom_set_gclk_generator+0x40>)
    6e38:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    6e3a:	2201      	movs	r2, #1
    6e3c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    6e3e:	2000      	movs	r0, #0
}
    6e40:	b002      	add	sp, #8
    6e42:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    6e44:	2000      	movs	r0, #0
    6e46:	e7fb      	b.n	6e40 <sercom_set_gclk_generator+0x38>
    6e48:	20003810 	.word	0x20003810
    6e4c:	000080c5 	.word	0x000080c5
    6e50:	00008039 	.word	0x00008039

00006e54 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    6e54:	4b40      	ldr	r3, [pc, #256]	; (6f58 <_sercom_get_default_pad+0x104>)
    6e56:	4298      	cmp	r0, r3
    6e58:	d031      	beq.n	6ebe <_sercom_get_default_pad+0x6a>
    6e5a:	d90a      	bls.n	6e72 <_sercom_get_default_pad+0x1e>
    6e5c:	4b3f      	ldr	r3, [pc, #252]	; (6f5c <_sercom_get_default_pad+0x108>)
    6e5e:	4298      	cmp	r0, r3
    6e60:	d04d      	beq.n	6efe <_sercom_get_default_pad+0xaa>
    6e62:	4b3f      	ldr	r3, [pc, #252]	; (6f60 <_sercom_get_default_pad+0x10c>)
    6e64:	4298      	cmp	r0, r3
    6e66:	d05a      	beq.n	6f1e <_sercom_get_default_pad+0xca>
    6e68:	4b3e      	ldr	r3, [pc, #248]	; (6f64 <_sercom_get_default_pad+0x110>)
    6e6a:	4298      	cmp	r0, r3
    6e6c:	d037      	beq.n	6ede <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    6e6e:	2000      	movs	r0, #0
}
    6e70:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    6e72:	4b3d      	ldr	r3, [pc, #244]	; (6f68 <_sercom_get_default_pad+0x114>)
    6e74:	4298      	cmp	r0, r3
    6e76:	d00c      	beq.n	6e92 <_sercom_get_default_pad+0x3e>
    6e78:	4b3c      	ldr	r3, [pc, #240]	; (6f6c <_sercom_get_default_pad+0x118>)
    6e7a:	4298      	cmp	r0, r3
    6e7c:	d1f7      	bne.n	6e6e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6e7e:	2901      	cmp	r1, #1
    6e80:	d017      	beq.n	6eb2 <_sercom_get_default_pad+0x5e>
    6e82:	2900      	cmp	r1, #0
    6e84:	d05d      	beq.n	6f42 <_sercom_get_default_pad+0xee>
    6e86:	2902      	cmp	r1, #2
    6e88:	d015      	beq.n	6eb6 <_sercom_get_default_pad+0x62>
    6e8a:	2903      	cmp	r1, #3
    6e8c:	d015      	beq.n	6eba <_sercom_get_default_pad+0x66>
	return 0;
    6e8e:	2000      	movs	r0, #0
    6e90:	e7ee      	b.n	6e70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6e92:	2901      	cmp	r1, #1
    6e94:	d007      	beq.n	6ea6 <_sercom_get_default_pad+0x52>
    6e96:	2900      	cmp	r1, #0
    6e98:	d051      	beq.n	6f3e <_sercom_get_default_pad+0xea>
    6e9a:	2902      	cmp	r1, #2
    6e9c:	d005      	beq.n	6eaa <_sercom_get_default_pad+0x56>
    6e9e:	2903      	cmp	r1, #3
    6ea0:	d005      	beq.n	6eae <_sercom_get_default_pad+0x5a>
	return 0;
    6ea2:	2000      	movs	r0, #0
    6ea4:	e7e4      	b.n	6e70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6ea6:	4832      	ldr	r0, [pc, #200]	; (6f70 <_sercom_get_default_pad+0x11c>)
    6ea8:	e7e2      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6eaa:	4832      	ldr	r0, [pc, #200]	; (6f74 <_sercom_get_default_pad+0x120>)
    6eac:	e7e0      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6eae:	4832      	ldr	r0, [pc, #200]	; (6f78 <_sercom_get_default_pad+0x124>)
    6eb0:	e7de      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6eb2:	4832      	ldr	r0, [pc, #200]	; (6f7c <_sercom_get_default_pad+0x128>)
    6eb4:	e7dc      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6eb6:	4832      	ldr	r0, [pc, #200]	; (6f80 <_sercom_get_default_pad+0x12c>)
    6eb8:	e7da      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6eba:	4832      	ldr	r0, [pc, #200]	; (6f84 <_sercom_get_default_pad+0x130>)
    6ebc:	e7d8      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6ebe:	2901      	cmp	r1, #1
    6ec0:	d007      	beq.n	6ed2 <_sercom_get_default_pad+0x7e>
    6ec2:	2900      	cmp	r1, #0
    6ec4:	d03f      	beq.n	6f46 <_sercom_get_default_pad+0xf2>
    6ec6:	2902      	cmp	r1, #2
    6ec8:	d005      	beq.n	6ed6 <_sercom_get_default_pad+0x82>
    6eca:	2903      	cmp	r1, #3
    6ecc:	d005      	beq.n	6eda <_sercom_get_default_pad+0x86>
	return 0;
    6ece:	2000      	movs	r0, #0
    6ed0:	e7ce      	b.n	6e70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6ed2:	482d      	ldr	r0, [pc, #180]	; (6f88 <_sercom_get_default_pad+0x134>)
    6ed4:	e7cc      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6ed6:	482d      	ldr	r0, [pc, #180]	; (6f8c <_sercom_get_default_pad+0x138>)
    6ed8:	e7ca      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6eda:	482d      	ldr	r0, [pc, #180]	; (6f90 <_sercom_get_default_pad+0x13c>)
    6edc:	e7c8      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6ede:	2901      	cmp	r1, #1
    6ee0:	d007      	beq.n	6ef2 <_sercom_get_default_pad+0x9e>
    6ee2:	2900      	cmp	r1, #0
    6ee4:	d031      	beq.n	6f4a <_sercom_get_default_pad+0xf6>
    6ee6:	2902      	cmp	r1, #2
    6ee8:	d005      	beq.n	6ef6 <_sercom_get_default_pad+0xa2>
    6eea:	2903      	cmp	r1, #3
    6eec:	d005      	beq.n	6efa <_sercom_get_default_pad+0xa6>
	return 0;
    6eee:	2000      	movs	r0, #0
    6ef0:	e7be      	b.n	6e70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6ef2:	4828      	ldr	r0, [pc, #160]	; (6f94 <_sercom_get_default_pad+0x140>)
    6ef4:	e7bc      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6ef6:	4828      	ldr	r0, [pc, #160]	; (6f98 <_sercom_get_default_pad+0x144>)
    6ef8:	e7ba      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6efa:	4828      	ldr	r0, [pc, #160]	; (6f9c <_sercom_get_default_pad+0x148>)
    6efc:	e7b8      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6efe:	2901      	cmp	r1, #1
    6f00:	d007      	beq.n	6f12 <_sercom_get_default_pad+0xbe>
    6f02:	2900      	cmp	r1, #0
    6f04:	d023      	beq.n	6f4e <_sercom_get_default_pad+0xfa>
    6f06:	2902      	cmp	r1, #2
    6f08:	d005      	beq.n	6f16 <_sercom_get_default_pad+0xc2>
    6f0a:	2903      	cmp	r1, #3
    6f0c:	d005      	beq.n	6f1a <_sercom_get_default_pad+0xc6>
	return 0;
    6f0e:	2000      	movs	r0, #0
    6f10:	e7ae      	b.n	6e70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6f12:	4823      	ldr	r0, [pc, #140]	; (6fa0 <_sercom_get_default_pad+0x14c>)
    6f14:	e7ac      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6f16:	4823      	ldr	r0, [pc, #140]	; (6fa4 <_sercom_get_default_pad+0x150>)
    6f18:	e7aa      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6f1a:	4823      	ldr	r0, [pc, #140]	; (6fa8 <_sercom_get_default_pad+0x154>)
    6f1c:	e7a8      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6f1e:	2901      	cmp	r1, #1
    6f20:	d007      	beq.n	6f32 <_sercom_get_default_pad+0xde>
    6f22:	2900      	cmp	r1, #0
    6f24:	d015      	beq.n	6f52 <_sercom_get_default_pad+0xfe>
    6f26:	2902      	cmp	r1, #2
    6f28:	d005      	beq.n	6f36 <_sercom_get_default_pad+0xe2>
    6f2a:	2903      	cmp	r1, #3
    6f2c:	d005      	beq.n	6f3a <_sercom_get_default_pad+0xe6>
	return 0;
    6f2e:	2000      	movs	r0, #0
    6f30:	e79e      	b.n	6e70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6f32:	481e      	ldr	r0, [pc, #120]	; (6fac <_sercom_get_default_pad+0x158>)
    6f34:	e79c      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6f36:	481e      	ldr	r0, [pc, #120]	; (6fb0 <_sercom_get_default_pad+0x15c>)
    6f38:	e79a      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6f3a:	481e      	ldr	r0, [pc, #120]	; (6fb4 <_sercom_get_default_pad+0x160>)
    6f3c:	e798      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6f3e:	481e      	ldr	r0, [pc, #120]	; (6fb8 <_sercom_get_default_pad+0x164>)
    6f40:	e796      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6f42:	2003      	movs	r0, #3
    6f44:	e794      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6f46:	481d      	ldr	r0, [pc, #116]	; (6fbc <_sercom_get_default_pad+0x168>)
    6f48:	e792      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6f4a:	481d      	ldr	r0, [pc, #116]	; (6fc0 <_sercom_get_default_pad+0x16c>)
    6f4c:	e790      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6f4e:	481d      	ldr	r0, [pc, #116]	; (6fc4 <_sercom_get_default_pad+0x170>)
    6f50:	e78e      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6f52:	481d      	ldr	r0, [pc, #116]	; (6fc8 <_sercom_get_default_pad+0x174>)
    6f54:	e78c      	b.n	6e70 <_sercom_get_default_pad+0x1c>
    6f56:	46c0      	nop			; (mov r8, r8)
    6f58:	42001000 	.word	0x42001000
    6f5c:	42001800 	.word	0x42001800
    6f60:	42001c00 	.word	0x42001c00
    6f64:	42001400 	.word	0x42001400
    6f68:	42000800 	.word	0x42000800
    6f6c:	42000c00 	.word	0x42000c00
    6f70:	00050003 	.word	0x00050003
    6f74:	00060003 	.word	0x00060003
    6f78:	00070003 	.word	0x00070003
    6f7c:	00010003 	.word	0x00010003
    6f80:	001e0003 	.word	0x001e0003
    6f84:	001f0003 	.word	0x001f0003
    6f88:	00090003 	.word	0x00090003
    6f8c:	000a0003 	.word	0x000a0003
    6f90:	000b0003 	.word	0x000b0003
    6f94:	00110003 	.word	0x00110003
    6f98:	00120003 	.word	0x00120003
    6f9c:	00130003 	.word	0x00130003
    6fa0:	000d0003 	.word	0x000d0003
    6fa4:	000e0003 	.word	0x000e0003
    6fa8:	000f0003 	.word	0x000f0003
    6fac:	00170003 	.word	0x00170003
    6fb0:	00180003 	.word	0x00180003
    6fb4:	00190003 	.word	0x00190003
    6fb8:	00040003 	.word	0x00040003
    6fbc:	00080003 	.word	0x00080003
    6fc0:	00100003 	.word	0x00100003
    6fc4:	000c0003 	.word	0x000c0003
    6fc8:	00160003 	.word	0x00160003

00006fcc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    6fcc:	b530      	push	{r4, r5, lr}
    6fce:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    6fd0:	4b0b      	ldr	r3, [pc, #44]	; (7000 <_sercom_get_sercom_inst_index+0x34>)
    6fd2:	466a      	mov	r2, sp
    6fd4:	cb32      	ldmia	r3!, {r1, r4, r5}
    6fd6:	c232      	stmia	r2!, {r1, r4, r5}
    6fd8:	cb32      	ldmia	r3!, {r1, r4, r5}
    6fda:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    6fdc:	9b00      	ldr	r3, [sp, #0]
    6fde:	4283      	cmp	r3, r0
    6fe0:	d00b      	beq.n	6ffa <_sercom_get_sercom_inst_index+0x2e>
    6fe2:	2301      	movs	r3, #1
    6fe4:	009a      	lsls	r2, r3, #2
    6fe6:	4669      	mov	r1, sp
    6fe8:	5852      	ldr	r2, [r2, r1]
    6fea:	4282      	cmp	r2, r0
    6fec:	d006      	beq.n	6ffc <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6fee:	3301      	adds	r3, #1
    6ff0:	2b06      	cmp	r3, #6
    6ff2:	d1f7      	bne.n	6fe4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    6ff4:	2000      	movs	r0, #0
}
    6ff6:	b007      	add	sp, #28
    6ff8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6ffa:	2300      	movs	r3, #0
			return i;
    6ffc:	b2d8      	uxtb	r0, r3
    6ffe:	e7fa      	b.n	6ff6 <_sercom_get_sercom_inst_index+0x2a>
    7000:	0000e768 	.word	0x0000e768

00007004 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    7004:	4770      	bx	lr
	...

00007008 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    7008:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    700a:	4b0a      	ldr	r3, [pc, #40]	; (7034 <_sercom_set_handler+0x2c>)
    700c:	781b      	ldrb	r3, [r3, #0]
    700e:	2b00      	cmp	r3, #0
    7010:	d10c      	bne.n	702c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    7012:	4f09      	ldr	r7, [pc, #36]	; (7038 <_sercom_set_handler+0x30>)
    7014:	4e09      	ldr	r6, [pc, #36]	; (703c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    7016:	4d0a      	ldr	r5, [pc, #40]	; (7040 <_sercom_set_handler+0x38>)
    7018:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    701a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    701c:	195a      	adds	r2, r3, r5
    701e:	6014      	str	r4, [r2, #0]
    7020:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7022:	2b18      	cmp	r3, #24
    7024:	d1f9      	bne.n	701a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    7026:	2201      	movs	r2, #1
    7028:	4b02      	ldr	r3, [pc, #8]	; (7034 <_sercom_set_handler+0x2c>)
    702a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    702c:	0080      	lsls	r0, r0, #2
    702e:	4b02      	ldr	r3, [pc, #8]	; (7038 <_sercom_set_handler+0x30>)
    7030:	50c1      	str	r1, [r0, r3]
}
    7032:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7034:	20003812 	.word	0x20003812
    7038:	20003814 	.word	0x20003814
    703c:	00007005 	.word	0x00007005
    7040:	20004dc4 	.word	0x20004dc4

00007044 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    7044:	b500      	push	{lr}
    7046:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    7048:	2309      	movs	r3, #9
    704a:	466a      	mov	r2, sp
    704c:	7013      	strb	r3, [r2, #0]
    704e:	3301      	adds	r3, #1
    7050:	7053      	strb	r3, [r2, #1]
    7052:	3301      	adds	r3, #1
    7054:	7093      	strb	r3, [r2, #2]
    7056:	3301      	adds	r3, #1
    7058:	70d3      	strb	r3, [r2, #3]
    705a:	3301      	adds	r3, #1
    705c:	7113      	strb	r3, [r2, #4]
    705e:	3301      	adds	r3, #1
    7060:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    7062:	4b03      	ldr	r3, [pc, #12]	; (7070 <_sercom_get_interrupt_vector+0x2c>)
    7064:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    7066:	466b      	mov	r3, sp
    7068:	5618      	ldrsb	r0, [r3, r0]
}
    706a:	b003      	add	sp, #12
    706c:	bd00      	pop	{pc}
    706e:	46c0      	nop			; (mov r8, r8)
    7070:	00006fcd 	.word	0x00006fcd

00007074 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    7074:	b510      	push	{r4, lr}
    7076:	4b02      	ldr	r3, [pc, #8]	; (7080 <SERCOM0_Handler+0xc>)
    7078:	681b      	ldr	r3, [r3, #0]
    707a:	2000      	movs	r0, #0
    707c:	4798      	blx	r3
    707e:	bd10      	pop	{r4, pc}
    7080:	20003814 	.word	0x20003814

00007084 <SERCOM1_Handler>:
    7084:	b510      	push	{r4, lr}
    7086:	4b02      	ldr	r3, [pc, #8]	; (7090 <SERCOM1_Handler+0xc>)
    7088:	685b      	ldr	r3, [r3, #4]
    708a:	2001      	movs	r0, #1
    708c:	4798      	blx	r3
    708e:	bd10      	pop	{r4, pc}
    7090:	20003814 	.word	0x20003814

00007094 <SERCOM2_Handler>:
    7094:	b510      	push	{r4, lr}
    7096:	4b02      	ldr	r3, [pc, #8]	; (70a0 <SERCOM2_Handler+0xc>)
    7098:	689b      	ldr	r3, [r3, #8]
    709a:	2002      	movs	r0, #2
    709c:	4798      	blx	r3
    709e:	bd10      	pop	{r4, pc}
    70a0:	20003814 	.word	0x20003814

000070a4 <SERCOM3_Handler>:
    70a4:	b510      	push	{r4, lr}
    70a6:	4b02      	ldr	r3, [pc, #8]	; (70b0 <SERCOM3_Handler+0xc>)
    70a8:	68db      	ldr	r3, [r3, #12]
    70aa:	2003      	movs	r0, #3
    70ac:	4798      	blx	r3
    70ae:	bd10      	pop	{r4, pc}
    70b0:	20003814 	.word	0x20003814

000070b4 <SERCOM4_Handler>:
    70b4:	b510      	push	{r4, lr}
    70b6:	4b02      	ldr	r3, [pc, #8]	; (70c0 <SERCOM4_Handler+0xc>)
    70b8:	691b      	ldr	r3, [r3, #16]
    70ba:	2004      	movs	r0, #4
    70bc:	4798      	blx	r3
    70be:	bd10      	pop	{r4, pc}
    70c0:	20003814 	.word	0x20003814

000070c4 <SERCOM5_Handler>:
    70c4:	b510      	push	{r4, lr}
    70c6:	4b02      	ldr	r3, [pc, #8]	; (70d0 <SERCOM5_Handler+0xc>)
    70c8:	695b      	ldr	r3, [r3, #20]
    70ca:	2005      	movs	r0, #5
    70cc:	4798      	blx	r3
    70ce:	bd10      	pop	{r4, pc}
    70d0:	20003814 	.word	0x20003814

000070d4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    70d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    70d6:	46d6      	mov	lr, sl
    70d8:	464f      	mov	r7, r9
    70da:	b580      	push	{r7, lr}
    70dc:	b08b      	sub	sp, #44	; 0x2c
    70de:	4681      	mov	r9, r0
    70e0:	000f      	movs	r7, r1
    70e2:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    70e4:	0003      	movs	r3, r0
    70e6:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    70e8:	680b      	ldr	r3, [r1, #0]
    70ea:	079b      	lsls	r3, r3, #30
    70ec:	d409      	bmi.n	7102 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    70ee:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    70f0:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    70f2:	07db      	lsls	r3, r3, #31
    70f4:	d400      	bmi.n	70f8 <spi_init+0x24>
    70f6:	e098      	b.n	722a <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    70f8:	b00b      	add	sp, #44	; 0x2c
    70fa:	bc0c      	pop	{r2, r3}
    70fc:	4691      	mov	r9, r2
    70fe:	469a      	mov	sl, r3
    7100:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    7102:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7104:	9305      	str	r3, [sp, #20]
    7106:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7108:	9306      	str	r3, [sp, #24]
    710a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    710c:	9307      	str	r3, [sp, #28]
    710e:	6b53      	ldr	r3, [r2, #52]	; 0x34
    7110:	9308      	str	r3, [sp, #32]
    7112:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7114:	ab05      	add	r3, sp, #20
    7116:	9301      	str	r3, [sp, #4]
    7118:	e00a      	b.n	7130 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    711a:	0038      	movs	r0, r7
    711c:	4b93      	ldr	r3, [pc, #588]	; (736c <spi_init+0x298>)
    711e:	4798      	blx	r3
    7120:	e00c      	b.n	713c <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    7122:	230f      	movs	r3, #15
    7124:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    7126:	4281      	cmp	r1, r0
    7128:	d12d      	bne.n	7186 <spi_init+0xb2>
    712a:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    712c:	2e04      	cmp	r6, #4
    712e:	d02f      	beq.n	7190 <spi_init+0xbc>
    7130:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7132:	00b3      	lsls	r3, r6, #2
    7134:	9a01      	ldr	r2, [sp, #4]
    7136:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    7138:	2800      	cmp	r0, #0
    713a:	d0ee      	beq.n	711a <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    713c:	1c43      	adds	r3, r0, #1
    713e:	d0f4      	beq.n	712a <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    7140:	0401      	lsls	r1, r0, #16
    7142:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    7144:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    7146:	b2c3      	uxtb	r3, r0
    7148:	469c      	mov	ip, r3
		return NULL;
    714a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    714c:	0602      	lsls	r2, r0, #24
    714e:	d405      	bmi.n	715c <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    7150:	4663      	mov	r3, ip
    7152:	095b      	lsrs	r3, r3, #5
    7154:	01db      	lsls	r3, r3, #7
    7156:	4a86      	ldr	r2, [pc, #536]	; (7370 <spi_init+0x29c>)
    7158:	4692      	mov	sl, r2
    715a:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    715c:	221f      	movs	r2, #31
    715e:	4660      	mov	r0, ip
    7160:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    7162:	1898      	adds	r0, r3, r2
    7164:	3040      	adds	r0, #64	; 0x40
    7166:	7800      	ldrb	r0, [r0, #0]
    7168:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    716a:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    716c:	4655      	mov	r5, sl
    716e:	07ed      	lsls	r5, r5, #31
    7170:	d5d9      	bpl.n	7126 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    7172:	0852      	lsrs	r2, r2, #1
    7174:	189b      	adds	r3, r3, r2
    7176:	3330      	adds	r3, #48	; 0x30
    7178:	7818      	ldrb	r0, [r3, #0]
    717a:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    717c:	4663      	mov	r3, ip
    717e:	07db      	lsls	r3, r3, #31
    7180:	d5cf      	bpl.n	7122 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    7182:	0900      	lsrs	r0, r0, #4
    7184:	e7cf      	b.n	7126 <spi_init+0x52>
			module->hw = NULL;
    7186:	2300      	movs	r3, #0
    7188:	464a      	mov	r2, r9
    718a:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    718c:	201c      	movs	r0, #28
    718e:	e7b3      	b.n	70f8 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    7190:	2013      	movs	r0, #19
    7192:	4b78      	ldr	r3, [pc, #480]	; (7374 <spi_init+0x2a0>)
    7194:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    7196:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    7198:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    719a:	2a01      	cmp	r2, #1
    719c:	d027      	beq.n	71ee <spi_init+0x11a>
	ctrla |= config->mux_setting;
    719e:	6863      	ldr	r3, [r4, #4]
    71a0:	68a2      	ldr	r2, [r4, #8]
    71a2:	4313      	orrs	r3, r2
    71a4:	68e2      	ldr	r2, [r4, #12]
    71a6:	4313      	orrs	r3, r2
    71a8:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    71aa:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    71ac:	7c61      	ldrb	r1, [r4, #17]
    71ae:	2900      	cmp	r1, #0
    71b0:	d001      	beq.n	71b6 <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    71b2:	2180      	movs	r1, #128	; 0x80
    71b4:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    71b6:	7ca1      	ldrb	r1, [r4, #18]
    71b8:	2900      	cmp	r1, #0
    71ba:	d002      	beq.n	71c2 <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    71bc:	2180      	movs	r1, #128	; 0x80
    71be:	0289      	lsls	r1, r1, #10
    71c0:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    71c2:	7ce1      	ldrb	r1, [r4, #19]
    71c4:	2900      	cmp	r1, #0
    71c6:	d002      	beq.n	71ce <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    71c8:	2180      	movs	r1, #128	; 0x80
    71ca:	0089      	lsls	r1, r1, #2
    71cc:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    71ce:	7d21      	ldrb	r1, [r4, #20]
    71d0:	2900      	cmp	r1, #0
    71d2:	d002      	beq.n	71da <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    71d4:	2180      	movs	r1, #128	; 0x80
    71d6:	0189      	lsls	r1, r1, #6
    71d8:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    71da:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    71dc:	2002      	movs	r0, #2
    71de:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    71e0:	428b      	cmp	r3, r1
    71e2:	d018      	beq.n	7216 <spi_init+0x142>
	module->hw = NULL;
    71e4:	2300      	movs	r3, #0
    71e6:	464a      	mov	r2, r9
    71e8:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    71ea:	201c      	movs	r0, #28
    71ec:	e784      	b.n	70f8 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    71ee:	aa04      	add	r2, sp, #16
    71f0:	0001      	movs	r1, r0
    71f2:	69a0      	ldr	r0, [r4, #24]
    71f4:	4b60      	ldr	r3, [pc, #384]	; (7378 <spi_init+0x2a4>)
    71f6:	4798      	blx	r3
    71f8:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    71fa:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    71fc:	2b00      	cmp	r3, #0
    71fe:	d000      	beq.n	7202 <spi_init+0x12e>
    7200:	e77a      	b.n	70f8 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    7202:	7b3b      	ldrb	r3, [r7, #12]
    7204:	b2db      	uxtb	r3, r3
    7206:	aa04      	add	r2, sp, #16
    7208:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    720a:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    720c:	429a      	cmp	r2, r3
    720e:	d000      	beq.n	7212 <spi_init+0x13e>
    7210:	e772      	b.n	70f8 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    7212:	350c      	adds	r5, #12
    7214:	e7c3      	b.n	719e <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
    7216:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    7218:	4293      	cmp	r3, r2
    721a:	d1e3      	bne.n	71e4 <spi_init+0x110>
		module->mode           = config->mode;
    721c:	7823      	ldrb	r3, [r4, #0]
    721e:	464a      	mov	r2, r9
    7220:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
    7222:	7c23      	ldrb	r3, [r4, #16]
    7224:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    7226:	2000      	movs	r0, #0
    7228:	e766      	b.n	70f8 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    722a:	0008      	movs	r0, r1
    722c:	4b53      	ldr	r3, [pc, #332]	; (737c <spi_init+0x2a8>)
    722e:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    7230:	4a53      	ldr	r2, [pc, #332]	; (7380 <spi_init+0x2ac>)
    7232:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    7234:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    7236:	2301      	movs	r3, #1
    7238:	40ab      	lsls	r3, r5
    723a:	430b      	orrs	r3, r1
    723c:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    723e:	a909      	add	r1, sp, #36	; 0x24
    7240:	2624      	movs	r6, #36	; 0x24
    7242:	5da3      	ldrb	r3, [r4, r6]
    7244:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7246:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7248:	b2c5      	uxtb	r5, r0
    724a:	0028      	movs	r0, r5
    724c:	4b4d      	ldr	r3, [pc, #308]	; (7384 <spi_init+0x2b0>)
    724e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7250:	0028      	movs	r0, r5
    7252:	4b4d      	ldr	r3, [pc, #308]	; (7388 <spi_init+0x2b4>)
    7254:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7256:	5da0      	ldrb	r0, [r4, r6]
    7258:	2100      	movs	r1, #0
    725a:	4b4c      	ldr	r3, [pc, #304]	; (738c <spi_init+0x2b8>)
    725c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    725e:	7823      	ldrb	r3, [r4, #0]
    7260:	2b01      	cmp	r3, #1
    7262:	d019      	beq.n	7298 <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7264:	464b      	mov	r3, r9
    7266:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7268:	ab04      	add	r3, sp, #16
    726a:	2280      	movs	r2, #128	; 0x80
    726c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    726e:	2200      	movs	r2, #0
    7270:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7272:	2101      	movs	r1, #1
    7274:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    7276:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    7278:	7823      	ldrb	r3, [r4, #0]
    727a:	2b00      	cmp	r3, #0
    727c:	d101      	bne.n	7282 <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    727e:	ab04      	add	r3, sp, #16
    7280:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    7282:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7284:	9305      	str	r3, [sp, #20]
    7286:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7288:	9306      	str	r3, [sp, #24]
    728a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    728c:	9307      	str	r3, [sp, #28]
    728e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7290:	9308      	str	r3, [sp, #32]
    7292:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7294:	ad05      	add	r5, sp, #20
    7296:	e011      	b.n	72bc <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    7298:	683b      	ldr	r3, [r7, #0]
    729a:	220c      	movs	r2, #12
    729c:	4313      	orrs	r3, r2
    729e:	603b      	str	r3, [r7, #0]
    72a0:	e7e0      	b.n	7264 <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    72a2:	0030      	movs	r0, r6
    72a4:	4b31      	ldr	r3, [pc, #196]	; (736c <spi_init+0x298>)
    72a6:	4798      	blx	r3
    72a8:	e00d      	b.n	72c6 <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    72aa:	a904      	add	r1, sp, #16
    72ac:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    72ae:	0c00      	lsrs	r0, r0, #16
    72b0:	b2c0      	uxtb	r0, r0
    72b2:	4b37      	ldr	r3, [pc, #220]	; (7390 <spi_init+0x2bc>)
    72b4:	4798      	blx	r3
    72b6:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    72b8:	2f04      	cmp	r7, #4
    72ba:	d007      	beq.n	72cc <spi_init+0x1f8>
    72bc:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    72be:	00bb      	lsls	r3, r7, #2
    72c0:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    72c2:	2800      	cmp	r0, #0
    72c4:	d0ed      	beq.n	72a2 <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
    72c6:	1c43      	adds	r3, r0, #1
    72c8:	d1ef      	bne.n	72aa <spi_init+0x1d6>
    72ca:	e7f4      	b.n	72b6 <spi_init+0x1e2>
	module->mode             = config->mode;
    72cc:	7823      	ldrb	r3, [r4, #0]
    72ce:	464a      	mov	r2, r9
    72d0:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    72d2:	7c23      	ldrb	r3, [r4, #16]
    72d4:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    72d6:	7ca3      	ldrb	r3, [r4, #18]
    72d8:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    72da:	7d23      	ldrb	r3, [r4, #20]
    72dc:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    72de:	2200      	movs	r2, #0
    72e0:	ab02      	add	r3, sp, #8
    72e2:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    72e4:	7823      	ldrb	r3, [r4, #0]
    72e6:	2b01      	cmp	r3, #1
    72e8:	d028      	beq.n	733c <spi_init+0x268>
	ctrla |= config->transfer_mode;
    72ea:	6863      	ldr	r3, [r4, #4]
    72ec:	68a2      	ldr	r2, [r4, #8]
    72ee:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    72f0:	68e2      	ldr	r2, [r4, #12]
    72f2:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    72f4:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    72f6:	7c62      	ldrb	r2, [r4, #17]
    72f8:	2a00      	cmp	r2, #0
    72fa:	d103      	bne.n	7304 <spi_init+0x230>
    72fc:	4a25      	ldr	r2, [pc, #148]	; (7394 <spi_init+0x2c0>)
    72fe:	7892      	ldrb	r2, [r2, #2]
    7300:	0792      	lsls	r2, r2, #30
    7302:	d501      	bpl.n	7308 <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    7304:	2280      	movs	r2, #128	; 0x80
    7306:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    7308:	7ca2      	ldrb	r2, [r4, #18]
    730a:	2a00      	cmp	r2, #0
    730c:	d002      	beq.n	7314 <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    730e:	2280      	movs	r2, #128	; 0x80
    7310:	0292      	lsls	r2, r2, #10
    7312:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    7314:	7ce2      	ldrb	r2, [r4, #19]
    7316:	2a00      	cmp	r2, #0
    7318:	d002      	beq.n	7320 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    731a:	2280      	movs	r2, #128	; 0x80
    731c:	0092      	lsls	r2, r2, #2
    731e:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    7320:	7d22      	ldrb	r2, [r4, #20]
    7322:	2a00      	cmp	r2, #0
    7324:	d002      	beq.n	732c <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    7326:	2280      	movs	r2, #128	; 0x80
    7328:	0192      	lsls	r2, r2, #6
    732a:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    732c:	6832      	ldr	r2, [r6, #0]
    732e:	4313      	orrs	r3, r2
    7330:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    7332:	6873      	ldr	r3, [r6, #4]
    7334:	430b      	orrs	r3, r1
    7336:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
    7338:	2000      	movs	r0, #0
    733a:	e6dd      	b.n	70f8 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    733c:	464b      	mov	r3, r9
    733e:	6818      	ldr	r0, [r3, #0]
    7340:	4b0e      	ldr	r3, [pc, #56]	; (737c <spi_init+0x2a8>)
    7342:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7344:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    7346:	b2c0      	uxtb	r0, r0
    7348:	4b0a      	ldr	r3, [pc, #40]	; (7374 <spi_init+0x2a0>)
    734a:	4798      	blx	r3
    734c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    734e:	ab02      	add	r3, sp, #8
    7350:	1d9a      	adds	r2, r3, #6
    7352:	69a0      	ldr	r0, [r4, #24]
    7354:	4b08      	ldr	r3, [pc, #32]	; (7378 <spi_init+0x2a4>)
    7356:	4798      	blx	r3
    7358:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    735a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    735c:	2b00      	cmp	r3, #0
    735e:	d000      	beq.n	7362 <spi_init+0x28e>
    7360:	e6ca      	b.n	70f8 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    7362:	ab02      	add	r3, sp, #8
    7364:	3306      	adds	r3, #6
    7366:	781b      	ldrb	r3, [r3, #0]
    7368:	7333      	strb	r3, [r6, #12]
    736a:	e7be      	b.n	72ea <spi_init+0x216>
    736c:	00006e55 	.word	0x00006e55
    7370:	41004400 	.word	0x41004400
    7374:	000080e1 	.word	0x000080e1
    7378:	00006d4b 	.word	0x00006d4b
    737c:	00006fcd 	.word	0x00006fcd
    7380:	40000400 	.word	0x40000400
    7384:	000080c5 	.word	0x000080c5
    7388:	00008039 	.word	0x00008039
    738c:	00006e09 	.word	0x00006e09
    7390:	000081ed 	.word	0x000081ed
    7394:	41002000 	.word	0x41002000

00007398 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    7398:	b5f0      	push	{r4, r5, r6, r7, lr}
    739a:	46d6      	mov	lr, sl
    739c:	464f      	mov	r7, r9
    739e:	b580      	push	{r7, lr}
    73a0:	b083      	sub	sp, #12
    73a2:	468c      	mov	ip, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    73a4:	2617      	movs	r6, #23
	if (length == 0) {
    73a6:	2a00      	cmp	r2, #0
    73a8:	d105      	bne.n	73b6 <spi_read_buffer_wait+0x1e>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    73aa:	0030      	movs	r0, r6
    73ac:	b003      	add	sp, #12
    73ae:	bc0c      	pop	{r2, r3}
    73b0:	4691      	mov	r9, r2
    73b2:	469a      	mov	sl, r3
    73b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    73b6:	79c1      	ldrb	r1, [r0, #7]
    73b8:	2900      	cmp	r1, #0
    73ba:	d140      	bne.n	743e <spi_read_buffer_wait+0xa6>
		return STATUS_ERR_DENIED;
    73bc:	3605      	adds	r6, #5
    73be:	e7f4      	b.n	73aa <spi_read_buffer_wait+0x12>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    73c0:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    73c2:	7e21      	ldrb	r1, [r4, #24]
			while (!spi_is_ready_to_write(module)) {
    73c4:	4239      	tst	r1, r7
    73c6:	d0fc      	beq.n	73c2 <spi_read_buffer_wait+0x2a>
    73c8:	7e21      	ldrb	r1, [r4, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    73ca:	4239      	tst	r1, r7
    73cc:	d019      	beq.n	7402 <spi_read_buffer_wait+0x6a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    73ce:	4649      	mov	r1, r9
    73d0:	62a1      	str	r1, [r4, #40]	; 0x28
    73d2:	e016      	b.n	7402 <spi_read_buffer_wait+0x6a>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    73d4:	7981      	ldrb	r1, [r0, #6]
    73d6:	2901      	cmp	r1, #1
    73d8:	d023      	beq.n	7422 <spi_read_buffer_wait+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    73da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    73dc:	b2f6      	uxtb	r6, r6
		if (retval != STATUS_OK) {
    73de:	9901      	ldr	r1, [sp, #4]
    73e0:	2900      	cmp	r1, #0
    73e2:	d137      	bne.n	7454 <spi_read_buffer_wait+0xbc>
		rx_data[rx_pos++] = received_data;
    73e4:	1c69      	adds	r1, r5, #1
    73e6:	b289      	uxth	r1, r1
    73e8:	4664      	mov	r4, ip
    73ea:	5566      	strb	r6, [r4, r5]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    73ec:	7984      	ldrb	r4, [r0, #6]
    73ee:	2c01      	cmp	r4, #1
    73f0:	d01b      	beq.n	742a <spi_read_buffer_wait+0x92>
		rx_data[rx_pos++] = received_data;
    73f2:	000d      	movs	r5, r1
	while (length--) {
    73f4:	3a01      	subs	r2, #1
    73f6:	b292      	uxth	r2, r2
    73f8:	4552      	cmp	r2, sl
    73fa:	d01c      	beq.n	7436 <spi_read_buffer_wait+0x9e>
		if (module->mode == SPI_MODE_MASTER) {
    73fc:	7941      	ldrb	r1, [r0, #5]
    73fe:	2901      	cmp	r1, #1
    7400:	d0de      	beq.n	73c0 <spi_read_buffer_wait+0x28>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7402:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7404:	7e21      	ldrb	r1, [r4, #24]
		while (!spi_is_ready_to_read(module)) {
    7406:	4219      	tst	r1, r3
    7408:	d0fc      	beq.n	7404 <spi_read_buffer_wait+0x6c>
    740a:	7e21      	ldrb	r1, [r4, #24]
	if (!spi_is_ready_to_read(module)) {
    740c:	4219      	tst	r1, r3
    740e:	d014      	beq.n	743a <spi_read_buffer_wait+0xa2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7410:	8b61      	ldrh	r1, [r4, #26]
	enum status_code retval = STATUS_OK;
    7412:	2600      	movs	r6, #0
    7414:	9601      	str	r6, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7416:	4219      	tst	r1, r3
    7418:	d0dc      	beq.n	73d4 <spi_read_buffer_wait+0x3c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    741a:	8363      	strh	r3, [r4, #26]
		retval = STATUS_ERR_OVERFLOW;
    741c:	211e      	movs	r1, #30
    741e:	9101      	str	r1, [sp, #4]
    7420:	e7d8      	b.n	73d4 <spi_read_buffer_wait+0x3c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7422:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    7424:	05e4      	lsls	r4, r4, #23
    7426:	0de6      	lsrs	r6, r4, #23
    7428:	e7d9      	b.n	73de <spi_read_buffer_wait+0x46>
			rx_data[rx_pos++] = (received_data >> 8);
    742a:	3502      	adds	r5, #2
    742c:	b2ad      	uxth	r5, r5
    742e:	0a34      	lsrs	r4, r6, #8
    7430:	4666      	mov	r6, ip
    7432:	5474      	strb	r4, [r6, r1]
    7434:	e7de      	b.n	73f4 <spi_read_buffer_wait+0x5c>
    7436:	9e01      	ldr	r6, [sp, #4]
    7438:	e7b7      	b.n	73aa <spi_read_buffer_wait+0x12>
		return STATUS_ERR_IO;
    743a:	2610      	movs	r6, #16
    743c:	e7b5      	b.n	73aa <spi_read_buffer_wait+0x12>
	while (length--) {
    743e:	3a01      	subs	r2, #1
    7440:	b292      	uxth	r2, r2
    7442:	2500      	movs	r5, #0
			while (!spi_is_ready_to_write(module)) {
    7444:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7446:	05db      	lsls	r3, r3, #23
    7448:	0ddb      	lsrs	r3, r3, #23
    744a:	4699      	mov	r9, r3
		while (!spi_is_ready_to_read(module)) {
    744c:	2304      	movs	r3, #4
	while (length--) {
    744e:	4902      	ldr	r1, [pc, #8]	; (7458 <spi_read_buffer_wait+0xc0>)
    7450:	468a      	mov	sl, r1
    7452:	e7d3      	b.n	73fc <spi_read_buffer_wait+0x64>
    7454:	9e01      	ldr	r6, [sp, #4]
    7456:	e7a8      	b.n	73aa <spi_read_buffer_wait+0x12>
    7458:	0000ffff 	.word	0x0000ffff

0000745c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    745c:	b5f0      	push	{r4, r5, r6, r7, lr}
    745e:	46de      	mov	lr, fp
    7460:	4657      	mov	r7, sl
    7462:	464e      	mov	r6, r9
    7464:	4645      	mov	r5, r8
    7466:	b5e0      	push	{r5, r6, r7, lr}
    7468:	b083      	sub	sp, #12
    746a:	468a      	mov	sl, r1
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    746c:	2317      	movs	r3, #23
	if (length == 0) {
    746e:	2a00      	cmp	r2, #0
    7470:	d14b      	bne.n	750a <spi_write_buffer_wait+0xae>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    7472:	0018      	movs	r0, r3
    7474:	b003      	add	sp, #12
    7476:	bc3c      	pop	{r2, r3, r4, r5}
    7478:	4690      	mov	r8, r2
    747a:	4699      	mov	r9, r3
    747c:	46a2      	mov	sl, r4
    747e:	46ab      	mov	fp, r5
    7480:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    7482:	3702      	adds	r7, #2
    7484:	b2bf      	uxth	r7, r7
    7486:	4641      	mov	r1, r8
    7488:	4653      	mov	r3, sl
    748a:	5c59      	ldrb	r1, [r3, r1]
    748c:	0209      	lsls	r1, r1, #8
    748e:	465b      	mov	r3, fp
    7490:	430b      	orrs	r3, r1
    7492:	e018      	b.n	74c6 <spi_write_buffer_wait+0x6a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7494:	7983      	ldrb	r3, [r0, #6]
    7496:	2b01      	cmp	r3, #1
    7498:	d02a      	beq.n	74f0 <spi_write_buffer_wait+0x94>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    749a:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    749c:	3e01      	subs	r6, #1
    749e:	b2b6      	uxth	r6, r6
    74a0:	4566      	cmp	r6, ip
    74a2:	d027      	beq.n	74f4 <spi_write_buffer_wait+0x98>
	SercomSpi *const spi_module = &(module->hw->SPI);
    74a4:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    74a6:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    74a8:	4223      	tst	r3, r4
    74aa:	d0fc      	beq.n	74a6 <spi_write_buffer_wait+0x4a>
		uint16_t data_to_send = tx_data[tx_pos++];
    74ac:	1c7b      	adds	r3, r7, #1
    74ae:	b29b      	uxth	r3, r3
    74b0:	4698      	mov	r8, r3
    74b2:	4653      	mov	r3, sl
    74b4:	5ddb      	ldrb	r3, [r3, r7]
    74b6:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    74b8:	7981      	ldrb	r1, [r0, #6]
    74ba:	2901      	cmp	r1, #1
    74bc:	d0e1      	beq.n	7482 <spi_write_buffer_wait+0x26>
		uint16_t data_to_send = tx_data[tx_pos++];
    74be:	4669      	mov	r1, sp
    74c0:	80cb      	strh	r3, [r1, #6]
    74c2:	88cb      	ldrh	r3, [r1, #6]
    74c4:	4647      	mov	r7, r8
    74c6:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    74c8:	4221      	tst	r1, r4
    74ca:	d002      	beq.n	74d2 <spi_write_buffer_wait+0x76>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    74cc:	05db      	lsls	r3, r3, #23
    74ce:	0ddb      	lsrs	r3, r3, #23
    74d0:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    74d2:	79c3      	ldrb	r3, [r0, #7]
    74d4:	2b00      	cmp	r3, #0
    74d6:	d0e1      	beq.n	749c <spi_write_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
    74d8:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    74da:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    74dc:	422b      	tst	r3, r5
    74de:	d0fc      	beq.n	74da <spi_write_buffer_wait+0x7e>
    74e0:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    74e2:	422b      	tst	r3, r5
    74e4:	d0da      	beq.n	749c <spi_write_buffer_wait+0x40>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    74e6:	8b53      	ldrh	r3, [r2, #26]
    74e8:	422b      	tst	r3, r5
    74ea:	d0d3      	beq.n	7494 <spi_write_buffer_wait+0x38>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    74ec:	8355      	strh	r5, [r2, #26]
    74ee:	e7d1      	b.n	7494 <spi_write_buffer_wait+0x38>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    74f0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    74f2:	e7d3      	b.n	749c <spi_write_buffer_wait+0x40>
	if (module->mode == SPI_MODE_MASTER) {
    74f4:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    74f6:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    74f8:	2a01      	cmp	r2, #1
    74fa:	d1ba      	bne.n	7472 <spi_write_buffer_wait+0x16>
	SercomSpi *const spi_module = &(module->hw->SPI);
    74fc:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    74fe:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7500:	7e0b      	ldrb	r3, [r1, #24]
    7502:	4213      	tst	r3, r2
    7504:	d0fc      	beq.n	7500 <spi_write_buffer_wait+0xa4>
	return STATUS_OK;
    7506:	2300      	movs	r3, #0
    7508:	e7b3      	b.n	7472 <spi_write_buffer_wait+0x16>
	while (length--) {
    750a:	3a01      	subs	r2, #1
    750c:	b296      	uxth	r6, r2
    750e:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    7510:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    7512:	2504      	movs	r5, #4
	while (length--) {
    7514:	4b01      	ldr	r3, [pc, #4]	; (751c <spi_write_buffer_wait+0xc0>)
    7516:	469c      	mov	ip, r3
    7518:	e7c4      	b.n	74a4 <spi_write_buffer_wait+0x48>
    751a:	46c0      	nop			; (mov r8, r8)
    751c:	0000ffff 	.word	0x0000ffff

00007520 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    7520:	b5f0      	push	{r4, r5, r6, r7, lr}
    7522:	46de      	mov	lr, fp
    7524:	4657      	mov	r7, sl
    7526:	464e      	mov	r6, r9
    7528:	4645      	mov	r5, r8
    752a:	b5e0      	push	{r5, r6, r7, lr}
    752c:	b091      	sub	sp, #68	; 0x44
    752e:	0005      	movs	r5, r0
    7530:	000c      	movs	r4, r1
    7532:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    7534:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7536:	0008      	movs	r0, r1
    7538:	4bbc      	ldr	r3, [pc, #752]	; (782c <usart_init+0x30c>)
    753a:	4798      	blx	r3
    753c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    753e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    7540:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    7542:	07db      	lsls	r3, r3, #31
    7544:	d506      	bpl.n	7554 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    7546:	b011      	add	sp, #68	; 0x44
    7548:	bc3c      	pop	{r2, r3, r4, r5}
    754a:	4690      	mov	r8, r2
    754c:	4699      	mov	r9, r3
    754e:	46a2      	mov	sl, r4
    7550:	46ab      	mov	fp, r5
    7552:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    7554:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    7556:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    7558:	079b      	lsls	r3, r3, #30
    755a:	d4f4      	bmi.n	7546 <usart_init+0x26>
    755c:	49b4      	ldr	r1, [pc, #720]	; (7830 <usart_init+0x310>)
    755e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    7560:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    7562:	2301      	movs	r3, #1
    7564:	40bb      	lsls	r3, r7
    7566:	4303      	orrs	r3, r0
    7568:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    756a:	a90f      	add	r1, sp, #60	; 0x3c
    756c:	272d      	movs	r7, #45	; 0x2d
    756e:	5df3      	ldrb	r3, [r6, r7]
    7570:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7572:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7574:	b2d3      	uxtb	r3, r2
    7576:	9302      	str	r3, [sp, #8]
    7578:	0018      	movs	r0, r3
    757a:	4bae      	ldr	r3, [pc, #696]	; (7834 <usart_init+0x314>)
    757c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    757e:	9802      	ldr	r0, [sp, #8]
    7580:	4bad      	ldr	r3, [pc, #692]	; (7838 <usart_init+0x318>)
    7582:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7584:	5df0      	ldrb	r0, [r6, r7]
    7586:	2100      	movs	r1, #0
    7588:	4bac      	ldr	r3, [pc, #688]	; (783c <usart_init+0x31c>)
    758a:	4798      	blx	r3
	module->character_size = config->character_size;
    758c:	7af3      	ldrb	r3, [r6, #11]
    758e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    7590:	2324      	movs	r3, #36	; 0x24
    7592:	5cf3      	ldrb	r3, [r6, r3]
    7594:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    7596:	2325      	movs	r3, #37	; 0x25
    7598:	5cf3      	ldrb	r3, [r6, r3]
    759a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    759c:	7ef3      	ldrb	r3, [r6, #27]
    759e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    75a0:	7f33      	ldrb	r3, [r6, #28]
    75a2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    75a4:	682b      	ldr	r3, [r5, #0]
    75a6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    75a8:	0018      	movs	r0, r3
    75aa:	4ba0      	ldr	r3, [pc, #640]	; (782c <usart_init+0x30c>)
    75ac:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    75ae:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    75b0:	2200      	movs	r2, #0
    75b2:	230e      	movs	r3, #14
    75b4:	a906      	add	r1, sp, #24
    75b6:	468c      	mov	ip, r1
    75b8:	4463      	add	r3, ip
    75ba:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    75bc:	8a32      	ldrh	r2, [r6, #16]
    75be:	9202      	str	r2, [sp, #8]
    75c0:	2380      	movs	r3, #128	; 0x80
    75c2:	01db      	lsls	r3, r3, #7
    75c4:	429a      	cmp	r2, r3
    75c6:	d100      	bne.n	75ca <usart_init+0xaa>
    75c8:	e09e      	b.n	7708 <usart_init+0x1e8>
    75ca:	d90f      	bls.n	75ec <usart_init+0xcc>
    75cc:	23c0      	movs	r3, #192	; 0xc0
    75ce:	01db      	lsls	r3, r3, #7
    75d0:	9a02      	ldr	r2, [sp, #8]
    75d2:	429a      	cmp	r2, r3
    75d4:	d100      	bne.n	75d8 <usart_init+0xb8>
    75d6:	e092      	b.n	76fe <usart_init+0x1de>
    75d8:	2380      	movs	r3, #128	; 0x80
    75da:	021b      	lsls	r3, r3, #8
    75dc:	429a      	cmp	r2, r3
    75de:	d000      	beq.n	75e2 <usart_init+0xc2>
    75e0:	e11f      	b.n	7822 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    75e2:	2303      	movs	r3, #3
    75e4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    75e6:	2300      	movs	r3, #0
    75e8:	9307      	str	r3, [sp, #28]
    75ea:	e008      	b.n	75fe <usart_init+0xde>
	switch (config->sample_rate) {
    75ec:	2380      	movs	r3, #128	; 0x80
    75ee:	019b      	lsls	r3, r3, #6
    75f0:	429a      	cmp	r2, r3
    75f2:	d000      	beq.n	75f6 <usart_init+0xd6>
    75f4:	e115      	b.n	7822 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    75f6:	2310      	movs	r3, #16
    75f8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    75fa:	3b0f      	subs	r3, #15
    75fc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    75fe:	6833      	ldr	r3, [r6, #0]
    7600:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    7602:	68f3      	ldr	r3, [r6, #12]
    7604:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    7606:	6973      	ldr	r3, [r6, #20]
    7608:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    760a:	7e33      	ldrb	r3, [r6, #24]
    760c:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    760e:	2326      	movs	r3, #38	; 0x26
    7610:	5cf3      	ldrb	r3, [r6, r3]
    7612:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    7614:	6873      	ldr	r3, [r6, #4]
    7616:	4699      	mov	r9, r3
	switch (transfer_mode)
    7618:	2b00      	cmp	r3, #0
    761a:	d100      	bne.n	761e <usart_init+0xfe>
    761c:	e0a0      	b.n	7760 <usart_init+0x240>
    761e:	2380      	movs	r3, #128	; 0x80
    7620:	055b      	lsls	r3, r3, #21
    7622:	4599      	cmp	r9, r3
    7624:	d100      	bne.n	7628 <usart_init+0x108>
    7626:	e084      	b.n	7732 <usart_init+0x212>
	if(config->encoding_format_enable) {
    7628:	7e73      	ldrb	r3, [r6, #25]
    762a:	2b00      	cmp	r3, #0
    762c:	d002      	beq.n	7634 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    762e:	7eb3      	ldrb	r3, [r6, #26]
    7630:	4642      	mov	r2, r8
    7632:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7634:	682a      	ldr	r2, [r5, #0]
    7636:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    7638:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    763a:	2b00      	cmp	r3, #0
    763c:	d1fc      	bne.n	7638 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    763e:	330e      	adds	r3, #14
    7640:	aa06      	add	r2, sp, #24
    7642:	4694      	mov	ip, r2
    7644:	4463      	add	r3, ip
    7646:	881b      	ldrh	r3, [r3, #0]
    7648:	4642      	mov	r2, r8
    764a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    764c:	9b05      	ldr	r3, [sp, #20]
    764e:	9a03      	ldr	r2, [sp, #12]
    7650:	4313      	orrs	r3, r2
    7652:	9a04      	ldr	r2, [sp, #16]
    7654:	4313      	orrs	r3, r2
    7656:	464a      	mov	r2, r9
    7658:	4313      	orrs	r3, r2
    765a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    765c:	465b      	mov	r3, fp
    765e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    7660:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    7662:	4653      	mov	r3, sl
    7664:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    7666:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    7668:	2327      	movs	r3, #39	; 0x27
    766a:	5cf3      	ldrb	r3, [r6, r3]
    766c:	2b00      	cmp	r3, #0
    766e:	d101      	bne.n	7674 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    7670:	3304      	adds	r3, #4
    7672:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    7674:	7e73      	ldrb	r3, [r6, #25]
    7676:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    7678:	7f32      	ldrb	r2, [r6, #28]
    767a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    767c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    767e:	7f72      	ldrb	r2, [r6, #29]
    7680:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    7682:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    7684:	2224      	movs	r2, #36	; 0x24
    7686:	5cb2      	ldrb	r2, [r6, r2]
    7688:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    768a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    768c:	2225      	movs	r2, #37	; 0x25
    768e:	5cb2      	ldrb	r2, [r6, r2]
    7690:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    7692:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    7694:	7ab1      	ldrb	r1, [r6, #10]
    7696:	7af2      	ldrb	r2, [r6, #11]
    7698:	4311      	orrs	r1, r2
    769a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    769c:	8933      	ldrh	r3, [r6, #8]
    769e:	2bff      	cmp	r3, #255	; 0xff
    76a0:	d100      	bne.n	76a4 <usart_init+0x184>
    76a2:	e081      	b.n	77a8 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    76a4:	2280      	movs	r2, #128	; 0x80
    76a6:	0452      	lsls	r2, r2, #17
    76a8:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    76aa:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    76ac:	232c      	movs	r3, #44	; 0x2c
    76ae:	5cf3      	ldrb	r3, [r6, r3]
    76b0:	2b00      	cmp	r3, #0
    76b2:	d103      	bne.n	76bc <usart_init+0x19c>
    76b4:	4b62      	ldr	r3, [pc, #392]	; (7840 <usart_init+0x320>)
    76b6:	789b      	ldrb	r3, [r3, #2]
    76b8:	079b      	lsls	r3, r3, #30
    76ba:	d501      	bpl.n	76c0 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    76bc:	2380      	movs	r3, #128	; 0x80
    76be:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    76c0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    76c2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    76c4:	2b00      	cmp	r3, #0
    76c6:	d1fc      	bne.n	76c2 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    76c8:	4643      	mov	r3, r8
    76ca:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    76cc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    76ce:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    76d0:	2b00      	cmp	r3, #0
    76d2:	d1fc      	bne.n	76ce <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    76d4:	4643      	mov	r3, r8
    76d6:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    76d8:	ab0e      	add	r3, sp, #56	; 0x38
    76da:	2280      	movs	r2, #128	; 0x80
    76dc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    76de:	2200      	movs	r2, #0
    76e0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    76e2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    76e4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    76e6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    76e8:	930a      	str	r3, [sp, #40]	; 0x28
    76ea:	6b73      	ldr	r3, [r6, #52]	; 0x34
    76ec:	930b      	str	r3, [sp, #44]	; 0x2c
    76ee:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    76f0:	930c      	str	r3, [sp, #48]	; 0x30
    76f2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    76f4:	9302      	str	r3, [sp, #8]
    76f6:	930d      	str	r3, [sp, #52]	; 0x34
    76f8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    76fa:	ae0a      	add	r6, sp, #40	; 0x28
    76fc:	e063      	b.n	77c6 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    76fe:	2308      	movs	r3, #8
    7700:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    7702:	3b07      	subs	r3, #7
    7704:	9307      	str	r3, [sp, #28]
    7706:	e77a      	b.n	75fe <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    7708:	6833      	ldr	r3, [r6, #0]
    770a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    770c:	68f3      	ldr	r3, [r6, #12]
    770e:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    7710:	6973      	ldr	r3, [r6, #20]
    7712:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    7714:	7e33      	ldrb	r3, [r6, #24]
    7716:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    7718:	2326      	movs	r3, #38	; 0x26
    771a:	5cf3      	ldrb	r3, [r6, r3]
    771c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    771e:	6873      	ldr	r3, [r6, #4]
    7720:	4699      	mov	r9, r3
	switch (transfer_mode)
    7722:	2b00      	cmp	r3, #0
    7724:	d018      	beq.n	7758 <usart_init+0x238>
    7726:	2380      	movs	r3, #128	; 0x80
    7728:	055b      	lsls	r3, r3, #21
    772a:	4599      	cmp	r9, r3
    772c:	d001      	beq.n	7732 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    772e:	2000      	movs	r0, #0
    7730:	e025      	b.n	777e <usart_init+0x25e>
			if (!config->use_external_clock) {
    7732:	2327      	movs	r3, #39	; 0x27
    7734:	5cf3      	ldrb	r3, [r6, r3]
    7736:	2b00      	cmp	r3, #0
    7738:	d000      	beq.n	773c <usart_init+0x21c>
    773a:	e775      	b.n	7628 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    773c:	6a33      	ldr	r3, [r6, #32]
    773e:	001f      	movs	r7, r3
    7740:	b2c0      	uxtb	r0, r0
    7742:	4b40      	ldr	r3, [pc, #256]	; (7844 <usart_init+0x324>)
    7744:	4798      	blx	r3
    7746:	0001      	movs	r1, r0
    7748:	220e      	movs	r2, #14
    774a:	ab06      	add	r3, sp, #24
    774c:	469c      	mov	ip, r3
    774e:	4462      	add	r2, ip
    7750:	0038      	movs	r0, r7
    7752:	4b3d      	ldr	r3, [pc, #244]	; (7848 <usart_init+0x328>)
    7754:	4798      	blx	r3
    7756:	e012      	b.n	777e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7758:	2308      	movs	r3, #8
    775a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    775c:	2300      	movs	r3, #0
    775e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    7760:	2327      	movs	r3, #39	; 0x27
    7762:	5cf3      	ldrb	r3, [r6, r3]
    7764:	2b00      	cmp	r3, #0
    7766:	d00e      	beq.n	7786 <usart_init+0x266>
				status_code =
    7768:	9b06      	ldr	r3, [sp, #24]
    776a:	9300      	str	r3, [sp, #0]
    776c:	9b07      	ldr	r3, [sp, #28]
    776e:	220e      	movs	r2, #14
    7770:	a906      	add	r1, sp, #24
    7772:	468c      	mov	ip, r1
    7774:	4462      	add	r2, ip
    7776:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    7778:	6a30      	ldr	r0, [r6, #32]
    777a:	4f34      	ldr	r7, [pc, #208]	; (784c <usart_init+0x32c>)
    777c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    777e:	2800      	cmp	r0, #0
    7780:	d000      	beq.n	7784 <usart_init+0x264>
    7782:	e6e0      	b.n	7546 <usart_init+0x26>
    7784:	e750      	b.n	7628 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    7786:	6a33      	ldr	r3, [r6, #32]
    7788:	001f      	movs	r7, r3
    778a:	b2c0      	uxtb	r0, r0
    778c:	4b2d      	ldr	r3, [pc, #180]	; (7844 <usart_init+0x324>)
    778e:	4798      	blx	r3
    7790:	0001      	movs	r1, r0
				status_code =
    7792:	9b06      	ldr	r3, [sp, #24]
    7794:	9300      	str	r3, [sp, #0]
    7796:	9b07      	ldr	r3, [sp, #28]
    7798:	220e      	movs	r2, #14
    779a:	a806      	add	r0, sp, #24
    779c:	4684      	mov	ip, r0
    779e:	4462      	add	r2, ip
    77a0:	0038      	movs	r0, r7
    77a2:	4f2a      	ldr	r7, [pc, #168]	; (784c <usart_init+0x32c>)
    77a4:	47b8      	blx	r7
    77a6:	e7ea      	b.n	777e <usart_init+0x25e>
		if(config->lin_slave_enable) {
    77a8:	7ef3      	ldrb	r3, [r6, #27]
    77aa:	2b00      	cmp	r3, #0
    77ac:	d100      	bne.n	77b0 <usart_init+0x290>
    77ae:	e77d      	b.n	76ac <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    77b0:	2380      	movs	r3, #128	; 0x80
    77b2:	04db      	lsls	r3, r3, #19
    77b4:	431f      	orrs	r7, r3
    77b6:	e779      	b.n	76ac <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    77b8:	0020      	movs	r0, r4
    77ba:	4b25      	ldr	r3, [pc, #148]	; (7850 <usart_init+0x330>)
    77bc:	4798      	blx	r3
    77be:	e007      	b.n	77d0 <usart_init+0x2b0>
    77c0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    77c2:	2f04      	cmp	r7, #4
    77c4:	d00d      	beq.n	77e2 <usart_init+0x2c2>
    77c6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    77c8:	00bb      	lsls	r3, r7, #2
    77ca:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    77cc:	2800      	cmp	r0, #0
    77ce:	d0f3      	beq.n	77b8 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    77d0:	1c43      	adds	r3, r0, #1
    77d2:	d0f5      	beq.n	77c0 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    77d4:	a90e      	add	r1, sp, #56	; 0x38
    77d6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    77d8:	0c00      	lsrs	r0, r0, #16
    77da:	b2c0      	uxtb	r0, r0
    77dc:	4b1d      	ldr	r3, [pc, #116]	; (7854 <usart_init+0x334>)
    77de:	4798      	blx	r3
    77e0:	e7ee      	b.n	77c0 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    77e2:	2300      	movs	r3, #0
    77e4:	60eb      	str	r3, [r5, #12]
    77e6:	612b      	str	r3, [r5, #16]
    77e8:	616b      	str	r3, [r5, #20]
    77ea:	61ab      	str	r3, [r5, #24]
    77ec:	61eb      	str	r3, [r5, #28]
    77ee:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    77f0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    77f2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    77f4:	2200      	movs	r2, #0
    77f6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    77f8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    77fa:	3330      	adds	r3, #48	; 0x30
    77fc:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    77fe:	3301      	adds	r3, #1
    7800:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    7802:	3301      	adds	r3, #1
    7804:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    7806:	3301      	adds	r3, #1
    7808:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    780a:	6828      	ldr	r0, [r5, #0]
    780c:	4b07      	ldr	r3, [pc, #28]	; (782c <usart_init+0x30c>)
    780e:	4798      	blx	r3
    7810:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    7812:	4911      	ldr	r1, [pc, #68]	; (7858 <usart_init+0x338>)
    7814:	4b11      	ldr	r3, [pc, #68]	; (785c <usart_init+0x33c>)
    7816:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7818:	00a4      	lsls	r4, r4, #2
    781a:	4b11      	ldr	r3, [pc, #68]	; (7860 <usart_init+0x340>)
    781c:	50e5      	str	r5, [r4, r3]
	return status_code;
    781e:	2000      	movs	r0, #0
    7820:	e691      	b.n	7546 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    7822:	2310      	movs	r3, #16
    7824:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7826:	2300      	movs	r3, #0
    7828:	9307      	str	r3, [sp, #28]
    782a:	e6e8      	b.n	75fe <usart_init+0xde>
    782c:	00006fcd 	.word	0x00006fcd
    7830:	40000400 	.word	0x40000400
    7834:	000080c5 	.word	0x000080c5
    7838:	00008039 	.word	0x00008039
    783c:	00006e09 	.word	0x00006e09
    7840:	41002000 	.word	0x41002000
    7844:	000080e1 	.word	0x000080e1
    7848:	00006d4b 	.word	0x00006d4b
    784c:	00006d75 	.word	0x00006d75
    7850:	00006e55 	.word	0x00006e55
    7854:	000081ed 	.word	0x000081ed
    7858:	00007965 	.word	0x00007965
    785c:	00007009 	.word	0x00007009
    7860:	20004dc4 	.word	0x20004dc4

00007864 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    7864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7866:	0006      	movs	r6, r0
    7868:	000c      	movs	r4, r1
    786a:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    786c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    786e:	4b0a      	ldr	r3, [pc, #40]	; (7898 <_usart_write_buffer+0x34>)
    7870:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    7872:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    7874:	b29b      	uxth	r3, r3
    7876:	2b00      	cmp	r3, #0
    7878:	d003      	beq.n	7882 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    787a:	4b08      	ldr	r3, [pc, #32]	; (789c <_usart_write_buffer+0x38>)
    787c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    787e:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    7880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    7882:	85f5      	strh	r5, [r6, #46]	; 0x2e
    7884:	4b05      	ldr	r3, [pc, #20]	; (789c <_usart_write_buffer+0x38>)
    7886:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    7888:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    788a:	2205      	movs	r2, #5
    788c:	2333      	movs	r3, #51	; 0x33
    788e:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    7890:	3b32      	subs	r3, #50	; 0x32
    7892:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    7894:	2000      	movs	r0, #0
    7896:	e7f3      	b.n	7880 <_usart_write_buffer+0x1c>
    7898:	00006aa9 	.word	0x00006aa9
    789c:	00006ae9 	.word	0x00006ae9

000078a0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    78a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78a2:	0004      	movs	r4, r0
    78a4:	000d      	movs	r5, r1
    78a6:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    78a8:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    78aa:	4b0f      	ldr	r3, [pc, #60]	; (78e8 <_usart_read_buffer+0x48>)
    78ac:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    78ae:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    78b0:	b29b      	uxth	r3, r3
    78b2:	2b00      	cmp	r3, #0
    78b4:	d003      	beq.n	78be <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    78b6:	4b0d      	ldr	r3, [pc, #52]	; (78ec <_usart_read_buffer+0x4c>)
    78b8:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    78ba:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    78bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    78be:	85a6      	strh	r6, [r4, #44]	; 0x2c
    78c0:	4b0a      	ldr	r3, [pc, #40]	; (78ec <_usart_read_buffer+0x4c>)
    78c2:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    78c4:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    78c6:	2205      	movs	r2, #5
    78c8:	2332      	movs	r3, #50	; 0x32
    78ca:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    78cc:	3b2e      	subs	r3, #46	; 0x2e
    78ce:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    78d0:	7a23      	ldrb	r3, [r4, #8]
    78d2:	2b00      	cmp	r3, #0
    78d4:	d001      	beq.n	78da <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    78d6:	2320      	movs	r3, #32
    78d8:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    78da:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    78dc:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    78de:	2b00      	cmp	r3, #0
    78e0:	d0ec      	beq.n	78bc <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    78e2:	2308      	movs	r3, #8
    78e4:	75bb      	strb	r3, [r7, #22]
    78e6:	e7e9      	b.n	78bc <_usart_read_buffer+0x1c>
    78e8:	00006aa9 	.word	0x00006aa9
    78ec:	00006ae9 	.word	0x00006ae9

000078f0 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    78f0:	1c93      	adds	r3, r2, #2
    78f2:	009b      	lsls	r3, r3, #2
    78f4:	18c3      	adds	r3, r0, r3
    78f6:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    78f8:	2130      	movs	r1, #48	; 0x30
    78fa:	2301      	movs	r3, #1
    78fc:	4093      	lsls	r3, r2
    78fe:	001a      	movs	r2, r3
    7900:	5c43      	ldrb	r3, [r0, r1]
    7902:	4313      	orrs	r3, r2
    7904:	5443      	strb	r3, [r0, r1]
}
    7906:	4770      	bx	lr

00007908 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    7908:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    790a:	2317      	movs	r3, #23
	if (length == 0) {
    790c:	2a00      	cmp	r2, #0
    790e:	d101      	bne.n	7914 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    7910:	0018      	movs	r0, r3
    7912:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    7914:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    7916:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    7918:	2c00      	cmp	r4, #0
    791a:	d0f9      	beq.n	7910 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    791c:	4b01      	ldr	r3, [pc, #4]	; (7924 <usart_write_buffer_job+0x1c>)
    791e:	4798      	blx	r3
    7920:	0003      	movs	r3, r0
    7922:	e7f5      	b.n	7910 <usart_write_buffer_job+0x8>
    7924:	00007865 	.word	0x00007865

00007928 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    7928:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    792a:	2317      	movs	r3, #23
	if (length == 0) {
    792c:	2a00      	cmp	r2, #0
    792e:	d101      	bne.n	7934 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    7930:	0018      	movs	r0, r3
    7932:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    7934:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    7936:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    7938:	2c00      	cmp	r4, #0
    793a:	d0f9      	beq.n	7930 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    793c:	4b01      	ldr	r3, [pc, #4]	; (7944 <usart_read_buffer_job+0x1c>)
    793e:	4798      	blx	r3
    7940:	0003      	movs	r3, r0
    7942:	e7f5      	b.n	7930 <usart_read_buffer_job+0x8>
    7944:	000078a1 	.word	0x000078a1

00007948 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    7948:	2900      	cmp	r1, #0
    794a:	d003      	beq.n	7954 <usart_get_job_status+0xc>
    794c:	2901      	cmp	r1, #1
    794e:	d005      	beq.n	795c <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    7950:	2017      	movs	r0, #23
    7952:	e002      	b.n	795a <usart_get_job_status+0x12>
			status_code = module->rx_status;
    7954:	2332      	movs	r3, #50	; 0x32
    7956:	5cc0      	ldrb	r0, [r0, r3]
    7958:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    795a:	4770      	bx	lr
			status_code = module->tx_status;
    795c:	2333      	movs	r3, #51	; 0x33
    795e:	5cc0      	ldrb	r0, [r0, r3]
    7960:	b2c0      	uxtb	r0, r0
			break;
    7962:	e7fa      	b.n	795a <usart_get_job_status+0x12>

00007964 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    7964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    7966:	0080      	lsls	r0, r0, #2
    7968:	4b62      	ldr	r3, [pc, #392]	; (7af4 <_usart_interrupt_handler+0x190>)
    796a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    796c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    796e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    7970:	2b00      	cmp	r3, #0
    7972:	d1fc      	bne.n	796e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    7974:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    7976:	7da6      	ldrb	r6, [r4, #22]
    7978:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    797a:	2330      	movs	r3, #48	; 0x30
    797c:	5ceb      	ldrb	r3, [r5, r3]
    797e:	2231      	movs	r2, #49	; 0x31
    7980:	5caf      	ldrb	r7, [r5, r2]
    7982:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    7984:	07f3      	lsls	r3, r6, #31
    7986:	d522      	bpl.n	79ce <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    7988:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    798a:	b29b      	uxth	r3, r3
    798c:	2b00      	cmp	r3, #0
    798e:	d01c      	beq.n	79ca <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7990:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7992:	7813      	ldrb	r3, [r2, #0]
    7994:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    7996:	1c51      	adds	r1, r2, #1
    7998:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    799a:	7969      	ldrb	r1, [r5, #5]
    799c:	2901      	cmp	r1, #1
    799e:	d00e      	beq.n	79be <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    79a0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    79a2:	05db      	lsls	r3, r3, #23
    79a4:	0ddb      	lsrs	r3, r3, #23
    79a6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    79a8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    79aa:	3b01      	subs	r3, #1
    79ac:	b29b      	uxth	r3, r3
    79ae:	85eb      	strh	r3, [r5, #46]	; 0x2e
    79b0:	2b00      	cmp	r3, #0
    79b2:	d10c      	bne.n	79ce <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    79b4:	3301      	adds	r3, #1
    79b6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    79b8:	3301      	adds	r3, #1
    79ba:	75a3      	strb	r3, [r4, #22]
    79bc:	e007      	b.n	79ce <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    79be:	7851      	ldrb	r1, [r2, #1]
    79c0:	0209      	lsls	r1, r1, #8
    79c2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    79c4:	3202      	adds	r2, #2
    79c6:	62aa      	str	r2, [r5, #40]	; 0x28
    79c8:	e7eb      	b.n	79a2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    79ca:	2301      	movs	r3, #1
    79cc:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    79ce:	07b3      	lsls	r3, r6, #30
    79d0:	d506      	bpl.n	79e0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    79d2:	2302      	movs	r3, #2
    79d4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    79d6:	2200      	movs	r2, #0
    79d8:	3331      	adds	r3, #49	; 0x31
    79da:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    79dc:	07fb      	lsls	r3, r7, #31
    79de:	d41a      	bmi.n	7a16 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    79e0:	0773      	lsls	r3, r6, #29
    79e2:	d565      	bpl.n	7ab0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    79e4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    79e6:	b29b      	uxth	r3, r3
    79e8:	2b00      	cmp	r3, #0
    79ea:	d05f      	beq.n	7aac <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    79ec:	8b63      	ldrh	r3, [r4, #26]
    79ee:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    79f0:	071a      	lsls	r2, r3, #28
    79f2:	d414      	bmi.n	7a1e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    79f4:	223f      	movs	r2, #63	; 0x3f
    79f6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    79f8:	2b00      	cmp	r3, #0
    79fa:	d034      	beq.n	7a66 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    79fc:	079a      	lsls	r2, r3, #30
    79fe:	d511      	bpl.n	7a24 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    7a00:	221a      	movs	r2, #26
    7a02:	2332      	movs	r3, #50	; 0x32
    7a04:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    7a06:	3b30      	subs	r3, #48	; 0x30
    7a08:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    7a0a:	077b      	lsls	r3, r7, #29
    7a0c:	d550      	bpl.n	7ab0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    7a0e:	0028      	movs	r0, r5
    7a10:	696b      	ldr	r3, [r5, #20]
    7a12:	4798      	blx	r3
    7a14:	e04c      	b.n	7ab0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    7a16:	0028      	movs	r0, r5
    7a18:	68eb      	ldr	r3, [r5, #12]
    7a1a:	4798      	blx	r3
    7a1c:	e7e0      	b.n	79e0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    7a1e:	2237      	movs	r2, #55	; 0x37
    7a20:	4013      	ands	r3, r2
    7a22:	e7e9      	b.n	79f8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    7a24:	075a      	lsls	r2, r3, #29
    7a26:	d505      	bpl.n	7a34 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    7a28:	221e      	movs	r2, #30
    7a2a:	2332      	movs	r3, #50	; 0x32
    7a2c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    7a2e:	3b2e      	subs	r3, #46	; 0x2e
    7a30:	8363      	strh	r3, [r4, #26]
    7a32:	e7ea      	b.n	7a0a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7a34:	07da      	lsls	r2, r3, #31
    7a36:	d505      	bpl.n	7a44 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    7a38:	2213      	movs	r2, #19
    7a3a:	2332      	movs	r3, #50	; 0x32
    7a3c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    7a3e:	3b31      	subs	r3, #49	; 0x31
    7a40:	8363      	strh	r3, [r4, #26]
    7a42:	e7e2      	b.n	7a0a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    7a44:	06da      	lsls	r2, r3, #27
    7a46:	d505      	bpl.n	7a54 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    7a48:	2242      	movs	r2, #66	; 0x42
    7a4a:	2332      	movs	r3, #50	; 0x32
    7a4c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    7a4e:	3b22      	subs	r3, #34	; 0x22
    7a50:	8363      	strh	r3, [r4, #26]
    7a52:	e7da      	b.n	7a0a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    7a54:	2220      	movs	r2, #32
    7a56:	421a      	tst	r2, r3
    7a58:	d0d7      	beq.n	7a0a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    7a5a:	3221      	adds	r2, #33	; 0x21
    7a5c:	2332      	movs	r3, #50	; 0x32
    7a5e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    7a60:	3b12      	subs	r3, #18
    7a62:	8363      	strh	r3, [r4, #26]
    7a64:	e7d1      	b.n	7a0a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    7a66:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    7a68:	05db      	lsls	r3, r3, #23
    7a6a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    7a6c:	b2da      	uxtb	r2, r3
    7a6e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7a70:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    7a72:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    7a74:	1c51      	adds	r1, r2, #1
    7a76:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7a78:	7969      	ldrb	r1, [r5, #5]
    7a7a:	2901      	cmp	r1, #1
    7a7c:	d010      	beq.n	7aa0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    7a7e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    7a80:	3b01      	subs	r3, #1
    7a82:	b29b      	uxth	r3, r3
    7a84:	85ab      	strh	r3, [r5, #44]	; 0x2c
    7a86:	2b00      	cmp	r3, #0
    7a88:	d112      	bne.n	7ab0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7a8a:	3304      	adds	r3, #4
    7a8c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    7a8e:	2200      	movs	r2, #0
    7a90:	332e      	adds	r3, #46	; 0x2e
    7a92:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    7a94:	07bb      	lsls	r3, r7, #30
    7a96:	d50b      	bpl.n	7ab0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    7a98:	0028      	movs	r0, r5
    7a9a:	692b      	ldr	r3, [r5, #16]
    7a9c:	4798      	blx	r3
    7a9e:	e007      	b.n	7ab0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    7aa0:	0a1b      	lsrs	r3, r3, #8
    7aa2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    7aa4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7aa6:	3301      	adds	r3, #1
    7aa8:	626b      	str	r3, [r5, #36]	; 0x24
    7aaa:	e7e8      	b.n	7a7e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7aac:	2304      	movs	r3, #4
    7aae:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    7ab0:	06f3      	lsls	r3, r6, #27
    7ab2:	d504      	bpl.n	7abe <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    7ab4:	2310      	movs	r3, #16
    7ab6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    7ab8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    7aba:	06fb      	lsls	r3, r7, #27
    7abc:	d40e      	bmi.n	7adc <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    7abe:	06b3      	lsls	r3, r6, #26
    7ac0:	d504      	bpl.n	7acc <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    7ac2:	2320      	movs	r3, #32
    7ac4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    7ac6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    7ac8:	073b      	lsls	r3, r7, #28
    7aca:	d40b      	bmi.n	7ae4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    7acc:	0733      	lsls	r3, r6, #28
    7ace:	d504      	bpl.n	7ada <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    7ad0:	2308      	movs	r3, #8
    7ad2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    7ad4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    7ad6:	06bb      	lsls	r3, r7, #26
    7ad8:	d408      	bmi.n	7aec <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    7ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    7adc:	0028      	movs	r0, r5
    7ade:	69eb      	ldr	r3, [r5, #28]
    7ae0:	4798      	blx	r3
    7ae2:	e7ec      	b.n	7abe <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    7ae4:	0028      	movs	r0, r5
    7ae6:	69ab      	ldr	r3, [r5, #24]
    7ae8:	4798      	blx	r3
    7aea:	e7ef      	b.n	7acc <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    7aec:	6a2b      	ldr	r3, [r5, #32]
    7aee:	0028      	movs	r0, r5
    7af0:	4798      	blx	r3
}
    7af2:	e7f2      	b.n	7ada <_usart_interrupt_handler+0x176>
    7af4:	20004dc4 	.word	0x20004dc4

00007af8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    7af8:	b510      	push	{r4, lr}
	switch (clock_source) {
    7afa:	2808      	cmp	r0, #8
    7afc:	d803      	bhi.n	7b06 <system_clock_source_get_hz+0xe>
    7afe:	0080      	lsls	r0, r0, #2
    7b00:	4b1c      	ldr	r3, [pc, #112]	; (7b74 <system_clock_source_get_hz+0x7c>)
    7b02:	581b      	ldr	r3, [r3, r0]
    7b04:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    7b06:	2000      	movs	r0, #0
    7b08:	e032      	b.n	7b70 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    7b0a:	4b1b      	ldr	r3, [pc, #108]	; (7b78 <system_clock_source_get_hz+0x80>)
    7b0c:	6918      	ldr	r0, [r3, #16]
    7b0e:	e02f      	b.n	7b70 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    7b10:	4b1a      	ldr	r3, [pc, #104]	; (7b7c <system_clock_source_get_hz+0x84>)
    7b12:	6a1b      	ldr	r3, [r3, #32]
    7b14:	059b      	lsls	r3, r3, #22
    7b16:	0f9b      	lsrs	r3, r3, #30
    7b18:	4819      	ldr	r0, [pc, #100]	; (7b80 <system_clock_source_get_hz+0x88>)
    7b1a:	40d8      	lsrs	r0, r3
    7b1c:	e028      	b.n	7b70 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    7b1e:	4b16      	ldr	r3, [pc, #88]	; (7b78 <system_clock_source_get_hz+0x80>)
    7b20:	6958      	ldr	r0, [r3, #20]
    7b22:	e025      	b.n	7b70 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    7b24:	4b14      	ldr	r3, [pc, #80]	; (7b78 <system_clock_source_get_hz+0x80>)
    7b26:	681b      	ldr	r3, [r3, #0]
			return 0;
    7b28:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    7b2a:	079b      	lsls	r3, r3, #30
    7b2c:	d520      	bpl.n	7b70 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7b2e:	4913      	ldr	r1, [pc, #76]	; (7b7c <system_clock_source_get_hz+0x84>)
    7b30:	2210      	movs	r2, #16
    7b32:	68cb      	ldr	r3, [r1, #12]
    7b34:	421a      	tst	r2, r3
    7b36:	d0fc      	beq.n	7b32 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    7b38:	4b0f      	ldr	r3, [pc, #60]	; (7b78 <system_clock_source_get_hz+0x80>)
    7b3a:	681a      	ldr	r2, [r3, #0]
    7b3c:	2324      	movs	r3, #36	; 0x24
    7b3e:	4013      	ands	r3, r2
    7b40:	2b04      	cmp	r3, #4
    7b42:	d001      	beq.n	7b48 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    7b44:	480f      	ldr	r0, [pc, #60]	; (7b84 <system_clock_source_get_hz+0x8c>)
    7b46:	e013      	b.n	7b70 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7b48:	2000      	movs	r0, #0
    7b4a:	4b0f      	ldr	r3, [pc, #60]	; (7b88 <system_clock_source_get_hz+0x90>)
    7b4c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    7b4e:	4b0a      	ldr	r3, [pc, #40]	; (7b78 <system_clock_source_get_hz+0x80>)
    7b50:	689b      	ldr	r3, [r3, #8]
    7b52:	041b      	lsls	r3, r3, #16
    7b54:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7b56:	4358      	muls	r0, r3
    7b58:	e00a      	b.n	7b70 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    7b5a:	2350      	movs	r3, #80	; 0x50
    7b5c:	4a07      	ldr	r2, [pc, #28]	; (7b7c <system_clock_source_get_hz+0x84>)
    7b5e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    7b60:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    7b62:	075b      	lsls	r3, r3, #29
    7b64:	d504      	bpl.n	7b70 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    7b66:	4b04      	ldr	r3, [pc, #16]	; (7b78 <system_clock_source_get_hz+0x80>)
    7b68:	68d8      	ldr	r0, [r3, #12]
    7b6a:	e001      	b.n	7b70 <system_clock_source_get_hz+0x78>
		return 32768UL;
    7b6c:	2080      	movs	r0, #128	; 0x80
    7b6e:	0200      	lsls	r0, r0, #8
	}
}
    7b70:	bd10      	pop	{r4, pc}
    7b72:	46c0      	nop			; (mov r8, r8)
    7b74:	0000e780 	.word	0x0000e780
    7b78:	2000382c 	.word	0x2000382c
    7b7c:	40000800 	.word	0x40000800
    7b80:	007a1200 	.word	0x007a1200
    7b84:	02dc6c00 	.word	0x02dc6c00
    7b88:	000080e1 	.word	0x000080e1

00007b8c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    7b8c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    7b8e:	490c      	ldr	r1, [pc, #48]	; (7bc0 <system_clock_source_osc8m_set_config+0x34>)
    7b90:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    7b92:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    7b94:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    7b96:	7840      	ldrb	r0, [r0, #1]
    7b98:	2201      	movs	r2, #1
    7b9a:	4010      	ands	r0, r2
    7b9c:	0180      	lsls	r0, r0, #6
    7b9e:	2640      	movs	r6, #64	; 0x40
    7ba0:	43b3      	bics	r3, r6
    7ba2:	4303      	orrs	r3, r0
    7ba4:	402a      	ands	r2, r5
    7ba6:	01d2      	lsls	r2, r2, #7
    7ba8:	2080      	movs	r0, #128	; 0x80
    7baa:	4383      	bics	r3, r0
    7bac:	4313      	orrs	r3, r2
    7bae:	2203      	movs	r2, #3
    7bb0:	4022      	ands	r2, r4
    7bb2:	0212      	lsls	r2, r2, #8
    7bb4:	4803      	ldr	r0, [pc, #12]	; (7bc4 <system_clock_source_osc8m_set_config+0x38>)
    7bb6:	4003      	ands	r3, r0
    7bb8:	4313      	orrs	r3, r2
    7bba:	620b      	str	r3, [r1, #32]
}
    7bbc:	bd70      	pop	{r4, r5, r6, pc}
    7bbe:	46c0      	nop			; (mov r8, r8)
    7bc0:	40000800 	.word	0x40000800
    7bc4:	fffffcff 	.word	0xfffffcff

00007bc8 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    7bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7bca:	0005      	movs	r5, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    7bcc:	68c4      	ldr	r4, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    7bce:	7d03      	ldrb	r3, [r0, #20]
    7bd0:	2b01      	cmp	r3, #1
    7bd2:	d03b      	beq.n	7c4c <system_clock_source_dpll_set_config+0x84>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    7bd4:	68ab      	ldr	r3, [r5, #8]
    7bd6:	0118      	lsls	r0, r3, #4
    7bd8:	0021      	movs	r1, r4
    7bda:	4b20      	ldr	r3, [pc, #128]	; (7c5c <system_clock_source_dpll_set_config+0x94>)
    7bdc:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    7bde:	220f      	movs	r2, #15
    7be0:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    7be2:	0903      	lsrs	r3, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    7be4:	782e      	ldrb	r6, [r5, #0]
    7be6:	01f6      	lsls	r6, r6, #7
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    7be8:	7869      	ldrb	r1, [r5, #1]
    7bea:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    7bec:	430e      	orrs	r6, r1
    7bee:	b2f6      	uxtb	r6, r6
	SYSCTRL->DPLLCTRLA.reg =
    7bf0:	491b      	ldr	r1, [pc, #108]	; (7c60 <system_clock_source_dpll_set_config+0x98>)
    7bf2:	2744      	movs	r7, #68	; 0x44
    7bf4:	55ce      	strb	r6, [r1, r7]

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    7bf6:	0416      	lsls	r6, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    7bf8:	3b01      	subs	r3, #1
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    7bfa:	051b      	lsls	r3, r3, #20
    7bfc:	0d1b      	lsrs	r3, r3, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    7bfe:	4333      	orrs	r3, r6
	SYSCTRL->DPLLRATIO.reg =
    7c00:	648b      	str	r3, [r1, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    7c02:	78ab      	ldrb	r3, [r5, #2]
    7c04:	031b      	lsls	r3, r3, #12
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    7c06:	78ee      	ldrb	r6, [r5, #3]
    7c08:	00f6      	lsls	r6, r6, #3
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    7c0a:	4333      	orrs	r3, r6
    7c0c:	792e      	ldrb	r6, [r5, #4]
    7c0e:	00b6      	lsls	r6, r6, #2
    7c10:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    7c12:	7caf      	ldrb	r7, [r5, #18]
    7c14:	2603      	movs	r6, #3
    7c16:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    7c18:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    7c1a:	8a2e      	ldrh	r6, [r5, #16]
    7c1c:	0436      	lsls	r6, r6, #16
    7c1e:	4f11      	ldr	r7, [pc, #68]	; (7c64 <system_clock_source_dpll_set_config+0x9c>)
    7c20:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    7c22:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    7c24:	7cee      	ldrb	r6, [r5, #19]
    7c26:	0236      	lsls	r6, r6, #8
    7c28:	27e0      	movs	r7, #224	; 0xe0
    7c2a:	00ff      	lsls	r7, r7, #3
    7c2c:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    7c2e:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    7c30:	7d2e      	ldrb	r6, [r5, #20]
    7c32:	0136      	lsls	r6, r6, #4
    7c34:	2530      	movs	r5, #48	; 0x30
    7c36:	4035      	ands	r5, r6
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    7c38:	432b      	orrs	r3, r5
	SYSCTRL->DPLLCTRLB.reg =
    7c3a:	64cb      	str	r3, [r1, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    7c3c:	230f      	movs	r3, #15
    7c3e:	4398      	bics	r0, r3
    7c40:	1880      	adds	r0, r0, r2
    7c42:	4344      	muls	r4, r0
    7c44:	0924      	lsrs	r4, r4, #4
	_system_clock_inst.dpll.frequency =
    7c46:	4b08      	ldr	r3, [pc, #32]	; (7c68 <system_clock_source_dpll_set_config+0xa0>)
    7c48:	60dc      	str	r4, [r3, #12]
}
    7c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    7c4c:	8a01      	ldrh	r1, [r0, #16]
    7c4e:	3101      	adds	r1, #1
    7c50:	0049      	lsls	r1, r1, #1
    7c52:	0020      	movs	r0, r4
    7c54:	4b01      	ldr	r3, [pc, #4]	; (7c5c <system_clock_source_dpll_set_config+0x94>)
    7c56:	4798      	blx	r3
    7c58:	0004      	movs	r4, r0
    7c5a:	e7bb      	b.n	7bd4 <system_clock_source_dpll_set_config+0xc>
    7c5c:	0000a915 	.word	0x0000a915
    7c60:	40000800 	.word	0x40000800
    7c64:	07ff0000 	.word	0x07ff0000
    7c68:	2000382c 	.word	0x2000382c

00007c6c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    7c6c:	2808      	cmp	r0, #8
    7c6e:	d803      	bhi.n	7c78 <system_clock_source_enable+0xc>
    7c70:	0080      	lsls	r0, r0, #2
    7c72:	4b25      	ldr	r3, [pc, #148]	; (7d08 <system_clock_source_enable+0x9c>)
    7c74:	581b      	ldr	r3, [r3, r0]
    7c76:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7c78:	2017      	movs	r0, #23
    7c7a:	e044      	b.n	7d06 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    7c7c:	4a23      	ldr	r2, [pc, #140]	; (7d0c <system_clock_source_enable+0xa0>)
    7c7e:	6a13      	ldr	r3, [r2, #32]
    7c80:	2102      	movs	r1, #2
    7c82:	430b      	orrs	r3, r1
    7c84:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    7c86:	2000      	movs	r0, #0
    7c88:	e03d      	b.n	7d06 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    7c8a:	4a20      	ldr	r2, [pc, #128]	; (7d0c <system_clock_source_enable+0xa0>)
    7c8c:	6993      	ldr	r3, [r2, #24]
    7c8e:	2102      	movs	r1, #2
    7c90:	430b      	orrs	r3, r1
    7c92:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    7c94:	2000      	movs	r0, #0
		break;
    7c96:	e036      	b.n	7d06 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    7c98:	4a1c      	ldr	r2, [pc, #112]	; (7d0c <system_clock_source_enable+0xa0>)
    7c9a:	8a13      	ldrh	r3, [r2, #16]
    7c9c:	2102      	movs	r1, #2
    7c9e:	430b      	orrs	r3, r1
    7ca0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    7ca2:	2000      	movs	r0, #0
		break;
    7ca4:	e02f      	b.n	7d06 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    7ca6:	4a19      	ldr	r2, [pc, #100]	; (7d0c <system_clock_source_enable+0xa0>)
    7ca8:	8a93      	ldrh	r3, [r2, #20]
    7caa:	2102      	movs	r1, #2
    7cac:	430b      	orrs	r3, r1
    7cae:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    7cb0:	2000      	movs	r0, #0
		break;
    7cb2:	e028      	b.n	7d06 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    7cb4:	4916      	ldr	r1, [pc, #88]	; (7d10 <system_clock_source_enable+0xa4>)
    7cb6:	680b      	ldr	r3, [r1, #0]
    7cb8:	2202      	movs	r2, #2
    7cba:	4313      	orrs	r3, r2
    7cbc:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    7cbe:	4b13      	ldr	r3, [pc, #76]	; (7d0c <system_clock_source_enable+0xa0>)
    7cc0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7cc2:	0019      	movs	r1, r3
    7cc4:	320e      	adds	r2, #14
    7cc6:	68cb      	ldr	r3, [r1, #12]
    7cc8:	421a      	tst	r2, r3
    7cca:	d0fc      	beq.n	7cc6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    7ccc:	4a10      	ldr	r2, [pc, #64]	; (7d10 <system_clock_source_enable+0xa4>)
    7cce:	6891      	ldr	r1, [r2, #8]
    7cd0:	4b0e      	ldr	r3, [pc, #56]	; (7d0c <system_clock_source_enable+0xa0>)
    7cd2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    7cd4:	6852      	ldr	r2, [r2, #4]
    7cd6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    7cd8:	2200      	movs	r2, #0
    7cda:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7cdc:	0019      	movs	r1, r3
    7cde:	3210      	adds	r2, #16
    7ce0:	68cb      	ldr	r3, [r1, #12]
    7ce2:	421a      	tst	r2, r3
    7ce4:	d0fc      	beq.n	7ce0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    7ce6:	4b0a      	ldr	r3, [pc, #40]	; (7d10 <system_clock_source_enable+0xa4>)
    7ce8:	681b      	ldr	r3, [r3, #0]
    7cea:	b29b      	uxth	r3, r3
    7cec:	4a07      	ldr	r2, [pc, #28]	; (7d0c <system_clock_source_enable+0xa0>)
    7cee:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    7cf0:	2000      	movs	r0, #0
    7cf2:	e008      	b.n	7d06 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    7cf4:	4905      	ldr	r1, [pc, #20]	; (7d0c <system_clock_source_enable+0xa0>)
    7cf6:	2244      	movs	r2, #68	; 0x44
    7cf8:	5c8b      	ldrb	r3, [r1, r2]
    7cfa:	2002      	movs	r0, #2
    7cfc:	4303      	orrs	r3, r0
    7cfe:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    7d00:	2000      	movs	r0, #0
		break;
    7d02:	e000      	b.n	7d06 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    7d04:	2000      	movs	r0, #0
}
    7d06:	4770      	bx	lr
    7d08:	0000e7a4 	.word	0x0000e7a4
    7d0c:	40000800 	.word	0x40000800
    7d10:	2000382c 	.word	0x2000382c

00007d14 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    7d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d16:	46de      	mov	lr, fp
    7d18:	4657      	mov	r7, sl
    7d1a:	464e      	mov	r6, r9
    7d1c:	4645      	mov	r5, r8
    7d1e:	b5e0      	push	{r5, r6, r7, lr}
    7d20:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    7d22:	22c2      	movs	r2, #194	; 0xc2
    7d24:	00d2      	lsls	r2, r2, #3
    7d26:	4b4c      	ldr	r3, [pc, #304]	; (7e58 <system_clock_init+0x144>)
    7d28:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    7d2a:	4a4c      	ldr	r2, [pc, #304]	; (7e5c <system_clock_init+0x148>)
    7d2c:	6853      	ldr	r3, [r2, #4]
    7d2e:	211e      	movs	r1, #30
    7d30:	438b      	bics	r3, r1
    7d32:	3918      	subs	r1, #24
    7d34:	430b      	orrs	r3, r1
    7d36:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    7d38:	2203      	movs	r2, #3
    7d3a:	ab01      	add	r3, sp, #4
    7d3c:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    7d3e:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    7d40:	4d47      	ldr	r5, [pc, #284]	; (7e60 <system_clock_init+0x14c>)
    7d42:	b2e0      	uxtb	r0, r4
    7d44:	a901      	add	r1, sp, #4
    7d46:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    7d48:	3401      	adds	r4, #1
    7d4a:	2c25      	cmp	r4, #37	; 0x25
    7d4c:	d1f9      	bne.n	7d42 <system_clock_init+0x2e>
	config->run_in_standby  = false;
    7d4e:	a80b      	add	r0, sp, #44	; 0x2c
    7d50:	2500      	movs	r5, #0
    7d52:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    7d54:	2601      	movs	r6, #1
    7d56:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    7d58:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    7d5a:	4b42      	ldr	r3, [pc, #264]	; (7e64 <system_clock_init+0x150>)
    7d5c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    7d5e:	2006      	movs	r0, #6
    7d60:	4b41      	ldr	r3, [pc, #260]	; (7e68 <system_clock_init+0x154>)
    7d62:	4699      	mov	r9, r3
    7d64:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    7d66:	4b41      	ldr	r3, [pc, #260]	; (7e6c <system_clock_init+0x158>)
    7d68:	4798      	blx	r3
	config->high_when_disabled = false;
    7d6a:	ac01      	add	r4, sp, #4
    7d6c:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    7d6e:	2306      	movs	r3, #6
    7d70:	469a      	mov	sl, r3
    7d72:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    7d74:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    7d76:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    7d78:	2308      	movs	r3, #8
    7d7a:	6063      	str	r3, [r4, #4]
    7d7c:	0021      	movs	r1, r4
    7d7e:	2001      	movs	r0, #1
    7d80:	4b3b      	ldr	r3, [pc, #236]	; (7e70 <system_clock_init+0x15c>)
    7d82:	4698      	mov	r8, r3
    7d84:	4798      	blx	r3
    7d86:	2001      	movs	r0, #1
    7d88:	4f3a      	ldr	r7, [pc, #232]	; (7e74 <system_clock_init+0x160>)
    7d8a:	47b8      	blx	r7
	config->division_factor    = 1;
    7d8c:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    7d8e:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    7d90:	7265      	strb	r5, [r4, #9]
    7d92:	2303      	movs	r3, #3
    7d94:	469b      	mov	fp, r3
    7d96:	7023      	strb	r3, [r4, #0]
    7d98:	7226      	strb	r6, [r4, #8]
    7d9a:	0021      	movs	r1, r4
    7d9c:	2002      	movs	r0, #2
    7d9e:	47c0      	blx	r8
    7da0:	2002      	movs	r0, #2
    7da2:	47b8      	blx	r7
	config->high_when_disabled = false;
    7da4:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    7da6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    7da8:	7265      	strb	r5, [r4, #9]
    7daa:	465b      	mov	r3, fp
    7dac:	7023      	strb	r3, [r4, #0]
    7dae:	2320      	movs	r3, #32
    7db0:	6063      	str	r3, [r4, #4]
    7db2:	0021      	movs	r1, r4
    7db4:	2004      	movs	r0, #4
    7db6:	47c0      	blx	r8
    7db8:	2004      	movs	r0, #4
    7dba:	47b8      	blx	r7
	config->division_factor    = 1;
    7dbc:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    7dbe:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    7dc0:	4653      	mov	r3, sl
    7dc2:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    7dc4:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    7dc6:	7265      	strb	r5, [r4, #9]
    7dc8:	0021      	movs	r1, r4
    7dca:	2005      	movs	r0, #5
    7dcc:	47c0      	blx	r8
    7dce:	2005      	movs	r0, #5
    7dd0:	47b8      	blx	r7
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
    7dd2:	a90a      	add	r1, sp, #40	; 0x28
    7dd4:	700e      	strb	r6, [r1, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
    7dd6:	2001      	movs	r0, #1
    7dd8:	4b21      	ldr	r3, [pc, #132]	; (7e60 <system_clock_init+0x14c>)
    7dda:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
    7ddc:	2001      	movs	r0, #1
    7dde:	4b26      	ldr	r3, [pc, #152]	; (7e78 <system_clock_init+0x164>)
    7de0:	4798      	blx	r3
	config->run_in_standby      = false;
    7de2:	a804      	add	r0, sp, #16
    7de4:	7045      	strb	r5, [r0, #1]
	config->lock_bypass         = false;
    7de6:	7085      	strb	r5, [r0, #2]
	config->wake_up_fast        = false;
    7de8:	70c5      	strb	r5, [r0, #3]
	config->low_power_enable    = false;
    7dea:	7105      	strb	r5, [r0, #4]
	config->output_frequency    = 48000000;
    7dec:	4b23      	ldr	r3, [pc, #140]	; (7e7c <system_clock_init+0x168>)
    7dee:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
    7df0:	8206      	strh	r6, [r0, #16]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    7df2:	74c5      	strb	r5, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    7df4:	7485      	strb	r5, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    7df6:	7005      	strb	r5, [r0, #0]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    7df8:	2302      	movs	r3, #2
    7dfa:	7503      	strb	r3, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    7dfc:	4b20      	ldr	r3, [pc, #128]	; (7e80 <system_clock_init+0x16c>)
    7dfe:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    7e00:	4b20      	ldr	r3, [pc, #128]	; (7e84 <system_clock_init+0x170>)
    7e02:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    7e04:	2008      	movs	r0, #8
    7e06:	47c8      	blx	r9
		return ((SYSCTRL->DPLLSTATUS.reg &
    7e08:	4813      	ldr	r0, [pc, #76]	; (7e58 <system_clock_init+0x144>)
    7e0a:	2150      	movs	r1, #80	; 0x50
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    7e0c:	2203      	movs	r2, #3
		return ((SYSCTRL->DPLLSTATUS.reg &
    7e0e:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    7e10:	4013      	ands	r3, r2
    7e12:	2b03      	cmp	r3, #3
    7e14:	d1fb      	bne.n	7e0e <system_clock_init+0xfa>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    7e16:	4910      	ldr	r1, [pc, #64]	; (7e58 <system_clock_init+0x144>)
    7e18:	2244      	movs	r2, #68	; 0x44
    7e1a:	5c88      	ldrb	r0, [r1, r2]
    7e1c:	3b83      	subs	r3, #131	; 0x83
    7e1e:	4303      	orrs	r3, r0
    7e20:	548b      	strb	r3, [r1, r2]
	PM->CPUSEL.reg = (uint32_t)divider;
    7e22:	4a19      	ldr	r2, [pc, #100]	; (7e88 <system_clock_init+0x174>)
    7e24:	2300      	movs	r3, #0
    7e26:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    7e28:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    7e2a:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    7e2c:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    7e2e:	a901      	add	r1, sp, #4
    7e30:	2201      	movs	r2, #1
    7e32:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    7e34:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    7e36:	720b      	strb	r3, [r1, #8]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    7e38:	3308      	adds	r3, #8
    7e3a:	700b      	strb	r3, [r1, #0]
    7e3c:	724a      	strb	r2, [r1, #9]
    7e3e:	2000      	movs	r0, #0
    7e40:	4b0b      	ldr	r3, [pc, #44]	; (7e70 <system_clock_init+0x15c>)
    7e42:	4798      	blx	r3
    7e44:	2000      	movs	r0, #0
    7e46:	4b0b      	ldr	r3, [pc, #44]	; (7e74 <system_clock_init+0x160>)
    7e48:	4798      	blx	r3
#endif
}
    7e4a:	b00d      	add	sp, #52	; 0x34
    7e4c:	bc3c      	pop	{r2, r3, r4, r5}
    7e4e:	4690      	mov	r8, r2
    7e50:	4699      	mov	r9, r3
    7e52:	46a2      	mov	sl, r4
    7e54:	46ab      	mov	fp, r5
    7e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e58:	40000800 	.word	0x40000800
    7e5c:	41004000 	.word	0x41004000
    7e60:	000080c5 	.word	0x000080c5
    7e64:	00007b8d 	.word	0x00007b8d
    7e68:	00007c6d 	.word	0x00007c6d
    7e6c:	00007e8d 	.word	0x00007e8d
    7e70:	00007eb1 	.word	0x00007eb1
    7e74:	00007f69 	.word	0x00007f69
    7e78:	00008039 	.word	0x00008039
    7e7c:	02dc6c00 	.word	0x02dc6c00
    7e80:	000f4240 	.word	0x000f4240
    7e84:	00007bc9 	.word	0x00007bc9
    7e88:	40000400 	.word	0x40000400

00007e8c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    7e8c:	4a06      	ldr	r2, [pc, #24]	; (7ea8 <system_gclk_init+0x1c>)
    7e8e:	6993      	ldr	r3, [r2, #24]
    7e90:	2108      	movs	r1, #8
    7e92:	430b      	orrs	r3, r1
    7e94:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    7e96:	2201      	movs	r2, #1
    7e98:	4b04      	ldr	r3, [pc, #16]	; (7eac <system_gclk_init+0x20>)
    7e9a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    7e9c:	0019      	movs	r1, r3
    7e9e:	780b      	ldrb	r3, [r1, #0]
    7ea0:	4213      	tst	r3, r2
    7ea2:	d1fc      	bne.n	7e9e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    7ea4:	4770      	bx	lr
    7ea6:	46c0      	nop			; (mov r8, r8)
    7ea8:	40000400 	.word	0x40000400
    7eac:	40000c00 	.word	0x40000c00

00007eb0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    7eb0:	b570      	push	{r4, r5, r6, lr}
    7eb2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    7eb4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    7eb6:	780d      	ldrb	r5, [r1, #0]
    7eb8:	022d      	lsls	r5, r5, #8
    7eba:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    7ebc:	784b      	ldrb	r3, [r1, #1]
    7ebe:	2b00      	cmp	r3, #0
    7ec0:	d002      	beq.n	7ec8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    7ec2:	2380      	movs	r3, #128	; 0x80
    7ec4:	02db      	lsls	r3, r3, #11
    7ec6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    7ec8:	7a4b      	ldrb	r3, [r1, #9]
    7eca:	2b00      	cmp	r3, #0
    7ecc:	d002      	beq.n	7ed4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    7ece:	2380      	movs	r3, #128	; 0x80
    7ed0:	031b      	lsls	r3, r3, #12
    7ed2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    7ed4:	6848      	ldr	r0, [r1, #4]
    7ed6:	2801      	cmp	r0, #1
    7ed8:	d910      	bls.n	7efc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    7eda:	1e43      	subs	r3, r0, #1
    7edc:	4218      	tst	r0, r3
    7ede:	d134      	bne.n	7f4a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    7ee0:	2802      	cmp	r0, #2
    7ee2:	d930      	bls.n	7f46 <system_gclk_gen_set_config+0x96>
    7ee4:	2302      	movs	r3, #2
    7ee6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    7ee8:	3201      	adds	r2, #1
						mask <<= 1) {
    7eea:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    7eec:	4298      	cmp	r0, r3
    7eee:	d8fb      	bhi.n	7ee8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    7ef0:	0212      	lsls	r2, r2, #8
    7ef2:	4332      	orrs	r2, r6
    7ef4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    7ef6:	2380      	movs	r3, #128	; 0x80
    7ef8:	035b      	lsls	r3, r3, #13
    7efa:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    7efc:	7a0b      	ldrb	r3, [r1, #8]
    7efe:	2b00      	cmp	r3, #0
    7f00:	d002      	beq.n	7f08 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    7f02:	2380      	movs	r3, #128	; 0x80
    7f04:	039b      	lsls	r3, r3, #14
    7f06:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    7f08:	4a13      	ldr	r2, [pc, #76]	; (7f58 <system_gclk_gen_set_config+0xa8>)
    7f0a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    7f0c:	b25b      	sxtb	r3, r3
    7f0e:	2b00      	cmp	r3, #0
    7f10:	dbfb      	blt.n	7f0a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    7f12:	4b12      	ldr	r3, [pc, #72]	; (7f5c <system_gclk_gen_set_config+0xac>)
    7f14:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    7f16:	4b12      	ldr	r3, [pc, #72]	; (7f60 <system_gclk_gen_set_config+0xb0>)
    7f18:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    7f1a:	4a0f      	ldr	r2, [pc, #60]	; (7f58 <system_gclk_gen_set_config+0xa8>)
    7f1c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    7f1e:	b25b      	sxtb	r3, r3
    7f20:	2b00      	cmp	r3, #0
    7f22:	dbfb      	blt.n	7f1c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    7f24:	4b0c      	ldr	r3, [pc, #48]	; (7f58 <system_gclk_gen_set_config+0xa8>)
    7f26:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    7f28:	001a      	movs	r2, r3
    7f2a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    7f2c:	b25b      	sxtb	r3, r3
    7f2e:	2b00      	cmp	r3, #0
    7f30:	dbfb      	blt.n	7f2a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    7f32:	4a09      	ldr	r2, [pc, #36]	; (7f58 <system_gclk_gen_set_config+0xa8>)
    7f34:	6853      	ldr	r3, [r2, #4]
    7f36:	2180      	movs	r1, #128	; 0x80
    7f38:	0249      	lsls	r1, r1, #9
    7f3a:	400b      	ands	r3, r1
    7f3c:	431d      	orrs	r5, r3
    7f3e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    7f40:	4b08      	ldr	r3, [pc, #32]	; (7f64 <system_gclk_gen_set_config+0xb4>)
    7f42:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    7f44:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    7f46:	2200      	movs	r2, #0
    7f48:	e7d2      	b.n	7ef0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    7f4a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    7f4c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    7f4e:	2380      	movs	r3, #128	; 0x80
    7f50:	029b      	lsls	r3, r3, #10
    7f52:	431d      	orrs	r5, r3
    7f54:	e7d2      	b.n	7efc <system_gclk_gen_set_config+0x4c>
    7f56:	46c0      	nop			; (mov r8, r8)
    7f58:	40000c00 	.word	0x40000c00
    7f5c:	00006aa9 	.word	0x00006aa9
    7f60:	40000c08 	.word	0x40000c08
    7f64:	00006ae9 	.word	0x00006ae9

00007f68 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    7f68:	b510      	push	{r4, lr}
    7f6a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    7f6c:	4a0b      	ldr	r2, [pc, #44]	; (7f9c <system_gclk_gen_enable+0x34>)
    7f6e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    7f70:	b25b      	sxtb	r3, r3
    7f72:	2b00      	cmp	r3, #0
    7f74:	dbfb      	blt.n	7f6e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    7f76:	4b0a      	ldr	r3, [pc, #40]	; (7fa0 <system_gclk_gen_enable+0x38>)
    7f78:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7f7a:	4b0a      	ldr	r3, [pc, #40]	; (7fa4 <system_gclk_gen_enable+0x3c>)
    7f7c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    7f7e:	4a07      	ldr	r2, [pc, #28]	; (7f9c <system_gclk_gen_enable+0x34>)
    7f80:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    7f82:	b25b      	sxtb	r3, r3
    7f84:	2b00      	cmp	r3, #0
    7f86:	dbfb      	blt.n	7f80 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    7f88:	4a04      	ldr	r2, [pc, #16]	; (7f9c <system_gclk_gen_enable+0x34>)
    7f8a:	6851      	ldr	r1, [r2, #4]
    7f8c:	2380      	movs	r3, #128	; 0x80
    7f8e:	025b      	lsls	r3, r3, #9
    7f90:	430b      	orrs	r3, r1
    7f92:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    7f94:	4b04      	ldr	r3, [pc, #16]	; (7fa8 <system_gclk_gen_enable+0x40>)
    7f96:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    7f98:	bd10      	pop	{r4, pc}
    7f9a:	46c0      	nop			; (mov r8, r8)
    7f9c:	40000c00 	.word	0x40000c00
    7fa0:	00006aa9 	.word	0x00006aa9
    7fa4:	40000c04 	.word	0x40000c04
    7fa8:	00006ae9 	.word	0x00006ae9

00007fac <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    7fac:	b570      	push	{r4, r5, r6, lr}
    7fae:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    7fb0:	4a1a      	ldr	r2, [pc, #104]	; (801c <system_gclk_gen_get_hz+0x70>)
    7fb2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    7fb4:	b25b      	sxtb	r3, r3
    7fb6:	2b00      	cmp	r3, #0
    7fb8:	dbfb      	blt.n	7fb2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    7fba:	4b19      	ldr	r3, [pc, #100]	; (8020 <system_gclk_gen_get_hz+0x74>)
    7fbc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7fbe:	4b19      	ldr	r3, [pc, #100]	; (8024 <system_gclk_gen_get_hz+0x78>)
    7fc0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    7fc2:	4a16      	ldr	r2, [pc, #88]	; (801c <system_gclk_gen_get_hz+0x70>)
    7fc4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    7fc6:	b25b      	sxtb	r3, r3
    7fc8:	2b00      	cmp	r3, #0
    7fca:	dbfb      	blt.n	7fc4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    7fcc:	4e13      	ldr	r6, [pc, #76]	; (801c <system_gclk_gen_get_hz+0x70>)
    7fce:	6870      	ldr	r0, [r6, #4]
    7fd0:	04c0      	lsls	r0, r0, #19
    7fd2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    7fd4:	4b14      	ldr	r3, [pc, #80]	; (8028 <system_gclk_gen_get_hz+0x7c>)
    7fd6:	4798      	blx	r3
    7fd8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7fda:	4b12      	ldr	r3, [pc, #72]	; (8024 <system_gclk_gen_get_hz+0x78>)
    7fdc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    7fde:	6876      	ldr	r6, [r6, #4]
    7fe0:	02f6      	lsls	r6, r6, #11
    7fe2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    7fe4:	4b11      	ldr	r3, [pc, #68]	; (802c <system_gclk_gen_get_hz+0x80>)
    7fe6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    7fe8:	4a0c      	ldr	r2, [pc, #48]	; (801c <system_gclk_gen_get_hz+0x70>)
    7fea:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    7fec:	b25b      	sxtb	r3, r3
    7fee:	2b00      	cmp	r3, #0
    7ff0:	dbfb      	blt.n	7fea <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    7ff2:	4b0a      	ldr	r3, [pc, #40]	; (801c <system_gclk_gen_get_hz+0x70>)
    7ff4:	689c      	ldr	r4, [r3, #8]
    7ff6:	0224      	lsls	r4, r4, #8
    7ff8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    7ffa:	4b0d      	ldr	r3, [pc, #52]	; (8030 <system_gclk_gen_get_hz+0x84>)
    7ffc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    7ffe:	2e00      	cmp	r6, #0
    8000:	d107      	bne.n	8012 <system_gclk_gen_get_hz+0x66>
    8002:	2c01      	cmp	r4, #1
    8004:	d907      	bls.n	8016 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    8006:	0021      	movs	r1, r4
    8008:	0028      	movs	r0, r5
    800a:	4b0a      	ldr	r3, [pc, #40]	; (8034 <system_gclk_gen_get_hz+0x88>)
    800c:	4798      	blx	r3
    800e:	0005      	movs	r5, r0
    8010:	e001      	b.n	8016 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    8012:	3401      	adds	r4, #1
    8014:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    8016:	0028      	movs	r0, r5
    8018:	bd70      	pop	{r4, r5, r6, pc}
    801a:	46c0      	nop			; (mov r8, r8)
    801c:	40000c00 	.word	0x40000c00
    8020:	00006aa9 	.word	0x00006aa9
    8024:	40000c04 	.word	0x40000c04
    8028:	00007af9 	.word	0x00007af9
    802c:	40000c08 	.word	0x40000c08
    8030:	00006ae9 	.word	0x00006ae9
    8034:	0000a915 	.word	0x0000a915

00008038 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    8038:	b510      	push	{r4, lr}
    803a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    803c:	4b06      	ldr	r3, [pc, #24]	; (8058 <system_gclk_chan_enable+0x20>)
    803e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8040:	4b06      	ldr	r3, [pc, #24]	; (805c <system_gclk_chan_enable+0x24>)
    8042:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    8044:	4a06      	ldr	r2, [pc, #24]	; (8060 <system_gclk_chan_enable+0x28>)
    8046:	8853      	ldrh	r3, [r2, #2]
    8048:	2180      	movs	r1, #128	; 0x80
    804a:	01c9      	lsls	r1, r1, #7
    804c:	430b      	orrs	r3, r1
    804e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    8050:	4b04      	ldr	r3, [pc, #16]	; (8064 <system_gclk_chan_enable+0x2c>)
    8052:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8054:	bd10      	pop	{r4, pc}
    8056:	46c0      	nop			; (mov r8, r8)
    8058:	00006aa9 	.word	0x00006aa9
    805c:	40000c02 	.word	0x40000c02
    8060:	40000c00 	.word	0x40000c00
    8064:	00006ae9 	.word	0x00006ae9

00008068 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8068:	b510      	push	{r4, lr}
    806a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    806c:	4b0f      	ldr	r3, [pc, #60]	; (80ac <system_gclk_chan_disable+0x44>)
    806e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8070:	4b0f      	ldr	r3, [pc, #60]	; (80b0 <system_gclk_chan_disable+0x48>)
    8072:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    8074:	4a0f      	ldr	r2, [pc, #60]	; (80b4 <system_gclk_chan_disable+0x4c>)
    8076:	8853      	ldrh	r3, [r2, #2]
    8078:	051b      	lsls	r3, r3, #20
    807a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    807c:	8853      	ldrh	r3, [r2, #2]
    807e:	490e      	ldr	r1, [pc, #56]	; (80b8 <system_gclk_chan_disable+0x50>)
    8080:	400b      	ands	r3, r1
    8082:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    8084:	8853      	ldrh	r3, [r2, #2]
    8086:	490d      	ldr	r1, [pc, #52]	; (80bc <system_gclk_chan_disable+0x54>)
    8088:	400b      	ands	r3, r1
    808a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    808c:	0011      	movs	r1, r2
    808e:	2280      	movs	r2, #128	; 0x80
    8090:	01d2      	lsls	r2, r2, #7
    8092:	884b      	ldrh	r3, [r1, #2]
    8094:	4213      	tst	r3, r2
    8096:	d1fc      	bne.n	8092 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    8098:	4906      	ldr	r1, [pc, #24]	; (80b4 <system_gclk_chan_disable+0x4c>)
    809a:	884a      	ldrh	r2, [r1, #2]
    809c:	0203      	lsls	r3, r0, #8
    809e:	4806      	ldr	r0, [pc, #24]	; (80b8 <system_gclk_chan_disable+0x50>)
    80a0:	4002      	ands	r2, r0
    80a2:	4313      	orrs	r3, r2
    80a4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    80a6:	4b06      	ldr	r3, [pc, #24]	; (80c0 <system_gclk_chan_disable+0x58>)
    80a8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    80aa:	bd10      	pop	{r4, pc}
    80ac:	00006aa9 	.word	0x00006aa9
    80b0:	40000c02 	.word	0x40000c02
    80b4:	40000c00 	.word	0x40000c00
    80b8:	fffff0ff 	.word	0xfffff0ff
    80bc:	ffffbfff 	.word	0xffffbfff
    80c0:	00006ae9 	.word	0x00006ae9

000080c4 <system_gclk_chan_set_config>:
{
    80c4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    80c6:	780c      	ldrb	r4, [r1, #0]
    80c8:	0224      	lsls	r4, r4, #8
    80ca:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    80cc:	4b02      	ldr	r3, [pc, #8]	; (80d8 <system_gclk_chan_set_config+0x14>)
    80ce:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    80d0:	b2a4      	uxth	r4, r4
    80d2:	4b02      	ldr	r3, [pc, #8]	; (80dc <system_gclk_chan_set_config+0x18>)
    80d4:	805c      	strh	r4, [r3, #2]
}
    80d6:	bd10      	pop	{r4, pc}
    80d8:	00008069 	.word	0x00008069
    80dc:	40000c00 	.word	0x40000c00

000080e0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    80e0:	b510      	push	{r4, lr}
    80e2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    80e4:	4b06      	ldr	r3, [pc, #24]	; (8100 <system_gclk_chan_get_hz+0x20>)
    80e6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    80e8:	4b06      	ldr	r3, [pc, #24]	; (8104 <system_gclk_chan_get_hz+0x24>)
    80ea:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    80ec:	4b06      	ldr	r3, [pc, #24]	; (8108 <system_gclk_chan_get_hz+0x28>)
    80ee:	885c      	ldrh	r4, [r3, #2]
    80f0:	0524      	lsls	r4, r4, #20
    80f2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    80f4:	4b05      	ldr	r3, [pc, #20]	; (810c <system_gclk_chan_get_hz+0x2c>)
    80f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    80f8:	0020      	movs	r0, r4
    80fa:	4b05      	ldr	r3, [pc, #20]	; (8110 <system_gclk_chan_get_hz+0x30>)
    80fc:	4798      	blx	r3
}
    80fe:	bd10      	pop	{r4, pc}
    8100:	00006aa9 	.word	0x00006aa9
    8104:	40000c02 	.word	0x40000c02
    8108:	40000c00 	.word	0x40000c00
    810c:	00006ae9 	.word	0x00006ae9
    8110:	00007fad 	.word	0x00007fad

00008114 <system_interrupt_clear_pending>:
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    8114:	2800      	cmp	r0, #0
    8116:	db08      	blt.n	812a <system_interrupt_clear_pending+0x16>
		NVIC->ICPR[0] = (1 << vector);
    8118:	2301      	movs	r3, #1
    811a:	4083      	lsls	r3, r0
    811c:	22c0      	movs	r2, #192	; 0xc0
    811e:	0052      	lsls	r2, r2, #1
    8120:	4906      	ldr	r1, [pc, #24]	; (813c <system_interrupt_clear_pending+0x28>)
    8122:	508b      	str	r3, [r1, r2]
	enum status_code status = STATUS_OK;
    8124:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    8126:	0018      	movs	r0, r3
    8128:	4770      	bx	lr
		status = STATUS_ERR_INVALID_ARG;
    812a:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    812c:	1c42      	adds	r2, r0, #1
    812e:	d1fa      	bne.n	8126 <system_interrupt_clear_pending+0x12>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
    8130:	2280      	movs	r2, #128	; 0x80
    8132:	0492      	lsls	r2, r2, #18
    8134:	4b02      	ldr	r3, [pc, #8]	; (8140 <system_interrupt_clear_pending+0x2c>)
    8136:	605a      	str	r2, [r3, #4]
	enum status_code status = STATUS_OK;
    8138:	2300      	movs	r3, #0
    813a:	e7f4      	b.n	8126 <system_interrupt_clear_pending+0x12>
    813c:	e000e100 	.word	0xe000e100
    8140:	e000ed00 	.word	0xe000ed00

00008144 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    8144:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    8146:	78d3      	ldrb	r3, [r2, #3]
    8148:	2b00      	cmp	r3, #0
    814a:	d135      	bne.n	81b8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    814c:	7813      	ldrb	r3, [r2, #0]
    814e:	2b80      	cmp	r3, #128	; 0x80
    8150:	d029      	beq.n	81a6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    8152:	061b      	lsls	r3, r3, #24
    8154:	2480      	movs	r4, #128	; 0x80
    8156:	0264      	lsls	r4, r4, #9
    8158:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    815a:	7854      	ldrb	r4, [r2, #1]
    815c:	2502      	movs	r5, #2
    815e:	43ac      	bics	r4, r5
    8160:	d106      	bne.n	8170 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    8162:	7894      	ldrb	r4, [r2, #2]
    8164:	2c00      	cmp	r4, #0
    8166:	d120      	bne.n	81aa <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    8168:	2480      	movs	r4, #128	; 0x80
    816a:	02a4      	lsls	r4, r4, #10
    816c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    816e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8170:	7854      	ldrb	r4, [r2, #1]
    8172:	3c01      	subs	r4, #1
    8174:	2c01      	cmp	r4, #1
    8176:	d91c      	bls.n	81b2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8178:	040d      	lsls	r5, r1, #16
    817a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    817c:	24a0      	movs	r4, #160	; 0xa0
    817e:	05e4      	lsls	r4, r4, #23
    8180:	432c      	orrs	r4, r5
    8182:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8184:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8186:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8188:	24d0      	movs	r4, #208	; 0xd0
    818a:	0624      	lsls	r4, r4, #24
    818c:	432c      	orrs	r4, r5
    818e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8190:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    8192:	78d4      	ldrb	r4, [r2, #3]
    8194:	2c00      	cmp	r4, #0
    8196:	d122      	bne.n	81de <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    8198:	035b      	lsls	r3, r3, #13
    819a:	d51c      	bpl.n	81d6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    819c:	7893      	ldrb	r3, [r2, #2]
    819e:	2b01      	cmp	r3, #1
    81a0:	d01e      	beq.n	81e0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    81a2:	6141      	str	r1, [r0, #20]
    81a4:	e017      	b.n	81d6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    81a6:	2300      	movs	r3, #0
    81a8:	e7d7      	b.n	815a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    81aa:	24c0      	movs	r4, #192	; 0xc0
    81ac:	02e4      	lsls	r4, r4, #11
    81ae:	4323      	orrs	r3, r4
    81b0:	e7dd      	b.n	816e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    81b2:	4c0d      	ldr	r4, [pc, #52]	; (81e8 <_system_pinmux_config+0xa4>)
    81b4:	4023      	ands	r3, r4
    81b6:	e7df      	b.n	8178 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    81b8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    81ba:	040c      	lsls	r4, r1, #16
    81bc:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    81be:	23a0      	movs	r3, #160	; 0xa0
    81c0:	05db      	lsls	r3, r3, #23
    81c2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    81c4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    81c6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    81c8:	23d0      	movs	r3, #208	; 0xd0
    81ca:	061b      	lsls	r3, r3, #24
    81cc:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    81ce:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    81d0:	78d3      	ldrb	r3, [r2, #3]
    81d2:	2b00      	cmp	r3, #0
    81d4:	d103      	bne.n	81de <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    81d6:	7853      	ldrb	r3, [r2, #1]
    81d8:	3b01      	subs	r3, #1
    81da:	2b01      	cmp	r3, #1
    81dc:	d902      	bls.n	81e4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    81de:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    81e0:	6181      	str	r1, [r0, #24]
    81e2:	e7f8      	b.n	81d6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    81e4:	6081      	str	r1, [r0, #8]
}
    81e6:	e7fa      	b.n	81de <_system_pinmux_config+0x9a>
    81e8:	fffbffff 	.word	0xfffbffff

000081ec <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    81ec:	b510      	push	{r4, lr}
    81ee:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    81f0:	09c1      	lsrs	r1, r0, #7
		return NULL;
    81f2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    81f4:	2900      	cmp	r1, #0
    81f6:	d104      	bne.n	8202 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    81f8:	0943      	lsrs	r3, r0, #5
    81fa:	01db      	lsls	r3, r3, #7
    81fc:	4905      	ldr	r1, [pc, #20]	; (8214 <system_pinmux_pin_set_config+0x28>)
    81fe:	468c      	mov	ip, r1
    8200:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    8202:	241f      	movs	r4, #31
    8204:	4020      	ands	r0, r4
    8206:	2101      	movs	r1, #1
    8208:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    820a:	0018      	movs	r0, r3
    820c:	4b02      	ldr	r3, [pc, #8]	; (8218 <system_pinmux_pin_set_config+0x2c>)
    820e:	4798      	blx	r3
}
    8210:	bd10      	pop	{r4, pc}
    8212:	46c0      	nop			; (mov r8, r8)
    8214:	41004400 	.word	0x41004400
    8218:	00008145 	.word	0x00008145

0000821c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    821c:	4770      	bx	lr
	...

00008220 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    8220:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    8222:	4b05      	ldr	r3, [pc, #20]	; (8238 <system_init+0x18>)
    8224:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    8226:	4b05      	ldr	r3, [pc, #20]	; (823c <system_init+0x1c>)
    8228:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    822a:	4b05      	ldr	r3, [pc, #20]	; (8240 <system_init+0x20>)
    822c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    822e:	4b05      	ldr	r3, [pc, #20]	; (8244 <system_init+0x24>)
    8230:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    8232:	4b05      	ldr	r3, [pc, #20]	; (8248 <system_init+0x28>)
    8234:	4798      	blx	r3
}
    8236:	bd10      	pop	{r4, pc}
    8238:	00007d15 	.word	0x00007d15
    823c:	00006b19 	.word	0x00006b19
    8240:	0000821d 	.word	0x0000821d
    8244:	00006bbd 	.word	0x00006bbd
    8248:	0000821d 	.word	0x0000821d

0000824c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    824c:	b5f0      	push	{r4, r5, r6, r7, lr}
    824e:	46c6      	mov	lr, r8
    8250:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    8252:	0080      	lsls	r0, r0, #2
    8254:	4b0e      	ldr	r3, [pc, #56]	; (8290 <_tcc_interrupt_handler+0x44>)
    8256:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    8258:	683b      	ldr	r3, [r7, #0]
    825a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    825c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    825e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8260:	4013      	ands	r3, r2
    8262:	401e      	ands	r6, r3
    8264:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    8266:	4b0b      	ldr	r3, [pc, #44]	; (8294 <_tcc_interrupt_handler+0x48>)
    8268:	4698      	mov	r8, r3
    826a:	e002      	b.n	8272 <_tcc_interrupt_handler+0x26>
    826c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    826e:	2c30      	cmp	r4, #48	; 0x30
    8270:	d00a      	beq.n	8288 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    8272:	4643      	mov	r3, r8
    8274:	58e5      	ldr	r5, [r4, r3]
    8276:	4235      	tst	r5, r6
    8278:	d0f8      	beq.n	826c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    827a:	193b      	adds	r3, r7, r4
    827c:	685b      	ldr	r3, [r3, #4]
    827e:	0038      	movs	r0, r7
    8280:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    8282:	683b      	ldr	r3, [r7, #0]
    8284:	62dd      	str	r5, [r3, #44]	; 0x2c
    8286:	e7f1      	b.n	826c <_tcc_interrupt_handler+0x20>
		}
	}
}
    8288:	bc04      	pop	{r2}
    828a:	4690      	mov	r8, r2
    828c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    828e:	46c0      	nop			; (mov r8, r8)
    8290:	20004ddc 	.word	0x20004ddc
    8294:	0000e7c8 	.word	0x0000e7c8

00008298 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    8298:	b510      	push	{r4, lr}
    829a:	2000      	movs	r0, #0
    829c:	4b01      	ldr	r3, [pc, #4]	; (82a4 <TCC0_Handler+0xc>)
    829e:	4798      	blx	r3
    82a0:	bd10      	pop	{r4, pc}
    82a2:	46c0      	nop			; (mov r8, r8)
    82a4:	0000824d 	.word	0x0000824d

000082a8 <TCC1_Handler>:
    82a8:	b510      	push	{r4, lr}
    82aa:	2001      	movs	r0, #1
    82ac:	4b01      	ldr	r3, [pc, #4]	; (82b4 <TCC1_Handler+0xc>)
    82ae:	4798      	blx	r3
    82b0:	bd10      	pop	{r4, pc}
    82b2:	46c0      	nop			; (mov r8, r8)
    82b4:	0000824d 	.word	0x0000824d

000082b8 <TCC2_Handler>:
    82b8:	b510      	push	{r4, lr}
    82ba:	2002      	movs	r0, #2
    82bc:	4b01      	ldr	r3, [pc, #4]	; (82c4 <TCC2_Handler+0xc>)
    82be:	4798      	blx	r3
    82c0:	bd10      	pop	{r4, pc}
    82c2:	46c0      	nop			; (mov r8, r8)
    82c4:	0000824d 	.word	0x0000824d

000082c8 <Dummy_Handler>:
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
  __asm volatile (
    82c8:	2004      	movs	r0, #4
    82ca:	4671      	mov	r1, lr
    82cc:	4208      	tst	r0, r1
    82ce:	d002      	beq.n	82d6 <_MSP>
    82d0:	f3ef 8009 	mrs	r0, PSP
    82d4:	e001      	b.n	82da <_HALT>

000082d6 <_MSP>:
    82d6:	f3ef 8008 	mrs	r0, MSP

000082da <_HALT>:
    82da:	6941      	ldr	r1, [r0, #20]
    82dc:	e074      	b.n	83c8 <HardFault_HandlerC>
    82de:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
    82e0:	4770      	bx	lr
	...

000082e4 <Reset_Handler>:
{
    82e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    82e6:	4a2a      	ldr	r2, [pc, #168]	; (8390 <Reset_Handler+0xac>)
    82e8:	4b2a      	ldr	r3, [pc, #168]	; (8394 <Reset_Handler+0xb0>)
    82ea:	429a      	cmp	r2, r3
    82ec:	d011      	beq.n	8312 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    82ee:	001a      	movs	r2, r3
    82f0:	4b29      	ldr	r3, [pc, #164]	; (8398 <Reset_Handler+0xb4>)
    82f2:	429a      	cmp	r2, r3
    82f4:	d20d      	bcs.n	8312 <Reset_Handler+0x2e>
    82f6:	4a29      	ldr	r2, [pc, #164]	; (839c <Reset_Handler+0xb8>)
    82f8:	3303      	adds	r3, #3
    82fa:	1a9b      	subs	r3, r3, r2
    82fc:	089b      	lsrs	r3, r3, #2
    82fe:	3301      	adds	r3, #1
    8300:	009b      	lsls	r3, r3, #2
    8302:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    8304:	4823      	ldr	r0, [pc, #140]	; (8394 <Reset_Handler+0xb0>)
    8306:	4922      	ldr	r1, [pc, #136]	; (8390 <Reset_Handler+0xac>)
    8308:	588c      	ldr	r4, [r1, r2]
    830a:	5084      	str	r4, [r0, r2]
    830c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    830e:	429a      	cmp	r2, r3
    8310:	d1fa      	bne.n	8308 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    8312:	4a23      	ldr	r2, [pc, #140]	; (83a0 <Reset_Handler+0xbc>)
    8314:	4b23      	ldr	r3, [pc, #140]	; (83a4 <Reset_Handler+0xc0>)
    8316:	429a      	cmp	r2, r3
    8318:	d20a      	bcs.n	8330 <Reset_Handler+0x4c>
    831a:	43d3      	mvns	r3, r2
    831c:	4921      	ldr	r1, [pc, #132]	; (83a4 <Reset_Handler+0xc0>)
    831e:	185b      	adds	r3, r3, r1
    8320:	2103      	movs	r1, #3
    8322:	438b      	bics	r3, r1
    8324:	3304      	adds	r3, #4
    8326:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    8328:	2100      	movs	r1, #0
    832a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    832c:	4293      	cmp	r3, r2
    832e:	d1fc      	bne.n	832a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8330:	4a1d      	ldr	r2, [pc, #116]	; (83a8 <Reset_Handler+0xc4>)
    8332:	21ff      	movs	r1, #255	; 0xff
    8334:	4b1d      	ldr	r3, [pc, #116]	; (83ac <Reset_Handler+0xc8>)
    8336:	438b      	bics	r3, r1
    8338:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    833a:	39fd      	subs	r1, #253	; 0xfd
    833c:	2390      	movs	r3, #144	; 0x90
    833e:	005b      	lsls	r3, r3, #1
    8340:	4a1b      	ldr	r2, [pc, #108]	; (83b0 <Reset_Handler+0xcc>)
    8342:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8344:	4a1b      	ldr	r2, [pc, #108]	; (83b4 <Reset_Handler+0xd0>)
    8346:	78d3      	ldrb	r3, [r2, #3]
    8348:	2503      	movs	r5, #3
    834a:	43ab      	bics	r3, r5
    834c:	2402      	movs	r4, #2
    834e:	4323      	orrs	r3, r4
    8350:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8352:	78d3      	ldrb	r3, [r2, #3]
    8354:	270c      	movs	r7, #12
    8356:	43bb      	bics	r3, r7
    8358:	2608      	movs	r6, #8
    835a:	4333      	orrs	r3, r6
    835c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    835e:	4b16      	ldr	r3, [pc, #88]	; (83b8 <Reset_Handler+0xd4>)
    8360:	7b98      	ldrb	r0, [r3, #14]
    8362:	2230      	movs	r2, #48	; 0x30
    8364:	4390      	bics	r0, r2
    8366:	2220      	movs	r2, #32
    8368:	4310      	orrs	r0, r2
    836a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    836c:	7b99      	ldrb	r1, [r3, #14]
    836e:	43b9      	bics	r1, r7
    8370:	4331      	orrs	r1, r6
    8372:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    8374:	7b9a      	ldrb	r2, [r3, #14]
    8376:	43aa      	bics	r2, r5
    8378:	4322      	orrs	r2, r4
    837a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    837c:	4a0f      	ldr	r2, [pc, #60]	; (83bc <Reset_Handler+0xd8>)
    837e:	6853      	ldr	r3, [r2, #4]
    8380:	2180      	movs	r1, #128	; 0x80
    8382:	430b      	orrs	r3, r1
    8384:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    8386:	4b0e      	ldr	r3, [pc, #56]	; (83c0 <Reset_Handler+0xdc>)
    8388:	4798      	blx	r3
        main();
    838a:	4b0e      	ldr	r3, [pc, #56]	; (83c4 <Reset_Handler+0xe0>)
    838c:	4798      	blx	r3
    838e:	e7fe      	b.n	838e <Reset_Handler+0xaa>
    8390:	0000ed68 	.word	0x0000ed68
    8394:	20000000 	.word	0x20000000
    8398:	20000208 	.word	0x20000208
    839c:	20000004 	.word	0x20000004
    83a0:	20000208 	.word	0x20000208
    83a4:	20004e84 	.word	0x20004e84
    83a8:	e000ed00 	.word	0xe000ed00
    83ac:	00000000 	.word	0x00000000
    83b0:	41007000 	.word	0x41007000
    83b4:	41005000 	.word	0x41005000
    83b8:	41004800 	.word	0x41004800
    83bc:	41004000 	.word	0x41004000
    83c0:	000085f1 	.word	0x000085f1
    83c4:	00008451 	.word	0x00008451

000083c8 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
    83c8:	b08e      	sub	sp, #56	; 0x38
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
    83ca:	6803      	ldr	r3, [r0, #0]
    83cc:	930d      	str	r3, [sp, #52]	; 0x34
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
    83ce:	6843      	ldr	r3, [r0, #4]
    83d0:	930c      	str	r3, [sp, #48]	; 0x30
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
    83d2:	6883      	ldr	r3, [r0, #8]
    83d4:	930b      	str	r3, [sp, #44]	; 0x2c
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
    83d6:	68c3      	ldr	r3, [r0, #12]
    83d8:	930a      	str	r3, [sp, #40]	; 0x28
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
    83da:	6903      	ldr	r3, [r0, #16]
    83dc:	9309      	str	r3, [sp, #36]	; 0x24
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
    83de:	6943      	ldr	r3, [r0, #20]
    83e0:	9308      	str	r3, [sp, #32]
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
    83e2:	6983      	ldr	r3, [r0, #24]
    83e4:	9307      	str	r3, [sp, #28]
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
    83e6:	69c3      	ldr	r3, [r0, #28]
    83e8:	9306      	str	r3, [sp, #24]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
    83ea:	4b0a      	ldr	r3, [pc, #40]	; (8414 <HardFault_HandlerC+0x4c>)
    83ec:	681b      	ldr	r3, [r3, #0]
    83ee:	9305      	str	r3, [sp, #20]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
    83f0:	4b09      	ldr	r3, [pc, #36]	; (8418 <HardFault_HandlerC+0x50>)
    83f2:	681b      	ldr	r3, [r3, #0]
    83f4:	9304      	str	r3, [sp, #16]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
    83f6:	4b09      	ldr	r3, [pc, #36]	; (841c <HardFault_HandlerC+0x54>)
    83f8:	681b      	ldr	r3, [r3, #0]
    83fa:	9303      	str	r3, [sp, #12]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
    83fc:	4b08      	ldr	r3, [pc, #32]	; (8420 <HardFault_HandlerC+0x58>)
    83fe:	681b      	ldr	r3, [r3, #0]
    8400:	9302      	str	r3, [sp, #8]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
    8402:	4b08      	ldr	r3, [pc, #32]	; (8424 <HardFault_HandlerC+0x5c>)
    8404:	681b      	ldr	r3, [r3, #0]
    8406:	9300      	str	r3, [sp, #0]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
    8408:	4b07      	ldr	r3, [pc, #28]	; (8428 <HardFault_HandlerC+0x60>)
    840a:	681b      	ldr	r3, [r3, #0]
    840c:	9301      	str	r3, [sp, #4]
	
	__asm("BKPT #0\n") ; // Break into the debugger
    840e:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
    8410:	b00e      	add	sp, #56	; 0x38
    8412:	4770      	bx	lr
    8414:	e000ed28 	.word	0xe000ed28
    8418:	e000ed2c 	.word	0xe000ed2c
    841c:	e000ed30 	.word	0xe000ed30
    8420:	e000ed3c 	.word	0xe000ed3c
    8424:	e000ed34 	.word	0xe000ed34
    8428:	e000ed38 	.word	0xe000ed38

0000842c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    842c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    842e:	4a06      	ldr	r2, [pc, #24]	; (8448 <_sbrk+0x1c>)
    8430:	6812      	ldr	r2, [r2, #0]
    8432:	2a00      	cmp	r2, #0
    8434:	d004      	beq.n	8440 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    8436:	4a04      	ldr	r2, [pc, #16]	; (8448 <_sbrk+0x1c>)
    8438:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    843a:	18c3      	adds	r3, r0, r3
    843c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    843e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    8440:	4902      	ldr	r1, [pc, #8]	; (844c <_sbrk+0x20>)
    8442:	4a01      	ldr	r2, [pc, #4]	; (8448 <_sbrk+0x1c>)
    8444:	6011      	str	r1, [r2, #0]
    8446:	e7f6      	b.n	8436 <_sbrk+0xa>
    8448:	20003844 	.word	0x20003844
    844c:	20006e88 	.word	0x20006e88

00008450 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    8450:	b510      	push	{r4, lr}
	/* Initialize the board. */
	system_init();
    8452:	4b05      	ldr	r3, [pc, #20]	; (8468 <main+0x18>)
    8454:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
    8456:	4b05      	ldr	r3, [pc, #20]	; (846c <main+0x1c>)
    8458:	4798      	blx	r3

	//Initialize trace capabilities
	 vTraceEnable(TRC_START);
    845a:	2001      	movs	r0, #1
    845c:	4b04      	ldr	r3, [pc, #16]	; (8470 <main+0x20>)
    845e:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
    8460:	4b04      	ldr	r3, [pc, #16]	; (8474 <main+0x24>)
    8462:	4798      	blx	r3

	return 0; //Will not get here
}
    8464:	2000      	movs	r0, #0
    8466:	bd10      	pop	{r4, pc}
    8468:	00008221 	.word	0x00008221
    846c:	00006865 	.word	0x00006865
    8470:	00002f8d 	.word	0x00002f8d
    8474:	00005825 	.word	0x00005825

00008478 <vApplicationDaemonTaskStartupHook>:
*					here will be called before other tasks are initialized.
* @param[in]        None
* @return           None
*****************************************************************************/
void vApplicationDaemonTaskStartupHook(void)
{
    8478:	b530      	push	{r4, r5, lr}
    847a:	b083      	sub	sp, #12
	 int result;
	 
	SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
    847c:	4834      	ldr	r0, [pc, #208]	; (8550 <vApplicationDaemonTaskStartupHook+0xd8>)
    847e:	4c35      	ldr	r4, [pc, #212]	; (8554 <vApplicationDaemonTaskStartupHook+0xdc>)
    8480:	47a0      	blx	r4

	/* Initialize HW that needs FreeRTOS Initialization */
	SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
    8482:	4835      	ldr	r0, [pc, #212]	; (8558 <vApplicationDaemonTaskStartupHook+0xe0>)
    8484:	47a0      	blx	r4
	if (I2cInitializeDriver() != STATUS_OK)
    8486:	4b35      	ldr	r3, [pc, #212]	; (855c <vApplicationDaemonTaskStartupHook+0xe4>)
    8488:	4798      	blx	r3
    848a:	2800      	cmp	r0, #0
    848c:	d053      	beq.n	8536 <vApplicationDaemonTaskStartupHook+0xbe>
	{
		SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
    848e:	4834      	ldr	r0, [pc, #208]	; (8560 <vApplicationDaemonTaskStartupHook+0xe8>)
    8490:	4b30      	ldr	r3, [pc, #192]	; (8554 <vApplicationDaemonTaskStartupHook+0xdc>)
    8492:	4798      	blx	r3
	
	/* Initialize the BME680 Sensor
     * Interface preference is updated as a parameter
     * For I2C : BME68X_I2C_INTF
     */
    result = bme68x_interface_init(&bme, BME68X_I2C_INTF);
    8494:	4d33      	ldr	r5, [pc, #204]	; (8564 <vApplicationDaemonTaskStartupHook+0xec>)
    8496:	2101      	movs	r1, #1
    8498:	0028      	movs	r0, r5
    849a:	4b33      	ldr	r3, [pc, #204]	; (8568 <vApplicationDaemonTaskStartupHook+0xf0>)
    849c:	4798      	blx	r3
    849e:	0004      	movs	r4, r0
	result |= bme68x_init(&bme);
    84a0:	0028      	movs	r0, r5
    84a2:	4b32      	ldr	r3, [pc, #200]	; (856c <vApplicationDaemonTaskStartupHook+0xf4>)
    84a4:	4798      	blx	r3
    84a6:	4304      	orrs	r4, r0
    84a8:	b264      	sxtb	r4, r4
	result |= bme68x_default_config(&bme);
    84aa:	0028      	movs	r0, r5
    84ac:	4b30      	ldr	r3, [pc, #192]	; (8570 <vApplicationDaemonTaskStartupHook+0xf8>)
    84ae:	4798      	blx	r3

	if (result != BME68X_OK) {
    84b0:	4320      	orrs	r0, r4
    84b2:	b240      	sxtb	r0, r0
    84b4:	2800      	cmp	r0, #0
    84b6:	d042      	beq.n	853e <vApplicationDaemonTaskStartupHook+0xc6>
		SerialConsoleWriteString("BME680 Initial failed!\r\n");
    84b8:	482e      	ldr	r0, [pc, #184]	; (8574 <vApplicationDaemonTaskStartupHook+0xfc>)
    84ba:	4b26      	ldr	r3, [pc, #152]	; (8554 <vApplicationDaemonTaskStartupHook+0xdc>)
    84bc:	4798      	blx	r3
	} else{
		SerialConsoleWriteString("BME680 Initialed Success!\r\n");
	}
	
	/* Configure SPI for LSM6DSO */
	configure_spi_master();
    84be:	4b2e      	ldr	r3, [pc, #184]	; (8578 <vApplicationDaemonTaskStartupHook+0x100>)
    84c0:	4798      	blx	r3
	dev_ctx = GetImuStruct();
    84c2:	4b2e      	ldr	r3, [pc, #184]	; (857c <vApplicationDaemonTaskStartupHook+0x104>)
    84c4:	4798      	blx	r3
    84c6:	4b2e      	ldr	r3, [pc, #184]	; (8580 <vApplicationDaemonTaskStartupHook+0x108>)
    84c8:	6018      	str	r0, [r3, #0]
		
	/* Passing device specific handle. */
	dev_ctx->handle = &spi_master_instance;
    84ca:	4b2e      	ldr	r3, [pc, #184]	; (8584 <vApplicationDaemonTaskStartupHook+0x10c>)
    84cc:	6083      	str	r3, [r0, #8]

	/* Initialize the IMU LSM6DSO Sensor */
	if(InitImu() == 0)
    84ce:	4b2e      	ldr	r3, [pc, #184]	; (8588 <vApplicationDaemonTaskStartupHook+0x110>)
    84d0:	4798      	blx	r3
    84d2:	2800      	cmp	r0, #0
    84d4:	d037      	beq.n	8546 <vApplicationDaemonTaskStartupHook+0xce>
	{
		SerialConsoleWriteString("IMU initialized!\r\n");
	} else {
		SerialConsoleWriteString("Could not initialize IMU\r\n");
    84d6:	482d      	ldr	r0, [pc, #180]	; (858c <vApplicationDaemonTaskStartupHook+0x114>)
    84d8:	4b1e      	ldr	r3, [pc, #120]	; (8554 <vApplicationDaemonTaskStartupHook+0xdc>)
    84da:	4798      	blx	r3
* @return           None
*****************************************************************************/
static void StartTasks(void)
{

snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
    84dc:	4b2c      	ldr	r3, [pc, #176]	; (8590 <vApplicationDaemonTaskStartupHook+0x118>)
    84de:	4798      	blx	r3
    84e0:	0003      	movs	r3, r0
    84e2:	4c2c      	ldr	r4, [pc, #176]	; (8594 <vApplicationDaemonTaskStartupHook+0x11c>)
    84e4:	4a2c      	ldr	r2, [pc, #176]	; (8598 <vApplicationDaemonTaskStartupHook+0x120>)
    84e6:	2140      	movs	r1, #64	; 0x40
    84e8:	0020      	movs	r0, r4
    84ea:	4d2c      	ldr	r5, [pc, #176]	; (859c <vApplicationDaemonTaskStartupHook+0x124>)
    84ec:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
    84ee:	0020      	movs	r0, r4
    84f0:	4b18      	ldr	r3, [pc, #96]	; (8554 <vApplicationDaemonTaskStartupHook+0xdc>)
    84f2:	4798      	blx	r3

//Initialize Tasks here
if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
    84f4:	4b2a      	ldr	r3, [pc, #168]	; (85a0 <vApplicationDaemonTaskStartupHook+0x128>)
    84f6:	9301      	str	r3, [sp, #4]
    84f8:	2304      	movs	r3, #4
    84fa:	9300      	str	r3, [sp, #0]
    84fc:	2300      	movs	r3, #0
    84fe:	22c8      	movs	r2, #200	; 0xc8
    8500:	0052      	lsls	r2, r2, #1
    8502:	4928      	ldr	r1, [pc, #160]	; (85a4 <vApplicationDaemonTaskStartupHook+0x12c>)
    8504:	4828      	ldr	r0, [pc, #160]	; (85a8 <vApplicationDaemonTaskStartupHook+0x130>)
    8506:	4c29      	ldr	r4, [pc, #164]	; (85ac <vApplicationDaemonTaskStartupHook+0x134>)
    8508:	47a0      	blx	r4
    850a:	2801      	cmp	r0, #1
    850c:	d002      	beq.n	8514 <vApplicationDaemonTaskStartupHook+0x9c>
	SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
    850e:	4828      	ldr	r0, [pc, #160]	; (85b0 <vApplicationDaemonTaskStartupHook+0x138>)
    8510:	4b10      	ldr	r3, [pc, #64]	; (8554 <vApplicationDaemonTaskStartupHook+0xdc>)
    8512:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
    8514:	4b1e      	ldr	r3, [pc, #120]	; (8590 <vApplicationDaemonTaskStartupHook+0x118>)
    8516:	4798      	blx	r3
    8518:	0003      	movs	r3, r0
    851a:	4c1e      	ldr	r4, [pc, #120]	; (8594 <vApplicationDaemonTaskStartupHook+0x11c>)
    851c:	4a25      	ldr	r2, [pc, #148]	; (85b4 <vApplicationDaemonTaskStartupHook+0x13c>)
    851e:	2140      	movs	r1, #64	; 0x40
    8520:	0020      	movs	r0, r4
    8522:	4d1e      	ldr	r5, [pc, #120]	; (859c <vApplicationDaemonTaskStartupHook+0x124>)
    8524:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
    8526:	0020      	movs	r0, r4
    8528:	4b0a      	ldr	r3, [pc, #40]	; (8554 <vApplicationDaemonTaskStartupHook+0xdc>)
    852a:	4798      	blx	r3
	vTaskSuspend(daemonTaskHandle);
    852c:	2000      	movs	r0, #0
    852e:	4b22      	ldr	r3, [pc, #136]	; (85b8 <vApplicationDaemonTaskStartupHook+0x140>)
    8530:	4798      	blx	r3
}
    8532:	b003      	add	sp, #12
    8534:	bd30      	pop	{r4, r5, pc}
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
    8536:	4821      	ldr	r0, [pc, #132]	; (85bc <vApplicationDaemonTaskStartupHook+0x144>)
    8538:	4b06      	ldr	r3, [pc, #24]	; (8554 <vApplicationDaemonTaskStartupHook+0xdc>)
    853a:	4798      	blx	r3
    853c:	e7aa      	b.n	8494 <vApplicationDaemonTaskStartupHook+0x1c>
		SerialConsoleWriteString("BME680 Initialed Success!\r\n");
    853e:	4820      	ldr	r0, [pc, #128]	; (85c0 <vApplicationDaemonTaskStartupHook+0x148>)
    8540:	4b04      	ldr	r3, [pc, #16]	; (8554 <vApplicationDaemonTaskStartupHook+0xdc>)
    8542:	4798      	blx	r3
    8544:	e7bb      	b.n	84be <vApplicationDaemonTaskStartupHook+0x46>
		SerialConsoleWriteString("IMU initialized!\r\n");
    8546:	481f      	ldr	r0, [pc, #124]	; (85c4 <vApplicationDaemonTaskStartupHook+0x14c>)
    8548:	4b02      	ldr	r3, [pc, #8]	; (8554 <vApplicationDaemonTaskStartupHook+0xdc>)
    854a:	4798      	blx	r3
    854c:	e7c6      	b.n	84dc <vApplicationDaemonTaskStartupHook+0x64>
    854e:	46c0      	nop			; (mov r8, r8)
    8550:	0000e7f8 	.word	0x0000e7f8
    8554:	0000698d 	.word	0x0000698d
    8558:	0000e81c 	.word	0x0000e81c
    855c:	00001e4d 	.word	0x00001e4d
    8560:	0000e834 	.word	0x0000e834
    8564:	20004df0 	.word	0x20004df0
    8568:	00001971 	.word	0x00001971
    856c:	00000e69 	.word	0x00000e69
    8570:	00001931 	.word	0x00001931
    8574:	0000e874 	.word	0x0000e874
    8578:	000027bd 	.word	0x000027bd
    857c:	00002719 	.word	0x00002719
    8580:	20004de8 	.word	0x20004de8
    8584:	200038e4 	.word	0x200038e4
    8588:	00002721 	.word	0x00002721
    858c:	0000e8c0 	.word	0x0000e8c0
    8590:	00004291 	.word	0x00004291
    8594:	20004e40 	.word	0x20004e40
    8598:	0000e8dc 	.word	0x0000e8dc
    859c:	000090c5 	.word	0x000090c5
    85a0:	20003848 	.word	0x20003848
    85a4:	0000e900 	.word	0x0000e900
    85a8:	00001b0d 	.word	0x00001b0d
    85ac:	00005581 	.word	0x00005581
    85b0:	0000e90c 	.word	0x0000e90c
    85b4:	0000e938 	.word	0x0000e938
    85b8:	00005d09 	.word	0x00005d09
    85bc:	0000e858 	.word	0x0000e858
    85c0:	0000e890 	.word	0x0000e890
    85c4:	0000e8ac 	.word	0x0000e8ac

000085c8 <vApplicationMallocFailedHook>:
	//stdio_serial_init(GetUsartModule(), EDBG_CDC_MODULE, &usart_conf);
	//usart_enable(&cdc_uart_module);
}

void vApplicationMallocFailedHook(void)
{
    85c8:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
    85ca:	4802      	ldr	r0, [pc, #8]	; (85d4 <vApplicationMallocFailedHook+0xc>)
    85cc:	4b02      	ldr	r3, [pc, #8]	; (85d8 <vApplicationMallocFailedHook+0x10>)
    85ce:	4798      	blx	r3
    85d0:	e7fe      	b.n	85d0 <vApplicationMallocFailedHook+0x8>
    85d2:	46c0      	nop			; (mov r8, r8)
    85d4:	0000e958 	.word	0x0000e958
    85d8:	0000698d 	.word	0x0000698d

000085dc <vApplicationStackOverflowHook>:
while(1);
}

void vApplicationStackOverflowHook(void)
{
    85dc:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
    85de:	4802      	ldr	r0, [pc, #8]	; (85e8 <vApplicationStackOverflowHook+0xc>)
    85e0:	4b02      	ldr	r3, [pc, #8]	; (85ec <vApplicationStackOverflowHook+0x10>)
    85e2:	4798      	blx	r3
    85e4:	e7fe      	b.n	85e4 <vApplicationStackOverflowHook+0x8>
    85e6:	46c0      	nop			; (mov r8, r8)
    85e8:	0000e984 	.word	0x0000e984
    85ec:	0000698d 	.word	0x0000698d

000085f0 <__libc_init_array>:
    85f0:	b570      	push	{r4, r5, r6, lr}
    85f2:	2600      	movs	r6, #0
    85f4:	4d0c      	ldr	r5, [pc, #48]	; (8628 <__libc_init_array+0x38>)
    85f6:	4c0d      	ldr	r4, [pc, #52]	; (862c <__libc_init_array+0x3c>)
    85f8:	1b64      	subs	r4, r4, r5
    85fa:	10a4      	asrs	r4, r4, #2
    85fc:	42a6      	cmp	r6, r4
    85fe:	d109      	bne.n	8614 <__libc_init_array+0x24>
    8600:	2600      	movs	r6, #0
    8602:	f006 fba1 	bl	ed48 <_init>
    8606:	4d0a      	ldr	r5, [pc, #40]	; (8630 <__libc_init_array+0x40>)
    8608:	4c0a      	ldr	r4, [pc, #40]	; (8634 <__libc_init_array+0x44>)
    860a:	1b64      	subs	r4, r4, r5
    860c:	10a4      	asrs	r4, r4, #2
    860e:	42a6      	cmp	r6, r4
    8610:	d105      	bne.n	861e <__libc_init_array+0x2e>
    8612:	bd70      	pop	{r4, r5, r6, pc}
    8614:	00b3      	lsls	r3, r6, #2
    8616:	58eb      	ldr	r3, [r5, r3]
    8618:	4798      	blx	r3
    861a:	3601      	adds	r6, #1
    861c:	e7ee      	b.n	85fc <__libc_init_array+0xc>
    861e:	00b3      	lsls	r3, r6, #2
    8620:	58eb      	ldr	r3, [r5, r3]
    8622:	4798      	blx	r3
    8624:	3601      	adds	r6, #1
    8626:	e7f2      	b.n	860e <__libc_init_array+0x1e>
    8628:	0000ed54 	.word	0x0000ed54
    862c:	0000ed54 	.word	0x0000ed54
    8630:	0000ed54 	.word	0x0000ed54
    8634:	0000ed58 	.word	0x0000ed58

00008638 <malloc>:
    8638:	b510      	push	{r4, lr}
    863a:	4b03      	ldr	r3, [pc, #12]	; (8648 <malloc+0x10>)
    863c:	0001      	movs	r1, r0
    863e:	6818      	ldr	r0, [r3, #0]
    8640:	f000 f860 	bl	8704 <_malloc_r>
    8644:	bd10      	pop	{r4, pc}
    8646:	46c0      	nop			; (mov r8, r8)
    8648:	20000038 	.word	0x20000038

0000864c <memcpy>:
    864c:	2300      	movs	r3, #0
    864e:	b510      	push	{r4, lr}
    8650:	429a      	cmp	r2, r3
    8652:	d100      	bne.n	8656 <memcpy+0xa>
    8654:	bd10      	pop	{r4, pc}
    8656:	5ccc      	ldrb	r4, [r1, r3]
    8658:	54c4      	strb	r4, [r0, r3]
    865a:	3301      	adds	r3, #1
    865c:	e7f8      	b.n	8650 <memcpy+0x4>

0000865e <memset>:
    865e:	0003      	movs	r3, r0
    8660:	1882      	adds	r2, r0, r2
    8662:	4293      	cmp	r3, r2
    8664:	d100      	bne.n	8668 <memset+0xa>
    8666:	4770      	bx	lr
    8668:	7019      	strb	r1, [r3, #0]
    866a:	3301      	adds	r3, #1
    866c:	e7f9      	b.n	8662 <memset+0x4>
	...

00008670 <_free_r>:
    8670:	b570      	push	{r4, r5, r6, lr}
    8672:	0005      	movs	r5, r0
    8674:	2900      	cmp	r1, #0
    8676:	d010      	beq.n	869a <_free_r+0x2a>
    8678:	1f0c      	subs	r4, r1, #4
    867a:	6823      	ldr	r3, [r4, #0]
    867c:	2b00      	cmp	r3, #0
    867e:	da00      	bge.n	8682 <_free_r+0x12>
    8680:	18e4      	adds	r4, r4, r3
    8682:	0028      	movs	r0, r5
    8684:	f001 fc97 	bl	9fb6 <__malloc_lock>
    8688:	4a1d      	ldr	r2, [pc, #116]	; (8700 <_free_r+0x90>)
    868a:	6813      	ldr	r3, [r2, #0]
    868c:	2b00      	cmp	r3, #0
    868e:	d105      	bne.n	869c <_free_r+0x2c>
    8690:	6063      	str	r3, [r4, #4]
    8692:	6014      	str	r4, [r2, #0]
    8694:	0028      	movs	r0, r5
    8696:	f001 fc8f 	bl	9fb8 <__malloc_unlock>
    869a:	bd70      	pop	{r4, r5, r6, pc}
    869c:	42a3      	cmp	r3, r4
    869e:	d909      	bls.n	86b4 <_free_r+0x44>
    86a0:	6821      	ldr	r1, [r4, #0]
    86a2:	1860      	adds	r0, r4, r1
    86a4:	4283      	cmp	r3, r0
    86a6:	d1f3      	bne.n	8690 <_free_r+0x20>
    86a8:	6818      	ldr	r0, [r3, #0]
    86aa:	685b      	ldr	r3, [r3, #4]
    86ac:	1841      	adds	r1, r0, r1
    86ae:	6021      	str	r1, [r4, #0]
    86b0:	e7ee      	b.n	8690 <_free_r+0x20>
    86b2:	0013      	movs	r3, r2
    86b4:	685a      	ldr	r2, [r3, #4]
    86b6:	2a00      	cmp	r2, #0
    86b8:	d001      	beq.n	86be <_free_r+0x4e>
    86ba:	42a2      	cmp	r2, r4
    86bc:	d9f9      	bls.n	86b2 <_free_r+0x42>
    86be:	6819      	ldr	r1, [r3, #0]
    86c0:	1858      	adds	r0, r3, r1
    86c2:	42a0      	cmp	r0, r4
    86c4:	d10b      	bne.n	86de <_free_r+0x6e>
    86c6:	6820      	ldr	r0, [r4, #0]
    86c8:	1809      	adds	r1, r1, r0
    86ca:	1858      	adds	r0, r3, r1
    86cc:	6019      	str	r1, [r3, #0]
    86ce:	4282      	cmp	r2, r0
    86d0:	d1e0      	bne.n	8694 <_free_r+0x24>
    86d2:	6810      	ldr	r0, [r2, #0]
    86d4:	6852      	ldr	r2, [r2, #4]
    86d6:	1841      	adds	r1, r0, r1
    86d8:	6019      	str	r1, [r3, #0]
    86da:	605a      	str	r2, [r3, #4]
    86dc:	e7da      	b.n	8694 <_free_r+0x24>
    86de:	42a0      	cmp	r0, r4
    86e0:	d902      	bls.n	86e8 <_free_r+0x78>
    86e2:	230c      	movs	r3, #12
    86e4:	602b      	str	r3, [r5, #0]
    86e6:	e7d5      	b.n	8694 <_free_r+0x24>
    86e8:	6821      	ldr	r1, [r4, #0]
    86ea:	1860      	adds	r0, r4, r1
    86ec:	4282      	cmp	r2, r0
    86ee:	d103      	bne.n	86f8 <_free_r+0x88>
    86f0:	6810      	ldr	r0, [r2, #0]
    86f2:	6852      	ldr	r2, [r2, #4]
    86f4:	1841      	adds	r1, r0, r1
    86f6:	6021      	str	r1, [r4, #0]
    86f8:	6062      	str	r2, [r4, #4]
    86fa:	605c      	str	r4, [r3, #4]
    86fc:	e7ca      	b.n	8694 <_free_r+0x24>
    86fe:	46c0      	nop			; (mov r8, r8)
    8700:	2000384c 	.word	0x2000384c

00008704 <_malloc_r>:
    8704:	2303      	movs	r3, #3
    8706:	b570      	push	{r4, r5, r6, lr}
    8708:	1ccd      	adds	r5, r1, #3
    870a:	439d      	bics	r5, r3
    870c:	3508      	adds	r5, #8
    870e:	0006      	movs	r6, r0
    8710:	2d0c      	cmp	r5, #12
    8712:	d21e      	bcs.n	8752 <_malloc_r+0x4e>
    8714:	250c      	movs	r5, #12
    8716:	42a9      	cmp	r1, r5
    8718:	d81d      	bhi.n	8756 <_malloc_r+0x52>
    871a:	0030      	movs	r0, r6
    871c:	f001 fc4b 	bl	9fb6 <__malloc_lock>
    8720:	4a25      	ldr	r2, [pc, #148]	; (87b8 <_malloc_r+0xb4>)
    8722:	6814      	ldr	r4, [r2, #0]
    8724:	0021      	movs	r1, r4
    8726:	2900      	cmp	r1, #0
    8728:	d119      	bne.n	875e <_malloc_r+0x5a>
    872a:	4c24      	ldr	r4, [pc, #144]	; (87bc <_malloc_r+0xb8>)
    872c:	6823      	ldr	r3, [r4, #0]
    872e:	2b00      	cmp	r3, #0
    8730:	d103      	bne.n	873a <_malloc_r+0x36>
    8732:	0030      	movs	r0, r6
    8734:	f000 fcb4 	bl	90a0 <_sbrk_r>
    8738:	6020      	str	r0, [r4, #0]
    873a:	0029      	movs	r1, r5
    873c:	0030      	movs	r0, r6
    873e:	f000 fcaf 	bl	90a0 <_sbrk_r>
    8742:	1c43      	adds	r3, r0, #1
    8744:	d12c      	bne.n	87a0 <_malloc_r+0x9c>
    8746:	230c      	movs	r3, #12
    8748:	0030      	movs	r0, r6
    874a:	6033      	str	r3, [r6, #0]
    874c:	f001 fc34 	bl	9fb8 <__malloc_unlock>
    8750:	e003      	b.n	875a <_malloc_r+0x56>
    8752:	2d00      	cmp	r5, #0
    8754:	dadf      	bge.n	8716 <_malloc_r+0x12>
    8756:	230c      	movs	r3, #12
    8758:	6033      	str	r3, [r6, #0]
    875a:	2000      	movs	r0, #0
    875c:	bd70      	pop	{r4, r5, r6, pc}
    875e:	680b      	ldr	r3, [r1, #0]
    8760:	1b5b      	subs	r3, r3, r5
    8762:	d41a      	bmi.n	879a <_malloc_r+0x96>
    8764:	2b0b      	cmp	r3, #11
    8766:	d903      	bls.n	8770 <_malloc_r+0x6c>
    8768:	600b      	str	r3, [r1, #0]
    876a:	18cc      	adds	r4, r1, r3
    876c:	6025      	str	r5, [r4, #0]
    876e:	e003      	b.n	8778 <_malloc_r+0x74>
    8770:	428c      	cmp	r4, r1
    8772:	d10e      	bne.n	8792 <_malloc_r+0x8e>
    8774:	6863      	ldr	r3, [r4, #4]
    8776:	6013      	str	r3, [r2, #0]
    8778:	0030      	movs	r0, r6
    877a:	f001 fc1d 	bl	9fb8 <__malloc_unlock>
    877e:	0020      	movs	r0, r4
    8780:	2207      	movs	r2, #7
    8782:	300b      	adds	r0, #11
    8784:	1d23      	adds	r3, r4, #4
    8786:	4390      	bics	r0, r2
    8788:	1ac3      	subs	r3, r0, r3
    878a:	d0e7      	beq.n	875c <_malloc_r+0x58>
    878c:	425a      	negs	r2, r3
    878e:	50e2      	str	r2, [r4, r3]
    8790:	e7e4      	b.n	875c <_malloc_r+0x58>
    8792:	684b      	ldr	r3, [r1, #4]
    8794:	6063      	str	r3, [r4, #4]
    8796:	000c      	movs	r4, r1
    8798:	e7ee      	b.n	8778 <_malloc_r+0x74>
    879a:	000c      	movs	r4, r1
    879c:	6849      	ldr	r1, [r1, #4]
    879e:	e7c2      	b.n	8726 <_malloc_r+0x22>
    87a0:	2303      	movs	r3, #3
    87a2:	1cc4      	adds	r4, r0, #3
    87a4:	439c      	bics	r4, r3
    87a6:	42a0      	cmp	r0, r4
    87a8:	d0e0      	beq.n	876c <_malloc_r+0x68>
    87aa:	1a21      	subs	r1, r4, r0
    87ac:	0030      	movs	r0, r6
    87ae:	f000 fc77 	bl	90a0 <_sbrk_r>
    87b2:	1c43      	adds	r3, r0, #1
    87b4:	d1da      	bne.n	876c <_malloc_r+0x68>
    87b6:	e7c6      	b.n	8746 <_malloc_r+0x42>
    87b8:	2000384c 	.word	0x2000384c
    87bc:	20003850 	.word	0x20003850

000087c0 <__cvt>:
    87c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    87c2:	b08b      	sub	sp, #44	; 0x2c
    87c4:	0014      	movs	r4, r2
    87c6:	1e1d      	subs	r5, r3, #0
    87c8:	9912      	ldr	r1, [sp, #72]	; 0x48
    87ca:	da53      	bge.n	8874 <__cvt+0xb4>
    87cc:	2480      	movs	r4, #128	; 0x80
    87ce:	0624      	lsls	r4, r4, #24
    87d0:	191b      	adds	r3, r3, r4
    87d2:	001d      	movs	r5, r3
    87d4:	0014      	movs	r4, r2
    87d6:	232d      	movs	r3, #45	; 0x2d
    87d8:	700b      	strb	r3, [r1, #0]
    87da:	2320      	movs	r3, #32
    87dc:	9e14      	ldr	r6, [sp, #80]	; 0x50
    87de:	2203      	movs	r2, #3
    87e0:	439e      	bics	r6, r3
    87e2:	2e46      	cmp	r6, #70	; 0x46
    87e4:	d007      	beq.n	87f6 <__cvt+0x36>
    87e6:	0033      	movs	r3, r6
    87e8:	3b45      	subs	r3, #69	; 0x45
    87ea:	4259      	negs	r1, r3
    87ec:	414b      	adcs	r3, r1
    87ee:	9910      	ldr	r1, [sp, #64]	; 0x40
    87f0:	3a01      	subs	r2, #1
    87f2:	18cb      	adds	r3, r1, r3
    87f4:	9310      	str	r3, [sp, #64]	; 0x40
    87f6:	ab09      	add	r3, sp, #36	; 0x24
    87f8:	9304      	str	r3, [sp, #16]
    87fa:	ab08      	add	r3, sp, #32
    87fc:	9303      	str	r3, [sp, #12]
    87fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8800:	9200      	str	r2, [sp, #0]
    8802:	9302      	str	r3, [sp, #8]
    8804:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8806:	0022      	movs	r2, r4
    8808:	9301      	str	r3, [sp, #4]
    880a:	002b      	movs	r3, r5
    880c:	f000 fdb4 	bl	9378 <_dtoa_r>
    8810:	0007      	movs	r7, r0
    8812:	2e47      	cmp	r6, #71	; 0x47
    8814:	d102      	bne.n	881c <__cvt+0x5c>
    8816:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8818:	07db      	lsls	r3, r3, #31
    881a:	d524      	bpl.n	8866 <__cvt+0xa6>
    881c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    881e:	18fb      	adds	r3, r7, r3
    8820:	9307      	str	r3, [sp, #28]
    8822:	2e46      	cmp	r6, #70	; 0x46
    8824:	d114      	bne.n	8850 <__cvt+0x90>
    8826:	783b      	ldrb	r3, [r7, #0]
    8828:	2b30      	cmp	r3, #48	; 0x30
    882a:	d10c      	bne.n	8846 <__cvt+0x86>
    882c:	2200      	movs	r2, #0
    882e:	2300      	movs	r3, #0
    8830:	0020      	movs	r0, r4
    8832:	0029      	movs	r1, r5
    8834:	f002 f9f4 	bl	ac20 <__aeabi_dcmpeq>
    8838:	2800      	cmp	r0, #0
    883a:	d104      	bne.n	8846 <__cvt+0x86>
    883c:	2301      	movs	r3, #1
    883e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8840:	1a9b      	subs	r3, r3, r2
    8842:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8844:	6013      	str	r3, [r2, #0]
    8846:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8848:	9a07      	ldr	r2, [sp, #28]
    884a:	681b      	ldr	r3, [r3, #0]
    884c:	18d3      	adds	r3, r2, r3
    884e:	9307      	str	r3, [sp, #28]
    8850:	2200      	movs	r2, #0
    8852:	2300      	movs	r3, #0
    8854:	0020      	movs	r0, r4
    8856:	0029      	movs	r1, r5
    8858:	f002 f9e2 	bl	ac20 <__aeabi_dcmpeq>
    885c:	2230      	movs	r2, #48	; 0x30
    885e:	2800      	cmp	r0, #0
    8860:	d00d      	beq.n	887e <__cvt+0xbe>
    8862:	9b07      	ldr	r3, [sp, #28]
    8864:	9309      	str	r3, [sp, #36]	; 0x24
    8866:	0038      	movs	r0, r7
    8868:	9b09      	ldr	r3, [sp, #36]	; 0x24
    886a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    886c:	1bdb      	subs	r3, r3, r7
    886e:	6013      	str	r3, [r2, #0]
    8870:	b00b      	add	sp, #44	; 0x2c
    8872:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8874:	2300      	movs	r3, #0
    8876:	e7af      	b.n	87d8 <__cvt+0x18>
    8878:	1c59      	adds	r1, r3, #1
    887a:	9109      	str	r1, [sp, #36]	; 0x24
    887c:	701a      	strb	r2, [r3, #0]
    887e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8880:	9907      	ldr	r1, [sp, #28]
    8882:	4299      	cmp	r1, r3
    8884:	d8f8      	bhi.n	8878 <__cvt+0xb8>
    8886:	e7ee      	b.n	8866 <__cvt+0xa6>

00008888 <__exponent>:
    8888:	b5f0      	push	{r4, r5, r6, r7, lr}
    888a:	232b      	movs	r3, #43	; 0x2b
    888c:	b085      	sub	sp, #20
    888e:	0007      	movs	r7, r0
    8890:	000c      	movs	r4, r1
    8892:	7002      	strb	r2, [r0, #0]
    8894:	1c86      	adds	r6, r0, #2
    8896:	2900      	cmp	r1, #0
    8898:	da01      	bge.n	889e <__exponent+0x16>
    889a:	232d      	movs	r3, #45	; 0x2d
    889c:	424c      	negs	r4, r1
    889e:	707b      	strb	r3, [r7, #1]
    88a0:	2c09      	cmp	r4, #9
    88a2:	dd23      	ble.n	88ec <__exponent+0x64>
    88a4:	ab02      	add	r3, sp, #8
    88a6:	1ddd      	adds	r5, r3, #7
    88a8:	1e6b      	subs	r3, r5, #1
    88aa:	0020      	movs	r0, r4
    88ac:	210a      	movs	r1, #10
    88ae:	9301      	str	r3, [sp, #4]
    88b0:	f002 f9a0 	bl	abf4 <__aeabi_idivmod>
    88b4:	1e6b      	subs	r3, r5, #1
    88b6:	3130      	adds	r1, #48	; 0x30
    88b8:	7019      	strb	r1, [r3, #0]
    88ba:	0020      	movs	r0, r4
    88bc:	210a      	movs	r1, #10
    88be:	f002 f8b3 	bl	aa28 <__divsi3>
    88c2:	0004      	movs	r4, r0
    88c4:	2809      	cmp	r0, #9
    88c6:	dc0a      	bgt.n	88de <__exponent+0x56>
    88c8:	3d02      	subs	r5, #2
    88ca:	3430      	adds	r4, #48	; 0x30
    88cc:	702c      	strb	r4, [r5, #0]
    88ce:	ab02      	add	r3, sp, #8
    88d0:	3307      	adds	r3, #7
    88d2:	0030      	movs	r0, r6
    88d4:	42ab      	cmp	r3, r5
    88d6:	d804      	bhi.n	88e2 <__exponent+0x5a>
    88d8:	1bc0      	subs	r0, r0, r7
    88da:	b005      	add	sp, #20
    88dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    88de:	9d01      	ldr	r5, [sp, #4]
    88e0:	e7e2      	b.n	88a8 <__exponent+0x20>
    88e2:	782b      	ldrb	r3, [r5, #0]
    88e4:	3501      	adds	r5, #1
    88e6:	7033      	strb	r3, [r6, #0]
    88e8:	3601      	adds	r6, #1
    88ea:	e7f0      	b.n	88ce <__exponent+0x46>
    88ec:	2330      	movs	r3, #48	; 0x30
    88ee:	18e4      	adds	r4, r4, r3
    88f0:	7033      	strb	r3, [r6, #0]
    88f2:	1cb0      	adds	r0, r6, #2
    88f4:	7074      	strb	r4, [r6, #1]
    88f6:	e7ef      	b.n	88d8 <__exponent+0x50>

000088f8 <_printf_float>:
    88f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    88fa:	b095      	sub	sp, #84	; 0x54
    88fc:	000c      	movs	r4, r1
    88fe:	920a      	str	r2, [sp, #40]	; 0x28
    8900:	930b      	str	r3, [sp, #44]	; 0x2c
    8902:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    8904:	9009      	str	r0, [sp, #36]	; 0x24
    8906:	f001 fb2d 	bl	9f64 <_localeconv_r>
    890a:	6803      	ldr	r3, [r0, #0]
    890c:	0018      	movs	r0, r3
    890e:	930d      	str	r3, [sp, #52]	; 0x34
    8910:	f000 fc4a 	bl	91a8 <strlen>
    8914:	2300      	movs	r3, #0
    8916:	9312      	str	r3, [sp, #72]	; 0x48
    8918:	6823      	ldr	r3, [r4, #0]
    891a:	900e      	str	r0, [sp, #56]	; 0x38
    891c:	930c      	str	r3, [sp, #48]	; 0x30
    891e:	990c      	ldr	r1, [sp, #48]	; 0x30
    8920:	7e27      	ldrb	r7, [r4, #24]
    8922:	682b      	ldr	r3, [r5, #0]
    8924:	2207      	movs	r2, #7
    8926:	05c9      	lsls	r1, r1, #23
    8928:	d547      	bpl.n	89ba <_printf_float+0xc2>
    892a:	189b      	adds	r3, r3, r2
    892c:	4393      	bics	r3, r2
    892e:	001a      	movs	r2, r3
    8930:	3208      	adds	r2, #8
    8932:	602a      	str	r2, [r5, #0]
    8934:	681a      	ldr	r2, [r3, #0]
    8936:	685b      	ldr	r3, [r3, #4]
    8938:	64a2      	str	r2, [r4, #72]	; 0x48
    893a:	64e3      	str	r3, [r4, #76]	; 0x4c
    893c:	2201      	movs	r2, #1
    893e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    8940:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    8942:	006b      	lsls	r3, r5, #1
    8944:	085b      	lsrs	r3, r3, #1
    8946:	930f      	str	r3, [sp, #60]	; 0x3c
    8948:	4252      	negs	r2, r2
    894a:	4ba7      	ldr	r3, [pc, #668]	; (8be8 <_printf_float+0x2f0>)
    894c:	0030      	movs	r0, r6
    894e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8950:	f004 fdde 	bl	d510 <__aeabi_dcmpun>
    8954:	2800      	cmp	r0, #0
    8956:	d000      	beq.n	895a <_printf_float+0x62>
    8958:	e206      	b.n	8d68 <_printf_float+0x470>
    895a:	2201      	movs	r2, #1
    895c:	4ba2      	ldr	r3, [pc, #648]	; (8be8 <_printf_float+0x2f0>)
    895e:	4252      	negs	r2, r2
    8960:	0030      	movs	r0, r6
    8962:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8964:	f002 f96c 	bl	ac40 <__aeabi_dcmple>
    8968:	2800      	cmp	r0, #0
    896a:	d000      	beq.n	896e <_printf_float+0x76>
    896c:	e1fc      	b.n	8d68 <_printf_float+0x470>
    896e:	2200      	movs	r2, #0
    8970:	2300      	movs	r3, #0
    8972:	0030      	movs	r0, r6
    8974:	0029      	movs	r1, r5
    8976:	f002 f959 	bl	ac2c <__aeabi_dcmplt>
    897a:	2800      	cmp	r0, #0
    897c:	d003      	beq.n	8986 <_printf_float+0x8e>
    897e:	0023      	movs	r3, r4
    8980:	222d      	movs	r2, #45	; 0x2d
    8982:	3343      	adds	r3, #67	; 0x43
    8984:	701a      	strb	r2, [r3, #0]
    8986:	4d99      	ldr	r5, [pc, #612]	; (8bec <_printf_float+0x2f4>)
    8988:	2f47      	cmp	r7, #71	; 0x47
    898a:	d800      	bhi.n	898e <_printf_float+0x96>
    898c:	4d98      	ldr	r5, [pc, #608]	; (8bf0 <_printf_float+0x2f8>)
    898e:	2303      	movs	r3, #3
    8990:	2600      	movs	r6, #0
    8992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8994:	6123      	str	r3, [r4, #16]
    8996:	3301      	adds	r3, #1
    8998:	439a      	bics	r2, r3
    899a:	6022      	str	r2, [r4, #0]
    899c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    899e:	aa13      	add	r2, sp, #76	; 0x4c
    89a0:	9300      	str	r3, [sp, #0]
    89a2:	0021      	movs	r1, r4
    89a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    89a6:	9809      	ldr	r0, [sp, #36]	; 0x24
    89a8:	f000 f9f2 	bl	8d90 <_printf_common>
    89ac:	1c43      	adds	r3, r0, #1
    89ae:	d000      	beq.n	89b2 <_printf_float+0xba>
    89b0:	e09c      	b.n	8aec <_printf_float+0x1f4>
    89b2:	2001      	movs	r0, #1
    89b4:	4240      	negs	r0, r0
    89b6:	b015      	add	sp, #84	; 0x54
    89b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89ba:	3307      	adds	r3, #7
    89bc:	e7b6      	b.n	892c <_printf_float+0x34>
    89be:	2380      	movs	r3, #128	; 0x80
    89c0:	6862      	ldr	r2, [r4, #4]
    89c2:	00db      	lsls	r3, r3, #3
    89c4:	1c51      	adds	r1, r2, #1
    89c6:	d145      	bne.n	8a54 <_printf_float+0x15c>
    89c8:	3207      	adds	r2, #7
    89ca:	6062      	str	r2, [r4, #4]
    89cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    89ce:	2100      	movs	r1, #0
    89d0:	4313      	orrs	r3, r2
    89d2:	aa12      	add	r2, sp, #72	; 0x48
    89d4:	9205      	str	r2, [sp, #20]
    89d6:	aa11      	add	r2, sp, #68	; 0x44
    89d8:	9203      	str	r2, [sp, #12]
    89da:	2223      	movs	r2, #35	; 0x23
    89dc:	6023      	str	r3, [r4, #0]
    89de:	9106      	str	r1, [sp, #24]
    89e0:	9301      	str	r3, [sp, #4]
    89e2:	a908      	add	r1, sp, #32
    89e4:	6863      	ldr	r3, [r4, #4]
    89e6:	1852      	adds	r2, r2, r1
    89e8:	9202      	str	r2, [sp, #8]
    89ea:	9300      	str	r3, [sp, #0]
    89ec:	0032      	movs	r2, r6
    89ee:	002b      	movs	r3, r5
    89f0:	9704      	str	r7, [sp, #16]
    89f2:	9809      	ldr	r0, [sp, #36]	; 0x24
    89f4:	f7ff fee4 	bl	87c0 <__cvt>
    89f8:	2320      	movs	r3, #32
    89fa:	003a      	movs	r2, r7
    89fc:	0005      	movs	r5, r0
    89fe:	439a      	bics	r2, r3
    8a00:	2a47      	cmp	r2, #71	; 0x47
    8a02:	d107      	bne.n	8a14 <_printf_float+0x11c>
    8a04:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a06:	1cda      	adds	r2, r3, #3
    8a08:	db02      	blt.n	8a10 <_printf_float+0x118>
    8a0a:	6862      	ldr	r2, [r4, #4]
    8a0c:	4293      	cmp	r3, r2
    8a0e:	dd5b      	ble.n	8ac8 <_printf_float+0x1d0>
    8a10:	3f02      	subs	r7, #2
    8a12:	b2ff      	uxtb	r7, r7
    8a14:	9911      	ldr	r1, [sp, #68]	; 0x44
    8a16:	2f65      	cmp	r7, #101	; 0x65
    8a18:	d83b      	bhi.n	8a92 <_printf_float+0x19a>
    8a1a:	0020      	movs	r0, r4
    8a1c:	3901      	subs	r1, #1
    8a1e:	003a      	movs	r2, r7
    8a20:	3050      	adds	r0, #80	; 0x50
    8a22:	9111      	str	r1, [sp, #68]	; 0x44
    8a24:	f7ff ff30 	bl	8888 <__exponent>
    8a28:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8a2a:	0006      	movs	r6, r0
    8a2c:	1883      	adds	r3, r0, r2
    8a2e:	6123      	str	r3, [r4, #16]
    8a30:	2a01      	cmp	r2, #1
    8a32:	dc02      	bgt.n	8a3a <_printf_float+0x142>
    8a34:	6822      	ldr	r2, [r4, #0]
    8a36:	07d2      	lsls	r2, r2, #31
    8a38:	d501      	bpl.n	8a3e <_printf_float+0x146>
    8a3a:	3301      	adds	r3, #1
    8a3c:	6123      	str	r3, [r4, #16]
    8a3e:	2323      	movs	r3, #35	; 0x23
    8a40:	aa08      	add	r2, sp, #32
    8a42:	189b      	adds	r3, r3, r2
    8a44:	781b      	ldrb	r3, [r3, #0]
    8a46:	2b00      	cmp	r3, #0
    8a48:	d0a8      	beq.n	899c <_printf_float+0xa4>
    8a4a:	0023      	movs	r3, r4
    8a4c:	222d      	movs	r2, #45	; 0x2d
    8a4e:	3343      	adds	r3, #67	; 0x43
    8a50:	701a      	strb	r2, [r3, #0]
    8a52:	e7a3      	b.n	899c <_printf_float+0xa4>
    8a54:	2f67      	cmp	r7, #103	; 0x67
    8a56:	d001      	beq.n	8a5c <_printf_float+0x164>
    8a58:	2f47      	cmp	r7, #71	; 0x47
    8a5a:	d1b7      	bne.n	89cc <_printf_float+0xd4>
    8a5c:	2a00      	cmp	r2, #0
    8a5e:	d016      	beq.n	8a8e <_printf_float+0x196>
    8a60:	990c      	ldr	r1, [sp, #48]	; 0x30
    8a62:	a808      	add	r0, sp, #32
    8a64:	430b      	orrs	r3, r1
    8a66:	2100      	movs	r1, #0
    8a68:	9106      	str	r1, [sp, #24]
    8a6a:	a912      	add	r1, sp, #72	; 0x48
    8a6c:	9105      	str	r1, [sp, #20]
    8a6e:	a911      	add	r1, sp, #68	; 0x44
    8a70:	9103      	str	r1, [sp, #12]
    8a72:	2123      	movs	r1, #35	; 0x23
    8a74:	1809      	adds	r1, r1, r0
    8a76:	6023      	str	r3, [r4, #0]
    8a78:	9301      	str	r3, [sp, #4]
    8a7a:	9200      	str	r2, [sp, #0]
    8a7c:	002b      	movs	r3, r5
    8a7e:	9704      	str	r7, [sp, #16]
    8a80:	9102      	str	r1, [sp, #8]
    8a82:	0032      	movs	r2, r6
    8a84:	9809      	ldr	r0, [sp, #36]	; 0x24
    8a86:	f7ff fe9b 	bl	87c0 <__cvt>
    8a8a:	0005      	movs	r5, r0
    8a8c:	e7ba      	b.n	8a04 <_printf_float+0x10c>
    8a8e:	2201      	movs	r2, #1
    8a90:	e79b      	b.n	89ca <_printf_float+0xd2>
    8a92:	2f66      	cmp	r7, #102	; 0x66
    8a94:	d119      	bne.n	8aca <_printf_float+0x1d2>
    8a96:	6863      	ldr	r3, [r4, #4]
    8a98:	2900      	cmp	r1, #0
    8a9a:	dd0c      	ble.n	8ab6 <_printf_float+0x1be>
    8a9c:	6121      	str	r1, [r4, #16]
    8a9e:	2b00      	cmp	r3, #0
    8aa0:	d102      	bne.n	8aa8 <_printf_float+0x1b0>
    8aa2:	6822      	ldr	r2, [r4, #0]
    8aa4:	07d2      	lsls	r2, r2, #31
    8aa6:	d502      	bpl.n	8aae <_printf_float+0x1b6>
    8aa8:	3301      	adds	r3, #1
    8aaa:	185b      	adds	r3, r3, r1
    8aac:	6123      	str	r3, [r4, #16]
    8aae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ab0:	2600      	movs	r6, #0
    8ab2:	65a3      	str	r3, [r4, #88]	; 0x58
    8ab4:	e7c3      	b.n	8a3e <_printf_float+0x146>
    8ab6:	2b00      	cmp	r3, #0
    8ab8:	d103      	bne.n	8ac2 <_printf_float+0x1ca>
    8aba:	2201      	movs	r2, #1
    8abc:	6821      	ldr	r1, [r4, #0]
    8abe:	4211      	tst	r1, r2
    8ac0:	d000      	beq.n	8ac4 <_printf_float+0x1cc>
    8ac2:	1c9a      	adds	r2, r3, #2
    8ac4:	6122      	str	r2, [r4, #16]
    8ac6:	e7f2      	b.n	8aae <_printf_float+0x1b6>
    8ac8:	2767      	movs	r7, #103	; 0x67
    8aca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8acc:	9812      	ldr	r0, [sp, #72]	; 0x48
    8ace:	4283      	cmp	r3, r0
    8ad0:	db05      	blt.n	8ade <_printf_float+0x1e6>
    8ad2:	6822      	ldr	r2, [r4, #0]
    8ad4:	6123      	str	r3, [r4, #16]
    8ad6:	07d2      	lsls	r2, r2, #31
    8ad8:	d5e9      	bpl.n	8aae <_printf_float+0x1b6>
    8ada:	3301      	adds	r3, #1
    8adc:	e7e6      	b.n	8aac <_printf_float+0x1b4>
    8ade:	2201      	movs	r2, #1
    8ae0:	2b00      	cmp	r3, #0
    8ae2:	dc01      	bgt.n	8ae8 <_printf_float+0x1f0>
    8ae4:	1892      	adds	r2, r2, r2
    8ae6:	1ad2      	subs	r2, r2, r3
    8ae8:	1812      	adds	r2, r2, r0
    8aea:	e7eb      	b.n	8ac4 <_printf_float+0x1cc>
    8aec:	6822      	ldr	r2, [r4, #0]
    8aee:	0553      	lsls	r3, r2, #21
    8af0:	d408      	bmi.n	8b04 <_printf_float+0x20c>
    8af2:	6923      	ldr	r3, [r4, #16]
    8af4:	002a      	movs	r2, r5
    8af6:	990a      	ldr	r1, [sp, #40]	; 0x28
    8af8:	9809      	ldr	r0, [sp, #36]	; 0x24
    8afa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8afc:	47a8      	blx	r5
    8afe:	1c43      	adds	r3, r0, #1
    8b00:	d129      	bne.n	8b56 <_printf_float+0x25e>
    8b02:	e756      	b.n	89b2 <_printf_float+0xba>
    8b04:	2f65      	cmp	r7, #101	; 0x65
    8b06:	d800      	bhi.n	8b0a <_printf_float+0x212>
    8b08:	e0dc      	b.n	8cc4 <_printf_float+0x3cc>
    8b0a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    8b0c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    8b0e:	2200      	movs	r2, #0
    8b10:	2300      	movs	r3, #0
    8b12:	f002 f885 	bl	ac20 <__aeabi_dcmpeq>
    8b16:	2800      	cmp	r0, #0
    8b18:	d035      	beq.n	8b86 <_printf_float+0x28e>
    8b1a:	2301      	movs	r3, #1
    8b1c:	4a35      	ldr	r2, [pc, #212]	; (8bf4 <_printf_float+0x2fc>)
    8b1e:	990a      	ldr	r1, [sp, #40]	; 0x28
    8b20:	9809      	ldr	r0, [sp, #36]	; 0x24
    8b22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8b24:	47a8      	blx	r5
    8b26:	1c43      	adds	r3, r0, #1
    8b28:	d100      	bne.n	8b2c <_printf_float+0x234>
    8b2a:	e742      	b.n	89b2 <_printf_float+0xba>
    8b2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8b2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8b30:	4293      	cmp	r3, r2
    8b32:	db02      	blt.n	8b3a <_printf_float+0x242>
    8b34:	6823      	ldr	r3, [r4, #0]
    8b36:	07db      	lsls	r3, r3, #31
    8b38:	d50d      	bpl.n	8b56 <_printf_float+0x25e>
    8b3a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8b3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8b40:	990a      	ldr	r1, [sp, #40]	; 0x28
    8b42:	9809      	ldr	r0, [sp, #36]	; 0x24
    8b44:	47a8      	blx	r5
    8b46:	2500      	movs	r5, #0
    8b48:	1c43      	adds	r3, r0, #1
    8b4a:	d100      	bne.n	8b4e <_printf_float+0x256>
    8b4c:	e731      	b.n	89b2 <_printf_float+0xba>
    8b4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b50:	3b01      	subs	r3, #1
    8b52:	429d      	cmp	r5, r3
    8b54:	db0b      	blt.n	8b6e <_printf_float+0x276>
    8b56:	6823      	ldr	r3, [r4, #0]
    8b58:	2500      	movs	r5, #0
    8b5a:	079b      	lsls	r3, r3, #30
    8b5c:	d500      	bpl.n	8b60 <_printf_float+0x268>
    8b5e:	e0fd      	b.n	8d5c <_printf_float+0x464>
    8b60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8b62:	68e0      	ldr	r0, [r4, #12]
    8b64:	4298      	cmp	r0, r3
    8b66:	db00      	blt.n	8b6a <_printf_float+0x272>
    8b68:	e725      	b.n	89b6 <_printf_float+0xbe>
    8b6a:	0018      	movs	r0, r3
    8b6c:	e723      	b.n	89b6 <_printf_float+0xbe>
    8b6e:	0022      	movs	r2, r4
    8b70:	2301      	movs	r3, #1
    8b72:	321a      	adds	r2, #26
    8b74:	990a      	ldr	r1, [sp, #40]	; 0x28
    8b76:	9809      	ldr	r0, [sp, #36]	; 0x24
    8b78:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8b7a:	47b0      	blx	r6
    8b7c:	1c43      	adds	r3, r0, #1
    8b7e:	d100      	bne.n	8b82 <_printf_float+0x28a>
    8b80:	e717      	b.n	89b2 <_printf_float+0xba>
    8b82:	3501      	adds	r5, #1
    8b84:	e7e3      	b.n	8b4e <_printf_float+0x256>
    8b86:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8b88:	2b00      	cmp	r3, #0
    8b8a:	dc35      	bgt.n	8bf8 <_printf_float+0x300>
    8b8c:	2301      	movs	r3, #1
    8b8e:	4a19      	ldr	r2, [pc, #100]	; (8bf4 <_printf_float+0x2fc>)
    8b90:	990a      	ldr	r1, [sp, #40]	; 0x28
    8b92:	9809      	ldr	r0, [sp, #36]	; 0x24
    8b94:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8b96:	47b0      	blx	r6
    8b98:	1c43      	adds	r3, r0, #1
    8b9a:	d100      	bne.n	8b9e <_printf_float+0x2a6>
    8b9c:	e709      	b.n	89b2 <_printf_float+0xba>
    8b9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ba0:	2b00      	cmp	r3, #0
    8ba2:	d105      	bne.n	8bb0 <_printf_float+0x2b8>
    8ba4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ba6:	2b00      	cmp	r3, #0
    8ba8:	d102      	bne.n	8bb0 <_printf_float+0x2b8>
    8baa:	6823      	ldr	r3, [r4, #0]
    8bac:	07db      	lsls	r3, r3, #31
    8bae:	d5d2      	bpl.n	8b56 <_printf_float+0x25e>
    8bb0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8bb6:	990a      	ldr	r1, [sp, #40]	; 0x28
    8bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
    8bba:	47b0      	blx	r6
    8bbc:	2600      	movs	r6, #0
    8bbe:	1c43      	adds	r3, r0, #1
    8bc0:	d100      	bne.n	8bc4 <_printf_float+0x2cc>
    8bc2:	e6f6      	b.n	89b2 <_printf_float+0xba>
    8bc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8bc6:	425b      	negs	r3, r3
    8bc8:	429e      	cmp	r6, r3
    8bca:	db01      	blt.n	8bd0 <_printf_float+0x2d8>
    8bcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8bce:	e791      	b.n	8af4 <_printf_float+0x1fc>
    8bd0:	0022      	movs	r2, r4
    8bd2:	2301      	movs	r3, #1
    8bd4:	321a      	adds	r2, #26
    8bd6:	990a      	ldr	r1, [sp, #40]	; 0x28
    8bd8:	9809      	ldr	r0, [sp, #36]	; 0x24
    8bda:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    8bdc:	47b8      	blx	r7
    8bde:	1c43      	adds	r3, r0, #1
    8be0:	d100      	bne.n	8be4 <_printf_float+0x2ec>
    8be2:	e6e6      	b.n	89b2 <_printf_float+0xba>
    8be4:	3601      	adds	r6, #1
    8be6:	e7ed      	b.n	8bc4 <_printf_float+0x2cc>
    8be8:	7fefffff 	.word	0x7fefffff
    8bec:	0000e9b0 	.word	0x0000e9b0
    8bf0:	0000e9ac 	.word	0x0000e9ac
    8bf4:	0000e9bc 	.word	0x0000e9bc
    8bf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
    8bfa:	9e12      	ldr	r6, [sp, #72]	; 0x48
    8bfc:	429e      	cmp	r6, r3
    8bfe:	dd00      	ble.n	8c02 <_printf_float+0x30a>
    8c00:	001e      	movs	r6, r3
    8c02:	2e00      	cmp	r6, #0
    8c04:	dc35      	bgt.n	8c72 <_printf_float+0x37a>
    8c06:	2300      	movs	r3, #0
    8c08:	930c      	str	r3, [sp, #48]	; 0x30
    8c0a:	43f3      	mvns	r3, r6
    8c0c:	17db      	asrs	r3, r3, #31
    8c0e:	930f      	str	r3, [sp, #60]	; 0x3c
    8c10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c12:	6da7      	ldr	r7, [r4, #88]	; 0x58
    8c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8c16:	4033      	ands	r3, r6
    8c18:	1afb      	subs	r3, r7, r3
    8c1a:	429a      	cmp	r2, r3
    8c1c:	db32      	blt.n	8c84 <_printf_float+0x38c>
    8c1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8c20:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8c22:	4293      	cmp	r3, r2
    8c24:	db3c      	blt.n	8ca0 <_printf_float+0x3a8>
    8c26:	6823      	ldr	r3, [r4, #0]
    8c28:	07db      	lsls	r3, r3, #31
    8c2a:	d439      	bmi.n	8ca0 <_printf_float+0x3a8>
    8c2c:	9e12      	ldr	r6, [sp, #72]	; 0x48
    8c2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8c30:	1bf3      	subs	r3, r6, r7
    8c32:	1ab6      	subs	r6, r6, r2
    8c34:	429e      	cmp	r6, r3
    8c36:	dd00      	ble.n	8c3a <_printf_float+0x342>
    8c38:	001e      	movs	r6, r3
    8c3a:	2e00      	cmp	r6, #0
    8c3c:	dc39      	bgt.n	8cb2 <_printf_float+0x3ba>
    8c3e:	43f7      	mvns	r7, r6
    8c40:	2500      	movs	r5, #0
    8c42:	17fb      	asrs	r3, r7, #31
    8c44:	930c      	str	r3, [sp, #48]	; 0x30
    8c46:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8c48:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c4a:	990c      	ldr	r1, [sp, #48]	; 0x30
    8c4c:	1a9b      	subs	r3, r3, r2
    8c4e:	0032      	movs	r2, r6
    8c50:	400a      	ands	r2, r1
    8c52:	1a9b      	subs	r3, r3, r2
    8c54:	429d      	cmp	r5, r3
    8c56:	db00      	blt.n	8c5a <_printf_float+0x362>
    8c58:	e77d      	b.n	8b56 <_printf_float+0x25e>
    8c5a:	0022      	movs	r2, r4
    8c5c:	2301      	movs	r3, #1
    8c5e:	321a      	adds	r2, #26
    8c60:	990a      	ldr	r1, [sp, #40]	; 0x28
    8c62:	9809      	ldr	r0, [sp, #36]	; 0x24
    8c64:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    8c66:	47b8      	blx	r7
    8c68:	1c43      	adds	r3, r0, #1
    8c6a:	d100      	bne.n	8c6e <_printf_float+0x376>
    8c6c:	e6a1      	b.n	89b2 <_printf_float+0xba>
    8c6e:	3501      	adds	r5, #1
    8c70:	e7e9      	b.n	8c46 <_printf_float+0x34e>
    8c72:	0033      	movs	r3, r6
    8c74:	002a      	movs	r2, r5
    8c76:	990a      	ldr	r1, [sp, #40]	; 0x28
    8c78:	9809      	ldr	r0, [sp, #36]	; 0x24
    8c7a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    8c7c:	47b8      	blx	r7
    8c7e:	1c43      	adds	r3, r0, #1
    8c80:	d1c1      	bne.n	8c06 <_printf_float+0x30e>
    8c82:	e696      	b.n	89b2 <_printf_float+0xba>
    8c84:	0022      	movs	r2, r4
    8c86:	2301      	movs	r3, #1
    8c88:	321a      	adds	r2, #26
    8c8a:	990a      	ldr	r1, [sp, #40]	; 0x28
    8c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
    8c8e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    8c90:	47b8      	blx	r7
    8c92:	1c43      	adds	r3, r0, #1
    8c94:	d100      	bne.n	8c98 <_printf_float+0x3a0>
    8c96:	e68c      	b.n	89b2 <_printf_float+0xba>
    8c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8c9a:	3301      	adds	r3, #1
    8c9c:	930c      	str	r3, [sp, #48]	; 0x30
    8c9e:	e7b7      	b.n	8c10 <_printf_float+0x318>
    8ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8ca2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8ca4:	990a      	ldr	r1, [sp, #40]	; 0x28
    8ca6:	9809      	ldr	r0, [sp, #36]	; 0x24
    8ca8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8caa:	47b0      	blx	r6
    8cac:	1c43      	adds	r3, r0, #1
    8cae:	d1bd      	bne.n	8c2c <_printf_float+0x334>
    8cb0:	e67f      	b.n	89b2 <_printf_float+0xba>
    8cb2:	19ea      	adds	r2, r5, r7
    8cb4:	0033      	movs	r3, r6
    8cb6:	990a      	ldr	r1, [sp, #40]	; 0x28
    8cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
    8cba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8cbc:	47a8      	blx	r5
    8cbe:	1c43      	adds	r3, r0, #1
    8cc0:	d1bd      	bne.n	8c3e <_printf_float+0x346>
    8cc2:	e676      	b.n	89b2 <_printf_float+0xba>
    8cc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8cc6:	2b01      	cmp	r3, #1
    8cc8:	dc02      	bgt.n	8cd0 <_printf_float+0x3d8>
    8cca:	2301      	movs	r3, #1
    8ccc:	421a      	tst	r2, r3
    8cce:	d038      	beq.n	8d42 <_printf_float+0x44a>
    8cd0:	2301      	movs	r3, #1
    8cd2:	002a      	movs	r2, r5
    8cd4:	990a      	ldr	r1, [sp, #40]	; 0x28
    8cd6:	9809      	ldr	r0, [sp, #36]	; 0x24
    8cd8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    8cda:	47b8      	blx	r7
    8cdc:	1c43      	adds	r3, r0, #1
    8cde:	d100      	bne.n	8ce2 <_printf_float+0x3ea>
    8ce0:	e667      	b.n	89b2 <_printf_float+0xba>
    8ce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8ce4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8ce6:	990a      	ldr	r1, [sp, #40]	; 0x28
    8ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
    8cea:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    8cec:	47b8      	blx	r7
    8cee:	1c43      	adds	r3, r0, #1
    8cf0:	d100      	bne.n	8cf4 <_printf_float+0x3fc>
    8cf2:	e65e      	b.n	89b2 <_printf_float+0xba>
    8cf4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    8cf6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    8cf8:	2200      	movs	r2, #0
    8cfa:	2300      	movs	r3, #0
    8cfc:	f001 ff90 	bl	ac20 <__aeabi_dcmpeq>
    8d00:	2800      	cmp	r0, #0
    8d02:	d008      	beq.n	8d16 <_printf_float+0x41e>
    8d04:	2500      	movs	r5, #0
    8d06:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d08:	3b01      	subs	r3, #1
    8d0a:	429d      	cmp	r5, r3
    8d0c:	db0d      	blt.n	8d2a <_printf_float+0x432>
    8d0e:	0022      	movs	r2, r4
    8d10:	0033      	movs	r3, r6
    8d12:	3250      	adds	r2, #80	; 0x50
    8d14:	e6ef      	b.n	8af6 <_printf_float+0x1fe>
    8d16:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d18:	1c6a      	adds	r2, r5, #1
    8d1a:	3b01      	subs	r3, #1
    8d1c:	990a      	ldr	r1, [sp, #40]	; 0x28
    8d1e:	9809      	ldr	r0, [sp, #36]	; 0x24
    8d20:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8d22:	47a8      	blx	r5
    8d24:	1c43      	adds	r3, r0, #1
    8d26:	d1f2      	bne.n	8d0e <_printf_float+0x416>
    8d28:	e643      	b.n	89b2 <_printf_float+0xba>
    8d2a:	0022      	movs	r2, r4
    8d2c:	2301      	movs	r3, #1
    8d2e:	321a      	adds	r2, #26
    8d30:	990a      	ldr	r1, [sp, #40]	; 0x28
    8d32:	9809      	ldr	r0, [sp, #36]	; 0x24
    8d34:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    8d36:	47b8      	blx	r7
    8d38:	1c43      	adds	r3, r0, #1
    8d3a:	d100      	bne.n	8d3e <_printf_float+0x446>
    8d3c:	e639      	b.n	89b2 <_printf_float+0xba>
    8d3e:	3501      	adds	r5, #1
    8d40:	e7e1      	b.n	8d06 <_printf_float+0x40e>
    8d42:	002a      	movs	r2, r5
    8d44:	e7ea      	b.n	8d1c <_printf_float+0x424>
    8d46:	0022      	movs	r2, r4
    8d48:	2301      	movs	r3, #1
    8d4a:	3219      	adds	r2, #25
    8d4c:	990a      	ldr	r1, [sp, #40]	; 0x28
    8d4e:	9809      	ldr	r0, [sp, #36]	; 0x24
    8d50:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8d52:	47b0      	blx	r6
    8d54:	1c43      	adds	r3, r0, #1
    8d56:	d100      	bne.n	8d5a <_printf_float+0x462>
    8d58:	e62b      	b.n	89b2 <_printf_float+0xba>
    8d5a:	3501      	adds	r5, #1
    8d5c:	68e3      	ldr	r3, [r4, #12]
    8d5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8d60:	1a9b      	subs	r3, r3, r2
    8d62:	429d      	cmp	r5, r3
    8d64:	dbef      	blt.n	8d46 <_printf_float+0x44e>
    8d66:	e6fb      	b.n	8b60 <_printf_float+0x268>
    8d68:	0032      	movs	r2, r6
    8d6a:	002b      	movs	r3, r5
    8d6c:	0030      	movs	r0, r6
    8d6e:	0029      	movs	r1, r5
    8d70:	f004 fbce 	bl	d510 <__aeabi_dcmpun>
    8d74:	2800      	cmp	r0, #0
    8d76:	d100      	bne.n	8d7a <_printf_float+0x482>
    8d78:	e621      	b.n	89be <_printf_float+0xc6>
    8d7a:	4d03      	ldr	r5, [pc, #12]	; (8d88 <_printf_float+0x490>)
    8d7c:	2f47      	cmp	r7, #71	; 0x47
    8d7e:	d900      	bls.n	8d82 <_printf_float+0x48a>
    8d80:	e605      	b.n	898e <_printf_float+0x96>
    8d82:	4d02      	ldr	r5, [pc, #8]	; (8d8c <_printf_float+0x494>)
    8d84:	e603      	b.n	898e <_printf_float+0x96>
    8d86:	46c0      	nop			; (mov r8, r8)
    8d88:	0000e9b8 	.word	0x0000e9b8
    8d8c:	0000e9b4 	.word	0x0000e9b4

00008d90 <_printf_common>:
    8d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8d92:	0015      	movs	r5, r2
    8d94:	9301      	str	r3, [sp, #4]
    8d96:	688a      	ldr	r2, [r1, #8]
    8d98:	690b      	ldr	r3, [r1, #16]
    8d9a:	9000      	str	r0, [sp, #0]
    8d9c:	000c      	movs	r4, r1
    8d9e:	4293      	cmp	r3, r2
    8da0:	da00      	bge.n	8da4 <_printf_common+0x14>
    8da2:	0013      	movs	r3, r2
    8da4:	0022      	movs	r2, r4
    8da6:	602b      	str	r3, [r5, #0]
    8da8:	3243      	adds	r2, #67	; 0x43
    8daa:	7812      	ldrb	r2, [r2, #0]
    8dac:	2a00      	cmp	r2, #0
    8dae:	d001      	beq.n	8db4 <_printf_common+0x24>
    8db0:	3301      	adds	r3, #1
    8db2:	602b      	str	r3, [r5, #0]
    8db4:	6823      	ldr	r3, [r4, #0]
    8db6:	069b      	lsls	r3, r3, #26
    8db8:	d502      	bpl.n	8dc0 <_printf_common+0x30>
    8dba:	682b      	ldr	r3, [r5, #0]
    8dbc:	3302      	adds	r3, #2
    8dbe:	602b      	str	r3, [r5, #0]
    8dc0:	2706      	movs	r7, #6
    8dc2:	6823      	ldr	r3, [r4, #0]
    8dc4:	401f      	ands	r7, r3
    8dc6:	d027      	beq.n	8e18 <_printf_common+0x88>
    8dc8:	0023      	movs	r3, r4
    8dca:	3343      	adds	r3, #67	; 0x43
    8dcc:	781b      	ldrb	r3, [r3, #0]
    8dce:	1e5a      	subs	r2, r3, #1
    8dd0:	4193      	sbcs	r3, r2
    8dd2:	6822      	ldr	r2, [r4, #0]
    8dd4:	0692      	lsls	r2, r2, #26
    8dd6:	d430      	bmi.n	8e3a <_printf_common+0xaa>
    8dd8:	0022      	movs	r2, r4
    8dda:	9901      	ldr	r1, [sp, #4]
    8ddc:	3243      	adds	r2, #67	; 0x43
    8dde:	9800      	ldr	r0, [sp, #0]
    8de0:	9e08      	ldr	r6, [sp, #32]
    8de2:	47b0      	blx	r6
    8de4:	1c43      	adds	r3, r0, #1
    8de6:	d025      	beq.n	8e34 <_printf_common+0xa4>
    8de8:	2306      	movs	r3, #6
    8dea:	6820      	ldr	r0, [r4, #0]
    8dec:	682a      	ldr	r2, [r5, #0]
    8dee:	68e1      	ldr	r1, [r4, #12]
    8df0:	4003      	ands	r3, r0
    8df2:	2500      	movs	r5, #0
    8df4:	2b04      	cmp	r3, #4
    8df6:	d103      	bne.n	8e00 <_printf_common+0x70>
    8df8:	1a8d      	subs	r5, r1, r2
    8dfa:	43eb      	mvns	r3, r5
    8dfc:	17db      	asrs	r3, r3, #31
    8dfe:	401d      	ands	r5, r3
    8e00:	68a3      	ldr	r3, [r4, #8]
    8e02:	6922      	ldr	r2, [r4, #16]
    8e04:	4293      	cmp	r3, r2
    8e06:	dd01      	ble.n	8e0c <_printf_common+0x7c>
    8e08:	1a9b      	subs	r3, r3, r2
    8e0a:	18ed      	adds	r5, r5, r3
    8e0c:	2700      	movs	r7, #0
    8e0e:	42bd      	cmp	r5, r7
    8e10:	d120      	bne.n	8e54 <_printf_common+0xc4>
    8e12:	2000      	movs	r0, #0
    8e14:	e010      	b.n	8e38 <_printf_common+0xa8>
    8e16:	3701      	adds	r7, #1
    8e18:	68e3      	ldr	r3, [r4, #12]
    8e1a:	682a      	ldr	r2, [r5, #0]
    8e1c:	1a9b      	subs	r3, r3, r2
    8e1e:	429f      	cmp	r7, r3
    8e20:	dad2      	bge.n	8dc8 <_printf_common+0x38>
    8e22:	0022      	movs	r2, r4
    8e24:	2301      	movs	r3, #1
    8e26:	3219      	adds	r2, #25
    8e28:	9901      	ldr	r1, [sp, #4]
    8e2a:	9800      	ldr	r0, [sp, #0]
    8e2c:	9e08      	ldr	r6, [sp, #32]
    8e2e:	47b0      	blx	r6
    8e30:	1c43      	adds	r3, r0, #1
    8e32:	d1f0      	bne.n	8e16 <_printf_common+0x86>
    8e34:	2001      	movs	r0, #1
    8e36:	4240      	negs	r0, r0
    8e38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8e3a:	2030      	movs	r0, #48	; 0x30
    8e3c:	18e1      	adds	r1, r4, r3
    8e3e:	3143      	adds	r1, #67	; 0x43
    8e40:	7008      	strb	r0, [r1, #0]
    8e42:	0021      	movs	r1, r4
    8e44:	1c5a      	adds	r2, r3, #1
    8e46:	3145      	adds	r1, #69	; 0x45
    8e48:	7809      	ldrb	r1, [r1, #0]
    8e4a:	18a2      	adds	r2, r4, r2
    8e4c:	3243      	adds	r2, #67	; 0x43
    8e4e:	3302      	adds	r3, #2
    8e50:	7011      	strb	r1, [r2, #0]
    8e52:	e7c1      	b.n	8dd8 <_printf_common+0x48>
    8e54:	0022      	movs	r2, r4
    8e56:	2301      	movs	r3, #1
    8e58:	321a      	adds	r2, #26
    8e5a:	9901      	ldr	r1, [sp, #4]
    8e5c:	9800      	ldr	r0, [sp, #0]
    8e5e:	9e08      	ldr	r6, [sp, #32]
    8e60:	47b0      	blx	r6
    8e62:	1c43      	adds	r3, r0, #1
    8e64:	d0e6      	beq.n	8e34 <_printf_common+0xa4>
    8e66:	3701      	adds	r7, #1
    8e68:	e7d1      	b.n	8e0e <_printf_common+0x7e>
	...

00008e6c <_printf_i>:
    8e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e6e:	b08b      	sub	sp, #44	; 0x2c
    8e70:	9206      	str	r2, [sp, #24]
    8e72:	000a      	movs	r2, r1
    8e74:	3243      	adds	r2, #67	; 0x43
    8e76:	9307      	str	r3, [sp, #28]
    8e78:	9005      	str	r0, [sp, #20]
    8e7a:	9204      	str	r2, [sp, #16]
    8e7c:	7e0a      	ldrb	r2, [r1, #24]
    8e7e:	000c      	movs	r4, r1
    8e80:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8e82:	2a6e      	cmp	r2, #110	; 0x6e
    8e84:	d100      	bne.n	8e88 <_printf_i+0x1c>
    8e86:	e08f      	b.n	8fa8 <_printf_i+0x13c>
    8e88:	d817      	bhi.n	8eba <_printf_i+0x4e>
    8e8a:	2a63      	cmp	r2, #99	; 0x63
    8e8c:	d02c      	beq.n	8ee8 <_printf_i+0x7c>
    8e8e:	d808      	bhi.n	8ea2 <_printf_i+0x36>
    8e90:	2a00      	cmp	r2, #0
    8e92:	d100      	bne.n	8e96 <_printf_i+0x2a>
    8e94:	e099      	b.n	8fca <_printf_i+0x15e>
    8e96:	2a58      	cmp	r2, #88	; 0x58
    8e98:	d054      	beq.n	8f44 <_printf_i+0xd8>
    8e9a:	0026      	movs	r6, r4
    8e9c:	3642      	adds	r6, #66	; 0x42
    8e9e:	7032      	strb	r2, [r6, #0]
    8ea0:	e029      	b.n	8ef6 <_printf_i+0x8a>
    8ea2:	2a64      	cmp	r2, #100	; 0x64
    8ea4:	d001      	beq.n	8eaa <_printf_i+0x3e>
    8ea6:	2a69      	cmp	r2, #105	; 0x69
    8ea8:	d1f7      	bne.n	8e9a <_printf_i+0x2e>
    8eaa:	6821      	ldr	r1, [r4, #0]
    8eac:	681a      	ldr	r2, [r3, #0]
    8eae:	0608      	lsls	r0, r1, #24
    8eb0:	d523      	bpl.n	8efa <_printf_i+0x8e>
    8eb2:	1d11      	adds	r1, r2, #4
    8eb4:	6019      	str	r1, [r3, #0]
    8eb6:	6815      	ldr	r5, [r2, #0]
    8eb8:	e025      	b.n	8f06 <_printf_i+0x9a>
    8eba:	2a73      	cmp	r2, #115	; 0x73
    8ebc:	d100      	bne.n	8ec0 <_printf_i+0x54>
    8ebe:	e088      	b.n	8fd2 <_printf_i+0x166>
    8ec0:	d808      	bhi.n	8ed4 <_printf_i+0x68>
    8ec2:	2a6f      	cmp	r2, #111	; 0x6f
    8ec4:	d029      	beq.n	8f1a <_printf_i+0xae>
    8ec6:	2a70      	cmp	r2, #112	; 0x70
    8ec8:	d1e7      	bne.n	8e9a <_printf_i+0x2e>
    8eca:	2220      	movs	r2, #32
    8ecc:	6809      	ldr	r1, [r1, #0]
    8ece:	430a      	orrs	r2, r1
    8ed0:	6022      	str	r2, [r4, #0]
    8ed2:	e003      	b.n	8edc <_printf_i+0x70>
    8ed4:	2a75      	cmp	r2, #117	; 0x75
    8ed6:	d020      	beq.n	8f1a <_printf_i+0xae>
    8ed8:	2a78      	cmp	r2, #120	; 0x78
    8eda:	d1de      	bne.n	8e9a <_printf_i+0x2e>
    8edc:	0022      	movs	r2, r4
    8ede:	2178      	movs	r1, #120	; 0x78
    8ee0:	3245      	adds	r2, #69	; 0x45
    8ee2:	7011      	strb	r1, [r2, #0]
    8ee4:	4a6c      	ldr	r2, [pc, #432]	; (9098 <_printf_i+0x22c>)
    8ee6:	e030      	b.n	8f4a <_printf_i+0xde>
    8ee8:	000e      	movs	r6, r1
    8eea:	681a      	ldr	r2, [r3, #0]
    8eec:	3642      	adds	r6, #66	; 0x42
    8eee:	1d11      	adds	r1, r2, #4
    8ef0:	6019      	str	r1, [r3, #0]
    8ef2:	6813      	ldr	r3, [r2, #0]
    8ef4:	7033      	strb	r3, [r6, #0]
    8ef6:	2301      	movs	r3, #1
    8ef8:	e079      	b.n	8fee <_printf_i+0x182>
    8efa:	0649      	lsls	r1, r1, #25
    8efc:	d5d9      	bpl.n	8eb2 <_printf_i+0x46>
    8efe:	1d11      	adds	r1, r2, #4
    8f00:	6019      	str	r1, [r3, #0]
    8f02:	2300      	movs	r3, #0
    8f04:	5ed5      	ldrsh	r5, [r2, r3]
    8f06:	2d00      	cmp	r5, #0
    8f08:	da03      	bge.n	8f12 <_printf_i+0xa6>
    8f0a:	232d      	movs	r3, #45	; 0x2d
    8f0c:	9a04      	ldr	r2, [sp, #16]
    8f0e:	426d      	negs	r5, r5
    8f10:	7013      	strb	r3, [r2, #0]
    8f12:	4b62      	ldr	r3, [pc, #392]	; (909c <_printf_i+0x230>)
    8f14:	270a      	movs	r7, #10
    8f16:	9303      	str	r3, [sp, #12]
    8f18:	e02f      	b.n	8f7a <_printf_i+0x10e>
    8f1a:	6820      	ldr	r0, [r4, #0]
    8f1c:	6819      	ldr	r1, [r3, #0]
    8f1e:	0605      	lsls	r5, r0, #24
    8f20:	d503      	bpl.n	8f2a <_printf_i+0xbe>
    8f22:	1d08      	adds	r0, r1, #4
    8f24:	6018      	str	r0, [r3, #0]
    8f26:	680d      	ldr	r5, [r1, #0]
    8f28:	e005      	b.n	8f36 <_printf_i+0xca>
    8f2a:	0640      	lsls	r0, r0, #25
    8f2c:	d5f9      	bpl.n	8f22 <_printf_i+0xb6>
    8f2e:	680d      	ldr	r5, [r1, #0]
    8f30:	1d08      	adds	r0, r1, #4
    8f32:	6018      	str	r0, [r3, #0]
    8f34:	b2ad      	uxth	r5, r5
    8f36:	4b59      	ldr	r3, [pc, #356]	; (909c <_printf_i+0x230>)
    8f38:	2708      	movs	r7, #8
    8f3a:	9303      	str	r3, [sp, #12]
    8f3c:	2a6f      	cmp	r2, #111	; 0x6f
    8f3e:	d018      	beq.n	8f72 <_printf_i+0x106>
    8f40:	270a      	movs	r7, #10
    8f42:	e016      	b.n	8f72 <_printf_i+0x106>
    8f44:	3145      	adds	r1, #69	; 0x45
    8f46:	700a      	strb	r2, [r1, #0]
    8f48:	4a54      	ldr	r2, [pc, #336]	; (909c <_printf_i+0x230>)
    8f4a:	9203      	str	r2, [sp, #12]
    8f4c:	681a      	ldr	r2, [r3, #0]
    8f4e:	6821      	ldr	r1, [r4, #0]
    8f50:	1d10      	adds	r0, r2, #4
    8f52:	6018      	str	r0, [r3, #0]
    8f54:	6815      	ldr	r5, [r2, #0]
    8f56:	0608      	lsls	r0, r1, #24
    8f58:	d522      	bpl.n	8fa0 <_printf_i+0x134>
    8f5a:	07cb      	lsls	r3, r1, #31
    8f5c:	d502      	bpl.n	8f64 <_printf_i+0xf8>
    8f5e:	2320      	movs	r3, #32
    8f60:	4319      	orrs	r1, r3
    8f62:	6021      	str	r1, [r4, #0]
    8f64:	2710      	movs	r7, #16
    8f66:	2d00      	cmp	r5, #0
    8f68:	d103      	bne.n	8f72 <_printf_i+0x106>
    8f6a:	2320      	movs	r3, #32
    8f6c:	6822      	ldr	r2, [r4, #0]
    8f6e:	439a      	bics	r2, r3
    8f70:	6022      	str	r2, [r4, #0]
    8f72:	0023      	movs	r3, r4
    8f74:	2200      	movs	r2, #0
    8f76:	3343      	adds	r3, #67	; 0x43
    8f78:	701a      	strb	r2, [r3, #0]
    8f7a:	6863      	ldr	r3, [r4, #4]
    8f7c:	60a3      	str	r3, [r4, #8]
    8f7e:	2b00      	cmp	r3, #0
    8f80:	db5c      	blt.n	903c <_printf_i+0x1d0>
    8f82:	2204      	movs	r2, #4
    8f84:	6821      	ldr	r1, [r4, #0]
    8f86:	4391      	bics	r1, r2
    8f88:	6021      	str	r1, [r4, #0]
    8f8a:	2d00      	cmp	r5, #0
    8f8c:	d158      	bne.n	9040 <_printf_i+0x1d4>
    8f8e:	9e04      	ldr	r6, [sp, #16]
    8f90:	2b00      	cmp	r3, #0
    8f92:	d064      	beq.n	905e <_printf_i+0x1f2>
    8f94:	0026      	movs	r6, r4
    8f96:	9b03      	ldr	r3, [sp, #12]
    8f98:	3642      	adds	r6, #66	; 0x42
    8f9a:	781b      	ldrb	r3, [r3, #0]
    8f9c:	7033      	strb	r3, [r6, #0]
    8f9e:	e05e      	b.n	905e <_printf_i+0x1f2>
    8fa0:	0648      	lsls	r0, r1, #25
    8fa2:	d5da      	bpl.n	8f5a <_printf_i+0xee>
    8fa4:	b2ad      	uxth	r5, r5
    8fa6:	e7d8      	b.n	8f5a <_printf_i+0xee>
    8fa8:	6809      	ldr	r1, [r1, #0]
    8faa:	681a      	ldr	r2, [r3, #0]
    8fac:	0608      	lsls	r0, r1, #24
    8fae:	d505      	bpl.n	8fbc <_printf_i+0x150>
    8fb0:	1d11      	adds	r1, r2, #4
    8fb2:	6019      	str	r1, [r3, #0]
    8fb4:	6813      	ldr	r3, [r2, #0]
    8fb6:	6962      	ldr	r2, [r4, #20]
    8fb8:	601a      	str	r2, [r3, #0]
    8fba:	e006      	b.n	8fca <_printf_i+0x15e>
    8fbc:	0649      	lsls	r1, r1, #25
    8fbe:	d5f7      	bpl.n	8fb0 <_printf_i+0x144>
    8fc0:	1d11      	adds	r1, r2, #4
    8fc2:	6019      	str	r1, [r3, #0]
    8fc4:	6813      	ldr	r3, [r2, #0]
    8fc6:	8aa2      	ldrh	r2, [r4, #20]
    8fc8:	801a      	strh	r2, [r3, #0]
    8fca:	2300      	movs	r3, #0
    8fcc:	9e04      	ldr	r6, [sp, #16]
    8fce:	6123      	str	r3, [r4, #16]
    8fd0:	e054      	b.n	907c <_printf_i+0x210>
    8fd2:	681a      	ldr	r2, [r3, #0]
    8fd4:	1d11      	adds	r1, r2, #4
    8fd6:	6019      	str	r1, [r3, #0]
    8fd8:	6816      	ldr	r6, [r2, #0]
    8fda:	2100      	movs	r1, #0
    8fdc:	6862      	ldr	r2, [r4, #4]
    8fde:	0030      	movs	r0, r6
    8fe0:	f000 ffde 	bl	9fa0 <memchr>
    8fe4:	2800      	cmp	r0, #0
    8fe6:	d001      	beq.n	8fec <_printf_i+0x180>
    8fe8:	1b80      	subs	r0, r0, r6
    8fea:	6060      	str	r0, [r4, #4]
    8fec:	6863      	ldr	r3, [r4, #4]
    8fee:	6123      	str	r3, [r4, #16]
    8ff0:	2300      	movs	r3, #0
    8ff2:	9a04      	ldr	r2, [sp, #16]
    8ff4:	7013      	strb	r3, [r2, #0]
    8ff6:	e041      	b.n	907c <_printf_i+0x210>
    8ff8:	6923      	ldr	r3, [r4, #16]
    8ffa:	0032      	movs	r2, r6
    8ffc:	9906      	ldr	r1, [sp, #24]
    8ffe:	9805      	ldr	r0, [sp, #20]
    9000:	9d07      	ldr	r5, [sp, #28]
    9002:	47a8      	blx	r5
    9004:	1c43      	adds	r3, r0, #1
    9006:	d043      	beq.n	9090 <_printf_i+0x224>
    9008:	6823      	ldr	r3, [r4, #0]
    900a:	2500      	movs	r5, #0
    900c:	079b      	lsls	r3, r3, #30
    900e:	d40f      	bmi.n	9030 <_printf_i+0x1c4>
    9010:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9012:	68e0      	ldr	r0, [r4, #12]
    9014:	4298      	cmp	r0, r3
    9016:	da3d      	bge.n	9094 <_printf_i+0x228>
    9018:	0018      	movs	r0, r3
    901a:	e03b      	b.n	9094 <_printf_i+0x228>
    901c:	0022      	movs	r2, r4
    901e:	2301      	movs	r3, #1
    9020:	3219      	adds	r2, #25
    9022:	9906      	ldr	r1, [sp, #24]
    9024:	9805      	ldr	r0, [sp, #20]
    9026:	9e07      	ldr	r6, [sp, #28]
    9028:	47b0      	blx	r6
    902a:	1c43      	adds	r3, r0, #1
    902c:	d030      	beq.n	9090 <_printf_i+0x224>
    902e:	3501      	adds	r5, #1
    9030:	68e3      	ldr	r3, [r4, #12]
    9032:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9034:	1a9b      	subs	r3, r3, r2
    9036:	429d      	cmp	r5, r3
    9038:	dbf0      	blt.n	901c <_printf_i+0x1b0>
    903a:	e7e9      	b.n	9010 <_printf_i+0x1a4>
    903c:	2d00      	cmp	r5, #0
    903e:	d0a9      	beq.n	8f94 <_printf_i+0x128>
    9040:	9e04      	ldr	r6, [sp, #16]
    9042:	0028      	movs	r0, r5
    9044:	0039      	movs	r1, r7
    9046:	f001 fceb 	bl	aa20 <__aeabi_uidivmod>
    904a:	9b03      	ldr	r3, [sp, #12]
    904c:	3e01      	subs	r6, #1
    904e:	5c5b      	ldrb	r3, [r3, r1]
    9050:	0028      	movs	r0, r5
    9052:	7033      	strb	r3, [r6, #0]
    9054:	0039      	movs	r1, r7
    9056:	f001 fc5d 	bl	a914 <__udivsi3>
    905a:	1e05      	subs	r5, r0, #0
    905c:	d1f1      	bne.n	9042 <_printf_i+0x1d6>
    905e:	2f08      	cmp	r7, #8
    9060:	d109      	bne.n	9076 <_printf_i+0x20a>
    9062:	6823      	ldr	r3, [r4, #0]
    9064:	07db      	lsls	r3, r3, #31
    9066:	d506      	bpl.n	9076 <_printf_i+0x20a>
    9068:	6863      	ldr	r3, [r4, #4]
    906a:	6922      	ldr	r2, [r4, #16]
    906c:	4293      	cmp	r3, r2
    906e:	dc02      	bgt.n	9076 <_printf_i+0x20a>
    9070:	2330      	movs	r3, #48	; 0x30
    9072:	3e01      	subs	r6, #1
    9074:	7033      	strb	r3, [r6, #0]
    9076:	9b04      	ldr	r3, [sp, #16]
    9078:	1b9b      	subs	r3, r3, r6
    907a:	6123      	str	r3, [r4, #16]
    907c:	9b07      	ldr	r3, [sp, #28]
    907e:	aa09      	add	r2, sp, #36	; 0x24
    9080:	9300      	str	r3, [sp, #0]
    9082:	0021      	movs	r1, r4
    9084:	9b06      	ldr	r3, [sp, #24]
    9086:	9805      	ldr	r0, [sp, #20]
    9088:	f7ff fe82 	bl	8d90 <_printf_common>
    908c:	1c43      	adds	r3, r0, #1
    908e:	d1b3      	bne.n	8ff8 <_printf_i+0x18c>
    9090:	2001      	movs	r0, #1
    9092:	4240      	negs	r0, r0
    9094:	b00b      	add	sp, #44	; 0x2c
    9096:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9098:	0000e9cf 	.word	0x0000e9cf
    909c:	0000e9be 	.word	0x0000e9be

000090a0 <_sbrk_r>:
    90a0:	2300      	movs	r3, #0
    90a2:	b570      	push	{r4, r5, r6, lr}
    90a4:	4c06      	ldr	r4, [pc, #24]	; (90c0 <_sbrk_r+0x20>)
    90a6:	0005      	movs	r5, r0
    90a8:	0008      	movs	r0, r1
    90aa:	6023      	str	r3, [r4, #0]
    90ac:	f7ff f9be 	bl	842c <_sbrk>
    90b0:	1c43      	adds	r3, r0, #1
    90b2:	d103      	bne.n	90bc <_sbrk_r+0x1c>
    90b4:	6823      	ldr	r3, [r4, #0]
    90b6:	2b00      	cmp	r3, #0
    90b8:	d000      	beq.n	90bc <_sbrk_r+0x1c>
    90ba:	602b      	str	r3, [r5, #0]
    90bc:	bd70      	pop	{r4, r5, r6, pc}
    90be:	46c0      	nop			; (mov r8, r8)
    90c0:	20004e80 	.word	0x20004e80

000090c4 <sniprintf>:
    90c4:	b40c      	push	{r2, r3}
    90c6:	b530      	push	{r4, r5, lr}
    90c8:	4b16      	ldr	r3, [pc, #88]	; (9124 <sniprintf+0x60>)
    90ca:	b09d      	sub	sp, #116	; 0x74
    90cc:	1e0c      	subs	r4, r1, #0
    90ce:	681d      	ldr	r5, [r3, #0]
    90d0:	da08      	bge.n	90e4 <sniprintf+0x20>
    90d2:	238b      	movs	r3, #139	; 0x8b
    90d4:	2001      	movs	r0, #1
    90d6:	602b      	str	r3, [r5, #0]
    90d8:	4240      	negs	r0, r0
    90da:	b01d      	add	sp, #116	; 0x74
    90dc:	bc30      	pop	{r4, r5}
    90de:	bc08      	pop	{r3}
    90e0:	b002      	add	sp, #8
    90e2:	4718      	bx	r3
    90e4:	2382      	movs	r3, #130	; 0x82
    90e6:	a902      	add	r1, sp, #8
    90e8:	009b      	lsls	r3, r3, #2
    90ea:	818b      	strh	r3, [r1, #12]
    90ec:	2300      	movs	r3, #0
    90ee:	9002      	str	r0, [sp, #8]
    90f0:	6108      	str	r0, [r1, #16]
    90f2:	429c      	cmp	r4, r3
    90f4:	d000      	beq.n	90f8 <sniprintf+0x34>
    90f6:	1e63      	subs	r3, r4, #1
    90f8:	608b      	str	r3, [r1, #8]
    90fa:	614b      	str	r3, [r1, #20]
    90fc:	2301      	movs	r3, #1
    90fe:	425b      	negs	r3, r3
    9100:	81cb      	strh	r3, [r1, #14]
    9102:	9a20      	ldr	r2, [sp, #128]	; 0x80
    9104:	ab21      	add	r3, sp, #132	; 0x84
    9106:	0028      	movs	r0, r5
    9108:	9301      	str	r3, [sp, #4]
    910a:	f001 faa9 	bl	a660 <_svfiprintf_r>
    910e:	1c43      	adds	r3, r0, #1
    9110:	da01      	bge.n	9116 <sniprintf+0x52>
    9112:	238b      	movs	r3, #139	; 0x8b
    9114:	602b      	str	r3, [r5, #0]
    9116:	2c00      	cmp	r4, #0
    9118:	d0df      	beq.n	90da <sniprintf+0x16>
    911a:	2300      	movs	r3, #0
    911c:	9a02      	ldr	r2, [sp, #8]
    911e:	7013      	strb	r3, [r2, #0]
    9120:	e7db      	b.n	90da <sniprintf+0x16>
    9122:	46c0      	nop			; (mov r8, r8)
    9124:	20000038 	.word	0x20000038

00009128 <siprintf>:
    9128:	b40e      	push	{r1, r2, r3}
    912a:	b510      	push	{r4, lr}
    912c:	b09d      	sub	sp, #116	; 0x74
    912e:	a902      	add	r1, sp, #8
    9130:	9002      	str	r0, [sp, #8]
    9132:	6108      	str	r0, [r1, #16]
    9134:	480b      	ldr	r0, [pc, #44]	; (9164 <siprintf+0x3c>)
    9136:	2482      	movs	r4, #130	; 0x82
    9138:	6088      	str	r0, [r1, #8]
    913a:	6148      	str	r0, [r1, #20]
    913c:	2001      	movs	r0, #1
    913e:	4240      	negs	r0, r0
    9140:	ab1f      	add	r3, sp, #124	; 0x7c
    9142:	81c8      	strh	r0, [r1, #14]
    9144:	4808      	ldr	r0, [pc, #32]	; (9168 <siprintf+0x40>)
    9146:	cb04      	ldmia	r3!, {r2}
    9148:	00a4      	lsls	r4, r4, #2
    914a:	6800      	ldr	r0, [r0, #0]
    914c:	9301      	str	r3, [sp, #4]
    914e:	818c      	strh	r4, [r1, #12]
    9150:	f001 fa86 	bl	a660 <_svfiprintf_r>
    9154:	2300      	movs	r3, #0
    9156:	9a02      	ldr	r2, [sp, #8]
    9158:	7013      	strb	r3, [r2, #0]
    915a:	b01d      	add	sp, #116	; 0x74
    915c:	bc10      	pop	{r4}
    915e:	bc08      	pop	{r3}
    9160:	b003      	add	sp, #12
    9162:	4718      	bx	r3
    9164:	7fffffff 	.word	0x7fffffff
    9168:	20000038 	.word	0x20000038

0000916c <strcasecmp>:
    916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    916e:	0007      	movs	r7, r0
    9170:	000e      	movs	r6, r1
    9172:	783c      	ldrb	r4, [r7, #0]
    9174:	f000 fee8 	bl	9f48 <__locale_ctype_ptr>
    9178:	2203      	movs	r2, #3
    917a:	1900      	adds	r0, r0, r4
    917c:	7843      	ldrb	r3, [r0, #1]
    917e:	4013      	ands	r3, r2
    9180:	2b01      	cmp	r3, #1
    9182:	d100      	bne.n	9186 <strcasecmp+0x1a>
    9184:	3420      	adds	r4, #32
    9186:	7835      	ldrb	r5, [r6, #0]
    9188:	f000 fede 	bl	9f48 <__locale_ctype_ptr>
    918c:	2203      	movs	r2, #3
    918e:	1940      	adds	r0, r0, r5
    9190:	7843      	ldrb	r3, [r0, #1]
    9192:	4013      	ands	r3, r2
    9194:	2b01      	cmp	r3, #1
    9196:	d100      	bne.n	919a <strcasecmp+0x2e>
    9198:	3520      	adds	r5, #32
    919a:	1b60      	subs	r0, r4, r5
    919c:	d103      	bne.n	91a6 <strcasecmp+0x3a>
    919e:	3701      	adds	r7, #1
    91a0:	3601      	adds	r6, #1
    91a2:	2d00      	cmp	r5, #0
    91a4:	d1e5      	bne.n	9172 <strcasecmp+0x6>
    91a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000091a8 <strlen>:
    91a8:	2300      	movs	r3, #0
    91aa:	5cc2      	ldrb	r2, [r0, r3]
    91ac:	3301      	adds	r3, #1
    91ae:	2a00      	cmp	r2, #0
    91b0:	d1fb      	bne.n	91aa <strlen+0x2>
    91b2:	1e58      	subs	r0, r3, #1
    91b4:	4770      	bx	lr

000091b6 <strncmp>:
    91b6:	2300      	movs	r3, #0
    91b8:	b530      	push	{r4, r5, lr}
    91ba:	429a      	cmp	r2, r3
    91bc:	d00a      	beq.n	91d4 <strncmp+0x1e>
    91be:	3a01      	subs	r2, #1
    91c0:	5cc4      	ldrb	r4, [r0, r3]
    91c2:	5ccd      	ldrb	r5, [r1, r3]
    91c4:	42ac      	cmp	r4, r5
    91c6:	d104      	bne.n	91d2 <strncmp+0x1c>
    91c8:	429a      	cmp	r2, r3
    91ca:	d002      	beq.n	91d2 <strncmp+0x1c>
    91cc:	3301      	adds	r3, #1
    91ce:	2c00      	cmp	r4, #0
    91d0:	d1f6      	bne.n	91c0 <strncmp+0xa>
    91d2:	1b63      	subs	r3, r4, r5
    91d4:	0018      	movs	r0, r3
    91d6:	bd30      	pop	{r4, r5, pc}

000091d8 <strncpy>:
    91d8:	b570      	push	{r4, r5, r6, lr}
    91da:	0004      	movs	r4, r0
    91dc:	2a00      	cmp	r2, #0
    91de:	d100      	bne.n	91e2 <strncpy+0xa>
    91e0:	bd70      	pop	{r4, r5, r6, pc}
    91e2:	780d      	ldrb	r5, [r1, #0]
    91e4:	1e56      	subs	r6, r2, #1
    91e6:	1c63      	adds	r3, r4, #1
    91e8:	7025      	strb	r5, [r4, #0]
    91ea:	3101      	adds	r1, #1
    91ec:	2d00      	cmp	r5, #0
    91ee:	d105      	bne.n	91fc <strncpy+0x24>
    91f0:	18a4      	adds	r4, r4, r2
    91f2:	429c      	cmp	r4, r3
    91f4:	d0f4      	beq.n	91e0 <strncpy+0x8>
    91f6:	701d      	strb	r5, [r3, #0]
    91f8:	3301      	adds	r3, #1
    91fa:	e7fa      	b.n	91f2 <strncpy+0x1a>
    91fc:	001c      	movs	r4, r3
    91fe:	0032      	movs	r2, r6
    9200:	e7ec      	b.n	91dc <strncpy+0x4>

00009202 <_vsniprintf_r>:
    9202:	b530      	push	{r4, r5, lr}
    9204:	0014      	movs	r4, r2
    9206:	b09b      	sub	sp, #108	; 0x6c
    9208:	0005      	movs	r5, r0
    920a:	001a      	movs	r2, r3
    920c:	2c00      	cmp	r4, #0
    920e:	da05      	bge.n	921c <_vsniprintf_r+0x1a>
    9210:	238b      	movs	r3, #139	; 0x8b
    9212:	6003      	str	r3, [r0, #0]
    9214:	2001      	movs	r0, #1
    9216:	4240      	negs	r0, r0
    9218:	b01b      	add	sp, #108	; 0x6c
    921a:	bd30      	pop	{r4, r5, pc}
    921c:	2382      	movs	r3, #130	; 0x82
    921e:	4668      	mov	r0, sp
    9220:	009b      	lsls	r3, r3, #2
    9222:	8183      	strh	r3, [r0, #12]
    9224:	2300      	movs	r3, #0
    9226:	9100      	str	r1, [sp, #0]
    9228:	9104      	str	r1, [sp, #16]
    922a:	429c      	cmp	r4, r3
    922c:	d000      	beq.n	9230 <_vsniprintf_r+0x2e>
    922e:	1e63      	subs	r3, r4, #1
    9230:	9302      	str	r3, [sp, #8]
    9232:	9305      	str	r3, [sp, #20]
    9234:	2301      	movs	r3, #1
    9236:	4669      	mov	r1, sp
    9238:	425b      	negs	r3, r3
    923a:	81cb      	strh	r3, [r1, #14]
    923c:	0028      	movs	r0, r5
    923e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9240:	f001 fa0e 	bl	a660 <_svfiprintf_r>
    9244:	1c43      	adds	r3, r0, #1
    9246:	da01      	bge.n	924c <_vsniprintf_r+0x4a>
    9248:	238b      	movs	r3, #139	; 0x8b
    924a:	602b      	str	r3, [r5, #0]
    924c:	2c00      	cmp	r4, #0
    924e:	d0e3      	beq.n	9218 <_vsniprintf_r+0x16>
    9250:	2300      	movs	r3, #0
    9252:	9a00      	ldr	r2, [sp, #0]
    9254:	7013      	strb	r3, [r2, #0]
    9256:	e7df      	b.n	9218 <_vsniprintf_r+0x16>

00009258 <vsniprintf>:
    9258:	b507      	push	{r0, r1, r2, lr}
    925a:	9300      	str	r3, [sp, #0]
    925c:	0013      	movs	r3, r2
    925e:	000a      	movs	r2, r1
    9260:	0001      	movs	r1, r0
    9262:	4802      	ldr	r0, [pc, #8]	; (926c <vsniprintf+0x14>)
    9264:	6800      	ldr	r0, [r0, #0]
    9266:	f7ff ffcc 	bl	9202 <_vsniprintf_r>
    926a:	bd0e      	pop	{r1, r2, r3, pc}
    926c:	20000038 	.word	0x20000038

00009270 <quorem>:
    9270:	b5f0      	push	{r4, r5, r6, r7, lr}
    9272:	6903      	ldr	r3, [r0, #16]
    9274:	690c      	ldr	r4, [r1, #16]
    9276:	b089      	sub	sp, #36	; 0x24
    9278:	0007      	movs	r7, r0
    927a:	9105      	str	r1, [sp, #20]
    927c:	2600      	movs	r6, #0
    927e:	429c      	cmp	r4, r3
    9280:	dc6d      	bgt.n	935e <quorem+0xee>
    9282:	000b      	movs	r3, r1
    9284:	3c01      	subs	r4, #1
    9286:	3314      	adds	r3, #20
    9288:	00a5      	lsls	r5, r4, #2
    928a:	9303      	str	r3, [sp, #12]
    928c:	195b      	adds	r3, r3, r5
    928e:	9304      	str	r3, [sp, #16]
    9290:	0003      	movs	r3, r0
    9292:	3314      	adds	r3, #20
    9294:	9302      	str	r3, [sp, #8]
    9296:	195d      	adds	r5, r3, r5
    9298:	9b04      	ldr	r3, [sp, #16]
    929a:	6828      	ldr	r0, [r5, #0]
    929c:	681b      	ldr	r3, [r3, #0]
    929e:	1c59      	adds	r1, r3, #1
    92a0:	9301      	str	r3, [sp, #4]
    92a2:	f001 fb37 	bl	a914 <__udivsi3>
    92a6:	9001      	str	r0, [sp, #4]
    92a8:	42b0      	cmp	r0, r6
    92aa:	d02d      	beq.n	9308 <quorem+0x98>
    92ac:	9b03      	ldr	r3, [sp, #12]
    92ae:	9802      	ldr	r0, [sp, #8]
    92b0:	469c      	mov	ip, r3
    92b2:	9606      	str	r6, [sp, #24]
    92b4:	4662      	mov	r2, ip
    92b6:	ca08      	ldmia	r2!, {r3}
    92b8:	4694      	mov	ip, r2
    92ba:	9a01      	ldr	r2, [sp, #4]
    92bc:	b299      	uxth	r1, r3
    92be:	4351      	muls	r1, r2
    92c0:	0c1b      	lsrs	r3, r3, #16
    92c2:	4353      	muls	r3, r2
    92c4:	1989      	adds	r1, r1, r6
    92c6:	0c0a      	lsrs	r2, r1, #16
    92c8:	189b      	adds	r3, r3, r2
    92ca:	9307      	str	r3, [sp, #28]
    92cc:	8802      	ldrh	r2, [r0, #0]
    92ce:	0c1e      	lsrs	r6, r3, #16
    92d0:	9b06      	ldr	r3, [sp, #24]
    92d2:	b289      	uxth	r1, r1
    92d4:	18d2      	adds	r2, r2, r3
    92d6:	6803      	ldr	r3, [r0, #0]
    92d8:	1a52      	subs	r2, r2, r1
    92da:	0c19      	lsrs	r1, r3, #16
    92dc:	466b      	mov	r3, sp
    92de:	8b9b      	ldrh	r3, [r3, #28]
    92e0:	1acb      	subs	r3, r1, r3
    92e2:	1411      	asrs	r1, r2, #16
    92e4:	185b      	adds	r3, r3, r1
    92e6:	1419      	asrs	r1, r3, #16
    92e8:	b292      	uxth	r2, r2
    92ea:	041b      	lsls	r3, r3, #16
    92ec:	431a      	orrs	r2, r3
    92ee:	9b04      	ldr	r3, [sp, #16]
    92f0:	9106      	str	r1, [sp, #24]
    92f2:	c004      	stmia	r0!, {r2}
    92f4:	4563      	cmp	r3, ip
    92f6:	d2dd      	bcs.n	92b4 <quorem+0x44>
    92f8:	682b      	ldr	r3, [r5, #0]
    92fa:	2b00      	cmp	r3, #0
    92fc:	d104      	bne.n	9308 <quorem+0x98>
    92fe:	9b02      	ldr	r3, [sp, #8]
    9300:	3d04      	subs	r5, #4
    9302:	42ab      	cmp	r3, r5
    9304:	d32e      	bcc.n	9364 <quorem+0xf4>
    9306:	613c      	str	r4, [r7, #16]
    9308:	9905      	ldr	r1, [sp, #20]
    930a:	0038      	movs	r0, r7
    930c:	f001 f867 	bl	a3de <__mcmp>
    9310:	2800      	cmp	r0, #0
    9312:	db23      	blt.n	935c <quorem+0xec>
    9314:	2500      	movs	r5, #0
    9316:	9b01      	ldr	r3, [sp, #4]
    9318:	9802      	ldr	r0, [sp, #8]
    931a:	3301      	adds	r3, #1
    931c:	9903      	ldr	r1, [sp, #12]
    931e:	9301      	str	r3, [sp, #4]
    9320:	c908      	ldmia	r1!, {r3}
    9322:	8802      	ldrh	r2, [r0, #0]
    9324:	1955      	adds	r5, r2, r5
    9326:	b29a      	uxth	r2, r3
    9328:	1aaa      	subs	r2, r5, r2
    932a:	6805      	ldr	r5, [r0, #0]
    932c:	0c1b      	lsrs	r3, r3, #16
    932e:	0c2d      	lsrs	r5, r5, #16
    9330:	1aeb      	subs	r3, r5, r3
    9332:	1415      	asrs	r5, r2, #16
    9334:	195b      	adds	r3, r3, r5
    9336:	141d      	asrs	r5, r3, #16
    9338:	b292      	uxth	r2, r2
    933a:	041b      	lsls	r3, r3, #16
    933c:	4313      	orrs	r3, r2
    933e:	c008      	stmia	r0!, {r3}
    9340:	9b04      	ldr	r3, [sp, #16]
    9342:	428b      	cmp	r3, r1
    9344:	d2ec      	bcs.n	9320 <quorem+0xb0>
    9346:	9a02      	ldr	r2, [sp, #8]
    9348:	00a3      	lsls	r3, r4, #2
    934a:	18d3      	adds	r3, r2, r3
    934c:	681a      	ldr	r2, [r3, #0]
    934e:	2a00      	cmp	r2, #0
    9350:	d104      	bne.n	935c <quorem+0xec>
    9352:	9a02      	ldr	r2, [sp, #8]
    9354:	3b04      	subs	r3, #4
    9356:	429a      	cmp	r2, r3
    9358:	d309      	bcc.n	936e <quorem+0xfe>
    935a:	613c      	str	r4, [r7, #16]
    935c:	9e01      	ldr	r6, [sp, #4]
    935e:	0030      	movs	r0, r6
    9360:	b009      	add	sp, #36	; 0x24
    9362:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9364:	682b      	ldr	r3, [r5, #0]
    9366:	2b00      	cmp	r3, #0
    9368:	d1cd      	bne.n	9306 <quorem+0x96>
    936a:	3c01      	subs	r4, #1
    936c:	e7c7      	b.n	92fe <quorem+0x8e>
    936e:	681a      	ldr	r2, [r3, #0]
    9370:	2a00      	cmp	r2, #0
    9372:	d1f2      	bne.n	935a <quorem+0xea>
    9374:	3c01      	subs	r4, #1
    9376:	e7ec      	b.n	9352 <quorem+0xe2>

00009378 <_dtoa_r>:
    9378:	b5f0      	push	{r4, r5, r6, r7, lr}
    937a:	0016      	movs	r6, r2
    937c:	001f      	movs	r7, r3
    937e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    9380:	b09d      	sub	sp, #116	; 0x74
    9382:	9004      	str	r0, [sp, #16]
    9384:	9d25      	ldr	r5, [sp, #148]	; 0x94
    9386:	9606      	str	r6, [sp, #24]
    9388:	9707      	str	r7, [sp, #28]
    938a:	2c00      	cmp	r4, #0
    938c:	d108      	bne.n	93a0 <_dtoa_r+0x28>
    938e:	2010      	movs	r0, #16
    9390:	f7ff f952 	bl	8638 <malloc>
    9394:	9b04      	ldr	r3, [sp, #16]
    9396:	6258      	str	r0, [r3, #36]	; 0x24
    9398:	6044      	str	r4, [r0, #4]
    939a:	6084      	str	r4, [r0, #8]
    939c:	6004      	str	r4, [r0, #0]
    939e:	60c4      	str	r4, [r0, #12]
    93a0:	9b04      	ldr	r3, [sp, #16]
    93a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    93a4:	6819      	ldr	r1, [r3, #0]
    93a6:	2900      	cmp	r1, #0
    93a8:	d00b      	beq.n	93c2 <_dtoa_r+0x4a>
    93aa:	685a      	ldr	r2, [r3, #4]
    93ac:	2301      	movs	r3, #1
    93ae:	4093      	lsls	r3, r2
    93b0:	604a      	str	r2, [r1, #4]
    93b2:	608b      	str	r3, [r1, #8]
    93b4:	9804      	ldr	r0, [sp, #16]
    93b6:	f000 fe38 	bl	a02a <_Bfree>
    93ba:	2200      	movs	r2, #0
    93bc:	9b04      	ldr	r3, [sp, #16]
    93be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    93c0:	601a      	str	r2, [r3, #0]
    93c2:	9b07      	ldr	r3, [sp, #28]
    93c4:	2b00      	cmp	r3, #0
    93c6:	da1f      	bge.n	9408 <_dtoa_r+0x90>
    93c8:	2301      	movs	r3, #1
    93ca:	602b      	str	r3, [r5, #0]
    93cc:	007b      	lsls	r3, r7, #1
    93ce:	085b      	lsrs	r3, r3, #1
    93d0:	9307      	str	r3, [sp, #28]
    93d2:	9c07      	ldr	r4, [sp, #28]
    93d4:	4bb7      	ldr	r3, [pc, #732]	; (96b4 <_dtoa_r+0x33c>)
    93d6:	0022      	movs	r2, r4
    93d8:	9319      	str	r3, [sp, #100]	; 0x64
    93da:	401a      	ands	r2, r3
    93dc:	429a      	cmp	r2, r3
    93de:	d116      	bne.n	940e <_dtoa_r+0x96>
    93e0:	4bb5      	ldr	r3, [pc, #724]	; (96b8 <_dtoa_r+0x340>)
    93e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    93e4:	6013      	str	r3, [r2, #0]
    93e6:	9b06      	ldr	r3, [sp, #24]
    93e8:	2b00      	cmp	r3, #0
    93ea:	d103      	bne.n	93f4 <_dtoa_r+0x7c>
    93ec:	0324      	lsls	r4, r4, #12
    93ee:	d101      	bne.n	93f4 <_dtoa_r+0x7c>
    93f0:	f000 fd91 	bl	9f16 <_dtoa_r+0xb9e>
    93f4:	4bb1      	ldr	r3, [pc, #708]	; (96bc <_dtoa_r+0x344>)
    93f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    93f8:	930a      	str	r3, [sp, #40]	; 0x28
    93fa:	4bb1      	ldr	r3, [pc, #708]	; (96c0 <_dtoa_r+0x348>)
    93fc:	2a00      	cmp	r2, #0
    93fe:	d001      	beq.n	9404 <_dtoa_r+0x8c>
    9400:	f000 fd8f 	bl	9f22 <_dtoa_r+0xbaa>
    9404:	f000 fd8f 	bl	9f26 <_dtoa_r+0xbae>
    9408:	2300      	movs	r3, #0
    940a:	602b      	str	r3, [r5, #0]
    940c:	e7e1      	b.n	93d2 <_dtoa_r+0x5a>
    940e:	9e06      	ldr	r6, [sp, #24]
    9410:	9f07      	ldr	r7, [sp, #28]
    9412:	2200      	movs	r2, #0
    9414:	2300      	movs	r3, #0
    9416:	0030      	movs	r0, r6
    9418:	0039      	movs	r1, r7
    941a:	f001 fc01 	bl	ac20 <__aeabi_dcmpeq>
    941e:	1e05      	subs	r5, r0, #0
    9420:	d00e      	beq.n	9440 <_dtoa_r+0xc8>
    9422:	2301      	movs	r3, #1
    9424:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9426:	6013      	str	r3, [r2, #0]
    9428:	4ba6      	ldr	r3, [pc, #664]	; (96c4 <_dtoa_r+0x34c>)
    942a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    942c:	930a      	str	r3, [sp, #40]	; 0x28
    942e:	2a00      	cmp	r2, #0
    9430:	d101      	bne.n	9436 <_dtoa_r+0xbe>
    9432:	f000 fd78 	bl	9f26 <_dtoa_r+0xbae>
    9436:	4aa4      	ldr	r2, [pc, #656]	; (96c8 <_dtoa_r+0x350>)
    9438:	9926      	ldr	r1, [sp, #152]	; 0x98
    943a:	600a      	str	r2, [r1, #0]
    943c:	f000 fd73 	bl	9f26 <_dtoa_r+0xbae>
    9440:	ab1a      	add	r3, sp, #104	; 0x68
    9442:	9301      	str	r3, [sp, #4]
    9444:	ab1b      	add	r3, sp, #108	; 0x6c
    9446:	9300      	str	r3, [sp, #0]
    9448:	0032      	movs	r2, r6
    944a:	003b      	movs	r3, r7
    944c:	9804      	ldr	r0, [sp, #16]
    944e:	f001 f843 	bl	a4d8 <__d2b>
    9452:	0063      	lsls	r3, r4, #1
    9454:	9005      	str	r0, [sp, #20]
    9456:	0d5b      	lsrs	r3, r3, #21
    9458:	d100      	bne.n	945c <_dtoa_r+0xe4>
    945a:	e07f      	b.n	955c <_dtoa_r+0x1e4>
    945c:	033a      	lsls	r2, r7, #12
    945e:	4c9b      	ldr	r4, [pc, #620]	; (96cc <_dtoa_r+0x354>)
    9460:	0b12      	lsrs	r2, r2, #12
    9462:	4314      	orrs	r4, r2
    9464:	0021      	movs	r1, r4
    9466:	4a9a      	ldr	r2, [pc, #616]	; (96d0 <_dtoa_r+0x358>)
    9468:	0030      	movs	r0, r6
    946a:	9518      	str	r5, [sp, #96]	; 0x60
    946c:	189e      	adds	r6, r3, r2
    946e:	2200      	movs	r2, #0
    9470:	4b98      	ldr	r3, [pc, #608]	; (96d4 <_dtoa_r+0x35c>)
    9472:	f003 fd37 	bl	cee4 <__aeabi_dsub>
    9476:	4a98      	ldr	r2, [pc, #608]	; (96d8 <_dtoa_r+0x360>)
    9478:	4b98      	ldr	r3, [pc, #608]	; (96dc <_dtoa_r+0x364>)
    947a:	f003 fab3 	bl	c9e4 <__aeabi_dmul>
    947e:	4a98      	ldr	r2, [pc, #608]	; (96e0 <_dtoa_r+0x368>)
    9480:	4b98      	ldr	r3, [pc, #608]	; (96e4 <_dtoa_r+0x36c>)
    9482:	f002 fb6b 	bl	bb5c <__aeabi_dadd>
    9486:	0004      	movs	r4, r0
    9488:	0030      	movs	r0, r6
    948a:	000d      	movs	r5, r1
    948c:	f004 f894 	bl	d5b8 <__aeabi_i2d>
    9490:	4a95      	ldr	r2, [pc, #596]	; (96e8 <_dtoa_r+0x370>)
    9492:	4b96      	ldr	r3, [pc, #600]	; (96ec <_dtoa_r+0x374>)
    9494:	f003 faa6 	bl	c9e4 <__aeabi_dmul>
    9498:	0002      	movs	r2, r0
    949a:	000b      	movs	r3, r1
    949c:	0020      	movs	r0, r4
    949e:	0029      	movs	r1, r5
    94a0:	f002 fb5c 	bl	bb5c <__aeabi_dadd>
    94a4:	0004      	movs	r4, r0
    94a6:	000d      	movs	r5, r1
    94a8:	f004 f852 	bl	d550 <__aeabi_d2iz>
    94ac:	2200      	movs	r2, #0
    94ae:	9003      	str	r0, [sp, #12]
    94b0:	2300      	movs	r3, #0
    94b2:	0020      	movs	r0, r4
    94b4:	0029      	movs	r1, r5
    94b6:	f001 fbb9 	bl	ac2c <__aeabi_dcmplt>
    94ba:	2800      	cmp	r0, #0
    94bc:	d00e      	beq.n	94dc <_dtoa_r+0x164>
    94be:	9803      	ldr	r0, [sp, #12]
    94c0:	f004 f87a 	bl	d5b8 <__aeabi_i2d>
    94c4:	000b      	movs	r3, r1
    94c6:	0002      	movs	r2, r0
    94c8:	0029      	movs	r1, r5
    94ca:	0020      	movs	r0, r4
    94cc:	f001 fba8 	bl	ac20 <__aeabi_dcmpeq>
    94d0:	0003      	movs	r3, r0
    94d2:	4258      	negs	r0, r3
    94d4:	4158      	adcs	r0, r3
    94d6:	9b03      	ldr	r3, [sp, #12]
    94d8:	1a1b      	subs	r3, r3, r0
    94da:	9303      	str	r3, [sp, #12]
    94dc:	2301      	movs	r3, #1
    94de:	9316      	str	r3, [sp, #88]	; 0x58
    94e0:	9b03      	ldr	r3, [sp, #12]
    94e2:	2b16      	cmp	r3, #22
    94e4:	d80f      	bhi.n	9506 <_dtoa_r+0x18e>
    94e6:	4982      	ldr	r1, [pc, #520]	; (96f0 <_dtoa_r+0x378>)
    94e8:	00db      	lsls	r3, r3, #3
    94ea:	18c9      	adds	r1, r1, r3
    94ec:	6808      	ldr	r0, [r1, #0]
    94ee:	6849      	ldr	r1, [r1, #4]
    94f0:	9a06      	ldr	r2, [sp, #24]
    94f2:	9b07      	ldr	r3, [sp, #28]
    94f4:	f001 fbae 	bl	ac54 <__aeabi_dcmpgt>
    94f8:	2800      	cmp	r0, #0
    94fa:	d04b      	beq.n	9594 <_dtoa_r+0x21c>
    94fc:	9b03      	ldr	r3, [sp, #12]
    94fe:	3b01      	subs	r3, #1
    9500:	9303      	str	r3, [sp, #12]
    9502:	2300      	movs	r3, #0
    9504:	9316      	str	r3, [sp, #88]	; 0x58
    9506:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9508:	1b9e      	subs	r6, r3, r6
    950a:	2300      	movs	r3, #0
    950c:	930b      	str	r3, [sp, #44]	; 0x2c
    950e:	0033      	movs	r3, r6
    9510:	3b01      	subs	r3, #1
    9512:	930c      	str	r3, [sp, #48]	; 0x30
    9514:	d504      	bpl.n	9520 <_dtoa_r+0x1a8>
    9516:	2301      	movs	r3, #1
    9518:	1b9b      	subs	r3, r3, r6
    951a:	930b      	str	r3, [sp, #44]	; 0x2c
    951c:	2300      	movs	r3, #0
    951e:	930c      	str	r3, [sp, #48]	; 0x30
    9520:	9b03      	ldr	r3, [sp, #12]
    9522:	2b00      	cmp	r3, #0
    9524:	db38      	blt.n	9598 <_dtoa_r+0x220>
    9526:	9a03      	ldr	r2, [sp, #12]
    9528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    952a:	4694      	mov	ip, r2
    952c:	4463      	add	r3, ip
    952e:	930c      	str	r3, [sp, #48]	; 0x30
    9530:	2300      	movs	r3, #0
    9532:	920f      	str	r2, [sp, #60]	; 0x3c
    9534:	9308      	str	r3, [sp, #32]
    9536:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9538:	2501      	movs	r5, #1
    953a:	2b09      	cmp	r3, #9
    953c:	d900      	bls.n	9540 <_dtoa_r+0x1c8>
    953e:	e091      	b.n	9664 <_dtoa_r+0x2ec>
    9540:	2b05      	cmp	r3, #5
    9542:	dd02      	ble.n	954a <_dtoa_r+0x1d2>
    9544:	2500      	movs	r5, #0
    9546:	3b04      	subs	r3, #4
    9548:	9322      	str	r3, [sp, #136]	; 0x88
    954a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    954c:	1e98      	subs	r0, r3, #2
    954e:	2803      	cmp	r0, #3
    9550:	d900      	bls.n	9554 <_dtoa_r+0x1dc>
    9552:	e091      	b.n	9678 <_dtoa_r+0x300>
    9554:	f001 f9d4 	bl	a900 <__gnu_thumb1_case_uqi>
    9558:	76298482 	.word	0x76298482
    955c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    955e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9560:	189e      	adds	r6, r3, r2
    9562:	4b64      	ldr	r3, [pc, #400]	; (96f4 <_dtoa_r+0x37c>)
    9564:	18f2      	adds	r2, r6, r3
    9566:	2a20      	cmp	r2, #32
    9568:	dd0f      	ble.n	958a <_dtoa_r+0x212>
    956a:	4b63      	ldr	r3, [pc, #396]	; (96f8 <_dtoa_r+0x380>)
    956c:	9806      	ldr	r0, [sp, #24]
    956e:	18f3      	adds	r3, r6, r3
    9570:	40d8      	lsrs	r0, r3
    9572:	2340      	movs	r3, #64	; 0x40
    9574:	1a9b      	subs	r3, r3, r2
    9576:	409c      	lsls	r4, r3
    9578:	4320      	orrs	r0, r4
    957a:	f004 f85f 	bl	d63c <__aeabi_ui2d>
    957e:	2301      	movs	r3, #1
    9580:	4c5e      	ldr	r4, [pc, #376]	; (96fc <_dtoa_r+0x384>)
    9582:	3e01      	subs	r6, #1
    9584:	1909      	adds	r1, r1, r4
    9586:	9318      	str	r3, [sp, #96]	; 0x60
    9588:	e771      	b.n	946e <_dtoa_r+0xf6>
    958a:	2320      	movs	r3, #32
    958c:	9806      	ldr	r0, [sp, #24]
    958e:	1a9b      	subs	r3, r3, r2
    9590:	4098      	lsls	r0, r3
    9592:	e7f2      	b.n	957a <_dtoa_r+0x202>
    9594:	9016      	str	r0, [sp, #88]	; 0x58
    9596:	e7b6      	b.n	9506 <_dtoa_r+0x18e>
    9598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    959a:	9a03      	ldr	r2, [sp, #12]
    959c:	1a9b      	subs	r3, r3, r2
    959e:	930b      	str	r3, [sp, #44]	; 0x2c
    95a0:	4253      	negs	r3, r2
    95a2:	9308      	str	r3, [sp, #32]
    95a4:	2300      	movs	r3, #0
    95a6:	930f      	str	r3, [sp, #60]	; 0x3c
    95a8:	e7c5      	b.n	9536 <_dtoa_r+0x1be>
    95aa:	2301      	movs	r3, #1
    95ac:	930e      	str	r3, [sp, #56]	; 0x38
    95ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    95b0:	2b00      	cmp	r3, #0
    95b2:	dd65      	ble.n	9680 <_dtoa_r+0x308>
    95b4:	001f      	movs	r7, r3
    95b6:	930d      	str	r3, [sp, #52]	; 0x34
    95b8:	9a04      	ldr	r2, [sp, #16]
    95ba:	6a54      	ldr	r4, [r2, #36]	; 0x24
    95bc:	2200      	movs	r2, #0
    95be:	6062      	str	r2, [r4, #4]
    95c0:	3204      	adds	r2, #4
    95c2:	0011      	movs	r1, r2
    95c4:	3114      	adds	r1, #20
    95c6:	4299      	cmp	r1, r3
    95c8:	d95f      	bls.n	968a <_dtoa_r+0x312>
    95ca:	6861      	ldr	r1, [r4, #4]
    95cc:	9804      	ldr	r0, [sp, #16]
    95ce:	f000 fcf4 	bl	9fba <_Balloc>
    95d2:	9b04      	ldr	r3, [sp, #16]
    95d4:	6020      	str	r0, [r4, #0]
    95d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    95d8:	681b      	ldr	r3, [r3, #0]
    95da:	930a      	str	r3, [sp, #40]	; 0x28
    95dc:	2f0e      	cmp	r7, #14
    95de:	d900      	bls.n	95e2 <_dtoa_r+0x26a>
    95e0:	e105      	b.n	97ee <_dtoa_r+0x476>
    95e2:	2d00      	cmp	r5, #0
    95e4:	d100      	bne.n	95e8 <_dtoa_r+0x270>
    95e6:	e102      	b.n	97ee <_dtoa_r+0x476>
    95e8:	9b06      	ldr	r3, [sp, #24]
    95ea:	9c07      	ldr	r4, [sp, #28]
    95ec:	9314      	str	r3, [sp, #80]	; 0x50
    95ee:	9415      	str	r4, [sp, #84]	; 0x54
    95f0:	9b03      	ldr	r3, [sp, #12]
    95f2:	2b00      	cmp	r3, #0
    95f4:	dc00      	bgt.n	95f8 <_dtoa_r+0x280>
    95f6:	e085      	b.n	9704 <_dtoa_r+0x38c>
    95f8:	001a      	movs	r2, r3
    95fa:	210f      	movs	r1, #15
    95fc:	4b3c      	ldr	r3, [pc, #240]	; (96f0 <_dtoa_r+0x378>)
    95fe:	400a      	ands	r2, r1
    9600:	00d2      	lsls	r2, r2, #3
    9602:	189b      	adds	r3, r3, r2
    9604:	685c      	ldr	r4, [r3, #4]
    9606:	681b      	ldr	r3, [r3, #0]
    9608:	9310      	str	r3, [sp, #64]	; 0x40
    960a:	9411      	str	r4, [sp, #68]	; 0x44
    960c:	9b03      	ldr	r3, [sp, #12]
    960e:	2402      	movs	r4, #2
    9610:	111d      	asrs	r5, r3, #4
    9612:	06eb      	lsls	r3, r5, #27
    9614:	d50a      	bpl.n	962c <_dtoa_r+0x2b4>
    9616:	4b3a      	ldr	r3, [pc, #232]	; (9700 <_dtoa_r+0x388>)
    9618:	400d      	ands	r5, r1
    961a:	6a1a      	ldr	r2, [r3, #32]
    961c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    961e:	9814      	ldr	r0, [sp, #80]	; 0x50
    9620:	9915      	ldr	r1, [sp, #84]	; 0x54
    9622:	f002 fdab 	bl	c17c <__aeabi_ddiv>
    9626:	9006      	str	r0, [sp, #24]
    9628:	9107      	str	r1, [sp, #28]
    962a:	3401      	adds	r4, #1
    962c:	4e34      	ldr	r6, [pc, #208]	; (9700 <_dtoa_r+0x388>)
    962e:	2d00      	cmp	r5, #0
    9630:	d130      	bne.n	9694 <_dtoa_r+0x31c>
    9632:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9634:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9636:	9806      	ldr	r0, [sp, #24]
    9638:	9907      	ldr	r1, [sp, #28]
    963a:	f002 fd9f 	bl	c17c <__aeabi_ddiv>
    963e:	9006      	str	r0, [sp, #24]
    9640:	9107      	str	r1, [sp, #28]
    9642:	e07a      	b.n	973a <_dtoa_r+0x3c2>
    9644:	2301      	movs	r3, #1
    9646:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    9648:	930e      	str	r3, [sp, #56]	; 0x38
    964a:	4694      	mov	ip, r2
    964c:	9b03      	ldr	r3, [sp, #12]
    964e:	4463      	add	r3, ip
    9650:	1c5f      	adds	r7, r3, #1
    9652:	930d      	str	r3, [sp, #52]	; 0x34
    9654:	1e3b      	subs	r3, r7, #0
    9656:	dcaf      	bgt.n	95b8 <_dtoa_r+0x240>
    9658:	2301      	movs	r3, #1
    965a:	e7ad      	b.n	95b8 <_dtoa_r+0x240>
    965c:	2300      	movs	r3, #0
    965e:	e7a5      	b.n	95ac <_dtoa_r+0x234>
    9660:	2300      	movs	r3, #0
    9662:	e7f0      	b.n	9646 <_dtoa_r+0x2ce>
    9664:	2300      	movs	r3, #0
    9666:	950e      	str	r5, [sp, #56]	; 0x38
    9668:	9322      	str	r3, [sp, #136]	; 0x88
    966a:	3b01      	subs	r3, #1
    966c:	2200      	movs	r2, #0
    966e:	930d      	str	r3, [sp, #52]	; 0x34
    9670:	001f      	movs	r7, r3
    9672:	3313      	adds	r3, #19
    9674:	9223      	str	r2, [sp, #140]	; 0x8c
    9676:	e79f      	b.n	95b8 <_dtoa_r+0x240>
    9678:	2301      	movs	r3, #1
    967a:	930e      	str	r3, [sp, #56]	; 0x38
    967c:	3b02      	subs	r3, #2
    967e:	e7f5      	b.n	966c <_dtoa_r+0x2f4>
    9680:	2301      	movs	r3, #1
    9682:	930d      	str	r3, [sp, #52]	; 0x34
    9684:	001f      	movs	r7, r3
    9686:	001a      	movs	r2, r3
    9688:	e7f4      	b.n	9674 <_dtoa_r+0x2fc>
    968a:	6861      	ldr	r1, [r4, #4]
    968c:	0052      	lsls	r2, r2, #1
    968e:	3101      	adds	r1, #1
    9690:	6061      	str	r1, [r4, #4]
    9692:	e796      	b.n	95c2 <_dtoa_r+0x24a>
    9694:	2301      	movs	r3, #1
    9696:	421d      	tst	r5, r3
    9698:	d008      	beq.n	96ac <_dtoa_r+0x334>
    969a:	9810      	ldr	r0, [sp, #64]	; 0x40
    969c:	9911      	ldr	r1, [sp, #68]	; 0x44
    969e:	18e4      	adds	r4, r4, r3
    96a0:	6832      	ldr	r2, [r6, #0]
    96a2:	6873      	ldr	r3, [r6, #4]
    96a4:	f003 f99e 	bl	c9e4 <__aeabi_dmul>
    96a8:	9010      	str	r0, [sp, #64]	; 0x40
    96aa:	9111      	str	r1, [sp, #68]	; 0x44
    96ac:	106d      	asrs	r5, r5, #1
    96ae:	3608      	adds	r6, #8
    96b0:	e7bd      	b.n	962e <_dtoa_r+0x2b6>
    96b2:	46c0      	nop			; (mov r8, r8)
    96b4:	7ff00000 	.word	0x7ff00000
    96b8:	0000270f 	.word	0x0000270f
    96bc:	0000e9e9 	.word	0x0000e9e9
    96c0:	0000e9ec 	.word	0x0000e9ec
    96c4:	0000e9bc 	.word	0x0000e9bc
    96c8:	0000e9bd 	.word	0x0000e9bd
    96cc:	3ff00000 	.word	0x3ff00000
    96d0:	fffffc01 	.word	0xfffffc01
    96d4:	3ff80000 	.word	0x3ff80000
    96d8:	636f4361 	.word	0x636f4361
    96dc:	3fd287a7 	.word	0x3fd287a7
    96e0:	8b60c8b3 	.word	0x8b60c8b3
    96e4:	3fc68a28 	.word	0x3fc68a28
    96e8:	509f79fb 	.word	0x509f79fb
    96ec:	3fd34413 	.word	0x3fd34413
    96f0:	0000ea20 	.word	0x0000ea20
    96f4:	00000432 	.word	0x00000432
    96f8:	00000412 	.word	0x00000412
    96fc:	fe100000 	.word	0xfe100000
    9700:	0000e9f8 	.word	0x0000e9f8
    9704:	9b03      	ldr	r3, [sp, #12]
    9706:	2402      	movs	r4, #2
    9708:	2b00      	cmp	r3, #0
    970a:	d016      	beq.n	973a <_dtoa_r+0x3c2>
    970c:	9814      	ldr	r0, [sp, #80]	; 0x50
    970e:	9915      	ldr	r1, [sp, #84]	; 0x54
    9710:	425d      	negs	r5, r3
    9712:	230f      	movs	r3, #15
    9714:	4aca      	ldr	r2, [pc, #808]	; (9a40 <_dtoa_r+0x6c8>)
    9716:	402b      	ands	r3, r5
    9718:	00db      	lsls	r3, r3, #3
    971a:	18d3      	adds	r3, r2, r3
    971c:	681a      	ldr	r2, [r3, #0]
    971e:	685b      	ldr	r3, [r3, #4]
    9720:	f003 f960 	bl	c9e4 <__aeabi_dmul>
    9724:	2300      	movs	r3, #0
    9726:	9006      	str	r0, [sp, #24]
    9728:	9107      	str	r1, [sp, #28]
    972a:	4ec6      	ldr	r6, [pc, #792]	; (9a44 <_dtoa_r+0x6cc>)
    972c:	112d      	asrs	r5, r5, #4
    972e:	2d00      	cmp	r5, #0
    9730:	d000      	beq.n	9734 <_dtoa_r+0x3bc>
    9732:	e08c      	b.n	984e <_dtoa_r+0x4d6>
    9734:	2b00      	cmp	r3, #0
    9736:	d000      	beq.n	973a <_dtoa_r+0x3c2>
    9738:	e781      	b.n	963e <_dtoa_r+0x2c6>
    973a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    973c:	2b00      	cmp	r3, #0
    973e:	d100      	bne.n	9742 <_dtoa_r+0x3ca>
    9740:	e091      	b.n	9866 <_dtoa_r+0x4ee>
    9742:	9a06      	ldr	r2, [sp, #24]
    9744:	9b07      	ldr	r3, [sp, #28]
    9746:	9210      	str	r2, [sp, #64]	; 0x40
    9748:	9311      	str	r3, [sp, #68]	; 0x44
    974a:	9810      	ldr	r0, [sp, #64]	; 0x40
    974c:	9911      	ldr	r1, [sp, #68]	; 0x44
    974e:	2200      	movs	r2, #0
    9750:	4bbd      	ldr	r3, [pc, #756]	; (9a48 <_dtoa_r+0x6d0>)
    9752:	f001 fa6b 	bl	ac2c <__aeabi_dcmplt>
    9756:	2800      	cmp	r0, #0
    9758:	d100      	bne.n	975c <_dtoa_r+0x3e4>
    975a:	e084      	b.n	9866 <_dtoa_r+0x4ee>
    975c:	2f00      	cmp	r7, #0
    975e:	d100      	bne.n	9762 <_dtoa_r+0x3ea>
    9760:	e081      	b.n	9866 <_dtoa_r+0x4ee>
    9762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9764:	2b00      	cmp	r3, #0
    9766:	dd3e      	ble.n	97e6 <_dtoa_r+0x46e>
    9768:	9810      	ldr	r0, [sp, #64]	; 0x40
    976a:	9911      	ldr	r1, [sp, #68]	; 0x44
    976c:	9b03      	ldr	r3, [sp, #12]
    976e:	2200      	movs	r2, #0
    9770:	1e5e      	subs	r6, r3, #1
    9772:	4bb6      	ldr	r3, [pc, #728]	; (9a4c <_dtoa_r+0x6d4>)
    9774:	f003 f936 	bl	c9e4 <__aeabi_dmul>
    9778:	9006      	str	r0, [sp, #24]
    977a:	9107      	str	r1, [sp, #28]
    977c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    977e:	3401      	adds	r4, #1
    9780:	0020      	movs	r0, r4
    9782:	f003 ff19 	bl	d5b8 <__aeabi_i2d>
    9786:	9a06      	ldr	r2, [sp, #24]
    9788:	9b07      	ldr	r3, [sp, #28]
    978a:	f003 f92b 	bl	c9e4 <__aeabi_dmul>
    978e:	2200      	movs	r2, #0
    9790:	4baf      	ldr	r3, [pc, #700]	; (9a50 <_dtoa_r+0x6d8>)
    9792:	f002 f9e3 	bl	bb5c <__aeabi_dadd>
    9796:	9012      	str	r0, [sp, #72]	; 0x48
    9798:	9113      	str	r1, [sp, #76]	; 0x4c
    979a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    979c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    979e:	4aad      	ldr	r2, [pc, #692]	; (9a54 <_dtoa_r+0x6dc>)
    97a0:	9310      	str	r3, [sp, #64]	; 0x40
    97a2:	9411      	str	r4, [sp, #68]	; 0x44
    97a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    97a6:	189c      	adds	r4, r3, r2
    97a8:	9411      	str	r4, [sp, #68]	; 0x44
    97aa:	2d00      	cmp	r5, #0
    97ac:	d15e      	bne.n	986c <_dtoa_r+0x4f4>
    97ae:	9806      	ldr	r0, [sp, #24]
    97b0:	9907      	ldr	r1, [sp, #28]
    97b2:	2200      	movs	r2, #0
    97b4:	4ba8      	ldr	r3, [pc, #672]	; (9a58 <_dtoa_r+0x6e0>)
    97b6:	f003 fb95 	bl	cee4 <__aeabi_dsub>
    97ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
    97bc:	0023      	movs	r3, r4
    97be:	9006      	str	r0, [sp, #24]
    97c0:	9107      	str	r1, [sp, #28]
    97c2:	f001 fa47 	bl	ac54 <__aeabi_dcmpgt>
    97c6:	2800      	cmp	r0, #0
    97c8:	d000      	beq.n	97cc <_dtoa_r+0x454>
    97ca:	e301      	b.n	9dd0 <_dtoa_r+0xa58>
    97cc:	48a3      	ldr	r0, [pc, #652]	; (9a5c <_dtoa_r+0x6e4>)
    97ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
    97d0:	4684      	mov	ip, r0
    97d2:	4461      	add	r1, ip
    97d4:	000b      	movs	r3, r1
    97d6:	9806      	ldr	r0, [sp, #24]
    97d8:	9907      	ldr	r1, [sp, #28]
    97da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    97dc:	f001 fa26 	bl	ac2c <__aeabi_dcmplt>
    97e0:	2800      	cmp	r0, #0
    97e2:	d000      	beq.n	97e6 <_dtoa_r+0x46e>
    97e4:	e2e8      	b.n	9db8 <_dtoa_r+0xa40>
    97e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    97e8:	9c15      	ldr	r4, [sp, #84]	; 0x54
    97ea:	9306      	str	r3, [sp, #24]
    97ec:	9407      	str	r4, [sp, #28]
    97ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    97f0:	2b00      	cmp	r3, #0
    97f2:	da00      	bge.n	97f6 <_dtoa_r+0x47e>
    97f4:	e157      	b.n	9aa6 <_dtoa_r+0x72e>
    97f6:	9a03      	ldr	r2, [sp, #12]
    97f8:	2a0e      	cmp	r2, #14
    97fa:	dd00      	ble.n	97fe <_dtoa_r+0x486>
    97fc:	e153      	b.n	9aa6 <_dtoa_r+0x72e>
    97fe:	4b90      	ldr	r3, [pc, #576]	; (9a40 <_dtoa_r+0x6c8>)
    9800:	00d2      	lsls	r2, r2, #3
    9802:	189b      	adds	r3, r3, r2
    9804:	685c      	ldr	r4, [r3, #4]
    9806:	681b      	ldr	r3, [r3, #0]
    9808:	9308      	str	r3, [sp, #32]
    980a:	9409      	str	r4, [sp, #36]	; 0x24
    980c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    980e:	2b00      	cmp	r3, #0
    9810:	db00      	blt.n	9814 <_dtoa_r+0x49c>
    9812:	e0ce      	b.n	99b2 <_dtoa_r+0x63a>
    9814:	2f00      	cmp	r7, #0
    9816:	dd00      	ble.n	981a <_dtoa_r+0x4a2>
    9818:	e0cb      	b.n	99b2 <_dtoa_r+0x63a>
    981a:	d000      	beq.n	981e <_dtoa_r+0x4a6>
    981c:	e2cf      	b.n	9dbe <_dtoa_r+0xa46>
    981e:	9808      	ldr	r0, [sp, #32]
    9820:	9909      	ldr	r1, [sp, #36]	; 0x24
    9822:	2200      	movs	r2, #0
    9824:	4b8c      	ldr	r3, [pc, #560]	; (9a58 <_dtoa_r+0x6e0>)
    9826:	f003 f8dd 	bl	c9e4 <__aeabi_dmul>
    982a:	9a06      	ldr	r2, [sp, #24]
    982c:	9b07      	ldr	r3, [sp, #28]
    982e:	f001 fa1b 	bl	ac68 <__aeabi_dcmpge>
    9832:	003e      	movs	r6, r7
    9834:	9708      	str	r7, [sp, #32]
    9836:	2800      	cmp	r0, #0
    9838:	d000      	beq.n	983c <_dtoa_r+0x4c4>
    983a:	e2a4      	b.n	9d86 <_dtoa_r+0xa0e>
    983c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    983e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9840:	1c5d      	adds	r5, r3, #1
    9842:	2331      	movs	r3, #49	; 0x31
    9844:	7013      	strb	r3, [r2, #0]
    9846:	9b03      	ldr	r3, [sp, #12]
    9848:	3301      	adds	r3, #1
    984a:	9303      	str	r3, [sp, #12]
    984c:	e29f      	b.n	9d8e <_dtoa_r+0xa16>
    984e:	2201      	movs	r2, #1
    9850:	4215      	tst	r5, r2
    9852:	d005      	beq.n	9860 <_dtoa_r+0x4e8>
    9854:	18a4      	adds	r4, r4, r2
    9856:	6832      	ldr	r2, [r6, #0]
    9858:	6873      	ldr	r3, [r6, #4]
    985a:	f003 f8c3 	bl	c9e4 <__aeabi_dmul>
    985e:	2301      	movs	r3, #1
    9860:	106d      	asrs	r5, r5, #1
    9862:	3608      	adds	r6, #8
    9864:	e763      	b.n	972e <_dtoa_r+0x3b6>
    9866:	9e03      	ldr	r6, [sp, #12]
    9868:	003d      	movs	r5, r7
    986a:	e789      	b.n	9780 <_dtoa_r+0x408>
    986c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    986e:	1e69      	subs	r1, r5, #1
    9870:	1952      	adds	r2, r2, r5
    9872:	9217      	str	r2, [sp, #92]	; 0x5c
    9874:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9876:	4b72      	ldr	r3, [pc, #456]	; (9a40 <_dtoa_r+0x6c8>)
    9878:	00c9      	lsls	r1, r1, #3
    987a:	2a00      	cmp	r2, #0
    987c:	d04a      	beq.n	9914 <_dtoa_r+0x59c>
    987e:	185b      	adds	r3, r3, r1
    9880:	681a      	ldr	r2, [r3, #0]
    9882:	685b      	ldr	r3, [r3, #4]
    9884:	2000      	movs	r0, #0
    9886:	4976      	ldr	r1, [pc, #472]	; (9a60 <_dtoa_r+0x6e8>)
    9888:	f002 fc78 	bl	c17c <__aeabi_ddiv>
    988c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    988e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9890:	f003 fb28 	bl	cee4 <__aeabi_dsub>
    9894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9896:	9010      	str	r0, [sp, #64]	; 0x40
    9898:	9111      	str	r1, [sp, #68]	; 0x44
    989a:	9312      	str	r3, [sp, #72]	; 0x48
    989c:	9806      	ldr	r0, [sp, #24]
    989e:	9907      	ldr	r1, [sp, #28]
    98a0:	f003 fe56 	bl	d550 <__aeabi_d2iz>
    98a4:	0004      	movs	r4, r0
    98a6:	f003 fe87 	bl	d5b8 <__aeabi_i2d>
    98aa:	0002      	movs	r2, r0
    98ac:	000b      	movs	r3, r1
    98ae:	9806      	ldr	r0, [sp, #24]
    98b0:	9907      	ldr	r1, [sp, #28]
    98b2:	f003 fb17 	bl	cee4 <__aeabi_dsub>
    98b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    98b8:	3430      	adds	r4, #48	; 0x30
    98ba:	1c5d      	adds	r5, r3, #1
    98bc:	701c      	strb	r4, [r3, #0]
    98be:	9a10      	ldr	r2, [sp, #64]	; 0x40
    98c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    98c2:	9006      	str	r0, [sp, #24]
    98c4:	9107      	str	r1, [sp, #28]
    98c6:	f001 f9b1 	bl	ac2c <__aeabi_dcmplt>
    98ca:	2800      	cmp	r0, #0
    98cc:	d165      	bne.n	999a <_dtoa_r+0x622>
    98ce:	9a06      	ldr	r2, [sp, #24]
    98d0:	9b07      	ldr	r3, [sp, #28]
    98d2:	2000      	movs	r0, #0
    98d4:	495c      	ldr	r1, [pc, #368]	; (9a48 <_dtoa_r+0x6d0>)
    98d6:	f003 fb05 	bl	cee4 <__aeabi_dsub>
    98da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    98dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    98de:	f001 f9a5 	bl	ac2c <__aeabi_dcmplt>
    98e2:	2800      	cmp	r0, #0
    98e4:	d000      	beq.n	98e8 <_dtoa_r+0x570>
    98e6:	e0be      	b.n	9a66 <_dtoa_r+0x6ee>
    98e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    98ea:	429d      	cmp	r5, r3
    98ec:	d100      	bne.n	98f0 <_dtoa_r+0x578>
    98ee:	e77a      	b.n	97e6 <_dtoa_r+0x46e>
    98f0:	9810      	ldr	r0, [sp, #64]	; 0x40
    98f2:	9911      	ldr	r1, [sp, #68]	; 0x44
    98f4:	2200      	movs	r2, #0
    98f6:	4b55      	ldr	r3, [pc, #340]	; (9a4c <_dtoa_r+0x6d4>)
    98f8:	f003 f874 	bl	c9e4 <__aeabi_dmul>
    98fc:	2200      	movs	r2, #0
    98fe:	9010      	str	r0, [sp, #64]	; 0x40
    9900:	9111      	str	r1, [sp, #68]	; 0x44
    9902:	9806      	ldr	r0, [sp, #24]
    9904:	9907      	ldr	r1, [sp, #28]
    9906:	4b51      	ldr	r3, [pc, #324]	; (9a4c <_dtoa_r+0x6d4>)
    9908:	f003 f86c 	bl	c9e4 <__aeabi_dmul>
    990c:	9512      	str	r5, [sp, #72]	; 0x48
    990e:	9006      	str	r0, [sp, #24]
    9910:	9107      	str	r1, [sp, #28]
    9912:	e7c3      	b.n	989c <_dtoa_r+0x524>
    9914:	1859      	adds	r1, r3, r1
    9916:	6808      	ldr	r0, [r1, #0]
    9918:	6849      	ldr	r1, [r1, #4]
    991a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    991c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    991e:	f003 f861 	bl	c9e4 <__aeabi_dmul>
    9922:	9010      	str	r0, [sp, #64]	; 0x40
    9924:	9111      	str	r1, [sp, #68]	; 0x44
    9926:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9928:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    992a:	9806      	ldr	r0, [sp, #24]
    992c:	9907      	ldr	r1, [sp, #28]
    992e:	f003 fe0f 	bl	d550 <__aeabi_d2iz>
    9932:	9012      	str	r0, [sp, #72]	; 0x48
    9934:	f003 fe40 	bl	d5b8 <__aeabi_i2d>
    9938:	0002      	movs	r2, r0
    993a:	000b      	movs	r3, r1
    993c:	9806      	ldr	r0, [sp, #24]
    993e:	9907      	ldr	r1, [sp, #28]
    9940:	f003 fad0 	bl	cee4 <__aeabi_dsub>
    9944:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9946:	9006      	str	r0, [sp, #24]
    9948:	9107      	str	r1, [sp, #28]
    994a:	3330      	adds	r3, #48	; 0x30
    994c:	7023      	strb	r3, [r4, #0]
    994e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9950:	3401      	adds	r4, #1
    9952:	2200      	movs	r2, #0
    9954:	42a3      	cmp	r3, r4
    9956:	d124      	bne.n	99a2 <_dtoa_r+0x62a>
    9958:	4b41      	ldr	r3, [pc, #260]	; (9a60 <_dtoa_r+0x6e8>)
    995a:	9810      	ldr	r0, [sp, #64]	; 0x40
    995c:	9911      	ldr	r1, [sp, #68]	; 0x44
    995e:	f002 f8fd 	bl	bb5c <__aeabi_dadd>
    9962:	0002      	movs	r2, r0
    9964:	000b      	movs	r3, r1
    9966:	9806      	ldr	r0, [sp, #24]
    9968:	9907      	ldr	r1, [sp, #28]
    996a:	f001 f973 	bl	ac54 <__aeabi_dcmpgt>
    996e:	2800      	cmp	r0, #0
    9970:	d000      	beq.n	9974 <_dtoa_r+0x5fc>
    9972:	e078      	b.n	9a66 <_dtoa_r+0x6ee>
    9974:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9976:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9978:	2000      	movs	r0, #0
    997a:	4939      	ldr	r1, [pc, #228]	; (9a60 <_dtoa_r+0x6e8>)
    997c:	f003 fab2 	bl	cee4 <__aeabi_dsub>
    9980:	0002      	movs	r2, r0
    9982:	000b      	movs	r3, r1
    9984:	9806      	ldr	r0, [sp, #24]
    9986:	9907      	ldr	r1, [sp, #28]
    9988:	f001 f950 	bl	ac2c <__aeabi_dcmplt>
    998c:	2800      	cmp	r0, #0
    998e:	d100      	bne.n	9992 <_dtoa_r+0x61a>
    9990:	e729      	b.n	97e6 <_dtoa_r+0x46e>
    9992:	1e6b      	subs	r3, r5, #1
    9994:	781a      	ldrb	r2, [r3, #0]
    9996:	2a30      	cmp	r2, #48	; 0x30
    9998:	d001      	beq.n	999e <_dtoa_r+0x626>
    999a:	9603      	str	r6, [sp, #12]
    999c:	e03f      	b.n	9a1e <_dtoa_r+0x6a6>
    999e:	001d      	movs	r5, r3
    99a0:	e7f7      	b.n	9992 <_dtoa_r+0x61a>
    99a2:	9806      	ldr	r0, [sp, #24]
    99a4:	9907      	ldr	r1, [sp, #28]
    99a6:	4b29      	ldr	r3, [pc, #164]	; (9a4c <_dtoa_r+0x6d4>)
    99a8:	f003 f81c 	bl	c9e4 <__aeabi_dmul>
    99ac:	9006      	str	r0, [sp, #24]
    99ae:	9107      	str	r1, [sp, #28]
    99b0:	e7bb      	b.n	992a <_dtoa_r+0x5b2>
    99b2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    99b4:	9a08      	ldr	r2, [sp, #32]
    99b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    99b8:	9806      	ldr	r0, [sp, #24]
    99ba:	9907      	ldr	r1, [sp, #28]
    99bc:	f002 fbde 	bl	c17c <__aeabi_ddiv>
    99c0:	f003 fdc6 	bl	d550 <__aeabi_d2iz>
    99c4:	0004      	movs	r4, r0
    99c6:	f003 fdf7 	bl	d5b8 <__aeabi_i2d>
    99ca:	9a08      	ldr	r2, [sp, #32]
    99cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    99ce:	f003 f809 	bl	c9e4 <__aeabi_dmul>
    99d2:	000b      	movs	r3, r1
    99d4:	0002      	movs	r2, r0
    99d6:	9806      	ldr	r0, [sp, #24]
    99d8:	9907      	ldr	r1, [sp, #28]
    99da:	f003 fa83 	bl	cee4 <__aeabi_dsub>
    99de:	0023      	movs	r3, r4
    99e0:	3330      	adds	r3, #48	; 0x30
    99e2:	7033      	strb	r3, [r6, #0]
    99e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    99e6:	1c75      	adds	r5, r6, #1
    99e8:	1aeb      	subs	r3, r5, r3
    99ea:	429f      	cmp	r7, r3
    99ec:	d14c      	bne.n	9a88 <_dtoa_r+0x710>
    99ee:	0002      	movs	r2, r0
    99f0:	000b      	movs	r3, r1
    99f2:	f002 f8b3 	bl	bb5c <__aeabi_dadd>
    99f6:	0006      	movs	r6, r0
    99f8:	000f      	movs	r7, r1
    99fa:	0002      	movs	r2, r0
    99fc:	000b      	movs	r3, r1
    99fe:	9808      	ldr	r0, [sp, #32]
    9a00:	9909      	ldr	r1, [sp, #36]	; 0x24
    9a02:	f001 f913 	bl	ac2c <__aeabi_dcmplt>
    9a06:	2800      	cmp	r0, #0
    9a08:	d12c      	bne.n	9a64 <_dtoa_r+0x6ec>
    9a0a:	9808      	ldr	r0, [sp, #32]
    9a0c:	9909      	ldr	r1, [sp, #36]	; 0x24
    9a0e:	0032      	movs	r2, r6
    9a10:	003b      	movs	r3, r7
    9a12:	f001 f905 	bl	ac20 <__aeabi_dcmpeq>
    9a16:	2800      	cmp	r0, #0
    9a18:	d001      	beq.n	9a1e <_dtoa_r+0x6a6>
    9a1a:	07e3      	lsls	r3, r4, #31
    9a1c:	d422      	bmi.n	9a64 <_dtoa_r+0x6ec>
    9a1e:	9905      	ldr	r1, [sp, #20]
    9a20:	9804      	ldr	r0, [sp, #16]
    9a22:	f000 fb02 	bl	a02a <_Bfree>
    9a26:	2300      	movs	r3, #0
    9a28:	702b      	strb	r3, [r5, #0]
    9a2a:	9b03      	ldr	r3, [sp, #12]
    9a2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9a2e:	3301      	adds	r3, #1
    9a30:	6013      	str	r3, [r2, #0]
    9a32:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9a34:	2b00      	cmp	r3, #0
    9a36:	d100      	bne.n	9a3a <_dtoa_r+0x6c2>
    9a38:	e275      	b.n	9f26 <_dtoa_r+0xbae>
    9a3a:	601d      	str	r5, [r3, #0]
    9a3c:	e273      	b.n	9f26 <_dtoa_r+0xbae>
    9a3e:	46c0      	nop			; (mov r8, r8)
    9a40:	0000ea20 	.word	0x0000ea20
    9a44:	0000e9f8 	.word	0x0000e9f8
    9a48:	3ff00000 	.word	0x3ff00000
    9a4c:	40240000 	.word	0x40240000
    9a50:	401c0000 	.word	0x401c0000
    9a54:	fcc00000 	.word	0xfcc00000
    9a58:	40140000 	.word	0x40140000
    9a5c:	7cc00000 	.word	0x7cc00000
    9a60:	3fe00000 	.word	0x3fe00000
    9a64:	9e03      	ldr	r6, [sp, #12]
    9a66:	1e6b      	subs	r3, r5, #1
    9a68:	781a      	ldrb	r2, [r3, #0]
    9a6a:	2a39      	cmp	r2, #57	; 0x39
    9a6c:	d106      	bne.n	9a7c <_dtoa_r+0x704>
    9a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9a70:	429a      	cmp	r2, r3
    9a72:	d107      	bne.n	9a84 <_dtoa_r+0x70c>
    9a74:	2330      	movs	r3, #48	; 0x30
    9a76:	7013      	strb	r3, [r2, #0]
    9a78:	0013      	movs	r3, r2
    9a7a:	3601      	adds	r6, #1
    9a7c:	781a      	ldrb	r2, [r3, #0]
    9a7e:	3201      	adds	r2, #1
    9a80:	701a      	strb	r2, [r3, #0]
    9a82:	e78a      	b.n	999a <_dtoa_r+0x622>
    9a84:	001d      	movs	r5, r3
    9a86:	e7ee      	b.n	9a66 <_dtoa_r+0x6ee>
    9a88:	2200      	movs	r2, #0
    9a8a:	4bcf      	ldr	r3, [pc, #828]	; (9dc8 <_dtoa_r+0xa50>)
    9a8c:	f002 ffaa 	bl	c9e4 <__aeabi_dmul>
    9a90:	2200      	movs	r2, #0
    9a92:	2300      	movs	r3, #0
    9a94:	9006      	str	r0, [sp, #24]
    9a96:	9107      	str	r1, [sp, #28]
    9a98:	002e      	movs	r6, r5
    9a9a:	f001 f8c1 	bl	ac20 <__aeabi_dcmpeq>
    9a9e:	2800      	cmp	r0, #0
    9aa0:	d100      	bne.n	9aa4 <_dtoa_r+0x72c>
    9aa2:	e787      	b.n	99b4 <_dtoa_r+0x63c>
    9aa4:	e7bb      	b.n	9a1e <_dtoa_r+0x6a6>
    9aa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9aa8:	2a00      	cmp	r2, #0
    9aaa:	d100      	bne.n	9aae <_dtoa_r+0x736>
    9aac:	e087      	b.n	9bbe <_dtoa_r+0x846>
    9aae:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9ab0:	2a01      	cmp	r2, #1
    9ab2:	dc6e      	bgt.n	9b92 <_dtoa_r+0x81a>
    9ab4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9ab6:	2a00      	cmp	r2, #0
    9ab8:	d067      	beq.n	9b8a <_dtoa_r+0x812>
    9aba:	4ac4      	ldr	r2, [pc, #784]	; (9dcc <_dtoa_r+0xa54>)
    9abc:	189b      	adds	r3, r3, r2
    9abe:	9d08      	ldr	r5, [sp, #32]
    9ac0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    9ac2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9ac4:	2101      	movs	r1, #1
    9ac6:	18d2      	adds	r2, r2, r3
    9ac8:	920b      	str	r2, [sp, #44]	; 0x2c
    9aca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9acc:	9804      	ldr	r0, [sp, #16]
    9ace:	18d3      	adds	r3, r2, r3
    9ad0:	930c      	str	r3, [sp, #48]	; 0x30
    9ad2:	f000 fb48 	bl	a166 <__i2b>
    9ad6:	0006      	movs	r6, r0
    9ad8:	2c00      	cmp	r4, #0
    9ada:	dd0e      	ble.n	9afa <_dtoa_r+0x782>
    9adc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9ade:	2b00      	cmp	r3, #0
    9ae0:	dd0b      	ble.n	9afa <_dtoa_r+0x782>
    9ae2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9ae4:	0023      	movs	r3, r4
    9ae6:	4294      	cmp	r4, r2
    9ae8:	dd00      	ble.n	9aec <_dtoa_r+0x774>
    9aea:	0013      	movs	r3, r2
    9aec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9aee:	1ae4      	subs	r4, r4, r3
    9af0:	1ad2      	subs	r2, r2, r3
    9af2:	920b      	str	r2, [sp, #44]	; 0x2c
    9af4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9af6:	1ad3      	subs	r3, r2, r3
    9af8:	930c      	str	r3, [sp, #48]	; 0x30
    9afa:	9b08      	ldr	r3, [sp, #32]
    9afc:	2b00      	cmp	r3, #0
    9afe:	d01e      	beq.n	9b3e <_dtoa_r+0x7c6>
    9b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9b02:	2b00      	cmp	r3, #0
    9b04:	d05f      	beq.n	9bc6 <_dtoa_r+0x84e>
    9b06:	2d00      	cmp	r5, #0
    9b08:	dd11      	ble.n	9b2e <_dtoa_r+0x7b6>
    9b0a:	0031      	movs	r1, r6
    9b0c:	002a      	movs	r2, r5
    9b0e:	9804      	ldr	r0, [sp, #16]
    9b10:	f000 fbc2 	bl	a298 <__pow5mult>
    9b14:	9a05      	ldr	r2, [sp, #20]
    9b16:	0001      	movs	r1, r0
    9b18:	0006      	movs	r6, r0
    9b1a:	9804      	ldr	r0, [sp, #16]
    9b1c:	f000 fb2c 	bl	a178 <__multiply>
    9b20:	9905      	ldr	r1, [sp, #20]
    9b22:	9010      	str	r0, [sp, #64]	; 0x40
    9b24:	9804      	ldr	r0, [sp, #16]
    9b26:	f000 fa80 	bl	a02a <_Bfree>
    9b2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9b2c:	9305      	str	r3, [sp, #20]
    9b2e:	9b08      	ldr	r3, [sp, #32]
    9b30:	1b5a      	subs	r2, r3, r5
    9b32:	d004      	beq.n	9b3e <_dtoa_r+0x7c6>
    9b34:	9905      	ldr	r1, [sp, #20]
    9b36:	9804      	ldr	r0, [sp, #16]
    9b38:	f000 fbae 	bl	a298 <__pow5mult>
    9b3c:	9005      	str	r0, [sp, #20]
    9b3e:	2101      	movs	r1, #1
    9b40:	9804      	ldr	r0, [sp, #16]
    9b42:	f000 fb10 	bl	a166 <__i2b>
    9b46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9b48:	9008      	str	r0, [sp, #32]
    9b4a:	2b00      	cmp	r3, #0
    9b4c:	dd3d      	ble.n	9bca <_dtoa_r+0x852>
    9b4e:	001a      	movs	r2, r3
    9b50:	0001      	movs	r1, r0
    9b52:	9804      	ldr	r0, [sp, #16]
    9b54:	f000 fba0 	bl	a298 <__pow5mult>
    9b58:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9b5a:	9008      	str	r0, [sp, #32]
    9b5c:	2500      	movs	r5, #0
    9b5e:	2b01      	cmp	r3, #1
    9b60:	dc3b      	bgt.n	9bda <_dtoa_r+0x862>
    9b62:	2500      	movs	r5, #0
    9b64:	9b06      	ldr	r3, [sp, #24]
    9b66:	42ab      	cmp	r3, r5
    9b68:	d133      	bne.n	9bd2 <_dtoa_r+0x85a>
    9b6a:	9b07      	ldr	r3, [sp, #28]
    9b6c:	031b      	lsls	r3, r3, #12
    9b6e:	42ab      	cmp	r3, r5
    9b70:	d12f      	bne.n	9bd2 <_dtoa_r+0x85a>
    9b72:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9b74:	9a07      	ldr	r2, [sp, #28]
    9b76:	4213      	tst	r3, r2
    9b78:	d02b      	beq.n	9bd2 <_dtoa_r+0x85a>
    9b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9b7c:	3501      	adds	r5, #1
    9b7e:	3301      	adds	r3, #1
    9b80:	930b      	str	r3, [sp, #44]	; 0x2c
    9b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9b84:	3301      	adds	r3, #1
    9b86:	930c      	str	r3, [sp, #48]	; 0x30
    9b88:	e023      	b.n	9bd2 <_dtoa_r+0x85a>
    9b8a:	2336      	movs	r3, #54	; 0x36
    9b8c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    9b8e:	1a9b      	subs	r3, r3, r2
    9b90:	e795      	b.n	9abe <_dtoa_r+0x746>
    9b92:	9b08      	ldr	r3, [sp, #32]
    9b94:	1e7d      	subs	r5, r7, #1
    9b96:	42ab      	cmp	r3, r5
    9b98:	db06      	blt.n	9ba8 <_dtoa_r+0x830>
    9b9a:	1b5d      	subs	r5, r3, r5
    9b9c:	2f00      	cmp	r7, #0
    9b9e:	da0b      	bge.n	9bb8 <_dtoa_r+0x840>
    9ba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9ba2:	1bdc      	subs	r4, r3, r7
    9ba4:	2300      	movs	r3, #0
    9ba6:	e78c      	b.n	9ac2 <_dtoa_r+0x74a>
    9ba8:	9b08      	ldr	r3, [sp, #32]
    9baa:	9508      	str	r5, [sp, #32]
    9bac:	1aea      	subs	r2, r5, r3
    9bae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9bb0:	2500      	movs	r5, #0
    9bb2:	189b      	adds	r3, r3, r2
    9bb4:	930f      	str	r3, [sp, #60]	; 0x3c
    9bb6:	e7f1      	b.n	9b9c <_dtoa_r+0x824>
    9bb8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    9bba:	003b      	movs	r3, r7
    9bbc:	e781      	b.n	9ac2 <_dtoa_r+0x74a>
    9bbe:	9d08      	ldr	r5, [sp, #32]
    9bc0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    9bc2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    9bc4:	e788      	b.n	9ad8 <_dtoa_r+0x760>
    9bc6:	9a08      	ldr	r2, [sp, #32]
    9bc8:	e7b4      	b.n	9b34 <_dtoa_r+0x7bc>
    9bca:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9bcc:	2500      	movs	r5, #0
    9bce:	2b01      	cmp	r3, #1
    9bd0:	ddc7      	ble.n	9b62 <_dtoa_r+0x7ea>
    9bd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9bd4:	2001      	movs	r0, #1
    9bd6:	2b00      	cmp	r3, #0
    9bd8:	d00b      	beq.n	9bf2 <_dtoa_r+0x87a>
    9bda:	9b08      	ldr	r3, [sp, #32]
    9bdc:	9a08      	ldr	r2, [sp, #32]
    9bde:	691b      	ldr	r3, [r3, #16]
    9be0:	930f      	str	r3, [sp, #60]	; 0x3c
    9be2:	3303      	adds	r3, #3
    9be4:	009b      	lsls	r3, r3, #2
    9be6:	18d3      	adds	r3, r2, r3
    9be8:	6858      	ldr	r0, [r3, #4]
    9bea:	f000 fa73 	bl	a0d4 <__hi0bits>
    9bee:	2320      	movs	r3, #32
    9bf0:	1a18      	subs	r0, r3, r0
    9bf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9bf4:	18c0      	adds	r0, r0, r3
    9bf6:	231f      	movs	r3, #31
    9bf8:	4018      	ands	r0, r3
    9bfa:	d100      	bne.n	9bfe <_dtoa_r+0x886>
    9bfc:	e0ab      	b.n	9d56 <_dtoa_r+0x9de>
    9bfe:	3301      	adds	r3, #1
    9c00:	1a1b      	subs	r3, r3, r0
    9c02:	2b04      	cmp	r3, #4
    9c04:	dc00      	bgt.n	9c08 <_dtoa_r+0x890>
    9c06:	e09b      	b.n	9d40 <_dtoa_r+0x9c8>
    9c08:	231c      	movs	r3, #28
    9c0a:	1a18      	subs	r0, r3, r0
    9c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9c0e:	1824      	adds	r4, r4, r0
    9c10:	181b      	adds	r3, r3, r0
    9c12:	930b      	str	r3, [sp, #44]	; 0x2c
    9c14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9c16:	181b      	adds	r3, r3, r0
    9c18:	930c      	str	r3, [sp, #48]	; 0x30
    9c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9c1c:	2b00      	cmp	r3, #0
    9c1e:	dd05      	ble.n	9c2c <_dtoa_r+0x8b4>
    9c20:	001a      	movs	r2, r3
    9c22:	9905      	ldr	r1, [sp, #20]
    9c24:	9804      	ldr	r0, [sp, #16]
    9c26:	f000 fb89 	bl	a33c <__lshift>
    9c2a:	9005      	str	r0, [sp, #20]
    9c2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9c2e:	2b00      	cmp	r3, #0
    9c30:	dd05      	ble.n	9c3e <_dtoa_r+0x8c6>
    9c32:	001a      	movs	r2, r3
    9c34:	9908      	ldr	r1, [sp, #32]
    9c36:	9804      	ldr	r0, [sp, #16]
    9c38:	f000 fb80 	bl	a33c <__lshift>
    9c3c:	9008      	str	r0, [sp, #32]
    9c3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9c40:	2b00      	cmp	r3, #0
    9c42:	d100      	bne.n	9c46 <_dtoa_r+0x8ce>
    9c44:	e089      	b.n	9d5a <_dtoa_r+0x9e2>
    9c46:	9908      	ldr	r1, [sp, #32]
    9c48:	9805      	ldr	r0, [sp, #20]
    9c4a:	f000 fbc8 	bl	a3de <__mcmp>
    9c4e:	2800      	cmp	r0, #0
    9c50:	db00      	blt.n	9c54 <_dtoa_r+0x8dc>
    9c52:	e082      	b.n	9d5a <_dtoa_r+0x9e2>
    9c54:	9b03      	ldr	r3, [sp, #12]
    9c56:	220a      	movs	r2, #10
    9c58:	3b01      	subs	r3, #1
    9c5a:	9303      	str	r3, [sp, #12]
    9c5c:	9905      	ldr	r1, [sp, #20]
    9c5e:	2300      	movs	r3, #0
    9c60:	9804      	ldr	r0, [sp, #16]
    9c62:	f000 f9fb 	bl	a05c <__multadd>
    9c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9c68:	9005      	str	r0, [sp, #20]
    9c6a:	2b00      	cmp	r3, #0
    9c6c:	d100      	bne.n	9c70 <_dtoa_r+0x8f8>
    9c6e:	e15d      	b.n	9f2c <_dtoa_r+0xbb4>
    9c70:	2300      	movs	r3, #0
    9c72:	0031      	movs	r1, r6
    9c74:	220a      	movs	r2, #10
    9c76:	9804      	ldr	r0, [sp, #16]
    9c78:	f000 f9f0 	bl	a05c <__multadd>
    9c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9c7e:	0006      	movs	r6, r0
    9c80:	2b00      	cmp	r3, #0
    9c82:	dc02      	bgt.n	9c8a <_dtoa_r+0x912>
    9c84:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9c86:	2b02      	cmp	r3, #2
    9c88:	dc6d      	bgt.n	9d66 <_dtoa_r+0x9ee>
    9c8a:	2c00      	cmp	r4, #0
    9c8c:	dd05      	ble.n	9c9a <_dtoa_r+0x922>
    9c8e:	0031      	movs	r1, r6
    9c90:	0022      	movs	r2, r4
    9c92:	9804      	ldr	r0, [sp, #16]
    9c94:	f000 fb52 	bl	a33c <__lshift>
    9c98:	0006      	movs	r6, r0
    9c9a:	0030      	movs	r0, r6
    9c9c:	2d00      	cmp	r5, #0
    9c9e:	d011      	beq.n	9cc4 <_dtoa_r+0x94c>
    9ca0:	6871      	ldr	r1, [r6, #4]
    9ca2:	9804      	ldr	r0, [sp, #16]
    9ca4:	f000 f989 	bl	9fba <_Balloc>
    9ca8:	0031      	movs	r1, r6
    9caa:	0004      	movs	r4, r0
    9cac:	6933      	ldr	r3, [r6, #16]
    9cae:	310c      	adds	r1, #12
    9cb0:	1c9a      	adds	r2, r3, #2
    9cb2:	0092      	lsls	r2, r2, #2
    9cb4:	300c      	adds	r0, #12
    9cb6:	f7fe fcc9 	bl	864c <memcpy>
    9cba:	2201      	movs	r2, #1
    9cbc:	0021      	movs	r1, r4
    9cbe:	9804      	ldr	r0, [sp, #16]
    9cc0:	f000 fb3c 	bl	a33c <__lshift>
    9cc4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    9cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9cc8:	3f01      	subs	r7, #1
    9cca:	930b      	str	r3, [sp, #44]	; 0x2c
    9ccc:	19db      	adds	r3, r3, r7
    9cce:	0037      	movs	r7, r6
    9cd0:	0006      	movs	r6, r0
    9cd2:	930f      	str	r3, [sp, #60]	; 0x3c
    9cd4:	9908      	ldr	r1, [sp, #32]
    9cd6:	9805      	ldr	r0, [sp, #20]
    9cd8:	f7ff faca 	bl	9270 <quorem>
    9cdc:	0039      	movs	r1, r7
    9cde:	900d      	str	r0, [sp, #52]	; 0x34
    9ce0:	0004      	movs	r4, r0
    9ce2:	9805      	ldr	r0, [sp, #20]
    9ce4:	f000 fb7b 	bl	a3de <__mcmp>
    9ce8:	0032      	movs	r2, r6
    9cea:	900e      	str	r0, [sp, #56]	; 0x38
    9cec:	9908      	ldr	r1, [sp, #32]
    9cee:	9804      	ldr	r0, [sp, #16]
    9cf0:	f000 fb8e 	bl	a410 <__mdiff>
    9cf4:	2301      	movs	r3, #1
    9cf6:	930c      	str	r3, [sp, #48]	; 0x30
    9cf8:	68c3      	ldr	r3, [r0, #12]
    9cfa:	3430      	adds	r4, #48	; 0x30
    9cfc:	0005      	movs	r5, r0
    9cfe:	2b00      	cmp	r3, #0
    9d00:	d104      	bne.n	9d0c <_dtoa_r+0x994>
    9d02:	0001      	movs	r1, r0
    9d04:	9805      	ldr	r0, [sp, #20]
    9d06:	f000 fb6a 	bl	a3de <__mcmp>
    9d0a:	900c      	str	r0, [sp, #48]	; 0x30
    9d0c:	0029      	movs	r1, r5
    9d0e:	9804      	ldr	r0, [sp, #16]
    9d10:	f000 f98b 	bl	a02a <_Bfree>
    9d14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9d16:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9d18:	4313      	orrs	r3, r2
    9d1a:	d000      	beq.n	9d1e <_dtoa_r+0x9a6>
    9d1c:	e089      	b.n	9e32 <_dtoa_r+0xaba>
    9d1e:	9a06      	ldr	r2, [sp, #24]
    9d20:	3301      	adds	r3, #1
    9d22:	4213      	tst	r3, r2
    9d24:	d000      	beq.n	9d28 <_dtoa_r+0x9b0>
    9d26:	e084      	b.n	9e32 <_dtoa_r+0xaba>
    9d28:	2c39      	cmp	r4, #57	; 0x39
    9d2a:	d100      	bne.n	9d2e <_dtoa_r+0x9b6>
    9d2c:	e0a3      	b.n	9e76 <_dtoa_r+0xafe>
    9d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9d30:	2b00      	cmp	r3, #0
    9d32:	dd01      	ble.n	9d38 <_dtoa_r+0x9c0>
    9d34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    9d36:	3431      	adds	r4, #49	; 0x31
    9d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d3a:	1c5d      	adds	r5, r3, #1
    9d3c:	701c      	strb	r4, [r3, #0]
    9d3e:	e027      	b.n	9d90 <_dtoa_r+0xa18>
    9d40:	2b04      	cmp	r3, #4
    9d42:	d100      	bne.n	9d46 <_dtoa_r+0x9ce>
    9d44:	e769      	b.n	9c1a <_dtoa_r+0x8a2>
    9d46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9d48:	331c      	adds	r3, #28
    9d4a:	18d2      	adds	r2, r2, r3
    9d4c:	920b      	str	r2, [sp, #44]	; 0x2c
    9d4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9d50:	18e4      	adds	r4, r4, r3
    9d52:	18d3      	adds	r3, r2, r3
    9d54:	e760      	b.n	9c18 <_dtoa_r+0x8a0>
    9d56:	0003      	movs	r3, r0
    9d58:	e7f5      	b.n	9d46 <_dtoa_r+0x9ce>
    9d5a:	2f00      	cmp	r7, #0
    9d5c:	dc3c      	bgt.n	9dd8 <_dtoa_r+0xa60>
    9d5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9d60:	2b02      	cmp	r3, #2
    9d62:	dd39      	ble.n	9dd8 <_dtoa_r+0xa60>
    9d64:	970d      	str	r7, [sp, #52]	; 0x34
    9d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9d68:	2b00      	cmp	r3, #0
    9d6a:	d10c      	bne.n	9d86 <_dtoa_r+0xa0e>
    9d6c:	9908      	ldr	r1, [sp, #32]
    9d6e:	2205      	movs	r2, #5
    9d70:	9804      	ldr	r0, [sp, #16]
    9d72:	f000 f973 	bl	a05c <__multadd>
    9d76:	9008      	str	r0, [sp, #32]
    9d78:	0001      	movs	r1, r0
    9d7a:	9805      	ldr	r0, [sp, #20]
    9d7c:	f000 fb2f 	bl	a3de <__mcmp>
    9d80:	2800      	cmp	r0, #0
    9d82:	dd00      	ble.n	9d86 <_dtoa_r+0xa0e>
    9d84:	e55a      	b.n	983c <_dtoa_r+0x4c4>
    9d86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9d88:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    9d8a:	43db      	mvns	r3, r3
    9d8c:	9303      	str	r3, [sp, #12]
    9d8e:	2700      	movs	r7, #0
    9d90:	9908      	ldr	r1, [sp, #32]
    9d92:	9804      	ldr	r0, [sp, #16]
    9d94:	f000 f949 	bl	a02a <_Bfree>
    9d98:	2e00      	cmp	r6, #0
    9d9a:	d100      	bne.n	9d9e <_dtoa_r+0xa26>
    9d9c:	e63f      	b.n	9a1e <_dtoa_r+0x6a6>
    9d9e:	2f00      	cmp	r7, #0
    9da0:	d005      	beq.n	9dae <_dtoa_r+0xa36>
    9da2:	42b7      	cmp	r7, r6
    9da4:	d003      	beq.n	9dae <_dtoa_r+0xa36>
    9da6:	0039      	movs	r1, r7
    9da8:	9804      	ldr	r0, [sp, #16]
    9daa:	f000 f93e 	bl	a02a <_Bfree>
    9dae:	0031      	movs	r1, r6
    9db0:	9804      	ldr	r0, [sp, #16]
    9db2:	f000 f93a 	bl	a02a <_Bfree>
    9db6:	e632      	b.n	9a1e <_dtoa_r+0x6a6>
    9db8:	9508      	str	r5, [sp, #32]
    9dba:	002e      	movs	r6, r5
    9dbc:	e7e3      	b.n	9d86 <_dtoa_r+0xa0e>
    9dbe:	2300      	movs	r3, #0
    9dc0:	9308      	str	r3, [sp, #32]
    9dc2:	001e      	movs	r6, r3
    9dc4:	e7df      	b.n	9d86 <_dtoa_r+0xa0e>
    9dc6:	46c0      	nop			; (mov r8, r8)
    9dc8:	40240000 	.word	0x40240000
    9dcc:	00000433 	.word	0x00000433
    9dd0:	9603      	str	r6, [sp, #12]
    9dd2:	9508      	str	r5, [sp, #32]
    9dd4:	002e      	movs	r6, r5
    9dd6:	e531      	b.n	983c <_dtoa_r+0x4c4>
    9dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9dda:	970d      	str	r7, [sp, #52]	; 0x34
    9ddc:	2b00      	cmp	r3, #0
    9dde:	d000      	beq.n	9de2 <_dtoa_r+0xa6a>
    9de0:	e753      	b.n	9c8a <_dtoa_r+0x912>
    9de2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    9de4:	9908      	ldr	r1, [sp, #32]
    9de6:	9805      	ldr	r0, [sp, #20]
    9de8:	f7ff fa42 	bl	9270 <quorem>
    9dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9dee:	3030      	adds	r0, #48	; 0x30
    9df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9df2:	7028      	strb	r0, [r5, #0]
    9df4:	3501      	adds	r5, #1
    9df6:	0004      	movs	r4, r0
    9df8:	1aeb      	subs	r3, r5, r3
    9dfa:	429a      	cmp	r2, r3
    9dfc:	dc78      	bgt.n	9ef0 <_dtoa_r+0xb78>
    9dfe:	1e15      	subs	r5, r2, #0
    9e00:	dc00      	bgt.n	9e04 <_dtoa_r+0xa8c>
    9e02:	2501      	movs	r5, #1
    9e04:	2700      	movs	r7, #0
    9e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e08:	195d      	adds	r5, r3, r5
    9e0a:	9905      	ldr	r1, [sp, #20]
    9e0c:	2201      	movs	r2, #1
    9e0e:	9804      	ldr	r0, [sp, #16]
    9e10:	f000 fa94 	bl	a33c <__lshift>
    9e14:	9908      	ldr	r1, [sp, #32]
    9e16:	9005      	str	r0, [sp, #20]
    9e18:	f000 fae1 	bl	a3de <__mcmp>
    9e1c:	2800      	cmp	r0, #0
    9e1e:	dc2f      	bgt.n	9e80 <_dtoa_r+0xb08>
    9e20:	d101      	bne.n	9e26 <_dtoa_r+0xaae>
    9e22:	07e3      	lsls	r3, r4, #31
    9e24:	d42c      	bmi.n	9e80 <_dtoa_r+0xb08>
    9e26:	1e6b      	subs	r3, r5, #1
    9e28:	781a      	ldrb	r2, [r3, #0]
    9e2a:	2a30      	cmp	r2, #48	; 0x30
    9e2c:	d1b0      	bne.n	9d90 <_dtoa_r+0xa18>
    9e2e:	001d      	movs	r5, r3
    9e30:	e7f9      	b.n	9e26 <_dtoa_r+0xaae>
    9e32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9e34:	2b00      	cmp	r3, #0
    9e36:	db07      	blt.n	9e48 <_dtoa_r+0xad0>
    9e38:	001d      	movs	r5, r3
    9e3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9e3c:	431d      	orrs	r5, r3
    9e3e:	d126      	bne.n	9e8e <_dtoa_r+0xb16>
    9e40:	2301      	movs	r3, #1
    9e42:	9a06      	ldr	r2, [sp, #24]
    9e44:	4213      	tst	r3, r2
    9e46:	d122      	bne.n	9e8e <_dtoa_r+0xb16>
    9e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9e4a:	2b00      	cmp	r3, #0
    9e4c:	dc00      	bgt.n	9e50 <_dtoa_r+0xad8>
    9e4e:	e773      	b.n	9d38 <_dtoa_r+0x9c0>
    9e50:	9905      	ldr	r1, [sp, #20]
    9e52:	2201      	movs	r2, #1
    9e54:	9804      	ldr	r0, [sp, #16]
    9e56:	f000 fa71 	bl	a33c <__lshift>
    9e5a:	9908      	ldr	r1, [sp, #32]
    9e5c:	9005      	str	r0, [sp, #20]
    9e5e:	f000 fabe 	bl	a3de <__mcmp>
    9e62:	2800      	cmp	r0, #0
    9e64:	dc04      	bgt.n	9e70 <_dtoa_r+0xaf8>
    9e66:	d000      	beq.n	9e6a <_dtoa_r+0xaf2>
    9e68:	e766      	b.n	9d38 <_dtoa_r+0x9c0>
    9e6a:	07e3      	lsls	r3, r4, #31
    9e6c:	d400      	bmi.n	9e70 <_dtoa_r+0xaf8>
    9e6e:	e763      	b.n	9d38 <_dtoa_r+0x9c0>
    9e70:	2c39      	cmp	r4, #57	; 0x39
    9e72:	d000      	beq.n	9e76 <_dtoa_r+0xafe>
    9e74:	e75e      	b.n	9d34 <_dtoa_r+0x9bc>
    9e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9e78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9e7a:	1c5d      	adds	r5, r3, #1
    9e7c:	2339      	movs	r3, #57	; 0x39
    9e7e:	7013      	strb	r3, [r2, #0]
    9e80:	1e6b      	subs	r3, r5, #1
    9e82:	781a      	ldrb	r2, [r3, #0]
    9e84:	2a39      	cmp	r2, #57	; 0x39
    9e86:	d03b      	beq.n	9f00 <_dtoa_r+0xb88>
    9e88:	3201      	adds	r2, #1
    9e8a:	701a      	strb	r2, [r3, #0]
    9e8c:	e780      	b.n	9d90 <_dtoa_r+0xa18>
    9e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9e90:	3301      	adds	r3, #1
    9e92:	930d      	str	r3, [sp, #52]	; 0x34
    9e94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9e96:	2b00      	cmp	r3, #0
    9e98:	dd05      	ble.n	9ea6 <_dtoa_r+0xb2e>
    9e9a:	2c39      	cmp	r4, #57	; 0x39
    9e9c:	d0eb      	beq.n	9e76 <_dtoa_r+0xafe>
    9e9e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    9ea0:	3401      	adds	r4, #1
    9ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9ea4:	e74a      	b.n	9d3c <_dtoa_r+0x9c4>
    9ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9ea8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9eaa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    9eac:	701c      	strb	r4, [r3, #0]
    9eae:	4293      	cmp	r3, r2
    9eb0:	d0ab      	beq.n	9e0a <_dtoa_r+0xa92>
    9eb2:	2300      	movs	r3, #0
    9eb4:	220a      	movs	r2, #10
    9eb6:	9905      	ldr	r1, [sp, #20]
    9eb8:	9804      	ldr	r0, [sp, #16]
    9eba:	f000 f8cf 	bl	a05c <__multadd>
    9ebe:	2300      	movs	r3, #0
    9ec0:	9005      	str	r0, [sp, #20]
    9ec2:	220a      	movs	r2, #10
    9ec4:	0039      	movs	r1, r7
    9ec6:	9804      	ldr	r0, [sp, #16]
    9ec8:	42b7      	cmp	r7, r6
    9eca:	d106      	bne.n	9eda <_dtoa_r+0xb62>
    9ecc:	f000 f8c6 	bl	a05c <__multadd>
    9ed0:	0007      	movs	r7, r0
    9ed2:	0006      	movs	r6, r0
    9ed4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9ed6:	930b      	str	r3, [sp, #44]	; 0x2c
    9ed8:	e6fc      	b.n	9cd4 <_dtoa_r+0x95c>
    9eda:	f000 f8bf 	bl	a05c <__multadd>
    9ede:	0031      	movs	r1, r6
    9ee0:	0007      	movs	r7, r0
    9ee2:	2300      	movs	r3, #0
    9ee4:	220a      	movs	r2, #10
    9ee6:	9804      	ldr	r0, [sp, #16]
    9ee8:	f000 f8b8 	bl	a05c <__multadd>
    9eec:	0006      	movs	r6, r0
    9eee:	e7f1      	b.n	9ed4 <_dtoa_r+0xb5c>
    9ef0:	2300      	movs	r3, #0
    9ef2:	220a      	movs	r2, #10
    9ef4:	9905      	ldr	r1, [sp, #20]
    9ef6:	9804      	ldr	r0, [sp, #16]
    9ef8:	f000 f8b0 	bl	a05c <__multadd>
    9efc:	9005      	str	r0, [sp, #20]
    9efe:	e771      	b.n	9de4 <_dtoa_r+0xa6c>
    9f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9f02:	429a      	cmp	r2, r3
    9f04:	d105      	bne.n	9f12 <_dtoa_r+0xb9a>
    9f06:	9b03      	ldr	r3, [sp, #12]
    9f08:	3301      	adds	r3, #1
    9f0a:	9303      	str	r3, [sp, #12]
    9f0c:	2331      	movs	r3, #49	; 0x31
    9f0e:	7013      	strb	r3, [r2, #0]
    9f10:	e73e      	b.n	9d90 <_dtoa_r+0xa18>
    9f12:	001d      	movs	r5, r3
    9f14:	e7b4      	b.n	9e80 <_dtoa_r+0xb08>
    9f16:	4b0a      	ldr	r3, [pc, #40]	; (9f40 <_dtoa_r+0xbc8>)
    9f18:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9f1a:	930a      	str	r3, [sp, #40]	; 0x28
    9f1c:	4b09      	ldr	r3, [pc, #36]	; (9f44 <_dtoa_r+0xbcc>)
    9f1e:	2a00      	cmp	r2, #0
    9f20:	d001      	beq.n	9f26 <_dtoa_r+0xbae>
    9f22:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9f24:	6013      	str	r3, [r2, #0]
    9f26:	980a      	ldr	r0, [sp, #40]	; 0x28
    9f28:	b01d      	add	sp, #116	; 0x74
    9f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9f2e:	2b00      	cmp	r3, #0
    9f30:	dd00      	ble.n	9f34 <_dtoa_r+0xbbc>
    9f32:	e756      	b.n	9de2 <_dtoa_r+0xa6a>
    9f34:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9f36:	2b02      	cmp	r3, #2
    9f38:	dc00      	bgt.n	9f3c <_dtoa_r+0xbc4>
    9f3a:	e752      	b.n	9de2 <_dtoa_r+0xa6a>
    9f3c:	e713      	b.n	9d66 <_dtoa_r+0x9ee>
    9f3e:	46c0      	nop			; (mov r8, r8)
    9f40:	0000e9e0 	.word	0x0000e9e0
    9f44:	0000e9e8 	.word	0x0000e9e8

00009f48 <__locale_ctype_ptr>:
    9f48:	4b04      	ldr	r3, [pc, #16]	; (9f5c <__locale_ctype_ptr+0x14>)
    9f4a:	681b      	ldr	r3, [r3, #0]
    9f4c:	6a1b      	ldr	r3, [r3, #32]
    9f4e:	2b00      	cmp	r3, #0
    9f50:	d100      	bne.n	9f54 <__locale_ctype_ptr+0xc>
    9f52:	4b03      	ldr	r3, [pc, #12]	; (9f60 <__locale_ctype_ptr+0x18>)
    9f54:	33ec      	adds	r3, #236	; 0xec
    9f56:	6818      	ldr	r0, [r3, #0]
    9f58:	4770      	bx	lr
    9f5a:	46c0      	nop			; (mov r8, r8)
    9f5c:	20000038 	.word	0x20000038
    9f60:	2000009c 	.word	0x2000009c

00009f64 <_localeconv_r>:
    9f64:	4b03      	ldr	r3, [pc, #12]	; (9f74 <_localeconv_r+0x10>)
    9f66:	681b      	ldr	r3, [r3, #0]
    9f68:	6a18      	ldr	r0, [r3, #32]
    9f6a:	2800      	cmp	r0, #0
    9f6c:	d100      	bne.n	9f70 <_localeconv_r+0xc>
    9f6e:	4802      	ldr	r0, [pc, #8]	; (9f78 <_localeconv_r+0x14>)
    9f70:	30f0      	adds	r0, #240	; 0xf0
    9f72:	4770      	bx	lr
    9f74:	20000038 	.word	0x20000038
    9f78:	2000009c 	.word	0x2000009c

00009f7c <__ascii_mbtowc>:
    9f7c:	b082      	sub	sp, #8
    9f7e:	2900      	cmp	r1, #0
    9f80:	d100      	bne.n	9f84 <__ascii_mbtowc+0x8>
    9f82:	a901      	add	r1, sp, #4
    9f84:	1e10      	subs	r0, r2, #0
    9f86:	d006      	beq.n	9f96 <__ascii_mbtowc+0x1a>
    9f88:	2b00      	cmp	r3, #0
    9f8a:	d006      	beq.n	9f9a <__ascii_mbtowc+0x1e>
    9f8c:	7813      	ldrb	r3, [r2, #0]
    9f8e:	600b      	str	r3, [r1, #0]
    9f90:	7810      	ldrb	r0, [r2, #0]
    9f92:	1e43      	subs	r3, r0, #1
    9f94:	4198      	sbcs	r0, r3
    9f96:	b002      	add	sp, #8
    9f98:	4770      	bx	lr
    9f9a:	2002      	movs	r0, #2
    9f9c:	4240      	negs	r0, r0
    9f9e:	e7fa      	b.n	9f96 <__ascii_mbtowc+0x1a>

00009fa0 <memchr>:
    9fa0:	b2c9      	uxtb	r1, r1
    9fa2:	1882      	adds	r2, r0, r2
    9fa4:	4290      	cmp	r0, r2
    9fa6:	d101      	bne.n	9fac <memchr+0xc>
    9fa8:	2000      	movs	r0, #0
    9faa:	4770      	bx	lr
    9fac:	7803      	ldrb	r3, [r0, #0]
    9fae:	428b      	cmp	r3, r1
    9fb0:	d0fb      	beq.n	9faa <memchr+0xa>
    9fb2:	3001      	adds	r0, #1
    9fb4:	e7f6      	b.n	9fa4 <memchr+0x4>

00009fb6 <__malloc_lock>:
    9fb6:	4770      	bx	lr

00009fb8 <__malloc_unlock>:
    9fb8:	4770      	bx	lr

00009fba <_Balloc>:
    9fba:	b570      	push	{r4, r5, r6, lr}
    9fbc:	6a46      	ldr	r6, [r0, #36]	; 0x24
    9fbe:	0004      	movs	r4, r0
    9fc0:	000d      	movs	r5, r1
    9fc2:	2e00      	cmp	r6, #0
    9fc4:	d107      	bne.n	9fd6 <_Balloc+0x1c>
    9fc6:	2010      	movs	r0, #16
    9fc8:	f7fe fb36 	bl	8638 <malloc>
    9fcc:	6260      	str	r0, [r4, #36]	; 0x24
    9fce:	6046      	str	r6, [r0, #4]
    9fd0:	6086      	str	r6, [r0, #8]
    9fd2:	6006      	str	r6, [r0, #0]
    9fd4:	60c6      	str	r6, [r0, #12]
    9fd6:	6a66      	ldr	r6, [r4, #36]	; 0x24
    9fd8:	68f3      	ldr	r3, [r6, #12]
    9fda:	2b00      	cmp	r3, #0
    9fdc:	d013      	beq.n	a006 <_Balloc+0x4c>
    9fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9fe0:	00aa      	lsls	r2, r5, #2
    9fe2:	68db      	ldr	r3, [r3, #12]
    9fe4:	189b      	adds	r3, r3, r2
    9fe6:	6818      	ldr	r0, [r3, #0]
    9fe8:	2800      	cmp	r0, #0
    9fea:	d118      	bne.n	a01e <_Balloc+0x64>
    9fec:	2101      	movs	r1, #1
    9fee:	000e      	movs	r6, r1
    9ff0:	40ae      	lsls	r6, r5
    9ff2:	1d72      	adds	r2, r6, #5
    9ff4:	0092      	lsls	r2, r2, #2
    9ff6:	0020      	movs	r0, r4
    9ff8:	f000 fac2 	bl	a580 <_calloc_r>
    9ffc:	2800      	cmp	r0, #0
    9ffe:	d00c      	beq.n	a01a <_Balloc+0x60>
    a000:	6045      	str	r5, [r0, #4]
    a002:	6086      	str	r6, [r0, #8]
    a004:	e00d      	b.n	a022 <_Balloc+0x68>
    a006:	2221      	movs	r2, #33	; 0x21
    a008:	2104      	movs	r1, #4
    a00a:	0020      	movs	r0, r4
    a00c:	f000 fab8 	bl	a580 <_calloc_r>
    a010:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a012:	60f0      	str	r0, [r6, #12]
    a014:	68db      	ldr	r3, [r3, #12]
    a016:	2b00      	cmp	r3, #0
    a018:	d1e1      	bne.n	9fde <_Balloc+0x24>
    a01a:	2000      	movs	r0, #0
    a01c:	bd70      	pop	{r4, r5, r6, pc}
    a01e:	6802      	ldr	r2, [r0, #0]
    a020:	601a      	str	r2, [r3, #0]
    a022:	2300      	movs	r3, #0
    a024:	6103      	str	r3, [r0, #16]
    a026:	60c3      	str	r3, [r0, #12]
    a028:	e7f8      	b.n	a01c <_Balloc+0x62>

0000a02a <_Bfree>:
    a02a:	b570      	push	{r4, r5, r6, lr}
    a02c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    a02e:	0006      	movs	r6, r0
    a030:	000d      	movs	r5, r1
    a032:	2c00      	cmp	r4, #0
    a034:	d107      	bne.n	a046 <_Bfree+0x1c>
    a036:	2010      	movs	r0, #16
    a038:	f7fe fafe 	bl	8638 <malloc>
    a03c:	6270      	str	r0, [r6, #36]	; 0x24
    a03e:	6044      	str	r4, [r0, #4]
    a040:	6084      	str	r4, [r0, #8]
    a042:	6004      	str	r4, [r0, #0]
    a044:	60c4      	str	r4, [r0, #12]
    a046:	2d00      	cmp	r5, #0
    a048:	d007      	beq.n	a05a <_Bfree+0x30>
    a04a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    a04c:	686a      	ldr	r2, [r5, #4]
    a04e:	68db      	ldr	r3, [r3, #12]
    a050:	0092      	lsls	r2, r2, #2
    a052:	189b      	adds	r3, r3, r2
    a054:	681a      	ldr	r2, [r3, #0]
    a056:	602a      	str	r2, [r5, #0]
    a058:	601d      	str	r5, [r3, #0]
    a05a:	bd70      	pop	{r4, r5, r6, pc}

0000a05c <__multadd>:
    a05c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a05e:	001e      	movs	r6, r3
    a060:	2314      	movs	r3, #20
    a062:	469c      	mov	ip, r3
    a064:	0007      	movs	r7, r0
    a066:	000c      	movs	r4, r1
    a068:	2000      	movs	r0, #0
    a06a:	690d      	ldr	r5, [r1, #16]
    a06c:	448c      	add	ip, r1
    a06e:	4663      	mov	r3, ip
    a070:	8819      	ldrh	r1, [r3, #0]
    a072:	681b      	ldr	r3, [r3, #0]
    a074:	4351      	muls	r1, r2
    a076:	0c1b      	lsrs	r3, r3, #16
    a078:	4353      	muls	r3, r2
    a07a:	1989      	adds	r1, r1, r6
    a07c:	0c0e      	lsrs	r6, r1, #16
    a07e:	199b      	adds	r3, r3, r6
    a080:	b289      	uxth	r1, r1
    a082:	0c1e      	lsrs	r6, r3, #16
    a084:	041b      	lsls	r3, r3, #16
    a086:	185b      	adds	r3, r3, r1
    a088:	4661      	mov	r1, ip
    a08a:	3001      	adds	r0, #1
    a08c:	c108      	stmia	r1!, {r3}
    a08e:	468c      	mov	ip, r1
    a090:	4285      	cmp	r5, r0
    a092:	dcec      	bgt.n	a06e <__multadd+0x12>
    a094:	2e00      	cmp	r6, #0
    a096:	d01b      	beq.n	a0d0 <__multadd+0x74>
    a098:	68a3      	ldr	r3, [r4, #8]
    a09a:	429d      	cmp	r5, r3
    a09c:	db12      	blt.n	a0c4 <__multadd+0x68>
    a09e:	6863      	ldr	r3, [r4, #4]
    a0a0:	0038      	movs	r0, r7
    a0a2:	1c59      	adds	r1, r3, #1
    a0a4:	f7ff ff89 	bl	9fba <_Balloc>
    a0a8:	0021      	movs	r1, r4
    a0aa:	6923      	ldr	r3, [r4, #16]
    a0ac:	9001      	str	r0, [sp, #4]
    a0ae:	1c9a      	adds	r2, r3, #2
    a0b0:	0092      	lsls	r2, r2, #2
    a0b2:	310c      	adds	r1, #12
    a0b4:	300c      	adds	r0, #12
    a0b6:	f7fe fac9 	bl	864c <memcpy>
    a0ba:	0021      	movs	r1, r4
    a0bc:	0038      	movs	r0, r7
    a0be:	f7ff ffb4 	bl	a02a <_Bfree>
    a0c2:	9c01      	ldr	r4, [sp, #4]
    a0c4:	1d2b      	adds	r3, r5, #4
    a0c6:	009b      	lsls	r3, r3, #2
    a0c8:	18e3      	adds	r3, r4, r3
    a0ca:	3501      	adds	r5, #1
    a0cc:	605e      	str	r6, [r3, #4]
    a0ce:	6125      	str	r5, [r4, #16]
    a0d0:	0020      	movs	r0, r4
    a0d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000a0d4 <__hi0bits>:
    a0d4:	0003      	movs	r3, r0
    a0d6:	0c02      	lsrs	r2, r0, #16
    a0d8:	2000      	movs	r0, #0
    a0da:	4282      	cmp	r2, r0
    a0dc:	d101      	bne.n	a0e2 <__hi0bits+0xe>
    a0de:	041b      	lsls	r3, r3, #16
    a0e0:	3010      	adds	r0, #16
    a0e2:	0e1a      	lsrs	r2, r3, #24
    a0e4:	d101      	bne.n	a0ea <__hi0bits+0x16>
    a0e6:	3008      	adds	r0, #8
    a0e8:	021b      	lsls	r3, r3, #8
    a0ea:	0f1a      	lsrs	r2, r3, #28
    a0ec:	d101      	bne.n	a0f2 <__hi0bits+0x1e>
    a0ee:	3004      	adds	r0, #4
    a0f0:	011b      	lsls	r3, r3, #4
    a0f2:	0f9a      	lsrs	r2, r3, #30
    a0f4:	d101      	bne.n	a0fa <__hi0bits+0x26>
    a0f6:	3002      	adds	r0, #2
    a0f8:	009b      	lsls	r3, r3, #2
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	db03      	blt.n	a106 <__hi0bits+0x32>
    a0fe:	3001      	adds	r0, #1
    a100:	005b      	lsls	r3, r3, #1
    a102:	d400      	bmi.n	a106 <__hi0bits+0x32>
    a104:	2020      	movs	r0, #32
    a106:	4770      	bx	lr

0000a108 <__lo0bits>:
    a108:	2207      	movs	r2, #7
    a10a:	6803      	ldr	r3, [r0, #0]
    a10c:	b510      	push	{r4, lr}
    a10e:	0001      	movs	r1, r0
    a110:	401a      	ands	r2, r3
    a112:	d00d      	beq.n	a130 <__lo0bits+0x28>
    a114:	2401      	movs	r4, #1
    a116:	2000      	movs	r0, #0
    a118:	4223      	tst	r3, r4
    a11a:	d105      	bne.n	a128 <__lo0bits+0x20>
    a11c:	3002      	adds	r0, #2
    a11e:	4203      	tst	r3, r0
    a120:	d003      	beq.n	a12a <__lo0bits+0x22>
    a122:	40e3      	lsrs	r3, r4
    a124:	0020      	movs	r0, r4
    a126:	600b      	str	r3, [r1, #0]
    a128:	bd10      	pop	{r4, pc}
    a12a:	089b      	lsrs	r3, r3, #2
    a12c:	600b      	str	r3, [r1, #0]
    a12e:	e7fb      	b.n	a128 <__lo0bits+0x20>
    a130:	b29c      	uxth	r4, r3
    a132:	0010      	movs	r0, r2
    a134:	2c00      	cmp	r4, #0
    a136:	d101      	bne.n	a13c <__lo0bits+0x34>
    a138:	2010      	movs	r0, #16
    a13a:	0c1b      	lsrs	r3, r3, #16
    a13c:	b2da      	uxtb	r2, r3
    a13e:	2a00      	cmp	r2, #0
    a140:	d101      	bne.n	a146 <__lo0bits+0x3e>
    a142:	3008      	adds	r0, #8
    a144:	0a1b      	lsrs	r3, r3, #8
    a146:	071a      	lsls	r2, r3, #28
    a148:	d101      	bne.n	a14e <__lo0bits+0x46>
    a14a:	3004      	adds	r0, #4
    a14c:	091b      	lsrs	r3, r3, #4
    a14e:	079a      	lsls	r2, r3, #30
    a150:	d101      	bne.n	a156 <__lo0bits+0x4e>
    a152:	3002      	adds	r0, #2
    a154:	089b      	lsrs	r3, r3, #2
    a156:	07da      	lsls	r2, r3, #31
    a158:	d4e8      	bmi.n	a12c <__lo0bits+0x24>
    a15a:	085b      	lsrs	r3, r3, #1
    a15c:	d001      	beq.n	a162 <__lo0bits+0x5a>
    a15e:	3001      	adds	r0, #1
    a160:	e7e4      	b.n	a12c <__lo0bits+0x24>
    a162:	2020      	movs	r0, #32
    a164:	e7e0      	b.n	a128 <__lo0bits+0x20>

0000a166 <__i2b>:
    a166:	b510      	push	{r4, lr}
    a168:	000c      	movs	r4, r1
    a16a:	2101      	movs	r1, #1
    a16c:	f7ff ff25 	bl	9fba <_Balloc>
    a170:	2301      	movs	r3, #1
    a172:	6144      	str	r4, [r0, #20]
    a174:	6103      	str	r3, [r0, #16]
    a176:	bd10      	pop	{r4, pc}

0000a178 <__multiply>:
    a178:	b5f0      	push	{r4, r5, r6, r7, lr}
    a17a:	690b      	ldr	r3, [r1, #16]
    a17c:	0015      	movs	r5, r2
    a17e:	6912      	ldr	r2, [r2, #16]
    a180:	b089      	sub	sp, #36	; 0x24
    a182:	000c      	movs	r4, r1
    a184:	4293      	cmp	r3, r2
    a186:	da01      	bge.n	a18c <__multiply+0x14>
    a188:	002c      	movs	r4, r5
    a18a:	000d      	movs	r5, r1
    a18c:	6927      	ldr	r7, [r4, #16]
    a18e:	692e      	ldr	r6, [r5, #16]
    a190:	68a2      	ldr	r2, [r4, #8]
    a192:	19bb      	adds	r3, r7, r6
    a194:	6861      	ldr	r1, [r4, #4]
    a196:	9301      	str	r3, [sp, #4]
    a198:	4293      	cmp	r3, r2
    a19a:	dd00      	ble.n	a19e <__multiply+0x26>
    a19c:	3101      	adds	r1, #1
    a19e:	f7ff ff0c 	bl	9fba <_Balloc>
    a1a2:	0003      	movs	r3, r0
    a1a4:	3314      	adds	r3, #20
    a1a6:	9300      	str	r3, [sp, #0]
    a1a8:	9a00      	ldr	r2, [sp, #0]
    a1aa:	19bb      	adds	r3, r7, r6
    a1ac:	4694      	mov	ip, r2
    a1ae:	009b      	lsls	r3, r3, #2
    a1b0:	449c      	add	ip, r3
    a1b2:	0013      	movs	r3, r2
    a1b4:	2200      	movs	r2, #0
    a1b6:	9004      	str	r0, [sp, #16]
    a1b8:	4563      	cmp	r3, ip
    a1ba:	d31c      	bcc.n	a1f6 <__multiply+0x7e>
    a1bc:	002a      	movs	r2, r5
    a1be:	3414      	adds	r4, #20
    a1c0:	00bf      	lsls	r7, r7, #2
    a1c2:	19e3      	adds	r3, r4, r7
    a1c4:	3214      	adds	r2, #20
    a1c6:	00b6      	lsls	r6, r6, #2
    a1c8:	9305      	str	r3, [sp, #20]
    a1ca:	1993      	adds	r3, r2, r6
    a1cc:	9402      	str	r4, [sp, #8]
    a1ce:	9306      	str	r3, [sp, #24]
    a1d0:	9b06      	ldr	r3, [sp, #24]
    a1d2:	429a      	cmp	r2, r3
    a1d4:	d311      	bcc.n	a1fa <__multiply+0x82>
    a1d6:	9b01      	ldr	r3, [sp, #4]
    a1d8:	2b00      	cmp	r3, #0
    a1da:	dd06      	ble.n	a1ea <__multiply+0x72>
    a1dc:	2304      	movs	r3, #4
    a1de:	425b      	negs	r3, r3
    a1e0:	449c      	add	ip, r3
    a1e2:	4663      	mov	r3, ip
    a1e4:	681b      	ldr	r3, [r3, #0]
    a1e6:	2b00      	cmp	r3, #0
    a1e8:	d051      	beq.n	a28e <__multiply+0x116>
    a1ea:	9b04      	ldr	r3, [sp, #16]
    a1ec:	9a01      	ldr	r2, [sp, #4]
    a1ee:	0018      	movs	r0, r3
    a1f0:	611a      	str	r2, [r3, #16]
    a1f2:	b009      	add	sp, #36	; 0x24
    a1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a1f6:	c304      	stmia	r3!, {r2}
    a1f8:	e7de      	b.n	a1b8 <__multiply+0x40>
    a1fa:	8814      	ldrh	r4, [r2, #0]
    a1fc:	2c00      	cmp	r4, #0
    a1fe:	d01e      	beq.n	a23e <__multiply+0xc6>
    a200:	2600      	movs	r6, #0
    a202:	9d00      	ldr	r5, [sp, #0]
    a204:	9f02      	ldr	r7, [sp, #8]
    a206:	cf01      	ldmia	r7!, {r0}
    a208:	9507      	str	r5, [sp, #28]
    a20a:	cd08      	ldmia	r5!, {r3}
    a20c:	9303      	str	r3, [sp, #12]
    a20e:	b283      	uxth	r3, r0
    a210:	4363      	muls	r3, r4
    a212:	0019      	movs	r1, r3
    a214:	466b      	mov	r3, sp
    a216:	0c00      	lsrs	r0, r0, #16
    a218:	899b      	ldrh	r3, [r3, #12]
    a21a:	4360      	muls	r0, r4
    a21c:	18cb      	adds	r3, r1, r3
    a21e:	9903      	ldr	r1, [sp, #12]
    a220:	199b      	adds	r3, r3, r6
    a222:	0c09      	lsrs	r1, r1, #16
    a224:	1841      	adds	r1, r0, r1
    a226:	0c18      	lsrs	r0, r3, #16
    a228:	1809      	adds	r1, r1, r0
    a22a:	0c0e      	lsrs	r6, r1, #16
    a22c:	b29b      	uxth	r3, r3
    a22e:	0409      	lsls	r1, r1, #16
    a230:	430b      	orrs	r3, r1
    a232:	9907      	ldr	r1, [sp, #28]
    a234:	600b      	str	r3, [r1, #0]
    a236:	9b05      	ldr	r3, [sp, #20]
    a238:	42bb      	cmp	r3, r7
    a23a:	d8e4      	bhi.n	a206 <__multiply+0x8e>
    a23c:	602e      	str	r6, [r5, #0]
    a23e:	6813      	ldr	r3, [r2, #0]
    a240:	0c1b      	lsrs	r3, r3, #16
    a242:	9303      	str	r3, [sp, #12]
    a244:	d01e      	beq.n	a284 <__multiply+0x10c>
    a246:	2600      	movs	r6, #0
    a248:	9b00      	ldr	r3, [sp, #0]
    a24a:	9c02      	ldr	r4, [sp, #8]
    a24c:	681b      	ldr	r3, [r3, #0]
    a24e:	9800      	ldr	r0, [sp, #0]
    a250:	0007      	movs	r7, r0
    a252:	8821      	ldrh	r1, [r4, #0]
    a254:	9d03      	ldr	r5, [sp, #12]
    a256:	b29b      	uxth	r3, r3
    a258:	4369      	muls	r1, r5
    a25a:	c820      	ldmia	r0!, {r5}
    a25c:	0c2d      	lsrs	r5, r5, #16
    a25e:	1949      	adds	r1, r1, r5
    a260:	198e      	adds	r6, r1, r6
    a262:	0431      	lsls	r1, r6, #16
    a264:	430b      	orrs	r3, r1
    a266:	603b      	str	r3, [r7, #0]
    a268:	cc08      	ldmia	r4!, {r3}
    a26a:	9903      	ldr	r1, [sp, #12]
    a26c:	0c1b      	lsrs	r3, r3, #16
    a26e:	434b      	muls	r3, r1
    a270:	6879      	ldr	r1, [r7, #4]
    a272:	0c36      	lsrs	r6, r6, #16
    a274:	b289      	uxth	r1, r1
    a276:	185b      	adds	r3, r3, r1
    a278:	9905      	ldr	r1, [sp, #20]
    a27a:	199b      	adds	r3, r3, r6
    a27c:	0c1e      	lsrs	r6, r3, #16
    a27e:	42a1      	cmp	r1, r4
    a280:	d8e6      	bhi.n	a250 <__multiply+0xd8>
    a282:	6003      	str	r3, [r0, #0]
    a284:	9b00      	ldr	r3, [sp, #0]
    a286:	3204      	adds	r2, #4
    a288:	3304      	adds	r3, #4
    a28a:	9300      	str	r3, [sp, #0]
    a28c:	e7a0      	b.n	a1d0 <__multiply+0x58>
    a28e:	9b01      	ldr	r3, [sp, #4]
    a290:	3b01      	subs	r3, #1
    a292:	9301      	str	r3, [sp, #4]
    a294:	e79f      	b.n	a1d6 <__multiply+0x5e>
	...

0000a298 <__pow5mult>:
    a298:	2303      	movs	r3, #3
    a29a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a29c:	4013      	ands	r3, r2
    a29e:	0005      	movs	r5, r0
    a2a0:	000e      	movs	r6, r1
    a2a2:	0014      	movs	r4, r2
    a2a4:	2b00      	cmp	r3, #0
    a2a6:	d008      	beq.n	a2ba <__pow5mult+0x22>
    a2a8:	4922      	ldr	r1, [pc, #136]	; (a334 <__pow5mult+0x9c>)
    a2aa:	3b01      	subs	r3, #1
    a2ac:	009a      	lsls	r2, r3, #2
    a2ae:	5852      	ldr	r2, [r2, r1]
    a2b0:	2300      	movs	r3, #0
    a2b2:	0031      	movs	r1, r6
    a2b4:	f7ff fed2 	bl	a05c <__multadd>
    a2b8:	0006      	movs	r6, r0
    a2ba:	10a3      	asrs	r3, r4, #2
    a2bc:	9301      	str	r3, [sp, #4]
    a2be:	d036      	beq.n	a32e <__pow5mult+0x96>
    a2c0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    a2c2:	2c00      	cmp	r4, #0
    a2c4:	d107      	bne.n	a2d6 <__pow5mult+0x3e>
    a2c6:	2010      	movs	r0, #16
    a2c8:	f7fe f9b6 	bl	8638 <malloc>
    a2cc:	6268      	str	r0, [r5, #36]	; 0x24
    a2ce:	6044      	str	r4, [r0, #4]
    a2d0:	6084      	str	r4, [r0, #8]
    a2d2:	6004      	str	r4, [r0, #0]
    a2d4:	60c4      	str	r4, [r0, #12]
    a2d6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    a2d8:	68bc      	ldr	r4, [r7, #8]
    a2da:	2c00      	cmp	r4, #0
    a2dc:	d107      	bne.n	a2ee <__pow5mult+0x56>
    a2de:	4916      	ldr	r1, [pc, #88]	; (a338 <__pow5mult+0xa0>)
    a2e0:	0028      	movs	r0, r5
    a2e2:	f7ff ff40 	bl	a166 <__i2b>
    a2e6:	2300      	movs	r3, #0
    a2e8:	0004      	movs	r4, r0
    a2ea:	60b8      	str	r0, [r7, #8]
    a2ec:	6003      	str	r3, [r0, #0]
    a2ee:	2201      	movs	r2, #1
    a2f0:	9b01      	ldr	r3, [sp, #4]
    a2f2:	4213      	tst	r3, r2
    a2f4:	d00a      	beq.n	a30c <__pow5mult+0x74>
    a2f6:	0031      	movs	r1, r6
    a2f8:	0022      	movs	r2, r4
    a2fa:	0028      	movs	r0, r5
    a2fc:	f7ff ff3c 	bl	a178 <__multiply>
    a300:	0007      	movs	r7, r0
    a302:	0031      	movs	r1, r6
    a304:	0028      	movs	r0, r5
    a306:	f7ff fe90 	bl	a02a <_Bfree>
    a30a:	003e      	movs	r6, r7
    a30c:	9b01      	ldr	r3, [sp, #4]
    a30e:	105b      	asrs	r3, r3, #1
    a310:	9301      	str	r3, [sp, #4]
    a312:	d00c      	beq.n	a32e <__pow5mult+0x96>
    a314:	6820      	ldr	r0, [r4, #0]
    a316:	2800      	cmp	r0, #0
    a318:	d107      	bne.n	a32a <__pow5mult+0x92>
    a31a:	0022      	movs	r2, r4
    a31c:	0021      	movs	r1, r4
    a31e:	0028      	movs	r0, r5
    a320:	f7ff ff2a 	bl	a178 <__multiply>
    a324:	2300      	movs	r3, #0
    a326:	6020      	str	r0, [r4, #0]
    a328:	6003      	str	r3, [r0, #0]
    a32a:	0004      	movs	r4, r0
    a32c:	e7df      	b.n	a2ee <__pow5mult+0x56>
    a32e:	0030      	movs	r0, r6
    a330:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a332:	46c0      	nop			; (mov r8, r8)
    a334:	0000eae8 	.word	0x0000eae8
    a338:	00000271 	.word	0x00000271

0000a33c <__lshift>:
    a33c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a33e:	000d      	movs	r5, r1
    a340:	0017      	movs	r7, r2
    a342:	692b      	ldr	r3, [r5, #16]
    a344:	1154      	asrs	r4, r2, #5
    a346:	b085      	sub	sp, #20
    a348:	18e3      	adds	r3, r4, r3
    a34a:	9302      	str	r3, [sp, #8]
    a34c:	3301      	adds	r3, #1
    a34e:	9301      	str	r3, [sp, #4]
    a350:	6849      	ldr	r1, [r1, #4]
    a352:	68ab      	ldr	r3, [r5, #8]
    a354:	9003      	str	r0, [sp, #12]
    a356:	9a01      	ldr	r2, [sp, #4]
    a358:	4293      	cmp	r3, r2
    a35a:	db34      	blt.n	a3c6 <__lshift+0x8a>
    a35c:	9803      	ldr	r0, [sp, #12]
    a35e:	f7ff fe2c 	bl	9fba <_Balloc>
    a362:	2300      	movs	r3, #0
    a364:	0002      	movs	r2, r0
    a366:	0006      	movs	r6, r0
    a368:	0019      	movs	r1, r3
    a36a:	3214      	adds	r2, #20
    a36c:	42a3      	cmp	r3, r4
    a36e:	db2d      	blt.n	a3cc <__lshift+0x90>
    a370:	43e3      	mvns	r3, r4
    a372:	17db      	asrs	r3, r3, #31
    a374:	401c      	ands	r4, r3
    a376:	002b      	movs	r3, r5
    a378:	211f      	movs	r1, #31
    a37a:	00a4      	lsls	r4, r4, #2
    a37c:	1914      	adds	r4, r2, r4
    a37e:	692a      	ldr	r2, [r5, #16]
    a380:	3314      	adds	r3, #20
    a382:	0092      	lsls	r2, r2, #2
    a384:	189a      	adds	r2, r3, r2
    a386:	400f      	ands	r7, r1
    a388:	d024      	beq.n	a3d4 <__lshift+0x98>
    a38a:	3101      	adds	r1, #1
    a38c:	1bc9      	subs	r1, r1, r7
    a38e:	468c      	mov	ip, r1
    a390:	2100      	movs	r1, #0
    a392:	6818      	ldr	r0, [r3, #0]
    a394:	40b8      	lsls	r0, r7
    a396:	4301      	orrs	r1, r0
    a398:	4660      	mov	r0, ip
    a39a:	6021      	str	r1, [r4, #0]
    a39c:	cb02      	ldmia	r3!, {r1}
    a39e:	3404      	adds	r4, #4
    a3a0:	40c1      	lsrs	r1, r0
    a3a2:	429a      	cmp	r2, r3
    a3a4:	d8f5      	bhi.n	a392 <__lshift+0x56>
    a3a6:	6021      	str	r1, [r4, #0]
    a3a8:	2900      	cmp	r1, #0
    a3aa:	d002      	beq.n	a3b2 <__lshift+0x76>
    a3ac:	9b02      	ldr	r3, [sp, #8]
    a3ae:	3302      	adds	r3, #2
    a3b0:	9301      	str	r3, [sp, #4]
    a3b2:	9b01      	ldr	r3, [sp, #4]
    a3b4:	9803      	ldr	r0, [sp, #12]
    a3b6:	3b01      	subs	r3, #1
    a3b8:	6133      	str	r3, [r6, #16]
    a3ba:	0029      	movs	r1, r5
    a3bc:	f7ff fe35 	bl	a02a <_Bfree>
    a3c0:	0030      	movs	r0, r6
    a3c2:	b005      	add	sp, #20
    a3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3c6:	3101      	adds	r1, #1
    a3c8:	005b      	lsls	r3, r3, #1
    a3ca:	e7c4      	b.n	a356 <__lshift+0x1a>
    a3cc:	0098      	lsls	r0, r3, #2
    a3ce:	5011      	str	r1, [r2, r0]
    a3d0:	3301      	adds	r3, #1
    a3d2:	e7cb      	b.n	a36c <__lshift+0x30>
    a3d4:	cb02      	ldmia	r3!, {r1}
    a3d6:	c402      	stmia	r4!, {r1}
    a3d8:	429a      	cmp	r2, r3
    a3da:	d8fb      	bhi.n	a3d4 <__lshift+0x98>
    a3dc:	e7e9      	b.n	a3b2 <__lshift+0x76>

0000a3de <__mcmp>:
    a3de:	690a      	ldr	r2, [r1, #16]
    a3e0:	6903      	ldr	r3, [r0, #16]
    a3e2:	b530      	push	{r4, r5, lr}
    a3e4:	1a9b      	subs	r3, r3, r2
    a3e6:	d10e      	bne.n	a406 <__mcmp+0x28>
    a3e8:	0092      	lsls	r2, r2, #2
    a3ea:	3014      	adds	r0, #20
    a3ec:	3114      	adds	r1, #20
    a3ee:	1884      	adds	r4, r0, r2
    a3f0:	1889      	adds	r1, r1, r2
    a3f2:	3c04      	subs	r4, #4
    a3f4:	3904      	subs	r1, #4
    a3f6:	6822      	ldr	r2, [r4, #0]
    a3f8:	680d      	ldr	r5, [r1, #0]
    a3fa:	42aa      	cmp	r2, r5
    a3fc:	d005      	beq.n	a40a <__mcmp+0x2c>
    a3fe:	42aa      	cmp	r2, r5
    a400:	4192      	sbcs	r2, r2
    a402:	2301      	movs	r3, #1
    a404:	4313      	orrs	r3, r2
    a406:	0018      	movs	r0, r3
    a408:	bd30      	pop	{r4, r5, pc}
    a40a:	42a0      	cmp	r0, r4
    a40c:	d3f1      	bcc.n	a3f2 <__mcmp+0x14>
    a40e:	e7fa      	b.n	a406 <__mcmp+0x28>

0000a410 <__mdiff>:
    a410:	b5f0      	push	{r4, r5, r6, r7, lr}
    a412:	000d      	movs	r5, r1
    a414:	b085      	sub	sp, #20
    a416:	0007      	movs	r7, r0
    a418:	0011      	movs	r1, r2
    a41a:	0028      	movs	r0, r5
    a41c:	0014      	movs	r4, r2
    a41e:	f7ff ffde 	bl	a3de <__mcmp>
    a422:	1e06      	subs	r6, r0, #0
    a424:	d108      	bne.n	a438 <__mdiff+0x28>
    a426:	0001      	movs	r1, r0
    a428:	0038      	movs	r0, r7
    a42a:	f7ff fdc6 	bl	9fba <_Balloc>
    a42e:	2301      	movs	r3, #1
    a430:	6146      	str	r6, [r0, #20]
    a432:	6103      	str	r3, [r0, #16]
    a434:	b005      	add	sp, #20
    a436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a438:	2301      	movs	r3, #1
    a43a:	9301      	str	r3, [sp, #4]
    a43c:	2800      	cmp	r0, #0
    a43e:	db04      	blt.n	a44a <__mdiff+0x3a>
    a440:	0023      	movs	r3, r4
    a442:	002c      	movs	r4, r5
    a444:	001d      	movs	r5, r3
    a446:	2300      	movs	r3, #0
    a448:	9301      	str	r3, [sp, #4]
    a44a:	6861      	ldr	r1, [r4, #4]
    a44c:	0038      	movs	r0, r7
    a44e:	f7ff fdb4 	bl	9fba <_Balloc>
    a452:	002f      	movs	r7, r5
    a454:	2200      	movs	r2, #0
    a456:	9b01      	ldr	r3, [sp, #4]
    a458:	6926      	ldr	r6, [r4, #16]
    a45a:	60c3      	str	r3, [r0, #12]
    a45c:	3414      	adds	r4, #20
    a45e:	00b3      	lsls	r3, r6, #2
    a460:	18e3      	adds	r3, r4, r3
    a462:	9302      	str	r3, [sp, #8]
    a464:	692b      	ldr	r3, [r5, #16]
    a466:	3714      	adds	r7, #20
    a468:	009b      	lsls	r3, r3, #2
    a46a:	18fb      	adds	r3, r7, r3
    a46c:	9303      	str	r3, [sp, #12]
    a46e:	0003      	movs	r3, r0
    a470:	4694      	mov	ip, r2
    a472:	3314      	adds	r3, #20
    a474:	cc20      	ldmia	r4!, {r5}
    a476:	cf04      	ldmia	r7!, {r2}
    a478:	9201      	str	r2, [sp, #4]
    a47a:	b2aa      	uxth	r2, r5
    a47c:	4494      	add	ip, r2
    a47e:	466a      	mov	r2, sp
    a480:	4661      	mov	r1, ip
    a482:	8892      	ldrh	r2, [r2, #4]
    a484:	0c2d      	lsrs	r5, r5, #16
    a486:	1a8a      	subs	r2, r1, r2
    a488:	9901      	ldr	r1, [sp, #4]
    a48a:	0c09      	lsrs	r1, r1, #16
    a48c:	1a69      	subs	r1, r5, r1
    a48e:	1415      	asrs	r5, r2, #16
    a490:	1949      	adds	r1, r1, r5
    a492:	140d      	asrs	r5, r1, #16
    a494:	b292      	uxth	r2, r2
    a496:	0409      	lsls	r1, r1, #16
    a498:	430a      	orrs	r2, r1
    a49a:	601a      	str	r2, [r3, #0]
    a49c:	9a03      	ldr	r2, [sp, #12]
    a49e:	46ac      	mov	ip, r5
    a4a0:	3304      	adds	r3, #4
    a4a2:	42ba      	cmp	r2, r7
    a4a4:	d8e6      	bhi.n	a474 <__mdiff+0x64>
    a4a6:	9902      	ldr	r1, [sp, #8]
    a4a8:	001a      	movs	r2, r3
    a4aa:	428c      	cmp	r4, r1
    a4ac:	d305      	bcc.n	a4ba <__mdiff+0xaa>
    a4ae:	3a04      	subs	r2, #4
    a4b0:	6813      	ldr	r3, [r2, #0]
    a4b2:	2b00      	cmp	r3, #0
    a4b4:	d00e      	beq.n	a4d4 <__mdiff+0xc4>
    a4b6:	6106      	str	r6, [r0, #16]
    a4b8:	e7bc      	b.n	a434 <__mdiff+0x24>
    a4ba:	cc04      	ldmia	r4!, {r2}
    a4bc:	b291      	uxth	r1, r2
    a4be:	4461      	add	r1, ip
    a4c0:	140d      	asrs	r5, r1, #16
    a4c2:	0c12      	lsrs	r2, r2, #16
    a4c4:	1952      	adds	r2, r2, r5
    a4c6:	1415      	asrs	r5, r2, #16
    a4c8:	b289      	uxth	r1, r1
    a4ca:	0412      	lsls	r2, r2, #16
    a4cc:	430a      	orrs	r2, r1
    a4ce:	46ac      	mov	ip, r5
    a4d0:	c304      	stmia	r3!, {r2}
    a4d2:	e7e8      	b.n	a4a6 <__mdiff+0x96>
    a4d4:	3e01      	subs	r6, #1
    a4d6:	e7ea      	b.n	a4ae <__mdiff+0x9e>

0000a4d8 <__d2b>:
    a4d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a4da:	001d      	movs	r5, r3
    a4dc:	2101      	movs	r1, #1
    a4de:	9f08      	ldr	r7, [sp, #32]
    a4e0:	0014      	movs	r4, r2
    a4e2:	f7ff fd6a 	bl	9fba <_Balloc>
    a4e6:	032b      	lsls	r3, r5, #12
    a4e8:	006d      	lsls	r5, r5, #1
    a4ea:	0006      	movs	r6, r0
    a4ec:	0b1b      	lsrs	r3, r3, #12
    a4ee:	0d6d      	lsrs	r5, r5, #21
    a4f0:	d124      	bne.n	a53c <__d2b+0x64>
    a4f2:	9301      	str	r3, [sp, #4]
    a4f4:	2c00      	cmp	r4, #0
    a4f6:	d027      	beq.n	a548 <__d2b+0x70>
    a4f8:	4668      	mov	r0, sp
    a4fa:	9400      	str	r4, [sp, #0]
    a4fc:	f7ff fe04 	bl	a108 <__lo0bits>
    a500:	9c00      	ldr	r4, [sp, #0]
    a502:	2800      	cmp	r0, #0
    a504:	d01e      	beq.n	a544 <__d2b+0x6c>
    a506:	9b01      	ldr	r3, [sp, #4]
    a508:	2120      	movs	r1, #32
    a50a:	001a      	movs	r2, r3
    a50c:	1a09      	subs	r1, r1, r0
    a50e:	408a      	lsls	r2, r1
    a510:	40c3      	lsrs	r3, r0
    a512:	4322      	orrs	r2, r4
    a514:	6172      	str	r2, [r6, #20]
    a516:	9301      	str	r3, [sp, #4]
    a518:	9c01      	ldr	r4, [sp, #4]
    a51a:	61b4      	str	r4, [r6, #24]
    a51c:	1e63      	subs	r3, r4, #1
    a51e:	419c      	sbcs	r4, r3
    a520:	3401      	adds	r4, #1
    a522:	6134      	str	r4, [r6, #16]
    a524:	2d00      	cmp	r5, #0
    a526:	d018      	beq.n	a55a <__d2b+0x82>
    a528:	4b12      	ldr	r3, [pc, #72]	; (a574 <__d2b+0x9c>)
    a52a:	18ed      	adds	r5, r5, r3
    a52c:	2335      	movs	r3, #53	; 0x35
    a52e:	182d      	adds	r5, r5, r0
    a530:	603d      	str	r5, [r7, #0]
    a532:	1a18      	subs	r0, r3, r0
    a534:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a536:	6018      	str	r0, [r3, #0]
    a538:	0030      	movs	r0, r6
    a53a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a53c:	2280      	movs	r2, #128	; 0x80
    a53e:	0352      	lsls	r2, r2, #13
    a540:	4313      	orrs	r3, r2
    a542:	e7d6      	b.n	a4f2 <__d2b+0x1a>
    a544:	6174      	str	r4, [r6, #20]
    a546:	e7e7      	b.n	a518 <__d2b+0x40>
    a548:	a801      	add	r0, sp, #4
    a54a:	f7ff fddd 	bl	a108 <__lo0bits>
    a54e:	2401      	movs	r4, #1
    a550:	9b01      	ldr	r3, [sp, #4]
    a552:	6134      	str	r4, [r6, #16]
    a554:	6173      	str	r3, [r6, #20]
    a556:	3020      	adds	r0, #32
    a558:	e7e4      	b.n	a524 <__d2b+0x4c>
    a55a:	4b07      	ldr	r3, [pc, #28]	; (a578 <__d2b+0xa0>)
    a55c:	18c0      	adds	r0, r0, r3
    a55e:	4b07      	ldr	r3, [pc, #28]	; (a57c <__d2b+0xa4>)
    a560:	6038      	str	r0, [r7, #0]
    a562:	18e3      	adds	r3, r4, r3
    a564:	009b      	lsls	r3, r3, #2
    a566:	18f3      	adds	r3, r6, r3
    a568:	6958      	ldr	r0, [r3, #20]
    a56a:	f7ff fdb3 	bl	a0d4 <__hi0bits>
    a56e:	0164      	lsls	r4, r4, #5
    a570:	1a20      	subs	r0, r4, r0
    a572:	e7df      	b.n	a534 <__d2b+0x5c>
    a574:	fffffbcd 	.word	0xfffffbcd
    a578:	fffffbce 	.word	0xfffffbce
    a57c:	3fffffff 	.word	0x3fffffff

0000a580 <_calloc_r>:
    a580:	434a      	muls	r2, r1
    a582:	b570      	push	{r4, r5, r6, lr}
    a584:	0011      	movs	r1, r2
    a586:	0014      	movs	r4, r2
    a588:	f7fe f8bc 	bl	8704 <_malloc_r>
    a58c:	1e05      	subs	r5, r0, #0
    a58e:	d003      	beq.n	a598 <_calloc_r+0x18>
    a590:	0022      	movs	r2, r4
    a592:	2100      	movs	r1, #0
    a594:	f7fe f863 	bl	865e <memset>
    a598:	0028      	movs	r0, r5
    a59a:	bd70      	pop	{r4, r5, r6, pc}

0000a59c <__ssputs_r>:
    a59c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a59e:	688e      	ldr	r6, [r1, #8]
    a5a0:	b085      	sub	sp, #20
    a5a2:	0007      	movs	r7, r0
    a5a4:	000c      	movs	r4, r1
    a5a6:	9203      	str	r2, [sp, #12]
    a5a8:	9301      	str	r3, [sp, #4]
    a5aa:	429e      	cmp	r6, r3
    a5ac:	d839      	bhi.n	a622 <__ssputs_r+0x86>
    a5ae:	2390      	movs	r3, #144	; 0x90
    a5b0:	898a      	ldrh	r2, [r1, #12]
    a5b2:	00db      	lsls	r3, r3, #3
    a5b4:	421a      	tst	r2, r3
    a5b6:	d034      	beq.n	a622 <__ssputs_r+0x86>
    a5b8:	2503      	movs	r5, #3
    a5ba:	6909      	ldr	r1, [r1, #16]
    a5bc:	6823      	ldr	r3, [r4, #0]
    a5be:	1a5b      	subs	r3, r3, r1
    a5c0:	9302      	str	r3, [sp, #8]
    a5c2:	6963      	ldr	r3, [r4, #20]
    a5c4:	9802      	ldr	r0, [sp, #8]
    a5c6:	435d      	muls	r5, r3
    a5c8:	0feb      	lsrs	r3, r5, #31
    a5ca:	195d      	adds	r5, r3, r5
    a5cc:	9b01      	ldr	r3, [sp, #4]
    a5ce:	106d      	asrs	r5, r5, #1
    a5d0:	3301      	adds	r3, #1
    a5d2:	181b      	adds	r3, r3, r0
    a5d4:	42ab      	cmp	r3, r5
    a5d6:	d900      	bls.n	a5da <__ssputs_r+0x3e>
    a5d8:	001d      	movs	r5, r3
    a5da:	0553      	lsls	r3, r2, #21
    a5dc:	d532      	bpl.n	a644 <__ssputs_r+0xa8>
    a5de:	0029      	movs	r1, r5
    a5e0:	0038      	movs	r0, r7
    a5e2:	f7fe f88f 	bl	8704 <_malloc_r>
    a5e6:	1e06      	subs	r6, r0, #0
    a5e8:	d109      	bne.n	a5fe <__ssputs_r+0x62>
    a5ea:	230c      	movs	r3, #12
    a5ec:	603b      	str	r3, [r7, #0]
    a5ee:	2340      	movs	r3, #64	; 0x40
    a5f0:	2001      	movs	r0, #1
    a5f2:	89a2      	ldrh	r2, [r4, #12]
    a5f4:	4240      	negs	r0, r0
    a5f6:	4313      	orrs	r3, r2
    a5f8:	81a3      	strh	r3, [r4, #12]
    a5fa:	b005      	add	sp, #20
    a5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a5fe:	9a02      	ldr	r2, [sp, #8]
    a600:	6921      	ldr	r1, [r4, #16]
    a602:	f7fe f823 	bl	864c <memcpy>
    a606:	89a3      	ldrh	r3, [r4, #12]
    a608:	4a14      	ldr	r2, [pc, #80]	; (a65c <__ssputs_r+0xc0>)
    a60a:	401a      	ands	r2, r3
    a60c:	2380      	movs	r3, #128	; 0x80
    a60e:	4313      	orrs	r3, r2
    a610:	81a3      	strh	r3, [r4, #12]
    a612:	9b02      	ldr	r3, [sp, #8]
    a614:	6126      	str	r6, [r4, #16]
    a616:	18f6      	adds	r6, r6, r3
    a618:	6026      	str	r6, [r4, #0]
    a61a:	6165      	str	r5, [r4, #20]
    a61c:	9e01      	ldr	r6, [sp, #4]
    a61e:	1aed      	subs	r5, r5, r3
    a620:	60a5      	str	r5, [r4, #8]
    a622:	9b01      	ldr	r3, [sp, #4]
    a624:	42b3      	cmp	r3, r6
    a626:	d200      	bcs.n	a62a <__ssputs_r+0x8e>
    a628:	001e      	movs	r6, r3
    a62a:	0032      	movs	r2, r6
    a62c:	9903      	ldr	r1, [sp, #12]
    a62e:	6820      	ldr	r0, [r4, #0]
    a630:	f000 f926 	bl	a880 <memmove>
    a634:	68a3      	ldr	r3, [r4, #8]
    a636:	2000      	movs	r0, #0
    a638:	1b9b      	subs	r3, r3, r6
    a63a:	60a3      	str	r3, [r4, #8]
    a63c:	6823      	ldr	r3, [r4, #0]
    a63e:	199e      	adds	r6, r3, r6
    a640:	6026      	str	r6, [r4, #0]
    a642:	e7da      	b.n	a5fa <__ssputs_r+0x5e>
    a644:	002a      	movs	r2, r5
    a646:	0038      	movs	r0, r7
    a648:	f000 f92c 	bl	a8a4 <_realloc_r>
    a64c:	1e06      	subs	r6, r0, #0
    a64e:	d1e0      	bne.n	a612 <__ssputs_r+0x76>
    a650:	6921      	ldr	r1, [r4, #16]
    a652:	0038      	movs	r0, r7
    a654:	f7fe f80c 	bl	8670 <_free_r>
    a658:	e7c7      	b.n	a5ea <__ssputs_r+0x4e>
    a65a:	46c0      	nop			; (mov r8, r8)
    a65c:	fffffb7f 	.word	0xfffffb7f

0000a660 <_svfiprintf_r>:
    a660:	b5f0      	push	{r4, r5, r6, r7, lr}
    a662:	b09f      	sub	sp, #124	; 0x7c
    a664:	9002      	str	r0, [sp, #8]
    a666:	9305      	str	r3, [sp, #20]
    a668:	898b      	ldrh	r3, [r1, #12]
    a66a:	000f      	movs	r7, r1
    a66c:	0016      	movs	r6, r2
    a66e:	061b      	lsls	r3, r3, #24
    a670:	d511      	bpl.n	a696 <_svfiprintf_r+0x36>
    a672:	690b      	ldr	r3, [r1, #16]
    a674:	2b00      	cmp	r3, #0
    a676:	d10e      	bne.n	a696 <_svfiprintf_r+0x36>
    a678:	2140      	movs	r1, #64	; 0x40
    a67a:	f7fe f843 	bl	8704 <_malloc_r>
    a67e:	6038      	str	r0, [r7, #0]
    a680:	6138      	str	r0, [r7, #16]
    a682:	2800      	cmp	r0, #0
    a684:	d105      	bne.n	a692 <_svfiprintf_r+0x32>
    a686:	230c      	movs	r3, #12
    a688:	9a02      	ldr	r2, [sp, #8]
    a68a:	3801      	subs	r0, #1
    a68c:	6013      	str	r3, [r2, #0]
    a68e:	b01f      	add	sp, #124	; 0x7c
    a690:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a692:	2340      	movs	r3, #64	; 0x40
    a694:	617b      	str	r3, [r7, #20]
    a696:	2300      	movs	r3, #0
    a698:	ad06      	add	r5, sp, #24
    a69a:	616b      	str	r3, [r5, #20]
    a69c:	3320      	adds	r3, #32
    a69e:	766b      	strb	r3, [r5, #25]
    a6a0:	3310      	adds	r3, #16
    a6a2:	76ab      	strb	r3, [r5, #26]
    a6a4:	0034      	movs	r4, r6
    a6a6:	7823      	ldrb	r3, [r4, #0]
    a6a8:	2b00      	cmp	r3, #0
    a6aa:	d147      	bne.n	a73c <_svfiprintf_r+0xdc>
    a6ac:	1ba3      	subs	r3, r4, r6
    a6ae:	9304      	str	r3, [sp, #16]
    a6b0:	d00d      	beq.n	a6ce <_svfiprintf_r+0x6e>
    a6b2:	1ba3      	subs	r3, r4, r6
    a6b4:	0032      	movs	r2, r6
    a6b6:	0039      	movs	r1, r7
    a6b8:	9802      	ldr	r0, [sp, #8]
    a6ba:	f7ff ff6f 	bl	a59c <__ssputs_r>
    a6be:	1c43      	adds	r3, r0, #1
    a6c0:	d100      	bne.n	a6c4 <_svfiprintf_r+0x64>
    a6c2:	e0b5      	b.n	a830 <_svfiprintf_r+0x1d0>
    a6c4:	696a      	ldr	r2, [r5, #20]
    a6c6:	9b04      	ldr	r3, [sp, #16]
    a6c8:	4694      	mov	ip, r2
    a6ca:	4463      	add	r3, ip
    a6cc:	616b      	str	r3, [r5, #20]
    a6ce:	7823      	ldrb	r3, [r4, #0]
    a6d0:	2b00      	cmp	r3, #0
    a6d2:	d100      	bne.n	a6d6 <_svfiprintf_r+0x76>
    a6d4:	e0ac      	b.n	a830 <_svfiprintf_r+0x1d0>
    a6d6:	2201      	movs	r2, #1
    a6d8:	2300      	movs	r3, #0
    a6da:	4252      	negs	r2, r2
    a6dc:	606a      	str	r2, [r5, #4]
    a6de:	a902      	add	r1, sp, #8
    a6e0:	3254      	adds	r2, #84	; 0x54
    a6e2:	1852      	adds	r2, r2, r1
    a6e4:	3401      	adds	r4, #1
    a6e6:	602b      	str	r3, [r5, #0]
    a6e8:	60eb      	str	r3, [r5, #12]
    a6ea:	60ab      	str	r3, [r5, #8]
    a6ec:	7013      	strb	r3, [r2, #0]
    a6ee:	65ab      	str	r3, [r5, #88]	; 0x58
    a6f0:	4e58      	ldr	r6, [pc, #352]	; (a854 <_svfiprintf_r+0x1f4>)
    a6f2:	2205      	movs	r2, #5
    a6f4:	7821      	ldrb	r1, [r4, #0]
    a6f6:	0030      	movs	r0, r6
    a6f8:	f7ff fc52 	bl	9fa0 <memchr>
    a6fc:	1c62      	adds	r2, r4, #1
    a6fe:	2800      	cmp	r0, #0
    a700:	d120      	bne.n	a744 <_svfiprintf_r+0xe4>
    a702:	6829      	ldr	r1, [r5, #0]
    a704:	06cb      	lsls	r3, r1, #27
    a706:	d504      	bpl.n	a712 <_svfiprintf_r+0xb2>
    a708:	2353      	movs	r3, #83	; 0x53
    a70a:	ae02      	add	r6, sp, #8
    a70c:	3020      	adds	r0, #32
    a70e:	199b      	adds	r3, r3, r6
    a710:	7018      	strb	r0, [r3, #0]
    a712:	070b      	lsls	r3, r1, #28
    a714:	d504      	bpl.n	a720 <_svfiprintf_r+0xc0>
    a716:	2353      	movs	r3, #83	; 0x53
    a718:	202b      	movs	r0, #43	; 0x2b
    a71a:	ae02      	add	r6, sp, #8
    a71c:	199b      	adds	r3, r3, r6
    a71e:	7018      	strb	r0, [r3, #0]
    a720:	7823      	ldrb	r3, [r4, #0]
    a722:	2b2a      	cmp	r3, #42	; 0x2a
    a724:	d016      	beq.n	a754 <_svfiprintf_r+0xf4>
    a726:	2000      	movs	r0, #0
    a728:	210a      	movs	r1, #10
    a72a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a72c:	7822      	ldrb	r2, [r4, #0]
    a72e:	3a30      	subs	r2, #48	; 0x30
    a730:	2a09      	cmp	r2, #9
    a732:	d955      	bls.n	a7e0 <_svfiprintf_r+0x180>
    a734:	2800      	cmp	r0, #0
    a736:	d015      	beq.n	a764 <_svfiprintf_r+0x104>
    a738:	9309      	str	r3, [sp, #36]	; 0x24
    a73a:	e013      	b.n	a764 <_svfiprintf_r+0x104>
    a73c:	2b25      	cmp	r3, #37	; 0x25
    a73e:	d0b5      	beq.n	a6ac <_svfiprintf_r+0x4c>
    a740:	3401      	adds	r4, #1
    a742:	e7b0      	b.n	a6a6 <_svfiprintf_r+0x46>
    a744:	2301      	movs	r3, #1
    a746:	1b80      	subs	r0, r0, r6
    a748:	4083      	lsls	r3, r0
    a74a:	6829      	ldr	r1, [r5, #0]
    a74c:	0014      	movs	r4, r2
    a74e:	430b      	orrs	r3, r1
    a750:	602b      	str	r3, [r5, #0]
    a752:	e7cd      	b.n	a6f0 <_svfiprintf_r+0x90>
    a754:	9b05      	ldr	r3, [sp, #20]
    a756:	1d18      	adds	r0, r3, #4
    a758:	681b      	ldr	r3, [r3, #0]
    a75a:	9005      	str	r0, [sp, #20]
    a75c:	2b00      	cmp	r3, #0
    a75e:	db39      	blt.n	a7d4 <_svfiprintf_r+0x174>
    a760:	9309      	str	r3, [sp, #36]	; 0x24
    a762:	0014      	movs	r4, r2
    a764:	7823      	ldrb	r3, [r4, #0]
    a766:	2b2e      	cmp	r3, #46	; 0x2e
    a768:	d10b      	bne.n	a782 <_svfiprintf_r+0x122>
    a76a:	7863      	ldrb	r3, [r4, #1]
    a76c:	1c62      	adds	r2, r4, #1
    a76e:	2b2a      	cmp	r3, #42	; 0x2a
    a770:	d13e      	bne.n	a7f0 <_svfiprintf_r+0x190>
    a772:	9b05      	ldr	r3, [sp, #20]
    a774:	3402      	adds	r4, #2
    a776:	1d1a      	adds	r2, r3, #4
    a778:	681b      	ldr	r3, [r3, #0]
    a77a:	9205      	str	r2, [sp, #20]
    a77c:	2b00      	cmp	r3, #0
    a77e:	db34      	blt.n	a7ea <_svfiprintf_r+0x18a>
    a780:	9307      	str	r3, [sp, #28]
    a782:	4e35      	ldr	r6, [pc, #212]	; (a858 <_svfiprintf_r+0x1f8>)
    a784:	7821      	ldrb	r1, [r4, #0]
    a786:	2203      	movs	r2, #3
    a788:	0030      	movs	r0, r6
    a78a:	f7ff fc09 	bl	9fa0 <memchr>
    a78e:	2800      	cmp	r0, #0
    a790:	d006      	beq.n	a7a0 <_svfiprintf_r+0x140>
    a792:	2340      	movs	r3, #64	; 0x40
    a794:	1b80      	subs	r0, r0, r6
    a796:	4083      	lsls	r3, r0
    a798:	682a      	ldr	r2, [r5, #0]
    a79a:	3401      	adds	r4, #1
    a79c:	4313      	orrs	r3, r2
    a79e:	602b      	str	r3, [r5, #0]
    a7a0:	7821      	ldrb	r1, [r4, #0]
    a7a2:	2206      	movs	r2, #6
    a7a4:	482d      	ldr	r0, [pc, #180]	; (a85c <_svfiprintf_r+0x1fc>)
    a7a6:	1c66      	adds	r6, r4, #1
    a7a8:	7629      	strb	r1, [r5, #24]
    a7aa:	f7ff fbf9 	bl	9fa0 <memchr>
    a7ae:	2800      	cmp	r0, #0
    a7b0:	d046      	beq.n	a840 <_svfiprintf_r+0x1e0>
    a7b2:	4b2b      	ldr	r3, [pc, #172]	; (a860 <_svfiprintf_r+0x200>)
    a7b4:	2b00      	cmp	r3, #0
    a7b6:	d12f      	bne.n	a818 <_svfiprintf_r+0x1b8>
    a7b8:	6829      	ldr	r1, [r5, #0]
    a7ba:	9b05      	ldr	r3, [sp, #20]
    a7bc:	2207      	movs	r2, #7
    a7be:	05c9      	lsls	r1, r1, #23
    a7c0:	d528      	bpl.n	a814 <_svfiprintf_r+0x1b4>
    a7c2:	189b      	adds	r3, r3, r2
    a7c4:	4393      	bics	r3, r2
    a7c6:	3308      	adds	r3, #8
    a7c8:	9305      	str	r3, [sp, #20]
    a7ca:	696b      	ldr	r3, [r5, #20]
    a7cc:	9a03      	ldr	r2, [sp, #12]
    a7ce:	189b      	adds	r3, r3, r2
    a7d0:	616b      	str	r3, [r5, #20]
    a7d2:	e767      	b.n	a6a4 <_svfiprintf_r+0x44>
    a7d4:	425b      	negs	r3, r3
    a7d6:	60eb      	str	r3, [r5, #12]
    a7d8:	2302      	movs	r3, #2
    a7da:	430b      	orrs	r3, r1
    a7dc:	602b      	str	r3, [r5, #0]
    a7de:	e7c0      	b.n	a762 <_svfiprintf_r+0x102>
    a7e0:	434b      	muls	r3, r1
    a7e2:	3401      	adds	r4, #1
    a7e4:	189b      	adds	r3, r3, r2
    a7e6:	2001      	movs	r0, #1
    a7e8:	e7a0      	b.n	a72c <_svfiprintf_r+0xcc>
    a7ea:	2301      	movs	r3, #1
    a7ec:	425b      	negs	r3, r3
    a7ee:	e7c7      	b.n	a780 <_svfiprintf_r+0x120>
    a7f0:	2300      	movs	r3, #0
    a7f2:	0014      	movs	r4, r2
    a7f4:	200a      	movs	r0, #10
    a7f6:	001a      	movs	r2, r3
    a7f8:	606b      	str	r3, [r5, #4]
    a7fa:	7821      	ldrb	r1, [r4, #0]
    a7fc:	3930      	subs	r1, #48	; 0x30
    a7fe:	2909      	cmp	r1, #9
    a800:	d903      	bls.n	a80a <_svfiprintf_r+0x1aa>
    a802:	2b00      	cmp	r3, #0
    a804:	d0bd      	beq.n	a782 <_svfiprintf_r+0x122>
    a806:	9207      	str	r2, [sp, #28]
    a808:	e7bb      	b.n	a782 <_svfiprintf_r+0x122>
    a80a:	4342      	muls	r2, r0
    a80c:	3401      	adds	r4, #1
    a80e:	1852      	adds	r2, r2, r1
    a810:	2301      	movs	r3, #1
    a812:	e7f2      	b.n	a7fa <_svfiprintf_r+0x19a>
    a814:	3307      	adds	r3, #7
    a816:	e7d5      	b.n	a7c4 <_svfiprintf_r+0x164>
    a818:	ab05      	add	r3, sp, #20
    a81a:	9300      	str	r3, [sp, #0]
    a81c:	003a      	movs	r2, r7
    a81e:	4b11      	ldr	r3, [pc, #68]	; (a864 <_svfiprintf_r+0x204>)
    a820:	0029      	movs	r1, r5
    a822:	9802      	ldr	r0, [sp, #8]
    a824:	f7fe f868 	bl	88f8 <_printf_float>
    a828:	9003      	str	r0, [sp, #12]
    a82a:	9b03      	ldr	r3, [sp, #12]
    a82c:	3301      	adds	r3, #1
    a82e:	d1cc      	bne.n	a7ca <_svfiprintf_r+0x16a>
    a830:	89bb      	ldrh	r3, [r7, #12]
    a832:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a834:	065b      	lsls	r3, r3, #25
    a836:	d400      	bmi.n	a83a <_svfiprintf_r+0x1da>
    a838:	e729      	b.n	a68e <_svfiprintf_r+0x2e>
    a83a:	2001      	movs	r0, #1
    a83c:	4240      	negs	r0, r0
    a83e:	e726      	b.n	a68e <_svfiprintf_r+0x2e>
    a840:	ab05      	add	r3, sp, #20
    a842:	9300      	str	r3, [sp, #0]
    a844:	003a      	movs	r2, r7
    a846:	4b07      	ldr	r3, [pc, #28]	; (a864 <_svfiprintf_r+0x204>)
    a848:	0029      	movs	r1, r5
    a84a:	9802      	ldr	r0, [sp, #8]
    a84c:	f7fe fb0e 	bl	8e6c <_printf_i>
    a850:	e7ea      	b.n	a828 <_svfiprintf_r+0x1c8>
    a852:	46c0      	nop			; (mov r8, r8)
    a854:	0000eaf4 	.word	0x0000eaf4
    a858:	0000eafa 	.word	0x0000eafa
    a85c:	0000eafe 	.word	0x0000eafe
    a860:	000088f9 	.word	0x000088f9
    a864:	0000a59d 	.word	0x0000a59d

0000a868 <__ascii_wctomb>:
    a868:	1e0b      	subs	r3, r1, #0
    a86a:	d004      	beq.n	a876 <__ascii_wctomb+0xe>
    a86c:	2aff      	cmp	r2, #255	; 0xff
    a86e:	d904      	bls.n	a87a <__ascii_wctomb+0x12>
    a870:	238a      	movs	r3, #138	; 0x8a
    a872:	6003      	str	r3, [r0, #0]
    a874:	3b8b      	subs	r3, #139	; 0x8b
    a876:	0018      	movs	r0, r3
    a878:	4770      	bx	lr
    a87a:	700a      	strb	r2, [r1, #0]
    a87c:	2301      	movs	r3, #1
    a87e:	e7fa      	b.n	a876 <__ascii_wctomb+0xe>

0000a880 <memmove>:
    a880:	b510      	push	{r4, lr}
    a882:	4288      	cmp	r0, r1
    a884:	d902      	bls.n	a88c <memmove+0xc>
    a886:	188b      	adds	r3, r1, r2
    a888:	4298      	cmp	r0, r3
    a88a:	d308      	bcc.n	a89e <memmove+0x1e>
    a88c:	2300      	movs	r3, #0
    a88e:	429a      	cmp	r2, r3
    a890:	d007      	beq.n	a8a2 <memmove+0x22>
    a892:	5ccc      	ldrb	r4, [r1, r3]
    a894:	54c4      	strb	r4, [r0, r3]
    a896:	3301      	adds	r3, #1
    a898:	e7f9      	b.n	a88e <memmove+0xe>
    a89a:	5c8b      	ldrb	r3, [r1, r2]
    a89c:	5483      	strb	r3, [r0, r2]
    a89e:	3a01      	subs	r2, #1
    a8a0:	d2fb      	bcs.n	a89a <memmove+0x1a>
    a8a2:	bd10      	pop	{r4, pc}

0000a8a4 <_realloc_r>:
    a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a8a6:	0007      	movs	r7, r0
    a8a8:	000d      	movs	r5, r1
    a8aa:	0016      	movs	r6, r2
    a8ac:	2900      	cmp	r1, #0
    a8ae:	d105      	bne.n	a8bc <_realloc_r+0x18>
    a8b0:	0011      	movs	r1, r2
    a8b2:	f7fd ff27 	bl	8704 <_malloc_r>
    a8b6:	0004      	movs	r4, r0
    a8b8:	0020      	movs	r0, r4
    a8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a8bc:	2a00      	cmp	r2, #0
    a8be:	d103      	bne.n	a8c8 <_realloc_r+0x24>
    a8c0:	f7fd fed6 	bl	8670 <_free_r>
    a8c4:	0034      	movs	r4, r6
    a8c6:	e7f7      	b.n	a8b8 <_realloc_r+0x14>
    a8c8:	f000 f812 	bl	a8f0 <_malloc_usable_size_r>
    a8cc:	002c      	movs	r4, r5
    a8ce:	4286      	cmp	r6, r0
    a8d0:	d9f2      	bls.n	a8b8 <_realloc_r+0x14>
    a8d2:	0031      	movs	r1, r6
    a8d4:	0038      	movs	r0, r7
    a8d6:	f7fd ff15 	bl	8704 <_malloc_r>
    a8da:	1e04      	subs	r4, r0, #0
    a8dc:	d0ec      	beq.n	a8b8 <_realloc_r+0x14>
    a8de:	0029      	movs	r1, r5
    a8e0:	0032      	movs	r2, r6
    a8e2:	f7fd feb3 	bl	864c <memcpy>
    a8e6:	0029      	movs	r1, r5
    a8e8:	0038      	movs	r0, r7
    a8ea:	f7fd fec1 	bl	8670 <_free_r>
    a8ee:	e7e3      	b.n	a8b8 <_realloc_r+0x14>

0000a8f0 <_malloc_usable_size_r>:
    a8f0:	1f0b      	subs	r3, r1, #4
    a8f2:	681b      	ldr	r3, [r3, #0]
    a8f4:	1f18      	subs	r0, r3, #4
    a8f6:	2b00      	cmp	r3, #0
    a8f8:	da01      	bge.n	a8fe <_malloc_usable_size_r+0xe>
    a8fa:	580b      	ldr	r3, [r1, r0]
    a8fc:	18c0      	adds	r0, r0, r3
    a8fe:	4770      	bx	lr

0000a900 <__gnu_thumb1_case_uqi>:
    a900:	b402      	push	{r1}
    a902:	4671      	mov	r1, lr
    a904:	0849      	lsrs	r1, r1, #1
    a906:	0049      	lsls	r1, r1, #1
    a908:	5c09      	ldrb	r1, [r1, r0]
    a90a:	0049      	lsls	r1, r1, #1
    a90c:	448e      	add	lr, r1
    a90e:	bc02      	pop	{r1}
    a910:	4770      	bx	lr
    a912:	46c0      	nop			; (mov r8, r8)

0000a914 <__udivsi3>:
    a914:	2200      	movs	r2, #0
    a916:	0843      	lsrs	r3, r0, #1
    a918:	428b      	cmp	r3, r1
    a91a:	d374      	bcc.n	aa06 <__udivsi3+0xf2>
    a91c:	0903      	lsrs	r3, r0, #4
    a91e:	428b      	cmp	r3, r1
    a920:	d35f      	bcc.n	a9e2 <__udivsi3+0xce>
    a922:	0a03      	lsrs	r3, r0, #8
    a924:	428b      	cmp	r3, r1
    a926:	d344      	bcc.n	a9b2 <__udivsi3+0x9e>
    a928:	0b03      	lsrs	r3, r0, #12
    a92a:	428b      	cmp	r3, r1
    a92c:	d328      	bcc.n	a980 <__udivsi3+0x6c>
    a92e:	0c03      	lsrs	r3, r0, #16
    a930:	428b      	cmp	r3, r1
    a932:	d30d      	bcc.n	a950 <__udivsi3+0x3c>
    a934:	22ff      	movs	r2, #255	; 0xff
    a936:	0209      	lsls	r1, r1, #8
    a938:	ba12      	rev	r2, r2
    a93a:	0c03      	lsrs	r3, r0, #16
    a93c:	428b      	cmp	r3, r1
    a93e:	d302      	bcc.n	a946 <__udivsi3+0x32>
    a940:	1212      	asrs	r2, r2, #8
    a942:	0209      	lsls	r1, r1, #8
    a944:	d065      	beq.n	aa12 <__udivsi3+0xfe>
    a946:	0b03      	lsrs	r3, r0, #12
    a948:	428b      	cmp	r3, r1
    a94a:	d319      	bcc.n	a980 <__udivsi3+0x6c>
    a94c:	e000      	b.n	a950 <__udivsi3+0x3c>
    a94e:	0a09      	lsrs	r1, r1, #8
    a950:	0bc3      	lsrs	r3, r0, #15
    a952:	428b      	cmp	r3, r1
    a954:	d301      	bcc.n	a95a <__udivsi3+0x46>
    a956:	03cb      	lsls	r3, r1, #15
    a958:	1ac0      	subs	r0, r0, r3
    a95a:	4152      	adcs	r2, r2
    a95c:	0b83      	lsrs	r3, r0, #14
    a95e:	428b      	cmp	r3, r1
    a960:	d301      	bcc.n	a966 <__udivsi3+0x52>
    a962:	038b      	lsls	r3, r1, #14
    a964:	1ac0      	subs	r0, r0, r3
    a966:	4152      	adcs	r2, r2
    a968:	0b43      	lsrs	r3, r0, #13
    a96a:	428b      	cmp	r3, r1
    a96c:	d301      	bcc.n	a972 <__udivsi3+0x5e>
    a96e:	034b      	lsls	r3, r1, #13
    a970:	1ac0      	subs	r0, r0, r3
    a972:	4152      	adcs	r2, r2
    a974:	0b03      	lsrs	r3, r0, #12
    a976:	428b      	cmp	r3, r1
    a978:	d301      	bcc.n	a97e <__udivsi3+0x6a>
    a97a:	030b      	lsls	r3, r1, #12
    a97c:	1ac0      	subs	r0, r0, r3
    a97e:	4152      	adcs	r2, r2
    a980:	0ac3      	lsrs	r3, r0, #11
    a982:	428b      	cmp	r3, r1
    a984:	d301      	bcc.n	a98a <__udivsi3+0x76>
    a986:	02cb      	lsls	r3, r1, #11
    a988:	1ac0      	subs	r0, r0, r3
    a98a:	4152      	adcs	r2, r2
    a98c:	0a83      	lsrs	r3, r0, #10
    a98e:	428b      	cmp	r3, r1
    a990:	d301      	bcc.n	a996 <__udivsi3+0x82>
    a992:	028b      	lsls	r3, r1, #10
    a994:	1ac0      	subs	r0, r0, r3
    a996:	4152      	adcs	r2, r2
    a998:	0a43      	lsrs	r3, r0, #9
    a99a:	428b      	cmp	r3, r1
    a99c:	d301      	bcc.n	a9a2 <__udivsi3+0x8e>
    a99e:	024b      	lsls	r3, r1, #9
    a9a0:	1ac0      	subs	r0, r0, r3
    a9a2:	4152      	adcs	r2, r2
    a9a4:	0a03      	lsrs	r3, r0, #8
    a9a6:	428b      	cmp	r3, r1
    a9a8:	d301      	bcc.n	a9ae <__udivsi3+0x9a>
    a9aa:	020b      	lsls	r3, r1, #8
    a9ac:	1ac0      	subs	r0, r0, r3
    a9ae:	4152      	adcs	r2, r2
    a9b0:	d2cd      	bcs.n	a94e <__udivsi3+0x3a>
    a9b2:	09c3      	lsrs	r3, r0, #7
    a9b4:	428b      	cmp	r3, r1
    a9b6:	d301      	bcc.n	a9bc <__udivsi3+0xa8>
    a9b8:	01cb      	lsls	r3, r1, #7
    a9ba:	1ac0      	subs	r0, r0, r3
    a9bc:	4152      	adcs	r2, r2
    a9be:	0983      	lsrs	r3, r0, #6
    a9c0:	428b      	cmp	r3, r1
    a9c2:	d301      	bcc.n	a9c8 <__udivsi3+0xb4>
    a9c4:	018b      	lsls	r3, r1, #6
    a9c6:	1ac0      	subs	r0, r0, r3
    a9c8:	4152      	adcs	r2, r2
    a9ca:	0943      	lsrs	r3, r0, #5
    a9cc:	428b      	cmp	r3, r1
    a9ce:	d301      	bcc.n	a9d4 <__udivsi3+0xc0>
    a9d0:	014b      	lsls	r3, r1, #5
    a9d2:	1ac0      	subs	r0, r0, r3
    a9d4:	4152      	adcs	r2, r2
    a9d6:	0903      	lsrs	r3, r0, #4
    a9d8:	428b      	cmp	r3, r1
    a9da:	d301      	bcc.n	a9e0 <__udivsi3+0xcc>
    a9dc:	010b      	lsls	r3, r1, #4
    a9de:	1ac0      	subs	r0, r0, r3
    a9e0:	4152      	adcs	r2, r2
    a9e2:	08c3      	lsrs	r3, r0, #3
    a9e4:	428b      	cmp	r3, r1
    a9e6:	d301      	bcc.n	a9ec <__udivsi3+0xd8>
    a9e8:	00cb      	lsls	r3, r1, #3
    a9ea:	1ac0      	subs	r0, r0, r3
    a9ec:	4152      	adcs	r2, r2
    a9ee:	0883      	lsrs	r3, r0, #2
    a9f0:	428b      	cmp	r3, r1
    a9f2:	d301      	bcc.n	a9f8 <__udivsi3+0xe4>
    a9f4:	008b      	lsls	r3, r1, #2
    a9f6:	1ac0      	subs	r0, r0, r3
    a9f8:	4152      	adcs	r2, r2
    a9fa:	0843      	lsrs	r3, r0, #1
    a9fc:	428b      	cmp	r3, r1
    a9fe:	d301      	bcc.n	aa04 <__udivsi3+0xf0>
    aa00:	004b      	lsls	r3, r1, #1
    aa02:	1ac0      	subs	r0, r0, r3
    aa04:	4152      	adcs	r2, r2
    aa06:	1a41      	subs	r1, r0, r1
    aa08:	d200      	bcs.n	aa0c <__udivsi3+0xf8>
    aa0a:	4601      	mov	r1, r0
    aa0c:	4152      	adcs	r2, r2
    aa0e:	4610      	mov	r0, r2
    aa10:	4770      	bx	lr
    aa12:	e7ff      	b.n	aa14 <__udivsi3+0x100>
    aa14:	b501      	push	{r0, lr}
    aa16:	2000      	movs	r0, #0
    aa18:	f000 f8f0 	bl	abfc <__aeabi_idiv0>
    aa1c:	bd02      	pop	{r1, pc}
    aa1e:	46c0      	nop			; (mov r8, r8)

0000aa20 <__aeabi_uidivmod>:
    aa20:	2900      	cmp	r1, #0
    aa22:	d0f7      	beq.n	aa14 <__udivsi3+0x100>
    aa24:	e776      	b.n	a914 <__udivsi3>
    aa26:	4770      	bx	lr

0000aa28 <__divsi3>:
    aa28:	4603      	mov	r3, r0
    aa2a:	430b      	orrs	r3, r1
    aa2c:	d47f      	bmi.n	ab2e <__divsi3+0x106>
    aa2e:	2200      	movs	r2, #0
    aa30:	0843      	lsrs	r3, r0, #1
    aa32:	428b      	cmp	r3, r1
    aa34:	d374      	bcc.n	ab20 <__divsi3+0xf8>
    aa36:	0903      	lsrs	r3, r0, #4
    aa38:	428b      	cmp	r3, r1
    aa3a:	d35f      	bcc.n	aafc <__divsi3+0xd4>
    aa3c:	0a03      	lsrs	r3, r0, #8
    aa3e:	428b      	cmp	r3, r1
    aa40:	d344      	bcc.n	aacc <__divsi3+0xa4>
    aa42:	0b03      	lsrs	r3, r0, #12
    aa44:	428b      	cmp	r3, r1
    aa46:	d328      	bcc.n	aa9a <__divsi3+0x72>
    aa48:	0c03      	lsrs	r3, r0, #16
    aa4a:	428b      	cmp	r3, r1
    aa4c:	d30d      	bcc.n	aa6a <__divsi3+0x42>
    aa4e:	22ff      	movs	r2, #255	; 0xff
    aa50:	0209      	lsls	r1, r1, #8
    aa52:	ba12      	rev	r2, r2
    aa54:	0c03      	lsrs	r3, r0, #16
    aa56:	428b      	cmp	r3, r1
    aa58:	d302      	bcc.n	aa60 <__divsi3+0x38>
    aa5a:	1212      	asrs	r2, r2, #8
    aa5c:	0209      	lsls	r1, r1, #8
    aa5e:	d065      	beq.n	ab2c <__divsi3+0x104>
    aa60:	0b03      	lsrs	r3, r0, #12
    aa62:	428b      	cmp	r3, r1
    aa64:	d319      	bcc.n	aa9a <__divsi3+0x72>
    aa66:	e000      	b.n	aa6a <__divsi3+0x42>
    aa68:	0a09      	lsrs	r1, r1, #8
    aa6a:	0bc3      	lsrs	r3, r0, #15
    aa6c:	428b      	cmp	r3, r1
    aa6e:	d301      	bcc.n	aa74 <__divsi3+0x4c>
    aa70:	03cb      	lsls	r3, r1, #15
    aa72:	1ac0      	subs	r0, r0, r3
    aa74:	4152      	adcs	r2, r2
    aa76:	0b83      	lsrs	r3, r0, #14
    aa78:	428b      	cmp	r3, r1
    aa7a:	d301      	bcc.n	aa80 <__divsi3+0x58>
    aa7c:	038b      	lsls	r3, r1, #14
    aa7e:	1ac0      	subs	r0, r0, r3
    aa80:	4152      	adcs	r2, r2
    aa82:	0b43      	lsrs	r3, r0, #13
    aa84:	428b      	cmp	r3, r1
    aa86:	d301      	bcc.n	aa8c <__divsi3+0x64>
    aa88:	034b      	lsls	r3, r1, #13
    aa8a:	1ac0      	subs	r0, r0, r3
    aa8c:	4152      	adcs	r2, r2
    aa8e:	0b03      	lsrs	r3, r0, #12
    aa90:	428b      	cmp	r3, r1
    aa92:	d301      	bcc.n	aa98 <__divsi3+0x70>
    aa94:	030b      	lsls	r3, r1, #12
    aa96:	1ac0      	subs	r0, r0, r3
    aa98:	4152      	adcs	r2, r2
    aa9a:	0ac3      	lsrs	r3, r0, #11
    aa9c:	428b      	cmp	r3, r1
    aa9e:	d301      	bcc.n	aaa4 <__divsi3+0x7c>
    aaa0:	02cb      	lsls	r3, r1, #11
    aaa2:	1ac0      	subs	r0, r0, r3
    aaa4:	4152      	adcs	r2, r2
    aaa6:	0a83      	lsrs	r3, r0, #10
    aaa8:	428b      	cmp	r3, r1
    aaaa:	d301      	bcc.n	aab0 <__divsi3+0x88>
    aaac:	028b      	lsls	r3, r1, #10
    aaae:	1ac0      	subs	r0, r0, r3
    aab0:	4152      	adcs	r2, r2
    aab2:	0a43      	lsrs	r3, r0, #9
    aab4:	428b      	cmp	r3, r1
    aab6:	d301      	bcc.n	aabc <__divsi3+0x94>
    aab8:	024b      	lsls	r3, r1, #9
    aaba:	1ac0      	subs	r0, r0, r3
    aabc:	4152      	adcs	r2, r2
    aabe:	0a03      	lsrs	r3, r0, #8
    aac0:	428b      	cmp	r3, r1
    aac2:	d301      	bcc.n	aac8 <__divsi3+0xa0>
    aac4:	020b      	lsls	r3, r1, #8
    aac6:	1ac0      	subs	r0, r0, r3
    aac8:	4152      	adcs	r2, r2
    aaca:	d2cd      	bcs.n	aa68 <__divsi3+0x40>
    aacc:	09c3      	lsrs	r3, r0, #7
    aace:	428b      	cmp	r3, r1
    aad0:	d301      	bcc.n	aad6 <__divsi3+0xae>
    aad2:	01cb      	lsls	r3, r1, #7
    aad4:	1ac0      	subs	r0, r0, r3
    aad6:	4152      	adcs	r2, r2
    aad8:	0983      	lsrs	r3, r0, #6
    aada:	428b      	cmp	r3, r1
    aadc:	d301      	bcc.n	aae2 <__divsi3+0xba>
    aade:	018b      	lsls	r3, r1, #6
    aae0:	1ac0      	subs	r0, r0, r3
    aae2:	4152      	adcs	r2, r2
    aae4:	0943      	lsrs	r3, r0, #5
    aae6:	428b      	cmp	r3, r1
    aae8:	d301      	bcc.n	aaee <__divsi3+0xc6>
    aaea:	014b      	lsls	r3, r1, #5
    aaec:	1ac0      	subs	r0, r0, r3
    aaee:	4152      	adcs	r2, r2
    aaf0:	0903      	lsrs	r3, r0, #4
    aaf2:	428b      	cmp	r3, r1
    aaf4:	d301      	bcc.n	aafa <__divsi3+0xd2>
    aaf6:	010b      	lsls	r3, r1, #4
    aaf8:	1ac0      	subs	r0, r0, r3
    aafa:	4152      	adcs	r2, r2
    aafc:	08c3      	lsrs	r3, r0, #3
    aafe:	428b      	cmp	r3, r1
    ab00:	d301      	bcc.n	ab06 <__divsi3+0xde>
    ab02:	00cb      	lsls	r3, r1, #3
    ab04:	1ac0      	subs	r0, r0, r3
    ab06:	4152      	adcs	r2, r2
    ab08:	0883      	lsrs	r3, r0, #2
    ab0a:	428b      	cmp	r3, r1
    ab0c:	d301      	bcc.n	ab12 <__divsi3+0xea>
    ab0e:	008b      	lsls	r3, r1, #2
    ab10:	1ac0      	subs	r0, r0, r3
    ab12:	4152      	adcs	r2, r2
    ab14:	0843      	lsrs	r3, r0, #1
    ab16:	428b      	cmp	r3, r1
    ab18:	d301      	bcc.n	ab1e <__divsi3+0xf6>
    ab1a:	004b      	lsls	r3, r1, #1
    ab1c:	1ac0      	subs	r0, r0, r3
    ab1e:	4152      	adcs	r2, r2
    ab20:	1a41      	subs	r1, r0, r1
    ab22:	d200      	bcs.n	ab26 <__divsi3+0xfe>
    ab24:	4601      	mov	r1, r0
    ab26:	4152      	adcs	r2, r2
    ab28:	4610      	mov	r0, r2
    ab2a:	4770      	bx	lr
    ab2c:	e05d      	b.n	abea <__divsi3+0x1c2>
    ab2e:	0fca      	lsrs	r2, r1, #31
    ab30:	d000      	beq.n	ab34 <__divsi3+0x10c>
    ab32:	4249      	negs	r1, r1
    ab34:	1003      	asrs	r3, r0, #32
    ab36:	d300      	bcc.n	ab3a <__divsi3+0x112>
    ab38:	4240      	negs	r0, r0
    ab3a:	4053      	eors	r3, r2
    ab3c:	2200      	movs	r2, #0
    ab3e:	469c      	mov	ip, r3
    ab40:	0903      	lsrs	r3, r0, #4
    ab42:	428b      	cmp	r3, r1
    ab44:	d32d      	bcc.n	aba2 <__divsi3+0x17a>
    ab46:	0a03      	lsrs	r3, r0, #8
    ab48:	428b      	cmp	r3, r1
    ab4a:	d312      	bcc.n	ab72 <__divsi3+0x14a>
    ab4c:	22fc      	movs	r2, #252	; 0xfc
    ab4e:	0189      	lsls	r1, r1, #6
    ab50:	ba12      	rev	r2, r2
    ab52:	0a03      	lsrs	r3, r0, #8
    ab54:	428b      	cmp	r3, r1
    ab56:	d30c      	bcc.n	ab72 <__divsi3+0x14a>
    ab58:	0189      	lsls	r1, r1, #6
    ab5a:	1192      	asrs	r2, r2, #6
    ab5c:	428b      	cmp	r3, r1
    ab5e:	d308      	bcc.n	ab72 <__divsi3+0x14a>
    ab60:	0189      	lsls	r1, r1, #6
    ab62:	1192      	asrs	r2, r2, #6
    ab64:	428b      	cmp	r3, r1
    ab66:	d304      	bcc.n	ab72 <__divsi3+0x14a>
    ab68:	0189      	lsls	r1, r1, #6
    ab6a:	d03a      	beq.n	abe2 <__divsi3+0x1ba>
    ab6c:	1192      	asrs	r2, r2, #6
    ab6e:	e000      	b.n	ab72 <__divsi3+0x14a>
    ab70:	0989      	lsrs	r1, r1, #6
    ab72:	09c3      	lsrs	r3, r0, #7
    ab74:	428b      	cmp	r3, r1
    ab76:	d301      	bcc.n	ab7c <__divsi3+0x154>
    ab78:	01cb      	lsls	r3, r1, #7
    ab7a:	1ac0      	subs	r0, r0, r3
    ab7c:	4152      	adcs	r2, r2
    ab7e:	0983      	lsrs	r3, r0, #6
    ab80:	428b      	cmp	r3, r1
    ab82:	d301      	bcc.n	ab88 <__divsi3+0x160>
    ab84:	018b      	lsls	r3, r1, #6
    ab86:	1ac0      	subs	r0, r0, r3
    ab88:	4152      	adcs	r2, r2
    ab8a:	0943      	lsrs	r3, r0, #5
    ab8c:	428b      	cmp	r3, r1
    ab8e:	d301      	bcc.n	ab94 <__divsi3+0x16c>
    ab90:	014b      	lsls	r3, r1, #5
    ab92:	1ac0      	subs	r0, r0, r3
    ab94:	4152      	adcs	r2, r2
    ab96:	0903      	lsrs	r3, r0, #4
    ab98:	428b      	cmp	r3, r1
    ab9a:	d301      	bcc.n	aba0 <__divsi3+0x178>
    ab9c:	010b      	lsls	r3, r1, #4
    ab9e:	1ac0      	subs	r0, r0, r3
    aba0:	4152      	adcs	r2, r2
    aba2:	08c3      	lsrs	r3, r0, #3
    aba4:	428b      	cmp	r3, r1
    aba6:	d301      	bcc.n	abac <__divsi3+0x184>
    aba8:	00cb      	lsls	r3, r1, #3
    abaa:	1ac0      	subs	r0, r0, r3
    abac:	4152      	adcs	r2, r2
    abae:	0883      	lsrs	r3, r0, #2
    abb0:	428b      	cmp	r3, r1
    abb2:	d301      	bcc.n	abb8 <__divsi3+0x190>
    abb4:	008b      	lsls	r3, r1, #2
    abb6:	1ac0      	subs	r0, r0, r3
    abb8:	4152      	adcs	r2, r2
    abba:	d2d9      	bcs.n	ab70 <__divsi3+0x148>
    abbc:	0843      	lsrs	r3, r0, #1
    abbe:	428b      	cmp	r3, r1
    abc0:	d301      	bcc.n	abc6 <__divsi3+0x19e>
    abc2:	004b      	lsls	r3, r1, #1
    abc4:	1ac0      	subs	r0, r0, r3
    abc6:	4152      	adcs	r2, r2
    abc8:	1a41      	subs	r1, r0, r1
    abca:	d200      	bcs.n	abce <__divsi3+0x1a6>
    abcc:	4601      	mov	r1, r0
    abce:	4663      	mov	r3, ip
    abd0:	4152      	adcs	r2, r2
    abd2:	105b      	asrs	r3, r3, #1
    abd4:	4610      	mov	r0, r2
    abd6:	d301      	bcc.n	abdc <__divsi3+0x1b4>
    abd8:	4240      	negs	r0, r0
    abda:	2b00      	cmp	r3, #0
    abdc:	d500      	bpl.n	abe0 <__divsi3+0x1b8>
    abde:	4249      	negs	r1, r1
    abe0:	4770      	bx	lr
    abe2:	4663      	mov	r3, ip
    abe4:	105b      	asrs	r3, r3, #1
    abe6:	d300      	bcc.n	abea <__divsi3+0x1c2>
    abe8:	4240      	negs	r0, r0
    abea:	b501      	push	{r0, lr}
    abec:	2000      	movs	r0, #0
    abee:	f000 f805 	bl	abfc <__aeabi_idiv0>
    abf2:	bd02      	pop	{r1, pc}

0000abf4 <__aeabi_idivmod>:
    abf4:	2900      	cmp	r1, #0
    abf6:	d0f8      	beq.n	abea <__divsi3+0x1c2>
    abf8:	e716      	b.n	aa28 <__divsi3>
    abfa:	4770      	bx	lr

0000abfc <__aeabi_idiv0>:
    abfc:	4770      	bx	lr
    abfe:	46c0      	nop			; (mov r8, r8)

0000ac00 <__aeabi_cdrcmple>:
    ac00:	4684      	mov	ip, r0
    ac02:	1c10      	adds	r0, r2, #0
    ac04:	4662      	mov	r2, ip
    ac06:	468c      	mov	ip, r1
    ac08:	1c19      	adds	r1, r3, #0
    ac0a:	4663      	mov	r3, ip
    ac0c:	e000      	b.n	ac10 <__aeabi_cdcmpeq>
    ac0e:	46c0      	nop			; (mov r8, r8)

0000ac10 <__aeabi_cdcmpeq>:
    ac10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ac12:	f001 fe85 	bl	c920 <__ledf2>
    ac16:	2800      	cmp	r0, #0
    ac18:	d401      	bmi.n	ac1e <__aeabi_cdcmpeq+0xe>
    ac1a:	2100      	movs	r1, #0
    ac1c:	42c8      	cmn	r0, r1
    ac1e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000ac20 <__aeabi_dcmpeq>:
    ac20:	b510      	push	{r4, lr}
    ac22:	f001 fddf 	bl	c7e4 <__eqdf2>
    ac26:	4240      	negs	r0, r0
    ac28:	3001      	adds	r0, #1
    ac2a:	bd10      	pop	{r4, pc}

0000ac2c <__aeabi_dcmplt>:
    ac2c:	b510      	push	{r4, lr}
    ac2e:	f001 fe77 	bl	c920 <__ledf2>
    ac32:	2800      	cmp	r0, #0
    ac34:	db01      	blt.n	ac3a <__aeabi_dcmplt+0xe>
    ac36:	2000      	movs	r0, #0
    ac38:	bd10      	pop	{r4, pc}
    ac3a:	2001      	movs	r0, #1
    ac3c:	bd10      	pop	{r4, pc}
    ac3e:	46c0      	nop			; (mov r8, r8)

0000ac40 <__aeabi_dcmple>:
    ac40:	b510      	push	{r4, lr}
    ac42:	f001 fe6d 	bl	c920 <__ledf2>
    ac46:	2800      	cmp	r0, #0
    ac48:	dd01      	ble.n	ac4e <__aeabi_dcmple+0xe>
    ac4a:	2000      	movs	r0, #0
    ac4c:	bd10      	pop	{r4, pc}
    ac4e:	2001      	movs	r0, #1
    ac50:	bd10      	pop	{r4, pc}
    ac52:	46c0      	nop			; (mov r8, r8)

0000ac54 <__aeabi_dcmpgt>:
    ac54:	b510      	push	{r4, lr}
    ac56:	f001 fdff 	bl	c858 <__gedf2>
    ac5a:	2800      	cmp	r0, #0
    ac5c:	dc01      	bgt.n	ac62 <__aeabi_dcmpgt+0xe>
    ac5e:	2000      	movs	r0, #0
    ac60:	bd10      	pop	{r4, pc}
    ac62:	2001      	movs	r0, #1
    ac64:	bd10      	pop	{r4, pc}
    ac66:	46c0      	nop			; (mov r8, r8)

0000ac68 <__aeabi_dcmpge>:
    ac68:	b510      	push	{r4, lr}
    ac6a:	f001 fdf5 	bl	c858 <__gedf2>
    ac6e:	2800      	cmp	r0, #0
    ac70:	da01      	bge.n	ac76 <__aeabi_dcmpge+0xe>
    ac72:	2000      	movs	r0, #0
    ac74:	bd10      	pop	{r4, pc}
    ac76:	2001      	movs	r0, #1
    ac78:	bd10      	pop	{r4, pc}
    ac7a:	46c0      	nop			; (mov r8, r8)

0000ac7c <__aeabi_cfrcmple>:
    ac7c:	4684      	mov	ip, r0
    ac7e:	1c08      	adds	r0, r1, #0
    ac80:	4661      	mov	r1, ip
    ac82:	e7ff      	b.n	ac84 <__aeabi_cfcmpeq>

0000ac84 <__aeabi_cfcmpeq>:
    ac84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ac86:	f000 fbb5 	bl	b3f4 <__lesf2>
    ac8a:	2800      	cmp	r0, #0
    ac8c:	d401      	bmi.n	ac92 <__aeabi_cfcmpeq+0xe>
    ac8e:	2100      	movs	r1, #0
    ac90:	42c8      	cmn	r0, r1
    ac92:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000ac94 <__aeabi_fcmpeq>:
    ac94:	b510      	push	{r4, lr}
    ac96:	f000 fb47 	bl	b328 <__eqsf2>
    ac9a:	4240      	negs	r0, r0
    ac9c:	3001      	adds	r0, #1
    ac9e:	bd10      	pop	{r4, pc}

0000aca0 <__aeabi_fcmplt>:
    aca0:	b510      	push	{r4, lr}
    aca2:	f000 fba7 	bl	b3f4 <__lesf2>
    aca6:	2800      	cmp	r0, #0
    aca8:	db01      	blt.n	acae <__aeabi_fcmplt+0xe>
    acaa:	2000      	movs	r0, #0
    acac:	bd10      	pop	{r4, pc}
    acae:	2001      	movs	r0, #1
    acb0:	bd10      	pop	{r4, pc}
    acb2:	46c0      	nop			; (mov r8, r8)

0000acb4 <__aeabi_fcmple>:
    acb4:	b510      	push	{r4, lr}
    acb6:	f000 fb9d 	bl	b3f4 <__lesf2>
    acba:	2800      	cmp	r0, #0
    acbc:	dd01      	ble.n	acc2 <__aeabi_fcmple+0xe>
    acbe:	2000      	movs	r0, #0
    acc0:	bd10      	pop	{r4, pc}
    acc2:	2001      	movs	r0, #1
    acc4:	bd10      	pop	{r4, pc}
    acc6:	46c0      	nop			; (mov r8, r8)

0000acc8 <__aeabi_fcmpgt>:
    acc8:	b510      	push	{r4, lr}
    acca:	f000 fb53 	bl	b374 <__gesf2>
    acce:	2800      	cmp	r0, #0
    acd0:	dc01      	bgt.n	acd6 <__aeabi_fcmpgt+0xe>
    acd2:	2000      	movs	r0, #0
    acd4:	bd10      	pop	{r4, pc}
    acd6:	2001      	movs	r0, #1
    acd8:	bd10      	pop	{r4, pc}
    acda:	46c0      	nop			; (mov r8, r8)

0000acdc <__aeabi_fcmpge>:
    acdc:	b510      	push	{r4, lr}
    acde:	f000 fb49 	bl	b374 <__gesf2>
    ace2:	2800      	cmp	r0, #0
    ace4:	da01      	bge.n	acea <__aeabi_fcmpge+0xe>
    ace6:	2000      	movs	r0, #0
    ace8:	bd10      	pop	{r4, pc}
    acea:	2001      	movs	r0, #1
    acec:	bd10      	pop	{r4, pc}
    acee:	46c0      	nop			; (mov r8, r8)

0000acf0 <__aeabi_lmul>:
    acf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    acf2:	46ce      	mov	lr, r9
    acf4:	4647      	mov	r7, r8
    acf6:	0415      	lsls	r5, r2, #16
    acf8:	0c2d      	lsrs	r5, r5, #16
    acfa:	002e      	movs	r6, r5
    acfc:	b580      	push	{r7, lr}
    acfe:	0407      	lsls	r7, r0, #16
    ad00:	0c14      	lsrs	r4, r2, #16
    ad02:	0c3f      	lsrs	r7, r7, #16
    ad04:	4699      	mov	r9, r3
    ad06:	0c03      	lsrs	r3, r0, #16
    ad08:	437e      	muls	r6, r7
    ad0a:	435d      	muls	r5, r3
    ad0c:	4367      	muls	r7, r4
    ad0e:	4363      	muls	r3, r4
    ad10:	197f      	adds	r7, r7, r5
    ad12:	0c34      	lsrs	r4, r6, #16
    ad14:	19e4      	adds	r4, r4, r7
    ad16:	469c      	mov	ip, r3
    ad18:	42a5      	cmp	r5, r4
    ad1a:	d903      	bls.n	ad24 <__aeabi_lmul+0x34>
    ad1c:	2380      	movs	r3, #128	; 0x80
    ad1e:	025b      	lsls	r3, r3, #9
    ad20:	4698      	mov	r8, r3
    ad22:	44c4      	add	ip, r8
    ad24:	464b      	mov	r3, r9
    ad26:	4351      	muls	r1, r2
    ad28:	4343      	muls	r3, r0
    ad2a:	0436      	lsls	r6, r6, #16
    ad2c:	0c36      	lsrs	r6, r6, #16
    ad2e:	0c25      	lsrs	r5, r4, #16
    ad30:	0424      	lsls	r4, r4, #16
    ad32:	4465      	add	r5, ip
    ad34:	19a4      	adds	r4, r4, r6
    ad36:	1859      	adds	r1, r3, r1
    ad38:	1949      	adds	r1, r1, r5
    ad3a:	0020      	movs	r0, r4
    ad3c:	bc0c      	pop	{r2, r3}
    ad3e:	4690      	mov	r8, r2
    ad40:	4699      	mov	r9, r3
    ad42:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ad44 <__aeabi_f2uiz>:
    ad44:	219e      	movs	r1, #158	; 0x9e
    ad46:	b510      	push	{r4, lr}
    ad48:	05c9      	lsls	r1, r1, #23
    ad4a:	1c04      	adds	r4, r0, #0
    ad4c:	f7ff ffc6 	bl	acdc <__aeabi_fcmpge>
    ad50:	2800      	cmp	r0, #0
    ad52:	d103      	bne.n	ad5c <__aeabi_f2uiz+0x18>
    ad54:	1c20      	adds	r0, r4, #0
    ad56:	f000 fe4b 	bl	b9f0 <__aeabi_f2iz>
    ad5a:	bd10      	pop	{r4, pc}
    ad5c:	219e      	movs	r1, #158	; 0x9e
    ad5e:	1c20      	adds	r0, r4, #0
    ad60:	05c9      	lsls	r1, r1, #23
    ad62:	f000 fca9 	bl	b6b8 <__aeabi_fsub>
    ad66:	f000 fe43 	bl	b9f0 <__aeabi_f2iz>
    ad6a:	2380      	movs	r3, #128	; 0x80
    ad6c:	061b      	lsls	r3, r3, #24
    ad6e:	469c      	mov	ip, r3
    ad70:	4460      	add	r0, ip
    ad72:	e7f2      	b.n	ad5a <__aeabi_f2uiz+0x16>

0000ad74 <__aeabi_fadd>:
    ad74:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad76:	46c6      	mov	lr, r8
    ad78:	024e      	lsls	r6, r1, #9
    ad7a:	0247      	lsls	r7, r0, #9
    ad7c:	0a76      	lsrs	r6, r6, #9
    ad7e:	0a7b      	lsrs	r3, r7, #9
    ad80:	0044      	lsls	r4, r0, #1
    ad82:	0fc5      	lsrs	r5, r0, #31
    ad84:	00f7      	lsls	r7, r6, #3
    ad86:	0048      	lsls	r0, r1, #1
    ad88:	4698      	mov	r8, r3
    ad8a:	b500      	push	{lr}
    ad8c:	0e24      	lsrs	r4, r4, #24
    ad8e:	002a      	movs	r2, r5
    ad90:	00db      	lsls	r3, r3, #3
    ad92:	0e00      	lsrs	r0, r0, #24
    ad94:	0fc9      	lsrs	r1, r1, #31
    ad96:	46bc      	mov	ip, r7
    ad98:	428d      	cmp	r5, r1
    ad9a:	d067      	beq.n	ae6c <__aeabi_fadd+0xf8>
    ad9c:	1a22      	subs	r2, r4, r0
    ad9e:	2a00      	cmp	r2, #0
    ada0:	dc00      	bgt.n	ada4 <__aeabi_fadd+0x30>
    ada2:	e0a5      	b.n	aef0 <__aeabi_fadd+0x17c>
    ada4:	2800      	cmp	r0, #0
    ada6:	d13a      	bne.n	ae1e <__aeabi_fadd+0xaa>
    ada8:	2f00      	cmp	r7, #0
    adaa:	d100      	bne.n	adae <__aeabi_fadd+0x3a>
    adac:	e093      	b.n	aed6 <__aeabi_fadd+0x162>
    adae:	1e51      	subs	r1, r2, #1
    adb0:	2900      	cmp	r1, #0
    adb2:	d000      	beq.n	adb6 <__aeabi_fadd+0x42>
    adb4:	e0bc      	b.n	af30 <__aeabi_fadd+0x1bc>
    adb6:	2401      	movs	r4, #1
    adb8:	1bdb      	subs	r3, r3, r7
    adba:	015a      	lsls	r2, r3, #5
    adbc:	d546      	bpl.n	ae4c <__aeabi_fadd+0xd8>
    adbe:	019b      	lsls	r3, r3, #6
    adc0:	099e      	lsrs	r6, r3, #6
    adc2:	0030      	movs	r0, r6
    adc4:	f002 fcc4 	bl	d750 <__clzsi2>
    adc8:	3805      	subs	r0, #5
    adca:	4086      	lsls	r6, r0
    adcc:	4284      	cmp	r4, r0
    adce:	dd00      	ble.n	add2 <__aeabi_fadd+0x5e>
    add0:	e09d      	b.n	af0e <__aeabi_fadd+0x19a>
    add2:	1b04      	subs	r4, r0, r4
    add4:	0032      	movs	r2, r6
    add6:	2020      	movs	r0, #32
    add8:	3401      	adds	r4, #1
    adda:	40e2      	lsrs	r2, r4
    addc:	1b04      	subs	r4, r0, r4
    adde:	40a6      	lsls	r6, r4
    ade0:	0033      	movs	r3, r6
    ade2:	1e5e      	subs	r6, r3, #1
    ade4:	41b3      	sbcs	r3, r6
    ade6:	2400      	movs	r4, #0
    ade8:	4313      	orrs	r3, r2
    adea:	075a      	lsls	r2, r3, #29
    adec:	d004      	beq.n	adf8 <__aeabi_fadd+0x84>
    adee:	220f      	movs	r2, #15
    adf0:	401a      	ands	r2, r3
    adf2:	2a04      	cmp	r2, #4
    adf4:	d000      	beq.n	adf8 <__aeabi_fadd+0x84>
    adf6:	3304      	adds	r3, #4
    adf8:	015a      	lsls	r2, r3, #5
    adfa:	d529      	bpl.n	ae50 <__aeabi_fadd+0xdc>
    adfc:	3401      	adds	r4, #1
    adfe:	2cff      	cmp	r4, #255	; 0xff
    ae00:	d100      	bne.n	ae04 <__aeabi_fadd+0x90>
    ae02:	e081      	b.n	af08 <__aeabi_fadd+0x194>
    ae04:	002a      	movs	r2, r5
    ae06:	019b      	lsls	r3, r3, #6
    ae08:	0a5b      	lsrs	r3, r3, #9
    ae0a:	b2e4      	uxtb	r4, r4
    ae0c:	025b      	lsls	r3, r3, #9
    ae0e:	05e4      	lsls	r4, r4, #23
    ae10:	0a58      	lsrs	r0, r3, #9
    ae12:	07d2      	lsls	r2, r2, #31
    ae14:	4320      	orrs	r0, r4
    ae16:	4310      	orrs	r0, r2
    ae18:	bc04      	pop	{r2}
    ae1a:	4690      	mov	r8, r2
    ae1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae1e:	2cff      	cmp	r4, #255	; 0xff
    ae20:	d0e3      	beq.n	adea <__aeabi_fadd+0x76>
    ae22:	2180      	movs	r1, #128	; 0x80
    ae24:	0038      	movs	r0, r7
    ae26:	04c9      	lsls	r1, r1, #19
    ae28:	4308      	orrs	r0, r1
    ae2a:	4684      	mov	ip, r0
    ae2c:	2a1b      	cmp	r2, #27
    ae2e:	dd00      	ble.n	ae32 <__aeabi_fadd+0xbe>
    ae30:	e082      	b.n	af38 <__aeabi_fadd+0x1c4>
    ae32:	2020      	movs	r0, #32
    ae34:	4661      	mov	r1, ip
    ae36:	40d1      	lsrs	r1, r2
    ae38:	1a82      	subs	r2, r0, r2
    ae3a:	4660      	mov	r0, ip
    ae3c:	4090      	lsls	r0, r2
    ae3e:	0002      	movs	r2, r0
    ae40:	1e50      	subs	r0, r2, #1
    ae42:	4182      	sbcs	r2, r0
    ae44:	430a      	orrs	r2, r1
    ae46:	1a9b      	subs	r3, r3, r2
    ae48:	015a      	lsls	r2, r3, #5
    ae4a:	d4b8      	bmi.n	adbe <__aeabi_fadd+0x4a>
    ae4c:	075a      	lsls	r2, r3, #29
    ae4e:	d1ce      	bne.n	adee <__aeabi_fadd+0x7a>
    ae50:	08de      	lsrs	r6, r3, #3
    ae52:	002a      	movs	r2, r5
    ae54:	2cff      	cmp	r4, #255	; 0xff
    ae56:	d13a      	bne.n	aece <__aeabi_fadd+0x15a>
    ae58:	2e00      	cmp	r6, #0
    ae5a:	d100      	bne.n	ae5e <__aeabi_fadd+0xea>
    ae5c:	e0ae      	b.n	afbc <__aeabi_fadd+0x248>
    ae5e:	2380      	movs	r3, #128	; 0x80
    ae60:	03db      	lsls	r3, r3, #15
    ae62:	4333      	orrs	r3, r6
    ae64:	025b      	lsls	r3, r3, #9
    ae66:	0a5b      	lsrs	r3, r3, #9
    ae68:	24ff      	movs	r4, #255	; 0xff
    ae6a:	e7cf      	b.n	ae0c <__aeabi_fadd+0x98>
    ae6c:	1a21      	subs	r1, r4, r0
    ae6e:	2900      	cmp	r1, #0
    ae70:	dd52      	ble.n	af18 <__aeabi_fadd+0x1a4>
    ae72:	2800      	cmp	r0, #0
    ae74:	d031      	beq.n	aeda <__aeabi_fadd+0x166>
    ae76:	2cff      	cmp	r4, #255	; 0xff
    ae78:	d0b7      	beq.n	adea <__aeabi_fadd+0x76>
    ae7a:	2080      	movs	r0, #128	; 0x80
    ae7c:	003e      	movs	r6, r7
    ae7e:	04c0      	lsls	r0, r0, #19
    ae80:	4306      	orrs	r6, r0
    ae82:	46b4      	mov	ip, r6
    ae84:	291b      	cmp	r1, #27
    ae86:	dd00      	ble.n	ae8a <__aeabi_fadd+0x116>
    ae88:	e0aa      	b.n	afe0 <__aeabi_fadd+0x26c>
    ae8a:	2620      	movs	r6, #32
    ae8c:	4660      	mov	r0, ip
    ae8e:	40c8      	lsrs	r0, r1
    ae90:	1a71      	subs	r1, r6, r1
    ae92:	4666      	mov	r6, ip
    ae94:	408e      	lsls	r6, r1
    ae96:	0031      	movs	r1, r6
    ae98:	1e4e      	subs	r6, r1, #1
    ae9a:	41b1      	sbcs	r1, r6
    ae9c:	4301      	orrs	r1, r0
    ae9e:	185b      	adds	r3, r3, r1
    aea0:	0159      	lsls	r1, r3, #5
    aea2:	d5d3      	bpl.n	ae4c <__aeabi_fadd+0xd8>
    aea4:	3401      	adds	r4, #1
    aea6:	2cff      	cmp	r4, #255	; 0xff
    aea8:	d100      	bne.n	aeac <__aeabi_fadd+0x138>
    aeaa:	e087      	b.n	afbc <__aeabi_fadd+0x248>
    aeac:	2201      	movs	r2, #1
    aeae:	4978      	ldr	r1, [pc, #480]	; (b090 <__aeabi_fadd+0x31c>)
    aeb0:	401a      	ands	r2, r3
    aeb2:	085b      	lsrs	r3, r3, #1
    aeb4:	400b      	ands	r3, r1
    aeb6:	4313      	orrs	r3, r2
    aeb8:	e797      	b.n	adea <__aeabi_fadd+0x76>
    aeba:	2c00      	cmp	r4, #0
    aebc:	d000      	beq.n	aec0 <__aeabi_fadd+0x14c>
    aebe:	e0a7      	b.n	b010 <__aeabi_fadd+0x29c>
    aec0:	2b00      	cmp	r3, #0
    aec2:	d000      	beq.n	aec6 <__aeabi_fadd+0x152>
    aec4:	e0b6      	b.n	b034 <__aeabi_fadd+0x2c0>
    aec6:	1e3b      	subs	r3, r7, #0
    aec8:	d162      	bne.n	af90 <__aeabi_fadd+0x21c>
    aeca:	2600      	movs	r6, #0
    aecc:	2200      	movs	r2, #0
    aece:	0273      	lsls	r3, r6, #9
    aed0:	0a5b      	lsrs	r3, r3, #9
    aed2:	b2e4      	uxtb	r4, r4
    aed4:	e79a      	b.n	ae0c <__aeabi_fadd+0x98>
    aed6:	0014      	movs	r4, r2
    aed8:	e787      	b.n	adea <__aeabi_fadd+0x76>
    aeda:	2f00      	cmp	r7, #0
    aedc:	d04d      	beq.n	af7a <__aeabi_fadd+0x206>
    aede:	1e48      	subs	r0, r1, #1
    aee0:	2800      	cmp	r0, #0
    aee2:	d157      	bne.n	af94 <__aeabi_fadd+0x220>
    aee4:	4463      	add	r3, ip
    aee6:	2401      	movs	r4, #1
    aee8:	015a      	lsls	r2, r3, #5
    aeea:	d5af      	bpl.n	ae4c <__aeabi_fadd+0xd8>
    aeec:	2402      	movs	r4, #2
    aeee:	e7dd      	b.n	aeac <__aeabi_fadd+0x138>
    aef0:	2a00      	cmp	r2, #0
    aef2:	d124      	bne.n	af3e <__aeabi_fadd+0x1ca>
    aef4:	1c62      	adds	r2, r4, #1
    aef6:	b2d2      	uxtb	r2, r2
    aef8:	2a01      	cmp	r2, #1
    aefa:	ddde      	ble.n	aeba <__aeabi_fadd+0x146>
    aefc:	1bde      	subs	r6, r3, r7
    aefe:	0172      	lsls	r2, r6, #5
    af00:	d535      	bpl.n	af6e <__aeabi_fadd+0x1fa>
    af02:	1afe      	subs	r6, r7, r3
    af04:	000d      	movs	r5, r1
    af06:	e75c      	b.n	adc2 <__aeabi_fadd+0x4e>
    af08:	002a      	movs	r2, r5
    af0a:	2300      	movs	r3, #0
    af0c:	e77e      	b.n	ae0c <__aeabi_fadd+0x98>
    af0e:	0033      	movs	r3, r6
    af10:	4a60      	ldr	r2, [pc, #384]	; (b094 <__aeabi_fadd+0x320>)
    af12:	1a24      	subs	r4, r4, r0
    af14:	4013      	ands	r3, r2
    af16:	e768      	b.n	adea <__aeabi_fadd+0x76>
    af18:	2900      	cmp	r1, #0
    af1a:	d163      	bne.n	afe4 <__aeabi_fadd+0x270>
    af1c:	1c61      	adds	r1, r4, #1
    af1e:	b2c8      	uxtb	r0, r1
    af20:	2801      	cmp	r0, #1
    af22:	dd4e      	ble.n	afc2 <__aeabi_fadd+0x24e>
    af24:	29ff      	cmp	r1, #255	; 0xff
    af26:	d049      	beq.n	afbc <__aeabi_fadd+0x248>
    af28:	4463      	add	r3, ip
    af2a:	085b      	lsrs	r3, r3, #1
    af2c:	000c      	movs	r4, r1
    af2e:	e75c      	b.n	adea <__aeabi_fadd+0x76>
    af30:	2aff      	cmp	r2, #255	; 0xff
    af32:	d041      	beq.n	afb8 <__aeabi_fadd+0x244>
    af34:	000a      	movs	r2, r1
    af36:	e779      	b.n	ae2c <__aeabi_fadd+0xb8>
    af38:	2201      	movs	r2, #1
    af3a:	1a9b      	subs	r3, r3, r2
    af3c:	e784      	b.n	ae48 <__aeabi_fadd+0xd4>
    af3e:	2c00      	cmp	r4, #0
    af40:	d01d      	beq.n	af7e <__aeabi_fadd+0x20a>
    af42:	28ff      	cmp	r0, #255	; 0xff
    af44:	d022      	beq.n	af8c <__aeabi_fadd+0x218>
    af46:	2480      	movs	r4, #128	; 0x80
    af48:	04e4      	lsls	r4, r4, #19
    af4a:	4252      	negs	r2, r2
    af4c:	4323      	orrs	r3, r4
    af4e:	2a1b      	cmp	r2, #27
    af50:	dd00      	ble.n	af54 <__aeabi_fadd+0x1e0>
    af52:	e08a      	b.n	b06a <__aeabi_fadd+0x2f6>
    af54:	001c      	movs	r4, r3
    af56:	2520      	movs	r5, #32
    af58:	40d4      	lsrs	r4, r2
    af5a:	1aaa      	subs	r2, r5, r2
    af5c:	4093      	lsls	r3, r2
    af5e:	1e5a      	subs	r2, r3, #1
    af60:	4193      	sbcs	r3, r2
    af62:	4323      	orrs	r3, r4
    af64:	4662      	mov	r2, ip
    af66:	0004      	movs	r4, r0
    af68:	1ad3      	subs	r3, r2, r3
    af6a:	000d      	movs	r5, r1
    af6c:	e725      	b.n	adba <__aeabi_fadd+0x46>
    af6e:	2e00      	cmp	r6, #0
    af70:	d000      	beq.n	af74 <__aeabi_fadd+0x200>
    af72:	e726      	b.n	adc2 <__aeabi_fadd+0x4e>
    af74:	2200      	movs	r2, #0
    af76:	2400      	movs	r4, #0
    af78:	e7a9      	b.n	aece <__aeabi_fadd+0x15a>
    af7a:	000c      	movs	r4, r1
    af7c:	e735      	b.n	adea <__aeabi_fadd+0x76>
    af7e:	2b00      	cmp	r3, #0
    af80:	d04d      	beq.n	b01e <__aeabi_fadd+0x2aa>
    af82:	43d2      	mvns	r2, r2
    af84:	2a00      	cmp	r2, #0
    af86:	d0ed      	beq.n	af64 <__aeabi_fadd+0x1f0>
    af88:	28ff      	cmp	r0, #255	; 0xff
    af8a:	d1e0      	bne.n	af4e <__aeabi_fadd+0x1da>
    af8c:	4663      	mov	r3, ip
    af8e:	24ff      	movs	r4, #255	; 0xff
    af90:	000d      	movs	r5, r1
    af92:	e72a      	b.n	adea <__aeabi_fadd+0x76>
    af94:	29ff      	cmp	r1, #255	; 0xff
    af96:	d00f      	beq.n	afb8 <__aeabi_fadd+0x244>
    af98:	0001      	movs	r1, r0
    af9a:	e773      	b.n	ae84 <__aeabi_fadd+0x110>
    af9c:	2b00      	cmp	r3, #0
    af9e:	d061      	beq.n	b064 <__aeabi_fadd+0x2f0>
    afa0:	24ff      	movs	r4, #255	; 0xff
    afa2:	2f00      	cmp	r7, #0
    afa4:	d100      	bne.n	afa8 <__aeabi_fadd+0x234>
    afa6:	e720      	b.n	adea <__aeabi_fadd+0x76>
    afa8:	2280      	movs	r2, #128	; 0x80
    afaa:	4641      	mov	r1, r8
    afac:	03d2      	lsls	r2, r2, #15
    afae:	4211      	tst	r1, r2
    afb0:	d002      	beq.n	afb8 <__aeabi_fadd+0x244>
    afb2:	4216      	tst	r6, r2
    afb4:	d100      	bne.n	afb8 <__aeabi_fadd+0x244>
    afb6:	003b      	movs	r3, r7
    afb8:	24ff      	movs	r4, #255	; 0xff
    afba:	e716      	b.n	adea <__aeabi_fadd+0x76>
    afbc:	24ff      	movs	r4, #255	; 0xff
    afbe:	2300      	movs	r3, #0
    afc0:	e724      	b.n	ae0c <__aeabi_fadd+0x98>
    afc2:	2c00      	cmp	r4, #0
    afc4:	d1ea      	bne.n	af9c <__aeabi_fadd+0x228>
    afc6:	2b00      	cmp	r3, #0
    afc8:	d058      	beq.n	b07c <__aeabi_fadd+0x308>
    afca:	2f00      	cmp	r7, #0
    afcc:	d100      	bne.n	afd0 <__aeabi_fadd+0x25c>
    afce:	e70c      	b.n	adea <__aeabi_fadd+0x76>
    afd0:	4463      	add	r3, ip
    afd2:	015a      	lsls	r2, r3, #5
    afd4:	d400      	bmi.n	afd8 <__aeabi_fadd+0x264>
    afd6:	e739      	b.n	ae4c <__aeabi_fadd+0xd8>
    afd8:	4a2e      	ldr	r2, [pc, #184]	; (b094 <__aeabi_fadd+0x320>)
    afda:	000c      	movs	r4, r1
    afdc:	4013      	ands	r3, r2
    afde:	e704      	b.n	adea <__aeabi_fadd+0x76>
    afe0:	2101      	movs	r1, #1
    afe2:	e75c      	b.n	ae9e <__aeabi_fadd+0x12a>
    afe4:	2c00      	cmp	r4, #0
    afe6:	d11e      	bne.n	b026 <__aeabi_fadd+0x2b2>
    afe8:	2b00      	cmp	r3, #0
    afea:	d040      	beq.n	b06e <__aeabi_fadd+0x2fa>
    afec:	43c9      	mvns	r1, r1
    afee:	2900      	cmp	r1, #0
    aff0:	d00b      	beq.n	b00a <__aeabi_fadd+0x296>
    aff2:	28ff      	cmp	r0, #255	; 0xff
    aff4:	d036      	beq.n	b064 <__aeabi_fadd+0x2f0>
    aff6:	291b      	cmp	r1, #27
    aff8:	dc47      	bgt.n	b08a <__aeabi_fadd+0x316>
    affa:	001c      	movs	r4, r3
    affc:	2620      	movs	r6, #32
    affe:	40cc      	lsrs	r4, r1
    b000:	1a71      	subs	r1, r6, r1
    b002:	408b      	lsls	r3, r1
    b004:	1e59      	subs	r1, r3, #1
    b006:	418b      	sbcs	r3, r1
    b008:	4323      	orrs	r3, r4
    b00a:	4463      	add	r3, ip
    b00c:	0004      	movs	r4, r0
    b00e:	e747      	b.n	aea0 <__aeabi_fadd+0x12c>
    b010:	2b00      	cmp	r3, #0
    b012:	d118      	bne.n	b046 <__aeabi_fadd+0x2d2>
    b014:	1e3b      	subs	r3, r7, #0
    b016:	d02d      	beq.n	b074 <__aeabi_fadd+0x300>
    b018:	000d      	movs	r5, r1
    b01a:	24ff      	movs	r4, #255	; 0xff
    b01c:	e6e5      	b.n	adea <__aeabi_fadd+0x76>
    b01e:	003b      	movs	r3, r7
    b020:	0004      	movs	r4, r0
    b022:	000d      	movs	r5, r1
    b024:	e6e1      	b.n	adea <__aeabi_fadd+0x76>
    b026:	28ff      	cmp	r0, #255	; 0xff
    b028:	d01c      	beq.n	b064 <__aeabi_fadd+0x2f0>
    b02a:	2480      	movs	r4, #128	; 0x80
    b02c:	04e4      	lsls	r4, r4, #19
    b02e:	4249      	negs	r1, r1
    b030:	4323      	orrs	r3, r4
    b032:	e7e0      	b.n	aff6 <__aeabi_fadd+0x282>
    b034:	2f00      	cmp	r7, #0
    b036:	d100      	bne.n	b03a <__aeabi_fadd+0x2c6>
    b038:	e6d7      	b.n	adea <__aeabi_fadd+0x76>
    b03a:	1bde      	subs	r6, r3, r7
    b03c:	0172      	lsls	r2, r6, #5
    b03e:	d51f      	bpl.n	b080 <__aeabi_fadd+0x30c>
    b040:	1afb      	subs	r3, r7, r3
    b042:	000d      	movs	r5, r1
    b044:	e6d1      	b.n	adea <__aeabi_fadd+0x76>
    b046:	24ff      	movs	r4, #255	; 0xff
    b048:	2f00      	cmp	r7, #0
    b04a:	d100      	bne.n	b04e <__aeabi_fadd+0x2da>
    b04c:	e6cd      	b.n	adea <__aeabi_fadd+0x76>
    b04e:	2280      	movs	r2, #128	; 0x80
    b050:	4640      	mov	r0, r8
    b052:	03d2      	lsls	r2, r2, #15
    b054:	4210      	tst	r0, r2
    b056:	d0af      	beq.n	afb8 <__aeabi_fadd+0x244>
    b058:	4216      	tst	r6, r2
    b05a:	d1ad      	bne.n	afb8 <__aeabi_fadd+0x244>
    b05c:	003b      	movs	r3, r7
    b05e:	000d      	movs	r5, r1
    b060:	24ff      	movs	r4, #255	; 0xff
    b062:	e6c2      	b.n	adea <__aeabi_fadd+0x76>
    b064:	4663      	mov	r3, ip
    b066:	24ff      	movs	r4, #255	; 0xff
    b068:	e6bf      	b.n	adea <__aeabi_fadd+0x76>
    b06a:	2301      	movs	r3, #1
    b06c:	e77a      	b.n	af64 <__aeabi_fadd+0x1f0>
    b06e:	003b      	movs	r3, r7
    b070:	0004      	movs	r4, r0
    b072:	e6ba      	b.n	adea <__aeabi_fadd+0x76>
    b074:	2680      	movs	r6, #128	; 0x80
    b076:	2200      	movs	r2, #0
    b078:	03f6      	lsls	r6, r6, #15
    b07a:	e6f0      	b.n	ae5e <__aeabi_fadd+0xea>
    b07c:	003b      	movs	r3, r7
    b07e:	e6b4      	b.n	adea <__aeabi_fadd+0x76>
    b080:	1e33      	subs	r3, r6, #0
    b082:	d000      	beq.n	b086 <__aeabi_fadd+0x312>
    b084:	e6e2      	b.n	ae4c <__aeabi_fadd+0xd8>
    b086:	2200      	movs	r2, #0
    b088:	e721      	b.n	aece <__aeabi_fadd+0x15a>
    b08a:	2301      	movs	r3, #1
    b08c:	e7bd      	b.n	b00a <__aeabi_fadd+0x296>
    b08e:	46c0      	nop			; (mov r8, r8)
    b090:	7dffffff 	.word	0x7dffffff
    b094:	fbffffff 	.word	0xfbffffff

0000b098 <__aeabi_fdiv>:
    b098:	b5f0      	push	{r4, r5, r6, r7, lr}
    b09a:	4657      	mov	r7, sl
    b09c:	464e      	mov	r6, r9
    b09e:	46de      	mov	lr, fp
    b0a0:	4645      	mov	r5, r8
    b0a2:	b5e0      	push	{r5, r6, r7, lr}
    b0a4:	0244      	lsls	r4, r0, #9
    b0a6:	0043      	lsls	r3, r0, #1
    b0a8:	0fc6      	lsrs	r6, r0, #31
    b0aa:	b083      	sub	sp, #12
    b0ac:	1c0f      	adds	r7, r1, #0
    b0ae:	0a64      	lsrs	r4, r4, #9
    b0b0:	0e1b      	lsrs	r3, r3, #24
    b0b2:	46b2      	mov	sl, r6
    b0b4:	d053      	beq.n	b15e <__aeabi_fdiv+0xc6>
    b0b6:	2bff      	cmp	r3, #255	; 0xff
    b0b8:	d027      	beq.n	b10a <__aeabi_fdiv+0x72>
    b0ba:	2280      	movs	r2, #128	; 0x80
    b0bc:	00e4      	lsls	r4, r4, #3
    b0be:	04d2      	lsls	r2, r2, #19
    b0c0:	4314      	orrs	r4, r2
    b0c2:	227f      	movs	r2, #127	; 0x7f
    b0c4:	4252      	negs	r2, r2
    b0c6:	4690      	mov	r8, r2
    b0c8:	4498      	add	r8, r3
    b0ca:	2300      	movs	r3, #0
    b0cc:	4699      	mov	r9, r3
    b0ce:	469b      	mov	fp, r3
    b0d0:	027d      	lsls	r5, r7, #9
    b0d2:	0078      	lsls	r0, r7, #1
    b0d4:	0ffb      	lsrs	r3, r7, #31
    b0d6:	0a6d      	lsrs	r5, r5, #9
    b0d8:	0e00      	lsrs	r0, r0, #24
    b0da:	9300      	str	r3, [sp, #0]
    b0dc:	d024      	beq.n	b128 <__aeabi_fdiv+0x90>
    b0de:	28ff      	cmp	r0, #255	; 0xff
    b0e0:	d046      	beq.n	b170 <__aeabi_fdiv+0xd8>
    b0e2:	2380      	movs	r3, #128	; 0x80
    b0e4:	2100      	movs	r1, #0
    b0e6:	00ed      	lsls	r5, r5, #3
    b0e8:	04db      	lsls	r3, r3, #19
    b0ea:	431d      	orrs	r5, r3
    b0ec:	387f      	subs	r0, #127	; 0x7f
    b0ee:	4647      	mov	r7, r8
    b0f0:	1a38      	subs	r0, r7, r0
    b0f2:	464f      	mov	r7, r9
    b0f4:	430f      	orrs	r7, r1
    b0f6:	00bf      	lsls	r7, r7, #2
    b0f8:	46b9      	mov	r9, r7
    b0fa:	0033      	movs	r3, r6
    b0fc:	9a00      	ldr	r2, [sp, #0]
    b0fe:	4f87      	ldr	r7, [pc, #540]	; (b31c <__aeabi_fdiv+0x284>)
    b100:	4053      	eors	r3, r2
    b102:	464a      	mov	r2, r9
    b104:	58ba      	ldr	r2, [r7, r2]
    b106:	9301      	str	r3, [sp, #4]
    b108:	4697      	mov	pc, r2
    b10a:	2c00      	cmp	r4, #0
    b10c:	d14e      	bne.n	b1ac <__aeabi_fdiv+0x114>
    b10e:	2308      	movs	r3, #8
    b110:	4699      	mov	r9, r3
    b112:	33f7      	adds	r3, #247	; 0xf7
    b114:	4698      	mov	r8, r3
    b116:	3bfd      	subs	r3, #253	; 0xfd
    b118:	469b      	mov	fp, r3
    b11a:	027d      	lsls	r5, r7, #9
    b11c:	0078      	lsls	r0, r7, #1
    b11e:	0ffb      	lsrs	r3, r7, #31
    b120:	0a6d      	lsrs	r5, r5, #9
    b122:	0e00      	lsrs	r0, r0, #24
    b124:	9300      	str	r3, [sp, #0]
    b126:	d1da      	bne.n	b0de <__aeabi_fdiv+0x46>
    b128:	2d00      	cmp	r5, #0
    b12a:	d126      	bne.n	b17a <__aeabi_fdiv+0xe2>
    b12c:	2000      	movs	r0, #0
    b12e:	2101      	movs	r1, #1
    b130:	0033      	movs	r3, r6
    b132:	9a00      	ldr	r2, [sp, #0]
    b134:	4f7a      	ldr	r7, [pc, #488]	; (b320 <__aeabi_fdiv+0x288>)
    b136:	4053      	eors	r3, r2
    b138:	4642      	mov	r2, r8
    b13a:	1a10      	subs	r0, r2, r0
    b13c:	464a      	mov	r2, r9
    b13e:	430a      	orrs	r2, r1
    b140:	0092      	lsls	r2, r2, #2
    b142:	58ba      	ldr	r2, [r7, r2]
    b144:	001d      	movs	r5, r3
    b146:	4697      	mov	pc, r2
    b148:	9b00      	ldr	r3, [sp, #0]
    b14a:	002c      	movs	r4, r5
    b14c:	469a      	mov	sl, r3
    b14e:	468b      	mov	fp, r1
    b150:	465b      	mov	r3, fp
    b152:	2b02      	cmp	r3, #2
    b154:	d131      	bne.n	b1ba <__aeabi_fdiv+0x122>
    b156:	4653      	mov	r3, sl
    b158:	21ff      	movs	r1, #255	; 0xff
    b15a:	2400      	movs	r4, #0
    b15c:	e038      	b.n	b1d0 <__aeabi_fdiv+0x138>
    b15e:	2c00      	cmp	r4, #0
    b160:	d117      	bne.n	b192 <__aeabi_fdiv+0xfa>
    b162:	2304      	movs	r3, #4
    b164:	4699      	mov	r9, r3
    b166:	2300      	movs	r3, #0
    b168:	4698      	mov	r8, r3
    b16a:	3301      	adds	r3, #1
    b16c:	469b      	mov	fp, r3
    b16e:	e7af      	b.n	b0d0 <__aeabi_fdiv+0x38>
    b170:	20ff      	movs	r0, #255	; 0xff
    b172:	2d00      	cmp	r5, #0
    b174:	d10b      	bne.n	b18e <__aeabi_fdiv+0xf6>
    b176:	2102      	movs	r1, #2
    b178:	e7da      	b.n	b130 <__aeabi_fdiv+0x98>
    b17a:	0028      	movs	r0, r5
    b17c:	f002 fae8 	bl	d750 <__clzsi2>
    b180:	1f43      	subs	r3, r0, #5
    b182:	409d      	lsls	r5, r3
    b184:	2376      	movs	r3, #118	; 0x76
    b186:	425b      	negs	r3, r3
    b188:	1a18      	subs	r0, r3, r0
    b18a:	2100      	movs	r1, #0
    b18c:	e7af      	b.n	b0ee <__aeabi_fdiv+0x56>
    b18e:	2103      	movs	r1, #3
    b190:	e7ad      	b.n	b0ee <__aeabi_fdiv+0x56>
    b192:	0020      	movs	r0, r4
    b194:	f002 fadc 	bl	d750 <__clzsi2>
    b198:	1f43      	subs	r3, r0, #5
    b19a:	409c      	lsls	r4, r3
    b19c:	2376      	movs	r3, #118	; 0x76
    b19e:	425b      	negs	r3, r3
    b1a0:	1a1b      	subs	r3, r3, r0
    b1a2:	4698      	mov	r8, r3
    b1a4:	2300      	movs	r3, #0
    b1a6:	4699      	mov	r9, r3
    b1a8:	469b      	mov	fp, r3
    b1aa:	e791      	b.n	b0d0 <__aeabi_fdiv+0x38>
    b1ac:	230c      	movs	r3, #12
    b1ae:	4699      	mov	r9, r3
    b1b0:	33f3      	adds	r3, #243	; 0xf3
    b1b2:	4698      	mov	r8, r3
    b1b4:	3bfc      	subs	r3, #252	; 0xfc
    b1b6:	469b      	mov	fp, r3
    b1b8:	e78a      	b.n	b0d0 <__aeabi_fdiv+0x38>
    b1ba:	2b03      	cmp	r3, #3
    b1bc:	d100      	bne.n	b1c0 <__aeabi_fdiv+0x128>
    b1be:	e0a5      	b.n	b30c <__aeabi_fdiv+0x274>
    b1c0:	4655      	mov	r5, sl
    b1c2:	2b01      	cmp	r3, #1
    b1c4:	d000      	beq.n	b1c8 <__aeabi_fdiv+0x130>
    b1c6:	e081      	b.n	b2cc <__aeabi_fdiv+0x234>
    b1c8:	2301      	movs	r3, #1
    b1ca:	2100      	movs	r1, #0
    b1cc:	2400      	movs	r4, #0
    b1ce:	402b      	ands	r3, r5
    b1d0:	0264      	lsls	r4, r4, #9
    b1d2:	05c9      	lsls	r1, r1, #23
    b1d4:	0a60      	lsrs	r0, r4, #9
    b1d6:	07db      	lsls	r3, r3, #31
    b1d8:	4308      	orrs	r0, r1
    b1da:	4318      	orrs	r0, r3
    b1dc:	b003      	add	sp, #12
    b1de:	bc3c      	pop	{r2, r3, r4, r5}
    b1e0:	4690      	mov	r8, r2
    b1e2:	4699      	mov	r9, r3
    b1e4:	46a2      	mov	sl, r4
    b1e6:	46ab      	mov	fp, r5
    b1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b1ea:	2480      	movs	r4, #128	; 0x80
    b1ec:	2300      	movs	r3, #0
    b1ee:	03e4      	lsls	r4, r4, #15
    b1f0:	21ff      	movs	r1, #255	; 0xff
    b1f2:	e7ed      	b.n	b1d0 <__aeabi_fdiv+0x138>
    b1f4:	21ff      	movs	r1, #255	; 0xff
    b1f6:	2400      	movs	r4, #0
    b1f8:	e7ea      	b.n	b1d0 <__aeabi_fdiv+0x138>
    b1fa:	2301      	movs	r3, #1
    b1fc:	1a59      	subs	r1, r3, r1
    b1fe:	291b      	cmp	r1, #27
    b200:	dd66      	ble.n	b2d0 <__aeabi_fdiv+0x238>
    b202:	9a01      	ldr	r2, [sp, #4]
    b204:	4013      	ands	r3, r2
    b206:	2100      	movs	r1, #0
    b208:	2400      	movs	r4, #0
    b20a:	e7e1      	b.n	b1d0 <__aeabi_fdiv+0x138>
    b20c:	2380      	movs	r3, #128	; 0x80
    b20e:	03db      	lsls	r3, r3, #15
    b210:	421c      	tst	r4, r3
    b212:	d038      	beq.n	b286 <__aeabi_fdiv+0x1ee>
    b214:	421d      	tst	r5, r3
    b216:	d051      	beq.n	b2bc <__aeabi_fdiv+0x224>
    b218:	431c      	orrs	r4, r3
    b21a:	0264      	lsls	r4, r4, #9
    b21c:	0a64      	lsrs	r4, r4, #9
    b21e:	0033      	movs	r3, r6
    b220:	21ff      	movs	r1, #255	; 0xff
    b222:	e7d5      	b.n	b1d0 <__aeabi_fdiv+0x138>
    b224:	0163      	lsls	r3, r4, #5
    b226:	016c      	lsls	r4, r5, #5
    b228:	42a3      	cmp	r3, r4
    b22a:	d23b      	bcs.n	b2a4 <__aeabi_fdiv+0x20c>
    b22c:	261b      	movs	r6, #27
    b22e:	2100      	movs	r1, #0
    b230:	3801      	subs	r0, #1
    b232:	2501      	movs	r5, #1
    b234:	001f      	movs	r7, r3
    b236:	0049      	lsls	r1, r1, #1
    b238:	005b      	lsls	r3, r3, #1
    b23a:	2f00      	cmp	r7, #0
    b23c:	db01      	blt.n	b242 <__aeabi_fdiv+0x1aa>
    b23e:	429c      	cmp	r4, r3
    b240:	d801      	bhi.n	b246 <__aeabi_fdiv+0x1ae>
    b242:	1b1b      	subs	r3, r3, r4
    b244:	4329      	orrs	r1, r5
    b246:	3e01      	subs	r6, #1
    b248:	2e00      	cmp	r6, #0
    b24a:	d1f3      	bne.n	b234 <__aeabi_fdiv+0x19c>
    b24c:	001c      	movs	r4, r3
    b24e:	1e63      	subs	r3, r4, #1
    b250:	419c      	sbcs	r4, r3
    b252:	430c      	orrs	r4, r1
    b254:	0001      	movs	r1, r0
    b256:	317f      	adds	r1, #127	; 0x7f
    b258:	2900      	cmp	r1, #0
    b25a:	ddce      	ble.n	b1fa <__aeabi_fdiv+0x162>
    b25c:	0763      	lsls	r3, r4, #29
    b25e:	d004      	beq.n	b26a <__aeabi_fdiv+0x1d2>
    b260:	230f      	movs	r3, #15
    b262:	4023      	ands	r3, r4
    b264:	2b04      	cmp	r3, #4
    b266:	d000      	beq.n	b26a <__aeabi_fdiv+0x1d2>
    b268:	3404      	adds	r4, #4
    b26a:	0123      	lsls	r3, r4, #4
    b26c:	d503      	bpl.n	b276 <__aeabi_fdiv+0x1de>
    b26e:	0001      	movs	r1, r0
    b270:	4b2c      	ldr	r3, [pc, #176]	; (b324 <__aeabi_fdiv+0x28c>)
    b272:	3180      	adds	r1, #128	; 0x80
    b274:	401c      	ands	r4, r3
    b276:	29fe      	cmp	r1, #254	; 0xfe
    b278:	dd0d      	ble.n	b296 <__aeabi_fdiv+0x1fe>
    b27a:	2301      	movs	r3, #1
    b27c:	9a01      	ldr	r2, [sp, #4]
    b27e:	21ff      	movs	r1, #255	; 0xff
    b280:	4013      	ands	r3, r2
    b282:	2400      	movs	r4, #0
    b284:	e7a4      	b.n	b1d0 <__aeabi_fdiv+0x138>
    b286:	2380      	movs	r3, #128	; 0x80
    b288:	03db      	lsls	r3, r3, #15
    b28a:	431c      	orrs	r4, r3
    b28c:	0264      	lsls	r4, r4, #9
    b28e:	0a64      	lsrs	r4, r4, #9
    b290:	0033      	movs	r3, r6
    b292:	21ff      	movs	r1, #255	; 0xff
    b294:	e79c      	b.n	b1d0 <__aeabi_fdiv+0x138>
    b296:	2301      	movs	r3, #1
    b298:	9a01      	ldr	r2, [sp, #4]
    b29a:	01a4      	lsls	r4, r4, #6
    b29c:	0a64      	lsrs	r4, r4, #9
    b29e:	b2c9      	uxtb	r1, r1
    b2a0:	4013      	ands	r3, r2
    b2a2:	e795      	b.n	b1d0 <__aeabi_fdiv+0x138>
    b2a4:	1b1b      	subs	r3, r3, r4
    b2a6:	261a      	movs	r6, #26
    b2a8:	2101      	movs	r1, #1
    b2aa:	e7c2      	b.n	b232 <__aeabi_fdiv+0x19a>
    b2ac:	9b00      	ldr	r3, [sp, #0]
    b2ae:	468b      	mov	fp, r1
    b2b0:	469a      	mov	sl, r3
    b2b2:	2400      	movs	r4, #0
    b2b4:	e74c      	b.n	b150 <__aeabi_fdiv+0xb8>
    b2b6:	0263      	lsls	r3, r4, #9
    b2b8:	d5e5      	bpl.n	b286 <__aeabi_fdiv+0x1ee>
    b2ba:	2500      	movs	r5, #0
    b2bc:	2480      	movs	r4, #128	; 0x80
    b2be:	03e4      	lsls	r4, r4, #15
    b2c0:	432c      	orrs	r4, r5
    b2c2:	0264      	lsls	r4, r4, #9
    b2c4:	0a64      	lsrs	r4, r4, #9
    b2c6:	9b00      	ldr	r3, [sp, #0]
    b2c8:	21ff      	movs	r1, #255	; 0xff
    b2ca:	e781      	b.n	b1d0 <__aeabi_fdiv+0x138>
    b2cc:	9501      	str	r5, [sp, #4]
    b2ce:	e7c1      	b.n	b254 <__aeabi_fdiv+0x1bc>
    b2d0:	0023      	movs	r3, r4
    b2d2:	2020      	movs	r0, #32
    b2d4:	40cb      	lsrs	r3, r1
    b2d6:	1a41      	subs	r1, r0, r1
    b2d8:	408c      	lsls	r4, r1
    b2da:	1e61      	subs	r1, r4, #1
    b2dc:	418c      	sbcs	r4, r1
    b2de:	431c      	orrs	r4, r3
    b2e0:	0763      	lsls	r3, r4, #29
    b2e2:	d004      	beq.n	b2ee <__aeabi_fdiv+0x256>
    b2e4:	230f      	movs	r3, #15
    b2e6:	4023      	ands	r3, r4
    b2e8:	2b04      	cmp	r3, #4
    b2ea:	d000      	beq.n	b2ee <__aeabi_fdiv+0x256>
    b2ec:	3404      	adds	r4, #4
    b2ee:	0163      	lsls	r3, r4, #5
    b2f0:	d505      	bpl.n	b2fe <__aeabi_fdiv+0x266>
    b2f2:	2301      	movs	r3, #1
    b2f4:	9a01      	ldr	r2, [sp, #4]
    b2f6:	2101      	movs	r1, #1
    b2f8:	4013      	ands	r3, r2
    b2fa:	2400      	movs	r4, #0
    b2fc:	e768      	b.n	b1d0 <__aeabi_fdiv+0x138>
    b2fe:	2301      	movs	r3, #1
    b300:	9a01      	ldr	r2, [sp, #4]
    b302:	01a4      	lsls	r4, r4, #6
    b304:	0a64      	lsrs	r4, r4, #9
    b306:	4013      	ands	r3, r2
    b308:	2100      	movs	r1, #0
    b30a:	e761      	b.n	b1d0 <__aeabi_fdiv+0x138>
    b30c:	2380      	movs	r3, #128	; 0x80
    b30e:	03db      	lsls	r3, r3, #15
    b310:	431c      	orrs	r4, r3
    b312:	0264      	lsls	r4, r4, #9
    b314:	0a64      	lsrs	r4, r4, #9
    b316:	4653      	mov	r3, sl
    b318:	21ff      	movs	r1, #255	; 0xff
    b31a:	e759      	b.n	b1d0 <__aeabi_fdiv+0x138>
    b31c:	0000ec08 	.word	0x0000ec08
    b320:	0000ec48 	.word	0x0000ec48
    b324:	f7ffffff 	.word	0xf7ffffff

0000b328 <__eqsf2>:
    b328:	b570      	push	{r4, r5, r6, lr}
    b32a:	0042      	lsls	r2, r0, #1
    b32c:	0245      	lsls	r5, r0, #9
    b32e:	024e      	lsls	r6, r1, #9
    b330:	004c      	lsls	r4, r1, #1
    b332:	0fc3      	lsrs	r3, r0, #31
    b334:	0a6d      	lsrs	r5, r5, #9
    b336:	0e12      	lsrs	r2, r2, #24
    b338:	0a76      	lsrs	r6, r6, #9
    b33a:	0e24      	lsrs	r4, r4, #24
    b33c:	0fc9      	lsrs	r1, r1, #31
    b33e:	2001      	movs	r0, #1
    b340:	2aff      	cmp	r2, #255	; 0xff
    b342:	d006      	beq.n	b352 <__eqsf2+0x2a>
    b344:	2cff      	cmp	r4, #255	; 0xff
    b346:	d003      	beq.n	b350 <__eqsf2+0x28>
    b348:	42a2      	cmp	r2, r4
    b34a:	d101      	bne.n	b350 <__eqsf2+0x28>
    b34c:	42b5      	cmp	r5, r6
    b34e:	d006      	beq.n	b35e <__eqsf2+0x36>
    b350:	bd70      	pop	{r4, r5, r6, pc}
    b352:	2d00      	cmp	r5, #0
    b354:	d1fc      	bne.n	b350 <__eqsf2+0x28>
    b356:	2cff      	cmp	r4, #255	; 0xff
    b358:	d1fa      	bne.n	b350 <__eqsf2+0x28>
    b35a:	2e00      	cmp	r6, #0
    b35c:	d1f8      	bne.n	b350 <__eqsf2+0x28>
    b35e:	428b      	cmp	r3, r1
    b360:	d006      	beq.n	b370 <__eqsf2+0x48>
    b362:	2001      	movs	r0, #1
    b364:	2a00      	cmp	r2, #0
    b366:	d1f3      	bne.n	b350 <__eqsf2+0x28>
    b368:	0028      	movs	r0, r5
    b36a:	1e45      	subs	r5, r0, #1
    b36c:	41a8      	sbcs	r0, r5
    b36e:	e7ef      	b.n	b350 <__eqsf2+0x28>
    b370:	2000      	movs	r0, #0
    b372:	e7ed      	b.n	b350 <__eqsf2+0x28>

0000b374 <__gesf2>:
    b374:	b5f0      	push	{r4, r5, r6, r7, lr}
    b376:	0042      	lsls	r2, r0, #1
    b378:	0245      	lsls	r5, r0, #9
    b37a:	024c      	lsls	r4, r1, #9
    b37c:	0fc3      	lsrs	r3, r0, #31
    b37e:	0048      	lsls	r0, r1, #1
    b380:	0a6d      	lsrs	r5, r5, #9
    b382:	0e12      	lsrs	r2, r2, #24
    b384:	0a64      	lsrs	r4, r4, #9
    b386:	0e00      	lsrs	r0, r0, #24
    b388:	0fc9      	lsrs	r1, r1, #31
    b38a:	2aff      	cmp	r2, #255	; 0xff
    b38c:	d01e      	beq.n	b3cc <__gesf2+0x58>
    b38e:	28ff      	cmp	r0, #255	; 0xff
    b390:	d021      	beq.n	b3d6 <__gesf2+0x62>
    b392:	2a00      	cmp	r2, #0
    b394:	d10a      	bne.n	b3ac <__gesf2+0x38>
    b396:	426e      	negs	r6, r5
    b398:	416e      	adcs	r6, r5
    b39a:	b2f6      	uxtb	r6, r6
    b39c:	2800      	cmp	r0, #0
    b39e:	d10f      	bne.n	b3c0 <__gesf2+0x4c>
    b3a0:	2c00      	cmp	r4, #0
    b3a2:	d10d      	bne.n	b3c0 <__gesf2+0x4c>
    b3a4:	2000      	movs	r0, #0
    b3a6:	2d00      	cmp	r5, #0
    b3a8:	d009      	beq.n	b3be <__gesf2+0x4a>
    b3aa:	e005      	b.n	b3b8 <__gesf2+0x44>
    b3ac:	2800      	cmp	r0, #0
    b3ae:	d101      	bne.n	b3b4 <__gesf2+0x40>
    b3b0:	2c00      	cmp	r4, #0
    b3b2:	d001      	beq.n	b3b8 <__gesf2+0x44>
    b3b4:	428b      	cmp	r3, r1
    b3b6:	d011      	beq.n	b3dc <__gesf2+0x68>
    b3b8:	2101      	movs	r1, #1
    b3ba:	4258      	negs	r0, r3
    b3bc:	4308      	orrs	r0, r1
    b3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b3c0:	2e00      	cmp	r6, #0
    b3c2:	d0f7      	beq.n	b3b4 <__gesf2+0x40>
    b3c4:	2001      	movs	r0, #1
    b3c6:	3901      	subs	r1, #1
    b3c8:	4308      	orrs	r0, r1
    b3ca:	e7f8      	b.n	b3be <__gesf2+0x4a>
    b3cc:	2d00      	cmp	r5, #0
    b3ce:	d0de      	beq.n	b38e <__gesf2+0x1a>
    b3d0:	2002      	movs	r0, #2
    b3d2:	4240      	negs	r0, r0
    b3d4:	e7f3      	b.n	b3be <__gesf2+0x4a>
    b3d6:	2c00      	cmp	r4, #0
    b3d8:	d0db      	beq.n	b392 <__gesf2+0x1e>
    b3da:	e7f9      	b.n	b3d0 <__gesf2+0x5c>
    b3dc:	4282      	cmp	r2, r0
    b3de:	dceb      	bgt.n	b3b8 <__gesf2+0x44>
    b3e0:	db04      	blt.n	b3ec <__gesf2+0x78>
    b3e2:	42a5      	cmp	r5, r4
    b3e4:	d8e8      	bhi.n	b3b8 <__gesf2+0x44>
    b3e6:	2000      	movs	r0, #0
    b3e8:	42a5      	cmp	r5, r4
    b3ea:	d2e8      	bcs.n	b3be <__gesf2+0x4a>
    b3ec:	2101      	movs	r1, #1
    b3ee:	1e58      	subs	r0, r3, #1
    b3f0:	4308      	orrs	r0, r1
    b3f2:	e7e4      	b.n	b3be <__gesf2+0x4a>

0000b3f4 <__lesf2>:
    b3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3f6:	0042      	lsls	r2, r0, #1
    b3f8:	024d      	lsls	r5, r1, #9
    b3fa:	004c      	lsls	r4, r1, #1
    b3fc:	0246      	lsls	r6, r0, #9
    b3fe:	0a76      	lsrs	r6, r6, #9
    b400:	0e12      	lsrs	r2, r2, #24
    b402:	0fc3      	lsrs	r3, r0, #31
    b404:	0a6d      	lsrs	r5, r5, #9
    b406:	0e24      	lsrs	r4, r4, #24
    b408:	0fc9      	lsrs	r1, r1, #31
    b40a:	2aff      	cmp	r2, #255	; 0xff
    b40c:	d016      	beq.n	b43c <__lesf2+0x48>
    b40e:	2cff      	cmp	r4, #255	; 0xff
    b410:	d018      	beq.n	b444 <__lesf2+0x50>
    b412:	2a00      	cmp	r2, #0
    b414:	d10a      	bne.n	b42c <__lesf2+0x38>
    b416:	4270      	negs	r0, r6
    b418:	4170      	adcs	r0, r6
    b41a:	b2c0      	uxtb	r0, r0
    b41c:	2c00      	cmp	r4, #0
    b41e:	d015      	beq.n	b44c <__lesf2+0x58>
    b420:	2800      	cmp	r0, #0
    b422:	d005      	beq.n	b430 <__lesf2+0x3c>
    b424:	2001      	movs	r0, #1
    b426:	3901      	subs	r1, #1
    b428:	4308      	orrs	r0, r1
    b42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b42c:	2c00      	cmp	r4, #0
    b42e:	d013      	beq.n	b458 <__lesf2+0x64>
    b430:	4299      	cmp	r1, r3
    b432:	d014      	beq.n	b45e <__lesf2+0x6a>
    b434:	2001      	movs	r0, #1
    b436:	425b      	negs	r3, r3
    b438:	4318      	orrs	r0, r3
    b43a:	e7f6      	b.n	b42a <__lesf2+0x36>
    b43c:	2002      	movs	r0, #2
    b43e:	2e00      	cmp	r6, #0
    b440:	d1f3      	bne.n	b42a <__lesf2+0x36>
    b442:	e7e4      	b.n	b40e <__lesf2+0x1a>
    b444:	2002      	movs	r0, #2
    b446:	2d00      	cmp	r5, #0
    b448:	d1ef      	bne.n	b42a <__lesf2+0x36>
    b44a:	e7e2      	b.n	b412 <__lesf2+0x1e>
    b44c:	2d00      	cmp	r5, #0
    b44e:	d1e7      	bne.n	b420 <__lesf2+0x2c>
    b450:	2000      	movs	r0, #0
    b452:	2e00      	cmp	r6, #0
    b454:	d0e9      	beq.n	b42a <__lesf2+0x36>
    b456:	e7ed      	b.n	b434 <__lesf2+0x40>
    b458:	2d00      	cmp	r5, #0
    b45a:	d1e9      	bne.n	b430 <__lesf2+0x3c>
    b45c:	e7ea      	b.n	b434 <__lesf2+0x40>
    b45e:	42a2      	cmp	r2, r4
    b460:	dc06      	bgt.n	b470 <__lesf2+0x7c>
    b462:	dbdf      	blt.n	b424 <__lesf2+0x30>
    b464:	42ae      	cmp	r6, r5
    b466:	d803      	bhi.n	b470 <__lesf2+0x7c>
    b468:	2000      	movs	r0, #0
    b46a:	42ae      	cmp	r6, r5
    b46c:	d3da      	bcc.n	b424 <__lesf2+0x30>
    b46e:	e7dc      	b.n	b42a <__lesf2+0x36>
    b470:	2001      	movs	r0, #1
    b472:	4249      	negs	r1, r1
    b474:	4308      	orrs	r0, r1
    b476:	e7d8      	b.n	b42a <__lesf2+0x36>

0000b478 <__aeabi_fmul>:
    b478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b47a:	4657      	mov	r7, sl
    b47c:	464e      	mov	r6, r9
    b47e:	4645      	mov	r5, r8
    b480:	46de      	mov	lr, fp
    b482:	b5e0      	push	{r5, r6, r7, lr}
    b484:	0247      	lsls	r7, r0, #9
    b486:	0046      	lsls	r6, r0, #1
    b488:	4688      	mov	r8, r1
    b48a:	0a7f      	lsrs	r7, r7, #9
    b48c:	0e36      	lsrs	r6, r6, #24
    b48e:	0fc4      	lsrs	r4, r0, #31
    b490:	2e00      	cmp	r6, #0
    b492:	d047      	beq.n	b524 <__aeabi_fmul+0xac>
    b494:	2eff      	cmp	r6, #255	; 0xff
    b496:	d024      	beq.n	b4e2 <__aeabi_fmul+0x6a>
    b498:	00fb      	lsls	r3, r7, #3
    b49a:	2780      	movs	r7, #128	; 0x80
    b49c:	04ff      	lsls	r7, r7, #19
    b49e:	431f      	orrs	r7, r3
    b4a0:	2300      	movs	r3, #0
    b4a2:	4699      	mov	r9, r3
    b4a4:	469a      	mov	sl, r3
    b4a6:	3e7f      	subs	r6, #127	; 0x7f
    b4a8:	4643      	mov	r3, r8
    b4aa:	025d      	lsls	r5, r3, #9
    b4ac:	0058      	lsls	r0, r3, #1
    b4ae:	0fdb      	lsrs	r3, r3, #31
    b4b0:	0a6d      	lsrs	r5, r5, #9
    b4b2:	0e00      	lsrs	r0, r0, #24
    b4b4:	4698      	mov	r8, r3
    b4b6:	d043      	beq.n	b540 <__aeabi_fmul+0xc8>
    b4b8:	28ff      	cmp	r0, #255	; 0xff
    b4ba:	d03b      	beq.n	b534 <__aeabi_fmul+0xbc>
    b4bc:	00eb      	lsls	r3, r5, #3
    b4be:	2580      	movs	r5, #128	; 0x80
    b4c0:	2200      	movs	r2, #0
    b4c2:	04ed      	lsls	r5, r5, #19
    b4c4:	431d      	orrs	r5, r3
    b4c6:	387f      	subs	r0, #127	; 0x7f
    b4c8:	1836      	adds	r6, r6, r0
    b4ca:	1c73      	adds	r3, r6, #1
    b4cc:	4641      	mov	r1, r8
    b4ce:	469b      	mov	fp, r3
    b4d0:	464b      	mov	r3, r9
    b4d2:	4061      	eors	r1, r4
    b4d4:	4313      	orrs	r3, r2
    b4d6:	2b0f      	cmp	r3, #15
    b4d8:	d864      	bhi.n	b5a4 <__aeabi_fmul+0x12c>
    b4da:	4875      	ldr	r0, [pc, #468]	; (b6b0 <__aeabi_fmul+0x238>)
    b4dc:	009b      	lsls	r3, r3, #2
    b4de:	58c3      	ldr	r3, [r0, r3]
    b4e0:	469f      	mov	pc, r3
    b4e2:	2f00      	cmp	r7, #0
    b4e4:	d142      	bne.n	b56c <__aeabi_fmul+0xf4>
    b4e6:	2308      	movs	r3, #8
    b4e8:	4699      	mov	r9, r3
    b4ea:	3b06      	subs	r3, #6
    b4ec:	26ff      	movs	r6, #255	; 0xff
    b4ee:	469a      	mov	sl, r3
    b4f0:	e7da      	b.n	b4a8 <__aeabi_fmul+0x30>
    b4f2:	4641      	mov	r1, r8
    b4f4:	2a02      	cmp	r2, #2
    b4f6:	d028      	beq.n	b54a <__aeabi_fmul+0xd2>
    b4f8:	2a03      	cmp	r2, #3
    b4fa:	d100      	bne.n	b4fe <__aeabi_fmul+0x86>
    b4fc:	e0ce      	b.n	b69c <__aeabi_fmul+0x224>
    b4fe:	2a01      	cmp	r2, #1
    b500:	d000      	beq.n	b504 <__aeabi_fmul+0x8c>
    b502:	e0ac      	b.n	b65e <__aeabi_fmul+0x1e6>
    b504:	4011      	ands	r1, r2
    b506:	2000      	movs	r0, #0
    b508:	2200      	movs	r2, #0
    b50a:	b2cc      	uxtb	r4, r1
    b50c:	0240      	lsls	r0, r0, #9
    b50e:	05d2      	lsls	r2, r2, #23
    b510:	0a40      	lsrs	r0, r0, #9
    b512:	07e4      	lsls	r4, r4, #31
    b514:	4310      	orrs	r0, r2
    b516:	4320      	orrs	r0, r4
    b518:	bc3c      	pop	{r2, r3, r4, r5}
    b51a:	4690      	mov	r8, r2
    b51c:	4699      	mov	r9, r3
    b51e:	46a2      	mov	sl, r4
    b520:	46ab      	mov	fp, r5
    b522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b524:	2f00      	cmp	r7, #0
    b526:	d115      	bne.n	b554 <__aeabi_fmul+0xdc>
    b528:	2304      	movs	r3, #4
    b52a:	4699      	mov	r9, r3
    b52c:	3b03      	subs	r3, #3
    b52e:	2600      	movs	r6, #0
    b530:	469a      	mov	sl, r3
    b532:	e7b9      	b.n	b4a8 <__aeabi_fmul+0x30>
    b534:	20ff      	movs	r0, #255	; 0xff
    b536:	2202      	movs	r2, #2
    b538:	2d00      	cmp	r5, #0
    b53a:	d0c5      	beq.n	b4c8 <__aeabi_fmul+0x50>
    b53c:	2203      	movs	r2, #3
    b53e:	e7c3      	b.n	b4c8 <__aeabi_fmul+0x50>
    b540:	2d00      	cmp	r5, #0
    b542:	d119      	bne.n	b578 <__aeabi_fmul+0x100>
    b544:	2000      	movs	r0, #0
    b546:	2201      	movs	r2, #1
    b548:	e7be      	b.n	b4c8 <__aeabi_fmul+0x50>
    b54a:	2401      	movs	r4, #1
    b54c:	22ff      	movs	r2, #255	; 0xff
    b54e:	400c      	ands	r4, r1
    b550:	2000      	movs	r0, #0
    b552:	e7db      	b.n	b50c <__aeabi_fmul+0x94>
    b554:	0038      	movs	r0, r7
    b556:	f002 f8fb 	bl	d750 <__clzsi2>
    b55a:	2676      	movs	r6, #118	; 0x76
    b55c:	1f43      	subs	r3, r0, #5
    b55e:	409f      	lsls	r7, r3
    b560:	2300      	movs	r3, #0
    b562:	4276      	negs	r6, r6
    b564:	1a36      	subs	r6, r6, r0
    b566:	4699      	mov	r9, r3
    b568:	469a      	mov	sl, r3
    b56a:	e79d      	b.n	b4a8 <__aeabi_fmul+0x30>
    b56c:	230c      	movs	r3, #12
    b56e:	4699      	mov	r9, r3
    b570:	3b09      	subs	r3, #9
    b572:	26ff      	movs	r6, #255	; 0xff
    b574:	469a      	mov	sl, r3
    b576:	e797      	b.n	b4a8 <__aeabi_fmul+0x30>
    b578:	0028      	movs	r0, r5
    b57a:	f002 f8e9 	bl	d750 <__clzsi2>
    b57e:	1f43      	subs	r3, r0, #5
    b580:	409d      	lsls	r5, r3
    b582:	2376      	movs	r3, #118	; 0x76
    b584:	425b      	negs	r3, r3
    b586:	1a18      	subs	r0, r3, r0
    b588:	2200      	movs	r2, #0
    b58a:	e79d      	b.n	b4c8 <__aeabi_fmul+0x50>
    b58c:	2080      	movs	r0, #128	; 0x80
    b58e:	2400      	movs	r4, #0
    b590:	03c0      	lsls	r0, r0, #15
    b592:	22ff      	movs	r2, #255	; 0xff
    b594:	e7ba      	b.n	b50c <__aeabi_fmul+0x94>
    b596:	003d      	movs	r5, r7
    b598:	4652      	mov	r2, sl
    b59a:	e7ab      	b.n	b4f4 <__aeabi_fmul+0x7c>
    b59c:	003d      	movs	r5, r7
    b59e:	0021      	movs	r1, r4
    b5a0:	4652      	mov	r2, sl
    b5a2:	e7a7      	b.n	b4f4 <__aeabi_fmul+0x7c>
    b5a4:	0c3b      	lsrs	r3, r7, #16
    b5a6:	469c      	mov	ip, r3
    b5a8:	042a      	lsls	r2, r5, #16
    b5aa:	0c12      	lsrs	r2, r2, #16
    b5ac:	0c2b      	lsrs	r3, r5, #16
    b5ae:	0014      	movs	r4, r2
    b5b0:	4660      	mov	r0, ip
    b5b2:	4665      	mov	r5, ip
    b5b4:	043f      	lsls	r7, r7, #16
    b5b6:	0c3f      	lsrs	r7, r7, #16
    b5b8:	437c      	muls	r4, r7
    b5ba:	4342      	muls	r2, r0
    b5bc:	435d      	muls	r5, r3
    b5be:	437b      	muls	r3, r7
    b5c0:	0c27      	lsrs	r7, r4, #16
    b5c2:	189b      	adds	r3, r3, r2
    b5c4:	18ff      	adds	r7, r7, r3
    b5c6:	42ba      	cmp	r2, r7
    b5c8:	d903      	bls.n	b5d2 <__aeabi_fmul+0x15a>
    b5ca:	2380      	movs	r3, #128	; 0x80
    b5cc:	025b      	lsls	r3, r3, #9
    b5ce:	469c      	mov	ip, r3
    b5d0:	4465      	add	r5, ip
    b5d2:	0424      	lsls	r4, r4, #16
    b5d4:	043a      	lsls	r2, r7, #16
    b5d6:	0c24      	lsrs	r4, r4, #16
    b5d8:	1912      	adds	r2, r2, r4
    b5da:	0193      	lsls	r3, r2, #6
    b5dc:	1e5c      	subs	r4, r3, #1
    b5de:	41a3      	sbcs	r3, r4
    b5e0:	0c3f      	lsrs	r7, r7, #16
    b5e2:	0e92      	lsrs	r2, r2, #26
    b5e4:	197d      	adds	r5, r7, r5
    b5e6:	431a      	orrs	r2, r3
    b5e8:	01ad      	lsls	r5, r5, #6
    b5ea:	4315      	orrs	r5, r2
    b5ec:	012b      	lsls	r3, r5, #4
    b5ee:	d504      	bpl.n	b5fa <__aeabi_fmul+0x182>
    b5f0:	2301      	movs	r3, #1
    b5f2:	465e      	mov	r6, fp
    b5f4:	086a      	lsrs	r2, r5, #1
    b5f6:	401d      	ands	r5, r3
    b5f8:	4315      	orrs	r5, r2
    b5fa:	0032      	movs	r2, r6
    b5fc:	327f      	adds	r2, #127	; 0x7f
    b5fe:	2a00      	cmp	r2, #0
    b600:	dd25      	ble.n	b64e <__aeabi_fmul+0x1d6>
    b602:	076b      	lsls	r3, r5, #29
    b604:	d004      	beq.n	b610 <__aeabi_fmul+0x198>
    b606:	230f      	movs	r3, #15
    b608:	402b      	ands	r3, r5
    b60a:	2b04      	cmp	r3, #4
    b60c:	d000      	beq.n	b610 <__aeabi_fmul+0x198>
    b60e:	3504      	adds	r5, #4
    b610:	012b      	lsls	r3, r5, #4
    b612:	d503      	bpl.n	b61c <__aeabi_fmul+0x1a4>
    b614:	0032      	movs	r2, r6
    b616:	4b27      	ldr	r3, [pc, #156]	; (b6b4 <__aeabi_fmul+0x23c>)
    b618:	3280      	adds	r2, #128	; 0x80
    b61a:	401d      	ands	r5, r3
    b61c:	2afe      	cmp	r2, #254	; 0xfe
    b61e:	dc94      	bgt.n	b54a <__aeabi_fmul+0xd2>
    b620:	2401      	movs	r4, #1
    b622:	01a8      	lsls	r0, r5, #6
    b624:	0a40      	lsrs	r0, r0, #9
    b626:	b2d2      	uxtb	r2, r2
    b628:	400c      	ands	r4, r1
    b62a:	e76f      	b.n	b50c <__aeabi_fmul+0x94>
    b62c:	2080      	movs	r0, #128	; 0x80
    b62e:	03c0      	lsls	r0, r0, #15
    b630:	4207      	tst	r7, r0
    b632:	d007      	beq.n	b644 <__aeabi_fmul+0x1cc>
    b634:	4205      	tst	r5, r0
    b636:	d105      	bne.n	b644 <__aeabi_fmul+0x1cc>
    b638:	4328      	orrs	r0, r5
    b63a:	0240      	lsls	r0, r0, #9
    b63c:	0a40      	lsrs	r0, r0, #9
    b63e:	4644      	mov	r4, r8
    b640:	22ff      	movs	r2, #255	; 0xff
    b642:	e763      	b.n	b50c <__aeabi_fmul+0x94>
    b644:	4338      	orrs	r0, r7
    b646:	0240      	lsls	r0, r0, #9
    b648:	0a40      	lsrs	r0, r0, #9
    b64a:	22ff      	movs	r2, #255	; 0xff
    b64c:	e75e      	b.n	b50c <__aeabi_fmul+0x94>
    b64e:	2401      	movs	r4, #1
    b650:	1aa3      	subs	r3, r4, r2
    b652:	2b1b      	cmp	r3, #27
    b654:	dd05      	ble.n	b662 <__aeabi_fmul+0x1ea>
    b656:	400c      	ands	r4, r1
    b658:	2200      	movs	r2, #0
    b65a:	2000      	movs	r0, #0
    b65c:	e756      	b.n	b50c <__aeabi_fmul+0x94>
    b65e:	465e      	mov	r6, fp
    b660:	e7cb      	b.n	b5fa <__aeabi_fmul+0x182>
    b662:	002a      	movs	r2, r5
    b664:	2020      	movs	r0, #32
    b666:	40da      	lsrs	r2, r3
    b668:	1ac3      	subs	r3, r0, r3
    b66a:	409d      	lsls	r5, r3
    b66c:	002b      	movs	r3, r5
    b66e:	1e5d      	subs	r5, r3, #1
    b670:	41ab      	sbcs	r3, r5
    b672:	4313      	orrs	r3, r2
    b674:	075a      	lsls	r2, r3, #29
    b676:	d004      	beq.n	b682 <__aeabi_fmul+0x20a>
    b678:	220f      	movs	r2, #15
    b67a:	401a      	ands	r2, r3
    b67c:	2a04      	cmp	r2, #4
    b67e:	d000      	beq.n	b682 <__aeabi_fmul+0x20a>
    b680:	3304      	adds	r3, #4
    b682:	015a      	lsls	r2, r3, #5
    b684:	d504      	bpl.n	b690 <__aeabi_fmul+0x218>
    b686:	2401      	movs	r4, #1
    b688:	2201      	movs	r2, #1
    b68a:	400c      	ands	r4, r1
    b68c:	2000      	movs	r0, #0
    b68e:	e73d      	b.n	b50c <__aeabi_fmul+0x94>
    b690:	2401      	movs	r4, #1
    b692:	019b      	lsls	r3, r3, #6
    b694:	0a58      	lsrs	r0, r3, #9
    b696:	400c      	ands	r4, r1
    b698:	2200      	movs	r2, #0
    b69a:	e737      	b.n	b50c <__aeabi_fmul+0x94>
    b69c:	2080      	movs	r0, #128	; 0x80
    b69e:	2401      	movs	r4, #1
    b6a0:	03c0      	lsls	r0, r0, #15
    b6a2:	4328      	orrs	r0, r5
    b6a4:	0240      	lsls	r0, r0, #9
    b6a6:	0a40      	lsrs	r0, r0, #9
    b6a8:	400c      	ands	r4, r1
    b6aa:	22ff      	movs	r2, #255	; 0xff
    b6ac:	e72e      	b.n	b50c <__aeabi_fmul+0x94>
    b6ae:	46c0      	nop			; (mov r8, r8)
    b6b0:	0000ec88 	.word	0x0000ec88
    b6b4:	f7ffffff 	.word	0xf7ffffff

0000b6b8 <__aeabi_fsub>:
    b6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6ba:	464f      	mov	r7, r9
    b6bc:	46d6      	mov	lr, sl
    b6be:	4646      	mov	r6, r8
    b6c0:	0044      	lsls	r4, r0, #1
    b6c2:	b5c0      	push	{r6, r7, lr}
    b6c4:	0fc2      	lsrs	r2, r0, #31
    b6c6:	0247      	lsls	r7, r0, #9
    b6c8:	0248      	lsls	r0, r1, #9
    b6ca:	0a40      	lsrs	r0, r0, #9
    b6cc:	4684      	mov	ip, r0
    b6ce:	4666      	mov	r6, ip
    b6d0:	0a7b      	lsrs	r3, r7, #9
    b6d2:	0048      	lsls	r0, r1, #1
    b6d4:	0fc9      	lsrs	r1, r1, #31
    b6d6:	469a      	mov	sl, r3
    b6d8:	0e24      	lsrs	r4, r4, #24
    b6da:	0015      	movs	r5, r2
    b6dc:	00db      	lsls	r3, r3, #3
    b6de:	0e00      	lsrs	r0, r0, #24
    b6e0:	4689      	mov	r9, r1
    b6e2:	00f6      	lsls	r6, r6, #3
    b6e4:	28ff      	cmp	r0, #255	; 0xff
    b6e6:	d100      	bne.n	b6ea <__aeabi_fsub+0x32>
    b6e8:	e08f      	b.n	b80a <__aeabi_fsub+0x152>
    b6ea:	2101      	movs	r1, #1
    b6ec:	464f      	mov	r7, r9
    b6ee:	404f      	eors	r7, r1
    b6f0:	0039      	movs	r1, r7
    b6f2:	4291      	cmp	r1, r2
    b6f4:	d066      	beq.n	b7c4 <__aeabi_fsub+0x10c>
    b6f6:	1a22      	subs	r2, r4, r0
    b6f8:	2a00      	cmp	r2, #0
    b6fa:	dc00      	bgt.n	b6fe <__aeabi_fsub+0x46>
    b6fc:	e09d      	b.n	b83a <__aeabi_fsub+0x182>
    b6fe:	2800      	cmp	r0, #0
    b700:	d13d      	bne.n	b77e <__aeabi_fsub+0xc6>
    b702:	2e00      	cmp	r6, #0
    b704:	d100      	bne.n	b708 <__aeabi_fsub+0x50>
    b706:	e08b      	b.n	b820 <__aeabi_fsub+0x168>
    b708:	1e51      	subs	r1, r2, #1
    b70a:	2900      	cmp	r1, #0
    b70c:	d000      	beq.n	b710 <__aeabi_fsub+0x58>
    b70e:	e0b5      	b.n	b87c <__aeabi_fsub+0x1c4>
    b710:	2401      	movs	r4, #1
    b712:	1b9b      	subs	r3, r3, r6
    b714:	015a      	lsls	r2, r3, #5
    b716:	d544      	bpl.n	b7a2 <__aeabi_fsub+0xea>
    b718:	019b      	lsls	r3, r3, #6
    b71a:	099f      	lsrs	r7, r3, #6
    b71c:	0038      	movs	r0, r7
    b71e:	f002 f817 	bl	d750 <__clzsi2>
    b722:	3805      	subs	r0, #5
    b724:	4087      	lsls	r7, r0
    b726:	4284      	cmp	r4, r0
    b728:	dd00      	ble.n	b72c <__aeabi_fsub+0x74>
    b72a:	e096      	b.n	b85a <__aeabi_fsub+0x1a2>
    b72c:	1b04      	subs	r4, r0, r4
    b72e:	003a      	movs	r2, r7
    b730:	2020      	movs	r0, #32
    b732:	3401      	adds	r4, #1
    b734:	40e2      	lsrs	r2, r4
    b736:	1b04      	subs	r4, r0, r4
    b738:	40a7      	lsls	r7, r4
    b73a:	003b      	movs	r3, r7
    b73c:	1e5f      	subs	r7, r3, #1
    b73e:	41bb      	sbcs	r3, r7
    b740:	2400      	movs	r4, #0
    b742:	4313      	orrs	r3, r2
    b744:	075a      	lsls	r2, r3, #29
    b746:	d004      	beq.n	b752 <__aeabi_fsub+0x9a>
    b748:	220f      	movs	r2, #15
    b74a:	401a      	ands	r2, r3
    b74c:	2a04      	cmp	r2, #4
    b74e:	d000      	beq.n	b752 <__aeabi_fsub+0x9a>
    b750:	3304      	adds	r3, #4
    b752:	015a      	lsls	r2, r3, #5
    b754:	d527      	bpl.n	b7a6 <__aeabi_fsub+0xee>
    b756:	3401      	adds	r4, #1
    b758:	2cff      	cmp	r4, #255	; 0xff
    b75a:	d100      	bne.n	b75e <__aeabi_fsub+0xa6>
    b75c:	e079      	b.n	b852 <__aeabi_fsub+0x19a>
    b75e:	2201      	movs	r2, #1
    b760:	019b      	lsls	r3, r3, #6
    b762:	0a5b      	lsrs	r3, r3, #9
    b764:	b2e4      	uxtb	r4, r4
    b766:	402a      	ands	r2, r5
    b768:	025b      	lsls	r3, r3, #9
    b76a:	05e4      	lsls	r4, r4, #23
    b76c:	0a58      	lsrs	r0, r3, #9
    b76e:	07d2      	lsls	r2, r2, #31
    b770:	4320      	orrs	r0, r4
    b772:	4310      	orrs	r0, r2
    b774:	bc1c      	pop	{r2, r3, r4}
    b776:	4690      	mov	r8, r2
    b778:	4699      	mov	r9, r3
    b77a:	46a2      	mov	sl, r4
    b77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b77e:	2cff      	cmp	r4, #255	; 0xff
    b780:	d0e0      	beq.n	b744 <__aeabi_fsub+0x8c>
    b782:	2180      	movs	r1, #128	; 0x80
    b784:	04c9      	lsls	r1, r1, #19
    b786:	430e      	orrs	r6, r1
    b788:	2a1b      	cmp	r2, #27
    b78a:	dc7b      	bgt.n	b884 <__aeabi_fsub+0x1cc>
    b78c:	0031      	movs	r1, r6
    b78e:	2020      	movs	r0, #32
    b790:	40d1      	lsrs	r1, r2
    b792:	1a82      	subs	r2, r0, r2
    b794:	4096      	lsls	r6, r2
    b796:	1e72      	subs	r2, r6, #1
    b798:	4196      	sbcs	r6, r2
    b79a:	430e      	orrs	r6, r1
    b79c:	1b9b      	subs	r3, r3, r6
    b79e:	015a      	lsls	r2, r3, #5
    b7a0:	d4ba      	bmi.n	b718 <__aeabi_fsub+0x60>
    b7a2:	075a      	lsls	r2, r3, #29
    b7a4:	d1d0      	bne.n	b748 <__aeabi_fsub+0x90>
    b7a6:	2201      	movs	r2, #1
    b7a8:	08df      	lsrs	r7, r3, #3
    b7aa:	402a      	ands	r2, r5
    b7ac:	2cff      	cmp	r4, #255	; 0xff
    b7ae:	d133      	bne.n	b818 <__aeabi_fsub+0x160>
    b7b0:	2f00      	cmp	r7, #0
    b7b2:	d100      	bne.n	b7b6 <__aeabi_fsub+0xfe>
    b7b4:	e0a8      	b.n	b908 <__aeabi_fsub+0x250>
    b7b6:	2380      	movs	r3, #128	; 0x80
    b7b8:	03db      	lsls	r3, r3, #15
    b7ba:	433b      	orrs	r3, r7
    b7bc:	025b      	lsls	r3, r3, #9
    b7be:	0a5b      	lsrs	r3, r3, #9
    b7c0:	24ff      	movs	r4, #255	; 0xff
    b7c2:	e7d1      	b.n	b768 <__aeabi_fsub+0xb0>
    b7c4:	1a21      	subs	r1, r4, r0
    b7c6:	2900      	cmp	r1, #0
    b7c8:	dd4c      	ble.n	b864 <__aeabi_fsub+0x1ac>
    b7ca:	2800      	cmp	r0, #0
    b7cc:	d02a      	beq.n	b824 <__aeabi_fsub+0x16c>
    b7ce:	2cff      	cmp	r4, #255	; 0xff
    b7d0:	d0b8      	beq.n	b744 <__aeabi_fsub+0x8c>
    b7d2:	2080      	movs	r0, #128	; 0x80
    b7d4:	04c0      	lsls	r0, r0, #19
    b7d6:	4306      	orrs	r6, r0
    b7d8:	291b      	cmp	r1, #27
    b7da:	dd00      	ble.n	b7de <__aeabi_fsub+0x126>
    b7dc:	e0af      	b.n	b93e <__aeabi_fsub+0x286>
    b7de:	0030      	movs	r0, r6
    b7e0:	2720      	movs	r7, #32
    b7e2:	40c8      	lsrs	r0, r1
    b7e4:	1a79      	subs	r1, r7, r1
    b7e6:	408e      	lsls	r6, r1
    b7e8:	1e71      	subs	r1, r6, #1
    b7ea:	418e      	sbcs	r6, r1
    b7ec:	4306      	orrs	r6, r0
    b7ee:	199b      	adds	r3, r3, r6
    b7f0:	0159      	lsls	r1, r3, #5
    b7f2:	d5d6      	bpl.n	b7a2 <__aeabi_fsub+0xea>
    b7f4:	3401      	adds	r4, #1
    b7f6:	2cff      	cmp	r4, #255	; 0xff
    b7f8:	d100      	bne.n	b7fc <__aeabi_fsub+0x144>
    b7fa:	e085      	b.n	b908 <__aeabi_fsub+0x250>
    b7fc:	2201      	movs	r2, #1
    b7fe:	497a      	ldr	r1, [pc, #488]	; (b9e8 <__aeabi_fsub+0x330>)
    b800:	401a      	ands	r2, r3
    b802:	085b      	lsrs	r3, r3, #1
    b804:	400b      	ands	r3, r1
    b806:	4313      	orrs	r3, r2
    b808:	e79c      	b.n	b744 <__aeabi_fsub+0x8c>
    b80a:	2e00      	cmp	r6, #0
    b80c:	d000      	beq.n	b810 <__aeabi_fsub+0x158>
    b80e:	e770      	b.n	b6f2 <__aeabi_fsub+0x3a>
    b810:	e76b      	b.n	b6ea <__aeabi_fsub+0x32>
    b812:	1e3b      	subs	r3, r7, #0
    b814:	d1c5      	bne.n	b7a2 <__aeabi_fsub+0xea>
    b816:	2200      	movs	r2, #0
    b818:	027b      	lsls	r3, r7, #9
    b81a:	0a5b      	lsrs	r3, r3, #9
    b81c:	b2e4      	uxtb	r4, r4
    b81e:	e7a3      	b.n	b768 <__aeabi_fsub+0xb0>
    b820:	0014      	movs	r4, r2
    b822:	e78f      	b.n	b744 <__aeabi_fsub+0x8c>
    b824:	2e00      	cmp	r6, #0
    b826:	d04d      	beq.n	b8c4 <__aeabi_fsub+0x20c>
    b828:	1e48      	subs	r0, r1, #1
    b82a:	2800      	cmp	r0, #0
    b82c:	d157      	bne.n	b8de <__aeabi_fsub+0x226>
    b82e:	199b      	adds	r3, r3, r6
    b830:	2401      	movs	r4, #1
    b832:	015a      	lsls	r2, r3, #5
    b834:	d5b5      	bpl.n	b7a2 <__aeabi_fsub+0xea>
    b836:	2402      	movs	r4, #2
    b838:	e7e0      	b.n	b7fc <__aeabi_fsub+0x144>
    b83a:	2a00      	cmp	r2, #0
    b83c:	d125      	bne.n	b88a <__aeabi_fsub+0x1d2>
    b83e:	1c62      	adds	r2, r4, #1
    b840:	b2d2      	uxtb	r2, r2
    b842:	2a01      	cmp	r2, #1
    b844:	dd72      	ble.n	b92c <__aeabi_fsub+0x274>
    b846:	1b9f      	subs	r7, r3, r6
    b848:	017a      	lsls	r2, r7, #5
    b84a:	d535      	bpl.n	b8b8 <__aeabi_fsub+0x200>
    b84c:	1af7      	subs	r7, r6, r3
    b84e:	000d      	movs	r5, r1
    b850:	e764      	b.n	b71c <__aeabi_fsub+0x64>
    b852:	2201      	movs	r2, #1
    b854:	2300      	movs	r3, #0
    b856:	402a      	ands	r2, r5
    b858:	e786      	b.n	b768 <__aeabi_fsub+0xb0>
    b85a:	003b      	movs	r3, r7
    b85c:	4a63      	ldr	r2, [pc, #396]	; (b9ec <__aeabi_fsub+0x334>)
    b85e:	1a24      	subs	r4, r4, r0
    b860:	4013      	ands	r3, r2
    b862:	e76f      	b.n	b744 <__aeabi_fsub+0x8c>
    b864:	2900      	cmp	r1, #0
    b866:	d16c      	bne.n	b942 <__aeabi_fsub+0x28a>
    b868:	1c61      	adds	r1, r4, #1
    b86a:	b2c8      	uxtb	r0, r1
    b86c:	2801      	cmp	r0, #1
    b86e:	dd4e      	ble.n	b90e <__aeabi_fsub+0x256>
    b870:	29ff      	cmp	r1, #255	; 0xff
    b872:	d049      	beq.n	b908 <__aeabi_fsub+0x250>
    b874:	199b      	adds	r3, r3, r6
    b876:	085b      	lsrs	r3, r3, #1
    b878:	000c      	movs	r4, r1
    b87a:	e763      	b.n	b744 <__aeabi_fsub+0x8c>
    b87c:	2aff      	cmp	r2, #255	; 0xff
    b87e:	d041      	beq.n	b904 <__aeabi_fsub+0x24c>
    b880:	000a      	movs	r2, r1
    b882:	e781      	b.n	b788 <__aeabi_fsub+0xd0>
    b884:	2601      	movs	r6, #1
    b886:	1b9b      	subs	r3, r3, r6
    b888:	e789      	b.n	b79e <__aeabi_fsub+0xe6>
    b88a:	2c00      	cmp	r4, #0
    b88c:	d01c      	beq.n	b8c8 <__aeabi_fsub+0x210>
    b88e:	28ff      	cmp	r0, #255	; 0xff
    b890:	d021      	beq.n	b8d6 <__aeabi_fsub+0x21e>
    b892:	2480      	movs	r4, #128	; 0x80
    b894:	04e4      	lsls	r4, r4, #19
    b896:	4252      	negs	r2, r2
    b898:	4323      	orrs	r3, r4
    b89a:	2a1b      	cmp	r2, #27
    b89c:	dd00      	ble.n	b8a0 <__aeabi_fsub+0x1e8>
    b89e:	e096      	b.n	b9ce <__aeabi_fsub+0x316>
    b8a0:	001c      	movs	r4, r3
    b8a2:	2520      	movs	r5, #32
    b8a4:	40d4      	lsrs	r4, r2
    b8a6:	1aaa      	subs	r2, r5, r2
    b8a8:	4093      	lsls	r3, r2
    b8aa:	1e5a      	subs	r2, r3, #1
    b8ac:	4193      	sbcs	r3, r2
    b8ae:	4323      	orrs	r3, r4
    b8b0:	1af3      	subs	r3, r6, r3
    b8b2:	0004      	movs	r4, r0
    b8b4:	000d      	movs	r5, r1
    b8b6:	e72d      	b.n	b714 <__aeabi_fsub+0x5c>
    b8b8:	2f00      	cmp	r7, #0
    b8ba:	d000      	beq.n	b8be <__aeabi_fsub+0x206>
    b8bc:	e72e      	b.n	b71c <__aeabi_fsub+0x64>
    b8be:	2200      	movs	r2, #0
    b8c0:	2400      	movs	r4, #0
    b8c2:	e7a9      	b.n	b818 <__aeabi_fsub+0x160>
    b8c4:	000c      	movs	r4, r1
    b8c6:	e73d      	b.n	b744 <__aeabi_fsub+0x8c>
    b8c8:	2b00      	cmp	r3, #0
    b8ca:	d058      	beq.n	b97e <__aeabi_fsub+0x2c6>
    b8cc:	43d2      	mvns	r2, r2
    b8ce:	2a00      	cmp	r2, #0
    b8d0:	d0ee      	beq.n	b8b0 <__aeabi_fsub+0x1f8>
    b8d2:	28ff      	cmp	r0, #255	; 0xff
    b8d4:	d1e1      	bne.n	b89a <__aeabi_fsub+0x1e2>
    b8d6:	0033      	movs	r3, r6
    b8d8:	24ff      	movs	r4, #255	; 0xff
    b8da:	000d      	movs	r5, r1
    b8dc:	e732      	b.n	b744 <__aeabi_fsub+0x8c>
    b8de:	29ff      	cmp	r1, #255	; 0xff
    b8e0:	d010      	beq.n	b904 <__aeabi_fsub+0x24c>
    b8e2:	0001      	movs	r1, r0
    b8e4:	e778      	b.n	b7d8 <__aeabi_fsub+0x120>
    b8e6:	2b00      	cmp	r3, #0
    b8e8:	d06e      	beq.n	b9c8 <__aeabi_fsub+0x310>
    b8ea:	24ff      	movs	r4, #255	; 0xff
    b8ec:	2e00      	cmp	r6, #0
    b8ee:	d100      	bne.n	b8f2 <__aeabi_fsub+0x23a>
    b8f0:	e728      	b.n	b744 <__aeabi_fsub+0x8c>
    b8f2:	2280      	movs	r2, #128	; 0x80
    b8f4:	4651      	mov	r1, sl
    b8f6:	03d2      	lsls	r2, r2, #15
    b8f8:	4211      	tst	r1, r2
    b8fa:	d003      	beq.n	b904 <__aeabi_fsub+0x24c>
    b8fc:	4661      	mov	r1, ip
    b8fe:	4211      	tst	r1, r2
    b900:	d100      	bne.n	b904 <__aeabi_fsub+0x24c>
    b902:	0033      	movs	r3, r6
    b904:	24ff      	movs	r4, #255	; 0xff
    b906:	e71d      	b.n	b744 <__aeabi_fsub+0x8c>
    b908:	24ff      	movs	r4, #255	; 0xff
    b90a:	2300      	movs	r3, #0
    b90c:	e72c      	b.n	b768 <__aeabi_fsub+0xb0>
    b90e:	2c00      	cmp	r4, #0
    b910:	d1e9      	bne.n	b8e6 <__aeabi_fsub+0x22e>
    b912:	2b00      	cmp	r3, #0
    b914:	d063      	beq.n	b9de <__aeabi_fsub+0x326>
    b916:	2e00      	cmp	r6, #0
    b918:	d100      	bne.n	b91c <__aeabi_fsub+0x264>
    b91a:	e713      	b.n	b744 <__aeabi_fsub+0x8c>
    b91c:	199b      	adds	r3, r3, r6
    b91e:	015a      	lsls	r2, r3, #5
    b920:	d400      	bmi.n	b924 <__aeabi_fsub+0x26c>
    b922:	e73e      	b.n	b7a2 <__aeabi_fsub+0xea>
    b924:	4a31      	ldr	r2, [pc, #196]	; (b9ec <__aeabi_fsub+0x334>)
    b926:	000c      	movs	r4, r1
    b928:	4013      	ands	r3, r2
    b92a:	e70b      	b.n	b744 <__aeabi_fsub+0x8c>
    b92c:	2c00      	cmp	r4, #0
    b92e:	d11e      	bne.n	b96e <__aeabi_fsub+0x2b6>
    b930:	2b00      	cmp	r3, #0
    b932:	d12f      	bne.n	b994 <__aeabi_fsub+0x2dc>
    b934:	2e00      	cmp	r6, #0
    b936:	d04f      	beq.n	b9d8 <__aeabi_fsub+0x320>
    b938:	0033      	movs	r3, r6
    b93a:	000d      	movs	r5, r1
    b93c:	e702      	b.n	b744 <__aeabi_fsub+0x8c>
    b93e:	2601      	movs	r6, #1
    b940:	e755      	b.n	b7ee <__aeabi_fsub+0x136>
    b942:	2c00      	cmp	r4, #0
    b944:	d11f      	bne.n	b986 <__aeabi_fsub+0x2ce>
    b946:	2b00      	cmp	r3, #0
    b948:	d043      	beq.n	b9d2 <__aeabi_fsub+0x31a>
    b94a:	43c9      	mvns	r1, r1
    b94c:	2900      	cmp	r1, #0
    b94e:	d00b      	beq.n	b968 <__aeabi_fsub+0x2b0>
    b950:	28ff      	cmp	r0, #255	; 0xff
    b952:	d039      	beq.n	b9c8 <__aeabi_fsub+0x310>
    b954:	291b      	cmp	r1, #27
    b956:	dc44      	bgt.n	b9e2 <__aeabi_fsub+0x32a>
    b958:	001c      	movs	r4, r3
    b95a:	2720      	movs	r7, #32
    b95c:	40cc      	lsrs	r4, r1
    b95e:	1a79      	subs	r1, r7, r1
    b960:	408b      	lsls	r3, r1
    b962:	1e59      	subs	r1, r3, #1
    b964:	418b      	sbcs	r3, r1
    b966:	4323      	orrs	r3, r4
    b968:	199b      	adds	r3, r3, r6
    b96a:	0004      	movs	r4, r0
    b96c:	e740      	b.n	b7f0 <__aeabi_fsub+0x138>
    b96e:	2b00      	cmp	r3, #0
    b970:	d11a      	bne.n	b9a8 <__aeabi_fsub+0x2f0>
    b972:	2e00      	cmp	r6, #0
    b974:	d124      	bne.n	b9c0 <__aeabi_fsub+0x308>
    b976:	2780      	movs	r7, #128	; 0x80
    b978:	2200      	movs	r2, #0
    b97a:	03ff      	lsls	r7, r7, #15
    b97c:	e71b      	b.n	b7b6 <__aeabi_fsub+0xfe>
    b97e:	0033      	movs	r3, r6
    b980:	0004      	movs	r4, r0
    b982:	000d      	movs	r5, r1
    b984:	e6de      	b.n	b744 <__aeabi_fsub+0x8c>
    b986:	28ff      	cmp	r0, #255	; 0xff
    b988:	d01e      	beq.n	b9c8 <__aeabi_fsub+0x310>
    b98a:	2480      	movs	r4, #128	; 0x80
    b98c:	04e4      	lsls	r4, r4, #19
    b98e:	4249      	negs	r1, r1
    b990:	4323      	orrs	r3, r4
    b992:	e7df      	b.n	b954 <__aeabi_fsub+0x29c>
    b994:	2e00      	cmp	r6, #0
    b996:	d100      	bne.n	b99a <__aeabi_fsub+0x2e2>
    b998:	e6d4      	b.n	b744 <__aeabi_fsub+0x8c>
    b99a:	1b9f      	subs	r7, r3, r6
    b99c:	017a      	lsls	r2, r7, #5
    b99e:	d400      	bmi.n	b9a2 <__aeabi_fsub+0x2ea>
    b9a0:	e737      	b.n	b812 <__aeabi_fsub+0x15a>
    b9a2:	1af3      	subs	r3, r6, r3
    b9a4:	000d      	movs	r5, r1
    b9a6:	e6cd      	b.n	b744 <__aeabi_fsub+0x8c>
    b9a8:	24ff      	movs	r4, #255	; 0xff
    b9aa:	2e00      	cmp	r6, #0
    b9ac:	d100      	bne.n	b9b0 <__aeabi_fsub+0x2f8>
    b9ae:	e6c9      	b.n	b744 <__aeabi_fsub+0x8c>
    b9b0:	2280      	movs	r2, #128	; 0x80
    b9b2:	4650      	mov	r0, sl
    b9b4:	03d2      	lsls	r2, r2, #15
    b9b6:	4210      	tst	r0, r2
    b9b8:	d0a4      	beq.n	b904 <__aeabi_fsub+0x24c>
    b9ba:	4660      	mov	r0, ip
    b9bc:	4210      	tst	r0, r2
    b9be:	d1a1      	bne.n	b904 <__aeabi_fsub+0x24c>
    b9c0:	0033      	movs	r3, r6
    b9c2:	000d      	movs	r5, r1
    b9c4:	24ff      	movs	r4, #255	; 0xff
    b9c6:	e6bd      	b.n	b744 <__aeabi_fsub+0x8c>
    b9c8:	0033      	movs	r3, r6
    b9ca:	24ff      	movs	r4, #255	; 0xff
    b9cc:	e6ba      	b.n	b744 <__aeabi_fsub+0x8c>
    b9ce:	2301      	movs	r3, #1
    b9d0:	e76e      	b.n	b8b0 <__aeabi_fsub+0x1f8>
    b9d2:	0033      	movs	r3, r6
    b9d4:	0004      	movs	r4, r0
    b9d6:	e6b5      	b.n	b744 <__aeabi_fsub+0x8c>
    b9d8:	2700      	movs	r7, #0
    b9da:	2200      	movs	r2, #0
    b9dc:	e71c      	b.n	b818 <__aeabi_fsub+0x160>
    b9de:	0033      	movs	r3, r6
    b9e0:	e6b0      	b.n	b744 <__aeabi_fsub+0x8c>
    b9e2:	2301      	movs	r3, #1
    b9e4:	e7c0      	b.n	b968 <__aeabi_fsub+0x2b0>
    b9e6:	46c0      	nop			; (mov r8, r8)
    b9e8:	7dffffff 	.word	0x7dffffff
    b9ec:	fbffffff 	.word	0xfbffffff

0000b9f0 <__aeabi_f2iz>:
    b9f0:	0241      	lsls	r1, r0, #9
    b9f2:	0043      	lsls	r3, r0, #1
    b9f4:	0fc2      	lsrs	r2, r0, #31
    b9f6:	0a49      	lsrs	r1, r1, #9
    b9f8:	0e1b      	lsrs	r3, r3, #24
    b9fa:	2000      	movs	r0, #0
    b9fc:	2b7e      	cmp	r3, #126	; 0x7e
    b9fe:	dd0d      	ble.n	ba1c <__aeabi_f2iz+0x2c>
    ba00:	2b9d      	cmp	r3, #157	; 0x9d
    ba02:	dc0c      	bgt.n	ba1e <__aeabi_f2iz+0x2e>
    ba04:	2080      	movs	r0, #128	; 0x80
    ba06:	0400      	lsls	r0, r0, #16
    ba08:	4301      	orrs	r1, r0
    ba0a:	2b95      	cmp	r3, #149	; 0x95
    ba0c:	dc0a      	bgt.n	ba24 <__aeabi_f2iz+0x34>
    ba0e:	2096      	movs	r0, #150	; 0x96
    ba10:	1ac3      	subs	r3, r0, r3
    ba12:	40d9      	lsrs	r1, r3
    ba14:	4248      	negs	r0, r1
    ba16:	2a00      	cmp	r2, #0
    ba18:	d100      	bne.n	ba1c <__aeabi_f2iz+0x2c>
    ba1a:	0008      	movs	r0, r1
    ba1c:	4770      	bx	lr
    ba1e:	4b03      	ldr	r3, [pc, #12]	; (ba2c <__aeabi_f2iz+0x3c>)
    ba20:	18d0      	adds	r0, r2, r3
    ba22:	e7fb      	b.n	ba1c <__aeabi_f2iz+0x2c>
    ba24:	3b96      	subs	r3, #150	; 0x96
    ba26:	4099      	lsls	r1, r3
    ba28:	e7f4      	b.n	ba14 <__aeabi_f2iz+0x24>
    ba2a:	46c0      	nop			; (mov r8, r8)
    ba2c:	7fffffff 	.word	0x7fffffff

0000ba30 <__aeabi_i2f>:
    ba30:	b570      	push	{r4, r5, r6, lr}
    ba32:	2800      	cmp	r0, #0
    ba34:	d030      	beq.n	ba98 <__aeabi_i2f+0x68>
    ba36:	17c3      	asrs	r3, r0, #31
    ba38:	18c4      	adds	r4, r0, r3
    ba3a:	405c      	eors	r4, r3
    ba3c:	0fc5      	lsrs	r5, r0, #31
    ba3e:	0020      	movs	r0, r4
    ba40:	f001 fe86 	bl	d750 <__clzsi2>
    ba44:	239e      	movs	r3, #158	; 0x9e
    ba46:	1a1b      	subs	r3, r3, r0
    ba48:	2b96      	cmp	r3, #150	; 0x96
    ba4a:	dc0d      	bgt.n	ba68 <__aeabi_i2f+0x38>
    ba4c:	2296      	movs	r2, #150	; 0x96
    ba4e:	1ad2      	subs	r2, r2, r3
    ba50:	4094      	lsls	r4, r2
    ba52:	002a      	movs	r2, r5
    ba54:	0264      	lsls	r4, r4, #9
    ba56:	0a64      	lsrs	r4, r4, #9
    ba58:	b2db      	uxtb	r3, r3
    ba5a:	0264      	lsls	r4, r4, #9
    ba5c:	05db      	lsls	r3, r3, #23
    ba5e:	0a60      	lsrs	r0, r4, #9
    ba60:	07d2      	lsls	r2, r2, #31
    ba62:	4318      	orrs	r0, r3
    ba64:	4310      	orrs	r0, r2
    ba66:	bd70      	pop	{r4, r5, r6, pc}
    ba68:	2b99      	cmp	r3, #153	; 0x99
    ba6a:	dc19      	bgt.n	baa0 <__aeabi_i2f+0x70>
    ba6c:	2299      	movs	r2, #153	; 0x99
    ba6e:	1ad2      	subs	r2, r2, r3
    ba70:	2a00      	cmp	r2, #0
    ba72:	dd29      	ble.n	bac8 <__aeabi_i2f+0x98>
    ba74:	4094      	lsls	r4, r2
    ba76:	0022      	movs	r2, r4
    ba78:	4c14      	ldr	r4, [pc, #80]	; (bacc <__aeabi_i2f+0x9c>)
    ba7a:	4014      	ands	r4, r2
    ba7c:	0751      	lsls	r1, r2, #29
    ba7e:	d004      	beq.n	ba8a <__aeabi_i2f+0x5a>
    ba80:	210f      	movs	r1, #15
    ba82:	400a      	ands	r2, r1
    ba84:	2a04      	cmp	r2, #4
    ba86:	d000      	beq.n	ba8a <__aeabi_i2f+0x5a>
    ba88:	3404      	adds	r4, #4
    ba8a:	0162      	lsls	r2, r4, #5
    ba8c:	d413      	bmi.n	bab6 <__aeabi_i2f+0x86>
    ba8e:	01a4      	lsls	r4, r4, #6
    ba90:	0a64      	lsrs	r4, r4, #9
    ba92:	b2db      	uxtb	r3, r3
    ba94:	002a      	movs	r2, r5
    ba96:	e7e0      	b.n	ba5a <__aeabi_i2f+0x2a>
    ba98:	2200      	movs	r2, #0
    ba9a:	2300      	movs	r3, #0
    ba9c:	2400      	movs	r4, #0
    ba9e:	e7dc      	b.n	ba5a <__aeabi_i2f+0x2a>
    baa0:	2205      	movs	r2, #5
    baa2:	0021      	movs	r1, r4
    baa4:	1a12      	subs	r2, r2, r0
    baa6:	40d1      	lsrs	r1, r2
    baa8:	22b9      	movs	r2, #185	; 0xb9
    baaa:	1ad2      	subs	r2, r2, r3
    baac:	4094      	lsls	r4, r2
    baae:	1e62      	subs	r2, r4, #1
    bab0:	4194      	sbcs	r4, r2
    bab2:	430c      	orrs	r4, r1
    bab4:	e7da      	b.n	ba6c <__aeabi_i2f+0x3c>
    bab6:	4b05      	ldr	r3, [pc, #20]	; (bacc <__aeabi_i2f+0x9c>)
    bab8:	002a      	movs	r2, r5
    baba:	401c      	ands	r4, r3
    babc:	239f      	movs	r3, #159	; 0x9f
    babe:	01a4      	lsls	r4, r4, #6
    bac0:	1a1b      	subs	r3, r3, r0
    bac2:	0a64      	lsrs	r4, r4, #9
    bac4:	b2db      	uxtb	r3, r3
    bac6:	e7c8      	b.n	ba5a <__aeabi_i2f+0x2a>
    bac8:	0022      	movs	r2, r4
    baca:	e7d5      	b.n	ba78 <__aeabi_i2f+0x48>
    bacc:	fbffffff 	.word	0xfbffffff

0000bad0 <__aeabi_ui2f>:
    bad0:	b510      	push	{r4, lr}
    bad2:	1e04      	subs	r4, r0, #0
    bad4:	d027      	beq.n	bb26 <__aeabi_ui2f+0x56>
    bad6:	f001 fe3b 	bl	d750 <__clzsi2>
    bada:	239e      	movs	r3, #158	; 0x9e
    badc:	1a1b      	subs	r3, r3, r0
    bade:	2b96      	cmp	r3, #150	; 0x96
    bae0:	dc0a      	bgt.n	baf8 <__aeabi_ui2f+0x28>
    bae2:	2296      	movs	r2, #150	; 0x96
    bae4:	1ad2      	subs	r2, r2, r3
    bae6:	4094      	lsls	r4, r2
    bae8:	0264      	lsls	r4, r4, #9
    baea:	0a64      	lsrs	r4, r4, #9
    baec:	b2db      	uxtb	r3, r3
    baee:	0264      	lsls	r4, r4, #9
    baf0:	05db      	lsls	r3, r3, #23
    baf2:	0a60      	lsrs	r0, r4, #9
    baf4:	4318      	orrs	r0, r3
    baf6:	bd10      	pop	{r4, pc}
    baf8:	2b99      	cmp	r3, #153	; 0x99
    bafa:	dc17      	bgt.n	bb2c <__aeabi_ui2f+0x5c>
    bafc:	2299      	movs	r2, #153	; 0x99
    bafe:	1ad2      	subs	r2, r2, r3
    bb00:	2a00      	cmp	r2, #0
    bb02:	dd27      	ble.n	bb54 <__aeabi_ui2f+0x84>
    bb04:	4094      	lsls	r4, r2
    bb06:	0022      	movs	r2, r4
    bb08:	4c13      	ldr	r4, [pc, #76]	; (bb58 <__aeabi_ui2f+0x88>)
    bb0a:	4014      	ands	r4, r2
    bb0c:	0751      	lsls	r1, r2, #29
    bb0e:	d004      	beq.n	bb1a <__aeabi_ui2f+0x4a>
    bb10:	210f      	movs	r1, #15
    bb12:	400a      	ands	r2, r1
    bb14:	2a04      	cmp	r2, #4
    bb16:	d000      	beq.n	bb1a <__aeabi_ui2f+0x4a>
    bb18:	3404      	adds	r4, #4
    bb1a:	0162      	lsls	r2, r4, #5
    bb1c:	d412      	bmi.n	bb44 <__aeabi_ui2f+0x74>
    bb1e:	01a4      	lsls	r4, r4, #6
    bb20:	0a64      	lsrs	r4, r4, #9
    bb22:	b2db      	uxtb	r3, r3
    bb24:	e7e3      	b.n	baee <__aeabi_ui2f+0x1e>
    bb26:	2300      	movs	r3, #0
    bb28:	2400      	movs	r4, #0
    bb2a:	e7e0      	b.n	baee <__aeabi_ui2f+0x1e>
    bb2c:	22b9      	movs	r2, #185	; 0xb9
    bb2e:	0021      	movs	r1, r4
    bb30:	1ad2      	subs	r2, r2, r3
    bb32:	4091      	lsls	r1, r2
    bb34:	000a      	movs	r2, r1
    bb36:	1e51      	subs	r1, r2, #1
    bb38:	418a      	sbcs	r2, r1
    bb3a:	2105      	movs	r1, #5
    bb3c:	1a09      	subs	r1, r1, r0
    bb3e:	40cc      	lsrs	r4, r1
    bb40:	4314      	orrs	r4, r2
    bb42:	e7db      	b.n	bafc <__aeabi_ui2f+0x2c>
    bb44:	4b04      	ldr	r3, [pc, #16]	; (bb58 <__aeabi_ui2f+0x88>)
    bb46:	401c      	ands	r4, r3
    bb48:	239f      	movs	r3, #159	; 0x9f
    bb4a:	01a4      	lsls	r4, r4, #6
    bb4c:	1a1b      	subs	r3, r3, r0
    bb4e:	0a64      	lsrs	r4, r4, #9
    bb50:	b2db      	uxtb	r3, r3
    bb52:	e7cc      	b.n	baee <__aeabi_ui2f+0x1e>
    bb54:	0022      	movs	r2, r4
    bb56:	e7d7      	b.n	bb08 <__aeabi_ui2f+0x38>
    bb58:	fbffffff 	.word	0xfbffffff

0000bb5c <__aeabi_dadd>:
    bb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb5e:	4645      	mov	r5, r8
    bb60:	46de      	mov	lr, fp
    bb62:	4657      	mov	r7, sl
    bb64:	464e      	mov	r6, r9
    bb66:	030c      	lsls	r4, r1, #12
    bb68:	b5e0      	push	{r5, r6, r7, lr}
    bb6a:	004e      	lsls	r6, r1, #1
    bb6c:	0fc9      	lsrs	r1, r1, #31
    bb6e:	4688      	mov	r8, r1
    bb70:	000d      	movs	r5, r1
    bb72:	0a61      	lsrs	r1, r4, #9
    bb74:	0f44      	lsrs	r4, r0, #29
    bb76:	430c      	orrs	r4, r1
    bb78:	00c7      	lsls	r7, r0, #3
    bb7a:	0319      	lsls	r1, r3, #12
    bb7c:	0058      	lsls	r0, r3, #1
    bb7e:	0fdb      	lsrs	r3, r3, #31
    bb80:	469b      	mov	fp, r3
    bb82:	0a4b      	lsrs	r3, r1, #9
    bb84:	0f51      	lsrs	r1, r2, #29
    bb86:	430b      	orrs	r3, r1
    bb88:	0d76      	lsrs	r6, r6, #21
    bb8a:	0d40      	lsrs	r0, r0, #21
    bb8c:	0019      	movs	r1, r3
    bb8e:	00d2      	lsls	r2, r2, #3
    bb90:	45d8      	cmp	r8, fp
    bb92:	d100      	bne.n	bb96 <__aeabi_dadd+0x3a>
    bb94:	e0ae      	b.n	bcf4 <__aeabi_dadd+0x198>
    bb96:	1a35      	subs	r5, r6, r0
    bb98:	2d00      	cmp	r5, #0
    bb9a:	dc00      	bgt.n	bb9e <__aeabi_dadd+0x42>
    bb9c:	e0f6      	b.n	bd8c <__aeabi_dadd+0x230>
    bb9e:	2800      	cmp	r0, #0
    bba0:	d10f      	bne.n	bbc2 <__aeabi_dadd+0x66>
    bba2:	4313      	orrs	r3, r2
    bba4:	d100      	bne.n	bba8 <__aeabi_dadd+0x4c>
    bba6:	e0db      	b.n	bd60 <__aeabi_dadd+0x204>
    bba8:	1e6b      	subs	r3, r5, #1
    bbaa:	2b00      	cmp	r3, #0
    bbac:	d000      	beq.n	bbb0 <__aeabi_dadd+0x54>
    bbae:	e137      	b.n	be20 <__aeabi_dadd+0x2c4>
    bbb0:	1aba      	subs	r2, r7, r2
    bbb2:	4297      	cmp	r7, r2
    bbb4:	41bf      	sbcs	r7, r7
    bbb6:	1a64      	subs	r4, r4, r1
    bbb8:	427f      	negs	r7, r7
    bbba:	1be4      	subs	r4, r4, r7
    bbbc:	2601      	movs	r6, #1
    bbbe:	0017      	movs	r7, r2
    bbc0:	e024      	b.n	bc0c <__aeabi_dadd+0xb0>
    bbc2:	4bc6      	ldr	r3, [pc, #792]	; (bedc <__aeabi_dadd+0x380>)
    bbc4:	429e      	cmp	r6, r3
    bbc6:	d04d      	beq.n	bc64 <__aeabi_dadd+0x108>
    bbc8:	2380      	movs	r3, #128	; 0x80
    bbca:	041b      	lsls	r3, r3, #16
    bbcc:	4319      	orrs	r1, r3
    bbce:	2d38      	cmp	r5, #56	; 0x38
    bbd0:	dd00      	ble.n	bbd4 <__aeabi_dadd+0x78>
    bbd2:	e107      	b.n	bde4 <__aeabi_dadd+0x288>
    bbd4:	2d1f      	cmp	r5, #31
    bbd6:	dd00      	ble.n	bbda <__aeabi_dadd+0x7e>
    bbd8:	e138      	b.n	be4c <__aeabi_dadd+0x2f0>
    bbda:	2020      	movs	r0, #32
    bbdc:	1b43      	subs	r3, r0, r5
    bbde:	469a      	mov	sl, r3
    bbe0:	000b      	movs	r3, r1
    bbe2:	4650      	mov	r0, sl
    bbe4:	4083      	lsls	r3, r0
    bbe6:	4699      	mov	r9, r3
    bbe8:	0013      	movs	r3, r2
    bbea:	4648      	mov	r0, r9
    bbec:	40eb      	lsrs	r3, r5
    bbee:	4318      	orrs	r0, r3
    bbf0:	0003      	movs	r3, r0
    bbf2:	4650      	mov	r0, sl
    bbf4:	4082      	lsls	r2, r0
    bbf6:	1e50      	subs	r0, r2, #1
    bbf8:	4182      	sbcs	r2, r0
    bbfa:	40e9      	lsrs	r1, r5
    bbfc:	431a      	orrs	r2, r3
    bbfe:	1aba      	subs	r2, r7, r2
    bc00:	1a61      	subs	r1, r4, r1
    bc02:	4297      	cmp	r7, r2
    bc04:	41a4      	sbcs	r4, r4
    bc06:	0017      	movs	r7, r2
    bc08:	4264      	negs	r4, r4
    bc0a:	1b0c      	subs	r4, r1, r4
    bc0c:	0223      	lsls	r3, r4, #8
    bc0e:	d562      	bpl.n	bcd6 <__aeabi_dadd+0x17a>
    bc10:	0264      	lsls	r4, r4, #9
    bc12:	0a65      	lsrs	r5, r4, #9
    bc14:	2d00      	cmp	r5, #0
    bc16:	d100      	bne.n	bc1a <__aeabi_dadd+0xbe>
    bc18:	e0df      	b.n	bdda <__aeabi_dadd+0x27e>
    bc1a:	0028      	movs	r0, r5
    bc1c:	f001 fd98 	bl	d750 <__clzsi2>
    bc20:	0003      	movs	r3, r0
    bc22:	3b08      	subs	r3, #8
    bc24:	2b1f      	cmp	r3, #31
    bc26:	dd00      	ble.n	bc2a <__aeabi_dadd+0xce>
    bc28:	e0d2      	b.n	bdd0 <__aeabi_dadd+0x274>
    bc2a:	2220      	movs	r2, #32
    bc2c:	003c      	movs	r4, r7
    bc2e:	1ad2      	subs	r2, r2, r3
    bc30:	409d      	lsls	r5, r3
    bc32:	40d4      	lsrs	r4, r2
    bc34:	409f      	lsls	r7, r3
    bc36:	4325      	orrs	r5, r4
    bc38:	429e      	cmp	r6, r3
    bc3a:	dd00      	ble.n	bc3e <__aeabi_dadd+0xe2>
    bc3c:	e0c4      	b.n	bdc8 <__aeabi_dadd+0x26c>
    bc3e:	1b9e      	subs	r6, r3, r6
    bc40:	1c73      	adds	r3, r6, #1
    bc42:	2b1f      	cmp	r3, #31
    bc44:	dd00      	ble.n	bc48 <__aeabi_dadd+0xec>
    bc46:	e0f1      	b.n	be2c <__aeabi_dadd+0x2d0>
    bc48:	2220      	movs	r2, #32
    bc4a:	0038      	movs	r0, r7
    bc4c:	0029      	movs	r1, r5
    bc4e:	1ad2      	subs	r2, r2, r3
    bc50:	40d8      	lsrs	r0, r3
    bc52:	4091      	lsls	r1, r2
    bc54:	4097      	lsls	r7, r2
    bc56:	002c      	movs	r4, r5
    bc58:	4301      	orrs	r1, r0
    bc5a:	1e78      	subs	r0, r7, #1
    bc5c:	4187      	sbcs	r7, r0
    bc5e:	40dc      	lsrs	r4, r3
    bc60:	2600      	movs	r6, #0
    bc62:	430f      	orrs	r7, r1
    bc64:	077b      	lsls	r3, r7, #29
    bc66:	d009      	beq.n	bc7c <__aeabi_dadd+0x120>
    bc68:	230f      	movs	r3, #15
    bc6a:	403b      	ands	r3, r7
    bc6c:	2b04      	cmp	r3, #4
    bc6e:	d005      	beq.n	bc7c <__aeabi_dadd+0x120>
    bc70:	1d3b      	adds	r3, r7, #4
    bc72:	42bb      	cmp	r3, r7
    bc74:	41bf      	sbcs	r7, r7
    bc76:	427f      	negs	r7, r7
    bc78:	19e4      	adds	r4, r4, r7
    bc7a:	001f      	movs	r7, r3
    bc7c:	0223      	lsls	r3, r4, #8
    bc7e:	d52c      	bpl.n	bcda <__aeabi_dadd+0x17e>
    bc80:	4b96      	ldr	r3, [pc, #600]	; (bedc <__aeabi_dadd+0x380>)
    bc82:	3601      	adds	r6, #1
    bc84:	429e      	cmp	r6, r3
    bc86:	d100      	bne.n	bc8a <__aeabi_dadd+0x12e>
    bc88:	e09a      	b.n	bdc0 <__aeabi_dadd+0x264>
    bc8a:	4645      	mov	r5, r8
    bc8c:	4b94      	ldr	r3, [pc, #592]	; (bee0 <__aeabi_dadd+0x384>)
    bc8e:	08ff      	lsrs	r7, r7, #3
    bc90:	401c      	ands	r4, r3
    bc92:	0760      	lsls	r0, r4, #29
    bc94:	0576      	lsls	r6, r6, #21
    bc96:	0264      	lsls	r4, r4, #9
    bc98:	4307      	orrs	r7, r0
    bc9a:	0b24      	lsrs	r4, r4, #12
    bc9c:	0d76      	lsrs	r6, r6, #21
    bc9e:	2100      	movs	r1, #0
    bca0:	0324      	lsls	r4, r4, #12
    bca2:	0b23      	lsrs	r3, r4, #12
    bca4:	0d0c      	lsrs	r4, r1, #20
    bca6:	4a8f      	ldr	r2, [pc, #572]	; (bee4 <__aeabi_dadd+0x388>)
    bca8:	0524      	lsls	r4, r4, #20
    bcaa:	431c      	orrs	r4, r3
    bcac:	4014      	ands	r4, r2
    bcae:	0533      	lsls	r3, r6, #20
    bcb0:	4323      	orrs	r3, r4
    bcb2:	005b      	lsls	r3, r3, #1
    bcb4:	07ed      	lsls	r5, r5, #31
    bcb6:	085b      	lsrs	r3, r3, #1
    bcb8:	432b      	orrs	r3, r5
    bcba:	0038      	movs	r0, r7
    bcbc:	0019      	movs	r1, r3
    bcbe:	bc3c      	pop	{r2, r3, r4, r5}
    bcc0:	4690      	mov	r8, r2
    bcc2:	4699      	mov	r9, r3
    bcc4:	46a2      	mov	sl, r4
    bcc6:	46ab      	mov	fp, r5
    bcc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bcca:	4664      	mov	r4, ip
    bccc:	4304      	orrs	r4, r0
    bcce:	d100      	bne.n	bcd2 <__aeabi_dadd+0x176>
    bcd0:	e211      	b.n	c0f6 <__aeabi_dadd+0x59a>
    bcd2:	0004      	movs	r4, r0
    bcd4:	4667      	mov	r7, ip
    bcd6:	077b      	lsls	r3, r7, #29
    bcd8:	d1c6      	bne.n	bc68 <__aeabi_dadd+0x10c>
    bcda:	4645      	mov	r5, r8
    bcdc:	0760      	lsls	r0, r4, #29
    bcde:	08ff      	lsrs	r7, r7, #3
    bce0:	4307      	orrs	r7, r0
    bce2:	08e4      	lsrs	r4, r4, #3
    bce4:	4b7d      	ldr	r3, [pc, #500]	; (bedc <__aeabi_dadd+0x380>)
    bce6:	429e      	cmp	r6, r3
    bce8:	d030      	beq.n	bd4c <__aeabi_dadd+0x1f0>
    bcea:	0324      	lsls	r4, r4, #12
    bcec:	0576      	lsls	r6, r6, #21
    bcee:	0b24      	lsrs	r4, r4, #12
    bcf0:	0d76      	lsrs	r6, r6, #21
    bcf2:	e7d4      	b.n	bc9e <__aeabi_dadd+0x142>
    bcf4:	1a33      	subs	r3, r6, r0
    bcf6:	469a      	mov	sl, r3
    bcf8:	2b00      	cmp	r3, #0
    bcfa:	dd78      	ble.n	bdee <__aeabi_dadd+0x292>
    bcfc:	2800      	cmp	r0, #0
    bcfe:	d031      	beq.n	bd64 <__aeabi_dadd+0x208>
    bd00:	4876      	ldr	r0, [pc, #472]	; (bedc <__aeabi_dadd+0x380>)
    bd02:	4286      	cmp	r6, r0
    bd04:	d0ae      	beq.n	bc64 <__aeabi_dadd+0x108>
    bd06:	2080      	movs	r0, #128	; 0x80
    bd08:	0400      	lsls	r0, r0, #16
    bd0a:	4301      	orrs	r1, r0
    bd0c:	4653      	mov	r3, sl
    bd0e:	2b38      	cmp	r3, #56	; 0x38
    bd10:	dc00      	bgt.n	bd14 <__aeabi_dadd+0x1b8>
    bd12:	e0e9      	b.n	bee8 <__aeabi_dadd+0x38c>
    bd14:	430a      	orrs	r2, r1
    bd16:	1e51      	subs	r1, r2, #1
    bd18:	418a      	sbcs	r2, r1
    bd1a:	2100      	movs	r1, #0
    bd1c:	19d2      	adds	r2, r2, r7
    bd1e:	42ba      	cmp	r2, r7
    bd20:	41bf      	sbcs	r7, r7
    bd22:	1909      	adds	r1, r1, r4
    bd24:	427c      	negs	r4, r7
    bd26:	0017      	movs	r7, r2
    bd28:	190c      	adds	r4, r1, r4
    bd2a:	0223      	lsls	r3, r4, #8
    bd2c:	d5d3      	bpl.n	bcd6 <__aeabi_dadd+0x17a>
    bd2e:	4b6b      	ldr	r3, [pc, #428]	; (bedc <__aeabi_dadd+0x380>)
    bd30:	3601      	adds	r6, #1
    bd32:	429e      	cmp	r6, r3
    bd34:	d100      	bne.n	bd38 <__aeabi_dadd+0x1dc>
    bd36:	e13a      	b.n	bfae <__aeabi_dadd+0x452>
    bd38:	2001      	movs	r0, #1
    bd3a:	4b69      	ldr	r3, [pc, #420]	; (bee0 <__aeabi_dadd+0x384>)
    bd3c:	401c      	ands	r4, r3
    bd3e:	087b      	lsrs	r3, r7, #1
    bd40:	4007      	ands	r7, r0
    bd42:	431f      	orrs	r7, r3
    bd44:	07e0      	lsls	r0, r4, #31
    bd46:	4307      	orrs	r7, r0
    bd48:	0864      	lsrs	r4, r4, #1
    bd4a:	e78b      	b.n	bc64 <__aeabi_dadd+0x108>
    bd4c:	0023      	movs	r3, r4
    bd4e:	433b      	orrs	r3, r7
    bd50:	d100      	bne.n	bd54 <__aeabi_dadd+0x1f8>
    bd52:	e1cb      	b.n	c0ec <__aeabi_dadd+0x590>
    bd54:	2280      	movs	r2, #128	; 0x80
    bd56:	0312      	lsls	r2, r2, #12
    bd58:	4314      	orrs	r4, r2
    bd5a:	0324      	lsls	r4, r4, #12
    bd5c:	0b24      	lsrs	r4, r4, #12
    bd5e:	e79e      	b.n	bc9e <__aeabi_dadd+0x142>
    bd60:	002e      	movs	r6, r5
    bd62:	e77f      	b.n	bc64 <__aeabi_dadd+0x108>
    bd64:	0008      	movs	r0, r1
    bd66:	4310      	orrs	r0, r2
    bd68:	d100      	bne.n	bd6c <__aeabi_dadd+0x210>
    bd6a:	e0b4      	b.n	bed6 <__aeabi_dadd+0x37a>
    bd6c:	1e58      	subs	r0, r3, #1
    bd6e:	2800      	cmp	r0, #0
    bd70:	d000      	beq.n	bd74 <__aeabi_dadd+0x218>
    bd72:	e0de      	b.n	bf32 <__aeabi_dadd+0x3d6>
    bd74:	18ba      	adds	r2, r7, r2
    bd76:	42ba      	cmp	r2, r7
    bd78:	419b      	sbcs	r3, r3
    bd7a:	1864      	adds	r4, r4, r1
    bd7c:	425b      	negs	r3, r3
    bd7e:	18e4      	adds	r4, r4, r3
    bd80:	0017      	movs	r7, r2
    bd82:	2601      	movs	r6, #1
    bd84:	0223      	lsls	r3, r4, #8
    bd86:	d5a6      	bpl.n	bcd6 <__aeabi_dadd+0x17a>
    bd88:	2602      	movs	r6, #2
    bd8a:	e7d5      	b.n	bd38 <__aeabi_dadd+0x1dc>
    bd8c:	2d00      	cmp	r5, #0
    bd8e:	d16e      	bne.n	be6e <__aeabi_dadd+0x312>
    bd90:	1c70      	adds	r0, r6, #1
    bd92:	0540      	lsls	r0, r0, #21
    bd94:	0d40      	lsrs	r0, r0, #21
    bd96:	2801      	cmp	r0, #1
    bd98:	dc00      	bgt.n	bd9c <__aeabi_dadd+0x240>
    bd9a:	e0f9      	b.n	bf90 <__aeabi_dadd+0x434>
    bd9c:	1ab8      	subs	r0, r7, r2
    bd9e:	4684      	mov	ip, r0
    bda0:	4287      	cmp	r7, r0
    bda2:	4180      	sbcs	r0, r0
    bda4:	1ae5      	subs	r5, r4, r3
    bda6:	4240      	negs	r0, r0
    bda8:	1a2d      	subs	r5, r5, r0
    bdaa:	0228      	lsls	r0, r5, #8
    bdac:	d400      	bmi.n	bdb0 <__aeabi_dadd+0x254>
    bdae:	e089      	b.n	bec4 <__aeabi_dadd+0x368>
    bdb0:	1bd7      	subs	r7, r2, r7
    bdb2:	42ba      	cmp	r2, r7
    bdb4:	4192      	sbcs	r2, r2
    bdb6:	1b1c      	subs	r4, r3, r4
    bdb8:	4252      	negs	r2, r2
    bdba:	1aa5      	subs	r5, r4, r2
    bdbc:	46d8      	mov	r8, fp
    bdbe:	e729      	b.n	bc14 <__aeabi_dadd+0xb8>
    bdc0:	4645      	mov	r5, r8
    bdc2:	2400      	movs	r4, #0
    bdc4:	2700      	movs	r7, #0
    bdc6:	e76a      	b.n	bc9e <__aeabi_dadd+0x142>
    bdc8:	4c45      	ldr	r4, [pc, #276]	; (bee0 <__aeabi_dadd+0x384>)
    bdca:	1af6      	subs	r6, r6, r3
    bdcc:	402c      	ands	r4, r5
    bdce:	e749      	b.n	bc64 <__aeabi_dadd+0x108>
    bdd0:	003d      	movs	r5, r7
    bdd2:	3828      	subs	r0, #40	; 0x28
    bdd4:	4085      	lsls	r5, r0
    bdd6:	2700      	movs	r7, #0
    bdd8:	e72e      	b.n	bc38 <__aeabi_dadd+0xdc>
    bdda:	0038      	movs	r0, r7
    bddc:	f001 fcb8 	bl	d750 <__clzsi2>
    bde0:	3020      	adds	r0, #32
    bde2:	e71d      	b.n	bc20 <__aeabi_dadd+0xc4>
    bde4:	430a      	orrs	r2, r1
    bde6:	1e51      	subs	r1, r2, #1
    bde8:	418a      	sbcs	r2, r1
    bdea:	2100      	movs	r1, #0
    bdec:	e707      	b.n	bbfe <__aeabi_dadd+0xa2>
    bdee:	2b00      	cmp	r3, #0
    bdf0:	d000      	beq.n	bdf4 <__aeabi_dadd+0x298>
    bdf2:	e0f3      	b.n	bfdc <__aeabi_dadd+0x480>
    bdf4:	1c70      	adds	r0, r6, #1
    bdf6:	0543      	lsls	r3, r0, #21
    bdf8:	0d5b      	lsrs	r3, r3, #21
    bdfa:	2b01      	cmp	r3, #1
    bdfc:	dc00      	bgt.n	be00 <__aeabi_dadd+0x2a4>
    bdfe:	e0ad      	b.n	bf5c <__aeabi_dadd+0x400>
    be00:	4b36      	ldr	r3, [pc, #216]	; (bedc <__aeabi_dadd+0x380>)
    be02:	4298      	cmp	r0, r3
    be04:	d100      	bne.n	be08 <__aeabi_dadd+0x2ac>
    be06:	e0d1      	b.n	bfac <__aeabi_dadd+0x450>
    be08:	18ba      	adds	r2, r7, r2
    be0a:	42ba      	cmp	r2, r7
    be0c:	41bf      	sbcs	r7, r7
    be0e:	1864      	adds	r4, r4, r1
    be10:	427f      	negs	r7, r7
    be12:	19e4      	adds	r4, r4, r7
    be14:	07e7      	lsls	r7, r4, #31
    be16:	0852      	lsrs	r2, r2, #1
    be18:	4317      	orrs	r7, r2
    be1a:	0864      	lsrs	r4, r4, #1
    be1c:	0006      	movs	r6, r0
    be1e:	e721      	b.n	bc64 <__aeabi_dadd+0x108>
    be20:	482e      	ldr	r0, [pc, #184]	; (bedc <__aeabi_dadd+0x380>)
    be22:	4285      	cmp	r5, r0
    be24:	d100      	bne.n	be28 <__aeabi_dadd+0x2cc>
    be26:	e093      	b.n	bf50 <__aeabi_dadd+0x3f4>
    be28:	001d      	movs	r5, r3
    be2a:	e6d0      	b.n	bbce <__aeabi_dadd+0x72>
    be2c:	0029      	movs	r1, r5
    be2e:	3e1f      	subs	r6, #31
    be30:	40f1      	lsrs	r1, r6
    be32:	2b20      	cmp	r3, #32
    be34:	d100      	bne.n	be38 <__aeabi_dadd+0x2dc>
    be36:	e08d      	b.n	bf54 <__aeabi_dadd+0x3f8>
    be38:	2240      	movs	r2, #64	; 0x40
    be3a:	1ad3      	subs	r3, r2, r3
    be3c:	409d      	lsls	r5, r3
    be3e:	432f      	orrs	r7, r5
    be40:	1e7d      	subs	r5, r7, #1
    be42:	41af      	sbcs	r7, r5
    be44:	2400      	movs	r4, #0
    be46:	430f      	orrs	r7, r1
    be48:	2600      	movs	r6, #0
    be4a:	e744      	b.n	bcd6 <__aeabi_dadd+0x17a>
    be4c:	002b      	movs	r3, r5
    be4e:	0008      	movs	r0, r1
    be50:	3b20      	subs	r3, #32
    be52:	40d8      	lsrs	r0, r3
    be54:	0003      	movs	r3, r0
    be56:	2d20      	cmp	r5, #32
    be58:	d100      	bne.n	be5c <__aeabi_dadd+0x300>
    be5a:	e07d      	b.n	bf58 <__aeabi_dadd+0x3fc>
    be5c:	2040      	movs	r0, #64	; 0x40
    be5e:	1b45      	subs	r5, r0, r5
    be60:	40a9      	lsls	r1, r5
    be62:	430a      	orrs	r2, r1
    be64:	1e51      	subs	r1, r2, #1
    be66:	418a      	sbcs	r2, r1
    be68:	2100      	movs	r1, #0
    be6a:	431a      	orrs	r2, r3
    be6c:	e6c7      	b.n	bbfe <__aeabi_dadd+0xa2>
    be6e:	2e00      	cmp	r6, #0
    be70:	d050      	beq.n	bf14 <__aeabi_dadd+0x3b8>
    be72:	4e1a      	ldr	r6, [pc, #104]	; (bedc <__aeabi_dadd+0x380>)
    be74:	42b0      	cmp	r0, r6
    be76:	d057      	beq.n	bf28 <__aeabi_dadd+0x3cc>
    be78:	2680      	movs	r6, #128	; 0x80
    be7a:	426b      	negs	r3, r5
    be7c:	4699      	mov	r9, r3
    be7e:	0436      	lsls	r6, r6, #16
    be80:	4334      	orrs	r4, r6
    be82:	464b      	mov	r3, r9
    be84:	2b38      	cmp	r3, #56	; 0x38
    be86:	dd00      	ble.n	be8a <__aeabi_dadd+0x32e>
    be88:	e0d6      	b.n	c038 <__aeabi_dadd+0x4dc>
    be8a:	2b1f      	cmp	r3, #31
    be8c:	dd00      	ble.n	be90 <__aeabi_dadd+0x334>
    be8e:	e135      	b.n	c0fc <__aeabi_dadd+0x5a0>
    be90:	2620      	movs	r6, #32
    be92:	1af5      	subs	r5, r6, r3
    be94:	0026      	movs	r6, r4
    be96:	40ae      	lsls	r6, r5
    be98:	46b2      	mov	sl, r6
    be9a:	003e      	movs	r6, r7
    be9c:	40de      	lsrs	r6, r3
    be9e:	46ac      	mov	ip, r5
    bea0:	0035      	movs	r5, r6
    bea2:	4656      	mov	r6, sl
    bea4:	432e      	orrs	r6, r5
    bea6:	4665      	mov	r5, ip
    bea8:	40af      	lsls	r7, r5
    beaa:	1e7d      	subs	r5, r7, #1
    beac:	41af      	sbcs	r7, r5
    beae:	40dc      	lsrs	r4, r3
    beb0:	4337      	orrs	r7, r6
    beb2:	1bd7      	subs	r7, r2, r7
    beb4:	42ba      	cmp	r2, r7
    beb6:	4192      	sbcs	r2, r2
    beb8:	1b0c      	subs	r4, r1, r4
    beba:	4252      	negs	r2, r2
    bebc:	1aa4      	subs	r4, r4, r2
    bebe:	0006      	movs	r6, r0
    bec0:	46d8      	mov	r8, fp
    bec2:	e6a3      	b.n	bc0c <__aeabi_dadd+0xb0>
    bec4:	4664      	mov	r4, ip
    bec6:	4667      	mov	r7, ip
    bec8:	432c      	orrs	r4, r5
    beca:	d000      	beq.n	bece <__aeabi_dadd+0x372>
    becc:	e6a2      	b.n	bc14 <__aeabi_dadd+0xb8>
    bece:	2500      	movs	r5, #0
    bed0:	2600      	movs	r6, #0
    bed2:	2700      	movs	r7, #0
    bed4:	e706      	b.n	bce4 <__aeabi_dadd+0x188>
    bed6:	001e      	movs	r6, r3
    bed8:	e6c4      	b.n	bc64 <__aeabi_dadd+0x108>
    beda:	46c0      	nop			; (mov r8, r8)
    bedc:	000007ff 	.word	0x000007ff
    bee0:	ff7fffff 	.word	0xff7fffff
    bee4:	800fffff 	.word	0x800fffff
    bee8:	2b1f      	cmp	r3, #31
    beea:	dc63      	bgt.n	bfb4 <__aeabi_dadd+0x458>
    beec:	2020      	movs	r0, #32
    beee:	1ac3      	subs	r3, r0, r3
    bef0:	0008      	movs	r0, r1
    bef2:	4098      	lsls	r0, r3
    bef4:	469c      	mov	ip, r3
    bef6:	4683      	mov	fp, r0
    bef8:	4653      	mov	r3, sl
    befa:	0010      	movs	r0, r2
    befc:	40d8      	lsrs	r0, r3
    befe:	0003      	movs	r3, r0
    bf00:	4658      	mov	r0, fp
    bf02:	4318      	orrs	r0, r3
    bf04:	4663      	mov	r3, ip
    bf06:	409a      	lsls	r2, r3
    bf08:	1e53      	subs	r3, r2, #1
    bf0a:	419a      	sbcs	r2, r3
    bf0c:	4653      	mov	r3, sl
    bf0e:	4302      	orrs	r2, r0
    bf10:	40d9      	lsrs	r1, r3
    bf12:	e703      	b.n	bd1c <__aeabi_dadd+0x1c0>
    bf14:	0026      	movs	r6, r4
    bf16:	433e      	orrs	r6, r7
    bf18:	d006      	beq.n	bf28 <__aeabi_dadd+0x3cc>
    bf1a:	43eb      	mvns	r3, r5
    bf1c:	4699      	mov	r9, r3
    bf1e:	2b00      	cmp	r3, #0
    bf20:	d0c7      	beq.n	beb2 <__aeabi_dadd+0x356>
    bf22:	4e94      	ldr	r6, [pc, #592]	; (c174 <__aeabi_dadd+0x618>)
    bf24:	42b0      	cmp	r0, r6
    bf26:	d1ac      	bne.n	be82 <__aeabi_dadd+0x326>
    bf28:	000c      	movs	r4, r1
    bf2a:	0017      	movs	r7, r2
    bf2c:	0006      	movs	r6, r0
    bf2e:	46d8      	mov	r8, fp
    bf30:	e698      	b.n	bc64 <__aeabi_dadd+0x108>
    bf32:	4b90      	ldr	r3, [pc, #576]	; (c174 <__aeabi_dadd+0x618>)
    bf34:	459a      	cmp	sl, r3
    bf36:	d00b      	beq.n	bf50 <__aeabi_dadd+0x3f4>
    bf38:	4682      	mov	sl, r0
    bf3a:	e6e7      	b.n	bd0c <__aeabi_dadd+0x1b0>
    bf3c:	2800      	cmp	r0, #0
    bf3e:	d000      	beq.n	bf42 <__aeabi_dadd+0x3e6>
    bf40:	e09e      	b.n	c080 <__aeabi_dadd+0x524>
    bf42:	0018      	movs	r0, r3
    bf44:	4310      	orrs	r0, r2
    bf46:	d100      	bne.n	bf4a <__aeabi_dadd+0x3ee>
    bf48:	e0e9      	b.n	c11e <__aeabi_dadd+0x5c2>
    bf4a:	001c      	movs	r4, r3
    bf4c:	0017      	movs	r7, r2
    bf4e:	46d8      	mov	r8, fp
    bf50:	4e88      	ldr	r6, [pc, #544]	; (c174 <__aeabi_dadd+0x618>)
    bf52:	e687      	b.n	bc64 <__aeabi_dadd+0x108>
    bf54:	2500      	movs	r5, #0
    bf56:	e772      	b.n	be3e <__aeabi_dadd+0x2e2>
    bf58:	2100      	movs	r1, #0
    bf5a:	e782      	b.n	be62 <__aeabi_dadd+0x306>
    bf5c:	0023      	movs	r3, r4
    bf5e:	433b      	orrs	r3, r7
    bf60:	2e00      	cmp	r6, #0
    bf62:	d000      	beq.n	bf66 <__aeabi_dadd+0x40a>
    bf64:	e0ab      	b.n	c0be <__aeabi_dadd+0x562>
    bf66:	2b00      	cmp	r3, #0
    bf68:	d100      	bne.n	bf6c <__aeabi_dadd+0x410>
    bf6a:	e0e7      	b.n	c13c <__aeabi_dadd+0x5e0>
    bf6c:	000b      	movs	r3, r1
    bf6e:	4313      	orrs	r3, r2
    bf70:	d100      	bne.n	bf74 <__aeabi_dadd+0x418>
    bf72:	e677      	b.n	bc64 <__aeabi_dadd+0x108>
    bf74:	18ba      	adds	r2, r7, r2
    bf76:	42ba      	cmp	r2, r7
    bf78:	41bf      	sbcs	r7, r7
    bf7a:	1864      	adds	r4, r4, r1
    bf7c:	427f      	negs	r7, r7
    bf7e:	19e4      	adds	r4, r4, r7
    bf80:	0223      	lsls	r3, r4, #8
    bf82:	d400      	bmi.n	bf86 <__aeabi_dadd+0x42a>
    bf84:	e0f2      	b.n	c16c <__aeabi_dadd+0x610>
    bf86:	4b7c      	ldr	r3, [pc, #496]	; (c178 <__aeabi_dadd+0x61c>)
    bf88:	0017      	movs	r7, r2
    bf8a:	401c      	ands	r4, r3
    bf8c:	0006      	movs	r6, r0
    bf8e:	e669      	b.n	bc64 <__aeabi_dadd+0x108>
    bf90:	0020      	movs	r0, r4
    bf92:	4338      	orrs	r0, r7
    bf94:	2e00      	cmp	r6, #0
    bf96:	d1d1      	bne.n	bf3c <__aeabi_dadd+0x3e0>
    bf98:	2800      	cmp	r0, #0
    bf9a:	d15b      	bne.n	c054 <__aeabi_dadd+0x4f8>
    bf9c:	001c      	movs	r4, r3
    bf9e:	4314      	orrs	r4, r2
    bfa0:	d100      	bne.n	bfa4 <__aeabi_dadd+0x448>
    bfa2:	e0a8      	b.n	c0f6 <__aeabi_dadd+0x59a>
    bfa4:	001c      	movs	r4, r3
    bfa6:	0017      	movs	r7, r2
    bfa8:	46d8      	mov	r8, fp
    bfaa:	e65b      	b.n	bc64 <__aeabi_dadd+0x108>
    bfac:	0006      	movs	r6, r0
    bfae:	2400      	movs	r4, #0
    bfb0:	2700      	movs	r7, #0
    bfb2:	e697      	b.n	bce4 <__aeabi_dadd+0x188>
    bfb4:	4650      	mov	r0, sl
    bfb6:	000b      	movs	r3, r1
    bfb8:	3820      	subs	r0, #32
    bfba:	40c3      	lsrs	r3, r0
    bfbc:	4699      	mov	r9, r3
    bfbe:	4653      	mov	r3, sl
    bfc0:	2b20      	cmp	r3, #32
    bfc2:	d100      	bne.n	bfc6 <__aeabi_dadd+0x46a>
    bfc4:	e095      	b.n	c0f2 <__aeabi_dadd+0x596>
    bfc6:	2340      	movs	r3, #64	; 0x40
    bfc8:	4650      	mov	r0, sl
    bfca:	1a1b      	subs	r3, r3, r0
    bfcc:	4099      	lsls	r1, r3
    bfce:	430a      	orrs	r2, r1
    bfd0:	1e51      	subs	r1, r2, #1
    bfd2:	418a      	sbcs	r2, r1
    bfd4:	464b      	mov	r3, r9
    bfd6:	2100      	movs	r1, #0
    bfd8:	431a      	orrs	r2, r3
    bfda:	e69f      	b.n	bd1c <__aeabi_dadd+0x1c0>
    bfdc:	2e00      	cmp	r6, #0
    bfde:	d130      	bne.n	c042 <__aeabi_dadd+0x4e6>
    bfe0:	0026      	movs	r6, r4
    bfe2:	433e      	orrs	r6, r7
    bfe4:	d067      	beq.n	c0b6 <__aeabi_dadd+0x55a>
    bfe6:	43db      	mvns	r3, r3
    bfe8:	469a      	mov	sl, r3
    bfea:	2b00      	cmp	r3, #0
    bfec:	d01c      	beq.n	c028 <__aeabi_dadd+0x4cc>
    bfee:	4e61      	ldr	r6, [pc, #388]	; (c174 <__aeabi_dadd+0x618>)
    bff0:	42b0      	cmp	r0, r6
    bff2:	d060      	beq.n	c0b6 <__aeabi_dadd+0x55a>
    bff4:	4653      	mov	r3, sl
    bff6:	2b38      	cmp	r3, #56	; 0x38
    bff8:	dd00      	ble.n	bffc <__aeabi_dadd+0x4a0>
    bffa:	e096      	b.n	c12a <__aeabi_dadd+0x5ce>
    bffc:	2b1f      	cmp	r3, #31
    bffe:	dd00      	ble.n	c002 <__aeabi_dadd+0x4a6>
    c000:	e09f      	b.n	c142 <__aeabi_dadd+0x5e6>
    c002:	2620      	movs	r6, #32
    c004:	1af3      	subs	r3, r6, r3
    c006:	0026      	movs	r6, r4
    c008:	409e      	lsls	r6, r3
    c00a:	469c      	mov	ip, r3
    c00c:	46b3      	mov	fp, r6
    c00e:	4653      	mov	r3, sl
    c010:	003e      	movs	r6, r7
    c012:	40de      	lsrs	r6, r3
    c014:	0033      	movs	r3, r6
    c016:	465e      	mov	r6, fp
    c018:	431e      	orrs	r6, r3
    c01a:	4663      	mov	r3, ip
    c01c:	409f      	lsls	r7, r3
    c01e:	1e7b      	subs	r3, r7, #1
    c020:	419f      	sbcs	r7, r3
    c022:	4653      	mov	r3, sl
    c024:	40dc      	lsrs	r4, r3
    c026:	4337      	orrs	r7, r6
    c028:	18bf      	adds	r7, r7, r2
    c02a:	4297      	cmp	r7, r2
    c02c:	4192      	sbcs	r2, r2
    c02e:	1864      	adds	r4, r4, r1
    c030:	4252      	negs	r2, r2
    c032:	18a4      	adds	r4, r4, r2
    c034:	0006      	movs	r6, r0
    c036:	e678      	b.n	bd2a <__aeabi_dadd+0x1ce>
    c038:	4327      	orrs	r7, r4
    c03a:	1e7c      	subs	r4, r7, #1
    c03c:	41a7      	sbcs	r7, r4
    c03e:	2400      	movs	r4, #0
    c040:	e737      	b.n	beb2 <__aeabi_dadd+0x356>
    c042:	4e4c      	ldr	r6, [pc, #304]	; (c174 <__aeabi_dadd+0x618>)
    c044:	42b0      	cmp	r0, r6
    c046:	d036      	beq.n	c0b6 <__aeabi_dadd+0x55a>
    c048:	2680      	movs	r6, #128	; 0x80
    c04a:	425b      	negs	r3, r3
    c04c:	0436      	lsls	r6, r6, #16
    c04e:	469a      	mov	sl, r3
    c050:	4334      	orrs	r4, r6
    c052:	e7cf      	b.n	bff4 <__aeabi_dadd+0x498>
    c054:	0018      	movs	r0, r3
    c056:	4310      	orrs	r0, r2
    c058:	d100      	bne.n	c05c <__aeabi_dadd+0x500>
    c05a:	e603      	b.n	bc64 <__aeabi_dadd+0x108>
    c05c:	1ab8      	subs	r0, r7, r2
    c05e:	4684      	mov	ip, r0
    c060:	4567      	cmp	r7, ip
    c062:	41ad      	sbcs	r5, r5
    c064:	1ae0      	subs	r0, r4, r3
    c066:	426d      	negs	r5, r5
    c068:	1b40      	subs	r0, r0, r5
    c06a:	0205      	lsls	r5, r0, #8
    c06c:	d400      	bmi.n	c070 <__aeabi_dadd+0x514>
    c06e:	e62c      	b.n	bcca <__aeabi_dadd+0x16e>
    c070:	1bd7      	subs	r7, r2, r7
    c072:	42ba      	cmp	r2, r7
    c074:	4192      	sbcs	r2, r2
    c076:	1b1c      	subs	r4, r3, r4
    c078:	4252      	negs	r2, r2
    c07a:	1aa4      	subs	r4, r4, r2
    c07c:	46d8      	mov	r8, fp
    c07e:	e5f1      	b.n	bc64 <__aeabi_dadd+0x108>
    c080:	0018      	movs	r0, r3
    c082:	4310      	orrs	r0, r2
    c084:	d100      	bne.n	c088 <__aeabi_dadd+0x52c>
    c086:	e763      	b.n	bf50 <__aeabi_dadd+0x3f4>
    c088:	08f8      	lsrs	r0, r7, #3
    c08a:	0767      	lsls	r7, r4, #29
    c08c:	4307      	orrs	r7, r0
    c08e:	2080      	movs	r0, #128	; 0x80
    c090:	08e4      	lsrs	r4, r4, #3
    c092:	0300      	lsls	r0, r0, #12
    c094:	4204      	tst	r4, r0
    c096:	d008      	beq.n	c0aa <__aeabi_dadd+0x54e>
    c098:	08dd      	lsrs	r5, r3, #3
    c09a:	4205      	tst	r5, r0
    c09c:	d105      	bne.n	c0aa <__aeabi_dadd+0x54e>
    c09e:	08d2      	lsrs	r2, r2, #3
    c0a0:	0759      	lsls	r1, r3, #29
    c0a2:	4311      	orrs	r1, r2
    c0a4:	000f      	movs	r7, r1
    c0a6:	002c      	movs	r4, r5
    c0a8:	46d8      	mov	r8, fp
    c0aa:	0f7b      	lsrs	r3, r7, #29
    c0ac:	00e4      	lsls	r4, r4, #3
    c0ae:	431c      	orrs	r4, r3
    c0b0:	00ff      	lsls	r7, r7, #3
    c0b2:	4e30      	ldr	r6, [pc, #192]	; (c174 <__aeabi_dadd+0x618>)
    c0b4:	e5d6      	b.n	bc64 <__aeabi_dadd+0x108>
    c0b6:	000c      	movs	r4, r1
    c0b8:	0017      	movs	r7, r2
    c0ba:	0006      	movs	r6, r0
    c0bc:	e5d2      	b.n	bc64 <__aeabi_dadd+0x108>
    c0be:	2b00      	cmp	r3, #0
    c0c0:	d038      	beq.n	c134 <__aeabi_dadd+0x5d8>
    c0c2:	000b      	movs	r3, r1
    c0c4:	4313      	orrs	r3, r2
    c0c6:	d100      	bne.n	c0ca <__aeabi_dadd+0x56e>
    c0c8:	e742      	b.n	bf50 <__aeabi_dadd+0x3f4>
    c0ca:	08f8      	lsrs	r0, r7, #3
    c0cc:	0767      	lsls	r7, r4, #29
    c0ce:	4307      	orrs	r7, r0
    c0d0:	2080      	movs	r0, #128	; 0x80
    c0d2:	08e4      	lsrs	r4, r4, #3
    c0d4:	0300      	lsls	r0, r0, #12
    c0d6:	4204      	tst	r4, r0
    c0d8:	d0e7      	beq.n	c0aa <__aeabi_dadd+0x54e>
    c0da:	08cb      	lsrs	r3, r1, #3
    c0dc:	4203      	tst	r3, r0
    c0de:	d1e4      	bne.n	c0aa <__aeabi_dadd+0x54e>
    c0e0:	08d2      	lsrs	r2, r2, #3
    c0e2:	0749      	lsls	r1, r1, #29
    c0e4:	4311      	orrs	r1, r2
    c0e6:	000f      	movs	r7, r1
    c0e8:	001c      	movs	r4, r3
    c0ea:	e7de      	b.n	c0aa <__aeabi_dadd+0x54e>
    c0ec:	2700      	movs	r7, #0
    c0ee:	2400      	movs	r4, #0
    c0f0:	e5d5      	b.n	bc9e <__aeabi_dadd+0x142>
    c0f2:	2100      	movs	r1, #0
    c0f4:	e76b      	b.n	bfce <__aeabi_dadd+0x472>
    c0f6:	2500      	movs	r5, #0
    c0f8:	2700      	movs	r7, #0
    c0fa:	e5f3      	b.n	bce4 <__aeabi_dadd+0x188>
    c0fc:	464e      	mov	r6, r9
    c0fe:	0025      	movs	r5, r4
    c100:	3e20      	subs	r6, #32
    c102:	40f5      	lsrs	r5, r6
    c104:	464b      	mov	r3, r9
    c106:	002e      	movs	r6, r5
    c108:	2b20      	cmp	r3, #32
    c10a:	d02d      	beq.n	c168 <__aeabi_dadd+0x60c>
    c10c:	2540      	movs	r5, #64	; 0x40
    c10e:	1aed      	subs	r5, r5, r3
    c110:	40ac      	lsls	r4, r5
    c112:	4327      	orrs	r7, r4
    c114:	1e7c      	subs	r4, r7, #1
    c116:	41a7      	sbcs	r7, r4
    c118:	2400      	movs	r4, #0
    c11a:	4337      	orrs	r7, r6
    c11c:	e6c9      	b.n	beb2 <__aeabi_dadd+0x356>
    c11e:	2480      	movs	r4, #128	; 0x80
    c120:	2500      	movs	r5, #0
    c122:	0324      	lsls	r4, r4, #12
    c124:	4e13      	ldr	r6, [pc, #76]	; (c174 <__aeabi_dadd+0x618>)
    c126:	2700      	movs	r7, #0
    c128:	e5dc      	b.n	bce4 <__aeabi_dadd+0x188>
    c12a:	4327      	orrs	r7, r4
    c12c:	1e7c      	subs	r4, r7, #1
    c12e:	41a7      	sbcs	r7, r4
    c130:	2400      	movs	r4, #0
    c132:	e779      	b.n	c028 <__aeabi_dadd+0x4cc>
    c134:	000c      	movs	r4, r1
    c136:	0017      	movs	r7, r2
    c138:	4e0e      	ldr	r6, [pc, #56]	; (c174 <__aeabi_dadd+0x618>)
    c13a:	e593      	b.n	bc64 <__aeabi_dadd+0x108>
    c13c:	000c      	movs	r4, r1
    c13e:	0017      	movs	r7, r2
    c140:	e590      	b.n	bc64 <__aeabi_dadd+0x108>
    c142:	4656      	mov	r6, sl
    c144:	0023      	movs	r3, r4
    c146:	3e20      	subs	r6, #32
    c148:	40f3      	lsrs	r3, r6
    c14a:	4699      	mov	r9, r3
    c14c:	4653      	mov	r3, sl
    c14e:	2b20      	cmp	r3, #32
    c150:	d00e      	beq.n	c170 <__aeabi_dadd+0x614>
    c152:	2340      	movs	r3, #64	; 0x40
    c154:	4656      	mov	r6, sl
    c156:	1b9b      	subs	r3, r3, r6
    c158:	409c      	lsls	r4, r3
    c15a:	4327      	orrs	r7, r4
    c15c:	1e7c      	subs	r4, r7, #1
    c15e:	41a7      	sbcs	r7, r4
    c160:	464b      	mov	r3, r9
    c162:	2400      	movs	r4, #0
    c164:	431f      	orrs	r7, r3
    c166:	e75f      	b.n	c028 <__aeabi_dadd+0x4cc>
    c168:	2400      	movs	r4, #0
    c16a:	e7d2      	b.n	c112 <__aeabi_dadd+0x5b6>
    c16c:	0017      	movs	r7, r2
    c16e:	e5b2      	b.n	bcd6 <__aeabi_dadd+0x17a>
    c170:	2400      	movs	r4, #0
    c172:	e7f2      	b.n	c15a <__aeabi_dadd+0x5fe>
    c174:	000007ff 	.word	0x000007ff
    c178:	ff7fffff 	.word	0xff7fffff

0000c17c <__aeabi_ddiv>:
    c17c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c17e:	4657      	mov	r7, sl
    c180:	4645      	mov	r5, r8
    c182:	46de      	mov	lr, fp
    c184:	464e      	mov	r6, r9
    c186:	b5e0      	push	{r5, r6, r7, lr}
    c188:	004c      	lsls	r4, r1, #1
    c18a:	030e      	lsls	r6, r1, #12
    c18c:	b087      	sub	sp, #28
    c18e:	4683      	mov	fp, r0
    c190:	4692      	mov	sl, r2
    c192:	001d      	movs	r5, r3
    c194:	4680      	mov	r8, r0
    c196:	0b36      	lsrs	r6, r6, #12
    c198:	0d64      	lsrs	r4, r4, #21
    c19a:	0fcf      	lsrs	r7, r1, #31
    c19c:	2c00      	cmp	r4, #0
    c19e:	d04f      	beq.n	c240 <__aeabi_ddiv+0xc4>
    c1a0:	4b6f      	ldr	r3, [pc, #444]	; (c360 <__aeabi_ddiv+0x1e4>)
    c1a2:	429c      	cmp	r4, r3
    c1a4:	d035      	beq.n	c212 <__aeabi_ddiv+0x96>
    c1a6:	2380      	movs	r3, #128	; 0x80
    c1a8:	0f42      	lsrs	r2, r0, #29
    c1aa:	041b      	lsls	r3, r3, #16
    c1ac:	00f6      	lsls	r6, r6, #3
    c1ae:	4313      	orrs	r3, r2
    c1b0:	4333      	orrs	r3, r6
    c1b2:	4699      	mov	r9, r3
    c1b4:	00c3      	lsls	r3, r0, #3
    c1b6:	4698      	mov	r8, r3
    c1b8:	4b6a      	ldr	r3, [pc, #424]	; (c364 <__aeabi_ddiv+0x1e8>)
    c1ba:	2600      	movs	r6, #0
    c1bc:	469c      	mov	ip, r3
    c1be:	2300      	movs	r3, #0
    c1c0:	4464      	add	r4, ip
    c1c2:	9303      	str	r3, [sp, #12]
    c1c4:	032b      	lsls	r3, r5, #12
    c1c6:	0b1b      	lsrs	r3, r3, #12
    c1c8:	469b      	mov	fp, r3
    c1ca:	006b      	lsls	r3, r5, #1
    c1cc:	0fed      	lsrs	r5, r5, #31
    c1ce:	4650      	mov	r0, sl
    c1d0:	0d5b      	lsrs	r3, r3, #21
    c1d2:	9501      	str	r5, [sp, #4]
    c1d4:	d05e      	beq.n	c294 <__aeabi_ddiv+0x118>
    c1d6:	4a62      	ldr	r2, [pc, #392]	; (c360 <__aeabi_ddiv+0x1e4>)
    c1d8:	4293      	cmp	r3, r2
    c1da:	d053      	beq.n	c284 <__aeabi_ddiv+0x108>
    c1dc:	465a      	mov	r2, fp
    c1de:	00d1      	lsls	r1, r2, #3
    c1e0:	2280      	movs	r2, #128	; 0x80
    c1e2:	0f40      	lsrs	r0, r0, #29
    c1e4:	0412      	lsls	r2, r2, #16
    c1e6:	4302      	orrs	r2, r0
    c1e8:	430a      	orrs	r2, r1
    c1ea:	4693      	mov	fp, r2
    c1ec:	4652      	mov	r2, sl
    c1ee:	00d1      	lsls	r1, r2, #3
    c1f0:	4a5c      	ldr	r2, [pc, #368]	; (c364 <__aeabi_ddiv+0x1e8>)
    c1f2:	4694      	mov	ip, r2
    c1f4:	2200      	movs	r2, #0
    c1f6:	4463      	add	r3, ip
    c1f8:	0038      	movs	r0, r7
    c1fa:	4068      	eors	r0, r5
    c1fc:	4684      	mov	ip, r0
    c1fe:	9002      	str	r0, [sp, #8]
    c200:	1ae4      	subs	r4, r4, r3
    c202:	4316      	orrs	r6, r2
    c204:	2e0f      	cmp	r6, #15
    c206:	d900      	bls.n	c20a <__aeabi_ddiv+0x8e>
    c208:	e0b4      	b.n	c374 <__aeabi_ddiv+0x1f8>
    c20a:	4b57      	ldr	r3, [pc, #348]	; (c368 <__aeabi_ddiv+0x1ec>)
    c20c:	00b6      	lsls	r6, r6, #2
    c20e:	599b      	ldr	r3, [r3, r6]
    c210:	469f      	mov	pc, r3
    c212:	0003      	movs	r3, r0
    c214:	4333      	orrs	r3, r6
    c216:	4699      	mov	r9, r3
    c218:	d16c      	bne.n	c2f4 <__aeabi_ddiv+0x178>
    c21a:	2300      	movs	r3, #0
    c21c:	4698      	mov	r8, r3
    c21e:	3302      	adds	r3, #2
    c220:	2608      	movs	r6, #8
    c222:	9303      	str	r3, [sp, #12]
    c224:	e7ce      	b.n	c1c4 <__aeabi_ddiv+0x48>
    c226:	46cb      	mov	fp, r9
    c228:	4641      	mov	r1, r8
    c22a:	9a03      	ldr	r2, [sp, #12]
    c22c:	9701      	str	r7, [sp, #4]
    c22e:	2a02      	cmp	r2, #2
    c230:	d165      	bne.n	c2fe <__aeabi_ddiv+0x182>
    c232:	9b01      	ldr	r3, [sp, #4]
    c234:	4c4a      	ldr	r4, [pc, #296]	; (c360 <__aeabi_ddiv+0x1e4>)
    c236:	469c      	mov	ip, r3
    c238:	2300      	movs	r3, #0
    c23a:	2200      	movs	r2, #0
    c23c:	4698      	mov	r8, r3
    c23e:	e06b      	b.n	c318 <__aeabi_ddiv+0x19c>
    c240:	0003      	movs	r3, r0
    c242:	4333      	orrs	r3, r6
    c244:	4699      	mov	r9, r3
    c246:	d04e      	beq.n	c2e6 <__aeabi_ddiv+0x16a>
    c248:	2e00      	cmp	r6, #0
    c24a:	d100      	bne.n	c24e <__aeabi_ddiv+0xd2>
    c24c:	e1bc      	b.n	c5c8 <__aeabi_ddiv+0x44c>
    c24e:	0030      	movs	r0, r6
    c250:	f001 fa7e 	bl	d750 <__clzsi2>
    c254:	0003      	movs	r3, r0
    c256:	3b0b      	subs	r3, #11
    c258:	2b1c      	cmp	r3, #28
    c25a:	dd00      	ble.n	c25e <__aeabi_ddiv+0xe2>
    c25c:	e1ac      	b.n	c5b8 <__aeabi_ddiv+0x43c>
    c25e:	221d      	movs	r2, #29
    c260:	1ad3      	subs	r3, r2, r3
    c262:	465a      	mov	r2, fp
    c264:	0001      	movs	r1, r0
    c266:	40da      	lsrs	r2, r3
    c268:	3908      	subs	r1, #8
    c26a:	408e      	lsls	r6, r1
    c26c:	0013      	movs	r3, r2
    c26e:	4333      	orrs	r3, r6
    c270:	4699      	mov	r9, r3
    c272:	465b      	mov	r3, fp
    c274:	408b      	lsls	r3, r1
    c276:	4698      	mov	r8, r3
    c278:	2300      	movs	r3, #0
    c27a:	4c3c      	ldr	r4, [pc, #240]	; (c36c <__aeabi_ddiv+0x1f0>)
    c27c:	2600      	movs	r6, #0
    c27e:	1a24      	subs	r4, r4, r0
    c280:	9303      	str	r3, [sp, #12]
    c282:	e79f      	b.n	c1c4 <__aeabi_ddiv+0x48>
    c284:	4651      	mov	r1, sl
    c286:	465a      	mov	r2, fp
    c288:	4311      	orrs	r1, r2
    c28a:	d129      	bne.n	c2e0 <__aeabi_ddiv+0x164>
    c28c:	2200      	movs	r2, #0
    c28e:	4693      	mov	fp, r2
    c290:	3202      	adds	r2, #2
    c292:	e7b1      	b.n	c1f8 <__aeabi_ddiv+0x7c>
    c294:	4659      	mov	r1, fp
    c296:	4301      	orrs	r1, r0
    c298:	d01e      	beq.n	c2d8 <__aeabi_ddiv+0x15c>
    c29a:	465b      	mov	r3, fp
    c29c:	2b00      	cmp	r3, #0
    c29e:	d100      	bne.n	c2a2 <__aeabi_ddiv+0x126>
    c2a0:	e19e      	b.n	c5e0 <__aeabi_ddiv+0x464>
    c2a2:	4658      	mov	r0, fp
    c2a4:	f001 fa54 	bl	d750 <__clzsi2>
    c2a8:	0003      	movs	r3, r0
    c2aa:	3b0b      	subs	r3, #11
    c2ac:	2b1c      	cmp	r3, #28
    c2ae:	dd00      	ble.n	c2b2 <__aeabi_ddiv+0x136>
    c2b0:	e18f      	b.n	c5d2 <__aeabi_ddiv+0x456>
    c2b2:	0002      	movs	r2, r0
    c2b4:	4659      	mov	r1, fp
    c2b6:	3a08      	subs	r2, #8
    c2b8:	4091      	lsls	r1, r2
    c2ba:	468b      	mov	fp, r1
    c2bc:	211d      	movs	r1, #29
    c2be:	1acb      	subs	r3, r1, r3
    c2c0:	4651      	mov	r1, sl
    c2c2:	40d9      	lsrs	r1, r3
    c2c4:	000b      	movs	r3, r1
    c2c6:	4659      	mov	r1, fp
    c2c8:	430b      	orrs	r3, r1
    c2ca:	4651      	mov	r1, sl
    c2cc:	469b      	mov	fp, r3
    c2ce:	4091      	lsls	r1, r2
    c2d0:	4b26      	ldr	r3, [pc, #152]	; (c36c <__aeabi_ddiv+0x1f0>)
    c2d2:	2200      	movs	r2, #0
    c2d4:	1a1b      	subs	r3, r3, r0
    c2d6:	e78f      	b.n	c1f8 <__aeabi_ddiv+0x7c>
    c2d8:	2300      	movs	r3, #0
    c2da:	2201      	movs	r2, #1
    c2dc:	469b      	mov	fp, r3
    c2de:	e78b      	b.n	c1f8 <__aeabi_ddiv+0x7c>
    c2e0:	4651      	mov	r1, sl
    c2e2:	2203      	movs	r2, #3
    c2e4:	e788      	b.n	c1f8 <__aeabi_ddiv+0x7c>
    c2e6:	2300      	movs	r3, #0
    c2e8:	4698      	mov	r8, r3
    c2ea:	3301      	adds	r3, #1
    c2ec:	2604      	movs	r6, #4
    c2ee:	2400      	movs	r4, #0
    c2f0:	9303      	str	r3, [sp, #12]
    c2f2:	e767      	b.n	c1c4 <__aeabi_ddiv+0x48>
    c2f4:	2303      	movs	r3, #3
    c2f6:	46b1      	mov	r9, r6
    c2f8:	9303      	str	r3, [sp, #12]
    c2fa:	260c      	movs	r6, #12
    c2fc:	e762      	b.n	c1c4 <__aeabi_ddiv+0x48>
    c2fe:	2a03      	cmp	r2, #3
    c300:	d100      	bne.n	c304 <__aeabi_ddiv+0x188>
    c302:	e25c      	b.n	c7be <__aeabi_ddiv+0x642>
    c304:	9b01      	ldr	r3, [sp, #4]
    c306:	2a01      	cmp	r2, #1
    c308:	d000      	beq.n	c30c <__aeabi_ddiv+0x190>
    c30a:	e1e4      	b.n	c6d6 <__aeabi_ddiv+0x55a>
    c30c:	4013      	ands	r3, r2
    c30e:	469c      	mov	ip, r3
    c310:	2300      	movs	r3, #0
    c312:	2400      	movs	r4, #0
    c314:	2200      	movs	r2, #0
    c316:	4698      	mov	r8, r3
    c318:	2100      	movs	r1, #0
    c31a:	0312      	lsls	r2, r2, #12
    c31c:	0b13      	lsrs	r3, r2, #12
    c31e:	0d0a      	lsrs	r2, r1, #20
    c320:	0512      	lsls	r2, r2, #20
    c322:	431a      	orrs	r2, r3
    c324:	0523      	lsls	r3, r4, #20
    c326:	4c12      	ldr	r4, [pc, #72]	; (c370 <__aeabi_ddiv+0x1f4>)
    c328:	4640      	mov	r0, r8
    c32a:	4022      	ands	r2, r4
    c32c:	4313      	orrs	r3, r2
    c32e:	4662      	mov	r2, ip
    c330:	005b      	lsls	r3, r3, #1
    c332:	07d2      	lsls	r2, r2, #31
    c334:	085b      	lsrs	r3, r3, #1
    c336:	4313      	orrs	r3, r2
    c338:	0019      	movs	r1, r3
    c33a:	b007      	add	sp, #28
    c33c:	bc3c      	pop	{r2, r3, r4, r5}
    c33e:	4690      	mov	r8, r2
    c340:	4699      	mov	r9, r3
    c342:	46a2      	mov	sl, r4
    c344:	46ab      	mov	fp, r5
    c346:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c348:	2300      	movs	r3, #0
    c34a:	2280      	movs	r2, #128	; 0x80
    c34c:	469c      	mov	ip, r3
    c34e:	0312      	lsls	r2, r2, #12
    c350:	4698      	mov	r8, r3
    c352:	4c03      	ldr	r4, [pc, #12]	; (c360 <__aeabi_ddiv+0x1e4>)
    c354:	e7e0      	b.n	c318 <__aeabi_ddiv+0x19c>
    c356:	2300      	movs	r3, #0
    c358:	4c01      	ldr	r4, [pc, #4]	; (c360 <__aeabi_ddiv+0x1e4>)
    c35a:	2200      	movs	r2, #0
    c35c:	4698      	mov	r8, r3
    c35e:	e7db      	b.n	c318 <__aeabi_ddiv+0x19c>
    c360:	000007ff 	.word	0x000007ff
    c364:	fffffc01 	.word	0xfffffc01
    c368:	0000ecc8 	.word	0x0000ecc8
    c36c:	fffffc0d 	.word	0xfffffc0d
    c370:	800fffff 	.word	0x800fffff
    c374:	45d9      	cmp	r9, fp
    c376:	d900      	bls.n	c37a <__aeabi_ddiv+0x1fe>
    c378:	e139      	b.n	c5ee <__aeabi_ddiv+0x472>
    c37a:	d100      	bne.n	c37e <__aeabi_ddiv+0x202>
    c37c:	e134      	b.n	c5e8 <__aeabi_ddiv+0x46c>
    c37e:	2300      	movs	r3, #0
    c380:	4646      	mov	r6, r8
    c382:	464d      	mov	r5, r9
    c384:	469a      	mov	sl, r3
    c386:	3c01      	subs	r4, #1
    c388:	465b      	mov	r3, fp
    c38a:	0e0a      	lsrs	r2, r1, #24
    c38c:	021b      	lsls	r3, r3, #8
    c38e:	431a      	orrs	r2, r3
    c390:	020b      	lsls	r3, r1, #8
    c392:	0c17      	lsrs	r7, r2, #16
    c394:	9303      	str	r3, [sp, #12]
    c396:	0413      	lsls	r3, r2, #16
    c398:	0c1b      	lsrs	r3, r3, #16
    c39a:	0039      	movs	r1, r7
    c39c:	0028      	movs	r0, r5
    c39e:	4690      	mov	r8, r2
    c3a0:	9301      	str	r3, [sp, #4]
    c3a2:	f7fe fab7 	bl	a914 <__udivsi3>
    c3a6:	0002      	movs	r2, r0
    c3a8:	9b01      	ldr	r3, [sp, #4]
    c3aa:	4683      	mov	fp, r0
    c3ac:	435a      	muls	r2, r3
    c3ae:	0028      	movs	r0, r5
    c3b0:	0039      	movs	r1, r7
    c3b2:	4691      	mov	r9, r2
    c3b4:	f7fe fb34 	bl	aa20 <__aeabi_uidivmod>
    c3b8:	0c35      	lsrs	r5, r6, #16
    c3ba:	0409      	lsls	r1, r1, #16
    c3bc:	430d      	orrs	r5, r1
    c3be:	45a9      	cmp	r9, r5
    c3c0:	d90d      	bls.n	c3de <__aeabi_ddiv+0x262>
    c3c2:	465b      	mov	r3, fp
    c3c4:	4445      	add	r5, r8
    c3c6:	3b01      	subs	r3, #1
    c3c8:	45a8      	cmp	r8, r5
    c3ca:	d900      	bls.n	c3ce <__aeabi_ddiv+0x252>
    c3cc:	e13a      	b.n	c644 <__aeabi_ddiv+0x4c8>
    c3ce:	45a9      	cmp	r9, r5
    c3d0:	d800      	bhi.n	c3d4 <__aeabi_ddiv+0x258>
    c3d2:	e137      	b.n	c644 <__aeabi_ddiv+0x4c8>
    c3d4:	2302      	movs	r3, #2
    c3d6:	425b      	negs	r3, r3
    c3d8:	469c      	mov	ip, r3
    c3da:	4445      	add	r5, r8
    c3dc:	44e3      	add	fp, ip
    c3de:	464b      	mov	r3, r9
    c3e0:	1aeb      	subs	r3, r5, r3
    c3e2:	0039      	movs	r1, r7
    c3e4:	0018      	movs	r0, r3
    c3e6:	9304      	str	r3, [sp, #16]
    c3e8:	f7fe fa94 	bl	a914 <__udivsi3>
    c3ec:	9b01      	ldr	r3, [sp, #4]
    c3ee:	0005      	movs	r5, r0
    c3f0:	4343      	muls	r3, r0
    c3f2:	0039      	movs	r1, r7
    c3f4:	9804      	ldr	r0, [sp, #16]
    c3f6:	4699      	mov	r9, r3
    c3f8:	f7fe fb12 	bl	aa20 <__aeabi_uidivmod>
    c3fc:	0433      	lsls	r3, r6, #16
    c3fe:	0409      	lsls	r1, r1, #16
    c400:	0c1b      	lsrs	r3, r3, #16
    c402:	430b      	orrs	r3, r1
    c404:	4599      	cmp	r9, r3
    c406:	d909      	bls.n	c41c <__aeabi_ddiv+0x2a0>
    c408:	4443      	add	r3, r8
    c40a:	1e6a      	subs	r2, r5, #1
    c40c:	4598      	cmp	r8, r3
    c40e:	d900      	bls.n	c412 <__aeabi_ddiv+0x296>
    c410:	e11a      	b.n	c648 <__aeabi_ddiv+0x4cc>
    c412:	4599      	cmp	r9, r3
    c414:	d800      	bhi.n	c418 <__aeabi_ddiv+0x29c>
    c416:	e117      	b.n	c648 <__aeabi_ddiv+0x4cc>
    c418:	3d02      	subs	r5, #2
    c41a:	4443      	add	r3, r8
    c41c:	464a      	mov	r2, r9
    c41e:	1a9b      	subs	r3, r3, r2
    c420:	465a      	mov	r2, fp
    c422:	0412      	lsls	r2, r2, #16
    c424:	432a      	orrs	r2, r5
    c426:	9903      	ldr	r1, [sp, #12]
    c428:	4693      	mov	fp, r2
    c42a:	0c10      	lsrs	r0, r2, #16
    c42c:	0c0a      	lsrs	r2, r1, #16
    c42e:	4691      	mov	r9, r2
    c430:	0409      	lsls	r1, r1, #16
    c432:	465a      	mov	r2, fp
    c434:	0c09      	lsrs	r1, r1, #16
    c436:	464e      	mov	r6, r9
    c438:	000d      	movs	r5, r1
    c43a:	0412      	lsls	r2, r2, #16
    c43c:	0c12      	lsrs	r2, r2, #16
    c43e:	4345      	muls	r5, r0
    c440:	9105      	str	r1, [sp, #20]
    c442:	4351      	muls	r1, r2
    c444:	4372      	muls	r2, r6
    c446:	4370      	muls	r0, r6
    c448:	1952      	adds	r2, r2, r5
    c44a:	0c0e      	lsrs	r6, r1, #16
    c44c:	18b2      	adds	r2, r6, r2
    c44e:	4295      	cmp	r5, r2
    c450:	d903      	bls.n	c45a <__aeabi_ddiv+0x2de>
    c452:	2580      	movs	r5, #128	; 0x80
    c454:	026d      	lsls	r5, r5, #9
    c456:	46ac      	mov	ip, r5
    c458:	4460      	add	r0, ip
    c45a:	0c15      	lsrs	r5, r2, #16
    c45c:	0409      	lsls	r1, r1, #16
    c45e:	0412      	lsls	r2, r2, #16
    c460:	0c09      	lsrs	r1, r1, #16
    c462:	1828      	adds	r0, r5, r0
    c464:	1852      	adds	r2, r2, r1
    c466:	4283      	cmp	r3, r0
    c468:	d200      	bcs.n	c46c <__aeabi_ddiv+0x2f0>
    c46a:	e0ce      	b.n	c60a <__aeabi_ddiv+0x48e>
    c46c:	d100      	bne.n	c470 <__aeabi_ddiv+0x2f4>
    c46e:	e0c8      	b.n	c602 <__aeabi_ddiv+0x486>
    c470:	1a1d      	subs	r5, r3, r0
    c472:	4653      	mov	r3, sl
    c474:	1a9e      	subs	r6, r3, r2
    c476:	45b2      	cmp	sl, r6
    c478:	4192      	sbcs	r2, r2
    c47a:	4252      	negs	r2, r2
    c47c:	1aab      	subs	r3, r5, r2
    c47e:	469a      	mov	sl, r3
    c480:	4598      	cmp	r8, r3
    c482:	d100      	bne.n	c486 <__aeabi_ddiv+0x30a>
    c484:	e117      	b.n	c6b6 <__aeabi_ddiv+0x53a>
    c486:	0039      	movs	r1, r7
    c488:	0018      	movs	r0, r3
    c48a:	f7fe fa43 	bl	a914 <__udivsi3>
    c48e:	9b01      	ldr	r3, [sp, #4]
    c490:	0005      	movs	r5, r0
    c492:	4343      	muls	r3, r0
    c494:	0039      	movs	r1, r7
    c496:	4650      	mov	r0, sl
    c498:	9304      	str	r3, [sp, #16]
    c49a:	f7fe fac1 	bl	aa20 <__aeabi_uidivmod>
    c49e:	9804      	ldr	r0, [sp, #16]
    c4a0:	040b      	lsls	r3, r1, #16
    c4a2:	0c31      	lsrs	r1, r6, #16
    c4a4:	4319      	orrs	r1, r3
    c4a6:	4288      	cmp	r0, r1
    c4a8:	d909      	bls.n	c4be <__aeabi_ddiv+0x342>
    c4aa:	4441      	add	r1, r8
    c4ac:	1e6b      	subs	r3, r5, #1
    c4ae:	4588      	cmp	r8, r1
    c4b0:	d900      	bls.n	c4b4 <__aeabi_ddiv+0x338>
    c4b2:	e107      	b.n	c6c4 <__aeabi_ddiv+0x548>
    c4b4:	4288      	cmp	r0, r1
    c4b6:	d800      	bhi.n	c4ba <__aeabi_ddiv+0x33e>
    c4b8:	e104      	b.n	c6c4 <__aeabi_ddiv+0x548>
    c4ba:	3d02      	subs	r5, #2
    c4bc:	4441      	add	r1, r8
    c4be:	9b04      	ldr	r3, [sp, #16]
    c4c0:	1acb      	subs	r3, r1, r3
    c4c2:	0018      	movs	r0, r3
    c4c4:	0039      	movs	r1, r7
    c4c6:	9304      	str	r3, [sp, #16]
    c4c8:	f7fe fa24 	bl	a914 <__udivsi3>
    c4cc:	9b01      	ldr	r3, [sp, #4]
    c4ce:	4682      	mov	sl, r0
    c4d0:	4343      	muls	r3, r0
    c4d2:	0039      	movs	r1, r7
    c4d4:	9804      	ldr	r0, [sp, #16]
    c4d6:	9301      	str	r3, [sp, #4]
    c4d8:	f7fe faa2 	bl	aa20 <__aeabi_uidivmod>
    c4dc:	9801      	ldr	r0, [sp, #4]
    c4de:	040b      	lsls	r3, r1, #16
    c4e0:	0431      	lsls	r1, r6, #16
    c4e2:	0c09      	lsrs	r1, r1, #16
    c4e4:	4319      	orrs	r1, r3
    c4e6:	4288      	cmp	r0, r1
    c4e8:	d90d      	bls.n	c506 <__aeabi_ddiv+0x38a>
    c4ea:	4653      	mov	r3, sl
    c4ec:	4441      	add	r1, r8
    c4ee:	3b01      	subs	r3, #1
    c4f0:	4588      	cmp	r8, r1
    c4f2:	d900      	bls.n	c4f6 <__aeabi_ddiv+0x37a>
    c4f4:	e0e8      	b.n	c6c8 <__aeabi_ddiv+0x54c>
    c4f6:	4288      	cmp	r0, r1
    c4f8:	d800      	bhi.n	c4fc <__aeabi_ddiv+0x380>
    c4fa:	e0e5      	b.n	c6c8 <__aeabi_ddiv+0x54c>
    c4fc:	2302      	movs	r3, #2
    c4fe:	425b      	negs	r3, r3
    c500:	469c      	mov	ip, r3
    c502:	4441      	add	r1, r8
    c504:	44e2      	add	sl, ip
    c506:	9b01      	ldr	r3, [sp, #4]
    c508:	042d      	lsls	r5, r5, #16
    c50a:	1ace      	subs	r6, r1, r3
    c50c:	4651      	mov	r1, sl
    c50e:	4329      	orrs	r1, r5
    c510:	9d05      	ldr	r5, [sp, #20]
    c512:	464f      	mov	r7, r9
    c514:	002a      	movs	r2, r5
    c516:	040b      	lsls	r3, r1, #16
    c518:	0c08      	lsrs	r0, r1, #16
    c51a:	0c1b      	lsrs	r3, r3, #16
    c51c:	435a      	muls	r2, r3
    c51e:	4345      	muls	r5, r0
    c520:	437b      	muls	r3, r7
    c522:	4378      	muls	r0, r7
    c524:	195b      	adds	r3, r3, r5
    c526:	0c17      	lsrs	r7, r2, #16
    c528:	18fb      	adds	r3, r7, r3
    c52a:	429d      	cmp	r5, r3
    c52c:	d903      	bls.n	c536 <__aeabi_ddiv+0x3ba>
    c52e:	2580      	movs	r5, #128	; 0x80
    c530:	026d      	lsls	r5, r5, #9
    c532:	46ac      	mov	ip, r5
    c534:	4460      	add	r0, ip
    c536:	0c1d      	lsrs	r5, r3, #16
    c538:	0412      	lsls	r2, r2, #16
    c53a:	041b      	lsls	r3, r3, #16
    c53c:	0c12      	lsrs	r2, r2, #16
    c53e:	1828      	adds	r0, r5, r0
    c540:	189b      	adds	r3, r3, r2
    c542:	4286      	cmp	r6, r0
    c544:	d200      	bcs.n	c548 <__aeabi_ddiv+0x3cc>
    c546:	e093      	b.n	c670 <__aeabi_ddiv+0x4f4>
    c548:	d100      	bne.n	c54c <__aeabi_ddiv+0x3d0>
    c54a:	e08e      	b.n	c66a <__aeabi_ddiv+0x4ee>
    c54c:	2301      	movs	r3, #1
    c54e:	4319      	orrs	r1, r3
    c550:	4ba0      	ldr	r3, [pc, #640]	; (c7d4 <__aeabi_ddiv+0x658>)
    c552:	18e3      	adds	r3, r4, r3
    c554:	2b00      	cmp	r3, #0
    c556:	dc00      	bgt.n	c55a <__aeabi_ddiv+0x3de>
    c558:	e099      	b.n	c68e <__aeabi_ddiv+0x512>
    c55a:	074a      	lsls	r2, r1, #29
    c55c:	d000      	beq.n	c560 <__aeabi_ddiv+0x3e4>
    c55e:	e09e      	b.n	c69e <__aeabi_ddiv+0x522>
    c560:	465a      	mov	r2, fp
    c562:	01d2      	lsls	r2, r2, #7
    c564:	d506      	bpl.n	c574 <__aeabi_ddiv+0x3f8>
    c566:	465a      	mov	r2, fp
    c568:	4b9b      	ldr	r3, [pc, #620]	; (c7d8 <__aeabi_ddiv+0x65c>)
    c56a:	401a      	ands	r2, r3
    c56c:	2380      	movs	r3, #128	; 0x80
    c56e:	4693      	mov	fp, r2
    c570:	00db      	lsls	r3, r3, #3
    c572:	18e3      	adds	r3, r4, r3
    c574:	4a99      	ldr	r2, [pc, #612]	; (c7dc <__aeabi_ddiv+0x660>)
    c576:	4293      	cmp	r3, r2
    c578:	dd68      	ble.n	c64c <__aeabi_ddiv+0x4d0>
    c57a:	2301      	movs	r3, #1
    c57c:	9a02      	ldr	r2, [sp, #8]
    c57e:	4c98      	ldr	r4, [pc, #608]	; (c7e0 <__aeabi_ddiv+0x664>)
    c580:	401a      	ands	r2, r3
    c582:	2300      	movs	r3, #0
    c584:	4694      	mov	ip, r2
    c586:	4698      	mov	r8, r3
    c588:	2200      	movs	r2, #0
    c58a:	e6c5      	b.n	c318 <__aeabi_ddiv+0x19c>
    c58c:	2280      	movs	r2, #128	; 0x80
    c58e:	464b      	mov	r3, r9
    c590:	0312      	lsls	r2, r2, #12
    c592:	4213      	tst	r3, r2
    c594:	d00a      	beq.n	c5ac <__aeabi_ddiv+0x430>
    c596:	465b      	mov	r3, fp
    c598:	4213      	tst	r3, r2
    c59a:	d106      	bne.n	c5aa <__aeabi_ddiv+0x42e>
    c59c:	431a      	orrs	r2, r3
    c59e:	0312      	lsls	r2, r2, #12
    c5a0:	0b12      	lsrs	r2, r2, #12
    c5a2:	46ac      	mov	ip, r5
    c5a4:	4688      	mov	r8, r1
    c5a6:	4c8e      	ldr	r4, [pc, #568]	; (c7e0 <__aeabi_ddiv+0x664>)
    c5a8:	e6b6      	b.n	c318 <__aeabi_ddiv+0x19c>
    c5aa:	464b      	mov	r3, r9
    c5ac:	431a      	orrs	r2, r3
    c5ae:	0312      	lsls	r2, r2, #12
    c5b0:	0b12      	lsrs	r2, r2, #12
    c5b2:	46bc      	mov	ip, r7
    c5b4:	4c8a      	ldr	r4, [pc, #552]	; (c7e0 <__aeabi_ddiv+0x664>)
    c5b6:	e6af      	b.n	c318 <__aeabi_ddiv+0x19c>
    c5b8:	0003      	movs	r3, r0
    c5ba:	465a      	mov	r2, fp
    c5bc:	3b28      	subs	r3, #40	; 0x28
    c5be:	409a      	lsls	r2, r3
    c5c0:	2300      	movs	r3, #0
    c5c2:	4691      	mov	r9, r2
    c5c4:	4698      	mov	r8, r3
    c5c6:	e657      	b.n	c278 <__aeabi_ddiv+0xfc>
    c5c8:	4658      	mov	r0, fp
    c5ca:	f001 f8c1 	bl	d750 <__clzsi2>
    c5ce:	3020      	adds	r0, #32
    c5d0:	e640      	b.n	c254 <__aeabi_ddiv+0xd8>
    c5d2:	0003      	movs	r3, r0
    c5d4:	4652      	mov	r2, sl
    c5d6:	3b28      	subs	r3, #40	; 0x28
    c5d8:	409a      	lsls	r2, r3
    c5da:	2100      	movs	r1, #0
    c5dc:	4693      	mov	fp, r2
    c5de:	e677      	b.n	c2d0 <__aeabi_ddiv+0x154>
    c5e0:	f001 f8b6 	bl	d750 <__clzsi2>
    c5e4:	3020      	adds	r0, #32
    c5e6:	e65f      	b.n	c2a8 <__aeabi_ddiv+0x12c>
    c5e8:	4588      	cmp	r8, r1
    c5ea:	d200      	bcs.n	c5ee <__aeabi_ddiv+0x472>
    c5ec:	e6c7      	b.n	c37e <__aeabi_ddiv+0x202>
    c5ee:	464b      	mov	r3, r9
    c5f0:	07de      	lsls	r6, r3, #31
    c5f2:	085d      	lsrs	r5, r3, #1
    c5f4:	4643      	mov	r3, r8
    c5f6:	085b      	lsrs	r3, r3, #1
    c5f8:	431e      	orrs	r6, r3
    c5fa:	4643      	mov	r3, r8
    c5fc:	07db      	lsls	r3, r3, #31
    c5fe:	469a      	mov	sl, r3
    c600:	e6c2      	b.n	c388 <__aeabi_ddiv+0x20c>
    c602:	2500      	movs	r5, #0
    c604:	4592      	cmp	sl, r2
    c606:	d300      	bcc.n	c60a <__aeabi_ddiv+0x48e>
    c608:	e733      	b.n	c472 <__aeabi_ddiv+0x2f6>
    c60a:	9e03      	ldr	r6, [sp, #12]
    c60c:	4659      	mov	r1, fp
    c60e:	46b4      	mov	ip, r6
    c610:	44e2      	add	sl, ip
    c612:	45b2      	cmp	sl, r6
    c614:	41ad      	sbcs	r5, r5
    c616:	426d      	negs	r5, r5
    c618:	4445      	add	r5, r8
    c61a:	18eb      	adds	r3, r5, r3
    c61c:	3901      	subs	r1, #1
    c61e:	4598      	cmp	r8, r3
    c620:	d207      	bcs.n	c632 <__aeabi_ddiv+0x4b6>
    c622:	4298      	cmp	r0, r3
    c624:	d900      	bls.n	c628 <__aeabi_ddiv+0x4ac>
    c626:	e07f      	b.n	c728 <__aeabi_ddiv+0x5ac>
    c628:	d100      	bne.n	c62c <__aeabi_ddiv+0x4b0>
    c62a:	e0bc      	b.n	c7a6 <__aeabi_ddiv+0x62a>
    c62c:	1a1d      	subs	r5, r3, r0
    c62e:	468b      	mov	fp, r1
    c630:	e71f      	b.n	c472 <__aeabi_ddiv+0x2f6>
    c632:	4598      	cmp	r8, r3
    c634:	d1fa      	bne.n	c62c <__aeabi_ddiv+0x4b0>
    c636:	9d03      	ldr	r5, [sp, #12]
    c638:	4555      	cmp	r5, sl
    c63a:	d9f2      	bls.n	c622 <__aeabi_ddiv+0x4a6>
    c63c:	4643      	mov	r3, r8
    c63e:	468b      	mov	fp, r1
    c640:	1a1d      	subs	r5, r3, r0
    c642:	e716      	b.n	c472 <__aeabi_ddiv+0x2f6>
    c644:	469b      	mov	fp, r3
    c646:	e6ca      	b.n	c3de <__aeabi_ddiv+0x262>
    c648:	0015      	movs	r5, r2
    c64a:	e6e7      	b.n	c41c <__aeabi_ddiv+0x2a0>
    c64c:	465a      	mov	r2, fp
    c64e:	08c9      	lsrs	r1, r1, #3
    c650:	0752      	lsls	r2, r2, #29
    c652:	430a      	orrs	r2, r1
    c654:	055b      	lsls	r3, r3, #21
    c656:	4690      	mov	r8, r2
    c658:	0d5c      	lsrs	r4, r3, #21
    c65a:	465a      	mov	r2, fp
    c65c:	2301      	movs	r3, #1
    c65e:	9902      	ldr	r1, [sp, #8]
    c660:	0252      	lsls	r2, r2, #9
    c662:	4019      	ands	r1, r3
    c664:	0b12      	lsrs	r2, r2, #12
    c666:	468c      	mov	ip, r1
    c668:	e656      	b.n	c318 <__aeabi_ddiv+0x19c>
    c66a:	2b00      	cmp	r3, #0
    c66c:	d100      	bne.n	c670 <__aeabi_ddiv+0x4f4>
    c66e:	e76f      	b.n	c550 <__aeabi_ddiv+0x3d4>
    c670:	4446      	add	r6, r8
    c672:	1e4a      	subs	r2, r1, #1
    c674:	45b0      	cmp	r8, r6
    c676:	d929      	bls.n	c6cc <__aeabi_ddiv+0x550>
    c678:	0011      	movs	r1, r2
    c67a:	4286      	cmp	r6, r0
    c67c:	d000      	beq.n	c680 <__aeabi_ddiv+0x504>
    c67e:	e765      	b.n	c54c <__aeabi_ddiv+0x3d0>
    c680:	9a03      	ldr	r2, [sp, #12]
    c682:	4293      	cmp	r3, r2
    c684:	d000      	beq.n	c688 <__aeabi_ddiv+0x50c>
    c686:	e761      	b.n	c54c <__aeabi_ddiv+0x3d0>
    c688:	e762      	b.n	c550 <__aeabi_ddiv+0x3d4>
    c68a:	2101      	movs	r1, #1
    c68c:	4249      	negs	r1, r1
    c68e:	2001      	movs	r0, #1
    c690:	1ac2      	subs	r2, r0, r3
    c692:	2a38      	cmp	r2, #56	; 0x38
    c694:	dd21      	ble.n	c6da <__aeabi_ddiv+0x55e>
    c696:	9b02      	ldr	r3, [sp, #8]
    c698:	4003      	ands	r3, r0
    c69a:	469c      	mov	ip, r3
    c69c:	e638      	b.n	c310 <__aeabi_ddiv+0x194>
    c69e:	220f      	movs	r2, #15
    c6a0:	400a      	ands	r2, r1
    c6a2:	2a04      	cmp	r2, #4
    c6a4:	d100      	bne.n	c6a8 <__aeabi_ddiv+0x52c>
    c6a6:	e75b      	b.n	c560 <__aeabi_ddiv+0x3e4>
    c6a8:	000a      	movs	r2, r1
    c6aa:	1d11      	adds	r1, r2, #4
    c6ac:	4291      	cmp	r1, r2
    c6ae:	4192      	sbcs	r2, r2
    c6b0:	4252      	negs	r2, r2
    c6b2:	4493      	add	fp, r2
    c6b4:	e754      	b.n	c560 <__aeabi_ddiv+0x3e4>
    c6b6:	4b47      	ldr	r3, [pc, #284]	; (c7d4 <__aeabi_ddiv+0x658>)
    c6b8:	18e3      	adds	r3, r4, r3
    c6ba:	2b00      	cmp	r3, #0
    c6bc:	dde5      	ble.n	c68a <__aeabi_ddiv+0x50e>
    c6be:	2201      	movs	r2, #1
    c6c0:	4252      	negs	r2, r2
    c6c2:	e7f2      	b.n	c6aa <__aeabi_ddiv+0x52e>
    c6c4:	001d      	movs	r5, r3
    c6c6:	e6fa      	b.n	c4be <__aeabi_ddiv+0x342>
    c6c8:	469a      	mov	sl, r3
    c6ca:	e71c      	b.n	c506 <__aeabi_ddiv+0x38a>
    c6cc:	42b0      	cmp	r0, r6
    c6ce:	d839      	bhi.n	c744 <__aeabi_ddiv+0x5c8>
    c6d0:	d06e      	beq.n	c7b0 <__aeabi_ddiv+0x634>
    c6d2:	0011      	movs	r1, r2
    c6d4:	e73a      	b.n	c54c <__aeabi_ddiv+0x3d0>
    c6d6:	9302      	str	r3, [sp, #8]
    c6d8:	e73a      	b.n	c550 <__aeabi_ddiv+0x3d4>
    c6da:	2a1f      	cmp	r2, #31
    c6dc:	dc3c      	bgt.n	c758 <__aeabi_ddiv+0x5dc>
    c6de:	2320      	movs	r3, #32
    c6e0:	1a9b      	subs	r3, r3, r2
    c6e2:	000c      	movs	r4, r1
    c6e4:	4658      	mov	r0, fp
    c6e6:	4099      	lsls	r1, r3
    c6e8:	4098      	lsls	r0, r3
    c6ea:	1e4b      	subs	r3, r1, #1
    c6ec:	4199      	sbcs	r1, r3
    c6ee:	465b      	mov	r3, fp
    c6f0:	40d4      	lsrs	r4, r2
    c6f2:	40d3      	lsrs	r3, r2
    c6f4:	4320      	orrs	r0, r4
    c6f6:	4308      	orrs	r0, r1
    c6f8:	001a      	movs	r2, r3
    c6fa:	0743      	lsls	r3, r0, #29
    c6fc:	d009      	beq.n	c712 <__aeabi_ddiv+0x596>
    c6fe:	230f      	movs	r3, #15
    c700:	4003      	ands	r3, r0
    c702:	2b04      	cmp	r3, #4
    c704:	d005      	beq.n	c712 <__aeabi_ddiv+0x596>
    c706:	0001      	movs	r1, r0
    c708:	1d08      	adds	r0, r1, #4
    c70a:	4288      	cmp	r0, r1
    c70c:	419b      	sbcs	r3, r3
    c70e:	425b      	negs	r3, r3
    c710:	18d2      	adds	r2, r2, r3
    c712:	0213      	lsls	r3, r2, #8
    c714:	d53a      	bpl.n	c78c <__aeabi_ddiv+0x610>
    c716:	2301      	movs	r3, #1
    c718:	9a02      	ldr	r2, [sp, #8]
    c71a:	2401      	movs	r4, #1
    c71c:	401a      	ands	r2, r3
    c71e:	2300      	movs	r3, #0
    c720:	4694      	mov	ip, r2
    c722:	4698      	mov	r8, r3
    c724:	2200      	movs	r2, #0
    c726:	e5f7      	b.n	c318 <__aeabi_ddiv+0x19c>
    c728:	2102      	movs	r1, #2
    c72a:	4249      	negs	r1, r1
    c72c:	468c      	mov	ip, r1
    c72e:	9d03      	ldr	r5, [sp, #12]
    c730:	44e3      	add	fp, ip
    c732:	46ac      	mov	ip, r5
    c734:	44e2      	add	sl, ip
    c736:	45aa      	cmp	sl, r5
    c738:	41ad      	sbcs	r5, r5
    c73a:	426d      	negs	r5, r5
    c73c:	4445      	add	r5, r8
    c73e:	18ed      	adds	r5, r5, r3
    c740:	1a2d      	subs	r5, r5, r0
    c742:	e696      	b.n	c472 <__aeabi_ddiv+0x2f6>
    c744:	1e8a      	subs	r2, r1, #2
    c746:	9903      	ldr	r1, [sp, #12]
    c748:	004d      	lsls	r5, r1, #1
    c74a:	428d      	cmp	r5, r1
    c74c:	4189      	sbcs	r1, r1
    c74e:	4249      	negs	r1, r1
    c750:	4441      	add	r1, r8
    c752:	1876      	adds	r6, r6, r1
    c754:	9503      	str	r5, [sp, #12]
    c756:	e78f      	b.n	c678 <__aeabi_ddiv+0x4fc>
    c758:	201f      	movs	r0, #31
    c75a:	4240      	negs	r0, r0
    c75c:	1ac3      	subs	r3, r0, r3
    c75e:	4658      	mov	r0, fp
    c760:	40d8      	lsrs	r0, r3
    c762:	0003      	movs	r3, r0
    c764:	2a20      	cmp	r2, #32
    c766:	d028      	beq.n	c7ba <__aeabi_ddiv+0x63e>
    c768:	2040      	movs	r0, #64	; 0x40
    c76a:	465d      	mov	r5, fp
    c76c:	1a82      	subs	r2, r0, r2
    c76e:	4095      	lsls	r5, r2
    c770:	4329      	orrs	r1, r5
    c772:	1e4a      	subs	r2, r1, #1
    c774:	4191      	sbcs	r1, r2
    c776:	4319      	orrs	r1, r3
    c778:	2307      	movs	r3, #7
    c77a:	2200      	movs	r2, #0
    c77c:	400b      	ands	r3, r1
    c77e:	d009      	beq.n	c794 <__aeabi_ddiv+0x618>
    c780:	230f      	movs	r3, #15
    c782:	2200      	movs	r2, #0
    c784:	400b      	ands	r3, r1
    c786:	0008      	movs	r0, r1
    c788:	2b04      	cmp	r3, #4
    c78a:	d1bd      	bne.n	c708 <__aeabi_ddiv+0x58c>
    c78c:	0001      	movs	r1, r0
    c78e:	0753      	lsls	r3, r2, #29
    c790:	0252      	lsls	r2, r2, #9
    c792:	0b12      	lsrs	r2, r2, #12
    c794:	08c9      	lsrs	r1, r1, #3
    c796:	4319      	orrs	r1, r3
    c798:	2301      	movs	r3, #1
    c79a:	4688      	mov	r8, r1
    c79c:	9902      	ldr	r1, [sp, #8]
    c79e:	2400      	movs	r4, #0
    c7a0:	4019      	ands	r1, r3
    c7a2:	468c      	mov	ip, r1
    c7a4:	e5b8      	b.n	c318 <__aeabi_ddiv+0x19c>
    c7a6:	4552      	cmp	r2, sl
    c7a8:	d8be      	bhi.n	c728 <__aeabi_ddiv+0x5ac>
    c7aa:	468b      	mov	fp, r1
    c7ac:	2500      	movs	r5, #0
    c7ae:	e660      	b.n	c472 <__aeabi_ddiv+0x2f6>
    c7b0:	9d03      	ldr	r5, [sp, #12]
    c7b2:	429d      	cmp	r5, r3
    c7b4:	d3c6      	bcc.n	c744 <__aeabi_ddiv+0x5c8>
    c7b6:	0011      	movs	r1, r2
    c7b8:	e762      	b.n	c680 <__aeabi_ddiv+0x504>
    c7ba:	2500      	movs	r5, #0
    c7bc:	e7d8      	b.n	c770 <__aeabi_ddiv+0x5f4>
    c7be:	2280      	movs	r2, #128	; 0x80
    c7c0:	465b      	mov	r3, fp
    c7c2:	0312      	lsls	r2, r2, #12
    c7c4:	431a      	orrs	r2, r3
    c7c6:	9b01      	ldr	r3, [sp, #4]
    c7c8:	0312      	lsls	r2, r2, #12
    c7ca:	0b12      	lsrs	r2, r2, #12
    c7cc:	469c      	mov	ip, r3
    c7ce:	4688      	mov	r8, r1
    c7d0:	4c03      	ldr	r4, [pc, #12]	; (c7e0 <__aeabi_ddiv+0x664>)
    c7d2:	e5a1      	b.n	c318 <__aeabi_ddiv+0x19c>
    c7d4:	000003ff 	.word	0x000003ff
    c7d8:	feffffff 	.word	0xfeffffff
    c7dc:	000007fe 	.word	0x000007fe
    c7e0:	000007ff 	.word	0x000007ff

0000c7e4 <__eqdf2>:
    c7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7e6:	464f      	mov	r7, r9
    c7e8:	4646      	mov	r6, r8
    c7ea:	46d6      	mov	lr, sl
    c7ec:	005c      	lsls	r4, r3, #1
    c7ee:	b5c0      	push	{r6, r7, lr}
    c7f0:	031f      	lsls	r7, r3, #12
    c7f2:	0fdb      	lsrs	r3, r3, #31
    c7f4:	469a      	mov	sl, r3
    c7f6:	4b17      	ldr	r3, [pc, #92]	; (c854 <__eqdf2+0x70>)
    c7f8:	030e      	lsls	r6, r1, #12
    c7fa:	004d      	lsls	r5, r1, #1
    c7fc:	4684      	mov	ip, r0
    c7fe:	4680      	mov	r8, r0
    c800:	0b36      	lsrs	r6, r6, #12
    c802:	0d6d      	lsrs	r5, r5, #21
    c804:	0fc9      	lsrs	r1, r1, #31
    c806:	4691      	mov	r9, r2
    c808:	0b3f      	lsrs	r7, r7, #12
    c80a:	0d64      	lsrs	r4, r4, #21
    c80c:	2001      	movs	r0, #1
    c80e:	429d      	cmp	r5, r3
    c810:	d008      	beq.n	c824 <__eqdf2+0x40>
    c812:	429c      	cmp	r4, r3
    c814:	d001      	beq.n	c81a <__eqdf2+0x36>
    c816:	42a5      	cmp	r5, r4
    c818:	d00b      	beq.n	c832 <__eqdf2+0x4e>
    c81a:	bc1c      	pop	{r2, r3, r4}
    c81c:	4690      	mov	r8, r2
    c81e:	4699      	mov	r9, r3
    c820:	46a2      	mov	sl, r4
    c822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c824:	4663      	mov	r3, ip
    c826:	4333      	orrs	r3, r6
    c828:	d1f7      	bne.n	c81a <__eqdf2+0x36>
    c82a:	42ac      	cmp	r4, r5
    c82c:	d1f5      	bne.n	c81a <__eqdf2+0x36>
    c82e:	433a      	orrs	r2, r7
    c830:	d1f3      	bne.n	c81a <__eqdf2+0x36>
    c832:	2001      	movs	r0, #1
    c834:	42be      	cmp	r6, r7
    c836:	d1f0      	bne.n	c81a <__eqdf2+0x36>
    c838:	45c8      	cmp	r8, r9
    c83a:	d1ee      	bne.n	c81a <__eqdf2+0x36>
    c83c:	4551      	cmp	r1, sl
    c83e:	d007      	beq.n	c850 <__eqdf2+0x6c>
    c840:	2d00      	cmp	r5, #0
    c842:	d1ea      	bne.n	c81a <__eqdf2+0x36>
    c844:	4663      	mov	r3, ip
    c846:	431e      	orrs	r6, r3
    c848:	0030      	movs	r0, r6
    c84a:	1e46      	subs	r6, r0, #1
    c84c:	41b0      	sbcs	r0, r6
    c84e:	e7e4      	b.n	c81a <__eqdf2+0x36>
    c850:	2000      	movs	r0, #0
    c852:	e7e2      	b.n	c81a <__eqdf2+0x36>
    c854:	000007ff 	.word	0x000007ff

0000c858 <__gedf2>:
    c858:	b5f0      	push	{r4, r5, r6, r7, lr}
    c85a:	4645      	mov	r5, r8
    c85c:	46de      	mov	lr, fp
    c85e:	4657      	mov	r7, sl
    c860:	464e      	mov	r6, r9
    c862:	b5e0      	push	{r5, r6, r7, lr}
    c864:	031f      	lsls	r7, r3, #12
    c866:	0b3d      	lsrs	r5, r7, #12
    c868:	4f2c      	ldr	r7, [pc, #176]	; (c91c <__gedf2+0xc4>)
    c86a:	030e      	lsls	r6, r1, #12
    c86c:	004c      	lsls	r4, r1, #1
    c86e:	46ab      	mov	fp, r5
    c870:	005d      	lsls	r5, r3, #1
    c872:	4684      	mov	ip, r0
    c874:	0b36      	lsrs	r6, r6, #12
    c876:	0d64      	lsrs	r4, r4, #21
    c878:	0fc9      	lsrs	r1, r1, #31
    c87a:	4690      	mov	r8, r2
    c87c:	0d6d      	lsrs	r5, r5, #21
    c87e:	0fdb      	lsrs	r3, r3, #31
    c880:	42bc      	cmp	r4, r7
    c882:	d02a      	beq.n	c8da <__gedf2+0x82>
    c884:	4f25      	ldr	r7, [pc, #148]	; (c91c <__gedf2+0xc4>)
    c886:	42bd      	cmp	r5, r7
    c888:	d02d      	beq.n	c8e6 <__gedf2+0x8e>
    c88a:	2c00      	cmp	r4, #0
    c88c:	d10f      	bne.n	c8ae <__gedf2+0x56>
    c88e:	4330      	orrs	r0, r6
    c890:	0007      	movs	r7, r0
    c892:	4681      	mov	r9, r0
    c894:	4278      	negs	r0, r7
    c896:	4178      	adcs	r0, r7
    c898:	b2c0      	uxtb	r0, r0
    c89a:	2d00      	cmp	r5, #0
    c89c:	d117      	bne.n	c8ce <__gedf2+0x76>
    c89e:	465f      	mov	r7, fp
    c8a0:	433a      	orrs	r2, r7
    c8a2:	d114      	bne.n	c8ce <__gedf2+0x76>
    c8a4:	464b      	mov	r3, r9
    c8a6:	2000      	movs	r0, #0
    c8a8:	2b00      	cmp	r3, #0
    c8aa:	d00a      	beq.n	c8c2 <__gedf2+0x6a>
    c8ac:	e006      	b.n	c8bc <__gedf2+0x64>
    c8ae:	2d00      	cmp	r5, #0
    c8b0:	d102      	bne.n	c8b8 <__gedf2+0x60>
    c8b2:	4658      	mov	r0, fp
    c8b4:	4302      	orrs	r2, r0
    c8b6:	d001      	beq.n	c8bc <__gedf2+0x64>
    c8b8:	4299      	cmp	r1, r3
    c8ba:	d018      	beq.n	c8ee <__gedf2+0x96>
    c8bc:	4248      	negs	r0, r1
    c8be:	2101      	movs	r1, #1
    c8c0:	4308      	orrs	r0, r1
    c8c2:	bc3c      	pop	{r2, r3, r4, r5}
    c8c4:	4690      	mov	r8, r2
    c8c6:	4699      	mov	r9, r3
    c8c8:	46a2      	mov	sl, r4
    c8ca:	46ab      	mov	fp, r5
    c8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c8ce:	2800      	cmp	r0, #0
    c8d0:	d0f2      	beq.n	c8b8 <__gedf2+0x60>
    c8d2:	2001      	movs	r0, #1
    c8d4:	3b01      	subs	r3, #1
    c8d6:	4318      	orrs	r0, r3
    c8d8:	e7f3      	b.n	c8c2 <__gedf2+0x6a>
    c8da:	0037      	movs	r7, r6
    c8dc:	4307      	orrs	r7, r0
    c8de:	d0d1      	beq.n	c884 <__gedf2+0x2c>
    c8e0:	2002      	movs	r0, #2
    c8e2:	4240      	negs	r0, r0
    c8e4:	e7ed      	b.n	c8c2 <__gedf2+0x6a>
    c8e6:	465f      	mov	r7, fp
    c8e8:	4317      	orrs	r7, r2
    c8ea:	d0ce      	beq.n	c88a <__gedf2+0x32>
    c8ec:	e7f8      	b.n	c8e0 <__gedf2+0x88>
    c8ee:	42ac      	cmp	r4, r5
    c8f0:	dce4      	bgt.n	c8bc <__gedf2+0x64>
    c8f2:	da03      	bge.n	c8fc <__gedf2+0xa4>
    c8f4:	1e48      	subs	r0, r1, #1
    c8f6:	2101      	movs	r1, #1
    c8f8:	4308      	orrs	r0, r1
    c8fa:	e7e2      	b.n	c8c2 <__gedf2+0x6a>
    c8fc:	455e      	cmp	r6, fp
    c8fe:	d8dd      	bhi.n	c8bc <__gedf2+0x64>
    c900:	d006      	beq.n	c910 <__gedf2+0xb8>
    c902:	2000      	movs	r0, #0
    c904:	455e      	cmp	r6, fp
    c906:	d2dc      	bcs.n	c8c2 <__gedf2+0x6a>
    c908:	2301      	movs	r3, #1
    c90a:	1e48      	subs	r0, r1, #1
    c90c:	4318      	orrs	r0, r3
    c90e:	e7d8      	b.n	c8c2 <__gedf2+0x6a>
    c910:	45c4      	cmp	ip, r8
    c912:	d8d3      	bhi.n	c8bc <__gedf2+0x64>
    c914:	2000      	movs	r0, #0
    c916:	45c4      	cmp	ip, r8
    c918:	d3f6      	bcc.n	c908 <__gedf2+0xb0>
    c91a:	e7d2      	b.n	c8c2 <__gedf2+0x6a>
    c91c:	000007ff 	.word	0x000007ff

0000c920 <__ledf2>:
    c920:	b5f0      	push	{r4, r5, r6, r7, lr}
    c922:	464e      	mov	r6, r9
    c924:	4645      	mov	r5, r8
    c926:	46de      	mov	lr, fp
    c928:	4657      	mov	r7, sl
    c92a:	005c      	lsls	r4, r3, #1
    c92c:	b5e0      	push	{r5, r6, r7, lr}
    c92e:	031f      	lsls	r7, r3, #12
    c930:	0fdb      	lsrs	r3, r3, #31
    c932:	4699      	mov	r9, r3
    c934:	4b2a      	ldr	r3, [pc, #168]	; (c9e0 <__ledf2+0xc0>)
    c936:	030e      	lsls	r6, r1, #12
    c938:	004d      	lsls	r5, r1, #1
    c93a:	0fc9      	lsrs	r1, r1, #31
    c93c:	4684      	mov	ip, r0
    c93e:	0b36      	lsrs	r6, r6, #12
    c940:	0d6d      	lsrs	r5, r5, #21
    c942:	468b      	mov	fp, r1
    c944:	4690      	mov	r8, r2
    c946:	0b3f      	lsrs	r7, r7, #12
    c948:	0d64      	lsrs	r4, r4, #21
    c94a:	429d      	cmp	r5, r3
    c94c:	d020      	beq.n	c990 <__ledf2+0x70>
    c94e:	4b24      	ldr	r3, [pc, #144]	; (c9e0 <__ledf2+0xc0>)
    c950:	429c      	cmp	r4, r3
    c952:	d022      	beq.n	c99a <__ledf2+0x7a>
    c954:	2d00      	cmp	r5, #0
    c956:	d112      	bne.n	c97e <__ledf2+0x5e>
    c958:	4330      	orrs	r0, r6
    c95a:	4243      	negs	r3, r0
    c95c:	4143      	adcs	r3, r0
    c95e:	b2db      	uxtb	r3, r3
    c960:	2c00      	cmp	r4, #0
    c962:	d01f      	beq.n	c9a4 <__ledf2+0x84>
    c964:	2b00      	cmp	r3, #0
    c966:	d00c      	beq.n	c982 <__ledf2+0x62>
    c968:	464b      	mov	r3, r9
    c96a:	2001      	movs	r0, #1
    c96c:	3b01      	subs	r3, #1
    c96e:	4303      	orrs	r3, r0
    c970:	0018      	movs	r0, r3
    c972:	bc3c      	pop	{r2, r3, r4, r5}
    c974:	4690      	mov	r8, r2
    c976:	4699      	mov	r9, r3
    c978:	46a2      	mov	sl, r4
    c97a:	46ab      	mov	fp, r5
    c97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c97e:	2c00      	cmp	r4, #0
    c980:	d016      	beq.n	c9b0 <__ledf2+0x90>
    c982:	45cb      	cmp	fp, r9
    c984:	d017      	beq.n	c9b6 <__ledf2+0x96>
    c986:	465b      	mov	r3, fp
    c988:	4259      	negs	r1, r3
    c98a:	2301      	movs	r3, #1
    c98c:	430b      	orrs	r3, r1
    c98e:	e7ef      	b.n	c970 <__ledf2+0x50>
    c990:	0031      	movs	r1, r6
    c992:	2302      	movs	r3, #2
    c994:	4301      	orrs	r1, r0
    c996:	d1eb      	bne.n	c970 <__ledf2+0x50>
    c998:	e7d9      	b.n	c94e <__ledf2+0x2e>
    c99a:	0039      	movs	r1, r7
    c99c:	2302      	movs	r3, #2
    c99e:	4311      	orrs	r1, r2
    c9a0:	d1e6      	bne.n	c970 <__ledf2+0x50>
    c9a2:	e7d7      	b.n	c954 <__ledf2+0x34>
    c9a4:	433a      	orrs	r2, r7
    c9a6:	d1dd      	bne.n	c964 <__ledf2+0x44>
    c9a8:	2300      	movs	r3, #0
    c9aa:	2800      	cmp	r0, #0
    c9ac:	d0e0      	beq.n	c970 <__ledf2+0x50>
    c9ae:	e7ea      	b.n	c986 <__ledf2+0x66>
    c9b0:	433a      	orrs	r2, r7
    c9b2:	d1e6      	bne.n	c982 <__ledf2+0x62>
    c9b4:	e7e7      	b.n	c986 <__ledf2+0x66>
    c9b6:	42a5      	cmp	r5, r4
    c9b8:	dce5      	bgt.n	c986 <__ledf2+0x66>
    c9ba:	db05      	blt.n	c9c8 <__ledf2+0xa8>
    c9bc:	42be      	cmp	r6, r7
    c9be:	d8e2      	bhi.n	c986 <__ledf2+0x66>
    c9c0:	d007      	beq.n	c9d2 <__ledf2+0xb2>
    c9c2:	2300      	movs	r3, #0
    c9c4:	42be      	cmp	r6, r7
    c9c6:	d2d3      	bcs.n	c970 <__ledf2+0x50>
    c9c8:	4659      	mov	r1, fp
    c9ca:	2301      	movs	r3, #1
    c9cc:	3901      	subs	r1, #1
    c9ce:	430b      	orrs	r3, r1
    c9d0:	e7ce      	b.n	c970 <__ledf2+0x50>
    c9d2:	45c4      	cmp	ip, r8
    c9d4:	d8d7      	bhi.n	c986 <__ledf2+0x66>
    c9d6:	2300      	movs	r3, #0
    c9d8:	45c4      	cmp	ip, r8
    c9da:	d3f5      	bcc.n	c9c8 <__ledf2+0xa8>
    c9dc:	e7c8      	b.n	c970 <__ledf2+0x50>
    c9de:	46c0      	nop			; (mov r8, r8)
    c9e0:	000007ff 	.word	0x000007ff

0000c9e4 <__aeabi_dmul>:
    c9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9e6:	4657      	mov	r7, sl
    c9e8:	4645      	mov	r5, r8
    c9ea:	46de      	mov	lr, fp
    c9ec:	464e      	mov	r6, r9
    c9ee:	b5e0      	push	{r5, r6, r7, lr}
    c9f0:	030c      	lsls	r4, r1, #12
    c9f2:	4698      	mov	r8, r3
    c9f4:	004e      	lsls	r6, r1, #1
    c9f6:	0b23      	lsrs	r3, r4, #12
    c9f8:	b087      	sub	sp, #28
    c9fa:	0007      	movs	r7, r0
    c9fc:	4692      	mov	sl, r2
    c9fe:	469b      	mov	fp, r3
    ca00:	0d76      	lsrs	r6, r6, #21
    ca02:	0fcd      	lsrs	r5, r1, #31
    ca04:	2e00      	cmp	r6, #0
    ca06:	d06b      	beq.n	cae0 <__aeabi_dmul+0xfc>
    ca08:	4b6d      	ldr	r3, [pc, #436]	; (cbc0 <__aeabi_dmul+0x1dc>)
    ca0a:	429e      	cmp	r6, r3
    ca0c:	d035      	beq.n	ca7a <__aeabi_dmul+0x96>
    ca0e:	2480      	movs	r4, #128	; 0x80
    ca10:	465b      	mov	r3, fp
    ca12:	0f42      	lsrs	r2, r0, #29
    ca14:	0424      	lsls	r4, r4, #16
    ca16:	00db      	lsls	r3, r3, #3
    ca18:	4314      	orrs	r4, r2
    ca1a:	431c      	orrs	r4, r3
    ca1c:	00c3      	lsls	r3, r0, #3
    ca1e:	4699      	mov	r9, r3
    ca20:	4b68      	ldr	r3, [pc, #416]	; (cbc4 <__aeabi_dmul+0x1e0>)
    ca22:	46a3      	mov	fp, r4
    ca24:	469c      	mov	ip, r3
    ca26:	2300      	movs	r3, #0
    ca28:	2700      	movs	r7, #0
    ca2a:	4466      	add	r6, ip
    ca2c:	9302      	str	r3, [sp, #8]
    ca2e:	4643      	mov	r3, r8
    ca30:	031c      	lsls	r4, r3, #12
    ca32:	005a      	lsls	r2, r3, #1
    ca34:	0fdb      	lsrs	r3, r3, #31
    ca36:	4650      	mov	r0, sl
    ca38:	0b24      	lsrs	r4, r4, #12
    ca3a:	0d52      	lsrs	r2, r2, #21
    ca3c:	4698      	mov	r8, r3
    ca3e:	d100      	bne.n	ca42 <__aeabi_dmul+0x5e>
    ca40:	e076      	b.n	cb30 <__aeabi_dmul+0x14c>
    ca42:	4b5f      	ldr	r3, [pc, #380]	; (cbc0 <__aeabi_dmul+0x1dc>)
    ca44:	429a      	cmp	r2, r3
    ca46:	d06d      	beq.n	cb24 <__aeabi_dmul+0x140>
    ca48:	2380      	movs	r3, #128	; 0x80
    ca4a:	0f41      	lsrs	r1, r0, #29
    ca4c:	041b      	lsls	r3, r3, #16
    ca4e:	430b      	orrs	r3, r1
    ca50:	495c      	ldr	r1, [pc, #368]	; (cbc4 <__aeabi_dmul+0x1e0>)
    ca52:	00e4      	lsls	r4, r4, #3
    ca54:	468c      	mov	ip, r1
    ca56:	431c      	orrs	r4, r3
    ca58:	00c3      	lsls	r3, r0, #3
    ca5a:	2000      	movs	r0, #0
    ca5c:	4462      	add	r2, ip
    ca5e:	4641      	mov	r1, r8
    ca60:	18b6      	adds	r6, r6, r2
    ca62:	4069      	eors	r1, r5
    ca64:	1c72      	adds	r2, r6, #1
    ca66:	9101      	str	r1, [sp, #4]
    ca68:	4694      	mov	ip, r2
    ca6a:	4307      	orrs	r7, r0
    ca6c:	2f0f      	cmp	r7, #15
    ca6e:	d900      	bls.n	ca72 <__aeabi_dmul+0x8e>
    ca70:	e0b0      	b.n	cbd4 <__aeabi_dmul+0x1f0>
    ca72:	4a55      	ldr	r2, [pc, #340]	; (cbc8 <__aeabi_dmul+0x1e4>)
    ca74:	00bf      	lsls	r7, r7, #2
    ca76:	59d2      	ldr	r2, [r2, r7]
    ca78:	4697      	mov	pc, r2
    ca7a:	465b      	mov	r3, fp
    ca7c:	4303      	orrs	r3, r0
    ca7e:	4699      	mov	r9, r3
    ca80:	d000      	beq.n	ca84 <__aeabi_dmul+0xa0>
    ca82:	e087      	b.n	cb94 <__aeabi_dmul+0x1b0>
    ca84:	2300      	movs	r3, #0
    ca86:	469b      	mov	fp, r3
    ca88:	3302      	adds	r3, #2
    ca8a:	2708      	movs	r7, #8
    ca8c:	9302      	str	r3, [sp, #8]
    ca8e:	e7ce      	b.n	ca2e <__aeabi_dmul+0x4a>
    ca90:	4642      	mov	r2, r8
    ca92:	9201      	str	r2, [sp, #4]
    ca94:	2802      	cmp	r0, #2
    ca96:	d067      	beq.n	cb68 <__aeabi_dmul+0x184>
    ca98:	2803      	cmp	r0, #3
    ca9a:	d100      	bne.n	ca9e <__aeabi_dmul+0xba>
    ca9c:	e20e      	b.n	cebc <__aeabi_dmul+0x4d8>
    ca9e:	2801      	cmp	r0, #1
    caa0:	d000      	beq.n	caa4 <__aeabi_dmul+0xc0>
    caa2:	e162      	b.n	cd6a <__aeabi_dmul+0x386>
    caa4:	2300      	movs	r3, #0
    caa6:	2400      	movs	r4, #0
    caa8:	2200      	movs	r2, #0
    caaa:	4699      	mov	r9, r3
    caac:	9901      	ldr	r1, [sp, #4]
    caae:	4001      	ands	r1, r0
    cab0:	b2cd      	uxtb	r5, r1
    cab2:	2100      	movs	r1, #0
    cab4:	0312      	lsls	r2, r2, #12
    cab6:	0d0b      	lsrs	r3, r1, #20
    cab8:	0b12      	lsrs	r2, r2, #12
    caba:	051b      	lsls	r3, r3, #20
    cabc:	4313      	orrs	r3, r2
    cabe:	4a43      	ldr	r2, [pc, #268]	; (cbcc <__aeabi_dmul+0x1e8>)
    cac0:	0524      	lsls	r4, r4, #20
    cac2:	4013      	ands	r3, r2
    cac4:	431c      	orrs	r4, r3
    cac6:	0064      	lsls	r4, r4, #1
    cac8:	07ed      	lsls	r5, r5, #31
    caca:	0864      	lsrs	r4, r4, #1
    cacc:	432c      	orrs	r4, r5
    cace:	4648      	mov	r0, r9
    cad0:	0021      	movs	r1, r4
    cad2:	b007      	add	sp, #28
    cad4:	bc3c      	pop	{r2, r3, r4, r5}
    cad6:	4690      	mov	r8, r2
    cad8:	4699      	mov	r9, r3
    cada:	46a2      	mov	sl, r4
    cadc:	46ab      	mov	fp, r5
    cade:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cae0:	4303      	orrs	r3, r0
    cae2:	4699      	mov	r9, r3
    cae4:	d04f      	beq.n	cb86 <__aeabi_dmul+0x1a2>
    cae6:	465b      	mov	r3, fp
    cae8:	2b00      	cmp	r3, #0
    caea:	d100      	bne.n	caee <__aeabi_dmul+0x10a>
    caec:	e189      	b.n	ce02 <__aeabi_dmul+0x41e>
    caee:	4658      	mov	r0, fp
    caf0:	f000 fe2e 	bl	d750 <__clzsi2>
    caf4:	0003      	movs	r3, r0
    caf6:	3b0b      	subs	r3, #11
    caf8:	2b1c      	cmp	r3, #28
    cafa:	dd00      	ble.n	cafe <__aeabi_dmul+0x11a>
    cafc:	e17a      	b.n	cdf4 <__aeabi_dmul+0x410>
    cafe:	221d      	movs	r2, #29
    cb00:	1ad3      	subs	r3, r2, r3
    cb02:	003a      	movs	r2, r7
    cb04:	0001      	movs	r1, r0
    cb06:	465c      	mov	r4, fp
    cb08:	40da      	lsrs	r2, r3
    cb0a:	3908      	subs	r1, #8
    cb0c:	408c      	lsls	r4, r1
    cb0e:	0013      	movs	r3, r2
    cb10:	408f      	lsls	r7, r1
    cb12:	4323      	orrs	r3, r4
    cb14:	469b      	mov	fp, r3
    cb16:	46b9      	mov	r9, r7
    cb18:	2300      	movs	r3, #0
    cb1a:	4e2d      	ldr	r6, [pc, #180]	; (cbd0 <__aeabi_dmul+0x1ec>)
    cb1c:	2700      	movs	r7, #0
    cb1e:	1a36      	subs	r6, r6, r0
    cb20:	9302      	str	r3, [sp, #8]
    cb22:	e784      	b.n	ca2e <__aeabi_dmul+0x4a>
    cb24:	4653      	mov	r3, sl
    cb26:	4323      	orrs	r3, r4
    cb28:	d12a      	bne.n	cb80 <__aeabi_dmul+0x19c>
    cb2a:	2400      	movs	r4, #0
    cb2c:	2002      	movs	r0, #2
    cb2e:	e796      	b.n	ca5e <__aeabi_dmul+0x7a>
    cb30:	4653      	mov	r3, sl
    cb32:	4323      	orrs	r3, r4
    cb34:	d020      	beq.n	cb78 <__aeabi_dmul+0x194>
    cb36:	2c00      	cmp	r4, #0
    cb38:	d100      	bne.n	cb3c <__aeabi_dmul+0x158>
    cb3a:	e157      	b.n	cdec <__aeabi_dmul+0x408>
    cb3c:	0020      	movs	r0, r4
    cb3e:	f000 fe07 	bl	d750 <__clzsi2>
    cb42:	0003      	movs	r3, r0
    cb44:	3b0b      	subs	r3, #11
    cb46:	2b1c      	cmp	r3, #28
    cb48:	dd00      	ble.n	cb4c <__aeabi_dmul+0x168>
    cb4a:	e149      	b.n	cde0 <__aeabi_dmul+0x3fc>
    cb4c:	211d      	movs	r1, #29
    cb4e:	1acb      	subs	r3, r1, r3
    cb50:	4651      	mov	r1, sl
    cb52:	0002      	movs	r2, r0
    cb54:	40d9      	lsrs	r1, r3
    cb56:	4653      	mov	r3, sl
    cb58:	3a08      	subs	r2, #8
    cb5a:	4094      	lsls	r4, r2
    cb5c:	4093      	lsls	r3, r2
    cb5e:	430c      	orrs	r4, r1
    cb60:	4a1b      	ldr	r2, [pc, #108]	; (cbd0 <__aeabi_dmul+0x1ec>)
    cb62:	1a12      	subs	r2, r2, r0
    cb64:	2000      	movs	r0, #0
    cb66:	e77a      	b.n	ca5e <__aeabi_dmul+0x7a>
    cb68:	2501      	movs	r5, #1
    cb6a:	9b01      	ldr	r3, [sp, #4]
    cb6c:	4c14      	ldr	r4, [pc, #80]	; (cbc0 <__aeabi_dmul+0x1dc>)
    cb6e:	401d      	ands	r5, r3
    cb70:	2300      	movs	r3, #0
    cb72:	2200      	movs	r2, #0
    cb74:	4699      	mov	r9, r3
    cb76:	e79c      	b.n	cab2 <__aeabi_dmul+0xce>
    cb78:	2400      	movs	r4, #0
    cb7a:	2200      	movs	r2, #0
    cb7c:	2001      	movs	r0, #1
    cb7e:	e76e      	b.n	ca5e <__aeabi_dmul+0x7a>
    cb80:	4653      	mov	r3, sl
    cb82:	2003      	movs	r0, #3
    cb84:	e76b      	b.n	ca5e <__aeabi_dmul+0x7a>
    cb86:	2300      	movs	r3, #0
    cb88:	469b      	mov	fp, r3
    cb8a:	3301      	adds	r3, #1
    cb8c:	2704      	movs	r7, #4
    cb8e:	2600      	movs	r6, #0
    cb90:	9302      	str	r3, [sp, #8]
    cb92:	e74c      	b.n	ca2e <__aeabi_dmul+0x4a>
    cb94:	2303      	movs	r3, #3
    cb96:	4681      	mov	r9, r0
    cb98:	270c      	movs	r7, #12
    cb9a:	9302      	str	r3, [sp, #8]
    cb9c:	e747      	b.n	ca2e <__aeabi_dmul+0x4a>
    cb9e:	2280      	movs	r2, #128	; 0x80
    cba0:	2300      	movs	r3, #0
    cba2:	2500      	movs	r5, #0
    cba4:	0312      	lsls	r2, r2, #12
    cba6:	4699      	mov	r9, r3
    cba8:	4c05      	ldr	r4, [pc, #20]	; (cbc0 <__aeabi_dmul+0x1dc>)
    cbaa:	e782      	b.n	cab2 <__aeabi_dmul+0xce>
    cbac:	465c      	mov	r4, fp
    cbae:	464b      	mov	r3, r9
    cbb0:	9802      	ldr	r0, [sp, #8]
    cbb2:	e76f      	b.n	ca94 <__aeabi_dmul+0xb0>
    cbb4:	465c      	mov	r4, fp
    cbb6:	464b      	mov	r3, r9
    cbb8:	9501      	str	r5, [sp, #4]
    cbba:	9802      	ldr	r0, [sp, #8]
    cbbc:	e76a      	b.n	ca94 <__aeabi_dmul+0xb0>
    cbbe:	46c0      	nop			; (mov r8, r8)
    cbc0:	000007ff 	.word	0x000007ff
    cbc4:	fffffc01 	.word	0xfffffc01
    cbc8:	0000ed08 	.word	0x0000ed08
    cbcc:	800fffff 	.word	0x800fffff
    cbd0:	fffffc0d 	.word	0xfffffc0d
    cbd4:	464a      	mov	r2, r9
    cbd6:	4649      	mov	r1, r9
    cbd8:	0c17      	lsrs	r7, r2, #16
    cbda:	0c1a      	lsrs	r2, r3, #16
    cbdc:	041b      	lsls	r3, r3, #16
    cbde:	0c1b      	lsrs	r3, r3, #16
    cbe0:	0408      	lsls	r0, r1, #16
    cbe2:	0019      	movs	r1, r3
    cbe4:	0c00      	lsrs	r0, r0, #16
    cbe6:	4341      	muls	r1, r0
    cbe8:	0015      	movs	r5, r2
    cbea:	4688      	mov	r8, r1
    cbec:	0019      	movs	r1, r3
    cbee:	437d      	muls	r5, r7
    cbf0:	4379      	muls	r1, r7
    cbf2:	9503      	str	r5, [sp, #12]
    cbf4:	4689      	mov	r9, r1
    cbf6:	0029      	movs	r1, r5
    cbf8:	0015      	movs	r5, r2
    cbfa:	4345      	muls	r5, r0
    cbfc:	444d      	add	r5, r9
    cbfe:	9502      	str	r5, [sp, #8]
    cc00:	4645      	mov	r5, r8
    cc02:	0c2d      	lsrs	r5, r5, #16
    cc04:	46aa      	mov	sl, r5
    cc06:	9d02      	ldr	r5, [sp, #8]
    cc08:	4455      	add	r5, sl
    cc0a:	45a9      	cmp	r9, r5
    cc0c:	d906      	bls.n	cc1c <__aeabi_dmul+0x238>
    cc0e:	468a      	mov	sl, r1
    cc10:	2180      	movs	r1, #128	; 0x80
    cc12:	0249      	lsls	r1, r1, #9
    cc14:	4689      	mov	r9, r1
    cc16:	44ca      	add	sl, r9
    cc18:	4651      	mov	r1, sl
    cc1a:	9103      	str	r1, [sp, #12]
    cc1c:	0c29      	lsrs	r1, r5, #16
    cc1e:	9104      	str	r1, [sp, #16]
    cc20:	4641      	mov	r1, r8
    cc22:	0409      	lsls	r1, r1, #16
    cc24:	042d      	lsls	r5, r5, #16
    cc26:	0c09      	lsrs	r1, r1, #16
    cc28:	4688      	mov	r8, r1
    cc2a:	0029      	movs	r1, r5
    cc2c:	0c25      	lsrs	r5, r4, #16
    cc2e:	0424      	lsls	r4, r4, #16
    cc30:	4441      	add	r1, r8
    cc32:	0c24      	lsrs	r4, r4, #16
    cc34:	9105      	str	r1, [sp, #20]
    cc36:	0021      	movs	r1, r4
    cc38:	4341      	muls	r1, r0
    cc3a:	4688      	mov	r8, r1
    cc3c:	0021      	movs	r1, r4
    cc3e:	4379      	muls	r1, r7
    cc40:	468a      	mov	sl, r1
    cc42:	4368      	muls	r0, r5
    cc44:	4641      	mov	r1, r8
    cc46:	4450      	add	r0, sl
    cc48:	4681      	mov	r9, r0
    cc4a:	0c08      	lsrs	r0, r1, #16
    cc4c:	4448      	add	r0, r9
    cc4e:	436f      	muls	r7, r5
    cc50:	4582      	cmp	sl, r0
    cc52:	d903      	bls.n	cc5c <__aeabi_dmul+0x278>
    cc54:	2180      	movs	r1, #128	; 0x80
    cc56:	0249      	lsls	r1, r1, #9
    cc58:	4689      	mov	r9, r1
    cc5a:	444f      	add	r7, r9
    cc5c:	0c01      	lsrs	r1, r0, #16
    cc5e:	4689      	mov	r9, r1
    cc60:	0039      	movs	r1, r7
    cc62:	4449      	add	r1, r9
    cc64:	9102      	str	r1, [sp, #8]
    cc66:	4641      	mov	r1, r8
    cc68:	040f      	lsls	r7, r1, #16
    cc6a:	9904      	ldr	r1, [sp, #16]
    cc6c:	0c3f      	lsrs	r7, r7, #16
    cc6e:	4688      	mov	r8, r1
    cc70:	0400      	lsls	r0, r0, #16
    cc72:	19c0      	adds	r0, r0, r7
    cc74:	4480      	add	r8, r0
    cc76:	4641      	mov	r1, r8
    cc78:	9104      	str	r1, [sp, #16]
    cc7a:	4659      	mov	r1, fp
    cc7c:	0c0f      	lsrs	r7, r1, #16
    cc7e:	0409      	lsls	r1, r1, #16
    cc80:	0c09      	lsrs	r1, r1, #16
    cc82:	4688      	mov	r8, r1
    cc84:	4359      	muls	r1, r3
    cc86:	468a      	mov	sl, r1
    cc88:	0039      	movs	r1, r7
    cc8a:	4351      	muls	r1, r2
    cc8c:	4689      	mov	r9, r1
    cc8e:	4641      	mov	r1, r8
    cc90:	434a      	muls	r2, r1
    cc92:	4651      	mov	r1, sl
    cc94:	0c09      	lsrs	r1, r1, #16
    cc96:	468b      	mov	fp, r1
    cc98:	437b      	muls	r3, r7
    cc9a:	18d2      	adds	r2, r2, r3
    cc9c:	445a      	add	r2, fp
    cc9e:	4293      	cmp	r3, r2
    cca0:	d903      	bls.n	ccaa <__aeabi_dmul+0x2c6>
    cca2:	2380      	movs	r3, #128	; 0x80
    cca4:	025b      	lsls	r3, r3, #9
    cca6:	469b      	mov	fp, r3
    cca8:	44d9      	add	r9, fp
    ccaa:	4651      	mov	r1, sl
    ccac:	0409      	lsls	r1, r1, #16
    ccae:	0c09      	lsrs	r1, r1, #16
    ccb0:	468a      	mov	sl, r1
    ccb2:	4641      	mov	r1, r8
    ccb4:	4361      	muls	r1, r4
    ccb6:	437c      	muls	r4, r7
    ccb8:	0c13      	lsrs	r3, r2, #16
    ccba:	0412      	lsls	r2, r2, #16
    ccbc:	444b      	add	r3, r9
    ccbe:	4452      	add	r2, sl
    ccc0:	46a1      	mov	r9, r4
    ccc2:	468a      	mov	sl, r1
    ccc4:	003c      	movs	r4, r7
    ccc6:	4641      	mov	r1, r8
    ccc8:	436c      	muls	r4, r5
    ccca:	434d      	muls	r5, r1
    cccc:	4651      	mov	r1, sl
    ccce:	444d      	add	r5, r9
    ccd0:	0c0f      	lsrs	r7, r1, #16
    ccd2:	197d      	adds	r5, r7, r5
    ccd4:	45a9      	cmp	r9, r5
    ccd6:	d903      	bls.n	cce0 <__aeabi_dmul+0x2fc>
    ccd8:	2180      	movs	r1, #128	; 0x80
    ccda:	0249      	lsls	r1, r1, #9
    ccdc:	4688      	mov	r8, r1
    ccde:	4444      	add	r4, r8
    cce0:	9f04      	ldr	r7, [sp, #16]
    cce2:	9903      	ldr	r1, [sp, #12]
    cce4:	46b8      	mov	r8, r7
    cce6:	4441      	add	r1, r8
    cce8:	468b      	mov	fp, r1
    ccea:	4583      	cmp	fp, r0
    ccec:	4180      	sbcs	r0, r0
    ccee:	4241      	negs	r1, r0
    ccf0:	4688      	mov	r8, r1
    ccf2:	4651      	mov	r1, sl
    ccf4:	0408      	lsls	r0, r1, #16
    ccf6:	042f      	lsls	r7, r5, #16
    ccf8:	0c00      	lsrs	r0, r0, #16
    ccfa:	183f      	adds	r7, r7, r0
    ccfc:	4658      	mov	r0, fp
    ccfe:	9902      	ldr	r1, [sp, #8]
    cd00:	1810      	adds	r0, r2, r0
    cd02:	4689      	mov	r9, r1
    cd04:	4290      	cmp	r0, r2
    cd06:	4192      	sbcs	r2, r2
    cd08:	444f      	add	r7, r9
    cd0a:	46ba      	mov	sl, r7
    cd0c:	4252      	negs	r2, r2
    cd0e:	4699      	mov	r9, r3
    cd10:	4693      	mov	fp, r2
    cd12:	44c2      	add	sl, r8
    cd14:	44d1      	add	r9, sl
    cd16:	44cb      	add	fp, r9
    cd18:	428f      	cmp	r7, r1
    cd1a:	41bf      	sbcs	r7, r7
    cd1c:	45c2      	cmp	sl, r8
    cd1e:	4189      	sbcs	r1, r1
    cd20:	4599      	cmp	r9, r3
    cd22:	419b      	sbcs	r3, r3
    cd24:	4593      	cmp	fp, r2
    cd26:	4192      	sbcs	r2, r2
    cd28:	427f      	negs	r7, r7
    cd2a:	4249      	negs	r1, r1
    cd2c:	0c2d      	lsrs	r5, r5, #16
    cd2e:	4252      	negs	r2, r2
    cd30:	430f      	orrs	r7, r1
    cd32:	425b      	negs	r3, r3
    cd34:	4313      	orrs	r3, r2
    cd36:	197f      	adds	r7, r7, r5
    cd38:	18ff      	adds	r7, r7, r3
    cd3a:	465b      	mov	r3, fp
    cd3c:	193c      	adds	r4, r7, r4
    cd3e:	0ddb      	lsrs	r3, r3, #23
    cd40:	9a05      	ldr	r2, [sp, #20]
    cd42:	0264      	lsls	r4, r4, #9
    cd44:	431c      	orrs	r4, r3
    cd46:	0243      	lsls	r3, r0, #9
    cd48:	4313      	orrs	r3, r2
    cd4a:	1e5d      	subs	r5, r3, #1
    cd4c:	41ab      	sbcs	r3, r5
    cd4e:	465a      	mov	r2, fp
    cd50:	0dc0      	lsrs	r0, r0, #23
    cd52:	4303      	orrs	r3, r0
    cd54:	0252      	lsls	r2, r2, #9
    cd56:	4313      	orrs	r3, r2
    cd58:	01e2      	lsls	r2, r4, #7
    cd5a:	d556      	bpl.n	ce0a <__aeabi_dmul+0x426>
    cd5c:	2001      	movs	r0, #1
    cd5e:	085a      	lsrs	r2, r3, #1
    cd60:	4003      	ands	r3, r0
    cd62:	4313      	orrs	r3, r2
    cd64:	07e2      	lsls	r2, r4, #31
    cd66:	4313      	orrs	r3, r2
    cd68:	0864      	lsrs	r4, r4, #1
    cd6a:	485a      	ldr	r0, [pc, #360]	; (ced4 <__aeabi_dmul+0x4f0>)
    cd6c:	4460      	add	r0, ip
    cd6e:	2800      	cmp	r0, #0
    cd70:	dd4d      	ble.n	ce0e <__aeabi_dmul+0x42a>
    cd72:	075a      	lsls	r2, r3, #29
    cd74:	d009      	beq.n	cd8a <__aeabi_dmul+0x3a6>
    cd76:	220f      	movs	r2, #15
    cd78:	401a      	ands	r2, r3
    cd7a:	2a04      	cmp	r2, #4
    cd7c:	d005      	beq.n	cd8a <__aeabi_dmul+0x3a6>
    cd7e:	1d1a      	adds	r2, r3, #4
    cd80:	429a      	cmp	r2, r3
    cd82:	419b      	sbcs	r3, r3
    cd84:	425b      	negs	r3, r3
    cd86:	18e4      	adds	r4, r4, r3
    cd88:	0013      	movs	r3, r2
    cd8a:	01e2      	lsls	r2, r4, #7
    cd8c:	d504      	bpl.n	cd98 <__aeabi_dmul+0x3b4>
    cd8e:	2080      	movs	r0, #128	; 0x80
    cd90:	4a51      	ldr	r2, [pc, #324]	; (ced8 <__aeabi_dmul+0x4f4>)
    cd92:	00c0      	lsls	r0, r0, #3
    cd94:	4014      	ands	r4, r2
    cd96:	4460      	add	r0, ip
    cd98:	4a50      	ldr	r2, [pc, #320]	; (cedc <__aeabi_dmul+0x4f8>)
    cd9a:	4290      	cmp	r0, r2
    cd9c:	dd00      	ble.n	cda0 <__aeabi_dmul+0x3bc>
    cd9e:	e6e3      	b.n	cb68 <__aeabi_dmul+0x184>
    cda0:	2501      	movs	r5, #1
    cda2:	08db      	lsrs	r3, r3, #3
    cda4:	0762      	lsls	r2, r4, #29
    cda6:	431a      	orrs	r2, r3
    cda8:	0264      	lsls	r4, r4, #9
    cdaa:	9b01      	ldr	r3, [sp, #4]
    cdac:	4691      	mov	r9, r2
    cdae:	0b22      	lsrs	r2, r4, #12
    cdb0:	0544      	lsls	r4, r0, #21
    cdb2:	0d64      	lsrs	r4, r4, #21
    cdb4:	401d      	ands	r5, r3
    cdb6:	e67c      	b.n	cab2 <__aeabi_dmul+0xce>
    cdb8:	2280      	movs	r2, #128	; 0x80
    cdba:	4659      	mov	r1, fp
    cdbc:	0312      	lsls	r2, r2, #12
    cdbe:	4211      	tst	r1, r2
    cdc0:	d008      	beq.n	cdd4 <__aeabi_dmul+0x3f0>
    cdc2:	4214      	tst	r4, r2
    cdc4:	d106      	bne.n	cdd4 <__aeabi_dmul+0x3f0>
    cdc6:	4322      	orrs	r2, r4
    cdc8:	0312      	lsls	r2, r2, #12
    cdca:	0b12      	lsrs	r2, r2, #12
    cdcc:	4645      	mov	r5, r8
    cdce:	4699      	mov	r9, r3
    cdd0:	4c43      	ldr	r4, [pc, #268]	; (cee0 <__aeabi_dmul+0x4fc>)
    cdd2:	e66e      	b.n	cab2 <__aeabi_dmul+0xce>
    cdd4:	465b      	mov	r3, fp
    cdd6:	431a      	orrs	r2, r3
    cdd8:	0312      	lsls	r2, r2, #12
    cdda:	0b12      	lsrs	r2, r2, #12
    cddc:	4c40      	ldr	r4, [pc, #256]	; (cee0 <__aeabi_dmul+0x4fc>)
    cdde:	e668      	b.n	cab2 <__aeabi_dmul+0xce>
    cde0:	0003      	movs	r3, r0
    cde2:	4654      	mov	r4, sl
    cde4:	3b28      	subs	r3, #40	; 0x28
    cde6:	409c      	lsls	r4, r3
    cde8:	2300      	movs	r3, #0
    cdea:	e6b9      	b.n	cb60 <__aeabi_dmul+0x17c>
    cdec:	f000 fcb0 	bl	d750 <__clzsi2>
    cdf0:	3020      	adds	r0, #32
    cdf2:	e6a6      	b.n	cb42 <__aeabi_dmul+0x15e>
    cdf4:	0003      	movs	r3, r0
    cdf6:	3b28      	subs	r3, #40	; 0x28
    cdf8:	409f      	lsls	r7, r3
    cdfa:	2300      	movs	r3, #0
    cdfc:	46bb      	mov	fp, r7
    cdfe:	4699      	mov	r9, r3
    ce00:	e68a      	b.n	cb18 <__aeabi_dmul+0x134>
    ce02:	f000 fca5 	bl	d750 <__clzsi2>
    ce06:	3020      	adds	r0, #32
    ce08:	e674      	b.n	caf4 <__aeabi_dmul+0x110>
    ce0a:	46b4      	mov	ip, r6
    ce0c:	e7ad      	b.n	cd6a <__aeabi_dmul+0x386>
    ce0e:	2501      	movs	r5, #1
    ce10:	1a2a      	subs	r2, r5, r0
    ce12:	2a38      	cmp	r2, #56	; 0x38
    ce14:	dd06      	ble.n	ce24 <__aeabi_dmul+0x440>
    ce16:	9b01      	ldr	r3, [sp, #4]
    ce18:	2400      	movs	r4, #0
    ce1a:	401d      	ands	r5, r3
    ce1c:	2300      	movs	r3, #0
    ce1e:	2200      	movs	r2, #0
    ce20:	4699      	mov	r9, r3
    ce22:	e646      	b.n	cab2 <__aeabi_dmul+0xce>
    ce24:	2a1f      	cmp	r2, #31
    ce26:	dc21      	bgt.n	ce6c <__aeabi_dmul+0x488>
    ce28:	2520      	movs	r5, #32
    ce2a:	0020      	movs	r0, r4
    ce2c:	1aad      	subs	r5, r5, r2
    ce2e:	001e      	movs	r6, r3
    ce30:	40ab      	lsls	r3, r5
    ce32:	40a8      	lsls	r0, r5
    ce34:	40d6      	lsrs	r6, r2
    ce36:	1e5d      	subs	r5, r3, #1
    ce38:	41ab      	sbcs	r3, r5
    ce3a:	4330      	orrs	r0, r6
    ce3c:	4318      	orrs	r0, r3
    ce3e:	40d4      	lsrs	r4, r2
    ce40:	0743      	lsls	r3, r0, #29
    ce42:	d009      	beq.n	ce58 <__aeabi_dmul+0x474>
    ce44:	230f      	movs	r3, #15
    ce46:	4003      	ands	r3, r0
    ce48:	2b04      	cmp	r3, #4
    ce4a:	d005      	beq.n	ce58 <__aeabi_dmul+0x474>
    ce4c:	0003      	movs	r3, r0
    ce4e:	1d18      	adds	r0, r3, #4
    ce50:	4298      	cmp	r0, r3
    ce52:	419b      	sbcs	r3, r3
    ce54:	425b      	negs	r3, r3
    ce56:	18e4      	adds	r4, r4, r3
    ce58:	0223      	lsls	r3, r4, #8
    ce5a:	d521      	bpl.n	cea0 <__aeabi_dmul+0x4bc>
    ce5c:	2501      	movs	r5, #1
    ce5e:	9b01      	ldr	r3, [sp, #4]
    ce60:	2401      	movs	r4, #1
    ce62:	401d      	ands	r5, r3
    ce64:	2300      	movs	r3, #0
    ce66:	2200      	movs	r2, #0
    ce68:	4699      	mov	r9, r3
    ce6a:	e622      	b.n	cab2 <__aeabi_dmul+0xce>
    ce6c:	251f      	movs	r5, #31
    ce6e:	0021      	movs	r1, r4
    ce70:	426d      	negs	r5, r5
    ce72:	1a28      	subs	r0, r5, r0
    ce74:	40c1      	lsrs	r1, r0
    ce76:	0008      	movs	r0, r1
    ce78:	2a20      	cmp	r2, #32
    ce7a:	d01d      	beq.n	ceb8 <__aeabi_dmul+0x4d4>
    ce7c:	355f      	adds	r5, #95	; 0x5f
    ce7e:	1aaa      	subs	r2, r5, r2
    ce80:	4094      	lsls	r4, r2
    ce82:	4323      	orrs	r3, r4
    ce84:	1e5c      	subs	r4, r3, #1
    ce86:	41a3      	sbcs	r3, r4
    ce88:	2507      	movs	r5, #7
    ce8a:	4303      	orrs	r3, r0
    ce8c:	401d      	ands	r5, r3
    ce8e:	2200      	movs	r2, #0
    ce90:	2d00      	cmp	r5, #0
    ce92:	d009      	beq.n	cea8 <__aeabi_dmul+0x4c4>
    ce94:	220f      	movs	r2, #15
    ce96:	2400      	movs	r4, #0
    ce98:	401a      	ands	r2, r3
    ce9a:	0018      	movs	r0, r3
    ce9c:	2a04      	cmp	r2, #4
    ce9e:	d1d6      	bne.n	ce4e <__aeabi_dmul+0x46a>
    cea0:	0003      	movs	r3, r0
    cea2:	0765      	lsls	r5, r4, #29
    cea4:	0264      	lsls	r4, r4, #9
    cea6:	0b22      	lsrs	r2, r4, #12
    cea8:	08db      	lsrs	r3, r3, #3
    ceaa:	432b      	orrs	r3, r5
    ceac:	2501      	movs	r5, #1
    ceae:	4699      	mov	r9, r3
    ceb0:	9b01      	ldr	r3, [sp, #4]
    ceb2:	2400      	movs	r4, #0
    ceb4:	401d      	ands	r5, r3
    ceb6:	e5fc      	b.n	cab2 <__aeabi_dmul+0xce>
    ceb8:	2400      	movs	r4, #0
    ceba:	e7e2      	b.n	ce82 <__aeabi_dmul+0x49e>
    cebc:	2280      	movs	r2, #128	; 0x80
    cebe:	2501      	movs	r5, #1
    cec0:	0312      	lsls	r2, r2, #12
    cec2:	4322      	orrs	r2, r4
    cec4:	9901      	ldr	r1, [sp, #4]
    cec6:	0312      	lsls	r2, r2, #12
    cec8:	0b12      	lsrs	r2, r2, #12
    ceca:	400d      	ands	r5, r1
    cecc:	4699      	mov	r9, r3
    cece:	4c04      	ldr	r4, [pc, #16]	; (cee0 <__aeabi_dmul+0x4fc>)
    ced0:	e5ef      	b.n	cab2 <__aeabi_dmul+0xce>
    ced2:	46c0      	nop			; (mov r8, r8)
    ced4:	000003ff 	.word	0x000003ff
    ced8:	feffffff 	.word	0xfeffffff
    cedc:	000007fe 	.word	0x000007fe
    cee0:	000007ff 	.word	0x000007ff

0000cee4 <__aeabi_dsub>:
    cee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cee6:	4646      	mov	r6, r8
    cee8:	46d6      	mov	lr, sl
    ceea:	464f      	mov	r7, r9
    ceec:	030c      	lsls	r4, r1, #12
    ceee:	b5c0      	push	{r6, r7, lr}
    cef0:	0fcd      	lsrs	r5, r1, #31
    cef2:	004e      	lsls	r6, r1, #1
    cef4:	0a61      	lsrs	r1, r4, #9
    cef6:	0f44      	lsrs	r4, r0, #29
    cef8:	430c      	orrs	r4, r1
    cefa:	00c1      	lsls	r1, r0, #3
    cefc:	0058      	lsls	r0, r3, #1
    cefe:	0d40      	lsrs	r0, r0, #21
    cf00:	4684      	mov	ip, r0
    cf02:	468a      	mov	sl, r1
    cf04:	000f      	movs	r7, r1
    cf06:	0319      	lsls	r1, r3, #12
    cf08:	0f50      	lsrs	r0, r2, #29
    cf0a:	0a49      	lsrs	r1, r1, #9
    cf0c:	4301      	orrs	r1, r0
    cf0e:	48c6      	ldr	r0, [pc, #792]	; (d228 <__aeabi_dsub+0x344>)
    cf10:	0d76      	lsrs	r6, r6, #21
    cf12:	46a8      	mov	r8, r5
    cf14:	0fdb      	lsrs	r3, r3, #31
    cf16:	00d2      	lsls	r2, r2, #3
    cf18:	4584      	cmp	ip, r0
    cf1a:	d100      	bne.n	cf1e <__aeabi_dsub+0x3a>
    cf1c:	e0d8      	b.n	d0d0 <__aeabi_dsub+0x1ec>
    cf1e:	2001      	movs	r0, #1
    cf20:	4043      	eors	r3, r0
    cf22:	42ab      	cmp	r3, r5
    cf24:	d100      	bne.n	cf28 <__aeabi_dsub+0x44>
    cf26:	e0a6      	b.n	d076 <__aeabi_dsub+0x192>
    cf28:	4660      	mov	r0, ip
    cf2a:	1a35      	subs	r5, r6, r0
    cf2c:	2d00      	cmp	r5, #0
    cf2e:	dc00      	bgt.n	cf32 <__aeabi_dsub+0x4e>
    cf30:	e105      	b.n	d13e <__aeabi_dsub+0x25a>
    cf32:	2800      	cmp	r0, #0
    cf34:	d110      	bne.n	cf58 <__aeabi_dsub+0x74>
    cf36:	000b      	movs	r3, r1
    cf38:	4313      	orrs	r3, r2
    cf3a:	d100      	bne.n	cf3e <__aeabi_dsub+0x5a>
    cf3c:	e0d7      	b.n	d0ee <__aeabi_dsub+0x20a>
    cf3e:	1e6b      	subs	r3, r5, #1
    cf40:	2b00      	cmp	r3, #0
    cf42:	d000      	beq.n	cf46 <__aeabi_dsub+0x62>
    cf44:	e14b      	b.n	d1de <__aeabi_dsub+0x2fa>
    cf46:	4653      	mov	r3, sl
    cf48:	1a9f      	subs	r7, r3, r2
    cf4a:	45ba      	cmp	sl, r7
    cf4c:	4180      	sbcs	r0, r0
    cf4e:	1a64      	subs	r4, r4, r1
    cf50:	4240      	negs	r0, r0
    cf52:	1a24      	subs	r4, r4, r0
    cf54:	2601      	movs	r6, #1
    cf56:	e01e      	b.n	cf96 <__aeabi_dsub+0xb2>
    cf58:	4bb3      	ldr	r3, [pc, #716]	; (d228 <__aeabi_dsub+0x344>)
    cf5a:	429e      	cmp	r6, r3
    cf5c:	d048      	beq.n	cff0 <__aeabi_dsub+0x10c>
    cf5e:	2380      	movs	r3, #128	; 0x80
    cf60:	041b      	lsls	r3, r3, #16
    cf62:	4319      	orrs	r1, r3
    cf64:	2d38      	cmp	r5, #56	; 0x38
    cf66:	dd00      	ble.n	cf6a <__aeabi_dsub+0x86>
    cf68:	e119      	b.n	d19e <__aeabi_dsub+0x2ba>
    cf6a:	2d1f      	cmp	r5, #31
    cf6c:	dd00      	ble.n	cf70 <__aeabi_dsub+0x8c>
    cf6e:	e14c      	b.n	d20a <__aeabi_dsub+0x326>
    cf70:	2320      	movs	r3, #32
    cf72:	000f      	movs	r7, r1
    cf74:	1b5b      	subs	r3, r3, r5
    cf76:	0010      	movs	r0, r2
    cf78:	409a      	lsls	r2, r3
    cf7a:	409f      	lsls	r7, r3
    cf7c:	40e8      	lsrs	r0, r5
    cf7e:	1e53      	subs	r3, r2, #1
    cf80:	419a      	sbcs	r2, r3
    cf82:	40e9      	lsrs	r1, r5
    cf84:	4307      	orrs	r7, r0
    cf86:	4317      	orrs	r7, r2
    cf88:	4653      	mov	r3, sl
    cf8a:	1bdf      	subs	r7, r3, r7
    cf8c:	1a61      	subs	r1, r4, r1
    cf8e:	45ba      	cmp	sl, r7
    cf90:	41a4      	sbcs	r4, r4
    cf92:	4264      	negs	r4, r4
    cf94:	1b0c      	subs	r4, r1, r4
    cf96:	0223      	lsls	r3, r4, #8
    cf98:	d400      	bmi.n	cf9c <__aeabi_dsub+0xb8>
    cf9a:	e0c5      	b.n	d128 <__aeabi_dsub+0x244>
    cf9c:	0264      	lsls	r4, r4, #9
    cf9e:	0a65      	lsrs	r5, r4, #9
    cfa0:	2d00      	cmp	r5, #0
    cfa2:	d100      	bne.n	cfa6 <__aeabi_dsub+0xc2>
    cfa4:	e0f6      	b.n	d194 <__aeabi_dsub+0x2b0>
    cfa6:	0028      	movs	r0, r5
    cfa8:	f000 fbd2 	bl	d750 <__clzsi2>
    cfac:	0003      	movs	r3, r0
    cfae:	3b08      	subs	r3, #8
    cfb0:	2b1f      	cmp	r3, #31
    cfb2:	dd00      	ble.n	cfb6 <__aeabi_dsub+0xd2>
    cfb4:	e0e9      	b.n	d18a <__aeabi_dsub+0x2a6>
    cfb6:	2220      	movs	r2, #32
    cfb8:	003c      	movs	r4, r7
    cfba:	1ad2      	subs	r2, r2, r3
    cfbc:	409d      	lsls	r5, r3
    cfbe:	40d4      	lsrs	r4, r2
    cfc0:	409f      	lsls	r7, r3
    cfc2:	4325      	orrs	r5, r4
    cfc4:	429e      	cmp	r6, r3
    cfc6:	dd00      	ble.n	cfca <__aeabi_dsub+0xe6>
    cfc8:	e0db      	b.n	d182 <__aeabi_dsub+0x29e>
    cfca:	1b9e      	subs	r6, r3, r6
    cfcc:	1c73      	adds	r3, r6, #1
    cfce:	2b1f      	cmp	r3, #31
    cfd0:	dd00      	ble.n	cfd4 <__aeabi_dsub+0xf0>
    cfd2:	e10a      	b.n	d1ea <__aeabi_dsub+0x306>
    cfd4:	2220      	movs	r2, #32
    cfd6:	0038      	movs	r0, r7
    cfd8:	1ad2      	subs	r2, r2, r3
    cfda:	0029      	movs	r1, r5
    cfdc:	4097      	lsls	r7, r2
    cfde:	002c      	movs	r4, r5
    cfe0:	4091      	lsls	r1, r2
    cfe2:	40d8      	lsrs	r0, r3
    cfe4:	1e7a      	subs	r2, r7, #1
    cfe6:	4197      	sbcs	r7, r2
    cfe8:	40dc      	lsrs	r4, r3
    cfea:	2600      	movs	r6, #0
    cfec:	4301      	orrs	r1, r0
    cfee:	430f      	orrs	r7, r1
    cff0:	077b      	lsls	r3, r7, #29
    cff2:	d009      	beq.n	d008 <__aeabi_dsub+0x124>
    cff4:	230f      	movs	r3, #15
    cff6:	403b      	ands	r3, r7
    cff8:	2b04      	cmp	r3, #4
    cffa:	d005      	beq.n	d008 <__aeabi_dsub+0x124>
    cffc:	1d3b      	adds	r3, r7, #4
    cffe:	42bb      	cmp	r3, r7
    d000:	41bf      	sbcs	r7, r7
    d002:	427f      	negs	r7, r7
    d004:	19e4      	adds	r4, r4, r7
    d006:	001f      	movs	r7, r3
    d008:	0223      	lsls	r3, r4, #8
    d00a:	d525      	bpl.n	d058 <__aeabi_dsub+0x174>
    d00c:	4b86      	ldr	r3, [pc, #536]	; (d228 <__aeabi_dsub+0x344>)
    d00e:	3601      	adds	r6, #1
    d010:	429e      	cmp	r6, r3
    d012:	d100      	bne.n	d016 <__aeabi_dsub+0x132>
    d014:	e0af      	b.n	d176 <__aeabi_dsub+0x292>
    d016:	4b85      	ldr	r3, [pc, #532]	; (d22c <__aeabi_dsub+0x348>)
    d018:	2501      	movs	r5, #1
    d01a:	401c      	ands	r4, r3
    d01c:	4643      	mov	r3, r8
    d01e:	0762      	lsls	r2, r4, #29
    d020:	08ff      	lsrs	r7, r7, #3
    d022:	0264      	lsls	r4, r4, #9
    d024:	0576      	lsls	r6, r6, #21
    d026:	4317      	orrs	r7, r2
    d028:	0b24      	lsrs	r4, r4, #12
    d02a:	0d76      	lsrs	r6, r6, #21
    d02c:	401d      	ands	r5, r3
    d02e:	2100      	movs	r1, #0
    d030:	0324      	lsls	r4, r4, #12
    d032:	0b23      	lsrs	r3, r4, #12
    d034:	0d0c      	lsrs	r4, r1, #20
    d036:	4a7e      	ldr	r2, [pc, #504]	; (d230 <__aeabi_dsub+0x34c>)
    d038:	0524      	lsls	r4, r4, #20
    d03a:	431c      	orrs	r4, r3
    d03c:	4014      	ands	r4, r2
    d03e:	0533      	lsls	r3, r6, #20
    d040:	4323      	orrs	r3, r4
    d042:	005b      	lsls	r3, r3, #1
    d044:	07ed      	lsls	r5, r5, #31
    d046:	085b      	lsrs	r3, r3, #1
    d048:	432b      	orrs	r3, r5
    d04a:	0038      	movs	r0, r7
    d04c:	0019      	movs	r1, r3
    d04e:	bc1c      	pop	{r2, r3, r4}
    d050:	4690      	mov	r8, r2
    d052:	4699      	mov	r9, r3
    d054:	46a2      	mov	sl, r4
    d056:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d058:	2501      	movs	r5, #1
    d05a:	4643      	mov	r3, r8
    d05c:	0762      	lsls	r2, r4, #29
    d05e:	08ff      	lsrs	r7, r7, #3
    d060:	4317      	orrs	r7, r2
    d062:	08e4      	lsrs	r4, r4, #3
    d064:	401d      	ands	r5, r3
    d066:	4b70      	ldr	r3, [pc, #448]	; (d228 <__aeabi_dsub+0x344>)
    d068:	429e      	cmp	r6, r3
    d06a:	d036      	beq.n	d0da <__aeabi_dsub+0x1f6>
    d06c:	0324      	lsls	r4, r4, #12
    d06e:	0576      	lsls	r6, r6, #21
    d070:	0b24      	lsrs	r4, r4, #12
    d072:	0d76      	lsrs	r6, r6, #21
    d074:	e7db      	b.n	d02e <__aeabi_dsub+0x14a>
    d076:	4663      	mov	r3, ip
    d078:	1af3      	subs	r3, r6, r3
    d07a:	2b00      	cmp	r3, #0
    d07c:	dc00      	bgt.n	d080 <__aeabi_dsub+0x19c>
    d07e:	e094      	b.n	d1aa <__aeabi_dsub+0x2c6>
    d080:	4660      	mov	r0, ip
    d082:	2800      	cmp	r0, #0
    d084:	d035      	beq.n	d0f2 <__aeabi_dsub+0x20e>
    d086:	4868      	ldr	r0, [pc, #416]	; (d228 <__aeabi_dsub+0x344>)
    d088:	4286      	cmp	r6, r0
    d08a:	d0b1      	beq.n	cff0 <__aeabi_dsub+0x10c>
    d08c:	2780      	movs	r7, #128	; 0x80
    d08e:	043f      	lsls	r7, r7, #16
    d090:	4339      	orrs	r1, r7
    d092:	2b38      	cmp	r3, #56	; 0x38
    d094:	dc00      	bgt.n	d098 <__aeabi_dsub+0x1b4>
    d096:	e0fd      	b.n	d294 <__aeabi_dsub+0x3b0>
    d098:	430a      	orrs	r2, r1
    d09a:	0017      	movs	r7, r2
    d09c:	2100      	movs	r1, #0
    d09e:	1e7a      	subs	r2, r7, #1
    d0a0:	4197      	sbcs	r7, r2
    d0a2:	4457      	add	r7, sl
    d0a4:	4557      	cmp	r7, sl
    d0a6:	4180      	sbcs	r0, r0
    d0a8:	1909      	adds	r1, r1, r4
    d0aa:	4244      	negs	r4, r0
    d0ac:	190c      	adds	r4, r1, r4
    d0ae:	0223      	lsls	r3, r4, #8
    d0b0:	d53a      	bpl.n	d128 <__aeabi_dsub+0x244>
    d0b2:	4b5d      	ldr	r3, [pc, #372]	; (d228 <__aeabi_dsub+0x344>)
    d0b4:	3601      	adds	r6, #1
    d0b6:	429e      	cmp	r6, r3
    d0b8:	d100      	bne.n	d0bc <__aeabi_dsub+0x1d8>
    d0ba:	e14b      	b.n	d354 <__aeabi_dsub+0x470>
    d0bc:	2201      	movs	r2, #1
    d0be:	4b5b      	ldr	r3, [pc, #364]	; (d22c <__aeabi_dsub+0x348>)
    d0c0:	401c      	ands	r4, r3
    d0c2:	087b      	lsrs	r3, r7, #1
    d0c4:	4017      	ands	r7, r2
    d0c6:	431f      	orrs	r7, r3
    d0c8:	07e2      	lsls	r2, r4, #31
    d0ca:	4317      	orrs	r7, r2
    d0cc:	0864      	lsrs	r4, r4, #1
    d0ce:	e78f      	b.n	cff0 <__aeabi_dsub+0x10c>
    d0d0:	0008      	movs	r0, r1
    d0d2:	4310      	orrs	r0, r2
    d0d4:	d000      	beq.n	d0d8 <__aeabi_dsub+0x1f4>
    d0d6:	e724      	b.n	cf22 <__aeabi_dsub+0x3e>
    d0d8:	e721      	b.n	cf1e <__aeabi_dsub+0x3a>
    d0da:	0023      	movs	r3, r4
    d0dc:	433b      	orrs	r3, r7
    d0de:	d100      	bne.n	d0e2 <__aeabi_dsub+0x1fe>
    d0e0:	e1b9      	b.n	d456 <__aeabi_dsub+0x572>
    d0e2:	2280      	movs	r2, #128	; 0x80
    d0e4:	0312      	lsls	r2, r2, #12
    d0e6:	4314      	orrs	r4, r2
    d0e8:	0324      	lsls	r4, r4, #12
    d0ea:	0b24      	lsrs	r4, r4, #12
    d0ec:	e79f      	b.n	d02e <__aeabi_dsub+0x14a>
    d0ee:	002e      	movs	r6, r5
    d0f0:	e77e      	b.n	cff0 <__aeabi_dsub+0x10c>
    d0f2:	0008      	movs	r0, r1
    d0f4:	4310      	orrs	r0, r2
    d0f6:	d100      	bne.n	d0fa <__aeabi_dsub+0x216>
    d0f8:	e0ca      	b.n	d290 <__aeabi_dsub+0x3ac>
    d0fa:	1e58      	subs	r0, r3, #1
    d0fc:	4684      	mov	ip, r0
    d0fe:	2800      	cmp	r0, #0
    d100:	d000      	beq.n	d104 <__aeabi_dsub+0x220>
    d102:	e0e7      	b.n	d2d4 <__aeabi_dsub+0x3f0>
    d104:	4452      	add	r2, sl
    d106:	4552      	cmp	r2, sl
    d108:	4180      	sbcs	r0, r0
    d10a:	1864      	adds	r4, r4, r1
    d10c:	4240      	negs	r0, r0
    d10e:	1824      	adds	r4, r4, r0
    d110:	0017      	movs	r7, r2
    d112:	2601      	movs	r6, #1
    d114:	0223      	lsls	r3, r4, #8
    d116:	d507      	bpl.n	d128 <__aeabi_dsub+0x244>
    d118:	2602      	movs	r6, #2
    d11a:	e7cf      	b.n	d0bc <__aeabi_dsub+0x1d8>
    d11c:	4664      	mov	r4, ip
    d11e:	432c      	orrs	r4, r5
    d120:	d100      	bne.n	d124 <__aeabi_dsub+0x240>
    d122:	e1b3      	b.n	d48c <__aeabi_dsub+0x5a8>
    d124:	002c      	movs	r4, r5
    d126:	4667      	mov	r7, ip
    d128:	077b      	lsls	r3, r7, #29
    d12a:	d000      	beq.n	d12e <__aeabi_dsub+0x24a>
    d12c:	e762      	b.n	cff4 <__aeabi_dsub+0x110>
    d12e:	0763      	lsls	r3, r4, #29
    d130:	08ff      	lsrs	r7, r7, #3
    d132:	431f      	orrs	r7, r3
    d134:	2501      	movs	r5, #1
    d136:	4643      	mov	r3, r8
    d138:	08e4      	lsrs	r4, r4, #3
    d13a:	401d      	ands	r5, r3
    d13c:	e793      	b.n	d066 <__aeabi_dsub+0x182>
    d13e:	2d00      	cmp	r5, #0
    d140:	d178      	bne.n	d234 <__aeabi_dsub+0x350>
    d142:	1c75      	adds	r5, r6, #1
    d144:	056d      	lsls	r5, r5, #21
    d146:	0d6d      	lsrs	r5, r5, #21
    d148:	2d01      	cmp	r5, #1
    d14a:	dc00      	bgt.n	d14e <__aeabi_dsub+0x26a>
    d14c:	e0f2      	b.n	d334 <__aeabi_dsub+0x450>
    d14e:	4650      	mov	r0, sl
    d150:	1a80      	subs	r0, r0, r2
    d152:	4582      	cmp	sl, r0
    d154:	41bf      	sbcs	r7, r7
    d156:	1a65      	subs	r5, r4, r1
    d158:	427f      	negs	r7, r7
    d15a:	1bed      	subs	r5, r5, r7
    d15c:	4684      	mov	ip, r0
    d15e:	0228      	lsls	r0, r5, #8
    d160:	d400      	bmi.n	d164 <__aeabi_dsub+0x280>
    d162:	e08c      	b.n	d27e <__aeabi_dsub+0x39a>
    d164:	4650      	mov	r0, sl
    d166:	1a17      	subs	r7, r2, r0
    d168:	42ba      	cmp	r2, r7
    d16a:	4192      	sbcs	r2, r2
    d16c:	1b0c      	subs	r4, r1, r4
    d16e:	4255      	negs	r5, r2
    d170:	1b65      	subs	r5, r4, r5
    d172:	4698      	mov	r8, r3
    d174:	e714      	b.n	cfa0 <__aeabi_dsub+0xbc>
    d176:	2501      	movs	r5, #1
    d178:	4643      	mov	r3, r8
    d17a:	2400      	movs	r4, #0
    d17c:	401d      	ands	r5, r3
    d17e:	2700      	movs	r7, #0
    d180:	e755      	b.n	d02e <__aeabi_dsub+0x14a>
    d182:	4c2a      	ldr	r4, [pc, #168]	; (d22c <__aeabi_dsub+0x348>)
    d184:	1af6      	subs	r6, r6, r3
    d186:	402c      	ands	r4, r5
    d188:	e732      	b.n	cff0 <__aeabi_dsub+0x10c>
    d18a:	003d      	movs	r5, r7
    d18c:	3828      	subs	r0, #40	; 0x28
    d18e:	4085      	lsls	r5, r0
    d190:	2700      	movs	r7, #0
    d192:	e717      	b.n	cfc4 <__aeabi_dsub+0xe0>
    d194:	0038      	movs	r0, r7
    d196:	f000 fadb 	bl	d750 <__clzsi2>
    d19a:	3020      	adds	r0, #32
    d19c:	e706      	b.n	cfac <__aeabi_dsub+0xc8>
    d19e:	430a      	orrs	r2, r1
    d1a0:	0017      	movs	r7, r2
    d1a2:	2100      	movs	r1, #0
    d1a4:	1e7a      	subs	r2, r7, #1
    d1a6:	4197      	sbcs	r7, r2
    d1a8:	e6ee      	b.n	cf88 <__aeabi_dsub+0xa4>
    d1aa:	2b00      	cmp	r3, #0
    d1ac:	d000      	beq.n	d1b0 <__aeabi_dsub+0x2cc>
    d1ae:	e0e5      	b.n	d37c <__aeabi_dsub+0x498>
    d1b0:	1c73      	adds	r3, r6, #1
    d1b2:	469c      	mov	ip, r3
    d1b4:	055b      	lsls	r3, r3, #21
    d1b6:	0d5b      	lsrs	r3, r3, #21
    d1b8:	2b01      	cmp	r3, #1
    d1ba:	dc00      	bgt.n	d1be <__aeabi_dsub+0x2da>
    d1bc:	e09f      	b.n	d2fe <__aeabi_dsub+0x41a>
    d1be:	4b1a      	ldr	r3, [pc, #104]	; (d228 <__aeabi_dsub+0x344>)
    d1c0:	459c      	cmp	ip, r3
    d1c2:	d100      	bne.n	d1c6 <__aeabi_dsub+0x2e2>
    d1c4:	e0c5      	b.n	d352 <__aeabi_dsub+0x46e>
    d1c6:	4452      	add	r2, sl
    d1c8:	4552      	cmp	r2, sl
    d1ca:	4180      	sbcs	r0, r0
    d1cc:	1864      	adds	r4, r4, r1
    d1ce:	4240      	negs	r0, r0
    d1d0:	1824      	adds	r4, r4, r0
    d1d2:	07e7      	lsls	r7, r4, #31
    d1d4:	0852      	lsrs	r2, r2, #1
    d1d6:	4317      	orrs	r7, r2
    d1d8:	0864      	lsrs	r4, r4, #1
    d1da:	4666      	mov	r6, ip
    d1dc:	e708      	b.n	cff0 <__aeabi_dsub+0x10c>
    d1de:	4812      	ldr	r0, [pc, #72]	; (d228 <__aeabi_dsub+0x344>)
    d1e0:	4285      	cmp	r5, r0
    d1e2:	d100      	bne.n	d1e6 <__aeabi_dsub+0x302>
    d1e4:	e085      	b.n	d2f2 <__aeabi_dsub+0x40e>
    d1e6:	001d      	movs	r5, r3
    d1e8:	e6bc      	b.n	cf64 <__aeabi_dsub+0x80>
    d1ea:	0029      	movs	r1, r5
    d1ec:	3e1f      	subs	r6, #31
    d1ee:	40f1      	lsrs	r1, r6
    d1f0:	2b20      	cmp	r3, #32
    d1f2:	d100      	bne.n	d1f6 <__aeabi_dsub+0x312>
    d1f4:	e07f      	b.n	d2f6 <__aeabi_dsub+0x412>
    d1f6:	2240      	movs	r2, #64	; 0x40
    d1f8:	1ad3      	subs	r3, r2, r3
    d1fa:	409d      	lsls	r5, r3
    d1fc:	432f      	orrs	r7, r5
    d1fe:	1e7d      	subs	r5, r7, #1
    d200:	41af      	sbcs	r7, r5
    d202:	2400      	movs	r4, #0
    d204:	430f      	orrs	r7, r1
    d206:	2600      	movs	r6, #0
    d208:	e78e      	b.n	d128 <__aeabi_dsub+0x244>
    d20a:	002b      	movs	r3, r5
    d20c:	000f      	movs	r7, r1
    d20e:	3b20      	subs	r3, #32
    d210:	40df      	lsrs	r7, r3
    d212:	2d20      	cmp	r5, #32
    d214:	d071      	beq.n	d2fa <__aeabi_dsub+0x416>
    d216:	2340      	movs	r3, #64	; 0x40
    d218:	1b5d      	subs	r5, r3, r5
    d21a:	40a9      	lsls	r1, r5
    d21c:	430a      	orrs	r2, r1
    d21e:	1e51      	subs	r1, r2, #1
    d220:	418a      	sbcs	r2, r1
    d222:	2100      	movs	r1, #0
    d224:	4317      	orrs	r7, r2
    d226:	e6af      	b.n	cf88 <__aeabi_dsub+0xa4>
    d228:	000007ff 	.word	0x000007ff
    d22c:	ff7fffff 	.word	0xff7fffff
    d230:	800fffff 	.word	0x800fffff
    d234:	2e00      	cmp	r6, #0
    d236:	d03e      	beq.n	d2b6 <__aeabi_dsub+0x3d2>
    d238:	4eb3      	ldr	r6, [pc, #716]	; (d508 <__aeabi_dsub+0x624>)
    d23a:	45b4      	cmp	ip, r6
    d23c:	d045      	beq.n	d2ca <__aeabi_dsub+0x3e6>
    d23e:	2680      	movs	r6, #128	; 0x80
    d240:	0436      	lsls	r6, r6, #16
    d242:	426d      	negs	r5, r5
    d244:	4334      	orrs	r4, r6
    d246:	2d38      	cmp	r5, #56	; 0x38
    d248:	dd00      	ble.n	d24c <__aeabi_dsub+0x368>
    d24a:	e0a8      	b.n	d39e <__aeabi_dsub+0x4ba>
    d24c:	2d1f      	cmp	r5, #31
    d24e:	dd00      	ble.n	d252 <__aeabi_dsub+0x36e>
    d250:	e11f      	b.n	d492 <__aeabi_dsub+0x5ae>
    d252:	2620      	movs	r6, #32
    d254:	0027      	movs	r7, r4
    d256:	4650      	mov	r0, sl
    d258:	1b76      	subs	r6, r6, r5
    d25a:	40b7      	lsls	r7, r6
    d25c:	40e8      	lsrs	r0, r5
    d25e:	4307      	orrs	r7, r0
    d260:	4650      	mov	r0, sl
    d262:	40b0      	lsls	r0, r6
    d264:	1e46      	subs	r6, r0, #1
    d266:	41b0      	sbcs	r0, r6
    d268:	40ec      	lsrs	r4, r5
    d26a:	4338      	orrs	r0, r7
    d26c:	1a17      	subs	r7, r2, r0
    d26e:	42ba      	cmp	r2, r7
    d270:	4192      	sbcs	r2, r2
    d272:	1b0c      	subs	r4, r1, r4
    d274:	4252      	negs	r2, r2
    d276:	1aa4      	subs	r4, r4, r2
    d278:	4666      	mov	r6, ip
    d27a:	4698      	mov	r8, r3
    d27c:	e68b      	b.n	cf96 <__aeabi_dsub+0xb2>
    d27e:	4664      	mov	r4, ip
    d280:	4667      	mov	r7, ip
    d282:	432c      	orrs	r4, r5
    d284:	d000      	beq.n	d288 <__aeabi_dsub+0x3a4>
    d286:	e68b      	b.n	cfa0 <__aeabi_dsub+0xbc>
    d288:	2500      	movs	r5, #0
    d28a:	2600      	movs	r6, #0
    d28c:	2700      	movs	r7, #0
    d28e:	e6ea      	b.n	d066 <__aeabi_dsub+0x182>
    d290:	001e      	movs	r6, r3
    d292:	e6ad      	b.n	cff0 <__aeabi_dsub+0x10c>
    d294:	2b1f      	cmp	r3, #31
    d296:	dc60      	bgt.n	d35a <__aeabi_dsub+0x476>
    d298:	2720      	movs	r7, #32
    d29a:	1af8      	subs	r0, r7, r3
    d29c:	000f      	movs	r7, r1
    d29e:	4684      	mov	ip, r0
    d2a0:	4087      	lsls	r7, r0
    d2a2:	0010      	movs	r0, r2
    d2a4:	40d8      	lsrs	r0, r3
    d2a6:	4307      	orrs	r7, r0
    d2a8:	4660      	mov	r0, ip
    d2aa:	4082      	lsls	r2, r0
    d2ac:	1e50      	subs	r0, r2, #1
    d2ae:	4182      	sbcs	r2, r0
    d2b0:	40d9      	lsrs	r1, r3
    d2b2:	4317      	orrs	r7, r2
    d2b4:	e6f5      	b.n	d0a2 <__aeabi_dsub+0x1be>
    d2b6:	0026      	movs	r6, r4
    d2b8:	4650      	mov	r0, sl
    d2ba:	4306      	orrs	r6, r0
    d2bc:	d005      	beq.n	d2ca <__aeabi_dsub+0x3e6>
    d2be:	43ed      	mvns	r5, r5
    d2c0:	2d00      	cmp	r5, #0
    d2c2:	d0d3      	beq.n	d26c <__aeabi_dsub+0x388>
    d2c4:	4e90      	ldr	r6, [pc, #576]	; (d508 <__aeabi_dsub+0x624>)
    d2c6:	45b4      	cmp	ip, r6
    d2c8:	d1bd      	bne.n	d246 <__aeabi_dsub+0x362>
    d2ca:	000c      	movs	r4, r1
    d2cc:	0017      	movs	r7, r2
    d2ce:	4666      	mov	r6, ip
    d2d0:	4698      	mov	r8, r3
    d2d2:	e68d      	b.n	cff0 <__aeabi_dsub+0x10c>
    d2d4:	488c      	ldr	r0, [pc, #560]	; (d508 <__aeabi_dsub+0x624>)
    d2d6:	4283      	cmp	r3, r0
    d2d8:	d00b      	beq.n	d2f2 <__aeabi_dsub+0x40e>
    d2da:	4663      	mov	r3, ip
    d2dc:	e6d9      	b.n	d092 <__aeabi_dsub+0x1ae>
    d2de:	2d00      	cmp	r5, #0
    d2e0:	d000      	beq.n	d2e4 <__aeabi_dsub+0x400>
    d2e2:	e096      	b.n	d412 <__aeabi_dsub+0x52e>
    d2e4:	0008      	movs	r0, r1
    d2e6:	4310      	orrs	r0, r2
    d2e8:	d100      	bne.n	d2ec <__aeabi_dsub+0x408>
    d2ea:	e0e2      	b.n	d4b2 <__aeabi_dsub+0x5ce>
    d2ec:	000c      	movs	r4, r1
    d2ee:	0017      	movs	r7, r2
    d2f0:	4698      	mov	r8, r3
    d2f2:	4e85      	ldr	r6, [pc, #532]	; (d508 <__aeabi_dsub+0x624>)
    d2f4:	e67c      	b.n	cff0 <__aeabi_dsub+0x10c>
    d2f6:	2500      	movs	r5, #0
    d2f8:	e780      	b.n	d1fc <__aeabi_dsub+0x318>
    d2fa:	2100      	movs	r1, #0
    d2fc:	e78e      	b.n	d21c <__aeabi_dsub+0x338>
    d2fe:	0023      	movs	r3, r4
    d300:	4650      	mov	r0, sl
    d302:	4303      	orrs	r3, r0
    d304:	2e00      	cmp	r6, #0
    d306:	d000      	beq.n	d30a <__aeabi_dsub+0x426>
    d308:	e0a8      	b.n	d45c <__aeabi_dsub+0x578>
    d30a:	2b00      	cmp	r3, #0
    d30c:	d100      	bne.n	d310 <__aeabi_dsub+0x42c>
    d30e:	e0de      	b.n	d4ce <__aeabi_dsub+0x5ea>
    d310:	000b      	movs	r3, r1
    d312:	4313      	orrs	r3, r2
    d314:	d100      	bne.n	d318 <__aeabi_dsub+0x434>
    d316:	e66b      	b.n	cff0 <__aeabi_dsub+0x10c>
    d318:	4452      	add	r2, sl
    d31a:	4552      	cmp	r2, sl
    d31c:	4180      	sbcs	r0, r0
    d31e:	1864      	adds	r4, r4, r1
    d320:	4240      	negs	r0, r0
    d322:	1824      	adds	r4, r4, r0
    d324:	0017      	movs	r7, r2
    d326:	0223      	lsls	r3, r4, #8
    d328:	d400      	bmi.n	d32c <__aeabi_dsub+0x448>
    d32a:	e6fd      	b.n	d128 <__aeabi_dsub+0x244>
    d32c:	4b77      	ldr	r3, [pc, #476]	; (d50c <__aeabi_dsub+0x628>)
    d32e:	4666      	mov	r6, ip
    d330:	401c      	ands	r4, r3
    d332:	e65d      	b.n	cff0 <__aeabi_dsub+0x10c>
    d334:	0025      	movs	r5, r4
    d336:	4650      	mov	r0, sl
    d338:	4305      	orrs	r5, r0
    d33a:	2e00      	cmp	r6, #0
    d33c:	d1cf      	bne.n	d2de <__aeabi_dsub+0x3fa>
    d33e:	2d00      	cmp	r5, #0
    d340:	d14f      	bne.n	d3e2 <__aeabi_dsub+0x4fe>
    d342:	000c      	movs	r4, r1
    d344:	4314      	orrs	r4, r2
    d346:	d100      	bne.n	d34a <__aeabi_dsub+0x466>
    d348:	e0a0      	b.n	d48c <__aeabi_dsub+0x5a8>
    d34a:	000c      	movs	r4, r1
    d34c:	0017      	movs	r7, r2
    d34e:	4698      	mov	r8, r3
    d350:	e64e      	b.n	cff0 <__aeabi_dsub+0x10c>
    d352:	4666      	mov	r6, ip
    d354:	2400      	movs	r4, #0
    d356:	2700      	movs	r7, #0
    d358:	e685      	b.n	d066 <__aeabi_dsub+0x182>
    d35a:	001f      	movs	r7, r3
    d35c:	0008      	movs	r0, r1
    d35e:	3f20      	subs	r7, #32
    d360:	40f8      	lsrs	r0, r7
    d362:	0007      	movs	r7, r0
    d364:	2b20      	cmp	r3, #32
    d366:	d100      	bne.n	d36a <__aeabi_dsub+0x486>
    d368:	e08e      	b.n	d488 <__aeabi_dsub+0x5a4>
    d36a:	2040      	movs	r0, #64	; 0x40
    d36c:	1ac3      	subs	r3, r0, r3
    d36e:	4099      	lsls	r1, r3
    d370:	430a      	orrs	r2, r1
    d372:	1e51      	subs	r1, r2, #1
    d374:	418a      	sbcs	r2, r1
    d376:	2100      	movs	r1, #0
    d378:	4317      	orrs	r7, r2
    d37a:	e692      	b.n	d0a2 <__aeabi_dsub+0x1be>
    d37c:	2e00      	cmp	r6, #0
    d37e:	d114      	bne.n	d3aa <__aeabi_dsub+0x4c6>
    d380:	0026      	movs	r6, r4
    d382:	4650      	mov	r0, sl
    d384:	4306      	orrs	r6, r0
    d386:	d062      	beq.n	d44e <__aeabi_dsub+0x56a>
    d388:	43db      	mvns	r3, r3
    d38a:	2b00      	cmp	r3, #0
    d38c:	d15c      	bne.n	d448 <__aeabi_dsub+0x564>
    d38e:	1887      	adds	r7, r0, r2
    d390:	4297      	cmp	r7, r2
    d392:	4192      	sbcs	r2, r2
    d394:	1864      	adds	r4, r4, r1
    d396:	4252      	negs	r2, r2
    d398:	18a4      	adds	r4, r4, r2
    d39a:	4666      	mov	r6, ip
    d39c:	e687      	b.n	d0ae <__aeabi_dsub+0x1ca>
    d39e:	4650      	mov	r0, sl
    d3a0:	4320      	orrs	r0, r4
    d3a2:	1e44      	subs	r4, r0, #1
    d3a4:	41a0      	sbcs	r0, r4
    d3a6:	2400      	movs	r4, #0
    d3a8:	e760      	b.n	d26c <__aeabi_dsub+0x388>
    d3aa:	4e57      	ldr	r6, [pc, #348]	; (d508 <__aeabi_dsub+0x624>)
    d3ac:	45b4      	cmp	ip, r6
    d3ae:	d04e      	beq.n	d44e <__aeabi_dsub+0x56a>
    d3b0:	2680      	movs	r6, #128	; 0x80
    d3b2:	0436      	lsls	r6, r6, #16
    d3b4:	425b      	negs	r3, r3
    d3b6:	4334      	orrs	r4, r6
    d3b8:	2b38      	cmp	r3, #56	; 0x38
    d3ba:	dd00      	ble.n	d3be <__aeabi_dsub+0x4da>
    d3bc:	e07f      	b.n	d4be <__aeabi_dsub+0x5da>
    d3be:	2b1f      	cmp	r3, #31
    d3c0:	dd00      	ble.n	d3c4 <__aeabi_dsub+0x4e0>
    d3c2:	e08b      	b.n	d4dc <__aeabi_dsub+0x5f8>
    d3c4:	2620      	movs	r6, #32
    d3c6:	0027      	movs	r7, r4
    d3c8:	4650      	mov	r0, sl
    d3ca:	1af6      	subs	r6, r6, r3
    d3cc:	40b7      	lsls	r7, r6
    d3ce:	40d8      	lsrs	r0, r3
    d3d0:	4307      	orrs	r7, r0
    d3d2:	4650      	mov	r0, sl
    d3d4:	40b0      	lsls	r0, r6
    d3d6:	1e46      	subs	r6, r0, #1
    d3d8:	41b0      	sbcs	r0, r6
    d3da:	4307      	orrs	r7, r0
    d3dc:	40dc      	lsrs	r4, r3
    d3de:	18bf      	adds	r7, r7, r2
    d3e0:	e7d6      	b.n	d390 <__aeabi_dsub+0x4ac>
    d3e2:	000d      	movs	r5, r1
    d3e4:	4315      	orrs	r5, r2
    d3e6:	d100      	bne.n	d3ea <__aeabi_dsub+0x506>
    d3e8:	e602      	b.n	cff0 <__aeabi_dsub+0x10c>
    d3ea:	4650      	mov	r0, sl
    d3ec:	1a80      	subs	r0, r0, r2
    d3ee:	4582      	cmp	sl, r0
    d3f0:	41bf      	sbcs	r7, r7
    d3f2:	1a65      	subs	r5, r4, r1
    d3f4:	427f      	negs	r7, r7
    d3f6:	1bed      	subs	r5, r5, r7
    d3f8:	4684      	mov	ip, r0
    d3fa:	0228      	lsls	r0, r5, #8
    d3fc:	d400      	bmi.n	d400 <__aeabi_dsub+0x51c>
    d3fe:	e68d      	b.n	d11c <__aeabi_dsub+0x238>
    d400:	4650      	mov	r0, sl
    d402:	1a17      	subs	r7, r2, r0
    d404:	42ba      	cmp	r2, r7
    d406:	4192      	sbcs	r2, r2
    d408:	1b0c      	subs	r4, r1, r4
    d40a:	4252      	negs	r2, r2
    d40c:	1aa4      	subs	r4, r4, r2
    d40e:	4698      	mov	r8, r3
    d410:	e5ee      	b.n	cff0 <__aeabi_dsub+0x10c>
    d412:	000d      	movs	r5, r1
    d414:	4315      	orrs	r5, r2
    d416:	d100      	bne.n	d41a <__aeabi_dsub+0x536>
    d418:	e76b      	b.n	d2f2 <__aeabi_dsub+0x40e>
    d41a:	4650      	mov	r0, sl
    d41c:	0767      	lsls	r7, r4, #29
    d41e:	08c0      	lsrs	r0, r0, #3
    d420:	4307      	orrs	r7, r0
    d422:	2080      	movs	r0, #128	; 0x80
    d424:	08e4      	lsrs	r4, r4, #3
    d426:	0300      	lsls	r0, r0, #12
    d428:	4204      	tst	r4, r0
    d42a:	d007      	beq.n	d43c <__aeabi_dsub+0x558>
    d42c:	08cd      	lsrs	r5, r1, #3
    d42e:	4205      	tst	r5, r0
    d430:	d104      	bne.n	d43c <__aeabi_dsub+0x558>
    d432:	002c      	movs	r4, r5
    d434:	4698      	mov	r8, r3
    d436:	08d7      	lsrs	r7, r2, #3
    d438:	0749      	lsls	r1, r1, #29
    d43a:	430f      	orrs	r7, r1
    d43c:	0f7b      	lsrs	r3, r7, #29
    d43e:	00e4      	lsls	r4, r4, #3
    d440:	431c      	orrs	r4, r3
    d442:	00ff      	lsls	r7, r7, #3
    d444:	4e30      	ldr	r6, [pc, #192]	; (d508 <__aeabi_dsub+0x624>)
    d446:	e5d3      	b.n	cff0 <__aeabi_dsub+0x10c>
    d448:	4e2f      	ldr	r6, [pc, #188]	; (d508 <__aeabi_dsub+0x624>)
    d44a:	45b4      	cmp	ip, r6
    d44c:	d1b4      	bne.n	d3b8 <__aeabi_dsub+0x4d4>
    d44e:	000c      	movs	r4, r1
    d450:	0017      	movs	r7, r2
    d452:	4666      	mov	r6, ip
    d454:	e5cc      	b.n	cff0 <__aeabi_dsub+0x10c>
    d456:	2700      	movs	r7, #0
    d458:	2400      	movs	r4, #0
    d45a:	e5e8      	b.n	d02e <__aeabi_dsub+0x14a>
    d45c:	2b00      	cmp	r3, #0
    d45e:	d039      	beq.n	d4d4 <__aeabi_dsub+0x5f0>
    d460:	000b      	movs	r3, r1
    d462:	4313      	orrs	r3, r2
    d464:	d100      	bne.n	d468 <__aeabi_dsub+0x584>
    d466:	e744      	b.n	d2f2 <__aeabi_dsub+0x40e>
    d468:	08c0      	lsrs	r0, r0, #3
    d46a:	0767      	lsls	r7, r4, #29
    d46c:	4307      	orrs	r7, r0
    d46e:	2080      	movs	r0, #128	; 0x80
    d470:	08e4      	lsrs	r4, r4, #3
    d472:	0300      	lsls	r0, r0, #12
    d474:	4204      	tst	r4, r0
    d476:	d0e1      	beq.n	d43c <__aeabi_dsub+0x558>
    d478:	08cb      	lsrs	r3, r1, #3
    d47a:	4203      	tst	r3, r0
    d47c:	d1de      	bne.n	d43c <__aeabi_dsub+0x558>
    d47e:	08d7      	lsrs	r7, r2, #3
    d480:	0749      	lsls	r1, r1, #29
    d482:	430f      	orrs	r7, r1
    d484:	001c      	movs	r4, r3
    d486:	e7d9      	b.n	d43c <__aeabi_dsub+0x558>
    d488:	2100      	movs	r1, #0
    d48a:	e771      	b.n	d370 <__aeabi_dsub+0x48c>
    d48c:	2500      	movs	r5, #0
    d48e:	2700      	movs	r7, #0
    d490:	e5e9      	b.n	d066 <__aeabi_dsub+0x182>
    d492:	002e      	movs	r6, r5
    d494:	0027      	movs	r7, r4
    d496:	3e20      	subs	r6, #32
    d498:	40f7      	lsrs	r7, r6
    d49a:	2d20      	cmp	r5, #32
    d49c:	d02f      	beq.n	d4fe <__aeabi_dsub+0x61a>
    d49e:	2640      	movs	r6, #64	; 0x40
    d4a0:	1b75      	subs	r5, r6, r5
    d4a2:	40ac      	lsls	r4, r5
    d4a4:	4650      	mov	r0, sl
    d4a6:	4320      	orrs	r0, r4
    d4a8:	1e44      	subs	r4, r0, #1
    d4aa:	41a0      	sbcs	r0, r4
    d4ac:	2400      	movs	r4, #0
    d4ae:	4338      	orrs	r0, r7
    d4b0:	e6dc      	b.n	d26c <__aeabi_dsub+0x388>
    d4b2:	2480      	movs	r4, #128	; 0x80
    d4b4:	2500      	movs	r5, #0
    d4b6:	0324      	lsls	r4, r4, #12
    d4b8:	4e13      	ldr	r6, [pc, #76]	; (d508 <__aeabi_dsub+0x624>)
    d4ba:	2700      	movs	r7, #0
    d4bc:	e5d3      	b.n	d066 <__aeabi_dsub+0x182>
    d4be:	4650      	mov	r0, sl
    d4c0:	4320      	orrs	r0, r4
    d4c2:	0007      	movs	r7, r0
    d4c4:	1e78      	subs	r0, r7, #1
    d4c6:	4187      	sbcs	r7, r0
    d4c8:	2400      	movs	r4, #0
    d4ca:	18bf      	adds	r7, r7, r2
    d4cc:	e760      	b.n	d390 <__aeabi_dsub+0x4ac>
    d4ce:	000c      	movs	r4, r1
    d4d0:	0017      	movs	r7, r2
    d4d2:	e58d      	b.n	cff0 <__aeabi_dsub+0x10c>
    d4d4:	000c      	movs	r4, r1
    d4d6:	0017      	movs	r7, r2
    d4d8:	4e0b      	ldr	r6, [pc, #44]	; (d508 <__aeabi_dsub+0x624>)
    d4da:	e589      	b.n	cff0 <__aeabi_dsub+0x10c>
    d4dc:	001e      	movs	r6, r3
    d4de:	0027      	movs	r7, r4
    d4e0:	3e20      	subs	r6, #32
    d4e2:	40f7      	lsrs	r7, r6
    d4e4:	2b20      	cmp	r3, #32
    d4e6:	d00c      	beq.n	d502 <__aeabi_dsub+0x61e>
    d4e8:	2640      	movs	r6, #64	; 0x40
    d4ea:	1af3      	subs	r3, r6, r3
    d4ec:	409c      	lsls	r4, r3
    d4ee:	4650      	mov	r0, sl
    d4f0:	4320      	orrs	r0, r4
    d4f2:	1e44      	subs	r4, r0, #1
    d4f4:	41a0      	sbcs	r0, r4
    d4f6:	4307      	orrs	r7, r0
    d4f8:	2400      	movs	r4, #0
    d4fa:	18bf      	adds	r7, r7, r2
    d4fc:	e748      	b.n	d390 <__aeabi_dsub+0x4ac>
    d4fe:	2400      	movs	r4, #0
    d500:	e7d0      	b.n	d4a4 <__aeabi_dsub+0x5c0>
    d502:	2400      	movs	r4, #0
    d504:	e7f3      	b.n	d4ee <__aeabi_dsub+0x60a>
    d506:	46c0      	nop			; (mov r8, r8)
    d508:	000007ff 	.word	0x000007ff
    d50c:	ff7fffff 	.word	0xff7fffff

0000d510 <__aeabi_dcmpun>:
    d510:	b570      	push	{r4, r5, r6, lr}
    d512:	4e0e      	ldr	r6, [pc, #56]	; (d54c <__aeabi_dcmpun+0x3c>)
    d514:	030d      	lsls	r5, r1, #12
    d516:	031c      	lsls	r4, r3, #12
    d518:	0049      	lsls	r1, r1, #1
    d51a:	005b      	lsls	r3, r3, #1
    d51c:	0b2d      	lsrs	r5, r5, #12
    d51e:	0d49      	lsrs	r1, r1, #21
    d520:	0b24      	lsrs	r4, r4, #12
    d522:	0d5b      	lsrs	r3, r3, #21
    d524:	42b1      	cmp	r1, r6
    d526:	d004      	beq.n	d532 <__aeabi_dcmpun+0x22>
    d528:	4908      	ldr	r1, [pc, #32]	; (d54c <__aeabi_dcmpun+0x3c>)
    d52a:	2000      	movs	r0, #0
    d52c:	428b      	cmp	r3, r1
    d52e:	d008      	beq.n	d542 <__aeabi_dcmpun+0x32>
    d530:	bd70      	pop	{r4, r5, r6, pc}
    d532:	4305      	orrs	r5, r0
    d534:	2001      	movs	r0, #1
    d536:	2d00      	cmp	r5, #0
    d538:	d1fa      	bne.n	d530 <__aeabi_dcmpun+0x20>
    d53a:	4904      	ldr	r1, [pc, #16]	; (d54c <__aeabi_dcmpun+0x3c>)
    d53c:	2000      	movs	r0, #0
    d53e:	428b      	cmp	r3, r1
    d540:	d1f6      	bne.n	d530 <__aeabi_dcmpun+0x20>
    d542:	4314      	orrs	r4, r2
    d544:	0020      	movs	r0, r4
    d546:	1e44      	subs	r4, r0, #1
    d548:	41a0      	sbcs	r0, r4
    d54a:	e7f1      	b.n	d530 <__aeabi_dcmpun+0x20>
    d54c:	000007ff 	.word	0x000007ff

0000d550 <__aeabi_d2iz>:
    d550:	b530      	push	{r4, r5, lr}
    d552:	4d13      	ldr	r5, [pc, #76]	; (d5a0 <__aeabi_d2iz+0x50>)
    d554:	030a      	lsls	r2, r1, #12
    d556:	004b      	lsls	r3, r1, #1
    d558:	0b12      	lsrs	r2, r2, #12
    d55a:	0d5b      	lsrs	r3, r3, #21
    d55c:	0fc9      	lsrs	r1, r1, #31
    d55e:	2400      	movs	r4, #0
    d560:	42ab      	cmp	r3, r5
    d562:	dd10      	ble.n	d586 <__aeabi_d2iz+0x36>
    d564:	4c0f      	ldr	r4, [pc, #60]	; (d5a4 <__aeabi_d2iz+0x54>)
    d566:	42a3      	cmp	r3, r4
    d568:	dc0f      	bgt.n	d58a <__aeabi_d2iz+0x3a>
    d56a:	2480      	movs	r4, #128	; 0x80
    d56c:	4d0e      	ldr	r5, [pc, #56]	; (d5a8 <__aeabi_d2iz+0x58>)
    d56e:	0364      	lsls	r4, r4, #13
    d570:	4322      	orrs	r2, r4
    d572:	1aed      	subs	r5, r5, r3
    d574:	2d1f      	cmp	r5, #31
    d576:	dd0b      	ble.n	d590 <__aeabi_d2iz+0x40>
    d578:	480c      	ldr	r0, [pc, #48]	; (d5ac <__aeabi_d2iz+0x5c>)
    d57a:	1ac3      	subs	r3, r0, r3
    d57c:	40da      	lsrs	r2, r3
    d57e:	4254      	negs	r4, r2
    d580:	2900      	cmp	r1, #0
    d582:	d100      	bne.n	d586 <__aeabi_d2iz+0x36>
    d584:	0014      	movs	r4, r2
    d586:	0020      	movs	r0, r4
    d588:	bd30      	pop	{r4, r5, pc}
    d58a:	4b09      	ldr	r3, [pc, #36]	; (d5b0 <__aeabi_d2iz+0x60>)
    d58c:	18cc      	adds	r4, r1, r3
    d58e:	e7fa      	b.n	d586 <__aeabi_d2iz+0x36>
    d590:	4c08      	ldr	r4, [pc, #32]	; (d5b4 <__aeabi_d2iz+0x64>)
    d592:	40e8      	lsrs	r0, r5
    d594:	46a4      	mov	ip, r4
    d596:	4463      	add	r3, ip
    d598:	409a      	lsls	r2, r3
    d59a:	4302      	orrs	r2, r0
    d59c:	e7ef      	b.n	d57e <__aeabi_d2iz+0x2e>
    d59e:	46c0      	nop			; (mov r8, r8)
    d5a0:	000003fe 	.word	0x000003fe
    d5a4:	0000041d 	.word	0x0000041d
    d5a8:	00000433 	.word	0x00000433
    d5ac:	00000413 	.word	0x00000413
    d5b0:	7fffffff 	.word	0x7fffffff
    d5b4:	fffffbed 	.word	0xfffffbed

0000d5b8 <__aeabi_i2d>:
    d5b8:	b570      	push	{r4, r5, r6, lr}
    d5ba:	2800      	cmp	r0, #0
    d5bc:	d030      	beq.n	d620 <__aeabi_i2d+0x68>
    d5be:	17c3      	asrs	r3, r0, #31
    d5c0:	18c4      	adds	r4, r0, r3
    d5c2:	405c      	eors	r4, r3
    d5c4:	0fc5      	lsrs	r5, r0, #31
    d5c6:	0020      	movs	r0, r4
    d5c8:	f000 f8c2 	bl	d750 <__clzsi2>
    d5cc:	4b17      	ldr	r3, [pc, #92]	; (d62c <__aeabi_i2d+0x74>)
    d5ce:	4a18      	ldr	r2, [pc, #96]	; (d630 <__aeabi_i2d+0x78>)
    d5d0:	1a1b      	subs	r3, r3, r0
    d5d2:	1ad2      	subs	r2, r2, r3
    d5d4:	2a1f      	cmp	r2, #31
    d5d6:	dd18      	ble.n	d60a <__aeabi_i2d+0x52>
    d5d8:	4a16      	ldr	r2, [pc, #88]	; (d634 <__aeabi_i2d+0x7c>)
    d5da:	1ad2      	subs	r2, r2, r3
    d5dc:	4094      	lsls	r4, r2
    d5de:	2200      	movs	r2, #0
    d5e0:	0324      	lsls	r4, r4, #12
    d5e2:	055b      	lsls	r3, r3, #21
    d5e4:	0b24      	lsrs	r4, r4, #12
    d5e6:	0d5b      	lsrs	r3, r3, #21
    d5e8:	2100      	movs	r1, #0
    d5ea:	0010      	movs	r0, r2
    d5ec:	0324      	lsls	r4, r4, #12
    d5ee:	0d0a      	lsrs	r2, r1, #20
    d5f0:	0b24      	lsrs	r4, r4, #12
    d5f2:	0512      	lsls	r2, r2, #20
    d5f4:	4322      	orrs	r2, r4
    d5f6:	4c10      	ldr	r4, [pc, #64]	; (d638 <__aeabi_i2d+0x80>)
    d5f8:	051b      	lsls	r3, r3, #20
    d5fa:	4022      	ands	r2, r4
    d5fc:	4313      	orrs	r3, r2
    d5fe:	005b      	lsls	r3, r3, #1
    d600:	07ed      	lsls	r5, r5, #31
    d602:	085b      	lsrs	r3, r3, #1
    d604:	432b      	orrs	r3, r5
    d606:	0019      	movs	r1, r3
    d608:	bd70      	pop	{r4, r5, r6, pc}
    d60a:	0021      	movs	r1, r4
    d60c:	4091      	lsls	r1, r2
    d60e:	000a      	movs	r2, r1
    d610:	210b      	movs	r1, #11
    d612:	1a08      	subs	r0, r1, r0
    d614:	40c4      	lsrs	r4, r0
    d616:	055b      	lsls	r3, r3, #21
    d618:	0324      	lsls	r4, r4, #12
    d61a:	0b24      	lsrs	r4, r4, #12
    d61c:	0d5b      	lsrs	r3, r3, #21
    d61e:	e7e3      	b.n	d5e8 <__aeabi_i2d+0x30>
    d620:	2500      	movs	r5, #0
    d622:	2300      	movs	r3, #0
    d624:	2400      	movs	r4, #0
    d626:	2200      	movs	r2, #0
    d628:	e7de      	b.n	d5e8 <__aeabi_i2d+0x30>
    d62a:	46c0      	nop			; (mov r8, r8)
    d62c:	0000041e 	.word	0x0000041e
    d630:	00000433 	.word	0x00000433
    d634:	00000413 	.word	0x00000413
    d638:	800fffff 	.word	0x800fffff

0000d63c <__aeabi_ui2d>:
    d63c:	b510      	push	{r4, lr}
    d63e:	1e04      	subs	r4, r0, #0
    d640:	d028      	beq.n	d694 <__aeabi_ui2d+0x58>
    d642:	f000 f885 	bl	d750 <__clzsi2>
    d646:	4b15      	ldr	r3, [pc, #84]	; (d69c <__aeabi_ui2d+0x60>)
    d648:	4a15      	ldr	r2, [pc, #84]	; (d6a0 <__aeabi_ui2d+0x64>)
    d64a:	1a1b      	subs	r3, r3, r0
    d64c:	1ad2      	subs	r2, r2, r3
    d64e:	2a1f      	cmp	r2, #31
    d650:	dd15      	ble.n	d67e <__aeabi_ui2d+0x42>
    d652:	4a14      	ldr	r2, [pc, #80]	; (d6a4 <__aeabi_ui2d+0x68>)
    d654:	1ad2      	subs	r2, r2, r3
    d656:	4094      	lsls	r4, r2
    d658:	2200      	movs	r2, #0
    d65a:	0324      	lsls	r4, r4, #12
    d65c:	055b      	lsls	r3, r3, #21
    d65e:	0b24      	lsrs	r4, r4, #12
    d660:	0d5b      	lsrs	r3, r3, #21
    d662:	2100      	movs	r1, #0
    d664:	0010      	movs	r0, r2
    d666:	0324      	lsls	r4, r4, #12
    d668:	0d0a      	lsrs	r2, r1, #20
    d66a:	0b24      	lsrs	r4, r4, #12
    d66c:	0512      	lsls	r2, r2, #20
    d66e:	4322      	orrs	r2, r4
    d670:	4c0d      	ldr	r4, [pc, #52]	; (d6a8 <__aeabi_ui2d+0x6c>)
    d672:	051b      	lsls	r3, r3, #20
    d674:	4022      	ands	r2, r4
    d676:	4313      	orrs	r3, r2
    d678:	005b      	lsls	r3, r3, #1
    d67a:	0859      	lsrs	r1, r3, #1
    d67c:	bd10      	pop	{r4, pc}
    d67e:	0021      	movs	r1, r4
    d680:	4091      	lsls	r1, r2
    d682:	000a      	movs	r2, r1
    d684:	210b      	movs	r1, #11
    d686:	1a08      	subs	r0, r1, r0
    d688:	40c4      	lsrs	r4, r0
    d68a:	055b      	lsls	r3, r3, #21
    d68c:	0324      	lsls	r4, r4, #12
    d68e:	0b24      	lsrs	r4, r4, #12
    d690:	0d5b      	lsrs	r3, r3, #21
    d692:	e7e6      	b.n	d662 <__aeabi_ui2d+0x26>
    d694:	2300      	movs	r3, #0
    d696:	2400      	movs	r4, #0
    d698:	2200      	movs	r2, #0
    d69a:	e7e2      	b.n	d662 <__aeabi_ui2d+0x26>
    d69c:	0000041e 	.word	0x0000041e
    d6a0:	00000433 	.word	0x00000433
    d6a4:	00000413 	.word	0x00000413
    d6a8:	800fffff 	.word	0x800fffff

0000d6ac <__aeabi_f2d>:
    d6ac:	0041      	lsls	r1, r0, #1
    d6ae:	0e09      	lsrs	r1, r1, #24
    d6b0:	1c4b      	adds	r3, r1, #1
    d6b2:	b570      	push	{r4, r5, r6, lr}
    d6b4:	b2db      	uxtb	r3, r3
    d6b6:	0246      	lsls	r6, r0, #9
    d6b8:	0a75      	lsrs	r5, r6, #9
    d6ba:	0fc4      	lsrs	r4, r0, #31
    d6bc:	2b01      	cmp	r3, #1
    d6be:	dd14      	ble.n	d6ea <__aeabi_f2d+0x3e>
    d6c0:	23e0      	movs	r3, #224	; 0xe0
    d6c2:	009b      	lsls	r3, r3, #2
    d6c4:	076d      	lsls	r5, r5, #29
    d6c6:	0b36      	lsrs	r6, r6, #12
    d6c8:	18cb      	adds	r3, r1, r3
    d6ca:	2100      	movs	r1, #0
    d6cc:	0d0a      	lsrs	r2, r1, #20
    d6ce:	0028      	movs	r0, r5
    d6d0:	0512      	lsls	r2, r2, #20
    d6d2:	4d1c      	ldr	r5, [pc, #112]	; (d744 <__aeabi_f2d+0x98>)
    d6d4:	4332      	orrs	r2, r6
    d6d6:	055b      	lsls	r3, r3, #21
    d6d8:	402a      	ands	r2, r5
    d6da:	085b      	lsrs	r3, r3, #1
    d6dc:	4313      	orrs	r3, r2
    d6de:	005b      	lsls	r3, r3, #1
    d6e0:	07e4      	lsls	r4, r4, #31
    d6e2:	085b      	lsrs	r3, r3, #1
    d6e4:	4323      	orrs	r3, r4
    d6e6:	0019      	movs	r1, r3
    d6e8:	bd70      	pop	{r4, r5, r6, pc}
    d6ea:	2900      	cmp	r1, #0
    d6ec:	d114      	bne.n	d718 <__aeabi_f2d+0x6c>
    d6ee:	2d00      	cmp	r5, #0
    d6f0:	d01e      	beq.n	d730 <__aeabi_f2d+0x84>
    d6f2:	0028      	movs	r0, r5
    d6f4:	f000 f82c 	bl	d750 <__clzsi2>
    d6f8:	280a      	cmp	r0, #10
    d6fa:	dc1c      	bgt.n	d736 <__aeabi_f2d+0x8a>
    d6fc:	230b      	movs	r3, #11
    d6fe:	002a      	movs	r2, r5
    d700:	1a1b      	subs	r3, r3, r0
    d702:	40da      	lsrs	r2, r3
    d704:	0003      	movs	r3, r0
    d706:	3315      	adds	r3, #21
    d708:	409d      	lsls	r5, r3
    d70a:	4b0f      	ldr	r3, [pc, #60]	; (d748 <__aeabi_f2d+0x9c>)
    d70c:	0312      	lsls	r2, r2, #12
    d70e:	1a1b      	subs	r3, r3, r0
    d710:	055b      	lsls	r3, r3, #21
    d712:	0b16      	lsrs	r6, r2, #12
    d714:	0d5b      	lsrs	r3, r3, #21
    d716:	e7d8      	b.n	d6ca <__aeabi_f2d+0x1e>
    d718:	2d00      	cmp	r5, #0
    d71a:	d006      	beq.n	d72a <__aeabi_f2d+0x7e>
    d71c:	0b32      	lsrs	r2, r6, #12
    d71e:	2680      	movs	r6, #128	; 0x80
    d720:	0336      	lsls	r6, r6, #12
    d722:	076d      	lsls	r5, r5, #29
    d724:	4316      	orrs	r6, r2
    d726:	4b09      	ldr	r3, [pc, #36]	; (d74c <__aeabi_f2d+0xa0>)
    d728:	e7cf      	b.n	d6ca <__aeabi_f2d+0x1e>
    d72a:	4b08      	ldr	r3, [pc, #32]	; (d74c <__aeabi_f2d+0xa0>)
    d72c:	2600      	movs	r6, #0
    d72e:	e7cc      	b.n	d6ca <__aeabi_f2d+0x1e>
    d730:	2300      	movs	r3, #0
    d732:	2600      	movs	r6, #0
    d734:	e7c9      	b.n	d6ca <__aeabi_f2d+0x1e>
    d736:	0003      	movs	r3, r0
    d738:	002a      	movs	r2, r5
    d73a:	3b0b      	subs	r3, #11
    d73c:	409a      	lsls	r2, r3
    d73e:	2500      	movs	r5, #0
    d740:	e7e3      	b.n	d70a <__aeabi_f2d+0x5e>
    d742:	46c0      	nop			; (mov r8, r8)
    d744:	800fffff 	.word	0x800fffff
    d748:	00000389 	.word	0x00000389
    d74c:	000007ff 	.word	0x000007ff

0000d750 <__clzsi2>:
    d750:	211c      	movs	r1, #28
    d752:	2301      	movs	r3, #1
    d754:	041b      	lsls	r3, r3, #16
    d756:	4298      	cmp	r0, r3
    d758:	d301      	bcc.n	d75e <__clzsi2+0xe>
    d75a:	0c00      	lsrs	r0, r0, #16
    d75c:	3910      	subs	r1, #16
    d75e:	0a1b      	lsrs	r3, r3, #8
    d760:	4298      	cmp	r0, r3
    d762:	d301      	bcc.n	d768 <__clzsi2+0x18>
    d764:	0a00      	lsrs	r0, r0, #8
    d766:	3908      	subs	r1, #8
    d768:	091b      	lsrs	r3, r3, #4
    d76a:	4298      	cmp	r0, r3
    d76c:	d301      	bcc.n	d772 <__clzsi2+0x22>
    d76e:	0900      	lsrs	r0, r0, #4
    d770:	3904      	subs	r1, #4
    d772:	a202      	add	r2, pc, #8	; (adr r2, d77c <__clzsi2+0x2c>)
    d774:	5c10      	ldrb	r0, [r2, r0]
    d776:	1840      	adds	r0, r0, r1
    d778:	4770      	bx	lr
    d77a:	46c0      	nop			; (mov r8, r8)
    d77c:	02020304 	.word	0x02020304
    d780:	01010101 	.word	0x01010101
	...
    d78c:	00000190 	.word	0x00000190
	...
    d7a4:	bf800000 	.word	0xbf800000
    d7a8:	00000000 	.word	0x00000000
    d7ac:	bf4ccccd 	.word	0xbf4ccccd
	...
    d7b8:	be4ccccd 	.word	0xbe4ccccd
    d7bc:	bf000000 	.word	0xbf000000
    d7c0:	00000000 	.word	0x00000000
    d7c4:	bf800000 	.word	0xbf800000
	...
    d7e0:	3dcccccd 	.word	0x3dcccccd
    d7e4:	3f333333 	.word	0x3f333333
    d7e8:	00000000 	.word	0x00000000
    d7ec:	bf4ccccd 	.word	0xbf4ccccd
    d7f0:	bdcccccd 	.word	0xbdcccccd
	...
    d810:	74737271 	.word	0x74737271
    d814:	00000075 	.word	0x00000075
    d818:	00007170 	.word	0x00007170
    d81c:	00082008 	.word	0x00082008
    d820:	65636341 	.word	0x65636341
    d824:	6172656c 	.word	0x6172656c
    d828:	6e6f6974 	.word	0x6e6f6974
    d82c:	676d5b20 	.word	0x676d5b20
    d830:	20583a5d 	.word	0x20583a5d
    d834:	59096425 	.word	0x59096425
    d838:	09642520 	.word	0x09642520
    d83c:	6425205a 	.word	0x6425205a
    d840:	00000a0d 	.word	0x00000a0d
    d844:	706d6554 	.word	0x706d6554
    d848:	6625203a 	.word	0x6625203a
    d84c:	75482020 	.word	0x75482020
    d850:	25203a6d 	.word	0x25203a6d
    d854:	72502066 	.word	0x72502066
    d858:	3a737365 	.word	0x3a737365
    d85c:	20662520 	.word	0x20662520
    d860:	0000000a 	.word	0x0000000a
    d864:	00736c63 	.word	0x00736c63
    d868:	3a736c63 	.word	0x3a736c63
    d86c:	656c4320 	.word	0x656c4320
    d870:	20737261 	.word	0x20737261
    d874:	20656874 	.word	0x20656874
    d878:	6d726574 	.word	0x6d726574
    d87c:	6c616e69 	.word	0x6c616e69
    d880:	72637320 	.word	0x72637320
    d884:	0d6e6565 	.word	0x0d6e6565
    d888:	0000000a 	.word	0x0000000a
    d88c:	65736572 	.word	0x65736572
    d890:	00000074 	.word	0x00000074
    d894:	65736572 	.word	0x65736572
    d898:	52203a74 	.word	0x52203a74
    d89c:	74657365 	.word	0x74657365
    d8a0:	68742073 	.word	0x68742073
    d8a4:	65642065 	.word	0x65642065
    d8a8:	65636976 	.word	0x65636976
    d8ac:	00000a0d 	.word	0x00000a0d
    d8b0:	00756d69 	.word	0x00756d69
    d8b4:	3a756d69 	.word	0x3a756d69
    d8b8:	74655220 	.word	0x74655220
    d8bc:	736e7275 	.word	0x736e7275
    d8c0:	76206120 	.word	0x76206120
    d8c4:	65756c61 	.word	0x65756c61
    d8c8:	6f726620 	.word	0x6f726620
    d8cc:	6874206d 	.word	0x6874206d
    d8d0:	4d492065 	.word	0x4d492065
    d8d4:	000a0d55 	.word	0x000a0d55
    d8d8:	706d6574 	.word	0x706d6574
    d8dc:	00000000 	.word	0x00000000
    d8e0:	706d6574 	.word	0x706d6574
    d8e4:	6552203a 	.word	0x6552203a
    d8e8:	6e727574 	.word	0x6e727574
    d8ec:	20612073 	.word	0x20612073
    d8f0:	756c6176 	.word	0x756c6176
    d8f4:	72662065 	.word	0x72662065
    d8f8:	74206d6f 	.word	0x74206d6f
    d8fc:	74206568 	.word	0x74206568
    d900:	65706d65 	.word	0x65706d65
    d904:	75746172 	.word	0x75746172
    d908:	73206572 	.word	0x73206572
    d90c:	6f736e65 	.word	0x6f736e65
    d910:	000a0d72 	.word	0x000a0d72
    d914:	65657246 	.word	0x65657246
    d918:	534f5452 	.word	0x534f5452
    d91c:	494c4320 	.word	0x494c4320
    d920:	540a0d2e 	.word	0x540a0d2e
    d924:	20657079 	.word	0x20657079
    d928:	706c6548 	.word	0x706c6548
    d92c:	206f7420 	.word	0x206f7420
    d930:	77656976 	.word	0x77656976
    d934:	6c206120 	.word	0x6c206120
    d938:	20747369 	.word	0x20747369
    d93c:	7220666f 	.word	0x7220666f
    d940:	73696765 	.word	0x73696765
    d944:	65726574 	.word	0x65726574
    d948:	6f632064 	.word	0x6f632064
    d94c:	6e616d6d 	.word	0x6e616d6d
    d950:	0d2e7364 	.word	0x0d2e7364
    d954:	0000000a 	.word	0x0000000a
    d958:	6c756f43 	.word	0x6c756f43
    d95c:	6f6e2064 	.word	0x6f6e2064
    d960:	6c612074 	.word	0x6c612074
    d964:	61636f6c 	.word	0x61636f6c
    d968:	73206574 	.word	0x73206574
    d96c:	70616d65 	.word	0x70616d65
    d970:	65726f68 	.word	0x65726f68
    d974:	00000a0d 	.word	0x00000a0d
    d978:	0000616f 	.word	0x0000616f
    d97c:	325b6325 	.word	0x325b6325
    d980:	003e0d4b 	.word	0x003e0d4b

0000d984 <xClearScreen>:
    d984:	0000d864 0000d868 00001ae1 00000000     d...h...........
    d994:	325b6325 0000004a                       %c[2J...

0000d99c <xImuGetCommand>:
    d99c:	0000d8b0 0000d8b4 00001a55 00000000     ........U.......

0000d9ac <xResetCommand>:
    d9ac:	0000d88c 0000d894 000019c1 00000000     ................

0000d9bc <xTempGetCommand>:
    d9bc:	0000d8d8 0000d8e0 000019d9 00000000     ................
    d9cc:	6f636e49 63657272 6f632074 6e616d6d     Incorrect comman
    d9dc:	61702064 656d6172 28726574 202e2973     d parameter(s). 
    d9ec:	746e4520 22207265 706c6568 6f742022      Enter "help" to
    d9fc:	65697620 20612077 7473696c 20666f20      view a list of 
    da0c:	69617661 6c62616c 6f632065 6e616d6d     available comman
    da1c:	0d2e7364 000a0d0a 6d6d6f43 20646e61     ds......Command 
    da2c:	20746f6e 6f636572 73696e67 202e6465     not recognised. 
    da3c:	746e4520 27207265 706c6568 6f742027      Enter 'help' to
    da4c:	65697620 20612077 7473696c 20666f20      view a list of 
    da5c:	69617661 6c62616c 6f632065 6e616d6d     available comman
    da6c:	0d2e7364 000a0d0a 706c6568 00000000     ds......help....
    da7c:	65680a0d 0d3a706c 694c200a 20737473     ..help:.. Lists 
    da8c:	206c6c61 20656874 69676572 72657473     all the register
    da9c:	63206465 616d6d6f 0d73646e 000a0d0a     ed commands.....

0000daac <xHelpCommand>:
    daac:	0000da74 0000da7c 00002d19 00000000     t...|....-......
    dabc:	00003120 00003118 0000311c 00003138      1...1...1..81..
    dacc:	00003114 00003124 00003128 0000312c     .1..$1..(1..,1..
    dadc:	00003130 20746f4e 756f6e65 54206867     01..Not enough T
    daec:	204b5341 646e6168 2073656c 6e69202d     ASK handles - in
    dafc:	61657263 54206573 435f4352 4e5f4746     crease TRC_CFG_N
    db0c:	4b534154 206e6920 53637274 7370616e     TASK in trcSnaps
    db1c:	43746f68 69666e6f 00682e67 20746f4e     hotConfig.h.Not 
    db2c:	756f6e65 49206867 68205253 6c646e61     enough ISR handl
    db3c:	2d207365 636e6920 73616572 52542065     es - increase TR
    db4c:	46435f43 494e5f47 69205253 7274206e     C_CFG_NISR in tr
    db5c:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    db6c:	00000068 20746f4e 756f6e65 53206867     h...Not enough S
    db7c:	50414d45 45524f48 6e616820 73656c64     EMAPHORE handles
    db8c:	69202d20 6572636e 20657361 5f435254      - increase TRC_
    db9c:	5f474643 4d45534e 4f485041 69204552     CFG_NSEMAPHORE i
    dbac:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
    dbbc:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
    dbcc:	4d206867 58455455 6e616820 73656c64     gh MUTEX handles
    dbdc:	69202d20 6572636e 20657361 5f435254      - increase TRC_
    dbec:	5f474643 54554d4e 69205845 7274206e     CFG_NMUTEX in tr
    dbfc:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    dc0c:	00000068 20746f4e 756f6e65 51206867     h...Not enough Q
    dc1c:	45554555 6e616820 73656c64 69202d20     UEUE handles - i
    dc2c:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
    dc3c:	4555514e 69204555 7274206e 616e5363     NQUEUE in trcSna
    dc4c:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
    dc5c:	20746f4e 756f6e65 54206867 52454d49     Not enough TIMER
    dc6c:	6e616820 73656c64 69202d20 6572636e      handles - incre
    dc7c:	20657361 5f435254 5f474643 4d49544e     ase TRC_CFG_NTIM
    dc8c:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
    dc9c:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
    dcac:	756f6e65 45206867 544e4556 554f5247     enough EVENTGROU
    dcbc:	61682050 656c646e 202d2073 72636e69     P handles - incr
    dccc:	65736165 43525420 4746435f 56454e5f     ease TRC_CFG_NEV
    dcdc:	47544e45 50554f52 206e6920 53637274     ENTGROUP in trcS
    dcec:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
    dcfc:	20746f4e 756f6e65 53206867 41455254     Not enough STREA
    dd0c:	4655424d 20524546 646e6168 2073656c     MBUFFER handles 
    dd1c:	6e69202d 61657263 54206573 435f4352     - increase TRC_C
    dd2c:	4e5f4746 45525453 55424d41 52454646     FG_NSTREAMBUFFER
    dd3c:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
    dd4c:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
    dd5c:	4d206867 41535345 55424547 52454646     gh MESSAGEBUFFER
    dd6c:	6e616820 73656c64 69202d20 6572636e      handles - incre
    dd7c:	20657361 5f435254 5f474643 53454d4e     ase TRC_CFG_NMES
    dd8c:	45474153 46465542 69205245 7274206e     SAGEBUFFER in tr
    dd9c:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    ddac:	00000068 547a7370 65636172 45746547     h...pszTraceGetE
    ddbc:	726f7272 646e6148 3a73656c 766e4920     rrorHandles: Inv
    ddcc:	64696c61 6a626f20 63746365 7373616c     alid objectclass
    dddc:	00000021 61725476 6e456563 656c6261     !...vTraceEnable
    ddec:	43525428 4154535f 415f5452 54494157     (TRC_START_AWAIT
    ddfc:	534f485f 6e202954 6120746f 776f6c6c     _HOST) not allow
    de0c:	69206465 6e53206e 68737061 6d20746f     ed in Snapshot m
    de1c:	0065646f 78656e55 74636570 61206465     ode.Unexpected a
    de2c:	6d756772 20746e65 76206f74 63617254     rgument to vTrac
    de3c:	616e4565 20656c62 616e7328 6f687370     eEnable (snapsho
    de4c:	6f6d2074 00296564 43415254 53415f45     t mode).TRACE_AS
    de5c:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
    de6c:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
    de7c:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
    de8c:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
    de9c:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
    deac:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    debc:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
    decc:	696c6176 61762064 2065756c 20726f66     valid value for 
    dedc:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
    deec:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
    defc:	206e6920 54767270 65636172 44746547      in prvTraceGetD
    df0c:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
    df1c:	7270203a 61725476 65476563 6a624f74     : prvTraceGetObj
    df2c:	48746365 6c646e61 49203a65 6c61766e     ectHandle: Inval
    df3c:	76206469 65756c61 726f6620 6a626f20     id value for obj
    df4c:	63746365 7373616c 00000000 43415254     ectclass....TRAC
    df5c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
    df6c:	65476563 72615074 203a6d61 61766e49     ceGetParam: Inva
    df7c:	2064696c 756c6176 6f662065 61702072     lid value for pa
    df8c:	5f6d6172 0078616d 43415254 53415f45     ram_max.TRACE_AS
    df9c:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
    dfac:	69725074 7469726f 6f725079 74726570     tPriorityPropert
    dfbc:	6f203a79 63656a62 616c6374 3e207373     y: objectclass >
    dfcc:	5254203d 5f454341 414c434e 53455353     = TRACE_NCLASSES
    dfdc:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
    dfec:	7270203a 61725476 65476563 69725074     : prvTraceGetPri
    dffc:	7469726f 6f725079 74726570 49203a79     orityProperty: I
    e00c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    e01c:	00646920 63617254 65522065 64726f63      id.Trace Record
    e02c:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
    e03c:	69206f74 7865646e 74756f20 65646973     to index outside
    e04c:	65766520 6220746e 65666675 00002172      event buffer!..
    e05c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    e06c:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
    e07c:	3a656d61 6d616e20 3d3d2065 4c554e20     ame: name == NUL
    e08c:	0000004c 656c6c49 206c6167 656a626f     L...Illegal obje
    e09c:	63207463 7373616c 206e6920 54767270     ct class in prvT
    e0ac:	65636172 4f746553 63656a62 6d614e74     raceSetObjectNam
    e0bc:	00000065 656c6c49 206c6167 646e6168     e...Illegal hand
    e0cc:	2820656c 69202930 7270206e 61725476     le (0) in prvTra
    e0dc:	65536563 6a624f74 4e746365 2e656d61     ceSetObjectName.
    e0ec:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
    e0fc:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
    e10c:	53746365 65746174 626f203a 7463656a     ectState: object
    e11c:	73616c63 3d3e2073 41525420 4e5f4543     class >= TRACE_N
    e12c:	53414c43 00534553 43415254 53415f45     CLASSES.TRACE_AS
    e13c:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
    e14c:	6a624f74 53746365 65746174 6e49203a     tObjectState: In
    e15c:	696c6176 61762064 2065756c 20726f66     valid value for 
    e16c:	00006469 43415254 53415f45 54524553     id..TRACE_ASSERT
    e17c:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
    e18c:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
    e19c:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
    e1ac:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
    e1bc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    e1cc:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
    e1dc:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
    e1ec:	76206469 65756c61 726f6620 00646920     id value for id.
    e1fc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    e20c:	61725476 65536563 73615474 736e496b     vTraceSetTaskIns
    e21c:	636e6174 6e694665 65687369 49203a64     tanceFinished: I
    e22c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    e23c:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
    e24c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    e25c:	4b65726f 656e7265 6c61436c 65203a6c     oreKernelCall: e
    e26c:	65646f63 203d3e20 46467830 00000000     code >= 0xFF....
    e27c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    e28c:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
    e29c:	6c61436c 6f203a6c 63656a62 616c4374     lCall: objectCla
    e2ac:	3e207373 5254203d 5f454341 414c434e     ss >= TRACE_NCLA
    e2bc:	53455353 00000000 43415254 53415f45     SSES....TRACE_AS
    e2cc:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    e2dc:	4b65726f 656e7265 6c61436c 49203a6c     oreKernelCall: I
    e2ec:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    e2fc:	6a626f20 4e746365 65626d75 00000072      objectNumber...
    e30c:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    e31c:	68676968 69727020 7469726f 53492079     high priority IS
    e32c:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    e33c:	29322820 00000000 43415254 53415f45      (2)....TRACE_AS
    e34c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    e35c:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    e36c:	6d754e68 63697265 61726150 6c6e4f6d     hNumericParamOnl
    e37c:	49203a79 6c61766e 76206469 65756c61     y: Invalid value
    e38c:	726f6620 74766520 65646f63 00000000      for evtcode....
    e39c:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    e3ac:	68676968 69727020 7469726f 53492079     high priority IS
    e3bc:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    e3cc:	29342820 00000000 43415254 53415f45      (4)....TRACE_AS
    e3dc:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    e3ec:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    e3fc:	72615068 203a6d61 63747665 2065646f     hParam: evtcode 
    e40c:	30203d3e 00464678 43415254 53415f45     >= 0xFF.TRACE_AS
    e41c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    e42c:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    e43c:	72615068 203a6d61 656a626f 6c437463     hParam: objectCl
    e44c:	20737361 54203d3e 45434152 4c434e5f     ass >= TRACE_NCL
    e45c:	45535341 00000053 43415254 53415f45     ASSES...TRACE_AS
    e46c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    e47c:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    e48c:	72615068 203a6d61 61766e49 2064696c     hParam: Invalid 
    e49c:	756c6176 6f662065 626f2072 7463656a     value for object
    e4ac:	626d754e 00007265 6f636552 72656472     Number..Recorder
    e4bc:	73756220 202d2079 68676968 69727020      busy - high pri
    e4cc:	7469726f 53492079 73752052 20676e69     ority ISR using 
    e4dc:	63737973 3f6c6c61 29332820 00000000     syscall? (3)....
    e4ec:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    e4fc:	61725476 74536563 5465726f 526b7361     vTraceStoreTaskR
    e50c:	79646165 6e49203a 696c6176 61762064     eady: Invalid va
    e51c:	2065756c 20726f66 646e6168 0000656c     lue for handle..
    e52c:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    e53c:	68676968 69727020 7469726f 53492079     high priority IS
    e54c:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    e55c:	29312820 00000000 43415254 53415f45      (1)....TRACE_AS
    e56c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    e57c:	5465726f 736b7361 63746977 49203a68     oreTaskswitch: I
    e58c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    e59c:	73617420 61685f6b 656c646e 00000000      task_handle....
    e5ac:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    e5bc:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
    e5cc:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
    e5dc:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
    e5ec:	53415f45 54524553 6975203a 65646e49     E_ASSERT: uiInde
    e5fc:	4f664f78 63656a62 49203a74 6c61766e     xOfObject: Inval
    e60c:	76206469 65756c61 726f6620 6a626f20     id value for obj
    e61c:	63746365 7373616c 00000000 43415254     ectclass....TRAC
    e62c:	53415f45 54524553 6975203a 65646e49     E_ASSERT: uiInde
    e63c:	4f664f78 63656a62 49203a74 6c61766e     xOfObject: Inval
    e64c:	76206469 65756c61 726f6620 6a626f20     id value for obj
    e65c:	68746365 6c646e61 00000065 43415254     ecthandle...TRAC
    e66c:	53415f45 54524553 6552203a 64726f63     E_ASSERT: Record
    e67c:	6e207265 6920746f 6974696e 7a696c61     er not initializ
    e68c:	202e6465 20657355 61725476 6e456563     ed. Use vTraceEn
    e69c:	656c6261 69202928 6574736e 00216461     able() instead!.
    e6ac:	61747328 70757472 00000029 43415254     (startup)...TRAC
    e6bc:	53415f45 54524553 5478203a 65636172     E_ASSERT: xTrace
    e6cc:	69676552 72657473 69727453 203a676e     RegisterString: 
    e6dc:	6562616c 3d3d206c 4c554e20 0000004c     label == NULL...
    e6ec:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
    e6fc:	64726f63 6e207265 6920746f 6974696e     corder not initi
    e70c:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
    e71c:	45656361 6c62616e 20292865 73726966     aceEnable() firs
    e72c:	00002174 454c4449 00000000 000066a4     t!..IDLE.....f..
    e73c:	000066a4 000066a4 0000661c 000066e6     .f...f...f...f..
    e74c:	00006700 000066a4 000066a4 0000661c     .g...f...f...f..
    e75c:	000066e6 20726d54 00637653 42000800     .f..Tmr Svc....B
    e76c:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    e77c:	42001c00 00007b0a 00007b06 00007b06     ...B.{...{...{..
    e78c:	00007b6c 00007b6c 00007b1e 00007b10     l{..l{...{...{..
    e79c:	00007b24 00007b5a 00007c98 00007c78     ${..Z{...|..x|..
    e7ac:	00007c78 00007d04 00007c8a 00007ca6     x|...}...|...|..
    e7bc:	00007c7c 00007cb4 00007cf4              ||...|...|..

0000e7c8 <_tcc_intflag>:
    e7c8:	00000001 00000002 00000004 00000008     ................
    e7d8:	00001000 00002000 00004000 00008000     ..... ...@......
    e7e8:	00010000 00020000 00040000 00080000     ................
    e7f8:	0a0d0a0d 2d2d2d2d 4553452d 20363135     ....-----ESE516 
    e808:	6e69614d 6f725020 6d617267 2d2d2d2d     Main Program----
    e818:	000a0d2d 0a0d0a0d 74696e49 696c6169     -.......Initiali
    e828:	4820657a 2e2e2e57 00000a0d 6f727245     ze HW.......Erro
    e838:	6e692072 61697469 697a696c 4920676e     r initializing I
    e848:	44204332 65766972 0a0d2172 00000000     2C Driver!......
    e858:	74696e49 696c6169 2064657a 20433249     Initialized I2C 
    e868:	76697244 0d217265 0000000a 36454d42     Driver!.....BME6
    e878:	49203038 6974696e 66206c61 656c6961     80 Initial faile
    e888:	0a0d2164 00000000 36454d42 49203038     d!......BME680 I
    e898:	6974696e 64656c61 63755320 73736563     nitialed Success
    e8a8:	000a0d21 20554d49 74696e69 696c6169     !...IMU initiali
    e8b8:	2164657a 00000a0d 6c756f43 6f6e2064     zed!....Could no
    e8c8:	6e692074 61697469 657a696c 554d4920     t initialize IMU
    e8d8:	00000a0d 70616548 66656220 2065726f     ....Heap before 
    e8e8:	72617473 676e6974 73617420 203a736b     starting tasks: 
    e8f8:	0a0d6425 00000000 5f494c43 4b534154     %d......CLI_TASK
    e908:	00000000 3a525245 494c4320 73617420     ....ERR: CLI tas
    e918:	6f63206b 20646c75 20746f6e 69206562     k could not be i
    e928:	6974696e 7a696c61 0d216465 0000000a     nitialized!.....
    e938:	70616548 74666120 73207265 74726174     Heap after start
    e948:	20676e69 3a494c43 0d642520 0000000a     ing CLI: %d.....
    e958:	6f727245 6e6f2072 6d656d20 2079726f     Error on memory 
    e968:	6f6c6c61 69746163 6f206e6f 5246206e     allocation on FR
    e978:	54524545 0d21534f 0000000a 6f727245     EERTOS!.....Erro
    e988:	6e6f2072 61747320 6f206b63 66726576     r on stack overf
    e998:	20776f6c 46206e6f 52454552 21534f54     low on FREERTOS!
    e9a8:	00000a0d 00464e49 00666e69 004e414e     ....INF.inf.NAN.
    e9b8:	006e616e 31300030 35343332 39383736     nan.0.0123456789
    e9c8:	44434241 30004645 34333231 38373635     ABCDEF.012345678
    e9d8:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
    e9e8:	4e614e00 50004300 5849534f 00002e00     .NaN.C.POSIX....

0000e9f8 <__mprec_bigtens>:
    e9f8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    ea08:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    ea18:	7f73bf3c 75154fdd                       <.s..O.u

0000ea20 <__mprec_tens>:
    ea20:	00000000 3ff00000 00000000 40240000     .......?......$@
    ea30:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    ea40:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    ea50:	00000000 412e8480 00000000 416312d0     .......A......cA
    ea60:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    ea70:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    ea80:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    ea90:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    eaa0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    eab0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    eac0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    ead0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    eae0:	79d99db4 44ea7843                       ...yCx.D

0000eae8 <p05.6047>:
    eae8:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    eaf8:	6c680020 6665004c 47464567 20200000               .hlL.efgEFG.

0000eb05 <_ctype_>:
    eb05:	20202000 20202020 28282020 20282828     .         ((((( 
    eb15:	20202020 20202020 20202020 20202020                     
    eb25:	10108820 10101010 10101010 10101010      ...............
    eb35:	04040410 04040404 10040404 10101010     ................
    eb45:	41411010 41414141 01010101 01010101     ..AAAAAA........
    eb55:	01010101 01010101 01010101 10101010     ................
    eb65:	42421010 42424242 02020202 02020202     ..BBBBBB........
    eb75:	02020202 02020202 02020202 10101010     ................
    eb85:	00000020 00000000 00000000 00000000      ...............
	...
    ec05:	24000000 f40000b2 060000b1 480000b2     ...$...........H
    ec15:	060000b1 ea0000b2 060000b1 480000b2     ...............H
    ec25:	f40000b1 f40000b1 ea0000b1 480000b1     ...............H
    ec35:	500000b1 500000b1 500000b1 0c0000b1     ...P...P...P....
    ec45:	f40000b2 f40000b1 c80000b1 ac0000b1     ................
    ec55:	c80000b2 ea0000b1 c80000b1 ac0000b1     ................
    ec65:	f40000b2 f40000b1 ea0000b1 ac0000b1     ................
    ec75:	500000b2 500000b1 500000b1 b60000b1     ...P...P...P....
    ec85:	a40000b2 f40000b5 f40000b4 f20000b4     ................
    ec95:	960000b4 960000b5 8c0000b5 f20000b5     ................
    eca5:	960000b4 8c0000b5 960000b5 f20000b5     ................
    ecb5:	9c0000b4 9c0000b5 9c0000b5 2c0000b5     ...............,
    ecc5:	740000b6 560000c3 100000c3 2e0000c3     ...t...V........
    ecd5:	100000c2 480000c3 100000c3 2e0000c3     .......H........
    ece5:	560000c2 560000c3 480000c3 2e0000c3     ...V...V...H....
    ecf5:	260000c2 260000c2 260000c2 8c0000c2     ...&...&...&....
    ed05:	d40000c5 940000cb 940000ca 900000ca     ................
    ed15:	ac0000ca ac0000cb 9e0000cb 900000cb     ................
    ed25:	ac0000ca 9e0000cb ac0000cb 900000cb     ................
    ed35:	b40000ca b40000cb b40000cb b80000cb     ................
    ed45:	f80000cd                                         ...

0000ed48 <_init>:
    ed48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed4a:	46c0      	nop			; (mov r8, r8)
    ed4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ed4e:	bc08      	pop	{r3}
    ed50:	469e      	mov	lr, r3
    ed52:	4770      	bx	lr

0000ed54 <__init_array_start>:
    ed54:	000000dd 	.word	0x000000dd

0000ed58 <_fini>:
    ed58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed5a:	46c0      	nop			; (mov r8, r8)
    ed5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ed5e:	bc08      	pop	{r3}
    ed60:	469e      	mov	lr, r3
    ed62:	4770      	bx	lr

0000ed64 <__fini_array_start>:
    ed64:	000000b5 	.word	0x000000b5
