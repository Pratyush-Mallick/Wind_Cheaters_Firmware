
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bbec  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000204  20000000  0000bbec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004cd4  20000204  0000bdf0  00020204  2**2
                  ALLOC
  3 .stack        00002000  20004ed8  00010ac4  00020204  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000724f5  00000000  00000000  00020285  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00009030  00000000  00000000  0009277a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00026b4d  00000000  00000000  0009b7aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001c30  00000000  00000000  000c22f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002110  00000000  00000000  000c3f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014202  00000000  00000000  000c6037  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000267b5  00000000  00000000  000da239  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000afd39  00000000  00000000  001009ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00006160  00000000  00000000  001b0728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	d8 6e 00 20 f9 70 00 00 dd 70 00 00 dd 70 00 00     .n. .p...p...p..
	...
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
		if (time.hour == 0) {
      2c:	05 33 00 00 00 00 00 00 00 00 00 00 e1 33 00 00     .3...........3..
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      3c:	25 34 00 00 dd 70 00 00 dd 70 00 00 dd 70 00 00     %4...p...p...p..
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
      4c:	ad 5e 00 00 b1 5d 00 00 dd 70 00 00 dd 70 00 00     .^...]...p...p..
			time.hour = 12;
      5c:	dd 70 00 00 dd 70 00 00 d5 62 00 00 e5 62 00 00     .p...p...b...b..
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
			}
			module->clock_24h = false;
      6c:	f5 62 00 00 05 63 00 00 15 63 00 00 25 63 00 00     .b...c...c..%c..
		/* Change value in configuration structure. */
		module->clock_24h = true;
	}

	/* Disable RTC so new configuration can be set. */
	rtc_calendar_disable(module);
      7c:	ad 70 00 00 bd 70 00 00 cd 70 00 00 49 1f 00 00     .p...p...p..I...

	/* Toggle mode. */
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;

	/* Enable RTC. */
	rtc_calendar_enable(module);
      8c:	59 1f 00 00 69 1f 00 00 00 00 00 00 00 00 00 00     Y...i...........
		if (time.pm == 1) {
      9c:	dd 70 00 00 dd 70 00 00 dd 70 00 00 dd 70 00 00     .p...p...p...p..
			time.pm = 0;
      ac:	dd 70 00 00 00 00 00 00                             .p......

000000b4 <__do_global_dtors_aux>:
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
			if (alarm.time.pm == 1) {
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
			} else if (alarm.time.hour == 12) {
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
		module->clock_24h = true;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
		} else if (time.hour == 12) {
      ce:	bd10      	pop	{r4, pc}
      d0:	20000204 	.word	0x20000204
      d4:	00000000 	.word	0x00000000
			time.hour = 0;
      d8:	0000bbec 	.word	0x0000bbec

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
				alarm.time.hour = alarm.time.hour + 12;
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
				alarm.time.pm = 0;
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
				module->clock_24h = true;
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
				alarm.time.hour = 0;
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000208 	.word	0x20000208
     108:	0000bbec 	.word	0x0000bbec
     10c:	0000bbec 	.word	0x0000bbec
     110:	00000000 	.word	0x00000000

00000114 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     114:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     116:	2207      	movs	r2, #7
     118:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     11a:	421a      	tst	r2, r3
     11c:	d1fc      	bne.n	118 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     11e:	4770      	bx	lr

00000120 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     120:	b570      	push	{r4, r5, r6, lr}
     122:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     124:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     126:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     128:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     12a:	8b83      	ldrh	r3, [r0, #28]
     12c:	1aed      	subs	r5, r5, r3
     12e:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     130:	8b83      	ldrh	r3, [r0, #28]
     132:	3b01      	subs	r3, #1
     134:	b29b      	uxth	r3, r3
     136:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     138:	0113      	lsls	r3, r2, #4
     13a:	d51d      	bpl.n	178 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     13c:	7ac3      	ldrb	r3, [r0, #11]
     13e:	2b00      	cmp	r3, #0
     140:	d003      	beq.n	14a <_i2c_master_read+0x2a>
     142:	8b83      	ldrh	r3, [r0, #28]
     144:	b29b      	uxth	r3, r3
     146:	2b01      	cmp	r3, #1
     148:	d010      	beq.n	16c <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     14a:	8ba3      	ldrh	r3, [r4, #28]
     14c:	b29b      	uxth	r3, r3
     14e:	2b00      	cmp	r3, #0
     150:	d102      	bne.n	158 <_i2c_master_read+0x38>
		if (module->send_stop) {
     152:	7aa3      	ldrb	r3, [r4, #10]
     154:	2b00      	cmp	r3, #0
     156:	d11c      	bne.n	192 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     158:	0020      	movs	r0, r4
     15a:	4b12      	ldr	r3, [pc, #72]	; (1a4 <_i2c_master_read+0x84>)
     15c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     15e:	6a23      	ldr	r3, [r4, #32]
     160:	195d      	adds	r5, r3, r5
     162:	2328      	movs	r3, #40	; 0x28
     164:	5cf3      	ldrb	r3, [r6, r3]
     166:	b2db      	uxtb	r3, r3
     168:	702b      	strb	r3, [r5, #0]
}
     16a:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     16c:	6872      	ldr	r2, [r6, #4]
     16e:	2380      	movs	r3, #128	; 0x80
     170:	02db      	lsls	r3, r3, #11
     172:	4313      	orrs	r3, r2
     174:	6073      	str	r3, [r6, #4]
     176:	e7e8      	b.n	14a <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     178:	7ac3      	ldrb	r3, [r0, #11]
     17a:	2b00      	cmp	r3, #0
     17c:	d0e5      	beq.n	14a <_i2c_master_read+0x2a>
     17e:	8b83      	ldrh	r3, [r0, #28]
     180:	b29b      	uxth	r3, r3
     182:	2b00      	cmp	r3, #0
     184:	d1e1      	bne.n	14a <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     186:	6872      	ldr	r2, [r6, #4]
     188:	2380      	movs	r3, #128	; 0x80
     18a:	02db      	lsls	r3, r3, #11
     18c:	4313      	orrs	r3, r2
     18e:	6073      	str	r3, [r6, #4]
     190:	e7db      	b.n	14a <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     192:	0020      	movs	r0, r4
     194:	4b03      	ldr	r3, [pc, #12]	; (1a4 <_i2c_master_read+0x84>)
     196:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     198:	6872      	ldr	r2, [r6, #4]
     19a:	23c0      	movs	r3, #192	; 0xc0
     19c:	029b      	lsls	r3, r3, #10
     19e:	4313      	orrs	r3, r2
     1a0:	6073      	str	r3, [r6, #4]
     1a2:	e7d9      	b.n	158 <_i2c_master_read+0x38>
     1a4:	00000115 	.word	0x00000115

000001a8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     1a8:	b570      	push	{r4, r5, r6, lr}
     1aa:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     1ac:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     1ae:	8b6b      	ldrh	r3, [r5, #26]
     1b0:	075b      	lsls	r3, r3, #29
     1b2:	d503      	bpl.n	1bc <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     1b4:	221e      	movs	r2, #30
     1b6:	2325      	movs	r3, #37	; 0x25
     1b8:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     1ba:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     1bc:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     1be:	8b83      	ldrh	r3, [r0, #28]
     1c0:	1af6      	subs	r6, r6, r3
     1c2:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     1c4:	8b83      	ldrh	r3, [r0, #28]
     1c6:	3b01      	subs	r3, #1
     1c8:	b29b      	uxth	r3, r3
     1ca:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     1cc:	4b04      	ldr	r3, [pc, #16]	; (1e0 <_i2c_master_write+0x38>)
     1ce:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     1d0:	6a23      	ldr	r3, [r4, #32]
     1d2:	199e      	adds	r6, r3, r6
     1d4:	7833      	ldrb	r3, [r6, #0]
     1d6:	b2db      	uxtb	r3, r3
     1d8:	2228      	movs	r2, #40	; 0x28
     1da:	54ab      	strb	r3, [r5, r2]
     1dc:	e7ed      	b.n	1ba <_i2c_master_write+0x12>
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	00000115 	.word	0x00000115

000001e4 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     1e4:	b570      	push	{r4, r5, r6, lr}
     1e6:	0005      	movs	r5, r0
     1e8:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     1ea:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     1ec:	7a4b      	ldrb	r3, [r1, #9]
     1ee:	2b00      	cmp	r3, #0
     1f0:	d11a      	bne.n	228 <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     1f2:	6873      	ldr	r3, [r6, #4]
     1f4:	4a13      	ldr	r2, [pc, #76]	; (244 <_i2c_master_write_packet+0x60>)
     1f6:	4013      	ands	r3, r2
     1f8:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     1fa:	6863      	ldr	r3, [r4, #4]
     1fc:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     1fe:	8863      	ldrh	r3, [r4, #2]
     200:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     202:	2200      	movs	r2, #0
     204:	2324      	movs	r3, #36	; 0x24
     206:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     208:	3205      	adds	r2, #5
     20a:	3301      	adds	r3, #1
     20c:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     20e:	3b22      	subs	r3, #34	; 0x22
     210:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     212:	7a23      	ldrb	r3, [r4, #8]
     214:	2b00      	cmp	r3, #0
     216:	d10b      	bne.n	230 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     218:	8823      	ldrh	r3, [r4, #0]
     21a:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     21c:	7a62      	ldrb	r2, [r4, #9]
     21e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     220:	4313      	orrs	r3, r2
     222:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     224:	2000      	movs	r0, #0
     226:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     228:	7a89      	ldrb	r1, [r1, #10]
     22a:	4b07      	ldr	r3, [pc, #28]	; (248 <_i2c_master_write_packet+0x64>)
     22c:	4798      	blx	r3
     22e:	e7e0      	b.n	1f2 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     230:	8823      	ldrh	r3, [r4, #0]
     232:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     234:	7a62      	ldrb	r2, [r4, #9]
     236:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     238:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     23a:	2280      	movs	r2, #128	; 0x80
     23c:	0212      	lsls	r2, r2, #8
     23e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     240:	6273      	str	r3, [r6, #36]	; 0x24
     242:	e7ef      	b.n	224 <_i2c_master_write_packet+0x40>
     244:	fffbffff 	.word	0xfffbffff
     248:	00001ec5 	.word	0x00001ec5

0000024c <_i2c_master_read_packet>:
{
     24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     24e:	0005      	movs	r5, r0
     250:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     252:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
     254:	684b      	ldr	r3, [r1, #4]
     256:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     258:	884b      	ldrh	r3, [r1, #2]
     25a:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     25c:	2201      	movs	r2, #1
     25e:	2324      	movs	r3, #36	; 0x24
     260:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     262:	3204      	adds	r2, #4
     264:	3301      	adds	r3, #1
     266:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     268:	6837      	ldr	r7, [r6, #0]
     26a:	013f      	lsls	r7, r7, #4
     26c:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
     26e:	7a4b      	ldrb	r3, [r1, #9]
     270:	2b00      	cmp	r3, #0
     272:	d117      	bne.n	2a4 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
     274:	2f00      	cmp	r7, #0
     276:	d002      	beq.n	27e <_i2c_master_read_packet+0x32>
     278:	8863      	ldrh	r3, [r4, #2]
     27a:	2b01      	cmp	r3, #1
     27c:	d016      	beq.n	2ac <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     27e:	6873      	ldr	r3, [r6, #4]
     280:	4a20      	ldr	r2, [pc, #128]	; (304 <_i2c_master_read_packet+0xb8>)
     282:	4013      	ands	r3, r2
     284:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
     286:	7a23      	ldrb	r3, [r4, #8]
     288:	2b00      	cmp	r3, #0
     28a:	d115      	bne.n	2b8 <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
     28c:	2303      	movs	r3, #3
     28e:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     290:	8823      	ldrh	r3, [r4, #0]
     292:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     294:	7a62      	ldrb	r2, [r4, #9]
     296:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     298:	4313      	orrs	r3, r2
     29a:	2201      	movs	r2, #1
     29c:	4313      	orrs	r3, r2
     29e:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
     2a0:	2000      	movs	r0, #0
}
     2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     2a4:	7a89      	ldrb	r1, [r1, #10]
     2a6:	4b18      	ldr	r3, [pc, #96]	; (308 <_i2c_master_read_packet+0xbc>)
     2a8:	4798      	blx	r3
     2aa:	e7e3      	b.n	274 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     2ac:	6872      	ldr	r2, [r6, #4]
     2ae:	2380      	movs	r3, #128	; 0x80
     2b0:	02db      	lsls	r3, r3, #11
     2b2:	4313      	orrs	r3, r2
     2b4:	6073      	str	r3, [r6, #4]
     2b6:	e7e6      	b.n	286 <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     2b8:	8823      	ldrh	r3, [r4, #0]
     2ba:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     2bc:	7a62      	ldrb	r2, [r4, #9]
     2be:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     2c0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     2c2:	2280      	movs	r2, #128	; 0x80
     2c4:	0212      	lsls	r2, r2, #8
     2c6:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     2c8:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     2ca:	0028      	movs	r0, r5
     2cc:	4b0f      	ldr	r3, [pc, #60]	; (30c <_i2c_master_read_packet+0xc0>)
     2ce:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     2d0:	6873      	ldr	r3, [r6, #4]
     2d2:	4a0c      	ldr	r2, [pc, #48]	; (304 <_i2c_master_read_packet+0xb8>)
     2d4:	4013      	ands	r3, r2
     2d6:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     2d8:	2800      	cmp	r0, #0
     2da:	d1e2      	bne.n	2a2 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     2dc:	0028      	movs	r0, r5
     2de:	4b0c      	ldr	r3, [pc, #48]	; (310 <_i2c_master_read_packet+0xc4>)
     2e0:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     2e2:	2800      	cmp	r0, #0
     2e4:	d1dd      	bne.n	2a2 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     2e6:	2303      	movs	r3, #3
     2e8:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     2ea:	8823      	ldrh	r3, [r4, #0]
     2ec:	0a1b      	lsrs	r3, r3, #8
     2ee:	2278      	movs	r2, #120	; 0x78
     2f0:	4313      	orrs	r3, r2
     2f2:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     2f4:	7a62      	ldrb	r2, [r4, #9]
     2f6:	0392      	lsls	r2, r2, #14
     2f8:	2101      	movs	r1, #1
     2fa:	430a      	orrs	r2, r1
     2fc:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     2fe:	6273      	str	r3, [r6, #36]	; 0x24
     300:	e7cf      	b.n	2a2 <_i2c_master_read_packet+0x56>
     302:	46c0      	nop			; (mov r8, r8)
     304:	fffbffff 	.word	0xfffbffff
     308:	00001ec5 	.word	0x00001ec5
     30c:	00001e99 	.word	0x00001e99
     310:	00001e69 	.word	0x00001e69

00000314 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     314:	1c93      	adds	r3, r2, #2
     316:	009b      	lsls	r3, r3, #2
     318:	18c3      	adds	r3, r0, r3
     31a:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     31c:	7e03      	ldrb	r3, [r0, #24]
     31e:	2101      	movs	r1, #1
     320:	4091      	lsls	r1, r2
     322:	430b      	orrs	r3, r1
     324:	b2db      	uxtb	r3, r3
     326:	7603      	strb	r3, [r0, #24]
}
     328:	4770      	bx	lr
	...

0000032c <i2c_master_read_packet_job>:
{
     32c:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     32e:	8b83      	ldrh	r3, [r0, #28]
     330:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     332:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     334:	2b00      	cmp	r3, #0
     336:	d001      	beq.n	33c <i2c_master_read_packet_job+0x10>
}
     338:	0010      	movs	r0, r2
     33a:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     33c:	3301      	adds	r3, #1
     33e:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     340:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     342:	4b02      	ldr	r3, [pc, #8]	; (34c <i2c_master_read_packet_job+0x20>)
     344:	4798      	blx	r3
     346:	0002      	movs	r2, r0
     348:	e7f6      	b.n	338 <i2c_master_read_packet_job+0xc>
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	0000024d 	.word	0x0000024d

00000350 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     350:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     352:	8b83      	ldrh	r3, [r0, #28]
     354:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     356:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     358:	2b00      	cmp	r3, #0
     35a:	d001      	beq.n	360 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     35c:	0010      	movs	r0, r2
     35e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     360:	3301      	adds	r3, #1
     362:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     364:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     366:	4b02      	ldr	r3, [pc, #8]	; (370 <i2c_master_write_packet_job+0x20>)
     368:	4798      	blx	r3
     36a:	0002      	movs	r2, r0
     36c:	e7f6      	b.n	35c <i2c_master_write_packet_job+0xc>
     36e:	46c0      	nop			; (mov r8, r8)
     370:	000001e5 	.word	0x000001e5

00000374 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     374:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     376:	0080      	lsls	r0, r0, #2
     378:	4b75      	ldr	r3, [pc, #468]	; (550 <_i2c_master_interrupt_handler+0x1dc>)
     37a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     37c:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     37e:	682b      	ldr	r3, [r5, #0]
     380:	011b      	lsls	r3, r3, #4
     382:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     384:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     386:	7e26      	ldrb	r6, [r4, #24]
     388:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     38a:	8b63      	ldrh	r3, [r4, #26]
     38c:	b29b      	uxth	r3, r3
     38e:	2b00      	cmp	r3, #0
     390:	d103      	bne.n	39a <_i2c_master_interrupt_handler+0x26>
     392:	8ba3      	ldrh	r3, [r4, #28]
     394:	b29b      	uxth	r3, r3
     396:	2b00      	cmp	r3, #0
     398:	d123      	bne.n	3e2 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     39a:	8b63      	ldrh	r3, [r4, #26]
     39c:	b29b      	uxth	r3, r3
     39e:	2b00      	cmp	r3, #0
     3a0:	d008      	beq.n	3b4 <_i2c_master_interrupt_handler+0x40>
     3a2:	8ba3      	ldrh	r3, [r4, #28]
     3a4:	b29b      	uxth	r3, r3
     3a6:	2b00      	cmp	r3, #0
     3a8:	d104      	bne.n	3b4 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     3aa:	3325      	adds	r3, #37	; 0x25
     3ac:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     3ae:	2b05      	cmp	r3, #5
     3b0:	d100      	bne.n	3b4 <_i2c_master_interrupt_handler+0x40>
     3b2:	e06d      	b.n	490 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     3b4:	8b63      	ldrh	r3, [r4, #26]
     3b6:	b29b      	uxth	r3, r3
     3b8:	2b00      	cmp	r3, #0
     3ba:	d024      	beq.n	406 <_i2c_master_interrupt_handler+0x92>
     3bc:	8ba3      	ldrh	r3, [r4, #28]
     3be:	b29b      	uxth	r3, r3
     3c0:	2b00      	cmp	r3, #0
     3c2:	d020      	beq.n	406 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     3c4:	8b6b      	ldrh	r3, [r5, #26]
     3c6:	069b      	lsls	r3, r3, #26
     3c8:	d500      	bpl.n	3cc <_i2c_master_interrupt_handler+0x58>
     3ca:	e081      	b.n	4d0 <_i2c_master_interrupt_handler+0x15c>
     3cc:	2a00      	cmp	r2, #0
     3ce:	d004      	beq.n	3da <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     3d0:	8ba3      	ldrh	r3, [r4, #28]
     3d2:	b29b      	uxth	r3, r3
     3d4:	2b01      	cmp	r3, #1
     3d6:	d100      	bne.n	3da <_i2c_master_interrupt_handler+0x66>
     3d8:	e07a      	b.n	4d0 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     3da:	2241      	movs	r2, #65	; 0x41
     3dc:	2325      	movs	r3, #37	; 0x25
     3de:	54e2      	strb	r2, [r4, r3]
     3e0:	e011      	b.n	406 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     3e2:	7e2b      	ldrb	r3, [r5, #24]
     3e4:	07db      	lsls	r3, r3, #31
     3e6:	d507      	bpl.n	3f8 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     3e8:	2301      	movs	r3, #1
     3ea:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     3ec:	8b6b      	ldrh	r3, [r5, #26]
     3ee:	079b      	lsls	r3, r3, #30
     3f0:	d52e      	bpl.n	450 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     3f2:	2241      	movs	r2, #65	; 0x41
     3f4:	2325      	movs	r3, #37	; 0x25
     3f6:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     3f8:	8ba3      	ldrh	r3, [r4, #28]
     3fa:	b29b      	uxth	r3, r3
     3fc:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     3fe:	2325      	movs	r3, #37	; 0x25
     400:	5ce3      	ldrb	r3, [r4, r3]
     402:	2b05      	cmp	r3, #5
     404:	d038      	beq.n	478 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     406:	8b63      	ldrh	r3, [r4, #26]
     408:	b29b      	uxth	r3, r3
     40a:	2b00      	cmp	r3, #0
     40c:	d007      	beq.n	41e <_i2c_master_interrupt_handler+0xaa>
     40e:	8ba3      	ldrh	r3, [r4, #28]
     410:	b29b      	uxth	r3, r3
     412:	2b00      	cmp	r3, #0
     414:	d103      	bne.n	41e <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     416:	3325      	adds	r3, #37	; 0x25
     418:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     41a:	2b05      	cmp	r3, #5
     41c:	d064      	beq.n	4e8 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     41e:	2325      	movs	r3, #37	; 0x25
     420:	5ce3      	ldrb	r3, [r4, r3]
     422:	2b05      	cmp	r3, #5
     424:	d013      	beq.n	44e <_i2c_master_interrupt_handler+0xda>
     426:	2325      	movs	r3, #37	; 0x25
     428:	5ce3      	ldrb	r3, [r4, r3]
     42a:	2b00      	cmp	r3, #0
     42c:	d00f      	beq.n	44e <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     42e:	2303      	movs	r3, #3
     430:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     432:	2300      	movs	r3, #0
     434:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     436:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     438:	3325      	adds	r3, #37	; 0x25
     43a:	5ce3      	ldrb	r3, [r4, r3]
     43c:	2b41      	cmp	r3, #65	; 0x41
     43e:	d003      	beq.n	448 <_i2c_master_interrupt_handler+0xd4>
     440:	7aa3      	ldrb	r3, [r4, #10]
     442:	2b00      	cmp	r3, #0
     444:	d000      	beq.n	448 <_i2c_master_interrupt_handler+0xd4>
     446:	e075      	b.n	534 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     448:	0773      	lsls	r3, r6, #29
     44a:	d500      	bpl.n	44e <_i2c_master_interrupt_handler+0xda>
     44c:	e07b      	b.n	546 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     44e:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     450:	8b6b      	ldrh	r3, [r5, #26]
     452:	075b      	lsls	r3, r3, #29
     454:	d5d0      	bpl.n	3f8 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     456:	2218      	movs	r2, #24
     458:	2325      	movs	r3, #37	; 0x25
     45a:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     45c:	2300      	movs	r3, #0
     45e:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     460:	7aa3      	ldrb	r3, [r4, #10]
     462:	2b00      	cmp	r3, #0
     464:	d0c8      	beq.n	3f8 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     466:	0020      	movs	r0, r4
     468:	4b3a      	ldr	r3, [pc, #232]	; (554 <_i2c_master_interrupt_handler+0x1e0>)
     46a:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     46c:	686a      	ldr	r2, [r5, #4]
     46e:	23c0      	movs	r3, #192	; 0xc0
     470:	029b      	lsls	r3, r3, #10
     472:	4313      	orrs	r3, r2
     474:	606b      	str	r3, [r5, #4]
     476:	e7bf      	b.n	3f8 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     478:	331f      	adds	r3, #31
     47a:	5ce3      	ldrb	r3, [r4, r3]
     47c:	2b00      	cmp	r3, #0
     47e:	d003      	beq.n	488 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     480:	0020      	movs	r0, r4
     482:	4b35      	ldr	r3, [pc, #212]	; (558 <_i2c_master_interrupt_handler+0x1e4>)
     484:	4798      	blx	r3
     486:	e7be      	b.n	406 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     488:	0020      	movs	r0, r4
     48a:	4b34      	ldr	r3, [pc, #208]	; (55c <_i2c_master_interrupt_handler+0x1e8>)
     48c:	4798      	blx	r3
     48e:	e7ba      	b.n	406 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     490:	331f      	adds	r3, #31
     492:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     494:	2b00      	cmp	r3, #0
     496:	d000      	beq.n	49a <_i2c_master_interrupt_handler+0x126>
     498:	e78c      	b.n	3b4 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     49a:	3303      	adds	r3, #3
     49c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     49e:	2300      	movs	r3, #0
     4a0:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     4a2:	3325      	adds	r3, #37	; 0x25
     4a4:	2200      	movs	r2, #0
     4a6:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     4a8:	7aa3      	ldrb	r3, [r4, #10]
     4aa:	2b00      	cmp	r3, #0
     4ac:	d107      	bne.n	4be <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     4ae:	2301      	movs	r3, #1
     4b0:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     4b2:	07f3      	lsls	r3, r6, #31
     4b4:	d5a7      	bpl.n	406 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     4b6:	68e3      	ldr	r3, [r4, #12]
     4b8:	0020      	movs	r0, r4
     4ba:	4798      	blx	r3
     4bc:	e7a3      	b.n	406 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     4be:	0020      	movs	r0, r4
     4c0:	4b24      	ldr	r3, [pc, #144]	; (554 <_i2c_master_interrupt_handler+0x1e0>)
     4c2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     4c4:	686a      	ldr	r2, [r5, #4]
     4c6:	23c0      	movs	r3, #192	; 0xc0
     4c8:	029b      	lsls	r3, r3, #10
     4ca:	4313      	orrs	r3, r2
     4cc:	606b      	str	r3, [r5, #4]
     4ce:	e7f0      	b.n	4b2 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     4d0:	2324      	movs	r3, #36	; 0x24
     4d2:	5ce3      	ldrb	r3, [r4, r3]
     4d4:	2b00      	cmp	r3, #0
     4d6:	d103      	bne.n	4e0 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     4d8:	0020      	movs	r0, r4
     4da:	4b20      	ldr	r3, [pc, #128]	; (55c <_i2c_master_interrupt_handler+0x1e8>)
     4dc:	4798      	blx	r3
     4de:	e792      	b.n	406 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     4e0:	0020      	movs	r0, r4
     4e2:	4b1d      	ldr	r3, [pc, #116]	; (558 <_i2c_master_interrupt_handler+0x1e4>)
     4e4:	4798      	blx	r3
     4e6:	e78e      	b.n	406 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     4e8:	331f      	adds	r3, #31
     4ea:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     4ec:	2b01      	cmp	r3, #1
     4ee:	d196      	bne.n	41e <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     4f0:	7e2b      	ldrb	r3, [r5, #24]
     4f2:	079b      	lsls	r3, r3, #30
     4f4:	d501      	bpl.n	4fa <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     4f6:	2302      	movs	r3, #2
     4f8:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     4fa:	2303      	movs	r3, #3
     4fc:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     4fe:	2300      	movs	r3, #0
     500:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     502:	3325      	adds	r3, #37	; 0x25
     504:	2200      	movs	r2, #0
     506:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     508:	07b3      	lsls	r3, r6, #30
     50a:	d503      	bpl.n	514 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     50c:	2324      	movs	r3, #36	; 0x24
     50e:	5ce3      	ldrb	r3, [r4, r3]
     510:	2b01      	cmp	r3, #1
     512:	d00b      	beq.n	52c <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     514:	07f3      	lsls	r3, r6, #31
     516:	d400      	bmi.n	51a <_i2c_master_interrupt_handler+0x1a6>
     518:	e781      	b.n	41e <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     51a:	2324      	movs	r3, #36	; 0x24
     51c:	5ce3      	ldrb	r3, [r4, r3]
     51e:	2b00      	cmp	r3, #0
     520:	d000      	beq.n	524 <_i2c_master_interrupt_handler+0x1b0>
     522:	e77c      	b.n	41e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     524:	68e3      	ldr	r3, [r4, #12]
     526:	0020      	movs	r0, r4
     528:	4798      	blx	r3
     52a:	e778      	b.n	41e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     52c:	6923      	ldr	r3, [r4, #16]
     52e:	0020      	movs	r0, r4
     530:	4798      	blx	r3
     532:	e774      	b.n	41e <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     534:	0020      	movs	r0, r4
     536:	4b07      	ldr	r3, [pc, #28]	; (554 <_i2c_master_interrupt_handler+0x1e0>)
     538:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     53a:	686a      	ldr	r2, [r5, #4]
     53c:	23e0      	movs	r3, #224	; 0xe0
     53e:	02db      	lsls	r3, r3, #11
     540:	4313      	orrs	r3, r2
     542:	606b      	str	r3, [r5, #4]
     544:	e780      	b.n	448 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     546:	6963      	ldr	r3, [r4, #20]
     548:	0020      	movs	r0, r4
     54a:	4798      	blx	r3
}
     54c:	e77f      	b.n	44e <_i2c_master_interrupt_handler+0xda>
     54e:	46c0      	nop			; (mov r8, r8)
     550:	20004e1c 	.word	0x20004e1c
     554:	00000115 	.word	0x00000115
     558:	00000121 	.word	0x00000121
     55c:	000001a9 	.word	0x000001a9

00000560 <null_ptr_check>:
/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
    int8_t rslt = BME68X_OK;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay__us == NULL))
     560:	2800      	cmp	r0, #0
     562:	d00a      	beq.n	57a <null_ptr_check+0x1a>
     564:	6c03      	ldr	r3, [r0, #64]	; 0x40
     566:	2b00      	cmp	r3, #0
     568:	d00a      	beq.n	580 <null_ptr_check+0x20>
     56a:	6c43      	ldr	r3, [r0, #68]	; 0x44
     56c:	2b00      	cmp	r3, #0
     56e:	d00a      	beq.n	586 <null_ptr_check+0x26>
     570:	6c83      	ldr	r3, [r0, #72]	; 0x48
     572:	4258      	negs	r0, r3
     574:	4158      	adcs	r0, r3
     576:	4240      	negs	r0, r0
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
    }

    return rslt;
}
     578:	4770      	bx	lr
        rslt = BME68X_E_NULL_PTR;
     57a:	2001      	movs	r0, #1
     57c:	4240      	negs	r0, r0
     57e:	e7fb      	b.n	578 <null_ptr_check+0x18>
     580:	2001      	movs	r0, #1
     582:	4240      	negs	r0, r0
     584:	e7f8      	b.n	578 <null_ptr_check+0x18>
     586:	2001      	movs	r0, #1
     588:	4240      	negs	r0, r0
     58a:	e7f5      	b.n	578 <null_ptr_check+0x18>

0000058c <set_mem_page>:
{
     58c:	b530      	push	{r4, r5, lr}
     58e:	b083      	sub	sp, #12
     590:	0004      	movs	r4, r0
     592:	000d      	movs	r5, r1
    rslt = null_ptr_check(dev);
     594:	0008      	movs	r0, r1
     596:	4b18      	ldr	r3, [pc, #96]	; (5f8 <set_mem_page+0x6c>)
     598:	4798      	blx	r3
    if (rslt == BME68X_OK)
     59a:	2800      	cmp	r0, #0
     59c:	d114      	bne.n	5c8 <set_mem_page+0x3c>
        if (reg_addr > 0x7f)
     59e:	b263      	sxtb	r3, r4
            mem_page = BME68X_MEM_PAGE0;
     5a0:	43db      	mvns	r3, r3
     5a2:	0fdb      	lsrs	r3, r3, #31
     5a4:	011b      	lsls	r3, r3, #4
        if (mem_page != dev->mem_page)
     5a6:	7b6a      	ldrb	r2, [r5, #13]
     5a8:	429a      	cmp	r2, r3
     5aa:	d00d      	beq.n	5c8 <set_mem_page+0x3c>
            dev->mem_page = mem_page;
     5ac:	736b      	strb	r3, [r5, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
     5ae:	686b      	ldr	r3, [r5, #4]
     5b0:	2201      	movs	r2, #1
     5b2:	4669      	mov	r1, sp
     5b4:	3107      	adds	r1, #7
     5b6:	30f3      	adds	r0, #243	; 0xf3
     5b8:	6c2c      	ldr	r4, [r5, #64]	; 0x40
     5ba:	47a0      	blx	r4
     5bc:	234c      	movs	r3, #76	; 0x4c
     5be:	54e8      	strb	r0, [r5, r3]
            if (dev->intf_rslt != 0)
     5c0:	2800      	cmp	r0, #0
     5c2:	d003      	beq.n	5cc <set_mem_page+0x40>
                rslt = BME68X_E_COM_FAIL;
     5c4:	2002      	movs	r0, #2
     5c6:	4240      	negs	r0, r0
}
     5c8:	b003      	add	sp, #12
     5ca:	bd30      	pop	{r4, r5, pc}
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
     5cc:	466b      	mov	r3, sp
     5ce:	1dd9      	adds	r1, r3, #7
     5d0:	7b6a      	ldrb	r2, [r5, #13]
     5d2:	2310      	movs	r3, #16
     5d4:	4013      	ands	r3, r2
                reg = reg & (~BME68X_MEM_PAGE_MSK);
     5d6:	780a      	ldrb	r2, [r1, #0]
     5d8:	2010      	movs	r0, #16
     5da:	4382      	bics	r2, r0
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
     5dc:	4313      	orrs	r3, r2
     5de:	700b      	strb	r3, [r1, #0]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
     5e0:	686b      	ldr	r3, [r5, #4]
     5e2:	2201      	movs	r2, #1
     5e4:	3063      	adds	r0, #99	; 0x63
     5e6:	6c6c      	ldr	r4, [r5, #68]	; 0x44
     5e8:	47a0      	blx	r4
     5ea:	224c      	movs	r2, #76	; 0x4c
     5ec:	54a8      	strb	r0, [r5, r2]
                if (dev->intf_rslt != 0)
     5ee:	2800      	cmp	r0, #0
     5f0:	d0ea      	beq.n	5c8 <set_mem_page+0x3c>
                    rslt = BME68X_E_COM_FAIL;
     5f2:	2002      	movs	r0, #2
     5f4:	4240      	negs	r0, r0
    return rslt;
     5f6:	e7e7      	b.n	5c8 <set_mem_page+0x3c>
     5f8:	00000561 	.word	0x00000561

000005fc <get_mem_page>:
{
     5fc:	b530      	push	{r4, r5, lr}
     5fe:	b083      	sub	sp, #12
     600:	0004      	movs	r4, r0
    rslt = null_ptr_check(dev);
     602:	4b0d      	ldr	r3, [pc, #52]	; (638 <get_mem_page+0x3c>)
     604:	4798      	blx	r3
    if (rslt == BME68X_OK)
     606:	2800      	cmp	r0, #0
     608:	d001      	beq.n	60e <get_mem_page+0x12>
}
     60a:	b003      	add	sp, #12
     60c:	bd30      	pop	{r4, r5, pc}
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
     60e:	6863      	ldr	r3, [r4, #4]
     610:	2201      	movs	r2, #1
     612:	4669      	mov	r1, sp
     614:	3107      	adds	r1, #7
     616:	30f3      	adds	r0, #243	; 0xf3
     618:	6c25      	ldr	r5, [r4, #64]	; 0x40
     61a:	47a8      	blx	r5
     61c:	224c      	movs	r2, #76	; 0x4c
     61e:	54a0      	strb	r0, [r4, r2]
        if (dev->intf_rslt != 0)
     620:	2800      	cmp	r0, #0
     622:	d105      	bne.n	630 <get_mem_page+0x34>
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
     624:	466b      	mov	r3, sp
     626:	79da      	ldrb	r2, [r3, #7]
     628:	2310      	movs	r3, #16
     62a:	4013      	ands	r3, r2
     62c:	7363      	strb	r3, [r4, #13]
     62e:	e7ec      	b.n	60a <get_mem_page+0xe>
            rslt = BME68X_E_COM_FAIL;
     630:	2002      	movs	r0, #2
     632:	4240      	negs	r0, r0
     634:	e7e9      	b.n	60a <get_mem_page+0xe>
     636:	46c0      	nop			; (mov r8, r8)
     638:	00000561 	.word	0x00000561

0000063c <bme68x_i2c_read>:

/*!
 * I2C read function map to SAMD21 Platform
 */
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
     63c:	b570      	push	{r4, r5, r6, lr}
     63e:	b082      	sub	sp, #8
     640:	000e      	movs	r6, r1
     642:	0015      	movs	r5, r2
    uint8_t device_addr = *(uint8_t*)intf_ptr;
     644:	7819      	ldrb	r1, [r3, #0]

    (void)intf_ptr;
	
	uint8_t reg_add;
	
	Bme680Data.lenIn = len;
     646:	4b0c      	ldr	r3, [pc, #48]	; (678 <bme68x_i2c_read+0x3c>)
     648:	819a      	strh	r2, [r3, #12]
	Bme680Data.msgIn = MsgOutBme680;
     64a:	4c0c      	ldr	r4, [pc, #48]	; (67c <bme68x_i2c_read+0x40>)
     64c:	609c      	str	r4, [r3, #8]
	
	reg_add = reg_addr;
     64e:	466a      	mov	r2, sp
     650:	71d0      	strb	r0, [r2, #7]
     652:	3207      	adds	r2, #7
	Bme680Data.msgOut = &reg_add;
     654:	605a      	str	r2, [r3, #4]
	Bme680Data.lenOut = 1;
     656:	2201      	movs	r2, #1
     658:	81da      	strh	r2, [r3, #14]
	Bme680Data.address = device_addr;
     65a:	7019      	strb	r1, [r3, #0]
	
	I2cReadDataWait(&Bme680Data, 0, 1000);
     65c:	22fa      	movs	r2, #250	; 0xfa
     65e:	0092      	lsls	r2, r2, #2
     660:	2100      	movs	r1, #0
     662:	0018      	movs	r0, r3
     664:	4b06      	ldr	r3, [pc, #24]	; (680 <bme68x_i2c_read+0x44>)
     666:	4798      	blx	r3
	memcpy(reg_data, MsgOutBme680, len);
     668:	002a      	movs	r2, r5
     66a:	0021      	movs	r1, r4
     66c:	0030      	movs	r0, r6
     66e:	4b05      	ldr	r3, [pc, #20]	; (684 <bme68x_i2c_read+0x48>)
     670:	4798      	blx	r3
	
	return BME68X_INTF_RET_SUCCESS;
}
     672:	2000      	movs	r0, #0
     674:	b002      	add	sp, #8
     676:	bd70      	pop	{r4, r5, r6, pc}
     678:	20003854 	.word	0x20003854
     67c:	20003864 	.word	0x20003864
     680:	0000102d 	.word	0x0000102d
     684:	00009a7d 	.word	0x00009a7d

00000688 <bme68x_i2c_write>:

/*!
 * I2C write function map to SAMD21 Platform
 */
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
     688:	b570      	push	{r4, r5, r6, lr}
    uint8_t device_addr = *(uint8_t*)intf_ptr;
     68a:	781d      	ldrb	r5, [r3, #0]

    (void)intf_ptr;
	
	Bme680Data.lenIn = 0;
     68c:	4c09      	ldr	r4, [pc, #36]	; (6b4 <bme68x_i2c_write+0x2c>)
     68e:	2300      	movs	r3, #0
     690:	81a3      	strh	r3, [r4, #12]
	Bme680Data.lenOut = len+1; // accounting for register write byte as well.
     692:	1c53      	adds	r3, r2, #1
     694:	81e3      	strh	r3, [r4, #14]
	Bme680Data.msgIn =  MsgOutBme680;
     696:	4b08      	ldr	r3, [pc, #32]	; (6b8 <bme68x_i2c_write+0x30>)
     698:	60a3      	str	r3, [r4, #8]
	Bme680Data.msgOut = MsgOutBme680;
     69a:	6063      	str	r3, [r4, #4]
	Bme680Data.address = device_addr;
     69c:	7025      	strb	r5, [r4, #0]
	MsgOutBme680[0] = reg_addr;
     69e:	7018      	strb	r0, [r3, #0]
	
	/* Copying data into buffer starting from 2nd byte */
	memcpy(&MsgOutBme680[1], reg_data, len);
     6a0:	1c58      	adds	r0, r3, #1
     6a2:	4b06      	ldr	r3, [pc, #24]	; (6bc <bme68x_i2c_write+0x34>)
     6a4:	4798      	blx	r3
	I2cWriteDataWait(&Bme680Data, 1000);
     6a6:	21fa      	movs	r1, #250	; 0xfa
     6a8:	0089      	lsls	r1, r1, #2
     6aa:	0020      	movs	r0, r4
     6ac:	4b04      	ldr	r3, [pc, #16]	; (6c0 <bme68x_i2c_write+0x38>)
     6ae:	4798      	blx	r3
	
	return BME68X_INTF_RET_SUCCESS;
}
     6b0:	2000      	movs	r0, #0
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20003854 	.word	0x20003854
     6b8:	20003864 	.word	0x20003864
     6bc:	00009a7d 	.word	0x00009a7d
     6c0:	00000fcd 	.word	0x00000fcd

000006c4 <bme68x_delay__us>:

/*!
 * Delay function map to SAMD21 Platform
 */
void bme68x_delay__us(uint32_t period, void *intf_ptr)
{
     6c4:	b510      	push	{r4, lr}
    (void)intf_ptr;
	vTaskDelay(pdMS_TO_TICKS((uint32_t) period / 1000.0f));  // Best I could do.
     6c6:	4b07      	ldr	r3, [pc, #28]	; (6e4 <bme68x_delay__us+0x20>)
     6c8:	4798      	blx	r3
     6ca:	4907      	ldr	r1, [pc, #28]	; (6e8 <bme68x_delay__us+0x24>)
     6cc:	4b07      	ldr	r3, [pc, #28]	; (6ec <bme68x_delay__us+0x28>)
     6ce:	4798      	blx	r3
     6d0:	4b07      	ldr	r3, [pc, #28]	; (6f0 <bme68x_delay__us+0x2c>)
     6d2:	4798      	blx	r3
     6d4:	21fa      	movs	r1, #250	; 0xfa
     6d6:	0089      	lsls	r1, r1, #2
     6d8:	4348      	muls	r0, r1
     6da:	4b06      	ldr	r3, [pc, #24]	; (6f4 <bme68x_delay__us+0x30>)
     6dc:	4798      	blx	r3
     6de:	4b06      	ldr	r3, [pc, #24]	; (6f8 <bme68x_delay__us+0x34>)
     6e0:	4798      	blx	r3
}
     6e2:	bd10      	pop	{r4, pc}
     6e4:	000080c1 	.word	0x000080c1
     6e8:	447a0000 	.word	0x447a0000
     6ec:	00007689 	.word	0x00007689
     6f0:	00007659 	.word	0x00007659
     6f4:	00007479 	.word	0x00007479
     6f8:	00004dc9 	.word	0x00004dc9

000006fc <bme68x_set_regs>:
{
     6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fe:	46de      	mov	lr, fp
     700:	4657      	mov	r7, sl
     702:	464e      	mov	r6, r9
     704:	4645      	mov	r5, r8
     706:	b5e0      	push	{r5, r6, r7, lr}
     708:	b087      	sub	sp, #28
     70a:	4681      	mov	r9, r0
     70c:	468a      	mov	sl, r1
     70e:	4690      	mov	r8, r2
     710:	001f      	movs	r7, r3
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
     712:	2214      	movs	r2, #20
     714:	2100      	movs	r1, #0
     716:	a801      	add	r0, sp, #4
     718:	4b2e      	ldr	r3, [pc, #184]	; (7d4 <bme68x_set_regs+0xd8>)
     71a:	4798      	blx	r3
    rslt = null_ptr_check(dev);
     71c:	0038      	movs	r0, r7
     71e:	4b2e      	ldr	r3, [pc, #184]	; (7d8 <bme68x_set_regs+0xdc>)
     720:	4798      	blx	r3
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
     722:	2800      	cmp	r0, #0
     724:	d149      	bne.n	7ba <bme68x_set_regs+0xbe>
     726:	464b      	mov	r3, r9
     728:	2b00      	cmp	r3, #0
     72a:	d049      	beq.n	7c0 <bme68x_set_regs+0xc4>
     72c:	4653      	mov	r3, sl
     72e:	2b00      	cmp	r3, #0
     730:	d049      	beq.n	7c6 <bme68x_set_regs+0xca>
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
     732:	4643      	mov	r3, r8
     734:	3b01      	subs	r3, #1
     736:	2b09      	cmp	r3, #9
     738:	d848      	bhi.n	7cc <bme68x_set_regs+0xd0>
            for (index = 0; index < len; index++)
     73a:	4643      	mov	r3, r8
     73c:	2b00      	cmp	r3, #0
     73e:	d02b      	beq.n	798 <bme68x_set_regs+0x9c>
     740:	2500      	movs	r5, #0
     742:	2400      	movs	r4, #0
                    tmp_buff[(2 * index)] = reg_addr[index];
     744:	ae01      	add	r6, sp, #4
     746:	e016      	b.n	776 <bme68x_set_regs+0x7a>
                    rslt = set_mem_page(reg_addr[index], dev);
     748:	46ab      	mov	fp, r5
     74a:	44cb      	add	fp, r9
     74c:	465b      	mov	r3, fp
     74e:	7818      	ldrb	r0, [r3, #0]
     750:	0039      	movs	r1, r7
     752:	4b22      	ldr	r3, [pc, #136]	; (7dc <bme68x_set_regs+0xe0>)
     754:	4798      	blx	r3
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
     756:	0063      	lsls	r3, r4, #1
     758:	465a      	mov	r2, fp
     75a:	7812      	ldrb	r2, [r2, #0]
     75c:	217f      	movs	r1, #127	; 0x7f
     75e:	400a      	ands	r2, r1
     760:	559a      	strb	r2, [r3, r6]
                tmp_buff[(2 * index) + 1] = reg_data[index];
     762:	0063      	lsls	r3, r4, #1
     764:	18f3      	adds	r3, r6, r3
     766:	4652      	mov	r2, sl
     768:	5d52      	ldrb	r2, [r2, r5]
     76a:	705a      	strb	r2, [r3, #1]
            for (index = 0; index < len; index++)
     76c:	3401      	adds	r4, #1
     76e:	b2a4      	uxth	r4, r4
     770:	0025      	movs	r5, r4
     772:	45a0      	cmp	r8, r4
     774:	d907      	bls.n	786 <bme68x_set_regs+0x8a>
                if (dev->intf == BME68X_SPI_INTF)
     776:	7b3b      	ldrb	r3, [r7, #12]
     778:	2b00      	cmp	r3, #0
     77a:	d0e5      	beq.n	748 <bme68x_set_regs+0x4c>
                    tmp_buff[(2 * index)] = reg_addr[index];
     77c:	0063      	lsls	r3, r4, #1
     77e:	464a      	mov	r2, r9
     780:	5d52      	ldrb	r2, [r2, r5]
     782:	559a      	strb	r2, [r3, r6]
     784:	e7ed      	b.n	762 <bme68x_set_regs+0x66>
            if (rslt == BME68X_OK)
     786:	2800      	cmp	r0, #0
     788:	d006      	beq.n	798 <bme68x_set_regs+0x9c>
}
     78a:	b007      	add	sp, #28
     78c:	bc3c      	pop	{r2, r3, r4, r5}
     78e:	4690      	mov	r8, r2
     790:	4699      	mov	r9, r3
     792:	46a2      	mov	sl, r4
     794:	46ab      	mov	fp, r5
     796:	bdf0      	pop	{r4, r5, r6, r7, pc}
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
     798:	4643      	mov	r3, r8
     79a:	005a      	lsls	r2, r3, #1
     79c:	3a01      	subs	r2, #1
     79e:	ab01      	add	r3, sp, #4
     7a0:	7818      	ldrb	r0, [r3, #0]
     7a2:	687b      	ldr	r3, [r7, #4]
     7a4:	4669      	mov	r1, sp
     7a6:	3105      	adds	r1, #5
     7a8:	6c7c      	ldr	r4, [r7, #68]	; 0x44
     7aa:	47a0      	blx	r4
     7ac:	224c      	movs	r2, #76	; 0x4c
     7ae:	54b8      	strb	r0, [r7, r2]
                if (dev->intf_rslt != 0)
     7b0:	2800      	cmp	r0, #0
     7b2:	d0ea      	beq.n	78a <bme68x_set_regs+0x8e>
                    rslt = BME68X_E_COM_FAIL;
     7b4:	2002      	movs	r0, #2
     7b6:	4240      	negs	r0, r0
     7b8:	e7e7      	b.n	78a <bme68x_set_regs+0x8e>
        rslt = BME68X_E_NULL_PTR;
     7ba:	2001      	movs	r0, #1
     7bc:	4240      	negs	r0, r0
     7be:	e7e4      	b.n	78a <bme68x_set_regs+0x8e>
     7c0:	2001      	movs	r0, #1
     7c2:	4240      	negs	r0, r0
     7c4:	e7e1      	b.n	78a <bme68x_set_regs+0x8e>
     7c6:	2001      	movs	r0, #1
     7c8:	4240      	negs	r0, r0
     7ca:	e7de      	b.n	78a <bme68x_set_regs+0x8e>
            rslt = BME68X_E_INVALID_LENGTH;
     7cc:	2004      	movs	r0, #4
     7ce:	4240      	negs	r0, r0
     7d0:	e7db      	b.n	78a <bme68x_set_regs+0x8e>
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	00009a8f 	.word	0x00009a8f
     7d8:	00000561 	.word	0x00000561
     7dc:	0000058d 	.word	0x0000058d

000007e0 <bme68x_get_regs>:
{
     7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7e2:	b083      	sub	sp, #12
     7e4:	0006      	movs	r6, r0
     7e6:	000d      	movs	r5, r1
     7e8:	9201      	str	r2, [sp, #4]
     7ea:	001f      	movs	r7, r3
    rslt = null_ptr_check(dev);
     7ec:	0018      	movs	r0, r3
     7ee:	4b14      	ldr	r3, [pc, #80]	; (840 <bme68x_get_regs+0x60>)
     7f0:	4798      	blx	r3
     7f2:	1e04      	subs	r4, r0, #0
    if ((rslt == BME68X_OK) && reg_data)
     7f4:	d11d      	bne.n	832 <bme68x_get_regs+0x52>
     7f6:	2d00      	cmp	r5, #0
     7f8:	d01e      	beq.n	838 <bme68x_get_regs+0x58>
        if (dev->intf == BME68X_SPI_INTF)
     7fa:	7b3b      	ldrb	r3, [r7, #12]
     7fc:	2b00      	cmp	r3, #0
     7fe:	d00c      	beq.n	81a <bme68x_get_regs+0x3a>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
     800:	687b      	ldr	r3, [r7, #4]
     802:	9a01      	ldr	r2, [sp, #4]
     804:	0029      	movs	r1, r5
     806:	0030      	movs	r0, r6
     808:	6c3d      	ldr	r5, [r7, #64]	; 0x40
     80a:	47a8      	blx	r5
     80c:	234c      	movs	r3, #76	; 0x4c
     80e:	54f8      	strb	r0, [r7, r3]
        if (dev->intf_rslt != 0)
     810:	2800      	cmp	r0, #0
     812:	d10b      	bne.n	82c <bme68x_get_regs+0x4c>
}
     814:	0020      	movs	r0, r4
     816:	b003      	add	sp, #12
     818:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rslt = set_mem_page(reg_addr, dev);
     81a:	0039      	movs	r1, r7
     81c:	0030      	movs	r0, r6
     81e:	4b09      	ldr	r3, [pc, #36]	; (844 <bme68x_get_regs+0x64>)
     820:	4798      	blx	r3
     822:	1e04      	subs	r4, r0, #0
            if (rslt == BME68X_OK)
     824:	d1ec      	bne.n	800 <bme68x_get_regs+0x20>
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
     826:	2380      	movs	r3, #128	; 0x80
     828:	431e      	orrs	r6, r3
     82a:	e7e9      	b.n	800 <bme68x_get_regs+0x20>
            rslt = BME68X_E_COM_FAIL;
     82c:	2402      	movs	r4, #2
     82e:	4264      	negs	r4, r4
     830:	e7f0      	b.n	814 <bme68x_get_regs+0x34>
        rslt = BME68X_E_NULL_PTR;
     832:	2401      	movs	r4, #1
     834:	4264      	negs	r4, r4
     836:	e7ed      	b.n	814 <bme68x_get_regs+0x34>
     838:	2401      	movs	r4, #1
     83a:	4264      	negs	r4, r4
     83c:	e7ea      	b.n	814 <bme68x_get_regs+0x34>
     83e:	46c0      	nop			; (mov r8, r8)
     840:	00000561 	.word	0x00000561
     844:	0000058d 	.word	0x0000058d

00000848 <bme68x_soft_reset>:
{
     848:	b530      	push	{r4, r5, lr}
     84a:	b083      	sub	sp, #12
     84c:	0005      	movs	r5, r0
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
     84e:	22e0      	movs	r2, #224	; 0xe0
     850:	466b      	mov	r3, sp
     852:	71da      	strb	r2, [r3, #7]
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
     854:	3a2a      	subs	r2, #42	; 0x2a
     856:	466b      	mov	r3, sp
     858:	719a      	strb	r2, [r3, #6]
    rslt = null_ptr_check(dev);
     85a:	4b12      	ldr	r3, [pc, #72]	; (8a4 <bme68x_soft_reset+0x5c>)
     85c:	4798      	blx	r3
     85e:	1e04      	subs	r4, r0, #0
    if (rslt == BME68X_OK)
     860:	d11d      	bne.n	89e <bme68x_soft_reset+0x56>
        if (dev->intf == BME68X_SPI_INTF)
     862:	7b2b      	ldrb	r3, [r5, #12]
     864:	2b00      	cmp	r3, #0
     866:	d015      	beq.n	894 <bme68x_soft_reset+0x4c>
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
     868:	002b      	movs	r3, r5
     86a:	2201      	movs	r2, #1
     86c:	4669      	mov	r1, sp
     86e:	3106      	adds	r1, #6
     870:	4668      	mov	r0, sp
     872:	3007      	adds	r0, #7
     874:	4c0c      	ldr	r4, [pc, #48]	; (8a8 <bme68x_soft_reset+0x60>)
     876:	47a0      	blx	r4
     878:	1e04      	subs	r4, r0, #0
            if (rslt == BME68X_OK)
     87a:	d110      	bne.n	89e <bme68x_soft_reset+0x56>
                dev->delay__us(BME68X_PERIOD_RESET, dev->intf_ptr);
     87c:	6869      	ldr	r1, [r5, #4]
     87e:	480b      	ldr	r0, [pc, #44]	; (8ac <bme68x_soft_reset+0x64>)
     880:	6cab      	ldr	r3, [r5, #72]	; 0x48
     882:	4798      	blx	r3
                if (dev->intf == BME68X_SPI_INTF)
     884:	7b2b      	ldrb	r3, [r5, #12]
     886:	2b00      	cmp	r3, #0
     888:	d109      	bne.n	89e <bme68x_soft_reset+0x56>
                    rslt = get_mem_page(dev);
     88a:	0028      	movs	r0, r5
     88c:	4b08      	ldr	r3, [pc, #32]	; (8b0 <bme68x_soft_reset+0x68>)
     88e:	4798      	blx	r3
     890:	0004      	movs	r4, r0
     892:	e004      	b.n	89e <bme68x_soft_reset+0x56>
            rslt = get_mem_page(dev);
     894:	0028      	movs	r0, r5
     896:	4b06      	ldr	r3, [pc, #24]	; (8b0 <bme68x_soft_reset+0x68>)
     898:	4798      	blx	r3
     89a:	1e04      	subs	r4, r0, #0
        if (rslt == BME68X_OK)
     89c:	d0e4      	beq.n	868 <bme68x_soft_reset+0x20>
}
     89e:	0020      	movs	r0, r4
     8a0:	b003      	add	sp, #12
     8a2:	bd30      	pop	{r4, r5, pc}
     8a4:	00000561 	.word	0x00000561
     8a8:	000006fd 	.word	0x000006fd
     8ac:	00002710 	.word	0x00002710
     8b0:	000005fd 	.word	0x000005fd

000008b4 <bme68x_init>:
{
     8b4:	b570      	push	{r4, r5, r6, lr}
     8b6:	0004      	movs	r4, r0
    (void) bme68x_soft_reset(dev);
     8b8:	4b07      	ldr	r3, [pc, #28]	; (8d8 <bme68x_init+0x24>)
     8ba:	4798      	blx	r3
    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
     8bc:	0023      	movs	r3, r4
     8be:	2201      	movs	r2, #1
     8c0:	0021      	movs	r1, r4
     8c2:	20d0      	movs	r0, #208	; 0xd0
     8c4:	4d05      	ldr	r5, [pc, #20]	; (8dc <bme68x_init+0x28>)
     8c6:	47a8      	blx	r5
    if (rslt == BME68X_OK)
     8c8:	2800      	cmp	r0, #0
     8ca:	d102      	bne.n	8d2 <bme68x_init+0x1e>
        if (dev->chip_id == BME68X_CHIP_ID)
     8cc:	7823      	ldrb	r3, [r4, #0]
     8ce:	2b61      	cmp	r3, #97	; 0x61
     8d0:	d100      	bne.n	8d4 <bme68x_init+0x20>
}
     8d2:	bd70      	pop	{r4, r5, r6, pc}
            rslt = BME68X_E_DEV_NOT_FOUND;
     8d4:	3803      	subs	r0, #3
     8d6:	e7fc      	b.n	8d2 <bme68x_init+0x1e>
     8d8:	00000849 	.word	0x00000849
     8dc:	000007e1 	.word	0x000007e1

000008e0 <bme68x_interface_init>:
/*!
 * BME680 interface init function. Maps platform specific functions to 
 * device descriptor.
 */
int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf)
{
     8e0:	b510      	push	{r4, lr}
     8e2:	b082      	sub	sp, #8
     8e4:	1e04      	subs	r4, r0, #0
	// Assuming the I2C has been initialized before. 
    int8_t rslt = BME68X_OK;
	uint8_t dev_addr;

    if (bme != NULL)
     8e6:	d018      	beq.n	91a <bme68x_interface_init+0x3a>

#if defined(PC)
        setbuf(stdout, NULL);
#endif
        /* Bus configuration : I2C */
        if (intf == BME68X_I2C_INTF)
     8e8:	2901      	cmp	r1, #1
     8ea:	d00c      	beq.n	906 <bme68x_interface_init+0x26>
        else if (intf == BME68X_SPI_INTF)
        {
			/* Not required for our application */
        }

        delay_ms(100);
     8ec:	2064      	movs	r0, #100	; 0x64
     8ee:	4b0c      	ldr	r3, [pc, #48]	; (920 <bme68x_interface_init+0x40>)
     8f0:	4798      	blx	r3

        bme->delay__us = bme68x_delay__us;
     8f2:	4b0c      	ldr	r3, [pc, #48]	; (924 <bme68x_interface_init+0x44>)
     8f4:	64a3      	str	r3, [r4, #72]	; 0x48
        bme->intf_ptr = &dev_addr;
     8f6:	466b      	mov	r3, sp
     8f8:	3307      	adds	r3, #7
     8fa:	6063      	str	r3, [r4, #4]
        bme->amb_temp = 25; /* The ambient temperature in deg C is used for defining the heater temperature */
     8fc:	2319      	movs	r3, #25
     8fe:	73a3      	strb	r3, [r4, #14]
    int8_t rslt = BME68X_OK;
     900:	2000      	movs	r0, #0
    {
        rslt = BME68X_E_NULL_PTR;
    }

    return rslt;
}
     902:	b002      	add	sp, #8
     904:	bd10      	pop	{r4, pc}
            dev_addr = BME68X_I2C_ADDR_HIGH;
     906:	2277      	movs	r2, #119	; 0x77
     908:	466b      	mov	r3, sp
     90a:	71da      	strb	r2, [r3, #7]
            bme->read = bme68x_i2c_read;
     90c:	4b06      	ldr	r3, [pc, #24]	; (928 <bme68x_interface_init+0x48>)
     90e:	6403      	str	r3, [r0, #64]	; 0x40
            bme->write = bme68x_i2c_write;
     910:	4b06      	ldr	r3, [pc, #24]	; (92c <bme68x_interface_init+0x4c>)
     912:	6443      	str	r3, [r0, #68]	; 0x44
            bme->intf = BME68X_I2C_INTF;
     914:	2301      	movs	r3, #1
     916:	7303      	strb	r3, [r0, #12]
     918:	e7e8      	b.n	8ec <bme68x_interface_init+0xc>
        rslt = BME68X_E_NULL_PTR;
     91a:	2001      	movs	r0, #1
     91c:	4240      	negs	r0, r0
     91e:	e7f0      	b.n	902 <bme68x_interface_init+0x22>
     920:	00005cdd 	.word	0x00005cdd
     924:	000006c5 	.word	0x000006c5
     928:	0000063d 	.word	0x0000063d
     92c:	00000689 	.word	0x00000689

00000930 <CLI_ResetDevice>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
     930:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
     934:	4a02      	ldr	r2, [pc, #8]	; (940 <CLI_ResetDevice+0x10>)
     936:	4b03      	ldr	r3, [pc, #12]	; (944 <CLI_ResetDevice+0x14>)
     938:	60da      	str	r2, [r3, #12]
     93a:	f3bf 8f4f 	dsb	sy
     93e:	e7fe      	b.n	93e <CLI_ResetDevice+0xe>
     940:	05fa0004 	.word	0x05fa0004
     944:	e000ed00 	.word	0xe000ed00

00000948 <CLI_GetImuData>:
/******************************************************************************
* CLI Functions - Define here
******************************************************************************/
//Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
     948:	b5f0      	push	{r4, r5, r6, r7, lr}
     94a:	b087      	sub	sp, #28
     94c:	9002      	str	r0, [sp, #8]
     94e:	000f      	movs	r7, r1
static int16_t  data_raw_acceleration[3];
static int16_t  data_raw_angular_rate;
static float acceleration_mg[3];
uint8_t reg;
stmdev_ctx_t *dev_ctx = GetImuStruct();
     950:	4b1f      	ldr	r3, [pc, #124]	; (9d0 <CLI_GetImuData+0x88>)
     952:	4798      	blx	r3
     954:	0005      	movs	r5, r0


/* Read output only if new xl value is available */
lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
     956:	240f      	movs	r4, #15
     958:	ab02      	add	r3, sp, #8
     95a:	469c      	mov	ip, r3
     95c:	4464      	add	r4, ip
     95e:	0021      	movs	r1, r4
     960:	4b1c      	ldr	r3, [pc, #112]	; (9d4 <CLI_GetImuData+0x8c>)
     962:	4798      	blx	r3

if(reg){
     964:	7823      	ldrb	r3, [r4, #0]
     966:	2b00      	cmp	r3, #0
     968:	d107      	bne.n	97a <CLI_GetImuData+0x32>

	snprintf(pcWriteBuffer,xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n",
	(int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
}else
{
	snprintf(pcWriteBuffer,xWriteBufferLen, "No data ready! \r\n");
     96a:	4a1b      	ldr	r2, [pc, #108]	; (9d8 <CLI_GetImuData+0x90>)
     96c:	0039      	movs	r1, r7
     96e:	9802      	ldr	r0, [sp, #8]
     970:	4b1a      	ldr	r3, [pc, #104]	; (9dc <CLI_GetImuData+0x94>)
     972:	4798      	blx	r3
}
return pdFALSE;
}
     974:	2000      	movs	r0, #0
     976:	b007      	add	sp, #28
     978:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
     97a:	4c19      	ldr	r4, [pc, #100]	; (9e0 <CLI_GetImuData+0x98>)
     97c:	2206      	movs	r2, #6
     97e:	2100      	movs	r1, #0
     980:	0020      	movs	r0, r4
     982:	4b18      	ldr	r3, [pc, #96]	; (9e4 <CLI_GetImuData+0x9c>)
     984:	4798      	blx	r3
	lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
     986:	0021      	movs	r1, r4
     988:	0028      	movs	r0, r5
     98a:	4b17      	ldr	r3, [pc, #92]	; (9e8 <CLI_GetImuData+0xa0>)
     98c:	4798      	blx	r3
	lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
     98e:	2300      	movs	r3, #0
     990:	5ee0      	ldrsh	r0, [r4, r3]
     992:	4d16      	ldr	r5, [pc, #88]	; (9ec <CLI_GetImuData+0xa4>)
     994:	47a8      	blx	r5
	acceleration_mg[0] =
     996:	4e16      	ldr	r6, [pc, #88]	; (9f0 <CLI_GetImuData+0xa8>)
     998:	6030      	str	r0, [r6, #0]
	lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
     99a:	2302      	movs	r3, #2
     99c:	5ee0      	ldrsh	r0, [r4, r3]
     99e:	47a8      	blx	r5
	acceleration_mg[1] =
     9a0:	6070      	str	r0, [r6, #4]
	lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
     9a2:	2304      	movs	r3, #4
     9a4:	5ee0      	ldrsh	r0, [r4, r3]
     9a6:	47a8      	blx	r5
     9a8:	1c04      	adds	r4, r0, #0
	acceleration_mg[2] =
     9aa:	60b0      	str	r0, [r6, #8]
	snprintf(pcWriteBuffer,xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n",
     9ac:	4d11      	ldr	r5, [pc, #68]	; (9f4 <CLI_GetImuData+0xac>)
     9ae:	6830      	ldr	r0, [r6, #0]
     9b0:	47a8      	blx	r5
     9b2:	9003      	str	r0, [sp, #12]
     9b4:	1c20      	adds	r0, r4, #0
     9b6:	47a8      	blx	r5
     9b8:	9001      	str	r0, [sp, #4]
     9ba:	6870      	ldr	r0, [r6, #4]
     9bc:	47a8      	blx	r5
     9be:	9000      	str	r0, [sp, #0]
     9c0:	9b03      	ldr	r3, [sp, #12]
     9c2:	4a0d      	ldr	r2, [pc, #52]	; (9f8 <CLI_GetImuData+0xb0>)
     9c4:	0039      	movs	r1, r7
     9c6:	9802      	ldr	r0, [sp, #8]
     9c8:	4c04      	ldr	r4, [pc, #16]	; (9dc <CLI_GetImuData+0x94>)
     9ca:	47a0      	blx	r4
     9cc:	e7d2      	b.n	974 <CLI_GetImuData+0x2c>
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	0000172d 	.word	0x0000172d
     9d4:	00001279 	.word	0x00001279
     9d8:	0000a5f8 	.word	0x0000a5f8
     9dc:	00009c15 	.word	0x00009c15
     9e0:	2000023c 	.word	0x2000023c
     9e4:	00009a8f 	.word	0x00009a8f
     9e8:	0000129d 	.word	0x0000129d
     9ec:	0000115d 	.word	0x0000115d
     9f0:	20000220 	.word	0x20000220
     9f4:	00007fe1 	.word	0x00007fe1
     9f8:	0000a5d4 	.word	0x0000a5d4

000009fc <xCliClearTerminalScreen>:
//THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
//SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
//CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen( char *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
     9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9fe:	0006      	movs	r6, r0
     a00:	000f      	movs	r7, r1
	char clearScreen = ASCII_ESC;
	snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
     a02:	4d06      	ldr	r5, [pc, #24]	; (a1c <xCliClearTerminalScreen+0x20>)
     a04:	231b      	movs	r3, #27
     a06:	4a06      	ldr	r2, [pc, #24]	; (a20 <xCliClearTerminalScreen+0x24>)
     a08:	210f      	movs	r1, #15
     a0a:	0028      	movs	r0, r5
     a0c:	4c05      	ldr	r4, [pc, #20]	; (a24 <xCliClearTerminalScreen+0x28>)
     a0e:	47a0      	blx	r4
	snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
     a10:	002a      	movs	r2, r5
     a12:	0039      	movs	r1, r7
     a14:	0030      	movs	r0, r6
     a16:	47a0      	blx	r4
	return pdFALSE;
}
     a18:	2000      	movs	r0, #0
     a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a1c:	2000022c 	.word	0x2000022c
     a20:	0000a74c 	.word	0x0000a74c
     a24:	00009c15 	.word	0x00009c15

00000a28 <CLI_NeotrellisSetLed>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
     a28:	b5f0      	push	{r4, r5, r6, r7, lr}
     a2a:	46c6      	mov	lr, r8
     a2c:	b500      	push	{lr}
	//return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
	//This function expects 4 arguments inside pcCommandString: key, R, G, B.

    uint8_t led_no, red, blue, green, count = 0;

	pcCommandString +=4;
     a2e:	1d16      	adds	r6, r2, #4

	led_no = atoi(pcCommandString);
     a30:	0030      	movs	r0, r6
     a32:	4b19      	ldr	r3, [pc, #100]	; (a98 <CLI_NeotrellisSetLed+0x70>)
     a34:	4798      	blx	r3
     a36:	b2c7      	uxtb	r7, r0
    uint8_t led_no, red, blue, green, count = 0;
     a38:	2300      	movs	r3, #0

	while (pcCommandString[count++] != ' ');
     a3a:	1c5d      	adds	r5, r3, #1
     a3c:	b2ed      	uxtb	r5, r5
     a3e:	56f2      	ldrsb	r2, [r6, r3]
     a40:	002b      	movs	r3, r5
     a42:	2a20      	cmp	r2, #32
     a44:	d1f9      	bne.n	a3a <CLI_NeotrellisSetLed+0x12>

	red = atoi(pcCommandString + count);
     a46:	1970      	adds	r0, r6, r5
     a48:	4b13      	ldr	r3, [pc, #76]	; (a98 <CLI_NeotrellisSetLed+0x70>)
     a4a:	4798      	blx	r3
     a4c:	b2c3      	uxtb	r3, r0
     a4e:	4698      	mov	r8, r3

	while (pcCommandString[count++] != ' ');
     a50:	1c6c      	adds	r4, r5, #1
     a52:	b2e4      	uxtb	r4, r4
     a54:	5773      	ldrsb	r3, [r6, r5]
     a56:	0025      	movs	r5, r4
     a58:	2b20      	cmp	r3, #32
     a5a:	d1f9      	bne.n	a50 <CLI_NeotrellisSetLed+0x28>

	green = atoi(pcCommandString + count);
     a5c:	1930      	adds	r0, r6, r4
     a5e:	4b0e      	ldr	r3, [pc, #56]	; (a98 <CLI_NeotrellisSetLed+0x70>)
     a60:	4798      	blx	r3
     a62:	b2c5      	uxtb	r5, r0
	while (pcCommandString[count++] != ' ');
     a64:	1c60      	adds	r0, r4, #1
     a66:	b2c0      	uxtb	r0, r0
     a68:	5733      	ldrsb	r3, [r6, r4]
     a6a:	0004      	movs	r4, r0
     a6c:	2b20      	cmp	r3, #32
     a6e:	d1f9      	bne.n	a64 <CLI_NeotrellisSetLed+0x3c>

	blue = atoi(pcCommandString + count);
     a70:	1830      	adds	r0, r6, r0
     a72:	4b09      	ldr	r3, [pc, #36]	; (a98 <CLI_NeotrellisSetLed+0x70>)
     a74:	4798      	blx	r3
	
    SeesawSetLed(NEO_TRELLIS_SEESAW_KEY(led_no), red, green, blue);
     a76:	b2c3      	uxtb	r3, r0
     a78:	08f8      	lsrs	r0, r7, #3
     a7a:	0080      	lsls	r0, r0, #2
     a7c:	2207      	movs	r2, #7
     a7e:	4017      	ands	r7, r2
     a80:	19c0      	adds	r0, r0, r7
     a82:	002a      	movs	r2, r5
     a84:	4641      	mov	r1, r8
     a86:	4c05      	ldr	r4, [pc, #20]	; (a9c <CLI_NeotrellisSetLed+0x74>)
     a88:	47a0      	blx	r4

	SeesawOrderLedUpdate();
     a8a:	4b05      	ldr	r3, [pc, #20]	; (aa0 <CLI_NeotrellisSetLed+0x78>)
     a8c:	4798      	blx	r3
	
	return pdFALSE;
}
     a8e:	2000      	movs	r0, #0
     a90:	bc04      	pop	{r2}
     a92:	4690      	mov	r8, r2
     a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	00009a15 	.word	0x00009a15
     a9c:	00001869 	.word	0x00001869
     aa0:	000018a1 	.word	0x000018a1

00000aa4 <vCommandConsoleTask>:
{
     aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
     aa6:	46d6      	mov	lr, sl
     aa8:	464f      	mov	r7, r9
     aaa:	b580      	push	{r7, lr}
     aac:	b083      	sub	sp, #12
FreeRTOS_CLIRegisterCommand( &xImuGetCommand );
     aae:	4866      	ldr	r0, [pc, #408]	; (c48 <vCommandConsoleTask+0x1a4>)
     ab0:	4c66      	ldr	r4, [pc, #408]	; (c4c <vCommandConsoleTask+0x1a8>)
     ab2:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xClearScreen );
     ab4:	4866      	ldr	r0, [pc, #408]	; (c50 <vCommandConsoleTask+0x1ac>)
     ab6:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xResetCommand );
     ab8:	4866      	ldr	r0, [pc, #408]	; (c54 <vCommandConsoleTask+0x1b0>)
     aba:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xNeotrellisTurnLEDCommand );
     abc:	4866      	ldr	r0, [pc, #408]	; (c58 <vCommandConsoleTask+0x1b4>)
     abe:	47a0      	blx	r4
    SerialConsoleWriteString( pcWelcomeMessage);
     ac0:	4866      	ldr	r0, [pc, #408]	; (c5c <vCommandConsoleTask+0x1b8>)
     ac2:	4b67      	ldr	r3, [pc, #412]	; (c60 <vCommandConsoleTask+0x1bc>)
     ac4:	4798      	blx	r3
	cliCharReadySemaphore = xSemaphoreCreateBinary();
     ac6:	2203      	movs	r2, #3
     ac8:	2100      	movs	r1, #0
     aca:	2001      	movs	r0, #1
     acc:	4b65      	ldr	r3, [pc, #404]	; (c64 <vCommandConsoleTask+0x1c0>)
     ace:	4798      	blx	r3
     ad0:	4b65      	ldr	r3, [pc, #404]	; (c68 <vCommandConsoleTask+0x1c4>)
     ad2:	6018      	str	r0, [r3, #0]
	if(cliCharReadySemaphore == NULL)
     ad4:	2800      	cmp	r0, #0
     ad6:	d106      	bne.n	ae6 <vCommandConsoleTask+0x42>
		LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
     ad8:	4964      	ldr	r1, [pc, #400]	; (c6c <vCommandConsoleTask+0x1c8>)
     ada:	3003      	adds	r0, #3
     adc:	4b64      	ldr	r3, [pc, #400]	; (c70 <vCommandConsoleTask+0x1cc>)
     ade:	4798      	blx	r3
		vTaskSuspend( NULL );
     ae0:	2000      	movs	r0, #0
     ae2:	4b64      	ldr	r3, [pc, #400]	; (c74 <vCommandConsoleTask+0x1d0>)
     ae4:	4798      	blx	r3
            cInputIndex = 0;
     ae6:	2400      	movs	r4, #0
int ret = SerialConsoleReadCharacter(character);
     ae8:	4b63      	ldr	r3, [pc, #396]	; (c78 <vCommandConsoleTask+0x1d4>)
     aea:	4699      	mov	r9, r3
	xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
     aec:	4b5e      	ldr	r3, [pc, #376]	; (c68 <vCommandConsoleTask+0x1c4>)
     aee:	469a      	mov	sl, r3
     af0:	e033      	b.n	b5a <vCommandConsoleTask+0xb6>
     af2:	2101      	movs	r1, #1
     af4:	4249      	negs	r1, r1
     af6:	4653      	mov	r3, sl
     af8:	6818      	ldr	r0, [r3, #0]
     afa:	4b60      	ldr	r3, [pc, #384]	; (c7c <vCommandConsoleTask+0x1d8>)
     afc:	4798      	blx	r3
	SerialConsoleReadCharacter(character);
     afe:	a801      	add	r0, sp, #4
     b00:	4b5d      	ldr	r3, [pc, #372]	; (c78 <vCommandConsoleTask+0x1d4>)
     b02:	4798      	blx	r3
     b04:	e02d      	b.n	b62 <vCommandConsoleTask+0xbe>
            SerialConsoleWriteString("\r\n");
     b06:	485e      	ldr	r0, [pc, #376]	; (c80 <vCommandConsoleTask+0x1dc>)
     b08:	4b55      	ldr	r3, [pc, #340]	; (c60 <vCommandConsoleTask+0x1bc>)
     b0a:	4798      	blx	r3
			isEscapeCode = false; pcEscapeCodePos = 0;
     b0c:	2400      	movs	r4, #0
     b0e:	4b5d      	ldr	r3, [pc, #372]	; (c84 <vCommandConsoleTask+0x1e0>)
     b10:	701c      	strb	r4, [r3, #0]
     b12:	4b5d      	ldr	r3, [pc, #372]	; (c88 <vCommandConsoleTask+0x1e4>)
     b14:	701c      	strb	r4, [r3, #0]
			strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI-1);
     b16:	4d5d      	ldr	r5, [pc, #372]	; (c8c <vCommandConsoleTask+0x1e8>)
     b18:	2231      	movs	r2, #49	; 0x31
     b1a:	495d      	ldr	r1, [pc, #372]	; (c90 <vCommandConsoleTask+0x1ec>)
     b1c:	0028      	movs	r0, r5
     b1e:	4b5d      	ldr	r3, [pc, #372]	; (c94 <vCommandConsoleTask+0x1f0>)
     b20:	4798      	blx	r3
			pcLastCommand[MAX_INPUT_LENGTH_CLI-1] = 0;	//Ensure null termination
     b22:	2331      	movs	r3, #49	; 0x31
     b24:	54ec      	strb	r4, [r5, r3]
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
     b26:	4c5c      	ldr	r4, [pc, #368]	; (c98 <vCommandConsoleTask+0x1f4>)
     b28:	4e59      	ldr	r6, [pc, #356]	; (c90 <vCommandConsoleTask+0x1ec>)
     b2a:	4f5c      	ldr	r7, [pc, #368]	; (c9c <vCommandConsoleTask+0x1f8>)
     b2c:	2264      	movs	r2, #100	; 0x64
     b2e:	0021      	movs	r1, r4
     b30:	0030      	movs	r0, r6
     b32:	47b8      	blx	r7
     b34:	0005      	movs	r5, r0
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
     b36:	2200      	movs	r2, #0
     b38:	2363      	movs	r3, #99	; 0x63
     b3a:	54e2      	strb	r2, [r4, r3]
                SerialConsoleWriteString(pcOutputString);
     b3c:	0020      	movs	r0, r4
     b3e:	4b48      	ldr	r3, [pc, #288]	; (c60 <vCommandConsoleTask+0x1bc>)
     b40:	4798      	blx	r3
            } while( xMoreDataToFollow != pdFALSE );
     b42:	2d00      	cmp	r5, #0
     b44:	d1f2      	bne.n	b2c <vCommandConsoleTask+0x88>
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
     b46:	2232      	movs	r2, #50	; 0x32
     b48:	2100      	movs	r1, #0
     b4a:	4851      	ldr	r0, [pc, #324]	; (c90 <vCommandConsoleTask+0x1ec>)
     b4c:	4c54      	ldr	r4, [pc, #336]	; (ca0 <vCommandConsoleTask+0x1fc>)
     b4e:	47a0      	blx	r4
			memset( pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
     b50:	2264      	movs	r2, #100	; 0x64
     b52:	2100      	movs	r1, #0
     b54:	4850      	ldr	r0, [pc, #320]	; (c98 <vCommandConsoleTask+0x1f4>)
     b56:	47a0      	blx	r4
            cInputIndex = 0;
     b58:	2400      	movs	r4, #0
int ret = SerialConsoleReadCharacter(character);
     b5a:	a801      	add	r0, sp, #4
     b5c:	47c8      	blx	r9
if(ret == -1)
     b5e:	1c43      	adds	r3, r0, #1
     b60:	d0c7      	beq.n	af2 <vCommandConsoleTask+0x4e>
	if( cRxedChar[0] == '\n' || cRxedChar[0] == '\r'  )
     b62:	466b      	mov	r3, sp
     b64:	791b      	ldrb	r3, [r3, #4]
     b66:	2b0a      	cmp	r3, #10
     b68:	d0cd      	beq.n	b06 <vCommandConsoleTask+0x62>
     b6a:	2b0d      	cmp	r3, #13
     b6c:	d0cb      	beq.n	b06 <vCommandConsoleTask+0x62>
			if (true == isEscapeCode) {
     b6e:	4a45      	ldr	r2, [pc, #276]	; (c84 <vCommandConsoleTask+0x1e0>)
     b70:	7812      	ldrb	r2, [r2, #0]
     b72:	2a00      	cmp	r2, #0
     b74:	d03f      	beq.n	bf6 <vCommandConsoleTask+0x152>
				if(pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
     b76:	4a44      	ldr	r2, [pc, #272]	; (c88 <vCommandConsoleTask+0x1e4>)
     b78:	7812      	ldrb	r2, [r2, #0]
     b7a:	2a03      	cmp	r2, #3
     b7c:	d813      	bhi.n	ba6 <vCommandConsoleTask+0x102>
					pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
     b7e:	1c51      	adds	r1, r2, #1
     b80:	b2c9      	uxtb	r1, r1
     b82:	4841      	ldr	r0, [pc, #260]	; (c88 <vCommandConsoleTask+0x1e4>)
     b84:	7001      	strb	r1, [r0, #0]
     b86:	4847      	ldr	r0, [pc, #284]	; (ca4 <vCommandConsoleTask+0x200>)
     b88:	5483      	strb	r3, [r0, r2]
				if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
     b8a:	2901      	cmp	r1, #1
     b8c:	d9e5      	bls.n	b5a <vCommandConsoleTask+0xb6>
					if(strcasecmp(pcEscapeCodes, "oa"))	{
     b8e:	4946      	ldr	r1, [pc, #280]	; (ca8 <vCommandConsoleTask+0x204>)
     b90:	4844      	ldr	r0, [pc, #272]	; (ca4 <vCommandConsoleTask+0x200>)
     b92:	4b46      	ldr	r3, [pc, #280]	; (cac <vCommandConsoleTask+0x208>)
     b94:	4798      	blx	r3
     b96:	2800      	cmp	r0, #0
     b98:	d10b      	bne.n	bb2 <vCommandConsoleTask+0x10e>
					isEscapeCode = false; pcEscapeCodePos = 0;
     b9a:	2300      	movs	r3, #0
     b9c:	4a39      	ldr	r2, [pc, #228]	; (c84 <vCommandConsoleTask+0x1e0>)
     b9e:	7013      	strb	r3, [r2, #0]
     ba0:	4a39      	ldr	r2, [pc, #228]	; (c88 <vCommandConsoleTask+0x1e4>)
     ba2:	7013      	strb	r3, [r2, #0]
     ba4:	e7d9      	b.n	b5a <vCommandConsoleTask+0xb6>
					isEscapeCode = false; pcEscapeCodePos = 0;
     ba6:	2300      	movs	r3, #0
     ba8:	4a36      	ldr	r2, [pc, #216]	; (c84 <vCommandConsoleTask+0x1e0>)
     baa:	7013      	strb	r3, [r2, #0]
     bac:	4a36      	ldr	r2, [pc, #216]	; (c88 <vCommandConsoleTask+0x1e4>)
     bae:	7013      	strb	r3, [r2, #0]
     bb0:	e7d3      	b.n	b5a <vCommandConsoleTask+0xb6>
                            sprintf(pcInputString, "%c[2K\r>", 27);
     bb2:	4c37      	ldr	r4, [pc, #220]	; (c90 <vCommandConsoleTask+0x1ec>)
     bb4:	221b      	movs	r2, #27
     bb6:	493e      	ldr	r1, [pc, #248]	; (cb0 <vCommandConsoleTask+0x20c>)
     bb8:	0020      	movs	r0, r4
     bba:	4b3e      	ldr	r3, [pc, #248]	; (cb4 <vCommandConsoleTask+0x210>)
     bbc:	4798      	blx	r3
				            SerialConsoleWriteString((char*)pcInputString);
     bbe:	0020      	movs	r0, r4
     bc0:	4b27      	ldr	r3, [pc, #156]	; (c60 <vCommandConsoleTask+0x1bc>)
     bc2:	4798      	blx	r3
                            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
     bc4:	2232      	movs	r2, #50	; 0x32
     bc6:	2100      	movs	r1, #0
     bc8:	0020      	movs	r0, r4
     bca:	4b35      	ldr	r3, [pc, #212]	; (ca0 <vCommandConsoleTask+0x1fc>)
     bcc:	4798      	blx	r3
						strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1); 	
     bce:	2231      	movs	r2, #49	; 0x31
     bd0:	492e      	ldr	r1, [pc, #184]	; (c8c <vCommandConsoleTask+0x1e8>)
     bd2:	0020      	movs	r0, r4
     bd4:	4b2f      	ldr	r3, [pc, #188]	; (c94 <vCommandConsoleTask+0x1f0>)
     bd6:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
     bd8:	0020      	movs	r0, r4
     bda:	4b37      	ldr	r3, [pc, #220]	; (cb8 <vCommandConsoleTask+0x214>)
     bdc:	4798      	blx	r3
     bde:	2431      	movs	r4, #49	; 0x31
     be0:	2830      	cmp	r0, #48	; 0x30
     be2:	d803      	bhi.n	bec <vCommandConsoleTask+0x148>
     be4:	4829      	ldr	r0, [pc, #164]	; (c8c <vCommandConsoleTask+0x1e8>)
     be6:	4b34      	ldr	r3, [pc, #208]	; (cb8 <vCommandConsoleTask+0x214>)
     be8:	4798      	blx	r3
     bea:	0004      	movs	r4, r0
     bec:	b2e4      	uxtb	r4, r4
						SerialConsoleWriteString(pcInputString);
     bee:	4828      	ldr	r0, [pc, #160]	; (c90 <vCommandConsoleTask+0x1ec>)
     bf0:	4b1b      	ldr	r3, [pc, #108]	; (c60 <vCommandConsoleTask+0x1bc>)
     bf2:	4798      	blx	r3
     bf4:	e7d1      	b.n	b9a <vCommandConsoleTask+0xf6>
            else if( cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE )
     bf6:	2b08      	cmp	r3, #8
     bf8:	d010      	beq.n	c1c <vCommandConsoleTask+0x178>
     bfa:	2b7f      	cmp	r3, #127	; 0x7f
     bfc:	d00e      	beq.n	c1c <vCommandConsoleTask+0x178>
			else if( cRxedChar[0] == ASCII_ESC) {
     bfe:	2b1b      	cmp	r3, #27
     c00:	d01a      	beq.n	c38 <vCommandConsoleTask+0x194>
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
     c02:	2c31      	cmp	r4, #49	; 0x31
     c04:	d803      	bhi.n	c0e <vCommandConsoleTask+0x16a>
                    pcInputString[ cInputIndex ] = cRxedChar[0];
     c06:	4a22      	ldr	r2, [pc, #136]	; (c90 <vCommandConsoleTask+0x1ec>)
     c08:	5513      	strb	r3, [r2, r4]
                    cInputIndex++;
     c0a:	3401      	adds	r4, #1
     c0c:	b2e4      	uxtb	r4, r4
					cRxedChar[1] = 0;
     c0e:	2300      	movs	r3, #0
     c10:	466a      	mov	r2, sp
     c12:	7153      	strb	r3, [r2, #5]
					SerialConsoleWriteString(&cRxedChar[0]);
     c14:	a801      	add	r0, sp, #4
     c16:	4b12      	ldr	r3, [pc, #72]	; (c60 <vCommandConsoleTask+0x1bc>)
     c18:	4798      	blx	r3
     c1a:	e79e      	b.n	b5a <vCommandConsoleTask+0xb6>
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
     c1c:	4b27      	ldr	r3, [pc, #156]	; (cbc <vCommandConsoleTask+0x218>)
     c1e:	681b      	ldr	r3, [r3, #0]
     c20:	9300      	str	r3, [sp, #0]
				SerialConsoleWriteString(erase);
     c22:	4668      	mov	r0, sp
     c24:	4b0e      	ldr	r3, [pc, #56]	; (c60 <vCommandConsoleTask+0x1bc>)
     c26:	4798      	blx	r3
                if( cInputIndex > 0 )
     c28:	2c00      	cmp	r4, #0
     c2a:	d096      	beq.n	b5a <vCommandConsoleTask+0xb6>
                    cInputIndex--;
     c2c:	3c01      	subs	r4, #1
     c2e:	b2e4      	uxtb	r4, r4
                    pcInputString[ cInputIndex ] = 0;
     c30:	2200      	movs	r2, #0
     c32:	4b17      	ldr	r3, [pc, #92]	; (c90 <vCommandConsoleTask+0x1ec>)
     c34:	551a      	strb	r2, [r3, r4]
            {
     c36:	e790      	b.n	b5a <vCommandConsoleTask+0xb6>
				isEscapeCode = true; //Next characters will be code arguments
     c38:	2201      	movs	r2, #1
     c3a:	4b12      	ldr	r3, [pc, #72]	; (c84 <vCommandConsoleTask+0x1e0>)
     c3c:	701a      	strb	r2, [r3, #0]
				pcEscapeCodePos = 0;
     c3e:	2200      	movs	r2, #0
     c40:	4b11      	ldr	r3, [pc, #68]	; (c88 <vCommandConsoleTask+0x1e4>)
     c42:	701a      	strb	r2, [r3, #0]
     c44:	e789      	b.n	b5a <vCommandConsoleTask+0xb6>
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	0000a754 	.word	0x0000a754
     c4c:	00001fb1 	.word	0x00001fb1
     c50:	0000a73c 	.word	0x0000a73c
     c54:	0000a774 	.word	0x0000a774
     c58:	0000a764 	.word	0x0000a764
     c5c:	0000a6cc 	.word	0x0000a6cc
     c60:	00005bed 	.word	0x00005bed
     c64:	00003809 	.word	0x00003809
     c68:	200038a4 	.word	0x200038a4
     c6c:	0000a710 	.word	0x0000a710
     c70:	00005c9d 	.word	0x00005c9d
     c74:	00004f69 	.word	0x00004f69
     c78:	00005c71 	.word	0x00005c71
     c7c:	000042ed 	.word	0x000042ed
     c80:	0000b948 	.word	0x0000b948
     c84:	20000242 	.word	0x20000242
     c88:	20000243 	.word	0x20000243
     c8c:	2000027c 	.word	0x2000027c
     c90:	20000248 	.word	0x20000248
     c94:	00009d29 	.word	0x00009d29
     c98:	200002b0 	.word	0x200002b0
     c9c:	00001ff5 	.word	0x00001ff5
     ca0:	00009a8f 	.word	0x00009a8f
     ca4:	20000244 	.word	0x20000244
     ca8:	0000a730 	.word	0x0000a730
     cac:	00009cbd 	.word	0x00009cbd
     cb0:	0000a734 	.word	0x0000a734
     cb4:	00009c79 	.word	0x00009c79
     cb8:	00009cf9 	.word	0x00009cf9
     cbc:	0000a5d0 	.word	0x0000a5d0

00000cc0 <CliCharReadySemaphoreGiveFromISR>:
{
     cc0:	b510      	push	{r4, lr}
	xHigherPriorityTaskWoken = pdFALSE;
     cc2:	4c08      	ldr	r4, [pc, #32]	; (ce4 <CliCharReadySemaphoreGiveFromISR+0x24>)
     cc4:	2300      	movs	r3, #0
     cc6:	6023      	str	r3, [r4, #0]
	xSemaphoreGiveFromISR( cliCharReadySemaphore, &xHigherPriorityTaskWoken );
     cc8:	4b07      	ldr	r3, [pc, #28]	; (ce8 <CliCharReadySemaphoreGiveFromISR+0x28>)
     cca:	6818      	ldr	r0, [r3, #0]
     ccc:	0021      	movs	r1, r4
     cce:	4b07      	ldr	r3, [pc, #28]	; (cec <CliCharReadySemaphoreGiveFromISR+0x2c>)
     cd0:	4798      	blx	r3
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
     cd2:	6823      	ldr	r3, [r4, #0]
     cd4:	2b00      	cmp	r3, #0
     cd6:	d003      	beq.n	ce0 <CliCharReadySemaphoreGiveFromISR+0x20>
     cd8:	2280      	movs	r2, #128	; 0x80
     cda:	0552      	lsls	r2, r2, #21
     cdc:	4b04      	ldr	r3, [pc, #16]	; (cf0 <CliCharReadySemaphoreGiveFromISR+0x30>)
     cde:	601a      	str	r2, [r3, #0]
}
     ce0:	bd10      	pop	{r4, pc}
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	20000314 	.word	0x20000314
     ce8:	200038a4 	.word	0x200038a4
     cec:	00003fd1 	.word	0x00003fd1
     cf0:	e000ed04 	.word	0xe000ed04

00000cf4 <I2cSensorsTxComplete>:
				and is currently waiting for a notification that it has finished.
 * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsTxComplete(struct i2c_master_module *const module){
     cf4:	b510      	push	{r4, lr}
     cf6:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;			
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     cf8:	2400      	movs	r4, #0
     cfa:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
     cfc:	4b07      	ldr	r3, [pc, #28]	; (d1c <I2cSensorsTxComplete+0x28>)
     cfe:	6818      	ldr	r0, [r3, #0]
     d00:	a901      	add	r1, sp, #4
     d02:	4b07      	ldr	r3, [pc, #28]	; (d20 <I2cSensorsTxComplete+0x2c>)
     d04:	4798      	blx	r3
	sensorTransmitError = false;
     d06:	4b07      	ldr	r3, [pc, #28]	; (d24 <I2cSensorsTxComplete+0x30>)
     d08:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
     d0a:	9b01      	ldr	r3, [sp, #4]
     d0c:	2b00      	cmp	r3, #0
     d0e:	d003      	beq.n	d18 <I2cSensorsTxComplete+0x24>
     d10:	2280      	movs	r2, #128	; 0x80
     d12:	0552      	lsls	r2, r2, #21
     d14:	4b04      	ldr	r3, [pc, #16]	; (d28 <I2cSensorsTxComplete+0x34>)
     d16:	601a      	str	r2, [r3, #0]
}
     d18:	b002      	add	sp, #8
     d1a:	bd10      	pop	{r4, pc}
     d1c:	200038d4 	.word	0x200038d4
     d20:	00003fd1 	.word	0x00003fd1
     d24:	20000318 	.word	0x20000318
     d28:	e000ed04 	.word	0xe000ed04

00000d2c <I2cSensorsRxComplete>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsRxComplete(struct i2c_master_module *const module){
     d2c:	b510      	push	{r4, lr}
     d2e:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     d30:	2400      	movs	r4, #0
     d32:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
     d34:	4b07      	ldr	r3, [pc, #28]	; (d54 <I2cSensorsRxComplete+0x28>)
     d36:	6818      	ldr	r0, [r3, #0]
     d38:	a901      	add	r1, sp, #4
     d3a:	4b07      	ldr	r3, [pc, #28]	; (d58 <I2cSensorsRxComplete+0x2c>)
     d3c:	4798      	blx	r3
	sensorTransmitError = false;
     d3e:	4b07      	ldr	r3, [pc, #28]	; (d5c <I2cSensorsRxComplete+0x30>)
     d40:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
     d42:	9b01      	ldr	r3, [sp, #4]
     d44:	2b00      	cmp	r3, #0
     d46:	d003      	beq.n	d50 <I2cSensorsRxComplete+0x24>
     d48:	2280      	movs	r2, #128	; 0x80
     d4a:	0552      	lsls	r2, r2, #21
     d4c:	4b04      	ldr	r3, [pc, #16]	; (d60 <I2cSensorsRxComplete+0x34>)
     d4e:	601a      	str	r2, [r3, #0]
}
     d50:	b002      	add	sp, #8
     d52:	bd10      	pop	{r4, pc}
     d54:	200038d4 	.word	0x200038d4
     d58:	00003fd1 	.word	0x00003fd1
     d5c:	20000318 	.word	0x20000318
     d60:	e000ed04 	.word	0xe000ed04

00000d64 <I2cSensorsError>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsError(struct i2c_master_module *const module){
     d64:	b510      	push	{r4, lr}
     d66:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.txDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     d68:	2400      	movs	r4, #0
     d6a:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
     d6c:	4b07      	ldr	r3, [pc, #28]	; (d8c <I2cSensorsError+0x28>)
     d6e:	6818      	ldr	r0, [r3, #0]
     d70:	a901      	add	r1, sp, #4
     d72:	4b07      	ldr	r3, [pc, #28]	; (d90 <I2cSensorsError+0x2c>)
     d74:	4798      	blx	r3
	sensorTransmitError = false;
     d76:	4b07      	ldr	r3, [pc, #28]	; (d94 <I2cSensorsError+0x30>)
     d78:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
     d7a:	9b01      	ldr	r3, [sp, #4]
     d7c:	2b00      	cmp	r3, #0
     d7e:	d003      	beq.n	d88 <I2cSensorsError+0x24>
     d80:	2280      	movs	r2, #128	; 0x80
     d82:	0552      	lsls	r2, r2, #21
     d84:	4b04      	ldr	r3, [pc, #16]	; (d98 <I2cSensorsError+0x34>)
     d86:	601a      	str	r2, [r3, #0]
}
     d88:	b002      	add	sp, #8
     d8a:	bd10      	pop	{r4, pc}
     d8c:	200038d4 	.word	0x200038d4
     d90:	00003fd1 	.word	0x00003fd1
     d94:	20000318 	.word	0x20000318
     d98:	e000ed04 	.word	0xe000ed04

00000d9c <I2cDriverRegisterSensorBusCallbacks>:



void I2cDriverRegisterSensorBusCallbacks(void)
{
     d9c:	b570      	push	{r4, r5, r6, lr}
	/* Register callback function. */
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
     d9e:	4c0c      	ldr	r4, [pc, #48]	; (dd0 <I2cDriverRegisterSensorBusCallbacks+0x34>)
     da0:	2200      	movs	r2, #0
     da2:	490c      	ldr	r1, [pc, #48]	; (dd4 <I2cDriverRegisterSensorBusCallbacks+0x38>)
     da4:	0020      	movs	r0, r4
     da6:	4d0c      	ldr	r5, [pc, #48]	; (dd8 <I2cDriverRegisterSensorBusCallbacks+0x3c>)
     da8:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
     daa:	7e63      	ldrb	r3, [r4, #25]
     dac:	2201      	movs	r2, #1
     dae:	4313      	orrs	r3, r2
     db0:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
     db2:	490a      	ldr	r1, [pc, #40]	; (ddc <I2cDriverRegisterSensorBusCallbacks+0x40>)
     db4:	0020      	movs	r0, r4
     db6:	47a8      	blx	r5
     db8:	7e63      	ldrb	r3, [r4, #25]
     dba:	2202      	movs	r2, #2
     dbc:	4313      	orrs	r3, r2
     dbe:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_READ_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError,I2C_MASTER_CALLBACK_ERROR);
     dc0:	4907      	ldr	r1, [pc, #28]	; (de0 <I2cDriverRegisterSensorBusCallbacks+0x44>)
     dc2:	0020      	movs	r0, r4
     dc4:	47a8      	blx	r5
     dc6:	7e63      	ldrb	r3, [r4, #25]
     dc8:	2204      	movs	r2, #4
     dca:	4313      	orrs	r3, r2
     dcc:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_ERROR);
}
     dce:	bd70      	pop	{r4, r5, r6, pc}
     dd0:	200038ac 	.word	0x200038ac
     dd4:	00000cf5 	.word	0x00000cf5
     dd8:	00000315 	.word	0x00000315
     ddc:	00000d2d 	.word	0x00000d2d
     de0:	00000d65 	.word	0x00000d65

00000de4 <I2cInitializeDriver>:
 * @fn			int32_t I2cInitializeDriver(void)
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note        
 *****************************************************************************/
 int32_t I2cInitializeDriver(void){
     de4:	b570      	push	{r4, r5, r6, lr}
     de6:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     de8:	ab01      	add	r3, sp, #4
     dea:	2264      	movs	r2, #100	; 0x64
     dec:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     dee:	4a33      	ldr	r2, [pc, #204]	; (ebc <I2cInitializeDriver+0xd8>)
     df0:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     df2:	2200      	movs	r2, #0
     df4:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     df6:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
     df8:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     dfa:	2180      	movs	r1, #128	; 0x80
     dfc:	0389      	lsls	r1, r1, #14
     dfe:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     e00:	2101      	movs	r1, #1
     e02:	4249      	negs	r1, r1
     e04:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     e06:	3125      	adds	r1, #37	; 0x25
     e08:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     e0a:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     e0c:	3108      	adds	r1, #8
     e0e:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     e10:	3101      	adds	r1, #1
     e12:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
     e14:	3101      	adds	r1, #1
     e16:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     e18:	32d7      	adds	r2, #215	; 0xd7
     e1a:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
     e1c:	4a28      	ldr	r2, [pc, #160]	; (ec0 <I2cInitializeDriver+0xdc>)
     e1e:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
     e20:	4a28      	ldr	r2, [pc, #160]	; (ec4 <I2cInitializeDriver+0xe0>)
     e22:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.buffer_timeout = 1000;
     e24:	22fa      	movs	r2, #250	; 0xfa
     e26:	0092      	lsls	r2, r2, #2
     e28:	82da      	strh	r2, [r3, #22]
     e2a:	2403      	movs	r4, #3
		errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
     e2c:	4d26      	ldr	r5, [pc, #152]	; (ec8 <I2cInitializeDriver+0xe4>)
     e2e:	4e27      	ldr	r6, [pc, #156]	; (ecc <I2cInitializeDriver+0xe8>)
     e30:	aa01      	add	r2, sp, #4
     e32:	4927      	ldr	r1, [pc, #156]	; (ed0 <I2cInitializeDriver+0xec>)
     e34:	0028      	movs	r0, r5
     e36:	47b0      	blx	r6
		if(STATUS_OK == errCodeAsf){
     e38:	2800      	cmp	r0, #0
     e3a:	d006      	beq.n	e4a <I2cInitializeDriver+0x66>
			i2c_master_reset(&i2cSensorBusInstance);
     e3c:	4822      	ldr	r0, [pc, #136]	; (ec8 <I2cInitializeDriver+0xe4>)
     e3e:	4b25      	ldr	r3, [pc, #148]	; (ed4 <I2cInitializeDriver+0xf0>)
     e40:	4798      	blx	r3
     e42:	3c01      	subs	r4, #1
     e44:	b2e4      	uxtb	r4, r4
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
     e46:	2c00      	cmp	r4, #0
     e48:	d1f2      	bne.n	e30 <I2cInitializeDriver+0x4c>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     e4a:	4b1f      	ldr	r3, [pc, #124]	; (ec8 <I2cInitializeDriver+0xe4>)
     e4c:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     e4e:	2207      	movs	r2, #7
     e50:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
     e52:	421a      	tst	r2, r3
     e54:	d1fc      	bne.n	e50 <I2cInitializeDriver+0x6c>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     e56:	6823      	ldr	r3, [r4, #0]
     e58:	2202      	movs	r2, #2
     e5a:	4313      	orrs	r3, r2
     e5c:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     e5e:	4d1a      	ldr	r5, [pc, #104]	; (ec8 <I2cInitializeDriver+0xe4>)
     e60:	6828      	ldr	r0, [r5, #0]
     e62:	4b1d      	ldr	r3, [pc, #116]	; (ed8 <I2cInitializeDriver+0xf4>)
     e64:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     e66:	231f      	movs	r3, #31
     e68:	4018      	ands	r0, r3
     e6a:	3b1e      	subs	r3, #30
     e6c:	4083      	lsls	r3, r0
     e6e:	4a1b      	ldr	r2, [pc, #108]	; (edc <I2cInitializeDriver+0xf8>)
     e70:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     e72:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
     e74:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     e76:	2110      	movs	r1, #16
     e78:	8b62      	ldrh	r2, [r4, #26]
     e7a:	420a      	tst	r2, r1
     e7c:	d104      	bne.n	e88 <I2cInitializeDriver+0xa4>
		timeout_counter++;
     e7e:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     e80:	4283      	cmp	r3, r0
     e82:	d3f9      	bcc.n	e78 <I2cInitializeDriver+0x94>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     e84:	2310      	movs	r3, #16
     e86:	8363      	strh	r3, [r4, #26]
	int32_t error = STATUS_OK;

	error = I2cDriverConfigureSensorBus();
	if(STATUS_OK != error) goto exit;
	
	I2cDriverRegisterSensorBusCallbacks();
     e88:	4b15      	ldr	r3, [pc, #84]	; (ee0 <I2cInitializeDriver+0xfc>)
     e8a:	4798      	blx	r3
		
	sensorI2cMutexHandle = xSemaphoreCreateMutex();
     e8c:	2001      	movs	r0, #1
     e8e:	4b15      	ldr	r3, [pc, #84]	; (ee4 <I2cInitializeDriver+0x100>)
     e90:	4798      	blx	r3
     e92:	4c15      	ldr	r4, [pc, #84]	; (ee8 <I2cInitializeDriver+0x104>)
     e94:	6020      	str	r0, [r4, #0]
	
	sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
     e96:	2203      	movs	r2, #3
     e98:	2100      	movs	r1, #0
     e9a:	2001      	movs	r0, #1
     e9c:	4b13      	ldr	r3, [pc, #76]	; (eec <I2cInitializeDriver+0x108>)
     e9e:	4798      	blx	r3
     ea0:	4b13      	ldr	r3, [pc, #76]	; (ef0 <I2cInitializeDriver+0x10c>)
     ea2:	6018      	str	r0, [r3, #0]
	//xSemaphoreGive(sensorI2cSemaphoreHandle);

	
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
     ea4:	6823      	ldr	r3, [r4, #0]
     ea6:	2b00      	cmp	r3, #0
     ea8:	d004      	beq.n	eb4 <I2cInitializeDriver+0xd0>
	error = I2cDriverConfigureSensorBus();
     eaa:	2300      	movs	r3, #0
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
     eac:	2800      	cmp	r0, #0
     eae:	d102      	bne.n	eb6 <I2cInitializeDriver+0xd2>
		error = STATUS_SUSPEND;	//Could not initialize mutex!
     eb0:	3306      	adds	r3, #6
     eb2:	e000      	b.n	eb6 <I2cInitializeDriver+0xd2>
     eb4:	2306      	movs	r3, #6
		goto exit;
	}

	exit:
	return error;		
}
     eb6:	0018      	movs	r0, r3
     eb8:	b00e      	add	sp, #56	; 0x38
     eba:	bd70      	pop	{r4, r5, r6, pc}
     ebc:	00000d48 	.word	0x00000d48
     ec0:	00080002 	.word	0x00080002
     ec4:	00090002 	.word	0x00090002
     ec8:	200038ac 	.word	0x200038ac
     ecc:	00001af9 	.word	0x00001af9
     ed0:	42000800 	.word	0x42000800
     ed4:	00001df1 	.word	0x00001df1
     ed8:	000062a5 	.word	0x000062a5
     edc:	e000e100 	.word	0xe000e100
     ee0:	00000d9d 	.word	0x00000d9d
     ee4:	00003c6d 	.word	0x00003c6d
     ee8:	200038a8 	.word	0x200038a8
     eec:	00003809 	.word	0x00003809
     ef0:	200038d4 	.word	0x200038d4

00000ef4 <I2cWriteData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData(I2C_Data *data){
     ef4:	b510      	push	{r4, lr}
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
     ef6:	2800      	cmp	r0, #0
     ef8:	d012      	beq.n	f20 <I2cWriteData+0x2c>
     efa:	6843      	ldr	r3, [r0, #4]
     efc:	2b00      	cmp	r3, #0
     efe:	d012      	beq.n	f26 <I2cWriteData+0x32>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
     f00:	490a      	ldr	r1, [pc, #40]	; (f2c <I2cWriteData+0x38>)
     f02:	7802      	ldrb	r2, [r0, #0]
     f04:	800a      	strh	r2, [r1, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
     f06:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenOut;
     f08:	89c3      	ldrh	r3, [r0, #14]
     f0a:	804b      	strh	r3, [r1, #2]
	
	//Write

	 hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
     f0c:	4808      	ldr	r0, [pc, #32]	; (f30 <I2cWriteData+0x3c>)
     f0e:	4b09      	ldr	r3, [pc, #36]	; (f34 <I2cWriteData+0x40>)
     f10:	4798      	blx	r3
	int32_t error = ERROR_NONE;
     f12:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
     f14:	2800      	cmp	r0, #0
     f16:	d101      	bne.n	f1c <I2cWriteData+0x28>
		goto exit;
	}
	
	exit:
	return error;
}
     f18:	0018      	movs	r0, r3
     f1a:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
     f1c:	3b06      	subs	r3, #6
     f1e:	e7fb      	b.n	f18 <I2cWriteData+0x24>
		error = ERR_INVALID_ARG;
     f20:	2308      	movs	r3, #8
     f22:	425b      	negs	r3, r3
     f24:	e7f8      	b.n	f18 <I2cWriteData+0x24>
     f26:	2308      	movs	r3, #8
     f28:	425b      	negs	r3, r3
     f2a:	e7f5      	b.n	f18 <I2cWriteData+0x24>
     f2c:	200038d8 	.word	0x200038d8
     f30:	200038ac 	.word	0x200038ac
     f34:	00000351 	.word	0x00000351

00000f38 <I2cReadData>:
 * @details     
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
int32_t I2cReadData(I2C_Data *data){
     f38:	b510      	push	{r4, lr}
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
     f3a:	2800      	cmp	r0, #0
     f3c:	d013      	beq.n	f66 <I2cReadData+0x2e>
     f3e:	6843      	ldr	r3, [r0, #4]
     f40:	2b00      	cmp	r3, #0
     f42:	d013      	beq.n	f6c <I2cReadData+0x34>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to read
	sensorPacketWrite.address = data->address;
     f44:	490b      	ldr	r1, [pc, #44]	; (f74 <I2cReadData+0x3c>)
     f46:	7803      	ldrb	r3, [r0, #0]
     f48:	800b      	strh	r3, [r1, #0]
	sensorPacketWrite.data = data->msgIn;
     f4a:	6883      	ldr	r3, [r0, #8]
     f4c:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenIn;
     f4e:	8983      	ldrh	r3, [r0, #12]
     f50:	804b      	strh	r3, [r1, #2]
	
	//Read
	hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
     f52:	4809      	ldr	r0, [pc, #36]	; (f78 <I2cReadData+0x40>)
     f54:	4b09      	ldr	r3, [pc, #36]	; (f7c <I2cReadData+0x44>)
     f56:	4798      	blx	r3
	int32_t error = ERROR_NONE;
     f58:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
     f5a:	2800      	cmp	r0, #0
     f5c:	d101      	bne.n	f62 <I2cReadData+0x2a>
		goto exit;
	}
	
	exit:
	return error;
}
     f5e:	0018      	movs	r0, r3
     f60:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
     f62:	3b06      	subs	r3, #6
     f64:	e7fb      	b.n	f5e <I2cReadData+0x26>
		error = ERR_INVALID_ARG;
     f66:	2308      	movs	r3, #8
     f68:	425b      	negs	r3, r3
     f6a:	e7f8      	b.n	f5e <I2cReadData+0x26>
     f6c:	2308      	movs	r3, #8
     f6e:	425b      	negs	r3, r3
     f70:	e7f5      	b.n	f5e <I2cReadData+0x26>
     f72:	46c0      	nop			; (mov r8, r8)
     f74:	200038d8 	.word	0x200038d8
     f78:	200038ac 	.word	0x200038ac
     f7c:	0000032d 	.word	0x0000032d

00000f80 <I2cFreeMutex>:
 * @details     
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (ERROR_NONE) if the bus is ready, (ERROR_NOT_INITIALIZED) if it is busy.
 * @note        STUDENTS TO FILL OUT!
 *****************************************************************************/
int32_t I2cFreeMutex(void){
     f80:	b510      	push	{r4, lr}
	
	int32_t error = ERROR_NONE;
	
	//students to fill out. Check what the function has to return
	if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE)
     f82:	4b07      	ldr	r3, [pc, #28]	; (fa0 <I2cFreeMutex+0x20>)
     f84:	6818      	ldr	r0, [r3, #0]
     f86:	2300      	movs	r3, #0
     f88:	2200      	movs	r2, #0
     f8a:	2100      	movs	r1, #0
     f8c:	4c05      	ldr	r4, [pc, #20]	; (fa4 <I2cFreeMutex+0x24>)
     f8e:	47a0      	blx	r4
	int32_t error = ERROR_NONE;
     f90:	2300      	movs	r3, #0
	if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE)
     f92:	2801      	cmp	r0, #1
     f94:	d101      	bne.n	f9a <I2cFreeMutex+0x1a>
		error = ERROR_NOT_INITIALIZED;
	
	return error;
}
     f96:	0018      	movs	r0, r3
     f98:	bd10      	pop	{r4, pc}
		error = ERROR_NOT_INITIALIZED;
     f9a:	3b14      	subs	r3, #20
     f9c:	e7fb      	b.n	f96 <I2cFreeMutex+0x16>
     f9e:	46c0      	nop			; (mov r8, r8)
     fa0:	200038a8 	.word	0x200038a8
     fa4:	00003945 	.word	0x00003945

00000fa8 <I2cGetMutex>:
 * @details     
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (ERROR_NONE) if we got the mutex, (ERROR_NOT_READY) if we time out before we got it
 * @note        
 *****************************************************************************/
int32_t I2cGetMutex(TickType_t waitTime){
     fa8:	b510      	push	{r4, lr}
     faa:	0001      	movs	r1, r0
	
	int32_t error = ERROR_NONE;
	//students to fill out. Check what the function has to return
	
	if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE)
     fac:	4b05      	ldr	r3, [pc, #20]	; (fc4 <I2cGetMutex+0x1c>)
     fae:	6818      	ldr	r0, [r3, #0]
     fb0:	4b05      	ldr	r3, [pc, #20]	; (fc8 <I2cGetMutex+0x20>)
     fb2:	4798      	blx	r3
	int32_t error = ERROR_NONE;
     fb4:	2300      	movs	r3, #0
	if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE)
     fb6:	2801      	cmp	r0, #1
     fb8:	d101      	bne.n	fbe <I2cGetMutex+0x16>
		error = ERROR_NOT_READY;
		
	return error;
}
     fba:	0018      	movs	r0, r3
     fbc:	bd10      	pop	{r4, pc}
		error = ERROR_NOT_READY;
     fbe:	3b1d      	subs	r3, #29
     fc0:	e7fb      	b.n	fba <I2cGetMutex+0x12>
     fc2:	46c0      	nop			; (mov r8, r8)
     fc4:	200038a8 	.word	0x200038a8
     fc8:	000042ed 	.word	0x000042ed

00000fcc <I2cWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime){
     fcc:	b570      	push	{r4, r5, r6, lr}
     fce:	0005      	movs	r5, r0
     fd0:	000c      	movs	r4, r1

	int32_t error = ERROR_NONE;
	SemaphoreHandle_t semHandle = NULL;

	//---0. Get Mutex
	error = I2cGetMutex(xMaxBlockTime);
     fd2:	0008      	movs	r0, r1
     fd4:	4b0f      	ldr	r3, [pc, #60]	; (1014 <I2cWriteDataWait+0x48>)
     fd6:	4798      	blx	r3
	//error=0;
	if(ERROR_NONE != error) goto exit;
     fd8:	2800      	cmp	r0, #0
     fda:	d000      	beq.n	fde <I2cWriteDataWait+0x12>
exitError0:
error = I2cFreeMutex();

return error;

}
     fdc:	bd70      	pop	{r4, r5, r6, pc}
	*handle = sensorI2cSemaphoreHandle;
     fde:	4b0e      	ldr	r3, [pc, #56]	; (1018 <I2cWriteDataWait+0x4c>)
     fe0:	681e      	ldr	r6, [r3, #0]
	error = I2cWriteData(data);
     fe2:	0028      	movs	r0, r5
     fe4:	4b0d      	ldr	r3, [pc, #52]	; (101c <I2cWriteDataWait+0x50>)
     fe6:	4798      	blx	r3
	if (ERROR_NONE != error){
     fe8:	2800      	cmp	r0, #0
     fea:	d105      	bne.n	ff8 <I2cWriteDataWait+0x2c>
	if( xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE ){
     fec:	0021      	movs	r1, r4
     fee:	0030      	movs	r0, r6
     ff0:	4b0b      	ldr	r3, [pc, #44]	; (1020 <I2cWriteDataWait+0x54>)
     ff2:	4798      	blx	r3
     ff4:	2801      	cmp	r0, #1
     ff6:	d002      	beq.n	ffe <I2cWriteDataWait+0x32>
error = I2cFreeMutex();
     ff8:	4b0a      	ldr	r3, [pc, #40]	; (1024 <I2cWriteDataWait+0x58>)
     ffa:	4798      	blx	r3
return error;
     ffc:	e7ee      	b.n	fdc <I2cWriteDataWait+0x10>
	 return sensorTransmitError;
     ffe:	4b0a      	ldr	r3, [pc, #40]	; (1028 <I2cWriteDataWait+0x5c>)
		if(I2cGetTaskErrorStatus()){
    1000:	781b      	ldrb	r3, [r3, #0]
    1002:	2b00      	cmp	r3, #0
    1004:	d003      	beq.n	100e <I2cWriteDataWait+0x42>
	sensorTransmitError = value;
    1006:	2200      	movs	r2, #0
    1008:	4b07      	ldr	r3, [pc, #28]	; (1028 <I2cWriteDataWait+0x5c>)
    100a:	701a      	strb	r2, [r3, #0]
    100c:	e7f4      	b.n	ff8 <I2cWriteDataWait+0x2c>
	error |= I2cFreeMutex();
    100e:	4b05      	ldr	r3, [pc, #20]	; (1024 <I2cWriteDataWait+0x58>)
    1010:	4798      	blx	r3
    1012:	e7e3      	b.n	fdc <I2cWriteDataWait+0x10>
    1014:	00000fa9 	.word	0x00000fa9
    1018:	200038d4 	.word	0x200038d4
    101c:	00000ef5 	.word	0x00000ef5
    1020:	000042ed 	.word	0x000042ed
    1024:	00000f81 	.word	0x00000f81
    1028:	20000318 	.word	0x20000318

0000102c <I2cReadDataWait>:
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
				students to fill!
 *****************************************************************************/
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime) {
    102c:	b570      	push	{r4, r5, r6, lr}
    102e:	0005      	movs	r5, r0
    1030:	0014      	movs	r4, r2
	
	int32_t error = ERROR_NONE;
	SemaphoreHandle_t semHandle = NULL;
	
	//---0. Get Mutex
	error = I2cGetMutex(xMaxBlockTime);
    1032:	0010      	movs	r0, r2
    1034:	4b19      	ldr	r3, [pc, #100]	; (109c <I2cReadDataWait+0x70>)
    1036:	4798      	blx	r3
	if(ERROR_NONE != error) goto exit;
    1038:	2800      	cmp	r0, #0
    103a:	d000      	beq.n	103e <I2cReadDataWait+0x12>

	exitError0:
	error = I2cFreeMutex();

	return error;
}
    103c:	bd70      	pop	{r4, r5, r6, pc}
	*handle = sensorI2cSemaphoreHandle;
    103e:	4b18      	ldr	r3, [pc, #96]	; (10a0 <I2cReadDataWait+0x74>)
    1040:	681e      	ldr	r6, [r3, #0]
	error = I2cWriteData(data);
    1042:	0028      	movs	r0, r5
    1044:	4b17      	ldr	r3, [pc, #92]	; (10a4 <I2cReadDataWait+0x78>)
    1046:	4798      	blx	r3
	if (ERROR_NONE != error){
    1048:	2800      	cmp	r0, #0
    104a:	d105      	bne.n	1058 <I2cReadDataWait+0x2c>
	if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE ) {
    104c:	0021      	movs	r1, r4
    104e:	0030      	movs	r0, r6
    1050:	4b15      	ldr	r3, [pc, #84]	; (10a8 <I2cReadDataWait+0x7c>)
    1052:	4798      	blx	r3
    1054:	2801      	cmp	r0, #1
    1056:	d002      	beq.n	105e <I2cReadDataWait+0x32>
	error = I2cFreeMutex();
    1058:	4b14      	ldr	r3, [pc, #80]	; (10ac <I2cReadDataWait+0x80>)
    105a:	4798      	blx	r3
	return error;
    105c:	e7ee      	b.n	103c <I2cReadDataWait+0x10>
	 return sensorTransmitError;
    105e:	4b14      	ldr	r3, [pc, #80]	; (10b0 <I2cReadDataWait+0x84>)
		if (I2cGetTaskErrorStatus()) {
    1060:	781b      	ldrb	r3, [r3, #0]
    1062:	2b00      	cmp	r3, #0
    1064:	d003      	beq.n	106e <I2cReadDataWait+0x42>
	sensorTransmitError = value;
    1066:	2200      	movs	r2, #0
    1068:	4b11      	ldr	r3, [pc, #68]	; (10b0 <I2cReadDataWait+0x84>)
    106a:	701a      	strb	r2, [r3, #0]
    106c:	e7f4      	b.n	1058 <I2cReadDataWait+0x2c>
	error = I2cReadData(data);
    106e:	0028      	movs	r0, r5
    1070:	4b10      	ldr	r3, [pc, #64]	; (10b4 <I2cReadDataWait+0x88>)
    1072:	4798      	blx	r3
	if (ERROR_NONE != error){
    1074:	2800      	cmp	r0, #0
    1076:	d1ef      	bne.n	1058 <I2cReadDataWait+0x2c>
	if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE ) {
    1078:	0021      	movs	r1, r4
    107a:	0030      	movs	r0, r6
    107c:	4b0a      	ldr	r3, [pc, #40]	; (10a8 <I2cReadDataWait+0x7c>)
    107e:	4798      	blx	r3
    1080:	2801      	cmp	r0, #1
    1082:	d1e9      	bne.n	1058 <I2cReadDataWait+0x2c>
	 return sensorTransmitError;
    1084:	4b0a      	ldr	r3, [pc, #40]	; (10b0 <I2cReadDataWait+0x84>)
		if (I2cGetTaskErrorStatus()) {
    1086:	781b      	ldrb	r3, [r3, #0]
    1088:	2b00      	cmp	r3, #0
    108a:	d003      	beq.n	1094 <I2cReadDataWait+0x68>
	sensorTransmitError = value;
    108c:	2200      	movs	r2, #0
    108e:	4b08      	ldr	r3, [pc, #32]	; (10b0 <I2cReadDataWait+0x84>)
    1090:	701a      	strb	r2, [r3, #0]
    1092:	e7e1      	b.n	1058 <I2cReadDataWait+0x2c>
	error |= I2cFreeMutex();
    1094:	4b05      	ldr	r3, [pc, #20]	; (10ac <I2cReadDataWait+0x80>)
    1096:	4798      	blx	r3
    1098:	e7d0      	b.n	103c <I2cReadDataWait+0x10>
    109a:	46c0      	nop			; (mov r8, r8)
    109c:	00000fa9 	.word	0x00000fa9
    10a0:	200038d4 	.word	0x200038d4
    10a4:	00000ef5 	.word	0x00000ef5
    10a8:	000042ed 	.word	0x000042ed
    10ac:	00000f81 	.word	0x00000f81
    10b0:	20000318 	.word	0x20000318
    10b4:	00000f39 	.word	0x00000f39

000010b8 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    10b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    10ba:	b083      	sub	sp, #12
    10bc:	0016      	movs	r6, r2
    10be:	001d      	movs	r5, r3
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	
	int32_t error;
	uint8_t reg_add;
	
	imuData.lenIn = len;
    10c0:	480c      	ldr	r0, [pc, #48]	; (10f4 <platform_read+0x3c>)
    10c2:	8183      	strh	r3, [r0, #12]
	imuData.msgIn = msgOutImu;
    10c4:	4c0c      	ldr	r4, [pc, #48]	; (10f8 <platform_read+0x40>)
    10c6:	6084      	str	r4, [r0, #8]
	
	reg_add = reg;
    10c8:	466b      	mov	r3, sp
    10ca:	71d9      	strb	r1, [r3, #7]
    10cc:	3307      	adds	r3, #7
	imuData.msgOut = &reg_add;
    10ce:	6043      	str	r3, [r0, #4]
	imuData.lenOut = 1;
    10d0:	2301      	movs	r3, #1
    10d2:	81c3      	strh	r3, [r0, #14]
	imuData.address = 0x6B;
    10d4:	336a      	adds	r3, #106	; 0x6a
    10d6:	7003      	strb	r3, [r0, #0]
	
	error = I2cReadDataWait(&imuData, 0, 100);
    10d8:	2264      	movs	r2, #100	; 0x64
    10da:	2100      	movs	r1, #0
    10dc:	4b07      	ldr	r3, [pc, #28]	; (10fc <platform_read+0x44>)
    10de:	4798      	blx	r3
    10e0:	0007      	movs	r7, r0
	memcpy(bufp, msgOutImu, len);
    10e2:	002a      	movs	r2, r5
    10e4:	0021      	movs	r1, r4
    10e6:	0030      	movs	r0, r6
    10e8:	4b05      	ldr	r3, [pc, #20]	; (1100 <platform_read+0x48>)
    10ea:	4798      	blx	r3
	
	return error;
}
    10ec:	0038      	movs	r0, r7
    10ee:	b003      	add	sp, #12
    10f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	20003924 	.word	0x20003924
    10f8:	200038e4 	.word	0x200038e4
    10fc:	0000102d 	.word	0x0000102d
    1100:	00009a7d 	.word	0x00009a7d

00001104 <platform_write>:
{
    1104:	b570      	push	{r4, r5, r6, lr}
    1106:	0015      	movs	r5, r2
	imuData.lenIn = 0;
    1108:	4c0a      	ldr	r4, [pc, #40]	; (1134 <platform_write+0x30>)
    110a:	2200      	movs	r2, #0
    110c:	81a2      	strh	r2, [r4, #12]
	imuData.lenOut = len+1; // accounting for register write byte as well.
    110e:	1c5a      	adds	r2, r3, #1
    1110:	81e2      	strh	r2, [r4, #14]
	imuData.msgIn =  msgOutImu;
    1112:	4809      	ldr	r0, [pc, #36]	; (1138 <platform_write+0x34>)
    1114:	60a0      	str	r0, [r4, #8]
	imuData.msgOut = msgOutImu;
    1116:	6060      	str	r0, [r4, #4]
	imuData.address = 0x6B;
    1118:	226b      	movs	r2, #107	; 0x6b
    111a:	7022      	strb	r2, [r4, #0]
	msgOutImu[0] = reg;
    111c:	7001      	strb	r1, [r0, #0]
	memcpy(&msgOutImu[1], bufp, len);
    111e:	3001      	adds	r0, #1
    1120:	001a      	movs	r2, r3
    1122:	0029      	movs	r1, r5
    1124:	4b05      	ldr	r3, [pc, #20]	; (113c <platform_write+0x38>)
    1126:	4798      	blx	r3
	return I2cWriteDataWait(&imuData, 100);
    1128:	2164      	movs	r1, #100	; 0x64
    112a:	0020      	movs	r0, r4
    112c:	4b04      	ldr	r3, [pc, #16]	; (1140 <platform_write+0x3c>)
    112e:	4798      	blx	r3
}
    1130:	bd70      	pop	{r4, r5, r6, pc}
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	20003924 	.word	0x20003924
    1138:	200038e4 	.word	0x200038e4
    113c:	00009a7d 	.word	0x00009a7d
    1140:	00000fcd 	.word	0x00000fcd

00001144 <lsm6dso_read_reg>:
{
    1144:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    1146:	6885      	ldr	r5, [r0, #8]
    1148:	6844      	ldr	r4, [r0, #4]
    114a:	0028      	movs	r0, r5
    114c:	47a0      	blx	r4
}
    114e:	bd70      	pop	{r4, r5, r6, pc}

00001150 <lsm6dso_write_reg>:
{
    1150:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    1152:	6885      	ldr	r5, [r0, #8]
    1154:	6804      	ldr	r4, [r0, #0]
    1156:	0028      	movs	r0, r5
    1158:	47a0      	blx	r4
}
    115a:	bd70      	pop	{r4, r5, r6, pc}

0000115c <lsm6dso_from_fs2_to_mg>:
{
    115c:	b510      	push	{r4, lr}
  return ((float_t)lsb) * 0.061f;
    115e:	4b03      	ldr	r3, [pc, #12]	; (116c <lsm6dso_from_fs2_to_mg+0x10>)
    1160:	4798      	blx	r3
    1162:	4903      	ldr	r1, [pc, #12]	; (1170 <lsm6dso_from_fs2_to_mg+0x14>)
    1164:	4b03      	ldr	r3, [pc, #12]	; (1174 <lsm6dso_from_fs2_to_mg+0x18>)
    1166:	4798      	blx	r3
}
    1168:	bd10      	pop	{r4, pc}
    116a:	46c0      	nop			; (mov r8, r8)
    116c:	00008021 	.word	0x00008021
    1170:	3d79db23 	.word	0x3d79db23
    1174:	00007a69 	.word	0x00007a69

00001178 <lsm6dso_xl_full_scale_set>:
{
    1178:	b570      	push	{r4, r5, r6, lr}
    117a:	b082      	sub	sp, #8
    117c:	0004      	movs	r4, r0
    117e:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    1180:	2301      	movs	r3, #1
    1182:	aa01      	add	r2, sp, #4
    1184:	2110      	movs	r1, #16
    1186:	4e0a      	ldr	r6, [pc, #40]	; (11b0 <lsm6dso_xl_full_scale_set+0x38>)
    1188:	47b0      	blx	r6
  if (ret == 0)
    118a:	2800      	cmp	r0, #0
    118c:	d001      	beq.n	1192 <lsm6dso_xl_full_scale_set+0x1a>
}
    118e:	b002      	add	sp, #8
    1190:	bd70      	pop	{r4, r5, r6, pc}
    reg.fs_xl = (uint8_t) val;
    1192:	aa01      	add	r2, sp, #4
    1194:	2103      	movs	r1, #3
    1196:	4029      	ands	r1, r5
    1198:	008b      	lsls	r3, r1, #2
    119a:	7811      	ldrb	r1, [r2, #0]
    119c:	300c      	adds	r0, #12
    119e:	4381      	bics	r1, r0
    11a0:	4319      	orrs	r1, r3
    11a2:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    11a4:	2301      	movs	r3, #1
    11a6:	2110      	movs	r1, #16
    11a8:	0020      	movs	r0, r4
    11aa:	4c02      	ldr	r4, [pc, #8]	; (11b4 <lsm6dso_xl_full_scale_set+0x3c>)
    11ac:	47a0      	blx	r4
  return ret;
    11ae:	e7ee      	b.n	118e <lsm6dso_xl_full_scale_set+0x16>
    11b0:	00001145 	.word	0x00001145
    11b4:	00001151 	.word	0x00001151

000011b8 <lsm6dso_gy_full_scale_set>:
{
    11b8:	b570      	push	{r4, r5, r6, lr}
    11ba:	b082      	sub	sp, #8
    11bc:	0004      	movs	r4, r0
    11be:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    11c0:	2301      	movs	r3, #1
    11c2:	aa01      	add	r2, sp, #4
    11c4:	2111      	movs	r1, #17
    11c6:	4e0a      	ldr	r6, [pc, #40]	; (11f0 <lsm6dso_gy_full_scale_set+0x38>)
    11c8:	47b0      	blx	r6
  if (ret == 0)
    11ca:	2800      	cmp	r0, #0
    11cc:	d001      	beq.n	11d2 <lsm6dso_gy_full_scale_set+0x1a>
}
    11ce:	b002      	add	sp, #8
    11d0:	bd70      	pop	{r4, r5, r6, pc}
    reg.fs_g = (uint8_t) val;
    11d2:	aa01      	add	r2, sp, #4
    11d4:	2107      	movs	r1, #7
    11d6:	4029      	ands	r1, r5
    11d8:	004b      	lsls	r3, r1, #1
    11da:	7811      	ldrb	r1, [r2, #0]
    11dc:	300e      	adds	r0, #14
    11de:	4381      	bics	r1, r0
    11e0:	4319      	orrs	r1, r3
    11e2:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    11e4:	2301      	movs	r3, #1
    11e6:	2111      	movs	r1, #17
    11e8:	0020      	movs	r0, r4
    11ea:	4c02      	ldr	r4, [pc, #8]	; (11f4 <lsm6dso_gy_full_scale_set+0x3c>)
    11ec:	47a0      	blx	r4
  return ret;
    11ee:	e7ee      	b.n	11ce <lsm6dso_gy_full_scale_set+0x16>
    11f0:	00001145 	.word	0x00001145
    11f4:	00001151 	.word	0x00001151

000011f8 <lsm6dso_block_data_update_set>:
{
    11f8:	b570      	push	{r4, r5, r6, lr}
    11fa:	b082      	sub	sp, #8
    11fc:	0004      	movs	r4, r0
    11fe:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    1200:	2301      	movs	r3, #1
    1202:	aa01      	add	r2, sp, #4
    1204:	2112      	movs	r1, #18
    1206:	4e0a      	ldr	r6, [pc, #40]	; (1230 <lsm6dso_block_data_update_set+0x38>)
    1208:	47b0      	blx	r6
  if (ret == 0)
    120a:	2800      	cmp	r0, #0
    120c:	d001      	beq.n	1212 <lsm6dso_block_data_update_set+0x1a>
}
    120e:	b002      	add	sp, #8
    1210:	bd70      	pop	{r4, r5, r6, pc}
    reg.bdu = val;
    1212:	aa01      	add	r2, sp, #4
    1214:	2101      	movs	r1, #1
    1216:	4029      	ands	r1, r5
    1218:	018b      	lsls	r3, r1, #6
    121a:	7811      	ldrb	r1, [r2, #0]
    121c:	3040      	adds	r0, #64	; 0x40
    121e:	4381      	bics	r1, r0
    1220:	4319      	orrs	r1, r3
    1222:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    1224:	2301      	movs	r3, #1
    1226:	2112      	movs	r1, #18
    1228:	0020      	movs	r0, r4
    122a:	4c02      	ldr	r4, [pc, #8]	; (1234 <lsm6dso_block_data_update_set+0x3c>)
    122c:	47a0      	blx	r4
  return ret;
    122e:	e7ee      	b.n	120e <lsm6dso_block_data_update_set+0x16>
    1230:	00001145 	.word	0x00001145
    1234:	00001151 	.word	0x00001151

00001238 <lsm6dso_xl_offset_weight_set>:
{
    1238:	b570      	push	{r4, r5, r6, lr}
    123a:	b082      	sub	sp, #8
    123c:	0004      	movs	r4, r0
    123e:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
    1240:	2301      	movs	r3, #1
    1242:	aa01      	add	r2, sp, #4
    1244:	2115      	movs	r1, #21
    1246:	4e0a      	ldr	r6, [pc, #40]	; (1270 <lsm6dso_xl_offset_weight_set+0x38>)
    1248:	47b0      	blx	r6
  if (ret == 0)
    124a:	2800      	cmp	r0, #0
    124c:	d001      	beq.n	1252 <lsm6dso_xl_offset_weight_set+0x1a>
}
    124e:	b002      	add	sp, #8
    1250:	bd70      	pop	{r4, r5, r6, pc}
    reg.usr_off_w = (uint8_t)val;
    1252:	aa01      	add	r2, sp, #4
    1254:	2101      	movs	r1, #1
    1256:	4029      	ands	r1, r5
    1258:	00cb      	lsls	r3, r1, #3
    125a:	7811      	ldrb	r1, [r2, #0]
    125c:	3008      	adds	r0, #8
    125e:	4381      	bics	r1, r0
    1260:	4319      	orrs	r1, r3
    1262:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
    1264:	2301      	movs	r3, #1
    1266:	2115      	movs	r1, #21
    1268:	0020      	movs	r0, r4
    126a:	4c02      	ldr	r4, [pc, #8]	; (1274 <lsm6dso_xl_offset_weight_set+0x3c>)
    126c:	47a0      	blx	r4
  return ret;
    126e:	e7ee      	b.n	124e <lsm6dso_xl_offset_weight_set+0x16>
    1270:	00001145 	.word	0x00001145
    1274:	00001151 	.word	0x00001151

00001278 <lsm6dso_xl_flag_data_ready_get>:
{
    1278:	b570      	push	{r4, r5, r6, lr}
    127a:	b082      	sub	sp, #8
    127c:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
    127e:	ac01      	add	r4, sp, #4
    1280:	2301      	movs	r3, #1
    1282:	0022      	movs	r2, r4
    1284:	211e      	movs	r1, #30
    1286:	4e04      	ldr	r6, [pc, #16]	; (1298 <lsm6dso_xl_flag_data_ready_get+0x20>)
    1288:	47b0      	blx	r6
  *val = reg.xlda;
    128a:	7823      	ldrb	r3, [r4, #0]
    128c:	07db      	lsls	r3, r3, #31
    128e:	0fdb      	lsrs	r3, r3, #31
    1290:	702b      	strb	r3, [r5, #0]
}
    1292:	b002      	add	sp, #8
    1294:	bd70      	pop	{r4, r5, r6, pc}
    1296:	46c0      	nop			; (mov r8, r8)
    1298:	00001145 	.word	0x00001145

0000129c <lsm6dso_acceleration_raw_get>:
{
    129c:	b530      	push	{r4, r5, lr}
    129e:	b083      	sub	sp, #12
    12a0:	000c      	movs	r4, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
    12a2:	2306      	movs	r3, #6
    12a4:	466a      	mov	r2, sp
    12a6:	2128      	movs	r1, #40	; 0x28
    12a8:	4d0a      	ldr	r5, [pc, #40]	; (12d4 <lsm6dso_acceleration_raw_get+0x38>)
    12aa:	47a8      	blx	r5
  val[0] = (val[0] * 256) + (int16_t)buff[0];
    12ac:	466b      	mov	r3, sp
    12ae:	785a      	ldrb	r2, [r3, #1]
    12b0:	0212      	lsls	r2, r2, #8
    12b2:	781b      	ldrb	r3, [r3, #0]
    12b4:	189b      	adds	r3, r3, r2
    12b6:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
    12b8:	466b      	mov	r3, sp
    12ba:	78da      	ldrb	r2, [r3, #3]
    12bc:	0212      	lsls	r2, r2, #8
    12be:	789b      	ldrb	r3, [r3, #2]
    12c0:	189b      	adds	r3, r3, r2
    12c2:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
    12c4:	466b      	mov	r3, sp
    12c6:	795a      	ldrb	r2, [r3, #5]
    12c8:	0212      	lsls	r2, r2, #8
    12ca:	791b      	ldrb	r3, [r3, #4]
    12cc:	189b      	adds	r3, r3, r2
    12ce:	80a3      	strh	r3, [r4, #4]
}
    12d0:	b003      	add	sp, #12
    12d2:	bd30      	pop	{r4, r5, pc}
    12d4:	00001145 	.word	0x00001145

000012d8 <lsm6dso_mem_bank_set>:
{
    12d8:	b570      	push	{r4, r5, r6, lr}
    12da:	b082      	sub	sp, #8
    12dc:	0004      	movs	r4, r0
    12de:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
    12e0:	2301      	movs	r3, #1
    12e2:	aa01      	add	r2, sp, #4
    12e4:	2101      	movs	r1, #1
    12e6:	4e09      	ldr	r6, [pc, #36]	; (130c <lsm6dso_mem_bank_set+0x34>)
    12e8:	47b0      	blx	r6
  if (ret == 0)
    12ea:	2800      	cmp	r0, #0
    12ec:	d001      	beq.n	12f2 <lsm6dso_mem_bank_set+0x1a>
}
    12ee:	b002      	add	sp, #8
    12f0:	bd70      	pop	{r4, r5, r6, pc}
    reg.reg_access = (uint8_t)val;
    12f2:	aa01      	add	r2, sp, #4
    12f4:	01ad      	lsls	r5, r5, #6
    12f6:	7813      	ldrb	r3, [r2, #0]
    12f8:	213f      	movs	r1, #63	; 0x3f
    12fa:	4019      	ands	r1, r3
    12fc:	4329      	orrs	r1, r5
    12fe:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
    1300:	2301      	movs	r3, #1
    1302:	2101      	movs	r1, #1
    1304:	0020      	movs	r0, r4
    1306:	4c02      	ldr	r4, [pc, #8]	; (1310 <lsm6dso_mem_bank_set+0x38>)
    1308:	47a0      	blx	r4
  return ret;
    130a:	e7f0      	b.n	12ee <lsm6dso_mem_bank_set+0x16>
    130c:	00001145 	.word	0x00001145
    1310:	00001151 	.word	0x00001151

00001314 <lsm6dso_device_id_get>:
{
    1314:	b510      	push	{r4, lr}
    1316:	000a      	movs	r2, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
    1318:	2301      	movs	r3, #1
    131a:	210f      	movs	r1, #15
    131c:	4c01      	ldr	r4, [pc, #4]	; (1324 <lsm6dso_device_id_get+0x10>)
    131e:	47a0      	blx	r4
}
    1320:	bd10      	pop	{r4, pc}
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	00001145 	.word	0x00001145

00001328 <lsm6dso_reset_set>:
{
    1328:	b570      	push	{r4, r5, r6, lr}
    132a:	b082      	sub	sp, #8
    132c:	0004      	movs	r4, r0
    132e:	000e      	movs	r6, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    1330:	2301      	movs	r3, #1
    1332:	aa01      	add	r2, sp, #4
    1334:	2112      	movs	r1, #18
    1336:	4d09      	ldr	r5, [pc, #36]	; (135c <lsm6dso_reset_set+0x34>)
    1338:	47a8      	blx	r5
  if (ret == 0)
    133a:	2800      	cmp	r0, #0
    133c:	d001      	beq.n	1342 <lsm6dso_reset_set+0x1a>
}
    133e:	b002      	add	sp, #8
    1340:	bd70      	pop	{r4, r5, r6, pc}
    reg.sw_reset = val;
    1342:	aa01      	add	r2, sp, #4
    1344:	2101      	movs	r1, #1
    1346:	400e      	ands	r6, r1
    1348:	7811      	ldrb	r1, [r2, #0]
    134a:	2301      	movs	r3, #1
    134c:	4399      	bics	r1, r3
    134e:	4331      	orrs	r1, r6
    1350:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    1352:	2112      	movs	r1, #18
    1354:	0020      	movs	r0, r4
    1356:	4c02      	ldr	r4, [pc, #8]	; (1360 <lsm6dso_reset_set+0x38>)
    1358:	47a0      	blx	r4
  return ret;
    135a:	e7f0      	b.n	133e <lsm6dso_reset_set+0x16>
    135c:	00001145 	.word	0x00001145
    1360:	00001151 	.word	0x00001151

00001364 <lsm6dso_reset_get>:
{
    1364:	b570      	push	{r4, r5, r6, lr}
    1366:	b082      	sub	sp, #8
    1368:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    136a:	ac01      	add	r4, sp, #4
    136c:	2301      	movs	r3, #1
    136e:	0022      	movs	r2, r4
    1370:	2112      	movs	r1, #18
    1372:	4e04      	ldr	r6, [pc, #16]	; (1384 <lsm6dso_reset_get+0x20>)
    1374:	47b0      	blx	r6
  *val = reg.sw_reset;
    1376:	7823      	ldrb	r3, [r4, #0]
    1378:	07db      	lsls	r3, r3, #31
    137a:	0fdb      	lsrs	r3, r3, #31
    137c:	702b      	strb	r3, [r5, #0]
}
    137e:	b002      	add	sp, #8
    1380:	bd70      	pop	{r4, r5, r6, pc}
    1382:	46c0      	nop			; (mov r8, r8)
    1384:	00001145 	.word	0x00001145

00001388 <lsm6dso_xl_filter_lp2_set>:
{
    1388:	b570      	push	{r4, r5, r6, lr}
    138a:	b082      	sub	sp, #8
    138c:	0004      	movs	r4, r0
    138e:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    1390:	2301      	movs	r3, #1
    1392:	aa01      	add	r2, sp, #4
    1394:	2110      	movs	r1, #16
    1396:	4e0a      	ldr	r6, [pc, #40]	; (13c0 <lsm6dso_xl_filter_lp2_set+0x38>)
    1398:	47b0      	blx	r6
  if (ret == 0)
    139a:	2800      	cmp	r0, #0
    139c:	d001      	beq.n	13a2 <lsm6dso_xl_filter_lp2_set+0x1a>
}
    139e:	b002      	add	sp, #8
    13a0:	bd70      	pop	{r4, r5, r6, pc}
    reg.lpf2_xl_en = val;
    13a2:	aa01      	add	r2, sp, #4
    13a4:	2101      	movs	r1, #1
    13a6:	4029      	ands	r1, r5
    13a8:	004b      	lsls	r3, r1, #1
    13aa:	7811      	ldrb	r1, [r2, #0]
    13ac:	3002      	adds	r0, #2
    13ae:	4381      	bics	r1, r0
    13b0:	4319      	orrs	r1, r3
    13b2:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    13b4:	2301      	movs	r3, #1
    13b6:	2110      	movs	r1, #16
    13b8:	0020      	movs	r0, r4
    13ba:	4c02      	ldr	r4, [pc, #8]	; (13c4 <lsm6dso_xl_filter_lp2_set+0x3c>)
    13bc:	47a0      	blx	r4
  return ret;
    13be:	e7ee      	b.n	139e <lsm6dso_xl_filter_lp2_set+0x16>
    13c0:	00001145 	.word	0x00001145
    13c4:	00001151 	.word	0x00001151

000013c8 <lsm6dso_xl_hp_path_on_out_set>:
{
    13c8:	b570      	push	{r4, r5, r6, lr}
    13ca:	b082      	sub	sp, #8
    13cc:	0004      	movs	r4, r0
    13ce:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
    13d0:	2301      	movs	r3, #1
    13d2:	aa01      	add	r2, sp, #4
    13d4:	2117      	movs	r1, #23
    13d6:	4e10      	ldr	r6, [pc, #64]	; (1418 <lsm6dso_xl_hp_path_on_out_set+0x50>)
    13d8:	47b0      	blx	r6
  if (ret == 0)
    13da:	2800      	cmp	r0, #0
    13dc:	d001      	beq.n	13e2 <lsm6dso_xl_hp_path_on_out_set+0x1a>
}
    13de:	b002      	add	sp, #8
    13e0:	bd70      	pop	{r4, r5, r6, pc}
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
    13e2:	aa01      	add	r2, sp, #4
    13e4:	092b      	lsrs	r3, r5, #4
    13e6:	2101      	movs	r1, #1
    13e8:	400b      	ands	r3, r1
    13ea:	0098      	lsls	r0, r3, #2
    13ec:	7813      	ldrb	r3, [r2, #0]
    13ee:	2604      	movs	r6, #4
    13f0:	43b3      	bics	r3, r6
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
    13f2:	096e      	lsrs	r6, r5, #5
    13f4:	4031      	ands	r1, r6
    13f6:	0109      	lsls	r1, r1, #4
    13f8:	4303      	orrs	r3, r0
    13fa:	2010      	movs	r0, #16
    13fc:	4383      	bics	r3, r0
    reg.hpcf_xl = (uint8_t)val & 0x07U;
    13fe:	016d      	lsls	r5, r5, #5
    1400:	430b      	orrs	r3, r1
    1402:	211f      	movs	r1, #31
    1404:	400b      	ands	r3, r1
    1406:	431d      	orrs	r5, r3
    1408:	7015      	strb	r5, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
    140a:	2301      	movs	r3, #1
    140c:	3908      	subs	r1, #8
    140e:	0020      	movs	r0, r4
    1410:	4c02      	ldr	r4, [pc, #8]	; (141c <lsm6dso_xl_hp_path_on_out_set+0x54>)
    1412:	47a0      	blx	r4
  return ret;
    1414:	e7e3      	b.n	13de <lsm6dso_xl_hp_path_on_out_set+0x16>
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	00001145 	.word	0x00001145
    141c:	00001151 	.word	0x00001151

00001420 <lsm6dso_i3c_disable_set>:
{
    1420:	b570      	push	{r4, r5, r6, lr}
    1422:	b082      	sub	sp, #8
    1424:	0004      	movs	r4, r0
    1426:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    1428:	2301      	movs	r3, #1
    142a:	466a      	mov	r2, sp
    142c:	2118      	movs	r1, #24
    142e:	4e16      	ldr	r6, [pc, #88]	; (1488 <lsm6dso_i3c_disable_set+0x68>)
    1430:	47b0      	blx	r6
  if (ret == 0)
    1432:	2800      	cmp	r0, #0
    1434:	d001      	beq.n	143a <lsm6dso_i3c_disable_set+0x1a>
}
    1436:	b002      	add	sp, #8
    1438:	bd70      	pop	{r4, r5, r6, pc}
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
    143a:	09ea      	lsrs	r2, r5, #7
    143c:	0052      	lsls	r2, r2, #1
    143e:	466b      	mov	r3, sp
    1440:	781b      	ldrb	r3, [r3, #0]
    1442:	2102      	movs	r1, #2
    1444:	438b      	bics	r3, r1
    1446:	4313      	orrs	r3, r2
    1448:	466a      	mov	r2, sp
    144a:	7013      	strb	r3, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    144c:	2301      	movs	r3, #1
    144e:	3116      	adds	r1, #22
    1450:	0020      	movs	r0, r4
    1452:	4e0e      	ldr	r6, [pc, #56]	; (148c <lsm6dso_i3c_disable_set+0x6c>)
    1454:	47b0      	blx	r6
  if (ret == 0)
    1456:	2800      	cmp	r0, #0
    1458:	d1ed      	bne.n	1436 <lsm6dso_i3c_disable_set+0x16>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    145a:	2301      	movs	r3, #1
    145c:	aa01      	add	r2, sp, #4
    145e:	2162      	movs	r1, #98	; 0x62
    1460:	0020      	movs	r0, r4
    1462:	4e09      	ldr	r6, [pc, #36]	; (1488 <lsm6dso_i3c_disable_set+0x68>)
    1464:	47b0      	blx	r6
  if (ret == 0)
    1466:	2800      	cmp	r0, #0
    1468:	d1e5      	bne.n	1436 <lsm6dso_i3c_disable_set+0x16>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
    146a:	aa01      	add	r2, sp, #4
    146c:	2103      	movs	r1, #3
    146e:	4029      	ands	r1, r5
    1470:	00cb      	lsls	r3, r1, #3
    1472:	7811      	ldrb	r1, [r2, #0]
    1474:	3018      	adds	r0, #24
    1476:	4381      	bics	r1, r0
    1478:	4319      	orrs	r1, r3
    147a:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    147c:	2301      	movs	r3, #1
    147e:	2162      	movs	r1, #98	; 0x62
    1480:	0020      	movs	r0, r4
    1482:	4c02      	ldr	r4, [pc, #8]	; (148c <lsm6dso_i3c_disable_set+0x6c>)
    1484:	47a0      	blx	r4
  return ret;
    1486:	e7d6      	b.n	1436 <lsm6dso_i3c_disable_set+0x16>
    1488:	00001145 	.word	0x00001145
    148c:	00001151 	.word	0x00001151

00001490 <lsm6dso_fsm_enable_get>:
{
    1490:	b570      	push	{r4, r5, r6, lr}
    1492:	0004      	movs	r4, r0
    1494:	000d      	movs	r5, r1
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    1496:	2102      	movs	r1, #2
    1498:	4b08      	ldr	r3, [pc, #32]	; (14bc <lsm6dso_fsm_enable_get+0x2c>)
    149a:	4798      	blx	r3
  if (ret == 0)
    149c:	2800      	cmp	r0, #0
    149e:	d000      	beq.n	14a2 <lsm6dso_fsm_enable_get+0x12>
}
    14a0:	bd70      	pop	{r4, r5, r6, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
    14a2:	2302      	movs	r3, #2
    14a4:	002a      	movs	r2, r5
    14a6:	2146      	movs	r1, #70	; 0x46
    14a8:	0020      	movs	r0, r4
    14aa:	4d05      	ldr	r5, [pc, #20]	; (14c0 <lsm6dso_fsm_enable_get+0x30>)
    14ac:	47a8      	blx	r5
  if (ret == 0)
    14ae:	2800      	cmp	r0, #0
    14b0:	d1f6      	bne.n	14a0 <lsm6dso_fsm_enable_get+0x10>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    14b2:	2100      	movs	r1, #0
    14b4:	0020      	movs	r0, r4
    14b6:	4b01      	ldr	r3, [pc, #4]	; (14bc <lsm6dso_fsm_enable_get+0x2c>)
    14b8:	4798      	blx	r3
  return ret;
    14ba:	e7f1      	b.n	14a0 <lsm6dso_fsm_enable_get+0x10>
    14bc:	000012d9 	.word	0x000012d9
    14c0:	00001145 	.word	0x00001145

000014c4 <lsm6dso_fsm_data_rate_get>:
{
    14c4:	b570      	push	{r4, r5, r6, lr}
    14c6:	b082      	sub	sp, #8
    14c8:	0004      	movs	r4, r0
    14ca:	000d      	movs	r5, r1
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    14cc:	2102      	movs	r1, #2
    14ce:	4b17      	ldr	r3, [pc, #92]	; (152c <lsm6dso_fsm_data_rate_get+0x68>)
    14d0:	4798      	blx	r3
  if (ret == 0)
    14d2:	2800      	cmp	r0, #0
    14d4:	d001      	beq.n	14da <lsm6dso_fsm_data_rate_get+0x16>
}
    14d6:	b002      	add	sp, #8
    14d8:	bd70      	pop	{r4, r5, r6, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
    14da:	2301      	movs	r3, #1
    14dc:	aa01      	add	r2, sp, #4
    14de:	215f      	movs	r1, #95	; 0x5f
    14e0:	0020      	movs	r0, r4
    14e2:	4e13      	ldr	r6, [pc, #76]	; (1530 <lsm6dso_fsm_data_rate_get+0x6c>)
    14e4:	47b0      	blx	r6
  if (ret == 0)
    14e6:	2800      	cmp	r0, #0
    14e8:	d1f5      	bne.n	14d6 <lsm6dso_fsm_data_rate_get+0x12>
    switch (reg.fsm_odr)
    14ea:	ab01      	add	r3, sp, #4
    14ec:	781b      	ldrb	r3, [r3, #0]
    14ee:	06db      	lsls	r3, r3, #27
    14f0:	0f9b      	lsrs	r3, r3, #30
    14f2:	b2da      	uxtb	r2, r3
    14f4:	2a01      	cmp	r2, #1
    14f6:	d00f      	beq.n	1518 <lsm6dso_fsm_data_rate_get+0x54>
    14f8:	2a00      	cmp	r2, #0
    14fa:	d006      	beq.n	150a <lsm6dso_fsm_data_rate_get+0x46>
    14fc:	2a02      	cmp	r2, #2
    14fe:	d00e      	beq.n	151e <lsm6dso_fsm_data_rate_get+0x5a>
    1500:	2a03      	cmp	r2, #3
    1502:	d00f      	beq.n	1524 <lsm6dso_fsm_data_rate_get+0x60>
        *val = LSM6DSO_ODR_FSM_12Hz5;
    1504:	2300      	movs	r3, #0
    1506:	702b      	strb	r3, [r5, #0]
        break;
    1508:	e001      	b.n	150e <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_12Hz5;
    150a:	2300      	movs	r3, #0
    150c:	702b      	strb	r3, [r5, #0]
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    150e:	2100      	movs	r1, #0
    1510:	0020      	movs	r0, r4
    1512:	4b06      	ldr	r3, [pc, #24]	; (152c <lsm6dso_fsm_data_rate_get+0x68>)
    1514:	4798      	blx	r3
  return ret;
    1516:	e7de      	b.n	14d6 <lsm6dso_fsm_data_rate_get+0x12>
        *val = LSM6DSO_ODR_FSM_26Hz;
    1518:	2301      	movs	r3, #1
    151a:	702b      	strb	r3, [r5, #0]
        break;
    151c:	e7f7      	b.n	150e <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_52Hz;
    151e:	2302      	movs	r3, #2
    1520:	702b      	strb	r3, [r5, #0]
        break;
    1522:	e7f4      	b.n	150e <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_104Hz;
    1524:	2303      	movs	r3, #3
    1526:	702b      	strb	r3, [r5, #0]
        break;
    1528:	e7f1      	b.n	150e <lsm6dso_fsm_data_rate_get+0x4a>
    152a:	46c0      	nop			; (mov r8, r8)
    152c:	000012d9 	.word	0x000012d9
    1530:	00001145 	.word	0x00001145

00001534 <lsm6dso_xl_data_rate_set>:
{
    1534:	b570      	push	{r4, r5, r6, lr}
    1536:	b082      	sub	sp, #8
    1538:	0004      	movs	r4, r0
    153a:	000d      	movs	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    153c:	a901      	add	r1, sp, #4
    153e:	4b38      	ldr	r3, [pc, #224]	; (1620 <lsm6dso_xl_data_rate_set+0xec>)
    1540:	4798      	blx	r3
  if (ret == 0)
    1542:	2800      	cmp	r0, #0
    1544:	d142      	bne.n	15cc <lsm6dso_xl_data_rate_set+0x98>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    1546:	a901      	add	r1, sp, #4
    1548:	780a      	ldrb	r2, [r1, #0]
    154a:	07d0      	lsls	r0, r2, #31
         fsm_enable.fsm_enable_a.fsm2_en  |
    154c:	0793      	lsls	r3, r2, #30
    154e:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    1550:	0753      	lsls	r3, r2, #29
    1552:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
    1554:	0710      	lsls	r0, r2, #28
    1556:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
    1558:	06d0      	lsls	r0, r2, #27
    155a:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    155c:	0693      	lsls	r3, r2, #26
    155e:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    1560:	0653      	lsls	r3, r2, #25
    1562:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
    1564:	0fdb      	lsrs	r3, r3, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    1566:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_a.fsm7_en  |
    1568:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_b.fsm9_en  |
    156a:	784a      	ldrb	r2, [r1, #1]
    156c:	07d1      	lsls	r1, r2, #31
    156e:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    1570:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
    1572:	0791      	lsls	r1, r2, #30
    1574:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm9_en  |
    1576:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
    1578:	0751      	lsls	r1, r2, #29
    157a:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm10_en |
    157c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
    157e:	0711      	lsls	r1, r2, #28
    1580:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm11_en |
    1582:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
    1584:	06d1      	lsls	r1, r2, #27
    1586:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm12_en |
    1588:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
    158a:	0691      	lsls	r1, r2, #26
    158c:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm13_en |
    158e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
    1590:	0651      	lsls	r1, r2, #25
    1592:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm14_en |
    1594:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    1596:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_b.fsm15_en |
    1598:	4313      	orrs	r3, r2
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    159a:	b2db      	uxtb	r3, r3
    159c:	2b01      	cmp	r3, #1
    159e:	d017      	beq.n	15d0 <lsm6dso_xl_data_rate_set+0x9c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    15a0:	2301      	movs	r3, #1
    15a2:	466a      	mov	r2, sp
    15a4:	2110      	movs	r1, #16
    15a6:	0020      	movs	r0, r4
    15a8:	4e1e      	ldr	r6, [pc, #120]	; (1624 <lsm6dso_xl_data_rate_set+0xf0>)
    15aa:	47b0      	blx	r6
  if (ret == 0)
    15ac:	2800      	cmp	r0, #0
    15ae:	d10d      	bne.n	15cc <lsm6dso_xl_data_rate_set+0x98>
    reg.odr_xl = (uint8_t) odr_xl;
    15b0:	012b      	lsls	r3, r5, #4
    15b2:	466a      	mov	r2, sp
    15b4:	7812      	ldrb	r2, [r2, #0]
    15b6:	250f      	movs	r5, #15
    15b8:	4015      	ands	r5, r2
    15ba:	431d      	orrs	r5, r3
    15bc:	466b      	mov	r3, sp
    15be:	701d      	strb	r5, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    15c0:	2301      	movs	r3, #1
    15c2:	466a      	mov	r2, sp
    15c4:	2110      	movs	r1, #16
    15c6:	0020      	movs	r0, r4
    15c8:	4c17      	ldr	r4, [pc, #92]	; (1628 <lsm6dso_xl_data_rate_set+0xf4>)
    15ca:	47a0      	blx	r4
}
    15cc:	b002      	add	sp, #8
    15ce:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    15d0:	466b      	mov	r3, sp
    15d2:	1cd9      	adds	r1, r3, #3
    15d4:	0020      	movs	r0, r4
    15d6:	4b15      	ldr	r3, [pc, #84]	; (162c <lsm6dso_xl_data_rate_set+0xf8>)
    15d8:	4798      	blx	r3
      if (ret == 0)
    15da:	2800      	cmp	r0, #0
    15dc:	d1f6      	bne.n	15cc <lsm6dso_xl_data_rate_set+0x98>
        switch (fsm_odr)
    15de:	466b      	mov	r3, sp
    15e0:	3303      	adds	r3, #3
    15e2:	781b      	ldrb	r3, [r3, #0]
    15e4:	2b01      	cmp	r3, #1
    15e6:	d00f      	beq.n	1608 <lsm6dso_xl_data_rate_set+0xd4>
    15e8:	2b00      	cmp	r3, #0
    15ea:	d009      	beq.n	1600 <lsm6dso_xl_data_rate_set+0xcc>
    15ec:	2b02      	cmp	r3, #2
    15ee:	d011      	beq.n	1614 <lsm6dso_xl_data_rate_set+0xe0>
    15f0:	2b03      	cmp	r3, #3
    15f2:	d1d5      	bne.n	15a0 <lsm6dso_xl_data_rate_set+0x6c>
    15f4:	1c2b      	adds	r3, r5, #0
    15f6:	2d03      	cmp	r5, #3
    15f8:	d800      	bhi.n	15fc <lsm6dso_xl_data_rate_set+0xc8>
    15fa:	2304      	movs	r3, #4
    15fc:	b2dd      	uxtb	r5, r3
    15fe:	e7cf      	b.n	15a0 <lsm6dso_xl_data_rate_set+0x6c>
            if (val == LSM6DSO_XL_ODR_OFF)
    1600:	2d00      	cmp	r5, #0
    1602:	d1cd      	bne.n	15a0 <lsm6dso_xl_data_rate_set+0x6c>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
    1604:	2501      	movs	r5, #1
    1606:	e7cb      	b.n	15a0 <lsm6dso_xl_data_rate_set+0x6c>
    1608:	1c2b      	adds	r3, r5, #0
    160a:	2d01      	cmp	r5, #1
    160c:	d800      	bhi.n	1610 <lsm6dso_xl_data_rate_set+0xdc>
    160e:	2302      	movs	r3, #2
    1610:	b2dd      	uxtb	r5, r3
    1612:	e7c5      	b.n	15a0 <lsm6dso_xl_data_rate_set+0x6c>
    1614:	1c2b      	adds	r3, r5, #0
    1616:	2d02      	cmp	r5, #2
    1618:	d800      	bhi.n	161c <lsm6dso_xl_data_rate_set+0xe8>
    161a:	2303      	movs	r3, #3
    161c:	b2dd      	uxtb	r5, r3
    161e:	e7bf      	b.n	15a0 <lsm6dso_xl_data_rate_set+0x6c>
    1620:	00001491 	.word	0x00001491
    1624:	00001145 	.word	0x00001145
    1628:	00001151 	.word	0x00001151
    162c:	000014c5 	.word	0x000014c5

00001630 <lsm6dso_gy_data_rate_set>:
{
    1630:	b570      	push	{r4, r5, r6, lr}
    1632:	b082      	sub	sp, #8
    1634:	0004      	movs	r4, r0
    1636:	000d      	movs	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    1638:	a901      	add	r1, sp, #4
    163a:	4b38      	ldr	r3, [pc, #224]	; (171c <lsm6dso_gy_data_rate_set+0xec>)
    163c:	4798      	blx	r3
  if (ret == 0)
    163e:	2800      	cmp	r0, #0
    1640:	d142      	bne.n	16c8 <lsm6dso_gy_data_rate_set+0x98>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    1642:	a901      	add	r1, sp, #4
    1644:	780a      	ldrb	r2, [r1, #0]
    1646:	07d0      	lsls	r0, r2, #31
         fsm_enable.fsm_enable_a.fsm2_en  |
    1648:	0793      	lsls	r3, r2, #30
    164a:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    164c:	0753      	lsls	r3, r2, #29
    164e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
    1650:	0710      	lsls	r0, r2, #28
    1652:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
    1654:	06d0      	lsls	r0, r2, #27
    1656:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    1658:	0693      	lsls	r3, r2, #26
    165a:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    165c:	0653      	lsls	r3, r2, #25
    165e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
    1660:	0fdb      	lsrs	r3, r3, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    1662:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_a.fsm7_en  |
    1664:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_b.fsm9_en  |
    1666:	784a      	ldrb	r2, [r1, #1]
    1668:	07d1      	lsls	r1, r2, #31
    166a:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    166c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
    166e:	0791      	lsls	r1, r2, #30
    1670:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm9_en  |
    1672:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
    1674:	0751      	lsls	r1, r2, #29
    1676:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm10_en |
    1678:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
    167a:	0711      	lsls	r1, r2, #28
    167c:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm11_en |
    167e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
    1680:	06d1      	lsls	r1, r2, #27
    1682:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm12_en |
    1684:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
    1686:	0691      	lsls	r1, r2, #26
    1688:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm13_en |
    168a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
    168c:	0651      	lsls	r1, r2, #25
    168e:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm14_en |
    1690:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    1692:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_b.fsm15_en |
    1694:	4313      	orrs	r3, r2
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    1696:	b2db      	uxtb	r3, r3
    1698:	2b01      	cmp	r3, #1
    169a:	d017      	beq.n	16cc <lsm6dso_gy_data_rate_set+0x9c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    169c:	2301      	movs	r3, #1
    169e:	466a      	mov	r2, sp
    16a0:	2111      	movs	r1, #17
    16a2:	0020      	movs	r0, r4
    16a4:	4e1e      	ldr	r6, [pc, #120]	; (1720 <lsm6dso_gy_data_rate_set+0xf0>)
    16a6:	47b0      	blx	r6
  if (ret == 0)
    16a8:	2800      	cmp	r0, #0
    16aa:	d10d      	bne.n	16c8 <lsm6dso_gy_data_rate_set+0x98>
    reg.odr_g = (uint8_t) odr_gy;
    16ac:	012b      	lsls	r3, r5, #4
    16ae:	466a      	mov	r2, sp
    16b0:	7812      	ldrb	r2, [r2, #0]
    16b2:	250f      	movs	r5, #15
    16b4:	4015      	ands	r5, r2
    16b6:	431d      	orrs	r5, r3
    16b8:	466b      	mov	r3, sp
    16ba:	701d      	strb	r5, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    16bc:	2301      	movs	r3, #1
    16be:	466a      	mov	r2, sp
    16c0:	2111      	movs	r1, #17
    16c2:	0020      	movs	r0, r4
    16c4:	4c17      	ldr	r4, [pc, #92]	; (1724 <lsm6dso_gy_data_rate_set+0xf4>)
    16c6:	47a0      	blx	r4
}
    16c8:	b002      	add	sp, #8
    16ca:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    16cc:	466b      	mov	r3, sp
    16ce:	1cd9      	adds	r1, r3, #3
    16d0:	0020      	movs	r0, r4
    16d2:	4b15      	ldr	r3, [pc, #84]	; (1728 <lsm6dso_gy_data_rate_set+0xf8>)
    16d4:	4798      	blx	r3
      if (ret == 0)
    16d6:	2800      	cmp	r0, #0
    16d8:	d1f6      	bne.n	16c8 <lsm6dso_gy_data_rate_set+0x98>
        switch (fsm_odr)
    16da:	466b      	mov	r3, sp
    16dc:	3303      	adds	r3, #3
    16de:	781b      	ldrb	r3, [r3, #0]
    16e0:	2b01      	cmp	r3, #1
    16e2:	d00f      	beq.n	1704 <lsm6dso_gy_data_rate_set+0xd4>
    16e4:	2b00      	cmp	r3, #0
    16e6:	d009      	beq.n	16fc <lsm6dso_gy_data_rate_set+0xcc>
    16e8:	2b02      	cmp	r3, #2
    16ea:	d011      	beq.n	1710 <lsm6dso_gy_data_rate_set+0xe0>
    16ec:	2b03      	cmp	r3, #3
    16ee:	d1d5      	bne.n	169c <lsm6dso_gy_data_rate_set+0x6c>
    16f0:	1c2b      	adds	r3, r5, #0
    16f2:	2d03      	cmp	r5, #3
    16f4:	d800      	bhi.n	16f8 <lsm6dso_gy_data_rate_set+0xc8>
    16f6:	2304      	movs	r3, #4
    16f8:	b2dd      	uxtb	r5, r3
    16fa:	e7cf      	b.n	169c <lsm6dso_gy_data_rate_set+0x6c>
            if (val == LSM6DSO_GY_ODR_OFF)
    16fc:	2d00      	cmp	r5, #0
    16fe:	d1cd      	bne.n	169c <lsm6dso_gy_data_rate_set+0x6c>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
    1700:	2501      	movs	r5, #1
    1702:	e7cb      	b.n	169c <lsm6dso_gy_data_rate_set+0x6c>
    1704:	1c2b      	adds	r3, r5, #0
    1706:	2d01      	cmp	r5, #1
    1708:	d800      	bhi.n	170c <lsm6dso_gy_data_rate_set+0xdc>
    170a:	2302      	movs	r3, #2
    170c:	b2dd      	uxtb	r5, r3
    170e:	e7c5      	b.n	169c <lsm6dso_gy_data_rate_set+0x6c>
    1710:	1c2b      	adds	r3, r5, #0
    1712:	2d02      	cmp	r5, #2
    1714:	d800      	bhi.n	1718 <lsm6dso_gy_data_rate_set+0xe8>
    1716:	2303      	movs	r3, #3
    1718:	b2dd      	uxtb	r5, r3
    171a:	e7bf      	b.n	169c <lsm6dso_gy_data_rate_set+0x6c>
    171c:	00001491 	.word	0x00001491
    1720:	00001145 	.word	0x00001145
    1724:	00001151 	.word	0x00001151
    1728:	000014c5 	.word	0x000014c5

0000172c <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
return &dev_ctx;
}
    172c:	4800      	ldr	r0, [pc, #0]	; (1730 <GetImuStruct+0x4>)
    172e:	4770      	bx	lr
    1730:	20000000 	.word	0x20000000

00001734 <InitImu>:



int32_t InitImu(void)
{
    1734:	b5f0      	push	{r4, r5, r6, r7, lr}
    1736:	b083      	sub	sp, #12
uint8_t rst;
int32_t error = 0;
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
    1738:	2101      	movs	r1, #1
    173a:	481b      	ldr	r0, [pc, #108]	; (17a8 <InitImu+0x74>)
    173c:	4b1b      	ldr	r3, [pc, #108]	; (17ac <InitImu+0x78>)
    173e:	4798      	blx	r3
    1740:	0004      	movs	r4, r0
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
    1742:	466b      	mov	r3, sp
    1744:	1ddd      	adds	r5, r3, #7
    1746:	4e18      	ldr	r6, [pc, #96]	; (17a8 <InitImu+0x74>)
    1748:	4f19      	ldr	r7, [pc, #100]	; (17b0 <InitImu+0x7c>)
    174a:	0029      	movs	r1, r5
    174c:	0030      	movs	r0, r6
    174e:	47b8      	blx	r7
    1750:	4304      	orrs	r4, r0
  } while (rst);
    1752:	782b      	ldrb	r3, [r5, #0]
    1754:	2b00      	cmp	r3, #0
    1756:	d1f8      	bne.n	174a <InitImu+0x16>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
    1758:	4d13      	ldr	r5, [pc, #76]	; (17a8 <InitImu+0x74>)
    175a:	2180      	movs	r1, #128	; 0x80
    175c:	0028      	movs	r0, r5
    175e:	4b15      	ldr	r3, [pc, #84]	; (17b4 <InitImu+0x80>)
    1760:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    1762:	2101      	movs	r1, #1
    1764:	0028      	movs	r0, r5
    1766:	4b14      	ldr	r3, [pc, #80]	; (17b8 <InitImu+0x84>)
    1768:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
    176a:	2100      	movs	r1, #0
    176c:	0028      	movs	r0, r5
    176e:	4b13      	ldr	r3, [pc, #76]	; (17bc <InitImu+0x88>)
    1770:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
    1772:	2101      	movs	r1, #1
    1774:	0028      	movs	r0, r5
    1776:	4b12      	ldr	r3, [pc, #72]	; (17c0 <InitImu+0x8c>)
    1778:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
    177a:	2101      	movs	r1, #1
    177c:	0028      	movs	r0, r5
    177e:	4b11      	ldr	r3, [pc, #68]	; (17c4 <InitImu+0x90>)
    1780:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
    1782:	2100      	movs	r1, #0
    1784:	0028      	movs	r0, r5
    1786:	4b10      	ldr	r3, [pc, #64]	; (17c8 <InitImu+0x94>)
    1788:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
    178a:	2106      	movs	r1, #6
    178c:	0028      	movs	r0, r5
    178e:	4b0f      	ldr	r3, [pc, #60]	; (17cc <InitImu+0x98>)
    1790:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
    1792:	2104      	movs	r1, #4
    1794:	0028      	movs	r0, r5
    1796:	4b0e      	ldr	r3, [pc, #56]	; (17d0 <InitImu+0x9c>)
    1798:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
    179a:	2101      	movs	r1, #1
    179c:	0028      	movs	r0, r5
    179e:	4b0d      	ldr	r3, [pc, #52]	; (17d4 <InitImu+0xa0>)
    17a0:	4798      	blx	r3

  return error;
}
    17a2:	0020      	movs	r0, r4
    17a4:	b003      	add	sp, #12
    17a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17a8:	20000000 	.word	0x20000000
    17ac:	00001329 	.word	0x00001329
    17b0:	00001365 	.word	0x00001365
    17b4:	00001421 	.word	0x00001421
    17b8:	000011f9 	.word	0x000011f9
    17bc:	00001239 	.word	0x00001239
    17c0:	00001535 	.word	0x00001535
    17c4:	00001631 	.word	0x00001631
    17c8:	00001179 	.word	0x00001179
    17cc:	000011b9 	.word	0x000011b9
    17d0:	000013c9 	.word	0x000013c9
    17d4:	00001389 	.word	0x00001389

000017d8 <SeesawReadKeypad>:
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*****************************************************************************/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
	{
    17d8:	b510      	push	{r4, lr}
    17da:	b082      	sub	sp, #8
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
    17dc:	aa01      	add	r2, sp, #4
    17de:	4b0c      	ldr	r3, [pc, #48]	; (1810 <SeesawReadKeypad+0x38>)
    17e0:	881b      	ldrh	r3, [r3, #0]
    17e2:	8013      	strh	r3, [r2, #0]
	seesawData.address = NEO_TRELLIS_ADDR;
    17e4:	4b0b      	ldr	r3, [pc, #44]	; (1814 <SeesawReadKeypad+0x3c>)
    17e6:	242e      	movs	r4, #46	; 0x2e
    17e8:	701c      	strb	r4, [r3, #0]
	seesawData.msgOut = &cmd;
    17ea:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(cmd);
    17ec:	2202      	movs	r2, #2
    17ee:	81da      	strh	r2, [r3, #14]
	seesawData.msgIn = buffer;
    17f0:	6098      	str	r0, [r3, #8]
	seesawData.lenIn = count;
    17f2:	8199      	strh	r1, [r3, #12]

	int error = I2cReadDataWait(&seesawData, 0, 100);
    17f4:	3262      	adds	r2, #98	; 0x62
    17f6:	2100      	movs	r1, #0
    17f8:	0018      	movs	r0, r3
    17fa:	4b07      	ldr	r3, [pc, #28]	; (1818 <SeesawReadKeypad+0x40>)
    17fc:	4798      	blx	r3
    17fe:	1e04      	subs	r4, r0, #0

	if(ERROR_NONE != error)
    1800:	d102      	bne.n	1808 <SeesawReadKeypad+0x30>
	{
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
	}
	return error;
}
    1802:	0020      	movs	r0, r4
    1804:	b002      	add	sp, #8
    1806:	bd10      	pop	{r4, pc}
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
    1808:	4804      	ldr	r0, [pc, #16]	; (181c <SeesawReadKeypad+0x44>)
    180a:	4b05      	ldr	r3, [pc, #20]	; (1820 <SeesawReadKeypad+0x48>)
    180c:	4798      	blx	r3
    180e:	e7f8      	b.n	1802 <SeesawReadKeypad+0x2a>
    1810:	0000a784 	.word	0x0000a784
    1814:	20003934 	.word	0x20003934
    1818:	0000102d 	.word	0x0000102d
    181c:	0000a870 	.word	0x0000a870
    1820:	00005bed 	.word	0x00005bed

00001824 <SeesawActivateKey>:
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         
*****************************************************************************/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
	{
    1824:	b510      	push	{r4, lr}
    1826:	b082      	sub	sp, #8
	union keyState ks;
	ks.bit.STATE = enable;
    1828:	2401      	movs	r4, #1
	ks.bit.ACTIVE = (1 << edge);
    182a:	0023      	movs	r3, r4
    182c:	408b      	lsls	r3, r1
    182e:	210f      	movs	r1, #15
    1830:	4019      	ands	r1, r3
    1832:	0049      	lsls	r1, r1, #1
    1834:	2301      	movs	r3, #1
    1836:	401a      	ands	r2, r3
    1838:	430a      	orrs	r2, r1
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
    183a:	ab01      	add	r3, sp, #4
    183c:	2110      	movs	r1, #16
    183e:	7019      	strb	r1, [r3, #0]
    1840:	705c      	strb	r4, [r3, #1]
    1842:	7098      	strb	r0, [r3, #2]
    1844:	70da      	strb	r2, [r3, #3]

	seesawData.address = NEO_TRELLIS_ADDR;
    1846:	4806      	ldr	r0, [pc, #24]	; (1860 <SeesawActivateKey+0x3c>)
    1848:	222e      	movs	r2, #46	; 0x2e
    184a:	7002      	strb	r2, [r0, #0]
	seesawData.msgOut = &cmd;
    184c:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(cmd);
    184e:	2304      	movs	r3, #4
    1850:	81c3      	strh	r3, [r0, #14]
	seesawData.lenIn = 0;
    1852:	2300      	movs	r3, #0
    1854:	8183      	strh	r3, [r0, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
    1856:	3154      	adds	r1, #84	; 0x54
    1858:	4b02      	ldr	r3, [pc, #8]	; (1864 <SeesawActivateKey+0x40>)
    185a:	4798      	blx	r3
	return error;
}
    185c:	b002      	add	sp, #8
    185e:	bd10      	pop	{r4, pc}
    1860:	20003934 	.word	0x20003934
    1864:	00000fcd 	.word	0x00000fcd

00001868 <SeesawSetLed>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
	FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*****************************************************************************/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
    1868:	b530      	push	{r4, r5, lr}
    186a:	b083      	sub	sp, #12
	uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
    186c:	240e      	movs	r4, #14
    186e:	466d      	mov	r5, sp
    1870:	702c      	strb	r4, [r5, #0]
    1872:	3c0a      	subs	r4, #10
    1874:	706c      	strb	r4, [r5, #1]
    1876:	712a      	strb	r2, [r5, #4]
    1878:	7169      	strb	r1, [r5, #5]
    187a:	71ab      	strb	r3, [r5, #6]
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};

	uint16_t offset = 3 * key; //RGB LED
    187c:	0043      	lsls	r3, r0, #1
    187e:	18c0      	adds	r0, r0, r3
	write_buffer1[2] = (offset >> 8);
    1880:	0a03      	lsrs	r3, r0, #8
    1882:	70ab      	strb	r3, [r5, #2]
	write_buffer1[3] = (offset);
    1884:	70e8      	strb	r0, [r5, #3]

	seesawData.msgOut = &write_buffer1;
    1886:	4804      	ldr	r0, [pc, #16]	; (1898 <SeesawSetLed+0x30>)
    1888:	6045      	str	r5, [r0, #4]
	seesawData.lenOut = sizeof(write_buffer1);
    188a:	2307      	movs	r3, #7
    188c:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
    188e:	2164      	movs	r1, #100	; 0x64
    1890:	4b02      	ldr	r3, [pc, #8]	; (189c <SeesawSetLed+0x34>)
    1892:	4798      	blx	r3
	return error;

}
    1894:	b003      	add	sp, #12
    1896:	bd30      	pop	{r4, r5, pc}
    1898:	20003934 	.word	0x20003934
    189c:	00000fcd 	.word	0x00000fcd

000018a0 <SeesawOrderLedUpdate>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*****************************************************************************/
int32_t SeesawOrderLedUpdate(void)
{
    18a0:	b500      	push	{lr}
    18a2:	b083      	sub	sp, #12
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
    18a4:	ab01      	add	r3, sp, #4
    18a6:	4a06      	ldr	r2, [pc, #24]	; (18c0 <SeesawOrderLedUpdate+0x20>)
    18a8:	8892      	ldrh	r2, [r2, #4]
    18aa:	801a      	strh	r2, [r3, #0]

	seesawData.msgOut = &orderBuffer;
    18ac:	4805      	ldr	r0, [pc, #20]	; (18c4 <SeesawOrderLedUpdate+0x24>)
    18ae:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(orderBuffer);
    18b0:	2302      	movs	r3, #2
    18b2:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
    18b4:	2164      	movs	r1, #100	; 0x64
    18b6:	4b04      	ldr	r3, [pc, #16]	; (18c8 <SeesawOrderLedUpdate+0x28>)
    18b8:	4798      	blx	r3
	return error;
}
    18ba:	b003      	add	sp, #12
    18bc:	bd00      	pop	{pc}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	0000a784 	.word	0x0000a784
    18c4:	20003934 	.word	0x20003934
    18c8:	00000fcd 	.word	0x00000fcd

000018cc <InitializeSeesaw>:
{
    18cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ce:	46ce      	mov	lr, r9
    18d0:	b500      	push	{lr}
    18d2:	b084      	sub	sp, #16
	seesawData.address = NEO_TRELLIS_ADDR;
    18d4:	484b      	ldr	r0, [pc, #300]	; (1a04 <InitializeSeesaw+0x138>)
    18d6:	232e      	movs	r3, #46	; 0x2e
    18d8:	7003      	strb	r3, [r0, #0]
	seesawData.msgOut = &msgBaseGetHWID;
    18da:	4b4b      	ldr	r3, [pc, #300]	; (1a08 <InitializeSeesaw+0x13c>)
    18dc:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgBaseGetHWID);
    18de:	2302      	movs	r3, #2
    18e0:	81c3      	strh	r3, [r0, #14]
	seesawData.msgIn = &readData;
    18e2:	ab03      	add	r3, sp, #12
    18e4:	6083      	str	r3, [r0, #8]
	seesawData.lenIn = 1;
    18e6:	2301      	movs	r3, #1
    18e8:	8183      	strh	r3, [r0, #12]
	int error = I2cReadDataWait(&seesawData, 0, 100);
    18ea:	2264      	movs	r2, #100	; 0x64
    18ec:	2100      	movs	r1, #0
    18ee:	4b47      	ldr	r3, [pc, #284]	; (1a0c <InitializeSeesaw+0x140>)
    18f0:	4798      	blx	r3
	if(ERROR_NONE != error)
    18f2:	2800      	cmp	r0, #0
    18f4:	d10d      	bne.n	1912 <InitializeSeesaw+0x46>
		if(readData[0] != SEESAW_HW_ID_CODE )
    18f6:	ab03      	add	r3, sp, #12
    18f8:	781b      	ldrb	r3, [r3, #0]
    18fa:	2b55      	cmp	r3, #85	; 0x55
    18fc:	d04f      	beq.n	199e <InitializeSeesaw+0xd2>
			SerialConsoleWriteString("Error/r/n");
    18fe:	4844      	ldr	r0, [pc, #272]	; (1a10 <InitializeSeesaw+0x144>)
    1900:	4b44      	ldr	r3, [pc, #272]	; (1a14 <InitializeSeesaw+0x148>)
    1902:	4798      	blx	r3
			return 1;
    1904:	2301      	movs	r3, #1
    1906:	9301      	str	r3, [sp, #4]
}
    1908:	9801      	ldr	r0, [sp, #4]
    190a:	b004      	add	sp, #16
    190c:	bc04      	pop	{r2}
    190e:	4691      	mov	r9, r2
    1910:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SerialConsoleWriteString("Error initializing Seesaw!\r\n");
    1912:	4841      	ldr	r0, [pc, #260]	; (1a18 <InitializeSeesaw+0x14c>)
    1914:	4b3f      	ldr	r3, [pc, #252]	; (1a14 <InitializeSeesaw+0x148>)
    1916:	4798      	blx	r3
	seesawData.msgOut = &msgNeopixelPin;
    1918:	483a      	ldr	r0, [pc, #232]	; (1a04 <InitializeSeesaw+0x138>)
    191a:	4b40      	ldr	r3, [pc, #256]	; (1a1c <InitializeSeesaw+0x150>)
    191c:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelPin);
    191e:	2303      	movs	r3, #3
    1920:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
    1922:	2164      	movs	r1, #100	; 0x64
    1924:	4b3e      	ldr	r3, [pc, #248]	; (1a20 <InitializeSeesaw+0x154>)
    1926:	4798      	blx	r3
	if(ERROR_NONE != error)
    1928:	2800      	cmp	r0, #0
    192a:	d13c      	bne.n	19a6 <InitializeSeesaw+0xda>
	seesawData.msgOut = &msgNeopixelSpeed;
    192c:	4835      	ldr	r0, [pc, #212]	; (1a04 <InitializeSeesaw+0x138>)
    192e:	4b3d      	ldr	r3, [pc, #244]	; (1a24 <InitializeSeesaw+0x158>)
    1930:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelSpeed);
    1932:	2303      	movs	r3, #3
    1934:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
    1936:	2164      	movs	r1, #100	; 0x64
    1938:	4b39      	ldr	r3, [pc, #228]	; (1a20 <InitializeSeesaw+0x154>)
    193a:	4798      	blx	r3
	if(ERROR_NONE != error)
    193c:	2800      	cmp	r0, #0
    193e:	d136      	bne.n	19ae <InitializeSeesaw+0xe2>
	seesawData.msgOut = &msgNeopixelBufLength;
    1940:	4830      	ldr	r0, [pc, #192]	; (1a04 <InitializeSeesaw+0x138>)
    1942:	4b39      	ldr	r3, [pc, #228]	; (1a28 <InitializeSeesaw+0x15c>)
    1944:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelBufLength);
    1946:	2304      	movs	r3, #4
    1948:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
    194a:	2164      	movs	r1, #100	; 0x64
    194c:	4b34      	ldr	r3, [pc, #208]	; (1a20 <InitializeSeesaw+0x154>)
    194e:	4798      	blx	r3
    1950:	9001      	str	r0, [sp, #4]
	if(ERROR_NONE != error)
    1952:	2800      	cmp	r0, #0
    1954:	d12f      	bne.n	19b6 <InitializeSeesaw+0xea>
	}
}

static void SeesawTurnOnLedTest(void)
{
	SeesawSetLed(15, 255, 255, 255);
    1956:	23ff      	movs	r3, #255	; 0xff
    1958:	22ff      	movs	r2, #255	; 0xff
    195a:	21ff      	movs	r1, #255	; 0xff
    195c:	200f      	movs	r0, #15
    195e:	4e33      	ldr	r6, [pc, #204]	; (1a2c <InitializeSeesaw+0x160>)
    1960:	47b0      	blx	r6
	SeesawOrderLedUpdate();
    1962:	4c33      	ldr	r4, [pc, #204]	; (1a30 <InitializeSeesaw+0x164>)
    1964:	47a0      	blx	r4
	vTaskDelay(400);
    1966:	20c8      	movs	r0, #200	; 0xc8
    1968:	0040      	lsls	r0, r0, #1
    196a:	4b32      	ldr	r3, [pc, #200]	; (1a34 <InitializeSeesaw+0x168>)
    196c:	4798      	blx	r3

	SeesawSetLed(15, 0, 0, 0);
    196e:	2300      	movs	r3, #0
    1970:	2200      	movs	r2, #0
    1972:	2100      	movs	r1, #0
    1974:	200f      	movs	r0, #15
    1976:	47b0      	blx	r6
	SeesawOrderLedUpdate();
    1978:	47a0      	blx	r4
	seesawData.address = NEO_TRELLIS_ADDR;
    197a:	4822      	ldr	r0, [pc, #136]	; (1a04 <InitializeSeesaw+0x138>)
    197c:	232e      	movs	r3, #46	; 0x2e
    197e:	7003      	strb	r3, [r0, #0]
	seesawData.msgOut = &msgKeypadEnableInt;
    1980:	4b2d      	ldr	r3, [pc, #180]	; (1a38 <InitializeSeesaw+0x16c>)
    1982:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgKeypadEnableInt);
    1984:	2303      	movs	r3, #3
    1986:	81c3      	strh	r3, [r0, #14]
	seesawData.lenIn = 0;
    1988:	2300      	movs	r3, #0
    198a:	8183      	strh	r3, [r0, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
    198c:	2164      	movs	r1, #100	; 0x64
    198e:	4b24      	ldr	r3, [pc, #144]	; (1a20 <InitializeSeesaw+0x154>)
    1990:	4798      	blx	r3
	if(ERROR_NONE != error)
    1992:	2800      	cmp	r0, #0
    1994:	d113      	bne.n	19be <InitializeSeesaw+0xf2>
{
    1996:	2600      	movs	r6, #0
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
    1998:	2703      	movs	r7, #3
    199a:	4d28      	ldr	r5, [pc, #160]	; (1a3c <InitializeSeesaw+0x170>)
    199c:	e016      	b.n	19cc <InitializeSeesaw+0x100>
		SerialConsoleWriteString("Found Seesaw!/r/n");
    199e:	4828      	ldr	r0, [pc, #160]	; (1a40 <InitializeSeesaw+0x174>)
    19a0:	4b1c      	ldr	r3, [pc, #112]	; (1a14 <InitializeSeesaw+0x148>)
    19a2:	4798      	blx	r3
    19a4:	e7b8      	b.n	1918 <InitializeSeesaw+0x4c>
		SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
    19a6:	4827      	ldr	r0, [pc, #156]	; (1a44 <InitializeSeesaw+0x178>)
    19a8:	4b1a      	ldr	r3, [pc, #104]	; (1a14 <InitializeSeesaw+0x148>)
    19aa:	4798      	blx	r3
    19ac:	e7be      	b.n	192c <InitializeSeesaw+0x60>
		SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
    19ae:	4826      	ldr	r0, [pc, #152]	; (1a48 <InitializeSeesaw+0x17c>)
    19b0:	4b18      	ldr	r3, [pc, #96]	; (1a14 <InitializeSeesaw+0x148>)
    19b2:	4798      	blx	r3
    19b4:	e7c4      	b.n	1940 <InitializeSeesaw+0x74>
		SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
    19b6:	4825      	ldr	r0, [pc, #148]	; (1a4c <InitializeSeesaw+0x180>)
    19b8:	4b16      	ldr	r3, [pc, #88]	; (1a14 <InitializeSeesaw+0x148>)
    19ba:	4798      	blx	r3
    19bc:	e7cb      	b.n	1956 <InitializeSeesaw+0x8a>
		SerialConsoleWriteString("Could not initialize Keypad!/r/n");
    19be:	4824      	ldr	r0, [pc, #144]	; (1a50 <InitializeSeesaw+0x184>)
    19c0:	4b14      	ldr	r3, [pc, #80]	; (1a14 <InitializeSeesaw+0x148>)
    19c2:	4798      	blx	r3
    19c4:	e7e7      	b.n	1996 <InitializeSeesaw+0xca>
	for(int i=0; i<16; i++){
    19c6:	3601      	adds	r6, #1
    19c8:	2e10      	cmp	r6, #16
    19ca:	d09d      	beq.n	1908 <InitializeSeesaw+0x3c>
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
    19cc:	17f2      	asrs	r2, r6, #31
    19ce:	003c      	movs	r4, r7
    19d0:	4014      	ands	r4, r2
    19d2:	19a4      	adds	r4, r4, r6
    19d4:	10a4      	asrs	r4, r4, #2
    19d6:	00e4      	lsls	r4, r4, #3
    19d8:	0f92      	lsrs	r2, r2, #30
    19da:	18b3      	adds	r3, r6, r2
    19dc:	403b      	ands	r3, r7
    19de:	1a9b      	subs	r3, r3, r2
    19e0:	18e4      	adds	r4, r4, r3
    19e2:	b2e4      	uxtb	r4, r4
    19e4:	2201      	movs	r2, #1
    19e6:	0039      	movs	r1, r7
    19e8:	0020      	movs	r0, r4
    19ea:	47a8      	blx	r5
    19ec:	4681      	mov	r9, r0
		error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
    19ee:	2201      	movs	r2, #1
    19f0:	2102      	movs	r1, #2
    19f2:	0020      	movs	r0, r4
    19f4:	47a8      	blx	r5
    19f6:	464b      	mov	r3, r9
    19f8:	4303      	orrs	r3, r0
		if(ERROR_NONE != error)
    19fa:	d0e4      	beq.n	19c6 <InitializeSeesaw+0xfa>
			SerialConsoleWriteString("Could not initialize Keypad!/r/n");
    19fc:	4814      	ldr	r0, [pc, #80]	; (1a50 <InitializeSeesaw+0x184>)
    19fe:	4b05      	ldr	r3, [pc, #20]	; (1a14 <InitializeSeesaw+0x148>)
    1a00:	4798      	blx	r3
    1a02:	e7e0      	b.n	19c6 <InitializeSeesaw+0xfa>
    1a04:	20003934 	.word	0x20003934
    1a08:	0000a894 	.word	0x0000a894
    1a0c:	0000102d 	.word	0x0000102d
    1a10:	0000a7ac 	.word	0x0000a7ac
    1a14:	00005bed 	.word	0x00005bed
    1a18:	0000a78c 	.word	0x0000a78c
    1a1c:	0000a8a0 	.word	0x0000a8a0
    1a20:	00000fcd 	.word	0x00000fcd
    1a24:	0000a8a4 	.word	0x0000a8a4
    1a28:	0000a89c 	.word	0x0000a89c
    1a2c:	00001869 	.word	0x00001869
    1a30:	000018a1 	.word	0x000018a1
    1a34:	00004dc9 	.word	0x00004dc9
    1a38:	0000a898 	.word	0x0000a898
    1a3c:	00001825 	.word	0x00001825
    1a40:	0000a7b8 	.word	0x0000a7b8
    1a44:	0000a7cc 	.word	0x0000a7cc
    1a48:	0000a7ec 	.word	0x0000a7ec
    1a4c:	0000a818 	.word	0x0000a818
    1a50:	0000a84c 	.word	0x0000a84c

00001a54 <vUiHandlerTask>:
* @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
* @return		Should not return! This is a task defining function.
* @note         
*****************************************************************************/
void vUiHandlerTask( void *pvParameters )
{
    1a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a56:	b087      	sub	sp, #28
//Do initialization code here
SerialConsoleWriteString("UI Task Started!");
    1a58:	481c      	ldr	r0, [pc, #112]	; (1acc <vUiHandlerTask+0x78>)
    1a5a:	4b1d      	ldr	r3, [pc, #116]	; (1ad0 <vUiHandlerTask+0x7c>)
    1a5c:	4798      	blx	r3
uiState = UI_STATE_HANDLE_BUTTONS;
    1a5e:	2200      	movs	r2, #0
    1a60:	4b1c      	ldr	r3, [pc, #112]	; (1ad4 <vUiHandlerTask+0x80>)
    1a62:	701a      	strb	r2, [r3, #0]

uint8_t buffer;
uint8_t key_index;
uint8_t led_state[16] = {0};
    1a64:	3210      	adds	r2, #16
    1a66:	2100      	movs	r1, #0
    1a68:	a801      	add	r0, sp, #4
    1a6a:	4b1b      	ldr	r3, [pc, #108]	; (1ad8 <vUiHandlerTask+0x84>)
    1a6c:	4798      	blx	r3

//Here we start the loop for the UI State Machine
while(1)
{
	switch(uiState)
    1a6e:	4c19      	ldr	r4, [pc, #100]	; (1ad4 <vUiHandlerTask+0x80>)
		/* NOTE:
		Do not call SeesawReadKeypad(uint8_t *buffer, uint8_t count) with the argument count being zero. 
		There seems to be a bug with ASF when this is called (i2c_master_read_packet_job).
		The following guard can be used: */

		SeesawReadKeypad(&buffer, EVENT_READ_ONE);
    1a70:	4e1a      	ldr	r6, [pc, #104]	; (1adc <vUiHandlerTask+0x88>)
			if ((buffer & BUTTON_PRESSED_MASK) == BUTTON_PRESSED_VAL) {
				led_state[key_index] = ~led_state[key_index];
			}
		}
				
		SeesawSetLed(key_index, led_state[key_index], led_state[key_index], led_state[key_index]);
    1a72:	4d1b      	ldr	r5, [pc, #108]	; (1ae0 <vUiHandlerTask+0x8c>)
    1a74:	e01a      	b.n	1aac <vUiHandlerTask+0x58>
		SeesawReadKeypad(&buffer, EVENT_READ_ONE);
    1a76:	2717      	movs	r7, #23
    1a78:	446f      	add	r7, sp
    1a7a:	2101      	movs	r1, #1
    1a7c:	0038      	movs	r0, r7
    1a7e:	47b0      	blx	r6
		key_index = NEO_TRELLIS_SEESAW_KEY(buffer >> 2);
    1a80:	783b      	ldrb	r3, [r7, #0]
    1a82:	0899      	lsrs	r1, r3, #2
    1a84:	08ca      	lsrs	r2, r1, #3
    1a86:	0092      	lsls	r2, r2, #2
    1a88:	2007      	movs	r0, #7
    1a8a:	4008      	ands	r0, r1
    1a8c:	1810      	adds	r0, r2, r0
		if (buffer != NO_EVENT_STATE) {
    1a8e:	2bff      	cmp	r3, #255	; 0xff
    1a90:	d002      	beq.n	1a98 <vUiHandlerTask+0x44>
			if ((buffer & BUTTON_PRESSED_MASK) == BUTTON_PRESSED_VAL) {
    1a92:	43db      	mvns	r3, r3
    1a94:	079b      	lsls	r3, r3, #30
    1a96:	d013      	beq.n	1ac0 <vUiHandlerTask+0x6c>
		SeesawSetLed(key_index, led_state[key_index], led_state[key_index], led_state[key_index]);
    1a98:	ab01      	add	r3, sp, #4
    1a9a:	5c19      	ldrb	r1, [r3, r0]
    1a9c:	000b      	movs	r3, r1
    1a9e:	000a      	movs	r2, r1
    1aa0:	47a8      	blx	r5
		SeesawOrderLedUpdate();
    1aa2:	4b10      	ldr	r3, [pc, #64]	; (1ae4 <vUiHandlerTask+0x90>)
    1aa4:	4798      	blx	r3
			uiState = UI_STATE_HANDLE_BUTTONS;
		break;
	}

	//After execution, you can put a thread to sleep for some time.
	vTaskDelay(50);
    1aa6:	2032      	movs	r0, #50	; 0x32
    1aa8:	4b0f      	ldr	r3, [pc, #60]	; (1ae8 <vUiHandlerTask+0x94>)
    1aaa:	4798      	blx	r3
	switch(uiState)
    1aac:	7823      	ldrb	r3, [r4, #0]
    1aae:	2b00      	cmp	r3, #0
    1ab0:	d0e1      	beq.n	1a76 <vUiHandlerTask+0x22>
    1ab2:	b2db      	uxtb	r3, r3
    1ab4:	2b02      	cmp	r3, #2
    1ab6:	d9f6      	bls.n	1aa6 <vUiHandlerTask+0x52>
			uiState = UI_STATE_HANDLE_BUTTONS;
    1ab8:	2200      	movs	r2, #0
    1aba:	4b06      	ldr	r3, [pc, #24]	; (1ad4 <vUiHandlerTask+0x80>)
    1abc:	701a      	strb	r2, [r3, #0]
		break;
    1abe:	e7f2      	b.n	1aa6 <vUiHandlerTask+0x52>
				led_state[key_index] = ~led_state[key_index];
    1ac0:	aa01      	add	r2, sp, #4
    1ac2:	5c13      	ldrb	r3, [r2, r0]
    1ac4:	43db      	mvns	r3, r3
    1ac6:	5413      	strb	r3, [r2, r0]
    1ac8:	e7e6      	b.n	1a98 <vUiHandlerTask+0x44>
    1aca:	46c0      	nop			; (mov r8, r8)
    1acc:	0000a8a8 	.word	0x0000a8a8
    1ad0:	00005bed 	.word	0x00005bed
    1ad4:	20003944 	.word	0x20003944
    1ad8:	00009a8f 	.word	0x00009a8f
    1adc:	000017d9 	.word	0x000017d9
    1ae0:	00001869 	.word	0x00001869
    1ae4:	000018a1 	.word	0x000018a1
    1ae8:	00004dc9 	.word	0x00004dc9

00001aec <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1aec:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1aee:	2207      	movs	r2, #7
    1af0:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    1af2:	421a      	tst	r2, r3
    1af4:	d1fc      	bne.n	1af0 <_i2c_master_wait_for_sync+0x4>
}
    1af6:	4770      	bx	lr

00001af8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1af8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1afa:	46d6      	mov	lr, sl
    1afc:	464f      	mov	r7, r9
    1afe:	4646      	mov	r6, r8
    1b00:	b5c0      	push	{r6, r7, lr}
    1b02:	b08a      	sub	sp, #40	; 0x28
    1b04:	0006      	movs	r6, r0
    1b06:	000f      	movs	r7, r1
    1b08:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    1b0a:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1b0c:	0008      	movs	r0, r1
    1b0e:	4ba0      	ldr	r3, [pc, #640]	; (1d90 <i2c_master_init+0x298>)
    1b10:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1b12:	4aa0      	ldr	r2, [pc, #640]	; (1d94 <i2c_master_init+0x29c>)
    1b14:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1b16:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1b18:	2301      	movs	r3, #1
    1b1a:	40ab      	lsls	r3, r5
    1b1c:	430b      	orrs	r3, r1
    1b1e:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1b20:	a909      	add	r1, sp, #36	; 0x24
    1b22:	7b23      	ldrb	r3, [r4, #12]
    1b24:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1b26:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1b28:	b2c5      	uxtb	r5, r0
    1b2a:	0028      	movs	r0, r5
    1b2c:	4b9a      	ldr	r3, [pc, #616]	; (1d98 <i2c_master_init+0x2a0>)
    1b2e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1b30:	0028      	movs	r0, r5
    1b32:	4b9a      	ldr	r3, [pc, #616]	; (1d9c <i2c_master_init+0x2a4>)
    1b34:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1b36:	7b20      	ldrb	r0, [r4, #12]
    1b38:	2100      	movs	r1, #0
    1b3a:	4b99      	ldr	r3, [pc, #612]	; (1da0 <i2c_master_init+0x2a8>)
    1b3c:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1b3e:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    1b40:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1b42:	079b      	lsls	r3, r3, #30
    1b44:	d505      	bpl.n	1b52 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    1b46:	b00a      	add	sp, #40	; 0x28
    1b48:	bc1c      	pop	{r2, r3, r4}
    1b4a:	4690      	mov	r8, r2
    1b4c:	4699      	mov	r9, r3
    1b4e:	46a2      	mov	sl, r4
    1b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    1b52:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    1b54:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    1b56:	07db      	lsls	r3, r3, #31
    1b58:	d4f5      	bmi.n	1b46 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1b5a:	6830      	ldr	r0, [r6, #0]
    1b5c:	4b8c      	ldr	r3, [pc, #560]	; (1d90 <i2c_master_init+0x298>)
    1b5e:	4699      	mov	r9, r3
    1b60:	4798      	blx	r3
    1b62:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    1b64:	498f      	ldr	r1, [pc, #572]	; (1da4 <i2c_master_init+0x2ac>)
    1b66:	4b90      	ldr	r3, [pc, #576]	; (1da8 <i2c_master_init+0x2b0>)
    1b68:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1b6a:	00ad      	lsls	r5, r5, #2
    1b6c:	4b8f      	ldr	r3, [pc, #572]	; (1dac <i2c_master_init+0x2b4>)
    1b6e:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
    1b70:	2300      	movs	r3, #0
    1b72:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
    1b74:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
    1b76:	2500      	movs	r5, #0
    1b78:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
    1b7a:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
    1b7c:	2225      	movs	r2, #37	; 0x25
    1b7e:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
    1b80:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    1b82:	3314      	adds	r3, #20
    1b84:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b86:	6833      	ldr	r3, [r6, #0]
    1b88:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    1b8a:	0018      	movs	r0, r3
    1b8c:	47c8      	blx	r9
    1b8e:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1b90:	2380      	movs	r3, #128	; 0x80
    1b92:	aa08      	add	r2, sp, #32
    1b94:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1b96:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1b98:	2301      	movs	r3, #1
    1b9a:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    1b9c:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    1b9e:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    1ba0:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    1ba2:	2800      	cmp	r0, #0
    1ba4:	d100      	bne.n	1ba8 <i2c_master_init+0xb0>
    1ba6:	e0af      	b.n	1d08 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
    1ba8:	ab08      	add	r3, sp, #32
    1baa:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1bac:	2302      	movs	r3, #2
    1bae:	aa08      	add	r2, sp, #32
    1bb0:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    1bb2:	0c00      	lsrs	r0, r0, #16
    1bb4:	b2c0      	uxtb	r0, r0
    1bb6:	0011      	movs	r1, r2
    1bb8:	4b7d      	ldr	r3, [pc, #500]	; (1db0 <i2c_master_init+0x2b8>)
    1bba:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    1bbc:	2f00      	cmp	r7, #0
    1bbe:	d100      	bne.n	1bc2 <i2c_master_init+0xca>
    1bc0:	e0a7      	b.n	1d12 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
    1bc2:	ab08      	add	r3, sp, #32
    1bc4:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1bc6:	2302      	movs	r3, #2
    1bc8:	aa08      	add	r2, sp, #32
    1bca:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1bcc:	0c3f      	lsrs	r7, r7, #16
    1bce:	b2f8      	uxtb	r0, r7
    1bd0:	0011      	movs	r1, r2
    1bd2:	4b77      	ldr	r3, [pc, #476]	; (1db0 <i2c_master_init+0x2b8>)
    1bd4:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    1bd6:	8aa3      	ldrh	r3, [r4, #20]
    1bd8:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    1bda:	8ae3      	ldrh	r3, [r4, #22]
    1bdc:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    1bde:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1be0:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    1be2:	2b00      	cmp	r3, #0
    1be4:	d104      	bne.n	1bf0 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1be6:	4b73      	ldr	r3, [pc, #460]	; (1db4 <i2c_master_init+0x2bc>)
    1be8:	789b      	ldrb	r3, [r3, #2]
    1bea:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1bec:	0fdb      	lsrs	r3, r3, #31
    1bee:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    1bf0:	68a1      	ldr	r1, [r4, #8]
    1bf2:	6923      	ldr	r3, [r4, #16]
    1bf4:	430b      	orrs	r3, r1
    1bf6:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    1bf8:	2224      	movs	r2, #36	; 0x24
    1bfa:	5ca2      	ldrb	r2, [r4, r2]
    1bfc:	2a00      	cmp	r2, #0
    1bfe:	d002      	beq.n	1c06 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1c00:	2280      	movs	r2, #128	; 0x80
    1c02:	05d2      	lsls	r2, r2, #23
    1c04:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    1c06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1c08:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    1c0a:	222c      	movs	r2, #44	; 0x2c
    1c0c:	5ca2      	ldrb	r2, [r4, r2]
    1c0e:	2a00      	cmp	r2, #0
    1c10:	d103      	bne.n	1c1a <i2c_master_init+0x122>
    1c12:	2280      	movs	r2, #128	; 0x80
    1c14:	0492      	lsls	r2, r2, #18
    1c16:	4291      	cmp	r1, r2
    1c18:	d102      	bne.n	1c20 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1c1a:	2280      	movs	r2, #128	; 0x80
    1c1c:	0512      	lsls	r2, r2, #20
    1c1e:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    1c20:	222d      	movs	r2, #45	; 0x2d
    1c22:	5ca2      	ldrb	r2, [r4, r2]
    1c24:	2a00      	cmp	r2, #0
    1c26:	d002      	beq.n	1c2e <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    1c28:	2280      	movs	r2, #128	; 0x80
    1c2a:	0412      	lsls	r2, r2, #16
    1c2c:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    1c2e:	222e      	movs	r2, #46	; 0x2e
    1c30:	5ca2      	ldrb	r2, [r4, r2]
    1c32:	2a00      	cmp	r2, #0
    1c34:	d002      	beq.n	1c3c <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    1c36:	2280      	movs	r2, #128	; 0x80
    1c38:	03d2      	lsls	r2, r2, #15
    1c3a:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    1c3c:	4642      	mov	r2, r8
    1c3e:	6812      	ldr	r2, [r2, #0]
    1c40:	4313      	orrs	r3, r2
    1c42:	4642      	mov	r2, r8
    1c44:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    1c46:	2380      	movs	r3, #128	; 0x80
    1c48:	005b      	lsls	r3, r3, #1
    1c4a:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    1c4c:	4648      	mov	r0, r9
    1c4e:	3014      	adds	r0, #20
    1c50:	b2c0      	uxtb	r0, r0
    1c52:	4b59      	ldr	r3, [pc, #356]	; (1db8 <i2c_master_init+0x2c0>)
    1c54:	4798      	blx	r3
    1c56:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    1c58:	23fa      	movs	r3, #250	; 0xfa
    1c5a:	009b      	lsls	r3, r3, #2
    1c5c:	6822      	ldr	r2, [r4, #0]
    1c5e:	435a      	muls	r2, r3
    1c60:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    1c62:	6863      	ldr	r3, [r4, #4]
    1c64:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    1c66:	4d55      	ldr	r5, [pc, #340]	; (1dbc <i2c_master_init+0x2c4>)
    1c68:	47a8      	blx	r5
    1c6a:	9000      	str	r0, [sp, #0]
    1c6c:	9101      	str	r1, [sp, #4]
    1c6e:	464b      	mov	r3, r9
    1c70:	0058      	lsls	r0, r3, #1
    1c72:	47a8      	blx	r5
    1c74:	9002      	str	r0, [sp, #8]
    1c76:	9103      	str	r1, [sp, #12]
    1c78:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    1c7a:	47a8      	blx	r5
    1c7c:	9004      	str	r0, [sp, #16]
    1c7e:	9105      	str	r1, [sp, #20]
    1c80:	4f4f      	ldr	r7, [pc, #316]	; (1dc0 <i2c_master_init+0x2c8>)
    1c82:	4a50      	ldr	r2, [pc, #320]	; (1dc4 <i2c_master_init+0x2cc>)
    1c84:	4b50      	ldr	r3, [pc, #320]	; (1dc8 <i2c_master_init+0x2d0>)
    1c86:	9800      	ldr	r0, [sp, #0]
    1c88:	9901      	ldr	r1, [sp, #4]
    1c8a:	47b8      	blx	r7
    1c8c:	0002      	movs	r2, r0
    1c8e:	000b      	movs	r3, r1
    1c90:	9804      	ldr	r0, [sp, #16]
    1c92:	9905      	ldr	r1, [sp, #20]
    1c94:	47b8      	blx	r7
    1c96:	4e4d      	ldr	r6, [pc, #308]	; (1dcc <i2c_master_init+0x2d4>)
    1c98:	2200      	movs	r2, #0
    1c9a:	4b4d      	ldr	r3, [pc, #308]	; (1dd0 <i2c_master_init+0x2d8>)
    1c9c:	47b0      	blx	r6
    1c9e:	9004      	str	r0, [sp, #16]
    1ca0:	9105      	str	r1, [sp, #20]
    1ca2:	4648      	mov	r0, r9
    1ca4:	47a8      	blx	r5
    1ca6:	0002      	movs	r2, r0
    1ca8:	000b      	movs	r3, r1
    1caa:	9804      	ldr	r0, [sp, #16]
    1cac:	9905      	ldr	r1, [sp, #20]
    1cae:	47b8      	blx	r7
    1cb0:	0002      	movs	r2, r0
    1cb2:	000b      	movs	r3, r1
    1cb4:	4d47      	ldr	r5, [pc, #284]	; (1dd4 <i2c_master_init+0x2dc>)
    1cb6:	9800      	ldr	r0, [sp, #0]
    1cb8:	9901      	ldr	r1, [sp, #4]
    1cba:	47a8      	blx	r5
    1cbc:	9a02      	ldr	r2, [sp, #8]
    1cbe:	9b03      	ldr	r3, [sp, #12]
    1cc0:	47b0      	blx	r6
    1cc2:	2200      	movs	r2, #0
    1cc4:	4b44      	ldr	r3, [pc, #272]	; (1dd8 <i2c_master_init+0x2e0>)
    1cc6:	47a8      	blx	r5
    1cc8:	9a02      	ldr	r2, [sp, #8]
    1cca:	9b03      	ldr	r3, [sp, #12]
    1ccc:	4d43      	ldr	r5, [pc, #268]	; (1ddc <i2c_master_init+0x2e4>)
    1cce:	47a8      	blx	r5
    1cd0:	4b43      	ldr	r3, [pc, #268]	; (1de0 <i2c_master_init+0x2e8>)
    1cd2:	4798      	blx	r3
    1cd4:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    1cd6:	2380      	movs	r3, #128	; 0x80
    1cd8:	049b      	lsls	r3, r3, #18
    1cda:	68a2      	ldr	r2, [r4, #8]
    1cdc:	429a      	cmp	r2, r3
    1cde:	d01e      	beq.n	1d1e <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1ce0:	0003      	movs	r3, r0
    1ce2:	2040      	movs	r0, #64	; 0x40
    1ce4:	2dff      	cmp	r5, #255	; 0xff
    1ce6:	d900      	bls.n	1cea <i2c_master_init+0x1f2>
    1ce8:	e72d      	b.n	1b46 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    1cea:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    1cec:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1cee:	25ff      	movs	r5, #255	; 0xff
    1cf0:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    1cf2:	0624      	lsls	r4, r4, #24
    1cf4:	4325      	orrs	r5, r4
    1cf6:	0400      	lsls	r0, r0, #16
    1cf8:	23ff      	movs	r3, #255	; 0xff
    1cfa:	041b      	lsls	r3, r3, #16
    1cfc:	4018      	ands	r0, r3
    1cfe:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1d00:	4643      	mov	r3, r8
    1d02:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    1d04:	2000      	movs	r0, #0
    1d06:	e71e      	b.n	1b46 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    1d08:	2100      	movs	r1, #0
    1d0a:	4640      	mov	r0, r8
    1d0c:	4b35      	ldr	r3, [pc, #212]	; (1de4 <i2c_master_init+0x2ec>)
    1d0e:	4798      	blx	r3
    1d10:	e74a      	b.n	1ba8 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    1d12:	2101      	movs	r1, #1
    1d14:	4640      	mov	r0, r8
    1d16:	4b33      	ldr	r3, [pc, #204]	; (1de4 <i2c_master_init+0x2ec>)
    1d18:	4798      	blx	r3
    1d1a:	0007      	movs	r7, r0
    1d1c:	e751      	b.n	1bc2 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    1d1e:	26fa      	movs	r6, #250	; 0xfa
    1d20:	00b6      	lsls	r6, r6, #2
    1d22:	4653      	mov	r3, sl
    1d24:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    1d26:	9800      	ldr	r0, [sp, #0]
    1d28:	9901      	ldr	r1, [sp, #4]
    1d2a:	0002      	movs	r2, r0
    1d2c:	000b      	movs	r3, r1
    1d2e:	4c27      	ldr	r4, [pc, #156]	; (1dcc <i2c_master_init+0x2d4>)
    1d30:	47a0      	blx	r4
    1d32:	9000      	str	r0, [sp, #0]
    1d34:	9101      	str	r1, [sp, #4]
    1d36:	0030      	movs	r0, r6
    1d38:	4b20      	ldr	r3, [pc, #128]	; (1dbc <i2c_master_init+0x2c4>)
    1d3a:	4798      	blx	r3
    1d3c:	2200      	movs	r2, #0
    1d3e:	4b2a      	ldr	r3, [pc, #168]	; (1de8 <i2c_master_init+0x2f0>)
    1d40:	47b8      	blx	r7
    1d42:	0002      	movs	r2, r0
    1d44:	000b      	movs	r3, r1
    1d46:	9800      	ldr	r0, [sp, #0]
    1d48:	9901      	ldr	r1, [sp, #4]
    1d4a:	4c24      	ldr	r4, [pc, #144]	; (1ddc <i2c_master_init+0x2e4>)
    1d4c:	47a0      	blx	r4
    1d4e:	2200      	movs	r2, #0
    1d50:	4b21      	ldr	r3, [pc, #132]	; (1dd8 <i2c_master_init+0x2e0>)
    1d52:	4c20      	ldr	r4, [pc, #128]	; (1dd4 <i2c_master_init+0x2dc>)
    1d54:	47a0      	blx	r4
    1d56:	4b22      	ldr	r3, [pc, #136]	; (1de0 <i2c_master_init+0x2e8>)
    1d58:	4798      	blx	r3
    1d5a:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    1d5c:	d00c      	beq.n	1d78 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    1d5e:	0031      	movs	r1, r6
    1d60:	9807      	ldr	r0, [sp, #28]
    1d62:	4b22      	ldr	r3, [pc, #136]	; (1dec <i2c_master_init+0x2f4>)
    1d64:	4798      	blx	r3
    1d66:	3802      	subs	r0, #2
    1d68:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1d6a:	002b      	movs	r3, r5
    1d6c:	2dff      	cmp	r5, #255	; 0xff
    1d6e:	d80c      	bhi.n	1d8a <i2c_master_init+0x292>
    1d70:	28ff      	cmp	r0, #255	; 0xff
    1d72:	d9bc      	bls.n	1cee <i2c_master_init+0x1f6>
    1d74:	2040      	movs	r0, #64	; 0x40
    1d76:	e6e6      	b.n	1b46 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    1d78:	0071      	lsls	r1, r6, #1
    1d7a:	1e48      	subs	r0, r1, #1
    1d7c:	9b07      	ldr	r3, [sp, #28]
    1d7e:	469c      	mov	ip, r3
    1d80:	4460      	add	r0, ip
    1d82:	4b1a      	ldr	r3, [pc, #104]	; (1dec <i2c_master_init+0x2f4>)
    1d84:	4798      	blx	r3
    1d86:	3801      	subs	r0, #1
    1d88:	e7ef      	b.n	1d6a <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1d8a:	2040      	movs	r0, #64	; 0x40
    1d8c:	e6db      	b.n	1b46 <i2c_master_init+0x4e>
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	0000622d 	.word	0x0000622d
    1d94:	40000400 	.word	0x40000400
    1d98:	00006ed9 	.word	0x00006ed9
    1d9c:	00006e4d 	.word	0x00006e4d
    1da0:	00006069 	.word	0x00006069
    1da4:	00000375 	.word	0x00000375
    1da8:	00006269 	.word	0x00006269
    1dac:	20004e1c 	.word	0x20004e1c
    1db0:	00007001 	.word	0x00007001
    1db4:	41002000 	.word	0x41002000
    1db8:	00006ef5 	.word	0x00006ef5
    1dbc:	00009969 	.word	0x00009969
    1dc0:	00008dd5 	.word	0x00008dd5
    1dc4:	e826d695 	.word	0xe826d695
    1dc8:	3e112e0b 	.word	0x3e112e0b
    1dcc:	0000814d 	.word	0x0000814d
    1dd0:	40240000 	.word	0x40240000
    1dd4:	000092d5 	.word	0x000092d5
    1dd8:	3ff00000 	.word	0x3ff00000
    1ddc:	0000876d 	.word	0x0000876d
    1de0:	00009901 	.word	0x00009901
    1de4:	000060b5 	.word	0x000060b5
    1de8:	40080000 	.word	0x40080000
    1dec:	00007479 	.word	0x00007479

00001df0 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    1df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1df2:	46ce      	mov	lr, r9
    1df4:	4647      	mov	r7, r8
    1df6:	b580      	push	{r7, lr}
    1df8:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1dfa:	6803      	ldr	r3, [r0, #0]
    1dfc:	4699      	mov	r9, r3

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    1dfe:	4e14      	ldr	r6, [pc, #80]	; (1e50 <i2c_master_reset+0x60>)
    1e00:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1e02:	6825      	ldr	r5, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1e04:	0028      	movs	r0, r5
    1e06:	4b13      	ldr	r3, [pc, #76]	; (1e54 <i2c_master_reset+0x64>)
    1e08:	4698      	mov	r8, r3
    1e0a:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1e0c:	231f      	movs	r3, #31
    1e0e:	4018      	ands	r0, r3
    1e10:	2701      	movs	r7, #1
    1e12:	0039      	movs	r1, r7
    1e14:	4081      	lsls	r1, r0
    1e16:	3361      	adds	r3, #97	; 0x61
    1e18:	4a0f      	ldr	r2, [pc, #60]	; (1e58 <i2c_master_reset+0x68>)
    1e1a:	50d1      	str	r1, [r2, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    1e1c:	0020      	movs	r0, r4
    1e1e:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1e20:	2383      	movs	r3, #131	; 0x83
    1e22:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    1e24:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1e26:	682b      	ldr	r3, [r5, #0]
    1e28:	2202      	movs	r2, #2
    1e2a:	4393      	bics	r3, r2
    1e2c:	602b      	str	r3, [r5, #0]
	cpu_irq_enter_critical();
    1e2e:	4b0b      	ldr	r3, [pc, #44]	; (1e5c <i2c_master_reset+0x6c>)
    1e30:	4798      	blx	r3
	i2c_master_disable(module);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    1e32:	6820      	ldr	r0, [r4, #0]
    1e34:	47c0      	blx	r8
    1e36:	4b0a      	ldr	r3, [pc, #40]	; (1e60 <i2c_master_reset+0x70>)
    1e38:	4798      	blx	r3
	cpu_irq_leave_critical();
    1e3a:	4b0a      	ldr	r3, [pc, #40]	; (1e64 <i2c_master_reset+0x74>)
    1e3c:	4798      	blx	r3
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    1e3e:	0020      	movs	r0, r4
    1e40:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    1e42:	464b      	mov	r3, r9
    1e44:	601f      	str	r7, [r3, #0]
}
    1e46:	bc0c      	pop	{r2, r3}
    1e48:	4690      	mov	r8, r2
    1e4a:	4699      	mov	r9, r3
    1e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	00001aed 	.word	0x00001aed
    1e54:	000062a5 	.word	0x000062a5
    1e58:	e000e100 	.word	0xe000e100
    1e5c:	00005d09 	.word	0x00005d09
    1e60:	00006f29 	.word	0x00006f29
    1e64:	00005d49 	.word	0x00005d49

00001e68 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1e68:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1e6a:	7e1a      	ldrb	r2, [r3, #24]
    1e6c:	0792      	lsls	r2, r2, #30
    1e6e:	d507      	bpl.n	1e80 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1e70:	2202      	movs	r2, #2
    1e72:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1e74:	8b5b      	ldrh	r3, [r3, #26]
    1e76:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1e78:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    1e7a:	17db      	asrs	r3, r3, #31
    1e7c:	4018      	ands	r0, r3
}
    1e7e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1e80:	8b5a      	ldrh	r2, [r3, #26]
    1e82:	0752      	lsls	r2, r2, #29
    1e84:	d506      	bpl.n	1e94 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1e86:	6859      	ldr	r1, [r3, #4]
    1e88:	22c0      	movs	r2, #192	; 0xc0
    1e8a:	0292      	lsls	r2, r2, #10
    1e8c:	430a      	orrs	r2, r1
    1e8e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    1e90:	2018      	movs	r0, #24
    1e92:	e7f4      	b.n	1e7e <_i2c_master_address_response+0x16>
	return STATUS_OK;
    1e94:	2000      	movs	r0, #0
    1e96:	e7f2      	b.n	1e7e <_i2c_master_address_response+0x16>

00001e98 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1e98:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1e9a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1e9c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1e9e:	2401      	movs	r4, #1
    1ea0:	2502      	movs	r5, #2
    1ea2:	7e11      	ldrb	r1, [r2, #24]
    1ea4:	4221      	tst	r1, r4
    1ea6:	d10b      	bne.n	1ec0 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1ea8:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1eaa:	4229      	tst	r1, r5
    1eac:	d106      	bne.n	1ebc <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    1eae:	3301      	adds	r3, #1
    1eb0:	b29b      	uxth	r3, r3
    1eb2:	8901      	ldrh	r1, [r0, #8]
    1eb4:	4299      	cmp	r1, r3
    1eb6:	d8f4      	bhi.n	1ea2 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    1eb8:	2012      	movs	r0, #18
    1eba:	e002      	b.n	1ec2 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    1ebc:	2000      	movs	r0, #0
    1ebe:	e000      	b.n	1ec2 <_i2c_master_wait_for_bus+0x2a>
    1ec0:	2000      	movs	r0, #0
}
    1ec2:	bd30      	pop	{r4, r5, pc}

00001ec4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    1ec4:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1ec6:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1ec8:	6862      	ldr	r2, [r4, #4]
    1eca:	2380      	movs	r3, #128	; 0x80
    1ecc:	02db      	lsls	r3, r3, #11
    1ece:	4313      	orrs	r3, r2
    1ed0:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    1ed2:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1ed4:	4b02      	ldr	r3, [pc, #8]	; (1ee0 <_i2c_master_send_hs_master_code+0x1c>)
    1ed6:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1ed8:	2301      	movs	r3, #1
    1eda:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    1edc:	bd10      	pop	{r4, pc}
    1ede:	46c0      	nop			; (mov r8, r8)
    1ee0:	00001e99 	.word	0x00001e99

00001ee4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1ee4:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1ee6:	0080      	lsls	r0, r0, #2
    1ee8:	4b16      	ldr	r3, [pc, #88]	; (1f44 <_tc_interrupt_handler+0x60>)
    1eea:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1eec:	6823      	ldr	r3, [r4, #0]
    1eee:	7b9d      	ldrb	r5, [r3, #14]
    1ef0:	7e22      	ldrb	r2, [r4, #24]
    1ef2:	7e63      	ldrb	r3, [r4, #25]
    1ef4:	4013      	ands	r3, r2
    1ef6:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1ef8:	07eb      	lsls	r3, r5, #31
    1efa:	d406      	bmi.n	1f0a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1efc:	07ab      	lsls	r3, r5, #30
    1efe:	d40b      	bmi.n	1f18 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1f00:	06eb      	lsls	r3, r5, #27
    1f02:	d410      	bmi.n	1f26 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1f04:	06ab      	lsls	r3, r5, #26
    1f06:	d415      	bmi.n	1f34 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1f08:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1f0a:	0020      	movs	r0, r4
    1f0c:	68a3      	ldr	r3, [r4, #8]
    1f0e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1f10:	2301      	movs	r3, #1
    1f12:	6822      	ldr	r2, [r4, #0]
    1f14:	7393      	strb	r3, [r2, #14]
    1f16:	e7f1      	b.n	1efc <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1f18:	0020      	movs	r0, r4
    1f1a:	68e3      	ldr	r3, [r4, #12]
    1f1c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1f1e:	2302      	movs	r3, #2
    1f20:	6822      	ldr	r2, [r4, #0]
    1f22:	7393      	strb	r3, [r2, #14]
    1f24:	e7ec      	b.n	1f00 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1f26:	0020      	movs	r0, r4
    1f28:	6923      	ldr	r3, [r4, #16]
    1f2a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1f2c:	2310      	movs	r3, #16
    1f2e:	6822      	ldr	r2, [r4, #0]
    1f30:	7393      	strb	r3, [r2, #14]
    1f32:	e7e7      	b.n	1f04 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1f34:	0020      	movs	r0, r4
    1f36:	6963      	ldr	r3, [r4, #20]
    1f38:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1f3a:	6823      	ldr	r3, [r4, #0]
    1f3c:	2220      	movs	r2, #32
    1f3e:	739a      	strb	r2, [r3, #14]
}
    1f40:	e7e2      	b.n	1f08 <_tc_interrupt_handler+0x24>
    1f42:	46c0      	nop			; (mov r8, r8)
    1f44:	20003948 	.word	0x20003948

00001f48 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1f48:	b510      	push	{r4, lr}
    1f4a:	2000      	movs	r0, #0
    1f4c:	4b01      	ldr	r3, [pc, #4]	; (1f54 <TC3_Handler+0xc>)
    1f4e:	4798      	blx	r3
    1f50:	bd10      	pop	{r4, pc}
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	00001ee5 	.word	0x00001ee5

00001f58 <TC4_Handler>:
    1f58:	b510      	push	{r4, lr}
    1f5a:	2001      	movs	r0, #1
    1f5c:	4b01      	ldr	r3, [pc, #4]	; (1f64 <TC4_Handler+0xc>)
    1f5e:	4798      	blx	r3
    1f60:	bd10      	pop	{r4, pc}
    1f62:	46c0      	nop			; (mov r8, r8)
    1f64:	00001ee5 	.word	0x00001ee5

00001f68 <TC5_Handler>:
    1f68:	b510      	push	{r4, lr}
    1f6a:	2002      	movs	r0, #2
    1f6c:	4b01      	ldr	r3, [pc, #4]	; (1f74 <TC5_Handler+0xc>)
    1f6e:	4798      	blx	r3
    1f70:	bd10      	pop	{r4, pc}
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	00001ee5 	.word	0x00001ee5

00001f78 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
    1f78:	b570      	push	{r4, r5, r6, lr}
    1f7a:	000a      	movs	r2, r1
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
    1f7c:	4b09      	ldr	r3, [pc, #36]	; (1fa4 <prvHelpCommand+0x2c>)
    1f7e:	681b      	ldr	r3, [r3, #0]
    1f80:	2b00      	cmp	r3, #0
    1f82:	d00a      	beq.n	1f9a <prvHelpCommand+0x22>
		pxCommand = &xRegisteredCommands;
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
    1f84:	4c07      	ldr	r4, [pc, #28]	; (1fa4 <prvHelpCommand+0x2c>)
    1f86:	6825      	ldr	r5, [r4, #0]
    1f88:	682b      	ldr	r3, [r5, #0]
    1f8a:	6859      	ldr	r1, [r3, #4]
    1f8c:	4b06      	ldr	r3, [pc, #24]	; (1fa8 <prvHelpCommand+0x30>)
    1f8e:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
    1f90:	6868      	ldr	r0, [r5, #4]
    1f92:	6020      	str	r0, [r4, #0]

	if( pxCommand == NULL )
    1f94:	1e43      	subs	r3, r0, #1
    1f96:	4198      	sbcs	r0, r3
	{
		xReturn = pdTRUE;
	}

	return xReturn;
}
    1f98:	bd70      	pop	{r4, r5, r6, pc}
		pxCommand = &xRegisteredCommands;
    1f9a:	4904      	ldr	r1, [pc, #16]	; (1fac <prvHelpCommand+0x34>)
    1f9c:	4b01      	ldr	r3, [pc, #4]	; (1fa4 <prvHelpCommand+0x2c>)
    1f9e:	6019      	str	r1, [r3, #0]
    1fa0:	e7f0      	b.n	1f84 <prvHelpCommand+0xc>
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	20000320 	.word	0x20000320
    1fa8:	00009d29 	.word	0x00009d29
    1fac:	20000010 	.word	0x20000010

00001fb0 <FreeRTOS_CLIRegisterCommand>:
{
    1fb0:	b570      	push	{r4, r5, r6, lr}
    1fb2:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
    1fb4:	d006      	beq.n	1fc4 <FreeRTOS_CLIRegisterCommand+0x14>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
    1fb6:	2008      	movs	r0, #8
    1fb8:	4b0a      	ldr	r3, [pc, #40]	; (1fe4 <FreeRTOS_CLIRegisterCommand+0x34>)
    1fba:	4798      	blx	r3
    1fbc:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
    1fbe:	d103      	bne.n	1fc8 <FreeRTOS_CLIRegisterCommand+0x18>
    1fc0:	b672      	cpsid	i
    1fc2:	e7fe      	b.n	1fc2 <FreeRTOS_CLIRegisterCommand+0x12>
	configASSERT( pxCommandToRegister );
    1fc4:	b672      	cpsid	i
    1fc6:	e7fe      	b.n	1fc6 <FreeRTOS_CLIRegisterCommand+0x16>
		taskENTER_CRITICAL();
    1fc8:	4b07      	ldr	r3, [pc, #28]	; (1fe8 <FreeRTOS_CLIRegisterCommand+0x38>)
    1fca:	4798      	blx	r3
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
    1fcc:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
    1fce:	2300      	movs	r3, #0
    1fd0:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
    1fd2:	4b06      	ldr	r3, [pc, #24]	; (1fec <FreeRTOS_CLIRegisterCommand+0x3c>)
    1fd4:	681a      	ldr	r2, [r3, #0]
    1fd6:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
    1fd8:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
    1fda:	4b05      	ldr	r3, [pc, #20]	; (1ff0 <FreeRTOS_CLIRegisterCommand+0x40>)
    1fdc:	4798      	blx	r3
}
    1fde:	2001      	movs	r0, #1
    1fe0:	bd70      	pop	{r4, r5, r6, pc}
    1fe2:	46c0      	nop			; (mov r8, r8)
    1fe4:	00003455 	.word	0x00003455
    1fe8:	00003391 	.word	0x00003391
    1fec:	2000000c 	.word	0x2000000c
    1ff0:	000033a9 	.word	0x000033a9

00001ff4 <FreeRTOS_CLIProcessCommand>:
{
    1ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ff6:	46de      	mov	lr, fp
    1ff8:	4657      	mov	r7, sl
    1ffa:	464e      	mov	r6, r9
    1ffc:	4645      	mov	r5, r8
    1ffe:	b5e0      	push	{r5, r6, r7, lr}
    2000:	b083      	sub	sp, #12
    2002:	0006      	movs	r6, r0
    2004:	9100      	str	r1, [sp, #0]
    2006:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
    2008:	4b39      	ldr	r3, [pc, #228]	; (20f0 <STACK_SIZE+0xf0>)
    200a:	681b      	ldr	r3, [r3, #0]
    200c:	2b00      	cmp	r3, #0
    200e:	d011      	beq.n	2034 <STACK_SIZE+0x34>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
    2010:	681b      	ldr	r3, [r3, #0]
    2012:	689b      	ldr	r3, [r3, #8]
    2014:	0032      	movs	r2, r6
    2016:	9901      	ldr	r1, [sp, #4]
    2018:	9800      	ldr	r0, [sp, #0]
    201a:	4798      	blx	r3
		if( xReturn == pdFALSE )
    201c:	2800      	cmp	r0, #0
    201e:	d102      	bne.n	2026 <STACK_SIZE+0x26>
			pxCommand = NULL;
    2020:	2200      	movs	r2, #0
    2022:	4b33      	ldr	r3, [pc, #204]	; (20f0 <STACK_SIZE+0xf0>)
    2024:	601a      	str	r2, [r3, #0]
}
    2026:	b003      	add	sp, #12
    2028:	bc3c      	pop	{r2, r3, r4, r5}
    202a:	4690      	mov	r8, r2
    202c:	4699      	mov	r9, r3
    202e:	46a2      	mov	sl, r4
    2030:	46ab      	mov	fp, r5
    2032:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    2034:	4c2f      	ldr	r4, [pc, #188]	; (20f4 <STACK_SIZE+0xf4>)
    2036:	4b2e      	ldr	r3, [pc, #184]	; (20f0 <STACK_SIZE+0xf0>)
    2038:	601c      	str	r4, [r3, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    203a:	4b2f      	ldr	r3, [pc, #188]	; (20f8 <STACK_SIZE+0xf8>)
    203c:	4699      	mov	r9, r3
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    203e:	2320      	movs	r3, #32
    2040:	4698      	mov	r8, r3
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    2042:	4b2e      	ldr	r3, [pc, #184]	; (20fc <STACK_SIZE+0xfc>)
    2044:	469b      	mov	fp, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    2046:	4b2a      	ldr	r3, [pc, #168]	; (20f0 <STACK_SIZE+0xf0>)
    2048:	469a      	mov	sl, r3
    204a:	e00a      	b.n	2062 <STACK_SIZE+0x62>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    204c:	0002      	movs	r2, r0
    204e:	0029      	movs	r1, r5
    2050:	0030      	movs	r0, r6
    2052:	47d8      	blx	fp
    2054:	2800      	cmp	r0, #0
    2056:	d00d      	beq.n	2074 <STACK_SIZE+0x74>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    2058:	6864      	ldr	r4, [r4, #4]
    205a:	4653      	mov	r3, sl
    205c:	601c      	str	r4, [r3, #0]
    205e:	2c00      	cmp	r4, #0
    2060:	d03e      	beq.n	20e0 <STACK_SIZE+0xe0>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
    2062:	6827      	ldr	r7, [r4, #0]
    2064:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    2066:	0028      	movs	r0, r5
    2068:	47c8      	blx	r9
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    206a:	5c33      	ldrb	r3, [r6, r0]
    206c:	4642      	mov	r2, r8
    206e:	4393      	bics	r3, r2
    2070:	d1f2      	bne.n	2058 <STACK_SIZE+0x58>
    2072:	e7eb      	b.n	204c <STACK_SIZE+0x4c>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
    2074:	7b3f      	ldrb	r7, [r7, #12]
    2076:	b27f      	sxtb	r7, r7
    2078:	2f00      	cmp	r7, #0
    207a:	db2d      	blt.n	20d8 <STACK_SIZE+0xd8>
{
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
    207c:	7833      	ldrb	r3, [r6, #0]
    207e:	2b00      	cmp	r3, #0
    2080:	d028      	beq.n	20d4 <STACK_SIZE+0xd4>
    2082:	0032      	movs	r2, r6
    2084:	2500      	movs	r5, #0
    2086:	2100      	movs	r1, #0
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
    2088:	2401      	movs	r4, #1
    208a:	e008      	b.n	209e <STACK_SIZE+0x9e>
    208c:	2901      	cmp	r1, #1
    208e:	d00a      	beq.n	20a6 <STACK_SIZE+0xa6>
			{
				cParameters++;
    2090:	3501      	adds	r5, #1
    2092:	b26d      	sxtb	r5, r5
				xLastCharacterWasSpace = pdTRUE;
    2094:	0021      	movs	r1, r4
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
    2096:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
    2098:	7813      	ldrb	r3, [r2, #0]
    209a:	2b00      	cmp	r3, #0
    209c:	d005      	beq.n	20aa <STACK_SIZE+0xaa>
		if( ( *pcCommandString ) == ' ' )
    209e:	2b20      	cmp	r3, #32
    20a0:	d0f4      	beq.n	208c <STACK_SIZE+0x8c>
			xLastCharacterWasSpace = pdFALSE;
    20a2:	0001      	movs	r1, r0
    20a4:	e7f7      	b.n	2096 <STACK_SIZE+0x96>
			if( xLastCharacterWasSpace != pdTRUE )
    20a6:	0021      	movs	r1, r4
    20a8:	e7f5      	b.n	2096 <STACK_SIZE+0x96>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
    20aa:	2901      	cmp	r1, #1
    20ac:	d00f      	beq.n	20ce <STACK_SIZE+0xce>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    20ae:	4b10      	ldr	r3, [pc, #64]	; (20f0 <STACK_SIZE+0xf0>)
    20b0:	681b      	ldr	r3, [r3, #0]
    20b2:	2b00      	cmp	r3, #0
    20b4:	d014      	beq.n	20e0 <STACK_SIZE+0xe0>
    20b6:	42af      	cmp	r7, r5
    20b8:	d0aa      	beq.n	2010 <STACK_SIZE+0x10>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    20ba:	9a01      	ldr	r2, [sp, #4]
    20bc:	4910      	ldr	r1, [pc, #64]	; (2100 <STACK_SIZE+0x100>)
    20be:	9800      	ldr	r0, [sp, #0]
    20c0:	4b10      	ldr	r3, [pc, #64]	; (2104 <STACK_SIZE+0x104>)
    20c2:	4798      	blx	r3
		pxCommand = NULL;
    20c4:	2200      	movs	r2, #0
    20c6:	4b0a      	ldr	r3, [pc, #40]	; (20f0 <STACK_SIZE+0xf0>)
    20c8:	601a      	str	r2, [r3, #0]
    20ca:	2000      	movs	r0, #0
    20cc:	e7ab      	b.n	2026 <STACK_SIZE+0x26>
	{
		cParameters--;
    20ce:	3d01      	subs	r5, #1
    20d0:	b26d      	sxtb	r5, r5
    20d2:	e7ec      	b.n	20ae <STACK_SIZE+0xae>
	while( *pcCommandString != 0x00 )
    20d4:	2500      	movs	r5, #0
    20d6:	e7ea      	b.n	20ae <STACK_SIZE+0xae>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    20d8:	4b05      	ldr	r3, [pc, #20]	; (20f0 <STACK_SIZE+0xf0>)
    20da:	681b      	ldr	r3, [r3, #0]
    20dc:	2b00      	cmp	r3, #0
    20de:	d197      	bne.n	2010 <STACK_SIZE+0x10>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    20e0:	9a01      	ldr	r2, [sp, #4]
    20e2:	4909      	ldr	r1, [pc, #36]	; (2108 <STACK_SIZE+0x108>)
    20e4:	9800      	ldr	r0, [sp, #0]
    20e6:	4b07      	ldr	r3, [pc, #28]	; (2104 <STACK_SIZE+0x104>)
    20e8:	4798      	blx	r3
		xReturn = pdFALSE;
    20ea:	2000      	movs	r0, #0
	return xReturn;
    20ec:	e79b      	b.n	2026 <STACK_SIZE+0x26>
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	2000031c 	.word	0x2000031c
    20f4:	20000010 	.word	0x20000010
    20f8:	00009cf9 	.word	0x00009cf9
    20fc:	00009d07 	.word	0x00009d07
    2100:	0000a8bc 	.word	0x0000a8bc
    2104:	00009d29 	.word	0x00009d29
    2108:	0000a914 	.word	0x0000a914

0000210c <prvTraceGetQueueType>:
	return (uint32_t)uxQueueGetQueueNumber(handle);
}
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
    210c:	b510      	push	{r4, lr}
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
    210e:	4b01      	ldr	r3, [pc, #4]	; (2114 <prvTraceGetQueueType+0x8>)
    2110:	4798      	blx	r3
}
    2112:	bd10      	pop	{r4, pc}
    2114:	00004645 	.word	0x00004645

00002118 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
    2118:	b510      	push	{r4, lr}
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
    211a:	4b02      	ldr	r3, [pc, #8]	; (2124 <prvTraceGetTaskNumberLow16+0xc>)
    211c:	4798      	blx	r3
    211e:	b280      	uxth	r0, r0
}
    2120:	bd10      	pop	{r4, pc}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	00005295 	.word	0x00005295

00002128 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
    2128:	b510      	push	{r4, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
    212a:	4b02      	ldr	r3, [pc, #8]	; (2134 <prvTraceGetTaskNumberHigh16+0xc>)
    212c:	4798      	blx	r3
    212e:	0c00      	lsrs	r0, r0, #16
}
    2130:	bd10      	pop	{r4, pc}
    2132:	46c0      	nop			; (mov r8, r8)
    2134:	00005295 	.word	0x00005295

00002138 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
    2138:	b570      	push	{r4, r5, r6, lr}
    213a:	0004      	movs	r4, r0
    213c:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
    213e:	4b04      	ldr	r3, [pc, #16]	; (2150 <prvTraceSetTaskNumberLow16+0x18>)
    2140:	4798      	blx	r3
    2142:	0c01      	lsrs	r1, r0, #16
    2144:	0409      	lsls	r1, r1, #16
    2146:	4329      	orrs	r1, r5
    2148:	0020      	movs	r0, r4
    214a:	4b02      	ldr	r3, [pc, #8]	; (2154 <prvTraceSetTaskNumberLow16+0x1c>)
    214c:	4798      	blx	r3
}
    214e:	bd70      	pop	{r4, r5, r6, pc}
    2150:	00005295 	.word	0x00005295
    2154:	000052a1 	.word	0x000052a1

00002158 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
    2158:	b570      	push	{r4, r5, r6, lr}
    215a:	0004      	movs	r4, r0
    215c:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
    215e:	4b05      	ldr	r3, [pc, #20]	; (2174 <prvTraceSetTaskNumberHigh16+0x1c>)
    2160:	4798      	blx	r3
    2162:	0401      	lsls	r1, r0, #16
    2164:	0c09      	lsrs	r1, r1, #16
    2166:	042d      	lsls	r5, r5, #16
    2168:	4329      	orrs	r1, r5
    216a:	0020      	movs	r0, r4
    216c:	4b02      	ldr	r3, [pc, #8]	; (2178 <prvTraceSetTaskNumberHigh16+0x20>)
    216e:	4798      	blx	r3
}
    2170:	bd70      	pop	{r4, r5, r6, pc}
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	00005295 	.word	0x00005295
    2178:	000052a1 	.word	0x000052a1

0000217c <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
    217c:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
    217e:	4b02      	ldr	r3, [pc, #8]	; (2188 <prvTraceGetQueueNumberLow16+0xc>)
    2180:	4798      	blx	r3
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
    2182:	b280      	uxth	r0, r0
}
    2184:	bd10      	pop	{r4, pc}
    2186:	46c0      	nop			; (mov r8, r8)
    2188:	0000463d 	.word	0x0000463d

0000218c <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
    218c:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
    218e:	4b02      	ldr	r3, [pc, #8]	; (2198 <prvTraceGetQueueNumberHigh16+0xc>)
    2190:	4798      	blx	r3
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
    2192:	0c00      	lsrs	r0, r0, #16
}
    2194:	bd10      	pop	{r4, pc}
    2196:	46c0      	nop			; (mov r8, r8)
    2198:	0000463d 	.word	0x0000463d

0000219c <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
    219c:	b570      	push	{r4, r5, r6, lr}
    219e:	0004      	movs	r4, r0
    21a0:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
    21a2:	4b04      	ldr	r3, [pc, #16]	; (21b4 <prvTraceSetQueueNumberLow16+0x18>)
    21a4:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
    21a6:	0c01      	lsrs	r1, r0, #16
    21a8:	0409      	lsls	r1, r1, #16
    21aa:	4329      	orrs	r1, r5
    21ac:	0020      	movs	r0, r4
    21ae:	4b02      	ldr	r3, [pc, #8]	; (21b8 <prvTraceSetQueueNumberLow16+0x1c>)
    21b0:	4798      	blx	r3
}
    21b2:	bd70      	pop	{r4, r5, r6, pc}
    21b4:	0000463d 	.word	0x0000463d
    21b8:	00004641 	.word	0x00004641

000021bc <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
    21bc:	b570      	push	{r4, r5, r6, lr}
    21be:	0004      	movs	r4, r0
    21c0:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
    21c2:	4b05      	ldr	r3, [pc, #20]	; (21d8 <prvTraceSetQueueNumberHigh16+0x1c>)
    21c4:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
    21c6:	0401      	lsls	r1, r0, #16
    21c8:	0c09      	lsrs	r1, r1, #16
    21ca:	042d      	lsls	r5, r5, #16
    21cc:	4329      	orrs	r1, r5
    21ce:	0020      	movs	r0, r4
    21d0:	4b02      	ldr	r3, [pc, #8]	; (21dc <prvTraceSetQueueNumberHigh16+0x20>)
    21d2:	4798      	blx	r3
}
    21d4:	bd70      	pop	{r4, r5, r6, pc}
    21d6:	46c0      	nop			; (mov r8, r8)
    21d8:	0000463d 	.word	0x0000463d
    21dc:	00004641 	.word	0x00004641

000021e0 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
    21e0:	b510      	push	{r4, lr}
	return xTaskGetCurrentTaskHandle();
    21e2:	4b01      	ldr	r3, [pc, #4]	; (21e8 <prvTraceGetCurrentTaskHandle+0x8>)
    21e4:	4798      	blx	r3
}
    21e6:	bd10      	pop	{r4, pc}
    21e8:	000052a9 	.word	0x000052a9

000021ec <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
    21ec:	b510      	push	{r4, lr}
    21ee:	0004      	movs	r4, r0
	prvTraceInitTraceData();
    21f0:	4b09      	ldr	r3, [pc, #36]	; (2218 <vTraceEnable+0x2c>)
    21f2:	4798      	blx	r3

	if (startOption == TRC_START)
    21f4:	2c01      	cmp	r4, #1
    21f6:	d004      	beq.n	2202 <vTraceEnable+0x16>
	{
		vTraceStart();
	}
	else if (startOption == TRC_START_AWAIT_HOST)
    21f8:	2c02      	cmp	r4, #2
    21fa:	d005      	beq.n	2208 <vTraceEnable+0x1c>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
	}
	else if (startOption != TRC_INIT)
    21fc:	2c00      	cmp	r4, #0
    21fe:	d107      	bne.n	2210 <vTraceEnable+0x24>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
    2200:	bd10      	pop	{r4, pc}
		vTraceStart();
    2202:	4b06      	ldr	r3, [pc, #24]	; (221c <vTraceEnable+0x30>)
    2204:	4798      	blx	r3
    2206:	e7fb      	b.n	2200 <vTraceEnable+0x14>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
    2208:	4805      	ldr	r0, [pc, #20]	; (2220 <vTraceEnable+0x34>)
    220a:	4b06      	ldr	r3, [pc, #24]	; (2224 <vTraceEnable+0x38>)
    220c:	4798      	blx	r3
    220e:	e7f7      	b.n	2200 <vTraceEnable+0x14>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
    2210:	4805      	ldr	r0, [pc, #20]	; (2228 <vTraceEnable+0x3c>)
    2212:	4b04      	ldr	r3, [pc, #16]	; (2224 <vTraceEnable+0x38>)
    2214:	4798      	blx	r3
}
    2216:	e7f3      	b.n	2200 <vTraceEnable+0x14>
    2218:	00002411 	.word	0x00002411
    221c:	000031f1 	.word	0x000031f1
    2220:	0000acd0 	.word	0x0000acd0
    2224:	000025e9 	.word	0x000025e9
    2228:	0000ad10 	.word	0x0000ad10

0000222c <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
    222c:	b510      	push	{r4, lr}
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
    222e:	4b2f      	ldr	r3, [pc, #188]	; (22ec <vTraceInitObjectPropertyTable+0xc0>)
    2230:	681b      	ldr	r3, [r3, #0]
    2232:	2209      	movs	r2, #9
    2234:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
    2236:	3201      	adds	r2, #1
    2238:	2164      	movs	r1, #100	; 0x64
    223a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
    223c:	3101      	adds	r1, #1
    223e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
    2240:	3101      	adds	r1, #1
    2242:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
    2244:	3205      	adds	r2, #5
    2246:	3101      	adds	r1, #1
    2248:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
    224a:	3962      	subs	r1, #98	; 0x62
    224c:	2068      	movs	r0, #104	; 0x68
    224e:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
    2250:	3001      	adds	r0, #1
    2252:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
    2254:	3001      	adds	r0, #1
    2256:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
    2258:	3001      	adds	r0, #1
    225a:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
    225c:	3001      	adds	r0, #1
    225e:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
    2260:	316b      	adds	r1, #107	; 0x6b
    2262:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
    2264:	3101      	adds	r1, #1
    2266:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
    2268:	3101      	adds	r1, #1
    226a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
    226c:	3101      	adds	r1, #1
    226e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
    2270:	3101      	adds	r1, #1
    2272:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
    2274:	3101      	adds	r1, #1
    2276:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
    2278:	3101      	adds	r1, #1
    227a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
    227c:	3101      	adds	r1, #1
    227e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
    2280:	3101      	adds	r1, #1
    2282:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
    2284:	3968      	subs	r1, #104	; 0x68
    2286:	326d      	adds	r2, #109	; 0x6d
    2288:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
    228a:	3201      	adds	r2, #1
    228c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
    228e:	3201      	adds	r2, #1
    2290:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
    2292:	3a6b      	subs	r2, #107	; 0x6b
    2294:	3013      	adds	r0, #19
    2296:	541a      	strb	r2, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
    2298:	2411      	movs	r4, #17
    229a:	3001      	adds	r0, #1
    229c:	541c      	strb	r4, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
    229e:	3001      	adds	r0, #1
    22a0:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
    22a2:	3172      	adds	r1, #114	; 0x72
    22a4:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
    22a6:	3101      	adds	r1, #1
    22a8:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
    22aa:	3101      	adds	r1, #1
    22ac:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
    22ae:	2100      	movs	r1, #0
    22b0:	3275      	adds	r2, #117	; 0x75
    22b2:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
    22b4:	31a0      	adds	r1, #160	; 0xa0
    22b6:	3202      	adds	r2, #2
    22b8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
    22ba:	31a0      	adds	r1, #160	; 0xa0
    22bc:	3202      	adds	r2, #2
    22be:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
    22c0:	31a0      	adds	r1, #160	; 0xa0
    22c2:	3202      	adds	r2, #2
    22c4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
    22c6:	490a      	ldr	r1, [pc, #40]	; (22f0 <vTraceInitObjectPropertyTable+0xc4>)
    22c8:	3202      	adds	r2, #2
    22ca:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
    22cc:	4909      	ldr	r1, [pc, #36]	; (22f4 <vTraceInitObjectPropertyTable+0xc8>)
    22ce:	3202      	adds	r2, #2
    22d0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
    22d2:	4909      	ldr	r1, [pc, #36]	; (22f8 <vTraceInitObjectPropertyTable+0xcc>)
    22d4:	3202      	adds	r2, #2
    22d6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
    22d8:	4908      	ldr	r1, [pc, #32]	; (22fc <vTraceInitObjectPropertyTable+0xd0>)
    22da:	3202      	adds	r2, #2
    22dc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
    22de:	315f      	adds	r1, #95	; 0x5f
    22e0:	3202      	adds	r2, #2
    22e2:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
    22e4:	4a06      	ldr	r2, [pc, #24]	; (2300 <vTraceInitObjectPropertyTable+0xd4>)
    22e6:	661a      	str	r2, [r3, #96]	; 0x60
}
    22e8:	bd10      	pop	{r4, pc}
    22ea:	46c0      	nop			; (mov r8, r8)
    22ec:	20000324 	.word	0x20000324
    22f0:	000002fd 	.word	0x000002fd
    22f4:	00000352 	.word	0x00000352
    22f8:	000003a2 	.word	0x000003a2
    22fc:	00000401 	.word	0x00000401
    2300:	000004bf 	.word	0x000004bf

00002304 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
    2304:	4b17      	ldr	r3, [pc, #92]	; (2364 <vTraceInitObjectHandleStack+0x60>)
    2306:	2200      	movs	r2, #0
    2308:	825a      	strh	r2, [r3, #18]
    230a:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
    230c:	320a      	adds	r2, #10
    230e:	829a      	strh	r2, [r3, #20]
    2310:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
    2312:	320a      	adds	r2, #10
    2314:	82da      	strh	r2, [r3, #22]
    2316:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
    2318:	320a      	adds	r2, #10
    231a:	831a      	strh	r2, [r3, #24]
    231c:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
    231e:	320f      	adds	r2, #15
    2320:	835a      	strh	r2, [r3, #26]
    2322:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
    2324:	3205      	adds	r2, #5
    2326:	839a      	strh	r2, [r3, #28]
    2328:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
    232a:	3205      	adds	r2, #5
    232c:	83da      	strh	r2, [r3, #30]
    232e:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
    2330:	3205      	adds	r2, #5
    2332:	841a      	strh	r2, [r3, #32]
    2334:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
    2336:	3205      	adds	r2, #5
    2338:	845a      	strh	r2, [r3, #34]	; 0x22
    233a:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
    233c:	3a38      	subs	r2, #56	; 0x38
    233e:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
    2340:	320a      	adds	r2, #10
    2342:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
    2344:	320a      	adds	r2, #10
    2346:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
    2348:	320f      	adds	r2, #15
    234a:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
    234c:	3205      	adds	r2, #5
    234e:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
    2350:	3205      	adds	r2, #5
    2352:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
    2354:	3205      	adds	r2, #5
    2356:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
    2358:	3205      	adds	r2, #5
    235a:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
    235c:	3205      	adds	r2, #5
    235e:	869a      	strh	r2, [r3, #52]	; 0x34
}
    2360:	4770      	bx	lr
    2362:	46c0      	nop			; (mov r8, r8)
    2364:	20000340 	.word	0x20000340

00002368 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
	switch(objectclass)
    2368:	2808      	cmp	r0, #8
    236a:	d813      	bhi.n	2394 <pszTraceGetErrorNotEnoughHandles+0x2c>
    236c:	0080      	lsls	r0, r0, #2
    236e:	4b0b      	ldr	r3, [pc, #44]	; (239c <pszTraceGetErrorNotEnoughHandles+0x34>)
    2370:	581b      	ldr	r3, [r3, r0]
    2372:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
    2374:	480a      	ldr	r0, [pc, #40]	; (23a0 <pszTraceGetErrorNotEnoughHandles+0x38>)
    2376:	e010      	b.n	239a <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
    2378:	480a      	ldr	r0, [pc, #40]	; (23a4 <pszTraceGetErrorNotEnoughHandles+0x3c>)
    237a:	e00e      	b.n	239a <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
    237c:	480a      	ldr	r0, [pc, #40]	; (23a8 <pszTraceGetErrorNotEnoughHandles+0x40>)
    237e:	e00c      	b.n	239a <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
    2380:	480a      	ldr	r0, [pc, #40]	; (23ac <pszTraceGetErrorNotEnoughHandles+0x44>)
    2382:	e00a      	b.n	239a <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
    2384:	480a      	ldr	r0, [pc, #40]	; (23b0 <pszTraceGetErrorNotEnoughHandles+0x48>)
    2386:	e008      	b.n	239a <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
    2388:	480a      	ldr	r0, [pc, #40]	; (23b4 <pszTraceGetErrorNotEnoughHandles+0x4c>)
    238a:	e006      	b.n	239a <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
    238c:	480a      	ldr	r0, [pc, #40]	; (23b8 <pszTraceGetErrorNotEnoughHandles+0x50>)
    238e:	e004      	b.n	239a <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
    2390:	480a      	ldr	r0, [pc, #40]	; (23bc <pszTraceGetErrorNotEnoughHandles+0x54>)
    2392:	e002      	b.n	239a <pszTraceGetErrorNotEnoughHandles+0x32>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
    2394:	480a      	ldr	r0, [pc, #40]	; (23c0 <pszTraceGetErrorNotEnoughHandles+0x58>)
    2396:	e000      	b.n	239a <pszTraceGetErrorNotEnoughHandles+0x32>
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
    2398:	480a      	ldr	r0, [pc, #40]	; (23c4 <pszTraceGetErrorNotEnoughHandles+0x5c>)
	}
}
    239a:	4770      	bx	lr
    239c:	0000a9ac 	.word	0x0000a9ac
    23a0:	0000aa18 	.word	0x0000aa18
    23a4:	0000aa60 	.word	0x0000aa60
    23a8:	0000aab4 	.word	0x0000aab4
    23ac:	0000ab00 	.word	0x0000ab00
    23b0:	0000ab4c 	.word	0x0000ab4c
    23b4:	0000ab98 	.word	0x0000ab98
    23b8:	0000abec 	.word	0x0000abec
    23bc:	0000ac44 	.word	0x0000ac44
    23c0:	0000aca0 	.word	0x0000aca0
    23c4:	0000a9d0 	.word	0x0000a9d0

000023c8 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
    23c8:	b510      	push	{r4, lr}
	uint32_t i;
	for (i = 0; i < maxLength; i++)
    23ca:	2a00      	cmp	r2, #0
    23cc:	d00d      	beq.n	23ea <prvStrncpy+0x22>
	{
		dst[i] = src[i];
    23ce:	780b      	ldrb	r3, [r1, #0]
    23d0:	7003      	strb	r3, [r0, #0]
		if (src[i] == 0)
    23d2:	780b      	ldrb	r3, [r1, #0]
    23d4:	2b00      	cmp	r3, #0
    23d6:	d008      	beq.n	23ea <prvStrncpy+0x22>
    23d8:	2300      	movs	r3, #0
	for (i = 0; i < maxLength; i++)
    23da:	3301      	adds	r3, #1
    23dc:	429a      	cmp	r2, r3
    23de:	d004      	beq.n	23ea <prvStrncpy+0x22>
		dst[i] = src[i];
    23e0:	5ccc      	ldrb	r4, [r1, r3]
    23e2:	54c4      	strb	r4, [r0, r3]
		if (src[i] == 0)
    23e4:	5ccc      	ldrb	r4, [r1, r3]
    23e6:	2c00      	cmp	r4, #0
    23e8:	d1f7      	bne.n	23da <prvStrncpy+0x12>
			break;
	}
}
    23ea:	bd10      	pop	{r4, pc}

000023ec <vTraceStop>:
{
    23ec:	b510      	push	{r4, lr}
	if (RecorderDataPtr != NULL)
    23ee:	4b06      	ldr	r3, [pc, #24]	; (2408 <vTraceStop+0x1c>)
    23f0:	681b      	ldr	r3, [r3, #0]
    23f2:	2b00      	cmp	r3, #0
    23f4:	d001      	beq.n	23fa <vTraceStop+0xe>
		RecorderDataPtr->recorderActive = 0;
    23f6:	2200      	movs	r2, #0
    23f8:	631a      	str	r2, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
    23fa:	4b04      	ldr	r3, [pc, #16]	; (240c <vTraceStop+0x20>)
    23fc:	681b      	ldr	r3, [r3, #0]
    23fe:	2b00      	cmp	r3, #0
    2400:	d000      	beq.n	2404 <vTraceStop+0x18>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
    2402:	4798      	blx	r3
}
    2404:	bd10      	pop	{r4, pc}
    2406:	46c0      	nop			; (mov r8, r8)
    2408:	20000324 	.word	0x20000324
    240c:	200003ec 	.word	0x200003ec

00002410 <prvTraceInitTraceData>:
{	
    2410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2412:	46de      	mov	lr, fp
    2414:	4657      	mov	r7, sl
    2416:	464e      	mov	r6, r9
    2418:	4645      	mov	r5, r8
    241a:	b5e0      	push	{r5, r6, r7, lr}
	if (RecorderDataPtr == NULL)
    241c:	4b51      	ldr	r3, [pc, #324]	; (2564 <prvTraceInitTraceData+0x154>)
    241e:	681b      	ldr	r3, [r3, #0]
    2420:	2b00      	cmp	r3, #0
    2422:	d100      	bne.n	2426 <prvTraceInitTraceData+0x16>
    2424:	e099      	b.n	255a <prvTraceInitTraceData+0x14a>
		if (RecorderDataPtr->startmarker0 == 1)
    2426:	781b      	ldrb	r3, [r3, #0]
    2428:	2b01      	cmp	r3, #1
    242a:	d100      	bne.n	242e <prvTraceInitTraceData+0x1e>
    242c:	e08f      	b.n	254e <prvTraceInitTraceData+0x13e>
	init_hwtc_count = TRC_HWTC_COUNT;
    242e:	4b4e      	ldr	r3, [pc, #312]	; (2568 <prvTraceInitTraceData+0x158>)
    2430:	681a      	ldr	r2, [r3, #0]
    2432:	4b4e      	ldr	r3, [pc, #312]	; (256c <prvTraceInitTraceData+0x15c>)
    2434:	601a      	str	r2, [r3, #0]
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
    2436:	4c4b      	ldr	r4, [pc, #300]	; (2564 <prvTraceInitTraceData+0x154>)
    2438:	4d4d      	ldr	r5, [pc, #308]	; (2570 <prvTraceInitTraceData+0x160>)
    243a:	002a      	movs	r2, r5
    243c:	2100      	movs	r1, #0
    243e:	6820      	ldr	r0, [r4, #0]
    2440:	4b4c      	ldr	r3, [pc, #304]	; (2574 <prvTraceInitTraceData+0x164>)
    2442:	4798      	blx	r3
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
    2444:	6823      	ldr	r3, [r4, #0]
    2446:	4a4c      	ldr	r2, [pc, #304]	; (2578 <prvTraceInitTraceData+0x168>)
    2448:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
    244a:	2205      	movs	r2, #5
    244c:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
    244e:	2200      	movs	r2, #0
    2450:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
    2452:	611d      	str	r5, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
    2454:	21c8      	movs	r1, #200	; 0xc8
    2456:	0049      	lsls	r1, r1, #1
    2458:	6199      	str	r1, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
    245a:	4948      	ldr	r1, [pc, #288]	; (257c <prvTraceInitTraceData+0x16c>)
    245c:	6559      	str	r1, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
    245e:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
    2460:	635a      	str	r2, [r3, #52]	; 0x34
	vTraceInitObjectPropertyTable();
    2462:	4b47      	ldr	r3, [pc, #284]	; (2580 <prvTraceInitTraceData+0x170>)
    2464:	4798      	blx	r3
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
    2466:	6820      	ldr	r0, [r4, #0]
    2468:	4a46      	ldr	r2, [pc, #280]	; (2584 <prvTraceInitTraceData+0x174>)
    246a:	4b47      	ldr	r3, [pc, #284]	; (2588 <prvTraceInitTraceData+0x178>)
    246c:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
    246e:	22c8      	movs	r2, #200	; 0xc8
    2470:	0092      	lsls	r2, r2, #2
    2472:	3304      	adds	r3, #4
    2474:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
    2476:	4b45      	ldr	r3, [pc, #276]	; (258c <prvTraceInitTraceData+0x17c>)
    2478:	2201      	movs	r2, #1
    247a:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
    247c:	4a44      	ldr	r2, [pc, #272]	; (2590 <prvTraceInitTraceData+0x180>)
    247e:	2391      	movs	r3, #145	; 0x91
    2480:	011b      	lsls	r3, r3, #4
    2482:	50c2      	str	r2, [r0, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
    2484:	4b43      	ldr	r3, [pc, #268]	; (2594 <prvTraceInitTraceData+0x184>)
    2486:	469c      	mov	ip, r3
    2488:	4460      	add	r0, ip
    248a:	2250      	movs	r2, #80	; 0x50
    248c:	4942      	ldr	r1, [pc, #264]	; (2598 <prvTraceInitTraceData+0x188>)
    248e:	4b43      	ldr	r3, [pc, #268]	; (259c <prvTraceInitTraceData+0x18c>)
    2490:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
    2492:	6823      	ldr	r3, [r4, #0]
    2494:	4942      	ldr	r1, [pc, #264]	; (25a0 <prvTraceInitTraceData+0x190>)
    2496:	4a43      	ldr	r2, [pc, #268]	; (25a4 <prvTraceInitTraceData+0x194>)
    2498:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
    249a:	210a      	movs	r1, #10
    249c:	4a42      	ldr	r2, [pc, #264]	; (25a8 <prvTraceInitTraceData+0x198>)
    249e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
    24a0:	3101      	adds	r1, #1
    24a2:	4a42      	ldr	r2, [pc, #264]	; (25ac <prvTraceInitTraceData+0x19c>)
    24a4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
    24a6:	3101      	adds	r1, #1
    24a8:	4a41      	ldr	r2, [pc, #260]	; (25b0 <prvTraceInitTraceData+0x1a0>)
    24aa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
    24ac:	3101      	adds	r1, #1
    24ae:	4a41      	ldr	r2, [pc, #260]	; (25b4 <prvTraceInitTraceData+0x1a4>)
    24b0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
    24b2:	3201      	adds	r2, #1
    24b4:	3164      	adds	r1, #100	; 0x64
    24b6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
    24b8:	2572      	movs	r5, #114	; 0x72
    24ba:	4a3f      	ldr	r2, [pc, #252]	; (25b8 <prvTraceInitTraceData+0x1a8>)
    24bc:	549d      	strb	r5, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
    24be:	2673      	movs	r6, #115	; 0x73
    24c0:	4a3e      	ldr	r2, [pc, #248]	; (25bc <prvTraceInitTraceData+0x1ac>)
    24c2:	549e      	strb	r6, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
    24c4:	2774      	movs	r7, #116	; 0x74
    24c6:	4a3e      	ldr	r2, [pc, #248]	; (25c0 <prvTraceInitTraceData+0x1b0>)
    24c8:	549f      	strb	r7, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
    24ca:	22f1      	movs	r2, #241	; 0xf1
    24cc:	4690      	mov	r8, r2
    24ce:	4a3d      	ldr	r2, [pc, #244]	; (25c4 <prvTraceInitTraceData+0x1b4>)
    24d0:	4641      	mov	r1, r8
    24d2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
    24d4:	22f2      	movs	r2, #242	; 0xf2
    24d6:	4691      	mov	r9, r2
    24d8:	4a3b      	ldr	r2, [pc, #236]	; (25c8 <prvTraceInitTraceData+0x1b8>)
    24da:	4649      	mov	r1, r9
    24dc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
    24de:	22f3      	movs	r2, #243	; 0xf3
    24e0:	4692      	mov	sl, r2
    24e2:	4a3a      	ldr	r2, [pc, #232]	; (25cc <prvTraceInitTraceData+0x1bc>)
    24e4:	4651      	mov	r1, sl
    24e6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
    24e8:	22f4      	movs	r2, #244	; 0xf4
    24ea:	4693      	mov	fp, r2
    24ec:	4a38      	ldr	r2, [pc, #224]	; (25d0 <prvTraceInitTraceData+0x1c0>)
    24ee:	4659      	mov	r1, fp
    24f0:	5499      	strb	r1, [r3, r2]
	vTraceInitObjectHandleStack();
    24f2:	4b38      	ldr	r3, [pc, #224]	; (25d4 <prvTraceInitTraceData+0x1c4>)
    24f4:	4798      	blx	r3
	RecorderDataPtr->startmarker11 = 0xF4;
    24f6:	6823      	ldr	r3, [r4, #0]
    24f8:	465a      	mov	r2, fp
    24fa:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
    24fc:	4652      	mov	r2, sl
    24fe:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
    2500:	464a      	mov	r2, r9
    2502:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
    2504:	4642      	mov	r2, r8
    2506:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
    2508:	71df      	strb	r7, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
    250a:	719e      	strb	r6, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
    250c:	715d      	strb	r5, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
    250e:	2271      	movs	r2, #113	; 0x71
    2510:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
    2512:	2204      	movs	r2, #4
    2514:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
    2516:	2303      	movs	r3, #3
    2518:	6822      	ldr	r2, [r4, #0]
    251a:	7093      	strb	r3, [r2, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
    251c:	3b01      	subs	r3, #1
    251e:	6822      	ldr	r2, [r4, #0]
    2520:	7053      	strb	r3, [r2, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
    2522:	6823      	ldr	r3, [r4, #0]
    2524:	2201      	movs	r2, #1
    2526:	701a      	strb	r2, [r3, #0]
	if (traceErrorMessage != NULL)
    2528:	4b2b      	ldr	r3, [pc, #172]	; (25d8 <prvTraceInitTraceData+0x1c8>)
    252a:	6819      	ldr	r1, [r3, #0]
    252c:	2900      	cmp	r1, #0
    252e:	d00e      	beq.n	254e <prvTraceInitTraceData+0x13e>
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    2530:	4c0c      	ldr	r4, [pc, #48]	; (2564 <prvTraceInitTraceData+0x154>)
    2532:	6823      	ldr	r3, [r4, #0]
    2534:	4a17      	ldr	r2, [pc, #92]	; (2594 <prvTraceInitTraceData+0x184>)
    2536:	4694      	mov	ip, r2
    2538:	4463      	add	r3, ip
    253a:	0018      	movs	r0, r3
    253c:	2250      	movs	r2, #80	; 0x50
    253e:	4b17      	ldr	r3, [pc, #92]	; (259c <prvTraceInitTraceData+0x18c>)
    2540:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
    2542:	6822      	ldr	r2, [r4, #0]
    2544:	2101      	movs	r1, #1
    2546:	4b25      	ldr	r3, [pc, #148]	; (25dc <prvTraceInitTraceData+0x1cc>)
    2548:	50d1      	str	r1, [r2, r3]
		vTraceStop();
    254a:	4b25      	ldr	r3, [pc, #148]	; (25e0 <prvTraceInitTraceData+0x1d0>)
    254c:	4798      	blx	r3
}
    254e:	bc3c      	pop	{r2, r3, r4, r5}
    2550:	4690      	mov	r8, r2
    2552:	4699      	mov	r9, r3
    2554:	46a2      	mov	sl, r4
    2556:	46ab      	mov	fp, r5
    2558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	RecorderDataPtr = &RecorderData;
    255a:	4a22      	ldr	r2, [pc, #136]	; (25e4 <prvTraceInitTraceData+0x1d4>)
    255c:	4b01      	ldr	r3, [pc, #4]	; (2564 <prvTraceInitTraceData+0x154>)
    255e:	601a      	str	r2, [r3, #0]
    2560:	e765      	b.n	242e <prvTraceInitTraceData+0x1e>
    2562:	46c0      	nop			; (mov r8, r8)
    2564:	20000324 	.word	0x20000324
    2568:	e000e018 	.word	0xe000e018
    256c:	2000490c 	.word	0x2000490c
    2570:	00000fb8 	.word	0x00000fb8
    2574:	00009a8f 	.word	0x00009a8f
    2578:	00001aa1 	.word	0x00001aa1
    257c:	f0f0f0f0 	.word	0xf0f0f0f0
    2580:	0000222d 	.word	0x0000222d
    2584:	f1f1f1f1 	.word	0xf1f1f1f1
    2588:	0000055c 	.word	0x0000055c
    258c:	00000564 	.word	0x00000564
    2590:	f2f2f2f2 	.word	0xf2f2f2f2
    2594:	00000914 	.word	0x00000914
    2598:	0000af10 	.word	0x0000af10
    259c:	000023c9 	.word	0x000023c9
    25a0:	f3f3f3f3 	.word	0xf3f3f3f3
    25a4:	00000964 	.word	0x00000964
    25a8:	00000fac 	.word	0x00000fac
    25ac:	00000fad 	.word	0x00000fad
    25b0:	00000fae 	.word	0x00000fae
    25b4:	00000faf 	.word	0x00000faf
    25b8:	00000fb1 	.word	0x00000fb1
    25bc:	00000fb2 	.word	0x00000fb2
    25c0:	00000fb3 	.word	0x00000fb3
    25c4:	00000fb4 	.word	0x00000fb4
    25c8:	00000fb5 	.word	0x00000fb5
    25cc:	00000fb6 	.word	0x00000fb6
    25d0:	00000fb7 	.word	0x00000fb7
    25d4:	00002305 	.word	0x00002305
    25d8:	200003dc 	.word	0x200003dc
    25dc:	0000090c 	.word	0x0000090c
    25e0:	000023ed 	.word	0x000023ed
    25e4:	20003954 	.word	0x20003954

000025e8 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
    25e8:	b510      	push	{r4, lr}
    25ea:	0004      	movs	r4, r0
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
    25ec:	4b0e      	ldr	r3, [pc, #56]	; (2628 <prvTraceError+0x40>)
    25ee:	681b      	ldr	r3, [r3, #0]
    25f0:	2b00      	cmp	r3, #0
    25f2:	d001      	beq.n	25f8 <prvTraceError+0x10>
	{
		vTraceStop();
    25f4:	4b0d      	ldr	r3, [pc, #52]	; (262c <prvTraceError+0x44>)
    25f6:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
    25f8:	4b0d      	ldr	r3, [pc, #52]	; (2630 <prvTraceError+0x48>)
    25fa:	681b      	ldr	r3, [r3, #0]
    25fc:	2b00      	cmp	r3, #0
    25fe:	d000      	beq.n	2602 <prvTraceError+0x1a>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
			RecorderDataPtr->internalErrorOccured = 1;
		}
	}
}
    2600:	bd10      	pop	{r4, pc}
		traceErrorMessage = (char*)(intptr_t) msg;
    2602:	4b0b      	ldr	r3, [pc, #44]	; (2630 <prvTraceError+0x48>)
    2604:	601c      	str	r4, [r3, #0]
		if (RecorderDataPtr != NULL)
    2606:	4b08      	ldr	r3, [pc, #32]	; (2628 <prvTraceError+0x40>)
    2608:	6818      	ldr	r0, [r3, #0]
    260a:	2800      	cmp	r0, #0
    260c:	d0f8      	beq.n	2600 <prvTraceError+0x18>
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    260e:	4b09      	ldr	r3, [pc, #36]	; (2634 <prvTraceError+0x4c>)
    2610:	469c      	mov	ip, r3
    2612:	4460      	add	r0, ip
    2614:	2250      	movs	r2, #80	; 0x50
    2616:	0021      	movs	r1, r4
    2618:	4b07      	ldr	r3, [pc, #28]	; (2638 <prvTraceError+0x50>)
    261a:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
    261c:	4b02      	ldr	r3, [pc, #8]	; (2628 <prvTraceError+0x40>)
    261e:	681a      	ldr	r2, [r3, #0]
    2620:	2101      	movs	r1, #1
    2622:	4b06      	ldr	r3, [pc, #24]	; (263c <prvTraceError+0x54>)
    2624:	50d1      	str	r1, [r2, r3]
}
    2626:	e7eb      	b.n	2600 <prvTraceError+0x18>
    2628:	20000324 	.word	0x20000324
    262c:	000023ed 	.word	0x000023ed
    2630:	200003dc 	.word	0x200003dc
    2634:	00000914 	.word	0x00000914
    2638:	000023c9 	.word	0x000023c9
    263c:	0000090c 	.word	0x0000090c

00002640 <prvTraceNextFreeEventBufferSlot>:
{
    2640:	b510      	push	{r4, lr}
	if (! RecorderDataPtr->recorderActive)
    2642:	4b0b      	ldr	r3, [pc, #44]	; (2670 <prvTraceNextFreeEventBufferSlot+0x30>)
    2644:	6818      	ldr	r0, [r3, #0]
    2646:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2648:	2b00      	cmp	r3, #0
    264a:	d00f      	beq.n	266c <prvTraceNextFreeEventBufferSlot+0x2c>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    264c:	69c3      	ldr	r3, [r0, #28]
    264e:	2290      	movs	r2, #144	; 0x90
    2650:	32ff      	adds	r2, #255	; 0xff
    2652:	4293      	cmp	r3, r2
    2654:	d805      	bhi.n	2662 <prvTraceNextFreeEventBufferSlot+0x22>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
    2656:	009b      	lsls	r3, r3, #2
    2658:	4a06      	ldr	r2, [pc, #24]	; (2674 <prvTraceNextFreeEventBufferSlot+0x34>)
    265a:	4694      	mov	ip, r2
    265c:	4463      	add	r3, ip
    265e:	18c0      	adds	r0, r0, r3
}
    2660:	bd10      	pop	{r4, pc}
		prvTraceError("Attempt to index outside event buffer!");
    2662:	4805      	ldr	r0, [pc, #20]	; (2678 <prvTraceNextFreeEventBufferSlot+0x38>)
    2664:	4b05      	ldr	r3, [pc, #20]	; (267c <prvTraceNextFreeEventBufferSlot+0x3c>)
    2666:	4798      	blx	r3
		return NULL;
    2668:	2000      	movs	r0, #0
    266a:	e7f9      	b.n	2660 <prvTraceNextFreeEventBufferSlot+0x20>
		return NULL;
    266c:	2000      	movs	r0, #0
    266e:	e7f7      	b.n	2660 <prvTraceNextFreeEventBufferSlot+0x20>
    2670:	20000324 	.word	0x20000324
    2674:	00000968 	.word	0x00000968
    2678:	0000af24 	.word	0x0000af24
    267c:	000025e9 	.word	0x000025e9

00002680 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
    2680:	b5f0      	push	{r4, r5, r6, r7, lr}
    2682:	46c6      	mov	lr, r8
    2684:	b500      	push	{lr}
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    2686:	2800      	cmp	r0, #0
    2688:	d006      	beq.n	2698 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x18>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
    268a:	0007      	movs	r7, r0
    268c:	2500      	movs	r5, #0
    268e:	2800      	cmp	r0, #0
    2690:	d005      	beq.n	269e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
    2692:	4b23      	ldr	r3, [pc, #140]	; (2720 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa0>)
    2694:	4698      	mov	r8, r3
    2696:	e00a      	b.n	26ae <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x2e>
	TRACE_ASSERT(nofEntriesToCheck != 0, 
    2698:	4822      	ldr	r0, [pc, #136]	; (2724 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa4>)
    269a:	4b23      	ldr	r3, [pc, #140]	; (2728 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa8>)
    269c:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
    269e:	bc04      	pop	{r2}
    26a0:	4690      	mov	r8, r2
    26a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
    26a4:	2a01      	cmp	r2, #1
    26a6:	d020      	beq.n	26ea <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x6a>
		i++;
    26a8:	3501      	adds	r5, #1
	while (i < nofEntriesToCheck)
    26aa:	42bd      	cmp	r5, r7
    26ac:	d2f7      	bcs.n	269e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
		e = RecorderDataPtr->nextFreeIndex + i;
    26ae:	4643      	mov	r3, r8
    26b0:	681c      	ldr	r4, [r3, #0]
    26b2:	69e3      	ldr	r3, [r4, #28]
    26b4:	18eb      	adds	r3, r5, r3
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    26b6:	009e      	lsls	r6, r3, #2
    26b8:	19a2      	adds	r2, r4, r6
    26ba:	491c      	ldr	r1, [pc, #112]	; (272c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    26bc:	468c      	mov	ip, r1
    26be:	4462      	add	r2, ip
    26c0:	7812      	ldrb	r2, [r2, #0]
    26c2:	0011      	movs	r1, r2
    26c4:	3167      	adds	r1, #103	; 0x67
    26c6:	b2c9      	uxtb	r1, r1
    26c8:	290e      	cmp	r1, #14
    26ca:	d8eb      	bhi.n	26a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x24>
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
    26cc:	3268      	adds	r2, #104	; 0x68
    26ce:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
    26d0:	18d3      	adds	r3, r2, r3
    26d2:	69a1      	ldr	r1, [r4, #24]
    26d4:	428b      	cmp	r3, r1
    26d6:	d2e7      	bcs.n	26a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
    26d8:	3201      	adds	r2, #1
    26da:	0092      	lsls	r2, r2, #2
    26dc:	4663      	mov	r3, ip
    26de:	18f0      	adds	r0, r6, r3
    26e0:	1820      	adds	r0, r4, r0
    26e2:	2100      	movs	r1, #0
    26e4:	4b12      	ldr	r3, [pc, #72]	; (2730 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    26e6:	4798      	blx	r3
    26e8:	e7de      	b.n	26a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
			if ((e + 1) < RecorderDataPtr->maxEvents)
    26ea:	3301      	adds	r3, #1
    26ec:	69a2      	ldr	r2, [r4, #24]
    26ee:	4293      	cmp	r3, r2
    26f0:	d207      	bcs.n	2702 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x82>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
    26f2:	4b0e      	ldr	r3, [pc, #56]	; (272c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    26f4:	18f0      	adds	r0, r6, r3
    26f6:	1820      	adds	r0, r4, r0
    26f8:	2208      	movs	r2, #8
    26fa:	2100      	movs	r1, #0
    26fc:	4b0c      	ldr	r3, [pc, #48]	; (2730 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    26fe:	4798      	blx	r3
    2700:	e7d2      	b.n	26a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
    2702:	4b0a      	ldr	r3, [pc, #40]	; (272c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    2704:	18e0      	adds	r0, r4, r3
    2706:	2204      	movs	r2, #4
    2708:	2100      	movs	r1, #0
    270a:	4b09      	ldr	r3, [pc, #36]	; (2730 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    270c:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
    270e:	4b07      	ldr	r3, [pc, #28]	; (272c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    2710:	18f0      	adds	r0, r6, r3
    2712:	1820      	adds	r0, r4, r0
    2714:	2204      	movs	r2, #4
    2716:	2100      	movs	r1, #0
    2718:	4b05      	ldr	r3, [pc, #20]	; (2730 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    271a:	4798      	blx	r3
    271c:	e7c4      	b.n	26a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
    271e:	46c0      	nop			; (mov r8, r8)
    2720:	20000324 	.word	0x20000324
    2724:	0000ad44 	.word	0x0000ad44
    2728:	000025e9 	.word	0x000025e9
    272c:	00000968 	.word	0x00000968
    2730:	00009a8f 	.word	0x00009a8f

00002734 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
    2734:	b510      	push	{r4, lr}
	if (RecorderDataPtr->recorderActive == 0)
    2736:	4b0b      	ldr	r3, [pc, #44]	; (2764 <prvTraceUpdateCounters+0x30>)
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    273c:	2a00      	cmp	r2, #0
    273e:	d010      	beq.n	2762 <prvTraceUpdateCounters+0x2e>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
    2740:	695a      	ldr	r2, [r3, #20]
    2742:	3201      	adds	r2, #1
    2744:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
    2746:	69da      	ldr	r2, [r3, #28]
    2748:	3201      	adds	r2, #1
    274a:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    274c:	2190      	movs	r1, #144	; 0x90
    274e:	31ff      	adds	r1, #255	; 0xff
    2750:	428a      	cmp	r2, r1
    2752:	d903      	bls.n	275c <prvTraceUpdateCounters+0x28>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
    2754:	2201      	movs	r2, #1
    2756:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
    2758:	2200      	movs	r2, #0
    275a:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    275c:	2001      	movs	r0, #1
    275e:	4b02      	ldr	r3, [pc, #8]	; (2768 <prvTraceUpdateCounters+0x34>)
    2760:	4798      	blx	r3
#endif
}
    2762:	bd10      	pop	{r4, pc}
    2764:	20000324 	.word	0x20000324
    2768:	00002681 	.word	0x00002681

0000276c <prvTraceGetParam>:
{
    276c:	b570      	push	{r4, r5, r6, lr}
    276e:	0004      	movs	r4, r0
    2770:	000d      	movs	r5, r1
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    2772:	28ff      	cmp	r0, #255	; 0xff
    2774:	d002      	beq.n	277c <prvTraceGetParam+0x10>
    2776:	4b0d      	ldr	r3, [pc, #52]	; (27ac <prvTraceGetParam+0x40>)
    2778:	4298      	cmp	r0, r3
    277a:	d103      	bne.n	2784 <prvTraceGetParam+0x18>
	if (param <= param_max)
    277c:	42ac      	cmp	r4, r5
    277e:	d305      	bcc.n	278c <prvTraceGetParam+0x20>
}
    2780:	0028      	movs	r0, r5
    2782:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    2784:	480a      	ldr	r0, [pc, #40]	; (27b0 <prvTraceGetParam+0x44>)
    2786:	4b0b      	ldr	r3, [pc, #44]	; (27b4 <prvTraceGetParam+0x48>)
    2788:	4798      	blx	r3
    278a:	e7f9      	b.n	2780 <prvTraceGetParam+0x14>
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
    278c:	4b0a      	ldr	r3, [pc, #40]	; (27b8 <prvTraceGetParam+0x4c>)
    278e:	4798      	blx	r3
		if (xps != NULL)
    2790:	2800      	cmp	r0, #0
    2792:	d009      	beq.n	27a8 <prvTraceGetParam+0x3c>
			xps->type = DIV_XPS;
    2794:	2301      	movs	r3, #1
    2796:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
    2798:	002b      	movs	r3, r5
    279a:	43a3      	bics	r3, r4
    279c:	0a1a      	lsrs	r2, r3, #8
    279e:	7042      	strb	r2, [r0, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
    27a0:	0c1b      	lsrs	r3, r3, #16
    27a2:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
    27a4:	4b05      	ldr	r3, [pc, #20]	; (27bc <prvTraceGetParam+0x50>)
    27a6:	4798      	blx	r3
		return param & param_max;
    27a8:	4025      	ands	r5, r4
    27aa:	e7e9      	b.n	2780 <prvTraceGetParam+0x14>
    27ac:	0000ffff 	.word	0x0000ffff
    27b0:	0000ae48 	.word	0x0000ae48
    27b4:	000025e9 	.word	0x000025e9
    27b8:	00002641 	.word	0x00002641
    27bc:	00002735 	.word	0x00002735

000027c0 <uiIndexOfObject>:
{
    27c0:	b510      	push	{r4, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    27c2:	2908      	cmp	r1, #8
    27c4:	d814      	bhi.n	27f0 <uiIndexOfObject+0x30>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    27c6:	2800      	cmp	r0, #0
    27c8:	d017      	beq.n	27fa <uiIndexOfObject+0x3a>
    27ca:	4b0e      	ldr	r3, [pc, #56]	; (2804 <uiIndexOfObject+0x44>)
    27cc:	681a      	ldr	r2, [r3, #0]
    27ce:	1853      	adds	r3, r2, r1
    27d0:	3364      	adds	r3, #100	; 0x64
    27d2:	781b      	ldrb	r3, [r3, #0]
    27d4:	4283      	cmp	r3, r0
    27d6:	d310      	bcc.n	27fa <uiIndexOfObject+0x3a>
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    27d8:	1853      	adds	r3, r2, r1
    27da:	337c      	adds	r3, #124	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    27dc:	781b      	ldrb	r3, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    27de:	3801      	subs	r0, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    27e0:	4358      	muls	r0, r3
    27e2:	3140      	adds	r1, #64	; 0x40
    27e4:	0049      	lsls	r1, r1, #1
    27e6:	1851      	adds	r1, r2, r1
    27e8:	890b      	ldrh	r3, [r1, #8]
    27ea:	18c0      	adds	r0, r0, r3
    27ec:	b280      	uxth	r0, r0
    27ee:	e008      	b.n	2802 <uiIndexOfObject+0x42>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    27f0:	4805      	ldr	r0, [pc, #20]	; (2808 <uiIndexOfObject+0x48>)
    27f2:	4b06      	ldr	r3, [pc, #24]	; (280c <uiIndexOfObject+0x4c>)
    27f4:	4798      	blx	r3
    27f6:	2000      	movs	r0, #0
    27f8:	e003      	b.n	2802 <uiIndexOfObject+0x42>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    27fa:	4805      	ldr	r0, [pc, #20]	; (2810 <uiIndexOfObject+0x50>)
    27fc:	4b03      	ldr	r3, [pc, #12]	; (280c <uiIndexOfObject+0x4c>)
    27fe:	4798      	blx	r3
    2800:	2000      	movs	r0, #0
}
    2802:	bd10      	pop	{r4, pc}
    2804:	20000324 	.word	0x20000324
    2808:	0000b4d8 	.word	0x0000b4d8
    280c:	000025e9 	.word	0x000025e9
    2810:	0000b518 	.word	0x0000b518

00002814 <prvMarkObjectAsUsed>:
{
    2814:	b510      	push	{r4, lr}
    2816:	000b      	movs	r3, r1
	uint16_t idx = uiIndexOfObject(handle, objectclass);
    2818:	0001      	movs	r1, r0
    281a:	0018      	movs	r0, r3
    281c:	4b04      	ldr	r3, [pc, #16]	; (2830 <prvMarkObjectAsUsed+0x1c>)
    281e:	4798      	blx	r3
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
    2820:	4b04      	ldr	r3, [pc, #16]	; (2834 <prvMarkObjectAsUsed+0x20>)
    2822:	681b      	ldr	r3, [r3, #0]
    2824:	1818      	adds	r0, r3, r0
    2826:	309c      	adds	r0, #156	; 0x9c
    2828:	2301      	movs	r3, #1
    282a:	7003      	strb	r3, [r0, #0]
}
    282c:	bd10      	pop	{r4, pc}
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	000027c1 	.word	0x000027c1
    2834:	20000324 	.word	0x20000324

00002838 <prvTraceSetPriorityProperty>:
{
    2838:	b570      	push	{r4, r5, r6, lr}
    283a:	0004      	movs	r4, r0
    283c:	0008      	movs	r0, r1
    283e:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    2840:	2c08      	cmp	r4, #8
    2842:	d813      	bhi.n	286c <prvTraceSetPriorityProperty+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2844:	4b0d      	ldr	r3, [pc, #52]	; (287c <prvTraceSetPriorityProperty+0x44>)
    2846:	681b      	ldr	r3, [r3, #0]
    2848:	191b      	adds	r3, r3, r4
    284a:	3364      	adds	r3, #100	; 0x64
    284c:	781b      	ldrb	r3, [r3, #0]
    284e:	428b      	cmp	r3, r1
    2850:	d310      	bcc.n	2874 <prvTraceSetPriorityProperty+0x3c>
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
    2852:	0021      	movs	r1, r4
    2854:	4b0a      	ldr	r3, [pc, #40]	; (2880 <prvTraceSetPriorityProperty+0x48>)
    2856:	4798      	blx	r3
    2858:	4b08      	ldr	r3, [pc, #32]	; (287c <prvTraceSetPriorityProperty+0x44>)
    285a:	681b      	ldr	r3, [r3, #0]
    285c:	191c      	adds	r4, r3, r4
    285e:	3470      	adds	r4, #112	; 0x70
    2860:	7822      	ldrb	r2, [r4, #0]
    2862:	181b      	adds	r3, r3, r0
    2864:	189b      	adds	r3, r3, r2
    2866:	339d      	adds	r3, #157	; 0x9d
    2868:	701d      	strb	r5, [r3, #0]
}
    286a:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    286c:	4805      	ldr	r0, [pc, #20]	; (2884 <prvTraceSetPriorityProperty+0x4c>)
    286e:	4b06      	ldr	r3, [pc, #24]	; (2888 <prvTraceSetPriorityProperty+0x50>)
    2870:	4798      	blx	r3
    2872:	e7fa      	b.n	286a <prvTraceSetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2874:	4805      	ldr	r0, [pc, #20]	; (288c <prvTraceSetPriorityProperty+0x54>)
    2876:	4b04      	ldr	r3, [pc, #16]	; (2888 <prvTraceSetPriorityProperty+0x50>)
    2878:	4798      	blx	r3
    287a:	e7f6      	b.n	286a <prvTraceSetPriorityProperty+0x32>
    287c:	20000324 	.word	0x20000324
    2880:	000027c1 	.word	0x000027c1
    2884:	0000b060 	.word	0x0000b060
    2888:	000025e9 	.word	0x000025e9
    288c:	0000b0ac 	.word	0x0000b0ac

00002890 <prvTraceGetPriorityProperty>:
{
    2890:	b510      	push	{r4, lr}
    2892:	0004      	movs	r4, r0
    2894:	0008      	movs	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    2896:	2c08      	cmp	r4, #8
    2898:	d813      	bhi.n	28c2 <prvTraceGetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    289a:	4b0f      	ldr	r3, [pc, #60]	; (28d8 <prvTraceGetPriorityProperty+0x48>)
    289c:	681b      	ldr	r3, [r3, #0]
    289e:	191b      	adds	r3, r3, r4
    28a0:	3364      	adds	r3, #100	; 0x64
    28a2:	781b      	ldrb	r3, [r3, #0]
    28a4:	428b      	cmp	r3, r1
    28a6:	d311      	bcc.n	28cc <prvTraceGetPriorityProperty+0x3c>
	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
    28a8:	0021      	movs	r1, r4
    28aa:	4b0c      	ldr	r3, [pc, #48]	; (28dc <prvTraceGetPriorityProperty+0x4c>)
    28ac:	4798      	blx	r3
    28ae:	4b0a      	ldr	r3, [pc, #40]	; (28d8 <prvTraceGetPriorityProperty+0x48>)
    28b0:	681b      	ldr	r3, [r3, #0]
    28b2:	191c      	adds	r4, r3, r4
    28b4:	3470      	adds	r4, #112	; 0x70
    28b6:	7822      	ldrb	r2, [r4, #0]
    28b8:	181b      	adds	r3, r3, r0
    28ba:	189b      	adds	r3, r3, r2
    28bc:	339d      	adds	r3, #157	; 0x9d
    28be:	7818      	ldrb	r0, [r3, #0]
}
    28c0:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    28c2:	4807      	ldr	r0, [pc, #28]	; (28e0 <prvTraceGetPriorityProperty+0x50>)
    28c4:	4b07      	ldr	r3, [pc, #28]	; (28e4 <prvTraceGetPriorityProperty+0x54>)
    28c6:	4798      	blx	r3
    28c8:	2000      	movs	r0, #0
    28ca:	e7f9      	b.n	28c0 <prvTraceGetPriorityProperty+0x30>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    28cc:	4806      	ldr	r0, [pc, #24]	; (28e8 <prvTraceGetPriorityProperty+0x58>)
    28ce:	4b05      	ldr	r3, [pc, #20]	; (28e4 <prvTraceGetPriorityProperty+0x54>)
    28d0:	4798      	blx	r3
    28d2:	2000      	movs	r0, #0
    28d4:	e7f4      	b.n	28c0 <prvTraceGetPriorityProperty+0x30>
    28d6:	46c0      	nop			; (mov r8, r8)
    28d8:	20000324 	.word	0x20000324
    28dc:	000027c1 	.word	0x000027c1
    28e0:	0000ae84 	.word	0x0000ae84
    28e4:	000025e9 	.word	0x000025e9
    28e8:	0000aed0 	.word	0x0000aed0

000028ec <prvTraceSetObjectState>:
{
    28ec:	b570      	push	{r4, r5, r6, lr}
    28ee:	0004      	movs	r4, r0
    28f0:	0008      	movs	r0, r1
    28f2:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    28f4:	2c08      	cmp	r4, #8
    28f6:	d813      	bhi.n	2920 <prvTraceSetObjectState+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    28f8:	4b0d      	ldr	r3, [pc, #52]	; (2930 <prvTraceSetObjectState+0x44>)
    28fa:	681b      	ldr	r3, [r3, #0]
    28fc:	191b      	adds	r3, r3, r4
    28fe:	3364      	adds	r3, #100	; 0x64
    2900:	781b      	ldrb	r3, [r3, #0]
    2902:	428b      	cmp	r3, r1
    2904:	d310      	bcc.n	2928 <prvTraceSetObjectState+0x3c>
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
    2906:	0021      	movs	r1, r4
    2908:	4b0a      	ldr	r3, [pc, #40]	; (2934 <prvTraceSetObjectState+0x48>)
    290a:	4798      	blx	r3
    290c:	4b08      	ldr	r3, [pc, #32]	; (2930 <prvTraceSetObjectState+0x44>)
    290e:	681b      	ldr	r3, [r3, #0]
    2910:	191c      	adds	r4, r3, r4
    2912:	3470      	adds	r4, #112	; 0x70
    2914:	7822      	ldrb	r2, [r4, #0]
    2916:	181b      	adds	r3, r3, r0
    2918:	189b      	adds	r3, r3, r2
    291a:	339c      	adds	r3, #156	; 0x9c
    291c:	701d      	strb	r5, [r3, #0]
}
    291e:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    2920:	4805      	ldr	r0, [pc, #20]	; (2938 <prvTraceSetObjectState+0x4c>)
    2922:	4b06      	ldr	r3, [pc, #24]	; (293c <prvTraceSetObjectState+0x50>)
    2924:	4798      	blx	r3
    2926:	e7fa      	b.n	291e <prvTraceSetObjectState+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2928:	4805      	ldr	r0, [pc, #20]	; (2940 <prvTraceSetObjectState+0x54>)
    292a:	4b04      	ldr	r3, [pc, #16]	; (293c <prvTraceSetObjectState+0x50>)
    292c:	4798      	blx	r3
    292e:	e7f6      	b.n	291e <prvTraceSetObjectState+0x32>
    2930:	20000324 	.word	0x20000324
    2934:	000027c1 	.word	0x000027c1
    2938:	0000afe0 	.word	0x0000afe0
    293c:	000025e9 	.word	0x000025e9
    2940:	0000b024 	.word	0x0000b024

00002944 <prvTraceSetTaskInstanceFinished>:
{
    2944:	b510      	push	{r4, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    2946:	4b0b      	ldr	r3, [pc, #44]	; (2974 <prvTraceSetTaskInstanceFinished+0x30>)
    2948:	681a      	ldr	r2, [r3, #0]
    294a:	2367      	movs	r3, #103	; 0x67
    294c:	5cd3      	ldrb	r3, [r2, r3]
    294e:	4283      	cmp	r3, r0
    2950:	d30c      	bcc.n	296c <prvTraceSetTaskInstanceFinished+0x28>
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
    2952:	2103      	movs	r1, #3
    2954:	4b08      	ldr	r3, [pc, #32]	; (2978 <prvTraceSetTaskInstanceFinished+0x34>)
    2956:	4798      	blx	r3
    2958:	4b06      	ldr	r3, [pc, #24]	; (2974 <prvTraceSetTaskInstanceFinished+0x30>)
    295a:	681b      	ldr	r3, [r3, #0]
    295c:	2273      	movs	r2, #115	; 0x73
    295e:	5c9a      	ldrb	r2, [r3, r2]
    2960:	181b      	adds	r3, r3, r0
    2962:	189b      	adds	r3, r3, r2
    2964:	339c      	adds	r3, #156	; 0x9c
    2966:	2200      	movs	r2, #0
    2968:	701a      	strb	r2, [r3, #0]
}
    296a:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    296c:	4803      	ldr	r0, [pc, #12]	; (297c <prvTraceSetTaskInstanceFinished+0x38>)
    296e:	4b04      	ldr	r3, [pc, #16]	; (2980 <prvTraceSetTaskInstanceFinished+0x3c>)
    2970:	4798      	blx	r3
    2972:	e7fa      	b.n	296a <prvTraceSetTaskInstanceFinished+0x26>
    2974:	20000324 	.word	0x20000324
    2978:	000027c1 	.word	0x000027c1
    297c:	0000b0ec 	.word	0x0000b0ec
    2980:	000025e9 	.word	0x000025e9

00002984 <prvTraceGetObjectHandle>:
{
    2984:	b570      	push	{r4, r5, r6, lr}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    2986:	4b2d      	ldr	r3, [pc, #180]	; (2a3c <prvTraceGetObjectHandle+0xb8>)
    2988:	681b      	ldr	r3, [r3, #0]
    298a:	2b00      	cmp	r3, #0
    298c:	d046      	beq.n	2a1c <prvTraceGetObjectHandle+0x98>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    298e:	2808      	cmp	r0, #8
    2990:	d849      	bhi.n	2a26 <prvTraceGetObjectHandle+0xa2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2992:	f3ef 8410 	mrs	r4, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2996:	2301      	movs	r3, #1
    2998:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    299c:	4a28      	ldr	r2, [pc, #160]	; (2a40 <prvTraceGetObjectHandle+0xbc>)
    299e:	6813      	ldr	r3, [r2, #0]
    29a0:	3301      	adds	r3, #1
    29a2:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
    29a4:	4a27      	ldr	r2, [pc, #156]	; (2a44 <prvTraceGetObjectHandle+0xc0>)
    29a6:	0043      	lsls	r3, r0, #1
    29a8:	5a9b      	ldrh	r3, [r3, r2]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
    29aa:	18d2      	adds	r2, r2, r3
    29ac:	3248      	adds	r2, #72	; 0x48
    29ae:	7812      	ldrb	r2, [r2, #0]
    29b0:	2a00      	cmp	r2, #0
    29b2:	d10a      	bne.n	29ca <prvTraceGetObjectHandle+0x46>
		objectHandleStacks.objectHandles[indexOfHandle] =
    29b4:	4923      	ldr	r1, [pc, #140]	; (2a44 <prvTraceGetObjectHandle+0xc0>)
    29b6:	18cd      	adds	r5, r1, r3
    29b8:	3548      	adds	r5, #72	; 0x48
			(traceHandle)(1 + indexOfHandle -
    29ba:	1c5a      	adds	r2, r3, #1
			objectHandleStacks.lowestIndexOfClass[objectclass]);
    29bc:	0006      	movs	r6, r0
    29be:	3608      	adds	r6, #8
    29c0:	0076      	lsls	r6, r6, #1
    29c2:	1989      	adds	r1, r1, r6
			(traceHandle)(1 + indexOfHandle -
    29c4:	8849      	ldrh	r1, [r1, #2]
    29c6:	1a52      	subs	r2, r2, r1
		objectHandleStacks.objectHandles[indexOfHandle] =
    29c8:	702a      	strb	r2, [r5, #0]
		> objectHandleStacks.highestIndexOfClass[objectclass])
    29ca:	0001      	movs	r1, r0
    29cc:	3110      	adds	r1, #16
    29ce:	0049      	lsls	r1, r1, #1
    29d0:	4a1c      	ldr	r2, [pc, #112]	; (2a44 <prvTraceGetObjectHandle+0xc0>)
    29d2:	1852      	adds	r2, r2, r1
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    29d4:	8892      	ldrh	r2, [r2, #4]
    29d6:	429a      	cmp	r2, r3
    29d8:	d32a      	bcc.n	2a30 <prvTraceGetObjectHandle+0xac>
	handle = objectHandleStacks.objectHandles[indexOfHandle];
    29da:	491a      	ldr	r1, [pc, #104]	; (2a44 <prvTraceGetObjectHandle+0xc0>)
    29dc:	18ca      	adds	r2, r1, r3
    29de:	3248      	adds	r2, #72	; 0x48
    29e0:	7812      	ldrb	r2, [r2, #0]
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
    29e2:	3301      	adds	r3, #1
    29e4:	b29b      	uxth	r3, r3
    29e6:	0045      	lsls	r5, r0, #1
    29e8:	526b      	strh	r3, [r5, r1]
			objectHandleStacks.lowestIndexOfClass[objectclass];
    29ea:	0005      	movs	r5, r0
    29ec:	3508      	adds	r5, #8
    29ee:	006d      	lsls	r5, r5, #1
    29f0:	194d      	adds	r5, r1, r5
    29f2:	886d      	ldrh	r5, [r5, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    29f4:	1b5b      	subs	r3, r3, r5
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
    29f6:	0005      	movs	r5, r0
    29f8:	3518      	adds	r5, #24
    29fa:	006d      	lsls	r5, r5, #1
    29fc:	1949      	adds	r1, r1, r5
    29fe:	88c9      	ldrh	r1, [r1, #6]
		if (hndCount >
    2a00:	428b      	cmp	r3, r1
    2a02:	dd03      	ble.n	2a0c <prvTraceGetObjectHandle+0x88>
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    2a04:	490f      	ldr	r1, [pc, #60]	; (2a44 <prvTraceGetObjectHandle+0xc0>)
    2a06:	1948      	adds	r0, r1, r5
				(traceHandle)hndCount;
    2a08:	b2db      	uxtb	r3, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    2a0a:	80c3      	strh	r3, [r0, #6]
	trcCRITICAL_SECTION_END();
    2a0c:	490c      	ldr	r1, [pc, #48]	; (2a40 <prvTraceGetObjectHandle+0xbc>)
    2a0e:	680b      	ldr	r3, [r1, #0]
    2a10:	3b01      	subs	r3, #1
    2a12:	600b      	str	r3, [r1, #0]
    2a14:	f384 8810 	msr	PRIMASK, r4
}
    2a18:	0010      	movs	r0, r2
    2a1a:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    2a1c:	480a      	ldr	r0, [pc, #40]	; (2a48 <prvTraceGetObjectHandle+0xc4>)
    2a1e:	4b0b      	ldr	r3, [pc, #44]	; (2a4c <prvTraceGetObjectHandle+0xc8>)
    2a20:	4798      	blx	r3
    2a22:	2200      	movs	r2, #0
    2a24:	e7f8      	b.n	2a18 <prvTraceGetObjectHandle+0x94>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    2a26:	480a      	ldr	r0, [pc, #40]	; (2a50 <prvTraceGetObjectHandle+0xcc>)
    2a28:	4b08      	ldr	r3, [pc, #32]	; (2a4c <prvTraceGetObjectHandle+0xc8>)
    2a2a:	4798      	blx	r3
    2a2c:	2200      	movs	r2, #0
    2a2e:	e7f3      	b.n	2a18 <prvTraceGetObjectHandle+0x94>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    2a30:	4b08      	ldr	r3, [pc, #32]	; (2a54 <prvTraceGetObjectHandle+0xd0>)
    2a32:	4798      	blx	r3
    2a34:	4b05      	ldr	r3, [pc, #20]	; (2a4c <prvTraceGetObjectHandle+0xc8>)
    2a36:	4798      	blx	r3
		handle = 0;
    2a38:	2200      	movs	r2, #0
    2a3a:	e7e7      	b.n	2a0c <prvTraceGetObjectHandle+0x88>
    2a3c:	20000324 	.word	0x20000324
    2a40:	200003d4 	.word	0x200003d4
    2a44:	20000340 	.word	0x20000340
    2a48:	0000b5dc 	.word	0x0000b5dc
    2a4c:	000025e9 	.word	0x000025e9
    2a50:	0000ae00 	.word	0x0000ae00
    2a54:	00002369 	.word	0x00002369

00002a58 <prvTraceSetObjectName>:
{
    2a58:	b570      	push	{r4, r5, r6, lr}
    2a5a:	0004      	movs	r4, r0
    2a5c:	0008      	movs	r0, r1
    2a5e:	1e15      	subs	r5, r2, #0
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    2a60:	d012      	beq.n	2a88 <prvTraceSetObjectName+0x30>
	if (objectclass >= TRACE_NCLASSES)
    2a62:	2c08      	cmp	r4, #8
    2a64:	d814      	bhi.n	2a90 <prvTraceSetObjectName+0x38>
	if (handle == 0)
    2a66:	2900      	cmp	r1, #0
    2a68:	d016      	beq.n	2a98 <prvTraceSetObjectName+0x40>
	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
    2a6a:	4b16      	ldr	r3, [pc, #88]	; (2ac4 <prvTraceSetObjectName+0x6c>)
    2a6c:	681b      	ldr	r3, [r3, #0]
    2a6e:	191b      	adds	r3, r3, r4
    2a70:	3364      	adds	r3, #100	; 0x64
    2a72:	781b      	ldrb	r3, [r3, #0]
    2a74:	428b      	cmp	r3, r1
    2a76:	d313      	bcc.n	2aa0 <prvTraceSetObjectName+0x48>
		idx = uiIndexOfObject(handle, objectclass);
    2a78:	0021      	movs	r1, r4
    2a7a:	4b13      	ldr	r3, [pc, #76]	; (2ac8 <prvTraceSetObjectName+0x70>)
    2a7c:	4798      	blx	r3
		if (traceErrorMessage == NULL)
    2a7e:	4b13      	ldr	r3, [pc, #76]	; (2acc <prvTraceSetObjectName+0x74>)
    2a80:	681b      	ldr	r3, [r3, #0]
    2a82:	2b00      	cmp	r3, #0
    2a84:	d012      	beq.n	2aac <prvTraceSetObjectName+0x54>
}
    2a86:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    2a88:	4811      	ldr	r0, [pc, #68]	; (2ad0 <prvTraceSetObjectName+0x78>)
    2a8a:	4b12      	ldr	r3, [pc, #72]	; (2ad4 <prvTraceSetObjectName+0x7c>)
    2a8c:	4798      	blx	r3
    2a8e:	e7fa      	b.n	2a86 <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal object class in prvTraceSetObjectName");
    2a90:	4811      	ldr	r0, [pc, #68]	; (2ad8 <prvTraceSetObjectName+0x80>)
    2a92:	4b10      	ldr	r3, [pc, #64]	; (2ad4 <prvTraceSetObjectName+0x7c>)
    2a94:	4798      	blx	r3
		return;
    2a96:	e7f6      	b.n	2a86 <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
    2a98:	4810      	ldr	r0, [pc, #64]	; (2adc <prvTraceSetObjectName+0x84>)
    2a9a:	4b0e      	ldr	r3, [pc, #56]	; (2ad4 <prvTraceSetObjectName+0x7c>)
    2a9c:	4798      	blx	r3
		return;
    2a9e:	e7f2      	b.n	2a86 <prvTraceSetObjectName+0x2e>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    2aa0:	0020      	movs	r0, r4
    2aa2:	4b0f      	ldr	r3, [pc, #60]	; (2ae0 <prvTraceSetObjectName+0x88>)
    2aa4:	4798      	blx	r3
    2aa6:	4b0b      	ldr	r3, [pc, #44]	; (2ad4 <prvTraceSetObjectName+0x7c>)
    2aa8:	4798      	blx	r3
    2aaa:	e7ec      	b.n	2a86 <prvTraceSetObjectName+0x2e>
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    2aac:	4b05      	ldr	r3, [pc, #20]	; (2ac4 <prvTraceSetObjectName+0x6c>)
    2aae:	681b      	ldr	r3, [r3, #0]
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
    2ab0:	191c      	adds	r4, r3, r4
    2ab2:	3470      	adds	r4, #112	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    2ab4:	7822      	ldrb	r2, [r4, #0]
    2ab6:	309c      	adds	r0, #156	; 0x9c
    2ab8:	1818      	adds	r0, r3, r0
    2aba:	0029      	movs	r1, r5
    2abc:	4b09      	ldr	r3, [pc, #36]	; (2ae4 <prvTraceSetObjectName+0x8c>)
    2abe:	4798      	blx	r3
    2ac0:	e7e1      	b.n	2a86 <prvTraceSetObjectName+0x2e>
    2ac2:	46c0      	nop			; (mov r8, r8)
    2ac4:	20000324 	.word	0x20000324
    2ac8:	000027c1 	.word	0x000027c1
    2acc:	200003dc 	.word	0x200003dc
    2ad0:	0000af4c 	.word	0x0000af4c
    2ad4:	000025e9 	.word	0x000025e9
    2ad8:	0000af80 	.word	0x0000af80
    2adc:	0000afb0 	.word	0x0000afb0
    2ae0:	00002369 	.word	0x00002369
    2ae4:	000023c9 	.word	0x000023c9

00002ae8 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
    2ae8:	b570      	push	{r4, r5, r6, lr}
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
    2aea:	4b1e      	ldr	r3, [pc, #120]	; (2b64 <prvTracePortGetTimeStamp+0x7c>)
    2aec:	681b      	ldr	r3, [r3, #0]
    2aee:	2b01      	cmp	r3, #1
    2af0:	d02b      	beq.n	2b4a <prvTracePortGetTimeStamp+0x62>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
    2af2:	4b1d      	ldr	r3, [pc, #116]	; (2b68 <prvTracePortGetTimeStamp+0x80>)
    2af4:	6819      	ldr	r1, [r3, #0]
    2af6:	4b1d      	ldr	r3, [pc, #116]	; (2b6c <prvTracePortGetTimeStamp+0x84>)
    2af8:	681b      	ldr	r3, [r3, #0]
    2afa:	3101      	adds	r1, #1
    2afc:	1ac9      	subs	r1, r1, r3
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
    2afe:	4b1c      	ldr	r3, [pc, #112]	; (2b70 <prvTracePortGetTimeStamp+0x88>)
    2b00:	681b      	ldr	r3, [r3, #0]
    2b02:	4a1c      	ldr	r2, [pc, #112]	; (2b74 <prvTracePortGetTimeStamp+0x8c>)
    2b04:	6814      	ldr	r4, [r2, #0]
    2b06:	43e2      	mvns	r2, r4
    2b08:	42da      	cmn	r2, r3
    2b0a:	d424      	bmi.n	2b56 <prvTracePortGetTimeStamp+0x6e>
		traceTickCount = uiTraceTickCount;
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    2b0c:	4a1a      	ldr	r2, [pc, #104]	; (2b78 <prvTracePortGetTimeStamp+0x90>)
    2b0e:	6814      	ldr	r4, [r2, #0]
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
    2b10:	42a1      	cmp	r1, r4
    2b12:	41a4      	sbcs	r4, r4
    2b14:	4264      	negs	r4, r4
    2b16:	191c      	adds	r4, r3, r4
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
    2b18:	2800      	cmp	r0, #0
    2b1a:	d01f      	beq.n	2b5c <prvTracePortGetTimeStamp+0x74>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
    2b1c:	4d12      	ldr	r5, [pc, #72]	; (2b68 <prvTracePortGetTimeStamp+0x80>)
    2b1e:	682b      	ldr	r3, [r5, #0]
    2b20:	3301      	adds	r3, #1
    2b22:	089b      	lsrs	r3, r3, #2
    2b24:	4363      	muls	r3, r4
    2b26:	001a      	movs	r2, r3
    2b28:	4e14      	ldr	r6, [pc, #80]	; (2b7c <prvTracePortGetTimeStamp+0x94>)
    2b2a:	6033      	str	r3, [r6, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
    2b2c:	682d      	ldr	r5, [r5, #0]
    2b2e:	3501      	adds	r5, #1
    2b30:	2303      	movs	r3, #3
    2b32:	402b      	ands	r3, r5
    2b34:	4363      	muls	r3, r4
    2b36:	185b      	adds	r3, r3, r1
    2b38:	089b      	lsrs	r3, r3, #2
    2b3a:	189b      	adds	r3, r3, r2
    2b3c:	6033      	str	r3, [r6, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
    2b3e:	4a0c      	ldr	r2, [pc, #48]	; (2b70 <prvTracePortGetTimeStamp+0x88>)
    2b40:	6014      	str	r4, [r2, #0]
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
		*pTimestamp = last_timestamp;
    2b42:	6003      	str	r3, [r0, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
    2b44:	4b0c      	ldr	r3, [pc, #48]	; (2b78 <prvTracePortGetTimeStamp+0x90>)
    2b46:	6019      	str	r1, [r3, #0]
}
    2b48:	bd70      	pop	{r4, r5, r6, pc}
		if (pTimestamp)
    2b4a:	2800      	cmp	r0, #0
    2b4c:	d0fc      	beq.n	2b48 <prvTracePortGetTimeStamp+0x60>
			*pTimestamp = last_timestamp;
    2b4e:	4b0b      	ldr	r3, [pc, #44]	; (2b7c <prvTracePortGetTimeStamp+0x94>)
    2b50:	681b      	ldr	r3, [r3, #0]
    2b52:	6003      	str	r3, [r0, #0]
    2b54:	e7f8      	b.n	2b48 <prvTracePortGetTimeStamp+0x60>
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    2b56:	42a3      	cmp	r3, r4
    2b58:	d1de      	bne.n	2b18 <prvTracePortGetTimeStamp+0x30>
    2b5a:	e7d7      	b.n	2b0c <prvTracePortGetTimeStamp+0x24>
	last_traceTickCount = traceTickCount;
    2b5c:	4b04      	ldr	r3, [pc, #16]	; (2b70 <prvTracePortGetTimeStamp+0x88>)
    2b5e:	601c      	str	r4, [r3, #0]
    2b60:	e7f0      	b.n	2b44 <prvTracePortGetTimeStamp+0x5c>
    2b62:	46c0      	nop			; (mov r8, r8)
    2b64:	200003e0 	.word	0x200003e0
    2b68:	e000e014 	.word	0xe000e014
    2b6c:	e000e018 	.word	0xe000e018
    2b70:	2000033c 	.word	0x2000033c
    2b74:	200003e8 	.word	0x200003e8
    2b78:	20000334 	.word	0x20000334
    2b7c:	20000338 	.word	0x20000338

00002b80 <prvTraceGetDTS>:
{
    2b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b82:	b083      	sub	sp, #12
    2b84:	0005      	movs	r5, r0
	uint32_t timestamp = 0;
    2b86:	2300      	movs	r3, #0
    2b88:	9301      	str	r3, [sp, #4]
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    2b8a:	28ff      	cmp	r0, #255	; 0xff
    2b8c:	d002      	beq.n	2b94 <prvTraceGetDTS+0x14>
    2b8e:	4b39      	ldr	r3, [pc, #228]	; (2c74 <prvTraceGetDTS+0xf4>)
    2b90:	4298      	cmp	r0, r3
    2b92:	d135      	bne.n	2c00 <prvTraceGetDTS+0x80>
	if (RecorderDataPtr->frequency == 0)
    2b94:	4b38      	ldr	r3, [pc, #224]	; (2c78 <prvTraceGetDTS+0xf8>)
    2b96:	681c      	ldr	r4, [r3, #0]
    2b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2b9a:	2b00      	cmp	r3, #0
    2b9c:	d105      	bne.n	2baa <prvTraceGetDTS+0x2a>
		if (timestampFrequency != 0)
    2b9e:	4b37      	ldr	r3, [pc, #220]	; (2c7c <prvTraceGetDTS+0xfc>)
    2ba0:	681b      	ldr	r3, [r3, #0]
    2ba2:	2b00      	cmp	r3, #0
    2ba4:	d031      	beq.n	2c0a <prvTraceGetDTS+0x8a>
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
    2ba6:	089b      	lsrs	r3, r3, #2
    2ba8:	6263      	str	r3, [r4, #36]	; 0x24
	prvTracePortGetTimeStamp(&timestamp);	
    2baa:	a801      	add	r0, sp, #4
    2bac:	4b34      	ldr	r3, [pc, #208]	; (2c80 <prvTraceGetDTS+0x100>)
    2bae:	4798      	blx	r3
	dts = timestamp - old_timestamp;
    2bb0:	9b01      	ldr	r3, [sp, #4]
    2bb2:	4a34      	ldr	r2, [pc, #208]	; (2c84 <prvTraceGetDTS+0x104>)
    2bb4:	6811      	ldr	r1, [r2, #0]
    2bb6:	1a5c      	subs	r4, r3, r1
	old_timestamp = timestamp;
    2bb8:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->frequency > 0)
    2bba:	4a2f      	ldr	r2, [pc, #188]	; (2c78 <prvTraceGetDTS+0xf8>)
    2bbc:	6816      	ldr	r6, [r2, #0]
    2bbe:	6a77      	ldr	r7, [r6, #36]	; 0x24
    2bc0:	2f00      	cmp	r7, #0
    2bc2:	d032      	beq.n	2c2a <prvTraceGetDTS+0xaa>
		if (dts > RecorderDataPtr->frequency)
    2bc4:	42bc      	cmp	r4, r7
    2bc6:	d92c      	bls.n	2c22 <prvTraceGetDTS+0xa2>
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
    2bc8:	0039      	movs	r1, r7
    2bca:	0020      	movs	r0, r4
    2bcc:	4b2e      	ldr	r3, [pc, #184]	; (2c88 <prvTraceGetDTS+0x108>)
    2bce:	4798      	blx	r3
    2bd0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2bd2:	469c      	mov	ip, r3
    2bd4:	4460      	add	r0, ip
    2bd6:	62f0      	str	r0, [r6, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
    2bd8:	0039      	movs	r1, r7
    2bda:	0020      	movs	r0, r4
    2bdc:	4b2b      	ldr	r3, [pc, #172]	; (2c8c <prvTraceGetDTS+0x10c>)
    2bde:	4798      	blx	r3
    2be0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2be2:	469c      	mov	ip, r3
    2be4:	4461      	add	r1, ip
    2be6:	62b1      	str	r1, [r6, #40]	; 0x28
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
    2be8:	4b23      	ldr	r3, [pc, #140]	; (2c78 <prvTraceGetDTS+0xf8>)
    2bea:	681b      	ldr	r3, [r3, #0]
    2bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2bee:	6a59      	ldr	r1, [r3, #36]	; 0x24
    2bf0:	428a      	cmp	r2, r1
    2bf2:	d31b      	bcc.n	2c2c <prvTraceGetDTS+0xac>
			RecorderDataPtr->absTimeLastEventSecond++;
    2bf4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    2bf6:	3001      	adds	r0, #1
    2bf8:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
    2bfa:	1a52      	subs	r2, r2, r1
    2bfc:	629a      	str	r2, [r3, #40]	; 0x28
    2bfe:	e015      	b.n	2c2c <prvTraceGetDTS+0xac>
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    2c00:	4823      	ldr	r0, [pc, #140]	; (2c90 <prvTraceGetDTS+0x110>)
    2c02:	4b24      	ldr	r3, [pc, #144]	; (2c94 <prvTraceGetDTS+0x114>)
    2c04:	4798      	blx	r3
    2c06:	2000      	movs	r0, #0
    2c08:	e014      	b.n	2c34 <prvTraceGetDTS+0xb4>
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
    2c0a:	4b23      	ldr	r3, [pc, #140]	; (2c98 <prvTraceGetDTS+0x118>)
    2c0c:	681a      	ldr	r2, [r3, #0]
    2c0e:	4b23      	ldr	r3, [pc, #140]	; (2c9c <prvTraceGetDTS+0x11c>)
    2c10:	681b      	ldr	r3, [r3, #0]
    2c12:	429a      	cmp	r2, r3
    2c14:	d0c9      	beq.n	2baa <prvTraceGetDTS+0x2a>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
    2c16:	2000      	movs	r0, #0
    2c18:	4b21      	ldr	r3, [pc, #132]	; (2ca0 <prvTraceGetDTS+0x120>)
    2c1a:	4798      	blx	r3
    2c1c:	0880      	lsrs	r0, r0, #2
    2c1e:	6260      	str	r0, [r4, #36]	; 0x24
    2c20:	e7c3      	b.n	2baa <prvTraceGetDTS+0x2a>
			RecorderDataPtr->absTimeLastEvent += dts;
    2c22:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2c24:	191b      	adds	r3, r3, r4
    2c26:	62b3      	str	r3, [r6, #40]	; 0x28
    2c28:	e7de      	b.n	2be8 <prvTraceGetDTS+0x68>
		RecorderDataPtr->absTimeLastEvent = timestamp;
    2c2a:	62b3      	str	r3, [r6, #40]	; 0x28
	if (dts > param_maxDTS)
    2c2c:	42ac      	cmp	r4, r5
    2c2e:	d803      	bhi.n	2c38 <prvTraceGetDTS+0xb8>
	return (uint16_t)dts & param_maxDTS;
    2c30:	0020      	movs	r0, r4
    2c32:	4028      	ands	r0, r5
}
    2c34:	b003      	add	sp, #12
    2c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
    2c38:	4b1a      	ldr	r3, [pc, #104]	; (2ca4 <prvTraceGetDTS+0x124>)
    2c3a:	4798      	blx	r3
		if (xts != NULL)
    2c3c:	2800      	cmp	r0, #0
    2c3e:	d0f7      	beq.n	2c30 <prvTraceGetDTS+0xb0>
			if (param_maxDTS == 0xFFFF)
    2c40:	4b0c      	ldr	r3, [pc, #48]	; (2c74 <prvTraceGetDTS+0xf4>)
    2c42:	429d      	cmp	r5, r3
    2c44:	d007      	beq.n	2c56 <prvTraceGetDTS+0xd6>
			else if (param_maxDTS == 0xFF)
    2c46:	2dff      	cmp	r5, #255	; 0xff
    2c48:	d00c      	beq.n	2c64 <prvTraceGetDTS+0xe4>
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
    2c4a:	4817      	ldr	r0, [pc, #92]	; (2ca8 <prvTraceGetDTS+0x128>)
    2c4c:	4b11      	ldr	r3, [pc, #68]	; (2c94 <prvTraceGetDTS+0x114>)
    2c4e:	4798      	blx	r3
			prvTraceUpdateCounters();
    2c50:	4b16      	ldr	r3, [pc, #88]	; (2cac <prvTraceGetDTS+0x12c>)
    2c52:	4798      	blx	r3
    2c54:	e7ec      	b.n	2c30 <prvTraceGetDTS+0xb0>
				xts->type = XTS16;
    2c56:	23a9      	movs	r3, #169	; 0xa9
    2c58:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
    2c5a:	0c23      	lsrs	r3, r4, #16
    2c5c:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = 0;
    2c5e:	2300      	movs	r3, #0
    2c60:	7043      	strb	r3, [r0, #1]
    2c62:	e7f5      	b.n	2c50 <prvTraceGetDTS+0xd0>
				xts->type = XTS8;
    2c64:	23a8      	movs	r3, #168	; 0xa8
    2c66:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
    2c68:	0a23      	lsrs	r3, r4, #8
    2c6a:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
    2c6c:	0e23      	lsrs	r3, r4, #24
    2c6e:	7043      	strb	r3, [r0, #1]
    2c70:	e7ee      	b.n	2c50 <prvTraceGetDTS+0xd0>
    2c72:	46c0      	nop			; (mov r8, r8)
    2c74:	0000ffff 	.word	0x0000ffff
    2c78:	20000324 	.word	0x20000324
    2c7c:	200003d8 	.word	0x200003d8
    2c80:	00002ae9 	.word	0x00002ae9
    2c84:	200003d0 	.word	0x200003d0
    2c88:	00007479 	.word	0x00007479
    2c8c:	00007585 	.word	0x00007585
    2c90:	0000ad9c 	.word	0x0000ad9c
    2c94:	000025e9 	.word	0x000025e9
    2c98:	e000e018 	.word	0xe000e018
    2c9c:	2000490c 	.word	0x2000490c
    2ca0:	00006dc1 	.word	0x00006dc1
    2ca4:	00002641 	.word	0x00002641
    2ca8:	0000addc 	.word	0x0000addc
    2cac:	00002735 	.word	0x00002735

00002cb0 <prvTraceStoreTaskReady>:
{
    2cb0:	b570      	push	{r4, r5, r6, lr}
    2cb2:	1e04      	subs	r4, r0, #0
	if (handle == 0)
    2cb4:	d01d      	beq.n	2cf2 <prvTraceStoreTaskReady+0x42>
	if (! readyEventsEnabled)
    2cb6:	4b1b      	ldr	r3, [pc, #108]	; (2d24 <prvTraceStoreTaskReady+0x74>)
    2cb8:	681b      	ldr	r3, [r3, #0]
    2cba:	2b00      	cmp	r3, #0
    2cbc:	d019      	beq.n	2cf2 <prvTraceStoreTaskReady+0x42>
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    2cbe:	280f      	cmp	r0, #15
    2cc0:	d818      	bhi.n	2cf4 <prvTraceStoreTaskReady+0x44>
	if (recorder_busy)
    2cc2:	4b19      	ldr	r3, [pc, #100]	; (2d28 <prvTraceStoreTaskReady+0x78>)
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	2b00      	cmp	r3, #0
    2cc8:	d118      	bne.n	2cfc <prvTraceStoreTaskReady+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2cca:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2cce:	2301      	movs	r3, #1
    2cd0:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    2cd4:	4a14      	ldr	r2, [pc, #80]	; (2d28 <prvTraceStoreTaskReady+0x78>)
    2cd6:	6813      	ldr	r3, [r2, #0]
    2cd8:	3301      	adds	r3, #1
    2cda:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
    2cdc:	4b13      	ldr	r3, [pc, #76]	; (2d2c <prvTraceStoreTaskReady+0x7c>)
    2cde:	681b      	ldr	r3, [r3, #0]
    2ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2ce2:	2b00      	cmp	r3, #0
    2ce4:	d10e      	bne.n	2d04 <prvTraceStoreTaskReady+0x54>
	trcCRITICAL_SECTION_END();
    2ce6:	4a10      	ldr	r2, [pc, #64]	; (2d28 <prvTraceStoreTaskReady+0x78>)
    2ce8:	6813      	ldr	r3, [r2, #0]
    2cea:	3b01      	subs	r3, #1
    2cec:	6013      	str	r3, [r2, #0]
    2cee:	f385 8810 	msr	PRIMASK, r5
}
    2cf2:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    2cf4:	480e      	ldr	r0, [pc, #56]	; (2d30 <prvTraceStoreTaskReady+0x80>)
    2cf6:	4b0f      	ldr	r3, [pc, #60]	; (2d34 <prvTraceStoreTaskReady+0x84>)
    2cf8:	4798      	blx	r3
    2cfa:	e7fa      	b.n	2cf2 <prvTraceStoreTaskReady+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
    2cfc:	480e      	ldr	r0, [pc, #56]	; (2d38 <prvTraceStoreTaskReady+0x88>)
    2cfe:	4b0d      	ldr	r3, [pc, #52]	; (2d34 <prvTraceStoreTaskReady+0x84>)
    2d00:	4798      	blx	r3
		return;
    2d02:	e7f6      	b.n	2cf2 <prvTraceStoreTaskReady+0x42>
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    2d04:	480d      	ldr	r0, [pc, #52]	; (2d3c <prvTraceStoreTaskReady+0x8c>)
    2d06:	4b0e      	ldr	r3, [pc, #56]	; (2d40 <prvTraceStoreTaskReady+0x90>)
    2d08:	4798      	blx	r3
    2d0a:	0006      	movs	r6, r0
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
    2d0c:	4b0d      	ldr	r3, [pc, #52]	; (2d44 <prvTraceStoreTaskReady+0x94>)
    2d0e:	4798      	blx	r3
		if (tr != NULL)
    2d10:	2800      	cmp	r0, #0
    2d12:	d0e8      	beq.n	2ce6 <prvTraceStoreTaskReady+0x36>
			tr->type = DIV_TASK_READY;
    2d14:	2302      	movs	r3, #2
    2d16:	7003      	strb	r3, [r0, #0]
			tr->dts = dts3;
    2d18:	8046      	strh	r6, [r0, #2]
			tr->objHandle = hnd8;
    2d1a:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
    2d1c:	4b0a      	ldr	r3, [pc, #40]	; (2d48 <prvTraceStoreTaskReady+0x98>)
    2d1e:	4798      	blx	r3
    2d20:	e7e1      	b.n	2ce6 <prvTraceStoreTaskReady+0x36>
    2d22:	46c0      	nop			; (mov r8, r8)
    2d24:	20000024 	.word	0x20000024
    2d28:	200003d4 	.word	0x200003d4
    2d2c:	20000324 	.word	0x20000324
    2d30:	0000b3dc 	.word	0x0000b3dc
    2d34:	000025e9 	.word	0x000025e9
    2d38:	0000b41c 	.word	0x0000b41c
    2d3c:	0000ffff 	.word	0x0000ffff
    2d40:	00002b81 	.word	0x00002b81
    2d44:	00002641 	.word	0x00002641
    2d48:	00002735 	.word	0x00002735

00002d4c <vTraceStoreMemMangEvent>:
{
    2d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d4e:	b083      	sub	sp, #12
    2d50:	9000      	str	r0, [sp, #0]
    2d52:	000c      	movs	r4, r1
	if (RecorderDataPtr == NULL)
    2d54:	4b28      	ldr	r3, [pc, #160]	; (2df8 <vTraceStoreMemMangEvent+0xac>)
    2d56:	681b      	ldr	r3, [r3, #0]
    2d58:	2b00      	cmp	r3, #0
    2d5a:	d01d      	beq.n	2d98 <vTraceStoreMemMangEvent+0x4c>
		size = (uint32_t)(- signed_size);
    2d5c:	17d3      	asrs	r3, r2, #31
    2d5e:	18d6      	adds	r6, r2, r3
    2d60:	405e      	eors	r6, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2d62:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2d66:	2301      	movs	r3, #1
    2d68:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    2d6c:	4923      	ldr	r1, [pc, #140]	; (2dfc <vTraceStoreMemMangEvent+0xb0>)
    2d6e:	680b      	ldr	r3, [r1, #0]
    2d70:	3301      	adds	r3, #1
    2d72:	600b      	str	r3, [r1, #0]
	if (address != 0)
    2d74:	2c00      	cmp	r4, #0
    2d76:	d004      	beq.n	2d82 <vTraceStoreMemMangEvent+0x36>
		heapMemUsage += (uint32_t)signed_size;
    2d78:	4b21      	ldr	r3, [pc, #132]	; (2e00 <vTraceStoreMemMangEvent+0xb4>)
    2d7a:	6819      	ldr	r1, [r3, #0]
    2d7c:	468c      	mov	ip, r1
    2d7e:	4462      	add	r2, ip
    2d80:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
    2d82:	4b1d      	ldr	r3, [pc, #116]	; (2df8 <vTraceStoreMemMangEvent+0xac>)
    2d84:	681b      	ldr	r3, [r3, #0]
    2d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2d88:	2b00      	cmp	r3, #0
    2d8a:	d107      	bne.n	2d9c <vTraceStoreMemMangEvent+0x50>
	trcCRITICAL_SECTION_END();
    2d8c:	4a1b      	ldr	r2, [pc, #108]	; (2dfc <vTraceStoreMemMangEvent+0xb0>)
    2d8e:	6813      	ldr	r3, [r2, #0]
    2d90:	3b01      	subs	r3, #1
    2d92:	6013      	str	r3, [r2, #0]
    2d94:	f385 8810 	msr	PRIMASK, r5
}
    2d98:	b003      	add	sp, #12
    2d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
    2d9c:	20ff      	movs	r0, #255	; 0xff
    2d9e:	4b19      	ldr	r3, [pc, #100]	; (2e04 <vTraceStoreMemMangEvent+0xb8>)
    2da0:	4798      	blx	r3
    2da2:	9001      	str	r0, [sp, #4]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
    2da4:	0031      	movs	r1, r6
    2da6:	4818      	ldr	r0, [pc, #96]	; (2e08 <vTraceStoreMemMangEvent+0xbc>)
    2da8:	4b18      	ldr	r3, [pc, #96]	; (2e0c <vTraceStoreMemMangEvent+0xc0>)
    2daa:	4798      	blx	r3
    2dac:	0006      	movs	r6, r0
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
    2dae:	4b18      	ldr	r3, [pc, #96]	; (2e10 <vTraceStoreMemMangEvent+0xc4>)
    2db0:	4798      	blx	r3
    2db2:	1e07      	subs	r7, r0, #0
		if (ms != NULL)
    2db4:	d0ea      	beq.n	2d8c <vTraceStoreMemMangEvent+0x40>
			ms->dts = dts1;
    2db6:	466b      	mov	r3, sp
    2db8:	791b      	ldrb	r3, [r3, #4]
    2dba:	7043      	strb	r3, [r0, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
    2dbc:	2300      	movs	r3, #0
    2dbe:	7003      	strb	r3, [r0, #0]
			ms->size = size_low;
    2dc0:	8046      	strh	r6, [r0, #2]
			prvTraceUpdateCounters();
    2dc2:	4b14      	ldr	r3, [pc, #80]	; (2e14 <vTraceStoreMemMangEvent+0xc8>)
    2dc4:	4798      	blx	r3
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
    2dc6:	0021      	movs	r1, r4
    2dc8:	480f      	ldr	r0, [pc, #60]	; (2e08 <vTraceStoreMemMangEvent+0xbc>)
    2dca:	4b10      	ldr	r3, [pc, #64]	; (2e0c <vTraceStoreMemMangEvent+0xc0>)
    2dcc:	4798      	blx	r3
    2dce:	0006      	movs	r6, r0
			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
    2dd0:	4b0f      	ldr	r3, [pc, #60]	; (2e10 <vTraceStoreMemMangEvent+0xc4>)
    2dd2:	4798      	blx	r3
			if (ma != NULL)
    2dd4:	2800      	cmp	r0, #0
    2dd6:	d0d9      	beq.n	2d8c <vTraceStoreMemMangEvent+0x40>
				ma->addr_low = addr_low;
    2dd8:	8046      	strh	r6, [r0, #2]
				ma->addr_high = addr_high;
    2dda:	2300      	movs	r3, #0
    2ddc:	7043      	strb	r3, [r0, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
    2dde:	466b      	mov	r3, sp
    2de0:	781c      	ldrb	r4, [r3, #0]
    2de2:	1c63      	adds	r3, r4, #1
    2de4:	7003      	strb	r3, [r0, #0]
				ms->type = (uint8_t) ecode;
    2de6:	703c      	strb	r4, [r7, #0]
				prvTraceUpdateCounters();					
    2de8:	4b0a      	ldr	r3, [pc, #40]	; (2e14 <vTraceStoreMemMangEvent+0xc8>)
    2dea:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
    2dec:	4b02      	ldr	r3, [pc, #8]	; (2df8 <vTraceStoreMemMangEvent+0xac>)
    2dee:	681b      	ldr	r3, [r3, #0]
    2df0:	4a03      	ldr	r2, [pc, #12]	; (2e00 <vTraceStoreMemMangEvent+0xb4>)
    2df2:	6812      	ldr	r2, [r2, #0]
    2df4:	651a      	str	r2, [r3, #80]	; 0x50
    2df6:	e7c9      	b.n	2d8c <vTraceStoreMemMangEvent+0x40>
    2df8:	20000324 	.word	0x20000324
    2dfc:	200003d4 	.word	0x200003d4
    2e00:	2000032c 	.word	0x2000032c
    2e04:	00002b81 	.word	0x00002b81
    2e08:	0000ffff 	.word	0x0000ffff
    2e0c:	0000276d 	.word	0x0000276d
    2e10:	00002641 	.word	0x00002641
    2e14:	00002735 	.word	0x00002735

00002e18 <prvTraceStoreKernelCall>:
{
    2e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e1a:	0005      	movs	r5, r0
    2e1c:	0014      	movs	r4, r2
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    2e1e:	28fe      	cmp	r0, #254	; 0xfe
    2e20:	d825      	bhi.n	2e6e <prvTraceStoreKernelCall+0x56>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    2e22:	2908      	cmp	r1, #8
    2e24:	d827      	bhi.n	2e76 <prvTraceStoreKernelCall+0x5e>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    2e26:	4b21      	ldr	r3, [pc, #132]	; (2eac <prvTraceStoreKernelCall+0x94>)
    2e28:	681b      	ldr	r3, [r3, #0]
    2e2a:	1859      	adds	r1, r3, r1
    2e2c:	3164      	adds	r1, #100	; 0x64
    2e2e:	780b      	ldrb	r3, [r1, #0]
    2e30:	4293      	cmp	r3, r2
    2e32:	d324      	bcc.n	2e7e <prvTraceStoreKernelCall+0x66>
	if (recorder_busy)
    2e34:	4b1e      	ldr	r3, [pc, #120]	; (2eb0 <prvTraceStoreKernelCall+0x98>)
    2e36:	681b      	ldr	r3, [r3, #0]
    2e38:	2b00      	cmp	r3, #0
    2e3a:	d124      	bne.n	2e86 <prvTraceStoreKernelCall+0x6e>
	if (handle_of_last_logged_task == 0)
    2e3c:	4b1d      	ldr	r3, [pc, #116]	; (2eb4 <prvTraceStoreKernelCall+0x9c>)
    2e3e:	781b      	ldrb	r3, [r3, #0]
    2e40:	2b00      	cmp	r3, #0
    2e42:	d013      	beq.n	2e6c <prvTraceStoreKernelCall+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2e44:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2e48:	2301      	movs	r3, #1
    2e4a:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    2e4e:	4a18      	ldr	r2, [pc, #96]	; (2eb0 <prvTraceStoreKernelCall+0x98>)
    2e50:	6813      	ldr	r3, [r2, #0]
    2e52:	3301      	adds	r3, #1
    2e54:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
    2e56:	4b15      	ldr	r3, [pc, #84]	; (2eac <prvTraceStoreKernelCall+0x94>)
    2e58:	681b      	ldr	r3, [r3, #0]
    2e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2e5c:	2b00      	cmp	r3, #0
    2e5e:	d116      	bne.n	2e8e <prvTraceStoreKernelCall+0x76>
	trcCRITICAL_SECTION_END();
    2e60:	4a13      	ldr	r2, [pc, #76]	; (2eb0 <prvTraceStoreKernelCall+0x98>)
    2e62:	6813      	ldr	r3, [r2, #0]
    2e64:	3b01      	subs	r3, #1
    2e66:	6013      	str	r3, [r2, #0]
    2e68:	f386 8810 	msr	PRIMASK, r6
}
    2e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    2e6e:	4812      	ldr	r0, [pc, #72]	; (2eb8 <prvTraceStoreKernelCall+0xa0>)
    2e70:	4b12      	ldr	r3, [pc, #72]	; (2ebc <prvTraceStoreKernelCall+0xa4>)
    2e72:	4798      	blx	r3
    2e74:	e7fa      	b.n	2e6c <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    2e76:	4812      	ldr	r0, [pc, #72]	; (2ec0 <prvTraceStoreKernelCall+0xa8>)
    2e78:	4b10      	ldr	r3, [pc, #64]	; (2ebc <prvTraceStoreKernelCall+0xa4>)
    2e7a:	4798      	blx	r3
    2e7c:	e7f6      	b.n	2e6c <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    2e7e:	4811      	ldr	r0, [pc, #68]	; (2ec4 <prvTraceStoreKernelCall+0xac>)
    2e80:	4b0e      	ldr	r3, [pc, #56]	; (2ebc <prvTraceStoreKernelCall+0xa4>)
    2e82:	4798      	blx	r3
    2e84:	e7f2      	b.n	2e6c <prvTraceStoreKernelCall+0x54>
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
    2e86:	4810      	ldr	r0, [pc, #64]	; (2ec8 <prvTraceStoreKernelCall+0xb0>)
    2e88:	4b0c      	ldr	r3, [pc, #48]	; (2ebc <prvTraceStoreKernelCall+0xa4>)
    2e8a:	4798      	blx	r3
		return;
    2e8c:	e7ee      	b.n	2e6c <prvTraceStoreKernelCall+0x54>
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
    2e8e:	480f      	ldr	r0, [pc, #60]	; (2ecc <prvTraceStoreKernelCall+0xb4>)
    2e90:	4b0f      	ldr	r3, [pc, #60]	; (2ed0 <prvTraceStoreKernelCall+0xb8>)
    2e92:	4798      	blx	r3
    2e94:	0007      	movs	r7, r0
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
    2e96:	4b0f      	ldr	r3, [pc, #60]	; (2ed4 <prvTraceStoreKernelCall+0xbc>)
    2e98:	4798      	blx	r3
		if (kse != NULL)
    2e9a:	2800      	cmp	r0, #0
    2e9c:	d0e0      	beq.n	2e60 <prvTraceStoreKernelCall+0x48>
			kse->dts = dts1;
    2e9e:	8047      	strh	r7, [r0, #2]
			kse->type = (uint8_t)ecode;
    2ea0:	7005      	strb	r5, [r0, #0]
			kse->objHandle = hnd8;
    2ea2:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
    2ea4:	4b0c      	ldr	r3, [pc, #48]	; (2ed8 <prvTraceStoreKernelCall+0xc0>)
    2ea6:	4798      	blx	r3
    2ea8:	e7da      	b.n	2e60 <prvTraceStoreKernelCall+0x48>
    2eaa:	46c0      	nop			; (mov r8, r8)
    2eac:	20000324 	.word	0x20000324
    2eb0:	200003d4 	.word	0x200003d4
    2eb4:	20000328 	.word	0x20000328
    2eb8:	0000b134 	.word	0x0000b134
    2ebc:	000025e9 	.word	0x000025e9
    2ec0:	0000b16c 	.word	0x0000b16c
    2ec4:	0000b1b4 	.word	0x0000b1b4
    2ec8:	0000b1fc 	.word	0x0000b1fc
    2ecc:	0000ffff 	.word	0x0000ffff
    2ed0:	00002b81 	.word	0x00002b81
    2ed4:	00002641 	.word	0x00002641
    2ed8:	00002735 	.word	0x00002735

00002edc <prvTraceStoreKernelCallWithParam>:
{
    2edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ede:	46c6      	mov	lr, r8
    2ee0:	b500      	push	{lr}
    2ee2:	0006      	movs	r6, r0
    2ee4:	0014      	movs	r4, r2
    2ee6:	001d      	movs	r5, r3
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    2ee8:	28fe      	cmp	r0, #254	; 0xfe
    2eea:	d827      	bhi.n	2f3c <prvTraceStoreKernelCallWithParam+0x60>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    2eec:	2908      	cmp	r1, #8
    2eee:	d829      	bhi.n	2f44 <prvTraceStoreKernelCallWithParam+0x68>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    2ef0:	4b24      	ldr	r3, [pc, #144]	; (2f84 <prvTraceStoreKernelCallWithParam+0xa8>)
    2ef2:	681b      	ldr	r3, [r3, #0]
    2ef4:	1859      	adds	r1, r3, r1
    2ef6:	3164      	adds	r1, #100	; 0x64
    2ef8:	780b      	ldrb	r3, [r1, #0]
    2efa:	4293      	cmp	r3, r2
    2efc:	d326      	bcc.n	2f4c <prvTraceStoreKernelCallWithParam+0x70>
	if (recorder_busy)
    2efe:	4b22      	ldr	r3, [pc, #136]	; (2f88 <prvTraceStoreKernelCallWithParam+0xac>)
    2f00:	681b      	ldr	r3, [r3, #0]
    2f02:	2b00      	cmp	r3, #0
    2f04:	d126      	bne.n	2f54 <prvTraceStoreKernelCallWithParam+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2f06:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2f0a:	2301      	movs	r3, #1
    2f0c:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    2f10:	4a1d      	ldr	r2, [pc, #116]	; (2f88 <prvTraceStoreKernelCallWithParam+0xac>)
    2f12:	6813      	ldr	r3, [r2, #0]
    2f14:	3301      	adds	r3, #1
    2f16:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    2f18:	4b1a      	ldr	r3, [pc, #104]	; (2f84 <prvTraceStoreKernelCallWithParam+0xa8>)
    2f1a:	681b      	ldr	r3, [r3, #0]
    2f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d003      	beq.n	2f2a <prvTraceStoreKernelCallWithParam+0x4e>
    2f22:	4b1a      	ldr	r3, [pc, #104]	; (2f8c <prvTraceStoreKernelCallWithParam+0xb0>)
    2f24:	781b      	ldrb	r3, [r3, #0]
    2f26:	2b00      	cmp	r3, #0
    2f28:	d118      	bne.n	2f5c <prvTraceStoreKernelCallWithParam+0x80>
	trcCRITICAL_SECTION_END();
    2f2a:	4a17      	ldr	r2, [pc, #92]	; (2f88 <prvTraceStoreKernelCallWithParam+0xac>)
    2f2c:	6813      	ldr	r3, [r2, #0]
    2f2e:	3b01      	subs	r3, #1
    2f30:	6013      	str	r3, [r2, #0]
    2f32:	f388 8810 	msr	PRIMASK, r8
}
    2f36:	bc04      	pop	{r2}
    2f38:	4690      	mov	r8, r2
    2f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    2f3c:	4814      	ldr	r0, [pc, #80]	; (2f90 <prvTraceStoreKernelCallWithParam+0xb4>)
    2f3e:	4b15      	ldr	r3, [pc, #84]	; (2f94 <prvTraceStoreKernelCallWithParam+0xb8>)
    2f40:	4798      	blx	r3
    2f42:	e7f8      	b.n	2f36 <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    2f44:	4814      	ldr	r0, [pc, #80]	; (2f98 <prvTraceStoreKernelCallWithParam+0xbc>)
    2f46:	4b13      	ldr	r3, [pc, #76]	; (2f94 <prvTraceStoreKernelCallWithParam+0xb8>)
    2f48:	4798      	blx	r3
    2f4a:	e7f4      	b.n	2f36 <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    2f4c:	4813      	ldr	r0, [pc, #76]	; (2f9c <prvTraceStoreKernelCallWithParam+0xc0>)
    2f4e:	4b11      	ldr	r3, [pc, #68]	; (2f94 <prvTraceStoreKernelCallWithParam+0xb8>)
    2f50:	4798      	blx	r3
    2f52:	e7f0      	b.n	2f36 <prvTraceStoreKernelCallWithParam+0x5a>
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
    2f54:	4812      	ldr	r0, [pc, #72]	; (2fa0 <prvTraceStoreKernelCallWithParam+0xc4>)
    2f56:	4b0f      	ldr	r3, [pc, #60]	; (2f94 <prvTraceStoreKernelCallWithParam+0xb8>)
    2f58:	4798      	blx	r3
		return;
    2f5a:	e7ec      	b.n	2f36 <prvTraceStoreKernelCallWithParam+0x5a>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
    2f5c:	20ff      	movs	r0, #255	; 0xff
    2f5e:	4b11      	ldr	r3, [pc, #68]	; (2fa4 <prvTraceStoreKernelCallWithParam+0xc8>)
    2f60:	4798      	blx	r3
    2f62:	0007      	movs	r7, r0
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
    2f64:	0029      	movs	r1, r5
    2f66:	20ff      	movs	r0, #255	; 0xff
    2f68:	4b0f      	ldr	r3, [pc, #60]	; (2fa8 <prvTraceStoreKernelCallWithParam+0xcc>)
    2f6a:	4798      	blx	r3
    2f6c:	0005      	movs	r5, r0
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
    2f6e:	4b0f      	ldr	r3, [pc, #60]	; (2fac <prvTraceStoreKernelCallWithParam+0xd0>)
    2f70:	4798      	blx	r3
		if (kse != NULL)
    2f72:	2800      	cmp	r0, #0
    2f74:	d0d9      	beq.n	2f2a <prvTraceStoreKernelCallWithParam+0x4e>
			kse->dts = dts2;
    2f76:	70c7      	strb	r7, [r0, #3]
			kse->type = (uint8_t)evtcode;
    2f78:	7006      	strb	r6, [r0, #0]
			kse->objHandle = hnd8;
    2f7a:	7044      	strb	r4, [r0, #1]
			kse->param = p8;
    2f7c:	7085      	strb	r5, [r0, #2]
			prvTraceUpdateCounters();
    2f7e:	4b0c      	ldr	r3, [pc, #48]	; (2fb0 <prvTraceStoreKernelCallWithParam+0xd4>)
    2f80:	4798      	blx	r3
    2f82:	e7d2      	b.n	2f2a <prvTraceStoreKernelCallWithParam+0x4e>
    2f84:	20000324 	.word	0x20000324
    2f88:	200003d4 	.word	0x200003d4
    2f8c:	20000328 	.word	0x20000328
    2f90:	0000b2c4 	.word	0x0000b2c4
    2f94:	000025e9 	.word	0x000025e9
    2f98:	0000b304 	.word	0x0000b304
    2f9c:	0000b354 	.word	0x0000b354
    2fa0:	0000b3a4 	.word	0x0000b3a4
    2fa4:	00002b81 	.word	0x00002b81
    2fa8:	0000276d 	.word	0x0000276d
    2fac:	00002641 	.word	0x00002641
    2fb0:	00002735 	.word	0x00002735

00002fb4 <prvTraceStoreKernelCallWithNumericParamOnly>:
{
    2fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fb6:	0004      	movs	r4, r0
    2fb8:	000d      	movs	r5, r1
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    2fba:	28fe      	cmp	r0, #254	; 0xfe
    2fbc:	d81c      	bhi.n	2ff8 <prvTraceStoreKernelCallWithNumericParamOnly+0x44>
	if (recorder_busy)
    2fbe:	4b1c      	ldr	r3, [pc, #112]	; (3030 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    2fc0:	681b      	ldr	r3, [r3, #0]
    2fc2:	2b00      	cmp	r3, #0
    2fc4:	d11c      	bne.n	3000 <prvTraceStoreKernelCallWithNumericParamOnly+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2fc6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2fca:	2301      	movs	r3, #1
    2fcc:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    2fd0:	4a17      	ldr	r2, [pc, #92]	; (3030 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    2fd2:	6813      	ldr	r3, [r2, #0]
    2fd4:	3301      	adds	r3, #1
    2fd6:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    2fd8:	4b16      	ldr	r3, [pc, #88]	; (3034 <prvTraceStoreKernelCallWithNumericParamOnly+0x80>)
    2fda:	681b      	ldr	r3, [r3, #0]
    2fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2fde:	2b00      	cmp	r3, #0
    2fe0:	d003      	beq.n	2fea <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
    2fe2:	4b15      	ldr	r3, [pc, #84]	; (3038 <prvTraceStoreKernelCallWithNumericParamOnly+0x84>)
    2fe4:	781b      	ldrb	r3, [r3, #0]
    2fe6:	2b00      	cmp	r3, #0
    2fe8:	d10e      	bne.n	3008 <prvTraceStoreKernelCallWithNumericParamOnly+0x54>
	trcCRITICAL_SECTION_END();
    2fea:	4a11      	ldr	r2, [pc, #68]	; (3030 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    2fec:	6813      	ldr	r3, [r2, #0]
    2fee:	3b01      	subs	r3, #1
    2ff0:	6013      	str	r3, [r2, #0]
    2ff2:	f386 8810 	msr	PRIMASK, r6
}
    2ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    2ff8:	4810      	ldr	r0, [pc, #64]	; (303c <prvTraceStoreKernelCallWithNumericParamOnly+0x88>)
    2ffa:	4b11      	ldr	r3, [pc, #68]	; (3040 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
    2ffc:	4798      	blx	r3
    2ffe:	e7fa      	b.n	2ff6 <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
    3000:	4810      	ldr	r0, [pc, #64]	; (3044 <prvTraceStoreKernelCallWithNumericParamOnly+0x90>)
    3002:	4b0f      	ldr	r3, [pc, #60]	; (3040 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
    3004:	4798      	blx	r3
		return;
    3006:	e7f6      	b.n	2ff6 <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
    3008:	20ff      	movs	r0, #255	; 0xff
    300a:	4b0f      	ldr	r3, [pc, #60]	; (3048 <prvTraceStoreKernelCallWithNumericParamOnly+0x94>)
    300c:	4798      	blx	r3
    300e:	0007      	movs	r7, r0
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
    3010:	0029      	movs	r1, r5
    3012:	480e      	ldr	r0, [pc, #56]	; (304c <prvTraceStoreKernelCallWithNumericParamOnly+0x98>)
    3014:	4b0e      	ldr	r3, [pc, #56]	; (3050 <prvTraceStoreKernelCallWithNumericParamOnly+0x9c>)
    3016:	4798      	blx	r3
    3018:	0005      	movs	r5, r0
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
    301a:	4b0e      	ldr	r3, [pc, #56]	; (3054 <prvTraceStoreKernelCallWithNumericParamOnly+0xa0>)
    301c:	4798      	blx	r3
		if (kse != NULL)
    301e:	2800      	cmp	r0, #0
    3020:	d0e3      	beq.n	2fea <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
			kse->dts = dts6;
    3022:	7047      	strb	r7, [r0, #1]
			kse->type = (uint8_t)evtcode;
    3024:	7004      	strb	r4, [r0, #0]
			kse->param = restParam;
    3026:	8045      	strh	r5, [r0, #2]
			prvTraceUpdateCounters();
    3028:	4b0b      	ldr	r3, [pc, #44]	; (3058 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>)
    302a:	4798      	blx	r3
    302c:	e7dd      	b.n	2fea <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
    302e:	46c0      	nop			; (mov r8, r8)
    3030:	200003d4 	.word	0x200003d4
    3034:	20000324 	.word	0x20000324
    3038:	20000328 	.word	0x20000328
    303c:	0000b234 	.word	0x0000b234
    3040:	000025e9 	.word	0x000025e9
    3044:	0000b28c 	.word	0x0000b28c
    3048:	00002b81 	.word	0x00002b81
    304c:	0000ffff 	.word	0x0000ffff
    3050:	0000276d 	.word	0x0000276d
    3054:	00002641 	.word	0x00002641
    3058:	00002735 	.word	0x00002735

0000305c <prvTraceStoreTaskswitch>:
{
    305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    305e:	0004      	movs	r4, r0
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    3060:	280f      	cmp	r0, #15
    3062:	d818      	bhi.n	3096 <prvTraceStoreTaskswitch+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3064:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3068:	2301      	movs	r3, #1
    306a:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
    306e:	4a26      	ldr	r2, [pc, #152]	; (3108 <prvTraceStoreTaskswitch+0xac>)
    3070:	6813      	ldr	r3, [r2, #0]
    3072:	3301      	adds	r3, #1
    3074:	6013      	str	r3, [r2, #0]
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
    3076:	4b25      	ldr	r3, [pc, #148]	; (310c <prvTraceStoreTaskswitch+0xb0>)
    3078:	781b      	ldrb	r3, [r3, #0]
    307a:	4283      	cmp	r3, r0
    307c:	d004      	beq.n	3088 <prvTraceStoreTaskswitch+0x2c>
    307e:	4b24      	ldr	r3, [pc, #144]	; (3110 <prvTraceStoreTaskswitch+0xb4>)
    3080:	681b      	ldr	r3, [r3, #0]
    3082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3084:	2b00      	cmp	r3, #0
    3086:	d10a      	bne.n	309e <prvTraceStoreTaskswitch+0x42>
	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
    3088:	4a1f      	ldr	r2, [pc, #124]	; (3108 <prvTraceStoreTaskswitch+0xac>)
    308a:	6813      	ldr	r3, [r2, #0]
    308c:	3b01      	subs	r3, #1
    308e:	6013      	str	r3, [r2, #0]
    3090:	f385 8810 	msr	PRIMASK, r5
}
    3094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    3096:	481f      	ldr	r0, [pc, #124]	; (3114 <prvTraceStoreTaskswitch+0xb8>)
    3098:	4b1f      	ldr	r3, [pc, #124]	; (3118 <prvTraceStoreTaskswitch+0xbc>)
    309a:	4798      	blx	r3
    309c:	e7fa      	b.n	3094 <prvTraceStoreTaskswitch+0x38>
		isPendingContextSwitch = 0;
    309e:	2200      	movs	r2, #0
    30a0:	4b1e      	ldr	r3, [pc, #120]	; (311c <prvTraceStoreTaskswitch+0xc0>)
    30a2:	601a      	str	r2, [r3, #0]
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    30a4:	481e      	ldr	r0, [pc, #120]	; (3120 <prvTraceStoreTaskswitch+0xc4>)
    30a6:	4b1f      	ldr	r3, [pc, #124]	; (3124 <prvTraceStoreTaskswitch+0xc8>)
    30a8:	4798      	blx	r3
    30aa:	0007      	movs	r7, r0
		handle_of_last_logged_task = task_handle;
    30ac:	4b17      	ldr	r3, [pc, #92]	; (310c <prvTraceStoreTaskswitch+0xb0>)
    30ae:	701c      	strb	r4, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
    30b0:	4b1d      	ldr	r3, [pc, #116]	; (3128 <prvTraceStoreTaskswitch+0xcc>)
    30b2:	4798      	blx	r3
    30b4:	1e06      	subs	r6, r0, #0
		if (ts != NULL)
    30b6:	d0e7      	beq.n	3088 <prvTraceStoreTaskswitch+0x2c>
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    30b8:	4b14      	ldr	r3, [pc, #80]	; (310c <prvTraceStoreTaskswitch+0xb0>)
    30ba:	7818      	ldrb	r0, [r3, #0]
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    30bc:	4b14      	ldr	r3, [pc, #80]	; (3110 <prvTraceStoreTaskswitch+0xb4>)
    30be:	681a      	ldr	r2, [r3, #0]
    30c0:	2367      	movs	r3, #103	; 0x67
    30c2:	5cd3      	ldrb	r3, [r2, r3]
    30c4:	4283      	cmp	r3, r0
    30c6:	d30f      	bcc.n	30e8 <prvTraceStoreTaskswitch+0x8c>
	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
    30c8:	2103      	movs	r1, #3
    30ca:	4b18      	ldr	r3, [pc, #96]	; (312c <prvTraceStoreTaskswitch+0xd0>)
    30cc:	4798      	blx	r3
    30ce:	4b10      	ldr	r3, [pc, #64]	; (3110 <prvTraceStoreTaskswitch+0xb4>)
    30d0:	681b      	ldr	r3, [r3, #0]
    30d2:	2273      	movs	r2, #115	; 0x73
    30d4:	5c9a      	ldrb	r2, [r3, r2]
    30d6:	181b      	adds	r3, r3, r0
    30d8:	189b      	adds	r3, r3, r2
    30da:	339c      	adds	r3, #156	; 0x9c
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    30dc:	781b      	ldrb	r3, [r3, #0]
    30de:	2b01      	cmp	r3, #1
    30e0:	d105      	bne.n	30ee <prvTraceStoreTaskswitch+0x92>
				ts->type = TS_TASK_RESUME;
    30e2:	3306      	adds	r3, #6
    30e4:	7033      	strb	r3, [r6, #0]
    30e6:	e004      	b.n	30f2 <prvTraceStoreTaskswitch+0x96>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    30e8:	4811      	ldr	r0, [pc, #68]	; (3130 <prvTraceStoreTaskswitch+0xd4>)
    30ea:	4b0b      	ldr	r3, [pc, #44]	; (3118 <prvTraceStoreTaskswitch+0xbc>)
    30ec:	4798      	blx	r3
				ts->type = TS_TASK_BEGIN;
    30ee:	2306      	movs	r3, #6
    30f0:	7033      	strb	r3, [r6, #0]
			ts->dts = dts3;
    30f2:	8077      	strh	r7, [r6, #2]
			ts->objHandle = hnd8;
    30f4:	7074      	strb	r4, [r6, #1]
			prvTraceSetObjectState(TRACE_CLASS_TASK,
    30f6:	4b05      	ldr	r3, [pc, #20]	; (310c <prvTraceStoreTaskswitch+0xb0>)
    30f8:	7819      	ldrb	r1, [r3, #0]
    30fa:	2201      	movs	r2, #1
    30fc:	2003      	movs	r0, #3
    30fe:	4b0d      	ldr	r3, [pc, #52]	; (3134 <prvTraceStoreTaskswitch+0xd8>)
    3100:	4798      	blx	r3
			prvTraceUpdateCounters();
    3102:	4b0d      	ldr	r3, [pc, #52]	; (3138 <prvTraceStoreTaskswitch+0xdc>)
    3104:	4798      	blx	r3
    3106:	e7bf      	b.n	3088 <prvTraceStoreTaskswitch+0x2c>
    3108:	200003d4 	.word	0x200003d4
    310c:	20000328 	.word	0x20000328
    3110:	20000324 	.word	0x20000324
    3114:	0000b454 	.word	0x0000b454
    3118:	000025e9 	.word	0x000025e9
    311c:	20000330 	.word	0x20000330
    3120:	0000ffff 	.word	0x0000ffff
    3124:	00002b81 	.word	0x00002b81
    3128:	00002641 	.word	0x00002641
    312c:	000027c1 	.word	0x000027c1
    3130:	0000b49c 	.word	0x0000b49c
    3134:	000028ed 	.word	0x000028ed
    3138:	00002735 	.word	0x00002735

0000313c <uiTraceStart>:
{
    313c:	b570      	push	{r4, r5, r6, lr}
	if (RecorderDataPtr == NULL)
    313e:	4b20      	ldr	r3, [pc, #128]	; (31c0 <uiTraceStart+0x84>)
    3140:	681b      	ldr	r3, [r3, #0]
    3142:	2b00      	cmp	r3, #0
    3144:	d00a      	beq.n	315c <uiTraceStart+0x20>
	if (RecorderDataPtr->recorderActive == 1)
    3146:	6b18      	ldr	r0, [r3, #48]	; 0x30
    3148:	2801      	cmp	r0, #1
    314a:	d006      	beq.n	315a <uiTraceStart+0x1e>
	if (traceErrorMessage == NULL)
    314c:	4b1d      	ldr	r3, [pc, #116]	; (31c4 <uiTraceStart+0x88>)
    314e:	681b      	ldr	r3, [r3, #0]
    3150:	2b00      	cmp	r3, #0
    3152:	d008      	beq.n	3166 <uiTraceStart+0x2a>
	return RecorderDataPtr->recorderActive;
    3154:	4b1a      	ldr	r3, [pc, #104]	; (31c0 <uiTraceStart+0x84>)
    3156:	681b      	ldr	r3, [r3, #0]
    3158:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
    315a:	bd70      	pop	{r4, r5, r6, pc}
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
    315c:	481a      	ldr	r0, [pc, #104]	; (31c8 <uiTraceStart+0x8c>)
    315e:	4b1b      	ldr	r3, [pc, #108]	; (31cc <uiTraceStart+0x90>)
    3160:	4798      	blx	r3
    3162:	2000      	movs	r0, #0
    3164:	e7f9      	b.n	315a <uiTraceStart+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3166:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    316a:	2201      	movs	r2, #1
    316c:	f382 8810 	msr	PRIMASK, r2
		trcCRITICAL_SECTION_BEGIN();
    3170:	4917      	ldr	r1, [pc, #92]	; (31d0 <uiTraceStart+0x94>)
    3172:	680b      	ldr	r3, [r1, #0]
    3174:	3301      	adds	r3, #1
    3176:	600b      	str	r3, [r1, #0]
		RecorderDataPtr->recorderActive = 1;
    3178:	4b11      	ldr	r3, [pc, #68]	; (31c0 <uiTraceStart+0x84>)
    317a:	681b      	ldr	r3, [r3, #0]
    317c:	631a      	str	r2, [r3, #48]	; 0x30
		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
    317e:	4b15      	ldr	r3, [pc, #84]	; (31d4 <uiTraceStart+0x98>)
    3180:	4798      	blx	r3
    3182:	4b15      	ldr	r3, [pc, #84]	; (31d8 <uiTraceStart+0x9c>)
    3184:	4798      	blx	r3
    3186:	b2c4      	uxtb	r4, r0
		if (handle == 0)
    3188:	2c00      	cmp	r4, #0
    318a:	d009      	beq.n	31a0 <uiTraceStart+0x64>
		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
    318c:	0020      	movs	r0, r4
    318e:	4b13      	ldr	r3, [pc, #76]	; (31dc <uiTraceStart+0xa0>)
    3190:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
    3192:	4a0f      	ldr	r2, [pc, #60]	; (31d0 <uiTraceStart+0x94>)
    3194:	6813      	ldr	r3, [r2, #0]
    3196:	3b01      	subs	r3, #1
    3198:	6013      	str	r3, [r2, #0]
    319a:	f385 8810 	msr	PRIMASK, r5
    319e:	e7d9      	b.n	3154 <uiTraceStart+0x18>
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
    31a0:	2003      	movs	r0, #3
    31a2:	4b0f      	ldr	r3, [pc, #60]	; (31e0 <uiTraceStart+0xa4>)
    31a4:	4798      	blx	r3
    31a6:	0006      	movs	r6, r0
    31a8:	0004      	movs	r4, r0
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
    31aa:	4a0e      	ldr	r2, [pc, #56]	; (31e4 <uiTraceStart+0xa8>)
    31ac:	0001      	movs	r1, r0
    31ae:	2003      	movs	r0, #3
    31b0:	4b0d      	ldr	r3, [pc, #52]	; (31e8 <uiTraceStart+0xac>)
    31b2:	4798      	blx	r3
			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
    31b4:	2200      	movs	r2, #0
    31b6:	0031      	movs	r1, r6
    31b8:	2003      	movs	r0, #3
    31ba:	4b0c      	ldr	r3, [pc, #48]	; (31ec <uiTraceStart+0xb0>)
    31bc:	4798      	blx	r3
    31be:	e7e5      	b.n	318c <uiTraceStart+0x50>
    31c0:	20000324 	.word	0x20000324
    31c4:	200003dc 	.word	0x200003dc
    31c8:	0000b558 	.word	0x0000b558
    31cc:	000025e9 	.word	0x000025e9
    31d0:	200003d4 	.word	0x200003d4
    31d4:	000021e1 	.word	0x000021e1
    31d8:	00002119 	.word	0x00002119
    31dc:	0000305d 	.word	0x0000305d
    31e0:	00002985 	.word	0x00002985
    31e4:	0000b59c 	.word	0x0000b59c
    31e8:	00002a59 	.word	0x00002a59
    31ec:	00002839 	.word	0x00002839

000031f0 <vTraceStart>:
{
    31f0:	b510      	push	{r4, lr}
	(void)uiTraceStart();
    31f2:	4b01      	ldr	r3, [pc, #4]	; (31f8 <vTraceStart+0x8>)
    31f4:	4798      	blx	r3
}
    31f6:	bd10      	pop	{r4, pc}
    31f8:	0000313d 	.word	0x0000313d

000031fc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    31fc:	0003      	movs	r3, r0
    31fe:	3308      	adds	r3, #8
    3200:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3202:	2201      	movs	r2, #1
    3204:	4252      	negs	r2, r2
    3206:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3208:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    320a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    320c:	2300      	movs	r3, #0
    320e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    3210:	4770      	bx	lr

00003212 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3212:	2300      	movs	r3, #0
    3214:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    3216:	4770      	bx	lr

00003218 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    3218:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    321a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    321c:	689a      	ldr	r2, [r3, #8]
    321e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3220:	689a      	ldr	r2, [r3, #8]
    3222:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    3224:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3226:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    3228:	6803      	ldr	r3, [r0, #0]
    322a:	3301      	adds	r3, #1
    322c:	6003      	str	r3, [r0, #0]
}
    322e:	4770      	bx	lr

00003230 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    3230:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    3232:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3234:	0002      	movs	r2, r0
    3236:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
    3238:	1c63      	adds	r3, r4, #1
    323a:	d102      	bne.n	3242 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
    323c:	6902      	ldr	r2, [r0, #16]
    323e:	e004      	b.n	324a <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3240:	001a      	movs	r2, r3
    3242:	6853      	ldr	r3, [r2, #4]
    3244:	681d      	ldr	r5, [r3, #0]
    3246:	42ac      	cmp	r4, r5
    3248:	d2fa      	bcs.n	3240 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    324a:	6853      	ldr	r3, [r2, #4]
    324c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    324e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3250:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    3252:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3254:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    3256:	6803      	ldr	r3, [r0, #0]
    3258:	3301      	adds	r3, #1
    325a:	6003      	str	r3, [r0, #0]
}
    325c:	bd30      	pop	{r4, r5, pc}

0000325e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    325e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3260:	6842      	ldr	r2, [r0, #4]
    3262:	6881      	ldr	r1, [r0, #8]
    3264:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3266:	6882      	ldr	r2, [r0, #8]
    3268:	6841      	ldr	r1, [r0, #4]
    326a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    326c:	685a      	ldr	r2, [r3, #4]
    326e:	4290      	cmp	r0, r2
    3270:	d006      	beq.n	3280 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    3272:	2200      	movs	r2, #0
    3274:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    3276:	681a      	ldr	r2, [r3, #0]
    3278:	3a01      	subs	r2, #1
    327a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    327c:	6818      	ldr	r0, [r3, #0]
}
    327e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3280:	6882      	ldr	r2, [r0, #8]
    3282:	605a      	str	r2, [r3, #4]
    3284:	e7f5      	b.n	3272 <uxListRemove+0x14>
	...

00003288 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    3288:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
    328a:	2300      	movs	r3, #0
    328c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    328e:	4b06      	ldr	r3, [pc, #24]	; (32a8 <prvTaskExitError+0x20>)
    3290:	681b      	ldr	r3, [r3, #0]
    3292:	3301      	adds	r3, #1
    3294:	d001      	beq.n	329a <prvTaskExitError+0x12>
    3296:	b672      	cpsid	i
    3298:	e7fe      	b.n	3298 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
    329a:	b672      	cpsid	i
	while( ulDummy == 0 )
    329c:	9b01      	ldr	r3, [sp, #4]
    329e:	2b00      	cmp	r3, #0
    32a0:	d0fc      	beq.n	329c <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    32a2:	b002      	add	sp, #8
    32a4:	4770      	bx	lr
    32a6:	46c0      	nop			; (mov r8, r8)
    32a8:	20000028 	.word	0x20000028
    32ac:	00000000 	.word	0x00000000

000032b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    32b0:	4a0b      	ldr	r2, [pc, #44]	; (32e0 <pxCurrentTCBConst2>)
    32b2:	6813      	ldr	r3, [r2, #0]
    32b4:	6818      	ldr	r0, [r3, #0]
    32b6:	3020      	adds	r0, #32
    32b8:	f380 8809 	msr	PSP, r0
    32bc:	2002      	movs	r0, #2
    32be:	f380 8814 	msr	CONTROL, r0
    32c2:	f3bf 8f6f 	isb	sy
    32c6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    32c8:	46ae      	mov	lr, r5
    32ca:	bc08      	pop	{r3}
    32cc:	bc04      	pop	{r2}
    32ce:	b662      	cpsie	i
    32d0:	4718      	bx	r3
    32d2:	46c0      	nop			; (mov r8, r8)
    32d4:	46c0      	nop			; (mov r8, r8)
    32d6:	46c0      	nop			; (mov r8, r8)
    32d8:	46c0      	nop			; (mov r8, r8)
    32da:	46c0      	nop			; (mov r8, r8)
    32dc:	46c0      	nop			; (mov r8, r8)
    32de:	46c0      	nop			; (mov r8, r8)

000032e0 <pxCurrentTCBConst2>:
    32e0:	200036c0 	.word	0x200036c0

000032e4 <pxPortInitialiseStack>:
{
    32e4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    32e6:	1f03      	subs	r3, r0, #4
    32e8:	2480      	movs	r4, #128	; 0x80
    32ea:	0464      	lsls	r4, r4, #17
    32ec:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    32ee:	3b04      	subs	r3, #4
    32f0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    32f2:	3b04      	subs	r3, #4
    32f4:	4902      	ldr	r1, [pc, #8]	; (3300 <pxPortInitialiseStack+0x1c>)
    32f6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    32f8:	3b14      	subs	r3, #20
    32fa:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    32fc:	3840      	subs	r0, #64	; 0x40
}
    32fe:	bd10      	pop	{r4, pc}
    3300:	00003289 	.word	0x00003289

00003304 <SVC_Handler>:
}
    3304:	4770      	bx	lr
	...

00003308 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    3308:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    330a:	4b13      	ldr	r3, [pc, #76]	; (3358 <xPortStartScheduler+0x50>)
    330c:	6819      	ldr	r1, [r3, #0]
    330e:	22ff      	movs	r2, #255	; 0xff
    3310:	0412      	lsls	r2, r2, #16
    3312:	430a      	orrs	r2, r1
    3314:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    3316:	6819      	ldr	r1, [r3, #0]
    3318:	22ff      	movs	r2, #255	; 0xff
    331a:	0612      	lsls	r2, r2, #24
    331c:	430a      	orrs	r2, r1
    331e:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    3320:	4d0e      	ldr	r5, [pc, #56]	; (335c <xPortStartScheduler+0x54>)
    3322:	2400      	movs	r4, #0
    3324:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    3326:	4b0e      	ldr	r3, [pc, #56]	; (3360 <xPortStartScheduler+0x58>)
    3328:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    332a:	2000      	movs	r0, #0
    332c:	4b0d      	ldr	r3, [pc, #52]	; (3364 <xPortStartScheduler+0x5c>)
    332e:	4798      	blx	r3
    3330:	21fa      	movs	r1, #250	; 0xfa
    3332:	0089      	lsls	r1, r1, #2
    3334:	4b0c      	ldr	r3, [pc, #48]	; (3368 <xPortStartScheduler+0x60>)
    3336:	4798      	blx	r3
    3338:	3801      	subs	r0, #1
    333a:	4b0c      	ldr	r3, [pc, #48]	; (336c <xPortStartScheduler+0x64>)
    333c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    333e:	2307      	movs	r3, #7
    3340:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
    3342:	4b0b      	ldr	r3, [pc, #44]	; (3370 <xPortStartScheduler+0x68>)
    3344:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
    3346:	4b0b      	ldr	r3, [pc, #44]	; (3374 <xPortStartScheduler+0x6c>)
    3348:	4798      	blx	r3
	vTaskSwitchContext();
    334a:	4b0b      	ldr	r3, [pc, #44]	; (3378 <xPortStartScheduler+0x70>)
    334c:	4798      	blx	r3
	prvTaskExitError();
    334e:	4b0b      	ldr	r3, [pc, #44]	; (337c <xPortStartScheduler+0x74>)
    3350:	4798      	blx	r3
}
    3352:	2000      	movs	r0, #0
    3354:	bd70      	pop	{r4, r5, r6, pc}
    3356:	46c0      	nop			; (mov r8, r8)
    3358:	e000ed20 	.word	0xe000ed20
    335c:	e000e010 	.word	0xe000e010
    3360:	e000e018 	.word	0xe000e018
    3364:	00006dc1 	.word	0x00006dc1
    3368:	00007479 	.word	0x00007479
    336c:	e000e014 	.word	0xe000e014
    3370:	20000028 	.word	0x20000028
    3374:	000032b1 	.word	0x000032b1
    3378:	00004e69 	.word	0x00004e69
    337c:	00003289 	.word	0x00003289

00003380 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    3380:	2280      	movs	r2, #128	; 0x80
    3382:	0552      	lsls	r2, r2, #21
    3384:	4b01      	ldr	r3, [pc, #4]	; (338c <vPortYield+0xc>)
    3386:	601a      	str	r2, [r3, #0]
}
    3388:	4770      	bx	lr
    338a:	46c0      	nop			; (mov r8, r8)
    338c:	e000ed04 	.word	0xe000ed04

00003390 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
    3390:	b672      	cpsid	i
    uxCriticalNesting++;
    3392:	4a04      	ldr	r2, [pc, #16]	; (33a4 <vPortEnterCritical+0x14>)
    3394:	6813      	ldr	r3, [r2, #0]
    3396:	3301      	adds	r3, #1
    3398:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
    339a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    339e:	f3bf 8f6f 	isb	sy
}
    33a2:	4770      	bx	lr
    33a4:	20000028 	.word	0x20000028

000033a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    33a8:	4b06      	ldr	r3, [pc, #24]	; (33c4 <vPortExitCritical+0x1c>)
    33aa:	681b      	ldr	r3, [r3, #0]
    33ac:	2b00      	cmp	r3, #0
    33ae:	d101      	bne.n	33b4 <vPortExitCritical+0xc>
    33b0:	b672      	cpsid	i
    33b2:	e7fe      	b.n	33b2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    33b4:	3b01      	subs	r3, #1
    33b6:	4a03      	ldr	r2, [pc, #12]	; (33c4 <vPortExitCritical+0x1c>)
    33b8:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    33ba:	2b00      	cmp	r3, #0
    33bc:	d100      	bne.n	33c0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
    33be:	b662      	cpsie	i
}
    33c0:	4770      	bx	lr
    33c2:	46c0      	nop			; (mov r8, r8)
    33c4:	20000028 	.word	0x20000028

000033c8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
    33c8:	f3ef 8010 	mrs	r0, PRIMASK
    33cc:	b672      	cpsid	i
    33ce:	4770      	bx	lr

000033d0 <vClearInterruptMaskFromISR>:
	__asm volatile(
    33d0:	f380 8810 	msr	PRIMASK, r0
    33d4:	4770      	bx	lr
	...

000033e0 <PendSV_Handler>:
	__asm volatile
    33e0:	f3ef 8009 	mrs	r0, PSP
    33e4:	4b0e      	ldr	r3, [pc, #56]	; (3420 <pxCurrentTCBConst>)
    33e6:	681a      	ldr	r2, [r3, #0]
    33e8:	3820      	subs	r0, #32
    33ea:	6010      	str	r0, [r2, #0]
    33ec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    33ee:	4644      	mov	r4, r8
    33f0:	464d      	mov	r5, r9
    33f2:	4656      	mov	r6, sl
    33f4:	465f      	mov	r7, fp
    33f6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    33f8:	b508      	push	{r3, lr}
    33fa:	b672      	cpsid	i
    33fc:	f001 fd34 	bl	4e68 <vTaskSwitchContext>
    3400:	b662      	cpsie	i
    3402:	bc0c      	pop	{r2, r3}
    3404:	6811      	ldr	r1, [r2, #0]
    3406:	6808      	ldr	r0, [r1, #0]
    3408:	3010      	adds	r0, #16
    340a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    340c:	46a0      	mov	r8, r4
    340e:	46a9      	mov	r9, r5
    3410:	46b2      	mov	sl, r6
    3412:	46bb      	mov	fp, r7
    3414:	f380 8809 	msr	PSP, r0
    3418:	3820      	subs	r0, #32
    341a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    341c:	4718      	bx	r3
    341e:	46c0      	nop			; (mov r8, r8)

00003420 <pxCurrentTCBConst>:
    3420:	200036c0 	.word	0x200036c0

00003424 <SysTick_Handler>:
{
    3424:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    3426:	4b07      	ldr	r3, [pc, #28]	; (3444 <SysTick_Handler+0x20>)
    3428:	4798      	blx	r3
    342a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
    342c:	4b06      	ldr	r3, [pc, #24]	; (3448 <SysTick_Handler+0x24>)
    342e:	4798      	blx	r3
    3430:	2800      	cmp	r0, #0
    3432:	d003      	beq.n	343c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    3434:	2280      	movs	r2, #128	; 0x80
    3436:	0552      	lsls	r2, r2, #21
    3438:	4b04      	ldr	r3, [pc, #16]	; (344c <SysTick_Handler+0x28>)
    343a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    343c:	0020      	movs	r0, r4
    343e:	4b04      	ldr	r3, [pc, #16]	; (3450 <SysTick_Handler+0x2c>)
    3440:	4798      	blx	r3
}
    3442:	bd10      	pop	{r4, pc}
    3444:	000033c9 	.word	0x000033c9
    3448:	00004b11 	.word	0x00004b11
    344c:	e000ed04 	.word	0xe000ed04
    3450:	000033d1 	.word	0x000033d1

00003454 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    3454:	b570      	push	{r4, r5, r6, lr}
    3456:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    3458:	0743      	lsls	r3, r0, #29
    345a:	d002      	beq.n	3462 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    345c:	2307      	movs	r3, #7
    345e:	439c      	bics	r4, r3
    3460:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
    3462:	4b18      	ldr	r3, [pc, #96]	; (34c4 <pvPortMalloc+0x70>)
    3464:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    3466:	4b18      	ldr	r3, [pc, #96]	; (34c8 <pvPortMalloc+0x74>)
    3468:	681b      	ldr	r3, [r3, #0]
    346a:	2b00      	cmp	r3, #0
    346c:	d017      	beq.n	349e <pvPortMalloc+0x4a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    346e:	4b17      	ldr	r3, [pc, #92]	; (34cc <pvPortMalloc+0x78>)
    3470:	681a      	ldr	r2, [r3, #0]
    3472:	18a3      	adds	r3, r4, r2
    3474:	4916      	ldr	r1, [pc, #88]	; (34d0 <pvPortMalloc+0x7c>)
    3476:	428b      	cmp	r3, r1
    3478:	d818      	bhi.n	34ac <pvPortMalloc+0x58>
    347a:	429a      	cmp	r2, r3
    347c:	d216      	bcs.n	34ac <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    347e:	4912      	ldr	r1, [pc, #72]	; (34c8 <pvPortMalloc+0x74>)
    3480:	680d      	ldr	r5, [r1, #0]
    3482:	18ad      	adds	r5, r5, r2
			xNextFreeByte += xWantedSize;
    3484:	4a11      	ldr	r2, [pc, #68]	; (34cc <pvPortMalloc+0x78>)
    3486:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
    3488:	2d00      	cmp	r5, #0
    348a:	d00f      	beq.n	34ac <pvPortMalloc+0x58>
    348c:	0022      	movs	r2, r4
    348e:	0029      	movs	r1, r5
    3490:	2094      	movs	r0, #148	; 0x94
    3492:	4b10      	ldr	r3, [pc, #64]	; (34d4 <pvPortMalloc+0x80>)
    3494:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
    3496:	4b10      	ldr	r3, [pc, #64]	; (34d8 <pvPortMalloc+0x84>)
    3498:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    349a:	0028      	movs	r0, r5
    349c:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    349e:	2207      	movs	r2, #7
    34a0:	4b0e      	ldr	r3, [pc, #56]	; (34dc <pvPortMalloc+0x88>)
    34a2:	3308      	adds	r3, #8
    34a4:	4393      	bics	r3, r2
    34a6:	4a08      	ldr	r2, [pc, #32]	; (34c8 <pvPortMalloc+0x74>)
    34a8:	6013      	str	r3, [r2, #0]
    34aa:	e7e0      	b.n	346e <pvPortMalloc+0x1a>
		traceMALLOC( pvReturn, xWantedSize );
    34ac:	0022      	movs	r2, r4
    34ae:	2100      	movs	r1, #0
    34b0:	20e8      	movs	r0, #232	; 0xe8
    34b2:	4b08      	ldr	r3, [pc, #32]	; (34d4 <pvPortMalloc+0x80>)
    34b4:	4798      	blx	r3
	( void ) xTaskResumeAll();
    34b6:	4b08      	ldr	r3, [pc, #32]	; (34d8 <pvPortMalloc+0x84>)
    34b8:	4798      	blx	r3
			vApplicationMallocFailedHook();
    34ba:	4b09      	ldr	r3, [pc, #36]	; (34e0 <pvPortMalloc+0x8c>)
    34bc:	4798      	blx	r3
    34be:	2500      	movs	r5, #0
	return pvReturn;
    34c0:	e7eb      	b.n	349a <pvPortMalloc+0x46>
    34c2:	46c0      	nop			; (mov r8, r8)
    34c4:	00004af5 	.word	0x00004af5
    34c8:	200003f0 	.word	0x200003f0
    34cc:	200036bc 	.word	0x200036bc
    34d0:	000032bf 	.word	0x000032bf
    34d4:	00002d4d 	.word	0x00002d4d
    34d8:	00004c9d 	.word	0x00004c9d
    34dc:	200003f4 	.word	0x200003f4
    34e0:	00007451 	.word	0x00007451

000034e4 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    34e4:	2800      	cmp	r0, #0
    34e6:	d001      	beq.n	34ec <vPortFree+0x8>
    34e8:	b672      	cpsid	i
    34ea:	e7fe      	b.n	34ea <vPortFree+0x6>
}
    34ec:	4770      	bx	lr
	...

000034f0 <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    34f0:	4b02      	ldr	r3, [pc, #8]	; (34fc <xPortGetFreeHeapSize+0xc>)
    34f2:	681b      	ldr	r3, [r3, #0]
    34f4:	20cb      	movs	r0, #203	; 0xcb
    34f6:	0180      	lsls	r0, r0, #6
    34f8:	1ac0      	subs	r0, r0, r3
}
    34fa:	4770      	bx	lr
    34fc:	200036bc 	.word	0x200036bc

00003500 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    3500:	b510      	push	{r4, lr}
    3502:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3504:	4b03      	ldr	r3, [pc, #12]	; (3514 <prvIsQueueEmpty+0x14>)
    3506:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    3508:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    350a:	4b03      	ldr	r3, [pc, #12]	; (3518 <prvIsQueueEmpty+0x18>)
    350c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    350e:	4260      	negs	r0, r4
    3510:	4160      	adcs	r0, r4

	return xReturn;
}
    3512:	bd10      	pop	{r4, pc}
    3514:	00003391 	.word	0x00003391
    3518:	000033a9 	.word	0x000033a9

0000351c <prvCopyDataToQueue>:
{
    351c:	b570      	push	{r4, r5, r6, lr}
    351e:	0004      	movs	r4, r0
    3520:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3522:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    3524:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3526:	2a00      	cmp	r2, #0
    3528:	d10b      	bne.n	3542 <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
    352a:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    352c:	6823      	ldr	r3, [r4, #0]
    352e:	4283      	cmp	r3, r0
    3530:	d104      	bne.n	353c <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    3532:	6860      	ldr	r0, [r4, #4]
    3534:	4b16      	ldr	r3, [pc, #88]	; (3590 <prvCopyDataToQueue+0x74>)
    3536:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    3538:	2300      	movs	r3, #0
    353a:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    353c:	3501      	adds	r5, #1
    353e:	63a5      	str	r5, [r4, #56]	; 0x38
}
    3540:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    3542:	2e00      	cmp	r6, #0
    3544:	d10e      	bne.n	3564 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    3546:	6880      	ldr	r0, [r0, #8]
    3548:	4b12      	ldr	r3, [pc, #72]	; (3594 <prvCopyDataToQueue+0x78>)
    354a:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    354c:	68a3      	ldr	r3, [r4, #8]
    354e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    3550:	4694      	mov	ip, r2
    3552:	4463      	add	r3, ip
    3554:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
    3556:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3558:	6862      	ldr	r2, [r4, #4]
    355a:	4293      	cmp	r3, r2
    355c:	d3ee      	bcc.n	353c <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    355e:	6823      	ldr	r3, [r4, #0]
    3560:	60a3      	str	r3, [r4, #8]
    3562:	e7eb      	b.n	353c <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3564:	68c0      	ldr	r0, [r0, #12]
    3566:	4b0b      	ldr	r3, [pc, #44]	; (3594 <prvCopyDataToQueue+0x78>)
    3568:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    356a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    356c:	425b      	negs	r3, r3
    356e:	68e2      	ldr	r2, [r4, #12]
    3570:	18d2      	adds	r2, r2, r3
    3572:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3574:	6821      	ldr	r1, [r4, #0]
    3576:	428a      	cmp	r2, r1
    3578:	d203      	bcs.n	3582 <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    357a:	6862      	ldr	r2, [r4, #4]
    357c:	4694      	mov	ip, r2
    357e:	4463      	add	r3, ip
    3580:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    3582:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    3584:	2e02      	cmp	r6, #2
    3586:	d1d9      	bne.n	353c <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3588:	4285      	cmp	r5, r0
    358a:	d0d7      	beq.n	353c <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
    358c:	3d01      	subs	r5, #1
    358e:	e7d5      	b.n	353c <prvCopyDataToQueue+0x20>
    3590:	000053ed 	.word	0x000053ed
    3594:	00009a7d 	.word	0x00009a7d

00003598 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    3598:	b5f0      	push	{r4, r5, r6, r7, lr}
    359a:	46ce      	mov	lr, r9
    359c:	4647      	mov	r7, r8
    359e:	b580      	push	{r7, lr}
    35a0:	b083      	sub	sp, #12
    35a2:	9001      	str	r0, [sp, #4]
    35a4:	9100      	str	r1, [sp, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    35a6:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    35a8:	2c00      	cmp	r4, #0
    35aa:	d005      	beq.n	35b8 <prvNotifyQueueSetContainer+0x20>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    35ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    35ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    35b0:	429a      	cmp	r2, r3
    35b2:	d303      	bcc.n	35bc <prvNotifyQueueSetContainer+0x24>
    35b4:	b672      	cpsid	i
    35b6:	e7fe      	b.n	35b6 <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer );
    35b8:	b672      	cpsid	i
    35ba:	e7fe      	b.n	35ba <prvNotifyQueueSetContainer+0x22>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    35bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    35be:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    35c0:	4293      	cmp	r3, r2
    35c2:	d805      	bhi.n	35d0 <prvNotifyQueueSetContainer+0x38>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    35c4:	0030      	movs	r0, r6
    35c6:	b003      	add	sp, #12
    35c8:	bc0c      	pop	{r2, r3}
    35ca:	4690      	mov	r8, r2
    35cc:	4699      	mov	r9, r3
    35ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    35d0:	2345      	movs	r3, #69	; 0x45
    35d2:	5ce5      	ldrb	r5, [r4, r3]
    35d4:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND( pxQueueSetContainer );
    35d6:	4b2c      	ldr	r3, [pc, #176]	; (3688 <prvNotifyQueueSetContainer+0xf0>)
    35d8:	4798      	blx	r3
    35da:	4b2c      	ldr	r3, [pc, #176]	; (368c <prvNotifyQueueSetContainer+0xf4>)
    35dc:	4798      	blx	r3
    35de:	4b2c      	ldr	r3, [pc, #176]	; (3690 <prvNotifyQueueSetContainer+0xf8>)
    35e0:	881b      	ldrh	r3, [r3, #0]
    35e2:	4203      	tst	r3, r0
    35e4:	d01e      	beq.n	3624 <prvNotifyQueueSetContainer+0x8c>
    35e6:	0020      	movs	r0, r4
    35e8:	4b2a      	ldr	r3, [pc, #168]	; (3694 <prvNotifyQueueSetContainer+0xfc>)
    35ea:	4798      	blx	r3
    35ec:	4b28      	ldr	r3, [pc, #160]	; (3690 <prvNotifyQueueSetContainer+0xf8>)
    35ee:	881b      	ldrh	r3, [r3, #0]
    35f0:	4203      	tst	r3, r0
    35f2:	d017      	beq.n	3624 <prvNotifyQueueSetContainer+0x8c>
    35f4:	3625      	adds	r6, #37	; 0x25
    35f6:	9b00      	ldr	r3, [sp, #0]
    35f8:	2b00      	cmp	r3, #0
    35fa:	d106      	bne.n	360a <prvNotifyQueueSetContainer+0x72>
    35fc:	0020      	movs	r0, r4
    35fe:	4b26      	ldr	r3, [pc, #152]	; (3698 <prvNotifyQueueSetContainer+0x100>)
    3600:	4798      	blx	r3
    3602:	4b26      	ldr	r3, [pc, #152]	; (369c <prvNotifyQueueSetContainer+0x104>)
    3604:	5c1e      	ldrb	r6, [r3, r0]
    3606:	3620      	adds	r6, #32
    3608:	b2f6      	uxtb	r6, r6
    360a:	0020      	movs	r0, r4
    360c:	4b22      	ldr	r3, [pc, #136]	; (3698 <prvNotifyQueueSetContainer+0x100>)
    360e:	4798      	blx	r3
    3610:	4b22      	ldr	r3, [pc, #136]	; (369c <prvNotifyQueueSetContainer+0x104>)
    3612:	5c1f      	ldrb	r7, [r3, r0]
    3614:	0020      	movs	r0, r4
    3616:	4b22      	ldr	r3, [pc, #136]	; (36a0 <prvNotifyQueueSetContainer+0x108>)
    3618:	4798      	blx	r3
    361a:	b2c2      	uxtb	r2, r0
    361c:	0039      	movs	r1, r7
    361e:	0030      	movs	r0, r6
    3620:	4b20      	ldr	r3, [pc, #128]	; (36a4 <prvNotifyQueueSetContainer+0x10c>)
    3622:	4798      	blx	r3
    3624:	0020      	movs	r0, r4
    3626:	4f1c      	ldr	r7, [pc, #112]	; (3698 <prvNotifyQueueSetContainer+0x100>)
    3628:	47b8      	blx	r7
    362a:	4e1c      	ldr	r6, [pc, #112]	; (369c <prvNotifyQueueSetContainer+0x104>)
    362c:	5c33      	ldrb	r3, [r6, r0]
    362e:	4698      	mov	r8, r3
    3630:	0020      	movs	r0, r4
    3632:	4b1b      	ldr	r3, [pc, #108]	; (36a0 <prvNotifyQueueSetContainer+0x108>)
    3634:	4798      	blx	r3
    3636:	b2c3      	uxtb	r3, r0
    3638:	4699      	mov	r9, r3
    363a:	0020      	movs	r0, r4
    363c:	47b8      	blx	r7
    363e:	5c33      	ldrb	r3, [r6, r0]
    3640:	2b02      	cmp	r3, #2
    3642:	d019      	beq.n	3678 <prvNotifyQueueSetContainer+0xe0>
    3644:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3646:	3201      	adds	r2, #1
    3648:	b2d2      	uxtb	r2, r2
    364a:	4649      	mov	r1, r9
    364c:	4640      	mov	r0, r8
    364e:	4b16      	ldr	r3, [pc, #88]	; (36a8 <prvNotifyQueueSetContainer+0x110>)
    3650:	4798      	blx	r3
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    3652:	9a00      	ldr	r2, [sp, #0]
    3654:	a901      	add	r1, sp, #4
    3656:	0020      	movs	r0, r4
    3658:	4b14      	ldr	r3, [pc, #80]	; (36ac <prvNotifyQueueSetContainer+0x114>)
    365a:	4798      	blx	r3
    365c:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
    365e:	1c6b      	adds	r3, r5, #1
    3660:	d10c      	bne.n	367c <prvNotifyQueueSetContainer+0xe4>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    3662:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3664:	2b00      	cmp	r3, #0
    3666:	d0ad      	beq.n	35c4 <prvNotifyQueueSetContainer+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    3668:	0020      	movs	r0, r4
    366a:	3024      	adds	r0, #36	; 0x24
    366c:	4b10      	ldr	r3, [pc, #64]	; (36b0 <prvNotifyQueueSetContainer+0x118>)
    366e:	4798      	blx	r3
    3670:	2800      	cmp	r0, #0
    3672:	d0a7      	beq.n	35c4 <prvNotifyQueueSetContainer+0x2c>
						xReturn = pdTRUE;
    3674:	2601      	movs	r6, #1
    3676:	e7a5      	b.n	35c4 <prvNotifyQueueSetContainer+0x2c>
			traceQUEUE_SEND( pxQueueSetContainer );
    3678:	2200      	movs	r2, #0
    367a:	e7e6      	b.n	364a <prvNotifyQueueSetContainer+0xb2>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    367c:	3501      	adds	r5, #1
    367e:	b26d      	sxtb	r5, r5
    3680:	2345      	movs	r3, #69	; 0x45
    3682:	54e5      	strb	r5, [r4, r3]
    3684:	e79e      	b.n	35c4 <prvNotifyQueueSetContainer+0x2c>
    3686:	46c0      	nop			; (mov r8, r8)
    3688:	000021e1 	.word	0x000021e1
    368c:	00002129 	.word	0x00002129
    3690:	20000020 	.word	0x20000020
    3694:	0000218d 	.word	0x0000218d
    3698:	0000210d 	.word	0x0000210d
    369c:	20000018 	.word	0x20000018
    36a0:	0000217d 	.word	0x0000217d
    36a4:	00002e19 	.word	0x00002e19
    36a8:	000028ed 	.word	0x000028ed
    36ac:	0000351d 	.word	0x0000351d
    36b0:	0000514d 	.word	0x0000514d

000036b4 <prvCopyDataFromQueue>:
{
    36b4:	b510      	push	{r4, lr}
    36b6:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    36b8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    36ba:	2a00      	cmp	r2, #0
    36bc:	d00b      	beq.n	36d6 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    36be:	68c3      	ldr	r3, [r0, #12]
    36c0:	189b      	adds	r3, r3, r2
    36c2:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    36c4:	6841      	ldr	r1, [r0, #4]
    36c6:	428b      	cmp	r3, r1
    36c8:	d301      	bcc.n	36ce <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    36ca:	6803      	ldr	r3, [r0, #0]
    36cc:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    36ce:	68c1      	ldr	r1, [r0, #12]
    36d0:	0020      	movs	r0, r4
    36d2:	4b01      	ldr	r3, [pc, #4]	; (36d8 <prvCopyDataFromQueue+0x24>)
    36d4:	4798      	blx	r3
}
    36d6:	bd10      	pop	{r4, pc}
    36d8:	00009a7d 	.word	0x00009a7d

000036dc <prvUnlockQueue>:
{
    36dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36de:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
    36e0:	4b25      	ldr	r3, [pc, #148]	; (3778 <prvUnlockQueue+0x9c>)
    36e2:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    36e4:	2345      	movs	r3, #69	; 0x45
    36e6:	5cfc      	ldrb	r4, [r7, r3]
    36e8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    36ea:	2c00      	cmp	r4, #0
    36ec:	dd1c      	ble.n	3728 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    36ee:	4e23      	ldr	r6, [pc, #140]	; (377c <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    36f0:	4d23      	ldr	r5, [pc, #140]	; (3780 <prvUnlockQueue+0xa4>)
    36f2:	e00b      	b.n	370c <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    36f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36f6:	2b00      	cmp	r3, #0
    36f8:	d016      	beq.n	3728 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    36fa:	0038      	movs	r0, r7
    36fc:	3024      	adds	r0, #36	; 0x24
    36fe:	47a8      	blx	r5
    3700:	2800      	cmp	r0, #0
    3702:	d10e      	bne.n	3722 <prvUnlockQueue+0x46>
    3704:	3c01      	subs	r4, #1
    3706:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    3708:	2c00      	cmp	r4, #0
    370a:	d00d      	beq.n	3728 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    370c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    370e:	2b00      	cmp	r3, #0
    3710:	d0f0      	beq.n	36f4 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    3712:	2100      	movs	r1, #0
    3714:	0038      	movs	r0, r7
    3716:	47b0      	blx	r6
    3718:	2800      	cmp	r0, #0
    371a:	d0f3      	beq.n	3704 <prvUnlockQueue+0x28>
						vTaskMissedYield();
    371c:	4b19      	ldr	r3, [pc, #100]	; (3784 <prvUnlockQueue+0xa8>)
    371e:	4798      	blx	r3
    3720:	e7f0      	b.n	3704 <prvUnlockQueue+0x28>
							vTaskMissedYield();
    3722:	4b18      	ldr	r3, [pc, #96]	; (3784 <prvUnlockQueue+0xa8>)
    3724:	4798      	blx	r3
    3726:	e7ed      	b.n	3704 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
    3728:	22ff      	movs	r2, #255	; 0xff
    372a:	2345      	movs	r3, #69	; 0x45
    372c:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    372e:	4b16      	ldr	r3, [pc, #88]	; (3788 <prvUnlockQueue+0xac>)
    3730:	4798      	blx	r3
	taskENTER_CRITICAL();
    3732:	4b11      	ldr	r3, [pc, #68]	; (3778 <prvUnlockQueue+0x9c>)
    3734:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    3736:	2344      	movs	r3, #68	; 0x44
    3738:	5cfc      	ldrb	r4, [r7, r3]
    373a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    373c:	2c00      	cmp	r4, #0
    373e:	dd14      	ble.n	376a <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3740:	693b      	ldr	r3, [r7, #16]
    3742:	2b00      	cmp	r3, #0
    3744:	d011      	beq.n	376a <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3746:	003d      	movs	r5, r7
    3748:	3510      	adds	r5, #16
    374a:	4e0d      	ldr	r6, [pc, #52]	; (3780 <prvUnlockQueue+0xa4>)
    374c:	e006      	b.n	375c <prvUnlockQueue+0x80>
    374e:	3c01      	subs	r4, #1
    3750:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    3752:	2c00      	cmp	r4, #0
    3754:	d009      	beq.n	376a <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3756:	693b      	ldr	r3, [r7, #16]
    3758:	2b00      	cmp	r3, #0
    375a:	d006      	beq.n	376a <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    375c:	0028      	movs	r0, r5
    375e:	47b0      	blx	r6
    3760:	2800      	cmp	r0, #0
    3762:	d0f4      	beq.n	374e <prvUnlockQueue+0x72>
					vTaskMissedYield();
    3764:	4b07      	ldr	r3, [pc, #28]	; (3784 <prvUnlockQueue+0xa8>)
    3766:	4798      	blx	r3
    3768:	e7f1      	b.n	374e <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
    376a:	22ff      	movs	r2, #255	; 0xff
    376c:	2344      	movs	r3, #68	; 0x44
    376e:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    3770:	4b05      	ldr	r3, [pc, #20]	; (3788 <prvUnlockQueue+0xac>)
    3772:	4798      	blx	r3
}
    3774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3776:	46c0      	nop			; (mov r8, r8)
    3778:	00003391 	.word	0x00003391
    377c:	00003599 	.word	0x00003599
    3780:	0000514d 	.word	0x0000514d
    3784:	00005289 	.word	0x00005289
    3788:	000033a9 	.word	0x000033a9

0000378c <xQueueGenericReset>:
{
    378c:	b570      	push	{r4, r5, r6, lr}
    378e:	0004      	movs	r4, r0
    3790:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    3792:	2800      	cmp	r0, #0
    3794:	d021      	beq.n	37da <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
    3796:	4b17      	ldr	r3, [pc, #92]	; (37f4 <xQueueGenericReset+0x68>)
    3798:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    379a:	6822      	ldr	r2, [r4, #0]
    379c:	6c21      	ldr	r1, [r4, #64]	; 0x40
    379e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    37a0:	434b      	muls	r3, r1
    37a2:	18d0      	adds	r0, r2, r3
    37a4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    37a6:	2000      	movs	r0, #0
    37a8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    37aa:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    37ac:	1a5b      	subs	r3, r3, r1
    37ae:	18d3      	adds	r3, r2, r3
    37b0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    37b2:	23ff      	movs	r3, #255	; 0xff
    37b4:	2244      	movs	r2, #68	; 0x44
    37b6:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    37b8:	3201      	adds	r2, #1
    37ba:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
    37bc:	2d00      	cmp	r5, #0
    37be:	d111      	bne.n	37e4 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    37c0:	6923      	ldr	r3, [r4, #16]
    37c2:	2b00      	cmp	r3, #0
    37c4:	d005      	beq.n	37d2 <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    37c6:	0020      	movs	r0, r4
    37c8:	3010      	adds	r0, #16
    37ca:	4b0b      	ldr	r3, [pc, #44]	; (37f8 <xQueueGenericReset+0x6c>)
    37cc:	4798      	blx	r3
    37ce:	2800      	cmp	r0, #0
    37d0:	d105      	bne.n	37de <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
    37d2:	4b0a      	ldr	r3, [pc, #40]	; (37fc <xQueueGenericReset+0x70>)
    37d4:	4798      	blx	r3
}
    37d6:	2001      	movs	r0, #1
    37d8:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    37da:	b672      	cpsid	i
    37dc:	e7fe      	b.n	37dc <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
    37de:	4b08      	ldr	r3, [pc, #32]	; (3800 <xQueueGenericReset+0x74>)
    37e0:	4798      	blx	r3
    37e2:	e7f6      	b.n	37d2 <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    37e4:	0020      	movs	r0, r4
    37e6:	3010      	adds	r0, #16
    37e8:	4d06      	ldr	r5, [pc, #24]	; (3804 <xQueueGenericReset+0x78>)
    37ea:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    37ec:	0020      	movs	r0, r4
    37ee:	3024      	adds	r0, #36	; 0x24
    37f0:	47a8      	blx	r5
    37f2:	e7ee      	b.n	37d2 <xQueueGenericReset+0x46>
    37f4:	00003391 	.word	0x00003391
    37f8:	0000514d 	.word	0x0000514d
    37fc:	000033a9 	.word	0x000033a9
    3800:	00003381 	.word	0x00003381
    3804:	000031fd 	.word	0x000031fd

00003808 <xQueueGenericCreate>:
	{
    3808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    380a:	0006      	movs	r6, r0
    380c:	000d      	movs	r5, r1
    380e:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    3810:	2800      	cmp	r0, #0
    3812:	d101      	bne.n	3818 <xQueueGenericCreate+0x10>
    3814:	b672      	cpsid	i
    3816:	e7fe      	b.n	3816 <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3818:	0008      	movs	r0, r1
    381a:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    381c:	3054      	adds	r0, #84	; 0x54
    381e:	4b38      	ldr	r3, [pc, #224]	; (3900 <xQueueGenericCreate+0xf8>)
    3820:	4798      	blx	r3
    3822:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    3824:	d05b      	beq.n	38de <xQueueGenericCreate+0xd6>
	if( uxItemSize == ( UBaseType_t ) 0 )
    3826:	2d00      	cmp	r5, #0
    3828:	d13b      	bne.n	38a2 <xQueueGenericCreate+0x9a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    382a:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    382c:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    382e:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    3830:	2101      	movs	r1, #1
    3832:	0020      	movs	r0, r4
    3834:	4b33      	ldr	r3, [pc, #204]	; (3904 <xQueueGenericCreate+0xfc>)
    3836:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    3838:	2350      	movs	r3, #80	; 0x50
    383a:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
    383c:	2300      	movs	r3, #0
    383e:	64a3      	str	r3, [r4, #72]	; 0x48
	traceQUEUE_CREATE( pxNewQueue );
    3840:	0020      	movs	r0, r4
    3842:	4e31      	ldr	r6, [pc, #196]	; (3908 <xQueueGenericCreate+0x100>)
    3844:	47b0      	blx	r6
    3846:	4d31      	ldr	r5, [pc, #196]	; (390c <xQueueGenericCreate+0x104>)
    3848:	5c28      	ldrb	r0, [r5, r0]
    384a:	4b31      	ldr	r3, [pc, #196]	; (3910 <xQueueGenericCreate+0x108>)
    384c:	4798      	blx	r3
    384e:	b281      	uxth	r1, r0
    3850:	0020      	movs	r0, r4
    3852:	4b30      	ldr	r3, [pc, #192]	; (3914 <xQueueGenericCreate+0x10c>)
    3854:	4798      	blx	r3
    3856:	4b30      	ldr	r3, [pc, #192]	; (3918 <xQueueGenericCreate+0x110>)
    3858:	8819      	ldrh	r1, [r3, #0]
    385a:	0020      	movs	r0, r4
    385c:	4b2f      	ldr	r3, [pc, #188]	; (391c <xQueueGenericCreate+0x114>)
    385e:	4798      	blx	r3
    3860:	0020      	movs	r0, r4
    3862:	47b0      	blx	r6
    3864:	5c2d      	ldrb	r5, [r5, r0]
    3866:	0020      	movs	r0, r4
    3868:	4b2d      	ldr	r3, [pc, #180]	; (3920 <xQueueGenericCreate+0x118>)
    386a:	4798      	blx	r3
    386c:	b2c1      	uxtb	r1, r0
    386e:	0028      	movs	r0, r5
    3870:	4b2c      	ldr	r3, [pc, #176]	; (3924 <xQueueGenericCreate+0x11c>)
    3872:	4798      	blx	r3
    3874:	4b2c      	ldr	r3, [pc, #176]	; (3928 <xQueueGenericCreate+0x120>)
    3876:	4798      	blx	r3
    3878:	4b2c      	ldr	r3, [pc, #176]	; (392c <xQueueGenericCreate+0x124>)
    387a:	4798      	blx	r3
    387c:	4b2c      	ldr	r3, [pc, #176]	; (3930 <xQueueGenericCreate+0x128>)
    387e:	881b      	ldrh	r3, [r3, #0]
    3880:	4203      	tst	r3, r0
    3882:	d112      	bne.n	38aa <xQueueGenericCreate+0xa2>
    3884:	0020      	movs	r0, r4
    3886:	4b20      	ldr	r3, [pc, #128]	; (3908 <xQueueGenericCreate+0x100>)
    3888:	4798      	blx	r3
    388a:	4b20      	ldr	r3, [pc, #128]	; (390c <xQueueGenericCreate+0x104>)
    388c:	5c1d      	ldrb	r5, [r3, r0]
    388e:	0020      	movs	r0, r4
    3890:	4b23      	ldr	r3, [pc, #140]	; (3920 <xQueueGenericCreate+0x118>)
    3892:	4798      	blx	r3
    3894:	b2c1      	uxtb	r1, r0
    3896:	2200      	movs	r2, #0
    3898:	0028      	movs	r0, r5
    389a:	4b26      	ldr	r3, [pc, #152]	; (3934 <xQueueGenericCreate+0x12c>)
    389c:	4798      	blx	r3
	}
    389e:	0020      	movs	r0, r4
    38a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    38a2:	0003      	movs	r3, r0
    38a4:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    38a6:	6003      	str	r3, [r0, #0]
    38a8:	e7c0      	b.n	382c <xQueueGenericCreate+0x24>
	traceQUEUE_CREATE( pxNewQueue );
    38aa:	0020      	movs	r0, r4
    38ac:	4b22      	ldr	r3, [pc, #136]	; (3938 <xQueueGenericCreate+0x130>)
    38ae:	4798      	blx	r3
    38b0:	4b1f      	ldr	r3, [pc, #124]	; (3930 <xQueueGenericCreate+0x128>)
    38b2:	881b      	ldrh	r3, [r3, #0]
    38b4:	4203      	tst	r3, r0
    38b6:	d0e5      	beq.n	3884 <xQueueGenericCreate+0x7c>
    38b8:	0020      	movs	r0, r4
    38ba:	4f13      	ldr	r7, [pc, #76]	; (3908 <xQueueGenericCreate+0x100>)
    38bc:	47b8      	blx	r7
    38be:	4e13      	ldr	r6, [pc, #76]	; (390c <xQueueGenericCreate+0x104>)
    38c0:	5c35      	ldrb	r5, [r6, r0]
    38c2:	3518      	adds	r5, #24
    38c4:	b2ed      	uxtb	r5, r5
    38c6:	0020      	movs	r0, r4
    38c8:	47b8      	blx	r7
    38ca:	5c36      	ldrb	r6, [r6, r0]
    38cc:	0020      	movs	r0, r4
    38ce:	4b14      	ldr	r3, [pc, #80]	; (3920 <xQueueGenericCreate+0x118>)
    38d0:	4798      	blx	r3
    38d2:	b2c2      	uxtb	r2, r0
    38d4:	0031      	movs	r1, r6
    38d6:	0028      	movs	r0, r5
    38d8:	4b18      	ldr	r3, [pc, #96]	; (393c <xQueueGenericCreate+0x134>)
    38da:	4798      	blx	r3
    38dc:	e7d2      	b.n	3884 <xQueueGenericCreate+0x7c>
			traceQUEUE_CREATE_FAILED( ucQueueType );
    38de:	4b12      	ldr	r3, [pc, #72]	; (3928 <xQueueGenericCreate+0x120>)
    38e0:	4798      	blx	r3
    38e2:	4b12      	ldr	r3, [pc, #72]	; (392c <xQueueGenericCreate+0x124>)
    38e4:	4798      	blx	r3
    38e6:	4b12      	ldr	r3, [pc, #72]	; (3930 <xQueueGenericCreate+0x128>)
    38e8:	881b      	ldrh	r3, [r3, #0]
    38ea:	4203      	tst	r3, r0
    38ec:	d0d7      	beq.n	389e <xQueueGenericCreate+0x96>
    38ee:	4b07      	ldr	r3, [pc, #28]	; (390c <xQueueGenericCreate+0x104>)
    38f0:	5dd8      	ldrb	r0, [r3, r7]
    38f2:	3040      	adds	r0, #64	; 0x40
    38f4:	b2c0      	uxtb	r0, r0
    38f6:	2100      	movs	r1, #0
    38f8:	4b11      	ldr	r3, [pc, #68]	; (3940 <xQueueGenericCreate+0x138>)
    38fa:	4798      	blx	r3
    38fc:	e7cf      	b.n	389e <xQueueGenericCreate+0x96>
    38fe:	46c0      	nop			; (mov r8, r8)
    3900:	00003455 	.word	0x00003455
    3904:	0000378d 	.word	0x0000378d
    3908:	0000210d 	.word	0x0000210d
    390c:	20000018 	.word	0x20000018
    3910:	00002985 	.word	0x00002985
    3914:	0000219d 	.word	0x0000219d
    3918:	2000001e 	.word	0x2000001e
    391c:	000021bd 	.word	0x000021bd
    3920:	0000217d 	.word	0x0000217d
    3924:	00002815 	.word	0x00002815
    3928:	000021e1 	.word	0x000021e1
    392c:	00002129 	.word	0x00002129
    3930:	20000020 	.word	0x20000020
    3934:	000028ed 	.word	0x000028ed
    3938:	0000218d 	.word	0x0000218d
    393c:	00002e19 	.word	0x00002e19
    3940:	00002fb5 	.word	0x00002fb5

00003944 <xQueueGenericSend>:
{
    3944:	b5f0      	push	{r4, r5, r6, r7, lr}
    3946:	46ce      	mov	lr, r9
    3948:	4647      	mov	r7, r8
    394a:	b580      	push	{r7, lr}
    394c:	b085      	sub	sp, #20
    394e:	0004      	movs	r4, r0
    3950:	9100      	str	r1, [sp, #0]
    3952:	9201      	str	r2, [sp, #4]
    3954:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    3956:	2800      	cmp	r0, #0
    3958:	d00d      	beq.n	3976 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    395a:	9b00      	ldr	r3, [sp, #0]
    395c:	2b00      	cmp	r3, #0
    395e:	d00c      	beq.n	397a <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    3960:	2d02      	cmp	r5, #2
    3962:	d00f      	beq.n	3984 <xQueueGenericSend+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3964:	4bab      	ldr	r3, [pc, #684]	; (3c14 <xQueueGenericSend+0x2d0>)
    3966:	4798      	blx	r3
    3968:	2800      	cmp	r0, #0
    396a:	d110      	bne.n	398e <xQueueGenericSend+0x4a>
    396c:	9b01      	ldr	r3, [sp, #4]
    396e:	2b00      	cmp	r3, #0
    3970:	d010      	beq.n	3994 <xQueueGenericSend+0x50>
    3972:	b672      	cpsid	i
    3974:	e7fe      	b.n	3974 <xQueueGenericSend+0x30>
	configASSERT( pxQueue );
    3976:	b672      	cpsid	i
    3978:	e7fe      	b.n	3978 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    397a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    397c:	2b00      	cmp	r3, #0
    397e:	d0ef      	beq.n	3960 <xQueueGenericSend+0x1c>
    3980:	b672      	cpsid	i
    3982:	e7fe      	b.n	3982 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    3984:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3986:	2b01      	cmp	r3, #1
    3988:	d0ec      	beq.n	3964 <xQueueGenericSend+0x20>
    398a:	b672      	cpsid	i
    398c:	e7fe      	b.n	398c <xQueueGenericSend+0x48>
    398e:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    3990:	4ea1      	ldr	r6, [pc, #644]	; (3c18 <xQueueGenericSend+0x2d4>)
    3992:	e0bc      	b.n	3b0e <xQueueGenericSend+0x1ca>
    3994:	2700      	movs	r7, #0
    3996:	e7fb      	b.n	3990 <xQueueGenericSend+0x4c>
				traceQUEUE_SEND( pxQueue );
    3998:	4ba0      	ldr	r3, [pc, #640]	; (3c1c <xQueueGenericSend+0x2d8>)
    399a:	4798      	blx	r3
    399c:	4ba0      	ldr	r3, [pc, #640]	; (3c20 <xQueueGenericSend+0x2dc>)
    399e:	4798      	blx	r3
    39a0:	4ba0      	ldr	r3, [pc, #640]	; (3c24 <xQueueGenericSend+0x2e0>)
    39a2:	881b      	ldrh	r3, [r3, #0]
    39a4:	4203      	tst	r3, r0
    39a6:	d01d      	beq.n	39e4 <xQueueGenericSend+0xa0>
    39a8:	0020      	movs	r0, r4
    39aa:	4b9f      	ldr	r3, [pc, #636]	; (3c28 <xQueueGenericSend+0x2e4>)
    39ac:	4798      	blx	r3
    39ae:	4b9d      	ldr	r3, [pc, #628]	; (3c24 <xQueueGenericSend+0x2e0>)
    39b0:	881b      	ldrh	r3, [r3, #0]
    39b2:	4203      	tst	r3, r0
    39b4:	d016      	beq.n	39e4 <xQueueGenericSend+0xa0>
    39b6:	2725      	movs	r7, #37	; 0x25
    39b8:	2d00      	cmp	r5, #0
    39ba:	d106      	bne.n	39ca <xQueueGenericSend+0x86>
    39bc:	0020      	movs	r0, r4
    39be:	4b9b      	ldr	r3, [pc, #620]	; (3c2c <xQueueGenericSend+0x2e8>)
    39c0:	4798      	blx	r3
    39c2:	4b9b      	ldr	r3, [pc, #620]	; (3c30 <xQueueGenericSend+0x2ec>)
    39c4:	5c1f      	ldrb	r7, [r3, r0]
    39c6:	3720      	adds	r7, #32
    39c8:	b2ff      	uxtb	r7, r7
    39ca:	0020      	movs	r0, r4
    39cc:	4b97      	ldr	r3, [pc, #604]	; (3c2c <xQueueGenericSend+0x2e8>)
    39ce:	4798      	blx	r3
    39d0:	4b97      	ldr	r3, [pc, #604]	; (3c30 <xQueueGenericSend+0x2ec>)
    39d2:	5c1e      	ldrb	r6, [r3, r0]
    39d4:	0020      	movs	r0, r4
    39d6:	4b97      	ldr	r3, [pc, #604]	; (3c34 <xQueueGenericSend+0x2f0>)
    39d8:	4798      	blx	r3
    39da:	b2c2      	uxtb	r2, r0
    39dc:	0031      	movs	r1, r6
    39de:	0038      	movs	r0, r7
    39e0:	4b95      	ldr	r3, [pc, #596]	; (3c38 <xQueueGenericSend+0x2f4>)
    39e2:	4798      	blx	r3
    39e4:	0020      	movs	r0, r4
    39e6:	4e91      	ldr	r6, [pc, #580]	; (3c2c <xQueueGenericSend+0x2e8>)
    39e8:	47b0      	blx	r6
    39ea:	4f91      	ldr	r7, [pc, #580]	; (3c30 <xQueueGenericSend+0x2ec>)
    39ec:	5c3b      	ldrb	r3, [r7, r0]
    39ee:	4698      	mov	r8, r3
    39f0:	0020      	movs	r0, r4
    39f2:	4b90      	ldr	r3, [pc, #576]	; (3c34 <xQueueGenericSend+0x2f0>)
    39f4:	4798      	blx	r3
    39f6:	b2c3      	uxtb	r3, r0
    39f8:	4699      	mov	r9, r3
    39fa:	0020      	movs	r0, r4
    39fc:	47b0      	blx	r6
    39fe:	5c3b      	ldrb	r3, [r7, r0]
    3a00:	2b02      	cmp	r3, #2
    3a02:	d01f      	beq.n	3a44 <xQueueGenericSend+0x100>
    3a04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3a06:	3201      	adds	r2, #1
    3a08:	b2d2      	uxtb	r2, r2
    3a0a:	4649      	mov	r1, r9
    3a0c:	4640      	mov	r0, r8
    3a0e:	4b8b      	ldr	r3, [pc, #556]	; (3c3c <xQueueGenericSend+0x2f8>)
    3a10:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3a12:	002a      	movs	r2, r5
    3a14:	9900      	ldr	r1, [sp, #0]
    3a16:	0020      	movs	r0, r4
    3a18:	4b89      	ldr	r3, [pc, #548]	; (3c40 <xQueueGenericSend+0x2fc>)
    3a1a:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    3a1c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3a1e:	2b00      	cmp	r3, #0
    3a20:	d012      	beq.n	3a48 <xQueueGenericSend+0x104>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    3a22:	0029      	movs	r1, r5
    3a24:	0020      	movs	r0, r4
    3a26:	4b87      	ldr	r3, [pc, #540]	; (3c44 <xQueueGenericSend+0x300>)
    3a28:	4798      	blx	r3
    3a2a:	2800      	cmp	r0, #0
    3a2c:	d001      	beq.n	3a32 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
    3a2e:	4b86      	ldr	r3, [pc, #536]	; (3c48 <xQueueGenericSend+0x304>)
    3a30:	4798      	blx	r3
				taskEXIT_CRITICAL();
    3a32:	4b86      	ldr	r3, [pc, #536]	; (3c4c <xQueueGenericSend+0x308>)
    3a34:	4798      	blx	r3
				return pdPASS;
    3a36:	2301      	movs	r3, #1
}
    3a38:	0018      	movs	r0, r3
    3a3a:	b005      	add	sp, #20
    3a3c:	bc0c      	pop	{r2, r3}
    3a3e:	4690      	mov	r8, r2
    3a40:	4699      	mov	r9, r3
    3a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_SEND( pxQueue );
    3a44:	2200      	movs	r2, #0
    3a46:	e7e0      	b.n	3a0a <xQueueGenericSend+0xc6>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3a4a:	2b00      	cmp	r3, #0
    3a4c:	d008      	beq.n	3a60 <xQueueGenericSend+0x11c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3a4e:	0020      	movs	r0, r4
    3a50:	3024      	adds	r0, #36	; 0x24
    3a52:	4b7f      	ldr	r3, [pc, #508]	; (3c50 <xQueueGenericSend+0x30c>)
    3a54:	4798      	blx	r3
    3a56:	2800      	cmp	r0, #0
    3a58:	d0eb      	beq.n	3a32 <xQueueGenericSend+0xee>
								queueYIELD_IF_USING_PREEMPTION();
    3a5a:	4b7b      	ldr	r3, [pc, #492]	; (3c48 <xQueueGenericSend+0x304>)
    3a5c:	4798      	blx	r3
    3a5e:	e7e8      	b.n	3a32 <xQueueGenericSend+0xee>
						else if( xYieldRequired != pdFALSE )
    3a60:	2800      	cmp	r0, #0
    3a62:	d0e6      	beq.n	3a32 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
    3a64:	4b78      	ldr	r3, [pc, #480]	; (3c48 <xQueueGenericSend+0x304>)
    3a66:	4798      	blx	r3
    3a68:	e7e3      	b.n	3a32 <xQueueGenericSend+0xee>
					taskEXIT_CRITICAL();
    3a6a:	4b78      	ldr	r3, [pc, #480]	; (3c4c <xQueueGenericSend+0x308>)
    3a6c:	4798      	blx	r3
					traceQUEUE_SEND_FAILED( pxQueue );
    3a6e:	4b6b      	ldr	r3, [pc, #428]	; (3c1c <xQueueGenericSend+0x2d8>)
    3a70:	4798      	blx	r3
    3a72:	4b6b      	ldr	r3, [pc, #428]	; (3c20 <xQueueGenericSend+0x2dc>)
    3a74:	4798      	blx	r3
    3a76:	4b6b      	ldr	r3, [pc, #428]	; (3c24 <xQueueGenericSend+0x2e0>)
    3a78:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
    3a7a:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
    3a7c:	4202      	tst	r2, r0
    3a7e:	d0db      	beq.n	3a38 <xQueueGenericSend+0xf4>
    3a80:	0020      	movs	r0, r4
    3a82:	4b69      	ldr	r3, [pc, #420]	; (3c28 <xQueueGenericSend+0x2e4>)
    3a84:	4798      	blx	r3
    3a86:	4b67      	ldr	r3, [pc, #412]	; (3c24 <xQueueGenericSend+0x2e0>)
    3a88:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
    3a8a:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
    3a8c:	4202      	tst	r2, r0
    3a8e:	d0d3      	beq.n	3a38 <xQueueGenericSend+0xf4>
    3a90:	264d      	movs	r6, #77	; 0x4d
    3a92:	2d00      	cmp	r5, #0
    3a94:	d106      	bne.n	3aa4 <xQueueGenericSend+0x160>
    3a96:	0020      	movs	r0, r4
    3a98:	4b64      	ldr	r3, [pc, #400]	; (3c2c <xQueueGenericSend+0x2e8>)
    3a9a:	4798      	blx	r3
    3a9c:	4b64      	ldr	r3, [pc, #400]	; (3c30 <xQueueGenericSend+0x2ec>)
    3a9e:	5c1e      	ldrb	r6, [r3, r0]
    3aa0:	3648      	adds	r6, #72	; 0x48
    3aa2:	b2f6      	uxtb	r6, r6
    3aa4:	0020      	movs	r0, r4
    3aa6:	4b61      	ldr	r3, [pc, #388]	; (3c2c <xQueueGenericSend+0x2e8>)
    3aa8:	4798      	blx	r3
    3aaa:	4b61      	ldr	r3, [pc, #388]	; (3c30 <xQueueGenericSend+0x2ec>)
    3aac:	5c1d      	ldrb	r5, [r3, r0]
    3aae:	0020      	movs	r0, r4
    3ab0:	4b60      	ldr	r3, [pc, #384]	; (3c34 <xQueueGenericSend+0x2f0>)
    3ab2:	4798      	blx	r3
    3ab4:	b2c2      	uxtb	r2, r0
    3ab6:	0029      	movs	r1, r5
    3ab8:	0030      	movs	r0, r6
    3aba:	4b5f      	ldr	r3, [pc, #380]	; (3c38 <xQueueGenericSend+0x2f4>)
    3abc:	4798      	blx	r3
					return errQUEUE_FULL;
    3abe:	2300      	movs	r3, #0
    3ac0:	e7ba      	b.n	3a38 <xQueueGenericSend+0xf4>
		prvLockQueue( pxQueue );
    3ac2:	4b62      	ldr	r3, [pc, #392]	; (3c4c <xQueueGenericSend+0x308>)
    3ac4:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3ac6:	a901      	add	r1, sp, #4
    3ac8:	a802      	add	r0, sp, #8
    3aca:	4b62      	ldr	r3, [pc, #392]	; (3c54 <xQueueGenericSend+0x310>)
    3acc:	4798      	blx	r3
    3ace:	2800      	cmp	r0, #0
    3ad0:	d16e      	bne.n	3bb0 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
    3ad2:	4b51      	ldr	r3, [pc, #324]	; (3c18 <xQueueGenericSend+0x2d4>)
    3ad4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    3ad6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3ad8:	4699      	mov	r9, r3
    3ada:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    3adc:	4b5b      	ldr	r3, [pc, #364]	; (3c4c <xQueueGenericSend+0x308>)
    3ade:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3ae0:	45b9      	cmp	r9, r7
    3ae2:	d15f      	bne.n	3ba4 <xQueueGenericSend+0x260>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    3ae4:	4b4d      	ldr	r3, [pc, #308]	; (3c1c <xQueueGenericSend+0x2d8>)
    3ae6:	4798      	blx	r3
    3ae8:	4b4d      	ldr	r3, [pc, #308]	; (3c20 <xQueueGenericSend+0x2dc>)
    3aea:	4798      	blx	r3
    3aec:	4b4d      	ldr	r3, [pc, #308]	; (3c24 <xQueueGenericSend+0x2e0>)
    3aee:	881b      	ldrh	r3, [r3, #0]
    3af0:	4203      	tst	r3, r0
    3af2:	d134      	bne.n	3b5e <xQueueGenericSend+0x21a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3af4:	0020      	movs	r0, r4
    3af6:	3010      	adds	r0, #16
    3af8:	9901      	ldr	r1, [sp, #4]
    3afa:	4b57      	ldr	r3, [pc, #348]	; (3c58 <xQueueGenericSend+0x314>)
    3afc:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    3afe:	0020      	movs	r0, r4
    3b00:	4b56      	ldr	r3, [pc, #344]	; (3c5c <xQueueGenericSend+0x318>)
    3b02:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    3b04:	4b56      	ldr	r3, [pc, #344]	; (3c60 <xQueueGenericSend+0x31c>)
    3b06:	4798      	blx	r3
    3b08:	2800      	cmp	r0, #0
    3b0a:	d048      	beq.n	3b9e <xQueueGenericSend+0x25a>
    3b0c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    3b0e:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3b10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3b12:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3b14:	4293      	cmp	r3, r2
    3b16:	d200      	bcs.n	3b1a <xQueueGenericSend+0x1d6>
    3b18:	e73e      	b.n	3998 <xQueueGenericSend+0x54>
    3b1a:	2d02      	cmp	r5, #2
    3b1c:	d100      	bne.n	3b20 <xQueueGenericSend+0x1dc>
    3b1e:	e73b      	b.n	3998 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
    3b20:	9b01      	ldr	r3, [sp, #4]
    3b22:	2b00      	cmp	r3, #0
    3b24:	d0a1      	beq.n	3a6a <xQueueGenericSend+0x126>
				else if( xEntryTimeSet == pdFALSE )
    3b26:	2f00      	cmp	r7, #0
    3b28:	d102      	bne.n	3b30 <xQueueGenericSend+0x1ec>
					vTaskInternalSetTimeOutState( &xTimeOut );
    3b2a:	a802      	add	r0, sp, #8
    3b2c:	4b4d      	ldr	r3, [pc, #308]	; (3c64 <xQueueGenericSend+0x320>)
    3b2e:	4798      	blx	r3
		taskEXIT_CRITICAL();
    3b30:	4b46      	ldr	r3, [pc, #280]	; (3c4c <xQueueGenericSend+0x308>)
    3b32:	4798      	blx	r3
		vTaskSuspendAll();
    3b34:	4b4c      	ldr	r3, [pc, #304]	; (3c68 <xQueueGenericSend+0x324>)
    3b36:	4798      	blx	r3
		prvLockQueue( pxQueue );
    3b38:	4b37      	ldr	r3, [pc, #220]	; (3c18 <xQueueGenericSend+0x2d4>)
    3b3a:	4798      	blx	r3
    3b3c:	2344      	movs	r3, #68	; 0x44
    3b3e:	5ce3      	ldrb	r3, [r4, r3]
    3b40:	b25b      	sxtb	r3, r3
    3b42:	3301      	adds	r3, #1
    3b44:	d102      	bne.n	3b4c <xQueueGenericSend+0x208>
    3b46:	2200      	movs	r2, #0
    3b48:	2344      	movs	r3, #68	; 0x44
    3b4a:	54e2      	strb	r2, [r4, r3]
    3b4c:	2345      	movs	r3, #69	; 0x45
    3b4e:	5ce3      	ldrb	r3, [r4, r3]
    3b50:	b25b      	sxtb	r3, r3
    3b52:	3301      	adds	r3, #1
    3b54:	d1b5      	bne.n	3ac2 <xQueueGenericSend+0x17e>
    3b56:	2200      	movs	r2, #0
    3b58:	2345      	movs	r3, #69	; 0x45
    3b5a:	54e2      	strb	r2, [r4, r3]
    3b5c:	e7b1      	b.n	3ac2 <xQueueGenericSend+0x17e>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    3b5e:	0020      	movs	r0, r4
    3b60:	4b31      	ldr	r3, [pc, #196]	; (3c28 <xQueueGenericSend+0x2e4>)
    3b62:	4798      	blx	r3
    3b64:	4b2f      	ldr	r3, [pc, #188]	; (3c24 <xQueueGenericSend+0x2e0>)
    3b66:	881b      	ldrh	r3, [r3, #0]
    3b68:	4203      	tst	r3, r0
    3b6a:	d0c3      	beq.n	3af4 <xQueueGenericSend+0x1b0>
    3b6c:	2775      	movs	r7, #117	; 0x75
    3b6e:	2d00      	cmp	r5, #0
    3b70:	d106      	bne.n	3b80 <xQueueGenericSend+0x23c>
    3b72:	0020      	movs	r0, r4
    3b74:	4b2d      	ldr	r3, [pc, #180]	; (3c2c <xQueueGenericSend+0x2e8>)
    3b76:	4798      	blx	r3
    3b78:	4b2d      	ldr	r3, [pc, #180]	; (3c30 <xQueueGenericSend+0x2ec>)
    3b7a:	5c1f      	ldrb	r7, [r3, r0]
    3b7c:	3770      	adds	r7, #112	; 0x70
    3b7e:	b2ff      	uxtb	r7, r7
    3b80:	0020      	movs	r0, r4
    3b82:	4b2a      	ldr	r3, [pc, #168]	; (3c2c <xQueueGenericSend+0x2e8>)
    3b84:	4798      	blx	r3
    3b86:	4b2a      	ldr	r3, [pc, #168]	; (3c30 <xQueueGenericSend+0x2ec>)
    3b88:	5c1b      	ldrb	r3, [r3, r0]
    3b8a:	4699      	mov	r9, r3
    3b8c:	0020      	movs	r0, r4
    3b8e:	4b29      	ldr	r3, [pc, #164]	; (3c34 <xQueueGenericSend+0x2f0>)
    3b90:	4798      	blx	r3
    3b92:	b2c2      	uxtb	r2, r0
    3b94:	4649      	mov	r1, r9
    3b96:	0038      	movs	r0, r7
    3b98:	4b27      	ldr	r3, [pc, #156]	; (3c38 <xQueueGenericSend+0x2f4>)
    3b9a:	4798      	blx	r3
    3b9c:	e7aa      	b.n	3af4 <xQueueGenericSend+0x1b0>
					portYIELD_WITHIN_API();
    3b9e:	4b2a      	ldr	r3, [pc, #168]	; (3c48 <xQueueGenericSend+0x304>)
    3ba0:	4798      	blx	r3
    3ba2:	e7b3      	b.n	3b0c <xQueueGenericSend+0x1c8>
				prvUnlockQueue( pxQueue );
    3ba4:	0020      	movs	r0, r4
    3ba6:	4b2d      	ldr	r3, [pc, #180]	; (3c5c <xQueueGenericSend+0x318>)
    3ba8:	4798      	blx	r3
				( void ) xTaskResumeAll();
    3baa:	4b2d      	ldr	r3, [pc, #180]	; (3c60 <xQueueGenericSend+0x31c>)
    3bac:	4798      	blx	r3
    3bae:	e7ad      	b.n	3b0c <xQueueGenericSend+0x1c8>
			prvUnlockQueue( pxQueue );
    3bb0:	0020      	movs	r0, r4
    3bb2:	4b2a      	ldr	r3, [pc, #168]	; (3c5c <xQueueGenericSend+0x318>)
    3bb4:	4798      	blx	r3
			( void ) xTaskResumeAll();
    3bb6:	4b2a      	ldr	r3, [pc, #168]	; (3c60 <xQueueGenericSend+0x31c>)
    3bb8:	4798      	blx	r3
			traceQUEUE_SEND_FAILED( pxQueue );
    3bba:	4b18      	ldr	r3, [pc, #96]	; (3c1c <xQueueGenericSend+0x2d8>)
    3bbc:	4798      	blx	r3
    3bbe:	4b18      	ldr	r3, [pc, #96]	; (3c20 <xQueueGenericSend+0x2dc>)
    3bc0:	4798      	blx	r3
    3bc2:	4b18      	ldr	r3, [pc, #96]	; (3c24 <xQueueGenericSend+0x2e0>)
    3bc4:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
    3bc6:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
    3bc8:	4202      	tst	r2, r0
    3bca:	d100      	bne.n	3bce <xQueueGenericSend+0x28a>
    3bcc:	e734      	b.n	3a38 <xQueueGenericSend+0xf4>
    3bce:	0020      	movs	r0, r4
    3bd0:	4b15      	ldr	r3, [pc, #84]	; (3c28 <xQueueGenericSend+0x2e4>)
    3bd2:	4798      	blx	r3
    3bd4:	4b13      	ldr	r3, [pc, #76]	; (3c24 <xQueueGenericSend+0x2e0>)
    3bd6:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
    3bd8:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
    3bda:	4202      	tst	r2, r0
    3bdc:	d100      	bne.n	3be0 <xQueueGenericSend+0x29c>
    3bde:	e72b      	b.n	3a38 <xQueueGenericSend+0xf4>
    3be0:	264d      	movs	r6, #77	; 0x4d
    3be2:	2d00      	cmp	r5, #0
    3be4:	d106      	bne.n	3bf4 <xQueueGenericSend+0x2b0>
    3be6:	0020      	movs	r0, r4
    3be8:	4b10      	ldr	r3, [pc, #64]	; (3c2c <xQueueGenericSend+0x2e8>)
    3bea:	4798      	blx	r3
    3bec:	4b10      	ldr	r3, [pc, #64]	; (3c30 <xQueueGenericSend+0x2ec>)
    3bee:	5c1e      	ldrb	r6, [r3, r0]
    3bf0:	3648      	adds	r6, #72	; 0x48
    3bf2:	b2f6      	uxtb	r6, r6
    3bf4:	0020      	movs	r0, r4
    3bf6:	4b0d      	ldr	r3, [pc, #52]	; (3c2c <xQueueGenericSend+0x2e8>)
    3bf8:	4798      	blx	r3
    3bfa:	4b0d      	ldr	r3, [pc, #52]	; (3c30 <xQueueGenericSend+0x2ec>)
    3bfc:	5c1d      	ldrb	r5, [r3, r0]
    3bfe:	0020      	movs	r0, r4
    3c00:	4b0c      	ldr	r3, [pc, #48]	; (3c34 <xQueueGenericSend+0x2f0>)
    3c02:	4798      	blx	r3
    3c04:	b2c2      	uxtb	r2, r0
    3c06:	0029      	movs	r1, r5
    3c08:	0030      	movs	r0, r6
    3c0a:	4b0b      	ldr	r3, [pc, #44]	; (3c38 <xQueueGenericSend+0x2f4>)
    3c0c:	4798      	blx	r3
			return errQUEUE_FULL;
    3c0e:	2300      	movs	r3, #0
    3c10:	e712      	b.n	3a38 <xQueueGenericSend+0xf4>
    3c12:	46c0      	nop			; (mov r8, r8)
    3c14:	000052b5 	.word	0x000052b5
    3c18:	00003391 	.word	0x00003391
    3c1c:	000021e1 	.word	0x000021e1
    3c20:	00002129 	.word	0x00002129
    3c24:	20000020 	.word	0x20000020
    3c28:	0000218d 	.word	0x0000218d
    3c2c:	0000210d 	.word	0x0000210d
    3c30:	20000018 	.word	0x20000018
    3c34:	0000217d 	.word	0x0000217d
    3c38:	00002e19 	.word	0x00002e19
    3c3c:	000028ed 	.word	0x000028ed
    3c40:	0000351d 	.word	0x0000351d
    3c44:	00003599 	.word	0x00003599
    3c48:	00003381 	.word	0x00003381
    3c4c:	000033a9 	.word	0x000033a9
    3c50:	0000514d 	.word	0x0000514d
    3c54:	00005219 	.word	0x00005219
    3c58:	00005085 	.word	0x00005085
    3c5c:	000036dd 	.word	0x000036dd
    3c60:	00004c9d 	.word	0x00004c9d
    3c64:	00005201 	.word	0x00005201
    3c68:	00004af5 	.word	0x00004af5

00003c6c <xQueueCreateMutex>:
	{
    3c6c:	b570      	push	{r4, r5, r6, lr}
    3c6e:	0002      	movs	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    3c70:	2100      	movs	r1, #0
    3c72:	2001      	movs	r0, #1
    3c74:	4b06      	ldr	r3, [pc, #24]	; (3c90 <xQueueCreateMutex+0x24>)
    3c76:	4798      	blx	r3
    3c78:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    3c7a:	d007      	beq.n	3c8c <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
    3c7c:	2300      	movs	r3, #0
    3c7e:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    3c80:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
    3c82:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    3c84:	2200      	movs	r2, #0
    3c86:	2100      	movs	r1, #0
    3c88:	4d02      	ldr	r5, [pc, #8]	; (3c94 <xQueueCreateMutex+0x28>)
    3c8a:	47a8      	blx	r5
	}
    3c8c:	0020      	movs	r0, r4
    3c8e:	bd70      	pop	{r4, r5, r6, pc}
    3c90:	00003809 	.word	0x00003809
    3c94:	00003945 	.word	0x00003945

00003c98 <xQueueGenericSendFromISR>:
{
    3c98:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c9a:	46de      	mov	lr, fp
    3c9c:	4647      	mov	r7, r8
    3c9e:	b580      	push	{r7, lr}
    3ca0:	b083      	sub	sp, #12
    3ca2:	0004      	movs	r4, r0
    3ca4:	9101      	str	r1, [sp, #4]
    3ca6:	0016      	movs	r6, r2
    3ca8:	001f      	movs	r7, r3
	configASSERT( pxQueue );
    3caa:	2800      	cmp	r0, #0
    3cac:	d02d      	beq.n	3d0a <xQueueGenericSendFromISR+0x72>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3cae:	9b01      	ldr	r3, [sp, #4]
    3cb0:	2b00      	cmp	r3, #0
    3cb2:	d02c      	beq.n	3d0e <xQueueGenericSendFromISR+0x76>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    3cb4:	2f02      	cmp	r7, #2
    3cb6:	d02f      	beq.n	3d18 <xQueueGenericSendFromISR+0x80>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3cb8:	4b59      	ldr	r3, [pc, #356]	; (3e20 <xQueueGenericSendFromISR+0x188>)
    3cba:	4798      	blx	r3
    3cbc:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3cbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3cc0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3cc2:	429a      	cmp	r2, r3
    3cc4:	d85a      	bhi.n	3d7c <xQueueGenericSendFromISR+0xe4>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    3cc6:	0020      	movs	r0, r4
    3cc8:	4b56      	ldr	r3, [pc, #344]	; (3e24 <xQueueGenericSendFromISR+0x18c>)
    3cca:	4798      	blx	r3
    3ccc:	4b56      	ldr	r3, [pc, #344]	; (3e28 <xQueueGenericSendFromISR+0x190>)
    3cce:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
    3cd0:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    3cd2:	4203      	tst	r3, r0
    3cd4:	d100      	bne.n	3cd8 <xQueueGenericSendFromISR+0x40>
    3cd6:	e09a      	b.n	3e0e <xQueueGenericSendFromISR+0x176>
    3cd8:	355d      	adds	r5, #93	; 0x5d
    3cda:	2f00      	cmp	r7, #0
    3cdc:	d106      	bne.n	3cec <xQueueGenericSendFromISR+0x54>
    3cde:	0020      	movs	r0, r4
    3ce0:	4b52      	ldr	r3, [pc, #328]	; (3e2c <xQueueGenericSendFromISR+0x194>)
    3ce2:	4798      	blx	r3
    3ce4:	4b52      	ldr	r3, [pc, #328]	; (3e30 <xQueueGenericSendFromISR+0x198>)
    3ce6:	5c1d      	ldrb	r5, [r3, r0]
    3ce8:	3558      	adds	r5, #88	; 0x58
    3cea:	b2ed      	uxtb	r5, r5
    3cec:	0020      	movs	r0, r4
    3cee:	4b4f      	ldr	r3, [pc, #316]	; (3e2c <xQueueGenericSendFromISR+0x194>)
    3cf0:	4798      	blx	r3
    3cf2:	4b4f      	ldr	r3, [pc, #316]	; (3e30 <xQueueGenericSendFromISR+0x198>)
    3cf4:	5c1f      	ldrb	r7, [r3, r0]
    3cf6:	0020      	movs	r0, r4
    3cf8:	4b4e      	ldr	r3, [pc, #312]	; (3e34 <xQueueGenericSendFromISR+0x19c>)
    3cfa:	4798      	blx	r3
    3cfc:	b2c2      	uxtb	r2, r0
    3cfe:	0039      	movs	r1, r7
    3d00:	0028      	movs	r0, r5
    3d02:	4b4d      	ldr	r3, [pc, #308]	; (3e38 <xQueueGenericSendFromISR+0x1a0>)
    3d04:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    3d06:	2500      	movs	r5, #0
    3d08:	e081      	b.n	3e0e <xQueueGenericSendFromISR+0x176>
	configASSERT( pxQueue );
    3d0a:	b672      	cpsid	i
    3d0c:	e7fe      	b.n	3d0c <xQueueGenericSendFromISR+0x74>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3d0e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3d10:	2b00      	cmp	r3, #0
    3d12:	d0cf      	beq.n	3cb4 <xQueueGenericSendFromISR+0x1c>
    3d14:	b672      	cpsid	i
    3d16:	e7fe      	b.n	3d16 <xQueueGenericSendFromISR+0x7e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    3d18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3d1a:	2b01      	cmp	r3, #1
    3d1c:	d027      	beq.n	3d6e <xQueueGenericSendFromISR+0xd6>
    3d1e:	b672      	cpsid	i
    3d20:	e7fe      	b.n	3d20 <xQueueGenericSendFromISR+0x88>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    3d24:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3d26:	2b00      	cmp	r3, #0
    3d28:	d071      	beq.n	3e0e <xQueueGenericSendFromISR+0x176>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3d2a:	0020      	movs	r0, r4
    3d2c:	3024      	adds	r0, #36	; 0x24
    3d2e:	4b43      	ldr	r3, [pc, #268]	; (3e3c <xQueueGenericSendFromISR+0x1a4>)
    3d30:	4798      	blx	r3
    3d32:	2800      	cmp	r0, #0
    3d34:	d06b      	beq.n	3e0e <xQueueGenericSendFromISR+0x176>
								if( pxHigherPriorityTaskWoken != NULL )
    3d36:	2e00      	cmp	r6, #0
    3d38:	d00a      	beq.n	3d50 <xQueueGenericSendFromISR+0xb8>
									*pxHigherPriorityTaskWoken = pdTRUE;
    3d3a:	2301      	movs	r3, #1
    3d3c:	6033      	str	r3, [r6, #0]
    3d3e:	e066      	b.n	3e0e <xQueueGenericSendFromISR+0x176>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    3d40:	3501      	adds	r5, #1
    3d42:	b26d      	sxtb	r5, r5
    3d44:	2345      	movs	r3, #69	; 0x45
    3d46:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
    3d48:	2501      	movs	r5, #1
    3d4a:	e060      	b.n	3e0e <xQueueGenericSendFromISR+0x176>
    3d4c:	2501      	movs	r5, #1
    3d4e:	e05e      	b.n	3e0e <xQueueGenericSendFromISR+0x176>
    3d50:	2501      	movs	r5, #1
    3d52:	e05c      	b.n	3e0e <xQueueGenericSendFromISR+0x176>
			const int8_t cTxLock = pxQueue->cTxLock;
    3d54:	2345      	movs	r3, #69	; 0x45
    3d56:	5ce5      	ldrb	r5, [r4, r3]
    3d58:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    3d5a:	0020      	movs	r0, r4
    3d5c:	4b31      	ldr	r3, [pc, #196]	; (3e24 <xQueueGenericSendFromISR+0x18c>)
    3d5e:	4798      	blx	r3
    3d60:	4b31      	ldr	r3, [pc, #196]	; (3e28 <xQueueGenericSendFromISR+0x190>)
    3d62:	881b      	ldrh	r3, [r3, #0]
    3d64:	4203      	tst	r3, r0
    3d66:	d02d      	beq.n	3dc4 <xQueueGenericSendFromISR+0x12c>
    3d68:	2335      	movs	r3, #53	; 0x35
    3d6a:	4698      	mov	r8, r3
    3d6c:	e01c      	b.n	3da8 <xQueueGenericSendFromISR+0x110>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3d6e:	4b2c      	ldr	r3, [pc, #176]	; (3e20 <xQueueGenericSendFromISR+0x188>)
    3d70:	4798      	blx	r3
    3d72:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3d74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3d76:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3d78:	429a      	cmp	r2, r3
    3d7a:	d9eb      	bls.n	3d54 <xQueueGenericSendFromISR+0xbc>
			const int8_t cTxLock = pxQueue->cTxLock;
    3d7c:	2345      	movs	r3, #69	; 0x45
    3d7e:	5ce5      	ldrb	r5, [r4, r3]
    3d80:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    3d82:	0020      	movs	r0, r4
    3d84:	4b27      	ldr	r3, [pc, #156]	; (3e24 <xQueueGenericSendFromISR+0x18c>)
    3d86:	4798      	blx	r3
    3d88:	4b27      	ldr	r3, [pc, #156]	; (3e28 <xQueueGenericSendFromISR+0x190>)
    3d8a:	881b      	ldrh	r3, [r3, #0]
    3d8c:	4203      	tst	r3, r0
    3d8e:	d019      	beq.n	3dc4 <xQueueGenericSendFromISR+0x12c>
    3d90:	2335      	movs	r3, #53	; 0x35
    3d92:	4698      	mov	r8, r3
    3d94:	2f00      	cmp	r7, #0
    3d96:	d107      	bne.n	3da8 <xQueueGenericSendFromISR+0x110>
    3d98:	0020      	movs	r0, r4
    3d9a:	4b24      	ldr	r3, [pc, #144]	; (3e2c <xQueueGenericSendFromISR+0x194>)
    3d9c:	4798      	blx	r3
    3d9e:	4b24      	ldr	r3, [pc, #144]	; (3e30 <xQueueGenericSendFromISR+0x198>)
    3da0:	5c1b      	ldrb	r3, [r3, r0]
    3da2:	3330      	adds	r3, #48	; 0x30
    3da4:	b2db      	uxtb	r3, r3
    3da6:	4698      	mov	r8, r3
    3da8:	0020      	movs	r0, r4
    3daa:	4b20      	ldr	r3, [pc, #128]	; (3e2c <xQueueGenericSendFromISR+0x194>)
    3dac:	4798      	blx	r3
    3dae:	4b20      	ldr	r3, [pc, #128]	; (3e30 <xQueueGenericSendFromISR+0x198>)
    3db0:	5c1b      	ldrb	r3, [r3, r0]
    3db2:	469b      	mov	fp, r3
    3db4:	0020      	movs	r0, r4
    3db6:	4b1f      	ldr	r3, [pc, #124]	; (3e34 <xQueueGenericSendFromISR+0x19c>)
    3db8:	4798      	blx	r3
    3dba:	b2c2      	uxtb	r2, r0
    3dbc:	4659      	mov	r1, fp
    3dbe:	4640      	mov	r0, r8
    3dc0:	4b1d      	ldr	r3, [pc, #116]	; (3e38 <xQueueGenericSendFromISR+0x1a0>)
    3dc2:	4798      	blx	r3
    3dc4:	0020      	movs	r0, r4
    3dc6:	4b19      	ldr	r3, [pc, #100]	; (3e2c <xQueueGenericSendFromISR+0x194>)
    3dc8:	4798      	blx	r3
    3dca:	4b19      	ldr	r3, [pc, #100]	; (3e30 <xQueueGenericSendFromISR+0x198>)
    3dcc:	5c1b      	ldrb	r3, [r3, r0]
    3dce:	4698      	mov	r8, r3
    3dd0:	0020      	movs	r0, r4
    3dd2:	4b18      	ldr	r3, [pc, #96]	; (3e34 <xQueueGenericSendFromISR+0x19c>)
    3dd4:	4798      	blx	r3
    3dd6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3dd8:	3201      	adds	r2, #1
    3dda:	b2d2      	uxtb	r2, r2
    3ddc:	b2c1      	uxtb	r1, r0
    3dde:	4640      	mov	r0, r8
    3de0:	4b17      	ldr	r3, [pc, #92]	; (3e40 <xQueueGenericSendFromISR+0x1a8>)
    3de2:	4798      	blx	r3
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3de4:	003a      	movs	r2, r7
    3de6:	9901      	ldr	r1, [sp, #4]
    3de8:	0020      	movs	r0, r4
    3dea:	4b16      	ldr	r3, [pc, #88]	; (3e44 <xQueueGenericSendFromISR+0x1ac>)
    3dec:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    3dee:	1c6b      	adds	r3, r5, #1
    3df0:	d1a6      	bne.n	3d40 <xQueueGenericSendFromISR+0xa8>
					if( pxQueue->pxQueueSetContainer != NULL )
    3df2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3df4:	2b00      	cmp	r3, #0
    3df6:	d094      	beq.n	3d22 <xQueueGenericSendFromISR+0x8a>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    3df8:	0039      	movs	r1, r7
    3dfa:	0020      	movs	r0, r4
    3dfc:	4b12      	ldr	r3, [pc, #72]	; (3e48 <xQueueGenericSendFromISR+0x1b0>)
    3dfe:	4798      	blx	r3
			xReturn = pdPASS;
    3e00:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    3e02:	2800      	cmp	r0, #0
    3e04:	d003      	beq.n	3e0e <xQueueGenericSendFromISR+0x176>
							if( pxHigherPriorityTaskWoken != NULL )
    3e06:	2e00      	cmp	r6, #0
    3e08:	d0a0      	beq.n	3d4c <xQueueGenericSendFromISR+0xb4>
								*pxHigherPriorityTaskWoken = pdTRUE;
    3e0a:	2301      	movs	r3, #1
    3e0c:	6033      	str	r3, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3e0e:	9800      	ldr	r0, [sp, #0]
    3e10:	4b0e      	ldr	r3, [pc, #56]	; (3e4c <xQueueGenericSendFromISR+0x1b4>)
    3e12:	4798      	blx	r3
}
    3e14:	0028      	movs	r0, r5
    3e16:	b003      	add	sp, #12
    3e18:	bc0c      	pop	{r2, r3}
    3e1a:	4690      	mov	r8, r2
    3e1c:	469b      	mov	fp, r3
    3e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e20:	000033c9 	.word	0x000033c9
    3e24:	0000218d 	.word	0x0000218d
    3e28:	20000020 	.word	0x20000020
    3e2c:	0000210d 	.word	0x0000210d
    3e30:	20000018 	.word	0x20000018
    3e34:	0000217d 	.word	0x0000217d
    3e38:	00002e19 	.word	0x00002e19
    3e3c:	0000514d 	.word	0x0000514d
    3e40:	000028ed 	.word	0x000028ed
    3e44:	0000351d 	.word	0x0000351d
    3e48:	00003599 	.word	0x00003599
    3e4c:	000033d1 	.word	0x000033d1

00003e50 <MyWrapper>:
{
    3e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e52:	46d6      	mov	lr, sl
    3e54:	4647      	mov	r7, r8
    3e56:	b580      	push	{r7, lr}
    3e58:	b083      	sub	sp, #12
    3e5a:	0004      	movs	r4, r0
    3e5c:	000f      	movs	r7, r1
    3e5e:	0016      	movs	r6, r2
	configASSERT( pxQueue );
    3e60:	2800      	cmp	r0, #0
    3e62:	d004      	beq.n	3e6e <MyWrapper+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
    3e64:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3e66:	2b00      	cmp	r3, #0
    3e68:	d003      	beq.n	3e72 <MyWrapper+0x22>
    3e6a:	b672      	cpsid	i
    3e6c:	e7fe      	b.n	3e6c <MyWrapper+0x1c>
	configASSERT( pxQueue );
    3e6e:	b672      	cpsid	i
    3e70:	e7fe      	b.n	3e70 <MyWrapper+0x20>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    3e72:	6803      	ldr	r3, [r0, #0]
    3e74:	2b00      	cmp	r3, #0
    3e76:	d055      	beq.n	3f24 <MyWrapper+0xd4>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3e78:	4b4a      	ldr	r3, [pc, #296]	; (3fa4 <MyWrapper+0x154>)
    3e7a:	4798      	blx	r3
    3e7c:	9001      	str	r0, [sp, #4]
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3e7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3e80:	4698      	mov	r8, r3
		if( uxMessagesWaiting < pxQueue->uxLength )
    3e82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3e84:	4598      	cmp	r8, r3
    3e86:	d267      	bcs.n	3f58 <MyWrapper+0x108>
			const int8_t cTxLock = pxQueue->cTxLock;
    3e88:	2345      	movs	r3, #69	; 0x45
    3e8a:	5ce5      	ldrb	r5, [r4, r3]
    3e8c:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    3e8e:	0020      	movs	r0, r4
    3e90:	4b45      	ldr	r3, [pc, #276]	; (3fa8 <MyWrapper+0x158>)
    3e92:	4798      	blx	r3
    3e94:	4b45      	ldr	r3, [pc, #276]	; (3fac <MyWrapper+0x15c>)
    3e96:	881b      	ldrh	r3, [r3, #0]
    3e98:	4203      	tst	r3, r0
    3e9a:	d018      	beq.n	3ece <MyWrapper+0x7e>
    3e9c:	2335      	movs	r3, #53	; 0x35
    3e9e:	469a      	mov	sl, r3
    3ea0:	2e00      	cmp	r6, #0
    3ea2:	d107      	bne.n	3eb4 <MyWrapper+0x64>
    3ea4:	0020      	movs	r0, r4
    3ea6:	4b42      	ldr	r3, [pc, #264]	; (3fb0 <MyWrapper+0x160>)
    3ea8:	4798      	blx	r3
    3eaa:	4b42      	ldr	r3, [pc, #264]	; (3fb4 <MyWrapper+0x164>)
    3eac:	5c1b      	ldrb	r3, [r3, r0]
    3eae:	3330      	adds	r3, #48	; 0x30
    3eb0:	b2db      	uxtb	r3, r3
    3eb2:	469a      	mov	sl, r3
    3eb4:	0020      	movs	r0, r4
    3eb6:	4b3e      	ldr	r3, [pc, #248]	; (3fb0 <MyWrapper+0x160>)
    3eb8:	4798      	blx	r3
    3eba:	4b3e      	ldr	r3, [pc, #248]	; (3fb4 <MyWrapper+0x164>)
    3ebc:	5c1e      	ldrb	r6, [r3, r0]
    3ebe:	0020      	movs	r0, r4
    3ec0:	4b3d      	ldr	r3, [pc, #244]	; (3fb8 <MyWrapper+0x168>)
    3ec2:	4798      	blx	r3
    3ec4:	b2c2      	uxtb	r2, r0
    3ec6:	0031      	movs	r1, r6
    3ec8:	4650      	mov	r0, sl
    3eca:	4b3c      	ldr	r3, [pc, #240]	; (3fbc <MyWrapper+0x16c>)
    3ecc:	4798      	blx	r3
    3ece:	0020      	movs	r0, r4
    3ed0:	4b37      	ldr	r3, [pc, #220]	; (3fb0 <MyWrapper+0x160>)
    3ed2:	4798      	blx	r3
    3ed4:	4b37      	ldr	r3, [pc, #220]	; (3fb4 <MyWrapper+0x164>)
    3ed6:	5c1e      	ldrb	r6, [r3, r0]
    3ed8:	0020      	movs	r0, r4
    3eda:	4b37      	ldr	r3, [pc, #220]	; (3fb8 <MyWrapper+0x168>)
    3edc:	4798      	blx	r3
    3ede:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3ee0:	3201      	adds	r2, #1
    3ee2:	b2d2      	uxtb	r2, r2
    3ee4:	b2c1      	uxtb	r1, r0
    3ee6:	0030      	movs	r0, r6
    3ee8:	4b35      	ldr	r3, [pc, #212]	; (3fc0 <MyWrapper+0x170>)
    3eea:	4798      	blx	r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    3eec:	4643      	mov	r3, r8
    3eee:	3301      	adds	r3, #1
    3ef0:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
    3ef2:	1c6b      	adds	r3, r5, #1
    3ef4:	d12a      	bne.n	3f4c <MyWrapper+0xfc>
					if( pxQueue->pxQueueSetContainer != NULL )
    3ef6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3ef8:	2b00      	cmp	r3, #0
    3efa:	d018      	beq.n	3f2e <MyWrapper+0xde>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    3efc:	2100      	movs	r1, #0
    3efe:	0020      	movs	r0, r4
    3f00:	4b30      	ldr	r3, [pc, #192]	; (3fc4 <MyWrapper+0x174>)
    3f02:	4798      	blx	r3
			xReturn = pdPASS;
    3f04:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    3f06:	2800      	cmp	r0, #0
    3f08:	d003      	beq.n	3f12 <MyWrapper+0xc2>
							if( pxHigherPriorityTaskWoken != NULL )
    3f0a:	2f00      	cmp	r7, #0
    3f0c:	d045      	beq.n	3f9a <MyWrapper+0x14a>
								*pxHigherPriorityTaskWoken = pdTRUE;
    3f0e:	2301      	movs	r3, #1
    3f10:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3f12:	9801      	ldr	r0, [sp, #4]
    3f14:	4b2c      	ldr	r3, [pc, #176]	; (3fc8 <MyWrapper+0x178>)
    3f16:	4798      	blx	r3
}
    3f18:	0028      	movs	r0, r5
    3f1a:	b003      	add	sp, #12
    3f1c:	bc0c      	pop	{r2, r3}
    3f1e:	4690      	mov	r8, r2
    3f20:	469a      	mov	sl, r3
    3f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    3f24:	6843      	ldr	r3, [r0, #4]
    3f26:	2b00      	cmp	r3, #0
    3f28:	d0a6      	beq.n	3e78 <MyWrapper+0x28>
    3f2a:	b672      	cpsid	i
    3f2c:	e7fe      	b.n	3f2c <MyWrapper+0xdc>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    3f30:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3f32:	2b00      	cmp	r3, #0
    3f34:	d0ed      	beq.n	3f12 <MyWrapper+0xc2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3f36:	0020      	movs	r0, r4
    3f38:	3024      	adds	r0, #36	; 0x24
    3f3a:	4b24      	ldr	r3, [pc, #144]	; (3fcc <MyWrapper+0x17c>)
    3f3c:	4798      	blx	r3
    3f3e:	2800      	cmp	r0, #0
    3f40:	d0e7      	beq.n	3f12 <MyWrapper+0xc2>
								if( pxHigherPriorityTaskWoken != NULL )
    3f42:	2f00      	cmp	r7, #0
    3f44:	d02b      	beq.n	3f9e <MyWrapper+0x14e>
									*pxHigherPriorityTaskWoken = pdTRUE;
    3f46:	2301      	movs	r3, #1
    3f48:	603b      	str	r3, [r7, #0]
    3f4a:	e7e2      	b.n	3f12 <MyWrapper+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    3f4c:	3501      	adds	r5, #1
    3f4e:	b26d      	sxtb	r5, r5
    3f50:	2345      	movs	r3, #69	; 0x45
    3f52:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
    3f54:	2501      	movs	r5, #1
    3f56:	e7dc      	b.n	3f12 <MyWrapper+0xc2>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    3f58:	0020      	movs	r0, r4
    3f5a:	4b13      	ldr	r3, [pc, #76]	; (3fa8 <MyWrapper+0x158>)
    3f5c:	4798      	blx	r3
    3f5e:	4b13      	ldr	r3, [pc, #76]	; (3fac <MyWrapper+0x15c>)
    3f60:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
    3f62:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    3f64:	4203      	tst	r3, r0
    3f66:	d0d4      	beq.n	3f12 <MyWrapper+0xc2>
    3f68:	355d      	adds	r5, #93	; 0x5d
    3f6a:	2e00      	cmp	r6, #0
    3f6c:	d106      	bne.n	3f7c <MyWrapper+0x12c>
    3f6e:	0020      	movs	r0, r4
    3f70:	4b0f      	ldr	r3, [pc, #60]	; (3fb0 <MyWrapper+0x160>)
    3f72:	4798      	blx	r3
    3f74:	4b0f      	ldr	r3, [pc, #60]	; (3fb4 <MyWrapper+0x164>)
    3f76:	5c1d      	ldrb	r5, [r3, r0]
    3f78:	3558      	adds	r5, #88	; 0x58
    3f7a:	b2ed      	uxtb	r5, r5
    3f7c:	0020      	movs	r0, r4
    3f7e:	4b0c      	ldr	r3, [pc, #48]	; (3fb0 <MyWrapper+0x160>)
    3f80:	4798      	blx	r3
    3f82:	4b0c      	ldr	r3, [pc, #48]	; (3fb4 <MyWrapper+0x164>)
    3f84:	5c1f      	ldrb	r7, [r3, r0]
    3f86:	0020      	movs	r0, r4
    3f88:	4b0b      	ldr	r3, [pc, #44]	; (3fb8 <MyWrapper+0x168>)
    3f8a:	4798      	blx	r3
    3f8c:	b2c2      	uxtb	r2, r0
    3f8e:	0039      	movs	r1, r7
    3f90:	0028      	movs	r0, r5
    3f92:	4b0a      	ldr	r3, [pc, #40]	; (3fbc <MyWrapper+0x16c>)
    3f94:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    3f96:	2500      	movs	r5, #0
    3f98:	e7bb      	b.n	3f12 <MyWrapper+0xc2>
			xReturn = pdPASS;
    3f9a:	2501      	movs	r5, #1
    3f9c:	e7b9      	b.n	3f12 <MyWrapper+0xc2>
    3f9e:	2501      	movs	r5, #1
    3fa0:	e7b7      	b.n	3f12 <MyWrapper+0xc2>
    3fa2:	46c0      	nop			; (mov r8, r8)
    3fa4:	000033c9 	.word	0x000033c9
    3fa8:	0000218d 	.word	0x0000218d
    3fac:	20000020 	.word	0x20000020
    3fb0:	0000210d 	.word	0x0000210d
    3fb4:	20000018 	.word	0x20000018
    3fb8:	0000217d 	.word	0x0000217d
    3fbc:	00002e19 	.word	0x00002e19
    3fc0:	000028ed 	.word	0x000028ed
    3fc4:	00003599 	.word	0x00003599
    3fc8:	000033d1 	.word	0x000033d1
    3fcc:	0000514d 	.word	0x0000514d

00003fd0 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
    3fd0:	b510      	push	{r4, lr}
    3fd2:	2200      	movs	r2, #0
    3fd4:	4b01      	ldr	r3, [pc, #4]	; (3fdc <xQueueGiveFromISR+0xc>)
    3fd6:	4798      	blx	r3
    3fd8:	bd10      	pop	{r4, pc}
    3fda:	46c0      	nop			; (mov r8, r8)
    3fdc:	00003e51 	.word	0x00003e51

00003fe0 <xQueueReceive>:
{
    3fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fe2:	46ce      	mov	lr, r9
    3fe4:	4647      	mov	r7, r8
    3fe6:	b580      	push	{r7, lr}
    3fe8:	b085      	sub	sp, #20
    3fea:	1e04      	subs	r4, r0, #0
    3fec:	9100      	str	r1, [sp, #0]
    3fee:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    3ff0:	d00b      	beq.n	400a <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3ff2:	9b00      	ldr	r3, [sp, #0]
    3ff4:	2b00      	cmp	r3, #0
    3ff6:	d00a      	beq.n	400e <xQueueReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3ff8:	4ba4      	ldr	r3, [pc, #656]	; (428c <xQueueReceive+0x2ac>)
    3ffa:	4798      	blx	r3
    3ffc:	2800      	cmp	r0, #0
    3ffe:	d10b      	bne.n	4018 <xQueueReceive+0x38>
    4000:	9b01      	ldr	r3, [sp, #4]
    4002:	2b00      	cmp	r3, #0
    4004:	d00c      	beq.n	4020 <xQueueReceive+0x40>
    4006:	b672      	cpsid	i
    4008:	e7fe      	b.n	4008 <xQueueReceive+0x28>
	configASSERT( ( pxQueue ) );
    400a:	b672      	cpsid	i
    400c:	e7fe      	b.n	400c <xQueueReceive+0x2c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    400e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4010:	2b00      	cmp	r3, #0
    4012:	d0f1      	beq.n	3ff8 <xQueueReceive+0x18>
    4014:	b672      	cpsid	i
    4016:	e7fe      	b.n	4016 <xQueueReceive+0x36>
    4018:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    401a:	4b9d      	ldr	r3, [pc, #628]	; (4290 <xQueueReceive+0x2b0>)
    401c:	4698      	mov	r8, r3
    401e:	e0b4      	b.n	418a <xQueueReceive+0x1aa>
    4020:	2500      	movs	r5, #0
    4022:	e7fa      	b.n	401a <xQueueReceive+0x3a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4024:	9900      	ldr	r1, [sp, #0]
    4026:	0020      	movs	r0, r4
    4028:	4b9a      	ldr	r3, [pc, #616]	; (4294 <xQueueReceive+0x2b4>)
    402a:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
    402c:	4b9a      	ldr	r3, [pc, #616]	; (4298 <xQueueReceive+0x2b8>)
    402e:	4798      	blx	r3
    4030:	4b9a      	ldr	r3, [pc, #616]	; (429c <xQueueReceive+0x2bc>)
    4032:	4798      	blx	r3
    4034:	4b9a      	ldr	r3, [pc, #616]	; (42a0 <xQueueReceive+0x2c0>)
    4036:	881b      	ldrh	r3, [r3, #0]
    4038:	4203      	tst	r3, r0
    403a:	d019      	beq.n	4070 <xQueueReceive+0x90>
    403c:	0020      	movs	r0, r4
    403e:	4b99      	ldr	r3, [pc, #612]	; (42a4 <xQueueReceive+0x2c4>)
    4040:	4798      	blx	r3
    4042:	4b97      	ldr	r3, [pc, #604]	; (42a0 <xQueueReceive+0x2c0>)
    4044:	881b      	ldrh	r3, [r3, #0]
    4046:	4203      	tst	r3, r0
    4048:	d012      	beq.n	4070 <xQueueReceive+0x90>
    404a:	0020      	movs	r0, r4
    404c:	4b96      	ldr	r3, [pc, #600]	; (42a8 <xQueueReceive+0x2c8>)
    404e:	4698      	mov	r8, r3
    4050:	4798      	blx	r3
    4052:	4f96      	ldr	r7, [pc, #600]	; (42ac <xQueueReceive+0x2cc>)
    4054:	5c3d      	ldrb	r5, [r7, r0]
    4056:	3528      	adds	r5, #40	; 0x28
    4058:	b2ed      	uxtb	r5, r5
    405a:	0020      	movs	r0, r4
    405c:	47c0      	blx	r8
    405e:	5c3f      	ldrb	r7, [r7, r0]
    4060:	0020      	movs	r0, r4
    4062:	4b93      	ldr	r3, [pc, #588]	; (42b0 <xQueueReceive+0x2d0>)
    4064:	4798      	blx	r3
    4066:	b2c2      	uxtb	r2, r0
    4068:	0039      	movs	r1, r7
    406a:	0028      	movs	r0, r5
    406c:	4b91      	ldr	r3, [pc, #580]	; (42b4 <xQueueReceive+0x2d4>)
    406e:	4798      	blx	r3
    4070:	0020      	movs	r0, r4
    4072:	4f8d      	ldr	r7, [pc, #564]	; (42a8 <xQueueReceive+0x2c8>)
    4074:	47b8      	blx	r7
    4076:	4d8d      	ldr	r5, [pc, #564]	; (42ac <xQueueReceive+0x2cc>)
    4078:	5c2b      	ldrb	r3, [r5, r0]
    407a:	4699      	mov	r9, r3
    407c:	0020      	movs	r0, r4
    407e:	4b8c      	ldr	r3, [pc, #560]	; (42b0 <xQueueReceive+0x2d0>)
    4080:	4798      	blx	r3
    4082:	b2c3      	uxtb	r3, r0
    4084:	4698      	mov	r8, r3
    4086:	0020      	movs	r0, r4
    4088:	47b8      	blx	r7
    408a:	5c2b      	ldrb	r3, [r5, r0]
    408c:	2b02      	cmp	r3, #2
    408e:	d11e      	bne.n	40ce <xQueueReceive+0xee>
    4090:	4b81      	ldr	r3, [pc, #516]	; (4298 <xQueueReceive+0x2b8>)
    4092:	4798      	blx	r3
    4094:	4b88      	ldr	r3, [pc, #544]	; (42b8 <xQueueReceive+0x2d8>)
    4096:	4798      	blx	r3
    4098:	b2c2      	uxtb	r2, r0
    409a:	4641      	mov	r1, r8
    409c:	4648      	mov	r0, r9
    409e:	4b87      	ldr	r3, [pc, #540]	; (42bc <xQueueReceive+0x2dc>)
    40a0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    40a2:	3e01      	subs	r6, #1
    40a4:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    40a6:	6923      	ldr	r3, [r4, #16]
    40a8:	2b00      	cmp	r3, #0
    40aa:	d007      	beq.n	40bc <xQueueReceive+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    40ac:	0020      	movs	r0, r4
    40ae:	3010      	adds	r0, #16
    40b0:	4b83      	ldr	r3, [pc, #524]	; (42c0 <xQueueReceive+0x2e0>)
    40b2:	4798      	blx	r3
    40b4:	2800      	cmp	r0, #0
    40b6:	d001      	beq.n	40bc <xQueueReceive+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
    40b8:	4b82      	ldr	r3, [pc, #520]	; (42c4 <xQueueReceive+0x2e4>)
    40ba:	4798      	blx	r3
				taskEXIT_CRITICAL();
    40bc:	4b82      	ldr	r3, [pc, #520]	; (42c8 <xQueueReceive+0x2e8>)
    40be:	4798      	blx	r3
				return pdPASS;
    40c0:	2301      	movs	r3, #1
}
    40c2:	0018      	movs	r0, r3
    40c4:	b005      	add	sp, #20
    40c6:	bc0c      	pop	{r2, r3}
    40c8:	4690      	mov	r8, r2
    40ca:	4699      	mov	r9, r3
    40cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
    40ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    40d0:	3a01      	subs	r2, #1
    40d2:	b2d2      	uxtb	r2, r2
    40d4:	e7e1      	b.n	409a <xQueueReceive+0xba>
					taskEXIT_CRITICAL();
    40d6:	4b7c      	ldr	r3, [pc, #496]	; (42c8 <xQueueReceive+0x2e8>)
    40d8:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    40da:	4b6f      	ldr	r3, [pc, #444]	; (4298 <xQueueReceive+0x2b8>)
    40dc:	4798      	blx	r3
    40de:	4b6f      	ldr	r3, [pc, #444]	; (429c <xQueueReceive+0x2bc>)
    40e0:	4798      	blx	r3
    40e2:	4b6f      	ldr	r3, [pc, #444]	; (42a0 <xQueueReceive+0x2c0>)
    40e4:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
    40e6:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    40e8:	4202      	tst	r2, r0
    40ea:	d0ea      	beq.n	40c2 <xQueueReceive+0xe2>
    40ec:	0020      	movs	r0, r4
    40ee:	4b6d      	ldr	r3, [pc, #436]	; (42a4 <xQueueReceive+0x2c4>)
    40f0:	4798      	blx	r3
    40f2:	4b6b      	ldr	r3, [pc, #428]	; (42a0 <xQueueReceive+0x2c0>)
    40f4:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
    40f6:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    40f8:	4202      	tst	r2, r0
    40fa:	d0e2      	beq.n	40c2 <xQueueReceive+0xe2>
    40fc:	0020      	movs	r0, r4
    40fe:	4f6a      	ldr	r7, [pc, #424]	; (42a8 <xQueueReceive+0x2c8>)
    4100:	47b8      	blx	r7
    4102:	4e6a      	ldr	r6, [pc, #424]	; (42ac <xQueueReceive+0x2cc>)
    4104:	5c35      	ldrb	r5, [r6, r0]
    4106:	3550      	adds	r5, #80	; 0x50
    4108:	b2ed      	uxtb	r5, r5
    410a:	0020      	movs	r0, r4
    410c:	47b8      	blx	r7
    410e:	5c36      	ldrb	r6, [r6, r0]
    4110:	0020      	movs	r0, r4
    4112:	4b67      	ldr	r3, [pc, #412]	; (42b0 <xQueueReceive+0x2d0>)
    4114:	4798      	blx	r3
    4116:	b2c2      	uxtb	r2, r0
    4118:	0031      	movs	r1, r6
    411a:	0028      	movs	r0, r5
    411c:	4b65      	ldr	r3, [pc, #404]	; (42b4 <xQueueReceive+0x2d4>)
    411e:	4798      	blx	r3
					return errQUEUE_EMPTY;
    4120:	2300      	movs	r3, #0
    4122:	e7ce      	b.n	40c2 <xQueueReceive+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
    4124:	a802      	add	r0, sp, #8
    4126:	4b69      	ldr	r3, [pc, #420]	; (42cc <xQueueReceive+0x2ec>)
    4128:	4798      	blx	r3
    412a:	e038      	b.n	419e <xQueueReceive+0x1be>
		prvLockQueue( pxQueue );
    412c:	2200      	movs	r2, #0
    412e:	2344      	movs	r3, #68	; 0x44
    4130:	54e2      	strb	r2, [r4, r3]
    4132:	e03f      	b.n	41b4 <xQueueReceive+0x1d4>
    4134:	2200      	movs	r2, #0
    4136:	2345      	movs	r3, #69	; 0x45
    4138:	54e2      	strb	r2, [r4, r3]
    413a:	e040      	b.n	41be <xQueueReceive+0x1de>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    413c:	0020      	movs	r0, r4
    413e:	4b59      	ldr	r3, [pc, #356]	; (42a4 <xQueueReceive+0x2c4>)
    4140:	4798      	blx	r3
    4142:	4b57      	ldr	r3, [pc, #348]	; (42a0 <xQueueReceive+0x2c0>)
    4144:	881b      	ldrh	r3, [r3, #0]
    4146:	4203      	tst	r3, r0
    4148:	d04e      	beq.n	41e8 <xQueueReceive+0x208>
    414a:	0020      	movs	r0, r4
    414c:	4f56      	ldr	r7, [pc, #344]	; (42a8 <xQueueReceive+0x2c8>)
    414e:	47b8      	blx	r7
    4150:	4e56      	ldr	r6, [pc, #344]	; (42ac <xQueueReceive+0x2cc>)
    4152:	5c35      	ldrb	r5, [r6, r0]
    4154:	3568      	adds	r5, #104	; 0x68
    4156:	b2ed      	uxtb	r5, r5
    4158:	0020      	movs	r0, r4
    415a:	47b8      	blx	r7
    415c:	5c36      	ldrb	r6, [r6, r0]
    415e:	0020      	movs	r0, r4
    4160:	4b53      	ldr	r3, [pc, #332]	; (42b0 <xQueueReceive+0x2d0>)
    4162:	4798      	blx	r3
    4164:	b2c2      	uxtb	r2, r0
    4166:	0031      	movs	r1, r6
    4168:	0028      	movs	r0, r5
    416a:	4b52      	ldr	r3, [pc, #328]	; (42b4 <xQueueReceive+0x2d4>)
    416c:	4798      	blx	r3
    416e:	e03b      	b.n	41e8 <xQueueReceive+0x208>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4170:	0020      	movs	r0, r4
    4172:	3024      	adds	r0, #36	; 0x24
    4174:	9901      	ldr	r1, [sp, #4]
    4176:	4b56      	ldr	r3, [pc, #344]	; (42d0 <xQueueReceive+0x2f0>)
    4178:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    417a:	0020      	movs	r0, r4
    417c:	4b55      	ldr	r3, [pc, #340]	; (42d4 <xQueueReceive+0x2f4>)
    417e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    4180:	4b55      	ldr	r3, [pc, #340]	; (42d8 <xQueueReceive+0x2f8>)
    4182:	4798      	blx	r3
    4184:	2800      	cmp	r0, #0
    4186:	d046      	beq.n	4216 <xQueueReceive+0x236>
    4188:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    418a:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    418c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    418e:	2e00      	cmp	r6, #0
    4190:	d000      	beq.n	4194 <xQueueReceive+0x1b4>
    4192:	e747      	b.n	4024 <xQueueReceive+0x44>
				if( xTicksToWait == ( TickType_t ) 0 )
    4194:	9b01      	ldr	r3, [sp, #4]
    4196:	2b00      	cmp	r3, #0
    4198:	d09d      	beq.n	40d6 <xQueueReceive+0xf6>
				else if( xEntryTimeSet == pdFALSE )
    419a:	2d00      	cmp	r5, #0
    419c:	d0c2      	beq.n	4124 <xQueueReceive+0x144>
		taskEXIT_CRITICAL();
    419e:	4b4a      	ldr	r3, [pc, #296]	; (42c8 <xQueueReceive+0x2e8>)
    41a0:	4798      	blx	r3
		vTaskSuspendAll();
    41a2:	4b4e      	ldr	r3, [pc, #312]	; (42dc <xQueueReceive+0x2fc>)
    41a4:	4798      	blx	r3
		prvLockQueue( pxQueue );
    41a6:	4b3a      	ldr	r3, [pc, #232]	; (4290 <xQueueReceive+0x2b0>)
    41a8:	4798      	blx	r3
    41aa:	2344      	movs	r3, #68	; 0x44
    41ac:	5ce3      	ldrb	r3, [r4, r3]
    41ae:	b25b      	sxtb	r3, r3
    41b0:	3301      	adds	r3, #1
    41b2:	d0bb      	beq.n	412c <xQueueReceive+0x14c>
    41b4:	2345      	movs	r3, #69	; 0x45
    41b6:	5ce3      	ldrb	r3, [r4, r3]
    41b8:	b25b      	sxtb	r3, r3
    41ba:	3301      	adds	r3, #1
    41bc:	d0ba      	beq.n	4134 <xQueueReceive+0x154>
    41be:	4b42      	ldr	r3, [pc, #264]	; (42c8 <xQueueReceive+0x2e8>)
    41c0:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    41c2:	a901      	add	r1, sp, #4
    41c4:	a802      	add	r0, sp, #8
    41c6:	4b46      	ldr	r3, [pc, #280]	; (42e0 <xQueueReceive+0x300>)
    41c8:	4798      	blx	r3
    41ca:	2800      	cmp	r0, #0
    41cc:	d12c      	bne.n	4228 <xQueueReceive+0x248>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    41ce:	0020      	movs	r0, r4
    41d0:	4b44      	ldr	r3, [pc, #272]	; (42e4 <xQueueReceive+0x304>)
    41d2:	4798      	blx	r3
    41d4:	2800      	cmp	r0, #0
    41d6:	d021      	beq.n	421c <xQueueReceive+0x23c>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    41d8:	4b2f      	ldr	r3, [pc, #188]	; (4298 <xQueueReceive+0x2b8>)
    41da:	4798      	blx	r3
    41dc:	4b2f      	ldr	r3, [pc, #188]	; (429c <xQueueReceive+0x2bc>)
    41de:	4798      	blx	r3
    41e0:	4b2f      	ldr	r3, [pc, #188]	; (42a0 <xQueueReceive+0x2c0>)
    41e2:	881b      	ldrh	r3, [r3, #0]
    41e4:	4203      	tst	r3, r0
    41e6:	d1a9      	bne.n	413c <xQueueReceive+0x15c>
    41e8:	0020      	movs	r0, r4
    41ea:	4b2f      	ldr	r3, [pc, #188]	; (42a8 <xQueueReceive+0x2c8>)
    41ec:	4798      	blx	r3
    41ee:	4b2f      	ldr	r3, [pc, #188]	; (42ac <xQueueReceive+0x2cc>)
    41f0:	5c1b      	ldrb	r3, [r3, r0]
    41f2:	2b02      	cmp	r3, #2
    41f4:	d0bc      	beq.n	4170 <xQueueReceive+0x190>
    41f6:	4b28      	ldr	r3, [pc, #160]	; (4298 <xQueueReceive+0x2b8>)
    41f8:	4798      	blx	r3
    41fa:	4b28      	ldr	r3, [pc, #160]	; (429c <xQueueReceive+0x2bc>)
    41fc:	4798      	blx	r3
    41fe:	4b28      	ldr	r3, [pc, #160]	; (42a0 <xQueueReceive+0x2c0>)
    4200:	881b      	ldrh	r3, [r3, #0]
    4202:	4203      	tst	r3, r0
    4204:	d0b4      	beq.n	4170 <xQueueReceive+0x190>
    4206:	4b24      	ldr	r3, [pc, #144]	; (4298 <xQueueReceive+0x2b8>)
    4208:	4798      	blx	r3
    420a:	4b2b      	ldr	r3, [pc, #172]	; (42b8 <xQueueReceive+0x2d8>)
    420c:	4798      	blx	r3
    420e:	b2c0      	uxtb	r0, r0
    4210:	4b35      	ldr	r3, [pc, #212]	; (42e8 <xQueueReceive+0x308>)
    4212:	4798      	blx	r3
    4214:	e7ac      	b.n	4170 <xQueueReceive+0x190>
					portYIELD_WITHIN_API();
    4216:	4b2b      	ldr	r3, [pc, #172]	; (42c4 <xQueueReceive+0x2e4>)
    4218:	4798      	blx	r3
    421a:	e7b5      	b.n	4188 <xQueueReceive+0x1a8>
				prvUnlockQueue( pxQueue );
    421c:	0020      	movs	r0, r4
    421e:	4b2d      	ldr	r3, [pc, #180]	; (42d4 <xQueueReceive+0x2f4>)
    4220:	4798      	blx	r3
				( void ) xTaskResumeAll();
    4222:	4b2d      	ldr	r3, [pc, #180]	; (42d8 <xQueueReceive+0x2f8>)
    4224:	4798      	blx	r3
    4226:	e7af      	b.n	4188 <xQueueReceive+0x1a8>
			prvUnlockQueue( pxQueue );
    4228:	0020      	movs	r0, r4
    422a:	4b2a      	ldr	r3, [pc, #168]	; (42d4 <xQueueReceive+0x2f4>)
    422c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    422e:	4b2a      	ldr	r3, [pc, #168]	; (42d8 <xQueueReceive+0x2f8>)
    4230:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4232:	0020      	movs	r0, r4
    4234:	4b2b      	ldr	r3, [pc, #172]	; (42e4 <xQueueReceive+0x304>)
    4236:	4798      	blx	r3
    4238:	2800      	cmp	r0, #0
    423a:	d0a5      	beq.n	4188 <xQueueReceive+0x1a8>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    423c:	4b16      	ldr	r3, [pc, #88]	; (4298 <xQueueReceive+0x2b8>)
    423e:	4798      	blx	r3
    4240:	4b16      	ldr	r3, [pc, #88]	; (429c <xQueueReceive+0x2bc>)
    4242:	4798      	blx	r3
    4244:	4b16      	ldr	r3, [pc, #88]	; (42a0 <xQueueReceive+0x2c0>)
    4246:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
    4248:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    424a:	4202      	tst	r2, r0
    424c:	d100      	bne.n	4250 <xQueueReceive+0x270>
    424e:	e738      	b.n	40c2 <xQueueReceive+0xe2>
    4250:	0020      	movs	r0, r4
    4252:	4b14      	ldr	r3, [pc, #80]	; (42a4 <xQueueReceive+0x2c4>)
    4254:	4798      	blx	r3
    4256:	4b12      	ldr	r3, [pc, #72]	; (42a0 <xQueueReceive+0x2c0>)
    4258:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
    425a:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    425c:	4202      	tst	r2, r0
    425e:	d100      	bne.n	4262 <xQueueReceive+0x282>
    4260:	e72f      	b.n	40c2 <xQueueReceive+0xe2>
    4262:	0020      	movs	r0, r4
    4264:	4f10      	ldr	r7, [pc, #64]	; (42a8 <xQueueReceive+0x2c8>)
    4266:	47b8      	blx	r7
    4268:	4e10      	ldr	r6, [pc, #64]	; (42ac <xQueueReceive+0x2cc>)
    426a:	5c35      	ldrb	r5, [r6, r0]
    426c:	3550      	adds	r5, #80	; 0x50
    426e:	b2ed      	uxtb	r5, r5
    4270:	0020      	movs	r0, r4
    4272:	47b8      	blx	r7
    4274:	5c36      	ldrb	r6, [r6, r0]
    4276:	0020      	movs	r0, r4
    4278:	4b0d      	ldr	r3, [pc, #52]	; (42b0 <xQueueReceive+0x2d0>)
    427a:	4798      	blx	r3
    427c:	b2c2      	uxtb	r2, r0
    427e:	0031      	movs	r1, r6
    4280:	0028      	movs	r0, r5
    4282:	4b0c      	ldr	r3, [pc, #48]	; (42b4 <xQueueReceive+0x2d4>)
    4284:	4798      	blx	r3
				return errQUEUE_EMPTY;
    4286:	2300      	movs	r3, #0
    4288:	e71b      	b.n	40c2 <xQueueReceive+0xe2>
    428a:	46c0      	nop			; (mov r8, r8)
    428c:	000052b5 	.word	0x000052b5
    4290:	00003391 	.word	0x00003391
    4294:	000036b5 	.word	0x000036b5
    4298:	000021e1 	.word	0x000021e1
    429c:	00002129 	.word	0x00002129
    42a0:	20000020 	.word	0x20000020
    42a4:	0000218d 	.word	0x0000218d
    42a8:	0000210d 	.word	0x0000210d
    42ac:	20000018 	.word	0x20000018
    42b0:	0000217d 	.word	0x0000217d
    42b4:	00002e19 	.word	0x00002e19
    42b8:	00002119 	.word	0x00002119
    42bc:	000028ed 	.word	0x000028ed
    42c0:	0000514d 	.word	0x0000514d
    42c4:	00003381 	.word	0x00003381
    42c8:	000033a9 	.word	0x000033a9
    42cc:	00005201 	.word	0x00005201
    42d0:	00005085 	.word	0x00005085
    42d4:	000036dd 	.word	0x000036dd
    42d8:	00004c9d 	.word	0x00004c9d
    42dc:	00004af5 	.word	0x00004af5
    42e0:	00005219 	.word	0x00005219
    42e4:	00003501 	.word	0x00003501
    42e8:	00002945 	.word	0x00002945

000042ec <xQueueSemaphoreTake>:
{
    42ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    42ee:	46ce      	mov	lr, r9
    42f0:	4647      	mov	r7, r8
    42f2:	b580      	push	{r7, lr}
    42f4:	b085      	sub	sp, #20
    42f6:	1e04      	subs	r4, r0, #0
    42f8:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
    42fa:	d004      	beq.n	4306 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
    42fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
    42fe:	2b00      	cmp	r3, #0
    4300:	d003      	beq.n	430a <xQueueSemaphoreTake+0x1e>
    4302:	b672      	cpsid	i
    4304:	e7fe      	b.n	4304 <xQueueSemaphoreTake+0x18>
	configASSERT( ( pxQueue ) );
    4306:	b672      	cpsid	i
    4308:	e7fe      	b.n	4308 <xQueueSemaphoreTake+0x1c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    430a:	4bb2      	ldr	r3, [pc, #712]	; (45d4 <xQueueSemaphoreTake+0x2e8>)
    430c:	4798      	blx	r3
    430e:	2800      	cmp	r0, #0
    4310:	d104      	bne.n	431c <xQueueSemaphoreTake+0x30>
    4312:	9b01      	ldr	r3, [sp, #4]
    4314:	2b00      	cmp	r3, #0
    4316:	d006      	beq.n	4326 <xQueueSemaphoreTake+0x3a>
    4318:	b672      	cpsid	i
    431a:	e7fe      	b.n	431a <xQueueSemaphoreTake+0x2e>
    431c:	2500      	movs	r5, #0
    431e:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    4320:	4bad      	ldr	r3, [pc, #692]	; (45d8 <xQueueSemaphoreTake+0x2ec>)
    4322:	4698      	mov	r8, r3
    4324:	e0bd      	b.n	44a2 <xQueueSemaphoreTake+0x1b6>
    4326:	2500      	movs	r5, #0
    4328:	2700      	movs	r7, #0
    432a:	e7f9      	b.n	4320 <xQueueSemaphoreTake+0x34>
				traceQUEUE_RECEIVE( pxQueue );
    432c:	4bab      	ldr	r3, [pc, #684]	; (45dc <xQueueSemaphoreTake+0x2f0>)
    432e:	4798      	blx	r3
    4330:	4bab      	ldr	r3, [pc, #684]	; (45e0 <xQueueSemaphoreTake+0x2f4>)
    4332:	4798      	blx	r3
    4334:	4bab      	ldr	r3, [pc, #684]	; (45e4 <xQueueSemaphoreTake+0x2f8>)
    4336:	881b      	ldrh	r3, [r3, #0]
    4338:	4203      	tst	r3, r0
    433a:	d019      	beq.n	4370 <xQueueSemaphoreTake+0x84>
    433c:	0020      	movs	r0, r4
    433e:	4baa      	ldr	r3, [pc, #680]	; (45e8 <xQueueSemaphoreTake+0x2fc>)
    4340:	4798      	blx	r3
    4342:	4ba8      	ldr	r3, [pc, #672]	; (45e4 <xQueueSemaphoreTake+0x2f8>)
    4344:	881b      	ldrh	r3, [r3, #0]
    4346:	4203      	tst	r3, r0
    4348:	d012      	beq.n	4370 <xQueueSemaphoreTake+0x84>
    434a:	0020      	movs	r0, r4
    434c:	4ba7      	ldr	r3, [pc, #668]	; (45ec <xQueueSemaphoreTake+0x300>)
    434e:	4698      	mov	r8, r3
    4350:	4798      	blx	r3
    4352:	4fa7      	ldr	r7, [pc, #668]	; (45f0 <xQueueSemaphoreTake+0x304>)
    4354:	5c3d      	ldrb	r5, [r7, r0]
    4356:	3528      	adds	r5, #40	; 0x28
    4358:	b2ed      	uxtb	r5, r5
    435a:	0020      	movs	r0, r4
    435c:	47c0      	blx	r8
    435e:	5c3f      	ldrb	r7, [r7, r0]
    4360:	0020      	movs	r0, r4
    4362:	4ba4      	ldr	r3, [pc, #656]	; (45f4 <xQueueSemaphoreTake+0x308>)
    4364:	4798      	blx	r3
    4366:	b2c2      	uxtb	r2, r0
    4368:	0039      	movs	r1, r7
    436a:	0028      	movs	r0, r5
    436c:	4ba2      	ldr	r3, [pc, #648]	; (45f8 <xQueueSemaphoreTake+0x30c>)
    436e:	4798      	blx	r3
    4370:	0020      	movs	r0, r4
    4372:	4f9e      	ldr	r7, [pc, #632]	; (45ec <xQueueSemaphoreTake+0x300>)
    4374:	47b8      	blx	r7
    4376:	4d9e      	ldr	r5, [pc, #632]	; (45f0 <xQueueSemaphoreTake+0x304>)
    4378:	5c2b      	ldrb	r3, [r5, r0]
    437a:	4699      	mov	r9, r3
    437c:	0020      	movs	r0, r4
    437e:	4b9d      	ldr	r3, [pc, #628]	; (45f4 <xQueueSemaphoreTake+0x308>)
    4380:	4798      	blx	r3
    4382:	b2c3      	uxtb	r3, r0
    4384:	4698      	mov	r8, r3
    4386:	0020      	movs	r0, r4
    4388:	47b8      	blx	r7
    438a:	5c2b      	ldrb	r3, [r5, r0]
    438c:	2b02      	cmp	r3, #2
    438e:	d124      	bne.n	43da <xQueueSemaphoreTake+0xee>
    4390:	4b92      	ldr	r3, [pc, #584]	; (45dc <xQueueSemaphoreTake+0x2f0>)
    4392:	4798      	blx	r3
    4394:	4b99      	ldr	r3, [pc, #612]	; (45fc <xQueueSemaphoreTake+0x310>)
    4396:	4798      	blx	r3
    4398:	b2c2      	uxtb	r2, r0
    439a:	4641      	mov	r1, r8
    439c:	4648      	mov	r0, r9
    439e:	4b98      	ldr	r3, [pc, #608]	; (4600 <xQueueSemaphoreTake+0x314>)
    43a0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    43a2:	3e01      	subs	r6, #1
    43a4:	63a6      	str	r6, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    43a6:	6823      	ldr	r3, [r4, #0]
    43a8:	2b00      	cmp	r3, #0
    43aa:	d102      	bne.n	43b2 <xQueueSemaphoreTake+0xc6>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    43ac:	4b95      	ldr	r3, [pc, #596]	; (4604 <xQueueSemaphoreTake+0x318>)
    43ae:	4798      	blx	r3
    43b0:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    43b2:	6923      	ldr	r3, [r4, #16]
    43b4:	2b00      	cmp	r3, #0
    43b6:	d007      	beq.n	43c8 <xQueueSemaphoreTake+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    43b8:	0020      	movs	r0, r4
    43ba:	3010      	adds	r0, #16
    43bc:	4b92      	ldr	r3, [pc, #584]	; (4608 <xQueueSemaphoreTake+0x31c>)
    43be:	4798      	blx	r3
    43c0:	2800      	cmp	r0, #0
    43c2:	d001      	beq.n	43c8 <xQueueSemaphoreTake+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
    43c4:	4b91      	ldr	r3, [pc, #580]	; (460c <xQueueSemaphoreTake+0x320>)
    43c6:	4798      	blx	r3
				taskEXIT_CRITICAL();
    43c8:	4b91      	ldr	r3, [pc, #580]	; (4610 <xQueueSemaphoreTake+0x324>)
    43ca:	4798      	blx	r3
				return pdPASS;
    43cc:	2501      	movs	r5, #1
}
    43ce:	0028      	movs	r0, r5
    43d0:	b005      	add	sp, #20
    43d2:	bc0c      	pop	{r2, r3}
    43d4:	4690      	mov	r8, r2
    43d6:	4699      	mov	r9, r3
    43d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
    43da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    43dc:	3a01      	subs	r2, #1
    43de:	b2d2      	uxtb	r2, r2
    43e0:	e7db      	b.n	439a <xQueueSemaphoreTake+0xae>
						configASSERT( xInheritanceOccurred == pdFALSE );
    43e2:	2d00      	cmp	r5, #0
    43e4:	d001      	beq.n	43ea <xQueueSemaphoreTake+0xfe>
    43e6:	b672      	cpsid	i
    43e8:	e7fe      	b.n	43e8 <xQueueSemaphoreTake+0xfc>
					taskEXIT_CRITICAL();
    43ea:	4b89      	ldr	r3, [pc, #548]	; (4610 <xQueueSemaphoreTake+0x324>)
    43ec:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    43ee:	4b7b      	ldr	r3, [pc, #492]	; (45dc <xQueueSemaphoreTake+0x2f0>)
    43f0:	4798      	blx	r3
    43f2:	4b7b      	ldr	r3, [pc, #492]	; (45e0 <xQueueSemaphoreTake+0x2f4>)
    43f4:	4798      	blx	r3
    43f6:	4b7b      	ldr	r3, [pc, #492]	; (45e4 <xQueueSemaphoreTake+0x2f8>)
    43f8:	881b      	ldrh	r3, [r3, #0]
    43fa:	4203      	tst	r3, r0
    43fc:	d0e7      	beq.n	43ce <xQueueSemaphoreTake+0xe2>
    43fe:	0020      	movs	r0, r4
    4400:	4b79      	ldr	r3, [pc, #484]	; (45e8 <xQueueSemaphoreTake+0x2fc>)
    4402:	4798      	blx	r3
    4404:	4b77      	ldr	r3, [pc, #476]	; (45e4 <xQueueSemaphoreTake+0x2f8>)
    4406:	881b      	ldrh	r3, [r3, #0]
    4408:	4203      	tst	r3, r0
    440a:	d0e0      	beq.n	43ce <xQueueSemaphoreTake+0xe2>
    440c:	0020      	movs	r0, r4
    440e:	4b77      	ldr	r3, [pc, #476]	; (45ec <xQueueSemaphoreTake+0x300>)
    4410:	4698      	mov	r8, r3
    4412:	4798      	blx	r3
    4414:	4f76      	ldr	r7, [pc, #472]	; (45f0 <xQueueSemaphoreTake+0x304>)
    4416:	5c3e      	ldrb	r6, [r7, r0]
    4418:	3650      	adds	r6, #80	; 0x50
    441a:	b2f6      	uxtb	r6, r6
    441c:	0020      	movs	r0, r4
    441e:	47c0      	blx	r8
    4420:	5c3f      	ldrb	r7, [r7, r0]
    4422:	0020      	movs	r0, r4
    4424:	4b73      	ldr	r3, [pc, #460]	; (45f4 <xQueueSemaphoreTake+0x308>)
    4426:	4798      	blx	r3
    4428:	b2c2      	uxtb	r2, r0
    442a:	0039      	movs	r1, r7
    442c:	0030      	movs	r0, r6
    442e:	4b72      	ldr	r3, [pc, #456]	; (45f8 <xQueueSemaphoreTake+0x30c>)
    4430:	4798      	blx	r3
    4432:	e7cc      	b.n	43ce <xQueueSemaphoreTake+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
    4434:	a802      	add	r0, sp, #8
    4436:	4b77      	ldr	r3, [pc, #476]	; (4614 <xQueueSemaphoreTake+0x328>)
    4438:	4798      	blx	r3
    443a:	e03c      	b.n	44b6 <xQueueSemaphoreTake+0x1ca>
		prvLockQueue( pxQueue );
    443c:	2200      	movs	r2, #0
    443e:	2344      	movs	r3, #68	; 0x44
    4440:	54e2      	strb	r2, [r4, r3]
    4442:	e043      	b.n	44cc <xQueueSemaphoreTake+0x1e0>
    4444:	2200      	movs	r2, #0
    4446:	2345      	movs	r3, #69	; 0x45
    4448:	54e2      	strb	r2, [r4, r3]
    444a:	e044      	b.n	44d6 <xQueueSemaphoreTake+0x1ea>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    444c:	0020      	movs	r0, r4
    444e:	4b66      	ldr	r3, [pc, #408]	; (45e8 <xQueueSemaphoreTake+0x2fc>)
    4450:	4798      	blx	r3
    4452:	4b64      	ldr	r3, [pc, #400]	; (45e4 <xQueueSemaphoreTake+0x2f8>)
    4454:	881b      	ldrh	r3, [r3, #0]
    4456:	4203      	tst	r3, r0
    4458:	d052      	beq.n	4500 <xQueueSemaphoreTake+0x214>
    445a:	0020      	movs	r0, r4
    445c:	4b63      	ldr	r3, [pc, #396]	; (45ec <xQueueSemaphoreTake+0x300>)
    445e:	4699      	mov	r9, r3
    4460:	4798      	blx	r3
    4462:	4f63      	ldr	r7, [pc, #396]	; (45f0 <xQueueSemaphoreTake+0x304>)
    4464:	5c3e      	ldrb	r6, [r7, r0]
    4466:	3668      	adds	r6, #104	; 0x68
    4468:	b2f6      	uxtb	r6, r6
    446a:	0020      	movs	r0, r4
    446c:	47c8      	blx	r9
    446e:	5c3f      	ldrb	r7, [r7, r0]
    4470:	0020      	movs	r0, r4
    4472:	4b60      	ldr	r3, [pc, #384]	; (45f4 <xQueueSemaphoreTake+0x308>)
    4474:	4798      	blx	r3
    4476:	b2c2      	uxtb	r2, r0
    4478:	0039      	movs	r1, r7
    447a:	0030      	movs	r0, r6
    447c:	4b5e      	ldr	r3, [pc, #376]	; (45f8 <xQueueSemaphoreTake+0x30c>)
    447e:	4798      	blx	r3
    4480:	e03e      	b.n	4500 <xQueueSemaphoreTake+0x214>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4482:	6823      	ldr	r3, [r4, #0]
    4484:	2b00      	cmp	r3, #0
    4486:	d052      	beq.n	452e <xQueueSemaphoreTake+0x242>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4488:	0020      	movs	r0, r4
    448a:	3024      	adds	r0, #36	; 0x24
    448c:	9901      	ldr	r1, [sp, #4]
    448e:	4b62      	ldr	r3, [pc, #392]	; (4618 <xQueueSemaphoreTake+0x32c>)
    4490:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    4492:	0020      	movs	r0, r4
    4494:	4b61      	ldr	r3, [pc, #388]	; (461c <xQueueSemaphoreTake+0x330>)
    4496:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    4498:	4b61      	ldr	r3, [pc, #388]	; (4620 <xQueueSemaphoreTake+0x334>)
    449a:	4798      	blx	r3
    449c:	2800      	cmp	r0, #0
    449e:	d04f      	beq.n	4540 <xQueueSemaphoreTake+0x254>
    44a0:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    44a2:	47c0      	blx	r8
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    44a4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    44a6:	2e00      	cmp	r6, #0
    44a8:	d000      	beq.n	44ac <xQueueSemaphoreTake+0x1c0>
    44aa:	e73f      	b.n	432c <xQueueSemaphoreTake+0x40>
				if( xTicksToWait == ( TickType_t ) 0 )
    44ac:	9b01      	ldr	r3, [sp, #4]
    44ae:	2b00      	cmp	r3, #0
    44b0:	d097      	beq.n	43e2 <xQueueSemaphoreTake+0xf6>
				else if( xEntryTimeSet == pdFALSE )
    44b2:	2f00      	cmp	r7, #0
    44b4:	d0be      	beq.n	4434 <xQueueSemaphoreTake+0x148>
		taskEXIT_CRITICAL();
    44b6:	4b56      	ldr	r3, [pc, #344]	; (4610 <xQueueSemaphoreTake+0x324>)
    44b8:	4798      	blx	r3
		vTaskSuspendAll();
    44ba:	4b5a      	ldr	r3, [pc, #360]	; (4624 <xQueueSemaphoreTake+0x338>)
    44bc:	4798      	blx	r3
		prvLockQueue( pxQueue );
    44be:	4b46      	ldr	r3, [pc, #280]	; (45d8 <xQueueSemaphoreTake+0x2ec>)
    44c0:	4798      	blx	r3
    44c2:	2344      	movs	r3, #68	; 0x44
    44c4:	5ce3      	ldrb	r3, [r4, r3]
    44c6:	b25b      	sxtb	r3, r3
    44c8:	3301      	adds	r3, #1
    44ca:	d0b7      	beq.n	443c <xQueueSemaphoreTake+0x150>
    44cc:	2345      	movs	r3, #69	; 0x45
    44ce:	5ce3      	ldrb	r3, [r4, r3]
    44d0:	b25b      	sxtb	r3, r3
    44d2:	3301      	adds	r3, #1
    44d4:	d0b6      	beq.n	4444 <xQueueSemaphoreTake+0x158>
    44d6:	4b4e      	ldr	r3, [pc, #312]	; (4610 <xQueueSemaphoreTake+0x324>)
    44d8:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    44da:	a901      	add	r1, sp, #4
    44dc:	a802      	add	r0, sp, #8
    44de:	4b52      	ldr	r3, [pc, #328]	; (4628 <xQueueSemaphoreTake+0x33c>)
    44e0:	4798      	blx	r3
    44e2:	2800      	cmp	r0, #0
    44e4:	d135      	bne.n	4552 <xQueueSemaphoreTake+0x266>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    44e6:	0020      	movs	r0, r4
    44e8:	4b50      	ldr	r3, [pc, #320]	; (462c <xQueueSemaphoreTake+0x340>)
    44ea:	4798      	blx	r3
    44ec:	2800      	cmp	r0, #0
    44ee:	d02a      	beq.n	4546 <xQueueSemaphoreTake+0x25a>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    44f0:	4b3a      	ldr	r3, [pc, #232]	; (45dc <xQueueSemaphoreTake+0x2f0>)
    44f2:	4798      	blx	r3
    44f4:	4b3a      	ldr	r3, [pc, #232]	; (45e0 <xQueueSemaphoreTake+0x2f4>)
    44f6:	4798      	blx	r3
    44f8:	4b3a      	ldr	r3, [pc, #232]	; (45e4 <xQueueSemaphoreTake+0x2f8>)
    44fa:	881b      	ldrh	r3, [r3, #0]
    44fc:	4203      	tst	r3, r0
    44fe:	d1a5      	bne.n	444c <xQueueSemaphoreTake+0x160>
    4500:	0020      	movs	r0, r4
    4502:	4b3a      	ldr	r3, [pc, #232]	; (45ec <xQueueSemaphoreTake+0x300>)
    4504:	4798      	blx	r3
    4506:	4b3a      	ldr	r3, [pc, #232]	; (45f0 <xQueueSemaphoreTake+0x304>)
    4508:	5c1b      	ldrb	r3, [r3, r0]
    450a:	2b02      	cmp	r3, #2
    450c:	d0b9      	beq.n	4482 <xQueueSemaphoreTake+0x196>
    450e:	4b33      	ldr	r3, [pc, #204]	; (45dc <xQueueSemaphoreTake+0x2f0>)
    4510:	4798      	blx	r3
    4512:	4b33      	ldr	r3, [pc, #204]	; (45e0 <xQueueSemaphoreTake+0x2f4>)
    4514:	4798      	blx	r3
    4516:	4b33      	ldr	r3, [pc, #204]	; (45e4 <xQueueSemaphoreTake+0x2f8>)
    4518:	881b      	ldrh	r3, [r3, #0]
    451a:	4203      	tst	r3, r0
    451c:	d0b1      	beq.n	4482 <xQueueSemaphoreTake+0x196>
    451e:	4b2f      	ldr	r3, [pc, #188]	; (45dc <xQueueSemaphoreTake+0x2f0>)
    4520:	4798      	blx	r3
    4522:	4b36      	ldr	r3, [pc, #216]	; (45fc <xQueueSemaphoreTake+0x310>)
    4524:	4798      	blx	r3
    4526:	b2c0      	uxtb	r0, r0
    4528:	4b41      	ldr	r3, [pc, #260]	; (4630 <xQueueSemaphoreTake+0x344>)
    452a:	4798      	blx	r3
    452c:	e7a9      	b.n	4482 <xQueueSemaphoreTake+0x196>
						taskENTER_CRITICAL();
    452e:	4b2a      	ldr	r3, [pc, #168]	; (45d8 <xQueueSemaphoreTake+0x2ec>)
    4530:	4798      	blx	r3
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4532:	6860      	ldr	r0, [r4, #4]
    4534:	4b3f      	ldr	r3, [pc, #252]	; (4634 <xQueueSemaphoreTake+0x348>)
    4536:	4798      	blx	r3
    4538:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
    453a:	4b35      	ldr	r3, [pc, #212]	; (4610 <xQueueSemaphoreTake+0x324>)
    453c:	4798      	blx	r3
    453e:	e7a3      	b.n	4488 <xQueueSemaphoreTake+0x19c>
					portYIELD_WITHIN_API();
    4540:	4b32      	ldr	r3, [pc, #200]	; (460c <xQueueSemaphoreTake+0x320>)
    4542:	4798      	blx	r3
    4544:	e7ac      	b.n	44a0 <xQueueSemaphoreTake+0x1b4>
				prvUnlockQueue( pxQueue );
    4546:	0020      	movs	r0, r4
    4548:	4b34      	ldr	r3, [pc, #208]	; (461c <xQueueSemaphoreTake+0x330>)
    454a:	4798      	blx	r3
				( void ) xTaskResumeAll();
    454c:	4b34      	ldr	r3, [pc, #208]	; (4620 <xQueueSemaphoreTake+0x334>)
    454e:	4798      	blx	r3
    4550:	e7a6      	b.n	44a0 <xQueueSemaphoreTake+0x1b4>
			prvUnlockQueue( pxQueue );
    4552:	0020      	movs	r0, r4
    4554:	4b31      	ldr	r3, [pc, #196]	; (461c <xQueueSemaphoreTake+0x330>)
    4556:	4798      	blx	r3
			( void ) xTaskResumeAll();
    4558:	4b31      	ldr	r3, [pc, #196]	; (4620 <xQueueSemaphoreTake+0x334>)
    455a:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    455c:	0020      	movs	r0, r4
    455e:	4b33      	ldr	r3, [pc, #204]	; (462c <xQueueSemaphoreTake+0x340>)
    4560:	4798      	blx	r3
    4562:	2800      	cmp	r0, #0
    4564:	d09c      	beq.n	44a0 <xQueueSemaphoreTake+0x1b4>
					if( xInheritanceOccurred != pdFALSE )
    4566:	2d00      	cmp	r5, #0
    4568:	d00e      	beq.n	4588 <xQueueSemaphoreTake+0x29c>
						taskENTER_CRITICAL();
    456a:	4b1b      	ldr	r3, [pc, #108]	; (45d8 <xQueueSemaphoreTake+0x2ec>)
    456c:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    456e:	6a63      	ldr	r3, [r4, #36]	; 0x24
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    4570:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    4572:	2b00      	cmp	r3, #0
    4574:	d003      	beq.n	457e <xQueueSemaphoreTake+0x292>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    4576:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4578:	681b      	ldr	r3, [r3, #0]
    457a:	3105      	adds	r1, #5
    457c:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    457e:	6860      	ldr	r0, [r4, #4]
    4580:	4b2d      	ldr	r3, [pc, #180]	; (4638 <xQueueSemaphoreTake+0x34c>)
    4582:	4798      	blx	r3
						taskEXIT_CRITICAL();
    4584:	4b22      	ldr	r3, [pc, #136]	; (4610 <xQueueSemaphoreTake+0x324>)
    4586:	4798      	blx	r3
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    4588:	4b14      	ldr	r3, [pc, #80]	; (45dc <xQueueSemaphoreTake+0x2f0>)
    458a:	4798      	blx	r3
    458c:	4b14      	ldr	r3, [pc, #80]	; (45e0 <xQueueSemaphoreTake+0x2f4>)
    458e:	4798      	blx	r3
    4590:	4b14      	ldr	r3, [pc, #80]	; (45e4 <xQueueSemaphoreTake+0x2f8>)
    4592:	881b      	ldrh	r3, [r3, #0]
				return errQUEUE_EMPTY;
    4594:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    4596:	4203      	tst	r3, r0
    4598:	d100      	bne.n	459c <xQueueSemaphoreTake+0x2b0>
    459a:	e718      	b.n	43ce <xQueueSemaphoreTake+0xe2>
    459c:	0020      	movs	r0, r4
    459e:	4b12      	ldr	r3, [pc, #72]	; (45e8 <xQueueSemaphoreTake+0x2fc>)
    45a0:	4798      	blx	r3
    45a2:	4b10      	ldr	r3, [pc, #64]	; (45e4 <xQueueSemaphoreTake+0x2f8>)
    45a4:	881b      	ldrh	r3, [r3, #0]
    45a6:	4203      	tst	r3, r0
    45a8:	d100      	bne.n	45ac <xQueueSemaphoreTake+0x2c0>
    45aa:	e710      	b.n	43ce <xQueueSemaphoreTake+0xe2>
    45ac:	0020      	movs	r0, r4
    45ae:	4f0f      	ldr	r7, [pc, #60]	; (45ec <xQueueSemaphoreTake+0x300>)
    45b0:	47b8      	blx	r7
    45b2:	4e0f      	ldr	r6, [pc, #60]	; (45f0 <xQueueSemaphoreTake+0x304>)
    45b4:	5c35      	ldrb	r5, [r6, r0]
    45b6:	3550      	adds	r5, #80	; 0x50
    45b8:	b2ed      	uxtb	r5, r5
    45ba:	0020      	movs	r0, r4
    45bc:	47b8      	blx	r7
    45be:	5c36      	ldrb	r6, [r6, r0]
    45c0:	0020      	movs	r0, r4
    45c2:	4b0c      	ldr	r3, [pc, #48]	; (45f4 <xQueueSemaphoreTake+0x308>)
    45c4:	4798      	blx	r3
    45c6:	b2c2      	uxtb	r2, r0
    45c8:	0031      	movs	r1, r6
    45ca:	0028      	movs	r0, r5
    45cc:	4b0a      	ldr	r3, [pc, #40]	; (45f8 <xQueueSemaphoreTake+0x30c>)
    45ce:	4798      	blx	r3
				return errQUEUE_EMPTY;
    45d0:	2500      	movs	r5, #0
    45d2:	e6fc      	b.n	43ce <xQueueSemaphoreTake+0xe2>
    45d4:	000052b5 	.word	0x000052b5
    45d8:	00003391 	.word	0x00003391
    45dc:	000021e1 	.word	0x000021e1
    45e0:	00002129 	.word	0x00002129
    45e4:	20000020 	.word	0x20000020
    45e8:	0000218d 	.word	0x0000218d
    45ec:	0000210d 	.word	0x0000210d
    45f0:	20000018 	.word	0x20000018
    45f4:	0000217d 	.word	0x0000217d
    45f8:	00002e19 	.word	0x00002e19
    45fc:	00002119 	.word	0x00002119
    4600:	000028ed 	.word	0x000028ed
    4604:	000055e5 	.word	0x000055e5
    4608:	0000514d 	.word	0x0000514d
    460c:	00003381 	.word	0x00003381
    4610:	000033a9 	.word	0x000033a9
    4614:	00005201 	.word	0x00005201
    4618:	00005085 	.word	0x00005085
    461c:	000036dd 	.word	0x000036dd
    4620:	00004c9d 	.word	0x00004c9d
    4624:	00004af5 	.word	0x00004af5
    4628:	00005219 	.word	0x00005219
    462c:	00003501 	.word	0x00003501
    4630:	00002945 	.word	0x00002945
    4634:	000052d5 	.word	0x000052d5
    4638:	000054e1 	.word	0x000054e1

0000463c <uxQueueGetQueueNumber>:
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    463c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
    463e:	4770      	bx	lr

00004640 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
    4640:	64c1      	str	r1, [r0, #76]	; 0x4c
	}
    4642:	4770      	bx	lr

00004644 <ucQueueGetQueueType>:
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    4644:	2350      	movs	r3, #80	; 0x50
    4646:	5cc0      	ldrb	r0, [r0, r3]
	}
    4648:	4770      	bx	lr
	...

0000464c <vQueueWaitForMessageRestricted>:
	{
    464c:	b570      	push	{r4, r5, r6, lr}
    464e:	0004      	movs	r4, r0
    4650:	000d      	movs	r5, r1
    4652:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
    4654:	4b11      	ldr	r3, [pc, #68]	; (469c <vQueueWaitForMessageRestricted+0x50>)
    4656:	4798      	blx	r3
    4658:	2344      	movs	r3, #68	; 0x44
    465a:	5ce3      	ldrb	r3, [r4, r3]
    465c:	b25b      	sxtb	r3, r3
    465e:	3301      	adds	r3, #1
    4660:	d00d      	beq.n	467e <vQueueWaitForMessageRestricted+0x32>
    4662:	2345      	movs	r3, #69	; 0x45
    4664:	5ce3      	ldrb	r3, [r4, r3]
    4666:	b25b      	sxtb	r3, r3
    4668:	3301      	adds	r3, #1
    466a:	d00c      	beq.n	4686 <vQueueWaitForMessageRestricted+0x3a>
    466c:	4b0c      	ldr	r3, [pc, #48]	; (46a0 <vQueueWaitForMessageRestricted+0x54>)
    466e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    4670:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4672:	2b00      	cmp	r3, #0
    4674:	d00b      	beq.n	468e <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
    4676:	0020      	movs	r0, r4
    4678:	4b0a      	ldr	r3, [pc, #40]	; (46a4 <vQueueWaitForMessageRestricted+0x58>)
    467a:	4798      	blx	r3
	}
    467c:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    467e:	2200      	movs	r2, #0
    4680:	2344      	movs	r3, #68	; 0x44
    4682:	54e2      	strb	r2, [r4, r3]
    4684:	e7ed      	b.n	4662 <vQueueWaitForMessageRestricted+0x16>
    4686:	2200      	movs	r2, #0
    4688:	2345      	movs	r3, #69	; 0x45
    468a:	54e2      	strb	r2, [r4, r3]
    468c:	e7ee      	b.n	466c <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    468e:	0020      	movs	r0, r4
    4690:	3024      	adds	r0, #36	; 0x24
    4692:	0032      	movs	r2, r6
    4694:	0029      	movs	r1, r5
    4696:	4b04      	ldr	r3, [pc, #16]	; (46a8 <vQueueWaitForMessageRestricted+0x5c>)
    4698:	4798      	blx	r3
    469a:	e7ec      	b.n	4676 <vQueueWaitForMessageRestricted+0x2a>
    469c:	00003391 	.word	0x00003391
    46a0:	000033a9 	.word	0x000033a9
    46a4:	000036dd 	.word	0x000036dd
    46a8:	000050b1 	.word	0x000050b1

000046ac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    46ac:	4b08      	ldr	r3, [pc, #32]	; (46d0 <prvResetNextTaskUnblockTime+0x24>)
    46ae:	681b      	ldr	r3, [r3, #0]
    46b0:	681b      	ldr	r3, [r3, #0]
    46b2:	2b00      	cmp	r3, #0
    46b4:	d007      	beq.n	46c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    46b6:	4b06      	ldr	r3, [pc, #24]	; (46d0 <prvResetNextTaskUnblockTime+0x24>)
    46b8:	681b      	ldr	r3, [r3, #0]
    46ba:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    46bc:	68db      	ldr	r3, [r3, #12]
    46be:	685a      	ldr	r2, [r3, #4]
    46c0:	4b04      	ldr	r3, [pc, #16]	; (46d4 <prvResetNextTaskUnblockTime+0x28>)
    46c2:	601a      	str	r2, [r3, #0]
	}
}
    46c4:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    46c6:	2201      	movs	r2, #1
    46c8:	4252      	negs	r2, r2
    46ca:	4b02      	ldr	r3, [pc, #8]	; (46d4 <prvResetNextTaskUnblockTime+0x28>)
    46cc:	601a      	str	r2, [r3, #0]
    46ce:	e7f9      	b.n	46c4 <prvResetNextTaskUnblockTime+0x18>
    46d0:	200036c4 	.word	0x200036c4
    46d4:	20003774 	.word	0x20003774

000046d8 <prvIdleTask>:
{
    46d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    46da:	46d6      	mov	lr, sl
    46dc:	464f      	mov	r7, r9
    46de:	4646      	mov	r6, r8
    46e0:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    46e2:	4b14      	ldr	r3, [pc, #80]	; (4734 <prvIdleTask+0x5c>)
    46e4:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
    46e6:	4b14      	ldr	r3, [pc, #80]	; (4738 <prvIdleTask+0x60>)
    46e8:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    46ea:	4f14      	ldr	r7, [pc, #80]	; (473c <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    46ec:	4b14      	ldr	r3, [pc, #80]	; (4740 <prvIdleTask+0x68>)
    46ee:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    46f0:	464b      	mov	r3, r9
    46f2:	681b      	ldr	r3, [r3, #0]
    46f4:	2b00      	cmp	r3, #0
    46f6:	d016      	beq.n	4726 <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
    46f8:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    46fa:	68fb      	ldr	r3, [r7, #12]
    46fc:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    46fe:	1d28      	adds	r0, r5, #4
    4700:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
    4702:	4a10      	ldr	r2, [pc, #64]	; (4744 <prvIdleTask+0x6c>)
    4704:	6813      	ldr	r3, [r2, #0]
    4706:	3b01      	subs	r3, #1
    4708:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    470a:	4c0a      	ldr	r4, [pc, #40]	; (4734 <prvIdleTask+0x5c>)
    470c:	6823      	ldr	r3, [r4, #0]
    470e:	3b01      	subs	r3, #1
    4710:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    4712:	4b0d      	ldr	r3, [pc, #52]	; (4748 <prvIdleTask+0x70>)
    4714:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    4716:	6b28      	ldr	r0, [r5, #48]	; 0x30
    4718:	4e0c      	ldr	r6, [pc, #48]	; (474c <prvIdleTask+0x74>)
    471a:	47b0      	blx	r6
			vPortFree( pxTCB );
    471c:	0028      	movs	r0, r5
    471e:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    4720:	6823      	ldr	r3, [r4, #0]
    4722:	2b00      	cmp	r3, #0
    4724:	d1e8      	bne.n	46f8 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    4726:	4b0a      	ldr	r3, [pc, #40]	; (4750 <prvIdleTask+0x78>)
    4728:	681b      	ldr	r3, [r3, #0]
    472a:	2b01      	cmp	r3, #1
    472c:	d9e0      	bls.n	46f0 <prvIdleTask+0x18>
				taskYIELD();
    472e:	4b09      	ldr	r3, [pc, #36]	; (4754 <prvIdleTask+0x7c>)
    4730:	4798      	blx	r3
    4732:	e7dd      	b.n	46f0 <prvIdleTask+0x18>
    4734:	20003734 	.word	0x20003734
    4738:	00003391 	.word	0x00003391
    473c:	200037a8 	.word	0x200037a8
    4740:	0000325f 	.word	0x0000325f
    4744:	20003730 	.word	0x20003730
    4748:	000033a9 	.word	0x000033a9
    474c:	000034e5 	.word	0x000034e5
    4750:	200036cc 	.word	0x200036cc
    4754:	00003381 	.word	0x00003381

00004758 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    4758:	b570      	push	{r4, r5, r6, lr}
    475a:	0004      	movs	r4, r0
    475c:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    475e:	4b17      	ldr	r3, [pc, #92]	; (47bc <prvAddCurrentTaskToDelayedList+0x64>)
    4760:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4762:	4b17      	ldr	r3, [pc, #92]	; (47c0 <prvAddCurrentTaskToDelayedList+0x68>)
    4764:	6818      	ldr	r0, [r3, #0]
    4766:	3004      	adds	r0, #4
    4768:	4b16      	ldr	r3, [pc, #88]	; (47c4 <prvAddCurrentTaskToDelayedList+0x6c>)
    476a:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    476c:	1c63      	adds	r3, r4, #1
    476e:	d013      	beq.n	4798 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    4770:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    4772:	4b13      	ldr	r3, [pc, #76]	; (47c0 <prvAddCurrentTaskToDelayedList+0x68>)
    4774:	681b      	ldr	r3, [r3, #0]
    4776:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    4778:	42a6      	cmp	r6, r4
    477a:	d816      	bhi.n	47aa <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    477c:	4b12      	ldr	r3, [pc, #72]	; (47c8 <prvAddCurrentTaskToDelayedList+0x70>)
    477e:	6818      	ldr	r0, [r3, #0]
    4780:	4b0f      	ldr	r3, [pc, #60]	; (47c0 <prvAddCurrentTaskToDelayedList+0x68>)
    4782:	6819      	ldr	r1, [r3, #0]
    4784:	3104      	adds	r1, #4
    4786:	4b11      	ldr	r3, [pc, #68]	; (47cc <prvAddCurrentTaskToDelayedList+0x74>)
    4788:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    478a:	4b11      	ldr	r3, [pc, #68]	; (47d0 <prvAddCurrentTaskToDelayedList+0x78>)
    478c:	681b      	ldr	r3, [r3, #0]
    478e:	429c      	cmp	r4, r3
    4790:	d212      	bcs.n	47b8 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
    4792:	4b0f      	ldr	r3, [pc, #60]	; (47d0 <prvAddCurrentTaskToDelayedList+0x78>)
    4794:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    4796:	e00f      	b.n	47b8 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    4798:	2d00      	cmp	r5, #0
    479a:	d0e9      	beq.n	4770 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    479c:	4b08      	ldr	r3, [pc, #32]	; (47c0 <prvAddCurrentTaskToDelayedList+0x68>)
    479e:	6819      	ldr	r1, [r3, #0]
    47a0:	3104      	adds	r1, #4
    47a2:	480c      	ldr	r0, [pc, #48]	; (47d4 <prvAddCurrentTaskToDelayedList+0x7c>)
    47a4:	4b0c      	ldr	r3, [pc, #48]	; (47d8 <prvAddCurrentTaskToDelayedList+0x80>)
    47a6:	4798      	blx	r3
    47a8:	e006      	b.n	47b8 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    47aa:	4b0c      	ldr	r3, [pc, #48]	; (47dc <prvAddCurrentTaskToDelayedList+0x84>)
    47ac:	6818      	ldr	r0, [r3, #0]
    47ae:	4b04      	ldr	r3, [pc, #16]	; (47c0 <prvAddCurrentTaskToDelayedList+0x68>)
    47b0:	6819      	ldr	r1, [r3, #0]
    47b2:	3104      	adds	r1, #4
    47b4:	4b05      	ldr	r3, [pc, #20]	; (47cc <prvAddCurrentTaskToDelayedList+0x74>)
    47b6:	4798      	blx	r3
}
    47b8:	bd70      	pop	{r4, r5, r6, pc}
    47ba:	46c0      	nop			; (mov r8, r8)
    47bc:	200037bc 	.word	0x200037bc
    47c0:	200036c0 	.word	0x200036c0
    47c4:	0000325f 	.word	0x0000325f
    47c8:	200036c4 	.word	0x200036c4
    47cc:	00003231 	.word	0x00003231
    47d0:	20003774 	.word	0x20003774
    47d4:	20003794 	.word	0x20003794
    47d8:	00003219 	.word	0x00003219
    47dc:	200036c8 	.word	0x200036c8

000047e0 <xTaskCreate>:
	{
    47e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    47e2:	46c6      	mov	lr, r8
    47e4:	b500      	push	{lr}
    47e6:	b084      	sub	sp, #16
    47e8:	9001      	str	r0, [sp, #4]
    47ea:	000d      	movs	r5, r1
    47ec:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    47ee:	0097      	lsls	r7, r2, #2
    47f0:	0038      	movs	r0, r7
    47f2:	4b81      	ldr	r3, [pc, #516]	; (49f8 <xTaskCreate+0x218>)
    47f4:	4798      	blx	r3
    47f6:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    47f8:	d100      	bne.n	47fc <xTaskCreate+0x1c>
    47fa:	e0b6      	b.n	496a <xTaskCreate+0x18a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    47fc:	2054      	movs	r0, #84	; 0x54
    47fe:	4b7e      	ldr	r3, [pc, #504]	; (49f8 <xTaskCreate+0x218>)
    4800:	4798      	blx	r3
    4802:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    4804:	d100      	bne.n	4808 <xTaskCreate+0x28>
    4806:	e0ad      	b.n	4964 <xTaskCreate+0x184>
					pxNewTCB->pxStack = pxStack;
    4808:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    480a:	003a      	movs	r2, r7
    480c:	21a5      	movs	r1, #165	; 0xa5
    480e:	0030      	movs	r0, r6
    4810:	4b7a      	ldr	r3, [pc, #488]	; (49fc <xTaskCreate+0x21c>)
    4812:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    4814:	1f3a      	subs	r2, r7, #4
    4816:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4818:	469c      	mov	ip, r3
    481a:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    481c:	2307      	movs	r3, #7
    481e:	439a      	bics	r2, r3
    4820:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    4822:	782a      	ldrb	r2, [r5, #0]
    4824:	332d      	adds	r3, #45	; 0x2d
    4826:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    4828:	782b      	ldrb	r3, [r5, #0]
    482a:	2b00      	cmp	r3, #0
    482c:	d00d      	beq.n	484a <xTaskCreate+0x6a>
    482e:	3501      	adds	r5, #1
    4830:	0023      	movs	r3, r4
    4832:	3335      	adds	r3, #53	; 0x35
    4834:	0020      	movs	r0, r4
    4836:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    4838:	782a      	ldrb	r2, [r5, #0]
    483a:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
    483c:	782a      	ldrb	r2, [r5, #0]
    483e:	2a00      	cmp	r2, #0
    4840:	d003      	beq.n	484a <xTaskCreate+0x6a>
    4842:	3501      	adds	r5, #1
    4844:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    4846:	4283      	cmp	r3, r0
    4848:	d1f6      	bne.n	4838 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    484a:	2200      	movs	r2, #0
    484c:	233b      	movs	r3, #59	; 0x3b
    484e:	54e2      	strb	r2, [r4, r3]
    4850:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    4852:	2f04      	cmp	r7, #4
    4854:	d900      	bls.n	4858 <xTaskCreate+0x78>
    4856:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
    4858:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    485a:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    485c:	2600      	movs	r6, #0
    485e:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    4860:	1d23      	adds	r3, r4, #4
    4862:	9303      	str	r3, [sp, #12]
    4864:	0018      	movs	r0, r3
    4866:	4d66      	ldr	r5, [pc, #408]	; (4a00 <xTaskCreate+0x220>)
    4868:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    486a:	0020      	movs	r0, r4
    486c:	3018      	adds	r0, #24
    486e:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    4870:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4872:	2305      	movs	r3, #5
    4874:	1bdb      	subs	r3, r3, r7
    4876:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    4878:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    487a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    487c:	2350      	movs	r3, #80	; 0x50
    487e:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4880:	9a02      	ldr	r2, [sp, #8]
    4882:	9901      	ldr	r1, [sp, #4]
    4884:	4640      	mov	r0, r8
    4886:	4b5f      	ldr	r3, [pc, #380]	; (4a04 <xTaskCreate+0x224>)
    4888:	4798      	blx	r3
    488a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    488c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    488e:	2b00      	cmp	r3, #0
    4890:	d000      	beq.n	4894 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    4892:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    4894:	4b5c      	ldr	r3, [pc, #368]	; (4a08 <xTaskCreate+0x228>)
    4896:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    4898:	4a5c      	ldr	r2, [pc, #368]	; (4a0c <xTaskCreate+0x22c>)
    489a:	6813      	ldr	r3, [r2, #0]
    489c:	3301      	adds	r3, #1
    489e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    48a0:	4b5b      	ldr	r3, [pc, #364]	; (4a10 <xTaskCreate+0x230>)
    48a2:	681b      	ldr	r3, [r3, #0]
    48a4:	2b00      	cmp	r3, #0
    48a6:	d063      	beq.n	4970 <xTaskCreate+0x190>
			if( xSchedulerRunning == pdFALSE )
    48a8:	4b5a      	ldr	r3, [pc, #360]	; (4a14 <xTaskCreate+0x234>)
    48aa:	681b      	ldr	r3, [r3, #0]
    48ac:	2b00      	cmp	r3, #0
    48ae:	d107      	bne.n	48c0 <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    48b0:	4b57      	ldr	r3, [pc, #348]	; (4a10 <xTaskCreate+0x230>)
    48b2:	681b      	ldr	r3, [r3, #0]
    48b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    48b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    48b8:	4293      	cmp	r3, r2
    48ba:	d801      	bhi.n	48c0 <xTaskCreate+0xe0>
					pxCurrentTCB = pxNewTCB;
    48bc:	4b54      	ldr	r3, [pc, #336]	; (4a10 <xTaskCreate+0x230>)
    48be:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
    48c0:	4a55      	ldr	r2, [pc, #340]	; (4a18 <xTaskCreate+0x238>)
    48c2:	6813      	ldr	r3, [r2, #0]
    48c4:	3301      	adds	r3, #1
    48c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    48c8:	63e3      	str	r3, [r4, #60]	; 0x3c
		traceTASK_CREATE( pxNewTCB );
    48ca:	2003      	movs	r0, #3
    48cc:	4b53      	ldr	r3, [pc, #332]	; (4a1c <xTaskCreate+0x23c>)
    48ce:	4798      	blx	r3
    48d0:	b281      	uxth	r1, r0
    48d2:	0020      	movs	r0, r4
    48d4:	4b52      	ldr	r3, [pc, #328]	; (4a20 <xTaskCreate+0x240>)
    48d6:	4798      	blx	r3
    48d8:	4b52      	ldr	r3, [pc, #328]	; (4a24 <xTaskCreate+0x244>)
    48da:	8819      	ldrh	r1, [r3, #0]
    48dc:	0020      	movs	r0, r4
    48de:	4b52      	ldr	r3, [pc, #328]	; (4a28 <xTaskCreate+0x248>)
    48e0:	4798      	blx	r3
    48e2:	0020      	movs	r0, r4
    48e4:	4e51      	ldr	r6, [pc, #324]	; (4a2c <xTaskCreate+0x24c>)
    48e6:	47b0      	blx	r6
    48e8:	0022      	movs	r2, r4
    48ea:	3234      	adds	r2, #52	; 0x34
    48ec:	b2c1      	uxtb	r1, r0
    48ee:	2003      	movs	r0, #3
    48f0:	4b4f      	ldr	r3, [pc, #316]	; (4a30 <xTaskCreate+0x250>)
    48f2:	4798      	blx	r3
    48f4:	0020      	movs	r0, r4
    48f6:	47b0      	blx	r6
    48f8:	232c      	movs	r3, #44	; 0x2c
    48fa:	18e3      	adds	r3, r4, r3
    48fc:	781a      	ldrb	r2, [r3, #0]
    48fe:	b2c1      	uxtb	r1, r0
    4900:	2003      	movs	r0, #3
    4902:	4b4c      	ldr	r3, [pc, #304]	; (4a34 <xTaskCreate+0x254>)
    4904:	4798      	blx	r3
    4906:	4b4c      	ldr	r3, [pc, #304]	; (4a38 <xTaskCreate+0x258>)
    4908:	4798      	blx	r3
    490a:	4b4c      	ldr	r3, [pc, #304]	; (4a3c <xTaskCreate+0x25c>)
    490c:	4798      	blx	r3
    490e:	4b4c      	ldr	r3, [pc, #304]	; (4a40 <xTaskCreate+0x260>)
    4910:	881b      	ldrh	r3, [r3, #0]
    4912:	4203      	tst	r3, r0
    4914:	d154      	bne.n	49c0 <xTaskCreate+0x1e0>
		prvAddTaskToReadyList( pxNewTCB );
    4916:	0020      	movs	r0, r4
    4918:	4b48      	ldr	r3, [pc, #288]	; (4a3c <xTaskCreate+0x25c>)
    491a:	4798      	blx	r3
    491c:	4b48      	ldr	r3, [pc, #288]	; (4a40 <xTaskCreate+0x260>)
    491e:	881b      	ldrh	r3, [r3, #0]
    4920:	4203      	tst	r3, r0
    4922:	d15d      	bne.n	49e0 <xTaskCreate+0x200>
    4924:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4926:	4a47      	ldr	r2, [pc, #284]	; (4a44 <xTaskCreate+0x264>)
    4928:	6812      	ldr	r2, [r2, #0]
    492a:	4293      	cmp	r3, r2
    492c:	d901      	bls.n	4932 <xTaskCreate+0x152>
    492e:	4a45      	ldr	r2, [pc, #276]	; (4a44 <xTaskCreate+0x264>)
    4930:	6013      	str	r3, [r2, #0]
    4932:	0098      	lsls	r0, r3, #2
    4934:	18c0      	adds	r0, r0, r3
    4936:	0080      	lsls	r0, r0, #2
    4938:	4b43      	ldr	r3, [pc, #268]	; (4a48 <xTaskCreate+0x268>)
    493a:	1818      	adds	r0, r3, r0
    493c:	9903      	ldr	r1, [sp, #12]
    493e:	4b43      	ldr	r3, [pc, #268]	; (4a4c <xTaskCreate+0x26c>)
    4940:	4798      	blx	r3
	taskEXIT_CRITICAL();
    4942:	4b43      	ldr	r3, [pc, #268]	; (4a50 <xTaskCreate+0x270>)
    4944:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    4946:	4b33      	ldr	r3, [pc, #204]	; (4a14 <xTaskCreate+0x234>)
    4948:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
    494a:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    494c:	2b00      	cmp	r3, #0
    494e:	d005      	beq.n	495c <xTaskCreate+0x17c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    4950:	4b2f      	ldr	r3, [pc, #188]	; (4a10 <xTaskCreate+0x230>)
    4952:	681b      	ldr	r3, [r3, #0]
    4954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4956:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4958:	429a      	cmp	r2, r3
    495a:	d348      	bcc.n	49ee <xTaskCreate+0x20e>
	}
    495c:	b004      	add	sp, #16
    495e:	bc04      	pop	{r2}
    4960:	4690      	mov	r8, r2
    4962:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    4964:	0030      	movs	r0, r6
    4966:	4b3b      	ldr	r3, [pc, #236]	; (4a54 <xTaskCreate+0x274>)
    4968:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    496a:	2001      	movs	r0, #1
    496c:	4240      	negs	r0, r0
    496e:	e7f5      	b.n	495c <xTaskCreate+0x17c>
			pxCurrentTCB = pxNewTCB;
    4970:	4b27      	ldr	r3, [pc, #156]	; (4a10 <xTaskCreate+0x230>)
    4972:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    4974:	6813      	ldr	r3, [r2, #0]
    4976:	2b01      	cmp	r3, #1
    4978:	d1a2      	bne.n	48c0 <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    497a:	4f33      	ldr	r7, [pc, #204]	; (4a48 <xTaskCreate+0x268>)
    497c:	0038      	movs	r0, r7
    497e:	4e36      	ldr	r6, [pc, #216]	; (4a58 <xTaskCreate+0x278>)
    4980:	47b0      	blx	r6
    4982:	0038      	movs	r0, r7
    4984:	3014      	adds	r0, #20
    4986:	47b0      	blx	r6
    4988:	0038      	movs	r0, r7
    498a:	3028      	adds	r0, #40	; 0x28
    498c:	47b0      	blx	r6
    498e:	0038      	movs	r0, r7
    4990:	303c      	adds	r0, #60	; 0x3c
    4992:	47b0      	blx	r6
    4994:	0038      	movs	r0, r7
    4996:	3050      	adds	r0, #80	; 0x50
    4998:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    499a:	4b30      	ldr	r3, [pc, #192]	; (4a5c <xTaskCreate+0x27c>)
    499c:	4698      	mov	r8, r3
    499e:	0018      	movs	r0, r3
    49a0:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    49a2:	4f2f      	ldr	r7, [pc, #188]	; (4a60 <xTaskCreate+0x280>)
    49a4:	0038      	movs	r0, r7
    49a6:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    49a8:	482e      	ldr	r0, [pc, #184]	; (4a64 <xTaskCreate+0x284>)
    49aa:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    49ac:	482e      	ldr	r0, [pc, #184]	; (4a68 <xTaskCreate+0x288>)
    49ae:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    49b0:	482e      	ldr	r0, [pc, #184]	; (4a6c <xTaskCreate+0x28c>)
    49b2:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    49b4:	4b2e      	ldr	r3, [pc, #184]	; (4a70 <xTaskCreate+0x290>)
    49b6:	4642      	mov	r2, r8
    49b8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    49ba:	4b2e      	ldr	r3, [pc, #184]	; (4a74 <xTaskCreate+0x294>)
    49bc:	601f      	str	r7, [r3, #0]
    49be:	e77f      	b.n	48c0 <xTaskCreate+0xe0>
		traceTASK_CREATE( pxNewTCB );
    49c0:	0020      	movs	r0, r4
    49c2:	4b1e      	ldr	r3, [pc, #120]	; (4a3c <xTaskCreate+0x25c>)
    49c4:	4798      	blx	r3
    49c6:	4b1e      	ldr	r3, [pc, #120]	; (4a40 <xTaskCreate+0x260>)
    49c8:	881b      	ldrh	r3, [r3, #0]
    49ca:	4203      	tst	r3, r0
    49cc:	d0a3      	beq.n	4916 <xTaskCreate+0x136>
    49ce:	0020      	movs	r0, r4
    49d0:	4b16      	ldr	r3, [pc, #88]	; (4a2c <xTaskCreate+0x24c>)
    49d2:	4798      	blx	r3
    49d4:	b2c2      	uxtb	r2, r0
    49d6:	2103      	movs	r1, #3
    49d8:	201b      	movs	r0, #27
    49da:	4b27      	ldr	r3, [pc, #156]	; (4a78 <xTaskCreate+0x298>)
    49dc:	4798      	blx	r3
    49de:	e79a      	b.n	4916 <xTaskCreate+0x136>
		prvAddTaskToReadyList( pxNewTCB );
    49e0:	0020      	movs	r0, r4
    49e2:	4b12      	ldr	r3, [pc, #72]	; (4a2c <xTaskCreate+0x24c>)
    49e4:	4798      	blx	r3
    49e6:	b2c0      	uxtb	r0, r0
    49e8:	4b24      	ldr	r3, [pc, #144]	; (4a7c <xTaskCreate+0x29c>)
    49ea:	4798      	blx	r3
    49ec:	e79a      	b.n	4924 <xTaskCreate+0x144>
			taskYIELD_IF_USING_PREEMPTION();
    49ee:	4b24      	ldr	r3, [pc, #144]	; (4a80 <xTaskCreate+0x2a0>)
    49f0:	4798      	blx	r3
			xReturn = pdPASS;
    49f2:	2001      	movs	r0, #1
    49f4:	e7b2      	b.n	495c <xTaskCreate+0x17c>
    49f6:	46c0      	nop			; (mov r8, r8)
    49f8:	00003455 	.word	0x00003455
    49fc:	00009a8f 	.word	0x00009a8f
    4a00:	00003213 	.word	0x00003213
    4a04:	000032e5 	.word	0x000032e5
    4a08:	00003391 	.word	0x00003391
    4a0c:	20003730 	.word	0x20003730
    4a10:	200036c0 	.word	0x200036c0
    4a14:	20003790 	.word	0x20003790
    4a18:	20003740 	.word	0x20003740
    4a1c:	00002985 	.word	0x00002985
    4a20:	00002139 	.word	0x00002139
    4a24:	2000001e 	.word	0x2000001e
    4a28:	00002159 	.word	0x00002159
    4a2c:	00002119 	.word	0x00002119
    4a30:	00002a59 	.word	0x00002a59
    4a34:	00002839 	.word	0x00002839
    4a38:	000021e1 	.word	0x000021e1
    4a3c:	00002129 	.word	0x00002129
    4a40:	20000020 	.word	0x20000020
    4a44:	20003744 	.word	0x20003744
    4a48:	200036cc 	.word	0x200036cc
    4a4c:	00003219 	.word	0x00003219
    4a50:	000033a9 	.word	0x000033a9
    4a54:	000034e5 	.word	0x000034e5
    4a58:	000031fd 	.word	0x000031fd
    4a5c:	20003748 	.word	0x20003748
    4a60:	2000375c 	.word	0x2000375c
    4a64:	2000377c 	.word	0x2000377c
    4a68:	200037a8 	.word	0x200037a8
    4a6c:	20003794 	.word	0x20003794
    4a70:	200036c4 	.word	0x200036c4
    4a74:	200036c8 	.word	0x200036c8
    4a78:	00002e19 	.word	0x00002e19
    4a7c:	00002cb1 	.word	0x00002cb1
    4a80:	00003381 	.word	0x00003381

00004a84 <vTaskStartScheduler>:
{
    4a84:	b510      	push	{r4, lr}
    4a86:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    4a88:	4b11      	ldr	r3, [pc, #68]	; (4ad0 <vTaskStartScheduler+0x4c>)
    4a8a:	9301      	str	r3, [sp, #4]
    4a8c:	2300      	movs	r3, #0
    4a8e:	9300      	str	r3, [sp, #0]
    4a90:	22fa      	movs	r2, #250	; 0xfa
    4a92:	0052      	lsls	r2, r2, #1
    4a94:	490f      	ldr	r1, [pc, #60]	; (4ad4 <vTaskStartScheduler+0x50>)
    4a96:	4810      	ldr	r0, [pc, #64]	; (4ad8 <vTaskStartScheduler+0x54>)
    4a98:	4c10      	ldr	r4, [pc, #64]	; (4adc <vTaskStartScheduler+0x58>)
    4a9a:	47a0      	blx	r4
		if( xReturn == pdPASS )
    4a9c:	2801      	cmp	r0, #1
    4a9e:	d003      	beq.n	4aa8 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    4aa0:	1c43      	adds	r3, r0, #1
    4aa2:	d013      	beq.n	4acc <vTaskStartScheduler+0x48>
}
    4aa4:	b002      	add	sp, #8
    4aa6:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    4aa8:	4b0d      	ldr	r3, [pc, #52]	; (4ae0 <vTaskStartScheduler+0x5c>)
    4aaa:	4798      	blx	r3
	if( xReturn == pdPASS )
    4aac:	2801      	cmp	r0, #1
    4aae:	d1f7      	bne.n	4aa0 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
    4ab0:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    4ab2:	2201      	movs	r2, #1
    4ab4:	4252      	negs	r2, r2
    4ab6:	4b0b      	ldr	r3, [pc, #44]	; (4ae4 <vTaskStartScheduler+0x60>)
    4ab8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    4aba:	3202      	adds	r2, #2
    4abc:	4b0a      	ldr	r3, [pc, #40]	; (4ae8 <vTaskStartScheduler+0x64>)
    4abe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    4ac0:	2200      	movs	r2, #0
    4ac2:	4b0a      	ldr	r3, [pc, #40]	; (4aec <vTaskStartScheduler+0x68>)
    4ac4:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    4ac6:	4b0a      	ldr	r3, [pc, #40]	; (4af0 <vTaskStartScheduler+0x6c>)
    4ac8:	4798      	blx	r3
    4aca:	e7eb      	b.n	4aa4 <vTaskStartScheduler+0x20>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    4acc:	b672      	cpsid	i
    4ace:	e7fe      	b.n	4ace <vTaskStartScheduler+0x4a>
    4ad0:	20003770 	.word	0x20003770
    4ad4:	0000b620 	.word	0x0000b620
    4ad8:	000046d9 	.word	0x000046d9
    4adc:	000047e1 	.word	0x000047e1
    4ae0:	000056a9 	.word	0x000056a9
    4ae4:	20003774 	.word	0x20003774
    4ae8:	20003790 	.word	0x20003790
    4aec:	200037bc 	.word	0x200037bc
    4af0:	00003309 	.word	0x00003309

00004af4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    4af4:	4a02      	ldr	r2, [pc, #8]	; (4b00 <vTaskSuspendAll+0xc>)
    4af6:	6813      	ldr	r3, [r2, #0]
    4af8:	3301      	adds	r3, #1
    4afa:	6013      	str	r3, [r2, #0]
}
    4afc:	4770      	bx	lr
    4afe:	46c0      	nop			; (mov r8, r8)
    4b00:	2000373c 	.word	0x2000373c

00004b04 <xTaskGetTickCount>:
		xTicks = xTickCount;
    4b04:	4b01      	ldr	r3, [pc, #4]	; (4b0c <xTaskGetTickCount+0x8>)
    4b06:	6818      	ldr	r0, [r3, #0]
}
    4b08:	4770      	bx	lr
    4b0a:	46c0      	nop			; (mov r8, r8)
    4b0c:	200037bc 	.word	0x200037bc

00004b10 <xTaskIncrementTick>:
{
    4b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b12:	b083      	sub	sp, #12
	traceTASK_INCREMENT_TICK( xTickCount );
    4b14:	4b4c      	ldr	r3, [pc, #304]	; (4c48 <xTaskIncrementTick+0x138>)
    4b16:	681b      	ldr	r3, [r3, #0]
    4b18:	2b01      	cmp	r3, #1
    4b1a:	d003      	beq.n	4b24 <xTaskIncrementTick+0x14>
    4b1c:	4b4b      	ldr	r3, [pc, #300]	; (4c4c <xTaskIncrementTick+0x13c>)
    4b1e:	681b      	ldr	r3, [r3, #0]
    4b20:	2b00      	cmp	r3, #0
    4b22:	d106      	bne.n	4b32 <xTaskIncrementTick+0x22>
    4b24:	4a4a      	ldr	r2, [pc, #296]	; (4c50 <xTaskIncrementTick+0x140>)
    4b26:	6813      	ldr	r3, [r2, #0]
    4b28:	3301      	adds	r3, #1
    4b2a:	6013      	str	r3, [r2, #0]
    4b2c:	2000      	movs	r0, #0
    4b2e:	4b49      	ldr	r3, [pc, #292]	; (4c54 <xTaskIncrementTick+0x144>)
    4b30:	4798      	blx	r3
    4b32:	4b45      	ldr	r3, [pc, #276]	; (4c48 <xTaskIncrementTick+0x138>)
    4b34:	681b      	ldr	r3, [r3, #0]
    4b36:	2b00      	cmp	r3, #0
    4b38:	d010      	beq.n	4b5c <xTaskIncrementTick+0x4c>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4b3a:	4b43      	ldr	r3, [pc, #268]	; (4c48 <xTaskIncrementTick+0x138>)
    4b3c:	681b      	ldr	r3, [r3, #0]
    4b3e:	2b00      	cmp	r3, #0
    4b40:	d175      	bne.n	4c2e <xTaskIncrementTick+0x11e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    4b42:	4b45      	ldr	r3, [pc, #276]	; (4c58 <xTaskIncrementTick+0x148>)
    4b44:	681e      	ldr	r6, [r3, #0]
    4b46:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    4b48:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    4b4a:	2e00      	cmp	r6, #0
    4b4c:	d119      	bne.n	4b82 <xTaskIncrementTick+0x72>
			taskSWITCH_DELAYED_LISTS();
    4b4e:	4b43      	ldr	r3, [pc, #268]	; (4c5c <xTaskIncrementTick+0x14c>)
    4b50:	681b      	ldr	r3, [r3, #0]
    4b52:	681b      	ldr	r3, [r3, #0]
    4b54:	2b00      	cmp	r3, #0
    4b56:	d008      	beq.n	4b6a <xTaskIncrementTick+0x5a>
    4b58:	b672      	cpsid	i
    4b5a:	e7fe      	b.n	4b5a <xTaskIncrementTick+0x4a>
	traceTASK_INCREMENT_TICK( xTickCount );
    4b5c:	4b3e      	ldr	r3, [pc, #248]	; (4c58 <xTaskIncrementTick+0x148>)
    4b5e:	6819      	ldr	r1, [r3, #0]
    4b60:	3101      	adds	r1, #1
    4b62:	2003      	movs	r0, #3
    4b64:	4b3e      	ldr	r3, [pc, #248]	; (4c60 <xTaskIncrementTick+0x150>)
    4b66:	4798      	blx	r3
    4b68:	e7e7      	b.n	4b3a <xTaskIncrementTick+0x2a>
			taskSWITCH_DELAYED_LISTS();
    4b6a:	4a3c      	ldr	r2, [pc, #240]	; (4c5c <xTaskIncrementTick+0x14c>)
    4b6c:	6811      	ldr	r1, [r2, #0]
    4b6e:	4b3d      	ldr	r3, [pc, #244]	; (4c64 <xTaskIncrementTick+0x154>)
    4b70:	6818      	ldr	r0, [r3, #0]
    4b72:	6010      	str	r0, [r2, #0]
    4b74:	6019      	str	r1, [r3, #0]
    4b76:	4a3c      	ldr	r2, [pc, #240]	; (4c68 <xTaskIncrementTick+0x158>)
    4b78:	6813      	ldr	r3, [r2, #0]
    4b7a:	3301      	adds	r3, #1
    4b7c:	6013      	str	r3, [r2, #0]
    4b7e:	4b3b      	ldr	r3, [pc, #236]	; (4c6c <xTaskIncrementTick+0x15c>)
    4b80:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    4b82:	4b3b      	ldr	r3, [pc, #236]	; (4c70 <xTaskIncrementTick+0x160>)
    4b84:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    4b86:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    4b88:	429e      	cmp	r6, r3
    4b8a:	d33a      	bcc.n	4c02 <xTaskIncrementTick+0xf2>
    4b8c:	2500      	movs	r5, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4b8e:	4f33      	ldr	r7, [pc, #204]	; (4c5c <xTaskIncrementTick+0x14c>)
    4b90:	683b      	ldr	r3, [r7, #0]
    4b92:	681b      	ldr	r3, [r3, #0]
    4b94:	2b00      	cmp	r3, #0
    4b96:	d030      	beq.n	4bfa <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4b98:	4b30      	ldr	r3, [pc, #192]	; (4c5c <xTaskIncrementTick+0x14c>)
    4b9a:	681b      	ldr	r3, [r3, #0]
    4b9c:	68db      	ldr	r3, [r3, #12]
    4b9e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    4ba0:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
    4ba2:	429e      	cmp	r6, r3
    4ba4:	d339      	bcc.n	4c1a <xTaskIncrementTick+0x10a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4ba6:	1d23      	adds	r3, r4, #4
    4ba8:	9301      	str	r3, [sp, #4]
    4baa:	0018      	movs	r0, r3
    4bac:	4b31      	ldr	r3, [pc, #196]	; (4c74 <xTaskIncrementTick+0x164>)
    4bae:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4bb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4bb2:	2b00      	cmp	r3, #0
    4bb4:	d003      	beq.n	4bbe <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4bb6:	0020      	movs	r0, r4
    4bb8:	3018      	adds	r0, #24
    4bba:	4b2e      	ldr	r3, [pc, #184]	; (4c74 <xTaskIncrementTick+0x164>)
    4bbc:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    4bbe:	0020      	movs	r0, r4
    4bc0:	4b2d      	ldr	r3, [pc, #180]	; (4c78 <xTaskIncrementTick+0x168>)
    4bc2:	4798      	blx	r3
    4bc4:	4b2d      	ldr	r3, [pc, #180]	; (4c7c <xTaskIncrementTick+0x16c>)
    4bc6:	881b      	ldrh	r3, [r3, #0]
    4bc8:	4203      	tst	r3, r0
    4bca:	d129      	bne.n	4c20 <xTaskIncrementTick+0x110>
    4bcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4bce:	4a2c      	ldr	r2, [pc, #176]	; (4c80 <xTaskIncrementTick+0x170>)
    4bd0:	6812      	ldr	r2, [r2, #0]
    4bd2:	4293      	cmp	r3, r2
    4bd4:	d901      	bls.n	4bda <xTaskIncrementTick+0xca>
    4bd6:	4a2a      	ldr	r2, [pc, #168]	; (4c80 <xTaskIncrementTick+0x170>)
    4bd8:	6013      	str	r3, [r2, #0]
    4bda:	0098      	lsls	r0, r3, #2
    4bdc:	18c0      	adds	r0, r0, r3
    4bde:	0080      	lsls	r0, r0, #2
    4be0:	4b28      	ldr	r3, [pc, #160]	; (4c84 <xTaskIncrementTick+0x174>)
    4be2:	1818      	adds	r0, r3, r0
    4be4:	9901      	ldr	r1, [sp, #4]
    4be6:	4b28      	ldr	r3, [pc, #160]	; (4c88 <xTaskIncrementTick+0x178>)
    4be8:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4bea:	4b28      	ldr	r3, [pc, #160]	; (4c8c <xTaskIncrementTick+0x17c>)
    4bec:	681b      	ldr	r3, [r3, #0]
    4bee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4bf2:	429a      	cmp	r2, r3
    4bf4:	d3cc      	bcc.n	4b90 <xTaskIncrementTick+0x80>
							xSwitchRequired = pdTRUE;
    4bf6:	2501      	movs	r5, #1
    4bf8:	e7ca      	b.n	4b90 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4bfa:	2201      	movs	r2, #1
    4bfc:	4252      	negs	r2, r2
    4bfe:	4b1c      	ldr	r3, [pc, #112]	; (4c70 <xTaskIncrementTick+0x160>)
    4c00:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    4c02:	4b22      	ldr	r3, [pc, #136]	; (4c8c <xTaskIncrementTick+0x17c>)
    4c04:	681b      	ldr	r3, [r3, #0]
    4c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c08:	0093      	lsls	r3, r2, #2
    4c0a:	189b      	adds	r3, r3, r2
    4c0c:	009b      	lsls	r3, r3, #2
    4c0e:	4a1d      	ldr	r2, [pc, #116]	; (4c84 <xTaskIncrementTick+0x174>)
    4c10:	589b      	ldr	r3, [r3, r2]
    4c12:	2b01      	cmp	r3, #1
    4c14:	d910      	bls.n	4c38 <xTaskIncrementTick+0x128>
				xSwitchRequired = pdTRUE;
    4c16:	2501      	movs	r5, #1
    4c18:	e00e      	b.n	4c38 <xTaskIncrementTick+0x128>
						xNextTaskUnblockTime = xItemValue;
    4c1a:	4a15      	ldr	r2, [pc, #84]	; (4c70 <xTaskIncrementTick+0x160>)
    4c1c:	6013      	str	r3, [r2, #0]
						break;
    4c1e:	e7f0      	b.n	4c02 <xTaskIncrementTick+0xf2>
					prvAddTaskToReadyList( pxTCB );
    4c20:	0020      	movs	r0, r4
    4c22:	4b1b      	ldr	r3, [pc, #108]	; (4c90 <xTaskIncrementTick+0x180>)
    4c24:	4798      	blx	r3
    4c26:	b2c0      	uxtb	r0, r0
    4c28:	4b1a      	ldr	r3, [pc, #104]	; (4c94 <xTaskIncrementTick+0x184>)
    4c2a:	4798      	blx	r3
    4c2c:	e7ce      	b.n	4bcc <xTaskIncrementTick+0xbc>
		++uxPendedTicks;
    4c2e:	4a07      	ldr	r2, [pc, #28]	; (4c4c <xTaskIncrementTick+0x13c>)
    4c30:	6813      	ldr	r3, [r2, #0]
    4c32:	3301      	adds	r3, #1
    4c34:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
    4c36:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
    4c38:	4b17      	ldr	r3, [pc, #92]	; (4c98 <xTaskIncrementTick+0x188>)
    4c3a:	681b      	ldr	r3, [r3, #0]
    4c3c:	2b00      	cmp	r3, #0
    4c3e:	d000      	beq.n	4c42 <xTaskIncrementTick+0x132>
			xSwitchRequired = pdTRUE;
    4c40:	2501      	movs	r5, #1
}
    4c42:	0028      	movs	r0, r5
    4c44:	b003      	add	sp, #12
    4c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c48:	2000373c 	.word	0x2000373c
    4c4c:	20003738 	.word	0x20003738
    4c50:	200003e8 	.word	0x200003e8
    4c54:	00002ae9 	.word	0x00002ae9
    4c58:	200037bc 	.word	0x200037bc
    4c5c:	200036c4 	.word	0x200036c4
    4c60:	00002fb5 	.word	0x00002fb5
    4c64:	200036c8 	.word	0x200036c8
    4c68:	20003778 	.word	0x20003778
    4c6c:	000046ad 	.word	0x000046ad
    4c70:	20003774 	.word	0x20003774
    4c74:	0000325f 	.word	0x0000325f
    4c78:	00002129 	.word	0x00002129
    4c7c:	20000020 	.word	0x20000020
    4c80:	20003744 	.word	0x20003744
    4c84:	200036cc 	.word	0x200036cc
    4c88:	00003219 	.word	0x00003219
    4c8c:	200036c0 	.word	0x200036c0
    4c90:	00002119 	.word	0x00002119
    4c94:	00002cb1 	.word	0x00002cb1
    4c98:	200037c0 	.word	0x200037c0

00004c9c <xTaskResumeAll>:
{
    4c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    4c9e:	4b37      	ldr	r3, [pc, #220]	; (4d7c <xTaskResumeAll+0xe0>)
    4ca0:	681b      	ldr	r3, [r3, #0]
    4ca2:	2b00      	cmp	r3, #0
    4ca4:	d101      	bne.n	4caa <xTaskResumeAll+0xe>
    4ca6:	b672      	cpsid	i
    4ca8:	e7fe      	b.n	4ca8 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    4caa:	4b35      	ldr	r3, [pc, #212]	; (4d80 <xTaskResumeAll+0xe4>)
    4cac:	4798      	blx	r3
		--uxSchedulerSuspended;
    4cae:	4b33      	ldr	r3, [pc, #204]	; (4d7c <xTaskResumeAll+0xe0>)
    4cb0:	681a      	ldr	r2, [r3, #0]
    4cb2:	3a01      	subs	r2, #1
    4cb4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4cb6:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    4cb8:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4cba:	2b00      	cmp	r3, #0
    4cbc:	d103      	bne.n	4cc6 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    4cbe:	4b31      	ldr	r3, [pc, #196]	; (4d84 <xTaskResumeAll+0xe8>)
    4cc0:	681b      	ldr	r3, [r3, #0]
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d136      	bne.n	4d34 <xTaskResumeAll+0x98>
	taskEXIT_CRITICAL();
    4cc6:	4b30      	ldr	r3, [pc, #192]	; (4d88 <xTaskResumeAll+0xec>)
    4cc8:	4798      	blx	r3
}
    4cca:	0020      	movs	r0, r4
    4ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
    4cce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4cd0:	4a2e      	ldr	r2, [pc, #184]	; (4d8c <xTaskResumeAll+0xf0>)
    4cd2:	6812      	ldr	r2, [r2, #0]
    4cd4:	4293      	cmp	r3, r2
    4cd6:	d901      	bls.n	4cdc <xTaskResumeAll+0x40>
    4cd8:	4a2c      	ldr	r2, [pc, #176]	; (4d8c <xTaskResumeAll+0xf0>)
    4cda:	6013      	str	r3, [r2, #0]
    4cdc:	0098      	lsls	r0, r3, #2
    4cde:	18c0      	adds	r0, r0, r3
    4ce0:	0080      	lsls	r0, r0, #2
    4ce2:	4b2b      	ldr	r3, [pc, #172]	; (4d90 <xTaskResumeAll+0xf4>)
    4ce4:	1818      	adds	r0, r3, r0
    4ce6:	0031      	movs	r1, r6
    4ce8:	4b2a      	ldr	r3, [pc, #168]	; (4d94 <xTaskResumeAll+0xf8>)
    4cea:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4cec:	4b2a      	ldr	r3, [pc, #168]	; (4d98 <xTaskResumeAll+0xfc>)
    4cee:	681b      	ldr	r3, [r3, #0]
    4cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4cf2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4cf4:	429a      	cmp	r2, r3
    4cf6:	d302      	bcc.n	4cfe <xTaskResumeAll+0x62>
						xYieldPending = pdTRUE;
    4cf8:	2201      	movs	r2, #1
    4cfa:	4b28      	ldr	r3, [pc, #160]	; (4d9c <xTaskResumeAll+0x100>)
    4cfc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    4cfe:	682b      	ldr	r3, [r5, #0]
    4d00:	2b00      	cmp	r3, #0
    4d02:	d01a      	beq.n	4d3a <xTaskResumeAll+0x9e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    4d04:	68fb      	ldr	r3, [r7, #12]
    4d06:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4d08:	0020      	movs	r0, r4
    4d0a:	3018      	adds	r0, #24
    4d0c:	4b24      	ldr	r3, [pc, #144]	; (4da0 <xTaskResumeAll+0x104>)
    4d0e:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4d10:	1d26      	adds	r6, r4, #4
    4d12:	0030      	movs	r0, r6
    4d14:	4b22      	ldr	r3, [pc, #136]	; (4da0 <xTaskResumeAll+0x104>)
    4d16:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    4d18:	0020      	movs	r0, r4
    4d1a:	4b22      	ldr	r3, [pc, #136]	; (4da4 <xTaskResumeAll+0x108>)
    4d1c:	4798      	blx	r3
    4d1e:	4b22      	ldr	r3, [pc, #136]	; (4da8 <xTaskResumeAll+0x10c>)
    4d20:	881b      	ldrh	r3, [r3, #0]
    4d22:	4203      	tst	r3, r0
    4d24:	d0d3      	beq.n	4cce <xTaskResumeAll+0x32>
    4d26:	0020      	movs	r0, r4
    4d28:	4b20      	ldr	r3, [pc, #128]	; (4dac <xTaskResumeAll+0x110>)
    4d2a:	4798      	blx	r3
    4d2c:	b2c0      	uxtb	r0, r0
    4d2e:	4b20      	ldr	r3, [pc, #128]	; (4db0 <xTaskResumeAll+0x114>)
    4d30:	4798      	blx	r3
    4d32:	e7cc      	b.n	4cce <xTaskResumeAll+0x32>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    4d34:	4d1f      	ldr	r5, [pc, #124]	; (4db4 <xTaskResumeAll+0x118>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    4d36:	002f      	movs	r7, r5
    4d38:	e7e1      	b.n	4cfe <xTaskResumeAll+0x62>
				if( pxTCB != NULL )
    4d3a:	2c00      	cmp	r4, #0
    4d3c:	d001      	beq.n	4d42 <xTaskResumeAll+0xa6>
					prvResetNextTaskUnblockTime();
    4d3e:	4b1e      	ldr	r3, [pc, #120]	; (4db8 <xTaskResumeAll+0x11c>)
    4d40:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    4d42:	4b1e      	ldr	r3, [pc, #120]	; (4dbc <xTaskResumeAll+0x120>)
    4d44:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    4d46:	2c00      	cmp	r4, #0
    4d48:	d00e      	beq.n	4d68 <xTaskResumeAll+0xcc>
							if( xTaskIncrementTick() != pdFALSE )
    4d4a:	4f1d      	ldr	r7, [pc, #116]	; (4dc0 <xTaskResumeAll+0x124>)
								xYieldPending = pdTRUE;
    4d4c:	4e13      	ldr	r6, [pc, #76]	; (4d9c <xTaskResumeAll+0x100>)
    4d4e:	2501      	movs	r5, #1
    4d50:	e002      	b.n	4d58 <xTaskResumeAll+0xbc>
							--uxPendedCounts;
    4d52:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    4d54:	2c00      	cmp	r4, #0
    4d56:	d004      	beq.n	4d62 <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
    4d58:	47b8      	blx	r7
    4d5a:	2800      	cmp	r0, #0
    4d5c:	d0f9      	beq.n	4d52 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
    4d5e:	6035      	str	r5, [r6, #0]
    4d60:	e7f7      	b.n	4d52 <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
    4d62:	2200      	movs	r2, #0
    4d64:	4b15      	ldr	r3, [pc, #84]	; (4dbc <xTaskResumeAll+0x120>)
    4d66:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    4d68:	4b0c      	ldr	r3, [pc, #48]	; (4d9c <xTaskResumeAll+0x100>)
    4d6a:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    4d6c:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    4d6e:	2b00      	cmp	r3, #0
    4d70:	d0a9      	beq.n	4cc6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    4d72:	4b14      	ldr	r3, [pc, #80]	; (4dc4 <xTaskResumeAll+0x128>)
    4d74:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    4d76:	3401      	adds	r4, #1
    4d78:	e7a5      	b.n	4cc6 <xTaskResumeAll+0x2a>
    4d7a:	46c0      	nop			; (mov r8, r8)
    4d7c:	2000373c 	.word	0x2000373c
    4d80:	00003391 	.word	0x00003391
    4d84:	20003730 	.word	0x20003730
    4d88:	000033a9 	.word	0x000033a9
    4d8c:	20003744 	.word	0x20003744
    4d90:	200036cc 	.word	0x200036cc
    4d94:	00003219 	.word	0x00003219
    4d98:	200036c0 	.word	0x200036c0
    4d9c:	200037c0 	.word	0x200037c0
    4da0:	0000325f 	.word	0x0000325f
    4da4:	00002129 	.word	0x00002129
    4da8:	20000020 	.word	0x20000020
    4dac:	00002119 	.word	0x00002119
    4db0:	00002cb1 	.word	0x00002cb1
    4db4:	2000377c 	.word	0x2000377c
    4db8:	000046ad 	.word	0x000046ad
    4dbc:	20003738 	.word	0x20003738
    4dc0:	00004b11 	.word	0x00004b11
    4dc4:	00003381 	.word	0x00003381

00004dc8 <vTaskDelay>:
	{
    4dc8:	b510      	push	{r4, lr}
    4dca:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    4dcc:	d031      	beq.n	4e32 <vTaskDelay+0x6a>
			configASSERT( uxSchedulerSuspended == 0 );
    4dce:	4b1a      	ldr	r3, [pc, #104]	; (4e38 <vTaskDelay+0x70>)
    4dd0:	681b      	ldr	r3, [r3, #0]
    4dd2:	2b00      	cmp	r3, #0
    4dd4:	d001      	beq.n	4dda <vTaskDelay+0x12>
    4dd6:	b672      	cpsid	i
    4dd8:	e7fe      	b.n	4dd8 <vTaskDelay+0x10>
			vTaskSuspendAll();
    4dda:	4b18      	ldr	r3, [pc, #96]	; (4e3c <vTaskDelay+0x74>)
    4ddc:	4798      	blx	r3
				traceTASK_DELAY();
    4dde:	4b18      	ldr	r3, [pc, #96]	; (4e40 <vTaskDelay+0x78>)
    4de0:	6818      	ldr	r0, [r3, #0]
    4de2:	4b18      	ldr	r3, [pc, #96]	; (4e44 <vTaskDelay+0x7c>)
    4de4:	4798      	blx	r3
    4de6:	4b18      	ldr	r3, [pc, #96]	; (4e48 <vTaskDelay+0x80>)
    4de8:	881b      	ldrh	r3, [r3, #0]
    4dea:	4203      	tst	r3, r0
    4dec:	d00a      	beq.n	4e04 <vTaskDelay+0x3c>
    4dee:	0021      	movs	r1, r4
    4df0:	2089      	movs	r0, #137	; 0x89
    4df2:	4b16      	ldr	r3, [pc, #88]	; (4e4c <vTaskDelay+0x84>)
    4df4:	4798      	blx	r3
    4df6:	4b12      	ldr	r3, [pc, #72]	; (4e40 <vTaskDelay+0x78>)
    4df8:	6818      	ldr	r0, [r3, #0]
    4dfa:	4b15      	ldr	r3, [pc, #84]	; (4e50 <vTaskDelay+0x88>)
    4dfc:	4798      	blx	r3
    4dfe:	b2c0      	uxtb	r0, r0
    4e00:	4b14      	ldr	r3, [pc, #80]	; (4e54 <vTaskDelay+0x8c>)
    4e02:	4798      	blx	r3
    4e04:	4b14      	ldr	r3, [pc, #80]	; (4e58 <vTaskDelay+0x90>)
    4e06:	4798      	blx	r3
    4e08:	4b0e      	ldr	r3, [pc, #56]	; (4e44 <vTaskDelay+0x7c>)
    4e0a:	4798      	blx	r3
    4e0c:	4b0e      	ldr	r3, [pc, #56]	; (4e48 <vTaskDelay+0x80>)
    4e0e:	881b      	ldrh	r3, [r3, #0]
    4e10:	4203      	tst	r3, r0
    4e12:	d006      	beq.n	4e22 <vTaskDelay+0x5a>
    4e14:	4b10      	ldr	r3, [pc, #64]	; (4e58 <vTaskDelay+0x90>)
    4e16:	4798      	blx	r3
    4e18:	4b0d      	ldr	r3, [pc, #52]	; (4e50 <vTaskDelay+0x88>)
    4e1a:	4798      	blx	r3
    4e1c:	b2c0      	uxtb	r0, r0
    4e1e:	4b0d      	ldr	r3, [pc, #52]	; (4e54 <vTaskDelay+0x8c>)
    4e20:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    4e22:	2100      	movs	r1, #0
    4e24:	0020      	movs	r0, r4
    4e26:	4b0d      	ldr	r3, [pc, #52]	; (4e5c <vTaskDelay+0x94>)
    4e28:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    4e2a:	4b0d      	ldr	r3, [pc, #52]	; (4e60 <vTaskDelay+0x98>)
    4e2c:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    4e2e:	2800      	cmp	r0, #0
    4e30:	d101      	bne.n	4e36 <vTaskDelay+0x6e>
			portYIELD_WITHIN_API();
    4e32:	4b0c      	ldr	r3, [pc, #48]	; (4e64 <vTaskDelay+0x9c>)
    4e34:	4798      	blx	r3
	}
    4e36:	bd10      	pop	{r4, pc}
    4e38:	2000373c 	.word	0x2000373c
    4e3c:	00004af5 	.word	0x00004af5
    4e40:	200036c0 	.word	0x200036c0
    4e44:	00002129 	.word	0x00002129
    4e48:	20000020 	.word	0x20000020
    4e4c:	00002fb5 	.word	0x00002fb5
    4e50:	00002119 	.word	0x00002119
    4e54:	00002945 	.word	0x00002945
    4e58:	000021e1 	.word	0x000021e1
    4e5c:	00004759 	.word	0x00004759
    4e60:	00004c9d 	.word	0x00004c9d
    4e64:	00003381 	.word	0x00003381

00004e68 <vTaskSwitchContext>:
{
    4e68:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    4e6a:	4b33      	ldr	r3, [pc, #204]	; (4f38 <vTaskSwitchContext+0xd0>)
    4e6c:	681b      	ldr	r3, [r3, #0]
    4e6e:	2b00      	cmp	r3, #0
    4e70:	d125      	bne.n	4ebe <vTaskSwitchContext+0x56>
		xYieldPending = pdFALSE;
    4e72:	2200      	movs	r2, #0
    4e74:	4b31      	ldr	r3, [pc, #196]	; (4f3c <vTaskSwitchContext+0xd4>)
    4e76:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    4e78:	4b31      	ldr	r3, [pc, #196]	; (4f40 <vTaskSwitchContext+0xd8>)
    4e7a:	681a      	ldr	r2, [r3, #0]
    4e7c:	681b      	ldr	r3, [r3, #0]
    4e7e:	6812      	ldr	r2, [r2, #0]
    4e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4e82:	429a      	cmp	r2, r3
    4e84:	d805      	bhi.n	4e92 <vTaskSwitchContext+0x2a>
    4e86:	4b2e      	ldr	r3, [pc, #184]	; (4f40 <vTaskSwitchContext+0xd8>)
    4e88:	6818      	ldr	r0, [r3, #0]
    4e8a:	6819      	ldr	r1, [r3, #0]
    4e8c:	3134      	adds	r1, #52	; 0x34
    4e8e:	4b2d      	ldr	r3, [pc, #180]	; (4f44 <vTaskSwitchContext+0xdc>)
    4e90:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4e92:	4b2d      	ldr	r3, [pc, #180]	; (4f48 <vTaskSwitchContext+0xe0>)
    4e94:	681b      	ldr	r3, [r3, #0]
    4e96:	009a      	lsls	r2, r3, #2
    4e98:	18d2      	adds	r2, r2, r3
    4e9a:	0092      	lsls	r2, r2, #2
    4e9c:	492b      	ldr	r1, [pc, #172]	; (4f4c <vTaskSwitchContext+0xe4>)
    4e9e:	5852      	ldr	r2, [r2, r1]
    4ea0:	2a00      	cmp	r2, #0
    4ea2:	d110      	bne.n	4ec6 <vTaskSwitchContext+0x5e>
    4ea4:	2b00      	cmp	r3, #0
    4ea6:	d008      	beq.n	4eba <vTaskSwitchContext+0x52>
    4ea8:	3b01      	subs	r3, #1
    4eaa:	009a      	lsls	r2, r3, #2
    4eac:	18d2      	adds	r2, r2, r3
    4eae:	0092      	lsls	r2, r2, #2
    4eb0:	5852      	ldr	r2, [r2, r1]
    4eb2:	2a00      	cmp	r2, #0
    4eb4:	d107      	bne.n	4ec6 <vTaskSwitchContext+0x5e>
    4eb6:	2b00      	cmp	r3, #0
    4eb8:	d1f6      	bne.n	4ea8 <vTaskSwitchContext+0x40>
    4eba:	b672      	cpsid	i
    4ebc:	e7fe      	b.n	4ebc <vTaskSwitchContext+0x54>
		xYieldPending = pdTRUE;
    4ebe:	2201      	movs	r2, #1
    4ec0:	4b1e      	ldr	r3, [pc, #120]	; (4f3c <vTaskSwitchContext+0xd4>)
    4ec2:	601a      	str	r2, [r3, #0]
}
    4ec4:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4ec6:	4821      	ldr	r0, [pc, #132]	; (4f4c <vTaskSwitchContext+0xe4>)
    4ec8:	009a      	lsls	r2, r3, #2
    4eca:	18d1      	adds	r1, r2, r3
    4ecc:	0089      	lsls	r1, r1, #2
    4ece:	1841      	adds	r1, r0, r1
    4ed0:	684c      	ldr	r4, [r1, #4]
    4ed2:	6864      	ldr	r4, [r4, #4]
    4ed4:	604c      	str	r4, [r1, #4]
    4ed6:	18d2      	adds	r2, r2, r3
    4ed8:	0092      	lsls	r2, r2, #2
    4eda:	3208      	adds	r2, #8
    4edc:	1882      	adds	r2, r0, r2
    4ede:	4294      	cmp	r4, r2
    4ee0:	d019      	beq.n	4f16 <vTaskSwitchContext+0xae>
    4ee2:	009a      	lsls	r2, r3, #2
    4ee4:	18d2      	adds	r2, r2, r3
    4ee6:	0092      	lsls	r2, r2, #2
    4ee8:	4918      	ldr	r1, [pc, #96]	; (4f4c <vTaskSwitchContext+0xe4>)
    4eea:	188a      	adds	r2, r1, r2
    4eec:	6852      	ldr	r2, [r2, #4]
    4eee:	68d1      	ldr	r1, [r2, #12]
    4ef0:	4a13      	ldr	r2, [pc, #76]	; (4f40 <vTaskSwitchContext+0xd8>)
    4ef2:	6011      	str	r1, [r2, #0]
    4ef4:	4a14      	ldr	r2, [pc, #80]	; (4f48 <vTaskSwitchContext+0xe0>)
    4ef6:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
    4ef8:	2201      	movs	r2, #1
    4efa:	4b15      	ldr	r3, [pc, #84]	; (4f50 <vTaskSwitchContext+0xe8>)
    4efc:	601a      	str	r2, [r3, #0]
    4efe:	4b15      	ldr	r3, [pc, #84]	; (4f54 <vTaskSwitchContext+0xec>)
    4f00:	4798      	blx	r3
    4f02:	4b15      	ldr	r3, [pc, #84]	; (4f58 <vTaskSwitchContext+0xf0>)
    4f04:	4798      	blx	r3
    4f06:	4b15      	ldr	r3, [pc, #84]	; (4f5c <vTaskSwitchContext+0xf4>)
    4f08:	881b      	ldrh	r3, [r3, #0]
    4f0a:	4203      	tst	r3, r0
    4f0c:	d10b      	bne.n	4f26 <vTaskSwitchContext+0xbe>
    4f0e:	2202      	movs	r2, #2
    4f10:	4b0f      	ldr	r3, [pc, #60]	; (4f50 <vTaskSwitchContext+0xe8>)
    4f12:	601a      	str	r2, [r3, #0]
}
    4f14:	e7d6      	b.n	4ec4 <vTaskSwitchContext+0x5c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4f16:	6860      	ldr	r0, [r4, #4]
    4f18:	009a      	lsls	r2, r3, #2
    4f1a:	18d2      	adds	r2, r2, r3
    4f1c:	0092      	lsls	r2, r2, #2
    4f1e:	490b      	ldr	r1, [pc, #44]	; (4f4c <vTaskSwitchContext+0xe4>)
    4f20:	188a      	adds	r2, r1, r2
    4f22:	6050      	str	r0, [r2, #4]
    4f24:	e7dd      	b.n	4ee2 <vTaskSwitchContext+0x7a>
		traceTASK_SWITCHED_IN();
    4f26:	4b0b      	ldr	r3, [pc, #44]	; (4f54 <vTaskSwitchContext+0xec>)
    4f28:	4798      	blx	r3
    4f2a:	4b0d      	ldr	r3, [pc, #52]	; (4f60 <vTaskSwitchContext+0xf8>)
    4f2c:	4798      	blx	r3
    4f2e:	b2c0      	uxtb	r0, r0
    4f30:	4b0c      	ldr	r3, [pc, #48]	; (4f64 <vTaskSwitchContext+0xfc>)
    4f32:	4798      	blx	r3
    4f34:	e7eb      	b.n	4f0e <vTaskSwitchContext+0xa6>
    4f36:	46c0      	nop			; (mov r8, r8)
    4f38:	2000373c 	.word	0x2000373c
    4f3c:	200037c0 	.word	0x200037c0
    4f40:	200036c0 	.word	0x200036c0
    4f44:	00007465 	.word	0x00007465
    4f48:	20003744 	.word	0x20003744
    4f4c:	200036cc 	.word	0x200036cc
    4f50:	200003e4 	.word	0x200003e4
    4f54:	000021e1 	.word	0x000021e1
    4f58:	00002129 	.word	0x00002129
    4f5c:	20000020 	.word	0x20000020
    4f60:	00002119 	.word	0x00002119
    4f64:	0000305d 	.word	0x0000305d

00004f68 <vTaskSuspend>:
	{
    4f68:	b570      	push	{r4, r5, r6, lr}
    4f6a:	0005      	movs	r5, r0
		taskENTER_CRITICAL();
    4f6c:	4b33      	ldr	r3, [pc, #204]	; (503c <vTaskSuspend+0xd4>)
    4f6e:	4798      	blx	r3
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    4f70:	1e2c      	subs	r4, r5, #0
    4f72:	d02b      	beq.n	4fcc <vTaskSuspend+0x64>
			traceTASK_SUSPEND( pxTCB );
    4f74:	4b32      	ldr	r3, [pc, #200]	; (5040 <vTaskSuspend+0xd8>)
    4f76:	4798      	blx	r3
    4f78:	4b32      	ldr	r3, [pc, #200]	; (5044 <vTaskSuspend+0xdc>)
    4f7a:	4798      	blx	r3
    4f7c:	4b32      	ldr	r3, [pc, #200]	; (5048 <vTaskSuspend+0xe0>)
    4f7e:	881b      	ldrh	r3, [r3, #0]
    4f80:	4203      	tst	r3, r0
    4f82:	d126      	bne.n	4fd2 <vTaskSuspend+0x6a>
    4f84:	0020      	movs	r0, r4
    4f86:	4b31      	ldr	r3, [pc, #196]	; (504c <vTaskSuspend+0xe4>)
    4f88:	4798      	blx	r3
    4f8a:	b2c0      	uxtb	r0, r0
    4f8c:	4b30      	ldr	r3, [pc, #192]	; (5050 <vTaskSuspend+0xe8>)
    4f8e:	4798      	blx	r3
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4f90:	1d25      	adds	r5, r4, #4
    4f92:	0028      	movs	r0, r5
    4f94:	4b2f      	ldr	r3, [pc, #188]	; (5054 <vTaskSuspend+0xec>)
    4f96:	4798      	blx	r3
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4f98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4f9a:	2b00      	cmp	r3, #0
    4f9c:	d003      	beq.n	4fa6 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4f9e:	0020      	movs	r0, r4
    4fa0:	3018      	adds	r0, #24
    4fa2:	4b2c      	ldr	r3, [pc, #176]	; (5054 <vTaskSuspend+0xec>)
    4fa4:	4798      	blx	r3
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    4fa6:	0029      	movs	r1, r5
    4fa8:	482b      	ldr	r0, [pc, #172]	; (5058 <vTaskSuspend+0xf0>)
    4faa:	4b2c      	ldr	r3, [pc, #176]	; (505c <vTaskSuspend+0xf4>)
    4fac:	4798      	blx	r3
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    4fae:	2350      	movs	r3, #80	; 0x50
    4fb0:	5ce3      	ldrb	r3, [r4, r3]
    4fb2:	2b01      	cmp	r3, #1
    4fb4:	d01d      	beq.n	4ff2 <vTaskSuspend+0x8a>
		taskEXIT_CRITICAL();
    4fb6:	4b2a      	ldr	r3, [pc, #168]	; (5060 <vTaskSuspend+0xf8>)
    4fb8:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
    4fba:	4b2a      	ldr	r3, [pc, #168]	; (5064 <vTaskSuspend+0xfc>)
    4fbc:	681b      	ldr	r3, [r3, #0]
    4fbe:	2b00      	cmp	r3, #0
    4fc0:	d11b      	bne.n	4ffa <vTaskSuspend+0x92>
		if( pxTCB == pxCurrentTCB )
    4fc2:	4b29      	ldr	r3, [pc, #164]	; (5068 <vTaskSuspend+0x100>)
    4fc4:	681b      	ldr	r3, [r3, #0]
    4fc6:	429c      	cmp	r4, r3
    4fc8:	d01e      	beq.n	5008 <vTaskSuspend+0xa0>
	}
    4fca:	bd70      	pop	{r4, r5, r6, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    4fcc:	4b26      	ldr	r3, [pc, #152]	; (5068 <vTaskSuspend+0x100>)
    4fce:	681c      	ldr	r4, [r3, #0]
    4fd0:	e7d0      	b.n	4f74 <vTaskSuspend+0xc>
			traceTASK_SUSPEND( pxTCB );
    4fd2:	0020      	movs	r0, r4
    4fd4:	4b1b      	ldr	r3, [pc, #108]	; (5044 <vTaskSuspend+0xdc>)
    4fd6:	4798      	blx	r3
    4fd8:	4b1b      	ldr	r3, [pc, #108]	; (5048 <vTaskSuspend+0xe0>)
    4fda:	881b      	ldrh	r3, [r3, #0]
    4fdc:	4203      	tst	r3, r0
    4fde:	d0d1      	beq.n	4f84 <vTaskSuspend+0x1c>
    4fe0:	0020      	movs	r0, r4
    4fe2:	4b1a      	ldr	r3, [pc, #104]	; (504c <vTaskSuspend+0xe4>)
    4fe4:	4798      	blx	r3
    4fe6:	b2c2      	uxtb	r2, r0
    4fe8:	2103      	movs	r1, #3
    4fea:	208a      	movs	r0, #138	; 0x8a
    4fec:	4b1f      	ldr	r3, [pc, #124]	; (506c <vTaskSuspend+0x104>)
    4fee:	4798      	blx	r3
    4ff0:	e7c8      	b.n	4f84 <vTaskSuspend+0x1c>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4ff2:	2200      	movs	r2, #0
    4ff4:	334f      	adds	r3, #79	; 0x4f
    4ff6:	54e2      	strb	r2, [r4, r3]
    4ff8:	e7dd      	b.n	4fb6 <vTaskSuspend+0x4e>
			taskENTER_CRITICAL();
    4ffa:	4b10      	ldr	r3, [pc, #64]	; (503c <vTaskSuspend+0xd4>)
    4ffc:	4798      	blx	r3
				prvResetNextTaskUnblockTime();
    4ffe:	4b1c      	ldr	r3, [pc, #112]	; (5070 <vTaskSuspend+0x108>)
    5000:	4798      	blx	r3
			taskEXIT_CRITICAL();
    5002:	4b17      	ldr	r3, [pc, #92]	; (5060 <vTaskSuspend+0xf8>)
    5004:	4798      	blx	r3
    5006:	e7dc      	b.n	4fc2 <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
    5008:	4b16      	ldr	r3, [pc, #88]	; (5064 <vTaskSuspend+0xfc>)
    500a:	681b      	ldr	r3, [r3, #0]
    500c:	2b00      	cmp	r3, #0
    500e:	d008      	beq.n	5022 <vTaskSuspend+0xba>
				configASSERT( uxSchedulerSuspended == 0 );
    5010:	4b18      	ldr	r3, [pc, #96]	; (5074 <vTaskSuspend+0x10c>)
    5012:	681b      	ldr	r3, [r3, #0]
    5014:	2b00      	cmp	r3, #0
    5016:	d001      	beq.n	501c <vTaskSuspend+0xb4>
    5018:	b672      	cpsid	i
    501a:	e7fe      	b.n	501a <vTaskSuspend+0xb2>
				portYIELD_WITHIN_API();
    501c:	4b16      	ldr	r3, [pc, #88]	; (5078 <vTaskSuspend+0x110>)
    501e:	4798      	blx	r3
    5020:	e7d3      	b.n	4fca <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    5022:	4b0d      	ldr	r3, [pc, #52]	; (5058 <vTaskSuspend+0xf0>)
    5024:	681a      	ldr	r2, [r3, #0]
    5026:	4b15      	ldr	r3, [pc, #84]	; (507c <vTaskSuspend+0x114>)
    5028:	681b      	ldr	r3, [r3, #0]
    502a:	429a      	cmp	r2, r3
    502c:	d002      	beq.n	5034 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
    502e:	4b14      	ldr	r3, [pc, #80]	; (5080 <vTaskSuspend+0x118>)
    5030:	4798      	blx	r3
	}
    5032:	e7ca      	b.n	4fca <vTaskSuspend+0x62>
					pxCurrentTCB = NULL;
    5034:	2200      	movs	r2, #0
    5036:	4b0c      	ldr	r3, [pc, #48]	; (5068 <vTaskSuspend+0x100>)
    5038:	601a      	str	r2, [r3, #0]
    503a:	e7c6      	b.n	4fca <vTaskSuspend+0x62>
    503c:	00003391 	.word	0x00003391
    5040:	000021e1 	.word	0x000021e1
    5044:	00002129 	.word	0x00002129
    5048:	20000020 	.word	0x20000020
    504c:	00002119 	.word	0x00002119
    5050:	00002945 	.word	0x00002945
    5054:	0000325f 	.word	0x0000325f
    5058:	20003794 	.word	0x20003794
    505c:	00003219 	.word	0x00003219
    5060:	000033a9 	.word	0x000033a9
    5064:	20003790 	.word	0x20003790
    5068:	200036c0 	.word	0x200036c0
    506c:	00002e19 	.word	0x00002e19
    5070:	000046ad 	.word	0x000046ad
    5074:	2000373c 	.word	0x2000373c
    5078:	00003381 	.word	0x00003381
    507c:	20003730 	.word	0x20003730
    5080:	00004e69 	.word	0x00004e69

00005084 <vTaskPlaceOnEventList>:
{
    5084:	b510      	push	{r4, lr}
    5086:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    5088:	2800      	cmp	r0, #0
    508a:	d101      	bne.n	5090 <vTaskPlaceOnEventList+0xc>
    508c:	b672      	cpsid	i
    508e:	e7fe      	b.n	508e <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    5090:	4b04      	ldr	r3, [pc, #16]	; (50a4 <vTaskPlaceOnEventList+0x20>)
    5092:	6819      	ldr	r1, [r3, #0]
    5094:	3118      	adds	r1, #24
    5096:	4b04      	ldr	r3, [pc, #16]	; (50a8 <vTaskPlaceOnEventList+0x24>)
    5098:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    509a:	2101      	movs	r1, #1
    509c:	0020      	movs	r0, r4
    509e:	4b03      	ldr	r3, [pc, #12]	; (50ac <vTaskPlaceOnEventList+0x28>)
    50a0:	4798      	blx	r3
}
    50a2:	bd10      	pop	{r4, pc}
    50a4:	200036c0 	.word	0x200036c0
    50a8:	00003231 	.word	0x00003231
    50ac:	00004759 	.word	0x00004759

000050b0 <vTaskPlaceOnEventListRestricted>:
	{
    50b0:	b570      	push	{r4, r5, r6, lr}
    50b2:	000c      	movs	r4, r1
    50b4:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    50b6:	2800      	cmp	r0, #0
    50b8:	d031      	beq.n	511e <vTaskPlaceOnEventListRestricted+0x6e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    50ba:	4b1a      	ldr	r3, [pc, #104]	; (5124 <vTaskPlaceOnEventListRestricted+0x74>)
    50bc:	6819      	ldr	r1, [r3, #0]
    50be:	3118      	adds	r1, #24
    50c0:	4b19      	ldr	r3, [pc, #100]	; (5128 <vTaskPlaceOnEventListRestricted+0x78>)
    50c2:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    50c4:	2d00      	cmp	r5, #0
    50c6:	d001      	beq.n	50cc <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    50c8:	2401      	movs	r4, #1
    50ca:	4264      	negs	r4, r4
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
    50cc:	4b15      	ldr	r3, [pc, #84]	; (5124 <vTaskPlaceOnEventListRestricted+0x74>)
    50ce:	6818      	ldr	r0, [r3, #0]
    50d0:	4b16      	ldr	r3, [pc, #88]	; (512c <vTaskPlaceOnEventListRestricted+0x7c>)
    50d2:	4798      	blx	r3
    50d4:	4b16      	ldr	r3, [pc, #88]	; (5130 <vTaskPlaceOnEventListRestricted+0x80>)
    50d6:	881b      	ldrh	r3, [r3, #0]
    50d8:	4203      	tst	r3, r0
    50da:	d00c      	beq.n	50f6 <vTaskPlaceOnEventListRestricted+0x46>
    50dc:	4b15      	ldr	r3, [pc, #84]	; (5134 <vTaskPlaceOnEventListRestricted+0x84>)
    50de:	6819      	ldr	r1, [r3, #0]
    50e0:	1861      	adds	r1, r4, r1
    50e2:	2088      	movs	r0, #136	; 0x88
    50e4:	4b14      	ldr	r3, [pc, #80]	; (5138 <vTaskPlaceOnEventListRestricted+0x88>)
    50e6:	4798      	blx	r3
    50e8:	4b0e      	ldr	r3, [pc, #56]	; (5124 <vTaskPlaceOnEventListRestricted+0x74>)
    50ea:	6818      	ldr	r0, [r3, #0]
    50ec:	4b13      	ldr	r3, [pc, #76]	; (513c <vTaskPlaceOnEventListRestricted+0x8c>)
    50ee:	4798      	blx	r3
    50f0:	b2c0      	uxtb	r0, r0
    50f2:	4b13      	ldr	r3, [pc, #76]	; (5140 <vTaskPlaceOnEventListRestricted+0x90>)
    50f4:	4798      	blx	r3
    50f6:	4b13      	ldr	r3, [pc, #76]	; (5144 <vTaskPlaceOnEventListRestricted+0x94>)
    50f8:	4798      	blx	r3
    50fa:	4b0c      	ldr	r3, [pc, #48]	; (512c <vTaskPlaceOnEventListRestricted+0x7c>)
    50fc:	4798      	blx	r3
    50fe:	4b0c      	ldr	r3, [pc, #48]	; (5130 <vTaskPlaceOnEventListRestricted+0x80>)
    5100:	881b      	ldrh	r3, [r3, #0]
    5102:	4203      	tst	r3, r0
    5104:	d006      	beq.n	5114 <vTaskPlaceOnEventListRestricted+0x64>
    5106:	4b0f      	ldr	r3, [pc, #60]	; (5144 <vTaskPlaceOnEventListRestricted+0x94>)
    5108:	4798      	blx	r3
    510a:	4b0c      	ldr	r3, [pc, #48]	; (513c <vTaskPlaceOnEventListRestricted+0x8c>)
    510c:	4798      	blx	r3
    510e:	b2c0      	uxtb	r0, r0
    5110:	4b0b      	ldr	r3, [pc, #44]	; (5140 <vTaskPlaceOnEventListRestricted+0x90>)
    5112:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    5114:	0029      	movs	r1, r5
    5116:	0020      	movs	r0, r4
    5118:	4b0b      	ldr	r3, [pc, #44]	; (5148 <vTaskPlaceOnEventListRestricted+0x98>)
    511a:	4798      	blx	r3
	}
    511c:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    511e:	b672      	cpsid	i
    5120:	e7fe      	b.n	5120 <vTaskPlaceOnEventListRestricted+0x70>
    5122:	46c0      	nop			; (mov r8, r8)
    5124:	200036c0 	.word	0x200036c0
    5128:	00003219 	.word	0x00003219
    512c:	00002129 	.word	0x00002129
    5130:	20000020 	.word	0x20000020
    5134:	200037bc 	.word	0x200037bc
    5138:	00002fb5 	.word	0x00002fb5
    513c:	00002119 	.word	0x00002119
    5140:	00002945 	.word	0x00002945
    5144:	000021e1 	.word	0x000021e1
    5148:	00004759 	.word	0x00004759

0000514c <xTaskRemoveFromEventList>:
{
    514c:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    514e:	68c3      	ldr	r3, [r0, #12]
    5150:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    5152:	2c00      	cmp	r4, #0
    5154:	d02e      	beq.n	51b4 <xTaskRemoveFromEventList+0x68>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5156:	0025      	movs	r5, r4
    5158:	3518      	adds	r5, #24
    515a:	0028      	movs	r0, r5
    515c:	4b1c      	ldr	r3, [pc, #112]	; (51d0 <xTaskRemoveFromEventList+0x84>)
    515e:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5160:	4b1c      	ldr	r3, [pc, #112]	; (51d4 <xTaskRemoveFromEventList+0x88>)
    5162:	681b      	ldr	r3, [r3, #0]
    5164:	2b00      	cmp	r3, #0
    5166:	d12e      	bne.n	51c6 <xTaskRemoveFromEventList+0x7a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    5168:	1d25      	adds	r5, r4, #4
    516a:	0028      	movs	r0, r5
    516c:	4b18      	ldr	r3, [pc, #96]	; (51d0 <xTaskRemoveFromEventList+0x84>)
    516e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    5170:	0020      	movs	r0, r4
    5172:	4b19      	ldr	r3, [pc, #100]	; (51d8 <xTaskRemoveFromEventList+0x8c>)
    5174:	4798      	blx	r3
    5176:	4b19      	ldr	r3, [pc, #100]	; (51dc <xTaskRemoveFromEventList+0x90>)
    5178:	881b      	ldrh	r3, [r3, #0]
    517a:	4203      	tst	r3, r0
    517c:	d11c      	bne.n	51b8 <xTaskRemoveFromEventList+0x6c>
    517e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5180:	4a17      	ldr	r2, [pc, #92]	; (51e0 <xTaskRemoveFromEventList+0x94>)
    5182:	6812      	ldr	r2, [r2, #0]
    5184:	4293      	cmp	r3, r2
    5186:	d901      	bls.n	518c <xTaskRemoveFromEventList+0x40>
    5188:	4a15      	ldr	r2, [pc, #84]	; (51e0 <xTaskRemoveFromEventList+0x94>)
    518a:	6013      	str	r3, [r2, #0]
    518c:	0098      	lsls	r0, r3, #2
    518e:	18c0      	adds	r0, r0, r3
    5190:	0080      	lsls	r0, r0, #2
    5192:	4b14      	ldr	r3, [pc, #80]	; (51e4 <xTaskRemoveFromEventList+0x98>)
    5194:	1818      	adds	r0, r3, r0
    5196:	0029      	movs	r1, r5
    5198:	4b13      	ldr	r3, [pc, #76]	; (51e8 <xTaskRemoveFromEventList+0x9c>)
    519a:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    519c:	4b13      	ldr	r3, [pc, #76]	; (51ec <xTaskRemoveFromEventList+0xa0>)
    519e:	681b      	ldr	r3, [r3, #0]
    51a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    51a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    51a4:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    51a6:	429a      	cmp	r2, r3
    51a8:	d903      	bls.n	51b2 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
    51aa:	2201      	movs	r2, #1
    51ac:	4b10      	ldr	r3, [pc, #64]	; (51f0 <xTaskRemoveFromEventList+0xa4>)
    51ae:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    51b0:	3001      	adds	r0, #1
}
    51b2:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    51b4:	b672      	cpsid	i
    51b6:	e7fe      	b.n	51b6 <xTaskRemoveFromEventList+0x6a>
		prvAddTaskToReadyList( pxUnblockedTCB );
    51b8:	0020      	movs	r0, r4
    51ba:	4b0e      	ldr	r3, [pc, #56]	; (51f4 <xTaskRemoveFromEventList+0xa8>)
    51bc:	4798      	blx	r3
    51be:	b2c0      	uxtb	r0, r0
    51c0:	4b0d      	ldr	r3, [pc, #52]	; (51f8 <xTaskRemoveFromEventList+0xac>)
    51c2:	4798      	blx	r3
    51c4:	e7db      	b.n	517e <xTaskRemoveFromEventList+0x32>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    51c6:	0029      	movs	r1, r5
    51c8:	480c      	ldr	r0, [pc, #48]	; (51fc <xTaskRemoveFromEventList+0xb0>)
    51ca:	4b07      	ldr	r3, [pc, #28]	; (51e8 <xTaskRemoveFromEventList+0x9c>)
    51cc:	4798      	blx	r3
    51ce:	e7e5      	b.n	519c <xTaskRemoveFromEventList+0x50>
    51d0:	0000325f 	.word	0x0000325f
    51d4:	2000373c 	.word	0x2000373c
    51d8:	00002129 	.word	0x00002129
    51dc:	20000020 	.word	0x20000020
    51e0:	20003744 	.word	0x20003744
    51e4:	200036cc 	.word	0x200036cc
    51e8:	00003219 	.word	0x00003219
    51ec:	200036c0 	.word	0x200036c0
    51f0:	200037c0 	.word	0x200037c0
    51f4:	00002119 	.word	0x00002119
    51f8:	00002cb1 	.word	0x00002cb1
    51fc:	2000377c 	.word	0x2000377c

00005200 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5200:	4b03      	ldr	r3, [pc, #12]	; (5210 <vTaskInternalSetTimeOutState+0x10>)
    5202:	681b      	ldr	r3, [r3, #0]
    5204:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5206:	4b03      	ldr	r3, [pc, #12]	; (5214 <vTaskInternalSetTimeOutState+0x14>)
    5208:	681b      	ldr	r3, [r3, #0]
    520a:	6043      	str	r3, [r0, #4]
}
    520c:	4770      	bx	lr
    520e:	46c0      	nop			; (mov r8, r8)
    5210:	20003778 	.word	0x20003778
    5214:	200037bc 	.word	0x200037bc

00005218 <xTaskCheckForTimeOut>:
{
    5218:	b570      	push	{r4, r5, r6, lr}
    521a:	0006      	movs	r6, r0
    521c:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    521e:	2800      	cmp	r0, #0
    5220:	d01b      	beq.n	525a <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    5222:	2900      	cmp	r1, #0
    5224:	d01b      	beq.n	525e <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    5226:	4b13      	ldr	r3, [pc, #76]	; (5274 <xTaskCheckForTimeOut+0x5c>)
    5228:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    522a:	4b13      	ldr	r3, [pc, #76]	; (5278 <xTaskCheckForTimeOut+0x60>)
    522c:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    522e:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    5230:	682b      	ldr	r3, [r5, #0]
    5232:	1c58      	adds	r0, r3, #1
    5234:	d01c      	beq.n	5270 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    5236:	4811      	ldr	r0, [pc, #68]	; (527c <xTaskCheckForTimeOut+0x64>)
    5238:	6800      	ldr	r0, [r0, #0]
    523a:	6834      	ldr	r4, [r6, #0]
    523c:	4284      	cmp	r4, r0
    523e:	d002      	beq.n	5246 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    5240:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    5242:	428a      	cmp	r2, r1
    5244:	d205      	bcs.n	5252 <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    5246:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    5248:	429a      	cmp	r2, r3
    524a:	d30a      	bcc.n	5262 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    524c:	2300      	movs	r3, #0
    524e:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    5250:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    5252:	4b0b      	ldr	r3, [pc, #44]	; (5280 <xTaskCheckForTimeOut+0x68>)
    5254:	4798      	blx	r3
}
    5256:	0020      	movs	r0, r4
    5258:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    525a:	b672      	cpsid	i
    525c:	e7fe      	b.n	525c <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    525e:	b672      	cpsid	i
    5260:	e7fe      	b.n	5260 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    5262:	1a9b      	subs	r3, r3, r2
    5264:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    5266:	0030      	movs	r0, r6
    5268:	4b06      	ldr	r3, [pc, #24]	; (5284 <xTaskCheckForTimeOut+0x6c>)
    526a:	4798      	blx	r3
			xReturn = pdFALSE;
    526c:	2400      	movs	r4, #0
    526e:	e7f0      	b.n	5252 <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    5270:	2400      	movs	r4, #0
    5272:	e7ee      	b.n	5252 <xTaskCheckForTimeOut+0x3a>
    5274:	00003391 	.word	0x00003391
    5278:	200037bc 	.word	0x200037bc
    527c:	20003778 	.word	0x20003778
    5280:	000033a9 	.word	0x000033a9
    5284:	00005201 	.word	0x00005201

00005288 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    5288:	2201      	movs	r2, #1
    528a:	4b01      	ldr	r3, [pc, #4]	; (5290 <vTaskMissedYield+0x8>)
    528c:	601a      	str	r2, [r3, #0]
}
    528e:	4770      	bx	lr
    5290:	200037c0 	.word	0x200037c0

00005294 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
    5294:	2800      	cmp	r0, #0
    5296:	d001      	beq.n	529c <uxTaskGetTaskNumber+0x8>
			uxReturn = pxTCB->uxTaskNumber;
    5298:	6c00      	ldr	r0, [r0, #64]	; 0x40
	}
    529a:	4770      	bx	lr
			uxReturn = 0U;
    529c:	2000      	movs	r0, #0
		return uxReturn;
    529e:	e7fc      	b.n	529a <uxTaskGetTaskNumber+0x6>

000052a0 <vTaskSetTaskNumber>:
		if( xTask != NULL )
    52a0:	2800      	cmp	r0, #0
    52a2:	d000      	beq.n	52a6 <vTaskSetTaskNumber+0x6>
			pxTCB->uxTaskNumber = uxHandle;
    52a4:	6401      	str	r1, [r0, #64]	; 0x40
	}
    52a6:	4770      	bx	lr

000052a8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
    52a8:	4b01      	ldr	r3, [pc, #4]	; (52b0 <xTaskGetCurrentTaskHandle+0x8>)
    52aa:	6818      	ldr	r0, [r3, #0]
	}
    52ac:	4770      	bx	lr
    52ae:	46c0      	nop			; (mov r8, r8)
    52b0:	200036c0 	.word	0x200036c0

000052b4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    52b4:	4b05      	ldr	r3, [pc, #20]	; (52cc <xTaskGetSchedulerState+0x18>)
    52b6:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    52b8:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    52ba:	2b00      	cmp	r3, #0
    52bc:	d004      	beq.n	52c8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    52be:	4b04      	ldr	r3, [pc, #16]	; (52d0 <xTaskGetSchedulerState+0x1c>)
    52c0:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    52c2:	4243      	negs	r3, r0
    52c4:	4158      	adcs	r0, r3
    52c6:	0040      	lsls	r0, r0, #1
	}
    52c8:	4770      	bx	lr
    52ca:	46c0      	nop			; (mov r8, r8)
    52cc:	20003790 	.word	0x20003790
    52d0:	2000373c 	.word	0x2000373c

000052d4 <xTaskPriorityInherit>:
	{
    52d4:	b570      	push	{r4, r5, r6, lr}
    52d6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    52d8:	d100      	bne.n	52dc <xTaskPriorityInherit+0x8>
    52da:	e06d      	b.n	53b8 <xTaskPriorityInherit+0xe4>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    52dc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    52de:	4b37      	ldr	r3, [pc, #220]	; (53bc <xTaskPriorityInherit+0xe8>)
    52e0:	681b      	ldr	r3, [r3, #0]
    52e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52e4:	429a      	cmp	r2, r3
    52e6:	d25f      	bcs.n	53a8 <xTaskPriorityInherit+0xd4>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    52e8:	6983      	ldr	r3, [r0, #24]
    52ea:	2b00      	cmp	r3, #0
    52ec:	db05      	blt.n	52fa <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    52ee:	4b33      	ldr	r3, [pc, #204]	; (53bc <xTaskPriorityInherit+0xe8>)
    52f0:	681b      	ldr	r3, [r3, #0]
    52f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    52f4:	2305      	movs	r3, #5
    52f6:	1a5b      	subs	r3, r3, r1
    52f8:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    52fa:	0093      	lsls	r3, r2, #2
    52fc:	189b      	adds	r3, r3, r2
    52fe:	009b      	lsls	r3, r3, #2
    5300:	4a2f      	ldr	r2, [pc, #188]	; (53c0 <xTaskPriorityInherit+0xec>)
    5302:	18d3      	adds	r3, r2, r3
    5304:	6962      	ldr	r2, [r4, #20]
    5306:	429a      	cmp	r2, r3
    5308:	d028      	beq.n	535c <xTaskPriorityInherit+0x88>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    530a:	4b2c      	ldr	r3, [pc, #176]	; (53bc <xTaskPriorityInherit+0xe8>)
    530c:	681b      	ldr	r3, [r3, #0]
    530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5310:	62e3      	str	r3, [r4, #44]	; 0x2c
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    5312:	0020      	movs	r0, r4
    5314:	4b2b      	ldr	r3, [pc, #172]	; (53c4 <xTaskPriorityInherit+0xf0>)
    5316:	4798      	blx	r3
    5318:	0003      	movs	r3, r0
    531a:	4a2b      	ldr	r2, [pc, #172]	; (53c8 <xTaskPriorityInherit+0xf4>)
    531c:	8812      	ldrh	r2, [r2, #0]
				xReturn = pdTRUE;
    531e:	2001      	movs	r0, #1
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    5320:	421a      	tst	r2, r3
    5322:	d048      	beq.n	53b6 <xTaskPriorityInherit+0xe2>
    5324:	0020      	movs	r0, r4
    5326:	4d29      	ldr	r5, [pc, #164]	; (53cc <xTaskPriorityInherit+0xf8>)
    5328:	47a8      	blx	r5
    532a:	0006      	movs	r6, r0
    532c:	0020      	movs	r0, r4
    532e:	47a8      	blx	r5
    5330:	b2c1      	uxtb	r1, r0
    5332:	2003      	movs	r0, #3
    5334:	4b26      	ldr	r3, [pc, #152]	; (53d0 <xTaskPriorityInherit+0xfc>)
    5336:	4798      	blx	r3
    5338:	0003      	movs	r3, r0
    533a:	b2f2      	uxtb	r2, r6
    533c:	2103      	movs	r1, #3
    533e:	208e      	movs	r0, #142	; 0x8e
    5340:	4e24      	ldr	r6, [pc, #144]	; (53d4 <xTaskPriorityInherit+0x100>)
    5342:	47b0      	blx	r6
    5344:	0020      	movs	r0, r4
    5346:	47a8      	blx	r5
    5348:	4b1c      	ldr	r3, [pc, #112]	; (53bc <xTaskPriorityInherit+0xe8>)
    534a:	681b      	ldr	r3, [r3, #0]
    534c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    534e:	b2d2      	uxtb	r2, r2
    5350:	b2c1      	uxtb	r1, r0
    5352:	2003      	movs	r0, #3
    5354:	4b20      	ldr	r3, [pc, #128]	; (53d8 <xTaskPriorityInherit+0x104>)
    5356:	4798      	blx	r3
				xReturn = pdTRUE;
    5358:	2001      	movs	r0, #1
    535a:	e02c      	b.n	53b6 <xTaskPriorityInherit+0xe2>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    535c:	1d25      	adds	r5, r4, #4
    535e:	0028      	movs	r0, r5
    5360:	4b1e      	ldr	r3, [pc, #120]	; (53dc <xTaskPriorityInherit+0x108>)
    5362:	4798      	blx	r3
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    5364:	4b15      	ldr	r3, [pc, #84]	; (53bc <xTaskPriorityInherit+0xe8>)
    5366:	681b      	ldr	r3, [r3, #0]
    5368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    536a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    536c:	0020      	movs	r0, r4
    536e:	4b15      	ldr	r3, [pc, #84]	; (53c4 <xTaskPriorityInherit+0xf0>)
    5370:	4798      	blx	r3
    5372:	4b15      	ldr	r3, [pc, #84]	; (53c8 <xTaskPriorityInherit+0xf4>)
    5374:	881b      	ldrh	r3, [r3, #0]
    5376:	4203      	tst	r3, r0
    5378:	d10f      	bne.n	539a <xTaskPriorityInherit+0xc6>
    537a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    537c:	4a18      	ldr	r2, [pc, #96]	; (53e0 <xTaskPriorityInherit+0x10c>)
    537e:	6812      	ldr	r2, [r2, #0]
    5380:	4293      	cmp	r3, r2
    5382:	d901      	bls.n	5388 <xTaskPriorityInherit+0xb4>
    5384:	4a16      	ldr	r2, [pc, #88]	; (53e0 <xTaskPriorityInherit+0x10c>)
    5386:	6013      	str	r3, [r2, #0]
    5388:	0098      	lsls	r0, r3, #2
    538a:	18c0      	adds	r0, r0, r3
    538c:	0080      	lsls	r0, r0, #2
    538e:	4b0c      	ldr	r3, [pc, #48]	; (53c0 <xTaskPriorityInherit+0xec>)
    5390:	1818      	adds	r0, r3, r0
    5392:	0029      	movs	r1, r5
    5394:	4b13      	ldr	r3, [pc, #76]	; (53e4 <xTaskPriorityInherit+0x110>)
    5396:	4798      	blx	r3
    5398:	e7bb      	b.n	5312 <xTaskPriorityInherit+0x3e>
    539a:	0020      	movs	r0, r4
    539c:	4b0b      	ldr	r3, [pc, #44]	; (53cc <xTaskPriorityInherit+0xf8>)
    539e:	4798      	blx	r3
    53a0:	b2c0      	uxtb	r0, r0
    53a2:	4b11      	ldr	r3, [pc, #68]	; (53e8 <xTaskPriorityInherit+0x114>)
    53a4:	4798      	blx	r3
    53a6:	e7e8      	b.n	537a <xTaskPriorityInherit+0xa6>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    53a8:	4b04      	ldr	r3, [pc, #16]	; (53bc <xTaskPriorityInherit+0xe8>)
    53aa:	681b      	ldr	r3, [r3, #0]
    53ac:	6c40      	ldr	r0, [r0, #68]	; 0x44
    53ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    53b0:	4298      	cmp	r0, r3
    53b2:	4180      	sbcs	r0, r0
    53b4:	4240      	negs	r0, r0
	}
    53b6:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    53b8:	2000      	movs	r0, #0
    53ba:	e7fc      	b.n	53b6 <xTaskPriorityInherit+0xe2>
    53bc:	200036c0 	.word	0x200036c0
    53c0:	200036cc 	.word	0x200036cc
    53c4:	00002129 	.word	0x00002129
    53c8:	20000020 	.word	0x20000020
    53cc:	00002119 	.word	0x00002119
    53d0:	00002891 	.word	0x00002891
    53d4:	00002edd 	.word	0x00002edd
    53d8:	00002839 	.word	0x00002839
    53dc:	0000325f 	.word	0x0000325f
    53e0:	20003744 	.word	0x20003744
    53e4:	00003219 	.word	0x00003219
    53e8:	00002cb1 	.word	0x00002cb1

000053ec <xTaskPriorityDisinherit>:
	{
    53ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53ee:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    53f0:	d05a      	beq.n	54a8 <xTaskPriorityDisinherit+0xbc>
			configASSERT( pxTCB == pxCurrentTCB );
    53f2:	4b2f      	ldr	r3, [pc, #188]	; (54b0 <xTaskPriorityDisinherit+0xc4>)
    53f4:	681b      	ldr	r3, [r3, #0]
    53f6:	4298      	cmp	r0, r3
    53f8:	d001      	beq.n	53fe <xTaskPriorityDisinherit+0x12>
    53fa:	b672      	cpsid	i
    53fc:	e7fe      	b.n	53fc <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    53fe:	6c83      	ldr	r3, [r0, #72]	; 0x48
    5400:	2b00      	cmp	r3, #0
    5402:	d101      	bne.n	5408 <xTaskPriorityDisinherit+0x1c>
    5404:	b672      	cpsid	i
    5406:	e7fe      	b.n	5406 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    5408:	3b01      	subs	r3, #1
    540a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    540c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    540e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    5410:	428a      	cmp	r2, r1
    5412:	d04b      	beq.n	54ac <xTaskPriorityDisinherit+0xc0>
	BaseType_t xReturn = pdFALSE;
    5414:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    5416:	2b00      	cmp	r3, #0
    5418:	d145      	bne.n	54a6 <xTaskPriorityDisinherit+0xba>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    541a:	1d25      	adds	r5, r4, #4
    541c:	0028      	movs	r0, r5
    541e:	4b25      	ldr	r3, [pc, #148]	; (54b4 <xTaskPriorityDisinherit+0xc8>)
    5420:	4798      	blx	r3
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    5422:	0020      	movs	r0, r4
    5424:	4b24      	ldr	r3, [pc, #144]	; (54b8 <xTaskPriorityDisinherit+0xcc>)
    5426:	4798      	blx	r3
    5428:	4b24      	ldr	r3, [pc, #144]	; (54bc <xTaskPriorityDisinherit+0xd0>)
    542a:	881b      	ldrh	r3, [r3, #0]
    542c:	4203      	tst	r3, r0
    542e:	d018      	beq.n	5462 <xTaskPriorityDisinherit+0x76>
    5430:	0020      	movs	r0, r4
    5432:	4e23      	ldr	r6, [pc, #140]	; (54c0 <xTaskPriorityDisinherit+0xd4>)
    5434:	47b0      	blx	r6
    5436:	0007      	movs	r7, r0
    5438:	0020      	movs	r0, r4
    543a:	47b0      	blx	r6
    543c:	b2c1      	uxtb	r1, r0
    543e:	2003      	movs	r0, #3
    5440:	4b20      	ldr	r3, [pc, #128]	; (54c4 <xTaskPriorityDisinherit+0xd8>)
    5442:	4798      	blx	r3
    5444:	0003      	movs	r3, r0
    5446:	b2fa      	uxtb	r2, r7
    5448:	2103      	movs	r1, #3
    544a:	208f      	movs	r0, #143	; 0x8f
    544c:	4f1e      	ldr	r7, [pc, #120]	; (54c8 <xTaskPriorityDisinherit+0xdc>)
    544e:	47b8      	blx	r7
    5450:	0020      	movs	r0, r4
    5452:	47b0      	blx	r6
    5454:	2344      	movs	r3, #68	; 0x44
    5456:	18e3      	adds	r3, r4, r3
    5458:	781a      	ldrb	r2, [r3, #0]
    545a:	b2c1      	uxtb	r1, r0
    545c:	2003      	movs	r0, #3
    545e:	4b1b      	ldr	r3, [pc, #108]	; (54cc <xTaskPriorityDisinherit+0xe0>)
    5460:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    5462:	6c62      	ldr	r2, [r4, #68]	; 0x44
    5464:	62e2      	str	r2, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5466:	2305      	movs	r3, #5
    5468:	1a9b      	subs	r3, r3, r2
    546a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    546c:	0020      	movs	r0, r4
    546e:	4b12      	ldr	r3, [pc, #72]	; (54b8 <xTaskPriorityDisinherit+0xcc>)
    5470:	4798      	blx	r3
    5472:	4b12      	ldr	r3, [pc, #72]	; (54bc <xTaskPriorityDisinherit+0xd0>)
    5474:	881b      	ldrh	r3, [r3, #0]
    5476:	4203      	tst	r3, r0
    5478:	d005      	beq.n	5486 <xTaskPriorityDisinherit+0x9a>
    547a:	0020      	movs	r0, r4
    547c:	4b10      	ldr	r3, [pc, #64]	; (54c0 <xTaskPriorityDisinherit+0xd4>)
    547e:	4798      	blx	r3
    5480:	b2c0      	uxtb	r0, r0
    5482:	4b13      	ldr	r3, [pc, #76]	; (54d0 <xTaskPriorityDisinherit+0xe4>)
    5484:	4798      	blx	r3
    5486:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5488:	4a12      	ldr	r2, [pc, #72]	; (54d4 <xTaskPriorityDisinherit+0xe8>)
    548a:	6812      	ldr	r2, [r2, #0]
    548c:	4293      	cmp	r3, r2
    548e:	d901      	bls.n	5494 <xTaskPriorityDisinherit+0xa8>
    5490:	4a10      	ldr	r2, [pc, #64]	; (54d4 <xTaskPriorityDisinherit+0xe8>)
    5492:	6013      	str	r3, [r2, #0]
    5494:	0098      	lsls	r0, r3, #2
    5496:	18c0      	adds	r0, r0, r3
    5498:	0080      	lsls	r0, r0, #2
    549a:	4b0f      	ldr	r3, [pc, #60]	; (54d8 <xTaskPriorityDisinherit+0xec>)
    549c:	1818      	adds	r0, r3, r0
    549e:	0029      	movs	r1, r5
    54a0:	4b0e      	ldr	r3, [pc, #56]	; (54dc <xTaskPriorityDisinherit+0xf0>)
    54a2:	4798      	blx	r3
					xReturn = pdTRUE;
    54a4:	2001      	movs	r0, #1
	}
    54a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
    54a8:	2000      	movs	r0, #0
    54aa:	e7fc      	b.n	54a6 <xTaskPriorityDisinherit+0xba>
    54ac:	2000      	movs	r0, #0
    54ae:	e7fa      	b.n	54a6 <xTaskPriorityDisinherit+0xba>
    54b0:	200036c0 	.word	0x200036c0
    54b4:	0000325f 	.word	0x0000325f
    54b8:	00002129 	.word	0x00002129
    54bc:	20000020 	.word	0x20000020
    54c0:	00002119 	.word	0x00002119
    54c4:	00002891 	.word	0x00002891
    54c8:	00002edd 	.word	0x00002edd
    54cc:	00002839 	.word	0x00002839
    54d0:	00002cb1 	.word	0x00002cb1
    54d4:	20003744 	.word	0x20003744
    54d8:	200036cc 	.word	0x200036cc
    54dc:	00003219 	.word	0x00003219

000054e0 <vTaskPriorityDisinheritAfterTimeout>:
	{
    54e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54e2:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    54e4:	d00d      	beq.n	5502 <vTaskPriorityDisinheritAfterTimeout+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    54e6:	6c83      	ldr	r3, [r0, #72]	; 0x48
    54e8:	2b00      	cmp	r3, #0
    54ea:	d101      	bne.n	54f0 <vTaskPriorityDisinheritAfterTimeout+0x10>
    54ec:	b672      	cpsid	i
    54ee:	e7fe      	b.n	54ee <vTaskPriorityDisinheritAfterTimeout+0xe>
    54f0:	6c45      	ldr	r5, [r0, #68]	; 0x44
    54f2:	428d      	cmp	r5, r1
    54f4:	d200      	bcs.n	54f8 <vTaskPriorityDisinheritAfterTimeout+0x18>
    54f6:	000d      	movs	r5, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
    54f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    54fa:	42aa      	cmp	r2, r5
    54fc:	d001      	beq.n	5502 <vTaskPriorityDisinheritAfterTimeout+0x22>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    54fe:	2b01      	cmp	r3, #1
    5500:	d000      	beq.n	5504 <vTaskPriorityDisinheritAfterTimeout+0x24>
	}
    5502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					configASSERT( pxTCB != pxCurrentTCB );
    5504:	4b2b      	ldr	r3, [pc, #172]	; (55b4 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
    5506:	681b      	ldr	r3, [r3, #0]
    5508:	429c      	cmp	r4, r3
    550a:	d101      	bne.n	5510 <vTaskPriorityDisinheritAfterTimeout+0x30>
    550c:	b672      	cpsid	i
    550e:	e7fe      	b.n	550e <vTaskPriorityDisinheritAfterTimeout+0x2e>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    5510:	0020      	movs	r0, r4
    5512:	4b29      	ldr	r3, [pc, #164]	; (55b8 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
    5514:	4798      	blx	r3
    5516:	4b29      	ldr	r3, [pc, #164]	; (55bc <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    5518:	881b      	ldrh	r3, [r3, #0]
    551a:	4203      	tst	r3, r0
    551c:	d018      	beq.n	5550 <vTaskPriorityDisinheritAfterTimeout+0x70>
    551e:	0020      	movs	r0, r4
    5520:	4e27      	ldr	r6, [pc, #156]	; (55c0 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    5522:	47b0      	blx	r6
    5524:	0007      	movs	r7, r0
    5526:	0020      	movs	r0, r4
    5528:	47b0      	blx	r6
    552a:	b2c1      	uxtb	r1, r0
    552c:	2003      	movs	r0, #3
    552e:	4b25      	ldr	r3, [pc, #148]	; (55c4 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
    5530:	4798      	blx	r3
    5532:	0003      	movs	r3, r0
    5534:	b2fa      	uxtb	r2, r7
    5536:	2103      	movs	r1, #3
    5538:	208f      	movs	r0, #143	; 0x8f
    553a:	4f23      	ldr	r7, [pc, #140]	; (55c8 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
    553c:	47b8      	blx	r7
    553e:	0020      	movs	r0, r4
    5540:	47b0      	blx	r6
    5542:	2344      	movs	r3, #68	; 0x44
    5544:	18e3      	adds	r3, r4, r3
    5546:	781a      	ldrb	r2, [r3, #0]
    5548:	b2c1      	uxtb	r1, r0
    554a:	2003      	movs	r0, #3
    554c:	4b1f      	ldr	r3, [pc, #124]	; (55cc <vTaskPriorityDisinheritAfterTimeout+0xec>)
    554e:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    5550:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					pxTCB->uxPriority = uxPriorityToUse;
    5552:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    5554:	69a3      	ldr	r3, [r4, #24]
    5556:	2b00      	cmp	r3, #0
    5558:	db02      	blt.n	5560 <vTaskPriorityDisinheritAfterTimeout+0x80>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    555a:	2205      	movs	r2, #5
    555c:	1b55      	subs	r5, r2, r5
    555e:	61a5      	str	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    5560:	008b      	lsls	r3, r1, #2
    5562:	185b      	adds	r3, r3, r1
    5564:	009b      	lsls	r3, r3, #2
    5566:	4a1a      	ldr	r2, [pc, #104]	; (55d0 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
    5568:	18d3      	adds	r3, r2, r3
    556a:	6962      	ldr	r2, [r4, #20]
    556c:	429a      	cmp	r2, r3
    556e:	d1c8      	bne.n	5502 <vTaskPriorityDisinheritAfterTimeout+0x22>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    5570:	1d25      	adds	r5, r4, #4
    5572:	0028      	movs	r0, r5
    5574:	4b17      	ldr	r3, [pc, #92]	; (55d4 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
    5576:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
    5578:	0020      	movs	r0, r4
    557a:	4b0f      	ldr	r3, [pc, #60]	; (55b8 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
    557c:	4798      	blx	r3
    557e:	4b0f      	ldr	r3, [pc, #60]	; (55bc <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    5580:	881b      	ldrh	r3, [r3, #0]
    5582:	4203      	tst	r3, r0
    5584:	d005      	beq.n	5592 <vTaskPriorityDisinheritAfterTimeout+0xb2>
    5586:	0020      	movs	r0, r4
    5588:	4b0d      	ldr	r3, [pc, #52]	; (55c0 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    558a:	4798      	blx	r3
    558c:	b2c0      	uxtb	r0, r0
    558e:	4b12      	ldr	r3, [pc, #72]	; (55d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
    5590:	4798      	blx	r3
    5592:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5594:	4a11      	ldr	r2, [pc, #68]	; (55dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
    5596:	6812      	ldr	r2, [r2, #0]
    5598:	4293      	cmp	r3, r2
    559a:	d901      	bls.n	55a0 <vTaskPriorityDisinheritAfterTimeout+0xc0>
    559c:	4a0f      	ldr	r2, [pc, #60]	; (55dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
    559e:	6013      	str	r3, [r2, #0]
    55a0:	0098      	lsls	r0, r3, #2
    55a2:	18c0      	adds	r0, r0, r3
    55a4:	0080      	lsls	r0, r0, #2
    55a6:	4b0a      	ldr	r3, [pc, #40]	; (55d0 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
    55a8:	1818      	adds	r0, r3, r0
    55aa:	0029      	movs	r1, r5
    55ac:	4b0c      	ldr	r3, [pc, #48]	; (55e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
    55ae:	4798      	blx	r3
	}
    55b0:	e7a7      	b.n	5502 <vTaskPriorityDisinheritAfterTimeout+0x22>
    55b2:	46c0      	nop			; (mov r8, r8)
    55b4:	200036c0 	.word	0x200036c0
    55b8:	00002129 	.word	0x00002129
    55bc:	20000020 	.word	0x20000020
    55c0:	00002119 	.word	0x00002119
    55c4:	00002891 	.word	0x00002891
    55c8:	00002edd 	.word	0x00002edd
    55cc:	00002839 	.word	0x00002839
    55d0:	200036cc 	.word	0x200036cc
    55d4:	0000325f 	.word	0x0000325f
    55d8:	00002cb1 	.word	0x00002cb1
    55dc:	20003744 	.word	0x20003744
    55e0:	00003219 	.word	0x00003219

000055e4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
    55e4:	4b05      	ldr	r3, [pc, #20]	; (55fc <pvTaskIncrementMutexHeldCount+0x18>)
    55e6:	681b      	ldr	r3, [r3, #0]
    55e8:	2b00      	cmp	r3, #0
    55ea:	d004      	beq.n	55f6 <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
    55ec:	4b03      	ldr	r3, [pc, #12]	; (55fc <pvTaskIncrementMutexHeldCount+0x18>)
    55ee:	681a      	ldr	r2, [r3, #0]
    55f0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    55f2:	3301      	adds	r3, #1
    55f4:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
    55f6:	4b01      	ldr	r3, [pc, #4]	; (55fc <pvTaskIncrementMutexHeldCount+0x18>)
    55f8:	6818      	ldr	r0, [r3, #0]
	}
    55fa:	4770      	bx	lr
    55fc:	200036c0 	.word	0x200036c0

00005600 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    5600:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    5602:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    5604:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    5606:	4291      	cmp	r1, r2
    5608:	d80b      	bhi.n	5622 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    560a:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    560c:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    560e:	6983      	ldr	r3, [r0, #24]
    5610:	429a      	cmp	r2, r3
    5612:	d211      	bcs.n	5638 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    5614:	1d01      	adds	r1, r0, #4
    5616:	4b09      	ldr	r3, [pc, #36]	; (563c <prvInsertTimerInActiveList+0x3c>)
    5618:	6818      	ldr	r0, [r3, #0]
    561a:	4b09      	ldr	r3, [pc, #36]	; (5640 <prvInsertTimerInActiveList+0x40>)
    561c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    561e:	2400      	movs	r4, #0
    5620:	e00a      	b.n	5638 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    5622:	429a      	cmp	r2, r3
    5624:	d202      	bcs.n	562c <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    5626:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    5628:	4299      	cmp	r1, r3
    562a:	d205      	bcs.n	5638 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    562c:	1d01      	adds	r1, r0, #4
    562e:	4b05      	ldr	r3, [pc, #20]	; (5644 <prvInsertTimerInActiveList+0x44>)
    5630:	6818      	ldr	r0, [r3, #0]
    5632:	4b03      	ldr	r3, [pc, #12]	; (5640 <prvInsertTimerInActiveList+0x40>)
    5634:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    5636:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    5638:	0020      	movs	r0, r4
    563a:	bd10      	pop	{r4, pc}
    563c:	200037c8 	.word	0x200037c8
    5640:	00003231 	.word	0x00003231
    5644:	200037c4 	.word	0x200037c4

00005648 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    5648:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    564a:	4b0e      	ldr	r3, [pc, #56]	; (5684 <prvCheckForValidListAndQueue+0x3c>)
    564c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    564e:	4b0e      	ldr	r3, [pc, #56]	; (5688 <prvCheckForValidListAndQueue+0x40>)
    5650:	681b      	ldr	r3, [r3, #0]
    5652:	2b00      	cmp	r3, #0
    5654:	d002      	beq.n	565c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    5656:	4b0d      	ldr	r3, [pc, #52]	; (568c <prvCheckForValidListAndQueue+0x44>)
    5658:	4798      	blx	r3
}
    565a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    565c:	4d0c      	ldr	r5, [pc, #48]	; (5690 <prvCheckForValidListAndQueue+0x48>)
    565e:	0028      	movs	r0, r5
    5660:	4e0c      	ldr	r6, [pc, #48]	; (5694 <prvCheckForValidListAndQueue+0x4c>)
    5662:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    5664:	4c0c      	ldr	r4, [pc, #48]	; (5698 <prvCheckForValidListAndQueue+0x50>)
    5666:	0020      	movs	r0, r4
    5668:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    566a:	4b0c      	ldr	r3, [pc, #48]	; (569c <prvCheckForValidListAndQueue+0x54>)
    566c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    566e:	4b0c      	ldr	r3, [pc, #48]	; (56a0 <prvCheckForValidListAndQueue+0x58>)
    5670:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    5672:	2200      	movs	r2, #0
    5674:	210c      	movs	r1, #12
    5676:	2002      	movs	r0, #2
    5678:	4b0a      	ldr	r3, [pc, #40]	; (56a4 <prvCheckForValidListAndQueue+0x5c>)
    567a:	4798      	blx	r3
    567c:	4b02      	ldr	r3, [pc, #8]	; (5688 <prvCheckForValidListAndQueue+0x40>)
    567e:	6018      	str	r0, [r3, #0]
    5680:	e7e9      	b.n	5656 <prvCheckForValidListAndQueue+0xe>
    5682:	46c0      	nop			; (mov r8, r8)
    5684:	00003391 	.word	0x00003391
    5688:	200037f8 	.word	0x200037f8
    568c:	000033a9 	.word	0x000033a9
    5690:	200037cc 	.word	0x200037cc
    5694:	000031fd 	.word	0x000031fd
    5698:	200037e0 	.word	0x200037e0
    569c:	200037c4 	.word	0x200037c4
    56a0:	200037c8 	.word	0x200037c8
    56a4:	00003809 	.word	0x00003809

000056a8 <xTimerCreateTimerTask>:
{
    56a8:	b510      	push	{r4, lr}
    56aa:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    56ac:	4b0a      	ldr	r3, [pc, #40]	; (56d8 <xTimerCreateTimerTask+0x30>)
    56ae:	4798      	blx	r3
	if( xTimerQueue != NULL )
    56b0:	4b0a      	ldr	r3, [pc, #40]	; (56dc <xTimerCreateTimerTask+0x34>)
    56b2:	681b      	ldr	r3, [r3, #0]
    56b4:	2b00      	cmp	r3, #0
    56b6:	d00d      	beq.n	56d4 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
    56b8:	4b09      	ldr	r3, [pc, #36]	; (56e0 <xTimerCreateTimerTask+0x38>)
    56ba:	9301      	str	r3, [sp, #4]
    56bc:	2302      	movs	r3, #2
    56be:	9300      	str	r3, [sp, #0]
    56c0:	2300      	movs	r3, #0
    56c2:	2280      	movs	r2, #128	; 0x80
    56c4:	4907      	ldr	r1, [pc, #28]	; (56e4 <xTimerCreateTimerTask+0x3c>)
    56c6:	4808      	ldr	r0, [pc, #32]	; (56e8 <xTimerCreateTimerTask+0x40>)
    56c8:	4c08      	ldr	r4, [pc, #32]	; (56ec <xTimerCreateTimerTask+0x44>)
    56ca:	47a0      	blx	r4
	configASSERT( xReturn );
    56cc:	2800      	cmp	r0, #0
    56ce:	d001      	beq.n	56d4 <xTimerCreateTimerTask+0x2c>
}
    56d0:	b002      	add	sp, #8
    56d2:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    56d4:	b672      	cpsid	i
    56d6:	e7fe      	b.n	56d6 <xTimerCreateTimerTask+0x2e>
    56d8:	00005649 	.word	0x00005649
    56dc:	200037f8 	.word	0x200037f8
    56e0:	200037fc 	.word	0x200037fc
    56e4:	0000b650 	.word	0x0000b650
    56e8:	00005815 	.word	0x00005815
    56ec:	000047e1 	.word	0x000047e1

000056f0 <xTimerGenericCommand>:
{
    56f0:	b530      	push	{r4, r5, lr}
    56f2:	b085      	sub	sp, #20
    56f4:	0004      	movs	r4, r0
    56f6:	001d      	movs	r5, r3
	configASSERT( xTimer );
    56f8:	2800      	cmp	r0, #0
    56fa:	d014      	beq.n	5726 <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    56fc:	4b13      	ldr	r3, [pc, #76]	; (574c <xTimerGenericCommand+0x5c>)
    56fe:	6818      	ldr	r0, [r3, #0]
    5700:	2800      	cmp	r0, #0
    5702:	d021      	beq.n	5748 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    5704:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    5706:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    5708:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    570a:	2905      	cmp	r1, #5
    570c:	dc15      	bgt.n	573a <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    570e:	4b10      	ldr	r3, [pc, #64]	; (5750 <xTimerGenericCommand+0x60>)
    5710:	4798      	blx	r3
    5712:	2802      	cmp	r0, #2
    5714:	d009      	beq.n	572a <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    5716:	4b0d      	ldr	r3, [pc, #52]	; (574c <xTimerGenericCommand+0x5c>)
    5718:	6818      	ldr	r0, [r3, #0]
    571a:	2300      	movs	r3, #0
    571c:	2200      	movs	r2, #0
    571e:	a901      	add	r1, sp, #4
    5720:	4c0c      	ldr	r4, [pc, #48]	; (5754 <xTimerGenericCommand+0x64>)
    5722:	47a0      	blx	r4
    5724:	e00e      	b.n	5744 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    5726:	b672      	cpsid	i
    5728:	e7fe      	b.n	5728 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    572a:	4b08      	ldr	r3, [pc, #32]	; (574c <xTimerGenericCommand+0x5c>)
    572c:	6818      	ldr	r0, [r3, #0]
    572e:	2300      	movs	r3, #0
    5730:	9a08      	ldr	r2, [sp, #32]
    5732:	a901      	add	r1, sp, #4
    5734:	4c07      	ldr	r4, [pc, #28]	; (5754 <xTimerGenericCommand+0x64>)
    5736:	47a0      	blx	r4
    5738:	e004      	b.n	5744 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    573a:	2300      	movs	r3, #0
    573c:	002a      	movs	r2, r5
    573e:	a901      	add	r1, sp, #4
    5740:	4c05      	ldr	r4, [pc, #20]	; (5758 <xTimerGenericCommand+0x68>)
    5742:	47a0      	blx	r4
}
    5744:	b005      	add	sp, #20
    5746:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    5748:	2000      	movs	r0, #0
	return xReturn;
    574a:	e7fb      	b.n	5744 <xTimerGenericCommand+0x54>
    574c:	200037f8 	.word	0x200037f8
    5750:	000052b5 	.word	0x000052b5
    5754:	00003945 	.word	0x00003945
    5758:	00003c99 	.word	0x00003c99

0000575c <prvSampleTimeNow>:
{
    575c:	b5f0      	push	{r4, r5, r6, r7, lr}
    575e:	46d6      	mov	lr, sl
    5760:	464f      	mov	r7, r9
    5762:	4646      	mov	r6, r8
    5764:	b5c0      	push	{r6, r7, lr}
    5766:	b082      	sub	sp, #8
    5768:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    576a:	4b23      	ldr	r3, [pc, #140]	; (57f8 <prvSampleTimeNow+0x9c>)
    576c:	4798      	blx	r3
    576e:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    5770:	4b22      	ldr	r3, [pc, #136]	; (57fc <prvSampleTimeNow+0xa0>)
    5772:	681b      	ldr	r3, [r3, #0]
    5774:	4298      	cmp	r0, r3
    5776:	d317      	bcc.n	57a8 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    5778:	2300      	movs	r3, #0
    577a:	4642      	mov	r2, r8
    577c:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    577e:	4b1f      	ldr	r3, [pc, #124]	; (57fc <prvSampleTimeNow+0xa0>)
    5780:	4652      	mov	r2, sl
    5782:	601a      	str	r2, [r3, #0]
}
    5784:	4650      	mov	r0, sl
    5786:	b002      	add	sp, #8
    5788:	bc1c      	pop	{r2, r3, r4}
    578a:	4690      	mov	r8, r2
    578c:	4699      	mov	r9, r3
    578e:	46a2      	mov	sl, r4
    5790:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    5792:	2300      	movs	r3, #0
    5794:	9300      	str	r3, [sp, #0]
    5796:	003a      	movs	r2, r7
    5798:	2100      	movs	r1, #0
    579a:	0020      	movs	r0, r4
    579c:	4c18      	ldr	r4, [pc, #96]	; (5800 <prvSampleTimeNow+0xa4>)
    579e:	47a0      	blx	r4
				configASSERT( xResult );
    57a0:	2800      	cmp	r0, #0
    57a2:	d104      	bne.n	57ae <prvSampleTimeNow+0x52>
    57a4:	b672      	cpsid	i
    57a6:	e7fe      	b.n	57a6 <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    57a8:	4d16      	ldr	r5, [pc, #88]	; (5804 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    57aa:	4b17      	ldr	r3, [pc, #92]	; (5808 <prvSampleTimeNow+0xac>)
    57ac:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    57ae:	682b      	ldr	r3, [r5, #0]
    57b0:	681a      	ldr	r2, [r3, #0]
    57b2:	2a00      	cmp	r2, #0
    57b4:	d017      	beq.n	57e6 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    57b6:	68db      	ldr	r3, [r3, #12]
    57b8:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    57ba:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    57bc:	1d26      	adds	r6, r4, #4
    57be:	0030      	movs	r0, r6
    57c0:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    57c2:	0020      	movs	r0, r4
    57c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    57c6:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    57c8:	69e3      	ldr	r3, [r4, #28]
    57ca:	2b01      	cmp	r3, #1
    57cc:	d1ef      	bne.n	57ae <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    57ce:	69a3      	ldr	r3, [r4, #24]
    57d0:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    57d2:	429f      	cmp	r7, r3
    57d4:	d2dd      	bcs.n	5792 <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    57d6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    57d8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    57da:	4b0a      	ldr	r3, [pc, #40]	; (5804 <prvSampleTimeNow+0xa8>)
    57dc:	6818      	ldr	r0, [r3, #0]
    57de:	0031      	movs	r1, r6
    57e0:	4b0a      	ldr	r3, [pc, #40]	; (580c <prvSampleTimeNow+0xb0>)
    57e2:	4798      	blx	r3
    57e4:	e7e3      	b.n	57ae <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    57e6:	4a0a      	ldr	r2, [pc, #40]	; (5810 <prvSampleTimeNow+0xb4>)
    57e8:	4906      	ldr	r1, [pc, #24]	; (5804 <prvSampleTimeNow+0xa8>)
    57ea:	6810      	ldr	r0, [r2, #0]
    57ec:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    57ee:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    57f0:	2301      	movs	r3, #1
    57f2:	4642      	mov	r2, r8
    57f4:	6013      	str	r3, [r2, #0]
    57f6:	e7c2      	b.n	577e <prvSampleTimeNow+0x22>
    57f8:	00004b05 	.word	0x00004b05
    57fc:	200037f4 	.word	0x200037f4
    5800:	000056f1 	.word	0x000056f1
    5804:	200037c4 	.word	0x200037c4
    5808:	0000325f 	.word	0x0000325f
    580c:	00003231 	.word	0x00003231
    5810:	200037c8 	.word	0x200037c8

00005814 <prvTimerTask>:
{
    5814:	b5f0      	push	{r4, r5, r6, r7, lr}
    5816:	b089      	sub	sp, #36	; 0x24
		vApplicationDaemonTaskStartupHook();
    5818:	4b53      	ldr	r3, [pc, #332]	; (5968 <prvTimerTask+0x154>)
    581a:	4798      	blx	r3
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    581c:	4f53      	ldr	r7, [pc, #332]	; (596c <prvTimerTask+0x158>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    581e:	4b54      	ldr	r3, [pc, #336]	; (5970 <prvTimerTask+0x15c>)
    5820:	681b      	ldr	r3, [r3, #0]
    5822:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    5824:	2a00      	cmp	r2, #0
    5826:	d00e      	beq.n	5846 <prvTimerTask+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    5828:	68db      	ldr	r3, [r3, #12]
    582a:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    582c:	4b51      	ldr	r3, [pc, #324]	; (5974 <prvTimerTask+0x160>)
    582e:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    5830:	a805      	add	r0, sp, #20
    5832:	4b51      	ldr	r3, [pc, #324]	; (5978 <prvTimerTask+0x164>)
    5834:	4798      	blx	r3
    5836:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    5838:	9b05      	ldr	r3, [sp, #20]
    583a:	2b00      	cmp	r3, #0
    583c:	d15f      	bne.n	58fe <prvTimerTask+0xea>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    583e:	4284      	cmp	r4, r0
    5840:	d936      	bls.n	58b0 <prvTimerTask+0x9c>
    5842:	2200      	movs	r2, #0
    5844:	e00f      	b.n	5866 <prvTimerTask+0x52>
	vTaskSuspendAll();
    5846:	4b4b      	ldr	r3, [pc, #300]	; (5974 <prvTimerTask+0x160>)
    5848:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    584a:	a805      	add	r0, sp, #20
    584c:	4b4a      	ldr	r3, [pc, #296]	; (5978 <prvTimerTask+0x164>)
    584e:	4798      	blx	r3
    5850:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    5852:	9b05      	ldr	r3, [sp, #20]
    5854:	2b00      	cmp	r3, #0
    5856:	d152      	bne.n	58fe <prvTimerTask+0xea>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    5858:	4b48      	ldr	r3, [pc, #288]	; (597c <prvTimerTask+0x168>)
    585a:	681b      	ldr	r3, [r3, #0]
    585c:	681b      	ldr	r3, [r3, #0]
    585e:	425a      	negs	r2, r3
    5860:	415a      	adcs	r2, r3
    5862:	b2d2      	uxtb	r2, r2
    5864:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    5866:	1b61      	subs	r1, r4, r5
    5868:	4b45      	ldr	r3, [pc, #276]	; (5980 <prvTimerTask+0x16c>)
    586a:	6818      	ldr	r0, [r3, #0]
    586c:	4b45      	ldr	r3, [pc, #276]	; (5984 <prvTimerTask+0x170>)
    586e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    5870:	4b45      	ldr	r3, [pc, #276]	; (5988 <prvTimerTask+0x174>)
    5872:	4798      	blx	r3
    5874:	2800      	cmp	r0, #0
    5876:	d03f      	beq.n	58f8 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    5878:	4d41      	ldr	r5, [pc, #260]	; (5980 <prvTimerTask+0x16c>)
    587a:	4c44      	ldr	r4, [pc, #272]	; (598c <prvTimerTask+0x178>)
    587c:	2200      	movs	r2, #0
    587e:	a905      	add	r1, sp, #20
    5880:	6828      	ldr	r0, [r5, #0]
    5882:	47a0      	blx	r4
    5884:	2800      	cmp	r0, #0
    5886:	d0ca      	beq.n	581e <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    5888:	9b05      	ldr	r3, [sp, #20]
    588a:	9303      	str	r3, [sp, #12]
    588c:	2b00      	cmp	r3, #0
    588e:	dbf5      	blt.n	587c <prvTimerTask+0x68>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    5890:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    5892:	6973      	ldr	r3, [r6, #20]
    5894:	2b00      	cmp	r3, #0
    5896:	d001      	beq.n	589c <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    5898:	1d30      	adds	r0, r6, #4
    589a:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    589c:	a804      	add	r0, sp, #16
    589e:	4b36      	ldr	r3, [pc, #216]	; (5978 <prvTimerTask+0x164>)
    58a0:	4798      	blx	r3
			switch( xMessage.xMessageID )
    58a2:	9b05      	ldr	r3, [sp, #20]
    58a4:	2b09      	cmp	r3, #9
    58a6:	d8e9      	bhi.n	587c <prvTimerTask+0x68>
    58a8:	009b      	lsls	r3, r3, #2
    58aa:	4a39      	ldr	r2, [pc, #228]	; (5990 <prvTimerTask+0x17c>)
    58ac:	58d3      	ldr	r3, [r2, r3]
    58ae:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
    58b0:	4b35      	ldr	r3, [pc, #212]	; (5988 <prvTimerTask+0x174>)
    58b2:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    58b4:	4b2e      	ldr	r3, [pc, #184]	; (5970 <prvTimerTask+0x15c>)
    58b6:	681b      	ldr	r3, [r3, #0]
    58b8:	68db      	ldr	r3, [r3, #12]
    58ba:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    58bc:	1d30      	adds	r0, r6, #4
    58be:	4b2b      	ldr	r3, [pc, #172]	; (596c <prvTimerTask+0x158>)
    58c0:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    58c2:	69f3      	ldr	r3, [r6, #28]
    58c4:	2b01      	cmp	r3, #1
    58c6:	d003      	beq.n	58d0 <prvTimerTask+0xbc>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    58c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
    58ca:	0030      	movs	r0, r6
    58cc:	4798      	blx	r3
    58ce:	e7d3      	b.n	5878 <prvTimerTask+0x64>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    58d0:	69b3      	ldr	r3, [r6, #24]
    58d2:	18e1      	adds	r1, r4, r3
    58d4:	0023      	movs	r3, r4
    58d6:	002a      	movs	r2, r5
    58d8:	0030      	movs	r0, r6
    58da:	4d2e      	ldr	r5, [pc, #184]	; (5994 <prvTimerTask+0x180>)
    58dc:	47a8      	blx	r5
    58de:	2800      	cmp	r0, #0
    58e0:	d0f2      	beq.n	58c8 <prvTimerTask+0xb4>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    58e2:	2300      	movs	r3, #0
    58e4:	9300      	str	r3, [sp, #0]
    58e6:	0022      	movs	r2, r4
    58e8:	2100      	movs	r1, #0
    58ea:	0030      	movs	r0, r6
    58ec:	4c2a      	ldr	r4, [pc, #168]	; (5998 <prvTimerTask+0x184>)
    58ee:	47a0      	blx	r4
			configASSERT( xResult );
    58f0:	2800      	cmp	r0, #0
    58f2:	d1e9      	bne.n	58c8 <prvTimerTask+0xb4>
    58f4:	b672      	cpsid	i
    58f6:	e7fe      	b.n	58f6 <prvTimerTask+0xe2>
					portYIELD_WITHIN_API();
    58f8:	4b28      	ldr	r3, [pc, #160]	; (599c <prvTimerTask+0x188>)
    58fa:	4798      	blx	r3
    58fc:	e7bc      	b.n	5878 <prvTimerTask+0x64>
			( void ) xTaskResumeAll();
    58fe:	4b22      	ldr	r3, [pc, #136]	; (5988 <prvTimerTask+0x174>)
    5900:	4798      	blx	r3
    5902:	e7b9      	b.n	5878 <prvTimerTask+0x64>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    5904:	9b06      	ldr	r3, [sp, #24]
    5906:	69b2      	ldr	r2, [r6, #24]
    5908:	4694      	mov	ip, r2
    590a:	4463      	add	r3, ip
    590c:	0019      	movs	r1, r3
    590e:	9b06      	ldr	r3, [sp, #24]
    5910:	0002      	movs	r2, r0
    5912:	0030      	movs	r0, r6
    5914:	4c1f      	ldr	r4, [pc, #124]	; (5994 <prvTimerTask+0x180>)
    5916:	47a0      	blx	r4
    5918:	2800      	cmp	r0, #0
    591a:	d0ae      	beq.n	587a <prvTimerTask+0x66>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    591c:	0030      	movs	r0, r6
    591e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    5920:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    5922:	69f3      	ldr	r3, [r6, #28]
    5924:	2b01      	cmp	r3, #1
    5926:	d1a8      	bne.n	587a <prvTimerTask+0x66>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    5928:	9b06      	ldr	r3, [sp, #24]
    592a:	69b1      	ldr	r1, [r6, #24]
    592c:	468c      	mov	ip, r1
    592e:	4463      	add	r3, ip
    5930:	001a      	movs	r2, r3
    5932:	2300      	movs	r3, #0
    5934:	9300      	str	r3, [sp, #0]
    5936:	2100      	movs	r1, #0
    5938:	0030      	movs	r0, r6
    593a:	4c17      	ldr	r4, [pc, #92]	; (5998 <prvTimerTask+0x184>)
    593c:	47a0      	blx	r4
							configASSERT( xResult );
    593e:	2800      	cmp	r0, #0
    5940:	d19b      	bne.n	587a <prvTimerTask+0x66>
    5942:	b672      	cpsid	i
    5944:	e7fe      	b.n	5944 <prvTimerTask+0x130>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    5946:	9906      	ldr	r1, [sp, #24]
    5948:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    594a:	2900      	cmp	r1, #0
    594c:	d006      	beq.n	595c <prvTimerTask+0x148>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    594e:	1841      	adds	r1, r0, r1
    5950:	0003      	movs	r3, r0
    5952:	0002      	movs	r2, r0
    5954:	0030      	movs	r0, r6
    5956:	4c0f      	ldr	r4, [pc, #60]	; (5994 <prvTimerTask+0x180>)
    5958:	47a0      	blx	r4
    595a:	e78e      	b.n	587a <prvTimerTask+0x66>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    595c:	b672      	cpsid	i
    595e:	e7fe      	b.n	595e <prvTimerTask+0x14a>
						vPortFree( pxTimer );
    5960:	0030      	movs	r0, r6
    5962:	4b0f      	ldr	r3, [pc, #60]	; (59a0 <prvTimerTask+0x18c>)
    5964:	4798      	blx	r3
    5966:	e788      	b.n	587a <prvTimerTask+0x66>
    5968:	0000728d 	.word	0x0000728d
    596c:	0000325f 	.word	0x0000325f
    5970:	200037c4 	.word	0x200037c4
    5974:	00004af5 	.word	0x00004af5
    5978:	0000575d 	.word	0x0000575d
    597c:	200037c8 	.word	0x200037c8
    5980:	200037f8 	.word	0x200037f8
    5984:	0000464d 	.word	0x0000464d
    5988:	00004c9d 	.word	0x00004c9d
    598c:	00003fe1 	.word	0x00003fe1
    5990:	0000b628 	.word	0x0000b628
    5994:	00005601 	.word	0x00005601
    5998:	000056f1 	.word	0x000056f1
    599c:	00003381 	.word	0x00003381
    59a0:	000034e5 	.word	0x000034e5

000059a4 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    59a4:	b510      	push	{r4, lr}
    59a6:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
    59a8:	7c03      	ldrb	r3, [r0, #16]
    59aa:	2b00      	cmp	r3, #0
    59ac:	d005      	beq.n	59ba <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    59ae:	6883      	ldr	r3, [r0, #8]
    59b0:	1c58      	adds	r0, r3, #1
    59b2:	68e1      	ldr	r1, [r4, #12]
    59b4:	4b07      	ldr	r3, [pc, #28]	; (59d4 <advance_pointer+0x30>)
    59b6:	4798      	blx	r3
    59b8:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    59ba:	6863      	ldr	r3, [r4, #4]
    59bc:	1c58      	adds	r0, r3, #1
    59be:	68e1      	ldr	r1, [r4, #12]
    59c0:	4b04      	ldr	r3, [pc, #16]	; (59d4 <advance_pointer+0x30>)
    59c2:	4798      	blx	r3
    59c4:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    59c6:	68a3      	ldr	r3, [r4, #8]
    59c8:	1a59      	subs	r1, r3, r1
    59ca:	424a      	negs	r2, r1
    59cc:	414a      	adcs	r2, r1
    59ce:	7422      	strb	r2, [r4, #16]
 }
    59d0:	bd10      	pop	{r4, pc}
    59d2:	46c0      	nop			; (mov r8, r8)
    59d4:	00007585 	.word	0x00007585

000059d8 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    59d8:	b570      	push	{r4, r5, r6, lr}
    59da:	0005      	movs	r5, r0
    59dc:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    59de:	2014      	movs	r0, #20
    59e0:	4b04      	ldr	r3, [pc, #16]	; (59f4 <circular_buf_init+0x1c>)
    59e2:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    59e4:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
    59e6:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
    59e8:	2300      	movs	r3, #0
    59ea:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
    59ec:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
    59ee:	7403      	strb	r3, [r0, #16]
 }
    59f0:	bd70      	pop	{r4, r5, r6, pc}
    59f2:	46c0      	nop			; (mov r8, r8)
    59f4:	00009a69 	.word	0x00009a69

000059f8 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    59f8:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    59fa:	6803      	ldr	r3, [r0, #0]
    59fc:	6842      	ldr	r2, [r0, #4]
    59fe:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
    5a00:	4b01      	ldr	r3, [pc, #4]	; (5a08 <circular_buf_put+0x10>)
    5a02:	4798      	blx	r3
 }
    5a04:	bd10      	pop	{r4, pc}
    5a06:	46c0      	nop			; (mov r8, r8)
    5a08:	000059a5 	.word	0x000059a5

00005a0c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    5a0c:	7c02      	ldrb	r2, [r0, #16]
    5a0e:	2300      	movs	r3, #0
    5a10:	2a00      	cmp	r2, #0
    5a12:	d105      	bne.n	5a20 <circular_buf_empty+0x14>
    5a14:	6843      	ldr	r3, [r0, #4]
    5a16:	6880      	ldr	r0, [r0, #8]
    5a18:	1a1b      	subs	r3, r3, r0
    5a1a:	4258      	negs	r0, r3
    5a1c:	4143      	adcs	r3, r0
    5a1e:	b2db      	uxtb	r3, r3
    5a20:	0018      	movs	r0, r3
 }
    5a22:	4770      	bx	lr

00005a24 <circular_buf_get>:
 {
    5a24:	b570      	push	{r4, r5, r6, lr}
    5a26:	0004      	movs	r4, r0
    5a28:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
    5a2a:	4b0a      	ldr	r3, [pc, #40]	; (5a54 <circular_buf_get+0x30>)
    5a2c:	4798      	blx	r3
    5a2e:	2800      	cmp	r0, #0
    5a30:	d10d      	bne.n	5a4e <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
    5a32:	6823      	ldr	r3, [r4, #0]
    5a34:	68a2      	ldr	r2, [r4, #8]
    5a36:	5c9b      	ldrb	r3, [r3, r2]
    5a38:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
    5a3a:	2300      	movs	r3, #0
    5a3c:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    5a3e:	68a3      	ldr	r3, [r4, #8]
    5a40:	1c58      	adds	r0, r3, #1
    5a42:	68e1      	ldr	r1, [r4, #12]
    5a44:	4b04      	ldr	r3, [pc, #16]	; (5a58 <circular_buf_get+0x34>)
    5a46:	4798      	blx	r3
    5a48:	60a1      	str	r1, [r4, #8]
		 r = 0;
    5a4a:	2000      	movs	r0, #0
 }
    5a4c:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
    5a4e:	2001      	movs	r0, #1
    5a50:	4240      	negs	r0, r0
	 return r;
    5a52:	e7fb      	b.n	5a4c <circular_buf_get+0x28>
    5a54:	00005a0d 	.word	0x00005a0d
    5a58:	00007585 	.word	0x00007585

00005a5c <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    5a5c:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    5a5e:	4b06      	ldr	r3, [pc, #24]	; (5a78 <usart_write_callback+0x1c>)
    5a60:	6818      	ldr	r0, [r3, #0]
    5a62:	4906      	ldr	r1, [pc, #24]	; (5a7c <usart_write_callback+0x20>)
    5a64:	4b06      	ldr	r3, [pc, #24]	; (5a80 <usart_write_callback+0x24>)
    5a66:	4798      	blx	r3
    5a68:	1c43      	adds	r3, r0, #1
    5a6a:	d004      	beq.n	5a76 <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    5a6c:	2201      	movs	r2, #1
    5a6e:	4903      	ldr	r1, [pc, #12]	; (5a7c <usart_write_callback+0x20>)
    5a70:	4804      	ldr	r0, [pc, #16]	; (5a84 <usart_write_callback+0x28>)
    5a72:	4b05      	ldr	r3, [pc, #20]	; (5a88 <usart_write_callback+0x2c>)
    5a74:	4798      	blx	r3
	}
	
}
    5a76:	bd10      	pop	{r4, pc}
    5a78:	20004dd0 	.word	0x20004dd0
    5a7c:	20004dcc 	.word	0x20004dcc
    5a80:	00005a25 	.word	0x00005a25
    5a84:	20004990 	.word	0x20004990
    5a88:	0000671d 	.word	0x0000671d

00005a8c <usart_read_callback>:
{
    5a8c:	b510      	push	{r4, lr}
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
    5a8e:	4c07      	ldr	r4, [pc, #28]	; (5aac <usart_read_callback+0x20>)
    5a90:	7821      	ldrb	r1, [r4, #0]
    5a92:	4b07      	ldr	r3, [pc, #28]	; (5ab0 <usart_read_callback+0x24>)
    5a94:	6818      	ldr	r0, [r3, #0]
    5a96:	4b07      	ldr	r3, [pc, #28]	; (5ab4 <usart_read_callback+0x28>)
    5a98:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
    5a9a:	2201      	movs	r2, #1
    5a9c:	0021      	movs	r1, r4
    5a9e:	4806      	ldr	r0, [pc, #24]	; (5ab8 <usart_read_callback+0x2c>)
    5aa0:	4b06      	ldr	r3, [pc, #24]	; (5abc <usart_read_callback+0x30>)
    5aa2:	4798      	blx	r3
	CliCharReadySemaphoreGiveFromISR(); //Give binary semaphore
    5aa4:	4b06      	ldr	r3, [pc, #24]	; (5ac0 <usart_read_callback+0x34>)
    5aa6:	4798      	blx	r3
}
    5aa8:	bd10      	pop	{r4, pc}
    5aaa:	46c0      	nop			; (mov r8, r8)
    5aac:	200049c8 	.word	0x200049c8
    5ab0:	200049c4 	.word	0x200049c4
    5ab4:	000059f9 	.word	0x000059f9
    5ab8:	20004990 	.word	0x20004990
    5abc:	0000673d 	.word	0x0000673d
    5ac0:	00000cc1 	.word	0x00000cc1

00005ac4 <InitializeSerialConsole>:
{
    5ac4:	b530      	push	{r4, r5, lr}
    5ac6:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
    5ac8:	2580      	movs	r5, #128	; 0x80
    5aca:	00ad      	lsls	r5, r5, #2
    5acc:	0029      	movs	r1, r5
    5ace:	4836      	ldr	r0, [pc, #216]	; (5ba8 <InitializeSerialConsole+0xe4>)
    5ad0:	4c36      	ldr	r4, [pc, #216]	; (5bac <InitializeSerialConsole+0xe8>)
    5ad2:	47a0      	blx	r4
    5ad4:	4b36      	ldr	r3, [pc, #216]	; (5bb0 <InitializeSerialConsole+0xec>)
    5ad6:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
    5ad8:	0029      	movs	r1, r5
    5ada:	4836      	ldr	r0, [pc, #216]	; (5bb4 <InitializeSerialConsole+0xf0>)
    5adc:	47a0      	blx	r4
    5ade:	4b36      	ldr	r3, [pc, #216]	; (5bb8 <InitializeSerialConsole+0xf4>)
    5ae0:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    5ae2:	2380      	movs	r3, #128	; 0x80
    5ae4:	05db      	lsls	r3, r3, #23
    5ae6:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    5ae8:	2300      	movs	r3, #0
    5aea:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    5aec:	22ff      	movs	r2, #255	; 0xff
    5aee:	4669      	mov	r1, sp
    5af0:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    5af2:	2200      	movs	r2, #0
    5af4:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    5af6:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    5af8:	2101      	movs	r1, #1
    5afa:	2024      	movs	r0, #36	; 0x24
    5afc:	466c      	mov	r4, sp
    5afe:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    5b00:	3001      	adds	r0, #1
    5b02:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    5b04:	3125      	adds	r1, #37	; 0x25
    5b06:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    5b08:	3101      	adds	r1, #1
    5b0a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    5b0c:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    5b0e:	3105      	adds	r1, #5
    5b10:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    5b12:	3101      	adds	r1, #1
    5b14:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    5b16:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    5b18:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    5b1a:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    5b1c:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    5b1e:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    5b20:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    5b22:	2313      	movs	r3, #19
    5b24:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    5b26:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
    5b28:	23e1      	movs	r3, #225	; 0xe1
    5b2a:	025b      	lsls	r3, r3, #9
    5b2c:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    5b2e:	23c4      	movs	r3, #196	; 0xc4
    5b30:	039b      	lsls	r3, r3, #14
    5b32:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    5b34:	2301      	movs	r3, #1
    5b36:	425b      	negs	r3, r3
    5b38:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    5b3a:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    5b3c:	4b1f      	ldr	r3, [pc, #124]	; (5bbc <InitializeSerialConsole+0xf8>)
    5b3e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    5b40:	4b1f      	ldr	r3, [pc, #124]	; (5bc0 <InitializeSerialConsole+0xfc>)
    5b42:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
    5b44:	4d1f      	ldr	r5, [pc, #124]	; (5bc4 <InitializeSerialConsole+0x100>)
    5b46:	4c20      	ldr	r4, [pc, #128]	; (5bc8 <InitializeSerialConsole+0x104>)
    5b48:	466a      	mov	r2, sp
    5b4a:	4920      	ldr	r1, [pc, #128]	; (5bcc <InitializeSerialConsole+0x108>)
    5b4c:	0028      	movs	r0, r5
    5b4e:	47a0      	blx	r4
    5b50:	2800      	cmp	r0, #0
    5b52:	d1f9      	bne.n	5b48 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5b54:	4d1b      	ldr	r5, [pc, #108]	; (5bc4 <InitializeSerialConsole+0x100>)
    5b56:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5b58:	0020      	movs	r0, r4
    5b5a:	4b1d      	ldr	r3, [pc, #116]	; (5bd0 <InitializeSerialConsole+0x10c>)
    5b5c:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5b5e:	231f      	movs	r3, #31
    5b60:	4018      	ands	r0, r3
    5b62:	3b1e      	subs	r3, #30
    5b64:	4083      	lsls	r3, r0
    5b66:	4a1b      	ldr	r2, [pc, #108]	; (5bd4 <InitializeSerialConsole+0x110>)
    5b68:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5b6a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5b6c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5b6e:	2b00      	cmp	r3, #0
    5b70:	d1fc      	bne.n	5b6c <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    5b72:	6823      	ldr	r3, [r4, #0]
    5b74:	2202      	movs	r2, #2
    5b76:	4313      	orrs	r3, r2
    5b78:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
    5b7a:	4c12      	ldr	r4, [pc, #72]	; (5bc4 <InitializeSerialConsole+0x100>)
    5b7c:	2200      	movs	r2, #0
    5b7e:	4916      	ldr	r1, [pc, #88]	; (5bd8 <InitializeSerialConsole+0x114>)
    5b80:	0020      	movs	r0, r4
    5b82:	4d16      	ldr	r5, [pc, #88]	; (5bdc <InitializeSerialConsole+0x118>)
    5b84:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
    5b86:	2201      	movs	r2, #1
    5b88:	4915      	ldr	r1, [pc, #84]	; (5be0 <InitializeSerialConsole+0x11c>)
    5b8a:	0020      	movs	r0, r4
    5b8c:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    5b8e:	2231      	movs	r2, #49	; 0x31
    5b90:	5ca3      	ldrb	r3, [r4, r2]
    5b92:	2103      	movs	r1, #3
    5b94:	430b      	orrs	r3, r1
    5b96:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
    5b98:	3a30      	subs	r2, #48	; 0x30
    5b9a:	4912      	ldr	r1, [pc, #72]	; (5be4 <InitializeSerialConsole+0x120>)
    5b9c:	0020      	movs	r0, r4
    5b9e:	4b12      	ldr	r3, [pc, #72]	; (5be8 <InitializeSerialConsole+0x124>)
    5ba0:	4798      	blx	r3
}
    5ba2:	b011      	add	sp, #68	; 0x44
    5ba4:	bd30      	pop	{r4, r5, pc}
    5ba6:	46c0      	nop			; (mov r8, r8)
    5ba8:	20004bcc 	.word	0x20004bcc
    5bac:	000059d9 	.word	0x000059d9
    5bb0:	200049c4 	.word	0x200049c4
    5bb4:	200049cc 	.word	0x200049cc
    5bb8:	20004dd0 	.word	0x20004dd0
    5bbc:	002a0003 	.word	0x002a0003
    5bc0:	002b0003 	.word	0x002b0003
    5bc4:	20004990 	.word	0x20004990
    5bc8:	00006335 	.word	0x00006335
    5bcc:	42001800 	.word	0x42001800
    5bd0:	000062a5 	.word	0x000062a5
    5bd4:	e000e100 	.word	0xe000e100
    5bd8:	00005a5d 	.word	0x00005a5d
    5bdc:	00006705 	.word	0x00006705
    5be0:	00005a8d 	.word	0x00005a8d
    5be4:	200049c8 	.word	0x200049c8
    5be8:	0000673d 	.word	0x0000673d

00005bec <SerialConsoleWriteString>:
{
    5bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bee:	46c6      	mov	lr, r8
    5bf0:	b500      	push	{lr}
    5bf2:	0005      	movs	r5, r0
vTaskSuspendAll();
    5bf4:	4b14      	ldr	r3, [pc, #80]	; (5c48 <SerialConsoleWriteString+0x5c>)
    5bf6:	4798      	blx	r3
    5bf8:	2400      	movs	r4, #0
	if(string != NULL)
    5bfa:	2d00      	cmp	r5, #0
    5bfc:	d012      	beq.n	5c24 <SerialConsoleWriteString+0x38>
		for (size_t iter = 0; iter < strlen(string); iter++)
    5bfe:	4e13      	ldr	r6, [pc, #76]	; (5c4c <SerialConsoleWriteString+0x60>)
			circular_buf_put(cbufTx, string[iter]);
    5c00:	4f13      	ldr	r7, [pc, #76]	; (5c50 <SerialConsoleWriteString+0x64>)
    5c02:	4b14      	ldr	r3, [pc, #80]	; (5c54 <SerialConsoleWriteString+0x68>)
    5c04:	4698      	mov	r8, r3
    5c06:	e003      	b.n	5c10 <SerialConsoleWriteString+0x24>
    5c08:	5d29      	ldrb	r1, [r5, r4]
    5c0a:	6838      	ldr	r0, [r7, #0]
    5c0c:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
    5c0e:	3401      	adds	r4, #1
    5c10:	0028      	movs	r0, r5
    5c12:	47b0      	blx	r6
    5c14:	4284      	cmp	r4, r0
    5c16:	d3f7      	bcc.n	5c08 <SerialConsoleWriteString+0x1c>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
    5c18:	2101      	movs	r1, #1
    5c1a:	480f      	ldr	r0, [pc, #60]	; (5c58 <SerialConsoleWriteString+0x6c>)
    5c1c:	4b0f      	ldr	r3, [pc, #60]	; (5c5c <SerialConsoleWriteString+0x70>)
    5c1e:	4798      	blx	r3
    5c20:	2800      	cmp	r0, #0
    5c22:	d004      	beq.n	5c2e <SerialConsoleWriteString+0x42>
xTaskResumeAll();
    5c24:	4b0e      	ldr	r3, [pc, #56]	; (5c60 <SerialConsoleWriteString+0x74>)
    5c26:	4798      	blx	r3
}
    5c28:	bc04      	pop	{r2}
    5c2a:	4690      	mov	r8, r2
    5c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
    5c2e:	4c0d      	ldr	r4, [pc, #52]	; (5c64 <SerialConsoleWriteString+0x78>)
    5c30:	4b07      	ldr	r3, [pc, #28]	; (5c50 <SerialConsoleWriteString+0x64>)
    5c32:	6818      	ldr	r0, [r3, #0]
    5c34:	0021      	movs	r1, r4
    5c36:	4b0c      	ldr	r3, [pc, #48]	; (5c68 <SerialConsoleWriteString+0x7c>)
    5c38:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    5c3a:	2201      	movs	r2, #1
    5c3c:	0021      	movs	r1, r4
    5c3e:	4806      	ldr	r0, [pc, #24]	; (5c58 <SerialConsoleWriteString+0x6c>)
    5c40:	4b0a      	ldr	r3, [pc, #40]	; (5c6c <SerialConsoleWriteString+0x80>)
    5c42:	4798      	blx	r3
    5c44:	e7ee      	b.n	5c24 <SerialConsoleWriteString+0x38>
    5c46:	46c0      	nop			; (mov r8, r8)
    5c48:	00004af5 	.word	0x00004af5
    5c4c:	00009cf9 	.word	0x00009cf9
    5c50:	20004dd0 	.word	0x20004dd0
    5c54:	000059f9 	.word	0x000059f9
    5c58:	20004990 	.word	0x20004990
    5c5c:	0000675d 	.word	0x0000675d
    5c60:	00004c9d 	.word	0x00004c9d
    5c64:	20004dcc 	.word	0x20004dcc
    5c68:	00005a25 	.word	0x00005a25
    5c6c:	0000671d 	.word	0x0000671d

00005c70 <SerialConsoleReadCharacter>:
{
    5c70:	b510      	push	{r4, lr}
    5c72:	0004      	movs	r4, r0
	vTaskSuspendAll();
    5c74:	4b05      	ldr	r3, [pc, #20]	; (5c8c <SerialConsoleReadCharacter+0x1c>)
    5c76:	4798      	blx	r3
	int a = circular_buf_get(cbufRx, (uint8_t*) rxChar);
    5c78:	4b05      	ldr	r3, [pc, #20]	; (5c90 <SerialConsoleReadCharacter+0x20>)
    5c7a:	6818      	ldr	r0, [r3, #0]
    5c7c:	0021      	movs	r1, r4
    5c7e:	4b05      	ldr	r3, [pc, #20]	; (5c94 <SerialConsoleReadCharacter+0x24>)
    5c80:	4798      	blx	r3
    5c82:	0004      	movs	r4, r0
	xTaskResumeAll();
    5c84:	4b04      	ldr	r3, [pc, #16]	; (5c98 <SerialConsoleReadCharacter+0x28>)
    5c86:	4798      	blx	r3
}
    5c88:	0020      	movs	r0, r4
    5c8a:	bd10      	pop	{r4, pc}
    5c8c:	00004af5 	.word	0x00004af5
    5c90:	200049c4 	.word	0x200049c4
    5c94:	00005a25 	.word	0x00005a25
    5c98:	00004c9d 	.word	0x00004c9d

00005c9c <LogMessage>:
{
    5c9c:	b40e      	push	{r1, r2, r3}
    5c9e:	b530      	push	{r4, r5, lr}
    5ca0:	b082      	sub	sp, #8
return currentDebugLevel;
    5ca2:	4b0a      	ldr	r3, [pc, #40]	; (5ccc <LogMessage+0x30>)
if(getLogLevel() <= level){
    5ca4:	781b      	ldrb	r3, [r3, #0]
    5ca6:	4283      	cmp	r3, r0
    5ca8:	d904      	bls.n	5cb4 <LogMessage+0x18>
};
    5caa:	b002      	add	sp, #8
    5cac:	bc30      	pop	{r4, r5}
    5cae:	bc08      	pop	{r3}
    5cb0:	b003      	add	sp, #12
    5cb2:	4718      	bx	r3
	va_start(ap, format);
    5cb4:	ab06      	add	r3, sp, #24
    5cb6:	9301      	str	r3, [sp, #4]
	vsnprintf(debugBuffer, 127, format, ap);
    5cb8:	4c05      	ldr	r4, [pc, #20]	; (5cd0 <LogMessage+0x34>)
    5cba:	9a05      	ldr	r2, [sp, #20]
    5cbc:	217f      	movs	r1, #127	; 0x7f
    5cbe:	0020      	movs	r0, r4
    5cc0:	4d04      	ldr	r5, [pc, #16]	; (5cd4 <LogMessage+0x38>)
    5cc2:	47a8      	blx	r5
	SerialConsoleWriteString(debugBuffer);
    5cc4:	0020      	movs	r0, r4
    5cc6:	4b04      	ldr	r3, [pc, #16]	; (5cd8 <LogMessage+0x3c>)
    5cc8:	4798      	blx	r3
};
    5cca:	e7ee      	b.n	5caa <LogMessage+0xe>
    5ccc:	20003800 	.word	0x20003800
    5cd0:	20004910 	.word	0x20004910
    5cd4:	00009ee1 	.word	0x00009ee1
    5cd8:	00005bed 	.word	0x00005bed

00005cdc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    5cdc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    5cde:	4b08      	ldr	r3, [pc, #32]	; (5d00 <delay_cycles_ms+0x24>)
    5ce0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    5ce2:	4a08      	ldr	r2, [pc, #32]	; (5d04 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    5ce4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    5ce6:	2180      	movs	r1, #128	; 0x80
    5ce8:	0249      	lsls	r1, r1, #9
	while (n--) {
    5cea:	3801      	subs	r0, #1
    5cec:	d307      	bcc.n	5cfe <delay_cycles_ms+0x22>
	if (n > 0) {
    5cee:	2c00      	cmp	r4, #0
    5cf0:	d0fb      	beq.n	5cea <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    5cf2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    5cf4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    5cf6:	6813      	ldr	r3, [r2, #0]
    5cf8:	420b      	tst	r3, r1
    5cfa:	d0fc      	beq.n	5cf6 <delay_cycles_ms+0x1a>
    5cfc:	e7f5      	b.n	5cea <delay_cycles_ms+0xe>
	}
}
    5cfe:	bd30      	pop	{r4, r5, pc}
    5d00:	2000002c 	.word	0x2000002c
    5d04:	e000e010 	.word	0xe000e010

00005d08 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    5d08:	4b0c      	ldr	r3, [pc, #48]	; (5d3c <cpu_irq_enter_critical+0x34>)
    5d0a:	681b      	ldr	r3, [r3, #0]
    5d0c:	2b00      	cmp	r3, #0
    5d0e:	d106      	bne.n	5d1e <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5d10:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    5d14:	2b00      	cmp	r3, #0
    5d16:	d007      	beq.n	5d28 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    5d18:	2200      	movs	r2, #0
    5d1a:	4b09      	ldr	r3, [pc, #36]	; (5d40 <cpu_irq_enter_critical+0x38>)
    5d1c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    5d1e:	4a07      	ldr	r2, [pc, #28]	; (5d3c <cpu_irq_enter_critical+0x34>)
    5d20:	6813      	ldr	r3, [r2, #0]
    5d22:	3301      	adds	r3, #1
    5d24:	6013      	str	r3, [r2, #0]
}
    5d26:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    5d28:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    5d2a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    5d2e:	2200      	movs	r2, #0
    5d30:	4b04      	ldr	r3, [pc, #16]	; (5d44 <cpu_irq_enter_critical+0x3c>)
    5d32:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    5d34:	3201      	adds	r2, #1
    5d36:	4b02      	ldr	r3, [pc, #8]	; (5d40 <cpu_irq_enter_critical+0x38>)
    5d38:	701a      	strb	r2, [r3, #0]
    5d3a:	e7f0      	b.n	5d1e <cpu_irq_enter_critical+0x16>
    5d3c:	20003804 	.word	0x20003804
    5d40:	20003808 	.word	0x20003808
    5d44:	20000030 	.word	0x20000030

00005d48 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    5d48:	4b08      	ldr	r3, [pc, #32]	; (5d6c <cpu_irq_leave_critical+0x24>)
    5d4a:	681a      	ldr	r2, [r3, #0]
    5d4c:	3a01      	subs	r2, #1
    5d4e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    5d50:	681b      	ldr	r3, [r3, #0]
    5d52:	2b00      	cmp	r3, #0
    5d54:	d109      	bne.n	5d6a <cpu_irq_leave_critical+0x22>
    5d56:	4b06      	ldr	r3, [pc, #24]	; (5d70 <cpu_irq_leave_critical+0x28>)
    5d58:	781b      	ldrb	r3, [r3, #0]
    5d5a:	2b00      	cmp	r3, #0
    5d5c:	d005      	beq.n	5d6a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    5d5e:	2201      	movs	r2, #1
    5d60:	4b04      	ldr	r3, [pc, #16]	; (5d74 <cpu_irq_leave_critical+0x2c>)
    5d62:	701a      	strb	r2, [r3, #0]
    5d64:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5d68:	b662      	cpsie	i
	}
}
    5d6a:	4770      	bx	lr
    5d6c:	20003804 	.word	0x20003804
    5d70:	20003808 	.word	0x20003808
    5d74:	20000030 	.word	0x20000030

00005d78 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    5d78:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d7a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    5d7c:	ac01      	add	r4, sp, #4
    5d7e:	2501      	movs	r5, #1
    5d80:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    5d82:	2700      	movs	r7, #0
    5d84:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    5d86:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    5d88:	0021      	movs	r1, r4
    5d8a:	2017      	movs	r0, #23
    5d8c:	4e06      	ldr	r6, [pc, #24]	; (5da8 <system_board_init+0x30>)
    5d8e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    5d90:	2280      	movs	r2, #128	; 0x80
    5d92:	0412      	lsls	r2, r2, #16
    5d94:	4b05      	ldr	r3, [pc, #20]	; (5dac <system_board_init+0x34>)
    5d96:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    5d98:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    5d9a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    5d9c:	0021      	movs	r1, r4
    5d9e:	2037      	movs	r0, #55	; 0x37
    5da0:	47b0      	blx	r6
}
    5da2:	b003      	add	sp, #12
    5da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5da6:	46c0      	nop			; (mov r8, r8)
    5da8:	00005e89 	.word	0x00005e89
    5dac:	41004400 	.word	0x41004400

00005db0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    5db0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5db2:	2200      	movs	r2, #0
    5db4:	4b10      	ldr	r3, [pc, #64]	; (5df8 <EIC_Handler+0x48>)
    5db6:	701a      	strb	r2, [r3, #0]
    5db8:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    5dba:	4910      	ldr	r1, [pc, #64]	; (5dfc <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    5dbc:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    5dbe:	4e10      	ldr	r6, [pc, #64]	; (5e00 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5dc0:	4c0d      	ldr	r4, [pc, #52]	; (5df8 <EIC_Handler+0x48>)
    5dc2:	e00a      	b.n	5dda <EIC_Handler+0x2a>
		return eics[eic_index];
    5dc4:	490d      	ldr	r1, [pc, #52]	; (5dfc <EIC_Handler+0x4c>)
    5dc6:	e008      	b.n	5dda <EIC_Handler+0x2a>
    5dc8:	7823      	ldrb	r3, [r4, #0]
    5dca:	3301      	adds	r3, #1
    5dcc:	b2db      	uxtb	r3, r3
    5dce:	7023      	strb	r3, [r4, #0]
    5dd0:	2b0f      	cmp	r3, #15
    5dd2:	d810      	bhi.n	5df6 <EIC_Handler+0x46>
		return NULL;
    5dd4:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    5dd6:	2b1f      	cmp	r3, #31
    5dd8:	d9f4      	bls.n	5dc4 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    5dda:	0028      	movs	r0, r5
    5ddc:	4018      	ands	r0, r3
    5dde:	2201      	movs	r2, #1
    5de0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    5de2:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    5de4:	4210      	tst	r0, r2
    5de6:	d0ef      	beq.n	5dc8 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    5de8:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    5dea:	009b      	lsls	r3, r3, #2
    5dec:	599b      	ldr	r3, [r3, r6]
    5dee:	2b00      	cmp	r3, #0
    5df0:	d0ea      	beq.n	5dc8 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    5df2:	4798      	blx	r3
    5df4:	e7e8      	b.n	5dc8 <EIC_Handler+0x18>
			}
		}
	}
}
    5df6:	bd70      	pop	{r4, r5, r6, pc}
    5df8:	20004dd4 	.word	0x20004dd4
    5dfc:	40001800 	.word	0x40001800
    5e00:	20004dd8 	.word	0x20004dd8

00005e04 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    5e04:	4a04      	ldr	r2, [pc, #16]	; (5e18 <_extint_enable+0x14>)
    5e06:	7813      	ldrb	r3, [r2, #0]
    5e08:	2102      	movs	r1, #2
    5e0a:	430b      	orrs	r3, r1
    5e0c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    5e0e:	7853      	ldrb	r3, [r2, #1]
    5e10:	b25b      	sxtb	r3, r3
    5e12:	2b00      	cmp	r3, #0
    5e14:	dbfb      	blt.n	5e0e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    5e16:	4770      	bx	lr
    5e18:	40001800 	.word	0x40001800

00005e1c <_system_extint_init>:
{
    5e1c:	b500      	push	{lr}
    5e1e:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    5e20:	4a12      	ldr	r2, [pc, #72]	; (5e6c <_system_extint_init+0x50>)
    5e22:	6993      	ldr	r3, [r2, #24]
    5e24:	2140      	movs	r1, #64	; 0x40
    5e26:	430b      	orrs	r3, r1
    5e28:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    5e2a:	a901      	add	r1, sp, #4
    5e2c:	2300      	movs	r3, #0
    5e2e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    5e30:	2005      	movs	r0, #5
    5e32:	4b0f      	ldr	r3, [pc, #60]	; (5e70 <_system_extint_init+0x54>)
    5e34:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    5e36:	2005      	movs	r0, #5
    5e38:	4b0e      	ldr	r3, [pc, #56]	; (5e74 <_system_extint_init+0x58>)
    5e3a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    5e3c:	4a0e      	ldr	r2, [pc, #56]	; (5e78 <_system_extint_init+0x5c>)
    5e3e:	7813      	ldrb	r3, [r2, #0]
    5e40:	2101      	movs	r1, #1
    5e42:	430b      	orrs	r3, r1
    5e44:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    5e46:	7853      	ldrb	r3, [r2, #1]
    5e48:	b25b      	sxtb	r3, r3
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	dbfb      	blt.n	5e46 <_system_extint_init+0x2a>
    5e4e:	4b0b      	ldr	r3, [pc, #44]	; (5e7c <_system_extint_init+0x60>)
    5e50:	0019      	movs	r1, r3
    5e52:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    5e54:	2200      	movs	r2, #0
    5e56:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    5e58:	4299      	cmp	r1, r3
    5e5a:	d1fc      	bne.n	5e56 <_system_extint_init+0x3a>
    5e5c:	2210      	movs	r2, #16
    5e5e:	4b08      	ldr	r3, [pc, #32]	; (5e80 <_system_extint_init+0x64>)
    5e60:	601a      	str	r2, [r3, #0]
	_extint_enable();
    5e62:	4b08      	ldr	r3, [pc, #32]	; (5e84 <_system_extint_init+0x68>)
    5e64:	4798      	blx	r3
}
    5e66:	b003      	add	sp, #12
    5e68:	bd00      	pop	{pc}
    5e6a:	46c0      	nop			; (mov r8, r8)
    5e6c:	40000400 	.word	0x40000400
    5e70:	00006ed9 	.word	0x00006ed9
    5e74:	00006e4d 	.word	0x00006e4d
    5e78:	40001800 	.word	0x40001800
    5e7c:	20004dd8 	.word	0x20004dd8
    5e80:	e000e100 	.word	0xe000e100
    5e84:	00005e05 	.word	0x00005e05

00005e88 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    5e88:	b500      	push	{lr}
    5e8a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5e8c:	ab01      	add	r3, sp, #4
    5e8e:	2280      	movs	r2, #128	; 0x80
    5e90:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    5e92:	780a      	ldrb	r2, [r1, #0]
    5e94:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    5e96:	784a      	ldrb	r2, [r1, #1]
    5e98:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    5e9a:	788a      	ldrb	r2, [r1, #2]
    5e9c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    5e9e:	0019      	movs	r1, r3
    5ea0:	4b01      	ldr	r3, [pc, #4]	; (5ea8 <port_pin_set_config+0x20>)
    5ea2:	4798      	blx	r3
}
    5ea4:	b003      	add	sp, #12
    5ea6:	bd00      	pop	{pc}
    5ea8:	00007001 	.word	0x00007001

00005eac <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    5eac:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    5eae:	4b0f      	ldr	r3, [pc, #60]	; (5eec <RTC_Handler+0x40>)
    5eb0:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    5eb2:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    5eb4:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    5eb6:	8a13      	ldrh	r3, [r2, #16]
    5eb8:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    5eba:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    5ebc:	79e3      	ldrb	r3, [r4, #7]
    5ebe:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    5ec0:	b258      	sxtb	r0, r3
    5ec2:	2800      	cmp	r0, #0
    5ec4:	db06      	blt.n	5ed4 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    5ec6:	07db      	lsls	r3, r3, #31
    5ec8:	d503      	bpl.n	5ed2 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    5eca:	07cb      	lsls	r3, r1, #31
    5ecc:	d40a      	bmi.n	5ee4 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    5ece:	2301      	movs	r3, #1
    5ed0:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    5ed2:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    5ed4:	078b      	lsls	r3, r1, #30
    5ed6:	d402      	bmi.n	5ede <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    5ed8:	2380      	movs	r3, #128	; 0x80
    5eda:	7223      	strb	r3, [r4, #8]
    5edc:	e7f9      	b.n	5ed2 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    5ede:	68d3      	ldr	r3, [r2, #12]
    5ee0:	4798      	blx	r3
    5ee2:	e7f9      	b.n	5ed8 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    5ee4:	6893      	ldr	r3, [r2, #8]
    5ee6:	4798      	blx	r3
    5ee8:	e7f1      	b.n	5ece <RTC_Handler+0x22>
    5eea:	46c0      	nop			; (mov r8, r8)
    5eec:	20004e18 	.word	0x20004e18

00005ef0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    5ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ef2:	46de      	mov	lr, fp
    5ef4:	4657      	mov	r7, sl
    5ef6:	464e      	mov	r6, r9
    5ef8:	4645      	mov	r5, r8
    5efa:	b5e0      	push	{r5, r6, r7, lr}
    5efc:	b087      	sub	sp, #28
    5efe:	4680      	mov	r8, r0
    5f00:	9104      	str	r1, [sp, #16]
    5f02:	0016      	movs	r6, r2
    5f04:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    5f06:	2200      	movs	r2, #0
    5f08:	2300      	movs	r3, #0
    5f0a:	2100      	movs	r1, #0
    5f0c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    5f0e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    5f10:	2001      	movs	r0, #1
    5f12:	0021      	movs	r1, r4
    5f14:	9600      	str	r6, [sp, #0]
    5f16:	9701      	str	r7, [sp, #4]
    5f18:	465c      	mov	r4, fp
    5f1a:	9403      	str	r4, [sp, #12]
    5f1c:	4644      	mov	r4, r8
    5f1e:	9405      	str	r4, [sp, #20]
    5f20:	e013      	b.n	5f4a <long_division+0x5a>
    5f22:	2420      	movs	r4, #32
    5f24:	1a64      	subs	r4, r4, r1
    5f26:	0005      	movs	r5, r0
    5f28:	40e5      	lsrs	r5, r4
    5f2a:	46a8      	mov	r8, r5
    5f2c:	e014      	b.n	5f58 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    5f2e:	9c00      	ldr	r4, [sp, #0]
    5f30:	9d01      	ldr	r5, [sp, #4]
    5f32:	1b12      	subs	r2, r2, r4
    5f34:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    5f36:	465c      	mov	r4, fp
    5f38:	464d      	mov	r5, r9
    5f3a:	432c      	orrs	r4, r5
    5f3c:	46a3      	mov	fp, r4
    5f3e:	9c03      	ldr	r4, [sp, #12]
    5f40:	4645      	mov	r5, r8
    5f42:	432c      	orrs	r4, r5
    5f44:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    5f46:	3901      	subs	r1, #1
    5f48:	d325      	bcc.n	5f96 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    5f4a:	2420      	movs	r4, #32
    5f4c:	4264      	negs	r4, r4
    5f4e:	190c      	adds	r4, r1, r4
    5f50:	d4e7      	bmi.n	5f22 <long_division+0x32>
    5f52:	0005      	movs	r5, r0
    5f54:	40a5      	lsls	r5, r4
    5f56:	46a8      	mov	r8, r5
    5f58:	0004      	movs	r4, r0
    5f5a:	408c      	lsls	r4, r1
    5f5c:	46a1      	mov	r9, r4
		r = r << 1;
    5f5e:	1892      	adds	r2, r2, r2
    5f60:	415b      	adcs	r3, r3
    5f62:	0014      	movs	r4, r2
    5f64:	001d      	movs	r5, r3
		if (n & bit_shift) {
    5f66:	9e05      	ldr	r6, [sp, #20]
    5f68:	464f      	mov	r7, r9
    5f6a:	403e      	ands	r6, r7
    5f6c:	46b4      	mov	ip, r6
    5f6e:	9e04      	ldr	r6, [sp, #16]
    5f70:	4647      	mov	r7, r8
    5f72:	403e      	ands	r6, r7
    5f74:	46b2      	mov	sl, r6
    5f76:	4666      	mov	r6, ip
    5f78:	4657      	mov	r7, sl
    5f7a:	433e      	orrs	r6, r7
    5f7c:	d003      	beq.n	5f86 <long_division+0x96>
			r |= 0x01;
    5f7e:	0006      	movs	r6, r0
    5f80:	4326      	orrs	r6, r4
    5f82:	0032      	movs	r2, r6
    5f84:	002b      	movs	r3, r5
		if (r >= d) {
    5f86:	9c00      	ldr	r4, [sp, #0]
    5f88:	9d01      	ldr	r5, [sp, #4]
    5f8a:	429d      	cmp	r5, r3
    5f8c:	d8db      	bhi.n	5f46 <long_division+0x56>
    5f8e:	d1ce      	bne.n	5f2e <long_division+0x3e>
    5f90:	4294      	cmp	r4, r2
    5f92:	d8d8      	bhi.n	5f46 <long_division+0x56>
    5f94:	e7cb      	b.n	5f2e <long_division+0x3e>
    5f96:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    5f98:	4658      	mov	r0, fp
    5f9a:	0019      	movs	r1, r3
    5f9c:	b007      	add	sp, #28
    5f9e:	bc3c      	pop	{r2, r3, r4, r5}
    5fa0:	4690      	mov	r8, r2
    5fa2:	4699      	mov	r9, r3
    5fa4:	46a2      	mov	sl, r4
    5fa6:	46ab      	mov	fp, r5
    5fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005faa <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    5faa:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    5fac:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5fae:	2340      	movs	r3, #64	; 0x40
    5fb0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    5fb2:	4281      	cmp	r1, r0
    5fb4:	d202      	bcs.n	5fbc <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    5fb6:	0018      	movs	r0, r3
    5fb8:	bd10      	pop	{r4, pc}
		baud_calculated++;
    5fba:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    5fbc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    5fbe:	1c63      	adds	r3, r4, #1
    5fc0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    5fc2:	4288      	cmp	r0, r1
    5fc4:	d9f9      	bls.n	5fba <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5fc6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    5fc8:	2cff      	cmp	r4, #255	; 0xff
    5fca:	d8f4      	bhi.n	5fb6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    5fcc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    5fce:	2300      	movs	r3, #0
    5fd0:	e7f1      	b.n	5fb6 <_sercom_get_sync_baud_val+0xc>
	...

00005fd4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    5fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fd6:	b083      	sub	sp, #12
    5fd8:	000f      	movs	r7, r1
    5fda:	0016      	movs	r6, r2
    5fdc:	aa08      	add	r2, sp, #32
    5fde:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    5fe0:	0004      	movs	r4, r0
    5fe2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5fe4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    5fe6:	42bc      	cmp	r4, r7
    5fe8:	d902      	bls.n	5ff0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    5fea:	0010      	movs	r0, r2
    5fec:	b003      	add	sp, #12
    5fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    5ff0:	2b00      	cmp	r3, #0
    5ff2:	d114      	bne.n	601e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    5ff4:	0002      	movs	r2, r0
    5ff6:	0008      	movs	r0, r1
    5ff8:	2100      	movs	r1, #0
    5ffa:	4c19      	ldr	r4, [pc, #100]	; (6060 <_sercom_get_async_baud_val+0x8c>)
    5ffc:	47a0      	blx	r4
    5ffe:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    6000:	003a      	movs	r2, r7
    6002:	2300      	movs	r3, #0
    6004:	2000      	movs	r0, #0
    6006:	4c17      	ldr	r4, [pc, #92]	; (6064 <_sercom_get_async_baud_val+0x90>)
    6008:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    600a:	2200      	movs	r2, #0
    600c:	2301      	movs	r3, #1
    600e:	1a12      	subs	r2, r2, r0
    6010:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    6012:	0c12      	lsrs	r2, r2, #16
    6014:	041b      	lsls	r3, r3, #16
    6016:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    6018:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    601a:	2200      	movs	r2, #0
    601c:	e7e5      	b.n	5fea <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    601e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    6020:	2b01      	cmp	r3, #1
    6022:	d1f9      	bne.n	6018 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    6024:	000a      	movs	r2, r1
    6026:	2300      	movs	r3, #0
    6028:	2100      	movs	r1, #0
    602a:	4c0d      	ldr	r4, [pc, #52]	; (6060 <_sercom_get_async_baud_val+0x8c>)
    602c:	47a0      	blx	r4
    602e:	0002      	movs	r2, r0
    6030:	000b      	movs	r3, r1
    6032:	9200      	str	r2, [sp, #0]
    6034:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    6036:	0038      	movs	r0, r7
    6038:	2100      	movs	r1, #0
    603a:	4c0a      	ldr	r4, [pc, #40]	; (6064 <_sercom_get_async_baud_val+0x90>)
    603c:	47a0      	blx	r4
    603e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    6040:	2380      	movs	r3, #128	; 0x80
    6042:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6044:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    6046:	4298      	cmp	r0, r3
    6048:	d8cf      	bhi.n	5fea <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    604a:	0f79      	lsrs	r1, r7, #29
    604c:	00f8      	lsls	r0, r7, #3
    604e:	9a00      	ldr	r2, [sp, #0]
    6050:	9b01      	ldr	r3, [sp, #4]
    6052:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    6054:	00ea      	lsls	r2, r5, #3
    6056:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    6058:	b2d2      	uxtb	r2, r2
    605a:	0352      	lsls	r2, r2, #13
    605c:	432a      	orrs	r2, r5
    605e:	e7db      	b.n	6018 <_sercom_get_async_baud_val+0x44>
    6060:	00007605 	.word	0x00007605
    6064:	00005ef1 	.word	0x00005ef1

00006068 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    6068:	b510      	push	{r4, lr}
    606a:	b082      	sub	sp, #8
    606c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    606e:	4b0e      	ldr	r3, [pc, #56]	; (60a8 <sercom_set_gclk_generator+0x40>)
    6070:	781b      	ldrb	r3, [r3, #0]
    6072:	2b00      	cmp	r3, #0
    6074:	d007      	beq.n	6086 <sercom_set_gclk_generator+0x1e>
    6076:	2900      	cmp	r1, #0
    6078:	d105      	bne.n	6086 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    607a:	4b0b      	ldr	r3, [pc, #44]	; (60a8 <sercom_set_gclk_generator+0x40>)
    607c:	785b      	ldrb	r3, [r3, #1]
    607e:	4283      	cmp	r3, r0
    6080:	d010      	beq.n	60a4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    6082:	201d      	movs	r0, #29
    6084:	e00c      	b.n	60a0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    6086:	a901      	add	r1, sp, #4
    6088:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    608a:	2013      	movs	r0, #19
    608c:	4b07      	ldr	r3, [pc, #28]	; (60ac <sercom_set_gclk_generator+0x44>)
    608e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    6090:	2013      	movs	r0, #19
    6092:	4b07      	ldr	r3, [pc, #28]	; (60b0 <sercom_set_gclk_generator+0x48>)
    6094:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    6096:	4b04      	ldr	r3, [pc, #16]	; (60a8 <sercom_set_gclk_generator+0x40>)
    6098:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    609a:	2201      	movs	r2, #1
    609c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    609e:	2000      	movs	r0, #0
}
    60a0:	b002      	add	sp, #8
    60a2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    60a4:	2000      	movs	r0, #0
    60a6:	e7fb      	b.n	60a0 <sercom_set_gclk_generator+0x38>
    60a8:	2000380c 	.word	0x2000380c
    60ac:	00006ed9 	.word	0x00006ed9
    60b0:	00006e4d 	.word	0x00006e4d

000060b4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    60b4:	4b40      	ldr	r3, [pc, #256]	; (61b8 <_sercom_get_default_pad+0x104>)
    60b6:	4298      	cmp	r0, r3
    60b8:	d031      	beq.n	611e <_sercom_get_default_pad+0x6a>
    60ba:	d90a      	bls.n	60d2 <_sercom_get_default_pad+0x1e>
    60bc:	4b3f      	ldr	r3, [pc, #252]	; (61bc <_sercom_get_default_pad+0x108>)
    60be:	4298      	cmp	r0, r3
    60c0:	d04d      	beq.n	615e <_sercom_get_default_pad+0xaa>
    60c2:	4b3f      	ldr	r3, [pc, #252]	; (61c0 <_sercom_get_default_pad+0x10c>)
    60c4:	4298      	cmp	r0, r3
    60c6:	d05a      	beq.n	617e <_sercom_get_default_pad+0xca>
    60c8:	4b3e      	ldr	r3, [pc, #248]	; (61c4 <_sercom_get_default_pad+0x110>)
    60ca:	4298      	cmp	r0, r3
    60cc:	d037      	beq.n	613e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    60ce:	2000      	movs	r0, #0
}
    60d0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    60d2:	4b3d      	ldr	r3, [pc, #244]	; (61c8 <_sercom_get_default_pad+0x114>)
    60d4:	4298      	cmp	r0, r3
    60d6:	d00c      	beq.n	60f2 <_sercom_get_default_pad+0x3e>
    60d8:	4b3c      	ldr	r3, [pc, #240]	; (61cc <_sercom_get_default_pad+0x118>)
    60da:	4298      	cmp	r0, r3
    60dc:	d1f7      	bne.n	60ce <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    60de:	2901      	cmp	r1, #1
    60e0:	d017      	beq.n	6112 <_sercom_get_default_pad+0x5e>
    60e2:	2900      	cmp	r1, #0
    60e4:	d05d      	beq.n	61a2 <_sercom_get_default_pad+0xee>
    60e6:	2902      	cmp	r1, #2
    60e8:	d015      	beq.n	6116 <_sercom_get_default_pad+0x62>
    60ea:	2903      	cmp	r1, #3
    60ec:	d015      	beq.n	611a <_sercom_get_default_pad+0x66>
	return 0;
    60ee:	2000      	movs	r0, #0
    60f0:	e7ee      	b.n	60d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    60f2:	2901      	cmp	r1, #1
    60f4:	d007      	beq.n	6106 <_sercom_get_default_pad+0x52>
    60f6:	2900      	cmp	r1, #0
    60f8:	d051      	beq.n	619e <_sercom_get_default_pad+0xea>
    60fa:	2902      	cmp	r1, #2
    60fc:	d005      	beq.n	610a <_sercom_get_default_pad+0x56>
    60fe:	2903      	cmp	r1, #3
    6100:	d005      	beq.n	610e <_sercom_get_default_pad+0x5a>
	return 0;
    6102:	2000      	movs	r0, #0
    6104:	e7e4      	b.n	60d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6106:	4832      	ldr	r0, [pc, #200]	; (61d0 <_sercom_get_default_pad+0x11c>)
    6108:	e7e2      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    610a:	4832      	ldr	r0, [pc, #200]	; (61d4 <_sercom_get_default_pad+0x120>)
    610c:	e7e0      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    610e:	4832      	ldr	r0, [pc, #200]	; (61d8 <_sercom_get_default_pad+0x124>)
    6110:	e7de      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    6112:	4832      	ldr	r0, [pc, #200]	; (61dc <_sercom_get_default_pad+0x128>)
    6114:	e7dc      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    6116:	4832      	ldr	r0, [pc, #200]	; (61e0 <_sercom_get_default_pad+0x12c>)
    6118:	e7da      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    611a:	4832      	ldr	r0, [pc, #200]	; (61e4 <_sercom_get_default_pad+0x130>)
    611c:	e7d8      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    611e:	2901      	cmp	r1, #1
    6120:	d007      	beq.n	6132 <_sercom_get_default_pad+0x7e>
    6122:	2900      	cmp	r1, #0
    6124:	d03f      	beq.n	61a6 <_sercom_get_default_pad+0xf2>
    6126:	2902      	cmp	r1, #2
    6128:	d005      	beq.n	6136 <_sercom_get_default_pad+0x82>
    612a:	2903      	cmp	r1, #3
    612c:	d005      	beq.n	613a <_sercom_get_default_pad+0x86>
	return 0;
    612e:	2000      	movs	r0, #0
    6130:	e7ce      	b.n	60d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6132:	482d      	ldr	r0, [pc, #180]	; (61e8 <_sercom_get_default_pad+0x134>)
    6134:	e7cc      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    6136:	482d      	ldr	r0, [pc, #180]	; (61ec <_sercom_get_default_pad+0x138>)
    6138:	e7ca      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    613a:	482d      	ldr	r0, [pc, #180]	; (61f0 <_sercom_get_default_pad+0x13c>)
    613c:	e7c8      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    613e:	2901      	cmp	r1, #1
    6140:	d007      	beq.n	6152 <_sercom_get_default_pad+0x9e>
    6142:	2900      	cmp	r1, #0
    6144:	d031      	beq.n	61aa <_sercom_get_default_pad+0xf6>
    6146:	2902      	cmp	r1, #2
    6148:	d005      	beq.n	6156 <_sercom_get_default_pad+0xa2>
    614a:	2903      	cmp	r1, #3
    614c:	d005      	beq.n	615a <_sercom_get_default_pad+0xa6>
	return 0;
    614e:	2000      	movs	r0, #0
    6150:	e7be      	b.n	60d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6152:	4828      	ldr	r0, [pc, #160]	; (61f4 <_sercom_get_default_pad+0x140>)
    6154:	e7bc      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    6156:	4828      	ldr	r0, [pc, #160]	; (61f8 <_sercom_get_default_pad+0x144>)
    6158:	e7ba      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    615a:	4828      	ldr	r0, [pc, #160]	; (61fc <_sercom_get_default_pad+0x148>)
    615c:	e7b8      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    615e:	2901      	cmp	r1, #1
    6160:	d007      	beq.n	6172 <_sercom_get_default_pad+0xbe>
    6162:	2900      	cmp	r1, #0
    6164:	d023      	beq.n	61ae <_sercom_get_default_pad+0xfa>
    6166:	2902      	cmp	r1, #2
    6168:	d005      	beq.n	6176 <_sercom_get_default_pad+0xc2>
    616a:	2903      	cmp	r1, #3
    616c:	d005      	beq.n	617a <_sercom_get_default_pad+0xc6>
	return 0;
    616e:	2000      	movs	r0, #0
    6170:	e7ae      	b.n	60d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6172:	4823      	ldr	r0, [pc, #140]	; (6200 <_sercom_get_default_pad+0x14c>)
    6174:	e7ac      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    6176:	4823      	ldr	r0, [pc, #140]	; (6204 <_sercom_get_default_pad+0x150>)
    6178:	e7aa      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    617a:	4823      	ldr	r0, [pc, #140]	; (6208 <_sercom_get_default_pad+0x154>)
    617c:	e7a8      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    617e:	2901      	cmp	r1, #1
    6180:	d007      	beq.n	6192 <_sercom_get_default_pad+0xde>
    6182:	2900      	cmp	r1, #0
    6184:	d015      	beq.n	61b2 <_sercom_get_default_pad+0xfe>
    6186:	2902      	cmp	r1, #2
    6188:	d005      	beq.n	6196 <_sercom_get_default_pad+0xe2>
    618a:	2903      	cmp	r1, #3
    618c:	d005      	beq.n	619a <_sercom_get_default_pad+0xe6>
	return 0;
    618e:	2000      	movs	r0, #0
    6190:	e79e      	b.n	60d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6192:	481e      	ldr	r0, [pc, #120]	; (620c <_sercom_get_default_pad+0x158>)
    6194:	e79c      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    6196:	481e      	ldr	r0, [pc, #120]	; (6210 <_sercom_get_default_pad+0x15c>)
    6198:	e79a      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    619a:	481e      	ldr	r0, [pc, #120]	; (6214 <_sercom_get_default_pad+0x160>)
    619c:	e798      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    619e:	481e      	ldr	r0, [pc, #120]	; (6218 <_sercom_get_default_pad+0x164>)
    61a0:	e796      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    61a2:	2003      	movs	r0, #3
    61a4:	e794      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    61a6:	481d      	ldr	r0, [pc, #116]	; (621c <_sercom_get_default_pad+0x168>)
    61a8:	e792      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    61aa:	481d      	ldr	r0, [pc, #116]	; (6220 <_sercom_get_default_pad+0x16c>)
    61ac:	e790      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    61ae:	481d      	ldr	r0, [pc, #116]	; (6224 <_sercom_get_default_pad+0x170>)
    61b0:	e78e      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    61b2:	481d      	ldr	r0, [pc, #116]	; (6228 <_sercom_get_default_pad+0x174>)
    61b4:	e78c      	b.n	60d0 <_sercom_get_default_pad+0x1c>
    61b6:	46c0      	nop			; (mov r8, r8)
    61b8:	42001000 	.word	0x42001000
    61bc:	42001800 	.word	0x42001800
    61c0:	42001c00 	.word	0x42001c00
    61c4:	42001400 	.word	0x42001400
    61c8:	42000800 	.word	0x42000800
    61cc:	42000c00 	.word	0x42000c00
    61d0:	00050003 	.word	0x00050003
    61d4:	00060003 	.word	0x00060003
    61d8:	00070003 	.word	0x00070003
    61dc:	00010003 	.word	0x00010003
    61e0:	001e0003 	.word	0x001e0003
    61e4:	001f0003 	.word	0x001f0003
    61e8:	00090003 	.word	0x00090003
    61ec:	000a0003 	.word	0x000a0003
    61f0:	000b0003 	.word	0x000b0003
    61f4:	00110003 	.word	0x00110003
    61f8:	00120003 	.word	0x00120003
    61fc:	00130003 	.word	0x00130003
    6200:	000d0003 	.word	0x000d0003
    6204:	000e0003 	.word	0x000e0003
    6208:	000f0003 	.word	0x000f0003
    620c:	00170003 	.word	0x00170003
    6210:	00180003 	.word	0x00180003
    6214:	00190003 	.word	0x00190003
    6218:	00040003 	.word	0x00040003
    621c:	00080003 	.word	0x00080003
    6220:	00100003 	.word	0x00100003
    6224:	000c0003 	.word	0x000c0003
    6228:	00160003 	.word	0x00160003

0000622c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    622c:	b530      	push	{r4, r5, lr}
    622e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    6230:	4b0b      	ldr	r3, [pc, #44]	; (6260 <_sercom_get_sercom_inst_index+0x34>)
    6232:	466a      	mov	r2, sp
    6234:	cb32      	ldmia	r3!, {r1, r4, r5}
    6236:	c232      	stmia	r2!, {r1, r4, r5}
    6238:	cb32      	ldmia	r3!, {r1, r4, r5}
    623a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    623c:	9b00      	ldr	r3, [sp, #0]
    623e:	4283      	cmp	r3, r0
    6240:	d00b      	beq.n	625a <_sercom_get_sercom_inst_index+0x2e>
    6242:	2301      	movs	r3, #1
    6244:	009a      	lsls	r2, r3, #2
    6246:	4669      	mov	r1, sp
    6248:	5852      	ldr	r2, [r2, r1]
    624a:	4282      	cmp	r2, r0
    624c:	d006      	beq.n	625c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    624e:	3301      	adds	r3, #1
    6250:	2b06      	cmp	r3, #6
    6252:	d1f7      	bne.n	6244 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    6254:	2000      	movs	r0, #0
}
    6256:	b007      	add	sp, #28
    6258:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    625a:	2300      	movs	r3, #0
			return i;
    625c:	b2d8      	uxtb	r0, r3
    625e:	e7fa      	b.n	6256 <_sercom_get_sercom_inst_index+0x2a>
    6260:	0000b658 	.word	0x0000b658

00006264 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    6264:	4770      	bx	lr
	...

00006268 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    6268:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    626a:	4b0a      	ldr	r3, [pc, #40]	; (6294 <_sercom_set_handler+0x2c>)
    626c:	781b      	ldrb	r3, [r3, #0]
    626e:	2b00      	cmp	r3, #0
    6270:	d10c      	bne.n	628c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    6272:	4f09      	ldr	r7, [pc, #36]	; (6298 <_sercom_set_handler+0x30>)
    6274:	4e09      	ldr	r6, [pc, #36]	; (629c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    6276:	4d0a      	ldr	r5, [pc, #40]	; (62a0 <_sercom_set_handler+0x38>)
    6278:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    627a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    627c:	195a      	adds	r2, r3, r5
    627e:	6014      	str	r4, [r2, #0]
    6280:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6282:	2b18      	cmp	r3, #24
    6284:	d1f9      	bne.n	627a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    6286:	2201      	movs	r2, #1
    6288:	4b02      	ldr	r3, [pc, #8]	; (6294 <_sercom_set_handler+0x2c>)
    628a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    628c:	0080      	lsls	r0, r0, #2
    628e:	4b02      	ldr	r3, [pc, #8]	; (6298 <_sercom_set_handler+0x30>)
    6290:	50c1      	str	r1, [r0, r3]
}
    6292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6294:	2000380e 	.word	0x2000380e
    6298:	20003810 	.word	0x20003810
    629c:	00006265 	.word	0x00006265
    62a0:	20004e1c 	.word	0x20004e1c

000062a4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    62a4:	b500      	push	{lr}
    62a6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    62a8:	2309      	movs	r3, #9
    62aa:	466a      	mov	r2, sp
    62ac:	7013      	strb	r3, [r2, #0]
    62ae:	3301      	adds	r3, #1
    62b0:	7053      	strb	r3, [r2, #1]
    62b2:	3301      	adds	r3, #1
    62b4:	7093      	strb	r3, [r2, #2]
    62b6:	3301      	adds	r3, #1
    62b8:	70d3      	strb	r3, [r2, #3]
    62ba:	3301      	adds	r3, #1
    62bc:	7113      	strb	r3, [r2, #4]
    62be:	3301      	adds	r3, #1
    62c0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    62c2:	4b03      	ldr	r3, [pc, #12]	; (62d0 <_sercom_get_interrupt_vector+0x2c>)
    62c4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    62c6:	466b      	mov	r3, sp
    62c8:	5618      	ldrsb	r0, [r3, r0]
}
    62ca:	b003      	add	sp, #12
    62cc:	bd00      	pop	{pc}
    62ce:	46c0      	nop			; (mov r8, r8)
    62d0:	0000622d 	.word	0x0000622d

000062d4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    62d4:	b510      	push	{r4, lr}
    62d6:	4b02      	ldr	r3, [pc, #8]	; (62e0 <SERCOM0_Handler+0xc>)
    62d8:	681b      	ldr	r3, [r3, #0]
    62da:	2000      	movs	r0, #0
    62dc:	4798      	blx	r3
    62de:	bd10      	pop	{r4, pc}
    62e0:	20003810 	.word	0x20003810

000062e4 <SERCOM1_Handler>:
    62e4:	b510      	push	{r4, lr}
    62e6:	4b02      	ldr	r3, [pc, #8]	; (62f0 <SERCOM1_Handler+0xc>)
    62e8:	685b      	ldr	r3, [r3, #4]
    62ea:	2001      	movs	r0, #1
    62ec:	4798      	blx	r3
    62ee:	bd10      	pop	{r4, pc}
    62f0:	20003810 	.word	0x20003810

000062f4 <SERCOM2_Handler>:
    62f4:	b510      	push	{r4, lr}
    62f6:	4b02      	ldr	r3, [pc, #8]	; (6300 <SERCOM2_Handler+0xc>)
    62f8:	689b      	ldr	r3, [r3, #8]
    62fa:	2002      	movs	r0, #2
    62fc:	4798      	blx	r3
    62fe:	bd10      	pop	{r4, pc}
    6300:	20003810 	.word	0x20003810

00006304 <SERCOM3_Handler>:
    6304:	b510      	push	{r4, lr}
    6306:	4b02      	ldr	r3, [pc, #8]	; (6310 <SERCOM3_Handler+0xc>)
    6308:	68db      	ldr	r3, [r3, #12]
    630a:	2003      	movs	r0, #3
    630c:	4798      	blx	r3
    630e:	bd10      	pop	{r4, pc}
    6310:	20003810 	.word	0x20003810

00006314 <SERCOM4_Handler>:
    6314:	b510      	push	{r4, lr}
    6316:	4b02      	ldr	r3, [pc, #8]	; (6320 <SERCOM4_Handler+0xc>)
    6318:	691b      	ldr	r3, [r3, #16]
    631a:	2004      	movs	r0, #4
    631c:	4798      	blx	r3
    631e:	bd10      	pop	{r4, pc}
    6320:	20003810 	.word	0x20003810

00006324 <SERCOM5_Handler>:
    6324:	b510      	push	{r4, lr}
    6326:	4b02      	ldr	r3, [pc, #8]	; (6330 <SERCOM5_Handler+0xc>)
    6328:	695b      	ldr	r3, [r3, #20]
    632a:	2005      	movs	r0, #5
    632c:	4798      	blx	r3
    632e:	bd10      	pop	{r4, pc}
    6330:	20003810 	.word	0x20003810

00006334 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    6334:	b5f0      	push	{r4, r5, r6, r7, lr}
    6336:	46de      	mov	lr, fp
    6338:	4657      	mov	r7, sl
    633a:	464e      	mov	r6, r9
    633c:	4645      	mov	r5, r8
    633e:	b5e0      	push	{r5, r6, r7, lr}
    6340:	b091      	sub	sp, #68	; 0x44
    6342:	0005      	movs	r5, r0
    6344:	000c      	movs	r4, r1
    6346:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    6348:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    634a:	0008      	movs	r0, r1
    634c:	4bbc      	ldr	r3, [pc, #752]	; (6640 <usart_init+0x30c>)
    634e:	4798      	blx	r3
    6350:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    6352:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    6354:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    6356:	07db      	lsls	r3, r3, #31
    6358:	d506      	bpl.n	6368 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    635a:	b011      	add	sp, #68	; 0x44
    635c:	bc3c      	pop	{r2, r3, r4, r5}
    635e:	4690      	mov	r8, r2
    6360:	4699      	mov	r9, r3
    6362:	46a2      	mov	sl, r4
    6364:	46ab      	mov	fp, r5
    6366:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    6368:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    636a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    636c:	079b      	lsls	r3, r3, #30
    636e:	d4f4      	bmi.n	635a <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    6370:	49b4      	ldr	r1, [pc, #720]	; (6644 <usart_init+0x310>)
    6372:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6374:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6376:	2301      	movs	r3, #1
    6378:	40bb      	lsls	r3, r7
    637a:	4303      	orrs	r3, r0
    637c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    637e:	a90f      	add	r1, sp, #60	; 0x3c
    6380:	272d      	movs	r7, #45	; 0x2d
    6382:	5df3      	ldrb	r3, [r6, r7]
    6384:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6386:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6388:	b2d3      	uxtb	r3, r2
    638a:	9302      	str	r3, [sp, #8]
    638c:	0018      	movs	r0, r3
    638e:	4bae      	ldr	r3, [pc, #696]	; (6648 <usart_init+0x314>)
    6390:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6392:	9802      	ldr	r0, [sp, #8]
    6394:	4bad      	ldr	r3, [pc, #692]	; (664c <usart_init+0x318>)
    6396:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6398:	5df0      	ldrb	r0, [r6, r7]
    639a:	2100      	movs	r1, #0
    639c:	4bac      	ldr	r3, [pc, #688]	; (6650 <usart_init+0x31c>)
    639e:	4798      	blx	r3
	module->character_size = config->character_size;
    63a0:	7af3      	ldrb	r3, [r6, #11]
    63a2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    63a4:	2324      	movs	r3, #36	; 0x24
    63a6:	5cf3      	ldrb	r3, [r6, r3]
    63a8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    63aa:	2325      	movs	r3, #37	; 0x25
    63ac:	5cf3      	ldrb	r3, [r6, r3]
    63ae:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    63b0:	7ef3      	ldrb	r3, [r6, #27]
    63b2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    63b4:	7f33      	ldrb	r3, [r6, #28]
    63b6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    63b8:	682b      	ldr	r3, [r5, #0]
    63ba:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    63bc:	0018      	movs	r0, r3
    63be:	4ba0      	ldr	r3, [pc, #640]	; (6640 <usart_init+0x30c>)
    63c0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    63c2:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    63c4:	2200      	movs	r2, #0
    63c6:	230e      	movs	r3, #14
    63c8:	a906      	add	r1, sp, #24
    63ca:	468c      	mov	ip, r1
    63cc:	4463      	add	r3, ip
    63ce:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    63d0:	8a32      	ldrh	r2, [r6, #16]
    63d2:	9202      	str	r2, [sp, #8]
    63d4:	2380      	movs	r3, #128	; 0x80
    63d6:	01db      	lsls	r3, r3, #7
    63d8:	429a      	cmp	r2, r3
    63da:	d100      	bne.n	63de <usart_init+0xaa>
    63dc:	e09e      	b.n	651c <usart_init+0x1e8>
    63de:	d90f      	bls.n	6400 <usart_init+0xcc>
    63e0:	23c0      	movs	r3, #192	; 0xc0
    63e2:	01db      	lsls	r3, r3, #7
    63e4:	9a02      	ldr	r2, [sp, #8]
    63e6:	429a      	cmp	r2, r3
    63e8:	d100      	bne.n	63ec <usart_init+0xb8>
    63ea:	e092      	b.n	6512 <usart_init+0x1de>
    63ec:	2380      	movs	r3, #128	; 0x80
    63ee:	021b      	lsls	r3, r3, #8
    63f0:	429a      	cmp	r2, r3
    63f2:	d000      	beq.n	63f6 <usart_init+0xc2>
    63f4:	e11f      	b.n	6636 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    63f6:	2303      	movs	r3, #3
    63f8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    63fa:	2300      	movs	r3, #0
    63fc:	9307      	str	r3, [sp, #28]
    63fe:	e008      	b.n	6412 <usart_init+0xde>
	switch (config->sample_rate) {
    6400:	2380      	movs	r3, #128	; 0x80
    6402:	019b      	lsls	r3, r3, #6
    6404:	429a      	cmp	r2, r3
    6406:	d000      	beq.n	640a <usart_init+0xd6>
    6408:	e115      	b.n	6636 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    640a:	2310      	movs	r3, #16
    640c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    640e:	3b0f      	subs	r3, #15
    6410:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    6412:	6833      	ldr	r3, [r6, #0]
    6414:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    6416:	68f3      	ldr	r3, [r6, #12]
    6418:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    641a:	6973      	ldr	r3, [r6, #20]
    641c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    641e:	7e33      	ldrb	r3, [r6, #24]
    6420:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    6422:	2326      	movs	r3, #38	; 0x26
    6424:	5cf3      	ldrb	r3, [r6, r3]
    6426:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    6428:	6873      	ldr	r3, [r6, #4]
    642a:	4699      	mov	r9, r3
	switch (transfer_mode)
    642c:	2b00      	cmp	r3, #0
    642e:	d100      	bne.n	6432 <usart_init+0xfe>
    6430:	e0a0      	b.n	6574 <usart_init+0x240>
    6432:	2380      	movs	r3, #128	; 0x80
    6434:	055b      	lsls	r3, r3, #21
    6436:	4599      	cmp	r9, r3
    6438:	d100      	bne.n	643c <usart_init+0x108>
    643a:	e084      	b.n	6546 <usart_init+0x212>
	if(config->encoding_format_enable) {
    643c:	7e73      	ldrb	r3, [r6, #25]
    643e:	2b00      	cmp	r3, #0
    6440:	d002      	beq.n	6448 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    6442:	7eb3      	ldrb	r3, [r6, #26]
    6444:	4642      	mov	r2, r8
    6446:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6448:	682a      	ldr	r2, [r5, #0]
    644a:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    644c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    644e:	2b00      	cmp	r3, #0
    6450:	d1fc      	bne.n	644c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    6452:	330e      	adds	r3, #14
    6454:	aa06      	add	r2, sp, #24
    6456:	4694      	mov	ip, r2
    6458:	4463      	add	r3, ip
    645a:	881b      	ldrh	r3, [r3, #0]
    645c:	4642      	mov	r2, r8
    645e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    6460:	9b05      	ldr	r3, [sp, #20]
    6462:	9a03      	ldr	r2, [sp, #12]
    6464:	4313      	orrs	r3, r2
    6466:	9a04      	ldr	r2, [sp, #16]
    6468:	4313      	orrs	r3, r2
    646a:	464a      	mov	r2, r9
    646c:	4313      	orrs	r3, r2
    646e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    6470:	465b      	mov	r3, fp
    6472:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    6474:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    6476:	4653      	mov	r3, sl
    6478:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    647a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    647c:	2327      	movs	r3, #39	; 0x27
    647e:	5cf3      	ldrb	r3, [r6, r3]
    6480:	2b00      	cmp	r3, #0
    6482:	d101      	bne.n	6488 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    6484:	3304      	adds	r3, #4
    6486:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6488:	7e73      	ldrb	r3, [r6, #25]
    648a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    648c:	7f32      	ldrb	r2, [r6, #28]
    648e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6490:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    6492:	7f72      	ldrb	r2, [r6, #29]
    6494:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6496:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6498:	2224      	movs	r2, #36	; 0x24
    649a:	5cb2      	ldrb	r2, [r6, r2]
    649c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    649e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    64a0:	2225      	movs	r2, #37	; 0x25
    64a2:	5cb2      	ldrb	r2, [r6, r2]
    64a4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    64a6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    64a8:	7ab1      	ldrb	r1, [r6, #10]
    64aa:	7af2      	ldrb	r2, [r6, #11]
    64ac:	4311      	orrs	r1, r2
    64ae:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    64b0:	8933      	ldrh	r3, [r6, #8]
    64b2:	2bff      	cmp	r3, #255	; 0xff
    64b4:	d100      	bne.n	64b8 <usart_init+0x184>
    64b6:	e081      	b.n	65bc <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    64b8:	2280      	movs	r2, #128	; 0x80
    64ba:	0452      	lsls	r2, r2, #17
    64bc:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    64be:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    64c0:	232c      	movs	r3, #44	; 0x2c
    64c2:	5cf3      	ldrb	r3, [r6, r3]
    64c4:	2b00      	cmp	r3, #0
    64c6:	d103      	bne.n	64d0 <usart_init+0x19c>
    64c8:	4b62      	ldr	r3, [pc, #392]	; (6654 <usart_init+0x320>)
    64ca:	789b      	ldrb	r3, [r3, #2]
    64cc:	079b      	lsls	r3, r3, #30
    64ce:	d501      	bpl.n	64d4 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    64d0:	2380      	movs	r3, #128	; 0x80
    64d2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    64d4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    64d6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    64d8:	2b00      	cmp	r3, #0
    64da:	d1fc      	bne.n	64d6 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    64dc:	4643      	mov	r3, r8
    64de:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    64e0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    64e2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    64e4:	2b00      	cmp	r3, #0
    64e6:	d1fc      	bne.n	64e2 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    64e8:	4643      	mov	r3, r8
    64ea:	601f      	str	r7, [r3, #0]
    64ec:	ab0e      	add	r3, sp, #56	; 0x38
    64ee:	2280      	movs	r2, #128	; 0x80
    64f0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    64f2:	2200      	movs	r2, #0
    64f4:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    64f6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    64f8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    64fa:	6b33      	ldr	r3, [r6, #48]	; 0x30
    64fc:	930a      	str	r3, [sp, #40]	; 0x28
    64fe:	6b73      	ldr	r3, [r6, #52]	; 0x34
    6500:	930b      	str	r3, [sp, #44]	; 0x2c
    6502:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    6504:	930c      	str	r3, [sp, #48]	; 0x30
    6506:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    6508:	9302      	str	r3, [sp, #8]
    650a:	930d      	str	r3, [sp, #52]	; 0x34
    650c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    650e:	ae0a      	add	r6, sp, #40	; 0x28
    6510:	e063      	b.n	65da <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    6512:	2308      	movs	r3, #8
    6514:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    6516:	3b07      	subs	r3, #7
    6518:	9307      	str	r3, [sp, #28]
    651a:	e77a      	b.n	6412 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    651c:	6833      	ldr	r3, [r6, #0]
    651e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    6520:	68f3      	ldr	r3, [r6, #12]
    6522:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    6524:	6973      	ldr	r3, [r6, #20]
    6526:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    6528:	7e33      	ldrb	r3, [r6, #24]
    652a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    652c:	2326      	movs	r3, #38	; 0x26
    652e:	5cf3      	ldrb	r3, [r6, r3]
    6530:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    6532:	6873      	ldr	r3, [r6, #4]
    6534:	4699      	mov	r9, r3
	switch (transfer_mode)
    6536:	2b00      	cmp	r3, #0
    6538:	d018      	beq.n	656c <usart_init+0x238>
    653a:	2380      	movs	r3, #128	; 0x80
    653c:	055b      	lsls	r3, r3, #21
    653e:	4599      	cmp	r9, r3
    6540:	d001      	beq.n	6546 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    6542:	2000      	movs	r0, #0
    6544:	e025      	b.n	6592 <usart_init+0x25e>
			if (!config->use_external_clock) {
    6546:	2327      	movs	r3, #39	; 0x27
    6548:	5cf3      	ldrb	r3, [r6, r3]
    654a:	2b00      	cmp	r3, #0
    654c:	d000      	beq.n	6550 <usart_init+0x21c>
    654e:	e775      	b.n	643c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    6550:	6a33      	ldr	r3, [r6, #32]
    6552:	001f      	movs	r7, r3
    6554:	b2c0      	uxtb	r0, r0
    6556:	4b40      	ldr	r3, [pc, #256]	; (6658 <usart_init+0x324>)
    6558:	4798      	blx	r3
    655a:	0001      	movs	r1, r0
    655c:	220e      	movs	r2, #14
    655e:	ab06      	add	r3, sp, #24
    6560:	469c      	mov	ip, r3
    6562:	4462      	add	r2, ip
    6564:	0038      	movs	r0, r7
    6566:	4b3d      	ldr	r3, [pc, #244]	; (665c <usart_init+0x328>)
    6568:	4798      	blx	r3
    656a:	e012      	b.n	6592 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    656c:	2308      	movs	r3, #8
    656e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6570:	2300      	movs	r3, #0
    6572:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    6574:	2327      	movs	r3, #39	; 0x27
    6576:	5cf3      	ldrb	r3, [r6, r3]
    6578:	2b00      	cmp	r3, #0
    657a:	d00e      	beq.n	659a <usart_init+0x266>
				status_code =
    657c:	9b06      	ldr	r3, [sp, #24]
    657e:	9300      	str	r3, [sp, #0]
    6580:	9b07      	ldr	r3, [sp, #28]
    6582:	220e      	movs	r2, #14
    6584:	a906      	add	r1, sp, #24
    6586:	468c      	mov	ip, r1
    6588:	4462      	add	r2, ip
    658a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    658c:	6a30      	ldr	r0, [r6, #32]
    658e:	4f34      	ldr	r7, [pc, #208]	; (6660 <usart_init+0x32c>)
    6590:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    6592:	2800      	cmp	r0, #0
    6594:	d000      	beq.n	6598 <usart_init+0x264>
    6596:	e6e0      	b.n	635a <usart_init+0x26>
    6598:	e750      	b.n	643c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    659a:	6a33      	ldr	r3, [r6, #32]
    659c:	001f      	movs	r7, r3
    659e:	b2c0      	uxtb	r0, r0
    65a0:	4b2d      	ldr	r3, [pc, #180]	; (6658 <usart_init+0x324>)
    65a2:	4798      	blx	r3
    65a4:	0001      	movs	r1, r0
				status_code =
    65a6:	9b06      	ldr	r3, [sp, #24]
    65a8:	9300      	str	r3, [sp, #0]
    65aa:	9b07      	ldr	r3, [sp, #28]
    65ac:	220e      	movs	r2, #14
    65ae:	a806      	add	r0, sp, #24
    65b0:	4684      	mov	ip, r0
    65b2:	4462      	add	r2, ip
    65b4:	0038      	movs	r0, r7
    65b6:	4f2a      	ldr	r7, [pc, #168]	; (6660 <usart_init+0x32c>)
    65b8:	47b8      	blx	r7
    65ba:	e7ea      	b.n	6592 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    65bc:	7ef3      	ldrb	r3, [r6, #27]
    65be:	2b00      	cmp	r3, #0
    65c0:	d100      	bne.n	65c4 <usart_init+0x290>
    65c2:	e77d      	b.n	64c0 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    65c4:	2380      	movs	r3, #128	; 0x80
    65c6:	04db      	lsls	r3, r3, #19
    65c8:	431f      	orrs	r7, r3
    65ca:	e779      	b.n	64c0 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    65cc:	0020      	movs	r0, r4
    65ce:	4b25      	ldr	r3, [pc, #148]	; (6664 <usart_init+0x330>)
    65d0:	4798      	blx	r3
    65d2:	e007      	b.n	65e4 <usart_init+0x2b0>
    65d4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    65d6:	2f04      	cmp	r7, #4
    65d8:	d00d      	beq.n	65f6 <usart_init+0x2c2>
    65da:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    65dc:	00bb      	lsls	r3, r7, #2
    65de:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    65e0:	2800      	cmp	r0, #0
    65e2:	d0f3      	beq.n	65cc <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    65e4:	1c43      	adds	r3, r0, #1
    65e6:	d0f5      	beq.n	65d4 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    65e8:	a90e      	add	r1, sp, #56	; 0x38
    65ea:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    65ec:	0c00      	lsrs	r0, r0, #16
    65ee:	b2c0      	uxtb	r0, r0
    65f0:	4b1d      	ldr	r3, [pc, #116]	; (6668 <usart_init+0x334>)
    65f2:	4798      	blx	r3
    65f4:	e7ee      	b.n	65d4 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    65f6:	2300      	movs	r3, #0
    65f8:	60eb      	str	r3, [r5, #12]
    65fa:	612b      	str	r3, [r5, #16]
    65fc:	616b      	str	r3, [r5, #20]
    65fe:	61ab      	str	r3, [r5, #24]
    6600:	61eb      	str	r3, [r5, #28]
    6602:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    6604:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    6606:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    6608:	2200      	movs	r2, #0
    660a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    660c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    660e:	3330      	adds	r3, #48	; 0x30
    6610:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    6612:	3301      	adds	r3, #1
    6614:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    6616:	3301      	adds	r3, #1
    6618:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    661a:	3301      	adds	r3, #1
    661c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    661e:	6828      	ldr	r0, [r5, #0]
    6620:	4b07      	ldr	r3, [pc, #28]	; (6640 <usart_init+0x30c>)
    6622:	4798      	blx	r3
    6624:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    6626:	4911      	ldr	r1, [pc, #68]	; (666c <usart_init+0x338>)
    6628:	4b11      	ldr	r3, [pc, #68]	; (6670 <usart_init+0x33c>)
    662a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    662c:	00a4      	lsls	r4, r4, #2
    662e:	4b11      	ldr	r3, [pc, #68]	; (6674 <usart_init+0x340>)
    6630:	50e5      	str	r5, [r4, r3]
	return status_code;
    6632:	2000      	movs	r0, #0
    6634:	e691      	b.n	635a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    6636:	2310      	movs	r3, #16
    6638:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    663a:	2300      	movs	r3, #0
    663c:	9307      	str	r3, [sp, #28]
    663e:	e6e8      	b.n	6412 <usart_init+0xde>
    6640:	0000622d 	.word	0x0000622d
    6644:	40000400 	.word	0x40000400
    6648:	00006ed9 	.word	0x00006ed9
    664c:	00006e4d 	.word	0x00006e4d
    6650:	00006069 	.word	0x00006069
    6654:	41002000 	.word	0x41002000
    6658:	00006ef5 	.word	0x00006ef5
    665c:	00005fab 	.word	0x00005fab
    6660:	00005fd5 	.word	0x00005fd5
    6664:	000060b5 	.word	0x000060b5
    6668:	00007001 	.word	0x00007001
    666c:	00006779 	.word	0x00006779
    6670:	00006269 	.word	0x00006269
    6674:	20004e1c 	.word	0x20004e1c

00006678 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    6678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    667a:	0006      	movs	r6, r0
    667c:	000c      	movs	r4, r1
    667e:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6680:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    6682:	4b0a      	ldr	r3, [pc, #40]	; (66ac <_usart_write_buffer+0x34>)
    6684:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    6686:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    6688:	b29b      	uxth	r3, r3
    668a:	2b00      	cmp	r3, #0
    668c:	d003      	beq.n	6696 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    668e:	4b08      	ldr	r3, [pc, #32]	; (66b0 <_usart_write_buffer+0x38>)
    6690:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    6692:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    6694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    6696:	85f5      	strh	r5, [r6, #46]	; 0x2e
    6698:	4b05      	ldr	r3, [pc, #20]	; (66b0 <_usart_write_buffer+0x38>)
    669a:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    669c:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    669e:	2205      	movs	r2, #5
    66a0:	2333      	movs	r3, #51	; 0x33
    66a2:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    66a4:	3b32      	subs	r3, #50	; 0x32
    66a6:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    66a8:	2000      	movs	r0, #0
    66aa:	e7f3      	b.n	6694 <_usart_write_buffer+0x1c>
    66ac:	00005d09 	.word	0x00005d09
    66b0:	00005d49 	.word	0x00005d49

000066b4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    66b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66b6:	0004      	movs	r4, r0
    66b8:	000d      	movs	r5, r1
    66ba:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    66bc:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    66be:	4b0f      	ldr	r3, [pc, #60]	; (66fc <_usart_read_buffer+0x48>)
    66c0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    66c2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    66c4:	b29b      	uxth	r3, r3
    66c6:	2b00      	cmp	r3, #0
    66c8:	d003      	beq.n	66d2 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    66ca:	4b0d      	ldr	r3, [pc, #52]	; (6700 <_usart_read_buffer+0x4c>)
    66cc:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    66ce:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    66d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    66d2:	85a6      	strh	r6, [r4, #44]	; 0x2c
    66d4:	4b0a      	ldr	r3, [pc, #40]	; (6700 <_usart_read_buffer+0x4c>)
    66d6:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    66d8:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    66da:	2205      	movs	r2, #5
    66dc:	2332      	movs	r3, #50	; 0x32
    66de:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    66e0:	3b2e      	subs	r3, #46	; 0x2e
    66e2:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    66e4:	7a23      	ldrb	r3, [r4, #8]
    66e6:	2b00      	cmp	r3, #0
    66e8:	d001      	beq.n	66ee <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    66ea:	2320      	movs	r3, #32
    66ec:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    66ee:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    66f0:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    66f2:	2b00      	cmp	r3, #0
    66f4:	d0ec      	beq.n	66d0 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    66f6:	2308      	movs	r3, #8
    66f8:	75bb      	strb	r3, [r7, #22]
    66fa:	e7e9      	b.n	66d0 <_usart_read_buffer+0x1c>
    66fc:	00005d09 	.word	0x00005d09
    6700:	00005d49 	.word	0x00005d49

00006704 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6704:	1c93      	adds	r3, r2, #2
    6706:	009b      	lsls	r3, r3, #2
    6708:	18c3      	adds	r3, r0, r3
    670a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    670c:	2130      	movs	r1, #48	; 0x30
    670e:	2301      	movs	r3, #1
    6710:	4093      	lsls	r3, r2
    6712:	001a      	movs	r2, r3
    6714:	5c43      	ldrb	r3, [r0, r1]
    6716:	4313      	orrs	r3, r2
    6718:	5443      	strb	r3, [r0, r1]
}
    671a:	4770      	bx	lr

0000671c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    671c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    671e:	2317      	movs	r3, #23
	if (length == 0) {
    6720:	2a00      	cmp	r2, #0
    6722:	d101      	bne.n	6728 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    6724:	0018      	movs	r0, r3
    6726:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    6728:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    672a:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    672c:	2c00      	cmp	r4, #0
    672e:	d0f9      	beq.n	6724 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    6730:	4b01      	ldr	r3, [pc, #4]	; (6738 <usart_write_buffer_job+0x1c>)
    6732:	4798      	blx	r3
    6734:	0003      	movs	r3, r0
    6736:	e7f5      	b.n	6724 <usart_write_buffer_job+0x8>
    6738:	00006679 	.word	0x00006679

0000673c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    673c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    673e:	2317      	movs	r3, #23
	if (length == 0) {
    6740:	2a00      	cmp	r2, #0
    6742:	d101      	bne.n	6748 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    6744:	0018      	movs	r0, r3
    6746:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    6748:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    674a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    674c:	2c00      	cmp	r4, #0
    674e:	d0f9      	beq.n	6744 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    6750:	4b01      	ldr	r3, [pc, #4]	; (6758 <usart_read_buffer_job+0x1c>)
    6752:	4798      	blx	r3
    6754:	0003      	movs	r3, r0
    6756:	e7f5      	b.n	6744 <usart_read_buffer_job+0x8>
    6758:	000066b5 	.word	0x000066b5

0000675c <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    675c:	2900      	cmp	r1, #0
    675e:	d003      	beq.n	6768 <usart_get_job_status+0xc>
    6760:	2901      	cmp	r1, #1
    6762:	d005      	beq.n	6770 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    6764:	2017      	movs	r0, #23
    6766:	e002      	b.n	676e <usart_get_job_status+0x12>
			status_code = module->rx_status;
    6768:	2332      	movs	r3, #50	; 0x32
    676a:	5cc0      	ldrb	r0, [r0, r3]
    676c:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    676e:	4770      	bx	lr
			status_code = module->tx_status;
    6770:	2333      	movs	r3, #51	; 0x33
    6772:	5cc0      	ldrb	r0, [r0, r3]
    6774:	b2c0      	uxtb	r0, r0
			break;
    6776:	e7fa      	b.n	676e <usart_get_job_status+0x12>

00006778 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    6778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    677a:	0080      	lsls	r0, r0, #2
    677c:	4b62      	ldr	r3, [pc, #392]	; (6908 <_usart_interrupt_handler+0x190>)
    677e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    6780:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6782:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    6784:	2b00      	cmp	r3, #0
    6786:	d1fc      	bne.n	6782 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    6788:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    678a:	7da6      	ldrb	r6, [r4, #22]
    678c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    678e:	2330      	movs	r3, #48	; 0x30
    6790:	5ceb      	ldrb	r3, [r5, r3]
    6792:	2231      	movs	r2, #49	; 0x31
    6794:	5caf      	ldrb	r7, [r5, r2]
    6796:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    6798:	07f3      	lsls	r3, r6, #31
    679a:	d522      	bpl.n	67e2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    679c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    679e:	b29b      	uxth	r3, r3
    67a0:	2b00      	cmp	r3, #0
    67a2:	d01c      	beq.n	67de <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    67a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    67a6:	7813      	ldrb	r3, [r2, #0]
    67a8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    67aa:	1c51      	adds	r1, r2, #1
    67ac:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    67ae:	7969      	ldrb	r1, [r5, #5]
    67b0:	2901      	cmp	r1, #1
    67b2:	d00e      	beq.n	67d2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    67b4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    67b6:	05db      	lsls	r3, r3, #23
    67b8:	0ddb      	lsrs	r3, r3, #23
    67ba:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    67bc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    67be:	3b01      	subs	r3, #1
    67c0:	b29b      	uxth	r3, r3
    67c2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    67c4:	2b00      	cmp	r3, #0
    67c6:	d10c      	bne.n	67e2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    67c8:	3301      	adds	r3, #1
    67ca:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    67cc:	3301      	adds	r3, #1
    67ce:	75a3      	strb	r3, [r4, #22]
    67d0:	e007      	b.n	67e2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    67d2:	7851      	ldrb	r1, [r2, #1]
    67d4:	0209      	lsls	r1, r1, #8
    67d6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    67d8:	3202      	adds	r2, #2
    67da:	62aa      	str	r2, [r5, #40]	; 0x28
    67dc:	e7eb      	b.n	67b6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    67de:	2301      	movs	r3, #1
    67e0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    67e2:	07b3      	lsls	r3, r6, #30
    67e4:	d506      	bpl.n	67f4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    67e6:	2302      	movs	r3, #2
    67e8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    67ea:	2200      	movs	r2, #0
    67ec:	3331      	adds	r3, #49	; 0x31
    67ee:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    67f0:	07fb      	lsls	r3, r7, #31
    67f2:	d41a      	bmi.n	682a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    67f4:	0773      	lsls	r3, r6, #29
    67f6:	d565      	bpl.n	68c4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    67f8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    67fa:	b29b      	uxth	r3, r3
    67fc:	2b00      	cmp	r3, #0
    67fe:	d05f      	beq.n	68c0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6800:	8b63      	ldrh	r3, [r4, #26]
    6802:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6804:	071a      	lsls	r2, r3, #28
    6806:	d414      	bmi.n	6832 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6808:	223f      	movs	r2, #63	; 0x3f
    680a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    680c:	2b00      	cmp	r3, #0
    680e:	d034      	beq.n	687a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    6810:	079a      	lsls	r2, r3, #30
    6812:	d511      	bpl.n	6838 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6814:	221a      	movs	r2, #26
    6816:	2332      	movs	r3, #50	; 0x32
    6818:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    681a:	3b30      	subs	r3, #48	; 0x30
    681c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    681e:	077b      	lsls	r3, r7, #29
    6820:	d550      	bpl.n	68c4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6822:	0028      	movs	r0, r5
    6824:	696b      	ldr	r3, [r5, #20]
    6826:	4798      	blx	r3
    6828:	e04c      	b.n	68c4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    682a:	0028      	movs	r0, r5
    682c:	68eb      	ldr	r3, [r5, #12]
    682e:	4798      	blx	r3
    6830:	e7e0      	b.n	67f4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6832:	2237      	movs	r2, #55	; 0x37
    6834:	4013      	ands	r3, r2
    6836:	e7e9      	b.n	680c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6838:	075a      	lsls	r2, r3, #29
    683a:	d505      	bpl.n	6848 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    683c:	221e      	movs	r2, #30
    683e:	2332      	movs	r3, #50	; 0x32
    6840:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6842:	3b2e      	subs	r3, #46	; 0x2e
    6844:	8363      	strh	r3, [r4, #26]
    6846:	e7ea      	b.n	681e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6848:	07da      	lsls	r2, r3, #31
    684a:	d505      	bpl.n	6858 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    684c:	2213      	movs	r2, #19
    684e:	2332      	movs	r3, #50	; 0x32
    6850:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6852:	3b31      	subs	r3, #49	; 0x31
    6854:	8363      	strh	r3, [r4, #26]
    6856:	e7e2      	b.n	681e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    6858:	06da      	lsls	r2, r3, #27
    685a:	d505      	bpl.n	6868 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    685c:	2242      	movs	r2, #66	; 0x42
    685e:	2332      	movs	r3, #50	; 0x32
    6860:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6862:	3b22      	subs	r3, #34	; 0x22
    6864:	8363      	strh	r3, [r4, #26]
    6866:	e7da      	b.n	681e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    6868:	2220      	movs	r2, #32
    686a:	421a      	tst	r2, r3
    686c:	d0d7      	beq.n	681e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    686e:	3221      	adds	r2, #33	; 0x21
    6870:	2332      	movs	r3, #50	; 0x32
    6872:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6874:	3b12      	subs	r3, #18
    6876:	8363      	strh	r3, [r4, #26]
    6878:	e7d1      	b.n	681e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    687a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    687c:	05db      	lsls	r3, r3, #23
    687e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    6880:	b2da      	uxtb	r2, r3
    6882:	6a69      	ldr	r1, [r5, #36]	; 0x24
    6884:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    6886:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    6888:	1c51      	adds	r1, r2, #1
    688a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    688c:	7969      	ldrb	r1, [r5, #5]
    688e:	2901      	cmp	r1, #1
    6890:	d010      	beq.n	68b4 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    6892:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    6894:	3b01      	subs	r3, #1
    6896:	b29b      	uxth	r3, r3
    6898:	85ab      	strh	r3, [r5, #44]	; 0x2c
    689a:	2b00      	cmp	r3, #0
    689c:	d112      	bne.n	68c4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    689e:	3304      	adds	r3, #4
    68a0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    68a2:	2200      	movs	r2, #0
    68a4:	332e      	adds	r3, #46	; 0x2e
    68a6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    68a8:	07bb      	lsls	r3, r7, #30
    68aa:	d50b      	bpl.n	68c4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    68ac:	0028      	movs	r0, r5
    68ae:	692b      	ldr	r3, [r5, #16]
    68b0:	4798      	blx	r3
    68b2:	e007      	b.n	68c4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    68b4:	0a1b      	lsrs	r3, r3, #8
    68b6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    68b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    68ba:	3301      	adds	r3, #1
    68bc:	626b      	str	r3, [r5, #36]	; 0x24
    68be:	e7e8      	b.n	6892 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    68c0:	2304      	movs	r3, #4
    68c2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    68c4:	06f3      	lsls	r3, r6, #27
    68c6:	d504      	bpl.n	68d2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    68c8:	2310      	movs	r3, #16
    68ca:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    68cc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    68ce:	06fb      	lsls	r3, r7, #27
    68d0:	d40e      	bmi.n	68f0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    68d2:	06b3      	lsls	r3, r6, #26
    68d4:	d504      	bpl.n	68e0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    68d6:	2320      	movs	r3, #32
    68d8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    68da:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    68dc:	073b      	lsls	r3, r7, #28
    68de:	d40b      	bmi.n	68f8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    68e0:	0733      	lsls	r3, r6, #28
    68e2:	d504      	bpl.n	68ee <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    68e4:	2308      	movs	r3, #8
    68e6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    68e8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    68ea:	06bb      	lsls	r3, r7, #26
    68ec:	d408      	bmi.n	6900 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    68ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    68f0:	0028      	movs	r0, r5
    68f2:	69eb      	ldr	r3, [r5, #28]
    68f4:	4798      	blx	r3
    68f6:	e7ec      	b.n	68d2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    68f8:	0028      	movs	r0, r5
    68fa:	69ab      	ldr	r3, [r5, #24]
    68fc:	4798      	blx	r3
    68fe:	e7ef      	b.n	68e0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6900:	6a2b      	ldr	r3, [r5, #32]
    6902:	0028      	movs	r0, r5
    6904:	4798      	blx	r3
}
    6906:	e7f2      	b.n	68ee <_usart_interrupt_handler+0x176>
    6908:	20004e1c 	.word	0x20004e1c

0000690c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    690c:	b510      	push	{r4, lr}
	switch (clock_source) {
    690e:	2808      	cmp	r0, #8
    6910:	d803      	bhi.n	691a <system_clock_source_get_hz+0xe>
    6912:	0080      	lsls	r0, r0, #2
    6914:	4b1c      	ldr	r3, [pc, #112]	; (6988 <system_clock_source_get_hz+0x7c>)
    6916:	581b      	ldr	r3, [r3, r0]
    6918:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    691a:	2000      	movs	r0, #0
    691c:	e032      	b.n	6984 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    691e:	4b1b      	ldr	r3, [pc, #108]	; (698c <system_clock_source_get_hz+0x80>)
    6920:	6918      	ldr	r0, [r3, #16]
    6922:	e02f      	b.n	6984 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    6924:	4b1a      	ldr	r3, [pc, #104]	; (6990 <system_clock_source_get_hz+0x84>)
    6926:	6a1b      	ldr	r3, [r3, #32]
    6928:	059b      	lsls	r3, r3, #22
    692a:	0f9b      	lsrs	r3, r3, #30
    692c:	4819      	ldr	r0, [pc, #100]	; (6994 <system_clock_source_get_hz+0x88>)
    692e:	40d8      	lsrs	r0, r3
    6930:	e028      	b.n	6984 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    6932:	4b16      	ldr	r3, [pc, #88]	; (698c <system_clock_source_get_hz+0x80>)
    6934:	6958      	ldr	r0, [r3, #20]
    6936:	e025      	b.n	6984 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    6938:	4b14      	ldr	r3, [pc, #80]	; (698c <system_clock_source_get_hz+0x80>)
    693a:	681b      	ldr	r3, [r3, #0]
			return 0;
    693c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    693e:	079b      	lsls	r3, r3, #30
    6940:	d520      	bpl.n	6984 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    6942:	4913      	ldr	r1, [pc, #76]	; (6990 <system_clock_source_get_hz+0x84>)
    6944:	2210      	movs	r2, #16
    6946:	68cb      	ldr	r3, [r1, #12]
    6948:	421a      	tst	r2, r3
    694a:	d0fc      	beq.n	6946 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    694c:	4b0f      	ldr	r3, [pc, #60]	; (698c <system_clock_source_get_hz+0x80>)
    694e:	681a      	ldr	r2, [r3, #0]
    6950:	2324      	movs	r3, #36	; 0x24
    6952:	4013      	ands	r3, r2
    6954:	2b04      	cmp	r3, #4
    6956:	d001      	beq.n	695c <system_clock_source_get_hz+0x50>
			return 48000000UL;
    6958:	480f      	ldr	r0, [pc, #60]	; (6998 <system_clock_source_get_hz+0x8c>)
    695a:	e013      	b.n	6984 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    695c:	2000      	movs	r0, #0
    695e:	4b0f      	ldr	r3, [pc, #60]	; (699c <system_clock_source_get_hz+0x90>)
    6960:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    6962:	4b0a      	ldr	r3, [pc, #40]	; (698c <system_clock_source_get_hz+0x80>)
    6964:	689b      	ldr	r3, [r3, #8]
    6966:	041b      	lsls	r3, r3, #16
    6968:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    696a:	4358      	muls	r0, r3
    696c:	e00a      	b.n	6984 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    696e:	2350      	movs	r3, #80	; 0x50
    6970:	4a07      	ldr	r2, [pc, #28]	; (6990 <system_clock_source_get_hz+0x84>)
    6972:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    6974:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    6976:	075b      	lsls	r3, r3, #29
    6978:	d504      	bpl.n	6984 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    697a:	4b04      	ldr	r3, [pc, #16]	; (698c <system_clock_source_get_hz+0x80>)
    697c:	68d8      	ldr	r0, [r3, #12]
    697e:	e001      	b.n	6984 <system_clock_source_get_hz+0x78>
		return 32768UL;
    6980:	2080      	movs	r0, #128	; 0x80
    6982:	0200      	lsls	r0, r0, #8
	}
}
    6984:	bd10      	pop	{r4, pc}
    6986:	46c0      	nop			; (mov r8, r8)
    6988:	0000b670 	.word	0x0000b670
    698c:	20003828 	.word	0x20003828
    6990:	40000800 	.word	0x40000800
    6994:	007a1200 	.word	0x007a1200
    6998:	02dc6c00 	.word	0x02dc6c00
    699c:	00006ef5 	.word	0x00006ef5

000069a0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    69a0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    69a2:	490c      	ldr	r1, [pc, #48]	; (69d4 <system_clock_source_osc8m_set_config+0x34>)
    69a4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    69a6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    69a8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    69aa:	7840      	ldrb	r0, [r0, #1]
    69ac:	2201      	movs	r2, #1
    69ae:	4010      	ands	r0, r2
    69b0:	0180      	lsls	r0, r0, #6
    69b2:	2640      	movs	r6, #64	; 0x40
    69b4:	43b3      	bics	r3, r6
    69b6:	4303      	orrs	r3, r0
    69b8:	402a      	ands	r2, r5
    69ba:	01d2      	lsls	r2, r2, #7
    69bc:	2080      	movs	r0, #128	; 0x80
    69be:	4383      	bics	r3, r0
    69c0:	4313      	orrs	r3, r2
    69c2:	2203      	movs	r2, #3
    69c4:	4022      	ands	r2, r4
    69c6:	0212      	lsls	r2, r2, #8
    69c8:	4803      	ldr	r0, [pc, #12]	; (69d8 <system_clock_source_osc8m_set_config+0x38>)
    69ca:	4003      	ands	r3, r0
    69cc:	4313      	orrs	r3, r2
    69ce:	620b      	str	r3, [r1, #32]
}
    69d0:	bd70      	pop	{r4, r5, r6, pc}
    69d2:	46c0      	nop			; (mov r8, r8)
    69d4:	40000800 	.word	0x40000800
    69d8:	fffffcff 	.word	0xfffffcff

000069dc <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    69dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69de:	0005      	movs	r5, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    69e0:	68c4      	ldr	r4, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    69e2:	7d03      	ldrb	r3, [r0, #20]
    69e4:	2b01      	cmp	r3, #1
    69e6:	d03b      	beq.n	6a60 <system_clock_source_dpll_set_config+0x84>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    69e8:	68ab      	ldr	r3, [r5, #8]
    69ea:	0118      	lsls	r0, r3, #4
    69ec:	0021      	movs	r1, r4
    69ee:	4b20      	ldr	r3, [pc, #128]	; (6a70 <system_clock_source_dpll_set_config+0x94>)
    69f0:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    69f2:	220f      	movs	r2, #15
    69f4:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    69f6:	0903      	lsrs	r3, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    69f8:	782e      	ldrb	r6, [r5, #0]
    69fa:	01f6      	lsls	r6, r6, #7
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    69fc:	7869      	ldrb	r1, [r5, #1]
    69fe:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    6a00:	430e      	orrs	r6, r1
    6a02:	b2f6      	uxtb	r6, r6
	SYSCTRL->DPLLCTRLA.reg =
    6a04:	491b      	ldr	r1, [pc, #108]	; (6a74 <system_clock_source_dpll_set_config+0x98>)
    6a06:	2744      	movs	r7, #68	; 0x44
    6a08:	55ce      	strb	r6, [r1, r7]

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    6a0a:	0416      	lsls	r6, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    6a0c:	3b01      	subs	r3, #1
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    6a0e:	051b      	lsls	r3, r3, #20
    6a10:	0d1b      	lsrs	r3, r3, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    6a12:	4333      	orrs	r3, r6
	SYSCTRL->DPLLRATIO.reg =
    6a14:	648b      	str	r3, [r1, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    6a16:	78ab      	ldrb	r3, [r5, #2]
    6a18:	031b      	lsls	r3, r3, #12
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    6a1a:	78ee      	ldrb	r6, [r5, #3]
    6a1c:	00f6      	lsls	r6, r6, #3
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    6a1e:	4333      	orrs	r3, r6
    6a20:	792e      	ldrb	r6, [r5, #4]
    6a22:	00b6      	lsls	r6, r6, #2
    6a24:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    6a26:	7caf      	ldrb	r7, [r5, #18]
    6a28:	2603      	movs	r6, #3
    6a2a:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    6a2c:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    6a2e:	8a2e      	ldrh	r6, [r5, #16]
    6a30:	0436      	lsls	r6, r6, #16
    6a32:	4f11      	ldr	r7, [pc, #68]	; (6a78 <system_clock_source_dpll_set_config+0x9c>)
    6a34:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    6a36:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    6a38:	7cee      	ldrb	r6, [r5, #19]
    6a3a:	0236      	lsls	r6, r6, #8
    6a3c:	27e0      	movs	r7, #224	; 0xe0
    6a3e:	00ff      	lsls	r7, r7, #3
    6a40:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    6a42:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    6a44:	7d2e      	ldrb	r6, [r5, #20]
    6a46:	0136      	lsls	r6, r6, #4
    6a48:	2530      	movs	r5, #48	; 0x30
    6a4a:	4035      	ands	r5, r6
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    6a4c:	432b      	orrs	r3, r5
	SYSCTRL->DPLLCTRLB.reg =
    6a4e:	64cb      	str	r3, [r1, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    6a50:	230f      	movs	r3, #15
    6a52:	4398      	bics	r0, r3
    6a54:	1880      	adds	r0, r0, r2
    6a56:	4344      	muls	r4, r0
    6a58:	0924      	lsrs	r4, r4, #4
	_system_clock_inst.dpll.frequency =
    6a5a:	4b08      	ldr	r3, [pc, #32]	; (6a7c <system_clock_source_dpll_set_config+0xa0>)
    6a5c:	60dc      	str	r4, [r3, #12]
}
    6a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    6a60:	8a01      	ldrh	r1, [r0, #16]
    6a62:	3101      	adds	r1, #1
    6a64:	0049      	lsls	r1, r1, #1
    6a66:	0020      	movs	r0, r4
    6a68:	4b01      	ldr	r3, [pc, #4]	; (6a70 <system_clock_source_dpll_set_config+0x94>)
    6a6a:	4798      	blx	r3
    6a6c:	0004      	movs	r4, r0
    6a6e:	e7bb      	b.n	69e8 <system_clock_source_dpll_set_config+0xc>
    6a70:	00007479 	.word	0x00007479
    6a74:	40000800 	.word	0x40000800
    6a78:	07ff0000 	.word	0x07ff0000
    6a7c:	20003828 	.word	0x20003828

00006a80 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6a80:	2808      	cmp	r0, #8
    6a82:	d803      	bhi.n	6a8c <system_clock_source_enable+0xc>
    6a84:	0080      	lsls	r0, r0, #2
    6a86:	4b25      	ldr	r3, [pc, #148]	; (6b1c <system_clock_source_enable+0x9c>)
    6a88:	581b      	ldr	r3, [r3, r0]
    6a8a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6a8c:	2017      	movs	r0, #23
    6a8e:	e044      	b.n	6b1a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    6a90:	4a23      	ldr	r2, [pc, #140]	; (6b20 <system_clock_source_enable+0xa0>)
    6a92:	6a13      	ldr	r3, [r2, #32]
    6a94:	2102      	movs	r1, #2
    6a96:	430b      	orrs	r3, r1
    6a98:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    6a9a:	2000      	movs	r0, #0
    6a9c:	e03d      	b.n	6b1a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    6a9e:	4a20      	ldr	r2, [pc, #128]	; (6b20 <system_clock_source_enable+0xa0>)
    6aa0:	6993      	ldr	r3, [r2, #24]
    6aa2:	2102      	movs	r1, #2
    6aa4:	430b      	orrs	r3, r1
    6aa6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    6aa8:	2000      	movs	r0, #0
		break;
    6aaa:	e036      	b.n	6b1a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    6aac:	4a1c      	ldr	r2, [pc, #112]	; (6b20 <system_clock_source_enable+0xa0>)
    6aae:	8a13      	ldrh	r3, [r2, #16]
    6ab0:	2102      	movs	r1, #2
    6ab2:	430b      	orrs	r3, r1
    6ab4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6ab6:	2000      	movs	r0, #0
		break;
    6ab8:	e02f      	b.n	6b1a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    6aba:	4a19      	ldr	r2, [pc, #100]	; (6b20 <system_clock_source_enable+0xa0>)
    6abc:	8a93      	ldrh	r3, [r2, #20]
    6abe:	2102      	movs	r1, #2
    6ac0:	430b      	orrs	r3, r1
    6ac2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    6ac4:	2000      	movs	r0, #0
		break;
    6ac6:	e028      	b.n	6b1a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    6ac8:	4916      	ldr	r1, [pc, #88]	; (6b24 <system_clock_source_enable+0xa4>)
    6aca:	680b      	ldr	r3, [r1, #0]
    6acc:	2202      	movs	r2, #2
    6ace:	4313      	orrs	r3, r2
    6ad0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    6ad2:	4b13      	ldr	r3, [pc, #76]	; (6b20 <system_clock_source_enable+0xa0>)
    6ad4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    6ad6:	0019      	movs	r1, r3
    6ad8:	320e      	adds	r2, #14
    6ada:	68cb      	ldr	r3, [r1, #12]
    6adc:	421a      	tst	r2, r3
    6ade:	d0fc      	beq.n	6ada <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    6ae0:	4a10      	ldr	r2, [pc, #64]	; (6b24 <system_clock_source_enable+0xa4>)
    6ae2:	6891      	ldr	r1, [r2, #8]
    6ae4:	4b0e      	ldr	r3, [pc, #56]	; (6b20 <system_clock_source_enable+0xa0>)
    6ae6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6ae8:	6852      	ldr	r2, [r2, #4]
    6aea:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    6aec:	2200      	movs	r2, #0
    6aee:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    6af0:	0019      	movs	r1, r3
    6af2:	3210      	adds	r2, #16
    6af4:	68cb      	ldr	r3, [r1, #12]
    6af6:	421a      	tst	r2, r3
    6af8:	d0fc      	beq.n	6af4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6afa:	4b0a      	ldr	r3, [pc, #40]	; (6b24 <system_clock_source_enable+0xa4>)
    6afc:	681b      	ldr	r3, [r3, #0]
    6afe:	b29b      	uxth	r3, r3
    6b00:	4a07      	ldr	r2, [pc, #28]	; (6b20 <system_clock_source_enable+0xa0>)
    6b02:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    6b04:	2000      	movs	r0, #0
    6b06:	e008      	b.n	6b1a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    6b08:	4905      	ldr	r1, [pc, #20]	; (6b20 <system_clock_source_enable+0xa0>)
    6b0a:	2244      	movs	r2, #68	; 0x44
    6b0c:	5c8b      	ldrb	r3, [r1, r2]
    6b0e:	2002      	movs	r0, #2
    6b10:	4303      	orrs	r3, r0
    6b12:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    6b14:	2000      	movs	r0, #0
		break;
    6b16:	e000      	b.n	6b1a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    6b18:	2000      	movs	r0, #0
}
    6b1a:	4770      	bx	lr
    6b1c:	0000b694 	.word	0x0000b694
    6b20:	40000800 	.word	0x40000800
    6b24:	20003828 	.word	0x20003828

00006b28 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b2a:	46de      	mov	lr, fp
    6b2c:	4657      	mov	r7, sl
    6b2e:	464e      	mov	r6, r9
    6b30:	4645      	mov	r5, r8
    6b32:	b5e0      	push	{r5, r6, r7, lr}
    6b34:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    6b36:	22c2      	movs	r2, #194	; 0xc2
    6b38:	00d2      	lsls	r2, r2, #3
    6b3a:	4b4c      	ldr	r3, [pc, #304]	; (6c6c <system_clock_init+0x144>)
    6b3c:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    6b3e:	4a4c      	ldr	r2, [pc, #304]	; (6c70 <system_clock_init+0x148>)
    6b40:	6853      	ldr	r3, [r2, #4]
    6b42:	211e      	movs	r1, #30
    6b44:	438b      	bics	r3, r1
    6b46:	3918      	subs	r1, #24
    6b48:	430b      	orrs	r3, r1
    6b4a:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    6b4c:	2203      	movs	r2, #3
    6b4e:	ab01      	add	r3, sp, #4
    6b50:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6b52:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    6b54:	4d47      	ldr	r5, [pc, #284]	; (6c74 <system_clock_init+0x14c>)
    6b56:	b2e0      	uxtb	r0, r4
    6b58:	a901      	add	r1, sp, #4
    6b5a:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6b5c:	3401      	adds	r4, #1
    6b5e:	2c25      	cmp	r4, #37	; 0x25
    6b60:	d1f9      	bne.n	6b56 <system_clock_init+0x2e>
	config->run_in_standby  = false;
    6b62:	a80b      	add	r0, sp, #44	; 0x2c
    6b64:	2500      	movs	r5, #0
    6b66:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    6b68:	2601      	movs	r6, #1
    6b6a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    6b6c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    6b6e:	4b42      	ldr	r3, [pc, #264]	; (6c78 <system_clock_init+0x150>)
    6b70:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    6b72:	2006      	movs	r0, #6
    6b74:	4b41      	ldr	r3, [pc, #260]	; (6c7c <system_clock_init+0x154>)
    6b76:	4699      	mov	r9, r3
    6b78:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6b7a:	4b41      	ldr	r3, [pc, #260]	; (6c80 <system_clock_init+0x158>)
    6b7c:	4798      	blx	r3
	config->high_when_disabled = false;
    6b7e:	ac01      	add	r4, sp, #4
    6b80:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    6b82:	2306      	movs	r3, #6
    6b84:	469a      	mov	sl, r3
    6b86:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    6b88:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    6b8a:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    6b8c:	2308      	movs	r3, #8
    6b8e:	6063      	str	r3, [r4, #4]
    6b90:	0021      	movs	r1, r4
    6b92:	2001      	movs	r0, #1
    6b94:	4b3b      	ldr	r3, [pc, #236]	; (6c84 <system_clock_init+0x15c>)
    6b96:	4698      	mov	r8, r3
    6b98:	4798      	blx	r3
    6b9a:	2001      	movs	r0, #1
    6b9c:	4f3a      	ldr	r7, [pc, #232]	; (6c88 <system_clock_init+0x160>)
    6b9e:	47b8      	blx	r7
	config->division_factor    = 1;
    6ba0:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    6ba2:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    6ba4:	7265      	strb	r5, [r4, #9]
    6ba6:	2303      	movs	r3, #3
    6ba8:	469b      	mov	fp, r3
    6baa:	7023      	strb	r3, [r4, #0]
    6bac:	7226      	strb	r6, [r4, #8]
    6bae:	0021      	movs	r1, r4
    6bb0:	2002      	movs	r0, #2
    6bb2:	47c0      	blx	r8
    6bb4:	2002      	movs	r0, #2
    6bb6:	47b8      	blx	r7
	config->high_when_disabled = false;
    6bb8:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    6bba:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    6bbc:	7265      	strb	r5, [r4, #9]
    6bbe:	465b      	mov	r3, fp
    6bc0:	7023      	strb	r3, [r4, #0]
    6bc2:	2320      	movs	r3, #32
    6bc4:	6063      	str	r3, [r4, #4]
    6bc6:	0021      	movs	r1, r4
    6bc8:	2004      	movs	r0, #4
    6bca:	47c0      	blx	r8
    6bcc:	2004      	movs	r0, #4
    6bce:	47b8      	blx	r7
	config->division_factor    = 1;
    6bd0:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    6bd2:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    6bd4:	4653      	mov	r3, sl
    6bd6:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    6bd8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    6bda:	7265      	strb	r5, [r4, #9]
    6bdc:	0021      	movs	r1, r4
    6bde:	2005      	movs	r0, #5
    6be0:	47c0      	blx	r8
    6be2:	2005      	movs	r0, #5
    6be4:	47b8      	blx	r7
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
    6be6:	a90a      	add	r1, sp, #40	; 0x28
    6be8:	700e      	strb	r6, [r1, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
    6bea:	2001      	movs	r0, #1
    6bec:	4b21      	ldr	r3, [pc, #132]	; (6c74 <system_clock_init+0x14c>)
    6bee:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
    6bf0:	2001      	movs	r0, #1
    6bf2:	4b26      	ldr	r3, [pc, #152]	; (6c8c <system_clock_init+0x164>)
    6bf4:	4798      	blx	r3
	config->run_in_standby      = false;
    6bf6:	a804      	add	r0, sp, #16
    6bf8:	7045      	strb	r5, [r0, #1]
	config->lock_bypass         = false;
    6bfa:	7085      	strb	r5, [r0, #2]
	config->wake_up_fast        = false;
    6bfc:	70c5      	strb	r5, [r0, #3]
	config->low_power_enable    = false;
    6bfe:	7105      	strb	r5, [r0, #4]
	config->output_frequency    = 48000000;
    6c00:	4b23      	ldr	r3, [pc, #140]	; (6c90 <system_clock_init+0x168>)
    6c02:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
    6c04:	8206      	strh	r6, [r0, #16]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    6c06:	74c5      	strb	r5, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    6c08:	7485      	strb	r5, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    6c0a:	7005      	strb	r5, [r0, #0]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    6c0c:	2302      	movs	r3, #2
    6c0e:	7503      	strb	r3, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    6c10:	4b20      	ldr	r3, [pc, #128]	; (6c94 <system_clock_init+0x16c>)
    6c12:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    6c14:	4b20      	ldr	r3, [pc, #128]	; (6c98 <system_clock_init+0x170>)
    6c16:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    6c18:	2008      	movs	r0, #8
    6c1a:	47c8      	blx	r9
		return ((SYSCTRL->DPLLSTATUS.reg &
    6c1c:	4813      	ldr	r0, [pc, #76]	; (6c6c <system_clock_init+0x144>)
    6c1e:	2150      	movs	r1, #80	; 0x50
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    6c20:	2203      	movs	r2, #3
		return ((SYSCTRL->DPLLSTATUS.reg &
    6c22:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    6c24:	4013      	ands	r3, r2
    6c26:	2b03      	cmp	r3, #3
    6c28:	d1fb      	bne.n	6c22 <system_clock_init+0xfa>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    6c2a:	4910      	ldr	r1, [pc, #64]	; (6c6c <system_clock_init+0x144>)
    6c2c:	2244      	movs	r2, #68	; 0x44
    6c2e:	5c88      	ldrb	r0, [r1, r2]
    6c30:	3b83      	subs	r3, #131	; 0x83
    6c32:	4303      	orrs	r3, r0
    6c34:	548b      	strb	r3, [r1, r2]
	PM->CPUSEL.reg = (uint32_t)divider;
    6c36:	4a19      	ldr	r2, [pc, #100]	; (6c9c <system_clock_init+0x174>)
    6c38:	2300      	movs	r3, #0
    6c3a:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    6c3c:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    6c3e:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    6c40:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    6c42:	a901      	add	r1, sp, #4
    6c44:	2201      	movs	r2, #1
    6c46:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    6c48:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    6c4a:	720b      	strb	r3, [r1, #8]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6c4c:	3308      	adds	r3, #8
    6c4e:	700b      	strb	r3, [r1, #0]
    6c50:	724a      	strb	r2, [r1, #9]
    6c52:	2000      	movs	r0, #0
    6c54:	4b0b      	ldr	r3, [pc, #44]	; (6c84 <system_clock_init+0x15c>)
    6c56:	4798      	blx	r3
    6c58:	2000      	movs	r0, #0
    6c5a:	4b0b      	ldr	r3, [pc, #44]	; (6c88 <system_clock_init+0x160>)
    6c5c:	4798      	blx	r3
#endif
}
    6c5e:	b00d      	add	sp, #52	; 0x34
    6c60:	bc3c      	pop	{r2, r3, r4, r5}
    6c62:	4690      	mov	r8, r2
    6c64:	4699      	mov	r9, r3
    6c66:	46a2      	mov	sl, r4
    6c68:	46ab      	mov	fp, r5
    6c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c6c:	40000800 	.word	0x40000800
    6c70:	41004000 	.word	0x41004000
    6c74:	00006ed9 	.word	0x00006ed9
    6c78:	000069a1 	.word	0x000069a1
    6c7c:	00006a81 	.word	0x00006a81
    6c80:	00006ca1 	.word	0x00006ca1
    6c84:	00006cc5 	.word	0x00006cc5
    6c88:	00006d7d 	.word	0x00006d7d
    6c8c:	00006e4d 	.word	0x00006e4d
    6c90:	02dc6c00 	.word	0x02dc6c00
    6c94:	000f4240 	.word	0x000f4240
    6c98:	000069dd 	.word	0x000069dd
    6c9c:	40000400 	.word	0x40000400

00006ca0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    6ca0:	4a06      	ldr	r2, [pc, #24]	; (6cbc <system_gclk_init+0x1c>)
    6ca2:	6993      	ldr	r3, [r2, #24]
    6ca4:	2108      	movs	r1, #8
    6ca6:	430b      	orrs	r3, r1
    6ca8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    6caa:	2201      	movs	r2, #1
    6cac:	4b04      	ldr	r3, [pc, #16]	; (6cc0 <system_gclk_init+0x20>)
    6cae:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    6cb0:	0019      	movs	r1, r3
    6cb2:	780b      	ldrb	r3, [r1, #0]
    6cb4:	4213      	tst	r3, r2
    6cb6:	d1fc      	bne.n	6cb2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    6cb8:	4770      	bx	lr
    6cba:	46c0      	nop			; (mov r8, r8)
    6cbc:	40000400 	.word	0x40000400
    6cc0:	40000c00 	.word	0x40000c00

00006cc4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6cc4:	b570      	push	{r4, r5, r6, lr}
    6cc6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    6cc8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6cca:	780d      	ldrb	r5, [r1, #0]
    6ccc:	022d      	lsls	r5, r5, #8
    6cce:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6cd0:	784b      	ldrb	r3, [r1, #1]
    6cd2:	2b00      	cmp	r3, #0
    6cd4:	d002      	beq.n	6cdc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6cd6:	2380      	movs	r3, #128	; 0x80
    6cd8:	02db      	lsls	r3, r3, #11
    6cda:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6cdc:	7a4b      	ldrb	r3, [r1, #9]
    6cde:	2b00      	cmp	r3, #0
    6ce0:	d002      	beq.n	6ce8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6ce2:	2380      	movs	r3, #128	; 0x80
    6ce4:	031b      	lsls	r3, r3, #12
    6ce6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6ce8:	6848      	ldr	r0, [r1, #4]
    6cea:	2801      	cmp	r0, #1
    6cec:	d910      	bls.n	6d10 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6cee:	1e43      	subs	r3, r0, #1
    6cf0:	4218      	tst	r0, r3
    6cf2:	d134      	bne.n	6d5e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6cf4:	2802      	cmp	r0, #2
    6cf6:	d930      	bls.n	6d5a <system_gclk_gen_set_config+0x96>
    6cf8:	2302      	movs	r3, #2
    6cfa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    6cfc:	3201      	adds	r2, #1
						mask <<= 1) {
    6cfe:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    6d00:	4298      	cmp	r0, r3
    6d02:	d8fb      	bhi.n	6cfc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6d04:	0212      	lsls	r2, r2, #8
    6d06:	4332      	orrs	r2, r6
    6d08:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6d0a:	2380      	movs	r3, #128	; 0x80
    6d0c:	035b      	lsls	r3, r3, #13
    6d0e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6d10:	7a0b      	ldrb	r3, [r1, #8]
    6d12:	2b00      	cmp	r3, #0
    6d14:	d002      	beq.n	6d1c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6d16:	2380      	movs	r3, #128	; 0x80
    6d18:	039b      	lsls	r3, r3, #14
    6d1a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6d1c:	4a13      	ldr	r2, [pc, #76]	; (6d6c <system_gclk_gen_set_config+0xa8>)
    6d1e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    6d20:	b25b      	sxtb	r3, r3
    6d22:	2b00      	cmp	r3, #0
    6d24:	dbfb      	blt.n	6d1e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    6d26:	4b12      	ldr	r3, [pc, #72]	; (6d70 <system_gclk_gen_set_config+0xac>)
    6d28:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6d2a:	4b12      	ldr	r3, [pc, #72]	; (6d74 <system_gclk_gen_set_config+0xb0>)
    6d2c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6d2e:	4a0f      	ldr	r2, [pc, #60]	; (6d6c <system_gclk_gen_set_config+0xa8>)
    6d30:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    6d32:	b25b      	sxtb	r3, r3
    6d34:	2b00      	cmp	r3, #0
    6d36:	dbfb      	blt.n	6d30 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6d38:	4b0c      	ldr	r3, [pc, #48]	; (6d6c <system_gclk_gen_set_config+0xa8>)
    6d3a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6d3c:	001a      	movs	r2, r3
    6d3e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    6d40:	b25b      	sxtb	r3, r3
    6d42:	2b00      	cmp	r3, #0
    6d44:	dbfb      	blt.n	6d3e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6d46:	4a09      	ldr	r2, [pc, #36]	; (6d6c <system_gclk_gen_set_config+0xa8>)
    6d48:	6853      	ldr	r3, [r2, #4]
    6d4a:	2180      	movs	r1, #128	; 0x80
    6d4c:	0249      	lsls	r1, r1, #9
    6d4e:	400b      	ands	r3, r1
    6d50:	431d      	orrs	r5, r3
    6d52:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    6d54:	4b08      	ldr	r3, [pc, #32]	; (6d78 <system_gclk_gen_set_config+0xb4>)
    6d56:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6d58:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    6d5a:	2200      	movs	r2, #0
    6d5c:	e7d2      	b.n	6d04 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6d5e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    6d60:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6d62:	2380      	movs	r3, #128	; 0x80
    6d64:	029b      	lsls	r3, r3, #10
    6d66:	431d      	orrs	r5, r3
    6d68:	e7d2      	b.n	6d10 <system_gclk_gen_set_config+0x4c>
    6d6a:	46c0      	nop			; (mov r8, r8)
    6d6c:	40000c00 	.word	0x40000c00
    6d70:	00005d09 	.word	0x00005d09
    6d74:	40000c08 	.word	0x40000c08
    6d78:	00005d49 	.word	0x00005d49

00006d7c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6d7c:	b510      	push	{r4, lr}
    6d7e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6d80:	4a0b      	ldr	r2, [pc, #44]	; (6db0 <system_gclk_gen_enable+0x34>)
    6d82:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6d84:	b25b      	sxtb	r3, r3
    6d86:	2b00      	cmp	r3, #0
    6d88:	dbfb      	blt.n	6d82 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    6d8a:	4b0a      	ldr	r3, [pc, #40]	; (6db4 <system_gclk_gen_enable+0x38>)
    6d8c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6d8e:	4b0a      	ldr	r3, [pc, #40]	; (6db8 <system_gclk_gen_enable+0x3c>)
    6d90:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6d92:	4a07      	ldr	r2, [pc, #28]	; (6db0 <system_gclk_gen_enable+0x34>)
    6d94:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6d96:	b25b      	sxtb	r3, r3
    6d98:	2b00      	cmp	r3, #0
    6d9a:	dbfb      	blt.n	6d94 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6d9c:	4a04      	ldr	r2, [pc, #16]	; (6db0 <system_gclk_gen_enable+0x34>)
    6d9e:	6851      	ldr	r1, [r2, #4]
    6da0:	2380      	movs	r3, #128	; 0x80
    6da2:	025b      	lsls	r3, r3, #9
    6da4:	430b      	orrs	r3, r1
    6da6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    6da8:	4b04      	ldr	r3, [pc, #16]	; (6dbc <system_gclk_gen_enable+0x40>)
    6daa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6dac:	bd10      	pop	{r4, pc}
    6dae:	46c0      	nop			; (mov r8, r8)
    6db0:	40000c00 	.word	0x40000c00
    6db4:	00005d09 	.word	0x00005d09
    6db8:	40000c04 	.word	0x40000c04
    6dbc:	00005d49 	.word	0x00005d49

00006dc0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6dc0:	b570      	push	{r4, r5, r6, lr}
    6dc2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6dc4:	4a1a      	ldr	r2, [pc, #104]	; (6e30 <system_gclk_gen_get_hz+0x70>)
    6dc6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6dc8:	b25b      	sxtb	r3, r3
    6dca:	2b00      	cmp	r3, #0
    6dcc:	dbfb      	blt.n	6dc6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    6dce:	4b19      	ldr	r3, [pc, #100]	; (6e34 <system_gclk_gen_get_hz+0x74>)
    6dd0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6dd2:	4b19      	ldr	r3, [pc, #100]	; (6e38 <system_gclk_gen_get_hz+0x78>)
    6dd4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6dd6:	4a16      	ldr	r2, [pc, #88]	; (6e30 <system_gclk_gen_get_hz+0x70>)
    6dd8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6dda:	b25b      	sxtb	r3, r3
    6ddc:	2b00      	cmp	r3, #0
    6dde:	dbfb      	blt.n	6dd8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6de0:	4e13      	ldr	r6, [pc, #76]	; (6e30 <system_gclk_gen_get_hz+0x70>)
    6de2:	6870      	ldr	r0, [r6, #4]
    6de4:	04c0      	lsls	r0, r0, #19
    6de6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6de8:	4b14      	ldr	r3, [pc, #80]	; (6e3c <system_gclk_gen_get_hz+0x7c>)
    6dea:	4798      	blx	r3
    6dec:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6dee:	4b12      	ldr	r3, [pc, #72]	; (6e38 <system_gclk_gen_get_hz+0x78>)
    6df0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6df2:	6876      	ldr	r6, [r6, #4]
    6df4:	02f6      	lsls	r6, r6, #11
    6df6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6df8:	4b11      	ldr	r3, [pc, #68]	; (6e40 <system_gclk_gen_get_hz+0x80>)
    6dfa:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6dfc:	4a0c      	ldr	r2, [pc, #48]	; (6e30 <system_gclk_gen_get_hz+0x70>)
    6dfe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6e00:	b25b      	sxtb	r3, r3
    6e02:	2b00      	cmp	r3, #0
    6e04:	dbfb      	blt.n	6dfe <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6e06:	4b0a      	ldr	r3, [pc, #40]	; (6e30 <system_gclk_gen_get_hz+0x70>)
    6e08:	689c      	ldr	r4, [r3, #8]
    6e0a:	0224      	lsls	r4, r4, #8
    6e0c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    6e0e:	4b0d      	ldr	r3, [pc, #52]	; (6e44 <system_gclk_gen_get_hz+0x84>)
    6e10:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6e12:	2e00      	cmp	r6, #0
    6e14:	d107      	bne.n	6e26 <system_gclk_gen_get_hz+0x66>
    6e16:	2c01      	cmp	r4, #1
    6e18:	d907      	bls.n	6e2a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    6e1a:	0021      	movs	r1, r4
    6e1c:	0028      	movs	r0, r5
    6e1e:	4b0a      	ldr	r3, [pc, #40]	; (6e48 <system_gclk_gen_get_hz+0x88>)
    6e20:	4798      	blx	r3
    6e22:	0005      	movs	r5, r0
    6e24:	e001      	b.n	6e2a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    6e26:	3401      	adds	r4, #1
    6e28:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    6e2a:	0028      	movs	r0, r5
    6e2c:	bd70      	pop	{r4, r5, r6, pc}
    6e2e:	46c0      	nop			; (mov r8, r8)
    6e30:	40000c00 	.word	0x40000c00
    6e34:	00005d09 	.word	0x00005d09
    6e38:	40000c04 	.word	0x40000c04
    6e3c:	0000690d 	.word	0x0000690d
    6e40:	40000c08 	.word	0x40000c08
    6e44:	00005d49 	.word	0x00005d49
    6e48:	00007479 	.word	0x00007479

00006e4c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6e4c:	b510      	push	{r4, lr}
    6e4e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6e50:	4b06      	ldr	r3, [pc, #24]	; (6e6c <system_gclk_chan_enable+0x20>)
    6e52:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6e54:	4b06      	ldr	r3, [pc, #24]	; (6e70 <system_gclk_chan_enable+0x24>)
    6e56:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6e58:	4a06      	ldr	r2, [pc, #24]	; (6e74 <system_gclk_chan_enable+0x28>)
    6e5a:	8853      	ldrh	r3, [r2, #2]
    6e5c:	2180      	movs	r1, #128	; 0x80
    6e5e:	01c9      	lsls	r1, r1, #7
    6e60:	430b      	orrs	r3, r1
    6e62:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    6e64:	4b04      	ldr	r3, [pc, #16]	; (6e78 <system_gclk_chan_enable+0x2c>)
    6e66:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6e68:	bd10      	pop	{r4, pc}
    6e6a:	46c0      	nop			; (mov r8, r8)
    6e6c:	00005d09 	.word	0x00005d09
    6e70:	40000c02 	.word	0x40000c02
    6e74:	40000c00 	.word	0x40000c00
    6e78:	00005d49 	.word	0x00005d49

00006e7c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6e7c:	b510      	push	{r4, lr}
    6e7e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6e80:	4b0f      	ldr	r3, [pc, #60]	; (6ec0 <system_gclk_chan_disable+0x44>)
    6e82:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6e84:	4b0f      	ldr	r3, [pc, #60]	; (6ec4 <system_gclk_chan_disable+0x48>)
    6e86:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6e88:	4a0f      	ldr	r2, [pc, #60]	; (6ec8 <system_gclk_chan_disable+0x4c>)
    6e8a:	8853      	ldrh	r3, [r2, #2]
    6e8c:	051b      	lsls	r3, r3, #20
    6e8e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    6e90:	8853      	ldrh	r3, [r2, #2]
    6e92:	490e      	ldr	r1, [pc, #56]	; (6ecc <system_gclk_chan_disable+0x50>)
    6e94:	400b      	ands	r3, r1
    6e96:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    6e98:	8853      	ldrh	r3, [r2, #2]
    6e9a:	490d      	ldr	r1, [pc, #52]	; (6ed0 <system_gclk_chan_disable+0x54>)
    6e9c:	400b      	ands	r3, r1
    6e9e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    6ea0:	0011      	movs	r1, r2
    6ea2:	2280      	movs	r2, #128	; 0x80
    6ea4:	01d2      	lsls	r2, r2, #7
    6ea6:	884b      	ldrh	r3, [r1, #2]
    6ea8:	4213      	tst	r3, r2
    6eaa:	d1fc      	bne.n	6ea6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6eac:	4906      	ldr	r1, [pc, #24]	; (6ec8 <system_gclk_chan_disable+0x4c>)
    6eae:	884a      	ldrh	r2, [r1, #2]
    6eb0:	0203      	lsls	r3, r0, #8
    6eb2:	4806      	ldr	r0, [pc, #24]	; (6ecc <system_gclk_chan_disable+0x50>)
    6eb4:	4002      	ands	r2, r0
    6eb6:	4313      	orrs	r3, r2
    6eb8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    6eba:	4b06      	ldr	r3, [pc, #24]	; (6ed4 <system_gclk_chan_disable+0x58>)
    6ebc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6ebe:	bd10      	pop	{r4, pc}
    6ec0:	00005d09 	.word	0x00005d09
    6ec4:	40000c02 	.word	0x40000c02
    6ec8:	40000c00 	.word	0x40000c00
    6ecc:	fffff0ff 	.word	0xfffff0ff
    6ed0:	ffffbfff 	.word	0xffffbfff
    6ed4:	00005d49 	.word	0x00005d49

00006ed8 <system_gclk_chan_set_config>:
{
    6ed8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6eda:	780c      	ldrb	r4, [r1, #0]
    6edc:	0224      	lsls	r4, r4, #8
    6ede:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    6ee0:	4b02      	ldr	r3, [pc, #8]	; (6eec <system_gclk_chan_set_config+0x14>)
    6ee2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6ee4:	b2a4      	uxth	r4, r4
    6ee6:	4b02      	ldr	r3, [pc, #8]	; (6ef0 <system_gclk_chan_set_config+0x18>)
    6ee8:	805c      	strh	r4, [r3, #2]
}
    6eea:	bd10      	pop	{r4, pc}
    6eec:	00006e7d 	.word	0x00006e7d
    6ef0:	40000c00 	.word	0x40000c00

00006ef4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6ef4:	b510      	push	{r4, lr}
    6ef6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6ef8:	4b06      	ldr	r3, [pc, #24]	; (6f14 <system_gclk_chan_get_hz+0x20>)
    6efa:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6efc:	4b06      	ldr	r3, [pc, #24]	; (6f18 <system_gclk_chan_get_hz+0x24>)
    6efe:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6f00:	4b06      	ldr	r3, [pc, #24]	; (6f1c <system_gclk_chan_get_hz+0x28>)
    6f02:	885c      	ldrh	r4, [r3, #2]
    6f04:	0524      	lsls	r4, r4, #20
    6f06:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    6f08:	4b05      	ldr	r3, [pc, #20]	; (6f20 <system_gclk_chan_get_hz+0x2c>)
    6f0a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6f0c:	0020      	movs	r0, r4
    6f0e:	4b05      	ldr	r3, [pc, #20]	; (6f24 <system_gclk_chan_get_hz+0x30>)
    6f10:	4798      	blx	r3
}
    6f12:	bd10      	pop	{r4, pc}
    6f14:	00005d09 	.word	0x00005d09
    6f18:	40000c02 	.word	0x40000c02
    6f1c:	40000c00 	.word	0x40000c00
    6f20:	00005d49 	.word	0x00005d49
    6f24:	00006dc1 	.word	0x00006dc1

00006f28 <system_interrupt_clear_pending>:
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    6f28:	2800      	cmp	r0, #0
    6f2a:	db08      	blt.n	6f3e <system_interrupt_clear_pending+0x16>
		NVIC->ICPR[0] = (1 << vector);
    6f2c:	2301      	movs	r3, #1
    6f2e:	4083      	lsls	r3, r0
    6f30:	22c0      	movs	r2, #192	; 0xc0
    6f32:	0052      	lsls	r2, r2, #1
    6f34:	4906      	ldr	r1, [pc, #24]	; (6f50 <system_interrupt_clear_pending+0x28>)
    6f36:	508b      	str	r3, [r1, r2]
	enum status_code status = STATUS_OK;
    6f38:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    6f3a:	0018      	movs	r0, r3
    6f3c:	4770      	bx	lr
		status = STATUS_ERR_INVALID_ARG;
    6f3e:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    6f40:	1c42      	adds	r2, r0, #1
    6f42:	d1fa      	bne.n	6f3a <system_interrupt_clear_pending+0x12>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
    6f44:	2280      	movs	r2, #128	; 0x80
    6f46:	0492      	lsls	r2, r2, #18
    6f48:	4b02      	ldr	r3, [pc, #8]	; (6f54 <system_interrupt_clear_pending+0x2c>)
    6f4a:	605a      	str	r2, [r3, #4]
	enum status_code status = STATUS_OK;
    6f4c:	2300      	movs	r3, #0
    6f4e:	e7f4      	b.n	6f3a <system_interrupt_clear_pending+0x12>
    6f50:	e000e100 	.word	0xe000e100
    6f54:	e000ed00 	.word	0xe000ed00

00006f58 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6f58:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6f5a:	78d3      	ldrb	r3, [r2, #3]
    6f5c:	2b00      	cmp	r3, #0
    6f5e:	d135      	bne.n	6fcc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6f60:	7813      	ldrb	r3, [r2, #0]
    6f62:	2b80      	cmp	r3, #128	; 0x80
    6f64:	d029      	beq.n	6fba <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6f66:	061b      	lsls	r3, r3, #24
    6f68:	2480      	movs	r4, #128	; 0x80
    6f6a:	0264      	lsls	r4, r4, #9
    6f6c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6f6e:	7854      	ldrb	r4, [r2, #1]
    6f70:	2502      	movs	r5, #2
    6f72:	43ac      	bics	r4, r5
    6f74:	d106      	bne.n	6f84 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6f76:	7894      	ldrb	r4, [r2, #2]
    6f78:	2c00      	cmp	r4, #0
    6f7a:	d120      	bne.n	6fbe <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6f7c:	2480      	movs	r4, #128	; 0x80
    6f7e:	02a4      	lsls	r4, r4, #10
    6f80:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6f82:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6f84:	7854      	ldrb	r4, [r2, #1]
    6f86:	3c01      	subs	r4, #1
    6f88:	2c01      	cmp	r4, #1
    6f8a:	d91c      	bls.n	6fc6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6f8c:	040d      	lsls	r5, r1, #16
    6f8e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6f90:	24a0      	movs	r4, #160	; 0xa0
    6f92:	05e4      	lsls	r4, r4, #23
    6f94:	432c      	orrs	r4, r5
    6f96:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6f98:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6f9a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6f9c:	24d0      	movs	r4, #208	; 0xd0
    6f9e:	0624      	lsls	r4, r4, #24
    6fa0:	432c      	orrs	r4, r5
    6fa2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6fa4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6fa6:	78d4      	ldrb	r4, [r2, #3]
    6fa8:	2c00      	cmp	r4, #0
    6faa:	d122      	bne.n	6ff2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6fac:	035b      	lsls	r3, r3, #13
    6fae:	d51c      	bpl.n	6fea <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6fb0:	7893      	ldrb	r3, [r2, #2]
    6fb2:	2b01      	cmp	r3, #1
    6fb4:	d01e      	beq.n	6ff4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    6fb6:	6141      	str	r1, [r0, #20]
    6fb8:	e017      	b.n	6fea <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    6fba:	2300      	movs	r3, #0
    6fbc:	e7d7      	b.n	6f6e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6fbe:	24c0      	movs	r4, #192	; 0xc0
    6fc0:	02e4      	lsls	r4, r4, #11
    6fc2:	4323      	orrs	r3, r4
    6fc4:	e7dd      	b.n	6f82 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6fc6:	4c0d      	ldr	r4, [pc, #52]	; (6ffc <_system_pinmux_config+0xa4>)
    6fc8:	4023      	ands	r3, r4
    6fca:	e7df      	b.n	6f8c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    6fcc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6fce:	040c      	lsls	r4, r1, #16
    6fd0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6fd2:	23a0      	movs	r3, #160	; 0xa0
    6fd4:	05db      	lsls	r3, r3, #23
    6fd6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6fd8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6fda:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6fdc:	23d0      	movs	r3, #208	; 0xd0
    6fde:	061b      	lsls	r3, r3, #24
    6fe0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6fe2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    6fe4:	78d3      	ldrb	r3, [r2, #3]
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	d103      	bne.n	6ff2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6fea:	7853      	ldrb	r3, [r2, #1]
    6fec:	3b01      	subs	r3, #1
    6fee:	2b01      	cmp	r3, #1
    6ff0:	d902      	bls.n	6ff8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    6ff2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    6ff4:	6181      	str	r1, [r0, #24]
    6ff6:	e7f8      	b.n	6fea <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    6ff8:	6081      	str	r1, [r0, #8]
}
    6ffa:	e7fa      	b.n	6ff2 <_system_pinmux_config+0x9a>
    6ffc:	fffbffff 	.word	0xfffbffff

00007000 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    7000:	b510      	push	{r4, lr}
    7002:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    7004:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    7006:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7008:	2900      	cmp	r1, #0
    700a:	d104      	bne.n	7016 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    700c:	0943      	lsrs	r3, r0, #5
    700e:	01db      	lsls	r3, r3, #7
    7010:	4905      	ldr	r1, [pc, #20]	; (7028 <system_pinmux_pin_set_config+0x28>)
    7012:	468c      	mov	ip, r1
    7014:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    7016:	241f      	movs	r4, #31
    7018:	4020      	ands	r0, r4
    701a:	2101      	movs	r1, #1
    701c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    701e:	0018      	movs	r0, r3
    7020:	4b02      	ldr	r3, [pc, #8]	; (702c <system_pinmux_pin_set_config+0x2c>)
    7022:	4798      	blx	r3
}
    7024:	bd10      	pop	{r4, pc}
    7026:	46c0      	nop			; (mov r8, r8)
    7028:	41004400 	.word	0x41004400
    702c:	00006f59 	.word	0x00006f59

00007030 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    7030:	4770      	bx	lr
	...

00007034 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    7034:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    7036:	4b05      	ldr	r3, [pc, #20]	; (704c <system_init+0x18>)
    7038:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    703a:	4b05      	ldr	r3, [pc, #20]	; (7050 <system_init+0x1c>)
    703c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    703e:	4b05      	ldr	r3, [pc, #20]	; (7054 <system_init+0x20>)
    7040:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    7042:	4b05      	ldr	r3, [pc, #20]	; (7058 <system_init+0x24>)
    7044:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    7046:	4b05      	ldr	r3, [pc, #20]	; (705c <system_init+0x28>)
    7048:	4798      	blx	r3
}
    704a:	bd10      	pop	{r4, pc}
    704c:	00006b29 	.word	0x00006b29
    7050:	00005d79 	.word	0x00005d79
    7054:	00007031 	.word	0x00007031
    7058:	00005e1d 	.word	0x00005e1d
    705c:	00007031 	.word	0x00007031

00007060 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    7060:	b5f0      	push	{r4, r5, r6, r7, lr}
    7062:	46c6      	mov	lr, r8
    7064:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    7066:	0080      	lsls	r0, r0, #2
    7068:	4b0e      	ldr	r3, [pc, #56]	; (70a4 <_tcc_interrupt_handler+0x44>)
    706a:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    706c:	683b      	ldr	r3, [r7, #0]
    706e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    7070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    7074:	4013      	ands	r3, r2
    7076:	401e      	ands	r6, r3
    7078:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    707a:	4b0b      	ldr	r3, [pc, #44]	; (70a8 <_tcc_interrupt_handler+0x48>)
    707c:	4698      	mov	r8, r3
    707e:	e002      	b.n	7086 <_tcc_interrupt_handler+0x26>
    7080:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    7082:	2c30      	cmp	r4, #48	; 0x30
    7084:	d00a      	beq.n	709c <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    7086:	4643      	mov	r3, r8
    7088:	58e5      	ldr	r5, [r4, r3]
    708a:	4235      	tst	r5, r6
    708c:	d0f8      	beq.n	7080 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    708e:	193b      	adds	r3, r7, r4
    7090:	685b      	ldr	r3, [r3, #4]
    7092:	0038      	movs	r0, r7
    7094:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    7096:	683b      	ldr	r3, [r7, #0]
    7098:	62dd      	str	r5, [r3, #44]	; 0x2c
    709a:	e7f1      	b.n	7080 <_tcc_interrupt_handler+0x20>
		}
	}
}
    709c:	bc04      	pop	{r2}
    709e:	4690      	mov	r8, r2
    70a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70a2:	46c0      	nop			; (mov r8, r8)
    70a4:	20004e34 	.word	0x20004e34
    70a8:	0000b6b8 	.word	0x0000b6b8

000070ac <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    70ac:	b510      	push	{r4, lr}
    70ae:	2000      	movs	r0, #0
    70b0:	4b01      	ldr	r3, [pc, #4]	; (70b8 <TCC0_Handler+0xc>)
    70b2:	4798      	blx	r3
    70b4:	bd10      	pop	{r4, pc}
    70b6:	46c0      	nop			; (mov r8, r8)
    70b8:	00007061 	.word	0x00007061

000070bc <TCC1_Handler>:
    70bc:	b510      	push	{r4, lr}
    70be:	2001      	movs	r0, #1
    70c0:	4b01      	ldr	r3, [pc, #4]	; (70c8 <TCC1_Handler+0xc>)
    70c2:	4798      	blx	r3
    70c4:	bd10      	pop	{r4, pc}
    70c6:	46c0      	nop			; (mov r8, r8)
    70c8:	00007061 	.word	0x00007061

000070cc <TCC2_Handler>:
    70cc:	b510      	push	{r4, lr}
    70ce:	2002      	movs	r0, #2
    70d0:	4b01      	ldr	r3, [pc, #4]	; (70d8 <TCC2_Handler+0xc>)
    70d2:	4798      	blx	r3
    70d4:	bd10      	pop	{r4, pc}
    70d6:	46c0      	nop			; (mov r8, r8)
    70d8:	00007061 	.word	0x00007061

000070dc <Dummy_Handler>:
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
  __asm volatile (
    70dc:	2004      	movs	r0, #4
    70de:	4671      	mov	r1, lr
    70e0:	4208      	tst	r0, r1
    70e2:	d002      	beq.n	70ea <_MSP>
    70e4:	f3ef 8009 	mrs	r0, PSP
    70e8:	e001      	b.n	70ee <_HALT>

000070ea <_MSP>:
    70ea:	f3ef 8008 	mrs	r0, MSP

000070ee <_HALT>:
    70ee:	6941      	ldr	r1, [r0, #20]
    70f0:	e074      	b.n	71dc <HardFault_HandlerC>
    70f2:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
    70f4:	4770      	bx	lr
	...

000070f8 <Reset_Handler>:
{
    70f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    70fa:	4a2a      	ldr	r2, [pc, #168]	; (71a4 <Reset_Handler+0xac>)
    70fc:	4b2a      	ldr	r3, [pc, #168]	; (71a8 <Reset_Handler+0xb0>)
    70fe:	429a      	cmp	r2, r3
    7100:	d011      	beq.n	7126 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    7102:	001a      	movs	r2, r3
    7104:	4b29      	ldr	r3, [pc, #164]	; (71ac <Reset_Handler+0xb4>)
    7106:	429a      	cmp	r2, r3
    7108:	d20d      	bcs.n	7126 <Reset_Handler+0x2e>
    710a:	4a29      	ldr	r2, [pc, #164]	; (71b0 <Reset_Handler+0xb8>)
    710c:	3303      	adds	r3, #3
    710e:	1a9b      	subs	r3, r3, r2
    7110:	089b      	lsrs	r3, r3, #2
    7112:	3301      	adds	r3, #1
    7114:	009b      	lsls	r3, r3, #2
    7116:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    7118:	4823      	ldr	r0, [pc, #140]	; (71a8 <Reset_Handler+0xb0>)
    711a:	4922      	ldr	r1, [pc, #136]	; (71a4 <Reset_Handler+0xac>)
    711c:	588c      	ldr	r4, [r1, r2]
    711e:	5084      	str	r4, [r0, r2]
    7120:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    7122:	429a      	cmp	r2, r3
    7124:	d1fa      	bne.n	711c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    7126:	4a23      	ldr	r2, [pc, #140]	; (71b4 <Reset_Handler+0xbc>)
    7128:	4b23      	ldr	r3, [pc, #140]	; (71b8 <Reset_Handler+0xc0>)
    712a:	429a      	cmp	r2, r3
    712c:	d20a      	bcs.n	7144 <Reset_Handler+0x4c>
    712e:	43d3      	mvns	r3, r2
    7130:	4921      	ldr	r1, [pc, #132]	; (71b8 <Reset_Handler+0xc0>)
    7132:	185b      	adds	r3, r3, r1
    7134:	2103      	movs	r1, #3
    7136:	438b      	bics	r3, r1
    7138:	3304      	adds	r3, #4
    713a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    713c:	2100      	movs	r1, #0
    713e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    7140:	4293      	cmp	r3, r2
    7142:	d1fc      	bne.n	713e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    7144:	4a1d      	ldr	r2, [pc, #116]	; (71bc <Reset_Handler+0xc4>)
    7146:	21ff      	movs	r1, #255	; 0xff
    7148:	4b1d      	ldr	r3, [pc, #116]	; (71c0 <Reset_Handler+0xc8>)
    714a:	438b      	bics	r3, r1
    714c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    714e:	39fd      	subs	r1, #253	; 0xfd
    7150:	2390      	movs	r3, #144	; 0x90
    7152:	005b      	lsls	r3, r3, #1
    7154:	4a1b      	ldr	r2, [pc, #108]	; (71c4 <Reset_Handler+0xcc>)
    7156:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    7158:	4a1b      	ldr	r2, [pc, #108]	; (71c8 <Reset_Handler+0xd0>)
    715a:	78d3      	ldrb	r3, [r2, #3]
    715c:	2503      	movs	r5, #3
    715e:	43ab      	bics	r3, r5
    7160:	2402      	movs	r4, #2
    7162:	4323      	orrs	r3, r4
    7164:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    7166:	78d3      	ldrb	r3, [r2, #3]
    7168:	270c      	movs	r7, #12
    716a:	43bb      	bics	r3, r7
    716c:	2608      	movs	r6, #8
    716e:	4333      	orrs	r3, r6
    7170:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    7172:	4b16      	ldr	r3, [pc, #88]	; (71cc <Reset_Handler+0xd4>)
    7174:	7b98      	ldrb	r0, [r3, #14]
    7176:	2230      	movs	r2, #48	; 0x30
    7178:	4390      	bics	r0, r2
    717a:	2220      	movs	r2, #32
    717c:	4310      	orrs	r0, r2
    717e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    7180:	7b99      	ldrb	r1, [r3, #14]
    7182:	43b9      	bics	r1, r7
    7184:	4331      	orrs	r1, r6
    7186:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    7188:	7b9a      	ldrb	r2, [r3, #14]
    718a:	43aa      	bics	r2, r5
    718c:	4322      	orrs	r2, r4
    718e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    7190:	4a0f      	ldr	r2, [pc, #60]	; (71d0 <Reset_Handler+0xd8>)
    7192:	6853      	ldr	r3, [r2, #4]
    7194:	2180      	movs	r1, #128	; 0x80
    7196:	430b      	orrs	r3, r1
    7198:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    719a:	4b0e      	ldr	r3, [pc, #56]	; (71d4 <Reset_Handler+0xdc>)
    719c:	4798      	blx	r3
        main();
    719e:	4b0e      	ldr	r3, [pc, #56]	; (71d8 <Reset_Handler+0xe0>)
    71a0:	4798      	blx	r3
    71a2:	e7fe      	b.n	71a2 <Reset_Handler+0xaa>
    71a4:	0000bbec 	.word	0x0000bbec
    71a8:	20000000 	.word	0x20000000
    71ac:	20000204 	.word	0x20000204
    71b0:	20000004 	.word	0x20000004
    71b4:	20000204 	.word	0x20000204
    71b8:	20004ed8 	.word	0x20004ed8
    71bc:	e000ed00 	.word	0xe000ed00
    71c0:	00000000 	.word	0x00000000
    71c4:	41007000 	.word	0x41007000
    71c8:	41005000 	.word	0x41005000
    71cc:	41004800 	.word	0x41004800
    71d0:	41004000 	.word	0x41004000
    71d4:	00009a21 	.word	0x00009a21
    71d8:	00007265 	.word	0x00007265

000071dc <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
    71dc:	b08e      	sub	sp, #56	; 0x38
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
    71de:	6803      	ldr	r3, [r0, #0]
    71e0:	930d      	str	r3, [sp, #52]	; 0x34
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
    71e2:	6843      	ldr	r3, [r0, #4]
    71e4:	930c      	str	r3, [sp, #48]	; 0x30
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
    71e6:	6883      	ldr	r3, [r0, #8]
    71e8:	930b      	str	r3, [sp, #44]	; 0x2c
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
    71ea:	68c3      	ldr	r3, [r0, #12]
    71ec:	930a      	str	r3, [sp, #40]	; 0x28
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
    71ee:	6903      	ldr	r3, [r0, #16]
    71f0:	9309      	str	r3, [sp, #36]	; 0x24
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
    71f2:	6943      	ldr	r3, [r0, #20]
    71f4:	9308      	str	r3, [sp, #32]
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
    71f6:	6983      	ldr	r3, [r0, #24]
    71f8:	9307      	str	r3, [sp, #28]
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
    71fa:	69c3      	ldr	r3, [r0, #28]
    71fc:	9306      	str	r3, [sp, #24]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
    71fe:	4b0a      	ldr	r3, [pc, #40]	; (7228 <HardFault_HandlerC+0x4c>)
    7200:	681b      	ldr	r3, [r3, #0]
    7202:	9305      	str	r3, [sp, #20]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
    7204:	4b09      	ldr	r3, [pc, #36]	; (722c <HardFault_HandlerC+0x50>)
    7206:	681b      	ldr	r3, [r3, #0]
    7208:	9304      	str	r3, [sp, #16]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
    720a:	4b09      	ldr	r3, [pc, #36]	; (7230 <HardFault_HandlerC+0x54>)
    720c:	681b      	ldr	r3, [r3, #0]
    720e:	9303      	str	r3, [sp, #12]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
    7210:	4b08      	ldr	r3, [pc, #32]	; (7234 <HardFault_HandlerC+0x58>)
    7212:	681b      	ldr	r3, [r3, #0]
    7214:	9302      	str	r3, [sp, #8]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
    7216:	4b08      	ldr	r3, [pc, #32]	; (7238 <HardFault_HandlerC+0x5c>)
    7218:	681b      	ldr	r3, [r3, #0]
    721a:	9300      	str	r3, [sp, #0]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
    721c:	4b07      	ldr	r3, [pc, #28]	; (723c <HardFault_HandlerC+0x60>)
    721e:	681b      	ldr	r3, [r3, #0]
    7220:	9301      	str	r3, [sp, #4]
	
	__asm("BKPT #0\n") ; // Break into the debugger
    7222:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
    7224:	b00e      	add	sp, #56	; 0x38
    7226:	4770      	bx	lr
    7228:	e000ed28 	.word	0xe000ed28
    722c:	e000ed2c 	.word	0xe000ed2c
    7230:	e000ed30 	.word	0xe000ed30
    7234:	e000ed3c 	.word	0xe000ed3c
    7238:	e000ed34 	.word	0xe000ed34
    723c:	e000ed38 	.word	0xe000ed38

00007240 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    7240:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    7242:	4a06      	ldr	r2, [pc, #24]	; (725c <_sbrk+0x1c>)
    7244:	6812      	ldr	r2, [r2, #0]
    7246:	2a00      	cmp	r2, #0
    7248:	d004      	beq.n	7254 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    724a:	4a04      	ldr	r2, [pc, #16]	; (725c <_sbrk+0x1c>)
    724c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    724e:	18c3      	adds	r3, r0, r3
    7250:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    7252:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    7254:	4902      	ldr	r1, [pc, #8]	; (7260 <_sbrk+0x20>)
    7256:	4a01      	ldr	r2, [pc, #4]	; (725c <_sbrk+0x1c>)
    7258:	6011      	str	r1, [r2, #0]
    725a:	e7f6      	b.n	724a <_sbrk+0xa>
    725c:	20003840 	.word	0x20003840
    7260:	20006ed8 	.word	0x20006ed8

00007264 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    7264:	b510      	push	{r4, lr}
	/* Initialize the board. */
	system_init();
    7266:	4b05      	ldr	r3, [pc, #20]	; (727c <main+0x18>)
    7268:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
    726a:	4b05      	ldr	r3, [pc, #20]	; (7280 <main+0x1c>)
    726c:	4798      	blx	r3

	//Initialize trace capabilities
	 vTraceEnable(TRC_START);
    726e:	2001      	movs	r0, #1
    7270:	4b04      	ldr	r3, [pc, #16]	; (7284 <main+0x20>)
    7272:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
    7274:	4b04      	ldr	r3, [pc, #16]	; (7288 <main+0x24>)
    7276:	4798      	blx	r3

	return 0; //Will not get here
}
    7278:	2000      	movs	r0, #0
    727a:	bd10      	pop	{r4, pc}
    727c:	00007035 	.word	0x00007035
    7280:	00005ac5 	.word	0x00005ac5
    7284:	000021ed 	.word	0x000021ed
    7288:	00004a85 	.word	0x00004a85

0000728c <vApplicationDaemonTaskStartupHook>:
*					here will be called before other tasks are initialized.
* @param[in]        None
* @return           None
*****************************************************************************/
void vApplicationDaemonTaskStartupHook(void)
{
    728c:	b530      	push	{r4, r5, lr}
    728e:	b085      	sub	sp, #20
	SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
    7290:	484a      	ldr	r0, [pc, #296]	; (73bc <vApplicationDaemonTaskStartupHook+0x130>)
    7292:	4c4b      	ldr	r4, [pc, #300]	; (73c0 <vApplicationDaemonTaskStartupHook+0x134>)
    7294:	47a0      	blx	r4

	/* Initialize HW that needs FreeRTOS Initialization */
	SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
    7296:	484b      	ldr	r0, [pc, #300]	; (73c4 <vApplicationDaemonTaskStartupHook+0x138>)
    7298:	47a0      	blx	r4
	if (I2cInitializeDriver() != STATUS_OK)
    729a:	4b4b      	ldr	r3, [pc, #300]	; (73c8 <vApplicationDaemonTaskStartupHook+0x13c>)
    729c:	4798      	blx	r3
    729e:	2800      	cmp	r0, #0
    72a0:	d100      	bne.n	72a4 <vApplicationDaemonTaskStartupHook+0x18>
    72a2:	e06c      	b.n	737e <vApplicationDaemonTaskStartupHook+0xf2>
	{
		SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
    72a4:	4849      	ldr	r0, [pc, #292]	; (73cc <vApplicationDaemonTaskStartupHook+0x140>)
    72a6:	4b46      	ldr	r3, [pc, #280]	; (73c0 <vApplicationDaemonTaskStartupHook+0x134>)
    72a8:	4798      	blx	r3
	} else {
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
	}

	if (InitializeSeesaw() != 0)
    72aa:	4b49      	ldr	r3, [pc, #292]	; (73d0 <vApplicationDaemonTaskStartupHook+0x144>)
    72ac:	4798      	blx	r3
    72ae:	2800      	cmp	r0, #0
    72b0:	d069      	beq.n	7386 <vApplicationDaemonTaskStartupHook+0xfa>
	{
		SerialConsoleWriteString("Error initializing Seesaw!\r\n");
    72b2:	4848      	ldr	r0, [pc, #288]	; (73d4 <vApplicationDaemonTaskStartupHook+0x148>)
    72b4:	4b42      	ldr	r3, [pc, #264]	; (73c0 <vApplicationDaemonTaskStartupHook+0x134>)
    72b6:	4798      	blx	r3
	
	/* Initialize the BME680 Sensor
     * Interface preference is updated as a parameter
     * For I2C : BME68X_I2C_INTF
     */
    if (bme68x_interface_init(&bme, BME68X_I2C_INTF) != BME68X_OK) {
    72b8:	2101      	movs	r1, #1
    72ba:	4847      	ldr	r0, [pc, #284]	; (73d8 <vApplicationDaemonTaskStartupHook+0x14c>)
    72bc:	4b47      	ldr	r3, [pc, #284]	; (73dc <vApplicationDaemonTaskStartupHook+0x150>)
    72be:	4798      	blx	r3
    72c0:	2800      	cmp	r0, #0
    72c2:	d164      	bne.n	738e <vApplicationDaemonTaskStartupHook+0x102>
		SerialConsoleWriteString("BME680 Interface Initialization Failed!\r\n");
    }

	if (bme68x_init(&bme) != BME68X_OK) {
    72c4:	4844      	ldr	r0, [pc, #272]	; (73d8 <vApplicationDaemonTaskStartupHook+0x14c>)
    72c6:	4b46      	ldr	r3, [pc, #280]	; (73e0 <vApplicationDaemonTaskStartupHook+0x154>)
    72c8:	4798      	blx	r3
    72ca:	2800      	cmp	r0, #0
    72cc:	d163      	bne.n	7396 <vApplicationDaemonTaskStartupHook+0x10a>
		SerialConsoleWriteString("BME680 Initial Reg read/write failed!\r\n");
	}

	/* Initialize the IMU LSM6DSO Sensor */
	uint8_t whoamI = 0;
    72ce:	240f      	movs	r4, #15
    72d0:	446c      	add	r4, sp
    72d2:	2300      	movs	r3, #0
    72d4:	7023      	strb	r3, [r4, #0]
	lsm6dso_device_id_get(GetImuStruct(), &whoamI);
    72d6:	4b43      	ldr	r3, [pc, #268]	; (73e4 <vApplicationDaemonTaskStartupHook+0x158>)
    72d8:	4798      	blx	r3
    72da:	0021      	movs	r1, r4
    72dc:	4b42      	ldr	r3, [pc, #264]	; (73e8 <vApplicationDaemonTaskStartupHook+0x15c>)
    72de:	4798      	blx	r3
	if (whoamI != LSM6DSO_ID){
    72e0:	7823      	ldrb	r3, [r4, #0]
    72e2:	2b6c      	cmp	r3, #108	; 0x6c
    72e4:	d05b      	beq.n	739e <vApplicationDaemonTaskStartupHook+0x112>
		SerialConsoleWriteString("Cannot find IMU!\r\n");
    72e6:	4841      	ldr	r0, [pc, #260]	; (73ec <vApplicationDaemonTaskStartupHook+0x160>)
    72e8:	4b35      	ldr	r3, [pc, #212]	; (73c0 <vApplicationDaemonTaskStartupHook+0x134>)
    72ea:	4798      	blx	r3
* @return           None
*****************************************************************************/
static void StartTasks(void)
{

snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
    72ec:	4b40      	ldr	r3, [pc, #256]	; (73f0 <vApplicationDaemonTaskStartupHook+0x164>)
    72ee:	4798      	blx	r3
    72f0:	0003      	movs	r3, r0
    72f2:	4c40      	ldr	r4, [pc, #256]	; (73f4 <vApplicationDaemonTaskStartupHook+0x168>)
    72f4:	4a40      	ldr	r2, [pc, #256]	; (73f8 <vApplicationDaemonTaskStartupHook+0x16c>)
    72f6:	2140      	movs	r1, #64	; 0x40
    72f8:	0020      	movs	r0, r4
    72fa:	4d40      	ldr	r5, [pc, #256]	; (73fc <vApplicationDaemonTaskStartupHook+0x170>)
    72fc:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
    72fe:	0020      	movs	r0, r4
    7300:	4b2f      	ldr	r3, [pc, #188]	; (73c0 <vApplicationDaemonTaskStartupHook+0x134>)
    7302:	4798      	blx	r3

//Initialize Tasks here

if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
    7304:	4b3e      	ldr	r3, [pc, #248]	; (7400 <vApplicationDaemonTaskStartupHook+0x174>)
    7306:	9301      	str	r3, [sp, #4]
    7308:	2304      	movs	r3, #4
    730a:	9300      	str	r3, [sp, #0]
    730c:	2300      	movs	r3, #0
    730e:	22c8      	movs	r2, #200	; 0xc8
    7310:	0052      	lsls	r2, r2, #1
    7312:	493c      	ldr	r1, [pc, #240]	; (7404 <vApplicationDaemonTaskStartupHook+0x178>)
    7314:	483c      	ldr	r0, [pc, #240]	; (7408 <vApplicationDaemonTaskStartupHook+0x17c>)
    7316:	4c3d      	ldr	r4, [pc, #244]	; (740c <vApplicationDaemonTaskStartupHook+0x180>)
    7318:	47a0      	blx	r4
    731a:	2801      	cmp	r0, #1
    731c:	d002      	beq.n	7324 <vApplicationDaemonTaskStartupHook+0x98>
	SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
    731e:	483c      	ldr	r0, [pc, #240]	; (7410 <vApplicationDaemonTaskStartupHook+0x184>)
    7320:	4b27      	ldr	r3, [pc, #156]	; (73c0 <vApplicationDaemonTaskStartupHook+0x134>)
    7322:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
    7324:	4b32      	ldr	r3, [pc, #200]	; (73f0 <vApplicationDaemonTaskStartupHook+0x164>)
    7326:	4798      	blx	r3
    7328:	0003      	movs	r3, r0
    732a:	4c32      	ldr	r4, [pc, #200]	; (73f4 <vApplicationDaemonTaskStartupHook+0x168>)
    732c:	4a39      	ldr	r2, [pc, #228]	; (7414 <vApplicationDaemonTaskStartupHook+0x188>)
    732e:	2140      	movs	r1, #64	; 0x40
    7330:	0020      	movs	r0, r4
    7332:	4d32      	ldr	r5, [pc, #200]	; (73fc <vApplicationDaemonTaskStartupHook+0x170>)
    7334:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
    7336:	0020      	movs	r0, r4
    7338:	4b21      	ldr	r3, [pc, #132]	; (73c0 <vApplicationDaemonTaskStartupHook+0x134>)
    733a:	4798      	blx	r3



if(xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
    733c:	4b36      	ldr	r3, [pc, #216]	; (7418 <vApplicationDaemonTaskStartupHook+0x18c>)
    733e:	9301      	str	r3, [sp, #4]
    7340:	2303      	movs	r3, #3
    7342:	9300      	str	r3, [sp, #0]
    7344:	2300      	movs	r3, #0
    7346:	2280      	movs	r2, #128	; 0x80
    7348:	0052      	lsls	r2, r2, #1
    734a:	4934      	ldr	r1, [pc, #208]	; (741c <vApplicationDaemonTaskStartupHook+0x190>)
    734c:	4834      	ldr	r0, [pc, #208]	; (7420 <vApplicationDaemonTaskStartupHook+0x194>)
    734e:	4c2f      	ldr	r4, [pc, #188]	; (740c <vApplicationDaemonTaskStartupHook+0x180>)
    7350:	47a0      	blx	r4
    7352:	2801      	cmp	r0, #1
    7354:	d002      	beq.n	735c <vApplicationDaemonTaskStartupHook+0xd0>
	SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
    7356:	4833      	ldr	r0, [pc, #204]	; (7424 <vApplicationDaemonTaskStartupHook+0x198>)
    7358:	4b19      	ldr	r3, [pc, #100]	; (73c0 <vApplicationDaemonTaskStartupHook+0x134>)
    735a:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
    735c:	4b24      	ldr	r3, [pc, #144]	; (73f0 <vApplicationDaemonTaskStartupHook+0x164>)
    735e:	4798      	blx	r3
    7360:	0003      	movs	r3, r0
    7362:	4c24      	ldr	r4, [pc, #144]	; (73f4 <vApplicationDaemonTaskStartupHook+0x168>)
    7364:	4a30      	ldr	r2, [pc, #192]	; (7428 <vApplicationDaemonTaskStartupHook+0x19c>)
    7366:	2140      	movs	r1, #64	; 0x40
    7368:	0020      	movs	r0, r4
    736a:	4d24      	ldr	r5, [pc, #144]	; (73fc <vApplicationDaemonTaskStartupHook+0x170>)
    736c:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
    736e:	0020      	movs	r0, r4
    7370:	4b13      	ldr	r3, [pc, #76]	; (73c0 <vApplicationDaemonTaskStartupHook+0x134>)
    7372:	4798      	blx	r3
	vTaskSuspend(daemonTaskHandle);
    7374:	2000      	movs	r0, #0
    7376:	4b2d      	ldr	r3, [pc, #180]	; (742c <vApplicationDaemonTaskStartupHook+0x1a0>)
    7378:	4798      	blx	r3
}
    737a:	b005      	add	sp, #20
    737c:	bd30      	pop	{r4, r5, pc}
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
    737e:	482c      	ldr	r0, [pc, #176]	; (7430 <vApplicationDaemonTaskStartupHook+0x1a4>)
    7380:	4b0f      	ldr	r3, [pc, #60]	; (73c0 <vApplicationDaemonTaskStartupHook+0x134>)
    7382:	4798      	blx	r3
    7384:	e791      	b.n	72aa <vApplicationDaemonTaskStartupHook+0x1e>
		SerialConsoleWriteString("Initialized Seesaw!\r\n");
    7386:	482b      	ldr	r0, [pc, #172]	; (7434 <vApplicationDaemonTaskStartupHook+0x1a8>)
    7388:	4b0d      	ldr	r3, [pc, #52]	; (73c0 <vApplicationDaemonTaskStartupHook+0x134>)
    738a:	4798      	blx	r3
    738c:	e794      	b.n	72b8 <vApplicationDaemonTaskStartupHook+0x2c>
		SerialConsoleWriteString("BME680 Interface Initialization Failed!\r\n");
    738e:	482a      	ldr	r0, [pc, #168]	; (7438 <vApplicationDaemonTaskStartupHook+0x1ac>)
    7390:	4b0b      	ldr	r3, [pc, #44]	; (73c0 <vApplicationDaemonTaskStartupHook+0x134>)
    7392:	4798      	blx	r3
    7394:	e796      	b.n	72c4 <vApplicationDaemonTaskStartupHook+0x38>
		SerialConsoleWriteString("BME680 Initial Reg read/write failed!\r\n");
    7396:	4829      	ldr	r0, [pc, #164]	; (743c <vApplicationDaemonTaskStartupHook+0x1b0>)
    7398:	4b09      	ldr	r3, [pc, #36]	; (73c0 <vApplicationDaemonTaskStartupHook+0x134>)
    739a:	4798      	blx	r3
    739c:	e797      	b.n	72ce <vApplicationDaemonTaskStartupHook+0x42>
		SerialConsoleWriteString("IMU found!\r\n");
    739e:	4828      	ldr	r0, [pc, #160]	; (7440 <vApplicationDaemonTaskStartupHook+0x1b4>)
    73a0:	4b07      	ldr	r3, [pc, #28]	; (73c0 <vApplicationDaemonTaskStartupHook+0x134>)
    73a2:	4798      	blx	r3
		if(InitImu() == 0)
    73a4:	4b27      	ldr	r3, [pc, #156]	; (7444 <vApplicationDaemonTaskStartupHook+0x1b8>)
    73a6:	4798      	blx	r3
    73a8:	2800      	cmp	r0, #0
    73aa:	d003      	beq.n	73b4 <vApplicationDaemonTaskStartupHook+0x128>
			SerialConsoleWriteString("Could not initialize IMU\r\n");
    73ac:	4826      	ldr	r0, [pc, #152]	; (7448 <vApplicationDaemonTaskStartupHook+0x1bc>)
    73ae:	4b04      	ldr	r3, [pc, #16]	; (73c0 <vApplicationDaemonTaskStartupHook+0x134>)
    73b0:	4798      	blx	r3
    73b2:	e79b      	b.n	72ec <vApplicationDaemonTaskStartupHook+0x60>
			SerialConsoleWriteString("IMU initialized!\r\n");
    73b4:	4825      	ldr	r0, [pc, #148]	; (744c <vApplicationDaemonTaskStartupHook+0x1c0>)
    73b6:	4b02      	ldr	r3, [pc, #8]	; (73c0 <vApplicationDaemonTaskStartupHook+0x134>)
    73b8:	4798      	blx	r3
    73ba:	e797      	b.n	72ec <vApplicationDaemonTaskStartupHook+0x60>
    73bc:	0000b6e8 	.word	0x0000b6e8
    73c0:	00005bed 	.word	0x00005bed
    73c4:	0000b70c 	.word	0x0000b70c
    73c8:	00000de5 	.word	0x00000de5
    73cc:	0000b724 	.word	0x0000b724
    73d0:	000018cd 	.word	0x000018cd
    73d4:	0000a78c 	.word	0x0000a78c
    73d8:	20004e44 	.word	0x20004e44
    73dc:	000008e1 	.word	0x000008e1
    73e0:	000008b5 	.word	0x000008b5
    73e4:	0000172d 	.word	0x0000172d
    73e8:	00001315 	.word	0x00001315
    73ec:	0000b7d0 	.word	0x0000b7d0
    73f0:	000034f1 	.word	0x000034f1
    73f4:	20004e94 	.word	0x20004e94
    73f8:	0000b824 	.word	0x0000b824
    73fc:	00009c15 	.word	0x00009c15
    7400:	20003844 	.word	0x20003844
    7404:	0000b848 	.word	0x0000b848
    7408:	00000aa5 	.word	0x00000aa5
    740c:	000047e1 	.word	0x000047e1
    7410:	0000b854 	.word	0x0000b854
    7414:	0000b880 	.word	0x0000b880
    7418:	20003848 	.word	0x20003848
    741c:	0000b8a0 	.word	0x0000b8a0
    7420:	00001a55 	.word	0x00001a55
    7424:	0000b8a8 	.word	0x0000b8a8
    7428:	0000b8d4 	.word	0x0000b8d4
    742c:	00004f69 	.word	0x00004f69
    7430:	0000b748 	.word	0x0000b748
    7434:	0000b764 	.word	0x0000b764
    7438:	0000b77c 	.word	0x0000b77c
    743c:	0000b7a8 	.word	0x0000b7a8
    7440:	0000b7e4 	.word	0x0000b7e4
    7444:	00001735 	.word	0x00001735
    7448:	0000b808 	.word	0x0000b808
    744c:	0000b7f4 	.word	0x0000b7f4

00007450 <vApplicationMallocFailedHook>:




void vApplicationMallocFailedHook(void)
{
    7450:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
    7452:	4802      	ldr	r0, [pc, #8]	; (745c <vApplicationMallocFailedHook+0xc>)
    7454:	4b02      	ldr	r3, [pc, #8]	; (7460 <vApplicationMallocFailedHook+0x10>)
    7456:	4798      	blx	r3
    7458:	e7fe      	b.n	7458 <vApplicationMallocFailedHook+0x8>
    745a:	46c0      	nop			; (mov r8, r8)
    745c:	0000b8f8 	.word	0x0000b8f8
    7460:	00005bed 	.word	0x00005bed

00007464 <vApplicationStackOverflowHook>:
while(1);
}

void vApplicationStackOverflowHook(void)
{
    7464:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
    7466:	4802      	ldr	r0, [pc, #8]	; (7470 <vApplicationStackOverflowHook+0xc>)
    7468:	4b02      	ldr	r3, [pc, #8]	; (7474 <vApplicationStackOverflowHook+0x10>)
    746a:	4798      	blx	r3
    746c:	e7fe      	b.n	746c <vApplicationStackOverflowHook+0x8>
    746e:	46c0      	nop			; (mov r8, r8)
    7470:	0000b924 	.word	0x0000b924
    7474:	00005bed 	.word	0x00005bed

00007478 <__udivsi3>:
    7478:	2200      	movs	r2, #0
    747a:	0843      	lsrs	r3, r0, #1
    747c:	428b      	cmp	r3, r1
    747e:	d374      	bcc.n	756a <__udivsi3+0xf2>
    7480:	0903      	lsrs	r3, r0, #4
    7482:	428b      	cmp	r3, r1
    7484:	d35f      	bcc.n	7546 <__udivsi3+0xce>
    7486:	0a03      	lsrs	r3, r0, #8
    7488:	428b      	cmp	r3, r1
    748a:	d344      	bcc.n	7516 <__udivsi3+0x9e>
    748c:	0b03      	lsrs	r3, r0, #12
    748e:	428b      	cmp	r3, r1
    7490:	d328      	bcc.n	74e4 <__udivsi3+0x6c>
    7492:	0c03      	lsrs	r3, r0, #16
    7494:	428b      	cmp	r3, r1
    7496:	d30d      	bcc.n	74b4 <__udivsi3+0x3c>
    7498:	22ff      	movs	r2, #255	; 0xff
    749a:	0209      	lsls	r1, r1, #8
    749c:	ba12      	rev	r2, r2
    749e:	0c03      	lsrs	r3, r0, #16
    74a0:	428b      	cmp	r3, r1
    74a2:	d302      	bcc.n	74aa <__udivsi3+0x32>
    74a4:	1212      	asrs	r2, r2, #8
    74a6:	0209      	lsls	r1, r1, #8
    74a8:	d065      	beq.n	7576 <__udivsi3+0xfe>
    74aa:	0b03      	lsrs	r3, r0, #12
    74ac:	428b      	cmp	r3, r1
    74ae:	d319      	bcc.n	74e4 <__udivsi3+0x6c>
    74b0:	e000      	b.n	74b4 <__udivsi3+0x3c>
    74b2:	0a09      	lsrs	r1, r1, #8
    74b4:	0bc3      	lsrs	r3, r0, #15
    74b6:	428b      	cmp	r3, r1
    74b8:	d301      	bcc.n	74be <__udivsi3+0x46>
    74ba:	03cb      	lsls	r3, r1, #15
    74bc:	1ac0      	subs	r0, r0, r3
    74be:	4152      	adcs	r2, r2
    74c0:	0b83      	lsrs	r3, r0, #14
    74c2:	428b      	cmp	r3, r1
    74c4:	d301      	bcc.n	74ca <__udivsi3+0x52>
    74c6:	038b      	lsls	r3, r1, #14
    74c8:	1ac0      	subs	r0, r0, r3
    74ca:	4152      	adcs	r2, r2
    74cc:	0b43      	lsrs	r3, r0, #13
    74ce:	428b      	cmp	r3, r1
    74d0:	d301      	bcc.n	74d6 <__udivsi3+0x5e>
    74d2:	034b      	lsls	r3, r1, #13
    74d4:	1ac0      	subs	r0, r0, r3
    74d6:	4152      	adcs	r2, r2
    74d8:	0b03      	lsrs	r3, r0, #12
    74da:	428b      	cmp	r3, r1
    74dc:	d301      	bcc.n	74e2 <__udivsi3+0x6a>
    74de:	030b      	lsls	r3, r1, #12
    74e0:	1ac0      	subs	r0, r0, r3
    74e2:	4152      	adcs	r2, r2
    74e4:	0ac3      	lsrs	r3, r0, #11
    74e6:	428b      	cmp	r3, r1
    74e8:	d301      	bcc.n	74ee <__udivsi3+0x76>
    74ea:	02cb      	lsls	r3, r1, #11
    74ec:	1ac0      	subs	r0, r0, r3
    74ee:	4152      	adcs	r2, r2
    74f0:	0a83      	lsrs	r3, r0, #10
    74f2:	428b      	cmp	r3, r1
    74f4:	d301      	bcc.n	74fa <__udivsi3+0x82>
    74f6:	028b      	lsls	r3, r1, #10
    74f8:	1ac0      	subs	r0, r0, r3
    74fa:	4152      	adcs	r2, r2
    74fc:	0a43      	lsrs	r3, r0, #9
    74fe:	428b      	cmp	r3, r1
    7500:	d301      	bcc.n	7506 <__udivsi3+0x8e>
    7502:	024b      	lsls	r3, r1, #9
    7504:	1ac0      	subs	r0, r0, r3
    7506:	4152      	adcs	r2, r2
    7508:	0a03      	lsrs	r3, r0, #8
    750a:	428b      	cmp	r3, r1
    750c:	d301      	bcc.n	7512 <__udivsi3+0x9a>
    750e:	020b      	lsls	r3, r1, #8
    7510:	1ac0      	subs	r0, r0, r3
    7512:	4152      	adcs	r2, r2
    7514:	d2cd      	bcs.n	74b2 <__udivsi3+0x3a>
    7516:	09c3      	lsrs	r3, r0, #7
    7518:	428b      	cmp	r3, r1
    751a:	d301      	bcc.n	7520 <__udivsi3+0xa8>
    751c:	01cb      	lsls	r3, r1, #7
    751e:	1ac0      	subs	r0, r0, r3
    7520:	4152      	adcs	r2, r2
    7522:	0983      	lsrs	r3, r0, #6
    7524:	428b      	cmp	r3, r1
    7526:	d301      	bcc.n	752c <__udivsi3+0xb4>
    7528:	018b      	lsls	r3, r1, #6
    752a:	1ac0      	subs	r0, r0, r3
    752c:	4152      	adcs	r2, r2
    752e:	0943      	lsrs	r3, r0, #5
    7530:	428b      	cmp	r3, r1
    7532:	d301      	bcc.n	7538 <__udivsi3+0xc0>
    7534:	014b      	lsls	r3, r1, #5
    7536:	1ac0      	subs	r0, r0, r3
    7538:	4152      	adcs	r2, r2
    753a:	0903      	lsrs	r3, r0, #4
    753c:	428b      	cmp	r3, r1
    753e:	d301      	bcc.n	7544 <__udivsi3+0xcc>
    7540:	010b      	lsls	r3, r1, #4
    7542:	1ac0      	subs	r0, r0, r3
    7544:	4152      	adcs	r2, r2
    7546:	08c3      	lsrs	r3, r0, #3
    7548:	428b      	cmp	r3, r1
    754a:	d301      	bcc.n	7550 <__udivsi3+0xd8>
    754c:	00cb      	lsls	r3, r1, #3
    754e:	1ac0      	subs	r0, r0, r3
    7550:	4152      	adcs	r2, r2
    7552:	0883      	lsrs	r3, r0, #2
    7554:	428b      	cmp	r3, r1
    7556:	d301      	bcc.n	755c <__udivsi3+0xe4>
    7558:	008b      	lsls	r3, r1, #2
    755a:	1ac0      	subs	r0, r0, r3
    755c:	4152      	adcs	r2, r2
    755e:	0843      	lsrs	r3, r0, #1
    7560:	428b      	cmp	r3, r1
    7562:	d301      	bcc.n	7568 <__udivsi3+0xf0>
    7564:	004b      	lsls	r3, r1, #1
    7566:	1ac0      	subs	r0, r0, r3
    7568:	4152      	adcs	r2, r2
    756a:	1a41      	subs	r1, r0, r1
    756c:	d200      	bcs.n	7570 <__udivsi3+0xf8>
    756e:	4601      	mov	r1, r0
    7570:	4152      	adcs	r2, r2
    7572:	4610      	mov	r0, r2
    7574:	4770      	bx	lr
    7576:	e7ff      	b.n	7578 <__udivsi3+0x100>
    7578:	b501      	push	{r0, lr}
    757a:	2000      	movs	r0, #0
    757c:	f000 f806 	bl	758c <__aeabi_idiv0>
    7580:	bd02      	pop	{r1, pc}
    7582:	46c0      	nop			; (mov r8, r8)

00007584 <__aeabi_uidivmod>:
    7584:	2900      	cmp	r1, #0
    7586:	d0f7      	beq.n	7578 <__udivsi3+0x100>
    7588:	e776      	b.n	7478 <__udivsi3>
    758a:	4770      	bx	lr

0000758c <__aeabi_idiv0>:
    758c:	4770      	bx	lr
    758e:	46c0      	nop			; (mov r8, r8)

00007590 <__aeabi_cfrcmple>:
    7590:	4684      	mov	ip, r0
    7592:	1c08      	adds	r0, r1, #0
    7594:	4661      	mov	r1, ip
    7596:	e7ff      	b.n	7598 <__aeabi_cfcmpeq>

00007598 <__aeabi_cfcmpeq>:
    7598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    759a:	f000 fa23 	bl	79e4 <__lesf2>
    759e:	2800      	cmp	r0, #0
    75a0:	d401      	bmi.n	75a6 <__aeabi_cfcmpeq+0xe>
    75a2:	2100      	movs	r1, #0
    75a4:	42c8      	cmn	r0, r1
    75a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000075a8 <__aeabi_fcmpeq>:
    75a8:	b510      	push	{r4, lr}
    75aa:	f000 f9b5 	bl	7918 <__eqsf2>
    75ae:	4240      	negs	r0, r0
    75b0:	3001      	adds	r0, #1
    75b2:	bd10      	pop	{r4, pc}

000075b4 <__aeabi_fcmplt>:
    75b4:	b510      	push	{r4, lr}
    75b6:	f000 fa15 	bl	79e4 <__lesf2>
    75ba:	2800      	cmp	r0, #0
    75bc:	db01      	blt.n	75c2 <__aeabi_fcmplt+0xe>
    75be:	2000      	movs	r0, #0
    75c0:	bd10      	pop	{r4, pc}
    75c2:	2001      	movs	r0, #1
    75c4:	bd10      	pop	{r4, pc}
    75c6:	46c0      	nop			; (mov r8, r8)

000075c8 <__aeabi_fcmple>:
    75c8:	b510      	push	{r4, lr}
    75ca:	f000 fa0b 	bl	79e4 <__lesf2>
    75ce:	2800      	cmp	r0, #0
    75d0:	dd01      	ble.n	75d6 <__aeabi_fcmple+0xe>
    75d2:	2000      	movs	r0, #0
    75d4:	bd10      	pop	{r4, pc}
    75d6:	2001      	movs	r0, #1
    75d8:	bd10      	pop	{r4, pc}
    75da:	46c0      	nop			; (mov r8, r8)

000075dc <__aeabi_fcmpgt>:
    75dc:	b510      	push	{r4, lr}
    75de:	f000 f9c1 	bl	7964 <__gesf2>
    75e2:	2800      	cmp	r0, #0
    75e4:	dc01      	bgt.n	75ea <__aeabi_fcmpgt+0xe>
    75e6:	2000      	movs	r0, #0
    75e8:	bd10      	pop	{r4, pc}
    75ea:	2001      	movs	r0, #1
    75ec:	bd10      	pop	{r4, pc}
    75ee:	46c0      	nop			; (mov r8, r8)

000075f0 <__aeabi_fcmpge>:
    75f0:	b510      	push	{r4, lr}
    75f2:	f000 f9b7 	bl	7964 <__gesf2>
    75f6:	2800      	cmp	r0, #0
    75f8:	da01      	bge.n	75fe <__aeabi_fcmpge+0xe>
    75fa:	2000      	movs	r0, #0
    75fc:	bd10      	pop	{r4, pc}
    75fe:	2001      	movs	r0, #1
    7600:	bd10      	pop	{r4, pc}
    7602:	46c0      	nop			; (mov r8, r8)

00007604 <__aeabi_lmul>:
    7604:	b5f0      	push	{r4, r5, r6, r7, lr}
    7606:	46ce      	mov	lr, r9
    7608:	4647      	mov	r7, r8
    760a:	0415      	lsls	r5, r2, #16
    760c:	0c2d      	lsrs	r5, r5, #16
    760e:	002e      	movs	r6, r5
    7610:	b580      	push	{r7, lr}
    7612:	0407      	lsls	r7, r0, #16
    7614:	0c14      	lsrs	r4, r2, #16
    7616:	0c3f      	lsrs	r7, r7, #16
    7618:	4699      	mov	r9, r3
    761a:	0c03      	lsrs	r3, r0, #16
    761c:	437e      	muls	r6, r7
    761e:	435d      	muls	r5, r3
    7620:	4367      	muls	r7, r4
    7622:	4363      	muls	r3, r4
    7624:	197f      	adds	r7, r7, r5
    7626:	0c34      	lsrs	r4, r6, #16
    7628:	19e4      	adds	r4, r4, r7
    762a:	469c      	mov	ip, r3
    762c:	42a5      	cmp	r5, r4
    762e:	d903      	bls.n	7638 <__aeabi_lmul+0x34>
    7630:	2380      	movs	r3, #128	; 0x80
    7632:	025b      	lsls	r3, r3, #9
    7634:	4698      	mov	r8, r3
    7636:	44c4      	add	ip, r8
    7638:	464b      	mov	r3, r9
    763a:	4351      	muls	r1, r2
    763c:	4343      	muls	r3, r0
    763e:	0436      	lsls	r6, r6, #16
    7640:	0c36      	lsrs	r6, r6, #16
    7642:	0c25      	lsrs	r5, r4, #16
    7644:	0424      	lsls	r4, r4, #16
    7646:	4465      	add	r5, ip
    7648:	19a4      	adds	r4, r4, r6
    764a:	1859      	adds	r1, r3, r1
    764c:	1949      	adds	r1, r1, r5
    764e:	0020      	movs	r0, r4
    7650:	bc0c      	pop	{r2, r3}
    7652:	4690      	mov	r8, r2
    7654:	4699      	mov	r9, r3
    7656:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007658 <__aeabi_f2uiz>:
    7658:	219e      	movs	r1, #158	; 0x9e
    765a:	b510      	push	{r4, lr}
    765c:	05c9      	lsls	r1, r1, #23
    765e:	1c04      	adds	r4, r0, #0
    7660:	f7ff ffc6 	bl	75f0 <__aeabi_fcmpge>
    7664:	2800      	cmp	r0, #0
    7666:	d103      	bne.n	7670 <__aeabi_f2uiz+0x18>
    7668:	1c20      	adds	r0, r4, #0
    766a:	f000 fcb9 	bl	7fe0 <__aeabi_f2iz>
    766e:	bd10      	pop	{r4, pc}
    7670:	219e      	movs	r1, #158	; 0x9e
    7672:	1c20      	adds	r0, r4, #0
    7674:	05c9      	lsls	r1, r1, #23
    7676:	f000 fb17 	bl	7ca8 <__aeabi_fsub>
    767a:	f000 fcb1 	bl	7fe0 <__aeabi_f2iz>
    767e:	2380      	movs	r3, #128	; 0x80
    7680:	061b      	lsls	r3, r3, #24
    7682:	469c      	mov	ip, r3
    7684:	4460      	add	r0, ip
    7686:	e7f2      	b.n	766e <__aeabi_f2uiz+0x16>

00007688 <__aeabi_fdiv>:
    7688:	b5f0      	push	{r4, r5, r6, r7, lr}
    768a:	4657      	mov	r7, sl
    768c:	464e      	mov	r6, r9
    768e:	46de      	mov	lr, fp
    7690:	4645      	mov	r5, r8
    7692:	b5e0      	push	{r5, r6, r7, lr}
    7694:	0244      	lsls	r4, r0, #9
    7696:	0043      	lsls	r3, r0, #1
    7698:	0fc6      	lsrs	r6, r0, #31
    769a:	b083      	sub	sp, #12
    769c:	1c0f      	adds	r7, r1, #0
    769e:	0a64      	lsrs	r4, r4, #9
    76a0:	0e1b      	lsrs	r3, r3, #24
    76a2:	46b2      	mov	sl, r6
    76a4:	d053      	beq.n	774e <__aeabi_fdiv+0xc6>
    76a6:	2bff      	cmp	r3, #255	; 0xff
    76a8:	d027      	beq.n	76fa <__aeabi_fdiv+0x72>
    76aa:	2280      	movs	r2, #128	; 0x80
    76ac:	00e4      	lsls	r4, r4, #3
    76ae:	04d2      	lsls	r2, r2, #19
    76b0:	4314      	orrs	r4, r2
    76b2:	227f      	movs	r2, #127	; 0x7f
    76b4:	4252      	negs	r2, r2
    76b6:	4690      	mov	r8, r2
    76b8:	4498      	add	r8, r3
    76ba:	2300      	movs	r3, #0
    76bc:	4699      	mov	r9, r3
    76be:	469b      	mov	fp, r3
    76c0:	027d      	lsls	r5, r7, #9
    76c2:	0078      	lsls	r0, r7, #1
    76c4:	0ffb      	lsrs	r3, r7, #31
    76c6:	0a6d      	lsrs	r5, r5, #9
    76c8:	0e00      	lsrs	r0, r0, #24
    76ca:	9300      	str	r3, [sp, #0]
    76cc:	d024      	beq.n	7718 <__aeabi_fdiv+0x90>
    76ce:	28ff      	cmp	r0, #255	; 0xff
    76d0:	d046      	beq.n	7760 <__aeabi_fdiv+0xd8>
    76d2:	2380      	movs	r3, #128	; 0x80
    76d4:	2100      	movs	r1, #0
    76d6:	00ed      	lsls	r5, r5, #3
    76d8:	04db      	lsls	r3, r3, #19
    76da:	431d      	orrs	r5, r3
    76dc:	387f      	subs	r0, #127	; 0x7f
    76de:	4647      	mov	r7, r8
    76e0:	1a38      	subs	r0, r7, r0
    76e2:	464f      	mov	r7, r9
    76e4:	430f      	orrs	r7, r1
    76e6:	00bf      	lsls	r7, r7, #2
    76e8:	46b9      	mov	r9, r7
    76ea:	0033      	movs	r3, r6
    76ec:	9a00      	ldr	r2, [sp, #0]
    76ee:	4f87      	ldr	r7, [pc, #540]	; (790c <__aeabi_fdiv+0x284>)
    76f0:	4053      	eors	r3, r2
    76f2:	464a      	mov	r2, r9
    76f4:	58ba      	ldr	r2, [r7, r2]
    76f6:	9301      	str	r3, [sp, #4]
    76f8:	4697      	mov	pc, r2
    76fa:	2c00      	cmp	r4, #0
    76fc:	d14e      	bne.n	779c <__aeabi_fdiv+0x114>
    76fe:	2308      	movs	r3, #8
    7700:	4699      	mov	r9, r3
    7702:	33f7      	adds	r3, #247	; 0xf7
    7704:	4698      	mov	r8, r3
    7706:	3bfd      	subs	r3, #253	; 0xfd
    7708:	469b      	mov	fp, r3
    770a:	027d      	lsls	r5, r7, #9
    770c:	0078      	lsls	r0, r7, #1
    770e:	0ffb      	lsrs	r3, r7, #31
    7710:	0a6d      	lsrs	r5, r5, #9
    7712:	0e00      	lsrs	r0, r0, #24
    7714:	9300      	str	r3, [sp, #0]
    7716:	d1da      	bne.n	76ce <__aeabi_fdiv+0x46>
    7718:	2d00      	cmp	r5, #0
    771a:	d126      	bne.n	776a <__aeabi_fdiv+0xe2>
    771c:	2000      	movs	r0, #0
    771e:	2101      	movs	r1, #1
    7720:	0033      	movs	r3, r6
    7722:	9a00      	ldr	r2, [sp, #0]
    7724:	4f7a      	ldr	r7, [pc, #488]	; (7910 <__aeabi_fdiv+0x288>)
    7726:	4053      	eors	r3, r2
    7728:	4642      	mov	r2, r8
    772a:	1a10      	subs	r0, r2, r0
    772c:	464a      	mov	r2, r9
    772e:	430a      	orrs	r2, r1
    7730:	0092      	lsls	r2, r2, #2
    7732:	58ba      	ldr	r2, [r7, r2]
    7734:	001d      	movs	r5, r3
    7736:	4697      	mov	pc, r2
    7738:	9b00      	ldr	r3, [sp, #0]
    773a:	002c      	movs	r4, r5
    773c:	469a      	mov	sl, r3
    773e:	468b      	mov	fp, r1
    7740:	465b      	mov	r3, fp
    7742:	2b02      	cmp	r3, #2
    7744:	d131      	bne.n	77aa <__aeabi_fdiv+0x122>
    7746:	4653      	mov	r3, sl
    7748:	21ff      	movs	r1, #255	; 0xff
    774a:	2400      	movs	r4, #0
    774c:	e038      	b.n	77c0 <__aeabi_fdiv+0x138>
    774e:	2c00      	cmp	r4, #0
    7750:	d117      	bne.n	7782 <__aeabi_fdiv+0xfa>
    7752:	2304      	movs	r3, #4
    7754:	4699      	mov	r9, r3
    7756:	2300      	movs	r3, #0
    7758:	4698      	mov	r8, r3
    775a:	3301      	adds	r3, #1
    775c:	469b      	mov	fp, r3
    775e:	e7af      	b.n	76c0 <__aeabi_fdiv+0x38>
    7760:	20ff      	movs	r0, #255	; 0xff
    7762:	2d00      	cmp	r5, #0
    7764:	d10b      	bne.n	777e <__aeabi_fdiv+0xf6>
    7766:	2102      	movs	r1, #2
    7768:	e7da      	b.n	7720 <__aeabi_fdiv+0x98>
    776a:	0028      	movs	r0, r5
    776c:	f002 f934 	bl	99d8 <__clzsi2>
    7770:	1f43      	subs	r3, r0, #5
    7772:	409d      	lsls	r5, r3
    7774:	2376      	movs	r3, #118	; 0x76
    7776:	425b      	negs	r3, r3
    7778:	1a18      	subs	r0, r3, r0
    777a:	2100      	movs	r1, #0
    777c:	e7af      	b.n	76de <__aeabi_fdiv+0x56>
    777e:	2103      	movs	r1, #3
    7780:	e7ad      	b.n	76de <__aeabi_fdiv+0x56>
    7782:	0020      	movs	r0, r4
    7784:	f002 f928 	bl	99d8 <__clzsi2>
    7788:	1f43      	subs	r3, r0, #5
    778a:	409c      	lsls	r4, r3
    778c:	2376      	movs	r3, #118	; 0x76
    778e:	425b      	negs	r3, r3
    7790:	1a1b      	subs	r3, r3, r0
    7792:	4698      	mov	r8, r3
    7794:	2300      	movs	r3, #0
    7796:	4699      	mov	r9, r3
    7798:	469b      	mov	fp, r3
    779a:	e791      	b.n	76c0 <__aeabi_fdiv+0x38>
    779c:	230c      	movs	r3, #12
    779e:	4699      	mov	r9, r3
    77a0:	33f3      	adds	r3, #243	; 0xf3
    77a2:	4698      	mov	r8, r3
    77a4:	3bfc      	subs	r3, #252	; 0xfc
    77a6:	469b      	mov	fp, r3
    77a8:	e78a      	b.n	76c0 <__aeabi_fdiv+0x38>
    77aa:	2b03      	cmp	r3, #3
    77ac:	d100      	bne.n	77b0 <__aeabi_fdiv+0x128>
    77ae:	e0a5      	b.n	78fc <__aeabi_fdiv+0x274>
    77b0:	4655      	mov	r5, sl
    77b2:	2b01      	cmp	r3, #1
    77b4:	d000      	beq.n	77b8 <__aeabi_fdiv+0x130>
    77b6:	e081      	b.n	78bc <__aeabi_fdiv+0x234>
    77b8:	2301      	movs	r3, #1
    77ba:	2100      	movs	r1, #0
    77bc:	2400      	movs	r4, #0
    77be:	402b      	ands	r3, r5
    77c0:	0264      	lsls	r4, r4, #9
    77c2:	05c9      	lsls	r1, r1, #23
    77c4:	0a60      	lsrs	r0, r4, #9
    77c6:	07db      	lsls	r3, r3, #31
    77c8:	4308      	orrs	r0, r1
    77ca:	4318      	orrs	r0, r3
    77cc:	b003      	add	sp, #12
    77ce:	bc3c      	pop	{r2, r3, r4, r5}
    77d0:	4690      	mov	r8, r2
    77d2:	4699      	mov	r9, r3
    77d4:	46a2      	mov	sl, r4
    77d6:	46ab      	mov	fp, r5
    77d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77da:	2480      	movs	r4, #128	; 0x80
    77dc:	2300      	movs	r3, #0
    77de:	03e4      	lsls	r4, r4, #15
    77e0:	21ff      	movs	r1, #255	; 0xff
    77e2:	e7ed      	b.n	77c0 <__aeabi_fdiv+0x138>
    77e4:	21ff      	movs	r1, #255	; 0xff
    77e6:	2400      	movs	r4, #0
    77e8:	e7ea      	b.n	77c0 <__aeabi_fdiv+0x138>
    77ea:	2301      	movs	r3, #1
    77ec:	1a59      	subs	r1, r3, r1
    77ee:	291b      	cmp	r1, #27
    77f0:	dd66      	ble.n	78c0 <__aeabi_fdiv+0x238>
    77f2:	9a01      	ldr	r2, [sp, #4]
    77f4:	4013      	ands	r3, r2
    77f6:	2100      	movs	r1, #0
    77f8:	2400      	movs	r4, #0
    77fa:	e7e1      	b.n	77c0 <__aeabi_fdiv+0x138>
    77fc:	2380      	movs	r3, #128	; 0x80
    77fe:	03db      	lsls	r3, r3, #15
    7800:	421c      	tst	r4, r3
    7802:	d038      	beq.n	7876 <__aeabi_fdiv+0x1ee>
    7804:	421d      	tst	r5, r3
    7806:	d051      	beq.n	78ac <__aeabi_fdiv+0x224>
    7808:	431c      	orrs	r4, r3
    780a:	0264      	lsls	r4, r4, #9
    780c:	0a64      	lsrs	r4, r4, #9
    780e:	0033      	movs	r3, r6
    7810:	21ff      	movs	r1, #255	; 0xff
    7812:	e7d5      	b.n	77c0 <__aeabi_fdiv+0x138>
    7814:	0163      	lsls	r3, r4, #5
    7816:	016c      	lsls	r4, r5, #5
    7818:	42a3      	cmp	r3, r4
    781a:	d23b      	bcs.n	7894 <__aeabi_fdiv+0x20c>
    781c:	261b      	movs	r6, #27
    781e:	2100      	movs	r1, #0
    7820:	3801      	subs	r0, #1
    7822:	2501      	movs	r5, #1
    7824:	001f      	movs	r7, r3
    7826:	0049      	lsls	r1, r1, #1
    7828:	005b      	lsls	r3, r3, #1
    782a:	2f00      	cmp	r7, #0
    782c:	db01      	blt.n	7832 <__aeabi_fdiv+0x1aa>
    782e:	429c      	cmp	r4, r3
    7830:	d801      	bhi.n	7836 <__aeabi_fdiv+0x1ae>
    7832:	1b1b      	subs	r3, r3, r4
    7834:	4329      	orrs	r1, r5
    7836:	3e01      	subs	r6, #1
    7838:	2e00      	cmp	r6, #0
    783a:	d1f3      	bne.n	7824 <__aeabi_fdiv+0x19c>
    783c:	001c      	movs	r4, r3
    783e:	1e63      	subs	r3, r4, #1
    7840:	419c      	sbcs	r4, r3
    7842:	430c      	orrs	r4, r1
    7844:	0001      	movs	r1, r0
    7846:	317f      	adds	r1, #127	; 0x7f
    7848:	2900      	cmp	r1, #0
    784a:	ddce      	ble.n	77ea <__aeabi_fdiv+0x162>
    784c:	0763      	lsls	r3, r4, #29
    784e:	d004      	beq.n	785a <__aeabi_fdiv+0x1d2>
    7850:	230f      	movs	r3, #15
    7852:	4023      	ands	r3, r4
    7854:	2b04      	cmp	r3, #4
    7856:	d000      	beq.n	785a <__aeabi_fdiv+0x1d2>
    7858:	3404      	adds	r4, #4
    785a:	0123      	lsls	r3, r4, #4
    785c:	d503      	bpl.n	7866 <__aeabi_fdiv+0x1de>
    785e:	0001      	movs	r1, r0
    7860:	4b2c      	ldr	r3, [pc, #176]	; (7914 <__aeabi_fdiv+0x28c>)
    7862:	3180      	adds	r1, #128	; 0x80
    7864:	401c      	ands	r4, r3
    7866:	29fe      	cmp	r1, #254	; 0xfe
    7868:	dd0d      	ble.n	7886 <__aeabi_fdiv+0x1fe>
    786a:	2301      	movs	r3, #1
    786c:	9a01      	ldr	r2, [sp, #4]
    786e:	21ff      	movs	r1, #255	; 0xff
    7870:	4013      	ands	r3, r2
    7872:	2400      	movs	r4, #0
    7874:	e7a4      	b.n	77c0 <__aeabi_fdiv+0x138>
    7876:	2380      	movs	r3, #128	; 0x80
    7878:	03db      	lsls	r3, r3, #15
    787a:	431c      	orrs	r4, r3
    787c:	0264      	lsls	r4, r4, #9
    787e:	0a64      	lsrs	r4, r4, #9
    7880:	0033      	movs	r3, r6
    7882:	21ff      	movs	r1, #255	; 0xff
    7884:	e79c      	b.n	77c0 <__aeabi_fdiv+0x138>
    7886:	2301      	movs	r3, #1
    7888:	9a01      	ldr	r2, [sp, #4]
    788a:	01a4      	lsls	r4, r4, #6
    788c:	0a64      	lsrs	r4, r4, #9
    788e:	b2c9      	uxtb	r1, r1
    7890:	4013      	ands	r3, r2
    7892:	e795      	b.n	77c0 <__aeabi_fdiv+0x138>
    7894:	1b1b      	subs	r3, r3, r4
    7896:	261a      	movs	r6, #26
    7898:	2101      	movs	r1, #1
    789a:	e7c2      	b.n	7822 <__aeabi_fdiv+0x19a>
    789c:	9b00      	ldr	r3, [sp, #0]
    789e:	468b      	mov	fp, r1
    78a0:	469a      	mov	sl, r3
    78a2:	2400      	movs	r4, #0
    78a4:	e74c      	b.n	7740 <__aeabi_fdiv+0xb8>
    78a6:	0263      	lsls	r3, r4, #9
    78a8:	d5e5      	bpl.n	7876 <__aeabi_fdiv+0x1ee>
    78aa:	2500      	movs	r5, #0
    78ac:	2480      	movs	r4, #128	; 0x80
    78ae:	03e4      	lsls	r4, r4, #15
    78b0:	432c      	orrs	r4, r5
    78b2:	0264      	lsls	r4, r4, #9
    78b4:	0a64      	lsrs	r4, r4, #9
    78b6:	9b00      	ldr	r3, [sp, #0]
    78b8:	21ff      	movs	r1, #255	; 0xff
    78ba:	e781      	b.n	77c0 <__aeabi_fdiv+0x138>
    78bc:	9501      	str	r5, [sp, #4]
    78be:	e7c1      	b.n	7844 <__aeabi_fdiv+0x1bc>
    78c0:	0023      	movs	r3, r4
    78c2:	2020      	movs	r0, #32
    78c4:	40cb      	lsrs	r3, r1
    78c6:	1a41      	subs	r1, r0, r1
    78c8:	408c      	lsls	r4, r1
    78ca:	1e61      	subs	r1, r4, #1
    78cc:	418c      	sbcs	r4, r1
    78ce:	431c      	orrs	r4, r3
    78d0:	0763      	lsls	r3, r4, #29
    78d2:	d004      	beq.n	78de <__aeabi_fdiv+0x256>
    78d4:	230f      	movs	r3, #15
    78d6:	4023      	ands	r3, r4
    78d8:	2b04      	cmp	r3, #4
    78da:	d000      	beq.n	78de <__aeabi_fdiv+0x256>
    78dc:	3404      	adds	r4, #4
    78de:	0163      	lsls	r3, r4, #5
    78e0:	d505      	bpl.n	78ee <__aeabi_fdiv+0x266>
    78e2:	2301      	movs	r3, #1
    78e4:	9a01      	ldr	r2, [sp, #4]
    78e6:	2101      	movs	r1, #1
    78e8:	4013      	ands	r3, r2
    78ea:	2400      	movs	r4, #0
    78ec:	e768      	b.n	77c0 <__aeabi_fdiv+0x138>
    78ee:	2301      	movs	r3, #1
    78f0:	9a01      	ldr	r2, [sp, #4]
    78f2:	01a4      	lsls	r4, r4, #6
    78f4:	0a64      	lsrs	r4, r4, #9
    78f6:	4013      	ands	r3, r2
    78f8:	2100      	movs	r1, #0
    78fa:	e761      	b.n	77c0 <__aeabi_fdiv+0x138>
    78fc:	2380      	movs	r3, #128	; 0x80
    78fe:	03db      	lsls	r3, r3, #15
    7900:	431c      	orrs	r4, r3
    7902:	0264      	lsls	r4, r4, #9
    7904:	0a64      	lsrs	r4, r4, #9
    7906:	4653      	mov	r3, sl
    7908:	21ff      	movs	r1, #255	; 0xff
    790a:	e759      	b.n	77c0 <__aeabi_fdiv+0x138>
    790c:	0000b94c 	.word	0x0000b94c
    7910:	0000b98c 	.word	0x0000b98c
    7914:	f7ffffff 	.word	0xf7ffffff

00007918 <__eqsf2>:
    7918:	b570      	push	{r4, r5, r6, lr}
    791a:	0042      	lsls	r2, r0, #1
    791c:	0245      	lsls	r5, r0, #9
    791e:	024e      	lsls	r6, r1, #9
    7920:	004c      	lsls	r4, r1, #1
    7922:	0fc3      	lsrs	r3, r0, #31
    7924:	0a6d      	lsrs	r5, r5, #9
    7926:	0e12      	lsrs	r2, r2, #24
    7928:	0a76      	lsrs	r6, r6, #9
    792a:	0e24      	lsrs	r4, r4, #24
    792c:	0fc9      	lsrs	r1, r1, #31
    792e:	2001      	movs	r0, #1
    7930:	2aff      	cmp	r2, #255	; 0xff
    7932:	d006      	beq.n	7942 <__eqsf2+0x2a>
    7934:	2cff      	cmp	r4, #255	; 0xff
    7936:	d003      	beq.n	7940 <__eqsf2+0x28>
    7938:	42a2      	cmp	r2, r4
    793a:	d101      	bne.n	7940 <__eqsf2+0x28>
    793c:	42b5      	cmp	r5, r6
    793e:	d006      	beq.n	794e <__eqsf2+0x36>
    7940:	bd70      	pop	{r4, r5, r6, pc}
    7942:	2d00      	cmp	r5, #0
    7944:	d1fc      	bne.n	7940 <__eqsf2+0x28>
    7946:	2cff      	cmp	r4, #255	; 0xff
    7948:	d1fa      	bne.n	7940 <__eqsf2+0x28>
    794a:	2e00      	cmp	r6, #0
    794c:	d1f8      	bne.n	7940 <__eqsf2+0x28>
    794e:	428b      	cmp	r3, r1
    7950:	d006      	beq.n	7960 <__eqsf2+0x48>
    7952:	2001      	movs	r0, #1
    7954:	2a00      	cmp	r2, #0
    7956:	d1f3      	bne.n	7940 <__eqsf2+0x28>
    7958:	0028      	movs	r0, r5
    795a:	1e45      	subs	r5, r0, #1
    795c:	41a8      	sbcs	r0, r5
    795e:	e7ef      	b.n	7940 <__eqsf2+0x28>
    7960:	2000      	movs	r0, #0
    7962:	e7ed      	b.n	7940 <__eqsf2+0x28>

00007964 <__gesf2>:
    7964:	b5f0      	push	{r4, r5, r6, r7, lr}
    7966:	0042      	lsls	r2, r0, #1
    7968:	0245      	lsls	r5, r0, #9
    796a:	024c      	lsls	r4, r1, #9
    796c:	0fc3      	lsrs	r3, r0, #31
    796e:	0048      	lsls	r0, r1, #1
    7970:	0a6d      	lsrs	r5, r5, #9
    7972:	0e12      	lsrs	r2, r2, #24
    7974:	0a64      	lsrs	r4, r4, #9
    7976:	0e00      	lsrs	r0, r0, #24
    7978:	0fc9      	lsrs	r1, r1, #31
    797a:	2aff      	cmp	r2, #255	; 0xff
    797c:	d01e      	beq.n	79bc <__gesf2+0x58>
    797e:	28ff      	cmp	r0, #255	; 0xff
    7980:	d021      	beq.n	79c6 <__gesf2+0x62>
    7982:	2a00      	cmp	r2, #0
    7984:	d10a      	bne.n	799c <__gesf2+0x38>
    7986:	426e      	negs	r6, r5
    7988:	416e      	adcs	r6, r5
    798a:	b2f6      	uxtb	r6, r6
    798c:	2800      	cmp	r0, #0
    798e:	d10f      	bne.n	79b0 <__gesf2+0x4c>
    7990:	2c00      	cmp	r4, #0
    7992:	d10d      	bne.n	79b0 <__gesf2+0x4c>
    7994:	2000      	movs	r0, #0
    7996:	2d00      	cmp	r5, #0
    7998:	d009      	beq.n	79ae <__gesf2+0x4a>
    799a:	e005      	b.n	79a8 <__gesf2+0x44>
    799c:	2800      	cmp	r0, #0
    799e:	d101      	bne.n	79a4 <__gesf2+0x40>
    79a0:	2c00      	cmp	r4, #0
    79a2:	d001      	beq.n	79a8 <__gesf2+0x44>
    79a4:	428b      	cmp	r3, r1
    79a6:	d011      	beq.n	79cc <__gesf2+0x68>
    79a8:	2101      	movs	r1, #1
    79aa:	4258      	negs	r0, r3
    79ac:	4308      	orrs	r0, r1
    79ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    79b0:	2e00      	cmp	r6, #0
    79b2:	d0f7      	beq.n	79a4 <__gesf2+0x40>
    79b4:	2001      	movs	r0, #1
    79b6:	3901      	subs	r1, #1
    79b8:	4308      	orrs	r0, r1
    79ba:	e7f8      	b.n	79ae <__gesf2+0x4a>
    79bc:	2d00      	cmp	r5, #0
    79be:	d0de      	beq.n	797e <__gesf2+0x1a>
    79c0:	2002      	movs	r0, #2
    79c2:	4240      	negs	r0, r0
    79c4:	e7f3      	b.n	79ae <__gesf2+0x4a>
    79c6:	2c00      	cmp	r4, #0
    79c8:	d0db      	beq.n	7982 <__gesf2+0x1e>
    79ca:	e7f9      	b.n	79c0 <__gesf2+0x5c>
    79cc:	4282      	cmp	r2, r0
    79ce:	dceb      	bgt.n	79a8 <__gesf2+0x44>
    79d0:	db04      	blt.n	79dc <__gesf2+0x78>
    79d2:	42a5      	cmp	r5, r4
    79d4:	d8e8      	bhi.n	79a8 <__gesf2+0x44>
    79d6:	2000      	movs	r0, #0
    79d8:	42a5      	cmp	r5, r4
    79da:	d2e8      	bcs.n	79ae <__gesf2+0x4a>
    79dc:	2101      	movs	r1, #1
    79de:	1e58      	subs	r0, r3, #1
    79e0:	4308      	orrs	r0, r1
    79e2:	e7e4      	b.n	79ae <__gesf2+0x4a>

000079e4 <__lesf2>:
    79e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    79e6:	0042      	lsls	r2, r0, #1
    79e8:	024d      	lsls	r5, r1, #9
    79ea:	004c      	lsls	r4, r1, #1
    79ec:	0246      	lsls	r6, r0, #9
    79ee:	0a76      	lsrs	r6, r6, #9
    79f0:	0e12      	lsrs	r2, r2, #24
    79f2:	0fc3      	lsrs	r3, r0, #31
    79f4:	0a6d      	lsrs	r5, r5, #9
    79f6:	0e24      	lsrs	r4, r4, #24
    79f8:	0fc9      	lsrs	r1, r1, #31
    79fa:	2aff      	cmp	r2, #255	; 0xff
    79fc:	d016      	beq.n	7a2c <__lesf2+0x48>
    79fe:	2cff      	cmp	r4, #255	; 0xff
    7a00:	d018      	beq.n	7a34 <__lesf2+0x50>
    7a02:	2a00      	cmp	r2, #0
    7a04:	d10a      	bne.n	7a1c <__lesf2+0x38>
    7a06:	4270      	negs	r0, r6
    7a08:	4170      	adcs	r0, r6
    7a0a:	b2c0      	uxtb	r0, r0
    7a0c:	2c00      	cmp	r4, #0
    7a0e:	d015      	beq.n	7a3c <__lesf2+0x58>
    7a10:	2800      	cmp	r0, #0
    7a12:	d005      	beq.n	7a20 <__lesf2+0x3c>
    7a14:	2001      	movs	r0, #1
    7a16:	3901      	subs	r1, #1
    7a18:	4308      	orrs	r0, r1
    7a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a1c:	2c00      	cmp	r4, #0
    7a1e:	d013      	beq.n	7a48 <__lesf2+0x64>
    7a20:	4299      	cmp	r1, r3
    7a22:	d014      	beq.n	7a4e <__lesf2+0x6a>
    7a24:	2001      	movs	r0, #1
    7a26:	425b      	negs	r3, r3
    7a28:	4318      	orrs	r0, r3
    7a2a:	e7f6      	b.n	7a1a <__lesf2+0x36>
    7a2c:	2002      	movs	r0, #2
    7a2e:	2e00      	cmp	r6, #0
    7a30:	d1f3      	bne.n	7a1a <__lesf2+0x36>
    7a32:	e7e4      	b.n	79fe <__lesf2+0x1a>
    7a34:	2002      	movs	r0, #2
    7a36:	2d00      	cmp	r5, #0
    7a38:	d1ef      	bne.n	7a1a <__lesf2+0x36>
    7a3a:	e7e2      	b.n	7a02 <__lesf2+0x1e>
    7a3c:	2d00      	cmp	r5, #0
    7a3e:	d1e7      	bne.n	7a10 <__lesf2+0x2c>
    7a40:	2000      	movs	r0, #0
    7a42:	2e00      	cmp	r6, #0
    7a44:	d0e9      	beq.n	7a1a <__lesf2+0x36>
    7a46:	e7ed      	b.n	7a24 <__lesf2+0x40>
    7a48:	2d00      	cmp	r5, #0
    7a4a:	d1e9      	bne.n	7a20 <__lesf2+0x3c>
    7a4c:	e7ea      	b.n	7a24 <__lesf2+0x40>
    7a4e:	42a2      	cmp	r2, r4
    7a50:	dc06      	bgt.n	7a60 <__lesf2+0x7c>
    7a52:	dbdf      	blt.n	7a14 <__lesf2+0x30>
    7a54:	42ae      	cmp	r6, r5
    7a56:	d803      	bhi.n	7a60 <__lesf2+0x7c>
    7a58:	2000      	movs	r0, #0
    7a5a:	42ae      	cmp	r6, r5
    7a5c:	d3da      	bcc.n	7a14 <__lesf2+0x30>
    7a5e:	e7dc      	b.n	7a1a <__lesf2+0x36>
    7a60:	2001      	movs	r0, #1
    7a62:	4249      	negs	r1, r1
    7a64:	4308      	orrs	r0, r1
    7a66:	e7d8      	b.n	7a1a <__lesf2+0x36>

00007a68 <__aeabi_fmul>:
    7a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a6a:	4657      	mov	r7, sl
    7a6c:	464e      	mov	r6, r9
    7a6e:	4645      	mov	r5, r8
    7a70:	46de      	mov	lr, fp
    7a72:	b5e0      	push	{r5, r6, r7, lr}
    7a74:	0247      	lsls	r7, r0, #9
    7a76:	0046      	lsls	r6, r0, #1
    7a78:	4688      	mov	r8, r1
    7a7a:	0a7f      	lsrs	r7, r7, #9
    7a7c:	0e36      	lsrs	r6, r6, #24
    7a7e:	0fc4      	lsrs	r4, r0, #31
    7a80:	2e00      	cmp	r6, #0
    7a82:	d047      	beq.n	7b14 <__aeabi_fmul+0xac>
    7a84:	2eff      	cmp	r6, #255	; 0xff
    7a86:	d024      	beq.n	7ad2 <__aeabi_fmul+0x6a>
    7a88:	00fb      	lsls	r3, r7, #3
    7a8a:	2780      	movs	r7, #128	; 0x80
    7a8c:	04ff      	lsls	r7, r7, #19
    7a8e:	431f      	orrs	r7, r3
    7a90:	2300      	movs	r3, #0
    7a92:	4699      	mov	r9, r3
    7a94:	469a      	mov	sl, r3
    7a96:	3e7f      	subs	r6, #127	; 0x7f
    7a98:	4643      	mov	r3, r8
    7a9a:	025d      	lsls	r5, r3, #9
    7a9c:	0058      	lsls	r0, r3, #1
    7a9e:	0fdb      	lsrs	r3, r3, #31
    7aa0:	0a6d      	lsrs	r5, r5, #9
    7aa2:	0e00      	lsrs	r0, r0, #24
    7aa4:	4698      	mov	r8, r3
    7aa6:	d043      	beq.n	7b30 <__aeabi_fmul+0xc8>
    7aa8:	28ff      	cmp	r0, #255	; 0xff
    7aaa:	d03b      	beq.n	7b24 <__aeabi_fmul+0xbc>
    7aac:	00eb      	lsls	r3, r5, #3
    7aae:	2580      	movs	r5, #128	; 0x80
    7ab0:	2200      	movs	r2, #0
    7ab2:	04ed      	lsls	r5, r5, #19
    7ab4:	431d      	orrs	r5, r3
    7ab6:	387f      	subs	r0, #127	; 0x7f
    7ab8:	1836      	adds	r6, r6, r0
    7aba:	1c73      	adds	r3, r6, #1
    7abc:	4641      	mov	r1, r8
    7abe:	469b      	mov	fp, r3
    7ac0:	464b      	mov	r3, r9
    7ac2:	4061      	eors	r1, r4
    7ac4:	4313      	orrs	r3, r2
    7ac6:	2b0f      	cmp	r3, #15
    7ac8:	d864      	bhi.n	7b94 <__aeabi_fmul+0x12c>
    7aca:	4875      	ldr	r0, [pc, #468]	; (7ca0 <__aeabi_fmul+0x238>)
    7acc:	009b      	lsls	r3, r3, #2
    7ace:	58c3      	ldr	r3, [r0, r3]
    7ad0:	469f      	mov	pc, r3
    7ad2:	2f00      	cmp	r7, #0
    7ad4:	d142      	bne.n	7b5c <__aeabi_fmul+0xf4>
    7ad6:	2308      	movs	r3, #8
    7ad8:	4699      	mov	r9, r3
    7ada:	3b06      	subs	r3, #6
    7adc:	26ff      	movs	r6, #255	; 0xff
    7ade:	469a      	mov	sl, r3
    7ae0:	e7da      	b.n	7a98 <__aeabi_fmul+0x30>
    7ae2:	4641      	mov	r1, r8
    7ae4:	2a02      	cmp	r2, #2
    7ae6:	d028      	beq.n	7b3a <__aeabi_fmul+0xd2>
    7ae8:	2a03      	cmp	r2, #3
    7aea:	d100      	bne.n	7aee <__aeabi_fmul+0x86>
    7aec:	e0ce      	b.n	7c8c <__aeabi_fmul+0x224>
    7aee:	2a01      	cmp	r2, #1
    7af0:	d000      	beq.n	7af4 <__aeabi_fmul+0x8c>
    7af2:	e0ac      	b.n	7c4e <__aeabi_fmul+0x1e6>
    7af4:	4011      	ands	r1, r2
    7af6:	2000      	movs	r0, #0
    7af8:	2200      	movs	r2, #0
    7afa:	b2cc      	uxtb	r4, r1
    7afc:	0240      	lsls	r0, r0, #9
    7afe:	05d2      	lsls	r2, r2, #23
    7b00:	0a40      	lsrs	r0, r0, #9
    7b02:	07e4      	lsls	r4, r4, #31
    7b04:	4310      	orrs	r0, r2
    7b06:	4320      	orrs	r0, r4
    7b08:	bc3c      	pop	{r2, r3, r4, r5}
    7b0a:	4690      	mov	r8, r2
    7b0c:	4699      	mov	r9, r3
    7b0e:	46a2      	mov	sl, r4
    7b10:	46ab      	mov	fp, r5
    7b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b14:	2f00      	cmp	r7, #0
    7b16:	d115      	bne.n	7b44 <__aeabi_fmul+0xdc>
    7b18:	2304      	movs	r3, #4
    7b1a:	4699      	mov	r9, r3
    7b1c:	3b03      	subs	r3, #3
    7b1e:	2600      	movs	r6, #0
    7b20:	469a      	mov	sl, r3
    7b22:	e7b9      	b.n	7a98 <__aeabi_fmul+0x30>
    7b24:	20ff      	movs	r0, #255	; 0xff
    7b26:	2202      	movs	r2, #2
    7b28:	2d00      	cmp	r5, #0
    7b2a:	d0c5      	beq.n	7ab8 <__aeabi_fmul+0x50>
    7b2c:	2203      	movs	r2, #3
    7b2e:	e7c3      	b.n	7ab8 <__aeabi_fmul+0x50>
    7b30:	2d00      	cmp	r5, #0
    7b32:	d119      	bne.n	7b68 <__aeabi_fmul+0x100>
    7b34:	2000      	movs	r0, #0
    7b36:	2201      	movs	r2, #1
    7b38:	e7be      	b.n	7ab8 <__aeabi_fmul+0x50>
    7b3a:	2401      	movs	r4, #1
    7b3c:	22ff      	movs	r2, #255	; 0xff
    7b3e:	400c      	ands	r4, r1
    7b40:	2000      	movs	r0, #0
    7b42:	e7db      	b.n	7afc <__aeabi_fmul+0x94>
    7b44:	0038      	movs	r0, r7
    7b46:	f001 ff47 	bl	99d8 <__clzsi2>
    7b4a:	2676      	movs	r6, #118	; 0x76
    7b4c:	1f43      	subs	r3, r0, #5
    7b4e:	409f      	lsls	r7, r3
    7b50:	2300      	movs	r3, #0
    7b52:	4276      	negs	r6, r6
    7b54:	1a36      	subs	r6, r6, r0
    7b56:	4699      	mov	r9, r3
    7b58:	469a      	mov	sl, r3
    7b5a:	e79d      	b.n	7a98 <__aeabi_fmul+0x30>
    7b5c:	230c      	movs	r3, #12
    7b5e:	4699      	mov	r9, r3
    7b60:	3b09      	subs	r3, #9
    7b62:	26ff      	movs	r6, #255	; 0xff
    7b64:	469a      	mov	sl, r3
    7b66:	e797      	b.n	7a98 <__aeabi_fmul+0x30>
    7b68:	0028      	movs	r0, r5
    7b6a:	f001 ff35 	bl	99d8 <__clzsi2>
    7b6e:	1f43      	subs	r3, r0, #5
    7b70:	409d      	lsls	r5, r3
    7b72:	2376      	movs	r3, #118	; 0x76
    7b74:	425b      	negs	r3, r3
    7b76:	1a18      	subs	r0, r3, r0
    7b78:	2200      	movs	r2, #0
    7b7a:	e79d      	b.n	7ab8 <__aeabi_fmul+0x50>
    7b7c:	2080      	movs	r0, #128	; 0x80
    7b7e:	2400      	movs	r4, #0
    7b80:	03c0      	lsls	r0, r0, #15
    7b82:	22ff      	movs	r2, #255	; 0xff
    7b84:	e7ba      	b.n	7afc <__aeabi_fmul+0x94>
    7b86:	003d      	movs	r5, r7
    7b88:	4652      	mov	r2, sl
    7b8a:	e7ab      	b.n	7ae4 <__aeabi_fmul+0x7c>
    7b8c:	003d      	movs	r5, r7
    7b8e:	0021      	movs	r1, r4
    7b90:	4652      	mov	r2, sl
    7b92:	e7a7      	b.n	7ae4 <__aeabi_fmul+0x7c>
    7b94:	0c3b      	lsrs	r3, r7, #16
    7b96:	469c      	mov	ip, r3
    7b98:	042a      	lsls	r2, r5, #16
    7b9a:	0c12      	lsrs	r2, r2, #16
    7b9c:	0c2b      	lsrs	r3, r5, #16
    7b9e:	0014      	movs	r4, r2
    7ba0:	4660      	mov	r0, ip
    7ba2:	4665      	mov	r5, ip
    7ba4:	043f      	lsls	r7, r7, #16
    7ba6:	0c3f      	lsrs	r7, r7, #16
    7ba8:	437c      	muls	r4, r7
    7baa:	4342      	muls	r2, r0
    7bac:	435d      	muls	r5, r3
    7bae:	437b      	muls	r3, r7
    7bb0:	0c27      	lsrs	r7, r4, #16
    7bb2:	189b      	adds	r3, r3, r2
    7bb4:	18ff      	adds	r7, r7, r3
    7bb6:	42ba      	cmp	r2, r7
    7bb8:	d903      	bls.n	7bc2 <__aeabi_fmul+0x15a>
    7bba:	2380      	movs	r3, #128	; 0x80
    7bbc:	025b      	lsls	r3, r3, #9
    7bbe:	469c      	mov	ip, r3
    7bc0:	4465      	add	r5, ip
    7bc2:	0424      	lsls	r4, r4, #16
    7bc4:	043a      	lsls	r2, r7, #16
    7bc6:	0c24      	lsrs	r4, r4, #16
    7bc8:	1912      	adds	r2, r2, r4
    7bca:	0193      	lsls	r3, r2, #6
    7bcc:	1e5c      	subs	r4, r3, #1
    7bce:	41a3      	sbcs	r3, r4
    7bd0:	0c3f      	lsrs	r7, r7, #16
    7bd2:	0e92      	lsrs	r2, r2, #26
    7bd4:	197d      	adds	r5, r7, r5
    7bd6:	431a      	orrs	r2, r3
    7bd8:	01ad      	lsls	r5, r5, #6
    7bda:	4315      	orrs	r5, r2
    7bdc:	012b      	lsls	r3, r5, #4
    7bde:	d504      	bpl.n	7bea <__aeabi_fmul+0x182>
    7be0:	2301      	movs	r3, #1
    7be2:	465e      	mov	r6, fp
    7be4:	086a      	lsrs	r2, r5, #1
    7be6:	401d      	ands	r5, r3
    7be8:	4315      	orrs	r5, r2
    7bea:	0032      	movs	r2, r6
    7bec:	327f      	adds	r2, #127	; 0x7f
    7bee:	2a00      	cmp	r2, #0
    7bf0:	dd25      	ble.n	7c3e <__aeabi_fmul+0x1d6>
    7bf2:	076b      	lsls	r3, r5, #29
    7bf4:	d004      	beq.n	7c00 <__aeabi_fmul+0x198>
    7bf6:	230f      	movs	r3, #15
    7bf8:	402b      	ands	r3, r5
    7bfa:	2b04      	cmp	r3, #4
    7bfc:	d000      	beq.n	7c00 <__aeabi_fmul+0x198>
    7bfe:	3504      	adds	r5, #4
    7c00:	012b      	lsls	r3, r5, #4
    7c02:	d503      	bpl.n	7c0c <__aeabi_fmul+0x1a4>
    7c04:	0032      	movs	r2, r6
    7c06:	4b27      	ldr	r3, [pc, #156]	; (7ca4 <__aeabi_fmul+0x23c>)
    7c08:	3280      	adds	r2, #128	; 0x80
    7c0a:	401d      	ands	r5, r3
    7c0c:	2afe      	cmp	r2, #254	; 0xfe
    7c0e:	dc94      	bgt.n	7b3a <__aeabi_fmul+0xd2>
    7c10:	2401      	movs	r4, #1
    7c12:	01a8      	lsls	r0, r5, #6
    7c14:	0a40      	lsrs	r0, r0, #9
    7c16:	b2d2      	uxtb	r2, r2
    7c18:	400c      	ands	r4, r1
    7c1a:	e76f      	b.n	7afc <__aeabi_fmul+0x94>
    7c1c:	2080      	movs	r0, #128	; 0x80
    7c1e:	03c0      	lsls	r0, r0, #15
    7c20:	4207      	tst	r7, r0
    7c22:	d007      	beq.n	7c34 <__aeabi_fmul+0x1cc>
    7c24:	4205      	tst	r5, r0
    7c26:	d105      	bne.n	7c34 <__aeabi_fmul+0x1cc>
    7c28:	4328      	orrs	r0, r5
    7c2a:	0240      	lsls	r0, r0, #9
    7c2c:	0a40      	lsrs	r0, r0, #9
    7c2e:	4644      	mov	r4, r8
    7c30:	22ff      	movs	r2, #255	; 0xff
    7c32:	e763      	b.n	7afc <__aeabi_fmul+0x94>
    7c34:	4338      	orrs	r0, r7
    7c36:	0240      	lsls	r0, r0, #9
    7c38:	0a40      	lsrs	r0, r0, #9
    7c3a:	22ff      	movs	r2, #255	; 0xff
    7c3c:	e75e      	b.n	7afc <__aeabi_fmul+0x94>
    7c3e:	2401      	movs	r4, #1
    7c40:	1aa3      	subs	r3, r4, r2
    7c42:	2b1b      	cmp	r3, #27
    7c44:	dd05      	ble.n	7c52 <__aeabi_fmul+0x1ea>
    7c46:	400c      	ands	r4, r1
    7c48:	2200      	movs	r2, #0
    7c4a:	2000      	movs	r0, #0
    7c4c:	e756      	b.n	7afc <__aeabi_fmul+0x94>
    7c4e:	465e      	mov	r6, fp
    7c50:	e7cb      	b.n	7bea <__aeabi_fmul+0x182>
    7c52:	002a      	movs	r2, r5
    7c54:	2020      	movs	r0, #32
    7c56:	40da      	lsrs	r2, r3
    7c58:	1ac3      	subs	r3, r0, r3
    7c5a:	409d      	lsls	r5, r3
    7c5c:	002b      	movs	r3, r5
    7c5e:	1e5d      	subs	r5, r3, #1
    7c60:	41ab      	sbcs	r3, r5
    7c62:	4313      	orrs	r3, r2
    7c64:	075a      	lsls	r2, r3, #29
    7c66:	d004      	beq.n	7c72 <__aeabi_fmul+0x20a>
    7c68:	220f      	movs	r2, #15
    7c6a:	401a      	ands	r2, r3
    7c6c:	2a04      	cmp	r2, #4
    7c6e:	d000      	beq.n	7c72 <__aeabi_fmul+0x20a>
    7c70:	3304      	adds	r3, #4
    7c72:	015a      	lsls	r2, r3, #5
    7c74:	d504      	bpl.n	7c80 <__aeabi_fmul+0x218>
    7c76:	2401      	movs	r4, #1
    7c78:	2201      	movs	r2, #1
    7c7a:	400c      	ands	r4, r1
    7c7c:	2000      	movs	r0, #0
    7c7e:	e73d      	b.n	7afc <__aeabi_fmul+0x94>
    7c80:	2401      	movs	r4, #1
    7c82:	019b      	lsls	r3, r3, #6
    7c84:	0a58      	lsrs	r0, r3, #9
    7c86:	400c      	ands	r4, r1
    7c88:	2200      	movs	r2, #0
    7c8a:	e737      	b.n	7afc <__aeabi_fmul+0x94>
    7c8c:	2080      	movs	r0, #128	; 0x80
    7c8e:	2401      	movs	r4, #1
    7c90:	03c0      	lsls	r0, r0, #15
    7c92:	4328      	orrs	r0, r5
    7c94:	0240      	lsls	r0, r0, #9
    7c96:	0a40      	lsrs	r0, r0, #9
    7c98:	400c      	ands	r4, r1
    7c9a:	22ff      	movs	r2, #255	; 0xff
    7c9c:	e72e      	b.n	7afc <__aeabi_fmul+0x94>
    7c9e:	46c0      	nop			; (mov r8, r8)
    7ca0:	0000b9cc 	.word	0x0000b9cc
    7ca4:	f7ffffff 	.word	0xf7ffffff

00007ca8 <__aeabi_fsub>:
    7ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7caa:	464f      	mov	r7, r9
    7cac:	46d6      	mov	lr, sl
    7cae:	4646      	mov	r6, r8
    7cb0:	0044      	lsls	r4, r0, #1
    7cb2:	b5c0      	push	{r6, r7, lr}
    7cb4:	0fc2      	lsrs	r2, r0, #31
    7cb6:	0247      	lsls	r7, r0, #9
    7cb8:	0248      	lsls	r0, r1, #9
    7cba:	0a40      	lsrs	r0, r0, #9
    7cbc:	4684      	mov	ip, r0
    7cbe:	4666      	mov	r6, ip
    7cc0:	0a7b      	lsrs	r3, r7, #9
    7cc2:	0048      	lsls	r0, r1, #1
    7cc4:	0fc9      	lsrs	r1, r1, #31
    7cc6:	469a      	mov	sl, r3
    7cc8:	0e24      	lsrs	r4, r4, #24
    7cca:	0015      	movs	r5, r2
    7ccc:	00db      	lsls	r3, r3, #3
    7cce:	0e00      	lsrs	r0, r0, #24
    7cd0:	4689      	mov	r9, r1
    7cd2:	00f6      	lsls	r6, r6, #3
    7cd4:	28ff      	cmp	r0, #255	; 0xff
    7cd6:	d100      	bne.n	7cda <__aeabi_fsub+0x32>
    7cd8:	e08f      	b.n	7dfa <__aeabi_fsub+0x152>
    7cda:	2101      	movs	r1, #1
    7cdc:	464f      	mov	r7, r9
    7cde:	404f      	eors	r7, r1
    7ce0:	0039      	movs	r1, r7
    7ce2:	4291      	cmp	r1, r2
    7ce4:	d066      	beq.n	7db4 <__aeabi_fsub+0x10c>
    7ce6:	1a22      	subs	r2, r4, r0
    7ce8:	2a00      	cmp	r2, #0
    7cea:	dc00      	bgt.n	7cee <__aeabi_fsub+0x46>
    7cec:	e09d      	b.n	7e2a <__aeabi_fsub+0x182>
    7cee:	2800      	cmp	r0, #0
    7cf0:	d13d      	bne.n	7d6e <__aeabi_fsub+0xc6>
    7cf2:	2e00      	cmp	r6, #0
    7cf4:	d100      	bne.n	7cf8 <__aeabi_fsub+0x50>
    7cf6:	e08b      	b.n	7e10 <__aeabi_fsub+0x168>
    7cf8:	1e51      	subs	r1, r2, #1
    7cfa:	2900      	cmp	r1, #0
    7cfc:	d000      	beq.n	7d00 <__aeabi_fsub+0x58>
    7cfe:	e0b5      	b.n	7e6c <__aeabi_fsub+0x1c4>
    7d00:	2401      	movs	r4, #1
    7d02:	1b9b      	subs	r3, r3, r6
    7d04:	015a      	lsls	r2, r3, #5
    7d06:	d544      	bpl.n	7d92 <__aeabi_fsub+0xea>
    7d08:	019b      	lsls	r3, r3, #6
    7d0a:	099f      	lsrs	r7, r3, #6
    7d0c:	0038      	movs	r0, r7
    7d0e:	f001 fe63 	bl	99d8 <__clzsi2>
    7d12:	3805      	subs	r0, #5
    7d14:	4087      	lsls	r7, r0
    7d16:	4284      	cmp	r4, r0
    7d18:	dd00      	ble.n	7d1c <__aeabi_fsub+0x74>
    7d1a:	e096      	b.n	7e4a <__aeabi_fsub+0x1a2>
    7d1c:	1b04      	subs	r4, r0, r4
    7d1e:	003a      	movs	r2, r7
    7d20:	2020      	movs	r0, #32
    7d22:	3401      	adds	r4, #1
    7d24:	40e2      	lsrs	r2, r4
    7d26:	1b04      	subs	r4, r0, r4
    7d28:	40a7      	lsls	r7, r4
    7d2a:	003b      	movs	r3, r7
    7d2c:	1e5f      	subs	r7, r3, #1
    7d2e:	41bb      	sbcs	r3, r7
    7d30:	2400      	movs	r4, #0
    7d32:	4313      	orrs	r3, r2
    7d34:	075a      	lsls	r2, r3, #29
    7d36:	d004      	beq.n	7d42 <__aeabi_fsub+0x9a>
    7d38:	220f      	movs	r2, #15
    7d3a:	401a      	ands	r2, r3
    7d3c:	2a04      	cmp	r2, #4
    7d3e:	d000      	beq.n	7d42 <__aeabi_fsub+0x9a>
    7d40:	3304      	adds	r3, #4
    7d42:	015a      	lsls	r2, r3, #5
    7d44:	d527      	bpl.n	7d96 <__aeabi_fsub+0xee>
    7d46:	3401      	adds	r4, #1
    7d48:	2cff      	cmp	r4, #255	; 0xff
    7d4a:	d100      	bne.n	7d4e <__aeabi_fsub+0xa6>
    7d4c:	e079      	b.n	7e42 <__aeabi_fsub+0x19a>
    7d4e:	2201      	movs	r2, #1
    7d50:	019b      	lsls	r3, r3, #6
    7d52:	0a5b      	lsrs	r3, r3, #9
    7d54:	b2e4      	uxtb	r4, r4
    7d56:	402a      	ands	r2, r5
    7d58:	025b      	lsls	r3, r3, #9
    7d5a:	05e4      	lsls	r4, r4, #23
    7d5c:	0a58      	lsrs	r0, r3, #9
    7d5e:	07d2      	lsls	r2, r2, #31
    7d60:	4320      	orrs	r0, r4
    7d62:	4310      	orrs	r0, r2
    7d64:	bc1c      	pop	{r2, r3, r4}
    7d66:	4690      	mov	r8, r2
    7d68:	4699      	mov	r9, r3
    7d6a:	46a2      	mov	sl, r4
    7d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d6e:	2cff      	cmp	r4, #255	; 0xff
    7d70:	d0e0      	beq.n	7d34 <__aeabi_fsub+0x8c>
    7d72:	2180      	movs	r1, #128	; 0x80
    7d74:	04c9      	lsls	r1, r1, #19
    7d76:	430e      	orrs	r6, r1
    7d78:	2a1b      	cmp	r2, #27
    7d7a:	dc7b      	bgt.n	7e74 <__aeabi_fsub+0x1cc>
    7d7c:	0031      	movs	r1, r6
    7d7e:	2020      	movs	r0, #32
    7d80:	40d1      	lsrs	r1, r2
    7d82:	1a82      	subs	r2, r0, r2
    7d84:	4096      	lsls	r6, r2
    7d86:	1e72      	subs	r2, r6, #1
    7d88:	4196      	sbcs	r6, r2
    7d8a:	430e      	orrs	r6, r1
    7d8c:	1b9b      	subs	r3, r3, r6
    7d8e:	015a      	lsls	r2, r3, #5
    7d90:	d4ba      	bmi.n	7d08 <__aeabi_fsub+0x60>
    7d92:	075a      	lsls	r2, r3, #29
    7d94:	d1d0      	bne.n	7d38 <__aeabi_fsub+0x90>
    7d96:	2201      	movs	r2, #1
    7d98:	08df      	lsrs	r7, r3, #3
    7d9a:	402a      	ands	r2, r5
    7d9c:	2cff      	cmp	r4, #255	; 0xff
    7d9e:	d133      	bne.n	7e08 <__aeabi_fsub+0x160>
    7da0:	2f00      	cmp	r7, #0
    7da2:	d100      	bne.n	7da6 <__aeabi_fsub+0xfe>
    7da4:	e0a8      	b.n	7ef8 <__aeabi_fsub+0x250>
    7da6:	2380      	movs	r3, #128	; 0x80
    7da8:	03db      	lsls	r3, r3, #15
    7daa:	433b      	orrs	r3, r7
    7dac:	025b      	lsls	r3, r3, #9
    7dae:	0a5b      	lsrs	r3, r3, #9
    7db0:	24ff      	movs	r4, #255	; 0xff
    7db2:	e7d1      	b.n	7d58 <__aeabi_fsub+0xb0>
    7db4:	1a21      	subs	r1, r4, r0
    7db6:	2900      	cmp	r1, #0
    7db8:	dd4c      	ble.n	7e54 <__aeabi_fsub+0x1ac>
    7dba:	2800      	cmp	r0, #0
    7dbc:	d02a      	beq.n	7e14 <__aeabi_fsub+0x16c>
    7dbe:	2cff      	cmp	r4, #255	; 0xff
    7dc0:	d0b8      	beq.n	7d34 <__aeabi_fsub+0x8c>
    7dc2:	2080      	movs	r0, #128	; 0x80
    7dc4:	04c0      	lsls	r0, r0, #19
    7dc6:	4306      	orrs	r6, r0
    7dc8:	291b      	cmp	r1, #27
    7dca:	dd00      	ble.n	7dce <__aeabi_fsub+0x126>
    7dcc:	e0af      	b.n	7f2e <__aeabi_fsub+0x286>
    7dce:	0030      	movs	r0, r6
    7dd0:	2720      	movs	r7, #32
    7dd2:	40c8      	lsrs	r0, r1
    7dd4:	1a79      	subs	r1, r7, r1
    7dd6:	408e      	lsls	r6, r1
    7dd8:	1e71      	subs	r1, r6, #1
    7dda:	418e      	sbcs	r6, r1
    7ddc:	4306      	orrs	r6, r0
    7dde:	199b      	adds	r3, r3, r6
    7de0:	0159      	lsls	r1, r3, #5
    7de2:	d5d6      	bpl.n	7d92 <__aeabi_fsub+0xea>
    7de4:	3401      	adds	r4, #1
    7de6:	2cff      	cmp	r4, #255	; 0xff
    7de8:	d100      	bne.n	7dec <__aeabi_fsub+0x144>
    7dea:	e085      	b.n	7ef8 <__aeabi_fsub+0x250>
    7dec:	2201      	movs	r2, #1
    7dee:	497a      	ldr	r1, [pc, #488]	; (7fd8 <__aeabi_fsub+0x330>)
    7df0:	401a      	ands	r2, r3
    7df2:	085b      	lsrs	r3, r3, #1
    7df4:	400b      	ands	r3, r1
    7df6:	4313      	orrs	r3, r2
    7df8:	e79c      	b.n	7d34 <__aeabi_fsub+0x8c>
    7dfa:	2e00      	cmp	r6, #0
    7dfc:	d000      	beq.n	7e00 <__aeabi_fsub+0x158>
    7dfe:	e770      	b.n	7ce2 <__aeabi_fsub+0x3a>
    7e00:	e76b      	b.n	7cda <__aeabi_fsub+0x32>
    7e02:	1e3b      	subs	r3, r7, #0
    7e04:	d1c5      	bne.n	7d92 <__aeabi_fsub+0xea>
    7e06:	2200      	movs	r2, #0
    7e08:	027b      	lsls	r3, r7, #9
    7e0a:	0a5b      	lsrs	r3, r3, #9
    7e0c:	b2e4      	uxtb	r4, r4
    7e0e:	e7a3      	b.n	7d58 <__aeabi_fsub+0xb0>
    7e10:	0014      	movs	r4, r2
    7e12:	e78f      	b.n	7d34 <__aeabi_fsub+0x8c>
    7e14:	2e00      	cmp	r6, #0
    7e16:	d04d      	beq.n	7eb4 <__aeabi_fsub+0x20c>
    7e18:	1e48      	subs	r0, r1, #1
    7e1a:	2800      	cmp	r0, #0
    7e1c:	d157      	bne.n	7ece <__aeabi_fsub+0x226>
    7e1e:	199b      	adds	r3, r3, r6
    7e20:	2401      	movs	r4, #1
    7e22:	015a      	lsls	r2, r3, #5
    7e24:	d5b5      	bpl.n	7d92 <__aeabi_fsub+0xea>
    7e26:	2402      	movs	r4, #2
    7e28:	e7e0      	b.n	7dec <__aeabi_fsub+0x144>
    7e2a:	2a00      	cmp	r2, #0
    7e2c:	d125      	bne.n	7e7a <__aeabi_fsub+0x1d2>
    7e2e:	1c62      	adds	r2, r4, #1
    7e30:	b2d2      	uxtb	r2, r2
    7e32:	2a01      	cmp	r2, #1
    7e34:	dd72      	ble.n	7f1c <__aeabi_fsub+0x274>
    7e36:	1b9f      	subs	r7, r3, r6
    7e38:	017a      	lsls	r2, r7, #5
    7e3a:	d535      	bpl.n	7ea8 <__aeabi_fsub+0x200>
    7e3c:	1af7      	subs	r7, r6, r3
    7e3e:	000d      	movs	r5, r1
    7e40:	e764      	b.n	7d0c <__aeabi_fsub+0x64>
    7e42:	2201      	movs	r2, #1
    7e44:	2300      	movs	r3, #0
    7e46:	402a      	ands	r2, r5
    7e48:	e786      	b.n	7d58 <__aeabi_fsub+0xb0>
    7e4a:	003b      	movs	r3, r7
    7e4c:	4a63      	ldr	r2, [pc, #396]	; (7fdc <__aeabi_fsub+0x334>)
    7e4e:	1a24      	subs	r4, r4, r0
    7e50:	4013      	ands	r3, r2
    7e52:	e76f      	b.n	7d34 <__aeabi_fsub+0x8c>
    7e54:	2900      	cmp	r1, #0
    7e56:	d16c      	bne.n	7f32 <__aeabi_fsub+0x28a>
    7e58:	1c61      	adds	r1, r4, #1
    7e5a:	b2c8      	uxtb	r0, r1
    7e5c:	2801      	cmp	r0, #1
    7e5e:	dd4e      	ble.n	7efe <__aeabi_fsub+0x256>
    7e60:	29ff      	cmp	r1, #255	; 0xff
    7e62:	d049      	beq.n	7ef8 <__aeabi_fsub+0x250>
    7e64:	199b      	adds	r3, r3, r6
    7e66:	085b      	lsrs	r3, r3, #1
    7e68:	000c      	movs	r4, r1
    7e6a:	e763      	b.n	7d34 <__aeabi_fsub+0x8c>
    7e6c:	2aff      	cmp	r2, #255	; 0xff
    7e6e:	d041      	beq.n	7ef4 <__aeabi_fsub+0x24c>
    7e70:	000a      	movs	r2, r1
    7e72:	e781      	b.n	7d78 <__aeabi_fsub+0xd0>
    7e74:	2601      	movs	r6, #1
    7e76:	1b9b      	subs	r3, r3, r6
    7e78:	e789      	b.n	7d8e <__aeabi_fsub+0xe6>
    7e7a:	2c00      	cmp	r4, #0
    7e7c:	d01c      	beq.n	7eb8 <__aeabi_fsub+0x210>
    7e7e:	28ff      	cmp	r0, #255	; 0xff
    7e80:	d021      	beq.n	7ec6 <__aeabi_fsub+0x21e>
    7e82:	2480      	movs	r4, #128	; 0x80
    7e84:	04e4      	lsls	r4, r4, #19
    7e86:	4252      	negs	r2, r2
    7e88:	4323      	orrs	r3, r4
    7e8a:	2a1b      	cmp	r2, #27
    7e8c:	dd00      	ble.n	7e90 <__aeabi_fsub+0x1e8>
    7e8e:	e096      	b.n	7fbe <__aeabi_fsub+0x316>
    7e90:	001c      	movs	r4, r3
    7e92:	2520      	movs	r5, #32
    7e94:	40d4      	lsrs	r4, r2
    7e96:	1aaa      	subs	r2, r5, r2
    7e98:	4093      	lsls	r3, r2
    7e9a:	1e5a      	subs	r2, r3, #1
    7e9c:	4193      	sbcs	r3, r2
    7e9e:	4323      	orrs	r3, r4
    7ea0:	1af3      	subs	r3, r6, r3
    7ea2:	0004      	movs	r4, r0
    7ea4:	000d      	movs	r5, r1
    7ea6:	e72d      	b.n	7d04 <__aeabi_fsub+0x5c>
    7ea8:	2f00      	cmp	r7, #0
    7eaa:	d000      	beq.n	7eae <__aeabi_fsub+0x206>
    7eac:	e72e      	b.n	7d0c <__aeabi_fsub+0x64>
    7eae:	2200      	movs	r2, #0
    7eb0:	2400      	movs	r4, #0
    7eb2:	e7a9      	b.n	7e08 <__aeabi_fsub+0x160>
    7eb4:	000c      	movs	r4, r1
    7eb6:	e73d      	b.n	7d34 <__aeabi_fsub+0x8c>
    7eb8:	2b00      	cmp	r3, #0
    7eba:	d058      	beq.n	7f6e <__aeabi_fsub+0x2c6>
    7ebc:	43d2      	mvns	r2, r2
    7ebe:	2a00      	cmp	r2, #0
    7ec0:	d0ee      	beq.n	7ea0 <__aeabi_fsub+0x1f8>
    7ec2:	28ff      	cmp	r0, #255	; 0xff
    7ec4:	d1e1      	bne.n	7e8a <__aeabi_fsub+0x1e2>
    7ec6:	0033      	movs	r3, r6
    7ec8:	24ff      	movs	r4, #255	; 0xff
    7eca:	000d      	movs	r5, r1
    7ecc:	e732      	b.n	7d34 <__aeabi_fsub+0x8c>
    7ece:	29ff      	cmp	r1, #255	; 0xff
    7ed0:	d010      	beq.n	7ef4 <__aeabi_fsub+0x24c>
    7ed2:	0001      	movs	r1, r0
    7ed4:	e778      	b.n	7dc8 <__aeabi_fsub+0x120>
    7ed6:	2b00      	cmp	r3, #0
    7ed8:	d06e      	beq.n	7fb8 <__aeabi_fsub+0x310>
    7eda:	24ff      	movs	r4, #255	; 0xff
    7edc:	2e00      	cmp	r6, #0
    7ede:	d100      	bne.n	7ee2 <__aeabi_fsub+0x23a>
    7ee0:	e728      	b.n	7d34 <__aeabi_fsub+0x8c>
    7ee2:	2280      	movs	r2, #128	; 0x80
    7ee4:	4651      	mov	r1, sl
    7ee6:	03d2      	lsls	r2, r2, #15
    7ee8:	4211      	tst	r1, r2
    7eea:	d003      	beq.n	7ef4 <__aeabi_fsub+0x24c>
    7eec:	4661      	mov	r1, ip
    7eee:	4211      	tst	r1, r2
    7ef0:	d100      	bne.n	7ef4 <__aeabi_fsub+0x24c>
    7ef2:	0033      	movs	r3, r6
    7ef4:	24ff      	movs	r4, #255	; 0xff
    7ef6:	e71d      	b.n	7d34 <__aeabi_fsub+0x8c>
    7ef8:	24ff      	movs	r4, #255	; 0xff
    7efa:	2300      	movs	r3, #0
    7efc:	e72c      	b.n	7d58 <__aeabi_fsub+0xb0>
    7efe:	2c00      	cmp	r4, #0
    7f00:	d1e9      	bne.n	7ed6 <__aeabi_fsub+0x22e>
    7f02:	2b00      	cmp	r3, #0
    7f04:	d063      	beq.n	7fce <__aeabi_fsub+0x326>
    7f06:	2e00      	cmp	r6, #0
    7f08:	d100      	bne.n	7f0c <__aeabi_fsub+0x264>
    7f0a:	e713      	b.n	7d34 <__aeabi_fsub+0x8c>
    7f0c:	199b      	adds	r3, r3, r6
    7f0e:	015a      	lsls	r2, r3, #5
    7f10:	d400      	bmi.n	7f14 <__aeabi_fsub+0x26c>
    7f12:	e73e      	b.n	7d92 <__aeabi_fsub+0xea>
    7f14:	4a31      	ldr	r2, [pc, #196]	; (7fdc <__aeabi_fsub+0x334>)
    7f16:	000c      	movs	r4, r1
    7f18:	4013      	ands	r3, r2
    7f1a:	e70b      	b.n	7d34 <__aeabi_fsub+0x8c>
    7f1c:	2c00      	cmp	r4, #0
    7f1e:	d11e      	bne.n	7f5e <__aeabi_fsub+0x2b6>
    7f20:	2b00      	cmp	r3, #0
    7f22:	d12f      	bne.n	7f84 <__aeabi_fsub+0x2dc>
    7f24:	2e00      	cmp	r6, #0
    7f26:	d04f      	beq.n	7fc8 <__aeabi_fsub+0x320>
    7f28:	0033      	movs	r3, r6
    7f2a:	000d      	movs	r5, r1
    7f2c:	e702      	b.n	7d34 <__aeabi_fsub+0x8c>
    7f2e:	2601      	movs	r6, #1
    7f30:	e755      	b.n	7dde <__aeabi_fsub+0x136>
    7f32:	2c00      	cmp	r4, #0
    7f34:	d11f      	bne.n	7f76 <__aeabi_fsub+0x2ce>
    7f36:	2b00      	cmp	r3, #0
    7f38:	d043      	beq.n	7fc2 <__aeabi_fsub+0x31a>
    7f3a:	43c9      	mvns	r1, r1
    7f3c:	2900      	cmp	r1, #0
    7f3e:	d00b      	beq.n	7f58 <__aeabi_fsub+0x2b0>
    7f40:	28ff      	cmp	r0, #255	; 0xff
    7f42:	d039      	beq.n	7fb8 <__aeabi_fsub+0x310>
    7f44:	291b      	cmp	r1, #27
    7f46:	dc44      	bgt.n	7fd2 <__aeabi_fsub+0x32a>
    7f48:	001c      	movs	r4, r3
    7f4a:	2720      	movs	r7, #32
    7f4c:	40cc      	lsrs	r4, r1
    7f4e:	1a79      	subs	r1, r7, r1
    7f50:	408b      	lsls	r3, r1
    7f52:	1e59      	subs	r1, r3, #1
    7f54:	418b      	sbcs	r3, r1
    7f56:	4323      	orrs	r3, r4
    7f58:	199b      	adds	r3, r3, r6
    7f5a:	0004      	movs	r4, r0
    7f5c:	e740      	b.n	7de0 <__aeabi_fsub+0x138>
    7f5e:	2b00      	cmp	r3, #0
    7f60:	d11a      	bne.n	7f98 <__aeabi_fsub+0x2f0>
    7f62:	2e00      	cmp	r6, #0
    7f64:	d124      	bne.n	7fb0 <__aeabi_fsub+0x308>
    7f66:	2780      	movs	r7, #128	; 0x80
    7f68:	2200      	movs	r2, #0
    7f6a:	03ff      	lsls	r7, r7, #15
    7f6c:	e71b      	b.n	7da6 <__aeabi_fsub+0xfe>
    7f6e:	0033      	movs	r3, r6
    7f70:	0004      	movs	r4, r0
    7f72:	000d      	movs	r5, r1
    7f74:	e6de      	b.n	7d34 <__aeabi_fsub+0x8c>
    7f76:	28ff      	cmp	r0, #255	; 0xff
    7f78:	d01e      	beq.n	7fb8 <__aeabi_fsub+0x310>
    7f7a:	2480      	movs	r4, #128	; 0x80
    7f7c:	04e4      	lsls	r4, r4, #19
    7f7e:	4249      	negs	r1, r1
    7f80:	4323      	orrs	r3, r4
    7f82:	e7df      	b.n	7f44 <__aeabi_fsub+0x29c>
    7f84:	2e00      	cmp	r6, #0
    7f86:	d100      	bne.n	7f8a <__aeabi_fsub+0x2e2>
    7f88:	e6d4      	b.n	7d34 <__aeabi_fsub+0x8c>
    7f8a:	1b9f      	subs	r7, r3, r6
    7f8c:	017a      	lsls	r2, r7, #5
    7f8e:	d400      	bmi.n	7f92 <__aeabi_fsub+0x2ea>
    7f90:	e737      	b.n	7e02 <__aeabi_fsub+0x15a>
    7f92:	1af3      	subs	r3, r6, r3
    7f94:	000d      	movs	r5, r1
    7f96:	e6cd      	b.n	7d34 <__aeabi_fsub+0x8c>
    7f98:	24ff      	movs	r4, #255	; 0xff
    7f9a:	2e00      	cmp	r6, #0
    7f9c:	d100      	bne.n	7fa0 <__aeabi_fsub+0x2f8>
    7f9e:	e6c9      	b.n	7d34 <__aeabi_fsub+0x8c>
    7fa0:	2280      	movs	r2, #128	; 0x80
    7fa2:	4650      	mov	r0, sl
    7fa4:	03d2      	lsls	r2, r2, #15
    7fa6:	4210      	tst	r0, r2
    7fa8:	d0a4      	beq.n	7ef4 <__aeabi_fsub+0x24c>
    7faa:	4660      	mov	r0, ip
    7fac:	4210      	tst	r0, r2
    7fae:	d1a1      	bne.n	7ef4 <__aeabi_fsub+0x24c>
    7fb0:	0033      	movs	r3, r6
    7fb2:	000d      	movs	r5, r1
    7fb4:	24ff      	movs	r4, #255	; 0xff
    7fb6:	e6bd      	b.n	7d34 <__aeabi_fsub+0x8c>
    7fb8:	0033      	movs	r3, r6
    7fba:	24ff      	movs	r4, #255	; 0xff
    7fbc:	e6ba      	b.n	7d34 <__aeabi_fsub+0x8c>
    7fbe:	2301      	movs	r3, #1
    7fc0:	e76e      	b.n	7ea0 <__aeabi_fsub+0x1f8>
    7fc2:	0033      	movs	r3, r6
    7fc4:	0004      	movs	r4, r0
    7fc6:	e6b5      	b.n	7d34 <__aeabi_fsub+0x8c>
    7fc8:	2700      	movs	r7, #0
    7fca:	2200      	movs	r2, #0
    7fcc:	e71c      	b.n	7e08 <__aeabi_fsub+0x160>
    7fce:	0033      	movs	r3, r6
    7fd0:	e6b0      	b.n	7d34 <__aeabi_fsub+0x8c>
    7fd2:	2301      	movs	r3, #1
    7fd4:	e7c0      	b.n	7f58 <__aeabi_fsub+0x2b0>
    7fd6:	46c0      	nop			; (mov r8, r8)
    7fd8:	7dffffff 	.word	0x7dffffff
    7fdc:	fbffffff 	.word	0xfbffffff

00007fe0 <__aeabi_f2iz>:
    7fe0:	0241      	lsls	r1, r0, #9
    7fe2:	0043      	lsls	r3, r0, #1
    7fe4:	0fc2      	lsrs	r2, r0, #31
    7fe6:	0a49      	lsrs	r1, r1, #9
    7fe8:	0e1b      	lsrs	r3, r3, #24
    7fea:	2000      	movs	r0, #0
    7fec:	2b7e      	cmp	r3, #126	; 0x7e
    7fee:	dd0d      	ble.n	800c <__aeabi_f2iz+0x2c>
    7ff0:	2b9d      	cmp	r3, #157	; 0x9d
    7ff2:	dc0c      	bgt.n	800e <__aeabi_f2iz+0x2e>
    7ff4:	2080      	movs	r0, #128	; 0x80
    7ff6:	0400      	lsls	r0, r0, #16
    7ff8:	4301      	orrs	r1, r0
    7ffa:	2b95      	cmp	r3, #149	; 0x95
    7ffc:	dc0a      	bgt.n	8014 <__aeabi_f2iz+0x34>
    7ffe:	2096      	movs	r0, #150	; 0x96
    8000:	1ac3      	subs	r3, r0, r3
    8002:	40d9      	lsrs	r1, r3
    8004:	4248      	negs	r0, r1
    8006:	2a00      	cmp	r2, #0
    8008:	d100      	bne.n	800c <__aeabi_f2iz+0x2c>
    800a:	0008      	movs	r0, r1
    800c:	4770      	bx	lr
    800e:	4b03      	ldr	r3, [pc, #12]	; (801c <__aeabi_f2iz+0x3c>)
    8010:	18d0      	adds	r0, r2, r3
    8012:	e7fb      	b.n	800c <__aeabi_f2iz+0x2c>
    8014:	3b96      	subs	r3, #150	; 0x96
    8016:	4099      	lsls	r1, r3
    8018:	e7f4      	b.n	8004 <__aeabi_f2iz+0x24>
    801a:	46c0      	nop			; (mov r8, r8)
    801c:	7fffffff 	.word	0x7fffffff

00008020 <__aeabi_i2f>:
    8020:	b570      	push	{r4, r5, r6, lr}
    8022:	2800      	cmp	r0, #0
    8024:	d030      	beq.n	8088 <__aeabi_i2f+0x68>
    8026:	17c3      	asrs	r3, r0, #31
    8028:	18c4      	adds	r4, r0, r3
    802a:	405c      	eors	r4, r3
    802c:	0fc5      	lsrs	r5, r0, #31
    802e:	0020      	movs	r0, r4
    8030:	f001 fcd2 	bl	99d8 <__clzsi2>
    8034:	239e      	movs	r3, #158	; 0x9e
    8036:	1a1b      	subs	r3, r3, r0
    8038:	2b96      	cmp	r3, #150	; 0x96
    803a:	dc0d      	bgt.n	8058 <__aeabi_i2f+0x38>
    803c:	2296      	movs	r2, #150	; 0x96
    803e:	1ad2      	subs	r2, r2, r3
    8040:	4094      	lsls	r4, r2
    8042:	002a      	movs	r2, r5
    8044:	0264      	lsls	r4, r4, #9
    8046:	0a64      	lsrs	r4, r4, #9
    8048:	b2db      	uxtb	r3, r3
    804a:	0264      	lsls	r4, r4, #9
    804c:	05db      	lsls	r3, r3, #23
    804e:	0a60      	lsrs	r0, r4, #9
    8050:	07d2      	lsls	r2, r2, #31
    8052:	4318      	orrs	r0, r3
    8054:	4310      	orrs	r0, r2
    8056:	bd70      	pop	{r4, r5, r6, pc}
    8058:	2b99      	cmp	r3, #153	; 0x99
    805a:	dc19      	bgt.n	8090 <__aeabi_i2f+0x70>
    805c:	2299      	movs	r2, #153	; 0x99
    805e:	1ad2      	subs	r2, r2, r3
    8060:	2a00      	cmp	r2, #0
    8062:	dd29      	ble.n	80b8 <__aeabi_i2f+0x98>
    8064:	4094      	lsls	r4, r2
    8066:	0022      	movs	r2, r4
    8068:	4c14      	ldr	r4, [pc, #80]	; (80bc <__aeabi_i2f+0x9c>)
    806a:	4014      	ands	r4, r2
    806c:	0751      	lsls	r1, r2, #29
    806e:	d004      	beq.n	807a <__aeabi_i2f+0x5a>
    8070:	210f      	movs	r1, #15
    8072:	400a      	ands	r2, r1
    8074:	2a04      	cmp	r2, #4
    8076:	d000      	beq.n	807a <__aeabi_i2f+0x5a>
    8078:	3404      	adds	r4, #4
    807a:	0162      	lsls	r2, r4, #5
    807c:	d413      	bmi.n	80a6 <__aeabi_i2f+0x86>
    807e:	01a4      	lsls	r4, r4, #6
    8080:	0a64      	lsrs	r4, r4, #9
    8082:	b2db      	uxtb	r3, r3
    8084:	002a      	movs	r2, r5
    8086:	e7e0      	b.n	804a <__aeabi_i2f+0x2a>
    8088:	2200      	movs	r2, #0
    808a:	2300      	movs	r3, #0
    808c:	2400      	movs	r4, #0
    808e:	e7dc      	b.n	804a <__aeabi_i2f+0x2a>
    8090:	2205      	movs	r2, #5
    8092:	0021      	movs	r1, r4
    8094:	1a12      	subs	r2, r2, r0
    8096:	40d1      	lsrs	r1, r2
    8098:	22b9      	movs	r2, #185	; 0xb9
    809a:	1ad2      	subs	r2, r2, r3
    809c:	4094      	lsls	r4, r2
    809e:	1e62      	subs	r2, r4, #1
    80a0:	4194      	sbcs	r4, r2
    80a2:	430c      	orrs	r4, r1
    80a4:	e7da      	b.n	805c <__aeabi_i2f+0x3c>
    80a6:	4b05      	ldr	r3, [pc, #20]	; (80bc <__aeabi_i2f+0x9c>)
    80a8:	002a      	movs	r2, r5
    80aa:	401c      	ands	r4, r3
    80ac:	239f      	movs	r3, #159	; 0x9f
    80ae:	01a4      	lsls	r4, r4, #6
    80b0:	1a1b      	subs	r3, r3, r0
    80b2:	0a64      	lsrs	r4, r4, #9
    80b4:	b2db      	uxtb	r3, r3
    80b6:	e7c8      	b.n	804a <__aeabi_i2f+0x2a>
    80b8:	0022      	movs	r2, r4
    80ba:	e7d5      	b.n	8068 <__aeabi_i2f+0x48>
    80bc:	fbffffff 	.word	0xfbffffff

000080c0 <__aeabi_ui2f>:
    80c0:	b510      	push	{r4, lr}
    80c2:	1e04      	subs	r4, r0, #0
    80c4:	d027      	beq.n	8116 <__aeabi_ui2f+0x56>
    80c6:	f001 fc87 	bl	99d8 <__clzsi2>
    80ca:	239e      	movs	r3, #158	; 0x9e
    80cc:	1a1b      	subs	r3, r3, r0
    80ce:	2b96      	cmp	r3, #150	; 0x96
    80d0:	dc0a      	bgt.n	80e8 <__aeabi_ui2f+0x28>
    80d2:	2296      	movs	r2, #150	; 0x96
    80d4:	1ad2      	subs	r2, r2, r3
    80d6:	4094      	lsls	r4, r2
    80d8:	0264      	lsls	r4, r4, #9
    80da:	0a64      	lsrs	r4, r4, #9
    80dc:	b2db      	uxtb	r3, r3
    80de:	0264      	lsls	r4, r4, #9
    80e0:	05db      	lsls	r3, r3, #23
    80e2:	0a60      	lsrs	r0, r4, #9
    80e4:	4318      	orrs	r0, r3
    80e6:	bd10      	pop	{r4, pc}
    80e8:	2b99      	cmp	r3, #153	; 0x99
    80ea:	dc17      	bgt.n	811c <__aeabi_ui2f+0x5c>
    80ec:	2299      	movs	r2, #153	; 0x99
    80ee:	1ad2      	subs	r2, r2, r3
    80f0:	2a00      	cmp	r2, #0
    80f2:	dd27      	ble.n	8144 <__aeabi_ui2f+0x84>
    80f4:	4094      	lsls	r4, r2
    80f6:	0022      	movs	r2, r4
    80f8:	4c13      	ldr	r4, [pc, #76]	; (8148 <__aeabi_ui2f+0x88>)
    80fa:	4014      	ands	r4, r2
    80fc:	0751      	lsls	r1, r2, #29
    80fe:	d004      	beq.n	810a <__aeabi_ui2f+0x4a>
    8100:	210f      	movs	r1, #15
    8102:	400a      	ands	r2, r1
    8104:	2a04      	cmp	r2, #4
    8106:	d000      	beq.n	810a <__aeabi_ui2f+0x4a>
    8108:	3404      	adds	r4, #4
    810a:	0162      	lsls	r2, r4, #5
    810c:	d412      	bmi.n	8134 <__aeabi_ui2f+0x74>
    810e:	01a4      	lsls	r4, r4, #6
    8110:	0a64      	lsrs	r4, r4, #9
    8112:	b2db      	uxtb	r3, r3
    8114:	e7e3      	b.n	80de <__aeabi_ui2f+0x1e>
    8116:	2300      	movs	r3, #0
    8118:	2400      	movs	r4, #0
    811a:	e7e0      	b.n	80de <__aeabi_ui2f+0x1e>
    811c:	22b9      	movs	r2, #185	; 0xb9
    811e:	0021      	movs	r1, r4
    8120:	1ad2      	subs	r2, r2, r3
    8122:	4091      	lsls	r1, r2
    8124:	000a      	movs	r2, r1
    8126:	1e51      	subs	r1, r2, #1
    8128:	418a      	sbcs	r2, r1
    812a:	2105      	movs	r1, #5
    812c:	1a09      	subs	r1, r1, r0
    812e:	40cc      	lsrs	r4, r1
    8130:	4314      	orrs	r4, r2
    8132:	e7db      	b.n	80ec <__aeabi_ui2f+0x2c>
    8134:	4b04      	ldr	r3, [pc, #16]	; (8148 <__aeabi_ui2f+0x88>)
    8136:	401c      	ands	r4, r3
    8138:	239f      	movs	r3, #159	; 0x9f
    813a:	01a4      	lsls	r4, r4, #6
    813c:	1a1b      	subs	r3, r3, r0
    813e:	0a64      	lsrs	r4, r4, #9
    8140:	b2db      	uxtb	r3, r3
    8142:	e7cc      	b.n	80de <__aeabi_ui2f+0x1e>
    8144:	0022      	movs	r2, r4
    8146:	e7d7      	b.n	80f8 <__aeabi_ui2f+0x38>
    8148:	fbffffff 	.word	0xfbffffff

0000814c <__aeabi_dadd>:
    814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    814e:	4645      	mov	r5, r8
    8150:	46de      	mov	lr, fp
    8152:	4657      	mov	r7, sl
    8154:	464e      	mov	r6, r9
    8156:	030c      	lsls	r4, r1, #12
    8158:	b5e0      	push	{r5, r6, r7, lr}
    815a:	004e      	lsls	r6, r1, #1
    815c:	0fc9      	lsrs	r1, r1, #31
    815e:	4688      	mov	r8, r1
    8160:	000d      	movs	r5, r1
    8162:	0a61      	lsrs	r1, r4, #9
    8164:	0f44      	lsrs	r4, r0, #29
    8166:	430c      	orrs	r4, r1
    8168:	00c7      	lsls	r7, r0, #3
    816a:	0319      	lsls	r1, r3, #12
    816c:	0058      	lsls	r0, r3, #1
    816e:	0fdb      	lsrs	r3, r3, #31
    8170:	469b      	mov	fp, r3
    8172:	0a4b      	lsrs	r3, r1, #9
    8174:	0f51      	lsrs	r1, r2, #29
    8176:	430b      	orrs	r3, r1
    8178:	0d76      	lsrs	r6, r6, #21
    817a:	0d40      	lsrs	r0, r0, #21
    817c:	0019      	movs	r1, r3
    817e:	00d2      	lsls	r2, r2, #3
    8180:	45d8      	cmp	r8, fp
    8182:	d100      	bne.n	8186 <__aeabi_dadd+0x3a>
    8184:	e0ae      	b.n	82e4 <__aeabi_dadd+0x198>
    8186:	1a35      	subs	r5, r6, r0
    8188:	2d00      	cmp	r5, #0
    818a:	dc00      	bgt.n	818e <__aeabi_dadd+0x42>
    818c:	e0f6      	b.n	837c <__aeabi_dadd+0x230>
    818e:	2800      	cmp	r0, #0
    8190:	d10f      	bne.n	81b2 <__aeabi_dadd+0x66>
    8192:	4313      	orrs	r3, r2
    8194:	d100      	bne.n	8198 <__aeabi_dadd+0x4c>
    8196:	e0db      	b.n	8350 <__aeabi_dadd+0x204>
    8198:	1e6b      	subs	r3, r5, #1
    819a:	2b00      	cmp	r3, #0
    819c:	d000      	beq.n	81a0 <__aeabi_dadd+0x54>
    819e:	e137      	b.n	8410 <__aeabi_dadd+0x2c4>
    81a0:	1aba      	subs	r2, r7, r2
    81a2:	4297      	cmp	r7, r2
    81a4:	41bf      	sbcs	r7, r7
    81a6:	1a64      	subs	r4, r4, r1
    81a8:	427f      	negs	r7, r7
    81aa:	1be4      	subs	r4, r4, r7
    81ac:	2601      	movs	r6, #1
    81ae:	0017      	movs	r7, r2
    81b0:	e024      	b.n	81fc <__aeabi_dadd+0xb0>
    81b2:	4bc6      	ldr	r3, [pc, #792]	; (84cc <__aeabi_dadd+0x380>)
    81b4:	429e      	cmp	r6, r3
    81b6:	d04d      	beq.n	8254 <__aeabi_dadd+0x108>
    81b8:	2380      	movs	r3, #128	; 0x80
    81ba:	041b      	lsls	r3, r3, #16
    81bc:	4319      	orrs	r1, r3
    81be:	2d38      	cmp	r5, #56	; 0x38
    81c0:	dd00      	ble.n	81c4 <__aeabi_dadd+0x78>
    81c2:	e107      	b.n	83d4 <__aeabi_dadd+0x288>
    81c4:	2d1f      	cmp	r5, #31
    81c6:	dd00      	ble.n	81ca <__aeabi_dadd+0x7e>
    81c8:	e138      	b.n	843c <__aeabi_dadd+0x2f0>
    81ca:	2020      	movs	r0, #32
    81cc:	1b43      	subs	r3, r0, r5
    81ce:	469a      	mov	sl, r3
    81d0:	000b      	movs	r3, r1
    81d2:	4650      	mov	r0, sl
    81d4:	4083      	lsls	r3, r0
    81d6:	4699      	mov	r9, r3
    81d8:	0013      	movs	r3, r2
    81da:	4648      	mov	r0, r9
    81dc:	40eb      	lsrs	r3, r5
    81de:	4318      	orrs	r0, r3
    81e0:	0003      	movs	r3, r0
    81e2:	4650      	mov	r0, sl
    81e4:	4082      	lsls	r2, r0
    81e6:	1e50      	subs	r0, r2, #1
    81e8:	4182      	sbcs	r2, r0
    81ea:	40e9      	lsrs	r1, r5
    81ec:	431a      	orrs	r2, r3
    81ee:	1aba      	subs	r2, r7, r2
    81f0:	1a61      	subs	r1, r4, r1
    81f2:	4297      	cmp	r7, r2
    81f4:	41a4      	sbcs	r4, r4
    81f6:	0017      	movs	r7, r2
    81f8:	4264      	negs	r4, r4
    81fa:	1b0c      	subs	r4, r1, r4
    81fc:	0223      	lsls	r3, r4, #8
    81fe:	d562      	bpl.n	82c6 <__aeabi_dadd+0x17a>
    8200:	0264      	lsls	r4, r4, #9
    8202:	0a65      	lsrs	r5, r4, #9
    8204:	2d00      	cmp	r5, #0
    8206:	d100      	bne.n	820a <__aeabi_dadd+0xbe>
    8208:	e0df      	b.n	83ca <__aeabi_dadd+0x27e>
    820a:	0028      	movs	r0, r5
    820c:	f001 fbe4 	bl	99d8 <__clzsi2>
    8210:	0003      	movs	r3, r0
    8212:	3b08      	subs	r3, #8
    8214:	2b1f      	cmp	r3, #31
    8216:	dd00      	ble.n	821a <__aeabi_dadd+0xce>
    8218:	e0d2      	b.n	83c0 <__aeabi_dadd+0x274>
    821a:	2220      	movs	r2, #32
    821c:	003c      	movs	r4, r7
    821e:	1ad2      	subs	r2, r2, r3
    8220:	409d      	lsls	r5, r3
    8222:	40d4      	lsrs	r4, r2
    8224:	409f      	lsls	r7, r3
    8226:	4325      	orrs	r5, r4
    8228:	429e      	cmp	r6, r3
    822a:	dd00      	ble.n	822e <__aeabi_dadd+0xe2>
    822c:	e0c4      	b.n	83b8 <__aeabi_dadd+0x26c>
    822e:	1b9e      	subs	r6, r3, r6
    8230:	1c73      	adds	r3, r6, #1
    8232:	2b1f      	cmp	r3, #31
    8234:	dd00      	ble.n	8238 <__aeabi_dadd+0xec>
    8236:	e0f1      	b.n	841c <__aeabi_dadd+0x2d0>
    8238:	2220      	movs	r2, #32
    823a:	0038      	movs	r0, r7
    823c:	0029      	movs	r1, r5
    823e:	1ad2      	subs	r2, r2, r3
    8240:	40d8      	lsrs	r0, r3
    8242:	4091      	lsls	r1, r2
    8244:	4097      	lsls	r7, r2
    8246:	002c      	movs	r4, r5
    8248:	4301      	orrs	r1, r0
    824a:	1e78      	subs	r0, r7, #1
    824c:	4187      	sbcs	r7, r0
    824e:	40dc      	lsrs	r4, r3
    8250:	2600      	movs	r6, #0
    8252:	430f      	orrs	r7, r1
    8254:	077b      	lsls	r3, r7, #29
    8256:	d009      	beq.n	826c <__aeabi_dadd+0x120>
    8258:	230f      	movs	r3, #15
    825a:	403b      	ands	r3, r7
    825c:	2b04      	cmp	r3, #4
    825e:	d005      	beq.n	826c <__aeabi_dadd+0x120>
    8260:	1d3b      	adds	r3, r7, #4
    8262:	42bb      	cmp	r3, r7
    8264:	41bf      	sbcs	r7, r7
    8266:	427f      	negs	r7, r7
    8268:	19e4      	adds	r4, r4, r7
    826a:	001f      	movs	r7, r3
    826c:	0223      	lsls	r3, r4, #8
    826e:	d52c      	bpl.n	82ca <__aeabi_dadd+0x17e>
    8270:	4b96      	ldr	r3, [pc, #600]	; (84cc <__aeabi_dadd+0x380>)
    8272:	3601      	adds	r6, #1
    8274:	429e      	cmp	r6, r3
    8276:	d100      	bne.n	827a <__aeabi_dadd+0x12e>
    8278:	e09a      	b.n	83b0 <__aeabi_dadd+0x264>
    827a:	4645      	mov	r5, r8
    827c:	4b94      	ldr	r3, [pc, #592]	; (84d0 <__aeabi_dadd+0x384>)
    827e:	08ff      	lsrs	r7, r7, #3
    8280:	401c      	ands	r4, r3
    8282:	0760      	lsls	r0, r4, #29
    8284:	0576      	lsls	r6, r6, #21
    8286:	0264      	lsls	r4, r4, #9
    8288:	4307      	orrs	r7, r0
    828a:	0b24      	lsrs	r4, r4, #12
    828c:	0d76      	lsrs	r6, r6, #21
    828e:	2100      	movs	r1, #0
    8290:	0324      	lsls	r4, r4, #12
    8292:	0b23      	lsrs	r3, r4, #12
    8294:	0d0c      	lsrs	r4, r1, #20
    8296:	4a8f      	ldr	r2, [pc, #572]	; (84d4 <__aeabi_dadd+0x388>)
    8298:	0524      	lsls	r4, r4, #20
    829a:	431c      	orrs	r4, r3
    829c:	4014      	ands	r4, r2
    829e:	0533      	lsls	r3, r6, #20
    82a0:	4323      	orrs	r3, r4
    82a2:	005b      	lsls	r3, r3, #1
    82a4:	07ed      	lsls	r5, r5, #31
    82a6:	085b      	lsrs	r3, r3, #1
    82a8:	432b      	orrs	r3, r5
    82aa:	0038      	movs	r0, r7
    82ac:	0019      	movs	r1, r3
    82ae:	bc3c      	pop	{r2, r3, r4, r5}
    82b0:	4690      	mov	r8, r2
    82b2:	4699      	mov	r9, r3
    82b4:	46a2      	mov	sl, r4
    82b6:	46ab      	mov	fp, r5
    82b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    82ba:	4664      	mov	r4, ip
    82bc:	4304      	orrs	r4, r0
    82be:	d100      	bne.n	82c2 <__aeabi_dadd+0x176>
    82c0:	e211      	b.n	86e6 <__aeabi_dadd+0x59a>
    82c2:	0004      	movs	r4, r0
    82c4:	4667      	mov	r7, ip
    82c6:	077b      	lsls	r3, r7, #29
    82c8:	d1c6      	bne.n	8258 <__aeabi_dadd+0x10c>
    82ca:	4645      	mov	r5, r8
    82cc:	0760      	lsls	r0, r4, #29
    82ce:	08ff      	lsrs	r7, r7, #3
    82d0:	4307      	orrs	r7, r0
    82d2:	08e4      	lsrs	r4, r4, #3
    82d4:	4b7d      	ldr	r3, [pc, #500]	; (84cc <__aeabi_dadd+0x380>)
    82d6:	429e      	cmp	r6, r3
    82d8:	d030      	beq.n	833c <__aeabi_dadd+0x1f0>
    82da:	0324      	lsls	r4, r4, #12
    82dc:	0576      	lsls	r6, r6, #21
    82de:	0b24      	lsrs	r4, r4, #12
    82e0:	0d76      	lsrs	r6, r6, #21
    82e2:	e7d4      	b.n	828e <__aeabi_dadd+0x142>
    82e4:	1a33      	subs	r3, r6, r0
    82e6:	469a      	mov	sl, r3
    82e8:	2b00      	cmp	r3, #0
    82ea:	dd78      	ble.n	83de <__aeabi_dadd+0x292>
    82ec:	2800      	cmp	r0, #0
    82ee:	d031      	beq.n	8354 <__aeabi_dadd+0x208>
    82f0:	4876      	ldr	r0, [pc, #472]	; (84cc <__aeabi_dadd+0x380>)
    82f2:	4286      	cmp	r6, r0
    82f4:	d0ae      	beq.n	8254 <__aeabi_dadd+0x108>
    82f6:	2080      	movs	r0, #128	; 0x80
    82f8:	0400      	lsls	r0, r0, #16
    82fa:	4301      	orrs	r1, r0
    82fc:	4653      	mov	r3, sl
    82fe:	2b38      	cmp	r3, #56	; 0x38
    8300:	dc00      	bgt.n	8304 <__aeabi_dadd+0x1b8>
    8302:	e0e9      	b.n	84d8 <__aeabi_dadd+0x38c>
    8304:	430a      	orrs	r2, r1
    8306:	1e51      	subs	r1, r2, #1
    8308:	418a      	sbcs	r2, r1
    830a:	2100      	movs	r1, #0
    830c:	19d2      	adds	r2, r2, r7
    830e:	42ba      	cmp	r2, r7
    8310:	41bf      	sbcs	r7, r7
    8312:	1909      	adds	r1, r1, r4
    8314:	427c      	negs	r4, r7
    8316:	0017      	movs	r7, r2
    8318:	190c      	adds	r4, r1, r4
    831a:	0223      	lsls	r3, r4, #8
    831c:	d5d3      	bpl.n	82c6 <__aeabi_dadd+0x17a>
    831e:	4b6b      	ldr	r3, [pc, #428]	; (84cc <__aeabi_dadd+0x380>)
    8320:	3601      	adds	r6, #1
    8322:	429e      	cmp	r6, r3
    8324:	d100      	bne.n	8328 <__aeabi_dadd+0x1dc>
    8326:	e13a      	b.n	859e <__aeabi_dadd+0x452>
    8328:	2001      	movs	r0, #1
    832a:	4b69      	ldr	r3, [pc, #420]	; (84d0 <__aeabi_dadd+0x384>)
    832c:	401c      	ands	r4, r3
    832e:	087b      	lsrs	r3, r7, #1
    8330:	4007      	ands	r7, r0
    8332:	431f      	orrs	r7, r3
    8334:	07e0      	lsls	r0, r4, #31
    8336:	4307      	orrs	r7, r0
    8338:	0864      	lsrs	r4, r4, #1
    833a:	e78b      	b.n	8254 <__aeabi_dadd+0x108>
    833c:	0023      	movs	r3, r4
    833e:	433b      	orrs	r3, r7
    8340:	d100      	bne.n	8344 <__aeabi_dadd+0x1f8>
    8342:	e1cb      	b.n	86dc <__aeabi_dadd+0x590>
    8344:	2280      	movs	r2, #128	; 0x80
    8346:	0312      	lsls	r2, r2, #12
    8348:	4314      	orrs	r4, r2
    834a:	0324      	lsls	r4, r4, #12
    834c:	0b24      	lsrs	r4, r4, #12
    834e:	e79e      	b.n	828e <__aeabi_dadd+0x142>
    8350:	002e      	movs	r6, r5
    8352:	e77f      	b.n	8254 <__aeabi_dadd+0x108>
    8354:	0008      	movs	r0, r1
    8356:	4310      	orrs	r0, r2
    8358:	d100      	bne.n	835c <__aeabi_dadd+0x210>
    835a:	e0b4      	b.n	84c6 <__aeabi_dadd+0x37a>
    835c:	1e58      	subs	r0, r3, #1
    835e:	2800      	cmp	r0, #0
    8360:	d000      	beq.n	8364 <__aeabi_dadd+0x218>
    8362:	e0de      	b.n	8522 <__aeabi_dadd+0x3d6>
    8364:	18ba      	adds	r2, r7, r2
    8366:	42ba      	cmp	r2, r7
    8368:	419b      	sbcs	r3, r3
    836a:	1864      	adds	r4, r4, r1
    836c:	425b      	negs	r3, r3
    836e:	18e4      	adds	r4, r4, r3
    8370:	0017      	movs	r7, r2
    8372:	2601      	movs	r6, #1
    8374:	0223      	lsls	r3, r4, #8
    8376:	d5a6      	bpl.n	82c6 <__aeabi_dadd+0x17a>
    8378:	2602      	movs	r6, #2
    837a:	e7d5      	b.n	8328 <__aeabi_dadd+0x1dc>
    837c:	2d00      	cmp	r5, #0
    837e:	d16e      	bne.n	845e <__aeabi_dadd+0x312>
    8380:	1c70      	adds	r0, r6, #1
    8382:	0540      	lsls	r0, r0, #21
    8384:	0d40      	lsrs	r0, r0, #21
    8386:	2801      	cmp	r0, #1
    8388:	dc00      	bgt.n	838c <__aeabi_dadd+0x240>
    838a:	e0f9      	b.n	8580 <__aeabi_dadd+0x434>
    838c:	1ab8      	subs	r0, r7, r2
    838e:	4684      	mov	ip, r0
    8390:	4287      	cmp	r7, r0
    8392:	4180      	sbcs	r0, r0
    8394:	1ae5      	subs	r5, r4, r3
    8396:	4240      	negs	r0, r0
    8398:	1a2d      	subs	r5, r5, r0
    839a:	0228      	lsls	r0, r5, #8
    839c:	d400      	bmi.n	83a0 <__aeabi_dadd+0x254>
    839e:	e089      	b.n	84b4 <__aeabi_dadd+0x368>
    83a0:	1bd7      	subs	r7, r2, r7
    83a2:	42ba      	cmp	r2, r7
    83a4:	4192      	sbcs	r2, r2
    83a6:	1b1c      	subs	r4, r3, r4
    83a8:	4252      	negs	r2, r2
    83aa:	1aa5      	subs	r5, r4, r2
    83ac:	46d8      	mov	r8, fp
    83ae:	e729      	b.n	8204 <__aeabi_dadd+0xb8>
    83b0:	4645      	mov	r5, r8
    83b2:	2400      	movs	r4, #0
    83b4:	2700      	movs	r7, #0
    83b6:	e76a      	b.n	828e <__aeabi_dadd+0x142>
    83b8:	4c45      	ldr	r4, [pc, #276]	; (84d0 <__aeabi_dadd+0x384>)
    83ba:	1af6      	subs	r6, r6, r3
    83bc:	402c      	ands	r4, r5
    83be:	e749      	b.n	8254 <__aeabi_dadd+0x108>
    83c0:	003d      	movs	r5, r7
    83c2:	3828      	subs	r0, #40	; 0x28
    83c4:	4085      	lsls	r5, r0
    83c6:	2700      	movs	r7, #0
    83c8:	e72e      	b.n	8228 <__aeabi_dadd+0xdc>
    83ca:	0038      	movs	r0, r7
    83cc:	f001 fb04 	bl	99d8 <__clzsi2>
    83d0:	3020      	adds	r0, #32
    83d2:	e71d      	b.n	8210 <__aeabi_dadd+0xc4>
    83d4:	430a      	orrs	r2, r1
    83d6:	1e51      	subs	r1, r2, #1
    83d8:	418a      	sbcs	r2, r1
    83da:	2100      	movs	r1, #0
    83dc:	e707      	b.n	81ee <__aeabi_dadd+0xa2>
    83de:	2b00      	cmp	r3, #0
    83e0:	d000      	beq.n	83e4 <__aeabi_dadd+0x298>
    83e2:	e0f3      	b.n	85cc <__aeabi_dadd+0x480>
    83e4:	1c70      	adds	r0, r6, #1
    83e6:	0543      	lsls	r3, r0, #21
    83e8:	0d5b      	lsrs	r3, r3, #21
    83ea:	2b01      	cmp	r3, #1
    83ec:	dc00      	bgt.n	83f0 <__aeabi_dadd+0x2a4>
    83ee:	e0ad      	b.n	854c <__aeabi_dadd+0x400>
    83f0:	4b36      	ldr	r3, [pc, #216]	; (84cc <__aeabi_dadd+0x380>)
    83f2:	4298      	cmp	r0, r3
    83f4:	d100      	bne.n	83f8 <__aeabi_dadd+0x2ac>
    83f6:	e0d1      	b.n	859c <__aeabi_dadd+0x450>
    83f8:	18ba      	adds	r2, r7, r2
    83fa:	42ba      	cmp	r2, r7
    83fc:	41bf      	sbcs	r7, r7
    83fe:	1864      	adds	r4, r4, r1
    8400:	427f      	negs	r7, r7
    8402:	19e4      	adds	r4, r4, r7
    8404:	07e7      	lsls	r7, r4, #31
    8406:	0852      	lsrs	r2, r2, #1
    8408:	4317      	orrs	r7, r2
    840a:	0864      	lsrs	r4, r4, #1
    840c:	0006      	movs	r6, r0
    840e:	e721      	b.n	8254 <__aeabi_dadd+0x108>
    8410:	482e      	ldr	r0, [pc, #184]	; (84cc <__aeabi_dadd+0x380>)
    8412:	4285      	cmp	r5, r0
    8414:	d100      	bne.n	8418 <__aeabi_dadd+0x2cc>
    8416:	e093      	b.n	8540 <__aeabi_dadd+0x3f4>
    8418:	001d      	movs	r5, r3
    841a:	e6d0      	b.n	81be <__aeabi_dadd+0x72>
    841c:	0029      	movs	r1, r5
    841e:	3e1f      	subs	r6, #31
    8420:	40f1      	lsrs	r1, r6
    8422:	2b20      	cmp	r3, #32
    8424:	d100      	bne.n	8428 <__aeabi_dadd+0x2dc>
    8426:	e08d      	b.n	8544 <__aeabi_dadd+0x3f8>
    8428:	2240      	movs	r2, #64	; 0x40
    842a:	1ad3      	subs	r3, r2, r3
    842c:	409d      	lsls	r5, r3
    842e:	432f      	orrs	r7, r5
    8430:	1e7d      	subs	r5, r7, #1
    8432:	41af      	sbcs	r7, r5
    8434:	2400      	movs	r4, #0
    8436:	430f      	orrs	r7, r1
    8438:	2600      	movs	r6, #0
    843a:	e744      	b.n	82c6 <__aeabi_dadd+0x17a>
    843c:	002b      	movs	r3, r5
    843e:	0008      	movs	r0, r1
    8440:	3b20      	subs	r3, #32
    8442:	40d8      	lsrs	r0, r3
    8444:	0003      	movs	r3, r0
    8446:	2d20      	cmp	r5, #32
    8448:	d100      	bne.n	844c <__aeabi_dadd+0x300>
    844a:	e07d      	b.n	8548 <__aeabi_dadd+0x3fc>
    844c:	2040      	movs	r0, #64	; 0x40
    844e:	1b45      	subs	r5, r0, r5
    8450:	40a9      	lsls	r1, r5
    8452:	430a      	orrs	r2, r1
    8454:	1e51      	subs	r1, r2, #1
    8456:	418a      	sbcs	r2, r1
    8458:	2100      	movs	r1, #0
    845a:	431a      	orrs	r2, r3
    845c:	e6c7      	b.n	81ee <__aeabi_dadd+0xa2>
    845e:	2e00      	cmp	r6, #0
    8460:	d050      	beq.n	8504 <__aeabi_dadd+0x3b8>
    8462:	4e1a      	ldr	r6, [pc, #104]	; (84cc <__aeabi_dadd+0x380>)
    8464:	42b0      	cmp	r0, r6
    8466:	d057      	beq.n	8518 <__aeabi_dadd+0x3cc>
    8468:	2680      	movs	r6, #128	; 0x80
    846a:	426b      	negs	r3, r5
    846c:	4699      	mov	r9, r3
    846e:	0436      	lsls	r6, r6, #16
    8470:	4334      	orrs	r4, r6
    8472:	464b      	mov	r3, r9
    8474:	2b38      	cmp	r3, #56	; 0x38
    8476:	dd00      	ble.n	847a <__aeabi_dadd+0x32e>
    8478:	e0d6      	b.n	8628 <__aeabi_dadd+0x4dc>
    847a:	2b1f      	cmp	r3, #31
    847c:	dd00      	ble.n	8480 <__aeabi_dadd+0x334>
    847e:	e135      	b.n	86ec <__aeabi_dadd+0x5a0>
    8480:	2620      	movs	r6, #32
    8482:	1af5      	subs	r5, r6, r3
    8484:	0026      	movs	r6, r4
    8486:	40ae      	lsls	r6, r5
    8488:	46b2      	mov	sl, r6
    848a:	003e      	movs	r6, r7
    848c:	40de      	lsrs	r6, r3
    848e:	46ac      	mov	ip, r5
    8490:	0035      	movs	r5, r6
    8492:	4656      	mov	r6, sl
    8494:	432e      	orrs	r6, r5
    8496:	4665      	mov	r5, ip
    8498:	40af      	lsls	r7, r5
    849a:	1e7d      	subs	r5, r7, #1
    849c:	41af      	sbcs	r7, r5
    849e:	40dc      	lsrs	r4, r3
    84a0:	4337      	orrs	r7, r6
    84a2:	1bd7      	subs	r7, r2, r7
    84a4:	42ba      	cmp	r2, r7
    84a6:	4192      	sbcs	r2, r2
    84a8:	1b0c      	subs	r4, r1, r4
    84aa:	4252      	negs	r2, r2
    84ac:	1aa4      	subs	r4, r4, r2
    84ae:	0006      	movs	r6, r0
    84b0:	46d8      	mov	r8, fp
    84b2:	e6a3      	b.n	81fc <__aeabi_dadd+0xb0>
    84b4:	4664      	mov	r4, ip
    84b6:	4667      	mov	r7, ip
    84b8:	432c      	orrs	r4, r5
    84ba:	d000      	beq.n	84be <__aeabi_dadd+0x372>
    84bc:	e6a2      	b.n	8204 <__aeabi_dadd+0xb8>
    84be:	2500      	movs	r5, #0
    84c0:	2600      	movs	r6, #0
    84c2:	2700      	movs	r7, #0
    84c4:	e706      	b.n	82d4 <__aeabi_dadd+0x188>
    84c6:	001e      	movs	r6, r3
    84c8:	e6c4      	b.n	8254 <__aeabi_dadd+0x108>
    84ca:	46c0      	nop			; (mov r8, r8)
    84cc:	000007ff 	.word	0x000007ff
    84d0:	ff7fffff 	.word	0xff7fffff
    84d4:	800fffff 	.word	0x800fffff
    84d8:	2b1f      	cmp	r3, #31
    84da:	dc63      	bgt.n	85a4 <__aeabi_dadd+0x458>
    84dc:	2020      	movs	r0, #32
    84de:	1ac3      	subs	r3, r0, r3
    84e0:	0008      	movs	r0, r1
    84e2:	4098      	lsls	r0, r3
    84e4:	469c      	mov	ip, r3
    84e6:	4683      	mov	fp, r0
    84e8:	4653      	mov	r3, sl
    84ea:	0010      	movs	r0, r2
    84ec:	40d8      	lsrs	r0, r3
    84ee:	0003      	movs	r3, r0
    84f0:	4658      	mov	r0, fp
    84f2:	4318      	orrs	r0, r3
    84f4:	4663      	mov	r3, ip
    84f6:	409a      	lsls	r2, r3
    84f8:	1e53      	subs	r3, r2, #1
    84fa:	419a      	sbcs	r2, r3
    84fc:	4653      	mov	r3, sl
    84fe:	4302      	orrs	r2, r0
    8500:	40d9      	lsrs	r1, r3
    8502:	e703      	b.n	830c <__aeabi_dadd+0x1c0>
    8504:	0026      	movs	r6, r4
    8506:	433e      	orrs	r6, r7
    8508:	d006      	beq.n	8518 <__aeabi_dadd+0x3cc>
    850a:	43eb      	mvns	r3, r5
    850c:	4699      	mov	r9, r3
    850e:	2b00      	cmp	r3, #0
    8510:	d0c7      	beq.n	84a2 <__aeabi_dadd+0x356>
    8512:	4e94      	ldr	r6, [pc, #592]	; (8764 <__aeabi_dadd+0x618>)
    8514:	42b0      	cmp	r0, r6
    8516:	d1ac      	bne.n	8472 <__aeabi_dadd+0x326>
    8518:	000c      	movs	r4, r1
    851a:	0017      	movs	r7, r2
    851c:	0006      	movs	r6, r0
    851e:	46d8      	mov	r8, fp
    8520:	e698      	b.n	8254 <__aeabi_dadd+0x108>
    8522:	4b90      	ldr	r3, [pc, #576]	; (8764 <__aeabi_dadd+0x618>)
    8524:	459a      	cmp	sl, r3
    8526:	d00b      	beq.n	8540 <__aeabi_dadd+0x3f4>
    8528:	4682      	mov	sl, r0
    852a:	e6e7      	b.n	82fc <__aeabi_dadd+0x1b0>
    852c:	2800      	cmp	r0, #0
    852e:	d000      	beq.n	8532 <__aeabi_dadd+0x3e6>
    8530:	e09e      	b.n	8670 <__aeabi_dadd+0x524>
    8532:	0018      	movs	r0, r3
    8534:	4310      	orrs	r0, r2
    8536:	d100      	bne.n	853a <__aeabi_dadd+0x3ee>
    8538:	e0e9      	b.n	870e <__aeabi_dadd+0x5c2>
    853a:	001c      	movs	r4, r3
    853c:	0017      	movs	r7, r2
    853e:	46d8      	mov	r8, fp
    8540:	4e88      	ldr	r6, [pc, #544]	; (8764 <__aeabi_dadd+0x618>)
    8542:	e687      	b.n	8254 <__aeabi_dadd+0x108>
    8544:	2500      	movs	r5, #0
    8546:	e772      	b.n	842e <__aeabi_dadd+0x2e2>
    8548:	2100      	movs	r1, #0
    854a:	e782      	b.n	8452 <__aeabi_dadd+0x306>
    854c:	0023      	movs	r3, r4
    854e:	433b      	orrs	r3, r7
    8550:	2e00      	cmp	r6, #0
    8552:	d000      	beq.n	8556 <__aeabi_dadd+0x40a>
    8554:	e0ab      	b.n	86ae <__aeabi_dadd+0x562>
    8556:	2b00      	cmp	r3, #0
    8558:	d100      	bne.n	855c <__aeabi_dadd+0x410>
    855a:	e0e7      	b.n	872c <__aeabi_dadd+0x5e0>
    855c:	000b      	movs	r3, r1
    855e:	4313      	orrs	r3, r2
    8560:	d100      	bne.n	8564 <__aeabi_dadd+0x418>
    8562:	e677      	b.n	8254 <__aeabi_dadd+0x108>
    8564:	18ba      	adds	r2, r7, r2
    8566:	42ba      	cmp	r2, r7
    8568:	41bf      	sbcs	r7, r7
    856a:	1864      	adds	r4, r4, r1
    856c:	427f      	negs	r7, r7
    856e:	19e4      	adds	r4, r4, r7
    8570:	0223      	lsls	r3, r4, #8
    8572:	d400      	bmi.n	8576 <__aeabi_dadd+0x42a>
    8574:	e0f2      	b.n	875c <__aeabi_dadd+0x610>
    8576:	4b7c      	ldr	r3, [pc, #496]	; (8768 <__aeabi_dadd+0x61c>)
    8578:	0017      	movs	r7, r2
    857a:	401c      	ands	r4, r3
    857c:	0006      	movs	r6, r0
    857e:	e669      	b.n	8254 <__aeabi_dadd+0x108>
    8580:	0020      	movs	r0, r4
    8582:	4338      	orrs	r0, r7
    8584:	2e00      	cmp	r6, #0
    8586:	d1d1      	bne.n	852c <__aeabi_dadd+0x3e0>
    8588:	2800      	cmp	r0, #0
    858a:	d15b      	bne.n	8644 <__aeabi_dadd+0x4f8>
    858c:	001c      	movs	r4, r3
    858e:	4314      	orrs	r4, r2
    8590:	d100      	bne.n	8594 <__aeabi_dadd+0x448>
    8592:	e0a8      	b.n	86e6 <__aeabi_dadd+0x59a>
    8594:	001c      	movs	r4, r3
    8596:	0017      	movs	r7, r2
    8598:	46d8      	mov	r8, fp
    859a:	e65b      	b.n	8254 <__aeabi_dadd+0x108>
    859c:	0006      	movs	r6, r0
    859e:	2400      	movs	r4, #0
    85a0:	2700      	movs	r7, #0
    85a2:	e697      	b.n	82d4 <__aeabi_dadd+0x188>
    85a4:	4650      	mov	r0, sl
    85a6:	000b      	movs	r3, r1
    85a8:	3820      	subs	r0, #32
    85aa:	40c3      	lsrs	r3, r0
    85ac:	4699      	mov	r9, r3
    85ae:	4653      	mov	r3, sl
    85b0:	2b20      	cmp	r3, #32
    85b2:	d100      	bne.n	85b6 <__aeabi_dadd+0x46a>
    85b4:	e095      	b.n	86e2 <__aeabi_dadd+0x596>
    85b6:	2340      	movs	r3, #64	; 0x40
    85b8:	4650      	mov	r0, sl
    85ba:	1a1b      	subs	r3, r3, r0
    85bc:	4099      	lsls	r1, r3
    85be:	430a      	orrs	r2, r1
    85c0:	1e51      	subs	r1, r2, #1
    85c2:	418a      	sbcs	r2, r1
    85c4:	464b      	mov	r3, r9
    85c6:	2100      	movs	r1, #0
    85c8:	431a      	orrs	r2, r3
    85ca:	e69f      	b.n	830c <__aeabi_dadd+0x1c0>
    85cc:	2e00      	cmp	r6, #0
    85ce:	d130      	bne.n	8632 <__aeabi_dadd+0x4e6>
    85d0:	0026      	movs	r6, r4
    85d2:	433e      	orrs	r6, r7
    85d4:	d067      	beq.n	86a6 <__aeabi_dadd+0x55a>
    85d6:	43db      	mvns	r3, r3
    85d8:	469a      	mov	sl, r3
    85da:	2b00      	cmp	r3, #0
    85dc:	d01c      	beq.n	8618 <__aeabi_dadd+0x4cc>
    85de:	4e61      	ldr	r6, [pc, #388]	; (8764 <__aeabi_dadd+0x618>)
    85e0:	42b0      	cmp	r0, r6
    85e2:	d060      	beq.n	86a6 <__aeabi_dadd+0x55a>
    85e4:	4653      	mov	r3, sl
    85e6:	2b38      	cmp	r3, #56	; 0x38
    85e8:	dd00      	ble.n	85ec <__aeabi_dadd+0x4a0>
    85ea:	e096      	b.n	871a <__aeabi_dadd+0x5ce>
    85ec:	2b1f      	cmp	r3, #31
    85ee:	dd00      	ble.n	85f2 <__aeabi_dadd+0x4a6>
    85f0:	e09f      	b.n	8732 <__aeabi_dadd+0x5e6>
    85f2:	2620      	movs	r6, #32
    85f4:	1af3      	subs	r3, r6, r3
    85f6:	0026      	movs	r6, r4
    85f8:	409e      	lsls	r6, r3
    85fa:	469c      	mov	ip, r3
    85fc:	46b3      	mov	fp, r6
    85fe:	4653      	mov	r3, sl
    8600:	003e      	movs	r6, r7
    8602:	40de      	lsrs	r6, r3
    8604:	0033      	movs	r3, r6
    8606:	465e      	mov	r6, fp
    8608:	431e      	orrs	r6, r3
    860a:	4663      	mov	r3, ip
    860c:	409f      	lsls	r7, r3
    860e:	1e7b      	subs	r3, r7, #1
    8610:	419f      	sbcs	r7, r3
    8612:	4653      	mov	r3, sl
    8614:	40dc      	lsrs	r4, r3
    8616:	4337      	orrs	r7, r6
    8618:	18bf      	adds	r7, r7, r2
    861a:	4297      	cmp	r7, r2
    861c:	4192      	sbcs	r2, r2
    861e:	1864      	adds	r4, r4, r1
    8620:	4252      	negs	r2, r2
    8622:	18a4      	adds	r4, r4, r2
    8624:	0006      	movs	r6, r0
    8626:	e678      	b.n	831a <__aeabi_dadd+0x1ce>
    8628:	4327      	orrs	r7, r4
    862a:	1e7c      	subs	r4, r7, #1
    862c:	41a7      	sbcs	r7, r4
    862e:	2400      	movs	r4, #0
    8630:	e737      	b.n	84a2 <__aeabi_dadd+0x356>
    8632:	4e4c      	ldr	r6, [pc, #304]	; (8764 <__aeabi_dadd+0x618>)
    8634:	42b0      	cmp	r0, r6
    8636:	d036      	beq.n	86a6 <__aeabi_dadd+0x55a>
    8638:	2680      	movs	r6, #128	; 0x80
    863a:	425b      	negs	r3, r3
    863c:	0436      	lsls	r6, r6, #16
    863e:	469a      	mov	sl, r3
    8640:	4334      	orrs	r4, r6
    8642:	e7cf      	b.n	85e4 <__aeabi_dadd+0x498>
    8644:	0018      	movs	r0, r3
    8646:	4310      	orrs	r0, r2
    8648:	d100      	bne.n	864c <__aeabi_dadd+0x500>
    864a:	e603      	b.n	8254 <__aeabi_dadd+0x108>
    864c:	1ab8      	subs	r0, r7, r2
    864e:	4684      	mov	ip, r0
    8650:	4567      	cmp	r7, ip
    8652:	41ad      	sbcs	r5, r5
    8654:	1ae0      	subs	r0, r4, r3
    8656:	426d      	negs	r5, r5
    8658:	1b40      	subs	r0, r0, r5
    865a:	0205      	lsls	r5, r0, #8
    865c:	d400      	bmi.n	8660 <__aeabi_dadd+0x514>
    865e:	e62c      	b.n	82ba <__aeabi_dadd+0x16e>
    8660:	1bd7      	subs	r7, r2, r7
    8662:	42ba      	cmp	r2, r7
    8664:	4192      	sbcs	r2, r2
    8666:	1b1c      	subs	r4, r3, r4
    8668:	4252      	negs	r2, r2
    866a:	1aa4      	subs	r4, r4, r2
    866c:	46d8      	mov	r8, fp
    866e:	e5f1      	b.n	8254 <__aeabi_dadd+0x108>
    8670:	0018      	movs	r0, r3
    8672:	4310      	orrs	r0, r2
    8674:	d100      	bne.n	8678 <__aeabi_dadd+0x52c>
    8676:	e763      	b.n	8540 <__aeabi_dadd+0x3f4>
    8678:	08f8      	lsrs	r0, r7, #3
    867a:	0767      	lsls	r7, r4, #29
    867c:	4307      	orrs	r7, r0
    867e:	2080      	movs	r0, #128	; 0x80
    8680:	08e4      	lsrs	r4, r4, #3
    8682:	0300      	lsls	r0, r0, #12
    8684:	4204      	tst	r4, r0
    8686:	d008      	beq.n	869a <__aeabi_dadd+0x54e>
    8688:	08dd      	lsrs	r5, r3, #3
    868a:	4205      	tst	r5, r0
    868c:	d105      	bne.n	869a <__aeabi_dadd+0x54e>
    868e:	08d2      	lsrs	r2, r2, #3
    8690:	0759      	lsls	r1, r3, #29
    8692:	4311      	orrs	r1, r2
    8694:	000f      	movs	r7, r1
    8696:	002c      	movs	r4, r5
    8698:	46d8      	mov	r8, fp
    869a:	0f7b      	lsrs	r3, r7, #29
    869c:	00e4      	lsls	r4, r4, #3
    869e:	431c      	orrs	r4, r3
    86a0:	00ff      	lsls	r7, r7, #3
    86a2:	4e30      	ldr	r6, [pc, #192]	; (8764 <__aeabi_dadd+0x618>)
    86a4:	e5d6      	b.n	8254 <__aeabi_dadd+0x108>
    86a6:	000c      	movs	r4, r1
    86a8:	0017      	movs	r7, r2
    86aa:	0006      	movs	r6, r0
    86ac:	e5d2      	b.n	8254 <__aeabi_dadd+0x108>
    86ae:	2b00      	cmp	r3, #0
    86b0:	d038      	beq.n	8724 <__aeabi_dadd+0x5d8>
    86b2:	000b      	movs	r3, r1
    86b4:	4313      	orrs	r3, r2
    86b6:	d100      	bne.n	86ba <__aeabi_dadd+0x56e>
    86b8:	e742      	b.n	8540 <__aeabi_dadd+0x3f4>
    86ba:	08f8      	lsrs	r0, r7, #3
    86bc:	0767      	lsls	r7, r4, #29
    86be:	4307      	orrs	r7, r0
    86c0:	2080      	movs	r0, #128	; 0x80
    86c2:	08e4      	lsrs	r4, r4, #3
    86c4:	0300      	lsls	r0, r0, #12
    86c6:	4204      	tst	r4, r0
    86c8:	d0e7      	beq.n	869a <__aeabi_dadd+0x54e>
    86ca:	08cb      	lsrs	r3, r1, #3
    86cc:	4203      	tst	r3, r0
    86ce:	d1e4      	bne.n	869a <__aeabi_dadd+0x54e>
    86d0:	08d2      	lsrs	r2, r2, #3
    86d2:	0749      	lsls	r1, r1, #29
    86d4:	4311      	orrs	r1, r2
    86d6:	000f      	movs	r7, r1
    86d8:	001c      	movs	r4, r3
    86da:	e7de      	b.n	869a <__aeabi_dadd+0x54e>
    86dc:	2700      	movs	r7, #0
    86de:	2400      	movs	r4, #0
    86e0:	e5d5      	b.n	828e <__aeabi_dadd+0x142>
    86e2:	2100      	movs	r1, #0
    86e4:	e76b      	b.n	85be <__aeabi_dadd+0x472>
    86e6:	2500      	movs	r5, #0
    86e8:	2700      	movs	r7, #0
    86ea:	e5f3      	b.n	82d4 <__aeabi_dadd+0x188>
    86ec:	464e      	mov	r6, r9
    86ee:	0025      	movs	r5, r4
    86f0:	3e20      	subs	r6, #32
    86f2:	40f5      	lsrs	r5, r6
    86f4:	464b      	mov	r3, r9
    86f6:	002e      	movs	r6, r5
    86f8:	2b20      	cmp	r3, #32
    86fa:	d02d      	beq.n	8758 <__aeabi_dadd+0x60c>
    86fc:	2540      	movs	r5, #64	; 0x40
    86fe:	1aed      	subs	r5, r5, r3
    8700:	40ac      	lsls	r4, r5
    8702:	4327      	orrs	r7, r4
    8704:	1e7c      	subs	r4, r7, #1
    8706:	41a7      	sbcs	r7, r4
    8708:	2400      	movs	r4, #0
    870a:	4337      	orrs	r7, r6
    870c:	e6c9      	b.n	84a2 <__aeabi_dadd+0x356>
    870e:	2480      	movs	r4, #128	; 0x80
    8710:	2500      	movs	r5, #0
    8712:	0324      	lsls	r4, r4, #12
    8714:	4e13      	ldr	r6, [pc, #76]	; (8764 <__aeabi_dadd+0x618>)
    8716:	2700      	movs	r7, #0
    8718:	e5dc      	b.n	82d4 <__aeabi_dadd+0x188>
    871a:	4327      	orrs	r7, r4
    871c:	1e7c      	subs	r4, r7, #1
    871e:	41a7      	sbcs	r7, r4
    8720:	2400      	movs	r4, #0
    8722:	e779      	b.n	8618 <__aeabi_dadd+0x4cc>
    8724:	000c      	movs	r4, r1
    8726:	0017      	movs	r7, r2
    8728:	4e0e      	ldr	r6, [pc, #56]	; (8764 <__aeabi_dadd+0x618>)
    872a:	e593      	b.n	8254 <__aeabi_dadd+0x108>
    872c:	000c      	movs	r4, r1
    872e:	0017      	movs	r7, r2
    8730:	e590      	b.n	8254 <__aeabi_dadd+0x108>
    8732:	4656      	mov	r6, sl
    8734:	0023      	movs	r3, r4
    8736:	3e20      	subs	r6, #32
    8738:	40f3      	lsrs	r3, r6
    873a:	4699      	mov	r9, r3
    873c:	4653      	mov	r3, sl
    873e:	2b20      	cmp	r3, #32
    8740:	d00e      	beq.n	8760 <__aeabi_dadd+0x614>
    8742:	2340      	movs	r3, #64	; 0x40
    8744:	4656      	mov	r6, sl
    8746:	1b9b      	subs	r3, r3, r6
    8748:	409c      	lsls	r4, r3
    874a:	4327      	orrs	r7, r4
    874c:	1e7c      	subs	r4, r7, #1
    874e:	41a7      	sbcs	r7, r4
    8750:	464b      	mov	r3, r9
    8752:	2400      	movs	r4, #0
    8754:	431f      	orrs	r7, r3
    8756:	e75f      	b.n	8618 <__aeabi_dadd+0x4cc>
    8758:	2400      	movs	r4, #0
    875a:	e7d2      	b.n	8702 <__aeabi_dadd+0x5b6>
    875c:	0017      	movs	r7, r2
    875e:	e5b2      	b.n	82c6 <__aeabi_dadd+0x17a>
    8760:	2400      	movs	r4, #0
    8762:	e7f2      	b.n	874a <__aeabi_dadd+0x5fe>
    8764:	000007ff 	.word	0x000007ff
    8768:	ff7fffff 	.word	0xff7fffff

0000876c <__aeabi_ddiv>:
    876c:	b5f0      	push	{r4, r5, r6, r7, lr}
    876e:	4657      	mov	r7, sl
    8770:	4645      	mov	r5, r8
    8772:	46de      	mov	lr, fp
    8774:	464e      	mov	r6, r9
    8776:	b5e0      	push	{r5, r6, r7, lr}
    8778:	004c      	lsls	r4, r1, #1
    877a:	030e      	lsls	r6, r1, #12
    877c:	b087      	sub	sp, #28
    877e:	4683      	mov	fp, r0
    8780:	4692      	mov	sl, r2
    8782:	001d      	movs	r5, r3
    8784:	4680      	mov	r8, r0
    8786:	0b36      	lsrs	r6, r6, #12
    8788:	0d64      	lsrs	r4, r4, #21
    878a:	0fcf      	lsrs	r7, r1, #31
    878c:	2c00      	cmp	r4, #0
    878e:	d04f      	beq.n	8830 <__aeabi_ddiv+0xc4>
    8790:	4b6f      	ldr	r3, [pc, #444]	; (8950 <__aeabi_ddiv+0x1e4>)
    8792:	429c      	cmp	r4, r3
    8794:	d035      	beq.n	8802 <__aeabi_ddiv+0x96>
    8796:	2380      	movs	r3, #128	; 0x80
    8798:	0f42      	lsrs	r2, r0, #29
    879a:	041b      	lsls	r3, r3, #16
    879c:	00f6      	lsls	r6, r6, #3
    879e:	4313      	orrs	r3, r2
    87a0:	4333      	orrs	r3, r6
    87a2:	4699      	mov	r9, r3
    87a4:	00c3      	lsls	r3, r0, #3
    87a6:	4698      	mov	r8, r3
    87a8:	4b6a      	ldr	r3, [pc, #424]	; (8954 <__aeabi_ddiv+0x1e8>)
    87aa:	2600      	movs	r6, #0
    87ac:	469c      	mov	ip, r3
    87ae:	2300      	movs	r3, #0
    87b0:	4464      	add	r4, ip
    87b2:	9303      	str	r3, [sp, #12]
    87b4:	032b      	lsls	r3, r5, #12
    87b6:	0b1b      	lsrs	r3, r3, #12
    87b8:	469b      	mov	fp, r3
    87ba:	006b      	lsls	r3, r5, #1
    87bc:	0fed      	lsrs	r5, r5, #31
    87be:	4650      	mov	r0, sl
    87c0:	0d5b      	lsrs	r3, r3, #21
    87c2:	9501      	str	r5, [sp, #4]
    87c4:	d05e      	beq.n	8884 <__aeabi_ddiv+0x118>
    87c6:	4a62      	ldr	r2, [pc, #392]	; (8950 <__aeabi_ddiv+0x1e4>)
    87c8:	4293      	cmp	r3, r2
    87ca:	d053      	beq.n	8874 <__aeabi_ddiv+0x108>
    87cc:	465a      	mov	r2, fp
    87ce:	00d1      	lsls	r1, r2, #3
    87d0:	2280      	movs	r2, #128	; 0x80
    87d2:	0f40      	lsrs	r0, r0, #29
    87d4:	0412      	lsls	r2, r2, #16
    87d6:	4302      	orrs	r2, r0
    87d8:	430a      	orrs	r2, r1
    87da:	4693      	mov	fp, r2
    87dc:	4652      	mov	r2, sl
    87de:	00d1      	lsls	r1, r2, #3
    87e0:	4a5c      	ldr	r2, [pc, #368]	; (8954 <__aeabi_ddiv+0x1e8>)
    87e2:	4694      	mov	ip, r2
    87e4:	2200      	movs	r2, #0
    87e6:	4463      	add	r3, ip
    87e8:	0038      	movs	r0, r7
    87ea:	4068      	eors	r0, r5
    87ec:	4684      	mov	ip, r0
    87ee:	9002      	str	r0, [sp, #8]
    87f0:	1ae4      	subs	r4, r4, r3
    87f2:	4316      	orrs	r6, r2
    87f4:	2e0f      	cmp	r6, #15
    87f6:	d900      	bls.n	87fa <__aeabi_ddiv+0x8e>
    87f8:	e0b4      	b.n	8964 <__aeabi_ddiv+0x1f8>
    87fa:	4b57      	ldr	r3, [pc, #348]	; (8958 <__aeabi_ddiv+0x1ec>)
    87fc:	00b6      	lsls	r6, r6, #2
    87fe:	599b      	ldr	r3, [r3, r6]
    8800:	469f      	mov	pc, r3
    8802:	0003      	movs	r3, r0
    8804:	4333      	orrs	r3, r6
    8806:	4699      	mov	r9, r3
    8808:	d16c      	bne.n	88e4 <__aeabi_ddiv+0x178>
    880a:	2300      	movs	r3, #0
    880c:	4698      	mov	r8, r3
    880e:	3302      	adds	r3, #2
    8810:	2608      	movs	r6, #8
    8812:	9303      	str	r3, [sp, #12]
    8814:	e7ce      	b.n	87b4 <__aeabi_ddiv+0x48>
    8816:	46cb      	mov	fp, r9
    8818:	4641      	mov	r1, r8
    881a:	9a03      	ldr	r2, [sp, #12]
    881c:	9701      	str	r7, [sp, #4]
    881e:	2a02      	cmp	r2, #2
    8820:	d165      	bne.n	88ee <__aeabi_ddiv+0x182>
    8822:	9b01      	ldr	r3, [sp, #4]
    8824:	4c4a      	ldr	r4, [pc, #296]	; (8950 <__aeabi_ddiv+0x1e4>)
    8826:	469c      	mov	ip, r3
    8828:	2300      	movs	r3, #0
    882a:	2200      	movs	r2, #0
    882c:	4698      	mov	r8, r3
    882e:	e06b      	b.n	8908 <__aeabi_ddiv+0x19c>
    8830:	0003      	movs	r3, r0
    8832:	4333      	orrs	r3, r6
    8834:	4699      	mov	r9, r3
    8836:	d04e      	beq.n	88d6 <__aeabi_ddiv+0x16a>
    8838:	2e00      	cmp	r6, #0
    883a:	d100      	bne.n	883e <__aeabi_ddiv+0xd2>
    883c:	e1bc      	b.n	8bb8 <__aeabi_ddiv+0x44c>
    883e:	0030      	movs	r0, r6
    8840:	f001 f8ca 	bl	99d8 <__clzsi2>
    8844:	0003      	movs	r3, r0
    8846:	3b0b      	subs	r3, #11
    8848:	2b1c      	cmp	r3, #28
    884a:	dd00      	ble.n	884e <__aeabi_ddiv+0xe2>
    884c:	e1ac      	b.n	8ba8 <__aeabi_ddiv+0x43c>
    884e:	221d      	movs	r2, #29
    8850:	1ad3      	subs	r3, r2, r3
    8852:	465a      	mov	r2, fp
    8854:	0001      	movs	r1, r0
    8856:	40da      	lsrs	r2, r3
    8858:	3908      	subs	r1, #8
    885a:	408e      	lsls	r6, r1
    885c:	0013      	movs	r3, r2
    885e:	4333      	orrs	r3, r6
    8860:	4699      	mov	r9, r3
    8862:	465b      	mov	r3, fp
    8864:	408b      	lsls	r3, r1
    8866:	4698      	mov	r8, r3
    8868:	2300      	movs	r3, #0
    886a:	4c3c      	ldr	r4, [pc, #240]	; (895c <__aeabi_ddiv+0x1f0>)
    886c:	2600      	movs	r6, #0
    886e:	1a24      	subs	r4, r4, r0
    8870:	9303      	str	r3, [sp, #12]
    8872:	e79f      	b.n	87b4 <__aeabi_ddiv+0x48>
    8874:	4651      	mov	r1, sl
    8876:	465a      	mov	r2, fp
    8878:	4311      	orrs	r1, r2
    887a:	d129      	bne.n	88d0 <__aeabi_ddiv+0x164>
    887c:	2200      	movs	r2, #0
    887e:	4693      	mov	fp, r2
    8880:	3202      	adds	r2, #2
    8882:	e7b1      	b.n	87e8 <__aeabi_ddiv+0x7c>
    8884:	4659      	mov	r1, fp
    8886:	4301      	orrs	r1, r0
    8888:	d01e      	beq.n	88c8 <__aeabi_ddiv+0x15c>
    888a:	465b      	mov	r3, fp
    888c:	2b00      	cmp	r3, #0
    888e:	d100      	bne.n	8892 <__aeabi_ddiv+0x126>
    8890:	e19e      	b.n	8bd0 <__aeabi_ddiv+0x464>
    8892:	4658      	mov	r0, fp
    8894:	f001 f8a0 	bl	99d8 <__clzsi2>
    8898:	0003      	movs	r3, r0
    889a:	3b0b      	subs	r3, #11
    889c:	2b1c      	cmp	r3, #28
    889e:	dd00      	ble.n	88a2 <__aeabi_ddiv+0x136>
    88a0:	e18f      	b.n	8bc2 <__aeabi_ddiv+0x456>
    88a2:	0002      	movs	r2, r0
    88a4:	4659      	mov	r1, fp
    88a6:	3a08      	subs	r2, #8
    88a8:	4091      	lsls	r1, r2
    88aa:	468b      	mov	fp, r1
    88ac:	211d      	movs	r1, #29
    88ae:	1acb      	subs	r3, r1, r3
    88b0:	4651      	mov	r1, sl
    88b2:	40d9      	lsrs	r1, r3
    88b4:	000b      	movs	r3, r1
    88b6:	4659      	mov	r1, fp
    88b8:	430b      	orrs	r3, r1
    88ba:	4651      	mov	r1, sl
    88bc:	469b      	mov	fp, r3
    88be:	4091      	lsls	r1, r2
    88c0:	4b26      	ldr	r3, [pc, #152]	; (895c <__aeabi_ddiv+0x1f0>)
    88c2:	2200      	movs	r2, #0
    88c4:	1a1b      	subs	r3, r3, r0
    88c6:	e78f      	b.n	87e8 <__aeabi_ddiv+0x7c>
    88c8:	2300      	movs	r3, #0
    88ca:	2201      	movs	r2, #1
    88cc:	469b      	mov	fp, r3
    88ce:	e78b      	b.n	87e8 <__aeabi_ddiv+0x7c>
    88d0:	4651      	mov	r1, sl
    88d2:	2203      	movs	r2, #3
    88d4:	e788      	b.n	87e8 <__aeabi_ddiv+0x7c>
    88d6:	2300      	movs	r3, #0
    88d8:	4698      	mov	r8, r3
    88da:	3301      	adds	r3, #1
    88dc:	2604      	movs	r6, #4
    88de:	2400      	movs	r4, #0
    88e0:	9303      	str	r3, [sp, #12]
    88e2:	e767      	b.n	87b4 <__aeabi_ddiv+0x48>
    88e4:	2303      	movs	r3, #3
    88e6:	46b1      	mov	r9, r6
    88e8:	9303      	str	r3, [sp, #12]
    88ea:	260c      	movs	r6, #12
    88ec:	e762      	b.n	87b4 <__aeabi_ddiv+0x48>
    88ee:	2a03      	cmp	r2, #3
    88f0:	d100      	bne.n	88f4 <__aeabi_ddiv+0x188>
    88f2:	e25c      	b.n	8dae <__aeabi_ddiv+0x642>
    88f4:	9b01      	ldr	r3, [sp, #4]
    88f6:	2a01      	cmp	r2, #1
    88f8:	d000      	beq.n	88fc <__aeabi_ddiv+0x190>
    88fa:	e1e4      	b.n	8cc6 <__aeabi_ddiv+0x55a>
    88fc:	4013      	ands	r3, r2
    88fe:	469c      	mov	ip, r3
    8900:	2300      	movs	r3, #0
    8902:	2400      	movs	r4, #0
    8904:	2200      	movs	r2, #0
    8906:	4698      	mov	r8, r3
    8908:	2100      	movs	r1, #0
    890a:	0312      	lsls	r2, r2, #12
    890c:	0b13      	lsrs	r3, r2, #12
    890e:	0d0a      	lsrs	r2, r1, #20
    8910:	0512      	lsls	r2, r2, #20
    8912:	431a      	orrs	r2, r3
    8914:	0523      	lsls	r3, r4, #20
    8916:	4c12      	ldr	r4, [pc, #72]	; (8960 <__aeabi_ddiv+0x1f4>)
    8918:	4640      	mov	r0, r8
    891a:	4022      	ands	r2, r4
    891c:	4313      	orrs	r3, r2
    891e:	4662      	mov	r2, ip
    8920:	005b      	lsls	r3, r3, #1
    8922:	07d2      	lsls	r2, r2, #31
    8924:	085b      	lsrs	r3, r3, #1
    8926:	4313      	orrs	r3, r2
    8928:	0019      	movs	r1, r3
    892a:	b007      	add	sp, #28
    892c:	bc3c      	pop	{r2, r3, r4, r5}
    892e:	4690      	mov	r8, r2
    8930:	4699      	mov	r9, r3
    8932:	46a2      	mov	sl, r4
    8934:	46ab      	mov	fp, r5
    8936:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8938:	2300      	movs	r3, #0
    893a:	2280      	movs	r2, #128	; 0x80
    893c:	469c      	mov	ip, r3
    893e:	0312      	lsls	r2, r2, #12
    8940:	4698      	mov	r8, r3
    8942:	4c03      	ldr	r4, [pc, #12]	; (8950 <__aeabi_ddiv+0x1e4>)
    8944:	e7e0      	b.n	8908 <__aeabi_ddiv+0x19c>
    8946:	2300      	movs	r3, #0
    8948:	4c01      	ldr	r4, [pc, #4]	; (8950 <__aeabi_ddiv+0x1e4>)
    894a:	2200      	movs	r2, #0
    894c:	4698      	mov	r8, r3
    894e:	e7db      	b.n	8908 <__aeabi_ddiv+0x19c>
    8950:	000007ff 	.word	0x000007ff
    8954:	fffffc01 	.word	0xfffffc01
    8958:	0000ba0c 	.word	0x0000ba0c
    895c:	fffffc0d 	.word	0xfffffc0d
    8960:	800fffff 	.word	0x800fffff
    8964:	45d9      	cmp	r9, fp
    8966:	d900      	bls.n	896a <__aeabi_ddiv+0x1fe>
    8968:	e139      	b.n	8bde <__aeabi_ddiv+0x472>
    896a:	d100      	bne.n	896e <__aeabi_ddiv+0x202>
    896c:	e134      	b.n	8bd8 <__aeabi_ddiv+0x46c>
    896e:	2300      	movs	r3, #0
    8970:	4646      	mov	r6, r8
    8972:	464d      	mov	r5, r9
    8974:	469a      	mov	sl, r3
    8976:	3c01      	subs	r4, #1
    8978:	465b      	mov	r3, fp
    897a:	0e0a      	lsrs	r2, r1, #24
    897c:	021b      	lsls	r3, r3, #8
    897e:	431a      	orrs	r2, r3
    8980:	020b      	lsls	r3, r1, #8
    8982:	0c17      	lsrs	r7, r2, #16
    8984:	9303      	str	r3, [sp, #12]
    8986:	0413      	lsls	r3, r2, #16
    8988:	0c1b      	lsrs	r3, r3, #16
    898a:	0039      	movs	r1, r7
    898c:	0028      	movs	r0, r5
    898e:	4690      	mov	r8, r2
    8990:	9301      	str	r3, [sp, #4]
    8992:	f7fe fd71 	bl	7478 <__udivsi3>
    8996:	0002      	movs	r2, r0
    8998:	9b01      	ldr	r3, [sp, #4]
    899a:	4683      	mov	fp, r0
    899c:	435a      	muls	r2, r3
    899e:	0028      	movs	r0, r5
    89a0:	0039      	movs	r1, r7
    89a2:	4691      	mov	r9, r2
    89a4:	f7fe fdee 	bl	7584 <__aeabi_uidivmod>
    89a8:	0c35      	lsrs	r5, r6, #16
    89aa:	0409      	lsls	r1, r1, #16
    89ac:	430d      	orrs	r5, r1
    89ae:	45a9      	cmp	r9, r5
    89b0:	d90d      	bls.n	89ce <__aeabi_ddiv+0x262>
    89b2:	465b      	mov	r3, fp
    89b4:	4445      	add	r5, r8
    89b6:	3b01      	subs	r3, #1
    89b8:	45a8      	cmp	r8, r5
    89ba:	d900      	bls.n	89be <__aeabi_ddiv+0x252>
    89bc:	e13a      	b.n	8c34 <__aeabi_ddiv+0x4c8>
    89be:	45a9      	cmp	r9, r5
    89c0:	d800      	bhi.n	89c4 <__aeabi_ddiv+0x258>
    89c2:	e137      	b.n	8c34 <__aeabi_ddiv+0x4c8>
    89c4:	2302      	movs	r3, #2
    89c6:	425b      	negs	r3, r3
    89c8:	469c      	mov	ip, r3
    89ca:	4445      	add	r5, r8
    89cc:	44e3      	add	fp, ip
    89ce:	464b      	mov	r3, r9
    89d0:	1aeb      	subs	r3, r5, r3
    89d2:	0039      	movs	r1, r7
    89d4:	0018      	movs	r0, r3
    89d6:	9304      	str	r3, [sp, #16]
    89d8:	f7fe fd4e 	bl	7478 <__udivsi3>
    89dc:	9b01      	ldr	r3, [sp, #4]
    89de:	0005      	movs	r5, r0
    89e0:	4343      	muls	r3, r0
    89e2:	0039      	movs	r1, r7
    89e4:	9804      	ldr	r0, [sp, #16]
    89e6:	4699      	mov	r9, r3
    89e8:	f7fe fdcc 	bl	7584 <__aeabi_uidivmod>
    89ec:	0433      	lsls	r3, r6, #16
    89ee:	0409      	lsls	r1, r1, #16
    89f0:	0c1b      	lsrs	r3, r3, #16
    89f2:	430b      	orrs	r3, r1
    89f4:	4599      	cmp	r9, r3
    89f6:	d909      	bls.n	8a0c <__aeabi_ddiv+0x2a0>
    89f8:	4443      	add	r3, r8
    89fa:	1e6a      	subs	r2, r5, #1
    89fc:	4598      	cmp	r8, r3
    89fe:	d900      	bls.n	8a02 <__aeabi_ddiv+0x296>
    8a00:	e11a      	b.n	8c38 <__aeabi_ddiv+0x4cc>
    8a02:	4599      	cmp	r9, r3
    8a04:	d800      	bhi.n	8a08 <__aeabi_ddiv+0x29c>
    8a06:	e117      	b.n	8c38 <__aeabi_ddiv+0x4cc>
    8a08:	3d02      	subs	r5, #2
    8a0a:	4443      	add	r3, r8
    8a0c:	464a      	mov	r2, r9
    8a0e:	1a9b      	subs	r3, r3, r2
    8a10:	465a      	mov	r2, fp
    8a12:	0412      	lsls	r2, r2, #16
    8a14:	432a      	orrs	r2, r5
    8a16:	9903      	ldr	r1, [sp, #12]
    8a18:	4693      	mov	fp, r2
    8a1a:	0c10      	lsrs	r0, r2, #16
    8a1c:	0c0a      	lsrs	r2, r1, #16
    8a1e:	4691      	mov	r9, r2
    8a20:	0409      	lsls	r1, r1, #16
    8a22:	465a      	mov	r2, fp
    8a24:	0c09      	lsrs	r1, r1, #16
    8a26:	464e      	mov	r6, r9
    8a28:	000d      	movs	r5, r1
    8a2a:	0412      	lsls	r2, r2, #16
    8a2c:	0c12      	lsrs	r2, r2, #16
    8a2e:	4345      	muls	r5, r0
    8a30:	9105      	str	r1, [sp, #20]
    8a32:	4351      	muls	r1, r2
    8a34:	4372      	muls	r2, r6
    8a36:	4370      	muls	r0, r6
    8a38:	1952      	adds	r2, r2, r5
    8a3a:	0c0e      	lsrs	r6, r1, #16
    8a3c:	18b2      	adds	r2, r6, r2
    8a3e:	4295      	cmp	r5, r2
    8a40:	d903      	bls.n	8a4a <__aeabi_ddiv+0x2de>
    8a42:	2580      	movs	r5, #128	; 0x80
    8a44:	026d      	lsls	r5, r5, #9
    8a46:	46ac      	mov	ip, r5
    8a48:	4460      	add	r0, ip
    8a4a:	0c15      	lsrs	r5, r2, #16
    8a4c:	0409      	lsls	r1, r1, #16
    8a4e:	0412      	lsls	r2, r2, #16
    8a50:	0c09      	lsrs	r1, r1, #16
    8a52:	1828      	adds	r0, r5, r0
    8a54:	1852      	adds	r2, r2, r1
    8a56:	4283      	cmp	r3, r0
    8a58:	d200      	bcs.n	8a5c <__aeabi_ddiv+0x2f0>
    8a5a:	e0ce      	b.n	8bfa <__aeabi_ddiv+0x48e>
    8a5c:	d100      	bne.n	8a60 <__aeabi_ddiv+0x2f4>
    8a5e:	e0c8      	b.n	8bf2 <__aeabi_ddiv+0x486>
    8a60:	1a1d      	subs	r5, r3, r0
    8a62:	4653      	mov	r3, sl
    8a64:	1a9e      	subs	r6, r3, r2
    8a66:	45b2      	cmp	sl, r6
    8a68:	4192      	sbcs	r2, r2
    8a6a:	4252      	negs	r2, r2
    8a6c:	1aab      	subs	r3, r5, r2
    8a6e:	469a      	mov	sl, r3
    8a70:	4598      	cmp	r8, r3
    8a72:	d100      	bne.n	8a76 <__aeabi_ddiv+0x30a>
    8a74:	e117      	b.n	8ca6 <__aeabi_ddiv+0x53a>
    8a76:	0039      	movs	r1, r7
    8a78:	0018      	movs	r0, r3
    8a7a:	f7fe fcfd 	bl	7478 <__udivsi3>
    8a7e:	9b01      	ldr	r3, [sp, #4]
    8a80:	0005      	movs	r5, r0
    8a82:	4343      	muls	r3, r0
    8a84:	0039      	movs	r1, r7
    8a86:	4650      	mov	r0, sl
    8a88:	9304      	str	r3, [sp, #16]
    8a8a:	f7fe fd7b 	bl	7584 <__aeabi_uidivmod>
    8a8e:	9804      	ldr	r0, [sp, #16]
    8a90:	040b      	lsls	r3, r1, #16
    8a92:	0c31      	lsrs	r1, r6, #16
    8a94:	4319      	orrs	r1, r3
    8a96:	4288      	cmp	r0, r1
    8a98:	d909      	bls.n	8aae <__aeabi_ddiv+0x342>
    8a9a:	4441      	add	r1, r8
    8a9c:	1e6b      	subs	r3, r5, #1
    8a9e:	4588      	cmp	r8, r1
    8aa0:	d900      	bls.n	8aa4 <__aeabi_ddiv+0x338>
    8aa2:	e107      	b.n	8cb4 <__aeabi_ddiv+0x548>
    8aa4:	4288      	cmp	r0, r1
    8aa6:	d800      	bhi.n	8aaa <__aeabi_ddiv+0x33e>
    8aa8:	e104      	b.n	8cb4 <__aeabi_ddiv+0x548>
    8aaa:	3d02      	subs	r5, #2
    8aac:	4441      	add	r1, r8
    8aae:	9b04      	ldr	r3, [sp, #16]
    8ab0:	1acb      	subs	r3, r1, r3
    8ab2:	0018      	movs	r0, r3
    8ab4:	0039      	movs	r1, r7
    8ab6:	9304      	str	r3, [sp, #16]
    8ab8:	f7fe fcde 	bl	7478 <__udivsi3>
    8abc:	9b01      	ldr	r3, [sp, #4]
    8abe:	4682      	mov	sl, r0
    8ac0:	4343      	muls	r3, r0
    8ac2:	0039      	movs	r1, r7
    8ac4:	9804      	ldr	r0, [sp, #16]
    8ac6:	9301      	str	r3, [sp, #4]
    8ac8:	f7fe fd5c 	bl	7584 <__aeabi_uidivmod>
    8acc:	9801      	ldr	r0, [sp, #4]
    8ace:	040b      	lsls	r3, r1, #16
    8ad0:	0431      	lsls	r1, r6, #16
    8ad2:	0c09      	lsrs	r1, r1, #16
    8ad4:	4319      	orrs	r1, r3
    8ad6:	4288      	cmp	r0, r1
    8ad8:	d90d      	bls.n	8af6 <__aeabi_ddiv+0x38a>
    8ada:	4653      	mov	r3, sl
    8adc:	4441      	add	r1, r8
    8ade:	3b01      	subs	r3, #1
    8ae0:	4588      	cmp	r8, r1
    8ae2:	d900      	bls.n	8ae6 <__aeabi_ddiv+0x37a>
    8ae4:	e0e8      	b.n	8cb8 <__aeabi_ddiv+0x54c>
    8ae6:	4288      	cmp	r0, r1
    8ae8:	d800      	bhi.n	8aec <__aeabi_ddiv+0x380>
    8aea:	e0e5      	b.n	8cb8 <__aeabi_ddiv+0x54c>
    8aec:	2302      	movs	r3, #2
    8aee:	425b      	negs	r3, r3
    8af0:	469c      	mov	ip, r3
    8af2:	4441      	add	r1, r8
    8af4:	44e2      	add	sl, ip
    8af6:	9b01      	ldr	r3, [sp, #4]
    8af8:	042d      	lsls	r5, r5, #16
    8afa:	1ace      	subs	r6, r1, r3
    8afc:	4651      	mov	r1, sl
    8afe:	4329      	orrs	r1, r5
    8b00:	9d05      	ldr	r5, [sp, #20]
    8b02:	464f      	mov	r7, r9
    8b04:	002a      	movs	r2, r5
    8b06:	040b      	lsls	r3, r1, #16
    8b08:	0c08      	lsrs	r0, r1, #16
    8b0a:	0c1b      	lsrs	r3, r3, #16
    8b0c:	435a      	muls	r2, r3
    8b0e:	4345      	muls	r5, r0
    8b10:	437b      	muls	r3, r7
    8b12:	4378      	muls	r0, r7
    8b14:	195b      	adds	r3, r3, r5
    8b16:	0c17      	lsrs	r7, r2, #16
    8b18:	18fb      	adds	r3, r7, r3
    8b1a:	429d      	cmp	r5, r3
    8b1c:	d903      	bls.n	8b26 <__aeabi_ddiv+0x3ba>
    8b1e:	2580      	movs	r5, #128	; 0x80
    8b20:	026d      	lsls	r5, r5, #9
    8b22:	46ac      	mov	ip, r5
    8b24:	4460      	add	r0, ip
    8b26:	0c1d      	lsrs	r5, r3, #16
    8b28:	0412      	lsls	r2, r2, #16
    8b2a:	041b      	lsls	r3, r3, #16
    8b2c:	0c12      	lsrs	r2, r2, #16
    8b2e:	1828      	adds	r0, r5, r0
    8b30:	189b      	adds	r3, r3, r2
    8b32:	4286      	cmp	r6, r0
    8b34:	d200      	bcs.n	8b38 <__aeabi_ddiv+0x3cc>
    8b36:	e093      	b.n	8c60 <__aeabi_ddiv+0x4f4>
    8b38:	d100      	bne.n	8b3c <__aeabi_ddiv+0x3d0>
    8b3a:	e08e      	b.n	8c5a <__aeabi_ddiv+0x4ee>
    8b3c:	2301      	movs	r3, #1
    8b3e:	4319      	orrs	r1, r3
    8b40:	4ba0      	ldr	r3, [pc, #640]	; (8dc4 <__aeabi_ddiv+0x658>)
    8b42:	18e3      	adds	r3, r4, r3
    8b44:	2b00      	cmp	r3, #0
    8b46:	dc00      	bgt.n	8b4a <__aeabi_ddiv+0x3de>
    8b48:	e099      	b.n	8c7e <__aeabi_ddiv+0x512>
    8b4a:	074a      	lsls	r2, r1, #29
    8b4c:	d000      	beq.n	8b50 <__aeabi_ddiv+0x3e4>
    8b4e:	e09e      	b.n	8c8e <__aeabi_ddiv+0x522>
    8b50:	465a      	mov	r2, fp
    8b52:	01d2      	lsls	r2, r2, #7
    8b54:	d506      	bpl.n	8b64 <__aeabi_ddiv+0x3f8>
    8b56:	465a      	mov	r2, fp
    8b58:	4b9b      	ldr	r3, [pc, #620]	; (8dc8 <__aeabi_ddiv+0x65c>)
    8b5a:	401a      	ands	r2, r3
    8b5c:	2380      	movs	r3, #128	; 0x80
    8b5e:	4693      	mov	fp, r2
    8b60:	00db      	lsls	r3, r3, #3
    8b62:	18e3      	adds	r3, r4, r3
    8b64:	4a99      	ldr	r2, [pc, #612]	; (8dcc <__aeabi_ddiv+0x660>)
    8b66:	4293      	cmp	r3, r2
    8b68:	dd68      	ble.n	8c3c <__aeabi_ddiv+0x4d0>
    8b6a:	2301      	movs	r3, #1
    8b6c:	9a02      	ldr	r2, [sp, #8]
    8b6e:	4c98      	ldr	r4, [pc, #608]	; (8dd0 <__aeabi_ddiv+0x664>)
    8b70:	401a      	ands	r2, r3
    8b72:	2300      	movs	r3, #0
    8b74:	4694      	mov	ip, r2
    8b76:	4698      	mov	r8, r3
    8b78:	2200      	movs	r2, #0
    8b7a:	e6c5      	b.n	8908 <__aeabi_ddiv+0x19c>
    8b7c:	2280      	movs	r2, #128	; 0x80
    8b7e:	464b      	mov	r3, r9
    8b80:	0312      	lsls	r2, r2, #12
    8b82:	4213      	tst	r3, r2
    8b84:	d00a      	beq.n	8b9c <__aeabi_ddiv+0x430>
    8b86:	465b      	mov	r3, fp
    8b88:	4213      	tst	r3, r2
    8b8a:	d106      	bne.n	8b9a <__aeabi_ddiv+0x42e>
    8b8c:	431a      	orrs	r2, r3
    8b8e:	0312      	lsls	r2, r2, #12
    8b90:	0b12      	lsrs	r2, r2, #12
    8b92:	46ac      	mov	ip, r5
    8b94:	4688      	mov	r8, r1
    8b96:	4c8e      	ldr	r4, [pc, #568]	; (8dd0 <__aeabi_ddiv+0x664>)
    8b98:	e6b6      	b.n	8908 <__aeabi_ddiv+0x19c>
    8b9a:	464b      	mov	r3, r9
    8b9c:	431a      	orrs	r2, r3
    8b9e:	0312      	lsls	r2, r2, #12
    8ba0:	0b12      	lsrs	r2, r2, #12
    8ba2:	46bc      	mov	ip, r7
    8ba4:	4c8a      	ldr	r4, [pc, #552]	; (8dd0 <__aeabi_ddiv+0x664>)
    8ba6:	e6af      	b.n	8908 <__aeabi_ddiv+0x19c>
    8ba8:	0003      	movs	r3, r0
    8baa:	465a      	mov	r2, fp
    8bac:	3b28      	subs	r3, #40	; 0x28
    8bae:	409a      	lsls	r2, r3
    8bb0:	2300      	movs	r3, #0
    8bb2:	4691      	mov	r9, r2
    8bb4:	4698      	mov	r8, r3
    8bb6:	e657      	b.n	8868 <__aeabi_ddiv+0xfc>
    8bb8:	4658      	mov	r0, fp
    8bba:	f000 ff0d 	bl	99d8 <__clzsi2>
    8bbe:	3020      	adds	r0, #32
    8bc0:	e640      	b.n	8844 <__aeabi_ddiv+0xd8>
    8bc2:	0003      	movs	r3, r0
    8bc4:	4652      	mov	r2, sl
    8bc6:	3b28      	subs	r3, #40	; 0x28
    8bc8:	409a      	lsls	r2, r3
    8bca:	2100      	movs	r1, #0
    8bcc:	4693      	mov	fp, r2
    8bce:	e677      	b.n	88c0 <__aeabi_ddiv+0x154>
    8bd0:	f000 ff02 	bl	99d8 <__clzsi2>
    8bd4:	3020      	adds	r0, #32
    8bd6:	e65f      	b.n	8898 <__aeabi_ddiv+0x12c>
    8bd8:	4588      	cmp	r8, r1
    8bda:	d200      	bcs.n	8bde <__aeabi_ddiv+0x472>
    8bdc:	e6c7      	b.n	896e <__aeabi_ddiv+0x202>
    8bde:	464b      	mov	r3, r9
    8be0:	07de      	lsls	r6, r3, #31
    8be2:	085d      	lsrs	r5, r3, #1
    8be4:	4643      	mov	r3, r8
    8be6:	085b      	lsrs	r3, r3, #1
    8be8:	431e      	orrs	r6, r3
    8bea:	4643      	mov	r3, r8
    8bec:	07db      	lsls	r3, r3, #31
    8bee:	469a      	mov	sl, r3
    8bf0:	e6c2      	b.n	8978 <__aeabi_ddiv+0x20c>
    8bf2:	2500      	movs	r5, #0
    8bf4:	4592      	cmp	sl, r2
    8bf6:	d300      	bcc.n	8bfa <__aeabi_ddiv+0x48e>
    8bf8:	e733      	b.n	8a62 <__aeabi_ddiv+0x2f6>
    8bfa:	9e03      	ldr	r6, [sp, #12]
    8bfc:	4659      	mov	r1, fp
    8bfe:	46b4      	mov	ip, r6
    8c00:	44e2      	add	sl, ip
    8c02:	45b2      	cmp	sl, r6
    8c04:	41ad      	sbcs	r5, r5
    8c06:	426d      	negs	r5, r5
    8c08:	4445      	add	r5, r8
    8c0a:	18eb      	adds	r3, r5, r3
    8c0c:	3901      	subs	r1, #1
    8c0e:	4598      	cmp	r8, r3
    8c10:	d207      	bcs.n	8c22 <__aeabi_ddiv+0x4b6>
    8c12:	4298      	cmp	r0, r3
    8c14:	d900      	bls.n	8c18 <__aeabi_ddiv+0x4ac>
    8c16:	e07f      	b.n	8d18 <__aeabi_ddiv+0x5ac>
    8c18:	d100      	bne.n	8c1c <__aeabi_ddiv+0x4b0>
    8c1a:	e0bc      	b.n	8d96 <__aeabi_ddiv+0x62a>
    8c1c:	1a1d      	subs	r5, r3, r0
    8c1e:	468b      	mov	fp, r1
    8c20:	e71f      	b.n	8a62 <__aeabi_ddiv+0x2f6>
    8c22:	4598      	cmp	r8, r3
    8c24:	d1fa      	bne.n	8c1c <__aeabi_ddiv+0x4b0>
    8c26:	9d03      	ldr	r5, [sp, #12]
    8c28:	4555      	cmp	r5, sl
    8c2a:	d9f2      	bls.n	8c12 <__aeabi_ddiv+0x4a6>
    8c2c:	4643      	mov	r3, r8
    8c2e:	468b      	mov	fp, r1
    8c30:	1a1d      	subs	r5, r3, r0
    8c32:	e716      	b.n	8a62 <__aeabi_ddiv+0x2f6>
    8c34:	469b      	mov	fp, r3
    8c36:	e6ca      	b.n	89ce <__aeabi_ddiv+0x262>
    8c38:	0015      	movs	r5, r2
    8c3a:	e6e7      	b.n	8a0c <__aeabi_ddiv+0x2a0>
    8c3c:	465a      	mov	r2, fp
    8c3e:	08c9      	lsrs	r1, r1, #3
    8c40:	0752      	lsls	r2, r2, #29
    8c42:	430a      	orrs	r2, r1
    8c44:	055b      	lsls	r3, r3, #21
    8c46:	4690      	mov	r8, r2
    8c48:	0d5c      	lsrs	r4, r3, #21
    8c4a:	465a      	mov	r2, fp
    8c4c:	2301      	movs	r3, #1
    8c4e:	9902      	ldr	r1, [sp, #8]
    8c50:	0252      	lsls	r2, r2, #9
    8c52:	4019      	ands	r1, r3
    8c54:	0b12      	lsrs	r2, r2, #12
    8c56:	468c      	mov	ip, r1
    8c58:	e656      	b.n	8908 <__aeabi_ddiv+0x19c>
    8c5a:	2b00      	cmp	r3, #0
    8c5c:	d100      	bne.n	8c60 <__aeabi_ddiv+0x4f4>
    8c5e:	e76f      	b.n	8b40 <__aeabi_ddiv+0x3d4>
    8c60:	4446      	add	r6, r8
    8c62:	1e4a      	subs	r2, r1, #1
    8c64:	45b0      	cmp	r8, r6
    8c66:	d929      	bls.n	8cbc <__aeabi_ddiv+0x550>
    8c68:	0011      	movs	r1, r2
    8c6a:	4286      	cmp	r6, r0
    8c6c:	d000      	beq.n	8c70 <__aeabi_ddiv+0x504>
    8c6e:	e765      	b.n	8b3c <__aeabi_ddiv+0x3d0>
    8c70:	9a03      	ldr	r2, [sp, #12]
    8c72:	4293      	cmp	r3, r2
    8c74:	d000      	beq.n	8c78 <__aeabi_ddiv+0x50c>
    8c76:	e761      	b.n	8b3c <__aeabi_ddiv+0x3d0>
    8c78:	e762      	b.n	8b40 <__aeabi_ddiv+0x3d4>
    8c7a:	2101      	movs	r1, #1
    8c7c:	4249      	negs	r1, r1
    8c7e:	2001      	movs	r0, #1
    8c80:	1ac2      	subs	r2, r0, r3
    8c82:	2a38      	cmp	r2, #56	; 0x38
    8c84:	dd21      	ble.n	8cca <__aeabi_ddiv+0x55e>
    8c86:	9b02      	ldr	r3, [sp, #8]
    8c88:	4003      	ands	r3, r0
    8c8a:	469c      	mov	ip, r3
    8c8c:	e638      	b.n	8900 <__aeabi_ddiv+0x194>
    8c8e:	220f      	movs	r2, #15
    8c90:	400a      	ands	r2, r1
    8c92:	2a04      	cmp	r2, #4
    8c94:	d100      	bne.n	8c98 <__aeabi_ddiv+0x52c>
    8c96:	e75b      	b.n	8b50 <__aeabi_ddiv+0x3e4>
    8c98:	000a      	movs	r2, r1
    8c9a:	1d11      	adds	r1, r2, #4
    8c9c:	4291      	cmp	r1, r2
    8c9e:	4192      	sbcs	r2, r2
    8ca0:	4252      	negs	r2, r2
    8ca2:	4493      	add	fp, r2
    8ca4:	e754      	b.n	8b50 <__aeabi_ddiv+0x3e4>
    8ca6:	4b47      	ldr	r3, [pc, #284]	; (8dc4 <__aeabi_ddiv+0x658>)
    8ca8:	18e3      	adds	r3, r4, r3
    8caa:	2b00      	cmp	r3, #0
    8cac:	dde5      	ble.n	8c7a <__aeabi_ddiv+0x50e>
    8cae:	2201      	movs	r2, #1
    8cb0:	4252      	negs	r2, r2
    8cb2:	e7f2      	b.n	8c9a <__aeabi_ddiv+0x52e>
    8cb4:	001d      	movs	r5, r3
    8cb6:	e6fa      	b.n	8aae <__aeabi_ddiv+0x342>
    8cb8:	469a      	mov	sl, r3
    8cba:	e71c      	b.n	8af6 <__aeabi_ddiv+0x38a>
    8cbc:	42b0      	cmp	r0, r6
    8cbe:	d839      	bhi.n	8d34 <__aeabi_ddiv+0x5c8>
    8cc0:	d06e      	beq.n	8da0 <__aeabi_ddiv+0x634>
    8cc2:	0011      	movs	r1, r2
    8cc4:	e73a      	b.n	8b3c <__aeabi_ddiv+0x3d0>
    8cc6:	9302      	str	r3, [sp, #8]
    8cc8:	e73a      	b.n	8b40 <__aeabi_ddiv+0x3d4>
    8cca:	2a1f      	cmp	r2, #31
    8ccc:	dc3c      	bgt.n	8d48 <__aeabi_ddiv+0x5dc>
    8cce:	2320      	movs	r3, #32
    8cd0:	1a9b      	subs	r3, r3, r2
    8cd2:	000c      	movs	r4, r1
    8cd4:	4658      	mov	r0, fp
    8cd6:	4099      	lsls	r1, r3
    8cd8:	4098      	lsls	r0, r3
    8cda:	1e4b      	subs	r3, r1, #1
    8cdc:	4199      	sbcs	r1, r3
    8cde:	465b      	mov	r3, fp
    8ce0:	40d4      	lsrs	r4, r2
    8ce2:	40d3      	lsrs	r3, r2
    8ce4:	4320      	orrs	r0, r4
    8ce6:	4308      	orrs	r0, r1
    8ce8:	001a      	movs	r2, r3
    8cea:	0743      	lsls	r3, r0, #29
    8cec:	d009      	beq.n	8d02 <__aeabi_ddiv+0x596>
    8cee:	230f      	movs	r3, #15
    8cf0:	4003      	ands	r3, r0
    8cf2:	2b04      	cmp	r3, #4
    8cf4:	d005      	beq.n	8d02 <__aeabi_ddiv+0x596>
    8cf6:	0001      	movs	r1, r0
    8cf8:	1d08      	adds	r0, r1, #4
    8cfa:	4288      	cmp	r0, r1
    8cfc:	419b      	sbcs	r3, r3
    8cfe:	425b      	negs	r3, r3
    8d00:	18d2      	adds	r2, r2, r3
    8d02:	0213      	lsls	r3, r2, #8
    8d04:	d53a      	bpl.n	8d7c <__aeabi_ddiv+0x610>
    8d06:	2301      	movs	r3, #1
    8d08:	9a02      	ldr	r2, [sp, #8]
    8d0a:	2401      	movs	r4, #1
    8d0c:	401a      	ands	r2, r3
    8d0e:	2300      	movs	r3, #0
    8d10:	4694      	mov	ip, r2
    8d12:	4698      	mov	r8, r3
    8d14:	2200      	movs	r2, #0
    8d16:	e5f7      	b.n	8908 <__aeabi_ddiv+0x19c>
    8d18:	2102      	movs	r1, #2
    8d1a:	4249      	negs	r1, r1
    8d1c:	468c      	mov	ip, r1
    8d1e:	9d03      	ldr	r5, [sp, #12]
    8d20:	44e3      	add	fp, ip
    8d22:	46ac      	mov	ip, r5
    8d24:	44e2      	add	sl, ip
    8d26:	45aa      	cmp	sl, r5
    8d28:	41ad      	sbcs	r5, r5
    8d2a:	426d      	negs	r5, r5
    8d2c:	4445      	add	r5, r8
    8d2e:	18ed      	adds	r5, r5, r3
    8d30:	1a2d      	subs	r5, r5, r0
    8d32:	e696      	b.n	8a62 <__aeabi_ddiv+0x2f6>
    8d34:	1e8a      	subs	r2, r1, #2
    8d36:	9903      	ldr	r1, [sp, #12]
    8d38:	004d      	lsls	r5, r1, #1
    8d3a:	428d      	cmp	r5, r1
    8d3c:	4189      	sbcs	r1, r1
    8d3e:	4249      	negs	r1, r1
    8d40:	4441      	add	r1, r8
    8d42:	1876      	adds	r6, r6, r1
    8d44:	9503      	str	r5, [sp, #12]
    8d46:	e78f      	b.n	8c68 <__aeabi_ddiv+0x4fc>
    8d48:	201f      	movs	r0, #31
    8d4a:	4240      	negs	r0, r0
    8d4c:	1ac3      	subs	r3, r0, r3
    8d4e:	4658      	mov	r0, fp
    8d50:	40d8      	lsrs	r0, r3
    8d52:	0003      	movs	r3, r0
    8d54:	2a20      	cmp	r2, #32
    8d56:	d028      	beq.n	8daa <__aeabi_ddiv+0x63e>
    8d58:	2040      	movs	r0, #64	; 0x40
    8d5a:	465d      	mov	r5, fp
    8d5c:	1a82      	subs	r2, r0, r2
    8d5e:	4095      	lsls	r5, r2
    8d60:	4329      	orrs	r1, r5
    8d62:	1e4a      	subs	r2, r1, #1
    8d64:	4191      	sbcs	r1, r2
    8d66:	4319      	orrs	r1, r3
    8d68:	2307      	movs	r3, #7
    8d6a:	2200      	movs	r2, #0
    8d6c:	400b      	ands	r3, r1
    8d6e:	d009      	beq.n	8d84 <__aeabi_ddiv+0x618>
    8d70:	230f      	movs	r3, #15
    8d72:	2200      	movs	r2, #0
    8d74:	400b      	ands	r3, r1
    8d76:	0008      	movs	r0, r1
    8d78:	2b04      	cmp	r3, #4
    8d7a:	d1bd      	bne.n	8cf8 <__aeabi_ddiv+0x58c>
    8d7c:	0001      	movs	r1, r0
    8d7e:	0753      	lsls	r3, r2, #29
    8d80:	0252      	lsls	r2, r2, #9
    8d82:	0b12      	lsrs	r2, r2, #12
    8d84:	08c9      	lsrs	r1, r1, #3
    8d86:	4319      	orrs	r1, r3
    8d88:	2301      	movs	r3, #1
    8d8a:	4688      	mov	r8, r1
    8d8c:	9902      	ldr	r1, [sp, #8]
    8d8e:	2400      	movs	r4, #0
    8d90:	4019      	ands	r1, r3
    8d92:	468c      	mov	ip, r1
    8d94:	e5b8      	b.n	8908 <__aeabi_ddiv+0x19c>
    8d96:	4552      	cmp	r2, sl
    8d98:	d8be      	bhi.n	8d18 <__aeabi_ddiv+0x5ac>
    8d9a:	468b      	mov	fp, r1
    8d9c:	2500      	movs	r5, #0
    8d9e:	e660      	b.n	8a62 <__aeabi_ddiv+0x2f6>
    8da0:	9d03      	ldr	r5, [sp, #12]
    8da2:	429d      	cmp	r5, r3
    8da4:	d3c6      	bcc.n	8d34 <__aeabi_ddiv+0x5c8>
    8da6:	0011      	movs	r1, r2
    8da8:	e762      	b.n	8c70 <__aeabi_ddiv+0x504>
    8daa:	2500      	movs	r5, #0
    8dac:	e7d8      	b.n	8d60 <__aeabi_ddiv+0x5f4>
    8dae:	2280      	movs	r2, #128	; 0x80
    8db0:	465b      	mov	r3, fp
    8db2:	0312      	lsls	r2, r2, #12
    8db4:	431a      	orrs	r2, r3
    8db6:	9b01      	ldr	r3, [sp, #4]
    8db8:	0312      	lsls	r2, r2, #12
    8dba:	0b12      	lsrs	r2, r2, #12
    8dbc:	469c      	mov	ip, r3
    8dbe:	4688      	mov	r8, r1
    8dc0:	4c03      	ldr	r4, [pc, #12]	; (8dd0 <__aeabi_ddiv+0x664>)
    8dc2:	e5a1      	b.n	8908 <__aeabi_ddiv+0x19c>
    8dc4:	000003ff 	.word	0x000003ff
    8dc8:	feffffff 	.word	0xfeffffff
    8dcc:	000007fe 	.word	0x000007fe
    8dd0:	000007ff 	.word	0x000007ff

00008dd4 <__aeabi_dmul>:
    8dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8dd6:	4657      	mov	r7, sl
    8dd8:	4645      	mov	r5, r8
    8dda:	46de      	mov	lr, fp
    8ddc:	464e      	mov	r6, r9
    8dde:	b5e0      	push	{r5, r6, r7, lr}
    8de0:	030c      	lsls	r4, r1, #12
    8de2:	4698      	mov	r8, r3
    8de4:	004e      	lsls	r6, r1, #1
    8de6:	0b23      	lsrs	r3, r4, #12
    8de8:	b087      	sub	sp, #28
    8dea:	0007      	movs	r7, r0
    8dec:	4692      	mov	sl, r2
    8dee:	469b      	mov	fp, r3
    8df0:	0d76      	lsrs	r6, r6, #21
    8df2:	0fcd      	lsrs	r5, r1, #31
    8df4:	2e00      	cmp	r6, #0
    8df6:	d06b      	beq.n	8ed0 <__aeabi_dmul+0xfc>
    8df8:	4b6d      	ldr	r3, [pc, #436]	; (8fb0 <__aeabi_dmul+0x1dc>)
    8dfa:	429e      	cmp	r6, r3
    8dfc:	d035      	beq.n	8e6a <__aeabi_dmul+0x96>
    8dfe:	2480      	movs	r4, #128	; 0x80
    8e00:	465b      	mov	r3, fp
    8e02:	0f42      	lsrs	r2, r0, #29
    8e04:	0424      	lsls	r4, r4, #16
    8e06:	00db      	lsls	r3, r3, #3
    8e08:	4314      	orrs	r4, r2
    8e0a:	431c      	orrs	r4, r3
    8e0c:	00c3      	lsls	r3, r0, #3
    8e0e:	4699      	mov	r9, r3
    8e10:	4b68      	ldr	r3, [pc, #416]	; (8fb4 <__aeabi_dmul+0x1e0>)
    8e12:	46a3      	mov	fp, r4
    8e14:	469c      	mov	ip, r3
    8e16:	2300      	movs	r3, #0
    8e18:	2700      	movs	r7, #0
    8e1a:	4466      	add	r6, ip
    8e1c:	9302      	str	r3, [sp, #8]
    8e1e:	4643      	mov	r3, r8
    8e20:	031c      	lsls	r4, r3, #12
    8e22:	005a      	lsls	r2, r3, #1
    8e24:	0fdb      	lsrs	r3, r3, #31
    8e26:	4650      	mov	r0, sl
    8e28:	0b24      	lsrs	r4, r4, #12
    8e2a:	0d52      	lsrs	r2, r2, #21
    8e2c:	4698      	mov	r8, r3
    8e2e:	d100      	bne.n	8e32 <__aeabi_dmul+0x5e>
    8e30:	e076      	b.n	8f20 <__aeabi_dmul+0x14c>
    8e32:	4b5f      	ldr	r3, [pc, #380]	; (8fb0 <__aeabi_dmul+0x1dc>)
    8e34:	429a      	cmp	r2, r3
    8e36:	d06d      	beq.n	8f14 <__aeabi_dmul+0x140>
    8e38:	2380      	movs	r3, #128	; 0x80
    8e3a:	0f41      	lsrs	r1, r0, #29
    8e3c:	041b      	lsls	r3, r3, #16
    8e3e:	430b      	orrs	r3, r1
    8e40:	495c      	ldr	r1, [pc, #368]	; (8fb4 <__aeabi_dmul+0x1e0>)
    8e42:	00e4      	lsls	r4, r4, #3
    8e44:	468c      	mov	ip, r1
    8e46:	431c      	orrs	r4, r3
    8e48:	00c3      	lsls	r3, r0, #3
    8e4a:	2000      	movs	r0, #0
    8e4c:	4462      	add	r2, ip
    8e4e:	4641      	mov	r1, r8
    8e50:	18b6      	adds	r6, r6, r2
    8e52:	4069      	eors	r1, r5
    8e54:	1c72      	adds	r2, r6, #1
    8e56:	9101      	str	r1, [sp, #4]
    8e58:	4694      	mov	ip, r2
    8e5a:	4307      	orrs	r7, r0
    8e5c:	2f0f      	cmp	r7, #15
    8e5e:	d900      	bls.n	8e62 <__aeabi_dmul+0x8e>
    8e60:	e0b0      	b.n	8fc4 <__aeabi_dmul+0x1f0>
    8e62:	4a55      	ldr	r2, [pc, #340]	; (8fb8 <__aeabi_dmul+0x1e4>)
    8e64:	00bf      	lsls	r7, r7, #2
    8e66:	59d2      	ldr	r2, [r2, r7]
    8e68:	4697      	mov	pc, r2
    8e6a:	465b      	mov	r3, fp
    8e6c:	4303      	orrs	r3, r0
    8e6e:	4699      	mov	r9, r3
    8e70:	d000      	beq.n	8e74 <__aeabi_dmul+0xa0>
    8e72:	e087      	b.n	8f84 <__aeabi_dmul+0x1b0>
    8e74:	2300      	movs	r3, #0
    8e76:	469b      	mov	fp, r3
    8e78:	3302      	adds	r3, #2
    8e7a:	2708      	movs	r7, #8
    8e7c:	9302      	str	r3, [sp, #8]
    8e7e:	e7ce      	b.n	8e1e <__aeabi_dmul+0x4a>
    8e80:	4642      	mov	r2, r8
    8e82:	9201      	str	r2, [sp, #4]
    8e84:	2802      	cmp	r0, #2
    8e86:	d067      	beq.n	8f58 <__aeabi_dmul+0x184>
    8e88:	2803      	cmp	r0, #3
    8e8a:	d100      	bne.n	8e8e <__aeabi_dmul+0xba>
    8e8c:	e20e      	b.n	92ac <__aeabi_dmul+0x4d8>
    8e8e:	2801      	cmp	r0, #1
    8e90:	d000      	beq.n	8e94 <__aeabi_dmul+0xc0>
    8e92:	e162      	b.n	915a <__aeabi_dmul+0x386>
    8e94:	2300      	movs	r3, #0
    8e96:	2400      	movs	r4, #0
    8e98:	2200      	movs	r2, #0
    8e9a:	4699      	mov	r9, r3
    8e9c:	9901      	ldr	r1, [sp, #4]
    8e9e:	4001      	ands	r1, r0
    8ea0:	b2cd      	uxtb	r5, r1
    8ea2:	2100      	movs	r1, #0
    8ea4:	0312      	lsls	r2, r2, #12
    8ea6:	0d0b      	lsrs	r3, r1, #20
    8ea8:	0b12      	lsrs	r2, r2, #12
    8eaa:	051b      	lsls	r3, r3, #20
    8eac:	4313      	orrs	r3, r2
    8eae:	4a43      	ldr	r2, [pc, #268]	; (8fbc <__aeabi_dmul+0x1e8>)
    8eb0:	0524      	lsls	r4, r4, #20
    8eb2:	4013      	ands	r3, r2
    8eb4:	431c      	orrs	r4, r3
    8eb6:	0064      	lsls	r4, r4, #1
    8eb8:	07ed      	lsls	r5, r5, #31
    8eba:	0864      	lsrs	r4, r4, #1
    8ebc:	432c      	orrs	r4, r5
    8ebe:	4648      	mov	r0, r9
    8ec0:	0021      	movs	r1, r4
    8ec2:	b007      	add	sp, #28
    8ec4:	bc3c      	pop	{r2, r3, r4, r5}
    8ec6:	4690      	mov	r8, r2
    8ec8:	4699      	mov	r9, r3
    8eca:	46a2      	mov	sl, r4
    8ecc:	46ab      	mov	fp, r5
    8ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ed0:	4303      	orrs	r3, r0
    8ed2:	4699      	mov	r9, r3
    8ed4:	d04f      	beq.n	8f76 <__aeabi_dmul+0x1a2>
    8ed6:	465b      	mov	r3, fp
    8ed8:	2b00      	cmp	r3, #0
    8eda:	d100      	bne.n	8ede <__aeabi_dmul+0x10a>
    8edc:	e189      	b.n	91f2 <__aeabi_dmul+0x41e>
    8ede:	4658      	mov	r0, fp
    8ee0:	f000 fd7a 	bl	99d8 <__clzsi2>
    8ee4:	0003      	movs	r3, r0
    8ee6:	3b0b      	subs	r3, #11
    8ee8:	2b1c      	cmp	r3, #28
    8eea:	dd00      	ble.n	8eee <__aeabi_dmul+0x11a>
    8eec:	e17a      	b.n	91e4 <__aeabi_dmul+0x410>
    8eee:	221d      	movs	r2, #29
    8ef0:	1ad3      	subs	r3, r2, r3
    8ef2:	003a      	movs	r2, r7
    8ef4:	0001      	movs	r1, r0
    8ef6:	465c      	mov	r4, fp
    8ef8:	40da      	lsrs	r2, r3
    8efa:	3908      	subs	r1, #8
    8efc:	408c      	lsls	r4, r1
    8efe:	0013      	movs	r3, r2
    8f00:	408f      	lsls	r7, r1
    8f02:	4323      	orrs	r3, r4
    8f04:	469b      	mov	fp, r3
    8f06:	46b9      	mov	r9, r7
    8f08:	2300      	movs	r3, #0
    8f0a:	4e2d      	ldr	r6, [pc, #180]	; (8fc0 <__aeabi_dmul+0x1ec>)
    8f0c:	2700      	movs	r7, #0
    8f0e:	1a36      	subs	r6, r6, r0
    8f10:	9302      	str	r3, [sp, #8]
    8f12:	e784      	b.n	8e1e <__aeabi_dmul+0x4a>
    8f14:	4653      	mov	r3, sl
    8f16:	4323      	orrs	r3, r4
    8f18:	d12a      	bne.n	8f70 <__aeabi_dmul+0x19c>
    8f1a:	2400      	movs	r4, #0
    8f1c:	2002      	movs	r0, #2
    8f1e:	e796      	b.n	8e4e <__aeabi_dmul+0x7a>
    8f20:	4653      	mov	r3, sl
    8f22:	4323      	orrs	r3, r4
    8f24:	d020      	beq.n	8f68 <__aeabi_dmul+0x194>
    8f26:	2c00      	cmp	r4, #0
    8f28:	d100      	bne.n	8f2c <__aeabi_dmul+0x158>
    8f2a:	e157      	b.n	91dc <__aeabi_dmul+0x408>
    8f2c:	0020      	movs	r0, r4
    8f2e:	f000 fd53 	bl	99d8 <__clzsi2>
    8f32:	0003      	movs	r3, r0
    8f34:	3b0b      	subs	r3, #11
    8f36:	2b1c      	cmp	r3, #28
    8f38:	dd00      	ble.n	8f3c <__aeabi_dmul+0x168>
    8f3a:	e149      	b.n	91d0 <__aeabi_dmul+0x3fc>
    8f3c:	211d      	movs	r1, #29
    8f3e:	1acb      	subs	r3, r1, r3
    8f40:	4651      	mov	r1, sl
    8f42:	0002      	movs	r2, r0
    8f44:	40d9      	lsrs	r1, r3
    8f46:	4653      	mov	r3, sl
    8f48:	3a08      	subs	r2, #8
    8f4a:	4094      	lsls	r4, r2
    8f4c:	4093      	lsls	r3, r2
    8f4e:	430c      	orrs	r4, r1
    8f50:	4a1b      	ldr	r2, [pc, #108]	; (8fc0 <__aeabi_dmul+0x1ec>)
    8f52:	1a12      	subs	r2, r2, r0
    8f54:	2000      	movs	r0, #0
    8f56:	e77a      	b.n	8e4e <__aeabi_dmul+0x7a>
    8f58:	2501      	movs	r5, #1
    8f5a:	9b01      	ldr	r3, [sp, #4]
    8f5c:	4c14      	ldr	r4, [pc, #80]	; (8fb0 <__aeabi_dmul+0x1dc>)
    8f5e:	401d      	ands	r5, r3
    8f60:	2300      	movs	r3, #0
    8f62:	2200      	movs	r2, #0
    8f64:	4699      	mov	r9, r3
    8f66:	e79c      	b.n	8ea2 <__aeabi_dmul+0xce>
    8f68:	2400      	movs	r4, #0
    8f6a:	2200      	movs	r2, #0
    8f6c:	2001      	movs	r0, #1
    8f6e:	e76e      	b.n	8e4e <__aeabi_dmul+0x7a>
    8f70:	4653      	mov	r3, sl
    8f72:	2003      	movs	r0, #3
    8f74:	e76b      	b.n	8e4e <__aeabi_dmul+0x7a>
    8f76:	2300      	movs	r3, #0
    8f78:	469b      	mov	fp, r3
    8f7a:	3301      	adds	r3, #1
    8f7c:	2704      	movs	r7, #4
    8f7e:	2600      	movs	r6, #0
    8f80:	9302      	str	r3, [sp, #8]
    8f82:	e74c      	b.n	8e1e <__aeabi_dmul+0x4a>
    8f84:	2303      	movs	r3, #3
    8f86:	4681      	mov	r9, r0
    8f88:	270c      	movs	r7, #12
    8f8a:	9302      	str	r3, [sp, #8]
    8f8c:	e747      	b.n	8e1e <__aeabi_dmul+0x4a>
    8f8e:	2280      	movs	r2, #128	; 0x80
    8f90:	2300      	movs	r3, #0
    8f92:	2500      	movs	r5, #0
    8f94:	0312      	lsls	r2, r2, #12
    8f96:	4699      	mov	r9, r3
    8f98:	4c05      	ldr	r4, [pc, #20]	; (8fb0 <__aeabi_dmul+0x1dc>)
    8f9a:	e782      	b.n	8ea2 <__aeabi_dmul+0xce>
    8f9c:	465c      	mov	r4, fp
    8f9e:	464b      	mov	r3, r9
    8fa0:	9802      	ldr	r0, [sp, #8]
    8fa2:	e76f      	b.n	8e84 <__aeabi_dmul+0xb0>
    8fa4:	465c      	mov	r4, fp
    8fa6:	464b      	mov	r3, r9
    8fa8:	9501      	str	r5, [sp, #4]
    8faa:	9802      	ldr	r0, [sp, #8]
    8fac:	e76a      	b.n	8e84 <__aeabi_dmul+0xb0>
    8fae:	46c0      	nop			; (mov r8, r8)
    8fb0:	000007ff 	.word	0x000007ff
    8fb4:	fffffc01 	.word	0xfffffc01
    8fb8:	0000ba4c 	.word	0x0000ba4c
    8fbc:	800fffff 	.word	0x800fffff
    8fc0:	fffffc0d 	.word	0xfffffc0d
    8fc4:	464a      	mov	r2, r9
    8fc6:	4649      	mov	r1, r9
    8fc8:	0c17      	lsrs	r7, r2, #16
    8fca:	0c1a      	lsrs	r2, r3, #16
    8fcc:	041b      	lsls	r3, r3, #16
    8fce:	0c1b      	lsrs	r3, r3, #16
    8fd0:	0408      	lsls	r0, r1, #16
    8fd2:	0019      	movs	r1, r3
    8fd4:	0c00      	lsrs	r0, r0, #16
    8fd6:	4341      	muls	r1, r0
    8fd8:	0015      	movs	r5, r2
    8fda:	4688      	mov	r8, r1
    8fdc:	0019      	movs	r1, r3
    8fde:	437d      	muls	r5, r7
    8fe0:	4379      	muls	r1, r7
    8fe2:	9503      	str	r5, [sp, #12]
    8fe4:	4689      	mov	r9, r1
    8fe6:	0029      	movs	r1, r5
    8fe8:	0015      	movs	r5, r2
    8fea:	4345      	muls	r5, r0
    8fec:	444d      	add	r5, r9
    8fee:	9502      	str	r5, [sp, #8]
    8ff0:	4645      	mov	r5, r8
    8ff2:	0c2d      	lsrs	r5, r5, #16
    8ff4:	46aa      	mov	sl, r5
    8ff6:	9d02      	ldr	r5, [sp, #8]
    8ff8:	4455      	add	r5, sl
    8ffa:	45a9      	cmp	r9, r5
    8ffc:	d906      	bls.n	900c <__aeabi_dmul+0x238>
    8ffe:	468a      	mov	sl, r1
    9000:	2180      	movs	r1, #128	; 0x80
    9002:	0249      	lsls	r1, r1, #9
    9004:	4689      	mov	r9, r1
    9006:	44ca      	add	sl, r9
    9008:	4651      	mov	r1, sl
    900a:	9103      	str	r1, [sp, #12]
    900c:	0c29      	lsrs	r1, r5, #16
    900e:	9104      	str	r1, [sp, #16]
    9010:	4641      	mov	r1, r8
    9012:	0409      	lsls	r1, r1, #16
    9014:	042d      	lsls	r5, r5, #16
    9016:	0c09      	lsrs	r1, r1, #16
    9018:	4688      	mov	r8, r1
    901a:	0029      	movs	r1, r5
    901c:	0c25      	lsrs	r5, r4, #16
    901e:	0424      	lsls	r4, r4, #16
    9020:	4441      	add	r1, r8
    9022:	0c24      	lsrs	r4, r4, #16
    9024:	9105      	str	r1, [sp, #20]
    9026:	0021      	movs	r1, r4
    9028:	4341      	muls	r1, r0
    902a:	4688      	mov	r8, r1
    902c:	0021      	movs	r1, r4
    902e:	4379      	muls	r1, r7
    9030:	468a      	mov	sl, r1
    9032:	4368      	muls	r0, r5
    9034:	4641      	mov	r1, r8
    9036:	4450      	add	r0, sl
    9038:	4681      	mov	r9, r0
    903a:	0c08      	lsrs	r0, r1, #16
    903c:	4448      	add	r0, r9
    903e:	436f      	muls	r7, r5
    9040:	4582      	cmp	sl, r0
    9042:	d903      	bls.n	904c <__aeabi_dmul+0x278>
    9044:	2180      	movs	r1, #128	; 0x80
    9046:	0249      	lsls	r1, r1, #9
    9048:	4689      	mov	r9, r1
    904a:	444f      	add	r7, r9
    904c:	0c01      	lsrs	r1, r0, #16
    904e:	4689      	mov	r9, r1
    9050:	0039      	movs	r1, r7
    9052:	4449      	add	r1, r9
    9054:	9102      	str	r1, [sp, #8]
    9056:	4641      	mov	r1, r8
    9058:	040f      	lsls	r7, r1, #16
    905a:	9904      	ldr	r1, [sp, #16]
    905c:	0c3f      	lsrs	r7, r7, #16
    905e:	4688      	mov	r8, r1
    9060:	0400      	lsls	r0, r0, #16
    9062:	19c0      	adds	r0, r0, r7
    9064:	4480      	add	r8, r0
    9066:	4641      	mov	r1, r8
    9068:	9104      	str	r1, [sp, #16]
    906a:	4659      	mov	r1, fp
    906c:	0c0f      	lsrs	r7, r1, #16
    906e:	0409      	lsls	r1, r1, #16
    9070:	0c09      	lsrs	r1, r1, #16
    9072:	4688      	mov	r8, r1
    9074:	4359      	muls	r1, r3
    9076:	468a      	mov	sl, r1
    9078:	0039      	movs	r1, r7
    907a:	4351      	muls	r1, r2
    907c:	4689      	mov	r9, r1
    907e:	4641      	mov	r1, r8
    9080:	434a      	muls	r2, r1
    9082:	4651      	mov	r1, sl
    9084:	0c09      	lsrs	r1, r1, #16
    9086:	468b      	mov	fp, r1
    9088:	437b      	muls	r3, r7
    908a:	18d2      	adds	r2, r2, r3
    908c:	445a      	add	r2, fp
    908e:	4293      	cmp	r3, r2
    9090:	d903      	bls.n	909a <__aeabi_dmul+0x2c6>
    9092:	2380      	movs	r3, #128	; 0x80
    9094:	025b      	lsls	r3, r3, #9
    9096:	469b      	mov	fp, r3
    9098:	44d9      	add	r9, fp
    909a:	4651      	mov	r1, sl
    909c:	0409      	lsls	r1, r1, #16
    909e:	0c09      	lsrs	r1, r1, #16
    90a0:	468a      	mov	sl, r1
    90a2:	4641      	mov	r1, r8
    90a4:	4361      	muls	r1, r4
    90a6:	437c      	muls	r4, r7
    90a8:	0c13      	lsrs	r3, r2, #16
    90aa:	0412      	lsls	r2, r2, #16
    90ac:	444b      	add	r3, r9
    90ae:	4452      	add	r2, sl
    90b0:	46a1      	mov	r9, r4
    90b2:	468a      	mov	sl, r1
    90b4:	003c      	movs	r4, r7
    90b6:	4641      	mov	r1, r8
    90b8:	436c      	muls	r4, r5
    90ba:	434d      	muls	r5, r1
    90bc:	4651      	mov	r1, sl
    90be:	444d      	add	r5, r9
    90c0:	0c0f      	lsrs	r7, r1, #16
    90c2:	197d      	adds	r5, r7, r5
    90c4:	45a9      	cmp	r9, r5
    90c6:	d903      	bls.n	90d0 <__aeabi_dmul+0x2fc>
    90c8:	2180      	movs	r1, #128	; 0x80
    90ca:	0249      	lsls	r1, r1, #9
    90cc:	4688      	mov	r8, r1
    90ce:	4444      	add	r4, r8
    90d0:	9f04      	ldr	r7, [sp, #16]
    90d2:	9903      	ldr	r1, [sp, #12]
    90d4:	46b8      	mov	r8, r7
    90d6:	4441      	add	r1, r8
    90d8:	468b      	mov	fp, r1
    90da:	4583      	cmp	fp, r0
    90dc:	4180      	sbcs	r0, r0
    90de:	4241      	negs	r1, r0
    90e0:	4688      	mov	r8, r1
    90e2:	4651      	mov	r1, sl
    90e4:	0408      	lsls	r0, r1, #16
    90e6:	042f      	lsls	r7, r5, #16
    90e8:	0c00      	lsrs	r0, r0, #16
    90ea:	183f      	adds	r7, r7, r0
    90ec:	4658      	mov	r0, fp
    90ee:	9902      	ldr	r1, [sp, #8]
    90f0:	1810      	adds	r0, r2, r0
    90f2:	4689      	mov	r9, r1
    90f4:	4290      	cmp	r0, r2
    90f6:	4192      	sbcs	r2, r2
    90f8:	444f      	add	r7, r9
    90fa:	46ba      	mov	sl, r7
    90fc:	4252      	negs	r2, r2
    90fe:	4699      	mov	r9, r3
    9100:	4693      	mov	fp, r2
    9102:	44c2      	add	sl, r8
    9104:	44d1      	add	r9, sl
    9106:	44cb      	add	fp, r9
    9108:	428f      	cmp	r7, r1
    910a:	41bf      	sbcs	r7, r7
    910c:	45c2      	cmp	sl, r8
    910e:	4189      	sbcs	r1, r1
    9110:	4599      	cmp	r9, r3
    9112:	419b      	sbcs	r3, r3
    9114:	4593      	cmp	fp, r2
    9116:	4192      	sbcs	r2, r2
    9118:	427f      	negs	r7, r7
    911a:	4249      	negs	r1, r1
    911c:	0c2d      	lsrs	r5, r5, #16
    911e:	4252      	negs	r2, r2
    9120:	430f      	orrs	r7, r1
    9122:	425b      	negs	r3, r3
    9124:	4313      	orrs	r3, r2
    9126:	197f      	adds	r7, r7, r5
    9128:	18ff      	adds	r7, r7, r3
    912a:	465b      	mov	r3, fp
    912c:	193c      	adds	r4, r7, r4
    912e:	0ddb      	lsrs	r3, r3, #23
    9130:	9a05      	ldr	r2, [sp, #20]
    9132:	0264      	lsls	r4, r4, #9
    9134:	431c      	orrs	r4, r3
    9136:	0243      	lsls	r3, r0, #9
    9138:	4313      	orrs	r3, r2
    913a:	1e5d      	subs	r5, r3, #1
    913c:	41ab      	sbcs	r3, r5
    913e:	465a      	mov	r2, fp
    9140:	0dc0      	lsrs	r0, r0, #23
    9142:	4303      	orrs	r3, r0
    9144:	0252      	lsls	r2, r2, #9
    9146:	4313      	orrs	r3, r2
    9148:	01e2      	lsls	r2, r4, #7
    914a:	d556      	bpl.n	91fa <__aeabi_dmul+0x426>
    914c:	2001      	movs	r0, #1
    914e:	085a      	lsrs	r2, r3, #1
    9150:	4003      	ands	r3, r0
    9152:	4313      	orrs	r3, r2
    9154:	07e2      	lsls	r2, r4, #31
    9156:	4313      	orrs	r3, r2
    9158:	0864      	lsrs	r4, r4, #1
    915a:	485a      	ldr	r0, [pc, #360]	; (92c4 <__aeabi_dmul+0x4f0>)
    915c:	4460      	add	r0, ip
    915e:	2800      	cmp	r0, #0
    9160:	dd4d      	ble.n	91fe <__aeabi_dmul+0x42a>
    9162:	075a      	lsls	r2, r3, #29
    9164:	d009      	beq.n	917a <__aeabi_dmul+0x3a6>
    9166:	220f      	movs	r2, #15
    9168:	401a      	ands	r2, r3
    916a:	2a04      	cmp	r2, #4
    916c:	d005      	beq.n	917a <__aeabi_dmul+0x3a6>
    916e:	1d1a      	adds	r2, r3, #4
    9170:	429a      	cmp	r2, r3
    9172:	419b      	sbcs	r3, r3
    9174:	425b      	negs	r3, r3
    9176:	18e4      	adds	r4, r4, r3
    9178:	0013      	movs	r3, r2
    917a:	01e2      	lsls	r2, r4, #7
    917c:	d504      	bpl.n	9188 <__aeabi_dmul+0x3b4>
    917e:	2080      	movs	r0, #128	; 0x80
    9180:	4a51      	ldr	r2, [pc, #324]	; (92c8 <__aeabi_dmul+0x4f4>)
    9182:	00c0      	lsls	r0, r0, #3
    9184:	4014      	ands	r4, r2
    9186:	4460      	add	r0, ip
    9188:	4a50      	ldr	r2, [pc, #320]	; (92cc <__aeabi_dmul+0x4f8>)
    918a:	4290      	cmp	r0, r2
    918c:	dd00      	ble.n	9190 <__aeabi_dmul+0x3bc>
    918e:	e6e3      	b.n	8f58 <__aeabi_dmul+0x184>
    9190:	2501      	movs	r5, #1
    9192:	08db      	lsrs	r3, r3, #3
    9194:	0762      	lsls	r2, r4, #29
    9196:	431a      	orrs	r2, r3
    9198:	0264      	lsls	r4, r4, #9
    919a:	9b01      	ldr	r3, [sp, #4]
    919c:	4691      	mov	r9, r2
    919e:	0b22      	lsrs	r2, r4, #12
    91a0:	0544      	lsls	r4, r0, #21
    91a2:	0d64      	lsrs	r4, r4, #21
    91a4:	401d      	ands	r5, r3
    91a6:	e67c      	b.n	8ea2 <__aeabi_dmul+0xce>
    91a8:	2280      	movs	r2, #128	; 0x80
    91aa:	4659      	mov	r1, fp
    91ac:	0312      	lsls	r2, r2, #12
    91ae:	4211      	tst	r1, r2
    91b0:	d008      	beq.n	91c4 <__aeabi_dmul+0x3f0>
    91b2:	4214      	tst	r4, r2
    91b4:	d106      	bne.n	91c4 <__aeabi_dmul+0x3f0>
    91b6:	4322      	orrs	r2, r4
    91b8:	0312      	lsls	r2, r2, #12
    91ba:	0b12      	lsrs	r2, r2, #12
    91bc:	4645      	mov	r5, r8
    91be:	4699      	mov	r9, r3
    91c0:	4c43      	ldr	r4, [pc, #268]	; (92d0 <__aeabi_dmul+0x4fc>)
    91c2:	e66e      	b.n	8ea2 <__aeabi_dmul+0xce>
    91c4:	465b      	mov	r3, fp
    91c6:	431a      	orrs	r2, r3
    91c8:	0312      	lsls	r2, r2, #12
    91ca:	0b12      	lsrs	r2, r2, #12
    91cc:	4c40      	ldr	r4, [pc, #256]	; (92d0 <__aeabi_dmul+0x4fc>)
    91ce:	e668      	b.n	8ea2 <__aeabi_dmul+0xce>
    91d0:	0003      	movs	r3, r0
    91d2:	4654      	mov	r4, sl
    91d4:	3b28      	subs	r3, #40	; 0x28
    91d6:	409c      	lsls	r4, r3
    91d8:	2300      	movs	r3, #0
    91da:	e6b9      	b.n	8f50 <__aeabi_dmul+0x17c>
    91dc:	f000 fbfc 	bl	99d8 <__clzsi2>
    91e0:	3020      	adds	r0, #32
    91e2:	e6a6      	b.n	8f32 <__aeabi_dmul+0x15e>
    91e4:	0003      	movs	r3, r0
    91e6:	3b28      	subs	r3, #40	; 0x28
    91e8:	409f      	lsls	r7, r3
    91ea:	2300      	movs	r3, #0
    91ec:	46bb      	mov	fp, r7
    91ee:	4699      	mov	r9, r3
    91f0:	e68a      	b.n	8f08 <__aeabi_dmul+0x134>
    91f2:	f000 fbf1 	bl	99d8 <__clzsi2>
    91f6:	3020      	adds	r0, #32
    91f8:	e674      	b.n	8ee4 <__aeabi_dmul+0x110>
    91fa:	46b4      	mov	ip, r6
    91fc:	e7ad      	b.n	915a <__aeabi_dmul+0x386>
    91fe:	2501      	movs	r5, #1
    9200:	1a2a      	subs	r2, r5, r0
    9202:	2a38      	cmp	r2, #56	; 0x38
    9204:	dd06      	ble.n	9214 <__aeabi_dmul+0x440>
    9206:	9b01      	ldr	r3, [sp, #4]
    9208:	2400      	movs	r4, #0
    920a:	401d      	ands	r5, r3
    920c:	2300      	movs	r3, #0
    920e:	2200      	movs	r2, #0
    9210:	4699      	mov	r9, r3
    9212:	e646      	b.n	8ea2 <__aeabi_dmul+0xce>
    9214:	2a1f      	cmp	r2, #31
    9216:	dc21      	bgt.n	925c <__aeabi_dmul+0x488>
    9218:	2520      	movs	r5, #32
    921a:	0020      	movs	r0, r4
    921c:	1aad      	subs	r5, r5, r2
    921e:	001e      	movs	r6, r3
    9220:	40ab      	lsls	r3, r5
    9222:	40a8      	lsls	r0, r5
    9224:	40d6      	lsrs	r6, r2
    9226:	1e5d      	subs	r5, r3, #1
    9228:	41ab      	sbcs	r3, r5
    922a:	4330      	orrs	r0, r6
    922c:	4318      	orrs	r0, r3
    922e:	40d4      	lsrs	r4, r2
    9230:	0743      	lsls	r3, r0, #29
    9232:	d009      	beq.n	9248 <__aeabi_dmul+0x474>
    9234:	230f      	movs	r3, #15
    9236:	4003      	ands	r3, r0
    9238:	2b04      	cmp	r3, #4
    923a:	d005      	beq.n	9248 <__aeabi_dmul+0x474>
    923c:	0003      	movs	r3, r0
    923e:	1d18      	adds	r0, r3, #4
    9240:	4298      	cmp	r0, r3
    9242:	419b      	sbcs	r3, r3
    9244:	425b      	negs	r3, r3
    9246:	18e4      	adds	r4, r4, r3
    9248:	0223      	lsls	r3, r4, #8
    924a:	d521      	bpl.n	9290 <__aeabi_dmul+0x4bc>
    924c:	2501      	movs	r5, #1
    924e:	9b01      	ldr	r3, [sp, #4]
    9250:	2401      	movs	r4, #1
    9252:	401d      	ands	r5, r3
    9254:	2300      	movs	r3, #0
    9256:	2200      	movs	r2, #0
    9258:	4699      	mov	r9, r3
    925a:	e622      	b.n	8ea2 <__aeabi_dmul+0xce>
    925c:	251f      	movs	r5, #31
    925e:	0021      	movs	r1, r4
    9260:	426d      	negs	r5, r5
    9262:	1a28      	subs	r0, r5, r0
    9264:	40c1      	lsrs	r1, r0
    9266:	0008      	movs	r0, r1
    9268:	2a20      	cmp	r2, #32
    926a:	d01d      	beq.n	92a8 <__aeabi_dmul+0x4d4>
    926c:	355f      	adds	r5, #95	; 0x5f
    926e:	1aaa      	subs	r2, r5, r2
    9270:	4094      	lsls	r4, r2
    9272:	4323      	orrs	r3, r4
    9274:	1e5c      	subs	r4, r3, #1
    9276:	41a3      	sbcs	r3, r4
    9278:	2507      	movs	r5, #7
    927a:	4303      	orrs	r3, r0
    927c:	401d      	ands	r5, r3
    927e:	2200      	movs	r2, #0
    9280:	2d00      	cmp	r5, #0
    9282:	d009      	beq.n	9298 <__aeabi_dmul+0x4c4>
    9284:	220f      	movs	r2, #15
    9286:	2400      	movs	r4, #0
    9288:	401a      	ands	r2, r3
    928a:	0018      	movs	r0, r3
    928c:	2a04      	cmp	r2, #4
    928e:	d1d6      	bne.n	923e <__aeabi_dmul+0x46a>
    9290:	0003      	movs	r3, r0
    9292:	0765      	lsls	r5, r4, #29
    9294:	0264      	lsls	r4, r4, #9
    9296:	0b22      	lsrs	r2, r4, #12
    9298:	08db      	lsrs	r3, r3, #3
    929a:	432b      	orrs	r3, r5
    929c:	2501      	movs	r5, #1
    929e:	4699      	mov	r9, r3
    92a0:	9b01      	ldr	r3, [sp, #4]
    92a2:	2400      	movs	r4, #0
    92a4:	401d      	ands	r5, r3
    92a6:	e5fc      	b.n	8ea2 <__aeabi_dmul+0xce>
    92a8:	2400      	movs	r4, #0
    92aa:	e7e2      	b.n	9272 <__aeabi_dmul+0x49e>
    92ac:	2280      	movs	r2, #128	; 0x80
    92ae:	2501      	movs	r5, #1
    92b0:	0312      	lsls	r2, r2, #12
    92b2:	4322      	orrs	r2, r4
    92b4:	9901      	ldr	r1, [sp, #4]
    92b6:	0312      	lsls	r2, r2, #12
    92b8:	0b12      	lsrs	r2, r2, #12
    92ba:	400d      	ands	r5, r1
    92bc:	4699      	mov	r9, r3
    92be:	4c04      	ldr	r4, [pc, #16]	; (92d0 <__aeabi_dmul+0x4fc>)
    92c0:	e5ef      	b.n	8ea2 <__aeabi_dmul+0xce>
    92c2:	46c0      	nop			; (mov r8, r8)
    92c4:	000003ff 	.word	0x000003ff
    92c8:	feffffff 	.word	0xfeffffff
    92cc:	000007fe 	.word	0x000007fe
    92d0:	000007ff 	.word	0x000007ff

000092d4 <__aeabi_dsub>:
    92d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    92d6:	4646      	mov	r6, r8
    92d8:	46d6      	mov	lr, sl
    92da:	464f      	mov	r7, r9
    92dc:	030c      	lsls	r4, r1, #12
    92de:	b5c0      	push	{r6, r7, lr}
    92e0:	0fcd      	lsrs	r5, r1, #31
    92e2:	004e      	lsls	r6, r1, #1
    92e4:	0a61      	lsrs	r1, r4, #9
    92e6:	0f44      	lsrs	r4, r0, #29
    92e8:	430c      	orrs	r4, r1
    92ea:	00c1      	lsls	r1, r0, #3
    92ec:	0058      	lsls	r0, r3, #1
    92ee:	0d40      	lsrs	r0, r0, #21
    92f0:	4684      	mov	ip, r0
    92f2:	468a      	mov	sl, r1
    92f4:	000f      	movs	r7, r1
    92f6:	0319      	lsls	r1, r3, #12
    92f8:	0f50      	lsrs	r0, r2, #29
    92fa:	0a49      	lsrs	r1, r1, #9
    92fc:	4301      	orrs	r1, r0
    92fe:	48c6      	ldr	r0, [pc, #792]	; (9618 <__aeabi_dsub+0x344>)
    9300:	0d76      	lsrs	r6, r6, #21
    9302:	46a8      	mov	r8, r5
    9304:	0fdb      	lsrs	r3, r3, #31
    9306:	00d2      	lsls	r2, r2, #3
    9308:	4584      	cmp	ip, r0
    930a:	d100      	bne.n	930e <__aeabi_dsub+0x3a>
    930c:	e0d8      	b.n	94c0 <__aeabi_dsub+0x1ec>
    930e:	2001      	movs	r0, #1
    9310:	4043      	eors	r3, r0
    9312:	42ab      	cmp	r3, r5
    9314:	d100      	bne.n	9318 <__aeabi_dsub+0x44>
    9316:	e0a6      	b.n	9466 <__aeabi_dsub+0x192>
    9318:	4660      	mov	r0, ip
    931a:	1a35      	subs	r5, r6, r0
    931c:	2d00      	cmp	r5, #0
    931e:	dc00      	bgt.n	9322 <__aeabi_dsub+0x4e>
    9320:	e105      	b.n	952e <__aeabi_dsub+0x25a>
    9322:	2800      	cmp	r0, #0
    9324:	d110      	bne.n	9348 <__aeabi_dsub+0x74>
    9326:	000b      	movs	r3, r1
    9328:	4313      	orrs	r3, r2
    932a:	d100      	bne.n	932e <__aeabi_dsub+0x5a>
    932c:	e0d7      	b.n	94de <__aeabi_dsub+0x20a>
    932e:	1e6b      	subs	r3, r5, #1
    9330:	2b00      	cmp	r3, #0
    9332:	d000      	beq.n	9336 <__aeabi_dsub+0x62>
    9334:	e14b      	b.n	95ce <__aeabi_dsub+0x2fa>
    9336:	4653      	mov	r3, sl
    9338:	1a9f      	subs	r7, r3, r2
    933a:	45ba      	cmp	sl, r7
    933c:	4180      	sbcs	r0, r0
    933e:	1a64      	subs	r4, r4, r1
    9340:	4240      	negs	r0, r0
    9342:	1a24      	subs	r4, r4, r0
    9344:	2601      	movs	r6, #1
    9346:	e01e      	b.n	9386 <__aeabi_dsub+0xb2>
    9348:	4bb3      	ldr	r3, [pc, #716]	; (9618 <__aeabi_dsub+0x344>)
    934a:	429e      	cmp	r6, r3
    934c:	d048      	beq.n	93e0 <__aeabi_dsub+0x10c>
    934e:	2380      	movs	r3, #128	; 0x80
    9350:	041b      	lsls	r3, r3, #16
    9352:	4319      	orrs	r1, r3
    9354:	2d38      	cmp	r5, #56	; 0x38
    9356:	dd00      	ble.n	935a <__aeabi_dsub+0x86>
    9358:	e119      	b.n	958e <__aeabi_dsub+0x2ba>
    935a:	2d1f      	cmp	r5, #31
    935c:	dd00      	ble.n	9360 <__aeabi_dsub+0x8c>
    935e:	e14c      	b.n	95fa <__aeabi_dsub+0x326>
    9360:	2320      	movs	r3, #32
    9362:	000f      	movs	r7, r1
    9364:	1b5b      	subs	r3, r3, r5
    9366:	0010      	movs	r0, r2
    9368:	409a      	lsls	r2, r3
    936a:	409f      	lsls	r7, r3
    936c:	40e8      	lsrs	r0, r5
    936e:	1e53      	subs	r3, r2, #1
    9370:	419a      	sbcs	r2, r3
    9372:	40e9      	lsrs	r1, r5
    9374:	4307      	orrs	r7, r0
    9376:	4317      	orrs	r7, r2
    9378:	4653      	mov	r3, sl
    937a:	1bdf      	subs	r7, r3, r7
    937c:	1a61      	subs	r1, r4, r1
    937e:	45ba      	cmp	sl, r7
    9380:	41a4      	sbcs	r4, r4
    9382:	4264      	negs	r4, r4
    9384:	1b0c      	subs	r4, r1, r4
    9386:	0223      	lsls	r3, r4, #8
    9388:	d400      	bmi.n	938c <__aeabi_dsub+0xb8>
    938a:	e0c5      	b.n	9518 <__aeabi_dsub+0x244>
    938c:	0264      	lsls	r4, r4, #9
    938e:	0a65      	lsrs	r5, r4, #9
    9390:	2d00      	cmp	r5, #0
    9392:	d100      	bne.n	9396 <__aeabi_dsub+0xc2>
    9394:	e0f6      	b.n	9584 <__aeabi_dsub+0x2b0>
    9396:	0028      	movs	r0, r5
    9398:	f000 fb1e 	bl	99d8 <__clzsi2>
    939c:	0003      	movs	r3, r0
    939e:	3b08      	subs	r3, #8
    93a0:	2b1f      	cmp	r3, #31
    93a2:	dd00      	ble.n	93a6 <__aeabi_dsub+0xd2>
    93a4:	e0e9      	b.n	957a <__aeabi_dsub+0x2a6>
    93a6:	2220      	movs	r2, #32
    93a8:	003c      	movs	r4, r7
    93aa:	1ad2      	subs	r2, r2, r3
    93ac:	409d      	lsls	r5, r3
    93ae:	40d4      	lsrs	r4, r2
    93b0:	409f      	lsls	r7, r3
    93b2:	4325      	orrs	r5, r4
    93b4:	429e      	cmp	r6, r3
    93b6:	dd00      	ble.n	93ba <__aeabi_dsub+0xe6>
    93b8:	e0db      	b.n	9572 <__aeabi_dsub+0x29e>
    93ba:	1b9e      	subs	r6, r3, r6
    93bc:	1c73      	adds	r3, r6, #1
    93be:	2b1f      	cmp	r3, #31
    93c0:	dd00      	ble.n	93c4 <__aeabi_dsub+0xf0>
    93c2:	e10a      	b.n	95da <__aeabi_dsub+0x306>
    93c4:	2220      	movs	r2, #32
    93c6:	0038      	movs	r0, r7
    93c8:	1ad2      	subs	r2, r2, r3
    93ca:	0029      	movs	r1, r5
    93cc:	4097      	lsls	r7, r2
    93ce:	002c      	movs	r4, r5
    93d0:	4091      	lsls	r1, r2
    93d2:	40d8      	lsrs	r0, r3
    93d4:	1e7a      	subs	r2, r7, #1
    93d6:	4197      	sbcs	r7, r2
    93d8:	40dc      	lsrs	r4, r3
    93da:	2600      	movs	r6, #0
    93dc:	4301      	orrs	r1, r0
    93de:	430f      	orrs	r7, r1
    93e0:	077b      	lsls	r3, r7, #29
    93e2:	d009      	beq.n	93f8 <__aeabi_dsub+0x124>
    93e4:	230f      	movs	r3, #15
    93e6:	403b      	ands	r3, r7
    93e8:	2b04      	cmp	r3, #4
    93ea:	d005      	beq.n	93f8 <__aeabi_dsub+0x124>
    93ec:	1d3b      	adds	r3, r7, #4
    93ee:	42bb      	cmp	r3, r7
    93f0:	41bf      	sbcs	r7, r7
    93f2:	427f      	negs	r7, r7
    93f4:	19e4      	adds	r4, r4, r7
    93f6:	001f      	movs	r7, r3
    93f8:	0223      	lsls	r3, r4, #8
    93fa:	d525      	bpl.n	9448 <__aeabi_dsub+0x174>
    93fc:	4b86      	ldr	r3, [pc, #536]	; (9618 <__aeabi_dsub+0x344>)
    93fe:	3601      	adds	r6, #1
    9400:	429e      	cmp	r6, r3
    9402:	d100      	bne.n	9406 <__aeabi_dsub+0x132>
    9404:	e0af      	b.n	9566 <__aeabi_dsub+0x292>
    9406:	4b85      	ldr	r3, [pc, #532]	; (961c <__aeabi_dsub+0x348>)
    9408:	2501      	movs	r5, #1
    940a:	401c      	ands	r4, r3
    940c:	4643      	mov	r3, r8
    940e:	0762      	lsls	r2, r4, #29
    9410:	08ff      	lsrs	r7, r7, #3
    9412:	0264      	lsls	r4, r4, #9
    9414:	0576      	lsls	r6, r6, #21
    9416:	4317      	orrs	r7, r2
    9418:	0b24      	lsrs	r4, r4, #12
    941a:	0d76      	lsrs	r6, r6, #21
    941c:	401d      	ands	r5, r3
    941e:	2100      	movs	r1, #0
    9420:	0324      	lsls	r4, r4, #12
    9422:	0b23      	lsrs	r3, r4, #12
    9424:	0d0c      	lsrs	r4, r1, #20
    9426:	4a7e      	ldr	r2, [pc, #504]	; (9620 <__aeabi_dsub+0x34c>)
    9428:	0524      	lsls	r4, r4, #20
    942a:	431c      	orrs	r4, r3
    942c:	4014      	ands	r4, r2
    942e:	0533      	lsls	r3, r6, #20
    9430:	4323      	orrs	r3, r4
    9432:	005b      	lsls	r3, r3, #1
    9434:	07ed      	lsls	r5, r5, #31
    9436:	085b      	lsrs	r3, r3, #1
    9438:	432b      	orrs	r3, r5
    943a:	0038      	movs	r0, r7
    943c:	0019      	movs	r1, r3
    943e:	bc1c      	pop	{r2, r3, r4}
    9440:	4690      	mov	r8, r2
    9442:	4699      	mov	r9, r3
    9444:	46a2      	mov	sl, r4
    9446:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9448:	2501      	movs	r5, #1
    944a:	4643      	mov	r3, r8
    944c:	0762      	lsls	r2, r4, #29
    944e:	08ff      	lsrs	r7, r7, #3
    9450:	4317      	orrs	r7, r2
    9452:	08e4      	lsrs	r4, r4, #3
    9454:	401d      	ands	r5, r3
    9456:	4b70      	ldr	r3, [pc, #448]	; (9618 <__aeabi_dsub+0x344>)
    9458:	429e      	cmp	r6, r3
    945a:	d036      	beq.n	94ca <__aeabi_dsub+0x1f6>
    945c:	0324      	lsls	r4, r4, #12
    945e:	0576      	lsls	r6, r6, #21
    9460:	0b24      	lsrs	r4, r4, #12
    9462:	0d76      	lsrs	r6, r6, #21
    9464:	e7db      	b.n	941e <__aeabi_dsub+0x14a>
    9466:	4663      	mov	r3, ip
    9468:	1af3      	subs	r3, r6, r3
    946a:	2b00      	cmp	r3, #0
    946c:	dc00      	bgt.n	9470 <__aeabi_dsub+0x19c>
    946e:	e094      	b.n	959a <__aeabi_dsub+0x2c6>
    9470:	4660      	mov	r0, ip
    9472:	2800      	cmp	r0, #0
    9474:	d035      	beq.n	94e2 <__aeabi_dsub+0x20e>
    9476:	4868      	ldr	r0, [pc, #416]	; (9618 <__aeabi_dsub+0x344>)
    9478:	4286      	cmp	r6, r0
    947a:	d0b1      	beq.n	93e0 <__aeabi_dsub+0x10c>
    947c:	2780      	movs	r7, #128	; 0x80
    947e:	043f      	lsls	r7, r7, #16
    9480:	4339      	orrs	r1, r7
    9482:	2b38      	cmp	r3, #56	; 0x38
    9484:	dc00      	bgt.n	9488 <__aeabi_dsub+0x1b4>
    9486:	e0fd      	b.n	9684 <__aeabi_dsub+0x3b0>
    9488:	430a      	orrs	r2, r1
    948a:	0017      	movs	r7, r2
    948c:	2100      	movs	r1, #0
    948e:	1e7a      	subs	r2, r7, #1
    9490:	4197      	sbcs	r7, r2
    9492:	4457      	add	r7, sl
    9494:	4557      	cmp	r7, sl
    9496:	4180      	sbcs	r0, r0
    9498:	1909      	adds	r1, r1, r4
    949a:	4244      	negs	r4, r0
    949c:	190c      	adds	r4, r1, r4
    949e:	0223      	lsls	r3, r4, #8
    94a0:	d53a      	bpl.n	9518 <__aeabi_dsub+0x244>
    94a2:	4b5d      	ldr	r3, [pc, #372]	; (9618 <__aeabi_dsub+0x344>)
    94a4:	3601      	adds	r6, #1
    94a6:	429e      	cmp	r6, r3
    94a8:	d100      	bne.n	94ac <__aeabi_dsub+0x1d8>
    94aa:	e14b      	b.n	9744 <__aeabi_dsub+0x470>
    94ac:	2201      	movs	r2, #1
    94ae:	4b5b      	ldr	r3, [pc, #364]	; (961c <__aeabi_dsub+0x348>)
    94b0:	401c      	ands	r4, r3
    94b2:	087b      	lsrs	r3, r7, #1
    94b4:	4017      	ands	r7, r2
    94b6:	431f      	orrs	r7, r3
    94b8:	07e2      	lsls	r2, r4, #31
    94ba:	4317      	orrs	r7, r2
    94bc:	0864      	lsrs	r4, r4, #1
    94be:	e78f      	b.n	93e0 <__aeabi_dsub+0x10c>
    94c0:	0008      	movs	r0, r1
    94c2:	4310      	orrs	r0, r2
    94c4:	d000      	beq.n	94c8 <__aeabi_dsub+0x1f4>
    94c6:	e724      	b.n	9312 <__aeabi_dsub+0x3e>
    94c8:	e721      	b.n	930e <__aeabi_dsub+0x3a>
    94ca:	0023      	movs	r3, r4
    94cc:	433b      	orrs	r3, r7
    94ce:	d100      	bne.n	94d2 <__aeabi_dsub+0x1fe>
    94d0:	e1b9      	b.n	9846 <__aeabi_dsub+0x572>
    94d2:	2280      	movs	r2, #128	; 0x80
    94d4:	0312      	lsls	r2, r2, #12
    94d6:	4314      	orrs	r4, r2
    94d8:	0324      	lsls	r4, r4, #12
    94da:	0b24      	lsrs	r4, r4, #12
    94dc:	e79f      	b.n	941e <__aeabi_dsub+0x14a>
    94de:	002e      	movs	r6, r5
    94e0:	e77e      	b.n	93e0 <__aeabi_dsub+0x10c>
    94e2:	0008      	movs	r0, r1
    94e4:	4310      	orrs	r0, r2
    94e6:	d100      	bne.n	94ea <__aeabi_dsub+0x216>
    94e8:	e0ca      	b.n	9680 <__aeabi_dsub+0x3ac>
    94ea:	1e58      	subs	r0, r3, #1
    94ec:	4684      	mov	ip, r0
    94ee:	2800      	cmp	r0, #0
    94f0:	d000      	beq.n	94f4 <__aeabi_dsub+0x220>
    94f2:	e0e7      	b.n	96c4 <__aeabi_dsub+0x3f0>
    94f4:	4452      	add	r2, sl
    94f6:	4552      	cmp	r2, sl
    94f8:	4180      	sbcs	r0, r0
    94fa:	1864      	adds	r4, r4, r1
    94fc:	4240      	negs	r0, r0
    94fe:	1824      	adds	r4, r4, r0
    9500:	0017      	movs	r7, r2
    9502:	2601      	movs	r6, #1
    9504:	0223      	lsls	r3, r4, #8
    9506:	d507      	bpl.n	9518 <__aeabi_dsub+0x244>
    9508:	2602      	movs	r6, #2
    950a:	e7cf      	b.n	94ac <__aeabi_dsub+0x1d8>
    950c:	4664      	mov	r4, ip
    950e:	432c      	orrs	r4, r5
    9510:	d100      	bne.n	9514 <__aeabi_dsub+0x240>
    9512:	e1b3      	b.n	987c <__aeabi_dsub+0x5a8>
    9514:	002c      	movs	r4, r5
    9516:	4667      	mov	r7, ip
    9518:	077b      	lsls	r3, r7, #29
    951a:	d000      	beq.n	951e <__aeabi_dsub+0x24a>
    951c:	e762      	b.n	93e4 <__aeabi_dsub+0x110>
    951e:	0763      	lsls	r3, r4, #29
    9520:	08ff      	lsrs	r7, r7, #3
    9522:	431f      	orrs	r7, r3
    9524:	2501      	movs	r5, #1
    9526:	4643      	mov	r3, r8
    9528:	08e4      	lsrs	r4, r4, #3
    952a:	401d      	ands	r5, r3
    952c:	e793      	b.n	9456 <__aeabi_dsub+0x182>
    952e:	2d00      	cmp	r5, #0
    9530:	d178      	bne.n	9624 <__aeabi_dsub+0x350>
    9532:	1c75      	adds	r5, r6, #1
    9534:	056d      	lsls	r5, r5, #21
    9536:	0d6d      	lsrs	r5, r5, #21
    9538:	2d01      	cmp	r5, #1
    953a:	dc00      	bgt.n	953e <__aeabi_dsub+0x26a>
    953c:	e0f2      	b.n	9724 <__aeabi_dsub+0x450>
    953e:	4650      	mov	r0, sl
    9540:	1a80      	subs	r0, r0, r2
    9542:	4582      	cmp	sl, r0
    9544:	41bf      	sbcs	r7, r7
    9546:	1a65      	subs	r5, r4, r1
    9548:	427f      	negs	r7, r7
    954a:	1bed      	subs	r5, r5, r7
    954c:	4684      	mov	ip, r0
    954e:	0228      	lsls	r0, r5, #8
    9550:	d400      	bmi.n	9554 <__aeabi_dsub+0x280>
    9552:	e08c      	b.n	966e <__aeabi_dsub+0x39a>
    9554:	4650      	mov	r0, sl
    9556:	1a17      	subs	r7, r2, r0
    9558:	42ba      	cmp	r2, r7
    955a:	4192      	sbcs	r2, r2
    955c:	1b0c      	subs	r4, r1, r4
    955e:	4255      	negs	r5, r2
    9560:	1b65      	subs	r5, r4, r5
    9562:	4698      	mov	r8, r3
    9564:	e714      	b.n	9390 <__aeabi_dsub+0xbc>
    9566:	2501      	movs	r5, #1
    9568:	4643      	mov	r3, r8
    956a:	2400      	movs	r4, #0
    956c:	401d      	ands	r5, r3
    956e:	2700      	movs	r7, #0
    9570:	e755      	b.n	941e <__aeabi_dsub+0x14a>
    9572:	4c2a      	ldr	r4, [pc, #168]	; (961c <__aeabi_dsub+0x348>)
    9574:	1af6      	subs	r6, r6, r3
    9576:	402c      	ands	r4, r5
    9578:	e732      	b.n	93e0 <__aeabi_dsub+0x10c>
    957a:	003d      	movs	r5, r7
    957c:	3828      	subs	r0, #40	; 0x28
    957e:	4085      	lsls	r5, r0
    9580:	2700      	movs	r7, #0
    9582:	e717      	b.n	93b4 <__aeabi_dsub+0xe0>
    9584:	0038      	movs	r0, r7
    9586:	f000 fa27 	bl	99d8 <__clzsi2>
    958a:	3020      	adds	r0, #32
    958c:	e706      	b.n	939c <__aeabi_dsub+0xc8>
    958e:	430a      	orrs	r2, r1
    9590:	0017      	movs	r7, r2
    9592:	2100      	movs	r1, #0
    9594:	1e7a      	subs	r2, r7, #1
    9596:	4197      	sbcs	r7, r2
    9598:	e6ee      	b.n	9378 <__aeabi_dsub+0xa4>
    959a:	2b00      	cmp	r3, #0
    959c:	d000      	beq.n	95a0 <__aeabi_dsub+0x2cc>
    959e:	e0e5      	b.n	976c <__aeabi_dsub+0x498>
    95a0:	1c73      	adds	r3, r6, #1
    95a2:	469c      	mov	ip, r3
    95a4:	055b      	lsls	r3, r3, #21
    95a6:	0d5b      	lsrs	r3, r3, #21
    95a8:	2b01      	cmp	r3, #1
    95aa:	dc00      	bgt.n	95ae <__aeabi_dsub+0x2da>
    95ac:	e09f      	b.n	96ee <__aeabi_dsub+0x41a>
    95ae:	4b1a      	ldr	r3, [pc, #104]	; (9618 <__aeabi_dsub+0x344>)
    95b0:	459c      	cmp	ip, r3
    95b2:	d100      	bne.n	95b6 <__aeabi_dsub+0x2e2>
    95b4:	e0c5      	b.n	9742 <__aeabi_dsub+0x46e>
    95b6:	4452      	add	r2, sl
    95b8:	4552      	cmp	r2, sl
    95ba:	4180      	sbcs	r0, r0
    95bc:	1864      	adds	r4, r4, r1
    95be:	4240      	negs	r0, r0
    95c0:	1824      	adds	r4, r4, r0
    95c2:	07e7      	lsls	r7, r4, #31
    95c4:	0852      	lsrs	r2, r2, #1
    95c6:	4317      	orrs	r7, r2
    95c8:	0864      	lsrs	r4, r4, #1
    95ca:	4666      	mov	r6, ip
    95cc:	e708      	b.n	93e0 <__aeabi_dsub+0x10c>
    95ce:	4812      	ldr	r0, [pc, #72]	; (9618 <__aeabi_dsub+0x344>)
    95d0:	4285      	cmp	r5, r0
    95d2:	d100      	bne.n	95d6 <__aeabi_dsub+0x302>
    95d4:	e085      	b.n	96e2 <__aeabi_dsub+0x40e>
    95d6:	001d      	movs	r5, r3
    95d8:	e6bc      	b.n	9354 <__aeabi_dsub+0x80>
    95da:	0029      	movs	r1, r5
    95dc:	3e1f      	subs	r6, #31
    95de:	40f1      	lsrs	r1, r6
    95e0:	2b20      	cmp	r3, #32
    95e2:	d100      	bne.n	95e6 <__aeabi_dsub+0x312>
    95e4:	e07f      	b.n	96e6 <__aeabi_dsub+0x412>
    95e6:	2240      	movs	r2, #64	; 0x40
    95e8:	1ad3      	subs	r3, r2, r3
    95ea:	409d      	lsls	r5, r3
    95ec:	432f      	orrs	r7, r5
    95ee:	1e7d      	subs	r5, r7, #1
    95f0:	41af      	sbcs	r7, r5
    95f2:	2400      	movs	r4, #0
    95f4:	430f      	orrs	r7, r1
    95f6:	2600      	movs	r6, #0
    95f8:	e78e      	b.n	9518 <__aeabi_dsub+0x244>
    95fa:	002b      	movs	r3, r5
    95fc:	000f      	movs	r7, r1
    95fe:	3b20      	subs	r3, #32
    9600:	40df      	lsrs	r7, r3
    9602:	2d20      	cmp	r5, #32
    9604:	d071      	beq.n	96ea <__aeabi_dsub+0x416>
    9606:	2340      	movs	r3, #64	; 0x40
    9608:	1b5d      	subs	r5, r3, r5
    960a:	40a9      	lsls	r1, r5
    960c:	430a      	orrs	r2, r1
    960e:	1e51      	subs	r1, r2, #1
    9610:	418a      	sbcs	r2, r1
    9612:	2100      	movs	r1, #0
    9614:	4317      	orrs	r7, r2
    9616:	e6af      	b.n	9378 <__aeabi_dsub+0xa4>
    9618:	000007ff 	.word	0x000007ff
    961c:	ff7fffff 	.word	0xff7fffff
    9620:	800fffff 	.word	0x800fffff
    9624:	2e00      	cmp	r6, #0
    9626:	d03e      	beq.n	96a6 <__aeabi_dsub+0x3d2>
    9628:	4eb3      	ldr	r6, [pc, #716]	; (98f8 <__aeabi_dsub+0x624>)
    962a:	45b4      	cmp	ip, r6
    962c:	d045      	beq.n	96ba <__aeabi_dsub+0x3e6>
    962e:	2680      	movs	r6, #128	; 0x80
    9630:	0436      	lsls	r6, r6, #16
    9632:	426d      	negs	r5, r5
    9634:	4334      	orrs	r4, r6
    9636:	2d38      	cmp	r5, #56	; 0x38
    9638:	dd00      	ble.n	963c <__aeabi_dsub+0x368>
    963a:	e0a8      	b.n	978e <__aeabi_dsub+0x4ba>
    963c:	2d1f      	cmp	r5, #31
    963e:	dd00      	ble.n	9642 <__aeabi_dsub+0x36e>
    9640:	e11f      	b.n	9882 <__aeabi_dsub+0x5ae>
    9642:	2620      	movs	r6, #32
    9644:	0027      	movs	r7, r4
    9646:	4650      	mov	r0, sl
    9648:	1b76      	subs	r6, r6, r5
    964a:	40b7      	lsls	r7, r6
    964c:	40e8      	lsrs	r0, r5
    964e:	4307      	orrs	r7, r0
    9650:	4650      	mov	r0, sl
    9652:	40b0      	lsls	r0, r6
    9654:	1e46      	subs	r6, r0, #1
    9656:	41b0      	sbcs	r0, r6
    9658:	40ec      	lsrs	r4, r5
    965a:	4338      	orrs	r0, r7
    965c:	1a17      	subs	r7, r2, r0
    965e:	42ba      	cmp	r2, r7
    9660:	4192      	sbcs	r2, r2
    9662:	1b0c      	subs	r4, r1, r4
    9664:	4252      	negs	r2, r2
    9666:	1aa4      	subs	r4, r4, r2
    9668:	4666      	mov	r6, ip
    966a:	4698      	mov	r8, r3
    966c:	e68b      	b.n	9386 <__aeabi_dsub+0xb2>
    966e:	4664      	mov	r4, ip
    9670:	4667      	mov	r7, ip
    9672:	432c      	orrs	r4, r5
    9674:	d000      	beq.n	9678 <__aeabi_dsub+0x3a4>
    9676:	e68b      	b.n	9390 <__aeabi_dsub+0xbc>
    9678:	2500      	movs	r5, #0
    967a:	2600      	movs	r6, #0
    967c:	2700      	movs	r7, #0
    967e:	e6ea      	b.n	9456 <__aeabi_dsub+0x182>
    9680:	001e      	movs	r6, r3
    9682:	e6ad      	b.n	93e0 <__aeabi_dsub+0x10c>
    9684:	2b1f      	cmp	r3, #31
    9686:	dc60      	bgt.n	974a <__aeabi_dsub+0x476>
    9688:	2720      	movs	r7, #32
    968a:	1af8      	subs	r0, r7, r3
    968c:	000f      	movs	r7, r1
    968e:	4684      	mov	ip, r0
    9690:	4087      	lsls	r7, r0
    9692:	0010      	movs	r0, r2
    9694:	40d8      	lsrs	r0, r3
    9696:	4307      	orrs	r7, r0
    9698:	4660      	mov	r0, ip
    969a:	4082      	lsls	r2, r0
    969c:	1e50      	subs	r0, r2, #1
    969e:	4182      	sbcs	r2, r0
    96a0:	40d9      	lsrs	r1, r3
    96a2:	4317      	orrs	r7, r2
    96a4:	e6f5      	b.n	9492 <__aeabi_dsub+0x1be>
    96a6:	0026      	movs	r6, r4
    96a8:	4650      	mov	r0, sl
    96aa:	4306      	orrs	r6, r0
    96ac:	d005      	beq.n	96ba <__aeabi_dsub+0x3e6>
    96ae:	43ed      	mvns	r5, r5
    96b0:	2d00      	cmp	r5, #0
    96b2:	d0d3      	beq.n	965c <__aeabi_dsub+0x388>
    96b4:	4e90      	ldr	r6, [pc, #576]	; (98f8 <__aeabi_dsub+0x624>)
    96b6:	45b4      	cmp	ip, r6
    96b8:	d1bd      	bne.n	9636 <__aeabi_dsub+0x362>
    96ba:	000c      	movs	r4, r1
    96bc:	0017      	movs	r7, r2
    96be:	4666      	mov	r6, ip
    96c0:	4698      	mov	r8, r3
    96c2:	e68d      	b.n	93e0 <__aeabi_dsub+0x10c>
    96c4:	488c      	ldr	r0, [pc, #560]	; (98f8 <__aeabi_dsub+0x624>)
    96c6:	4283      	cmp	r3, r0
    96c8:	d00b      	beq.n	96e2 <__aeabi_dsub+0x40e>
    96ca:	4663      	mov	r3, ip
    96cc:	e6d9      	b.n	9482 <__aeabi_dsub+0x1ae>
    96ce:	2d00      	cmp	r5, #0
    96d0:	d000      	beq.n	96d4 <__aeabi_dsub+0x400>
    96d2:	e096      	b.n	9802 <__aeabi_dsub+0x52e>
    96d4:	0008      	movs	r0, r1
    96d6:	4310      	orrs	r0, r2
    96d8:	d100      	bne.n	96dc <__aeabi_dsub+0x408>
    96da:	e0e2      	b.n	98a2 <__aeabi_dsub+0x5ce>
    96dc:	000c      	movs	r4, r1
    96de:	0017      	movs	r7, r2
    96e0:	4698      	mov	r8, r3
    96e2:	4e85      	ldr	r6, [pc, #532]	; (98f8 <__aeabi_dsub+0x624>)
    96e4:	e67c      	b.n	93e0 <__aeabi_dsub+0x10c>
    96e6:	2500      	movs	r5, #0
    96e8:	e780      	b.n	95ec <__aeabi_dsub+0x318>
    96ea:	2100      	movs	r1, #0
    96ec:	e78e      	b.n	960c <__aeabi_dsub+0x338>
    96ee:	0023      	movs	r3, r4
    96f0:	4650      	mov	r0, sl
    96f2:	4303      	orrs	r3, r0
    96f4:	2e00      	cmp	r6, #0
    96f6:	d000      	beq.n	96fa <__aeabi_dsub+0x426>
    96f8:	e0a8      	b.n	984c <__aeabi_dsub+0x578>
    96fa:	2b00      	cmp	r3, #0
    96fc:	d100      	bne.n	9700 <__aeabi_dsub+0x42c>
    96fe:	e0de      	b.n	98be <__aeabi_dsub+0x5ea>
    9700:	000b      	movs	r3, r1
    9702:	4313      	orrs	r3, r2
    9704:	d100      	bne.n	9708 <__aeabi_dsub+0x434>
    9706:	e66b      	b.n	93e0 <__aeabi_dsub+0x10c>
    9708:	4452      	add	r2, sl
    970a:	4552      	cmp	r2, sl
    970c:	4180      	sbcs	r0, r0
    970e:	1864      	adds	r4, r4, r1
    9710:	4240      	negs	r0, r0
    9712:	1824      	adds	r4, r4, r0
    9714:	0017      	movs	r7, r2
    9716:	0223      	lsls	r3, r4, #8
    9718:	d400      	bmi.n	971c <__aeabi_dsub+0x448>
    971a:	e6fd      	b.n	9518 <__aeabi_dsub+0x244>
    971c:	4b77      	ldr	r3, [pc, #476]	; (98fc <__aeabi_dsub+0x628>)
    971e:	4666      	mov	r6, ip
    9720:	401c      	ands	r4, r3
    9722:	e65d      	b.n	93e0 <__aeabi_dsub+0x10c>
    9724:	0025      	movs	r5, r4
    9726:	4650      	mov	r0, sl
    9728:	4305      	orrs	r5, r0
    972a:	2e00      	cmp	r6, #0
    972c:	d1cf      	bne.n	96ce <__aeabi_dsub+0x3fa>
    972e:	2d00      	cmp	r5, #0
    9730:	d14f      	bne.n	97d2 <__aeabi_dsub+0x4fe>
    9732:	000c      	movs	r4, r1
    9734:	4314      	orrs	r4, r2
    9736:	d100      	bne.n	973a <__aeabi_dsub+0x466>
    9738:	e0a0      	b.n	987c <__aeabi_dsub+0x5a8>
    973a:	000c      	movs	r4, r1
    973c:	0017      	movs	r7, r2
    973e:	4698      	mov	r8, r3
    9740:	e64e      	b.n	93e0 <__aeabi_dsub+0x10c>
    9742:	4666      	mov	r6, ip
    9744:	2400      	movs	r4, #0
    9746:	2700      	movs	r7, #0
    9748:	e685      	b.n	9456 <__aeabi_dsub+0x182>
    974a:	001f      	movs	r7, r3
    974c:	0008      	movs	r0, r1
    974e:	3f20      	subs	r7, #32
    9750:	40f8      	lsrs	r0, r7
    9752:	0007      	movs	r7, r0
    9754:	2b20      	cmp	r3, #32
    9756:	d100      	bne.n	975a <__aeabi_dsub+0x486>
    9758:	e08e      	b.n	9878 <__aeabi_dsub+0x5a4>
    975a:	2040      	movs	r0, #64	; 0x40
    975c:	1ac3      	subs	r3, r0, r3
    975e:	4099      	lsls	r1, r3
    9760:	430a      	orrs	r2, r1
    9762:	1e51      	subs	r1, r2, #1
    9764:	418a      	sbcs	r2, r1
    9766:	2100      	movs	r1, #0
    9768:	4317      	orrs	r7, r2
    976a:	e692      	b.n	9492 <__aeabi_dsub+0x1be>
    976c:	2e00      	cmp	r6, #0
    976e:	d114      	bne.n	979a <__aeabi_dsub+0x4c6>
    9770:	0026      	movs	r6, r4
    9772:	4650      	mov	r0, sl
    9774:	4306      	orrs	r6, r0
    9776:	d062      	beq.n	983e <__aeabi_dsub+0x56a>
    9778:	43db      	mvns	r3, r3
    977a:	2b00      	cmp	r3, #0
    977c:	d15c      	bne.n	9838 <__aeabi_dsub+0x564>
    977e:	1887      	adds	r7, r0, r2
    9780:	4297      	cmp	r7, r2
    9782:	4192      	sbcs	r2, r2
    9784:	1864      	adds	r4, r4, r1
    9786:	4252      	negs	r2, r2
    9788:	18a4      	adds	r4, r4, r2
    978a:	4666      	mov	r6, ip
    978c:	e687      	b.n	949e <__aeabi_dsub+0x1ca>
    978e:	4650      	mov	r0, sl
    9790:	4320      	orrs	r0, r4
    9792:	1e44      	subs	r4, r0, #1
    9794:	41a0      	sbcs	r0, r4
    9796:	2400      	movs	r4, #0
    9798:	e760      	b.n	965c <__aeabi_dsub+0x388>
    979a:	4e57      	ldr	r6, [pc, #348]	; (98f8 <__aeabi_dsub+0x624>)
    979c:	45b4      	cmp	ip, r6
    979e:	d04e      	beq.n	983e <__aeabi_dsub+0x56a>
    97a0:	2680      	movs	r6, #128	; 0x80
    97a2:	0436      	lsls	r6, r6, #16
    97a4:	425b      	negs	r3, r3
    97a6:	4334      	orrs	r4, r6
    97a8:	2b38      	cmp	r3, #56	; 0x38
    97aa:	dd00      	ble.n	97ae <__aeabi_dsub+0x4da>
    97ac:	e07f      	b.n	98ae <__aeabi_dsub+0x5da>
    97ae:	2b1f      	cmp	r3, #31
    97b0:	dd00      	ble.n	97b4 <__aeabi_dsub+0x4e0>
    97b2:	e08b      	b.n	98cc <__aeabi_dsub+0x5f8>
    97b4:	2620      	movs	r6, #32
    97b6:	0027      	movs	r7, r4
    97b8:	4650      	mov	r0, sl
    97ba:	1af6      	subs	r6, r6, r3
    97bc:	40b7      	lsls	r7, r6
    97be:	40d8      	lsrs	r0, r3
    97c0:	4307      	orrs	r7, r0
    97c2:	4650      	mov	r0, sl
    97c4:	40b0      	lsls	r0, r6
    97c6:	1e46      	subs	r6, r0, #1
    97c8:	41b0      	sbcs	r0, r6
    97ca:	4307      	orrs	r7, r0
    97cc:	40dc      	lsrs	r4, r3
    97ce:	18bf      	adds	r7, r7, r2
    97d0:	e7d6      	b.n	9780 <__aeabi_dsub+0x4ac>
    97d2:	000d      	movs	r5, r1
    97d4:	4315      	orrs	r5, r2
    97d6:	d100      	bne.n	97da <__aeabi_dsub+0x506>
    97d8:	e602      	b.n	93e0 <__aeabi_dsub+0x10c>
    97da:	4650      	mov	r0, sl
    97dc:	1a80      	subs	r0, r0, r2
    97de:	4582      	cmp	sl, r0
    97e0:	41bf      	sbcs	r7, r7
    97e2:	1a65      	subs	r5, r4, r1
    97e4:	427f      	negs	r7, r7
    97e6:	1bed      	subs	r5, r5, r7
    97e8:	4684      	mov	ip, r0
    97ea:	0228      	lsls	r0, r5, #8
    97ec:	d400      	bmi.n	97f0 <__aeabi_dsub+0x51c>
    97ee:	e68d      	b.n	950c <__aeabi_dsub+0x238>
    97f0:	4650      	mov	r0, sl
    97f2:	1a17      	subs	r7, r2, r0
    97f4:	42ba      	cmp	r2, r7
    97f6:	4192      	sbcs	r2, r2
    97f8:	1b0c      	subs	r4, r1, r4
    97fa:	4252      	negs	r2, r2
    97fc:	1aa4      	subs	r4, r4, r2
    97fe:	4698      	mov	r8, r3
    9800:	e5ee      	b.n	93e0 <__aeabi_dsub+0x10c>
    9802:	000d      	movs	r5, r1
    9804:	4315      	orrs	r5, r2
    9806:	d100      	bne.n	980a <__aeabi_dsub+0x536>
    9808:	e76b      	b.n	96e2 <__aeabi_dsub+0x40e>
    980a:	4650      	mov	r0, sl
    980c:	0767      	lsls	r7, r4, #29
    980e:	08c0      	lsrs	r0, r0, #3
    9810:	4307      	orrs	r7, r0
    9812:	2080      	movs	r0, #128	; 0x80
    9814:	08e4      	lsrs	r4, r4, #3
    9816:	0300      	lsls	r0, r0, #12
    9818:	4204      	tst	r4, r0
    981a:	d007      	beq.n	982c <__aeabi_dsub+0x558>
    981c:	08cd      	lsrs	r5, r1, #3
    981e:	4205      	tst	r5, r0
    9820:	d104      	bne.n	982c <__aeabi_dsub+0x558>
    9822:	002c      	movs	r4, r5
    9824:	4698      	mov	r8, r3
    9826:	08d7      	lsrs	r7, r2, #3
    9828:	0749      	lsls	r1, r1, #29
    982a:	430f      	orrs	r7, r1
    982c:	0f7b      	lsrs	r3, r7, #29
    982e:	00e4      	lsls	r4, r4, #3
    9830:	431c      	orrs	r4, r3
    9832:	00ff      	lsls	r7, r7, #3
    9834:	4e30      	ldr	r6, [pc, #192]	; (98f8 <__aeabi_dsub+0x624>)
    9836:	e5d3      	b.n	93e0 <__aeabi_dsub+0x10c>
    9838:	4e2f      	ldr	r6, [pc, #188]	; (98f8 <__aeabi_dsub+0x624>)
    983a:	45b4      	cmp	ip, r6
    983c:	d1b4      	bne.n	97a8 <__aeabi_dsub+0x4d4>
    983e:	000c      	movs	r4, r1
    9840:	0017      	movs	r7, r2
    9842:	4666      	mov	r6, ip
    9844:	e5cc      	b.n	93e0 <__aeabi_dsub+0x10c>
    9846:	2700      	movs	r7, #0
    9848:	2400      	movs	r4, #0
    984a:	e5e8      	b.n	941e <__aeabi_dsub+0x14a>
    984c:	2b00      	cmp	r3, #0
    984e:	d039      	beq.n	98c4 <__aeabi_dsub+0x5f0>
    9850:	000b      	movs	r3, r1
    9852:	4313      	orrs	r3, r2
    9854:	d100      	bne.n	9858 <__aeabi_dsub+0x584>
    9856:	e744      	b.n	96e2 <__aeabi_dsub+0x40e>
    9858:	08c0      	lsrs	r0, r0, #3
    985a:	0767      	lsls	r7, r4, #29
    985c:	4307      	orrs	r7, r0
    985e:	2080      	movs	r0, #128	; 0x80
    9860:	08e4      	lsrs	r4, r4, #3
    9862:	0300      	lsls	r0, r0, #12
    9864:	4204      	tst	r4, r0
    9866:	d0e1      	beq.n	982c <__aeabi_dsub+0x558>
    9868:	08cb      	lsrs	r3, r1, #3
    986a:	4203      	tst	r3, r0
    986c:	d1de      	bne.n	982c <__aeabi_dsub+0x558>
    986e:	08d7      	lsrs	r7, r2, #3
    9870:	0749      	lsls	r1, r1, #29
    9872:	430f      	orrs	r7, r1
    9874:	001c      	movs	r4, r3
    9876:	e7d9      	b.n	982c <__aeabi_dsub+0x558>
    9878:	2100      	movs	r1, #0
    987a:	e771      	b.n	9760 <__aeabi_dsub+0x48c>
    987c:	2500      	movs	r5, #0
    987e:	2700      	movs	r7, #0
    9880:	e5e9      	b.n	9456 <__aeabi_dsub+0x182>
    9882:	002e      	movs	r6, r5
    9884:	0027      	movs	r7, r4
    9886:	3e20      	subs	r6, #32
    9888:	40f7      	lsrs	r7, r6
    988a:	2d20      	cmp	r5, #32
    988c:	d02f      	beq.n	98ee <__aeabi_dsub+0x61a>
    988e:	2640      	movs	r6, #64	; 0x40
    9890:	1b75      	subs	r5, r6, r5
    9892:	40ac      	lsls	r4, r5
    9894:	4650      	mov	r0, sl
    9896:	4320      	orrs	r0, r4
    9898:	1e44      	subs	r4, r0, #1
    989a:	41a0      	sbcs	r0, r4
    989c:	2400      	movs	r4, #0
    989e:	4338      	orrs	r0, r7
    98a0:	e6dc      	b.n	965c <__aeabi_dsub+0x388>
    98a2:	2480      	movs	r4, #128	; 0x80
    98a4:	2500      	movs	r5, #0
    98a6:	0324      	lsls	r4, r4, #12
    98a8:	4e13      	ldr	r6, [pc, #76]	; (98f8 <__aeabi_dsub+0x624>)
    98aa:	2700      	movs	r7, #0
    98ac:	e5d3      	b.n	9456 <__aeabi_dsub+0x182>
    98ae:	4650      	mov	r0, sl
    98b0:	4320      	orrs	r0, r4
    98b2:	0007      	movs	r7, r0
    98b4:	1e78      	subs	r0, r7, #1
    98b6:	4187      	sbcs	r7, r0
    98b8:	2400      	movs	r4, #0
    98ba:	18bf      	adds	r7, r7, r2
    98bc:	e760      	b.n	9780 <__aeabi_dsub+0x4ac>
    98be:	000c      	movs	r4, r1
    98c0:	0017      	movs	r7, r2
    98c2:	e58d      	b.n	93e0 <__aeabi_dsub+0x10c>
    98c4:	000c      	movs	r4, r1
    98c6:	0017      	movs	r7, r2
    98c8:	4e0b      	ldr	r6, [pc, #44]	; (98f8 <__aeabi_dsub+0x624>)
    98ca:	e589      	b.n	93e0 <__aeabi_dsub+0x10c>
    98cc:	001e      	movs	r6, r3
    98ce:	0027      	movs	r7, r4
    98d0:	3e20      	subs	r6, #32
    98d2:	40f7      	lsrs	r7, r6
    98d4:	2b20      	cmp	r3, #32
    98d6:	d00c      	beq.n	98f2 <__aeabi_dsub+0x61e>
    98d8:	2640      	movs	r6, #64	; 0x40
    98da:	1af3      	subs	r3, r6, r3
    98dc:	409c      	lsls	r4, r3
    98de:	4650      	mov	r0, sl
    98e0:	4320      	orrs	r0, r4
    98e2:	1e44      	subs	r4, r0, #1
    98e4:	41a0      	sbcs	r0, r4
    98e6:	4307      	orrs	r7, r0
    98e8:	2400      	movs	r4, #0
    98ea:	18bf      	adds	r7, r7, r2
    98ec:	e748      	b.n	9780 <__aeabi_dsub+0x4ac>
    98ee:	2400      	movs	r4, #0
    98f0:	e7d0      	b.n	9894 <__aeabi_dsub+0x5c0>
    98f2:	2400      	movs	r4, #0
    98f4:	e7f3      	b.n	98de <__aeabi_dsub+0x60a>
    98f6:	46c0      	nop			; (mov r8, r8)
    98f8:	000007ff 	.word	0x000007ff
    98fc:	ff7fffff 	.word	0xff7fffff

00009900 <__aeabi_d2iz>:
    9900:	b530      	push	{r4, r5, lr}
    9902:	4d13      	ldr	r5, [pc, #76]	; (9950 <__aeabi_d2iz+0x50>)
    9904:	030a      	lsls	r2, r1, #12
    9906:	004b      	lsls	r3, r1, #1
    9908:	0b12      	lsrs	r2, r2, #12
    990a:	0d5b      	lsrs	r3, r3, #21
    990c:	0fc9      	lsrs	r1, r1, #31
    990e:	2400      	movs	r4, #0
    9910:	42ab      	cmp	r3, r5
    9912:	dd10      	ble.n	9936 <__aeabi_d2iz+0x36>
    9914:	4c0f      	ldr	r4, [pc, #60]	; (9954 <__aeabi_d2iz+0x54>)
    9916:	42a3      	cmp	r3, r4
    9918:	dc0f      	bgt.n	993a <__aeabi_d2iz+0x3a>
    991a:	2480      	movs	r4, #128	; 0x80
    991c:	4d0e      	ldr	r5, [pc, #56]	; (9958 <__aeabi_d2iz+0x58>)
    991e:	0364      	lsls	r4, r4, #13
    9920:	4322      	orrs	r2, r4
    9922:	1aed      	subs	r5, r5, r3
    9924:	2d1f      	cmp	r5, #31
    9926:	dd0b      	ble.n	9940 <__aeabi_d2iz+0x40>
    9928:	480c      	ldr	r0, [pc, #48]	; (995c <__aeabi_d2iz+0x5c>)
    992a:	1ac3      	subs	r3, r0, r3
    992c:	40da      	lsrs	r2, r3
    992e:	4254      	negs	r4, r2
    9930:	2900      	cmp	r1, #0
    9932:	d100      	bne.n	9936 <__aeabi_d2iz+0x36>
    9934:	0014      	movs	r4, r2
    9936:	0020      	movs	r0, r4
    9938:	bd30      	pop	{r4, r5, pc}
    993a:	4b09      	ldr	r3, [pc, #36]	; (9960 <__aeabi_d2iz+0x60>)
    993c:	18cc      	adds	r4, r1, r3
    993e:	e7fa      	b.n	9936 <__aeabi_d2iz+0x36>
    9940:	4c08      	ldr	r4, [pc, #32]	; (9964 <__aeabi_d2iz+0x64>)
    9942:	40e8      	lsrs	r0, r5
    9944:	46a4      	mov	ip, r4
    9946:	4463      	add	r3, ip
    9948:	409a      	lsls	r2, r3
    994a:	4302      	orrs	r2, r0
    994c:	e7ef      	b.n	992e <__aeabi_d2iz+0x2e>
    994e:	46c0      	nop			; (mov r8, r8)
    9950:	000003fe 	.word	0x000003fe
    9954:	0000041d 	.word	0x0000041d
    9958:	00000433 	.word	0x00000433
    995c:	00000413 	.word	0x00000413
    9960:	7fffffff 	.word	0x7fffffff
    9964:	fffffbed 	.word	0xfffffbed

00009968 <__aeabi_ui2d>:
    9968:	b510      	push	{r4, lr}
    996a:	1e04      	subs	r4, r0, #0
    996c:	d028      	beq.n	99c0 <__aeabi_ui2d+0x58>
    996e:	f000 f833 	bl	99d8 <__clzsi2>
    9972:	4b15      	ldr	r3, [pc, #84]	; (99c8 <__aeabi_ui2d+0x60>)
    9974:	4a15      	ldr	r2, [pc, #84]	; (99cc <__aeabi_ui2d+0x64>)
    9976:	1a1b      	subs	r3, r3, r0
    9978:	1ad2      	subs	r2, r2, r3
    997a:	2a1f      	cmp	r2, #31
    997c:	dd15      	ble.n	99aa <__aeabi_ui2d+0x42>
    997e:	4a14      	ldr	r2, [pc, #80]	; (99d0 <__aeabi_ui2d+0x68>)
    9980:	1ad2      	subs	r2, r2, r3
    9982:	4094      	lsls	r4, r2
    9984:	2200      	movs	r2, #0
    9986:	0324      	lsls	r4, r4, #12
    9988:	055b      	lsls	r3, r3, #21
    998a:	0b24      	lsrs	r4, r4, #12
    998c:	0d5b      	lsrs	r3, r3, #21
    998e:	2100      	movs	r1, #0
    9990:	0010      	movs	r0, r2
    9992:	0324      	lsls	r4, r4, #12
    9994:	0d0a      	lsrs	r2, r1, #20
    9996:	0b24      	lsrs	r4, r4, #12
    9998:	0512      	lsls	r2, r2, #20
    999a:	4322      	orrs	r2, r4
    999c:	4c0d      	ldr	r4, [pc, #52]	; (99d4 <__aeabi_ui2d+0x6c>)
    999e:	051b      	lsls	r3, r3, #20
    99a0:	4022      	ands	r2, r4
    99a2:	4313      	orrs	r3, r2
    99a4:	005b      	lsls	r3, r3, #1
    99a6:	0859      	lsrs	r1, r3, #1
    99a8:	bd10      	pop	{r4, pc}
    99aa:	0021      	movs	r1, r4
    99ac:	4091      	lsls	r1, r2
    99ae:	000a      	movs	r2, r1
    99b0:	210b      	movs	r1, #11
    99b2:	1a08      	subs	r0, r1, r0
    99b4:	40c4      	lsrs	r4, r0
    99b6:	055b      	lsls	r3, r3, #21
    99b8:	0324      	lsls	r4, r4, #12
    99ba:	0b24      	lsrs	r4, r4, #12
    99bc:	0d5b      	lsrs	r3, r3, #21
    99be:	e7e6      	b.n	998e <__aeabi_ui2d+0x26>
    99c0:	2300      	movs	r3, #0
    99c2:	2400      	movs	r4, #0
    99c4:	2200      	movs	r2, #0
    99c6:	e7e2      	b.n	998e <__aeabi_ui2d+0x26>
    99c8:	0000041e 	.word	0x0000041e
    99cc:	00000433 	.word	0x00000433
    99d0:	00000413 	.word	0x00000413
    99d4:	800fffff 	.word	0x800fffff

000099d8 <__clzsi2>:
    99d8:	211c      	movs	r1, #28
    99da:	2301      	movs	r3, #1
    99dc:	041b      	lsls	r3, r3, #16
    99de:	4298      	cmp	r0, r3
    99e0:	d301      	bcc.n	99e6 <__clzsi2+0xe>
    99e2:	0c00      	lsrs	r0, r0, #16
    99e4:	3910      	subs	r1, #16
    99e6:	0a1b      	lsrs	r3, r3, #8
    99e8:	4298      	cmp	r0, r3
    99ea:	d301      	bcc.n	99f0 <__clzsi2+0x18>
    99ec:	0a00      	lsrs	r0, r0, #8
    99ee:	3908      	subs	r1, #8
    99f0:	091b      	lsrs	r3, r3, #4
    99f2:	4298      	cmp	r0, r3
    99f4:	d301      	bcc.n	99fa <__clzsi2+0x22>
    99f6:	0900      	lsrs	r0, r0, #4
    99f8:	3904      	subs	r1, #4
    99fa:	a202      	add	r2, pc, #8	; (adr r2, 9a04 <__clzsi2+0x2c>)
    99fc:	5c10      	ldrb	r0, [r2, r0]
    99fe:	1840      	adds	r0, r0, r1
    9a00:	4770      	bx	lr
    9a02:	46c0      	nop			; (mov r8, r8)
    9a04:	02020304 	.word	0x02020304
    9a08:	01010101 	.word	0x01010101
	...

00009a14 <atoi>:
    9a14:	b510      	push	{r4, lr}
    9a16:	220a      	movs	r2, #10
    9a18:	2100      	movs	r1, #0
    9a1a:	f000 fa21 	bl	9e60 <strtol>
    9a1e:	bd10      	pop	{r4, pc}

00009a20 <__libc_init_array>:
    9a20:	b570      	push	{r4, r5, r6, lr}
    9a22:	2600      	movs	r6, #0
    9a24:	4d0c      	ldr	r5, [pc, #48]	; (9a58 <__libc_init_array+0x38>)
    9a26:	4c0d      	ldr	r4, [pc, #52]	; (9a5c <__libc_init_array+0x3c>)
    9a28:	1b64      	subs	r4, r4, r5
    9a2a:	10a4      	asrs	r4, r4, #2
    9a2c:	42a6      	cmp	r6, r4
    9a2e:	d109      	bne.n	9a44 <__libc_init_array+0x24>
    9a30:	2600      	movs	r6, #0
    9a32:	f002 f8cb 	bl	bbcc <_init>
    9a36:	4d0a      	ldr	r5, [pc, #40]	; (9a60 <__libc_init_array+0x40>)
    9a38:	4c0a      	ldr	r4, [pc, #40]	; (9a64 <__libc_init_array+0x44>)
    9a3a:	1b64      	subs	r4, r4, r5
    9a3c:	10a4      	asrs	r4, r4, #2
    9a3e:	42a6      	cmp	r6, r4
    9a40:	d105      	bne.n	9a4e <__libc_init_array+0x2e>
    9a42:	bd70      	pop	{r4, r5, r6, pc}
    9a44:	00b3      	lsls	r3, r6, #2
    9a46:	58eb      	ldr	r3, [r5, r3]
    9a48:	4798      	blx	r3
    9a4a:	3601      	adds	r6, #1
    9a4c:	e7ee      	b.n	9a2c <__libc_init_array+0xc>
    9a4e:	00b3      	lsls	r3, r6, #2
    9a50:	58eb      	ldr	r3, [r5, r3]
    9a52:	4798      	blx	r3
    9a54:	3601      	adds	r6, #1
    9a56:	e7f2      	b.n	9a3e <__libc_init_array+0x1e>
    9a58:	0000bbd8 	.word	0x0000bbd8
    9a5c:	0000bbd8 	.word	0x0000bbd8
    9a60:	0000bbd8 	.word	0x0000bbd8
    9a64:	0000bbdc 	.word	0x0000bbdc

00009a68 <malloc>:
    9a68:	b510      	push	{r4, lr}
    9a6a:	4b03      	ldr	r3, [pc, #12]	; (9a78 <malloc+0x10>)
    9a6c:	0001      	movs	r1, r0
    9a6e:	6818      	ldr	r0, [r3, #0]
    9a70:	f000 f860 	bl	9b34 <_malloc_r>
    9a74:	bd10      	pop	{r4, pc}
    9a76:	46c0      	nop			; (mov r8, r8)
    9a78:	20000034 	.word	0x20000034

00009a7c <memcpy>:
    9a7c:	2300      	movs	r3, #0
    9a7e:	b510      	push	{r4, lr}
    9a80:	429a      	cmp	r2, r3
    9a82:	d100      	bne.n	9a86 <memcpy+0xa>
    9a84:	bd10      	pop	{r4, pc}
    9a86:	5ccc      	ldrb	r4, [r1, r3]
    9a88:	54c4      	strb	r4, [r0, r3]
    9a8a:	3301      	adds	r3, #1
    9a8c:	e7f8      	b.n	9a80 <memcpy+0x4>

00009a8e <memset>:
    9a8e:	0003      	movs	r3, r0
    9a90:	1882      	adds	r2, r0, r2
    9a92:	4293      	cmp	r3, r2
    9a94:	d100      	bne.n	9a98 <memset+0xa>
    9a96:	4770      	bx	lr
    9a98:	7019      	strb	r1, [r3, #0]
    9a9a:	3301      	adds	r3, #1
    9a9c:	e7f9      	b.n	9a92 <memset+0x4>
	...

00009aa0 <_free_r>:
    9aa0:	b570      	push	{r4, r5, r6, lr}
    9aa2:	0005      	movs	r5, r0
    9aa4:	2900      	cmp	r1, #0
    9aa6:	d010      	beq.n	9aca <_free_r+0x2a>
    9aa8:	1f0c      	subs	r4, r1, #4
    9aaa:	6823      	ldr	r3, [r4, #0]
    9aac:	2b00      	cmp	r3, #0
    9aae:	da00      	bge.n	9ab2 <_free_r+0x12>
    9ab0:	18e4      	adds	r4, r4, r3
    9ab2:	0028      	movs	r0, r5
    9ab4:	f000 fa44 	bl	9f40 <__malloc_lock>
    9ab8:	4a1d      	ldr	r2, [pc, #116]	; (9b30 <_free_r+0x90>)
    9aba:	6813      	ldr	r3, [r2, #0]
    9abc:	2b00      	cmp	r3, #0
    9abe:	d105      	bne.n	9acc <_free_r+0x2c>
    9ac0:	6063      	str	r3, [r4, #4]
    9ac2:	6014      	str	r4, [r2, #0]
    9ac4:	0028      	movs	r0, r5
    9ac6:	f000 fa3c 	bl	9f42 <__malloc_unlock>
    9aca:	bd70      	pop	{r4, r5, r6, pc}
    9acc:	42a3      	cmp	r3, r4
    9ace:	d909      	bls.n	9ae4 <_free_r+0x44>
    9ad0:	6821      	ldr	r1, [r4, #0]
    9ad2:	1860      	adds	r0, r4, r1
    9ad4:	4283      	cmp	r3, r0
    9ad6:	d1f3      	bne.n	9ac0 <_free_r+0x20>
    9ad8:	6818      	ldr	r0, [r3, #0]
    9ada:	685b      	ldr	r3, [r3, #4]
    9adc:	1841      	adds	r1, r0, r1
    9ade:	6021      	str	r1, [r4, #0]
    9ae0:	e7ee      	b.n	9ac0 <_free_r+0x20>
    9ae2:	0013      	movs	r3, r2
    9ae4:	685a      	ldr	r2, [r3, #4]
    9ae6:	2a00      	cmp	r2, #0
    9ae8:	d001      	beq.n	9aee <_free_r+0x4e>
    9aea:	42a2      	cmp	r2, r4
    9aec:	d9f9      	bls.n	9ae2 <_free_r+0x42>
    9aee:	6819      	ldr	r1, [r3, #0]
    9af0:	1858      	adds	r0, r3, r1
    9af2:	42a0      	cmp	r0, r4
    9af4:	d10b      	bne.n	9b0e <_free_r+0x6e>
    9af6:	6820      	ldr	r0, [r4, #0]
    9af8:	1809      	adds	r1, r1, r0
    9afa:	1858      	adds	r0, r3, r1
    9afc:	6019      	str	r1, [r3, #0]
    9afe:	4282      	cmp	r2, r0
    9b00:	d1e0      	bne.n	9ac4 <_free_r+0x24>
    9b02:	6810      	ldr	r0, [r2, #0]
    9b04:	6852      	ldr	r2, [r2, #4]
    9b06:	1841      	adds	r1, r0, r1
    9b08:	6019      	str	r1, [r3, #0]
    9b0a:	605a      	str	r2, [r3, #4]
    9b0c:	e7da      	b.n	9ac4 <_free_r+0x24>
    9b0e:	42a0      	cmp	r0, r4
    9b10:	d902      	bls.n	9b18 <_free_r+0x78>
    9b12:	230c      	movs	r3, #12
    9b14:	602b      	str	r3, [r5, #0]
    9b16:	e7d5      	b.n	9ac4 <_free_r+0x24>
    9b18:	6821      	ldr	r1, [r4, #0]
    9b1a:	1860      	adds	r0, r4, r1
    9b1c:	4282      	cmp	r2, r0
    9b1e:	d103      	bne.n	9b28 <_free_r+0x88>
    9b20:	6810      	ldr	r0, [r2, #0]
    9b22:	6852      	ldr	r2, [r2, #4]
    9b24:	1841      	adds	r1, r0, r1
    9b26:	6021      	str	r1, [r4, #0]
    9b28:	6062      	str	r2, [r4, #4]
    9b2a:	605c      	str	r4, [r3, #4]
    9b2c:	e7ca      	b.n	9ac4 <_free_r+0x24>
    9b2e:	46c0      	nop			; (mov r8, r8)
    9b30:	2000384c 	.word	0x2000384c

00009b34 <_malloc_r>:
    9b34:	2303      	movs	r3, #3
    9b36:	b570      	push	{r4, r5, r6, lr}
    9b38:	1ccd      	adds	r5, r1, #3
    9b3a:	439d      	bics	r5, r3
    9b3c:	3508      	adds	r5, #8
    9b3e:	0006      	movs	r6, r0
    9b40:	2d0c      	cmp	r5, #12
    9b42:	d21e      	bcs.n	9b82 <_malloc_r+0x4e>
    9b44:	250c      	movs	r5, #12
    9b46:	42a9      	cmp	r1, r5
    9b48:	d81d      	bhi.n	9b86 <_malloc_r+0x52>
    9b4a:	0030      	movs	r0, r6
    9b4c:	f000 f9f8 	bl	9f40 <__malloc_lock>
    9b50:	4a25      	ldr	r2, [pc, #148]	; (9be8 <_malloc_r+0xb4>)
    9b52:	6814      	ldr	r4, [r2, #0]
    9b54:	0021      	movs	r1, r4
    9b56:	2900      	cmp	r1, #0
    9b58:	d119      	bne.n	9b8e <_malloc_r+0x5a>
    9b5a:	4c24      	ldr	r4, [pc, #144]	; (9bec <_malloc_r+0xb8>)
    9b5c:	6823      	ldr	r3, [r4, #0]
    9b5e:	2b00      	cmp	r3, #0
    9b60:	d103      	bne.n	9b6a <_malloc_r+0x36>
    9b62:	0030      	movs	r0, r6
    9b64:	f000 f844 	bl	9bf0 <_sbrk_r>
    9b68:	6020      	str	r0, [r4, #0]
    9b6a:	0029      	movs	r1, r5
    9b6c:	0030      	movs	r0, r6
    9b6e:	f000 f83f 	bl	9bf0 <_sbrk_r>
    9b72:	1c43      	adds	r3, r0, #1
    9b74:	d12c      	bne.n	9bd0 <_malloc_r+0x9c>
    9b76:	230c      	movs	r3, #12
    9b78:	0030      	movs	r0, r6
    9b7a:	6033      	str	r3, [r6, #0]
    9b7c:	f000 f9e1 	bl	9f42 <__malloc_unlock>
    9b80:	e003      	b.n	9b8a <_malloc_r+0x56>
    9b82:	2d00      	cmp	r5, #0
    9b84:	dadf      	bge.n	9b46 <_malloc_r+0x12>
    9b86:	230c      	movs	r3, #12
    9b88:	6033      	str	r3, [r6, #0]
    9b8a:	2000      	movs	r0, #0
    9b8c:	bd70      	pop	{r4, r5, r6, pc}
    9b8e:	680b      	ldr	r3, [r1, #0]
    9b90:	1b5b      	subs	r3, r3, r5
    9b92:	d41a      	bmi.n	9bca <_malloc_r+0x96>
    9b94:	2b0b      	cmp	r3, #11
    9b96:	d903      	bls.n	9ba0 <_malloc_r+0x6c>
    9b98:	600b      	str	r3, [r1, #0]
    9b9a:	18cc      	adds	r4, r1, r3
    9b9c:	6025      	str	r5, [r4, #0]
    9b9e:	e003      	b.n	9ba8 <_malloc_r+0x74>
    9ba0:	428c      	cmp	r4, r1
    9ba2:	d10e      	bne.n	9bc2 <_malloc_r+0x8e>
    9ba4:	6863      	ldr	r3, [r4, #4]
    9ba6:	6013      	str	r3, [r2, #0]
    9ba8:	0030      	movs	r0, r6
    9baa:	f000 f9ca 	bl	9f42 <__malloc_unlock>
    9bae:	0020      	movs	r0, r4
    9bb0:	2207      	movs	r2, #7
    9bb2:	300b      	adds	r0, #11
    9bb4:	1d23      	adds	r3, r4, #4
    9bb6:	4390      	bics	r0, r2
    9bb8:	1ac3      	subs	r3, r0, r3
    9bba:	d0e7      	beq.n	9b8c <_malloc_r+0x58>
    9bbc:	425a      	negs	r2, r3
    9bbe:	50e2      	str	r2, [r4, r3]
    9bc0:	e7e4      	b.n	9b8c <_malloc_r+0x58>
    9bc2:	684b      	ldr	r3, [r1, #4]
    9bc4:	6063      	str	r3, [r4, #4]
    9bc6:	000c      	movs	r4, r1
    9bc8:	e7ee      	b.n	9ba8 <_malloc_r+0x74>
    9bca:	000c      	movs	r4, r1
    9bcc:	6849      	ldr	r1, [r1, #4]
    9bce:	e7c2      	b.n	9b56 <_malloc_r+0x22>
    9bd0:	2303      	movs	r3, #3
    9bd2:	1cc4      	adds	r4, r0, #3
    9bd4:	439c      	bics	r4, r3
    9bd6:	42a0      	cmp	r0, r4
    9bd8:	d0e0      	beq.n	9b9c <_malloc_r+0x68>
    9bda:	1a21      	subs	r1, r4, r0
    9bdc:	0030      	movs	r0, r6
    9bde:	f000 f807 	bl	9bf0 <_sbrk_r>
    9be2:	1c43      	adds	r3, r0, #1
    9be4:	d1da      	bne.n	9b9c <_malloc_r+0x68>
    9be6:	e7c6      	b.n	9b76 <_malloc_r+0x42>
    9be8:	2000384c 	.word	0x2000384c
    9bec:	20003850 	.word	0x20003850

00009bf0 <_sbrk_r>:
    9bf0:	2300      	movs	r3, #0
    9bf2:	b570      	push	{r4, r5, r6, lr}
    9bf4:	4c06      	ldr	r4, [pc, #24]	; (9c10 <_sbrk_r+0x20>)
    9bf6:	0005      	movs	r5, r0
    9bf8:	0008      	movs	r0, r1
    9bfa:	6023      	str	r3, [r4, #0]
    9bfc:	f7fd fb20 	bl	7240 <_sbrk>
    9c00:	1c43      	adds	r3, r0, #1
    9c02:	d103      	bne.n	9c0c <_sbrk_r+0x1c>
    9c04:	6823      	ldr	r3, [r4, #0]
    9c06:	2b00      	cmp	r3, #0
    9c08:	d000      	beq.n	9c0c <_sbrk_r+0x1c>
    9c0a:	602b      	str	r3, [r5, #0]
    9c0c:	bd70      	pop	{r4, r5, r6, pc}
    9c0e:	46c0      	nop			; (mov r8, r8)
    9c10:	20004ed4 	.word	0x20004ed4

00009c14 <sniprintf>:
    9c14:	b40c      	push	{r2, r3}
    9c16:	b530      	push	{r4, r5, lr}
    9c18:	4b16      	ldr	r3, [pc, #88]	; (9c74 <sniprintf+0x60>)
    9c1a:	b09d      	sub	sp, #116	; 0x74
    9c1c:	1e0c      	subs	r4, r1, #0
    9c1e:	681d      	ldr	r5, [r3, #0]
    9c20:	da08      	bge.n	9c34 <sniprintf+0x20>
    9c22:	238b      	movs	r3, #139	; 0x8b
    9c24:	2001      	movs	r0, #1
    9c26:	602b      	str	r3, [r5, #0]
    9c28:	4240      	negs	r0, r0
    9c2a:	b01d      	add	sp, #116	; 0x74
    9c2c:	bc30      	pop	{r4, r5}
    9c2e:	bc08      	pop	{r3}
    9c30:	b002      	add	sp, #8
    9c32:	4718      	bx	r3
    9c34:	2382      	movs	r3, #130	; 0x82
    9c36:	a902      	add	r1, sp, #8
    9c38:	009b      	lsls	r3, r3, #2
    9c3a:	818b      	strh	r3, [r1, #12]
    9c3c:	2300      	movs	r3, #0
    9c3e:	9002      	str	r0, [sp, #8]
    9c40:	6108      	str	r0, [r1, #16]
    9c42:	429c      	cmp	r4, r3
    9c44:	d000      	beq.n	9c48 <sniprintf+0x34>
    9c46:	1e63      	subs	r3, r4, #1
    9c48:	608b      	str	r3, [r1, #8]
    9c4a:	614b      	str	r3, [r1, #20]
    9c4c:	2301      	movs	r3, #1
    9c4e:	425b      	negs	r3, r3
    9c50:	81cb      	strh	r3, [r1, #14]
    9c52:	9a20      	ldr	r2, [sp, #128]	; 0x80
    9c54:	ab21      	add	r3, sp, #132	; 0x84
    9c56:	0028      	movs	r0, r5
    9c58:	9301      	str	r3, [sp, #4]
    9c5a:	f000 f9d5 	bl	a008 <_svfiprintf_r>
    9c5e:	1c43      	adds	r3, r0, #1
    9c60:	da01      	bge.n	9c66 <sniprintf+0x52>
    9c62:	238b      	movs	r3, #139	; 0x8b
    9c64:	602b      	str	r3, [r5, #0]
    9c66:	2c00      	cmp	r4, #0
    9c68:	d0df      	beq.n	9c2a <sniprintf+0x16>
    9c6a:	2300      	movs	r3, #0
    9c6c:	9a02      	ldr	r2, [sp, #8]
    9c6e:	7013      	strb	r3, [r2, #0]
    9c70:	e7db      	b.n	9c2a <sniprintf+0x16>
    9c72:	46c0      	nop			; (mov r8, r8)
    9c74:	20000034 	.word	0x20000034

00009c78 <siprintf>:
    9c78:	b40e      	push	{r1, r2, r3}
    9c7a:	b510      	push	{r4, lr}
    9c7c:	b09d      	sub	sp, #116	; 0x74
    9c7e:	a902      	add	r1, sp, #8
    9c80:	9002      	str	r0, [sp, #8]
    9c82:	6108      	str	r0, [r1, #16]
    9c84:	480b      	ldr	r0, [pc, #44]	; (9cb4 <siprintf+0x3c>)
    9c86:	2482      	movs	r4, #130	; 0x82
    9c88:	6088      	str	r0, [r1, #8]
    9c8a:	6148      	str	r0, [r1, #20]
    9c8c:	2001      	movs	r0, #1
    9c8e:	4240      	negs	r0, r0
    9c90:	ab1f      	add	r3, sp, #124	; 0x7c
    9c92:	81c8      	strh	r0, [r1, #14]
    9c94:	4808      	ldr	r0, [pc, #32]	; (9cb8 <siprintf+0x40>)
    9c96:	cb04      	ldmia	r3!, {r2}
    9c98:	00a4      	lsls	r4, r4, #2
    9c9a:	6800      	ldr	r0, [r0, #0]
    9c9c:	9301      	str	r3, [sp, #4]
    9c9e:	818c      	strh	r4, [r1, #12]
    9ca0:	f000 f9b2 	bl	a008 <_svfiprintf_r>
    9ca4:	2300      	movs	r3, #0
    9ca6:	9a02      	ldr	r2, [sp, #8]
    9ca8:	7013      	strb	r3, [r2, #0]
    9caa:	b01d      	add	sp, #116	; 0x74
    9cac:	bc10      	pop	{r4}
    9cae:	bc08      	pop	{r3}
    9cb0:	b003      	add	sp, #12
    9cb2:	4718      	bx	r3
    9cb4:	7fffffff 	.word	0x7fffffff
    9cb8:	20000034 	.word	0x20000034

00009cbc <strcasecmp>:
    9cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9cbe:	0007      	movs	r7, r0
    9cc0:	000e      	movs	r6, r1
    9cc2:	783c      	ldrb	r4, [r7, #0]
    9cc4:	f000 f91c 	bl	9f00 <__locale_ctype_ptr>
    9cc8:	2203      	movs	r2, #3
    9cca:	1900      	adds	r0, r0, r4
    9ccc:	7843      	ldrb	r3, [r0, #1]
    9cce:	4013      	ands	r3, r2
    9cd0:	2b01      	cmp	r3, #1
    9cd2:	d100      	bne.n	9cd6 <strcasecmp+0x1a>
    9cd4:	3420      	adds	r4, #32
    9cd6:	7835      	ldrb	r5, [r6, #0]
    9cd8:	f000 f912 	bl	9f00 <__locale_ctype_ptr>
    9cdc:	2203      	movs	r2, #3
    9cde:	1940      	adds	r0, r0, r5
    9ce0:	7843      	ldrb	r3, [r0, #1]
    9ce2:	4013      	ands	r3, r2
    9ce4:	2b01      	cmp	r3, #1
    9ce6:	d100      	bne.n	9cea <strcasecmp+0x2e>
    9ce8:	3520      	adds	r5, #32
    9cea:	1b60      	subs	r0, r4, r5
    9cec:	d103      	bne.n	9cf6 <strcasecmp+0x3a>
    9cee:	3701      	adds	r7, #1
    9cf0:	3601      	adds	r6, #1
    9cf2:	2d00      	cmp	r5, #0
    9cf4:	d1e5      	bne.n	9cc2 <strcasecmp+0x6>
    9cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009cf8 <strlen>:
    9cf8:	2300      	movs	r3, #0
    9cfa:	5cc2      	ldrb	r2, [r0, r3]
    9cfc:	3301      	adds	r3, #1
    9cfe:	2a00      	cmp	r2, #0
    9d00:	d1fb      	bne.n	9cfa <strlen+0x2>
    9d02:	1e58      	subs	r0, r3, #1
    9d04:	4770      	bx	lr

00009d06 <strncmp>:
    9d06:	2300      	movs	r3, #0
    9d08:	b530      	push	{r4, r5, lr}
    9d0a:	429a      	cmp	r2, r3
    9d0c:	d00a      	beq.n	9d24 <strncmp+0x1e>
    9d0e:	3a01      	subs	r2, #1
    9d10:	5cc4      	ldrb	r4, [r0, r3]
    9d12:	5ccd      	ldrb	r5, [r1, r3]
    9d14:	42ac      	cmp	r4, r5
    9d16:	d104      	bne.n	9d22 <strncmp+0x1c>
    9d18:	429a      	cmp	r2, r3
    9d1a:	d002      	beq.n	9d22 <strncmp+0x1c>
    9d1c:	3301      	adds	r3, #1
    9d1e:	2c00      	cmp	r4, #0
    9d20:	d1f6      	bne.n	9d10 <strncmp+0xa>
    9d22:	1b63      	subs	r3, r4, r5
    9d24:	0018      	movs	r0, r3
    9d26:	bd30      	pop	{r4, r5, pc}

00009d28 <strncpy>:
    9d28:	b570      	push	{r4, r5, r6, lr}
    9d2a:	0004      	movs	r4, r0
    9d2c:	2a00      	cmp	r2, #0
    9d2e:	d100      	bne.n	9d32 <strncpy+0xa>
    9d30:	bd70      	pop	{r4, r5, r6, pc}
    9d32:	780d      	ldrb	r5, [r1, #0]
    9d34:	1e56      	subs	r6, r2, #1
    9d36:	1c63      	adds	r3, r4, #1
    9d38:	7025      	strb	r5, [r4, #0]
    9d3a:	3101      	adds	r1, #1
    9d3c:	2d00      	cmp	r5, #0
    9d3e:	d105      	bne.n	9d4c <strncpy+0x24>
    9d40:	18a4      	adds	r4, r4, r2
    9d42:	429c      	cmp	r4, r3
    9d44:	d0f4      	beq.n	9d30 <strncpy+0x8>
    9d46:	701d      	strb	r5, [r3, #0]
    9d48:	3301      	adds	r3, #1
    9d4a:	e7fa      	b.n	9d42 <strncpy+0x1a>
    9d4c:	001c      	movs	r4, r3
    9d4e:	0032      	movs	r2, r6
    9d50:	e7ec      	b.n	9d2c <strncpy+0x4>
	...

00009d54 <_strtol_l.isra.0>:
    9d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d56:	001f      	movs	r7, r3
    9d58:	000e      	movs	r6, r1
    9d5a:	b087      	sub	sp, #28
    9d5c:	9005      	str	r0, [sp, #20]
    9d5e:	9103      	str	r1, [sp, #12]
    9d60:	9202      	str	r2, [sp, #8]
    9d62:	980c      	ldr	r0, [sp, #48]	; 0x30
    9d64:	7834      	ldrb	r4, [r6, #0]
    9d66:	f000 f8c7 	bl	9ef8 <__locale_ctype_ptr_l>
    9d6a:	2208      	movs	r2, #8
    9d6c:	1900      	adds	r0, r0, r4
    9d6e:	7843      	ldrb	r3, [r0, #1]
    9d70:	1c75      	adds	r5, r6, #1
    9d72:	4013      	ands	r3, r2
    9d74:	d10c      	bne.n	9d90 <_strtol_l.isra.0+0x3c>
    9d76:	2c2d      	cmp	r4, #45	; 0x2d
    9d78:	d10c      	bne.n	9d94 <_strtol_l.isra.0+0x40>
    9d7a:	3301      	adds	r3, #1
    9d7c:	782c      	ldrb	r4, [r5, #0]
    9d7e:	9301      	str	r3, [sp, #4]
    9d80:	1cb5      	adds	r5, r6, #2
    9d82:	2f00      	cmp	r7, #0
    9d84:	d00c      	beq.n	9da0 <_strtol_l.isra.0+0x4c>
    9d86:	2f10      	cmp	r7, #16
    9d88:	d114      	bne.n	9db4 <_strtol_l.isra.0+0x60>
    9d8a:	2c30      	cmp	r4, #48	; 0x30
    9d8c:	d00a      	beq.n	9da4 <_strtol_l.isra.0+0x50>
    9d8e:	e011      	b.n	9db4 <_strtol_l.isra.0+0x60>
    9d90:	002e      	movs	r6, r5
    9d92:	e7e6      	b.n	9d62 <_strtol_l.isra.0+0xe>
    9d94:	9301      	str	r3, [sp, #4]
    9d96:	2c2b      	cmp	r4, #43	; 0x2b
    9d98:	d1f3      	bne.n	9d82 <_strtol_l.isra.0+0x2e>
    9d9a:	782c      	ldrb	r4, [r5, #0]
    9d9c:	1cb5      	adds	r5, r6, #2
    9d9e:	e7f0      	b.n	9d82 <_strtol_l.isra.0+0x2e>
    9da0:	2c30      	cmp	r4, #48	; 0x30
    9da2:	d12f      	bne.n	9e04 <_strtol_l.isra.0+0xb0>
    9da4:	2220      	movs	r2, #32
    9da6:	782b      	ldrb	r3, [r5, #0]
    9da8:	4393      	bics	r3, r2
    9daa:	2b58      	cmp	r3, #88	; 0x58
    9dac:	d151      	bne.n	9e52 <_strtol_l.isra.0+0xfe>
    9dae:	2710      	movs	r7, #16
    9db0:	786c      	ldrb	r4, [r5, #1]
    9db2:	3502      	adds	r5, #2
    9db4:	9b01      	ldr	r3, [sp, #4]
    9db6:	4a29      	ldr	r2, [pc, #164]	; (9e5c <_strtol_l.isra.0+0x108>)
    9db8:	0039      	movs	r1, r7
    9dba:	189e      	adds	r6, r3, r2
    9dbc:	0030      	movs	r0, r6
    9dbe:	f7fd fbe1 	bl	7584 <__aeabi_uidivmod>
    9dc2:	0030      	movs	r0, r6
    9dc4:	9104      	str	r1, [sp, #16]
    9dc6:	0039      	movs	r1, r7
    9dc8:	f7fd fb56 	bl	7478 <__udivsi3>
    9dcc:	2101      	movs	r1, #1
    9dce:	2300      	movs	r3, #0
    9dd0:	4249      	negs	r1, r1
    9dd2:	0002      	movs	r2, r0
    9dd4:	468c      	mov	ip, r1
    9dd6:	0018      	movs	r0, r3
    9dd8:	0021      	movs	r1, r4
    9dda:	3930      	subs	r1, #48	; 0x30
    9ddc:	2909      	cmp	r1, #9
    9dde:	d813      	bhi.n	9e08 <_strtol_l.isra.0+0xb4>
    9de0:	000c      	movs	r4, r1
    9de2:	42a7      	cmp	r7, r4
    9de4:	dd1c      	ble.n	9e20 <_strtol_l.isra.0+0xcc>
    9de6:	1c59      	adds	r1, r3, #1
    9de8:	d009      	beq.n	9dfe <_strtol_l.isra.0+0xaa>
    9dea:	4663      	mov	r3, ip
    9dec:	4282      	cmp	r2, r0
    9dee:	d306      	bcc.n	9dfe <_strtol_l.isra.0+0xaa>
    9df0:	d102      	bne.n	9df8 <_strtol_l.isra.0+0xa4>
    9df2:	9904      	ldr	r1, [sp, #16]
    9df4:	42a1      	cmp	r1, r4
    9df6:	db02      	blt.n	9dfe <_strtol_l.isra.0+0xaa>
    9df8:	2301      	movs	r3, #1
    9dfa:	4378      	muls	r0, r7
    9dfc:	1820      	adds	r0, r4, r0
    9dfe:	782c      	ldrb	r4, [r5, #0]
    9e00:	3501      	adds	r5, #1
    9e02:	e7e9      	b.n	9dd8 <_strtol_l.isra.0+0x84>
    9e04:	270a      	movs	r7, #10
    9e06:	e7d5      	b.n	9db4 <_strtol_l.isra.0+0x60>
    9e08:	0021      	movs	r1, r4
    9e0a:	3941      	subs	r1, #65	; 0x41
    9e0c:	2919      	cmp	r1, #25
    9e0e:	d801      	bhi.n	9e14 <_strtol_l.isra.0+0xc0>
    9e10:	3c37      	subs	r4, #55	; 0x37
    9e12:	e7e6      	b.n	9de2 <_strtol_l.isra.0+0x8e>
    9e14:	0021      	movs	r1, r4
    9e16:	3961      	subs	r1, #97	; 0x61
    9e18:	2919      	cmp	r1, #25
    9e1a:	d801      	bhi.n	9e20 <_strtol_l.isra.0+0xcc>
    9e1c:	3c57      	subs	r4, #87	; 0x57
    9e1e:	e7e0      	b.n	9de2 <_strtol_l.isra.0+0x8e>
    9e20:	1c5a      	adds	r2, r3, #1
    9e22:	d108      	bne.n	9e36 <_strtol_l.isra.0+0xe2>
    9e24:	9a05      	ldr	r2, [sp, #20]
    9e26:	3323      	adds	r3, #35	; 0x23
    9e28:	6013      	str	r3, [r2, #0]
    9e2a:	9b02      	ldr	r3, [sp, #8]
    9e2c:	0030      	movs	r0, r6
    9e2e:	2b00      	cmp	r3, #0
    9e30:	d10b      	bne.n	9e4a <_strtol_l.isra.0+0xf6>
    9e32:	b007      	add	sp, #28
    9e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e36:	9a01      	ldr	r2, [sp, #4]
    9e38:	2a00      	cmp	r2, #0
    9e3a:	d000      	beq.n	9e3e <_strtol_l.isra.0+0xea>
    9e3c:	4240      	negs	r0, r0
    9e3e:	9a02      	ldr	r2, [sp, #8]
    9e40:	2a00      	cmp	r2, #0
    9e42:	d0f6      	beq.n	9e32 <_strtol_l.isra.0+0xde>
    9e44:	9a03      	ldr	r2, [sp, #12]
    9e46:	2b00      	cmp	r3, #0
    9e48:	d000      	beq.n	9e4c <_strtol_l.isra.0+0xf8>
    9e4a:	1e6a      	subs	r2, r5, #1
    9e4c:	9b02      	ldr	r3, [sp, #8]
    9e4e:	601a      	str	r2, [r3, #0]
    9e50:	e7ef      	b.n	9e32 <_strtol_l.isra.0+0xde>
    9e52:	2430      	movs	r4, #48	; 0x30
    9e54:	2f00      	cmp	r7, #0
    9e56:	d1ad      	bne.n	9db4 <_strtol_l.isra.0+0x60>
    9e58:	3708      	adds	r7, #8
    9e5a:	e7ab      	b.n	9db4 <_strtol_l.isra.0+0x60>
    9e5c:	7fffffff 	.word	0x7fffffff

00009e60 <strtol>:
    9e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9e62:	0013      	movs	r3, r2
    9e64:	4a06      	ldr	r2, [pc, #24]	; (9e80 <strtol+0x20>)
    9e66:	0005      	movs	r5, r0
    9e68:	6810      	ldr	r0, [r2, #0]
    9e6a:	6a04      	ldr	r4, [r0, #32]
    9e6c:	2c00      	cmp	r4, #0
    9e6e:	d100      	bne.n	9e72 <strtol+0x12>
    9e70:	4c04      	ldr	r4, [pc, #16]	; (9e84 <strtol+0x24>)
    9e72:	000a      	movs	r2, r1
    9e74:	9400      	str	r4, [sp, #0]
    9e76:	0029      	movs	r1, r5
    9e78:	f7ff ff6c 	bl	9d54 <_strtol_l.isra.0>
    9e7c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9e7e:	46c0      	nop			; (mov r8, r8)
    9e80:	20000034 	.word	0x20000034
    9e84:	20000098 	.word	0x20000098

00009e88 <_vsniprintf_r>:
    9e88:	b530      	push	{r4, r5, lr}
    9e8a:	0014      	movs	r4, r2
    9e8c:	b09b      	sub	sp, #108	; 0x6c
    9e8e:	0005      	movs	r5, r0
    9e90:	001a      	movs	r2, r3
    9e92:	2c00      	cmp	r4, #0
    9e94:	da05      	bge.n	9ea2 <_vsniprintf_r+0x1a>
    9e96:	238b      	movs	r3, #139	; 0x8b
    9e98:	6003      	str	r3, [r0, #0]
    9e9a:	2001      	movs	r0, #1
    9e9c:	4240      	negs	r0, r0
    9e9e:	b01b      	add	sp, #108	; 0x6c
    9ea0:	bd30      	pop	{r4, r5, pc}
    9ea2:	2382      	movs	r3, #130	; 0x82
    9ea4:	4668      	mov	r0, sp
    9ea6:	009b      	lsls	r3, r3, #2
    9ea8:	8183      	strh	r3, [r0, #12]
    9eaa:	2300      	movs	r3, #0
    9eac:	9100      	str	r1, [sp, #0]
    9eae:	9104      	str	r1, [sp, #16]
    9eb0:	429c      	cmp	r4, r3
    9eb2:	d000      	beq.n	9eb6 <_vsniprintf_r+0x2e>
    9eb4:	1e63      	subs	r3, r4, #1
    9eb6:	9302      	str	r3, [sp, #8]
    9eb8:	9305      	str	r3, [sp, #20]
    9eba:	2301      	movs	r3, #1
    9ebc:	4669      	mov	r1, sp
    9ebe:	425b      	negs	r3, r3
    9ec0:	81cb      	strh	r3, [r1, #14]
    9ec2:	0028      	movs	r0, r5
    9ec4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9ec6:	f000 f89f 	bl	a008 <_svfiprintf_r>
    9eca:	1c43      	adds	r3, r0, #1
    9ecc:	da01      	bge.n	9ed2 <_vsniprintf_r+0x4a>
    9ece:	238b      	movs	r3, #139	; 0x8b
    9ed0:	602b      	str	r3, [r5, #0]
    9ed2:	2c00      	cmp	r4, #0
    9ed4:	d0e3      	beq.n	9e9e <_vsniprintf_r+0x16>
    9ed6:	2300      	movs	r3, #0
    9ed8:	9a00      	ldr	r2, [sp, #0]
    9eda:	7013      	strb	r3, [r2, #0]
    9edc:	e7df      	b.n	9e9e <_vsniprintf_r+0x16>
	...

00009ee0 <vsniprintf>:
    9ee0:	b507      	push	{r0, r1, r2, lr}
    9ee2:	9300      	str	r3, [sp, #0]
    9ee4:	0013      	movs	r3, r2
    9ee6:	000a      	movs	r2, r1
    9ee8:	0001      	movs	r1, r0
    9eea:	4802      	ldr	r0, [pc, #8]	; (9ef4 <vsniprintf+0x14>)
    9eec:	6800      	ldr	r0, [r0, #0]
    9eee:	f7ff ffcb 	bl	9e88 <_vsniprintf_r>
    9ef2:	bd0e      	pop	{r1, r2, r3, pc}
    9ef4:	20000034 	.word	0x20000034

00009ef8 <__locale_ctype_ptr_l>:
    9ef8:	30ec      	adds	r0, #236	; 0xec
    9efa:	6800      	ldr	r0, [r0, #0]
    9efc:	4770      	bx	lr
	...

00009f00 <__locale_ctype_ptr>:
    9f00:	4b04      	ldr	r3, [pc, #16]	; (9f14 <__locale_ctype_ptr+0x14>)
    9f02:	681b      	ldr	r3, [r3, #0]
    9f04:	6a1b      	ldr	r3, [r3, #32]
    9f06:	2b00      	cmp	r3, #0
    9f08:	d100      	bne.n	9f0c <__locale_ctype_ptr+0xc>
    9f0a:	4b03      	ldr	r3, [pc, #12]	; (9f18 <__locale_ctype_ptr+0x18>)
    9f0c:	33ec      	adds	r3, #236	; 0xec
    9f0e:	6818      	ldr	r0, [r3, #0]
    9f10:	4770      	bx	lr
    9f12:	46c0      	nop			; (mov r8, r8)
    9f14:	20000034 	.word	0x20000034
    9f18:	20000098 	.word	0x20000098

00009f1c <__ascii_mbtowc>:
    9f1c:	b082      	sub	sp, #8
    9f1e:	2900      	cmp	r1, #0
    9f20:	d100      	bne.n	9f24 <__ascii_mbtowc+0x8>
    9f22:	a901      	add	r1, sp, #4
    9f24:	1e10      	subs	r0, r2, #0
    9f26:	d006      	beq.n	9f36 <__ascii_mbtowc+0x1a>
    9f28:	2b00      	cmp	r3, #0
    9f2a:	d006      	beq.n	9f3a <__ascii_mbtowc+0x1e>
    9f2c:	7813      	ldrb	r3, [r2, #0]
    9f2e:	600b      	str	r3, [r1, #0]
    9f30:	7810      	ldrb	r0, [r2, #0]
    9f32:	1e43      	subs	r3, r0, #1
    9f34:	4198      	sbcs	r0, r3
    9f36:	b002      	add	sp, #8
    9f38:	4770      	bx	lr
    9f3a:	2002      	movs	r0, #2
    9f3c:	4240      	negs	r0, r0
    9f3e:	e7fa      	b.n	9f36 <__ascii_mbtowc+0x1a>

00009f40 <__malloc_lock>:
    9f40:	4770      	bx	lr

00009f42 <__malloc_unlock>:
    9f42:	4770      	bx	lr

00009f44 <__ssputs_r>:
    9f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f46:	688e      	ldr	r6, [r1, #8]
    9f48:	b085      	sub	sp, #20
    9f4a:	0007      	movs	r7, r0
    9f4c:	000c      	movs	r4, r1
    9f4e:	9203      	str	r2, [sp, #12]
    9f50:	9301      	str	r3, [sp, #4]
    9f52:	429e      	cmp	r6, r3
    9f54:	d839      	bhi.n	9fca <__ssputs_r+0x86>
    9f56:	2390      	movs	r3, #144	; 0x90
    9f58:	898a      	ldrh	r2, [r1, #12]
    9f5a:	00db      	lsls	r3, r3, #3
    9f5c:	421a      	tst	r2, r3
    9f5e:	d034      	beq.n	9fca <__ssputs_r+0x86>
    9f60:	2503      	movs	r5, #3
    9f62:	6909      	ldr	r1, [r1, #16]
    9f64:	6823      	ldr	r3, [r4, #0]
    9f66:	1a5b      	subs	r3, r3, r1
    9f68:	9302      	str	r3, [sp, #8]
    9f6a:	6963      	ldr	r3, [r4, #20]
    9f6c:	9802      	ldr	r0, [sp, #8]
    9f6e:	435d      	muls	r5, r3
    9f70:	0feb      	lsrs	r3, r5, #31
    9f72:	195d      	adds	r5, r3, r5
    9f74:	9b01      	ldr	r3, [sp, #4]
    9f76:	106d      	asrs	r5, r5, #1
    9f78:	3301      	adds	r3, #1
    9f7a:	181b      	adds	r3, r3, r0
    9f7c:	42ab      	cmp	r3, r5
    9f7e:	d900      	bls.n	9f82 <__ssputs_r+0x3e>
    9f80:	001d      	movs	r5, r3
    9f82:	0553      	lsls	r3, r2, #21
    9f84:	d532      	bpl.n	9fec <__ssputs_r+0xa8>
    9f86:	0029      	movs	r1, r5
    9f88:	0038      	movs	r0, r7
    9f8a:	f7ff fdd3 	bl	9b34 <_malloc_r>
    9f8e:	1e06      	subs	r6, r0, #0
    9f90:	d109      	bne.n	9fa6 <__ssputs_r+0x62>
    9f92:	230c      	movs	r3, #12
    9f94:	603b      	str	r3, [r7, #0]
    9f96:	2340      	movs	r3, #64	; 0x40
    9f98:	2001      	movs	r0, #1
    9f9a:	89a2      	ldrh	r2, [r4, #12]
    9f9c:	4240      	negs	r0, r0
    9f9e:	4313      	orrs	r3, r2
    9fa0:	81a3      	strh	r3, [r4, #12]
    9fa2:	b005      	add	sp, #20
    9fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9fa6:	9a02      	ldr	r2, [sp, #8]
    9fa8:	6921      	ldr	r1, [r4, #16]
    9faa:	f7ff fd67 	bl	9a7c <memcpy>
    9fae:	89a3      	ldrh	r3, [r4, #12]
    9fb0:	4a14      	ldr	r2, [pc, #80]	; (a004 <__ssputs_r+0xc0>)
    9fb2:	401a      	ands	r2, r3
    9fb4:	2380      	movs	r3, #128	; 0x80
    9fb6:	4313      	orrs	r3, r2
    9fb8:	81a3      	strh	r3, [r4, #12]
    9fba:	9b02      	ldr	r3, [sp, #8]
    9fbc:	6126      	str	r6, [r4, #16]
    9fbe:	18f6      	adds	r6, r6, r3
    9fc0:	6026      	str	r6, [r4, #0]
    9fc2:	6165      	str	r5, [r4, #20]
    9fc4:	9e01      	ldr	r6, [sp, #4]
    9fc6:	1aed      	subs	r5, r5, r3
    9fc8:	60a5      	str	r5, [r4, #8]
    9fca:	9b01      	ldr	r3, [sp, #4]
    9fcc:	42b3      	cmp	r3, r6
    9fce:	d200      	bcs.n	9fd2 <__ssputs_r+0x8e>
    9fd0:	001e      	movs	r6, r3
    9fd2:	0032      	movs	r2, r6
    9fd4:	9903      	ldr	r1, [sp, #12]
    9fd6:	6820      	ldr	r0, [r4, #0]
    9fd8:	f000 fab9 	bl	a54e <memmove>
    9fdc:	68a3      	ldr	r3, [r4, #8]
    9fde:	2000      	movs	r0, #0
    9fe0:	1b9b      	subs	r3, r3, r6
    9fe2:	60a3      	str	r3, [r4, #8]
    9fe4:	6823      	ldr	r3, [r4, #0]
    9fe6:	199e      	adds	r6, r3, r6
    9fe8:	6026      	str	r6, [r4, #0]
    9fea:	e7da      	b.n	9fa2 <__ssputs_r+0x5e>
    9fec:	002a      	movs	r2, r5
    9fee:	0038      	movs	r0, r7
    9ff0:	f000 fabf 	bl	a572 <_realloc_r>
    9ff4:	1e06      	subs	r6, r0, #0
    9ff6:	d1e0      	bne.n	9fba <__ssputs_r+0x76>
    9ff8:	6921      	ldr	r1, [r4, #16]
    9ffa:	0038      	movs	r0, r7
    9ffc:	f7ff fd50 	bl	9aa0 <_free_r>
    a000:	e7c7      	b.n	9f92 <__ssputs_r+0x4e>
    a002:	46c0      	nop			; (mov r8, r8)
    a004:	fffffb7f 	.word	0xfffffb7f

0000a008 <_svfiprintf_r>:
    a008:	b5f0      	push	{r4, r5, r6, r7, lr}
    a00a:	b09f      	sub	sp, #124	; 0x7c
    a00c:	9002      	str	r0, [sp, #8]
    a00e:	9305      	str	r3, [sp, #20]
    a010:	898b      	ldrh	r3, [r1, #12]
    a012:	000f      	movs	r7, r1
    a014:	0016      	movs	r6, r2
    a016:	061b      	lsls	r3, r3, #24
    a018:	d511      	bpl.n	a03e <_svfiprintf_r+0x36>
    a01a:	690b      	ldr	r3, [r1, #16]
    a01c:	2b00      	cmp	r3, #0
    a01e:	d10e      	bne.n	a03e <_svfiprintf_r+0x36>
    a020:	2140      	movs	r1, #64	; 0x40
    a022:	f7ff fd87 	bl	9b34 <_malloc_r>
    a026:	6038      	str	r0, [r7, #0]
    a028:	6138      	str	r0, [r7, #16]
    a02a:	2800      	cmp	r0, #0
    a02c:	d105      	bne.n	a03a <_svfiprintf_r+0x32>
    a02e:	230c      	movs	r3, #12
    a030:	9a02      	ldr	r2, [sp, #8]
    a032:	3801      	subs	r0, #1
    a034:	6013      	str	r3, [r2, #0]
    a036:	b01f      	add	sp, #124	; 0x7c
    a038:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a03a:	2340      	movs	r3, #64	; 0x40
    a03c:	617b      	str	r3, [r7, #20]
    a03e:	2300      	movs	r3, #0
    a040:	ad06      	add	r5, sp, #24
    a042:	616b      	str	r3, [r5, #20]
    a044:	3320      	adds	r3, #32
    a046:	766b      	strb	r3, [r5, #25]
    a048:	3310      	adds	r3, #16
    a04a:	76ab      	strb	r3, [r5, #26]
    a04c:	0034      	movs	r4, r6
    a04e:	7823      	ldrb	r3, [r4, #0]
    a050:	2b00      	cmp	r3, #0
    a052:	d147      	bne.n	a0e4 <_svfiprintf_r+0xdc>
    a054:	1ba3      	subs	r3, r4, r6
    a056:	9304      	str	r3, [sp, #16]
    a058:	d00d      	beq.n	a076 <_svfiprintf_r+0x6e>
    a05a:	1ba3      	subs	r3, r4, r6
    a05c:	0032      	movs	r2, r6
    a05e:	0039      	movs	r1, r7
    a060:	9802      	ldr	r0, [sp, #8]
    a062:	f7ff ff6f 	bl	9f44 <__ssputs_r>
    a066:	1c43      	adds	r3, r0, #1
    a068:	d100      	bne.n	a06c <_svfiprintf_r+0x64>
    a06a:	e0b5      	b.n	a1d8 <_svfiprintf_r+0x1d0>
    a06c:	696a      	ldr	r2, [r5, #20]
    a06e:	9b04      	ldr	r3, [sp, #16]
    a070:	4694      	mov	ip, r2
    a072:	4463      	add	r3, ip
    a074:	616b      	str	r3, [r5, #20]
    a076:	7823      	ldrb	r3, [r4, #0]
    a078:	2b00      	cmp	r3, #0
    a07a:	d100      	bne.n	a07e <_svfiprintf_r+0x76>
    a07c:	e0ac      	b.n	a1d8 <_svfiprintf_r+0x1d0>
    a07e:	2201      	movs	r2, #1
    a080:	2300      	movs	r3, #0
    a082:	4252      	negs	r2, r2
    a084:	606a      	str	r2, [r5, #4]
    a086:	a902      	add	r1, sp, #8
    a088:	3254      	adds	r2, #84	; 0x54
    a08a:	1852      	adds	r2, r2, r1
    a08c:	3401      	adds	r4, #1
    a08e:	602b      	str	r3, [r5, #0]
    a090:	60eb      	str	r3, [r5, #12]
    a092:	60ab      	str	r3, [r5, #8]
    a094:	7013      	strb	r3, [r2, #0]
    a096:	65ab      	str	r3, [r5, #88]	; 0x58
    a098:	4e58      	ldr	r6, [pc, #352]	; (a1fc <_svfiprintf_r+0x1f4>)
    a09a:	2205      	movs	r2, #5
    a09c:	7821      	ldrb	r1, [r4, #0]
    a09e:	0030      	movs	r0, r6
    a0a0:	f000 fa4a 	bl	a538 <memchr>
    a0a4:	1c62      	adds	r2, r4, #1
    a0a6:	2800      	cmp	r0, #0
    a0a8:	d120      	bne.n	a0ec <_svfiprintf_r+0xe4>
    a0aa:	6829      	ldr	r1, [r5, #0]
    a0ac:	06cb      	lsls	r3, r1, #27
    a0ae:	d504      	bpl.n	a0ba <_svfiprintf_r+0xb2>
    a0b0:	2353      	movs	r3, #83	; 0x53
    a0b2:	ae02      	add	r6, sp, #8
    a0b4:	3020      	adds	r0, #32
    a0b6:	199b      	adds	r3, r3, r6
    a0b8:	7018      	strb	r0, [r3, #0]
    a0ba:	070b      	lsls	r3, r1, #28
    a0bc:	d504      	bpl.n	a0c8 <_svfiprintf_r+0xc0>
    a0be:	2353      	movs	r3, #83	; 0x53
    a0c0:	202b      	movs	r0, #43	; 0x2b
    a0c2:	ae02      	add	r6, sp, #8
    a0c4:	199b      	adds	r3, r3, r6
    a0c6:	7018      	strb	r0, [r3, #0]
    a0c8:	7823      	ldrb	r3, [r4, #0]
    a0ca:	2b2a      	cmp	r3, #42	; 0x2a
    a0cc:	d016      	beq.n	a0fc <_svfiprintf_r+0xf4>
    a0ce:	2000      	movs	r0, #0
    a0d0:	210a      	movs	r1, #10
    a0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a0d4:	7822      	ldrb	r2, [r4, #0]
    a0d6:	3a30      	subs	r2, #48	; 0x30
    a0d8:	2a09      	cmp	r2, #9
    a0da:	d955      	bls.n	a188 <_svfiprintf_r+0x180>
    a0dc:	2800      	cmp	r0, #0
    a0de:	d015      	beq.n	a10c <_svfiprintf_r+0x104>
    a0e0:	9309      	str	r3, [sp, #36]	; 0x24
    a0e2:	e013      	b.n	a10c <_svfiprintf_r+0x104>
    a0e4:	2b25      	cmp	r3, #37	; 0x25
    a0e6:	d0b5      	beq.n	a054 <_svfiprintf_r+0x4c>
    a0e8:	3401      	adds	r4, #1
    a0ea:	e7b0      	b.n	a04e <_svfiprintf_r+0x46>
    a0ec:	2301      	movs	r3, #1
    a0ee:	1b80      	subs	r0, r0, r6
    a0f0:	4083      	lsls	r3, r0
    a0f2:	6829      	ldr	r1, [r5, #0]
    a0f4:	0014      	movs	r4, r2
    a0f6:	430b      	orrs	r3, r1
    a0f8:	602b      	str	r3, [r5, #0]
    a0fa:	e7cd      	b.n	a098 <_svfiprintf_r+0x90>
    a0fc:	9b05      	ldr	r3, [sp, #20]
    a0fe:	1d18      	adds	r0, r3, #4
    a100:	681b      	ldr	r3, [r3, #0]
    a102:	9005      	str	r0, [sp, #20]
    a104:	2b00      	cmp	r3, #0
    a106:	db39      	blt.n	a17c <_svfiprintf_r+0x174>
    a108:	9309      	str	r3, [sp, #36]	; 0x24
    a10a:	0014      	movs	r4, r2
    a10c:	7823      	ldrb	r3, [r4, #0]
    a10e:	2b2e      	cmp	r3, #46	; 0x2e
    a110:	d10b      	bne.n	a12a <_svfiprintf_r+0x122>
    a112:	7863      	ldrb	r3, [r4, #1]
    a114:	1c62      	adds	r2, r4, #1
    a116:	2b2a      	cmp	r3, #42	; 0x2a
    a118:	d13e      	bne.n	a198 <_svfiprintf_r+0x190>
    a11a:	9b05      	ldr	r3, [sp, #20]
    a11c:	3402      	adds	r4, #2
    a11e:	1d1a      	adds	r2, r3, #4
    a120:	681b      	ldr	r3, [r3, #0]
    a122:	9205      	str	r2, [sp, #20]
    a124:	2b00      	cmp	r3, #0
    a126:	db34      	blt.n	a192 <_svfiprintf_r+0x18a>
    a128:	9307      	str	r3, [sp, #28]
    a12a:	4e35      	ldr	r6, [pc, #212]	; (a200 <_svfiprintf_r+0x1f8>)
    a12c:	7821      	ldrb	r1, [r4, #0]
    a12e:	2203      	movs	r2, #3
    a130:	0030      	movs	r0, r6
    a132:	f000 fa01 	bl	a538 <memchr>
    a136:	2800      	cmp	r0, #0
    a138:	d006      	beq.n	a148 <_svfiprintf_r+0x140>
    a13a:	2340      	movs	r3, #64	; 0x40
    a13c:	1b80      	subs	r0, r0, r6
    a13e:	4083      	lsls	r3, r0
    a140:	682a      	ldr	r2, [r5, #0]
    a142:	3401      	adds	r4, #1
    a144:	4313      	orrs	r3, r2
    a146:	602b      	str	r3, [r5, #0]
    a148:	7821      	ldrb	r1, [r4, #0]
    a14a:	2206      	movs	r2, #6
    a14c:	482d      	ldr	r0, [pc, #180]	; (a204 <_svfiprintf_r+0x1fc>)
    a14e:	1c66      	adds	r6, r4, #1
    a150:	7629      	strb	r1, [r5, #24]
    a152:	f000 f9f1 	bl	a538 <memchr>
    a156:	2800      	cmp	r0, #0
    a158:	d046      	beq.n	a1e8 <_svfiprintf_r+0x1e0>
    a15a:	4b2b      	ldr	r3, [pc, #172]	; (a208 <_svfiprintf_r+0x200>)
    a15c:	2b00      	cmp	r3, #0
    a15e:	d12f      	bne.n	a1c0 <_svfiprintf_r+0x1b8>
    a160:	6829      	ldr	r1, [r5, #0]
    a162:	9b05      	ldr	r3, [sp, #20]
    a164:	2207      	movs	r2, #7
    a166:	05c9      	lsls	r1, r1, #23
    a168:	d528      	bpl.n	a1bc <_svfiprintf_r+0x1b4>
    a16a:	189b      	adds	r3, r3, r2
    a16c:	4393      	bics	r3, r2
    a16e:	3308      	adds	r3, #8
    a170:	9305      	str	r3, [sp, #20]
    a172:	696b      	ldr	r3, [r5, #20]
    a174:	9a03      	ldr	r2, [sp, #12]
    a176:	189b      	adds	r3, r3, r2
    a178:	616b      	str	r3, [r5, #20]
    a17a:	e767      	b.n	a04c <_svfiprintf_r+0x44>
    a17c:	425b      	negs	r3, r3
    a17e:	60eb      	str	r3, [r5, #12]
    a180:	2302      	movs	r3, #2
    a182:	430b      	orrs	r3, r1
    a184:	602b      	str	r3, [r5, #0]
    a186:	e7c0      	b.n	a10a <_svfiprintf_r+0x102>
    a188:	434b      	muls	r3, r1
    a18a:	3401      	adds	r4, #1
    a18c:	189b      	adds	r3, r3, r2
    a18e:	2001      	movs	r0, #1
    a190:	e7a0      	b.n	a0d4 <_svfiprintf_r+0xcc>
    a192:	2301      	movs	r3, #1
    a194:	425b      	negs	r3, r3
    a196:	e7c7      	b.n	a128 <_svfiprintf_r+0x120>
    a198:	2300      	movs	r3, #0
    a19a:	0014      	movs	r4, r2
    a19c:	200a      	movs	r0, #10
    a19e:	001a      	movs	r2, r3
    a1a0:	606b      	str	r3, [r5, #4]
    a1a2:	7821      	ldrb	r1, [r4, #0]
    a1a4:	3930      	subs	r1, #48	; 0x30
    a1a6:	2909      	cmp	r1, #9
    a1a8:	d903      	bls.n	a1b2 <_svfiprintf_r+0x1aa>
    a1aa:	2b00      	cmp	r3, #0
    a1ac:	d0bd      	beq.n	a12a <_svfiprintf_r+0x122>
    a1ae:	9207      	str	r2, [sp, #28]
    a1b0:	e7bb      	b.n	a12a <_svfiprintf_r+0x122>
    a1b2:	4342      	muls	r2, r0
    a1b4:	3401      	adds	r4, #1
    a1b6:	1852      	adds	r2, r2, r1
    a1b8:	2301      	movs	r3, #1
    a1ba:	e7f2      	b.n	a1a2 <_svfiprintf_r+0x19a>
    a1bc:	3307      	adds	r3, #7
    a1be:	e7d5      	b.n	a16c <_svfiprintf_r+0x164>
    a1c0:	ab05      	add	r3, sp, #20
    a1c2:	9300      	str	r3, [sp, #0]
    a1c4:	003a      	movs	r2, r7
    a1c6:	4b11      	ldr	r3, [pc, #68]	; (a20c <_svfiprintf_r+0x204>)
    a1c8:	0029      	movs	r1, r5
    a1ca:	9802      	ldr	r0, [sp, #8]
    a1cc:	e000      	b.n	a1d0 <_svfiprintf_r+0x1c8>
    a1ce:	bf00      	nop
    a1d0:	9003      	str	r0, [sp, #12]
    a1d2:	9b03      	ldr	r3, [sp, #12]
    a1d4:	3301      	adds	r3, #1
    a1d6:	d1cc      	bne.n	a172 <_svfiprintf_r+0x16a>
    a1d8:	89bb      	ldrh	r3, [r7, #12]
    a1da:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a1dc:	065b      	lsls	r3, r3, #25
    a1de:	d400      	bmi.n	a1e2 <_svfiprintf_r+0x1da>
    a1e0:	e729      	b.n	a036 <_svfiprintf_r+0x2e>
    a1e2:	2001      	movs	r0, #1
    a1e4:	4240      	negs	r0, r0
    a1e6:	e726      	b.n	a036 <_svfiprintf_r+0x2e>
    a1e8:	ab05      	add	r3, sp, #20
    a1ea:	9300      	str	r3, [sp, #0]
    a1ec:	003a      	movs	r2, r7
    a1ee:	4b07      	ldr	r3, [pc, #28]	; (a20c <_svfiprintf_r+0x204>)
    a1f0:	0029      	movs	r1, r5
    a1f2:	9802      	ldr	r0, [sp, #8]
    a1f4:	f000 f87a 	bl	a2ec <_printf_i>
    a1f8:	e7ea      	b.n	a1d0 <_svfiprintf_r+0x1c8>
    a1fa:	46c0      	nop			; (mov r8, r8)
    a1fc:	0000ba96 	.word	0x0000ba96
    a200:	0000ba9c 	.word	0x0000ba9c
    a204:	0000baa0 	.word	0x0000baa0
    a208:	00000000 	.word	0x00000000
    a20c:	00009f45 	.word	0x00009f45

0000a210 <_printf_common>:
    a210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a212:	0015      	movs	r5, r2
    a214:	9301      	str	r3, [sp, #4]
    a216:	688a      	ldr	r2, [r1, #8]
    a218:	690b      	ldr	r3, [r1, #16]
    a21a:	9000      	str	r0, [sp, #0]
    a21c:	000c      	movs	r4, r1
    a21e:	4293      	cmp	r3, r2
    a220:	da00      	bge.n	a224 <_printf_common+0x14>
    a222:	0013      	movs	r3, r2
    a224:	0022      	movs	r2, r4
    a226:	602b      	str	r3, [r5, #0]
    a228:	3243      	adds	r2, #67	; 0x43
    a22a:	7812      	ldrb	r2, [r2, #0]
    a22c:	2a00      	cmp	r2, #0
    a22e:	d001      	beq.n	a234 <_printf_common+0x24>
    a230:	3301      	adds	r3, #1
    a232:	602b      	str	r3, [r5, #0]
    a234:	6823      	ldr	r3, [r4, #0]
    a236:	069b      	lsls	r3, r3, #26
    a238:	d502      	bpl.n	a240 <_printf_common+0x30>
    a23a:	682b      	ldr	r3, [r5, #0]
    a23c:	3302      	adds	r3, #2
    a23e:	602b      	str	r3, [r5, #0]
    a240:	2706      	movs	r7, #6
    a242:	6823      	ldr	r3, [r4, #0]
    a244:	401f      	ands	r7, r3
    a246:	d027      	beq.n	a298 <_printf_common+0x88>
    a248:	0023      	movs	r3, r4
    a24a:	3343      	adds	r3, #67	; 0x43
    a24c:	781b      	ldrb	r3, [r3, #0]
    a24e:	1e5a      	subs	r2, r3, #1
    a250:	4193      	sbcs	r3, r2
    a252:	6822      	ldr	r2, [r4, #0]
    a254:	0692      	lsls	r2, r2, #26
    a256:	d430      	bmi.n	a2ba <_printf_common+0xaa>
    a258:	0022      	movs	r2, r4
    a25a:	9901      	ldr	r1, [sp, #4]
    a25c:	3243      	adds	r2, #67	; 0x43
    a25e:	9800      	ldr	r0, [sp, #0]
    a260:	9e08      	ldr	r6, [sp, #32]
    a262:	47b0      	blx	r6
    a264:	1c43      	adds	r3, r0, #1
    a266:	d025      	beq.n	a2b4 <_printf_common+0xa4>
    a268:	2306      	movs	r3, #6
    a26a:	6820      	ldr	r0, [r4, #0]
    a26c:	682a      	ldr	r2, [r5, #0]
    a26e:	68e1      	ldr	r1, [r4, #12]
    a270:	4003      	ands	r3, r0
    a272:	2500      	movs	r5, #0
    a274:	2b04      	cmp	r3, #4
    a276:	d103      	bne.n	a280 <_printf_common+0x70>
    a278:	1a8d      	subs	r5, r1, r2
    a27a:	43eb      	mvns	r3, r5
    a27c:	17db      	asrs	r3, r3, #31
    a27e:	401d      	ands	r5, r3
    a280:	68a3      	ldr	r3, [r4, #8]
    a282:	6922      	ldr	r2, [r4, #16]
    a284:	4293      	cmp	r3, r2
    a286:	dd01      	ble.n	a28c <_printf_common+0x7c>
    a288:	1a9b      	subs	r3, r3, r2
    a28a:	18ed      	adds	r5, r5, r3
    a28c:	2700      	movs	r7, #0
    a28e:	42bd      	cmp	r5, r7
    a290:	d120      	bne.n	a2d4 <_printf_common+0xc4>
    a292:	2000      	movs	r0, #0
    a294:	e010      	b.n	a2b8 <_printf_common+0xa8>
    a296:	3701      	adds	r7, #1
    a298:	68e3      	ldr	r3, [r4, #12]
    a29a:	682a      	ldr	r2, [r5, #0]
    a29c:	1a9b      	subs	r3, r3, r2
    a29e:	429f      	cmp	r7, r3
    a2a0:	dad2      	bge.n	a248 <_printf_common+0x38>
    a2a2:	0022      	movs	r2, r4
    a2a4:	2301      	movs	r3, #1
    a2a6:	3219      	adds	r2, #25
    a2a8:	9901      	ldr	r1, [sp, #4]
    a2aa:	9800      	ldr	r0, [sp, #0]
    a2ac:	9e08      	ldr	r6, [sp, #32]
    a2ae:	47b0      	blx	r6
    a2b0:	1c43      	adds	r3, r0, #1
    a2b2:	d1f0      	bne.n	a296 <_printf_common+0x86>
    a2b4:	2001      	movs	r0, #1
    a2b6:	4240      	negs	r0, r0
    a2b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a2ba:	2030      	movs	r0, #48	; 0x30
    a2bc:	18e1      	adds	r1, r4, r3
    a2be:	3143      	adds	r1, #67	; 0x43
    a2c0:	7008      	strb	r0, [r1, #0]
    a2c2:	0021      	movs	r1, r4
    a2c4:	1c5a      	adds	r2, r3, #1
    a2c6:	3145      	adds	r1, #69	; 0x45
    a2c8:	7809      	ldrb	r1, [r1, #0]
    a2ca:	18a2      	adds	r2, r4, r2
    a2cc:	3243      	adds	r2, #67	; 0x43
    a2ce:	3302      	adds	r3, #2
    a2d0:	7011      	strb	r1, [r2, #0]
    a2d2:	e7c1      	b.n	a258 <_printf_common+0x48>
    a2d4:	0022      	movs	r2, r4
    a2d6:	2301      	movs	r3, #1
    a2d8:	321a      	adds	r2, #26
    a2da:	9901      	ldr	r1, [sp, #4]
    a2dc:	9800      	ldr	r0, [sp, #0]
    a2de:	9e08      	ldr	r6, [sp, #32]
    a2e0:	47b0      	blx	r6
    a2e2:	1c43      	adds	r3, r0, #1
    a2e4:	d0e6      	beq.n	a2b4 <_printf_common+0xa4>
    a2e6:	3701      	adds	r7, #1
    a2e8:	e7d1      	b.n	a28e <_printf_common+0x7e>
	...

0000a2ec <_printf_i>:
    a2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2ee:	b08b      	sub	sp, #44	; 0x2c
    a2f0:	9206      	str	r2, [sp, #24]
    a2f2:	000a      	movs	r2, r1
    a2f4:	3243      	adds	r2, #67	; 0x43
    a2f6:	9307      	str	r3, [sp, #28]
    a2f8:	9005      	str	r0, [sp, #20]
    a2fa:	9204      	str	r2, [sp, #16]
    a2fc:	7e0a      	ldrb	r2, [r1, #24]
    a2fe:	000c      	movs	r4, r1
    a300:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a302:	2a6e      	cmp	r2, #110	; 0x6e
    a304:	d100      	bne.n	a308 <_printf_i+0x1c>
    a306:	e08f      	b.n	a428 <_printf_i+0x13c>
    a308:	d817      	bhi.n	a33a <_printf_i+0x4e>
    a30a:	2a63      	cmp	r2, #99	; 0x63
    a30c:	d02c      	beq.n	a368 <_printf_i+0x7c>
    a30e:	d808      	bhi.n	a322 <_printf_i+0x36>
    a310:	2a00      	cmp	r2, #0
    a312:	d100      	bne.n	a316 <_printf_i+0x2a>
    a314:	e099      	b.n	a44a <_printf_i+0x15e>
    a316:	2a58      	cmp	r2, #88	; 0x58
    a318:	d054      	beq.n	a3c4 <_printf_i+0xd8>
    a31a:	0026      	movs	r6, r4
    a31c:	3642      	adds	r6, #66	; 0x42
    a31e:	7032      	strb	r2, [r6, #0]
    a320:	e029      	b.n	a376 <_printf_i+0x8a>
    a322:	2a64      	cmp	r2, #100	; 0x64
    a324:	d001      	beq.n	a32a <_printf_i+0x3e>
    a326:	2a69      	cmp	r2, #105	; 0x69
    a328:	d1f7      	bne.n	a31a <_printf_i+0x2e>
    a32a:	6821      	ldr	r1, [r4, #0]
    a32c:	681a      	ldr	r2, [r3, #0]
    a32e:	0608      	lsls	r0, r1, #24
    a330:	d523      	bpl.n	a37a <_printf_i+0x8e>
    a332:	1d11      	adds	r1, r2, #4
    a334:	6019      	str	r1, [r3, #0]
    a336:	6815      	ldr	r5, [r2, #0]
    a338:	e025      	b.n	a386 <_printf_i+0x9a>
    a33a:	2a73      	cmp	r2, #115	; 0x73
    a33c:	d100      	bne.n	a340 <_printf_i+0x54>
    a33e:	e088      	b.n	a452 <_printf_i+0x166>
    a340:	d808      	bhi.n	a354 <_printf_i+0x68>
    a342:	2a6f      	cmp	r2, #111	; 0x6f
    a344:	d029      	beq.n	a39a <_printf_i+0xae>
    a346:	2a70      	cmp	r2, #112	; 0x70
    a348:	d1e7      	bne.n	a31a <_printf_i+0x2e>
    a34a:	2220      	movs	r2, #32
    a34c:	6809      	ldr	r1, [r1, #0]
    a34e:	430a      	orrs	r2, r1
    a350:	6022      	str	r2, [r4, #0]
    a352:	e003      	b.n	a35c <_printf_i+0x70>
    a354:	2a75      	cmp	r2, #117	; 0x75
    a356:	d020      	beq.n	a39a <_printf_i+0xae>
    a358:	2a78      	cmp	r2, #120	; 0x78
    a35a:	d1de      	bne.n	a31a <_printf_i+0x2e>
    a35c:	0022      	movs	r2, r4
    a35e:	2178      	movs	r1, #120	; 0x78
    a360:	3245      	adds	r2, #69	; 0x45
    a362:	7011      	strb	r1, [r2, #0]
    a364:	4a6c      	ldr	r2, [pc, #432]	; (a518 <_printf_i+0x22c>)
    a366:	e030      	b.n	a3ca <_printf_i+0xde>
    a368:	000e      	movs	r6, r1
    a36a:	681a      	ldr	r2, [r3, #0]
    a36c:	3642      	adds	r6, #66	; 0x42
    a36e:	1d11      	adds	r1, r2, #4
    a370:	6019      	str	r1, [r3, #0]
    a372:	6813      	ldr	r3, [r2, #0]
    a374:	7033      	strb	r3, [r6, #0]
    a376:	2301      	movs	r3, #1
    a378:	e079      	b.n	a46e <_printf_i+0x182>
    a37a:	0649      	lsls	r1, r1, #25
    a37c:	d5d9      	bpl.n	a332 <_printf_i+0x46>
    a37e:	1d11      	adds	r1, r2, #4
    a380:	6019      	str	r1, [r3, #0]
    a382:	2300      	movs	r3, #0
    a384:	5ed5      	ldrsh	r5, [r2, r3]
    a386:	2d00      	cmp	r5, #0
    a388:	da03      	bge.n	a392 <_printf_i+0xa6>
    a38a:	232d      	movs	r3, #45	; 0x2d
    a38c:	9a04      	ldr	r2, [sp, #16]
    a38e:	426d      	negs	r5, r5
    a390:	7013      	strb	r3, [r2, #0]
    a392:	4b62      	ldr	r3, [pc, #392]	; (a51c <_printf_i+0x230>)
    a394:	270a      	movs	r7, #10
    a396:	9303      	str	r3, [sp, #12]
    a398:	e02f      	b.n	a3fa <_printf_i+0x10e>
    a39a:	6820      	ldr	r0, [r4, #0]
    a39c:	6819      	ldr	r1, [r3, #0]
    a39e:	0605      	lsls	r5, r0, #24
    a3a0:	d503      	bpl.n	a3aa <_printf_i+0xbe>
    a3a2:	1d08      	adds	r0, r1, #4
    a3a4:	6018      	str	r0, [r3, #0]
    a3a6:	680d      	ldr	r5, [r1, #0]
    a3a8:	e005      	b.n	a3b6 <_printf_i+0xca>
    a3aa:	0640      	lsls	r0, r0, #25
    a3ac:	d5f9      	bpl.n	a3a2 <_printf_i+0xb6>
    a3ae:	680d      	ldr	r5, [r1, #0]
    a3b0:	1d08      	adds	r0, r1, #4
    a3b2:	6018      	str	r0, [r3, #0]
    a3b4:	b2ad      	uxth	r5, r5
    a3b6:	4b59      	ldr	r3, [pc, #356]	; (a51c <_printf_i+0x230>)
    a3b8:	2708      	movs	r7, #8
    a3ba:	9303      	str	r3, [sp, #12]
    a3bc:	2a6f      	cmp	r2, #111	; 0x6f
    a3be:	d018      	beq.n	a3f2 <_printf_i+0x106>
    a3c0:	270a      	movs	r7, #10
    a3c2:	e016      	b.n	a3f2 <_printf_i+0x106>
    a3c4:	3145      	adds	r1, #69	; 0x45
    a3c6:	700a      	strb	r2, [r1, #0]
    a3c8:	4a54      	ldr	r2, [pc, #336]	; (a51c <_printf_i+0x230>)
    a3ca:	9203      	str	r2, [sp, #12]
    a3cc:	681a      	ldr	r2, [r3, #0]
    a3ce:	6821      	ldr	r1, [r4, #0]
    a3d0:	1d10      	adds	r0, r2, #4
    a3d2:	6018      	str	r0, [r3, #0]
    a3d4:	6815      	ldr	r5, [r2, #0]
    a3d6:	0608      	lsls	r0, r1, #24
    a3d8:	d522      	bpl.n	a420 <_printf_i+0x134>
    a3da:	07cb      	lsls	r3, r1, #31
    a3dc:	d502      	bpl.n	a3e4 <_printf_i+0xf8>
    a3de:	2320      	movs	r3, #32
    a3e0:	4319      	orrs	r1, r3
    a3e2:	6021      	str	r1, [r4, #0]
    a3e4:	2710      	movs	r7, #16
    a3e6:	2d00      	cmp	r5, #0
    a3e8:	d103      	bne.n	a3f2 <_printf_i+0x106>
    a3ea:	2320      	movs	r3, #32
    a3ec:	6822      	ldr	r2, [r4, #0]
    a3ee:	439a      	bics	r2, r3
    a3f0:	6022      	str	r2, [r4, #0]
    a3f2:	0023      	movs	r3, r4
    a3f4:	2200      	movs	r2, #0
    a3f6:	3343      	adds	r3, #67	; 0x43
    a3f8:	701a      	strb	r2, [r3, #0]
    a3fa:	6863      	ldr	r3, [r4, #4]
    a3fc:	60a3      	str	r3, [r4, #8]
    a3fe:	2b00      	cmp	r3, #0
    a400:	db5c      	blt.n	a4bc <_printf_i+0x1d0>
    a402:	2204      	movs	r2, #4
    a404:	6821      	ldr	r1, [r4, #0]
    a406:	4391      	bics	r1, r2
    a408:	6021      	str	r1, [r4, #0]
    a40a:	2d00      	cmp	r5, #0
    a40c:	d158      	bne.n	a4c0 <_printf_i+0x1d4>
    a40e:	9e04      	ldr	r6, [sp, #16]
    a410:	2b00      	cmp	r3, #0
    a412:	d064      	beq.n	a4de <_printf_i+0x1f2>
    a414:	0026      	movs	r6, r4
    a416:	9b03      	ldr	r3, [sp, #12]
    a418:	3642      	adds	r6, #66	; 0x42
    a41a:	781b      	ldrb	r3, [r3, #0]
    a41c:	7033      	strb	r3, [r6, #0]
    a41e:	e05e      	b.n	a4de <_printf_i+0x1f2>
    a420:	0648      	lsls	r0, r1, #25
    a422:	d5da      	bpl.n	a3da <_printf_i+0xee>
    a424:	b2ad      	uxth	r5, r5
    a426:	e7d8      	b.n	a3da <_printf_i+0xee>
    a428:	6809      	ldr	r1, [r1, #0]
    a42a:	681a      	ldr	r2, [r3, #0]
    a42c:	0608      	lsls	r0, r1, #24
    a42e:	d505      	bpl.n	a43c <_printf_i+0x150>
    a430:	1d11      	adds	r1, r2, #4
    a432:	6019      	str	r1, [r3, #0]
    a434:	6813      	ldr	r3, [r2, #0]
    a436:	6962      	ldr	r2, [r4, #20]
    a438:	601a      	str	r2, [r3, #0]
    a43a:	e006      	b.n	a44a <_printf_i+0x15e>
    a43c:	0649      	lsls	r1, r1, #25
    a43e:	d5f7      	bpl.n	a430 <_printf_i+0x144>
    a440:	1d11      	adds	r1, r2, #4
    a442:	6019      	str	r1, [r3, #0]
    a444:	6813      	ldr	r3, [r2, #0]
    a446:	8aa2      	ldrh	r2, [r4, #20]
    a448:	801a      	strh	r2, [r3, #0]
    a44a:	2300      	movs	r3, #0
    a44c:	9e04      	ldr	r6, [sp, #16]
    a44e:	6123      	str	r3, [r4, #16]
    a450:	e054      	b.n	a4fc <_printf_i+0x210>
    a452:	681a      	ldr	r2, [r3, #0]
    a454:	1d11      	adds	r1, r2, #4
    a456:	6019      	str	r1, [r3, #0]
    a458:	6816      	ldr	r6, [r2, #0]
    a45a:	2100      	movs	r1, #0
    a45c:	6862      	ldr	r2, [r4, #4]
    a45e:	0030      	movs	r0, r6
    a460:	f000 f86a 	bl	a538 <memchr>
    a464:	2800      	cmp	r0, #0
    a466:	d001      	beq.n	a46c <_printf_i+0x180>
    a468:	1b80      	subs	r0, r0, r6
    a46a:	6060      	str	r0, [r4, #4]
    a46c:	6863      	ldr	r3, [r4, #4]
    a46e:	6123      	str	r3, [r4, #16]
    a470:	2300      	movs	r3, #0
    a472:	9a04      	ldr	r2, [sp, #16]
    a474:	7013      	strb	r3, [r2, #0]
    a476:	e041      	b.n	a4fc <_printf_i+0x210>
    a478:	6923      	ldr	r3, [r4, #16]
    a47a:	0032      	movs	r2, r6
    a47c:	9906      	ldr	r1, [sp, #24]
    a47e:	9805      	ldr	r0, [sp, #20]
    a480:	9d07      	ldr	r5, [sp, #28]
    a482:	47a8      	blx	r5
    a484:	1c43      	adds	r3, r0, #1
    a486:	d043      	beq.n	a510 <_printf_i+0x224>
    a488:	6823      	ldr	r3, [r4, #0]
    a48a:	2500      	movs	r5, #0
    a48c:	079b      	lsls	r3, r3, #30
    a48e:	d40f      	bmi.n	a4b0 <_printf_i+0x1c4>
    a490:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a492:	68e0      	ldr	r0, [r4, #12]
    a494:	4298      	cmp	r0, r3
    a496:	da3d      	bge.n	a514 <_printf_i+0x228>
    a498:	0018      	movs	r0, r3
    a49a:	e03b      	b.n	a514 <_printf_i+0x228>
    a49c:	0022      	movs	r2, r4
    a49e:	2301      	movs	r3, #1
    a4a0:	3219      	adds	r2, #25
    a4a2:	9906      	ldr	r1, [sp, #24]
    a4a4:	9805      	ldr	r0, [sp, #20]
    a4a6:	9e07      	ldr	r6, [sp, #28]
    a4a8:	47b0      	blx	r6
    a4aa:	1c43      	adds	r3, r0, #1
    a4ac:	d030      	beq.n	a510 <_printf_i+0x224>
    a4ae:	3501      	adds	r5, #1
    a4b0:	68e3      	ldr	r3, [r4, #12]
    a4b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a4b4:	1a9b      	subs	r3, r3, r2
    a4b6:	429d      	cmp	r5, r3
    a4b8:	dbf0      	blt.n	a49c <_printf_i+0x1b0>
    a4ba:	e7e9      	b.n	a490 <_printf_i+0x1a4>
    a4bc:	2d00      	cmp	r5, #0
    a4be:	d0a9      	beq.n	a414 <_printf_i+0x128>
    a4c0:	9e04      	ldr	r6, [sp, #16]
    a4c2:	0028      	movs	r0, r5
    a4c4:	0039      	movs	r1, r7
    a4c6:	f7fd f85d 	bl	7584 <__aeabi_uidivmod>
    a4ca:	9b03      	ldr	r3, [sp, #12]
    a4cc:	3e01      	subs	r6, #1
    a4ce:	5c5b      	ldrb	r3, [r3, r1]
    a4d0:	0028      	movs	r0, r5
    a4d2:	7033      	strb	r3, [r6, #0]
    a4d4:	0039      	movs	r1, r7
    a4d6:	f7fc ffcf 	bl	7478 <__udivsi3>
    a4da:	1e05      	subs	r5, r0, #0
    a4dc:	d1f1      	bne.n	a4c2 <_printf_i+0x1d6>
    a4de:	2f08      	cmp	r7, #8
    a4e0:	d109      	bne.n	a4f6 <_printf_i+0x20a>
    a4e2:	6823      	ldr	r3, [r4, #0]
    a4e4:	07db      	lsls	r3, r3, #31
    a4e6:	d506      	bpl.n	a4f6 <_printf_i+0x20a>
    a4e8:	6863      	ldr	r3, [r4, #4]
    a4ea:	6922      	ldr	r2, [r4, #16]
    a4ec:	4293      	cmp	r3, r2
    a4ee:	dc02      	bgt.n	a4f6 <_printf_i+0x20a>
    a4f0:	2330      	movs	r3, #48	; 0x30
    a4f2:	3e01      	subs	r6, #1
    a4f4:	7033      	strb	r3, [r6, #0]
    a4f6:	9b04      	ldr	r3, [sp, #16]
    a4f8:	1b9b      	subs	r3, r3, r6
    a4fa:	6123      	str	r3, [r4, #16]
    a4fc:	9b07      	ldr	r3, [sp, #28]
    a4fe:	aa09      	add	r2, sp, #36	; 0x24
    a500:	9300      	str	r3, [sp, #0]
    a502:	0021      	movs	r1, r4
    a504:	9b06      	ldr	r3, [sp, #24]
    a506:	9805      	ldr	r0, [sp, #20]
    a508:	f7ff fe82 	bl	a210 <_printf_common>
    a50c:	1c43      	adds	r3, r0, #1
    a50e:	d1b3      	bne.n	a478 <_printf_i+0x18c>
    a510:	2001      	movs	r0, #1
    a512:	4240      	negs	r0, r0
    a514:	b00b      	add	sp, #44	; 0x2c
    a516:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a518:	0000bab8 	.word	0x0000bab8
    a51c:	0000baa7 	.word	0x0000baa7

0000a520 <__ascii_wctomb>:
    a520:	1e0b      	subs	r3, r1, #0
    a522:	d004      	beq.n	a52e <__ascii_wctomb+0xe>
    a524:	2aff      	cmp	r2, #255	; 0xff
    a526:	d904      	bls.n	a532 <__ascii_wctomb+0x12>
    a528:	238a      	movs	r3, #138	; 0x8a
    a52a:	6003      	str	r3, [r0, #0]
    a52c:	3b8b      	subs	r3, #139	; 0x8b
    a52e:	0018      	movs	r0, r3
    a530:	4770      	bx	lr
    a532:	700a      	strb	r2, [r1, #0]
    a534:	2301      	movs	r3, #1
    a536:	e7fa      	b.n	a52e <__ascii_wctomb+0xe>

0000a538 <memchr>:
    a538:	b2c9      	uxtb	r1, r1
    a53a:	1882      	adds	r2, r0, r2
    a53c:	4290      	cmp	r0, r2
    a53e:	d101      	bne.n	a544 <memchr+0xc>
    a540:	2000      	movs	r0, #0
    a542:	4770      	bx	lr
    a544:	7803      	ldrb	r3, [r0, #0]
    a546:	428b      	cmp	r3, r1
    a548:	d0fb      	beq.n	a542 <memchr+0xa>
    a54a:	3001      	adds	r0, #1
    a54c:	e7f6      	b.n	a53c <memchr+0x4>

0000a54e <memmove>:
    a54e:	b510      	push	{r4, lr}
    a550:	4288      	cmp	r0, r1
    a552:	d902      	bls.n	a55a <memmove+0xc>
    a554:	188b      	adds	r3, r1, r2
    a556:	4298      	cmp	r0, r3
    a558:	d308      	bcc.n	a56c <memmove+0x1e>
    a55a:	2300      	movs	r3, #0
    a55c:	429a      	cmp	r2, r3
    a55e:	d007      	beq.n	a570 <memmove+0x22>
    a560:	5ccc      	ldrb	r4, [r1, r3]
    a562:	54c4      	strb	r4, [r0, r3]
    a564:	3301      	adds	r3, #1
    a566:	e7f9      	b.n	a55c <memmove+0xe>
    a568:	5c8b      	ldrb	r3, [r1, r2]
    a56a:	5483      	strb	r3, [r0, r2]
    a56c:	3a01      	subs	r2, #1
    a56e:	d2fb      	bcs.n	a568 <memmove+0x1a>
    a570:	bd10      	pop	{r4, pc}

0000a572 <_realloc_r>:
    a572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a574:	0007      	movs	r7, r0
    a576:	000d      	movs	r5, r1
    a578:	0016      	movs	r6, r2
    a57a:	2900      	cmp	r1, #0
    a57c:	d105      	bne.n	a58a <_realloc_r+0x18>
    a57e:	0011      	movs	r1, r2
    a580:	f7ff fad8 	bl	9b34 <_malloc_r>
    a584:	0004      	movs	r4, r0
    a586:	0020      	movs	r0, r4
    a588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a58a:	2a00      	cmp	r2, #0
    a58c:	d103      	bne.n	a596 <_realloc_r+0x24>
    a58e:	f7ff fa87 	bl	9aa0 <_free_r>
    a592:	0034      	movs	r4, r6
    a594:	e7f7      	b.n	a586 <_realloc_r+0x14>
    a596:	f000 f812 	bl	a5be <_malloc_usable_size_r>
    a59a:	002c      	movs	r4, r5
    a59c:	4286      	cmp	r6, r0
    a59e:	d9f2      	bls.n	a586 <_realloc_r+0x14>
    a5a0:	0031      	movs	r1, r6
    a5a2:	0038      	movs	r0, r7
    a5a4:	f7ff fac6 	bl	9b34 <_malloc_r>
    a5a8:	1e04      	subs	r4, r0, #0
    a5aa:	d0ec      	beq.n	a586 <_realloc_r+0x14>
    a5ac:	0029      	movs	r1, r5
    a5ae:	0032      	movs	r2, r6
    a5b0:	f7ff fa64 	bl	9a7c <memcpy>
    a5b4:	0029      	movs	r1, r5
    a5b6:	0038      	movs	r0, r7
    a5b8:	f7ff fa72 	bl	9aa0 <_free_r>
    a5bc:	e7e3      	b.n	a586 <_realloc_r+0x14>

0000a5be <_malloc_usable_size_r>:
    a5be:	1f0b      	subs	r3, r1, #4
    a5c0:	681b      	ldr	r3, [r3, #0]
    a5c2:	1f18      	subs	r0, r3, #4
    a5c4:	2b00      	cmp	r3, #0
    a5c6:	da01      	bge.n	a5cc <_malloc_usable_size_r+0xe>
    a5c8:	580b      	ldr	r3, [r1, r0]
    a5ca:	18c0      	adds	r0, r0, r3
    a5cc:	4770      	bx	lr
    a5ce:	0000      	movs	r0, r0
    a5d0:	00082008 	.word	0x00082008
    a5d4:	65636341 	.word	0x65636341
    a5d8:	6172656c 	.word	0x6172656c
    a5dc:	6e6f6974 	.word	0x6e6f6974
    a5e0:	676d5b20 	.word	0x676d5b20
    a5e4:	20583a5d 	.word	0x20583a5d
    a5e8:	59096425 	.word	0x59096425
    a5ec:	09642520 	.word	0x09642520
    a5f0:	6425205a 	.word	0x6425205a
    a5f4:	00000a0d 	.word	0x00000a0d
    a5f8:	64206f4e 	.word	0x64206f4e
    a5fc:	20617461 	.word	0x20617461
    a600:	64616572 	.word	0x64616572
    a604:	0d202179 	.word	0x0d202179
    a608:	0000000a 	.word	0x0000000a
    a60c:	00736c63 	.word	0x00736c63
    a610:	3a736c63 	.word	0x3a736c63
    a614:	656c4320 	.word	0x656c4320
    a618:	20737261 	.word	0x20737261
    a61c:	20656874 	.word	0x20656874
    a620:	6d726574 	.word	0x6d726574
    a624:	6c616e69 	.word	0x6c616e69
    a628:	72637320 	.word	0x72637320
    a62c:	0d6e6565 	.word	0x0d6e6565
    a630:	0000000a 	.word	0x0000000a
    a634:	0064656c 	.word	0x0064656c
    a638:	2064656c 	.word	0x2064656c
    a63c:	79656b5b 	.word	0x79656b5b
    a640:	5d6d756e 	.word	0x5d6d756e
    a644:	5b5d525b 	.word	0x5b5d525b
    a648:	425b5d47 	.word	0x425b5d47
    a64c:	53203a5d 	.word	0x53203a5d
    a650:	20737465 	.word	0x20737465
    a654:	20656874 	.word	0x20656874
    a658:	65766967 	.word	0x65766967
    a65c:	454c206e 	.word	0x454c206e
    a660:	6f742044 	.word	0x6f742044
    a664:	65687420 	.word	0x65687420
    a668:	76696720 	.word	0x76696720
    a66c:	52206e65 	.word	0x52206e65
    a670:	422c472c 	.word	0x422c472c
    a674:	6c617620 	.word	0x6c617620
    a678:	2e736575 	.word	0x2e736575
    a67c:	00000a0d 	.word	0x00000a0d
    a680:	65736572 	.word	0x65736572
    a684:	00000074 	.word	0x00000074
    a688:	65736572 	.word	0x65736572
    a68c:	52203a74 	.word	0x52203a74
    a690:	74657365 	.word	0x74657365
    a694:	68742073 	.word	0x68742073
    a698:	65642065 	.word	0x65642065
    a69c:	65636976 	.word	0x65636976
    a6a0:	00000a0d 	.word	0x00000a0d
    a6a4:	00756d69 	.word	0x00756d69
    a6a8:	3a756d69 	.word	0x3a756d69
    a6ac:	74655220 	.word	0x74655220
    a6b0:	736e7275 	.word	0x736e7275
    a6b4:	76206120 	.word	0x76206120
    a6b8:	65756c61 	.word	0x65756c61
    a6bc:	6f726620 	.word	0x6f726620
    a6c0:	6874206d 	.word	0x6874206d
    a6c4:	4d492065 	.word	0x4d492065
    a6c8:	000a0d55 	.word	0x000a0d55
    a6cc:	65657246 	.word	0x65657246
    a6d0:	534f5452 	.word	0x534f5452
    a6d4:	494c4320 	.word	0x494c4320
    a6d8:	540a0d2e 	.word	0x540a0d2e
    a6dc:	20657079 	.word	0x20657079
    a6e0:	706c6548 	.word	0x706c6548
    a6e4:	206f7420 	.word	0x206f7420
    a6e8:	77656976 	.word	0x77656976
    a6ec:	6c206120 	.word	0x6c206120
    a6f0:	20747369 	.word	0x20747369
    a6f4:	7220666f 	.word	0x7220666f
    a6f8:	73696765 	.word	0x73696765
    a6fc:	65726574 	.word	0x65726574
    a700:	6f632064 	.word	0x6f632064
    a704:	6e616d6d 	.word	0x6e616d6d
    a708:	0d2e7364 	.word	0x0d2e7364
    a70c:	0000000a 	.word	0x0000000a
    a710:	6c756f43 	.word	0x6c756f43
    a714:	6f6e2064 	.word	0x6f6e2064
    a718:	6c612074 	.word	0x6c612074
    a71c:	61636f6c 	.word	0x61636f6c
    a720:	73206574 	.word	0x73206574
    a724:	70616d65 	.word	0x70616d65
    a728:	65726f68 	.word	0x65726f68
    a72c:	00000a0d 	.word	0x00000a0d
    a730:	0000616f 	.word	0x0000616f
    a734:	325b6325 	.word	0x325b6325
    a738:	003e0d4b 	.word	0x003e0d4b

0000a73c <xClearScreen>:
    a73c:	0000a60c 0000a610 000009fd 00000000     ................
    a74c:	325b6325 0000004a                       %c[2J...

0000a754 <xImuGetCommand>:
    a754:	0000a6a4 0000a6a8 00000949 00000000     ........I.......

0000a764 <xNeotrellisTurnLEDCommand>:
    a764:	0000a634 0000a638 00000a29 00000004     4...8...).......

0000a774 <xResetCommand>:
    a774:	0000a680 0000a688 00000931 00000000     ........1.......
    a784:	00001010 0000050e 6f727245 6e692072     ........Error in
    a794:	61697469 697a696c 5320676e 61736565     itializing Seesa
    a7a4:	0a0d2177 00000000 6f727245 2f722f72     w!......Error/r/
    a7b4:	0000006e 6e756f46 65532064 77617365     n...Found Seesaw
    a7c4:	2f722f21 0000006e 6c756f43 6f6e2064     !/r/n...Could no
    a7d4:	72772074 20657469 73656553 70207761     t write Seesaw p
    a7e4:	2f216e69 006e2f72 6c756f43 6f6e2064     in!/r/n.Could no
    a7f4:	65732074 65732074 77617365 6f654e20     t set seesaw Neo
    a804:	65786970 7073206c 21646565 6e2f722f     pixel speed!/r/n
    a814:	00000000 6c756f43 6f6e2064 65732074     ....Could not se
    a824:	65732074 77617365 6f654e20 65786970     t seesaw Neopixe
    a834:	756e206c 7265626d 20666f20 69766564     l number of devi
    a844:	2f736563 006e2f72 6c756f43 6f6e2064     ces/r/n.Could no
    a854:	6e692074 61697469 657a696c 79654b20     t initialize Key
    a864:	21646170 6e2f722f 00000000 6f727245     pad!/r/n....Erro
    a874:	65722072 6e696461 65532067 77617365     r reading Seesaw
    a884:	756f6320 2173746e 6e2f722f 00000000      counts!/r/n....

0000a894 <msgBaseGetHWID>:
    a894:	00000100                                ....

0000a898 <msgKeypadEnableInt>:
    a898:	00010210                                ....

0000a89c <msgNeopixelBufLength>:
    a89c:	3000030e                                ...0

0000a8a0 <msgNeopixelPin>:
    a8a0:	0003010e                                ....

0000a8a4 <msgNeopixelSpeed>:
    a8a4:	0001020e 54204955 206b7361 72617453     ....UI Task Star
    a8b4:	21646574 00000000 6f636e49 63657272     ted!....Incorrec
    a8c4:	6f632074 6e616d6d 61702064 656d6172     t command parame
    a8d4:	28726574 202e2973 746e4520 22207265     ter(s).  Enter "
    a8e4:	706c6568 6f742022 65697620 20612077     help" to view a 
    a8f4:	7473696c 20666f20 69617661 6c62616c     list of availabl
    a904:	6f632065 6e616d6d 0d2e7364 000a0d0a     e commands......
    a914:	6d6d6f43 20646e61 20746f6e 6f636572     Command not reco
    a924:	73696e67 202e6465 746e4520 27207265     gnised.  Enter '
    a934:	706c6568 6f742027 65697620 20612077     help' to view a 
    a944:	7473696c 20666f20 69617661 6c62616c     list of availabl
    a954:	6f632065 6e616d6d 0d2e7364 000a0d0a     e commands......
    a964:	706c6568 00000000 65680a0d 0d3a706c     help......help:.
    a974:	694c200a 20737473 206c6c61 20656874     . Lists all the 
    a984:	69676572 72657473 63206465 616d6d6f     registered comma
    a994:	0d73646e 000a0d0a                       nds.....

0000a99c <xHelpCommand>:
    a99c:	0000a964 0000a96c 00001f79 00000000     d...l...y.......
    a9ac:	00002380 00002378 0000237c 00002398     .#..x#..|#...#..
    a9bc:	00002374 00002384 00002388 0000238c     t#...#...#...#..
    a9cc:	00002390 20746f4e 756f6e65 54206867     .#..Not enough T
    a9dc:	204b5341 646e6168 2073656c 6e69202d     ASK handles - in
    a9ec:	61657263 54206573 435f4352 4e5f4746     crease TRC_CFG_N
    a9fc:	4b534154 206e6920 53637274 7370616e     TASK in trcSnaps
    aa0c:	43746f68 69666e6f 00682e67 20746f4e     hotConfig.h.Not 
    aa1c:	756f6e65 49206867 68205253 6c646e61     enough ISR handl
    aa2c:	2d207365 636e6920 73616572 52542065     es - increase TR
    aa3c:	46435f43 494e5f47 69205253 7274206e     C_CFG_NISR in tr
    aa4c:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    aa5c:	00000068 20746f4e 756f6e65 53206867     h...Not enough S
    aa6c:	50414d45 45524f48 6e616820 73656c64     EMAPHORE handles
    aa7c:	69202d20 6572636e 20657361 5f435254      - increase TRC_
    aa8c:	5f474643 4d45534e 4f485041 69204552     CFG_NSEMAPHORE i
    aa9c:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
    aaac:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
    aabc:	4d206867 58455455 6e616820 73656c64     gh MUTEX handles
    aacc:	69202d20 6572636e 20657361 5f435254      - increase TRC_
    aadc:	5f474643 54554d4e 69205845 7274206e     CFG_NMUTEX in tr
    aaec:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    aafc:	00000068 20746f4e 756f6e65 51206867     h...Not enough Q
    ab0c:	45554555 6e616820 73656c64 69202d20     UEUE handles - i
    ab1c:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
    ab2c:	4555514e 69204555 7274206e 616e5363     NQUEUE in trcSna
    ab3c:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
    ab4c:	20746f4e 756f6e65 54206867 52454d49     Not enough TIMER
    ab5c:	6e616820 73656c64 69202d20 6572636e      handles - incre
    ab6c:	20657361 5f435254 5f474643 4d49544e     ase TRC_CFG_NTIM
    ab7c:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
    ab8c:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
    ab9c:	756f6e65 45206867 544e4556 554f5247     enough EVENTGROU
    abac:	61682050 656c646e 202d2073 72636e69     P handles - incr
    abbc:	65736165 43525420 4746435f 56454e5f     ease TRC_CFG_NEV
    abcc:	47544e45 50554f52 206e6920 53637274     ENTGROUP in trcS
    abdc:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
    abec:	20746f4e 756f6e65 53206867 41455254     Not enough STREA
    abfc:	4655424d 20524546 646e6168 2073656c     MBUFFER handles 
    ac0c:	6e69202d 61657263 54206573 435f4352     - increase TRC_C
    ac1c:	4e5f4746 45525453 55424d41 52454646     FG_NSTREAMBUFFER
    ac2c:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
    ac3c:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
    ac4c:	4d206867 41535345 55424547 52454646     gh MESSAGEBUFFER
    ac5c:	6e616820 73656c64 69202d20 6572636e      handles - incre
    ac6c:	20657361 5f435254 5f474643 53454d4e     ase TRC_CFG_NMES
    ac7c:	45474153 46465542 69205245 7274206e     SAGEBUFFER in tr
    ac8c:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    ac9c:	00000068 547a7370 65636172 45746547     h...pszTraceGetE
    acac:	726f7272 646e6148 3a73656c 766e4920     rrorHandles: Inv
    acbc:	64696c61 6a626f20 63746365 7373616c     alid objectclass
    accc:	00000021 61725476 6e456563 656c6261     !...vTraceEnable
    acdc:	43525428 4154535f 415f5452 54494157     (TRC_START_AWAIT
    acec:	534f485f 6e202954 6120746f 776f6c6c     _HOST) not allow
    acfc:	69206465 6e53206e 68737061 6d20746f     ed in Snapshot m
    ad0c:	0065646f 78656e55 74636570 61206465     ode.Unexpected a
    ad1c:	6d756772 20746e65 76206f74 63617254     rgument to vTrac
    ad2c:	616e4565 20656c62 616e7328 6f687370     eEnable (snapsho
    ad3c:	6f6d2074 00296564 43415254 53415f45     t mode).TRACE_AS
    ad4c:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
    ad5c:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
    ad6c:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
    ad7c:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
    ad8c:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
    ad9c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    adac:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
    adbc:	696c6176 61762064 2065756c 20726f66     valid value for 
    adcc:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
    addc:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
    adec:	206e6920 54767270 65636172 44746547      in prvTraceGetD
    adfc:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
    ae0c:	7270203a 61725476 65476563 6a624f74     : prvTraceGetObj
    ae1c:	48746365 6c646e61 49203a65 6c61766e     ectHandle: Inval
    ae2c:	76206469 65756c61 726f6620 6a626f20     id value for obj
    ae3c:	63746365 7373616c 00000000 43415254     ectclass....TRAC
    ae4c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
    ae5c:	65476563 72615074 203a6d61 61766e49     ceGetParam: Inva
    ae6c:	2064696c 756c6176 6f662065 61702072     lid value for pa
    ae7c:	5f6d6172 0078616d 43415254 53415f45     ram_max.TRACE_AS
    ae8c:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
    ae9c:	69725074 7469726f 6f725079 74726570     tPriorityPropert
    aeac:	6f203a79 63656a62 616c6374 3e207373     y: objectclass >
    aebc:	5254203d 5f454341 414c434e 53455353     = TRACE_NCLASSES
    aecc:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
    aedc:	7270203a 61725476 65476563 69725074     : prvTraceGetPri
    aeec:	7469726f 6f725079 74726570 49203a79     orityProperty: I
    aefc:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    af0c:	00646920 63617254 65522065 64726f63      id.Trace Record
    af1c:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
    af2c:	69206f74 7865646e 74756f20 65646973     to index outside
    af3c:	65766520 6220746e 65666675 00002172      event buffer!..
    af4c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    af5c:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
    af6c:	3a656d61 6d616e20 3d3d2065 4c554e20     ame: name == NUL
    af7c:	0000004c 656c6c49 206c6167 656a626f     L...Illegal obje
    af8c:	63207463 7373616c 206e6920 54767270     ct class in prvT
    af9c:	65636172 4f746553 63656a62 6d614e74     raceSetObjectNam
    afac:	00000065 656c6c49 206c6167 646e6168     e...Illegal hand
    afbc:	2820656c 69202930 7270206e 61725476     le (0) in prvTra
    afcc:	65536563 6a624f74 4e746365 2e656d61     ceSetObjectName.
    afdc:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
    afec:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
    affc:	53746365 65746174 626f203a 7463656a     ectState: object
    b00c:	73616c63 3d3e2073 41525420 4e5f4543     class >= TRACE_N
    b01c:	53414c43 00534553 43415254 53415f45     CLASSES.TRACE_AS
    b02c:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
    b03c:	6a624f74 53746365 65746174 6e49203a     tObjectState: In
    b04c:	696c6176 61762064 2065756c 20726f66     valid value for 
    b05c:	00006469 43415254 53415f45 54524553     id..TRACE_ASSERT
    b06c:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
    b07c:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
    b08c:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
    b09c:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
    b0ac:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    b0bc:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
    b0cc:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
    b0dc:	76206469 65756c61 726f6620 00646920     id value for id.
    b0ec:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    b0fc:	61725476 65536563 73615474 736e496b     vTraceSetTaskIns
    b10c:	636e6174 6e694665 65687369 49203a64     tanceFinished: I
    b11c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    b12c:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
    b13c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    b14c:	4b65726f 656e7265 6c61436c 65203a6c     oreKernelCall: e
    b15c:	65646f63 203d3e20 46467830 00000000     code >= 0xFF....
    b16c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    b17c:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
    b18c:	6c61436c 6f203a6c 63656a62 616c4374     lCall: objectCla
    b19c:	3e207373 5254203d 5f454341 414c434e     ss >= TRACE_NCLA
    b1ac:	53455353 00000000 43415254 53415f45     SSES....TRACE_AS
    b1bc:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    b1cc:	4b65726f 656e7265 6c61436c 49203a6c     oreKernelCall: I
    b1dc:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    b1ec:	6a626f20 4e746365 65626d75 00000072      objectNumber...
    b1fc:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    b20c:	68676968 69727020 7469726f 53492079     high priority IS
    b21c:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    b22c:	29322820 00000000 43415254 53415f45      (2)....TRACE_AS
    b23c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    b24c:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    b25c:	6d754e68 63697265 61726150 6c6e4f6d     hNumericParamOnl
    b26c:	49203a79 6c61766e 76206469 65756c61     y: Invalid value
    b27c:	726f6620 74766520 65646f63 00000000      for evtcode....
    b28c:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    b29c:	68676968 69727020 7469726f 53492079     high priority IS
    b2ac:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    b2bc:	29342820 00000000 43415254 53415f45      (4)....TRACE_AS
    b2cc:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    b2dc:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    b2ec:	72615068 203a6d61 63747665 2065646f     hParam: evtcode 
    b2fc:	30203d3e 00464678 43415254 53415f45     >= 0xFF.TRACE_AS
    b30c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    b31c:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    b32c:	72615068 203a6d61 656a626f 6c437463     hParam: objectCl
    b33c:	20737361 54203d3e 45434152 4c434e5f     ass >= TRACE_NCL
    b34c:	45535341 00000053 43415254 53415f45     ASSES...TRACE_AS
    b35c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    b36c:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    b37c:	72615068 203a6d61 61766e49 2064696c     hParam: Invalid 
    b38c:	756c6176 6f662065 626f2072 7463656a     value for object
    b39c:	626d754e 00007265 6f636552 72656472     Number..Recorder
    b3ac:	73756220 202d2079 68676968 69727020      busy - high pri
    b3bc:	7469726f 53492079 73752052 20676e69     ority ISR using 
    b3cc:	63737973 3f6c6c61 29332820 00000000     syscall? (3)....
    b3dc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    b3ec:	61725476 74536563 5465726f 526b7361     vTraceStoreTaskR
    b3fc:	79646165 6e49203a 696c6176 61762064     eady: Invalid va
    b40c:	2065756c 20726f66 646e6168 0000656c     lue for handle..
    b41c:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    b42c:	68676968 69727020 7469726f 53492079     high priority IS
    b43c:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    b44c:	29312820 00000000 43415254 53415f45      (1)....TRACE_AS
    b45c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    b46c:	5465726f 736b7361 63746977 49203a68     oreTaskswitch: I
    b47c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    b48c:	73617420 61685f6b 656c646e 00000000      task_handle....
    b49c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    b4ac:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
    b4bc:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
    b4cc:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
    b4dc:	53415f45 54524553 6975203a 65646e49     E_ASSERT: uiInde
    b4ec:	4f664f78 63656a62 49203a74 6c61766e     xOfObject: Inval
    b4fc:	76206469 65756c61 726f6620 6a626f20     id value for obj
    b50c:	63746365 7373616c 00000000 43415254     ectclass....TRAC
    b51c:	53415f45 54524553 6975203a 65646e49     E_ASSERT: uiInde
    b52c:	4f664f78 63656a62 49203a74 6c61766e     xOfObject: Inval
    b53c:	76206469 65756c61 726f6620 6a626f20     id value for obj
    b54c:	68746365 6c646e61 00000065 43415254     ecthandle...TRAC
    b55c:	53415f45 54524553 6552203a 64726f63     E_ASSERT: Record
    b56c:	6e207265 6920746f 6974696e 7a696c61     er not initializ
    b57c:	202e6465 20657355 61725476 6e456563     ed. Use vTraceEn
    b58c:	656c6261 69202928 6574736e 00216461     able() instead!.
    b59c:	61747328 70757472 00000029 43415254     (startup)...TRAC
    b5ac:	53415f45 54524553 5478203a 65636172     E_ASSERT: xTrace
    b5bc:	69676552 72657473 69727453 203a676e     RegisterString: 
    b5cc:	6562616c 3d3d206c 4c554e20 0000004c     label == NULL...
    b5dc:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
    b5ec:	64726f63 6e207265 6920746f 6974696e     corder not initi
    b5fc:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
    b60c:	45656361 6c62616e 20292865 73726966     aceEnable() firs
    b61c:	00002174 454c4449 00000000 00005904     t!..IDLE.....Y..
    b62c:	00005904 00005904 0000587c 00005946     .Y...Y..|X..FY..
    b63c:	00005960 00005904 00005904 0000587c     `Y...Y...Y..|X..
    b64c:	00005946 20726d54 00637653 42000800     FY..Tmr Svc....B
    b65c:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    b66c:	42001c00 0000691e 0000691a 0000691a     ...B.i...i...i..
    b67c:	00006980 00006980 00006932 00006924     .i...i..2i..$i..
    b68c:	00006938 0000696e 00006aac 00006a8c     8i..ni...j...j..
    b69c:	00006a8c 00006b18 00006a9e 00006aba     .j...k...j...j..
    b6ac:	00006a90 00006ac8 00006b08              .j...j...k..

0000b6b8 <_tcc_intflag>:
    b6b8:	00000001 00000002 00000004 00000008     ................
    b6c8:	00001000 00002000 00004000 00008000     ..... ...@......
    b6d8:	00010000 00020000 00040000 00080000     ................
    b6e8:	0a0d0a0d 2d2d2d2d 4553452d 20363135     ....-----ESE516 
    b6f8:	6e69614d 6f725020 6d617267 2d2d2d2d     Main Program----
    b708:	000a0d2d 0a0d0a0d 74696e49 696c6169     -.......Initiali
    b718:	4820657a 2e2e2e57 00000a0d 6f727245     ze HW.......Erro
    b728:	6e692072 61697469 697a696c 4920676e     r initializing I
    b738:	44204332 65766972 0a0d2172 00000000     2C Driver!......
    b748:	74696e49 696c6169 2064657a 20433249     Initialized I2C 
    b758:	76697244 0d217265 0000000a 74696e49     Driver!.....Init
    b768:	696c6169 2064657a 73656553 0d217761     ialized Seesaw!.
    b778:	0000000a 36454d42 49203038 7265746e     ....BME680 Inter
    b788:	65636166 696e4920 6c616974 74617a69     face Initializat
    b798:	206e6f69 6c696146 0d216465 0000000a     ion Failed!.....
    b7a8:	36454d42 49203038 6974696e 52206c61     BME680 Initial R
    b7b8:	72206765 2f646165 74697277 61662065     eg read/write fa
    b7c8:	64656c69 000a0d21 6e6e6143 6620746f     iled!...Cannot f
    b7d8:	20646e69 21554d49 00000a0d 20554d49     ind IMU!....IMU 
    b7e8:	6e756f66 0a0d2164 00000000 20554d49     found!......IMU 
    b7f8:	74696e69 696c6169 2164657a 00000a0d     initialized!....
    b808:	6c756f43 6f6e2064 6e692074 61697469     Could not initia
    b818:	657a696c 554d4920 00000a0d 70616548     lize IMU....Heap
    b828:	66656220 2065726f 72617473 676e6974      before starting
    b838:	73617420 203a736b 0a0d6425 00000000      tasks: %d......
    b848:	5f494c43 4b534154 00000000 3a525245     CLI_TASK....ERR:
    b858:	494c4320 73617420 6f63206b 20646c75      CLI task could 
    b868:	20746f6e 69206562 6974696e 7a696c61     not be initializ
    b878:	0d216465 0000000a 70616548 74666120     ed!.....Heap aft
    b888:	73207265 74726174 20676e69 3a494c43     er starting CLI:
    b898:	0d642520 0000000a 54204955 006b7361      %d.....UI Task.
    b8a8:	3a525245 20495520 6b736174 756f6320     ERR: UI task cou
    b8b8:	6e20646c 6220746f 6e692065 61697469     ld not be initia
    b8c8:	657a696c 0a0d2164 00000000 70616548     lized!......Heap
    b8d8:	74666120 73207265 74726174 20676e69      after starting 
    b8e8:	54204955 3a6b7361 0d642520 0000000a     UI Task: %d.....
    b8f8:	6f727245 6e6f2072 6d656d20 2079726f     Error on memory 
    b908:	6f6c6c61 69746163 6f206e6f 5246206e     allocation on FR
    b918:	54524545 0d21534f 0000000a 6f727245     EERTOS!.....Erro
    b928:	6e6f2072 61747320 6f206b63 66726576     r on stack overf
    b938:	20776f6c 46206e6f 52454552 21534f54     low on FREERTOS!
    b948:	00000a0d 00007814 000077e4 000077f6     .....x...w...w..
    b958:	00007738 000077f6 000077da 000077f6     8w...w...w...w..
    b968:	00007738 000077e4 000077e4 000077da     8w...w...w...w..
    b978:	00007738 00007740 00007740 00007740     8w..@w..@w..@w..
    b988:	000077fc 000077e4 000077e4 000077b8     .w...w...w...w..
    b998:	0000789c 000077b8 000077da 000077b8     .x...w...w...w..
    b9a8:	0000789c 000077e4 000077e4 000077da     .x...w...w...w..
    b9b8:	0000789c 00007740 00007740 00007740     .x..@w..@w..@w..
    b9c8:	000078a6 00007b94 00007ae4 00007ae4     .x...{...z...z..
    b9d8:	00007ae2 00007b86 00007b86 00007b7c     .z...{...{..|{..
    b9e8:	00007ae2 00007b86 00007b7c 00007b86     .z...{..|{...{..
    b9f8:	00007ae2 00007b8c 00007b8c 00007b8c     .z...{...{...{..
    ba08:	00007c1c 00008964 00008946 00008900     .|..d...F.......
    ba18:	0000881e 00008900 00008938 00008900     ........8.......
    ba28:	0000881e 00008946 00008946 00008938     ....F...F...8...
    ba38:	0000881e 00008816 00008816 00008816     ................
    ba48:	00008b7c 00008fc4 00008e84 00008e84     |...............
    ba58:	00008e80 00008f9c 00008f9c 00008f8e     ................
    ba68:	00008e80 00008f9c 00008f8e 00008f9c     ................
    ba78:	00008e80 00008fa4 00008fa4 00008fa4     ................
    ba88:	000091a8 4f500043 00584953 2d23002e     ....C.POSIX...#-
    ba98:	00202b30 004c6c68 45676665 30004746     0+ .hlL.efgEFG.0
    baa8:	34333231 38373635 43424139 00464544     123456789ABCDEF.
    bab8:	33323130 37363534 62613938 66656463     0123456789abcdef
	...

0000bac9 <_ctype_>:
    bac9:	20202000 20202020 28282020 20282828     .         ((((( 
    bad9:	20202020 20202020 20202020 20202020                     
    bae9:	10108820 10101010 10101010 10101010      ...............
    baf9:	04040410 04040404 10040404 10101010     ................
    bb09:	41411010 41414141 01010101 01010101     ..AAAAAA........
    bb19:	01010101 01010101 01010101 10101010     ................
    bb29:	42421010 42424242 02020202 02020202     ..BBBBBB........
    bb39:	02020202 02020202 02020202 10101010     ................
    bb49:	00000020 00000000 00000000 00000000      ...............
	...

0000bbcc <_init>:
    bbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbce:	46c0      	nop			; (mov r8, r8)
    bbd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    bbd2:	bc08      	pop	{r3}
    bbd4:	469e      	mov	lr, r3
    bbd6:	4770      	bx	lr

0000bbd8 <__init_array_start>:
    bbd8:	000000dd 	.word	0x000000dd

0000bbdc <_fini>:
    bbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbde:	46c0      	nop			; (mov r8, r8)
    bbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    bbe2:	bc08      	pop	{r3}
    bbe4:	469e      	mov	lr, r3
    bbe6:	4770      	bx	lr

0000bbe8 <__fini_array_start>:
    bbe8:	000000b5 	.word	0x000000b5
