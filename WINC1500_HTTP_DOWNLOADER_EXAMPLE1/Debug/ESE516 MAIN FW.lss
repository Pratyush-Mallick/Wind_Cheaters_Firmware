
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000efc0  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000270  20000000  0000efc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004c94  20000270  0000f230  00020270  2**2
                  ALLOC
  3 .stack        00002004  20004f04  00013ec4  00020270  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
  6 .debug_info   0007ea0f  00000000  00000000  000202f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000096da  00000000  00000000  0009ed00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00028526  00000000  00000000  000a83da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001ca8  00000000  00000000  000d0900  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000023b8  00000000  00000000  000d25a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000274d9  00000000  00000000  000d4960  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00026eba  00000000  00000000  000fbe39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000b00d0  00000000  00000000  00122cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000066fc  00000000  00000000  001d2dc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	08 6f 00 20 d5 84 00 00 b9 84 00 00 b9 84 00 00     .o. ............
	...
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
		if (time.hour == 0) {
      2c:	95 42 00 00 00 00 00 00 00 00 00 00 71 43 00 00     .B..........qC..
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      3c:	b5 43 00 00 b9 84 00 00 b9 84 00 00 b9 84 00 00     .C..............
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
      4c:	3d 6e 00 00 41 6d 00 00 b9 84 00 00 b9 84 00 00     =n..Am..........
			time.hour = 12;
      5c:	b9 84 00 00 b9 84 00 00 65 72 00 00 75 72 00 00     ........er..ur..
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
			}
			module->clock_24h = false;
      6c:	85 72 00 00 95 72 00 00 a5 72 00 00 b5 72 00 00     .r...r...r...r..
		/* Change value in configuration structure. */
		module->clock_24h = true;
	}

	/* Disable RTC so new configuration can be set. */
	rtc_calendar_disable(module);
      7c:	89 84 00 00 99 84 00 00 a9 84 00 00 d1 2e 00 00     ................

	/* Toggle mode. */
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;

	/* Enable RTC. */
	rtc_calendar_enable(module);
      8c:	e1 2e 00 00 f1 2e 00 00 00 00 00 00 00 00 00 00     ................
		if (time.pm == 1) {
      9c:	b9 84 00 00 b9 84 00 00 b9 84 00 00 b9 84 00 00     ................
			time.pm = 0;
      ac:	b9 84 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
			if (alarm.time.pm == 1) {
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
			} else if (alarm.time.hour == 12) {
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
		module->clock_24h = true;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
		} else if (time.hour == 12) {
      ce:	bd10      	pop	{r4, pc}
      d0:	20000270 	.word	0x20000270
      d4:	00000000 	.word	0x00000000
			time.hour = 0;
      d8:	0000efc0 	.word	0x0000efc0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
				alarm.time.hour = alarm.time.hour + 12;
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
				alarm.time.pm = 0;
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
				module->clock_24h = true;
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
				alarm.time.hour = 0;
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000274 	.word	0x20000274
     108:	0000efc0 	.word	0x0000efc0
     10c:	0000efc0 	.word	0x0000efc0
     110:	00000000 	.word	0x00000000

00000114 <FS3000_isConnected>:
    //return (i2c_tools_endTransmission() == 0);
	//packet.data_length = 0;
	//return i2c_master_read_packet_job(module, &packet);
	
	int32_t error;
	airflow.lenIn = 0;
     114:	4b04      	ldr	r3, [pc, #16]	; (128 <FS3000_isConnected+0x14>)
     116:	2200      	movs	r2, #0
     118:	819a      	strh	r2, [r3, #12]
	airflow.msgIn = _buff;
     11a:	4904      	ldr	r1, [pc, #16]	; (12c <FS3000_isConnected+0x18>)
     11c:	6099      	str	r1, [r3, #8]
	
	airflow.address = FS3000_DEVICE_ADDRESS;
     11e:	2028      	movs	r0, #40	; 0x28
     120:	7018      	strb	r0, [r3, #0]
	airflow.msgOut = _buff;
     122:	6059      	str	r1, [r3, #4]
	airflow.lenOut = 0;
     124:	81da      	strh	r2, [r3, #14]
	
	//return I2cReadDataWait(&airflow, 0, 100);
}
     126:	4770      	bx	lr
     128:	200038c4 	.word	0x200038c4
     12c:	2000028c 	.word	0x2000028c

00000130 <FS3000_begin>:
{
     130:	b510      	push	{r4, lr}
    return FS3000_isConnected();
     132:	4b01      	ldr	r3, [pc, #4]	; (138 <FS3000_begin+0x8>)
     134:	4798      	blx	r3
}
     136:	bd10      	pop	{r4, pc}
     138:	00000115 	.word	0x00000115

0000013c <FS3000_readData>:
}

/*************************** READ DATA *************************/
/*                Read 5 bytes from sensor, put it at a pointer (given as argument)                  */
void FS3000_readData(uint8_t *buffer_in)
{
     13c:	b500      	push	{lr}
     13e:	b083      	sub	sp, #12
	
	//packet.data = buffer_in;
	//packet.data_length = 5;
	//packet.high_speed = true;
	//error = i2c_master_read_packet_job(module, &packet);
	uint8_t reg_add = 0;
     140:	466b      	mov	r3, sp
     142:	2200      	movs	r2, #0
     144:	71da      	strb	r2, [r3, #7]
     146:	3307      	adds	r3, #7
	
	airflow.address = FS3000_DEVICE_ADDRESS;
     148:	4807      	ldr	r0, [pc, #28]	; (168 <FS3000_readData+0x2c>)
     14a:	3228      	adds	r2, #40	; 0x28
     14c:	7002      	strb	r2, [r0, #0]
	airflow.lenIn = 5;
     14e:	3a23      	subs	r2, #35	; 0x23
     150:	8182      	strh	r2, [r0, #12]
	airflow.msgIn = _buff;
     152:	4a06      	ldr	r2, [pc, #24]	; (16c <FS3000_readData+0x30>)
     154:	6082      	str	r2, [r0, #8]
	
	//airflow.address = FS3000_DEVICE_ADDRESS;
	airflow.msgOut = &reg_add;
     156:	6043      	str	r3, [r0, #4]
	airflow.lenOut = 1;
     158:	2301      	movs	r3, #1
     15a:	81c3      	strh	r3, [r0, #14]
	
	return I2cOnlyReadWait(&airflow, 1000); //I2cReadDataWait(&airflow, 0, 100);
     15c:	21fa      	movs	r1, #250	; 0xfa
     15e:	0089      	lsls	r1, r1, #2
     160:	4b03      	ldr	r3, [pc, #12]	; (170 <FS3000_readData+0x34>)
     162:	4798      	blx	r3
    //while (i2c_tools_available())
    //{
        //buffer_in[i] = i2c_tools_read(); // Receive Byte
        //i += 1;
    //}
}
     164:	b003      	add	sp, #12
     166:	bd00      	pop	{pc}
     168:	200038c4 	.word	0x200038c4
     16c:	2000028c 	.word	0x2000028c
     170:	000021c1 	.word	0x000021c1

00000174 <FS3000_readRaw>:
{
     174:	b510      	push	{r4, lr}
    FS3000_readData(_buff);
     176:	4c05      	ldr	r4, [pc, #20]	; (18c <FS3000_readRaw+0x18>)
     178:	0020      	movs	r0, r4
     17a:	4b05      	ldr	r3, [pc, #20]	; (190 <FS3000_readRaw+0x1c>)
     17c:	4798      	blx	r3
    uint8_t data_high_byte = _buff[1];
     17e:	7863      	ldrb	r3, [r4, #1]
    airflowRaw |= (data_high_byte << 8);
     180:	200f      	movs	r0, #15
     182:	4018      	ands	r0, r3
     184:	0200      	lsls	r0, r0, #8
     186:	78a3      	ldrb	r3, [r4, #2]
    return airflowRaw;
     188:	4318      	orrs	r0, r3
}
     18a:	bd10      	pop	{r4, pc}
     18c:	2000028c 	.word	0x2000028c
     190:	0000013d 	.word	0x0000013d

00000194 <FS3000_readMetersPerSecond>:
{
     194:	b5f0      	push	{r4, r5, r6, r7, lr}
     196:	46ce      	mov	lr, r9
     198:	b500      	push	{lr}
     19a:	b082      	sub	sp, #8
    int airflowRaw = FS3000_readRaw();
     19c:	4b26      	ldr	r3, [pc, #152]	; (238 <FS3000_readMetersPerSecond+0xa4>)
     19e:	4798      	blx	r3
     1a0:	0004      	movs	r4, r0
    if (_range == AIRFLOW_RANGE_7_MPS)
     1a2:	4b26      	ldr	r3, [pc, #152]	; (23c <FS3000_readMetersPerSecond+0xa8>)
     1a4:	781f      	ldrb	r7, [r3, #0]
    uint8_t dataPointsNum = 9; // Default to FS3000_1005 AIRFLOW_RANGE_7_MPS
     1a6:	2109      	movs	r1, #9
    else if (_range == AIRFLOW_RANGE_15_MPS)
     1a8:	2f01      	cmp	r7, #1
     1aa:	d003      	beq.n	1b4 <FS3000_readMetersPerSecond+0x20>
    for (int i = 0; i < dataPointsNum; i++) // cound be an array of datapoints 9 or 13 long...
     1ac:	2300      	movs	r3, #0
     1ae:	2600      	movs	r6, #0
        if (airflowRaw > _rawDataPoint[i])
     1b0:	4d23      	ldr	r5, [pc, #140]	; (240 <FS3000_readMetersPerSecond+0xac>)
     1b2:	e004      	b.n	1be <FS3000_readMetersPerSecond+0x2a>
        dataPointsNum = 13;
     1b4:	3104      	adds	r1, #4
     1b6:	e7f9      	b.n	1ac <FS3000_readMetersPerSecond+0x18>
    for (int i = 0; i < dataPointsNum; i++) // cound be an array of datapoints 9 or 13 long...
     1b8:	3301      	adds	r3, #1
     1ba:	428b      	cmp	r3, r1
     1bc:	da05      	bge.n	1ca <FS3000_readMetersPerSecond+0x36>
        if (airflowRaw > _rawDataPoint[i])
     1be:	009a      	lsls	r2, r3, #2
     1c0:	5952      	ldr	r2, [r2, r5]
     1c2:	4294      	cmp	r4, r2
     1c4:	ddf8      	ble.n	1b8 <FS3000_readMetersPerSecond+0x24>
     1c6:	001e      	movs	r6, r3
     1c8:	e7f6      	b.n	1b8 <FS3000_readMetersPerSecond+0x24>
    if (airflowRaw <= 409)
     1ca:	239a      	movs	r3, #154	; 0x9a
     1cc:	33ff      	adds	r3, #255	; 0xff
     1ce:	429c      	cmp	r4, r3
     1d0:	dd2c      	ble.n	22c <FS3000_readMetersPerSecond+0x98>
    if (airflowRaw >= 3686)
     1d2:	4b1c      	ldr	r3, [pc, #112]	; (244 <FS3000_readMetersPerSecond+0xb0>)
     1d4:	429c      	cmp	r4, r3
     1d6:	dd03      	ble.n	1e0 <FS3000_readMetersPerSecond+0x4c>
        if (_range == AIRFLOW_RANGE_7_MPS)
     1d8:	2f00      	cmp	r7, #0
     1da:	d029      	beq.n	230 <FS3000_readMetersPerSecond+0x9c>
        if (_range == AIRFLOW_RANGE_15_MPS)
     1dc:	2f01      	cmp	r7, #1
     1de:	d029      	beq.n	234 <FS3000_readMetersPerSecond+0xa0>
    int window_size = (_rawDataPoint[data_position + 1] - _rawDataPoint[data_position]);
     1e0:	1c74      	adds	r4, r6, #1
     1e2:	4b17      	ldr	r3, [pc, #92]	; (240 <FS3000_readMetersPerSecond+0xac>)
     1e4:	4699      	mov	r9, r3
     1e6:	00b6      	lsls	r6, r6, #2
     1e8:	58f5      	ldr	r5, [r6, r3]
    float window_size_mps = (_mpsDataPoint[data_position + 1] - _mpsDataPoint[data_position]);
     1ea:	4f17      	ldr	r7, [pc, #92]	; (248 <FS3000_readMetersPerSecond+0xb4>)
     1ec:	59f3      	ldr	r3, [r6, r7]
     1ee:	9300      	str	r3, [sp, #0]
    int diff = (airflowRaw - _rawDataPoint[data_position]);
     1f0:	1b40      	subs	r0, r0, r5
    float percentage_of_window = ((float)diff / (float)window_size);
     1f2:	4e16      	ldr	r6, [pc, #88]	; (24c <FS3000_readMetersPerSecond+0xb8>)
     1f4:	47b0      	blx	r6
     1f6:	9001      	str	r0, [sp, #4]
    int window_size = (_rawDataPoint[data_position + 1] - _rawDataPoint[data_position]);
     1f8:	00a4      	lsls	r4, r4, #2
     1fa:	464a      	mov	r2, r9
     1fc:	58a0      	ldr	r0, [r4, r2]
     1fe:	1b40      	subs	r0, r0, r5
    float percentage_of_window = ((float)diff / (float)window_size);
     200:	47b0      	blx	r6
     202:	1c01      	adds	r1, r0, #0
     204:	9801      	ldr	r0, [sp, #4]
     206:	4b12      	ldr	r3, [pc, #72]	; (250 <FS3000_readMetersPerSecond+0xbc>)
     208:	4798      	blx	r3
     20a:	1c06      	adds	r6, r0, #0
    float window_size_mps = (_mpsDataPoint[data_position + 1] - _mpsDataPoint[data_position]);
     20c:	9d00      	ldr	r5, [sp, #0]
     20e:	1c29      	adds	r1, r5, #0
     210:	59e0      	ldr	r0, [r4, r7]
     212:	4b10      	ldr	r3, [pc, #64]	; (254 <FS3000_readMetersPerSecond+0xc0>)
     214:	4798      	blx	r3
     216:	1c01      	adds	r1, r0, #0
    airflowMps = _mpsDataPoint[data_position] + (window_size_mps * percentage_of_window);
     218:	1c30      	adds	r0, r6, #0
     21a:	4b0f      	ldr	r3, [pc, #60]	; (258 <FS3000_readMetersPerSecond+0xc4>)
     21c:	4798      	blx	r3
     21e:	1c29      	adds	r1, r5, #0
     220:	4b0e      	ldr	r3, [pc, #56]	; (25c <FS3000_readMetersPerSecond+0xc8>)
     222:	4798      	blx	r3
}
     224:	b002      	add	sp, #8
     226:	bc04      	pop	{r2}
     228:	4691      	mov	r9, r2
     22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 0;
     22c:	2000      	movs	r0, #0
     22e:	e7f9      	b.n	224 <FS3000_readMetersPerSecond+0x90>
            return 7.23;
     230:	480b      	ldr	r0, [pc, #44]	; (260 <FS3000_readMetersPerSecond+0xcc>)
     232:	e7f7      	b.n	224 <FS3000_readMetersPerSecond+0x90>
            return 15.00;
     234:	480b      	ldr	r0, [pc, #44]	; (264 <FS3000_readMetersPerSecond+0xd0>)
     236:	e7f5      	b.n	224 <FS3000_readMetersPerSecond+0x90>
     238:	00000175 	.word	0x00000175
     23c:	20000291 	.word	0x20000291
     240:	20000034 	.word	0x20000034
     244:	00000e65 	.word	0x00000e65
     248:	20000000 	.word	0x20000000
     24c:	0000bc29 	.word	0x0000bc29
     250:	0000b291 	.word	0x0000b291
     254:	0000b8b1 	.word	0x0000b8b1
     258:	0000b671 	.word	0x0000b671
     25c:	0000af6d 	.word	0x0000af6d
     260:	40e75c29 	.word	0x40e75c29
     264:	41700000 	.word	0x41700000

00000268 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     268:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     26a:	2207      	movs	r2, #7
     26c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     26e:	421a      	tst	r2, r3
     270:	d1fc      	bne.n	26c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     272:	4770      	bx	lr

00000274 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     274:	b570      	push	{r4, r5, r6, lr}
     276:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     278:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     27a:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     27c:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     27e:	8b83      	ldrh	r3, [r0, #28]
     280:	1aed      	subs	r5, r5, r3
     282:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     284:	8b83      	ldrh	r3, [r0, #28]
     286:	3b01      	subs	r3, #1
     288:	b29b      	uxth	r3, r3
     28a:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     28c:	0113      	lsls	r3, r2, #4
     28e:	d51d      	bpl.n	2cc <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     290:	7ac3      	ldrb	r3, [r0, #11]
     292:	2b00      	cmp	r3, #0
     294:	d003      	beq.n	29e <_i2c_master_read+0x2a>
     296:	8b83      	ldrh	r3, [r0, #28]
     298:	b29b      	uxth	r3, r3
     29a:	2b01      	cmp	r3, #1
     29c:	d010      	beq.n	2c0 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     29e:	8ba3      	ldrh	r3, [r4, #28]
     2a0:	b29b      	uxth	r3, r3
     2a2:	2b00      	cmp	r3, #0
     2a4:	d102      	bne.n	2ac <_i2c_master_read+0x38>
		if (module->send_stop) {
     2a6:	7aa3      	ldrb	r3, [r4, #10]
     2a8:	2b00      	cmp	r3, #0
     2aa:	d11c      	bne.n	2e6 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     2ac:	0020      	movs	r0, r4
     2ae:	4b12      	ldr	r3, [pc, #72]	; (2f8 <_i2c_master_read+0x84>)
     2b0:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     2b2:	6a23      	ldr	r3, [r4, #32]
     2b4:	195d      	adds	r5, r3, r5
     2b6:	2328      	movs	r3, #40	; 0x28
     2b8:	5cf3      	ldrb	r3, [r6, r3]
     2ba:	b2db      	uxtb	r3, r3
     2bc:	702b      	strb	r3, [r5, #0]
}
     2be:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     2c0:	6872      	ldr	r2, [r6, #4]
     2c2:	2380      	movs	r3, #128	; 0x80
     2c4:	02db      	lsls	r3, r3, #11
     2c6:	4313      	orrs	r3, r2
     2c8:	6073      	str	r3, [r6, #4]
     2ca:	e7e8      	b.n	29e <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     2cc:	7ac3      	ldrb	r3, [r0, #11]
     2ce:	2b00      	cmp	r3, #0
     2d0:	d0e5      	beq.n	29e <_i2c_master_read+0x2a>
     2d2:	8b83      	ldrh	r3, [r0, #28]
     2d4:	b29b      	uxth	r3, r3
     2d6:	2b00      	cmp	r3, #0
     2d8:	d1e1      	bne.n	29e <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     2da:	6872      	ldr	r2, [r6, #4]
     2dc:	2380      	movs	r3, #128	; 0x80
     2de:	02db      	lsls	r3, r3, #11
     2e0:	4313      	orrs	r3, r2
     2e2:	6073      	str	r3, [r6, #4]
     2e4:	e7db      	b.n	29e <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     2e6:	0020      	movs	r0, r4
     2e8:	4b03      	ldr	r3, [pc, #12]	; (2f8 <_i2c_master_read+0x84>)
     2ea:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     2ec:	6872      	ldr	r2, [r6, #4]
     2ee:	23c0      	movs	r3, #192	; 0xc0
     2f0:	029b      	lsls	r3, r3, #10
     2f2:	4313      	orrs	r3, r2
     2f4:	6073      	str	r3, [r6, #4]
     2f6:	e7d9      	b.n	2ac <_i2c_master_read+0x38>
     2f8:	00000269 	.word	0x00000269

000002fc <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     2fc:	b570      	push	{r4, r5, r6, lr}
     2fe:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     300:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     302:	8b6b      	ldrh	r3, [r5, #26]
     304:	075b      	lsls	r3, r3, #29
     306:	d503      	bpl.n	310 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     308:	221e      	movs	r2, #30
     30a:	2325      	movs	r3, #37	; 0x25
     30c:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     30e:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     310:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     312:	8b83      	ldrh	r3, [r0, #28]
     314:	1af6      	subs	r6, r6, r3
     316:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     318:	8b83      	ldrh	r3, [r0, #28]
     31a:	3b01      	subs	r3, #1
     31c:	b29b      	uxth	r3, r3
     31e:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     320:	4b04      	ldr	r3, [pc, #16]	; (334 <_i2c_master_write+0x38>)
     322:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     324:	6a23      	ldr	r3, [r4, #32]
     326:	199e      	adds	r6, r3, r6
     328:	7833      	ldrb	r3, [r6, #0]
     32a:	b2db      	uxtb	r3, r3
     32c:	2228      	movs	r2, #40	; 0x28
     32e:	54ab      	strb	r3, [r5, r2]
     330:	e7ed      	b.n	30e <_i2c_master_write+0x12>
     332:	46c0      	nop			; (mov r8, r8)
     334:	00000269 	.word	0x00000269

00000338 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     338:	b570      	push	{r4, r5, r6, lr}
     33a:	0005      	movs	r5, r0
     33c:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     33e:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     340:	7a4b      	ldrb	r3, [r1, #9]
     342:	2b00      	cmp	r3, #0
     344:	d11a      	bne.n	37c <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     346:	6873      	ldr	r3, [r6, #4]
     348:	4a13      	ldr	r2, [pc, #76]	; (398 <_i2c_master_write_packet+0x60>)
     34a:	4013      	ands	r3, r2
     34c:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     34e:	6863      	ldr	r3, [r4, #4]
     350:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     352:	8863      	ldrh	r3, [r4, #2]
     354:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     356:	2200      	movs	r2, #0
     358:	2324      	movs	r3, #36	; 0x24
     35a:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     35c:	3205      	adds	r2, #5
     35e:	3301      	adds	r3, #1
     360:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     362:	3b22      	subs	r3, #34	; 0x22
     364:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     366:	7a23      	ldrb	r3, [r4, #8]
     368:	2b00      	cmp	r3, #0
     36a:	d10b      	bne.n	384 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     36c:	8823      	ldrh	r3, [r4, #0]
     36e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     370:	7a62      	ldrb	r2, [r4, #9]
     372:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     374:	4313      	orrs	r3, r2
     376:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     378:	2000      	movs	r0, #0
     37a:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     37c:	7a89      	ldrb	r1, [r1, #10]
     37e:	4b07      	ldr	r3, [pc, #28]	; (39c <_i2c_master_write_packet+0x64>)
     380:	4798      	blx	r3
     382:	e7e0      	b.n	346 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     384:	8823      	ldrh	r3, [r4, #0]
     386:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     388:	7a62      	ldrb	r2, [r4, #9]
     38a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     38c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     38e:	2280      	movs	r2, #128	; 0x80
     390:	0212      	lsls	r2, r2, #8
     392:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     394:	6273      	str	r3, [r6, #36]	; 0x24
     396:	e7ef      	b.n	378 <_i2c_master_write_packet+0x40>
     398:	fffbffff 	.word	0xfffbffff
     39c:	00002e4d 	.word	0x00002e4d

000003a0 <_i2c_master_read_packet>:
{
     3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3a2:	0005      	movs	r5, r0
     3a4:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3a6:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
     3a8:	684b      	ldr	r3, [r1, #4]
     3aa:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     3ac:	884b      	ldrh	r3, [r1, #2]
     3ae:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     3b0:	2201      	movs	r2, #1
     3b2:	2324      	movs	r3, #36	; 0x24
     3b4:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     3b6:	3204      	adds	r2, #4
     3b8:	3301      	adds	r3, #1
     3ba:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     3bc:	6837      	ldr	r7, [r6, #0]
     3be:	013f      	lsls	r7, r7, #4
     3c0:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
     3c2:	7a4b      	ldrb	r3, [r1, #9]
     3c4:	2b00      	cmp	r3, #0
     3c6:	d117      	bne.n	3f8 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
     3c8:	2f00      	cmp	r7, #0
     3ca:	d002      	beq.n	3d2 <_i2c_master_read_packet+0x32>
     3cc:	8863      	ldrh	r3, [r4, #2]
     3ce:	2b01      	cmp	r3, #1
     3d0:	d016      	beq.n	400 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     3d2:	6873      	ldr	r3, [r6, #4]
     3d4:	4a20      	ldr	r2, [pc, #128]	; (458 <_i2c_master_read_packet+0xb8>)
     3d6:	4013      	ands	r3, r2
     3d8:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
     3da:	7a23      	ldrb	r3, [r4, #8]
     3dc:	2b00      	cmp	r3, #0
     3de:	d115      	bne.n	40c <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
     3e0:	2303      	movs	r3, #3
     3e2:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     3e4:	8823      	ldrh	r3, [r4, #0]
     3e6:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     3e8:	7a62      	ldrb	r2, [r4, #9]
     3ea:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     3ec:	4313      	orrs	r3, r2
     3ee:	2201      	movs	r2, #1
     3f0:	4313      	orrs	r3, r2
     3f2:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
     3f4:	2000      	movs	r0, #0
}
     3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     3f8:	7a89      	ldrb	r1, [r1, #10]
     3fa:	4b18      	ldr	r3, [pc, #96]	; (45c <_i2c_master_read_packet+0xbc>)
     3fc:	4798      	blx	r3
     3fe:	e7e3      	b.n	3c8 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     400:	6872      	ldr	r2, [r6, #4]
     402:	2380      	movs	r3, #128	; 0x80
     404:	02db      	lsls	r3, r3, #11
     406:	4313      	orrs	r3, r2
     408:	6073      	str	r3, [r6, #4]
     40a:	e7e6      	b.n	3da <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     40c:	8823      	ldrh	r3, [r4, #0]
     40e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     410:	7a62      	ldrb	r2, [r4, #9]
     412:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     414:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     416:	2280      	movs	r2, #128	; 0x80
     418:	0212      	lsls	r2, r2, #8
     41a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     41c:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     41e:	0028      	movs	r0, r5
     420:	4b0f      	ldr	r3, [pc, #60]	; (460 <_i2c_master_read_packet+0xc0>)
     422:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     424:	6873      	ldr	r3, [r6, #4]
     426:	4a0c      	ldr	r2, [pc, #48]	; (458 <_i2c_master_read_packet+0xb8>)
     428:	4013      	ands	r3, r2
     42a:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     42c:	2800      	cmp	r0, #0
     42e:	d1e2      	bne.n	3f6 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     430:	0028      	movs	r0, r5
     432:	4b0c      	ldr	r3, [pc, #48]	; (464 <_i2c_master_read_packet+0xc4>)
     434:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     436:	2800      	cmp	r0, #0
     438:	d1dd      	bne.n	3f6 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     43a:	2303      	movs	r3, #3
     43c:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     43e:	8823      	ldrh	r3, [r4, #0]
     440:	0a1b      	lsrs	r3, r3, #8
     442:	2278      	movs	r2, #120	; 0x78
     444:	4313      	orrs	r3, r2
     446:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     448:	7a62      	ldrb	r2, [r4, #9]
     44a:	0392      	lsls	r2, r2, #14
     44c:	2101      	movs	r1, #1
     44e:	430a      	orrs	r2, r1
     450:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     452:	6273      	str	r3, [r6, #36]	; 0x24
     454:	e7cf      	b.n	3f6 <_i2c_master_read_packet+0x56>
     456:	46c0      	nop			; (mov r8, r8)
     458:	fffbffff 	.word	0xfffbffff
     45c:	00002e4d 	.word	0x00002e4d
     460:	00002e21 	.word	0x00002e21
     464:	00002df1 	.word	0x00002df1

00000468 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     468:	1c93      	adds	r3, r2, #2
     46a:	009b      	lsls	r3, r3, #2
     46c:	18c3      	adds	r3, r0, r3
     46e:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     470:	7e03      	ldrb	r3, [r0, #24]
     472:	2101      	movs	r1, #1
     474:	4091      	lsls	r1, r2
     476:	430b      	orrs	r3, r1
     478:	b2db      	uxtb	r3, r3
     47a:	7603      	strb	r3, [r0, #24]
}
     47c:	4770      	bx	lr
	...

00000480 <i2c_master_read_packet_job>:
{
     480:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     482:	8b83      	ldrh	r3, [r0, #28]
     484:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     486:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     488:	2b00      	cmp	r3, #0
     48a:	d001      	beq.n	490 <i2c_master_read_packet_job+0x10>
}
     48c:	0010      	movs	r0, r2
     48e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     490:	3301      	adds	r3, #1
     492:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     494:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     496:	4b02      	ldr	r3, [pc, #8]	; (4a0 <i2c_master_read_packet_job+0x20>)
     498:	4798      	blx	r3
     49a:	0002      	movs	r2, r0
     49c:	e7f6      	b.n	48c <i2c_master_read_packet_job+0xc>
     49e:	46c0      	nop			; (mov r8, r8)
     4a0:	000003a1 	.word	0x000003a1

000004a4 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     4a4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     4a6:	8b83      	ldrh	r3, [r0, #28]
     4a8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     4aa:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     4ac:	2b00      	cmp	r3, #0
     4ae:	d001      	beq.n	4b4 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     4b0:	0010      	movs	r0, r2
     4b2:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     4b4:	3301      	adds	r3, #1
     4b6:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     4b8:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     4ba:	4b02      	ldr	r3, [pc, #8]	; (4c4 <i2c_master_write_packet_job+0x20>)
     4bc:	4798      	blx	r3
     4be:	0002      	movs	r2, r0
     4c0:	e7f6      	b.n	4b0 <i2c_master_write_packet_job+0xc>
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	00000339 	.word	0x00000339

000004c8 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     4c8:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     4ca:	0080      	lsls	r0, r0, #2
     4cc:	4b75      	ldr	r3, [pc, #468]	; (6a4 <_i2c_master_interrupt_handler+0x1dc>)
     4ce:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4d0:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     4d2:	682b      	ldr	r3, [r5, #0]
     4d4:	011b      	lsls	r3, r3, #4
     4d6:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     4d8:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     4da:	7e26      	ldrb	r6, [r4, #24]
     4dc:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     4de:	8b63      	ldrh	r3, [r4, #26]
     4e0:	b29b      	uxth	r3, r3
     4e2:	2b00      	cmp	r3, #0
     4e4:	d103      	bne.n	4ee <_i2c_master_interrupt_handler+0x26>
     4e6:	8ba3      	ldrh	r3, [r4, #28]
     4e8:	b29b      	uxth	r3, r3
     4ea:	2b00      	cmp	r3, #0
     4ec:	d123      	bne.n	536 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     4ee:	8b63      	ldrh	r3, [r4, #26]
     4f0:	b29b      	uxth	r3, r3
     4f2:	2b00      	cmp	r3, #0
     4f4:	d008      	beq.n	508 <_i2c_master_interrupt_handler+0x40>
     4f6:	8ba3      	ldrh	r3, [r4, #28]
     4f8:	b29b      	uxth	r3, r3
     4fa:	2b00      	cmp	r3, #0
     4fc:	d104      	bne.n	508 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     4fe:	3325      	adds	r3, #37	; 0x25
     500:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     502:	2b05      	cmp	r3, #5
     504:	d100      	bne.n	508 <_i2c_master_interrupt_handler+0x40>
     506:	e06d      	b.n	5e4 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     508:	8b63      	ldrh	r3, [r4, #26]
     50a:	b29b      	uxth	r3, r3
     50c:	2b00      	cmp	r3, #0
     50e:	d024      	beq.n	55a <_i2c_master_interrupt_handler+0x92>
     510:	8ba3      	ldrh	r3, [r4, #28]
     512:	b29b      	uxth	r3, r3
     514:	2b00      	cmp	r3, #0
     516:	d020      	beq.n	55a <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     518:	8b6b      	ldrh	r3, [r5, #26]
     51a:	069b      	lsls	r3, r3, #26
     51c:	d500      	bpl.n	520 <_i2c_master_interrupt_handler+0x58>
     51e:	e081      	b.n	624 <_i2c_master_interrupt_handler+0x15c>
     520:	2a00      	cmp	r2, #0
     522:	d004      	beq.n	52e <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     524:	8ba3      	ldrh	r3, [r4, #28]
     526:	b29b      	uxth	r3, r3
     528:	2b01      	cmp	r3, #1
     52a:	d100      	bne.n	52e <_i2c_master_interrupt_handler+0x66>
     52c:	e07a      	b.n	624 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     52e:	2241      	movs	r2, #65	; 0x41
     530:	2325      	movs	r3, #37	; 0x25
     532:	54e2      	strb	r2, [r4, r3]
     534:	e011      	b.n	55a <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     536:	7e2b      	ldrb	r3, [r5, #24]
     538:	07db      	lsls	r3, r3, #31
     53a:	d507      	bpl.n	54c <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     53c:	2301      	movs	r3, #1
     53e:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     540:	8b6b      	ldrh	r3, [r5, #26]
     542:	079b      	lsls	r3, r3, #30
     544:	d52e      	bpl.n	5a4 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     546:	2241      	movs	r2, #65	; 0x41
     548:	2325      	movs	r3, #37	; 0x25
     54a:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     54c:	8ba3      	ldrh	r3, [r4, #28]
     54e:	b29b      	uxth	r3, r3
     550:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     552:	2325      	movs	r3, #37	; 0x25
     554:	5ce3      	ldrb	r3, [r4, r3]
     556:	2b05      	cmp	r3, #5
     558:	d038      	beq.n	5cc <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     55a:	8b63      	ldrh	r3, [r4, #26]
     55c:	b29b      	uxth	r3, r3
     55e:	2b00      	cmp	r3, #0
     560:	d007      	beq.n	572 <_i2c_master_interrupt_handler+0xaa>
     562:	8ba3      	ldrh	r3, [r4, #28]
     564:	b29b      	uxth	r3, r3
     566:	2b00      	cmp	r3, #0
     568:	d103      	bne.n	572 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     56a:	3325      	adds	r3, #37	; 0x25
     56c:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     56e:	2b05      	cmp	r3, #5
     570:	d064      	beq.n	63c <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     572:	2325      	movs	r3, #37	; 0x25
     574:	5ce3      	ldrb	r3, [r4, r3]
     576:	2b05      	cmp	r3, #5
     578:	d013      	beq.n	5a2 <_i2c_master_interrupt_handler+0xda>
     57a:	2325      	movs	r3, #37	; 0x25
     57c:	5ce3      	ldrb	r3, [r4, r3]
     57e:	2b00      	cmp	r3, #0
     580:	d00f      	beq.n	5a2 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     582:	2303      	movs	r3, #3
     584:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     586:	2300      	movs	r3, #0
     588:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     58a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     58c:	3325      	adds	r3, #37	; 0x25
     58e:	5ce3      	ldrb	r3, [r4, r3]
     590:	2b41      	cmp	r3, #65	; 0x41
     592:	d003      	beq.n	59c <_i2c_master_interrupt_handler+0xd4>
     594:	7aa3      	ldrb	r3, [r4, #10]
     596:	2b00      	cmp	r3, #0
     598:	d000      	beq.n	59c <_i2c_master_interrupt_handler+0xd4>
     59a:	e075      	b.n	688 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     59c:	0773      	lsls	r3, r6, #29
     59e:	d500      	bpl.n	5a2 <_i2c_master_interrupt_handler+0xda>
     5a0:	e07b      	b.n	69a <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     5a2:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     5a4:	8b6b      	ldrh	r3, [r5, #26]
     5a6:	075b      	lsls	r3, r3, #29
     5a8:	d5d0      	bpl.n	54c <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     5aa:	2218      	movs	r2, #24
     5ac:	2325      	movs	r3, #37	; 0x25
     5ae:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     5b0:	2300      	movs	r3, #0
     5b2:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     5b4:	7aa3      	ldrb	r3, [r4, #10]
     5b6:	2b00      	cmp	r3, #0
     5b8:	d0c8      	beq.n	54c <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     5ba:	0020      	movs	r0, r4
     5bc:	4b3a      	ldr	r3, [pc, #232]	; (6a8 <_i2c_master_interrupt_handler+0x1e0>)
     5be:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     5c0:	686a      	ldr	r2, [r5, #4]
     5c2:	23c0      	movs	r3, #192	; 0xc0
     5c4:	029b      	lsls	r3, r3, #10
     5c6:	4313      	orrs	r3, r2
     5c8:	606b      	str	r3, [r5, #4]
     5ca:	e7bf      	b.n	54c <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     5cc:	331f      	adds	r3, #31
     5ce:	5ce3      	ldrb	r3, [r4, r3]
     5d0:	2b00      	cmp	r3, #0
     5d2:	d003      	beq.n	5dc <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     5d4:	0020      	movs	r0, r4
     5d6:	4b35      	ldr	r3, [pc, #212]	; (6ac <_i2c_master_interrupt_handler+0x1e4>)
     5d8:	4798      	blx	r3
     5da:	e7be      	b.n	55a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     5dc:	0020      	movs	r0, r4
     5de:	4b34      	ldr	r3, [pc, #208]	; (6b0 <_i2c_master_interrupt_handler+0x1e8>)
     5e0:	4798      	blx	r3
     5e2:	e7ba      	b.n	55a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     5e4:	331f      	adds	r3, #31
     5e6:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     5e8:	2b00      	cmp	r3, #0
     5ea:	d000      	beq.n	5ee <_i2c_master_interrupt_handler+0x126>
     5ec:	e78c      	b.n	508 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     5ee:	3303      	adds	r3, #3
     5f0:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     5f2:	2300      	movs	r3, #0
     5f4:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     5f6:	3325      	adds	r3, #37	; 0x25
     5f8:	2200      	movs	r2, #0
     5fa:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     5fc:	7aa3      	ldrb	r3, [r4, #10]
     5fe:	2b00      	cmp	r3, #0
     600:	d107      	bne.n	612 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     602:	2301      	movs	r3, #1
     604:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     606:	07f3      	lsls	r3, r6, #31
     608:	d5a7      	bpl.n	55a <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     60a:	68e3      	ldr	r3, [r4, #12]
     60c:	0020      	movs	r0, r4
     60e:	4798      	blx	r3
     610:	e7a3      	b.n	55a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     612:	0020      	movs	r0, r4
     614:	4b24      	ldr	r3, [pc, #144]	; (6a8 <_i2c_master_interrupt_handler+0x1e0>)
     616:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     618:	686a      	ldr	r2, [r5, #4]
     61a:	23c0      	movs	r3, #192	; 0xc0
     61c:	029b      	lsls	r3, r3, #10
     61e:	4313      	orrs	r3, r2
     620:	606b      	str	r3, [r5, #4]
     622:	e7f0      	b.n	606 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     624:	2324      	movs	r3, #36	; 0x24
     626:	5ce3      	ldrb	r3, [r4, r3]
     628:	2b00      	cmp	r3, #0
     62a:	d103      	bne.n	634 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     62c:	0020      	movs	r0, r4
     62e:	4b20      	ldr	r3, [pc, #128]	; (6b0 <_i2c_master_interrupt_handler+0x1e8>)
     630:	4798      	blx	r3
     632:	e792      	b.n	55a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     634:	0020      	movs	r0, r4
     636:	4b1d      	ldr	r3, [pc, #116]	; (6ac <_i2c_master_interrupt_handler+0x1e4>)
     638:	4798      	blx	r3
     63a:	e78e      	b.n	55a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     63c:	331f      	adds	r3, #31
     63e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     640:	2b01      	cmp	r3, #1
     642:	d196      	bne.n	572 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     644:	7e2b      	ldrb	r3, [r5, #24]
     646:	079b      	lsls	r3, r3, #30
     648:	d501      	bpl.n	64e <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     64a:	2302      	movs	r3, #2
     64c:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     64e:	2303      	movs	r3, #3
     650:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     652:	2300      	movs	r3, #0
     654:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     656:	3325      	adds	r3, #37	; 0x25
     658:	2200      	movs	r2, #0
     65a:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     65c:	07b3      	lsls	r3, r6, #30
     65e:	d503      	bpl.n	668 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     660:	2324      	movs	r3, #36	; 0x24
     662:	5ce3      	ldrb	r3, [r4, r3]
     664:	2b01      	cmp	r3, #1
     666:	d00b      	beq.n	680 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     668:	07f3      	lsls	r3, r6, #31
     66a:	d400      	bmi.n	66e <_i2c_master_interrupt_handler+0x1a6>
     66c:	e781      	b.n	572 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     66e:	2324      	movs	r3, #36	; 0x24
     670:	5ce3      	ldrb	r3, [r4, r3]
     672:	2b00      	cmp	r3, #0
     674:	d000      	beq.n	678 <_i2c_master_interrupt_handler+0x1b0>
     676:	e77c      	b.n	572 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     678:	68e3      	ldr	r3, [r4, #12]
     67a:	0020      	movs	r0, r4
     67c:	4798      	blx	r3
     67e:	e778      	b.n	572 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     680:	6923      	ldr	r3, [r4, #16]
     682:	0020      	movs	r0, r4
     684:	4798      	blx	r3
     686:	e774      	b.n	572 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     688:	0020      	movs	r0, r4
     68a:	4b07      	ldr	r3, [pc, #28]	; (6a8 <_i2c_master_interrupt_handler+0x1e0>)
     68c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     68e:	686a      	ldr	r2, [r5, #4]
     690:	23e0      	movs	r3, #224	; 0xe0
     692:	02db      	lsls	r3, r3, #11
     694:	4313      	orrs	r3, r2
     696:	606b      	str	r3, [r5, #4]
     698:	e780      	b.n	59c <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     69a:	6963      	ldr	r3, [r4, #20]
     69c:	0020      	movs	r0, r4
     69e:	4798      	blx	r3
}
     6a0:	e77f      	b.n	5a2 <_i2c_master_interrupt_handler+0xda>
     6a2:	46c0      	nop			; (mov r8, r8)
     6a4:	20004e44 	.word	0x20004e44
     6a8:	00000269 	.word	0x00000269
     6ac:	00000275 	.word	0x00000275
     6b0:	000002fd 	.word	0x000002fd

000006b4 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
     6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6b6:	b083      	sub	sp, #12
     6b8:	000d      	movs	r5, r1
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
     6ba:	4c21      	ldr	r4, [pc, #132]	; (740 <calc_temperature+0x8c>)
     6bc:	47a0      	blx	r4
     6be:	1c07      	adds	r7, r0, #0
     6c0:	8be8      	ldrh	r0, [r5, #30]
     6c2:	47a0      	blx	r4
     6c4:	1c06      	adds	r6, r0, #0

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
     6c6:	4c1f      	ldr	r4, [pc, #124]	; (744 <calc_temperature+0x90>)
     6c8:	21dc      	movs	r1, #220	; 0xdc
     6ca:	0589      	lsls	r1, r1, #22
     6cc:	1c38      	adds	r0, r7, #0
     6ce:	47a0      	blx	r4
     6d0:	9001      	str	r0, [sp, #4]
     6d2:	21e4      	movs	r1, #228	; 0xe4
     6d4:	0589      	lsls	r1, r1, #22
     6d6:	9600      	str	r6, [sp, #0]
     6d8:	1c30      	adds	r0, r6, #0
     6da:	47a0      	blx	r4
     6dc:	1c01      	adds	r1, r0, #0
     6de:	4e1a      	ldr	r6, [pc, #104]	; (748 <calc_temperature+0x94>)
     6e0:	9801      	ldr	r0, [sp, #4]
     6e2:	47b0      	blx	r6
     6e4:	9001      	str	r0, [sp, #4]
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
     6e6:	21e2      	movs	r1, #226	; 0xe2
     6e8:	0589      	lsls	r1, r1, #22
     6ea:	1c38      	adds	r0, r7, #0
     6ec:	47a0      	blx	r4
     6ee:	1c07      	adds	r7, r0, #0
     6f0:	21ea      	movs	r1, #234	; 0xea
     6f2:	0589      	lsls	r1, r1, #22
     6f4:	9800      	ldr	r0, [sp, #0]
     6f6:	47a0      	blx	r4
     6f8:	1c01      	adds	r1, r0, #0
     6fa:	1c38      	adds	r0, r7, #0
     6fc:	47b0      	blx	r6
     6fe:	1c06      	adds	r6, r0, #0
     700:	2320      	movs	r3, #32
     702:	5ee8      	ldrsh	r0, [r5, r3]
     704:	4f11      	ldr	r7, [pc, #68]	; (74c <calc_temperature+0x98>)
     706:	47b8      	blx	r7
     708:	1c01      	adds	r1, r0, #0
     70a:	1c30      	adds	r0, r6, #0
     70c:	47a0      	blx	r4
     70e:	1c06      	adds	r6, r0, #0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
     710:	2322      	movs	r3, #34	; 0x22
     712:	56e8      	ldrsb	r0, [r5, r3]
     714:	47b8      	blx	r7
     716:	2183      	movs	r1, #131	; 0x83
     718:	05c9      	lsls	r1, r1, #23
     71a:	47a0      	blx	r4
     71c:	1c07      	adds	r7, r0, #0
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
     71e:	9801      	ldr	r0, [sp, #4]
     720:	1c01      	adds	r1, r0, #0
     722:	47a0      	blx	r4
     724:	1c01      	adds	r1, r0, #0
    var2 =
     726:	1c38      	adds	r0, r7, #0
     728:	47a0      	blx	r4
     72a:	1c01      	adds	r1, r0, #0

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
     72c:	1c30      	adds	r0, r6, #0
     72e:	4b08      	ldr	r3, [pc, #32]	; (750 <calc_temperature+0x9c>)
     730:	4798      	blx	r3
     732:	63a8      	str	r0, [r5, #56]	; 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
     734:	4907      	ldr	r1, [pc, #28]	; (754 <calc_temperature+0xa0>)
     736:	4b08      	ldr	r3, [pc, #32]	; (758 <calc_temperature+0xa4>)
     738:	4798      	blx	r3

    return calc_temp;
}
     73a:	b003      	add	sp, #12
     73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     73e:	46c0      	nop			; (mov r8, r8)
     740:	0000bcc9 	.word	0x0000bcc9
     744:	0000b671 	.word	0x0000b671
     748:	0000b8b1 	.word	0x0000b8b1
     74c:	0000bc29 	.word	0x0000bc29
     750:	0000af6d 	.word	0x0000af6d
     754:	45a00000 	.word	0x45a00000
     758:	0000b291 	.word	0x0000b291

0000075c <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
     75c:	b5f0      	push	{r4, r5, r6, r7, lr}
     75e:	46ce      	mov	lr, r9
     760:	b500      	push	{lr}
     762:	b084      	sub	sp, #16
     764:	9002      	str	r0, [sp, #8]
     766:	4689      	mov	r9, r1
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
     768:	4f5e      	ldr	r7, [pc, #376]	; (8e4 <calc_pressure+0x188>)
     76a:	21fc      	movs	r1, #252	; 0xfc
     76c:	0589      	lsls	r1, r1, #22
     76e:	464b      	mov	r3, r9
     770:	6b98      	ldr	r0, [r3, #56]	; 0x38
     772:	47b8      	blx	r7
     774:	495c      	ldr	r1, [pc, #368]	; (8e8 <calc_pressure+0x18c>)
     776:	4b5d      	ldr	r3, [pc, #372]	; (8ec <calc_pressure+0x190>)
     778:	4798      	blx	r3
     77a:	1c04      	adds	r4, r0, #0
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
     77c:	2328      	movs	r3, #40	; 0x28
     77e:	464a      	mov	r2, r9
     780:	56d0      	ldrsb	r0, [r2, r3]
     782:	4e5b      	ldr	r6, [pc, #364]	; (8f0 <calc_pressure+0x194>)
     784:	47b0      	blx	r6
     786:	1c21      	adds	r1, r4, #0
     788:	47b8      	blx	r7
     78a:	1c21      	adds	r1, r4, #0
     78c:	47b8      	blx	r7
     78e:	21e2      	movs	r1, #226	; 0xe2
     790:	0589      	lsls	r1, r1, #22
     792:	47b8      	blx	r7
     794:	1c05      	adds	r5, r0, #0
     796:	464b      	mov	r3, r9
     798:	2026      	movs	r0, #38	; 0x26
     79a:	5e18      	ldrsh	r0, [r3, r0]
     79c:	47b0      	blx	r6
     79e:	1c21      	adds	r1, r4, #0
     7a0:	47b8      	blx	r7
     7a2:	1c01      	adds	r1, r0, #0
     7a4:	4e53      	ldr	r6, [pc, #332]	; (8f4 <calc_pressure+0x198>)
     7a6:	1c28      	adds	r0, r5, #0
     7a8:	47b0      	blx	r6
     7aa:	21d8      	movs	r1, #216	; 0xd8
     7ac:	0589      	lsls	r1, r1, #22
     7ae:	47b8      	blx	r7
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
     7b0:	21e0      	movs	r1, #224	; 0xe0
     7b2:	0589      	lsls	r1, r1, #22
     7b4:	47b8      	blx	r7
     7b6:	21fe      	movs	r1, #254	; 0xfe
     7b8:	0589      	lsls	r1, r1, #22
     7ba:	47b0      	blx	r6
     7bc:	1c05      	adds	r5, r0, #0
     7be:	464b      	mov	r3, r9
     7c0:	8c98      	ldrh	r0, [r3, #36]	; 0x24
     7c2:	4b4d      	ldr	r3, [pc, #308]	; (8f8 <calc_pressure+0x19c>)
     7c4:	4798      	blx	r3
     7c6:	1c29      	adds	r1, r5, #0
     7c8:	47b8      	blx	r7
    calc_pres = (1048576.0f - ((float)pres_adc));

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
     7ca:	9001      	str	r0, [sp, #4]
     7cc:	4b4b      	ldr	r3, [pc, #300]	; (8fc <calc_pressure+0x1a0>)
     7ce:	4798      	blx	r3
     7d0:	2800      	cmp	r0, #0
     7d2:	d100      	bne.n	7d6 <calc_pressure+0x7a>
     7d4:	e083      	b.n	8de <calc_pressure+0x182>
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
     7d6:	232e      	movs	r3, #46	; 0x2e
     7d8:	464a      	mov	r2, r9
     7da:	56d0      	ldrsb	r0, [r2, r3]
     7dc:	4d44      	ldr	r5, [pc, #272]	; (8f0 <calc_pressure+0x194>)
     7de:	47a8      	blx	r5
     7e0:	003e      	movs	r6, r7
     7e2:	21dc      	movs	r1, #220	; 0xdc
     7e4:	0589      	lsls	r1, r1, #22
     7e6:	47b8      	blx	r7
     7e8:	1c07      	adds	r7, r0, #0
     7ea:	1c21      	adds	r1, r4, #0
     7ec:	1c20      	adds	r0, r4, #0
     7ee:	47b0      	blx	r6
     7f0:	1c01      	adds	r1, r0, #0
     7f2:	1c38      	adds	r0, r7, #0
     7f4:	47b0      	blx	r6
     7f6:	1c07      	adds	r7, r0, #0
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
     7f8:	464a      	mov	r2, r9
     7fa:	202c      	movs	r0, #44	; 0x2c
     7fc:	5e10      	ldrsh	r0, [r2, r0]
     7fe:	47a8      	blx	r5
     800:	1c21      	adds	r1, r4, #0
     802:	47b0      	blx	r6
     804:	4c3b      	ldr	r4, [pc, #236]	; (8f4 <calc_pressure+0x198>)
     806:	1c01      	adds	r1, r0, #0
     808:	47a0      	blx	r4
     80a:	1c39      	adds	r1, r7, #0
     80c:	47a0      	blx	r4
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
     80e:	21fa      	movs	r1, #250	; 0xfa
     810:	0589      	lsls	r1, r1, #22
     812:	47b0      	blx	r6
     814:	9003      	str	r0, [sp, #12]
    calc_pres = (1048576.0f - ((float)pres_adc));
     816:	9802      	ldr	r0, [sp, #8]
     818:	4b37      	ldr	r3, [pc, #220]	; (8f8 <calc_pressure+0x19c>)
     81a:	4798      	blx	r3
     81c:	1c01      	adds	r1, r0, #0
     81e:	4f33      	ldr	r7, [pc, #204]	; (8ec <calc_pressure+0x190>)
     820:	2093      	movs	r0, #147	; 0x93
     822:	05c0      	lsls	r0, r0, #23
     824:	47b8      	blx	r7
     826:	9002      	str	r0, [sp, #8]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
     828:	464a      	mov	r2, r9
     82a:	202a      	movs	r0, #42	; 0x2a
     82c:	5e10      	ldrsh	r0, [r2, r0]
     82e:	47a8      	blx	r5
     830:	218f      	movs	r1, #143	; 0x8f
     832:	05c9      	lsls	r1, r1, #23
     834:	47b0      	blx	r6
     836:	9903      	ldr	r1, [sp, #12]
     838:	47a0      	blx	r4
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
     83a:	21e6      	movs	r1, #230	; 0xe6
     83c:	0589      	lsls	r1, r1, #22
     83e:	47b0      	blx	r6
     840:	1c01      	adds	r1, r0, #0
     842:	9802      	ldr	r0, [sp, #8]
     844:	47b8      	blx	r7
     846:	492e      	ldr	r1, [pc, #184]	; (900 <calc_pressure+0x1a4>)
     848:	47b0      	blx	r6
     84a:	9901      	ldr	r1, [sp, #4]
     84c:	4b2d      	ldr	r3, [pc, #180]	; (904 <calc_pressure+0x1a8>)
     84e:	4798      	blx	r3
     850:	1c07      	adds	r7, r0, #0
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
     852:	21ee      	movs	r1, #238	; 0xee
     854:	0589      	lsls	r1, r1, #22
     856:	47b0      	blx	r6
     858:	9001      	str	r0, [sp, #4]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
     85a:	464a      	mov	r2, r9
     85c:	2032      	movs	r0, #50	; 0x32
     85e:	5e10      	ldrsh	r0, [r2, r0]
     860:	47a8      	blx	r5
     862:	1c39      	adds	r1, r7, #0
     864:	47b0      	blx	r6
     866:	1c39      	adds	r1, r7, #0
     868:	47b0      	blx	r6
     86a:	21c0      	movs	r1, #192	; 0xc0
     86c:	0589      	lsls	r1, r1, #22
     86e:	47b0      	blx	r6
     870:	9002      	str	r0, [sp, #8]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
     872:	464a      	mov	r2, r9
     874:	2030      	movs	r0, #48	; 0x30
     876:	5e10      	ldrsh	r0, [r2, r0]
     878:	47a8      	blx	r5
     87a:	21e0      	movs	r1, #224	; 0xe0
     87c:	0589      	lsls	r1, r1, #22
     87e:	47b0      	blx	r6
     880:	1c39      	adds	r1, r7, #0
     882:	47b0      	blx	r6
     884:	1c01      	adds	r1, r0, #0
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
     886:	9802      	ldr	r0, [sp, #8]
     888:	47a0      	blx	r4
     88a:	9002      	str	r0, [sp, #8]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
     88c:	2334      	movs	r3, #52	; 0x34
     88e:	464a      	mov	r2, r9
     890:	5cd0      	ldrb	r0, [r2, r3]
     892:	47a8      	blx	r5
     894:	21dc      	movs	r1, #220	; 0xdc
     896:	0589      	lsls	r1, r1, #22
     898:	47b0      	blx	r6
     89a:	9003      	str	r0, [sp, #12]
     89c:	9b01      	ldr	r3, [sp, #4]
     89e:	1c19      	adds	r1, r3, #0
     8a0:	1c18      	adds	r0, r3, #0
     8a2:	47b0      	blx	r6
     8a4:	9901      	ldr	r1, [sp, #4]
     8a6:	47b0      	blx	r6
     8a8:	1c01      	adds	r1, r0, #0
     8aa:	9803      	ldr	r0, [sp, #12]
     8ac:	47b0      	blx	r6
     8ae:	1c01      	adds	r1, r0, #0
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
     8b0:	9802      	ldr	r0, [sp, #8]
     8b2:	47a0      	blx	r4
     8b4:	9001      	str	r0, [sp, #4]
     8b6:	232f      	movs	r3, #47	; 0x2f
     8b8:	464a      	mov	r2, r9
     8ba:	56d0      	ldrsb	r0, [r2, r3]
     8bc:	47a8      	blx	r5
     8be:	2186      	movs	r1, #134	; 0x86
     8c0:	05c9      	lsls	r1, r1, #23
     8c2:	47b0      	blx	r6
     8c4:	1c01      	adds	r1, r0, #0
     8c6:	9801      	ldr	r0, [sp, #4]
     8c8:	47a0      	blx	r4
     8ca:	21f6      	movs	r1, #246	; 0xf6
     8cc:	0589      	lsls	r1, r1, #22
     8ce:	47b0      	blx	r6
     8d0:	1c01      	adds	r1, r0, #0
     8d2:	1c38      	adds	r0, r7, #0
     8d4:	47a0      	blx	r4
    {
        calc_pres = 0;
    }

    return calc_pres;
}
     8d6:	b004      	add	sp, #16
     8d8:	bc04      	pop	{r2}
     8da:	4691      	mov	r9, r2
     8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        calc_pres = 0;
     8de:	2000      	movs	r0, #0
    return calc_pres;
     8e0:	e7f9      	b.n	8d6 <calc_pressure+0x17a>
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	0000b671 	.word	0x0000b671
     8e8:	477a0000 	.word	0x477a0000
     8ec:	0000b8b1 	.word	0x0000b8b1
     8f0:	0000bc29 	.word	0x0000bc29
     8f4:	0000af6d 	.word	0x0000af6d
     8f8:	0000bcc9 	.word	0x0000bcc9
     8fc:	0000bbe9 	.word	0x0000bbe9
     900:	45c35000 	.word	0x45c35000
     904:	0000b291 	.word	0x0000b291

00000908 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
     908:	b5f0      	push	{r4, r5, r6, r7, lr}
     90a:	46ce      	mov	lr, r9
     90c:	b500      	push	{lr}
     90e:	b084      	sub	sp, #16
     910:	9001      	str	r0, [sp, #4]
     912:	000d      	movs	r5, r1
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
     914:	493a      	ldr	r1, [pc, #232]	; (a00 <calc_humidity+0xf8>)
     916:	6ba8      	ldr	r0, [r5, #56]	; 0x38
     918:	4b3a      	ldr	r3, [pc, #232]	; (a04 <calc_humidity+0xfc>)
     91a:	4798      	blx	r3
     91c:	1c06      	adds	r6, r0, #0
    var1 = (float)((float)hum_adc) -
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
     91e:	2015      	movs	r0, #21
     920:	5628      	ldrsb	r0, [r5, r0]
     922:	4b39      	ldr	r3, [pc, #228]	; (a08 <calc_humidity+0x100>)
     924:	4699      	mov	r9, r3
     926:	4798      	blx	r3
     928:	4c38      	ldr	r4, [pc, #224]	; (a0c <calc_humidity+0x104>)
     92a:	21e2      	movs	r1, #226	; 0xe2
     92c:	0589      	lsls	r1, r1, #22
     92e:	47a0      	blx	r4
     930:	9600      	str	r6, [sp, #0]
     932:	1c31      	adds	r1, r6, #0
     934:	47a0      	blx	r4
     936:	4e36      	ldr	r6, [pc, #216]	; (a10 <calc_humidity+0x108>)
     938:	21fe      	movs	r1, #254	; 0xfe
     93a:	0589      	lsls	r1, r1, #22
     93c:	47b0      	blx	r6
     93e:	1c07      	adds	r7, r0, #0
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
     940:	2016      	movs	r0, #22
     942:	5628      	ldrsb	r0, [r5, r0]
     944:	47c8      	blx	r9
     946:	21d6      	movs	r1, #214	; 0xd6
     948:	0589      	lsls	r1, r1, #22
     94a:	47a0      	blx	r4
     94c:	9900      	ldr	r1, [sp, #0]
     94e:	47a0      	blx	r4
     950:	9900      	ldr	r1, [sp, #0]
     952:	47a0      	blx	r4
     954:	1c01      	adds	r1, r0, #0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
     956:	1c38      	adds	r0, r7, #0
     958:	47b0      	blx	r6
     95a:	9002      	str	r0, [sp, #8]
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
     95c:	8a68      	ldrh	r0, [r5, #18]
     95e:	4f2d      	ldr	r7, [pc, #180]	; (a14 <calc_humidity+0x10c>)
     960:	47b8      	blx	r7
     962:	21da      	movs	r1, #218	; 0xda
     964:	0589      	lsls	r1, r1, #22
     966:	47a0      	blx	r4
     968:	1c01      	adds	r1, r0, #0
     96a:	9802      	ldr	r0, [sp, #8]
     96c:	47a0      	blx	r4
     96e:	9002      	str	r0, [sp, #8]
    var1 = (float)((float)hum_adc) -
     970:	9801      	ldr	r0, [sp, #4]
     972:	47b8      	blx	r7
     974:	9001      	str	r0, [sp, #4]
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
     976:	2014      	movs	r0, #20
     978:	5628      	ldrsb	r0, [r5, r0]
     97a:	47c8      	blx	r9
     97c:	21fc      	movs	r1, #252	; 0xfc
     97e:	0589      	lsls	r1, r1, #22
     980:	47a0      	blx	r4
     982:	9900      	ldr	r1, [sp, #0]
     984:	47a0      	blx	r4
     986:	9003      	str	r0, [sp, #12]
     988:	8a28      	ldrh	r0, [r5, #16]
     98a:	47b8      	blx	r7
     98c:	2183      	movs	r1, #131	; 0x83
     98e:	05c9      	lsls	r1, r1, #23
     990:	47a0      	blx	r4
     992:	1c01      	adds	r1, r0, #0
     994:	9803      	ldr	r0, [sp, #12]
     996:	47b0      	blx	r6
     998:	1c01      	adds	r1, r0, #0
    var1 = (float)((float)hum_adc) -
     99a:	9801      	ldr	r0, [sp, #4]
     99c:	4b1e      	ldr	r3, [pc, #120]	; (a18 <calc_humidity+0x110>)
     99e:	4798      	blx	r3
     9a0:	1c01      	adds	r1, r0, #0
    var2 = var1 *
     9a2:	9802      	ldr	r0, [sp, #8]
     9a4:	47a0      	blx	r4
     9a6:	9001      	str	r0, [sp, #4]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
     9a8:	2018      	movs	r0, #24
     9aa:	5628      	ldrsb	r0, [r5, r0]
     9ac:	47c8      	blx	r9
     9ae:	21d4      	movs	r1, #212	; 0xd4
     9b0:	0589      	lsls	r1, r1, #22
     9b2:	47a0      	blx	r4
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
     9b4:	9900      	ldr	r1, [sp, #0]
     9b6:	47a0      	blx	r4
     9b8:	9000      	str	r0, [sp, #0]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
     9ba:	7de8      	ldrb	r0, [r5, #23]
     9bc:	47b8      	blx	r7
     9be:	21e2      	movs	r1, #226	; 0xe2
     9c0:	0589      	lsls	r1, r1, #22
     9c2:	47a0      	blx	r4
     9c4:	1c01      	adds	r1, r0, #0
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
     9c6:	9800      	ldr	r0, [sp, #0]
     9c8:	47b0      	blx	r6
     9ca:	9d01      	ldr	r5, [sp, #4]
     9cc:	1c29      	adds	r1, r5, #0
     9ce:	47a0      	blx	r4
     9d0:	1c29      	adds	r1, r5, #0
     9d2:	47a0      	blx	r4
     9d4:	1c29      	adds	r1, r5, #0
     9d6:	47b0      	blx	r6
     9d8:	1c04      	adds	r4, r0, #0
    if (calc_hum > 100.0f)
     9da:	4910      	ldr	r1, [pc, #64]	; (a1c <calc_humidity+0x114>)
     9dc:	4b10      	ldr	r3, [pc, #64]	; (a20 <calc_humidity+0x118>)
     9de:	4798      	blx	r3
     9e0:	2800      	cmp	r0, #0
     9e2:	d107      	bne.n	9f4 <calc_humidity+0xec>
    {
        calc_hum = 100.0f;
    }
    else if (calc_hum < 0.0f)
     9e4:	2100      	movs	r1, #0
     9e6:	1c20      	adds	r0, r4, #0
     9e8:	4b0e      	ldr	r3, [pc, #56]	; (a24 <calc_humidity+0x11c>)
     9ea:	4798      	blx	r3
     9ec:	2800      	cmp	r0, #0
     9ee:	d002      	beq.n	9f6 <calc_humidity+0xee>
    {
        calc_hum = 0.0f;
     9f0:	2400      	movs	r4, #0
     9f2:	e000      	b.n	9f6 <calc_humidity+0xee>
        calc_hum = 100.0f;
     9f4:	4c09      	ldr	r4, [pc, #36]	; (a1c <calc_humidity+0x114>)
    }

    return calc_hum;
}
     9f6:	1c20      	adds	r0, r4, #0
     9f8:	b004      	add	sp, #16
     9fa:	bc04      	pop	{r2}
     9fc:	4691      	mov	r9, r2
     9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a00:	45a00000 	.word	0x45a00000
     a04:	0000b291 	.word	0x0000b291
     a08:	0000bc29 	.word	0x0000bc29
     a0c:	0000b671 	.word	0x0000b671
     a10:	0000af6d 	.word	0x0000af6d
     a14:	0000bcc9 	.word	0x0000bcc9
     a18:	0000b8b1 	.word	0x0000b8b1
     a1c:	42c80000 	.word	0x42c80000
     a20:	0000aec1 	.word	0x0000aec1
     a24:	0000ae99 	.word	0x0000ae99

00000a28 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
     a28:	b5f0      	push	{r4, r5, r6, r7, lr}
     a2a:	46de      	mov	lr, fp
     a2c:	4657      	mov	r7, sl
     a2e:	464e      	mov	r6, r9
     a30:	b5c0      	push	{r6, r7, lr}
     a32:	b0a2      	sub	sp, #136	; 0x88
     a34:	0004      	movs	r4, r0
     a36:	4689      	mov	r9, r1
     a38:	0016      	movs	r6, r2
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
    const float lookup_k1_range[16] = {
     a3a:	ab12      	add	r3, sp, #72	; 0x48
     a3c:	469b      	mov	fp, r3
     a3e:	4d29      	ldr	r5, [pc, #164]	; (ae4 <calc_gas_resistance_low+0xbc>)
     a40:	2240      	movs	r2, #64	; 0x40
     a42:	0029      	movs	r1, r5
     a44:	0018      	movs	r0, r3
     a46:	4f28      	ldr	r7, [pc, #160]	; (ae8 <calc_gas_resistance_low+0xc0>)
     a48:	47b8      	blx	r7
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
     a4a:	0029      	movs	r1, r5
     a4c:	3140      	adds	r1, #64	; 0x40
     a4e:	2240      	movs	r2, #64	; 0x40
     a50:	a802      	add	r0, sp, #8
     a52:	47b8      	blx	r7
    float gas_res_f = gas_res_adc;
     a54:	4f25      	ldr	r7, [pc, #148]	; (aec <calc_gas_resistance_low+0xc4>)
     a56:	0020      	movs	r0, r4
     a58:	47b8      	blx	r7
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
     a5a:	2188      	movs	r1, #136	; 0x88
     a5c:	05c9      	lsls	r1, r1, #23
     a5e:	4b24      	ldr	r3, [pc, #144]	; (af0 <calc_gas_resistance_low+0xc8>)
     a60:	4798      	blx	r3
     a62:	9000      	str	r0, [sp, #0]
    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
     a64:	233e      	movs	r3, #62	; 0x3e
     a66:	56f0      	ldrsb	r0, [r6, r3]
     a68:	4b22      	ldr	r3, [pc, #136]	; (af4 <calc_gas_resistance_low+0xcc>)
     a6a:	4798      	blx	r3
     a6c:	4c22      	ldr	r4, [pc, #136]	; (af8 <calc_gas_resistance_low+0xd0>)
     a6e:	4923      	ldr	r1, [pc, #140]	; (afc <calc_gas_resistance_low+0xd4>)
     a70:	47a0      	blx	r4
     a72:	4e23      	ldr	r6, [pc, #140]	; (b00 <calc_gas_resistance_low+0xd8>)
     a74:	4923      	ldr	r1, [pc, #140]	; (b04 <calc_gas_resistance_low+0xdc>)
     a76:	47b0      	blx	r6
     a78:	9001      	str	r0, [sp, #4]
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
     a7a:	464b      	mov	r3, r9
     a7c:	009b      	lsls	r3, r3, #2
     a7e:	469a      	mov	sl, r3
     a80:	4d21      	ldr	r5, [pc, #132]	; (b08 <calc_gas_resistance_low+0xe0>)
     a82:	4922      	ldr	r1, [pc, #136]	; (b0c <calc_gas_resistance_low+0xe4>)
     a84:	465b      	mov	r3, fp
     a86:	4652      	mov	r2, sl
     a88:	58d0      	ldr	r0, [r2, r3]
     a8a:	47a8      	blx	r5
     a8c:	21fe      	movs	r1, #254	; 0xfe
     a8e:	0589      	lsls	r1, r1, #22
     a90:	47b0      	blx	r6
     a92:	1c01      	adds	r1, r0, #0
     a94:	9801      	ldr	r0, [sp, #4]
     a96:	47a0      	blx	r4
     a98:	1c01      	adds	r1, r0, #0
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
     a9a:	9800      	ldr	r0, [sp, #0]
     a9c:	47a8      	blx	r5
     a9e:	21fe      	movs	r1, #254	; 0xfe
     aa0:	0589      	lsls	r1, r1, #22
     aa2:	47b0      	blx	r6
     aa4:	9000      	str	r0, [sp, #0]
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
     aa6:	4919      	ldr	r1, [pc, #100]	; (b0c <calc_gas_resistance_low+0xe4>)
     aa8:	ab02      	add	r3, sp, #8
     aaa:	4652      	mov	r2, sl
     aac:	58d0      	ldr	r0, [r2, r3]
     aae:	47a8      	blx	r5
     ab0:	21fe      	movs	r1, #254	; 0xfe
     ab2:	0589      	lsls	r1, r1, #22
     ab4:	47b0      	blx	r6
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
     ab6:	4916      	ldr	r1, [pc, #88]	; (b10 <calc_gas_resistance_low+0xe8>)
     ab8:	47a0      	blx	r4
     aba:	1c06      	adds	r6, r0, #0
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
     abc:	2001      	movs	r0, #1
     abe:	464b      	mov	r3, r9
     ac0:	4098      	lsls	r0, r3
     ac2:	47b8      	blx	r7
     ac4:	1c01      	adds	r1, r0, #0
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
     ac6:	1c30      	adds	r0, r6, #0
     ac8:	47a0      	blx	r4
     aca:	1c01      	adds	r1, r0, #0
     acc:	9800      	ldr	r0, [sp, #0]
     ace:	47a0      	blx	r4
     ad0:	1c01      	adds	r1, r0, #0
     ad2:	20fe      	movs	r0, #254	; 0xfe
     ad4:	0580      	lsls	r0, r0, #22
     ad6:	47a8      	blx	r5

    return calc_gas_res;
}
     ad8:	b022      	add	sp, #136	; 0x88
     ada:	bc1c      	pop	{r2, r3, r4}
     adc:	4691      	mov	r9, r2
     ade:	469a      	mov	sl, r3
     ae0:	46a3      	mov	fp, r4
     ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ae4:	0000d988 	.word	0x0000d988
     ae8:	00008845 	.word	0x00008845
     aec:	0000bcc9 	.word	0x0000bcc9
     af0:	0000b8b1 	.word	0x0000b8b1
     af4:	0000bc29 	.word	0x0000bc29
     af8:	0000b671 	.word	0x0000b671
     afc:	40a00000 	.word	0x40a00000
     b00:	0000af6d 	.word	0x0000af6d
     b04:	44a78000 	.word	0x44a78000
     b08:	0000b291 	.word	0x0000b291
     b0c:	42c80000 	.word	0x42c80000
     b10:	340637bd 	.word	0x340637bd

00000b14 <calc_res_heat>:
    return calc_gas_res;
}

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
     b14:	b5f0      	push	{r4, r5, r6, r7, lr}
     b16:	46ce      	mov	lr, r9
     b18:	b500      	push	{lr}
     b1a:	b082      	sub	sp, #8
     b1c:	0004      	movs	r4, r0
     b1e:	000d      	movs	r5, r1
    {
        temp = 400;
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
     b20:	231a      	movs	r3, #26
     b22:	5ec8      	ldrsh	r0, [r1, r3]
     b24:	4b33      	ldr	r3, [pc, #204]	; (bf4 <calc_res_heat+0xe0>)
     b26:	4798      	blx	r3
     b28:	4e33      	ldr	r6, [pc, #204]	; (bf8 <calc_res_heat+0xe4>)
     b2a:	21e0      	movs	r1, #224	; 0xe0
     b2c:	0589      	lsls	r1, r1, #22
     b2e:	47b0      	blx	r6
     b30:	4932      	ldr	r1, [pc, #200]	; (bfc <calc_res_heat+0xe8>)
     b32:	47b0      	blx	r6
     b34:	4932      	ldr	r1, [pc, #200]	; (c00 <calc_res_heat+0xec>)
     b36:	4b33      	ldr	r3, [pc, #204]	; (c04 <calc_res_heat+0xf0>)
     b38:	4798      	blx	r3
     b3a:	1c06      	adds	r6, r0, #0
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
     b3c:	1c20      	adds	r0, r4, #0
     b3e:	23c8      	movs	r3, #200	; 0xc8
     b40:	005b      	lsls	r3, r3, #1
     b42:	429c      	cmp	r4, r3
     b44:	d901      	bls.n	b4a <calc_res_heat+0x36>
     b46:	4b30      	ldr	r3, [pc, #192]	; (c08 <calc_res_heat+0xf4>)
     b48:	8818      	ldrh	r0, [r3, #0]
     b4a:	b280      	uxth	r0, r0
     b4c:	4f2f      	ldr	r7, [pc, #188]	; (c0c <calc_res_heat+0xf8>)
     b4e:	47b8      	blx	r7
     b50:	1c01      	adds	r1, r0, #0
     b52:	4c29      	ldr	r4, [pc, #164]	; (bf8 <calc_res_heat+0xe4>)
     b54:	1c30      	adds	r0, r6, #0
     b56:	47a0      	blx	r4
     b58:	4e2a      	ldr	r6, [pc, #168]	; (c04 <calc_res_heat+0xf0>)
     b5a:	21fe      	movs	r1, #254	; 0xfe
     b5c:	0589      	lsls	r1, r1, #22
     b5e:	47b0      	blx	r6
     b60:	9000      	str	r0, [sp, #0]
    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
     b62:	2019      	movs	r0, #25
     b64:	5628      	ldrsb	r0, [r5, r0]
     b66:	4b23      	ldr	r3, [pc, #140]	; (bf4 <calc_res_heat+0xe0>)
     b68:	4699      	mov	r9, r3
     b6a:	4798      	blx	r3
     b6c:	21f6      	movs	r1, #246	; 0xf6
     b6e:	0589      	lsls	r1, r1, #22
     b70:	47a0      	blx	r4
     b72:	4927      	ldr	r1, [pc, #156]	; (c10 <calc_res_heat+0xfc>)
     b74:	47b0      	blx	r6
     b76:	1c01      	adds	r1, r0, #0
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
     b78:	9800      	ldr	r0, [sp, #0]
     b7a:	47a0      	blx	r4
     b7c:	9000      	str	r0, [sp, #0]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
     b7e:	201c      	movs	r0, #28
     b80:	5628      	ldrsb	r0, [r5, r0]
     b82:	47c8      	blx	r9
     b84:	21ea      	movs	r1, #234	; 0xea
     b86:	0589      	lsls	r1, r1, #22
     b88:	47a0      	blx	r4
     b8a:	9001      	str	r0, [sp, #4]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
     b8c:	200e      	movs	r0, #14
     b8e:	5628      	ldrsb	r0, [r5, r0]
     b90:	47c8      	blx	r9
     b92:	1c01      	adds	r1, r0, #0
     b94:	9801      	ldr	r0, [sp, #4]
     b96:	47a0      	blx	r4
     b98:	1c01      	adds	r1, r0, #0
     b9a:	9800      	ldr	r0, [sp, #0]
     b9c:	47b0      	blx	r6
     b9e:	9000      	str	r0, [sp, #0]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
     ba0:	233c      	movs	r3, #60	; 0x3c
     ba2:	5ce8      	ldrb	r0, [r5, r3]
     ba4:	47b8      	blx	r7
     ba6:	2181      	movs	r1, #129	; 0x81
     ba8:	05c9      	lsls	r1, r1, #23
     baa:	47b0      	blx	r6
     bac:	1c01      	adds	r1, r0, #0
     bae:	4f19      	ldr	r7, [pc, #100]	; (c14 <calc_res_heat+0x100>)
     bb0:	2081      	movs	r0, #129	; 0x81
     bb2:	05c0      	lsls	r0, r0, #23
     bb4:	47b8      	blx	r7
     bb6:	1c01      	adds	r1, r0, #0
     bb8:	9800      	ldr	r0, [sp, #0]
     bba:	47a0      	blx	r4
     bbc:	9000      	str	r0, [sp, #0]
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
     bbe:	233d      	movs	r3, #61	; 0x3d
     bc0:	56e8      	ldrsb	r0, [r5, r3]
     bc2:	47c8      	blx	r9
     bc4:	4914      	ldr	r1, [pc, #80]	; (c18 <calc_res_heat+0x104>)
     bc6:	47a0      	blx	r4
     bc8:	21fe      	movs	r1, #254	; 0xfe
     bca:	0589      	lsls	r1, r1, #22
     bcc:	47b0      	blx	r6
     bce:	1c01      	adds	r1, r0, #0
     bd0:	20fe      	movs	r0, #254	; 0xfe
     bd2:	0580      	lsls	r0, r0, #22
     bd4:	47b8      	blx	r7
     bd6:	1c01      	adds	r1, r0, #0
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
     bd8:	9800      	ldr	r0, [sp, #0]
     bda:	47a0      	blx	r4
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
     bdc:	490f      	ldr	r1, [pc, #60]	; (c1c <calc_res_heat+0x108>)
     bde:	4b10      	ldr	r3, [pc, #64]	; (c20 <calc_res_heat+0x10c>)
     be0:	4798      	blx	r3
        (uint8_t)(3.4f *
     be2:	4910      	ldr	r1, [pc, #64]	; (c24 <calc_res_heat+0x110>)
     be4:	47a0      	blx	r4
    res_heat =
     be6:	4b10      	ldr	r3, [pc, #64]	; (c28 <calc_res_heat+0x114>)
     be8:	4798      	blx	r3
                   25));

    return res_heat;
     bea:	b2c0      	uxtb	r0, r0
}
     bec:	b002      	add	sp, #8
     bee:	bc04      	pop	{r2}
     bf0:	4691      	mov	r9, r2
     bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bf4:	0000bc29 	.word	0x0000bc29
     bf8:	0000b671 	.word	0x0000b671
     bfc:	3a03126f 	.word	0x3a03126f
     c00:	3b1a0275 	.word	0x3b1a0275
     c04:	0000af6d 	.word	0x0000af6d
     c08:	0000d984 	.word	0x0000d984
     c0c:	0000bcc9 	.word	0x0000bcc9
     c10:	42440000 	.word	0x42440000
     c14:	0000b291 	.word	0x0000b291
     c18:	3b03126f 	.word	0x3b03126f
     c1c:	41c80000 	.word	0x41c80000
     c20:	0000b8b1 	.word	0x0000b8b1
     c24:	4059999a 	.word	0x4059999a
     c28:	0000af3d 	.word	0x0000af3d

00000c2c <null_ptr_check>:
/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
    int8_t rslt = BME68X_OK;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay__us == NULL))
     c2c:	2800      	cmp	r0, #0
     c2e:	d00a      	beq.n	c46 <null_ptr_check+0x1a>
     c30:	6c03      	ldr	r3, [r0, #64]	; 0x40
     c32:	2b00      	cmp	r3, #0
     c34:	d00a      	beq.n	c4c <null_ptr_check+0x20>
     c36:	6c43      	ldr	r3, [r0, #68]	; 0x44
     c38:	2b00      	cmp	r3, #0
     c3a:	d00a      	beq.n	c52 <null_ptr_check+0x26>
     c3c:	6c83      	ldr	r3, [r0, #72]	; 0x48
     c3e:	4258      	negs	r0, r3
     c40:	4158      	adcs	r0, r3
     c42:	4240      	negs	r0, r0
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
    }

    return rslt;
}
     c44:	4770      	bx	lr
        rslt = BME68X_E_NULL_PTR;
     c46:	2001      	movs	r0, #1
     c48:	4240      	negs	r0, r0
     c4a:	e7fb      	b.n	c44 <null_ptr_check+0x18>
     c4c:	2001      	movs	r0, #1
     c4e:	4240      	negs	r0, r0
     c50:	e7f8      	b.n	c44 <null_ptr_check+0x18>
     c52:	2001      	movs	r0, #1
     c54:	4240      	negs	r0, r0
     c56:	e7f5      	b.n	c44 <null_ptr_check+0x18>

00000c58 <set_mem_page>:
{
     c58:	b530      	push	{r4, r5, lr}
     c5a:	b083      	sub	sp, #12
     c5c:	0004      	movs	r4, r0
     c5e:	000d      	movs	r5, r1
    rslt = null_ptr_check(dev);
     c60:	0008      	movs	r0, r1
     c62:	4b18      	ldr	r3, [pc, #96]	; (cc4 <set_mem_page+0x6c>)
     c64:	4798      	blx	r3
    if (rslt == BME68X_OK)
     c66:	2800      	cmp	r0, #0
     c68:	d114      	bne.n	c94 <set_mem_page+0x3c>
        if (reg_addr > 0x7f)
     c6a:	b263      	sxtb	r3, r4
            mem_page = BME68X_MEM_PAGE0;
     c6c:	43db      	mvns	r3, r3
     c6e:	0fdb      	lsrs	r3, r3, #31
     c70:	011b      	lsls	r3, r3, #4
        if (mem_page != dev->mem_page)
     c72:	7b6a      	ldrb	r2, [r5, #13]
     c74:	429a      	cmp	r2, r3
     c76:	d00d      	beq.n	c94 <set_mem_page+0x3c>
            dev->mem_page = mem_page;
     c78:	736b      	strb	r3, [r5, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
     c7a:	686b      	ldr	r3, [r5, #4]
     c7c:	2201      	movs	r2, #1
     c7e:	4669      	mov	r1, sp
     c80:	3107      	adds	r1, #7
     c82:	30f3      	adds	r0, #243	; 0xf3
     c84:	6c2c      	ldr	r4, [r5, #64]	; 0x40
     c86:	47a0      	blx	r4
     c88:	234c      	movs	r3, #76	; 0x4c
     c8a:	54e8      	strb	r0, [r5, r3]
            if (dev->intf_rslt != 0)
     c8c:	2800      	cmp	r0, #0
     c8e:	d003      	beq.n	c98 <set_mem_page+0x40>
                rslt = BME68X_E_COM_FAIL;
     c90:	2002      	movs	r0, #2
     c92:	4240      	negs	r0, r0
}
     c94:	b003      	add	sp, #12
     c96:	bd30      	pop	{r4, r5, pc}
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
     c98:	466b      	mov	r3, sp
     c9a:	1dd9      	adds	r1, r3, #7
     c9c:	7b6a      	ldrb	r2, [r5, #13]
     c9e:	2310      	movs	r3, #16
     ca0:	4013      	ands	r3, r2
                reg = reg & (~BME68X_MEM_PAGE_MSK);
     ca2:	780a      	ldrb	r2, [r1, #0]
     ca4:	2010      	movs	r0, #16
     ca6:	4382      	bics	r2, r0
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
     ca8:	4313      	orrs	r3, r2
     caa:	700b      	strb	r3, [r1, #0]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
     cac:	686b      	ldr	r3, [r5, #4]
     cae:	2201      	movs	r2, #1
     cb0:	3063      	adds	r0, #99	; 0x63
     cb2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
     cb4:	47a0      	blx	r4
     cb6:	224c      	movs	r2, #76	; 0x4c
     cb8:	54a8      	strb	r0, [r5, r2]
                if (dev->intf_rslt != 0)
     cba:	2800      	cmp	r0, #0
     cbc:	d0ea      	beq.n	c94 <set_mem_page+0x3c>
                    rslt = BME68X_E_COM_FAIL;
     cbe:	2002      	movs	r0, #2
     cc0:	4240      	negs	r0, r0
    return rslt;
     cc2:	e7e7      	b.n	c94 <set_mem_page+0x3c>
     cc4:	00000c2d 	.word	0x00000c2d

00000cc8 <get_mem_page>:
{
     cc8:	b530      	push	{r4, r5, lr}
     cca:	b083      	sub	sp, #12
     ccc:	0004      	movs	r4, r0
    rslt = null_ptr_check(dev);
     cce:	4b0d      	ldr	r3, [pc, #52]	; (d04 <get_mem_page+0x3c>)
     cd0:	4798      	blx	r3
    if (rslt == BME68X_OK)
     cd2:	2800      	cmp	r0, #0
     cd4:	d001      	beq.n	cda <get_mem_page+0x12>
}
     cd6:	b003      	add	sp, #12
     cd8:	bd30      	pop	{r4, r5, pc}
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
     cda:	6863      	ldr	r3, [r4, #4]
     cdc:	2201      	movs	r2, #1
     cde:	4669      	mov	r1, sp
     ce0:	3107      	adds	r1, #7
     ce2:	30f3      	adds	r0, #243	; 0xf3
     ce4:	6c25      	ldr	r5, [r4, #64]	; 0x40
     ce6:	47a8      	blx	r5
     ce8:	224c      	movs	r2, #76	; 0x4c
     cea:	54a0      	strb	r0, [r4, r2]
        if (dev->intf_rslt != 0)
     cec:	2800      	cmp	r0, #0
     cee:	d105      	bne.n	cfc <get_mem_page+0x34>
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
     cf0:	466b      	mov	r3, sp
     cf2:	79da      	ldrb	r2, [r3, #7]
     cf4:	2310      	movs	r3, #16
     cf6:	4013      	ands	r3, r2
     cf8:	7363      	strb	r3, [r4, #13]
     cfa:	e7ec      	b.n	cd6 <get_mem_page+0xe>
            rslt = BME68X_E_COM_FAIL;
     cfc:	2002      	movs	r0, #2
     cfe:	4240      	negs	r0, r0
     d00:	e7e9      	b.n	cd6 <get_mem_page+0xe>
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	00000c2d 	.word	0x00000c2d

00000d08 <boundary_check>:
{
     d08:	b570      	push	{r4, r5, r6, lr}
     d0a:	0004      	movs	r4, r0
     d0c:	000e      	movs	r6, r1
     d0e:	0015      	movs	r5, r2
    rslt = null_ptr_check(dev);
     d10:	0010      	movs	r0, r2
     d12:	4b0b      	ldr	r3, [pc, #44]	; (d40 <boundary_check+0x38>)
     d14:	4798      	blx	r3
    if ((value != NULL) && (rslt == BME68X_OK))
     d16:	2c00      	cmp	r4, #0
     d18:	d00b      	beq.n	d32 <boundary_check+0x2a>
     d1a:	2800      	cmp	r0, #0
     d1c:	d10c      	bne.n	d38 <boundary_check+0x30>
        if (*value > max)
     d1e:	7823      	ldrb	r3, [r4, #0]
     d20:	42b3      	cmp	r3, r6
     d22:	d905      	bls.n	d30 <boundary_check+0x28>
            *value = max;
     d24:	7026      	strb	r6, [r4, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
     d26:	224d      	movs	r2, #77	; 0x4d
     d28:	5cab      	ldrb	r3, [r5, r2]
     d2a:	2101      	movs	r1, #1
     d2c:	430b      	orrs	r3, r1
     d2e:	54ab      	strb	r3, [r5, r2]
}
     d30:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BME68X_E_NULL_PTR;
     d32:	2001      	movs	r0, #1
     d34:	4240      	negs	r0, r0
     d36:	e7fb      	b.n	d30 <boundary_check+0x28>
     d38:	2001      	movs	r0, #1
     d3a:	4240      	negs	r0, r0
     d3c:	e7f8      	b.n	d30 <boundary_check+0x28>
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	00000c2d 	.word	0x00000c2d

00000d44 <bme68x_i2c_read>:

/*!
 * I2C read function map to SAMD21 Platform
 */
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
     d44:	b570      	push	{r4, r5, r6, lr}
     d46:	b082      	sub	sp, #8
     d48:	000e      	movs	r6, r1
     d4a:	0015      	movs	r5, r2

    //(void)intf_ptr;

	uint8_t reg_add;

	Bme680Data.lenIn = len;
     d4c:	4b0c      	ldr	r3, [pc, #48]	; (d80 <bme68x_i2c_read+0x3c>)
     d4e:	819a      	strh	r2, [r3, #12]
	Bme680Data.msgIn = MsgOutBme680;
     d50:	4c0c      	ldr	r4, [pc, #48]	; (d84 <bme68x_i2c_read+0x40>)
     d52:	609c      	str	r4, [r3, #8]

	reg_add = reg_addr;
     d54:	466a      	mov	r2, sp
     d56:	71d0      	strb	r0, [r2, #7]
     d58:	3207      	adds	r2, #7
	Bme680Data.msgOut = &reg_add;
     d5a:	605a      	str	r2, [r3, #4]
	Bme680Data.lenOut = 1;
     d5c:	2201      	movs	r2, #1
     d5e:	81da      	strh	r2, [r3, #14]
	Bme680Data.address = BME68X_I2C_ADDR_HIGH;
     d60:	3276      	adds	r2, #118	; 0x76
     d62:	701a      	strb	r2, [r3, #0]

	I2cReadDataWait(&Bme680Data, 0, 1000);
     d64:	22fa      	movs	r2, #250	; 0xfa
     d66:	0092      	lsls	r2, r2, #2
     d68:	2100      	movs	r1, #0
     d6a:	0018      	movs	r0, r3
     d6c:	4b06      	ldr	r3, [pc, #24]	; (d88 <bme68x_i2c_read+0x44>)
     d6e:	4798      	blx	r3
	memcpy(reg_data, MsgOutBme680, len);
     d70:	002a      	movs	r2, r5
     d72:	0021      	movs	r1, r4
     d74:	0030      	movs	r0, r6
     d76:	4b05      	ldr	r3, [pc, #20]	; (d8c <bme68x_i2c_read+0x48>)
     d78:	4798      	blx	r3
	
	return BME68X_INTF_RET_SUCCESS;
}
     d7a:	2000      	movs	r0, #0
     d7c:	b002      	add	sp, #8
     d7e:	bd70      	pop	{r4, r5, r6, pc}
     d80:	200038d4 	.word	0x200038d4
     d84:	200038e4 	.word	0x200038e4
     d88:	00002281 	.word	0x00002281
     d8c:	00008845 	.word	0x00008845

00000d90 <bme68x_i2c_write>:

/*!
 * I2C write function map to SAMD21 Platform
 */
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
     d90:	b570      	push	{r4, r5, r6, lr}
    //uint8_t device_addr = *(uint8_t*)intf_ptr;

    (void)intf_ptr;
	
	Bme680Data.lenIn = 0;
     d92:	4c0a      	ldr	r4, [pc, #40]	; (dbc <bme68x_i2c_write+0x2c>)
     d94:	2300      	movs	r3, #0
     d96:	81a3      	strh	r3, [r4, #12]
	Bme680Data.lenOut = len+1; // accounting for register write byte as well.
     d98:	1c53      	adds	r3, r2, #1
     d9a:	81e3      	strh	r3, [r4, #14]
	Bme680Data.msgIn =  MsgOutBme680;
     d9c:	4b08      	ldr	r3, [pc, #32]	; (dc0 <bme68x_i2c_write+0x30>)
     d9e:	60a3      	str	r3, [r4, #8]
	Bme680Data.msgOut = MsgOutBme680;
     da0:	6063      	str	r3, [r4, #4]
	Bme680Data.address = BME68X_I2C_ADDR_HIGH;
     da2:	2577      	movs	r5, #119	; 0x77
     da4:	7025      	strb	r5, [r4, #0]
	MsgOutBme680[0] = reg_addr;
     da6:	7018      	strb	r0, [r3, #0]
	
	/* Copying data into buffer starting from 2nd byte */
	memcpy(&MsgOutBme680[1], reg_data, len);
     da8:	1c58      	adds	r0, r3, #1
     daa:	4b06      	ldr	r3, [pc, #24]	; (dc4 <bme68x_i2c_write+0x34>)
     dac:	4798      	blx	r3
	I2cWriteDataWait(&Bme680Data, 1000);
     dae:	21fa      	movs	r1, #250	; 0xfa
     db0:	0089      	lsls	r1, r1, #2
     db2:	0020      	movs	r0, r4
     db4:	4b04      	ldr	r3, [pc, #16]	; (dc8 <bme68x_i2c_write+0x38>)
     db6:	4798      	blx	r3
	
	return BME68X_INTF_RET_SUCCESS;
}
     db8:	2000      	movs	r0, #0
     dba:	bd70      	pop	{r4, r5, r6, pc}
     dbc:	200038d4 	.word	0x200038d4
     dc0:	200038e4 	.word	0x200038e4
     dc4:	00008845 	.word	0x00008845
     dc8:	00002221 	.word	0x00002221

00000dcc <bme68x_delay__us>:

/*!
 * Delay function map to SAMD21 Platform
 */
void bme68x_delay__us(uint32_t period, void *intf_ptr)
{
     dcc:	b510      	push	{r4, lr}
    (void)intf_ptr;
	vTaskDelay(pdMS_TO_TICKS((uint32_t) period / 1000.0f));  // Best I could do.
     dce:	4b07      	ldr	r3, [pc, #28]	; (dec <bme68x_delay__us+0x20>)
     dd0:	4798      	blx	r3
     dd2:	4907      	ldr	r1, [pc, #28]	; (df0 <bme68x_delay__us+0x24>)
     dd4:	4b07      	ldr	r3, [pc, #28]	; (df4 <bme68x_delay__us+0x28>)
     dd6:	4798      	blx	r3
     dd8:	4b07      	ldr	r3, [pc, #28]	; (df8 <bme68x_delay__us+0x2c>)
     dda:	4798      	blx	r3
     ddc:	21fa      	movs	r1, #250	; 0xfa
     dde:	0089      	lsls	r1, r1, #2
     de0:	4348      	muls	r0, r1
     de2:	4b06      	ldr	r3, [pc, #24]	; (dfc <bme68x_delay__us+0x30>)
     de4:	4798      	blx	r3
     de6:	4b06      	ldr	r3, [pc, #24]	; (e00 <bme68x_delay__us+0x34>)
     de8:	4798      	blx	r3
}
     dea:	bd10      	pop	{r4, pc}
     dec:	0000bcc9 	.word	0x0000bcc9
     df0:	447a0000 	.word	0x447a0000
     df4:	0000b291 	.word	0x0000b291
     df8:	0000af3d 	.word	0x0000af3d
     dfc:	0000ab0d 	.word	0x0000ab0d
     e00:	00005d59 	.word	0x00005d59

00000e04 <bme68x_set_regs>:
{
     e04:	b5f0      	push	{r4, r5, r6, r7, lr}
     e06:	46de      	mov	lr, fp
     e08:	4657      	mov	r7, sl
     e0a:	464e      	mov	r6, r9
     e0c:	4645      	mov	r5, r8
     e0e:	b5e0      	push	{r5, r6, r7, lr}
     e10:	b087      	sub	sp, #28
     e12:	4681      	mov	r9, r0
     e14:	468a      	mov	sl, r1
     e16:	4690      	mov	r8, r2
     e18:	001f      	movs	r7, r3
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
     e1a:	2214      	movs	r2, #20
     e1c:	2100      	movs	r1, #0
     e1e:	a801      	add	r0, sp, #4
     e20:	4b2e      	ldr	r3, [pc, #184]	; (edc <bme68x_set_regs+0xd8>)
     e22:	4798      	blx	r3
    rslt = null_ptr_check(dev);
     e24:	0038      	movs	r0, r7
     e26:	4b2e      	ldr	r3, [pc, #184]	; (ee0 <bme68x_set_regs+0xdc>)
     e28:	4798      	blx	r3
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
     e2a:	2800      	cmp	r0, #0
     e2c:	d149      	bne.n	ec2 <bme68x_set_regs+0xbe>
     e2e:	464b      	mov	r3, r9
     e30:	2b00      	cmp	r3, #0
     e32:	d049      	beq.n	ec8 <bme68x_set_regs+0xc4>
     e34:	4653      	mov	r3, sl
     e36:	2b00      	cmp	r3, #0
     e38:	d049      	beq.n	ece <bme68x_set_regs+0xca>
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
     e3a:	4643      	mov	r3, r8
     e3c:	3b01      	subs	r3, #1
     e3e:	2b09      	cmp	r3, #9
     e40:	d848      	bhi.n	ed4 <bme68x_set_regs+0xd0>
            for (index = 0; index < len; index++)
     e42:	4643      	mov	r3, r8
     e44:	2b00      	cmp	r3, #0
     e46:	d02b      	beq.n	ea0 <bme68x_set_regs+0x9c>
     e48:	2500      	movs	r5, #0
     e4a:	2400      	movs	r4, #0
                    tmp_buff[(2 * index)] = reg_addr[index];
     e4c:	ae01      	add	r6, sp, #4
     e4e:	e016      	b.n	e7e <bme68x_set_regs+0x7a>
                    rslt = set_mem_page(reg_addr[index], dev);
     e50:	46ab      	mov	fp, r5
     e52:	44cb      	add	fp, r9
     e54:	465b      	mov	r3, fp
     e56:	7818      	ldrb	r0, [r3, #0]
     e58:	0039      	movs	r1, r7
     e5a:	4b22      	ldr	r3, [pc, #136]	; (ee4 <bme68x_set_regs+0xe0>)
     e5c:	4798      	blx	r3
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
     e5e:	0063      	lsls	r3, r4, #1
     e60:	465a      	mov	r2, fp
     e62:	7812      	ldrb	r2, [r2, #0]
     e64:	217f      	movs	r1, #127	; 0x7f
     e66:	400a      	ands	r2, r1
     e68:	559a      	strb	r2, [r3, r6]
                tmp_buff[(2 * index) + 1] = reg_data[index];
     e6a:	0063      	lsls	r3, r4, #1
     e6c:	18f3      	adds	r3, r6, r3
     e6e:	4652      	mov	r2, sl
     e70:	5d52      	ldrb	r2, [r2, r5]
     e72:	705a      	strb	r2, [r3, #1]
            for (index = 0; index < len; index++)
     e74:	3401      	adds	r4, #1
     e76:	b2a4      	uxth	r4, r4
     e78:	0025      	movs	r5, r4
     e7a:	45a0      	cmp	r8, r4
     e7c:	d907      	bls.n	e8e <bme68x_set_regs+0x8a>
                if (dev->intf == BME68X_SPI_INTF)
     e7e:	7b3b      	ldrb	r3, [r7, #12]
     e80:	2b00      	cmp	r3, #0
     e82:	d0e5      	beq.n	e50 <bme68x_set_regs+0x4c>
                    tmp_buff[(2 * index)] = reg_addr[index];
     e84:	0063      	lsls	r3, r4, #1
     e86:	464a      	mov	r2, r9
     e88:	5d52      	ldrb	r2, [r2, r5]
     e8a:	559a      	strb	r2, [r3, r6]
     e8c:	e7ed      	b.n	e6a <bme68x_set_regs+0x66>
            if (rslt == BME68X_OK)
     e8e:	2800      	cmp	r0, #0
     e90:	d006      	beq.n	ea0 <bme68x_set_regs+0x9c>
}
     e92:	b007      	add	sp, #28
     e94:	bc3c      	pop	{r2, r3, r4, r5}
     e96:	4690      	mov	r8, r2
     e98:	4699      	mov	r9, r3
     e9a:	46a2      	mov	sl, r4
     e9c:	46ab      	mov	fp, r5
     e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
     ea0:	4643      	mov	r3, r8
     ea2:	005a      	lsls	r2, r3, #1
     ea4:	3a01      	subs	r2, #1
     ea6:	ab01      	add	r3, sp, #4
     ea8:	7818      	ldrb	r0, [r3, #0]
     eaa:	687b      	ldr	r3, [r7, #4]
     eac:	4669      	mov	r1, sp
     eae:	3105      	adds	r1, #5
     eb0:	6c7c      	ldr	r4, [r7, #68]	; 0x44
     eb2:	47a0      	blx	r4
     eb4:	224c      	movs	r2, #76	; 0x4c
     eb6:	54b8      	strb	r0, [r7, r2]
                if (dev->intf_rslt != 0)
     eb8:	2800      	cmp	r0, #0
     eba:	d0ea      	beq.n	e92 <bme68x_set_regs+0x8e>
                    rslt = BME68X_E_COM_FAIL;
     ebc:	2002      	movs	r0, #2
     ebe:	4240      	negs	r0, r0
     ec0:	e7e7      	b.n	e92 <bme68x_set_regs+0x8e>
        rslt = BME68X_E_NULL_PTR;
     ec2:	2001      	movs	r0, #1
     ec4:	4240      	negs	r0, r0
     ec6:	e7e4      	b.n	e92 <bme68x_set_regs+0x8e>
     ec8:	2001      	movs	r0, #1
     eca:	4240      	negs	r0, r0
     ecc:	e7e1      	b.n	e92 <bme68x_set_regs+0x8e>
     ece:	2001      	movs	r0, #1
     ed0:	4240      	negs	r0, r0
     ed2:	e7de      	b.n	e92 <bme68x_set_regs+0x8e>
            rslt = BME68X_E_INVALID_LENGTH;
     ed4:	2004      	movs	r0, #4
     ed6:	4240      	negs	r0, r0
     ed8:	e7db      	b.n	e92 <bme68x_set_regs+0x8e>
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	00008857 	.word	0x00008857
     ee0:	00000c2d 	.word	0x00000c2d
     ee4:	00000c59 	.word	0x00000c59

00000ee8 <bme68x_get_regs>:
{
     ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
     eea:	b083      	sub	sp, #12
     eec:	0006      	movs	r6, r0
     eee:	000d      	movs	r5, r1
     ef0:	9201      	str	r2, [sp, #4]
     ef2:	001f      	movs	r7, r3
    rslt = null_ptr_check(dev);
     ef4:	0018      	movs	r0, r3
     ef6:	4b14      	ldr	r3, [pc, #80]	; (f48 <bme68x_get_regs+0x60>)
     ef8:	4798      	blx	r3
     efa:	1e04      	subs	r4, r0, #0
    if ((rslt == BME68X_OK) && reg_data)
     efc:	d11d      	bne.n	f3a <bme68x_get_regs+0x52>
     efe:	2d00      	cmp	r5, #0
     f00:	d01e      	beq.n	f40 <bme68x_get_regs+0x58>
        if (dev->intf == BME68X_SPI_INTF)
     f02:	7b3b      	ldrb	r3, [r7, #12]
     f04:	2b00      	cmp	r3, #0
     f06:	d00c      	beq.n	f22 <bme68x_get_regs+0x3a>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
     f08:	687b      	ldr	r3, [r7, #4]
     f0a:	9a01      	ldr	r2, [sp, #4]
     f0c:	0029      	movs	r1, r5
     f0e:	0030      	movs	r0, r6
     f10:	6c3d      	ldr	r5, [r7, #64]	; 0x40
     f12:	47a8      	blx	r5
     f14:	234c      	movs	r3, #76	; 0x4c
     f16:	54f8      	strb	r0, [r7, r3]
        if (dev->intf_rslt != 0)
     f18:	2800      	cmp	r0, #0
     f1a:	d10b      	bne.n	f34 <bme68x_get_regs+0x4c>
}
     f1c:	0020      	movs	r0, r4
     f1e:	b003      	add	sp, #12
     f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rslt = set_mem_page(reg_addr, dev);
     f22:	0039      	movs	r1, r7
     f24:	0030      	movs	r0, r6
     f26:	4b09      	ldr	r3, [pc, #36]	; (f4c <bme68x_get_regs+0x64>)
     f28:	4798      	blx	r3
     f2a:	1e04      	subs	r4, r0, #0
            if (rslt == BME68X_OK)
     f2c:	d1ec      	bne.n	f08 <bme68x_get_regs+0x20>
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
     f2e:	2380      	movs	r3, #128	; 0x80
     f30:	431e      	orrs	r6, r3
     f32:	e7e9      	b.n	f08 <bme68x_get_regs+0x20>
            rslt = BME68X_E_COM_FAIL;
     f34:	2402      	movs	r4, #2
     f36:	4264      	negs	r4, r4
     f38:	e7f0      	b.n	f1c <bme68x_get_regs+0x34>
        rslt = BME68X_E_NULL_PTR;
     f3a:	2401      	movs	r4, #1
     f3c:	4264      	negs	r4, r4
     f3e:	e7ed      	b.n	f1c <bme68x_get_regs+0x34>
     f40:	2401      	movs	r4, #1
     f42:	4264      	negs	r4, r4
     f44:	e7ea      	b.n	f1c <bme68x_get_regs+0x34>
     f46:	46c0      	nop			; (mov r8, r8)
     f48:	00000c2d 	.word	0x00000c2d
     f4c:	00000c59 	.word	0x00000c59

00000f50 <bme68x_soft_reset>:
{
     f50:	b530      	push	{r4, r5, lr}
     f52:	b083      	sub	sp, #12
     f54:	0005      	movs	r5, r0
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
     f56:	22e0      	movs	r2, #224	; 0xe0
     f58:	466b      	mov	r3, sp
     f5a:	71da      	strb	r2, [r3, #7]
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
     f5c:	3a2a      	subs	r2, #42	; 0x2a
     f5e:	466b      	mov	r3, sp
     f60:	719a      	strb	r2, [r3, #6]
    rslt = null_ptr_check(dev);
     f62:	4b12      	ldr	r3, [pc, #72]	; (fac <bme68x_soft_reset+0x5c>)
     f64:	4798      	blx	r3
     f66:	1e04      	subs	r4, r0, #0
    if (rslt == BME68X_OK)
     f68:	d11d      	bne.n	fa6 <bme68x_soft_reset+0x56>
        if (dev->intf == BME68X_SPI_INTF)
     f6a:	7b2b      	ldrb	r3, [r5, #12]
     f6c:	2b00      	cmp	r3, #0
     f6e:	d015      	beq.n	f9c <bme68x_soft_reset+0x4c>
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
     f70:	002b      	movs	r3, r5
     f72:	2201      	movs	r2, #1
     f74:	4669      	mov	r1, sp
     f76:	3106      	adds	r1, #6
     f78:	4668      	mov	r0, sp
     f7a:	3007      	adds	r0, #7
     f7c:	4c0c      	ldr	r4, [pc, #48]	; (fb0 <bme68x_soft_reset+0x60>)
     f7e:	47a0      	blx	r4
     f80:	1e04      	subs	r4, r0, #0
            if (rslt == BME68X_OK)
     f82:	d110      	bne.n	fa6 <bme68x_soft_reset+0x56>
                dev->delay__us(BME68X_PERIOD_RESET, dev->intf_ptr);
     f84:	6869      	ldr	r1, [r5, #4]
     f86:	480b      	ldr	r0, [pc, #44]	; (fb4 <bme68x_soft_reset+0x64>)
     f88:	6cab      	ldr	r3, [r5, #72]	; 0x48
     f8a:	4798      	blx	r3
                if (dev->intf == BME68X_SPI_INTF)
     f8c:	7b2b      	ldrb	r3, [r5, #12]
     f8e:	2b00      	cmp	r3, #0
     f90:	d109      	bne.n	fa6 <bme68x_soft_reset+0x56>
                    rslt = get_mem_page(dev);
     f92:	0028      	movs	r0, r5
     f94:	4b08      	ldr	r3, [pc, #32]	; (fb8 <bme68x_soft_reset+0x68>)
     f96:	4798      	blx	r3
     f98:	0004      	movs	r4, r0
     f9a:	e004      	b.n	fa6 <bme68x_soft_reset+0x56>
            rslt = get_mem_page(dev);
     f9c:	0028      	movs	r0, r5
     f9e:	4b06      	ldr	r3, [pc, #24]	; (fb8 <bme68x_soft_reset+0x68>)
     fa0:	4798      	blx	r3
     fa2:	1e04      	subs	r4, r0, #0
        if (rslt == BME68X_OK)
     fa4:	d0e4      	beq.n	f70 <bme68x_soft_reset+0x20>
}
     fa6:	0020      	movs	r0, r4
     fa8:	b003      	add	sp, #12
     faa:	bd30      	pop	{r4, r5, pc}
     fac:	00000c2d 	.word	0x00000c2d
     fb0:	00000e05 	.word	0x00000e05
     fb4:	00002710 	.word	0x00002710
     fb8:	00000cc9 	.word	0x00000cc9

00000fbc <bme68x_init>:
{
     fbc:	b570      	push	{r4, r5, r6, lr}
     fbe:	b08c      	sub	sp, #48	; 0x30
     fc0:	0004      	movs	r4, r0
    (void) bme68x_soft_reset(dev);
     fc2:	4b52      	ldr	r3, [pc, #328]	; (110c <bme68x_init+0x150>)
     fc4:	4798      	blx	r3
    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
     fc6:	0023      	movs	r3, r4
     fc8:	2201      	movs	r2, #1
     fca:	0021      	movs	r1, r4
     fcc:	20d0      	movs	r0, #208	; 0xd0
     fce:	4d50      	ldr	r5, [pc, #320]	; (1110 <bme68x_init+0x154>)
     fd0:	47a8      	blx	r5
     fd2:	1e05      	subs	r5, r0, #0
    if (rslt == BME68X_OK)
     fd4:	d118      	bne.n	1008 <bme68x_init+0x4c>
        if (dev->chip_id == BME68X_CHIP_ID)
     fd6:	7823      	ldrb	r3, [r4, #0]
     fd8:	2b61      	cmp	r3, #97	; 0x61
     fda:	d000      	beq.n	fde <bme68x_init+0x22>
     fdc:	e093      	b.n	1106 <bme68x_init+0x14a>
    uint8_t reg_data = 0;
     fde:	a901      	add	r1, sp, #4
     fe0:	2300      	movs	r3, #0
     fe2:	700b      	strb	r3, [r1, #0]
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
     fe4:	0023      	movs	r3, r4
     fe6:	2201      	movs	r2, #1
     fe8:	20f0      	movs	r0, #240	; 0xf0
     fea:	4e49      	ldr	r6, [pc, #292]	; (1110 <bme68x_init+0x154>)
     fec:	47b0      	blx	r6
     fee:	1e06      	subs	r6, r0, #0
    if (rslt == BME68X_OK)
     ff0:	d10a      	bne.n	1008 <bme68x_init+0x4c>
        dev->variant_id = reg_data;
     ff2:	a901      	add	r1, sp, #4
     ff4:	780b      	ldrb	r3, [r1, #0]
     ff6:	60a3      	str	r3, [r4, #8]
    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
     ff8:	0023      	movs	r3, r4
     ffa:	2217      	movs	r2, #23
     ffc:	208a      	movs	r0, #138	; 0x8a
     ffe:	4d44      	ldr	r5, [pc, #272]	; (1110 <bme68x_init+0x154>)
    1000:	47a8      	blx	r5
    if (rslt == BME68X_OK)
    1002:	2800      	cmp	r0, #0
    1004:	d003      	beq.n	100e <bme68x_init+0x52>
			rslt = BME68X_OK;
    1006:	0035      	movs	r5, r6
}
    1008:	0028      	movs	r0, r5
    100a:	b00c      	add	sp, #48	; 0x30
    100c:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
    100e:	0023      	movs	r3, r4
    1010:	220e      	movs	r2, #14
    1012:	211b      	movs	r1, #27
    1014:	4469      	add	r1, sp
    1016:	30e1      	adds	r0, #225	; 0xe1
    1018:	4d3d      	ldr	r5, [pc, #244]	; (1110 <bme68x_init+0x154>)
    101a:	47a8      	blx	r5
    if (rslt == BME68X_OK)
    101c:	2800      	cmp	r0, #0
    101e:	d1f2      	bne.n	1006 <bme68x_init+0x4a>
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
    1020:	0023      	movs	r3, r4
    1022:	2205      	movs	r2, #5
    1024:	2129      	movs	r1, #41	; 0x29
    1026:	4469      	add	r1, sp
    1028:	4d39      	ldr	r5, [pc, #228]	; (1110 <bme68x_init+0x154>)
    102a:	47a8      	blx	r5
    if (rslt == BME68X_OK)
    102c:	2800      	cmp	r0, #0
    102e:	d1ea      	bne.n	1006 <bme68x_init+0x4a>
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
    1030:	ab01      	add	r3, sp, #4
    1032:	2220      	movs	r2, #32
    1034:	5c99      	ldrb	r1, [r3, r2]
    1036:	0209      	lsls	r1, r1, #8
    1038:	7fda      	ldrb	r2, [r3, #31]
    103a:	430a      	orrs	r2, r1
        dev->calib.par_t1 =
    103c:	83e2      	strh	r2, [r4, #30]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
    103e:	7859      	ldrb	r1, [r3, #1]
    1040:	0209      	lsls	r1, r1, #8
    1042:	781a      	ldrb	r2, [r3, #0]
    1044:	430a      	orrs	r2, r1
        dev->calib.par_t2 =
    1046:	8422      	strh	r2, [r4, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
    1048:	2522      	movs	r5, #34	; 0x22
    104a:	789a      	ldrb	r2, [r3, #2]
    104c:	5562      	strb	r2, [r4, r5]
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
    104e:	7959      	ldrb	r1, [r3, #5]
    1050:	0209      	lsls	r1, r1, #8
    1052:	791a      	ldrb	r2, [r3, #4]
    1054:	430a      	orrs	r2, r1
        dev->calib.par_p1 =
    1056:	84a2      	strh	r2, [r4, #36]	; 0x24
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
    1058:	79d9      	ldrb	r1, [r3, #7]
    105a:	0209      	lsls	r1, r1, #8
    105c:	799a      	ldrb	r2, [r3, #6]
    105e:	430a      	orrs	r2, r1
        dev->calib.par_p2 =
    1060:	84e2      	strh	r2, [r4, #38]	; 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
    1062:	7a19      	ldrb	r1, [r3, #8]
    1064:	2228      	movs	r2, #40	; 0x28
    1066:	54a1      	strb	r1, [r4, r2]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
    1068:	7ad9      	ldrb	r1, [r3, #11]
    106a:	0209      	lsls	r1, r1, #8
    106c:	7a9a      	ldrb	r2, [r3, #10]
    106e:	430a      	orrs	r2, r1
        dev->calib.par_p4 =
    1070:	8562      	strh	r2, [r4, #42]	; 0x2a
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
    1072:	7b59      	ldrb	r1, [r3, #13]
    1074:	0209      	lsls	r1, r1, #8
    1076:	7b1a      	ldrb	r2, [r3, #12]
    1078:	430a      	orrs	r2, r1
        dev->calib.par_p5 =
    107a:	85a2      	strh	r2, [r4, #44]	; 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
    107c:	7bd9      	ldrb	r1, [r3, #15]
    107e:	222e      	movs	r2, #46	; 0x2e
    1080:	54a1      	strb	r1, [r4, r2]
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
    1082:	7b99      	ldrb	r1, [r3, #14]
    1084:	3201      	adds	r2, #1
    1086:	54a1      	strb	r1, [r4, r2]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
    1088:	7cd9      	ldrb	r1, [r3, #19]
    108a:	0209      	lsls	r1, r1, #8
    108c:	7c9a      	ldrb	r2, [r3, #18]
    108e:	430a      	orrs	r2, r1
        dev->calib.par_p8 =
    1090:	8622      	strh	r2, [r4, #48]	; 0x30
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
    1092:	7d59      	ldrb	r1, [r3, #21]
    1094:	0209      	lsls	r1, r1, #8
    1096:	7d1a      	ldrb	r2, [r3, #20]
    1098:	430a      	orrs	r2, r1
        dev->calib.par_p9 =
    109a:	8662      	strh	r2, [r4, #50]	; 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
    109c:	7d99      	ldrb	r1, [r3, #22]
    109e:	2234      	movs	r2, #52	; 0x34
    10a0:	54a1      	strb	r1, [r4, r2]
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
    10a2:	7e1a      	ldrb	r2, [r3, #24]
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
    10a4:	7e58      	ldrb	r0, [r3, #25]
    10a6:	0100      	lsls	r0, r0, #4
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
    10a8:	210f      	movs	r1, #15
    10aa:	4011      	ands	r1, r2
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
    10ac:	4301      	orrs	r1, r0
        dev->calib.par_h1 =
    10ae:	8221      	strh	r1, [r4, #16]
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
    10b0:	7dd9      	ldrb	r1, [r3, #23]
    10b2:	0109      	lsls	r1, r1, #4
    10b4:	0912      	lsrs	r2, r2, #4
    10b6:	430a      	orrs	r2, r1
        dev->calib.par_h2 =
    10b8:	8262      	strh	r2, [r4, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
    10ba:	7e9a      	ldrb	r2, [r3, #26]
    10bc:	7522      	strb	r2, [r4, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
    10be:	7eda      	ldrb	r2, [r3, #27]
    10c0:	7562      	strb	r2, [r4, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
    10c2:	7f1a      	ldrb	r2, [r3, #28]
    10c4:	75a2      	strb	r2, [r4, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
    10c6:	7f5a      	ldrb	r2, [r3, #29]
    10c8:	75e2      	strb	r2, [r4, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
    10ca:	7f9a      	ldrb	r2, [r3, #30]
    10cc:	7622      	strb	r2, [r4, #24]
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
    10ce:	2223      	movs	r2, #35	; 0x23
    10d0:	5c9a      	ldrb	r2, [r3, r2]
    10d2:	7662      	strb	r2, [r4, #25]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
    10d4:	5d59      	ldrb	r1, [r3, r5]
    10d6:	0209      	lsls	r1, r1, #8
    10d8:	2221      	movs	r2, #33	; 0x21
    10da:	5c9a      	ldrb	r2, [r3, r2]
    10dc:	430a      	orrs	r2, r1
        dev->calib.par_gh2 =
    10de:	8362      	strh	r2, [r4, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
    10e0:	2224      	movs	r2, #36	; 0x24
    10e2:	5c9a      	ldrb	r2, [r3, r2]
    10e4:	7722      	strb	r2, [r4, #28]
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
    10e6:	2227      	movs	r2, #39	; 0x27
    10e8:	5c9a      	ldrb	r2, [r3, r2]
    10ea:	0692      	lsls	r2, r2, #26
    10ec:	0f92      	lsrs	r2, r2, #30
    10ee:	213c      	movs	r1, #60	; 0x3c
    10f0:	5462      	strb	r2, [r4, r1]
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
    10f2:	2225      	movs	r2, #37	; 0x25
    10f4:	5c99      	ldrb	r1, [r3, r2]
    10f6:	3218      	adds	r2, #24
    10f8:	54a1      	strb	r1, [r4, r2]
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
    10fa:	3a14      	subs	r2, #20
    10fc:	569b      	ldrsb	r3, [r3, r2]
    10fe:	111b      	asrs	r3, r3, #4
    1100:	3215      	adds	r2, #21
    1102:	54a3      	strb	r3, [r4, r2]
    1104:	e77f      	b.n	1006 <bme68x_init+0x4a>
            rslt = BME68X_E_DEV_NOT_FOUND;
    1106:	2503      	movs	r5, #3
    1108:	426d      	negs	r5, r5
    110a:	e77d      	b.n	1008 <bme68x_init+0x4c>
    110c:	00000f51 	.word	0x00000f51
    1110:	00000ee9 	.word	0x00000ee9

00001114 <bme68x_set_op_mode>:
{
    1114:	b5f0      	push	{r4, r5, r6, r7, lr}
    1116:	46ce      	mov	lr, r9
    1118:	4647      	mov	r7, r8
    111a:	b580      	push	{r7, lr}
    111c:	b083      	sub	sp, #12
    111e:	4681      	mov	r9, r0
    1120:	000e      	movs	r6, r1
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
    1122:	2274      	movs	r2, #116	; 0x74
    1124:	466b      	mov	r3, sp
    1126:	719a      	strb	r2, [r3, #6]
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
    1128:	466b      	mov	r3, sp
    112a:	1ddd      	adds	r5, r3, #7
    112c:	4f1b      	ldr	r7, [pc, #108]	; (119c <bme68x_set_op_mode+0x88>)
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
    112e:	4b1c      	ldr	r3, [pc, #112]	; (11a0 <bme68x_set_op_mode+0x8c>)
    1130:	4698      	mov	r8, r3
    1132:	e00f      	b.n	1154 <bme68x_set_op_mode+0x40>
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
    1134:	2203      	movs	r2, #3
    1136:	4393      	bics	r3, r2
    1138:	702b      	strb	r3, [r5, #0]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
    113a:	0033      	movs	r3, r6
    113c:	3a02      	subs	r2, #2
    113e:	0029      	movs	r1, r5
    1140:	4668      	mov	r0, sp
    1142:	3006      	adds	r0, #6
    1144:	47c0      	blx	r8
    1146:	0004      	movs	r4, r0
                dev->delay__us(BME68X_PERIOD_POLL, dev->intf_ptr);
    1148:	6871      	ldr	r1, [r6, #4]
    114a:	4816      	ldr	r0, [pc, #88]	; (11a4 <bme68x_set_op_mode+0x90>)
    114c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    114e:	4798      	blx	r3
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
    1150:	2c00      	cmp	r4, #0
    1152:	d11c      	bne.n	118e <bme68x_set_op_mode+0x7a>
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
    1154:	0033      	movs	r3, r6
    1156:	2201      	movs	r2, #1
    1158:	0029      	movs	r1, r5
    115a:	2074      	movs	r0, #116	; 0x74
    115c:	47b8      	blx	r7
    115e:	1e04      	subs	r4, r0, #0
        if (rslt == BME68X_OK)
    1160:	d115      	bne.n	118e <bme68x_set_op_mode+0x7a>
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
    1162:	782b      	ldrb	r3, [r5, #0]
            if (pow_mode != BME68X_SLEEP_MODE)
    1164:	079a      	lsls	r2, r3, #30
    1166:	d1e5      	bne.n	1134 <bme68x_set_op_mode+0x20>
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
    1168:	464b      	mov	r3, r9
    116a:	2b00      	cmp	r3, #0
    116c:	d00f      	beq.n	118e <bme68x_set_op_mode+0x7a>
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
    116e:	466b      	mov	r3, sp
    1170:	1dd9      	adds	r1, r3, #7
    1172:	780b      	ldrb	r3, [r1, #0]
    1174:	2203      	movs	r2, #3
    1176:	4393      	bics	r3, r2
    1178:	4648      	mov	r0, r9
    117a:	4002      	ands	r2, r0
    117c:	4313      	orrs	r3, r2
    117e:	700b      	strb	r3, [r1, #0]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
    1180:	0033      	movs	r3, r6
    1182:	2201      	movs	r2, #1
    1184:	4668      	mov	r0, sp
    1186:	3006      	adds	r0, #6
    1188:	4c05      	ldr	r4, [pc, #20]	; (11a0 <bme68x_set_op_mode+0x8c>)
    118a:	47a0      	blx	r4
    118c:	0004      	movs	r4, r0
}
    118e:	0020      	movs	r0, r4
    1190:	b003      	add	sp, #12
    1192:	bc0c      	pop	{r2, r3}
    1194:	4690      	mov	r8, r2
    1196:	4699      	mov	r9, r3
    1198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	00000ee9 	.word	0x00000ee9
    11a0:	00000e05 	.word	0x00000e05
    11a4:	00002710 	.word	0x00002710

000011a8 <bme68x_get_op_mode>:
{
    11a8:	b570      	push	{r4, r5, r6, lr}
    11aa:	b082      	sub	sp, #8
    11ac:	1e04      	subs	r4, r0, #0
    if (op_mode)
    11ae:	d00d      	beq.n	11cc <bme68x_get_op_mode+0x24>
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
    11b0:	466b      	mov	r3, sp
    11b2:	1ddd      	adds	r5, r3, #7
    11b4:	000b      	movs	r3, r1
    11b6:	2201      	movs	r2, #1
    11b8:	0029      	movs	r1, r5
    11ba:	2074      	movs	r0, #116	; 0x74
    11bc:	4e05      	ldr	r6, [pc, #20]	; (11d4 <bme68x_get_op_mode+0x2c>)
    11be:	47b0      	blx	r6
        *op_mode = mode & BME68X_MODE_MSK;
    11c0:	782a      	ldrb	r2, [r5, #0]
    11c2:	2303      	movs	r3, #3
    11c4:	4013      	ands	r3, r2
    11c6:	7023      	strb	r3, [r4, #0]
}
    11c8:	b002      	add	sp, #8
    11ca:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BME68X_E_NULL_PTR;
    11cc:	2001      	movs	r0, #1
    11ce:	4240      	negs	r0, r0
    11d0:	e7fa      	b.n	11c8 <bme68x_get_op_mode+0x20>
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	00000ee9 	.word	0x00000ee9

000011d8 <bme68x_set_conf>:
{
    11d8:	b570      	push	{r4, r5, r6, lr}
    11da:	b084      	sub	sp, #16
    11dc:	0005      	movs	r5, r0
    11de:	000c      	movs	r4, r1
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
    11e0:	4b4b      	ldr	r3, [pc, #300]	; (1310 <bme68x_set_conf+0x138>)
    11e2:	681a      	ldr	r2, [r3, #0]
    11e4:	9202      	str	r2, [sp, #8]
    11e6:	791a      	ldrb	r2, [r3, #4]
    11e8:	ab02      	add	r3, sp, #8
    11ea:	711a      	strb	r2, [r3, #4]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
    11ec:	2205      	movs	r2, #5
    11ee:	2100      	movs	r1, #0
    11f0:	4668      	mov	r0, sp
    11f2:	4b48      	ldr	r3, [pc, #288]	; (1314 <bme68x_set_conf+0x13c>)
    11f4:	4798      	blx	r3
    rslt = bme68x_get_op_mode(&current_op_mode, dev);
    11f6:	0021      	movs	r1, r4
    11f8:	200f      	movs	r0, #15
    11fa:	4468      	add	r0, sp
    11fc:	4b46      	ldr	r3, [pc, #280]	; (1318 <bme68x_set_conf+0x140>)
    11fe:	4798      	blx	r3
    if (rslt == BME68X_OK)
    1200:	2800      	cmp	r0, #0
    1202:	d00e      	beq.n	1222 <bme68x_set_conf+0x4a>
    if (conf == NULL)
    1204:	2d00      	cmp	r5, #0
    1206:	d100      	bne.n	120a <bme68x_set_conf+0x32>
    1208:	e07f      	b.n	130a <bme68x_set_conf+0x132>
    else if (rslt == BME68X_OK)
    120a:	2800      	cmp	r0, #0
    120c:	d00d      	beq.n	122a <bme68x_set_conf+0x52>
    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
    120e:	230f      	movs	r3, #15
    1210:	446b      	add	r3, sp
    1212:	781b      	ldrb	r3, [r3, #0]
    1214:	2b00      	cmp	r3, #0
    1216:	d002      	beq.n	121e <bme68x_set_conf+0x46>
    1218:	2800      	cmp	r0, #0
    121a:	d100      	bne.n	121e <bme68x_set_conf+0x46>
    121c:	e070      	b.n	1300 <bme68x_set_conf+0x128>
}
    121e:	b004      	add	sp, #16
    1220:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
    1222:	0021      	movs	r1, r4
    1224:	4b3d      	ldr	r3, [pc, #244]	; (131c <bme68x_set_conf+0x144>)
    1226:	4798      	blx	r3
    1228:	e7ec      	b.n	1204 <bme68x_set_conf+0x2c>
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
    122a:	ab02      	add	r3, sp, #8
    122c:	7818      	ldrb	r0, [r3, #0]
    122e:	0023      	movs	r3, r4
    1230:	2205      	movs	r2, #5
    1232:	4669      	mov	r1, sp
    1234:	4e3a      	ldr	r6, [pc, #232]	; (1320 <bme68x_set_conf+0x148>)
    1236:	47b0      	blx	r6
        dev->info_msg = BME68X_OK;
    1238:	2200      	movs	r2, #0
    123a:	234d      	movs	r3, #77	; 0x4d
    123c:	54e2      	strb	r2, [r4, r3]
        if (rslt == BME68X_OK)
    123e:	2800      	cmp	r0, #0
    1240:	d03f      	beq.n	12c2 <bme68x_set_conf+0xea>
        if (rslt == BME68X_OK)
    1242:	2800      	cmp	r0, #0
    1244:	d1eb      	bne.n	121e <bme68x_set_conf+0x46>
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
    1246:	1d28      	adds	r0, r5, #4
    1248:	0022      	movs	r2, r4
    124a:	2108      	movs	r1, #8
    124c:	4b35      	ldr	r3, [pc, #212]	; (1324 <bme68x_set_conf+0x14c>)
    124e:	4798      	blx	r3
        if (rslt == BME68X_OK)
    1250:	2800      	cmp	r0, #0
    1252:	d1dc      	bne.n	120e <bme68x_set_conf+0x36>
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
    1254:	78ea      	ldrb	r2, [r5, #3]
    1256:	0092      	lsls	r2, r2, #2
    1258:	261c      	movs	r6, #28
    125a:	301c      	adds	r0, #28
    125c:	4002      	ands	r2, r0
    125e:	466b      	mov	r3, sp
    1260:	7919      	ldrb	r1, [r3, #4]
    1262:	43b1      	bics	r1, r6
    1264:	4311      	orrs	r1, r2
    1266:	b249      	sxtb	r1, r1
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
    1268:	78da      	ldrb	r2, [r3, #3]
    126a:	231f      	movs	r3, #31
    126c:	4013      	ands	r3, r2
    126e:	786a      	ldrb	r2, [r5, #1]
    1270:	0152      	lsls	r2, r2, #5
    1272:	4313      	orrs	r3, r2
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
    1274:	43b3      	bics	r3, r6
    1276:	78aa      	ldrb	r2, [r5, #2]
    1278:	0092      	lsls	r2, r2, #2
    127a:	4010      	ands	r0, r2
    127c:	4303      	orrs	r3, r0
    127e:	466a      	mov	r2, sp
    1280:	70d3      	strb	r3, [r2, #3]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
    1282:	7853      	ldrb	r3, [r2, #1]
    1284:	2207      	movs	r2, #7
    1286:	4393      	bics	r3, r2
    1288:	7828      	ldrb	r0, [r5, #0]
    128a:	4002      	ands	r2, r0
    128c:	4313      	orrs	r3, r2
    128e:	466a      	mov	r2, sp
    1290:	7053      	strb	r3, [r2, #1]
            if (conf->odr != BME68X_ODR_NONE)
    1292:	7928      	ldrb	r0, [r5, #4]
    1294:	2808      	cmp	r0, #8
    1296:	d030      	beq.n	12fa <bme68x_set_conf+0x122>
                odr3 = 0;
    1298:	2500      	movs	r5, #0
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
    129a:	221f      	movs	r2, #31
    129c:	400a      	ands	r2, r1
    129e:	0140      	lsls	r0, r0, #5
    12a0:	4302      	orrs	r2, r0
    12a2:	466b      	mov	r3, sp
    12a4:	711a      	strb	r2, [r3, #4]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
    12a6:	781a      	ldrb	r2, [r3, #0]
    12a8:	237f      	movs	r3, #127	; 0x7f
    12aa:	4013      	ands	r3, r2
    12ac:	01ed      	lsls	r5, r5, #7
    12ae:	432b      	orrs	r3, r5
    12b0:	466a      	mov	r2, sp
    12b2:	7013      	strb	r3, [r2, #0]
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
    12b4:	0023      	movs	r3, r4
    12b6:	2205      	movs	r2, #5
    12b8:	4669      	mov	r1, sp
    12ba:	a802      	add	r0, sp, #8
    12bc:	4d1a      	ldr	r5, [pc, #104]	; (1328 <bme68x_set_conf+0x150>)
    12be:	47a8      	blx	r5
    12c0:	e7a5      	b.n	120e <bme68x_set_conf+0x36>
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
    12c2:	1ce8      	adds	r0, r5, #3
    12c4:	0022      	movs	r2, r4
    12c6:	2107      	movs	r1, #7
    12c8:	4b16      	ldr	r3, [pc, #88]	; (1324 <bme68x_set_conf+0x14c>)
    12ca:	4798      	blx	r3
        if (rslt == BME68X_OK)
    12cc:	2800      	cmp	r0, #0
    12ce:	d1bf      	bne.n	1250 <bme68x_set_conf+0x78>
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
    12d0:	1c68      	adds	r0, r5, #1
    12d2:	0022      	movs	r2, r4
    12d4:	2105      	movs	r1, #5
    12d6:	4b13      	ldr	r3, [pc, #76]	; (1324 <bme68x_set_conf+0x14c>)
    12d8:	4798      	blx	r3
        if (rslt == BME68X_OK)
    12da:	2800      	cmp	r0, #0
    12dc:	d1b1      	bne.n	1242 <bme68x_set_conf+0x6a>
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
    12de:	1ca8      	adds	r0, r5, #2
    12e0:	0022      	movs	r2, r4
    12e2:	2105      	movs	r1, #5
    12e4:	4b0f      	ldr	r3, [pc, #60]	; (1324 <bme68x_set_conf+0x14c>)
    12e6:	4798      	blx	r3
        if (rslt == BME68X_OK)
    12e8:	2800      	cmp	r0, #0
    12ea:	d000      	beq.n	12ee <bme68x_set_conf+0x116>
    12ec:	e78f      	b.n	120e <bme68x_set_conf+0x36>
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
    12ee:	0022      	movs	r2, r4
    12f0:	2105      	movs	r1, #5
    12f2:	0028      	movs	r0, r5
    12f4:	4b0b      	ldr	r3, [pc, #44]	; (1324 <bme68x_set_conf+0x14c>)
    12f6:	4798      	blx	r3
    12f8:	e7a3      	b.n	1242 <bme68x_set_conf+0x6a>
    uint8_t odr20 = 0, odr3 = 1;
    12fa:	2501      	movs	r5, #1
    12fc:	2000      	movs	r0, #0
    12fe:	e7cc      	b.n	129a <bme68x_set_conf+0xc2>
        rslt = bme68x_set_op_mode(current_op_mode, dev);
    1300:	0021      	movs	r1, r4
    1302:	0018      	movs	r0, r3
    1304:	4b05      	ldr	r3, [pc, #20]	; (131c <bme68x_set_conf+0x144>)
    1306:	4798      	blx	r3
    return rslt;
    1308:	e789      	b.n	121e <bme68x_set_conf+0x46>
        rslt = BME68X_E_NULL_PTR;
    130a:	2001      	movs	r0, #1
    130c:	4240      	negs	r0, r0
    130e:	e77e      	b.n	120e <bme68x_set_conf+0x36>
    1310:	0000da08 	.word	0x0000da08
    1314:	00008857 	.word	0x00008857
    1318:	000011a9 	.word	0x000011a9
    131c:	00001115 	.word	0x00001115
    1320:	00000ee9 	.word	0x00000ee9
    1324:	00000d09 	.word	0x00000d09
    1328:	00000e05 	.word	0x00000e05

0000132c <bme68x_get_data>:
{
    132c:	b5f0      	push	{r4, r5, r6, r7, lr}
    132e:	46de      	mov	lr, fp
    1330:	4657      	mov	r7, sl
    1332:	464e      	mov	r6, r9
    1334:	4645      	mov	r5, r8
    1336:	b5e0      	push	{r5, r6, r7, lr}
    1338:	b0b1      	sub	sp, #196	; 0xc4
    133a:	0005      	movs	r5, r0
    133c:	4689      	mov	r9, r1
    133e:	4692      	mov	sl, r2
    1340:	4698      	mov	r8, r3
    struct bme68x_data *field_ptr[3] = { 0 };
    1342:	220c      	movs	r2, #12
    1344:	2100      	movs	r1, #0
    1346:	a82d      	add	r0, sp, #180	; 0xb4
    1348:	4edb      	ldr	r6, [pc, #876]	; (16b8 <bme68x_get_data+0x38c>)
    134a:	47b0      	blx	r6
    struct bme68x_data field_data[3] = { { 0 } };
    134c:	ac1b      	add	r4, sp, #108	; 0x6c
    134e:	2248      	movs	r2, #72	; 0x48
    1350:	2100      	movs	r1, #0
    1352:	0020      	movs	r0, r4
    1354:	47b0      	blx	r6
    field_ptr[0] = &field_data[0];
    1356:	942d      	str	r4, [sp, #180]	; 0xb4
    field_ptr[1] = &field_data[1];
    1358:	ab21      	add	r3, sp, #132	; 0x84
    135a:	932e      	str	r3, [sp, #184]	; 0xb8
    field_ptr[2] = &field_data[2];
    135c:	ab27      	add	r3, sp, #156	; 0x9c
    135e:	932f      	str	r3, [sp, #188]	; 0xbc
    rslt = null_ptr_check(dev);
    1360:	4640      	mov	r0, r8
    1362:	4bd6      	ldr	r3, [pc, #856]	; (16bc <bme68x_get_data+0x390>)
    1364:	4798      	blx	r3
    if ((rslt == BME68X_OK) && (data != NULL))
    1366:	2800      	cmp	r0, #0
    1368:	d000      	beq.n	136c <bme68x_get_data+0x40>
    136a:	e1e3      	b.n	1734 <bme68x_get_data+0x408>
    136c:	464b      	mov	r3, r9
    136e:	2b00      	cmp	r3, #0
    1370:	d100      	bne.n	1374 <bme68x_get_data+0x48>
    1372:	e1e3      	b.n	173c <bme68x_get_data+0x410>
        if (op_mode == BME68X_FORCED_MODE)
    1374:	2d01      	cmp	r5, #1
    1376:	d013      	beq.n	13a0 <bme68x_get_data+0x74>
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
    1378:	3d02      	subs	r5, #2
    137a:	2d01      	cmp	r5, #1
    137c:	d800      	bhi.n	1380 <bme68x_get_data+0x54>
    137e:	e0a9      	b.n	14d4 <bme68x_get_data+0x1a8>
    uint8_t i = 0, j = 0, new_fields = 0;
    1380:	2500      	movs	r5, #0
            rslt = BME68X_W_DEFINE_OP_MODE;
    1382:	2301      	movs	r3, #1
    1384:	9300      	str	r3, [sp, #0]
        if (n_data == NULL)
    1386:	4653      	mov	r3, sl
    1388:	2b00      	cmp	r3, #0
    138a:	d100      	bne.n	138e <bme68x_get_data+0x62>
    138c:	e1da      	b.n	1744 <bme68x_get_data+0x418>
            *n_data = new_fields;
    138e:	701d      	strb	r5, [r3, #0]
}
    1390:	9800      	ldr	r0, [sp, #0]
    1392:	b031      	add	sp, #196	; 0xc4
    1394:	bc3c      	pop	{r2, r3, r4, r5}
    1396:	4690      	mov	r8, r2
    1398:	4699      	mov	r9, r3
    139a:	46a2      	mov	sl, r4
    139c:	46ab      	mov	fp, r5
    139e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
    13a0:	ac0e      	add	r4, sp, #56	; 0x38
    13a2:	2211      	movs	r2, #17
    13a4:	2100      	movs	r1, #0
    13a6:	0020      	movs	r0, r4
    13a8:	4bc3      	ldr	r3, [pc, #780]	; (16b8 <bme68x_get_data+0x38c>)
    13aa:	4798      	blx	r3
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
    13ac:	4643      	mov	r3, r8
    13ae:	2211      	movs	r2, #17
    13b0:	0021      	movs	r1, r4
    13b2:	201d      	movs	r0, #29
    13b4:	4ec2      	ldr	r6, [pc, #776]	; (16c0 <bme68x_get_data+0x394>)
    13b6:	47b0      	blx	r6
    13b8:	9000      	str	r0, [sp, #0]
        data->status = buff[0] & BME68X_NEW_DATA_MSK;
    13ba:	7823      	ldrb	r3, [r4, #0]
    13bc:	227f      	movs	r2, #127	; 0x7f
    13be:	001f      	movs	r7, r3
    13c0:	4397      	bics	r7, r2
    13c2:	464a      	mov	r2, r9
    13c4:	7017      	strb	r7, [r2, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
    13c6:	210f      	movs	r1, #15
    13c8:	400b      	ands	r3, r1
    13ca:	7053      	strb	r3, [r2, #1]
        data->meas_index = buff[1];
    13cc:	7863      	ldrb	r3, [r4, #1]
    13ce:	7093      	strb	r3, [r2, #2]
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
    13d0:	78a6      	ldrb	r6, [r4, #2]
    13d2:	0336      	lsls	r6, r6, #12
    13d4:	78e3      	ldrb	r3, [r4, #3]
    13d6:	011b      	lsls	r3, r3, #4
    13d8:	431e      	orrs	r6, r3
    13da:	7923      	ldrb	r3, [r4, #4]
    13dc:	091b      	lsrs	r3, r3, #4
    13de:	431e      	orrs	r6, r3
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
    13e0:	7960      	ldrb	r0, [r4, #5]
    13e2:	0300      	lsls	r0, r0, #12
    13e4:	79a3      	ldrb	r3, [r4, #6]
    13e6:	011b      	lsls	r3, r3, #4
    13e8:	4318      	orrs	r0, r3
    13ea:	79e3      	ldrb	r3, [r4, #7]
    13ec:	091b      	lsrs	r3, r3, #4
    13ee:	4318      	orrs	r0, r3
    13f0:	9001      	str	r0, [sp, #4]
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
    13f2:	7a23      	ldrb	r3, [r4, #8]
    13f4:	021b      	lsls	r3, r3, #8
    13f6:	7a62      	ldrb	r2, [r4, #9]
    13f8:	431a      	orrs	r2, r3
    13fa:	9202      	str	r2, [sp, #8]
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
    13fc:	7ba3      	ldrb	r3, [r4, #14]
    13fe:	7b62      	ldrb	r2, [r4, #13]
    1400:	0092      	lsls	r2, r2, #2
    1402:	0998      	lsrs	r0, r3, #6
    1404:	4310      	orrs	r0, r2
    1406:	9003      	str	r0, [sp, #12]
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
    1408:	7be2      	ldrb	r2, [r4, #15]
    140a:	4693      	mov	fp, r2
    140c:	7c24      	ldrb	r4, [r4, #16]
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
    140e:	4019      	ands	r1, r3
    1410:	9104      	str	r1, [sp, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
    1412:	4642      	mov	r2, r8
    1414:	6892      	ldr	r2, [r2, #8]
    1416:	2a01      	cmp	r2, #1
    1418:	d032      	beq.n	1480 <bme68x_get_data+0x154>
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
    141a:	b25b      	sxtb	r3, r3
    141c:	2220      	movs	r2, #32
    141e:	401a      	ands	r2, r3
    1420:	4317      	orrs	r7, r2
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
    1422:	2210      	movs	r2, #16
    1424:	4013      	ands	r3, r2
    1426:	431f      	orrs	r7, r3
    1428:	464b      	mov	r3, r9
    142a:	701f      	strb	r7, [r3, #0]
                data->temperature = calc_temperature(adc_temp, dev);
    142c:	4641      	mov	r1, r8
    142e:	9801      	ldr	r0, [sp, #4]
    1430:	4ba4      	ldr	r3, [pc, #656]	; (16c4 <bme68x_get_data+0x398>)
    1432:	4798      	blx	r3
    1434:	464b      	mov	r3, r9
    1436:	6098      	str	r0, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
    1438:	4641      	mov	r1, r8
    143a:	0030      	movs	r0, r6
    143c:	4ba2      	ldr	r3, [pc, #648]	; (16c8 <bme68x_get_data+0x39c>)
    143e:	4798      	blx	r3
    1440:	464b      	mov	r3, r9
    1442:	60d8      	str	r0, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
    1444:	4641      	mov	r1, r8
    1446:	9802      	ldr	r0, [sp, #8]
    1448:	4ba0      	ldr	r3, [pc, #640]	; (16cc <bme68x_get_data+0x3a0>)
    144a:	4798      	blx	r3
    144c:	464b      	mov	r3, r9
    144e:	6118      	str	r0, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
    1450:	4643      	mov	r3, r8
    1452:	689b      	ldr	r3, [r3, #8]
    1454:	2b01      	cmp	r3, #1
    1456:	d01d      	beq.n	1494 <bme68x_get_data+0x168>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
    1458:	4642      	mov	r2, r8
    145a:	9904      	ldr	r1, [sp, #16]
    145c:	9803      	ldr	r0, [sp, #12]
    145e:	4b9c      	ldr	r3, [pc, #624]	; (16d0 <bme68x_get_data+0x3a4>)
    1460:	4798      	blx	r3
    1462:	464b      	mov	r3, r9
    1464:	6158      	str	r0, [r3, #20]
            if (rslt == BME68X_OK)
    1466:	9b00      	ldr	r3, [sp, #0]
    1468:	2b00      	cmp	r3, #0
    146a:	d000      	beq.n	146e <bme68x_get_data+0x142>
    146c:	e160      	b.n	1730 <bme68x_get_data+0x404>
                if (data->status & BME68X_NEW_DATA_MSK)
    146e:	464b      	mov	r3, r9
    1470:	781b      	ldrb	r3, [r3, #0]
    1472:	2b7f      	cmp	r3, #127	; 0x7f
    1474:	d900      	bls.n	1478 <bme68x_get_data+0x14c>
    1476:	e786      	b.n	1386 <bme68x_get_data+0x5a>
                    new_fields = 0;
    1478:	2500      	movs	r5, #0
                    rslt = BME68X_W_NO_NEW_DATA;
    147a:	2302      	movs	r3, #2
    147c:	9300      	str	r3, [sp, #0]
    147e:	e782      	b.n	1386 <bme68x_get_data+0x5a>
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
    1480:	b262      	sxtb	r2, r4
    1482:	2320      	movs	r3, #32
    1484:	4013      	ands	r3, r2
    1486:	431f      	orrs	r7, r3
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
    1488:	2310      	movs	r3, #16
    148a:	401a      	ands	r2, r3
    148c:	4317      	orrs	r7, r2
    148e:	464b      	mov	r3, r9
    1490:	701f      	strb	r7, [r3, #0]
    1492:	e7cb      	b.n	142c <bme68x_get_data+0x100>
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
    1494:	465b      	mov	r3, fp
    1496:	009b      	lsls	r3, r3, #2
    1498:	09a2      	lsrs	r2, r4, #6
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
    149a:	4313      	orrs	r3, r2
    149c:	4a8d      	ldr	r2, [pc, #564]	; (16d4 <bme68x_get_data+0x3a8>)
    149e:	4694      	mov	ip, r2
    14a0:	4463      	add	r3, ip
    var2 *= INT32_C(3);
    14a2:	005e      	lsls	r6, r3, #1
    14a4:	18f6      	adds	r6, r6, r3
    uint32_t var1 = UINT32_C(262144) >> gas_range;
    14a6:	230f      	movs	r3, #15
    14a8:	4023      	ands	r3, r4
    14aa:	2080      	movs	r0, #128	; 0x80
    14ac:	02c0      	lsls	r0, r0, #11
    14ae:	40d8      	lsrs	r0, r3
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
    14b0:	4b89      	ldr	r3, [pc, #548]	; (16d8 <bme68x_get_data+0x3ac>)
    14b2:	4798      	blx	r3
    14b4:	4989      	ldr	r1, [pc, #548]	; (16dc <bme68x_get_data+0x3b0>)
    14b6:	4b8a      	ldr	r3, [pc, #552]	; (16e0 <bme68x_get_data+0x3b4>)
    14b8:	4798      	blx	r3
    14ba:	1c04      	adds	r4, r0, #0
    var2 = INT32_C(4096) + var2;
    14bc:	2380      	movs	r3, #128	; 0x80
    14be:	015b      	lsls	r3, r3, #5
    14c0:	18f0      	adds	r0, r6, r3
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
    14c2:	4b88      	ldr	r3, [pc, #544]	; (16e4 <bme68x_get_data+0x3b8>)
    14c4:	4798      	blx	r3
    14c6:	1c01      	adds	r1, r0, #0
    14c8:	1c20      	adds	r0, r4, #0
    14ca:	4b87      	ldr	r3, [pc, #540]	; (16e8 <bme68x_get_data+0x3bc>)
    14cc:	4798      	blx	r3
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
    14ce:	464b      	mov	r3, r9
    14d0:	6158      	str	r0, [r3, #20]
    14d2:	e7c8      	b.n	1466 <bme68x_get_data+0x13a>
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
    14d4:	2233      	movs	r2, #51	; 0x33
    14d6:	2100      	movs	r1, #0
    14d8:	a80e      	add	r0, sp, #56	; 0x38
    14da:	4c77      	ldr	r4, [pc, #476]	; (16b8 <bme68x_get_data+0x38c>)
    14dc:	47a0      	blx	r4
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
    14de:	221e      	movs	r2, #30
    14e0:	2100      	movs	r1, #0
    14e2:	a806      	add	r0, sp, #24
    14e4:	47a0      	blx	r4
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
    14e6:	4643      	mov	r3, r8
    14e8:	2233      	movs	r2, #51	; 0x33
    14ea:	a90e      	add	r1, sp, #56	; 0x38
    14ec:	201d      	movs	r0, #29
    14ee:	4c74      	ldr	r4, [pc, #464]	; (16c0 <bme68x_get_data+0x394>)
    14f0:	47a0      	blx	r4
    14f2:	9000      	str	r0, [sp, #0]
    if (rslt == BME68X_OK)
    14f4:	2800      	cmp	r0, #0
    14f6:	d00a      	beq.n	150e <bme68x_get_data+0x1e2>
            new_fields = 0;
    14f8:	2500      	movs	r5, #0
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
    14fa:	9b00      	ldr	r3, [sp, #0]
    14fc:	2b00      	cmp	r3, #0
    14fe:	d000      	beq.n	1502 <bme68x_get_data+0x1d6>
    1500:	e110      	b.n	1724 <bme68x_get_data+0x3f8>
    1502:	ae2d      	add	r6, sp, #180	; 0xb4
    1504:	2300      	movs	r3, #0
    1506:	469c      	mov	ip, r3
    1508:	46e3      	mov	fp, ip
    150a:	46ac      	mov	ip, r5
    150c:	e0f2      	b.n	16f4 <bme68x_get_data+0x3c8>
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
    150e:	4643      	mov	r3, r8
    1510:	221e      	movs	r2, #30
    1512:	a906      	add	r1, sp, #24
    1514:	2050      	movs	r0, #80	; 0x50
    1516:	4c6a      	ldr	r4, [pc, #424]	; (16c0 <bme68x_get_data+0x394>)
    1518:	47a0      	blx	r4
    151a:	9000      	str	r0, [sp, #0]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
    151c:	2800      	cmp	r0, #0
    151e:	d000      	beq.n	1522 <bme68x_get_data+0x1f6>
    1520:	e114      	b.n	174c <bme68x_get_data+0x420>
    1522:	ac0e      	add	r4, sp, #56	; 0x38
    1524:	4683      	mov	fp, r0
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
    1526:	4653      	mov	r3, sl
    1528:	9305      	str	r3, [sp, #20]
    152a:	e030      	b.n	158e <bme68x_get_data+0x262>
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
    152c:	4669      	mov	r1, sp
    152e:	7b09      	ldrb	r1, [r1, #12]
    1530:	b249      	sxtb	r1, r1
    1532:	2620      	movs	r6, #32
    1534:	400e      	ands	r6, r1
    1536:	4332      	orrs	r2, r6
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
    1538:	2610      	movs	r6, #16
    153a:	4031      	ands	r1, r6
    153c:	430a      	orrs	r2, r1
    153e:	702a      	strb	r2, [r5, #0]
    1540:	e05c      	b.n	15fc <bme68x_get_data+0x2d0>
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
    1542:	9b04      	ldr	r3, [sp, #16]
    1544:	0098      	lsls	r0, r3, #2
    1546:	9a03      	ldr	r2, [sp, #12]
    1548:	0997      	lsrs	r7, r2, #6
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
    154a:	4338      	orrs	r0, r7
    154c:	4b61      	ldr	r3, [pc, #388]	; (16d4 <bme68x_get_data+0x3a8>)
    154e:	469c      	mov	ip, r3
    1550:	4460      	add	r0, ip
    var2 *= INT32_C(3);
    1552:	0047      	lsls	r7, r0, #1
    1554:	183f      	adds	r7, r7, r0
    uint32_t var1 = UINT32_C(262144) >> gas_range;
    1556:	230f      	movs	r3, #15
    1558:	4013      	ands	r3, r2
    155a:	2080      	movs	r0, #128	; 0x80
    155c:	02c0      	lsls	r0, r0, #11
    155e:	40d8      	lsrs	r0, r3
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
    1560:	4b5d      	ldr	r3, [pc, #372]	; (16d8 <bme68x_get_data+0x3ac>)
    1562:	4798      	blx	r3
    1564:	495d      	ldr	r1, [pc, #372]	; (16dc <bme68x_get_data+0x3b0>)
    1566:	4b5e      	ldr	r3, [pc, #376]	; (16e0 <bme68x_get_data+0x3b4>)
    1568:	4798      	blx	r3
    156a:	1c06      	adds	r6, r0, #0
    var2 = INT32_C(4096) + var2;
    156c:	2380      	movs	r3, #128	; 0x80
    156e:	015b      	lsls	r3, r3, #5
    1570:	18f8      	adds	r0, r7, r3
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
    1572:	4b5c      	ldr	r3, [pc, #368]	; (16e4 <bme68x_get_data+0x3b8>)
    1574:	4798      	blx	r3
    1576:	1c01      	adds	r1, r0, #0
    1578:	1c30      	adds	r0, r6, #0
    157a:	4b5b      	ldr	r3, [pc, #364]	; (16e8 <bme68x_get_data+0x3bc>)
    157c:	4798      	blx	r3
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
    157e:	6168      	str	r0, [r5, #20]
    1580:	3411      	adds	r4, #17
    1582:	2304      	movs	r3, #4
    1584:	469c      	mov	ip, r3
    1586:	44e3      	add	fp, ip
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
    1588:	465b      	mov	r3, fp
    158a:	2b0c      	cmp	r3, #12
    158c:	d05d      	beq.n	164a <bme68x_get_data+0x31e>
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
    158e:	ab2d      	add	r3, sp, #180	; 0xb4
    1590:	465a      	mov	r2, fp
    1592:	58d5      	ldr	r5, [r2, r3]
    1594:	7823      	ldrb	r3, [r4, #0]
    1596:	227f      	movs	r2, #127	; 0x7f
    1598:	0019      	movs	r1, r3
    159a:	4391      	bics	r1, r2
    159c:	000a      	movs	r2, r1
    159e:	7029      	strb	r1, [r5, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
    15a0:	210f      	movs	r1, #15
    15a2:	400b      	ands	r3, r1
    15a4:	706b      	strb	r3, [r5, #1]
        data[i]->meas_index = buff[off + 1];
    15a6:	7861      	ldrb	r1, [r4, #1]
    15a8:	70a9      	strb	r1, [r5, #2]
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
    15aa:	78a6      	ldrb	r6, [r4, #2]
    15ac:	0336      	lsls	r6, r6, #12
    15ae:	78e1      	ldrb	r1, [r4, #3]
    15b0:	0109      	lsls	r1, r1, #4
    15b2:	430e      	orrs	r6, r1
                        ((uint32_t) buff[off + 4] / 16));
    15b4:	7921      	ldrb	r1, [r4, #4]
    15b6:	0909      	lsrs	r1, r1, #4
        adc_pres =
    15b8:	430e      	orrs	r6, r1
    15ba:	9601      	str	r6, [sp, #4]
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
    15bc:	7960      	ldrb	r0, [r4, #5]
    15be:	0300      	lsls	r0, r0, #12
    15c0:	79a1      	ldrb	r1, [r4, #6]
    15c2:	0109      	lsls	r1, r1, #4
    15c4:	4308      	orrs	r0, r1
                        ((uint32_t) buff[off + 7] / 16));
    15c6:	79e1      	ldrb	r1, [r4, #7]
    15c8:	0909      	lsrs	r1, r1, #4
        adc_temp =
    15ca:	4308      	orrs	r0, r1
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
    15cc:	7a21      	ldrb	r1, [r4, #8]
    15ce:	0209      	lsls	r1, r1, #8
    15d0:	7a67      	ldrb	r7, [r4, #9]
    15d2:	430f      	orrs	r7, r1
    15d4:	9702      	str	r7, [sp, #8]
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
    15d6:	7b61      	ldrb	r1, [r4, #13]
    15d8:	468a      	mov	sl, r1
    15da:	7ba7      	ldrb	r7, [r4, #14]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
    15dc:	7be1      	ldrb	r1, [r4, #15]
    15de:	9104      	str	r1, [sp, #16]
    15e0:	7c21      	ldrb	r1, [r4, #16]
    15e2:	9103      	str	r1, [sp, #12]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
    15e4:	4641      	mov	r1, r8
    15e6:	6889      	ldr	r1, [r1, #8]
    15e8:	2901      	cmp	r1, #1
    15ea:	d09f      	beq.n	152c <bme68x_get_data+0x200>
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
    15ec:	b279      	sxtb	r1, r7
    15ee:	2620      	movs	r6, #32
    15f0:	400e      	ands	r6, r1
    15f2:	4332      	orrs	r2, r6
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
    15f4:	2610      	movs	r6, #16
    15f6:	4031      	ands	r1, r6
    15f8:	430a      	orrs	r2, r1
    15fa:	702a      	strb	r2, [r5, #0]
        data[i]->idac = set_val[data[i]->gas_index];
    15fc:	aa06      	add	r2, sp, #24
    15fe:	5cd2      	ldrb	r2, [r2, r3]
    1600:	712a      	strb	r2, [r5, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
    1602:	aa06      	add	r2, sp, #24
    1604:	4694      	mov	ip, r2
    1606:	4463      	add	r3, ip
    1608:	7a9a      	ldrb	r2, [r3, #10]
    160a:	70ea      	strb	r2, [r5, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
    160c:	7d1b      	ldrb	r3, [r3, #20]
    160e:	716b      	strb	r3, [r5, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
    1610:	4641      	mov	r1, r8
    1612:	4b2c      	ldr	r3, [pc, #176]	; (16c4 <bme68x_get_data+0x398>)
    1614:	4798      	blx	r3
    1616:	60a8      	str	r0, [r5, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
    1618:	4641      	mov	r1, r8
    161a:	9801      	ldr	r0, [sp, #4]
    161c:	4b2a      	ldr	r3, [pc, #168]	; (16c8 <bme68x_get_data+0x39c>)
    161e:	4798      	blx	r3
    1620:	60e8      	str	r0, [r5, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
    1622:	4641      	mov	r1, r8
    1624:	9802      	ldr	r0, [sp, #8]
    1626:	4b29      	ldr	r3, [pc, #164]	; (16cc <bme68x_get_data+0x3a0>)
    1628:	4798      	blx	r3
    162a:	6128      	str	r0, [r5, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
    162c:	4643      	mov	r3, r8
    162e:	689b      	ldr	r3, [r3, #8]
    1630:	2b01      	cmp	r3, #1
    1632:	d086      	beq.n	1542 <bme68x_get_data+0x216>
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
    1634:	210f      	movs	r1, #15
    1636:	4039      	ands	r1, r7
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
    1638:	4653      	mov	r3, sl
    163a:	0098      	lsls	r0, r3, #2
    163c:	09bf      	lsrs	r7, r7, #6
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
    163e:	4338      	orrs	r0, r7
    1640:	4642      	mov	r2, r8
    1642:	4b23      	ldr	r3, [pc, #140]	; (16d0 <bme68x_get_data+0x3a4>)
    1644:	4798      	blx	r3
    1646:	6168      	str	r0, [r5, #20]
    1648:	e79a      	b.n	1580 <bme68x_get_data+0x254>
    164a:	9b05      	ldr	r3, [sp, #20]
    164c:	469a      	mov	sl, r3
    164e:	2300      	movs	r3, #0
    1650:	2500      	movs	r5, #0
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
    1652:	a92d      	add	r1, sp, #180	; 0xb4
    1654:	e003      	b.n	165e <bme68x_get_data+0x332>
    1656:	3304      	adds	r3, #4
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
    1658:	2b0c      	cmp	r3, #12
    165a:	d100      	bne.n	165e <bme68x_get_data+0x332>
    165c:	e751      	b.n	1502 <bme68x_get_data+0x1d6>
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
    165e:	585a      	ldr	r2, [r3, r1]
    1660:	7812      	ldrb	r2, [r2, #0]
    1662:	2a7f      	cmp	r2, #127	; 0x7f
    1664:	d9f7      	bls.n	1656 <bme68x_get_data+0x32a>
                    new_fields++;
    1666:	3501      	adds	r5, #1
    1668:	b2ed      	uxtb	r5, r5
    166a:	e7f4      	b.n	1656 <bme68x_get_data+0x32a>
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
    166c:	7821      	ldrb	r1, [r4, #0]
    166e:	297f      	cmp	r1, #127	; 0x7f
    1670:	d813      	bhi.n	169a <bme68x_get_data+0x36e>
                for (j = i + 1; j < 3; j++)
    1672:	3301      	adds	r3, #1
    1674:	b2db      	uxtb	r3, r3
    1676:	2b03      	cmp	r3, #3
    1678:	d038      	beq.n	16ec <bme68x_get_data+0x3c0>
    167a:	0037      	movs	r7, r6
    meas_index1 = (int16_t)field[low_index]->meas_index;
    167c:	6830      	ldr	r0, [r6, #0]
    meas_index2 = (int16_t)field[high_index]->meas_index;
    167e:	009a      	lsls	r2, r3, #2
    1680:	a92d      	add	r1, sp, #180	; 0xb4
    1682:	4688      	mov	r8, r1
    1684:	4442      	add	r2, r8
    1686:	6814      	ldr	r4, [r2, #0]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
    1688:	7801      	ldrb	r1, [r0, #0]
    168a:	297f      	cmp	r1, #127	; 0x7f
    168c:	d8ee      	bhi.n	166c <bme68x_get_data+0x340>
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
    168e:	7821      	ldrb	r1, [r4, #0]
    1690:	297f      	cmp	r1, #127	; 0x7f
    1692:	d9ee      	bls.n	1672 <bme68x_get_data+0x346>
    field[index1] = field[index2];
    1694:	6034      	str	r4, [r6, #0]
    field[index2] = temp;
    1696:	6010      	str	r0, [r2, #0]
    1698:	e7eb      	b.n	1672 <bme68x_get_data+0x346>
        int16_t diff = meas_index2 - meas_index1;
    169a:	78a5      	ldrb	r5, [r4, #2]
    169c:	7881      	ldrb	r1, [r0, #2]
    169e:	1a69      	subs	r1, r5, r1
    16a0:	b289      	uxth	r1, r1
    16a2:	b20d      	sxth	r5, r1
        if (((diff > -3) && (diff < 0)) || (diff > 2))
    16a4:	3102      	adds	r1, #2
    16a6:	b289      	uxth	r1, r1
    16a8:	2901      	cmp	r1, #1
    16aa:	d901      	bls.n	16b0 <bme68x_get_data+0x384>
    16ac:	2d02      	cmp	r5, #2
    16ae:	dde0      	ble.n	1672 <bme68x_get_data+0x346>
    field[index1] = field[index2];
    16b0:	603c      	str	r4, [r7, #0]
    field[index2] = temp;
    16b2:	6010      	str	r0, [r2, #0]
    16b4:	e7dd      	b.n	1672 <bme68x_get_data+0x346>
    16b6:	46c0      	nop			; (mov r8, r8)
    16b8:	00008857 	.word	0x00008857
    16bc:	00000c2d 	.word	0x00000c2d
    16c0:	00000ee9 	.word	0x00000ee9
    16c4:	000006b5 	.word	0x000006b5
    16c8:	0000075d 	.word	0x0000075d
    16cc:	00000909 	.word	0x00000909
    16d0:	00000a29 	.word	0x00000a29
    16d4:	fffffe00 	.word	0xfffffe00
    16d8:	0000bcc9 	.word	0x0000bcc9
    16dc:	49742400 	.word	0x49742400
    16e0:	0000b671 	.word	0x0000b671
    16e4:	0000bc29 	.word	0x0000bc29
    16e8:	0000b291 	.word	0x0000b291
    16ec:	3604      	adds	r6, #4
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
    16ee:	465b      	mov	r3, fp
    16f0:	2b02      	cmp	r3, #2
    16f2:	d007      	beq.n	1704 <bme68x_get_data+0x3d8>
                for (j = i + 1; j < 3; j++)
    16f4:	465d      	mov	r5, fp
    16f6:	3501      	adds	r5, #1
    16f8:	b2eb      	uxtb	r3, r5
    16fa:	469b      	mov	fp, r3
    16fc:	2b02      	cmp	r3, #2
    16fe:	d9bc      	bls.n	167a <bme68x_get_data+0x34e>
    1700:	3604      	adds	r6, #4
    1702:	e7f7      	b.n	16f4 <bme68x_get_data+0x3c8>
    1704:	4665      	mov	r5, ip
    1706:	464a      	mov	r2, r9
            new_fields = 0;
    1708:	2000      	movs	r0, #0
                data[i] = *field_ptr[i];
    170a:	ac2d      	add	r4, sp, #180	; 0xb4
    170c:	46ac      	mov	ip, r5
    170e:	0011      	movs	r1, r2
    1710:	5903      	ldr	r3, [r0, r4]
    1712:	cbe0      	ldmia	r3!, {r5, r6, r7}
    1714:	c1e0      	stmia	r1!, {r5, r6, r7}
    1716:	cbe0      	ldmia	r3!, {r5, r6, r7}
    1718:	c1e0      	stmia	r1!, {r5, r6, r7}
    171a:	3218      	adds	r2, #24
    171c:	3004      	adds	r0, #4
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
    171e:	280c      	cmp	r0, #12
    1720:	d1f5      	bne.n	170e <bme68x_get_data+0x3e2>
    1722:	4665      	mov	r5, ip
            if (new_fields == 0)
    1724:	2d00      	cmp	r5, #0
    1726:	d000      	beq.n	172a <bme68x_get_data+0x3fe>
    1728:	e62d      	b.n	1386 <bme68x_get_data+0x5a>
                rslt = BME68X_W_NO_NEW_DATA;
    172a:	2302      	movs	r3, #2
    172c:	9300      	str	r3, [sp, #0]
    172e:	e62a      	b.n	1386 <bme68x_get_data+0x5a>
    uint8_t i = 0, j = 0, new_fields = 0;
    1730:	2500      	movs	r5, #0
    1732:	e628      	b.n	1386 <bme68x_get_data+0x5a>
        rslt = BME68X_E_NULL_PTR;
    1734:	2301      	movs	r3, #1
    1736:	425b      	negs	r3, r3
    1738:	9300      	str	r3, [sp, #0]
    173a:	e629      	b.n	1390 <bme68x_get_data+0x64>
    173c:	2301      	movs	r3, #1
    173e:	425b      	negs	r3, r3
    1740:	9300      	str	r3, [sp, #0]
    1742:	e625      	b.n	1390 <bme68x_get_data+0x64>
            rslt = BME68X_E_NULL_PTR;
    1744:	2301      	movs	r3, #1
    1746:	425b      	negs	r3, r3
    1748:	9300      	str	r3, [sp, #0]
    return rslt;
    174a:	e621      	b.n	1390 <bme68x_get_data+0x64>
            new_fields = 0;
    174c:	2500      	movs	r5, #0
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
    174e:	9b00      	ldr	r3, [sp, #0]
    1750:	2b00      	cmp	r3, #0
    1752:	d0d8      	beq.n	1706 <bme68x_get_data+0x3da>
    1754:	e7e6      	b.n	1724 <bme68x_get_data+0x3f8>
    1756:	46c0      	nop			; (mov r8, r8)

00001758 <bme68x_set_heatr_conf>:
{
    1758:	b5f0      	push	{r4, r5, r6, r7, lr}
    175a:	46de      	mov	lr, fp
    175c:	4657      	mov	r7, sl
    175e:	464e      	mov	r6, r9
    1760:	4645      	mov	r5, r8
    1762:	b5e0      	push	{r5, r6, r7, lr}
    1764:	b095      	sub	sp, #84	; 0x54
    1766:	9001      	str	r0, [sp, #4]
    1768:	9102      	str	r1, [sp, #8]
    176a:	0010      	movs	r0, r2
    176c:	9200      	str	r2, [sp, #0]
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
    176e:	4bbc      	ldr	r3, [pc, #752]	; (1a60 <bme68x_set_heatr_conf+0x308>)
    1770:	891a      	ldrh	r2, [r3, #8]
    1772:	ab12      	add	r3, sp, #72	; 0x48
    1774:	801a      	strh	r2, [r3, #0]
    if (conf != NULL)
    1776:	2900      	cmp	r1, #0
    1778:	d100      	bne.n	177c <bme68x_set_heatr_conf+0x24>
    177a:	e136      	b.n	19ea <bme68x_set_heatr_conf+0x292>
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
    177c:	0001      	movs	r1, r0
    177e:	2000      	movs	r0, #0
    1780:	4bb8      	ldr	r3, [pc, #736]	; (1a64 <bme68x_set_heatr_conf+0x30c>)
    1782:	4798      	blx	r3
    1784:	1e05      	subs	r5, r0, #0
        if (rslt == BME68X_OK)
    1786:	d007      	beq.n	1798 <bme68x_set_heatr_conf+0x40>
}
    1788:	0028      	movs	r0, r5
    178a:	b015      	add	sp, #84	; 0x54
    178c:	bc3c      	pop	{r2, r3, r4, r5}
    178e:	4690      	mov	r8, r2
    1790:	4699      	mov	r9, r3
    1792:	46a2      	mov	sl, r4
    1794:	46ab      	mov	fp, r5
    1796:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
    1798:	226e      	movs	r2, #110	; 0x6e
    179a:	ab04      	add	r3, sp, #16
    179c:	71da      	strb	r2, [r3, #7]
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    179e:	3a64      	subs	r2, #100	; 0x64
    17a0:	2100      	movs	r1, #0
    17a2:	a806      	add	r0, sp, #24
    17a4:	4cb0      	ldr	r4, [pc, #704]	; (1a68 <bme68x_set_heatr_conf+0x310>)
    17a6:	47a0      	blx	r4
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    17a8:	220a      	movs	r2, #10
    17aa:	2100      	movs	r1, #0
    17ac:	a809      	add	r0, sp, #36	; 0x24
    17ae:	47a0      	blx	r4
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    17b0:	220a      	movs	r2, #10
    17b2:	2100      	movs	r1, #0
    17b4:	a80c      	add	r0, sp, #48	; 0x30
    17b6:	47a0      	blx	r4
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    17b8:	220a      	movs	r2, #10
    17ba:	2100      	movs	r1, #0
    17bc:	a80f      	add	r0, sp, #60	; 0x3c
    17be:	47a0      	blx	r4
    switch (op_mode)
    17c0:	9b01      	ldr	r3, [sp, #4]
    17c2:	2b02      	cmp	r3, #2
    17c4:	d100      	bne.n	17c8 <bme68x_set_heatr_conf+0x70>
    17c6:	e0ad      	b.n	1924 <bme68x_set_heatr_conf+0x1cc>
    17c8:	2b03      	cmp	r3, #3
    17ca:	d064      	beq.n	1896 <bme68x_set_heatr_conf+0x13e>
    17cc:	2b01      	cmp	r3, #1
    17ce:	d006      	beq.n	17de <bme68x_set_heatr_conf+0x86>
    uint8_t write_len = 0;
    17d0:	2300      	movs	r3, #0
    17d2:	9301      	str	r3, [sp, #4]
            rslt = BME68X_W_DEFINE_OP_MODE;
    17d4:	2501      	movs	r5, #1
    if (rslt == BME68X_OK)
    17d6:	2d00      	cmp	r5, #0
    17d8:	d1d6      	bne.n	1788 <bme68x_set_heatr_conf+0x30>
    17da:	9c01      	ldr	r4, [sp, #4]
    17dc:	e014      	b.n	1808 <bme68x_set_heatr_conf+0xb0>
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
    17de:	225a      	movs	r2, #90	; 0x5a
    17e0:	ab06      	add	r3, sp, #24
    17e2:	701a      	strb	r2, [r3, #0]
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
    17e4:	9c02      	ldr	r4, [sp, #8]
    17e6:	8860      	ldrh	r0, [r4, #2]
    17e8:	9900      	ldr	r1, [sp, #0]
    17ea:	4ba0      	ldr	r3, [pc, #640]	; (1a6c <bme68x_set_heatr_conf+0x314>)
    17ec:	4798      	blx	r3
    17ee:	ab09      	add	r3, sp, #36	; 0x24
    17f0:	7018      	strb	r0, [r3, #0]
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
    17f2:	2264      	movs	r2, #100	; 0x64
    17f4:	ab0c      	add	r3, sp, #48	; 0x30
    17f6:	701a      	strb	r2, [r3, #0]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
    17f8:	88a1      	ldrh	r1, [r4, #4]
    if (dur >= 0xfc0)
    17fa:	4b9d      	ldr	r3, [pc, #628]	; (1a70 <bme68x_set_heatr_conf+0x318>)
        durval = 0xff; /* Max duration*/
    17fc:	329b      	adds	r2, #155	; 0x9b
    if (dur >= 0xfc0)
    17fe:	4299      	cmp	r1, r3
    1800:	d93b      	bls.n	187a <bme68x_set_heatr_conf+0x122>
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
    1802:	ab0f      	add	r3, sp, #60	; 0x3c
    1804:	701a      	strb	r2, [r3, #0]
            (*nb_conv) = 0;
    1806:	2400      	movs	r4, #0
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
    1808:	9b00      	ldr	r3, [sp, #0]
    180a:	9a01      	ldr	r2, [sp, #4]
    180c:	a909      	add	r1, sp, #36	; 0x24
    180e:	a806      	add	r0, sp, #24
    1810:	4d98      	ldr	r5, [pc, #608]	; (1a74 <bme68x_set_heatr_conf+0x31c>)
    1812:	47a8      	blx	r5
    1814:	0005      	movs	r5, r0
    if (rslt == BME68X_OK)
    1816:	2d00      	cmp	r5, #0
    1818:	d1b6      	bne.n	1788 <bme68x_set_heatr_conf+0x30>
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
    181a:	9e00      	ldr	r6, [sp, #0]
    181c:	0033      	movs	r3, r6
    181e:	9a01      	ldr	r2, [sp, #4]
    1820:	a90f      	add	r1, sp, #60	; 0x3c
    1822:	a80c      	add	r0, sp, #48	; 0x30
    1824:	4d93      	ldr	r5, [pc, #588]	; (1a74 <bme68x_set_heatr_conf+0x31c>)
    1826:	47a8      	blx	r5
    1828:	1e05      	subs	r5, r0, #0
        if (rslt == BME68X_OK)
    182a:	d1ad      	bne.n	1788 <bme68x_set_heatr_conf+0x30>
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
    182c:	0033      	movs	r3, r6
    182e:	2202      	movs	r2, #2
    1830:	a913      	add	r1, sp, #76	; 0x4c
    1832:	2070      	movs	r0, #112	; 0x70
    1834:	4d90      	ldr	r5, [pc, #576]	; (1a78 <bme68x_set_heatr_conf+0x320>)
    1836:	47a8      	blx	r5
    1838:	1e05      	subs	r5, r0, #0
            if (rslt == BME68X_OK)
    183a:	d1a5      	bne.n	1788 <bme68x_set_heatr_conf+0x30>
                if (conf->enable == BME68X_ENABLE)
    183c:	9b02      	ldr	r3, [sp, #8]
    183e:	781b      	ldrb	r3, [r3, #0]
    1840:	2b01      	cmp	r3, #1
    1842:	d100      	bne.n	1846 <bme68x_set_heatr_conf+0xee>
    1844:	e0c6      	b.n	19d4 <bme68x_set_heatr_conf+0x27c>
                    run_gas = BME68X_DISABLE_GAS_MEAS;
    1846:	2000      	movs	r0, #0
                    hctrl = BME68X_DISABLE_HEATER;
    1848:	2301      	movs	r3, #1
                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
    184a:	a913      	add	r1, sp, #76	; 0x4c
    184c:	780a      	ldrb	r2, [r1, #0]
    184e:	2508      	movs	r5, #8
    1850:	43aa      	bics	r2, r5
    1852:	00db      	lsls	r3, r3, #3
    1854:	431a      	orrs	r2, r3
    1856:	700a      	strb	r2, [r1, #0]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
    1858:	784b      	ldrb	r3, [r1, #1]
    185a:	220f      	movs	r2, #15
    185c:	4393      	bics	r3, r2
    185e:	4014      	ands	r4, r2
    1860:	4323      	orrs	r3, r4
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
    1862:	3221      	adds	r2, #33	; 0x21
    1864:	4393      	bics	r3, r2
    1866:	0100      	lsls	r0, r0, #4
    1868:	4303      	orrs	r3, r0
    186a:	704b      	strb	r3, [r1, #1]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
    186c:	9b00      	ldr	r3, [sp, #0]
    186e:	3a2e      	subs	r2, #46	; 0x2e
    1870:	a812      	add	r0, sp, #72	; 0x48
    1872:	4c80      	ldr	r4, [pc, #512]	; (1a74 <bme68x_set_heatr_conf+0x31c>)
    1874:	47a0      	blx	r4
    1876:	0005      	movs	r5, r0
    1878:	e786      	b.n	1788 <bme68x_set_heatr_conf+0x30>
        while (dur > 0x3F)
    187a:	293f      	cmp	r1, #63	; 0x3f
    187c:	d909      	bls.n	1892 <bme68x_set_heatr_conf+0x13a>
    187e:	2300      	movs	r3, #0
            dur = dur / 4;
    1880:	0889      	lsrs	r1, r1, #2
            factor += 1;
    1882:	3301      	adds	r3, #1
    1884:	b2db      	uxtb	r3, r3
        while (dur > 0x3F)
    1886:	293f      	cmp	r1, #63	; 0x3f
    1888:	d8fa      	bhi.n	1880 <bme68x_set_heatr_conf+0x128>
        durval = (uint8_t)(dur + (factor * 64));
    188a:	019b      	lsls	r3, r3, #6
    188c:	185b      	adds	r3, r3, r1
    188e:	b2da      	uxtb	r2, r3
    1890:	e7b7      	b.n	1802 <bme68x_set_heatr_conf+0xaa>
        while (dur > 0x3F)
    1892:	2300      	movs	r3, #0
    1894:	e7f9      	b.n	188a <bme68x_set_heatr_conf+0x132>
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
    1896:	9b02      	ldr	r3, [sp, #8]
    1898:	68df      	ldr	r7, [r3, #12]
    189a:	2f00      	cmp	r7, #0
    189c:	d100      	bne.n	18a0 <bme68x_set_heatr_conf+0x148>
    189e:	e0bb      	b.n	1a18 <bme68x_set_heatr_conf+0x2c0>
    18a0:	689c      	ldr	r4, [r3, #8]
    18a2:	2c00      	cmp	r4, #0
    18a4:	d100      	bne.n	18a8 <bme68x_set_heatr_conf+0x150>
    18a6:	e0bc      	b.n	1a22 <bme68x_set_heatr_conf+0x2ca>
            for (i = 0; i < conf->profile_len; i++)
    18a8:	7c1b      	ldrb	r3, [r3, #16]
    18aa:	9301      	str	r3, [sp, #4]
    18ac:	2b00      	cmp	r3, #0
    18ae:	d100      	bne.n	18b2 <bme68x_set_heatr_conf+0x15a>
    18b0:	e0b0      	b.n	1a14 <bme68x_set_heatr_conf+0x2bc>
    18b2:	335a      	adds	r3, #90	; 0x5a
    18b4:	b2db      	uxtb	r3, r3
    18b6:	4699      	mov	r9, r3
    18b8:	255a      	movs	r5, #90	; 0x5a
    18ba:	2600      	movs	r6, #0
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
    18bc:	4b6b      	ldr	r3, [pc, #428]	; (1a6c <bme68x_set_heatr_conf+0x314>)
    18be:	469a      	mov	sl, r3
    if (dur >= 0xfc0)
    18c0:	4b6b      	ldr	r3, [pc, #428]	; (1a70 <bme68x_set_heatr_conf+0x318>)
    18c2:	469b      	mov	fp, r3
    18c4:	e00e      	b.n	18e4 <bme68x_set_heatr_conf+0x18c>
        while (dur > 0x3F)
    18c6:	2300      	movs	r3, #0
        durval = (uint8_t)(dur + (factor * 64));
    18c8:	019b      	lsls	r3, r3, #6
    18ca:	185b      	adds	r3, r3, r1
    18cc:	b2db      	uxtb	r3, r3
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
    18ce:	aa04      	add	r2, sp, #16
    18d0:	212c      	movs	r1, #44	; 0x2c
    18d2:	1852      	adds	r2, r2, r1
    18d4:	5593      	strb	r3, [r2, r6]
    18d6:	3601      	adds	r6, #1
    18d8:	3501      	adds	r5, #1
    18da:	b2ed      	uxtb	r5, r5
    18dc:	3402      	adds	r4, #2
    18de:	3702      	adds	r7, #2
            for (i = 0; i < conf->profile_len; i++)
    18e0:	454d      	cmp	r5, r9
    18e2:	d01d      	beq.n	1920 <bme68x_set_heatr_conf+0x1c8>
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
    18e4:	ab04      	add	r3, sp, #16
    18e6:	2208      	movs	r2, #8
    18e8:	189b      	adds	r3, r3, r2
    18ea:	559d      	strb	r5, [r3, r6]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
    18ec:	8820      	ldrh	r0, [r4, #0]
    18ee:	9900      	ldr	r1, [sp, #0]
    18f0:	47d0      	blx	sl
    18f2:	ab04      	add	r3, sp, #16
    18f4:	2214      	movs	r2, #20
    18f6:	189b      	adds	r3, r3, r2
    18f8:	5598      	strb	r0, [r3, r6]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
    18fa:	002b      	movs	r3, r5
    18fc:	330a      	adds	r3, #10
    18fe:	aa04      	add	r2, sp, #16
    1900:	2120      	movs	r1, #32
    1902:	1852      	adds	r2, r2, r1
    1904:	5593      	strb	r3, [r2, r6]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
    1906:	8839      	ldrh	r1, [r7, #0]
        durval = 0xff; /* Max duration*/
    1908:	23ff      	movs	r3, #255	; 0xff
    if (dur >= 0xfc0)
    190a:	4559      	cmp	r1, fp
    190c:	d8df      	bhi.n	18ce <bme68x_set_heatr_conf+0x176>
        while (dur > 0x3F)
    190e:	293f      	cmp	r1, #63	; 0x3f
    1910:	d9d9      	bls.n	18c6 <bme68x_set_heatr_conf+0x16e>
    1912:	2300      	movs	r3, #0
            dur = dur / 4;
    1914:	0889      	lsrs	r1, r1, #2
            factor += 1;
    1916:	3301      	adds	r3, #1
    1918:	b2db      	uxtb	r3, r3
        while (dur > 0x3F)
    191a:	293f      	cmp	r1, #63	; 0x3f
    191c:	d8fa      	bhi.n	1914 <bme68x_set_heatr_conf+0x1bc>
    191e:	e7d3      	b.n	18c8 <bme68x_set_heatr_conf+0x170>
            for (i = 0; i < conf->profile_len; i++)
    1920:	9c01      	ldr	r4, [sp, #4]
    1922:	e771      	b.n	1808 <bme68x_set_heatr_conf+0xb0>
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
    1924:	9902      	ldr	r1, [sp, #8]
    1926:	68cb      	ldr	r3, [r1, #12]
    1928:	2b00      	cmp	r3, #0
    192a:	d100      	bne.n	192e <bme68x_set_heatr_conf+0x1d6>
    192c:	e07e      	b.n	1a2c <bme68x_set_heatr_conf+0x2d4>
    192e:	688a      	ldr	r2, [r1, #8]
    1930:	2a00      	cmp	r2, #0
    1932:	d100      	bne.n	1936 <bme68x_set_heatr_conf+0x1de>
    1934:	e07f      	b.n	1a36 <bme68x_set_heatr_conf+0x2de>
            if (conf->shared_heatr_dur == 0)
    1936:	8a48      	ldrh	r0, [r1, #18]
    1938:	4681      	mov	r9, r0
    193a:	2800      	cmp	r0, #0
    193c:	d058      	beq.n	19f0 <bme68x_set_heatr_conf+0x298>
            for (i = 0; i < conf->profile_len; i++)
    193e:	7c09      	ldrb	r1, [r1, #16]
    1940:	9101      	str	r1, [sp, #4]
    1942:	2900      	cmp	r1, #0
    1944:	d07c      	beq.n	1a40 <bme68x_set_heatr_conf+0x2e8>
    1946:	001f      	movs	r7, r3
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
    1948:	2664      	movs	r6, #100	; 0x64
    194a:	2400      	movs	r4, #0
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
    194c:	9503      	str	r5, [sp, #12]
    194e:	0015      	movs	r5, r2
    1950:	9b01      	ldr	r3, [sp, #4]
    1952:	4698      	mov	r8, r3
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
    1954:	0033      	movs	r3, r6
    1956:	3b0a      	subs	r3, #10
    1958:	aa04      	add	r2, sp, #16
    195a:	2108      	movs	r1, #8
    195c:	1852      	adds	r2, r2, r1
    195e:	5513      	strb	r3, [r2, r4]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
    1960:	8828      	ldrh	r0, [r5, #0]
    1962:	9900      	ldr	r1, [sp, #0]
    1964:	4b41      	ldr	r3, [pc, #260]	; (1a6c <bme68x_set_heatr_conf+0x314>)
    1966:	4798      	blx	r3
    1968:	ab04      	add	r3, sp, #16
    196a:	2214      	movs	r2, #20
    196c:	189b      	adds	r3, r3, r2
    196e:	5518      	strb	r0, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
    1970:	ab04      	add	r3, sp, #16
    1972:	320c      	adds	r2, #12
    1974:	189b      	adds	r3, r3, r2
    1976:	551e      	strb	r6, [r3, r4]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
    1978:	883b      	ldrh	r3, [r7, #0]
    197a:	aa04      	add	r2, sp, #16
    197c:	212c      	movs	r1, #44	; 0x2c
    197e:	1852      	adds	r2, r2, r1
    1980:	5513      	strb	r3, [r2, r4]
    1982:	3401      	adds	r4, #1
    1984:	3502      	adds	r5, #2
    1986:	3601      	adds	r6, #1
    1988:	b2f6      	uxtb	r6, r6
    198a:	3702      	adds	r7, #2
            for (i = 0; i < conf->profile_len; i++)
    198c:	b2e3      	uxtb	r3, r4
    198e:	4543      	cmp	r3, r8
    1990:	d3e0      	bcc.n	1954 <bme68x_set_heatr_conf+0x1fc>
    1992:	9d03      	ldr	r5, [sp, #12]
    if (dur >= 0x783)
    1994:	4a39      	ldr	r2, [pc, #228]	; (1a7c <bme68x_set_heatr_conf+0x324>)
        heatdurval = 0xff; /* Max duration */
    1996:	23ff      	movs	r3, #255	; 0xff
    if (dur >= 0x783)
    1998:	4649      	mov	r1, r9
    199a:	4291      	cmp	r1, r2
    199c:	d905      	bls.n	19aa <bme68x_set_heatr_conf+0x252>
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
    199e:	aa04      	add	r2, sp, #16
    19a0:	7193      	strb	r3, [r2, #6]
            if (rslt == BME68X_OK)
    19a2:	2d00      	cmp	r5, #0
    19a4:	d052      	beq.n	1a4c <bme68x_set_heatr_conf+0x2f4>
    if (rslt == BME68X_OK)
    19a6:	9c01      	ldr	r4, [sp, #4]
    19a8:	e735      	b.n	1816 <bme68x_set_heatr_conf+0xbe>
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
    19aa:	20fa      	movs	r0, #250	; 0xfa
    19ac:	0080      	lsls	r0, r0, #2
    19ae:	464b      	mov	r3, r9
    19b0:	4358      	muls	r0, r3
    19b2:	21de      	movs	r1, #222	; 0xde
    19b4:	31ff      	adds	r1, #255	; 0xff
    19b6:	4b32      	ldr	r3, [pc, #200]	; (1a80 <bme68x_set_heatr_conf+0x328>)
    19b8:	4798      	blx	r3
    19ba:	b280      	uxth	r0, r0
    uint8_t factor = 0;
    19bc:	2300      	movs	r3, #0
        while (dur > 0x3F)
    19be:	283f      	cmp	r0, #63	; 0x3f
    19c0:	d904      	bls.n	19cc <bme68x_set_heatr_conf+0x274>
            dur = dur >> 2;
    19c2:	0880      	lsrs	r0, r0, #2
            factor += 1;
    19c4:	3301      	adds	r3, #1
    19c6:	b2db      	uxtb	r3, r3
        while (dur > 0x3F)
    19c8:	283f      	cmp	r0, #63	; 0x3f
    19ca:	d8fa      	bhi.n	19c2 <bme68x_set_heatr_conf+0x26a>
        heatdurval = (uint8_t)(dur + (factor * 64));
    19cc:	019b      	lsls	r3, r3, #6
    19ce:	181b      	adds	r3, r3, r0
    19d0:	b2db      	uxtb	r3, r3
    19d2:	e7e4      	b.n	199e <bme68x_set_heatr_conf+0x246>
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
    19d4:	9b00      	ldr	r3, [sp, #0]
    19d6:	689b      	ldr	r3, [r3, #8]
    19d8:	9301      	str	r3, [sp, #4]
    19da:	2b01      	cmp	r3, #1
    19dc:	d002      	beq.n	19e4 <bme68x_set_heatr_conf+0x28c>
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
    19de:	2001      	movs	r0, #1
                    hctrl = BME68X_ENABLE_HEATER;
    19e0:	2300      	movs	r3, #0
    19e2:	e732      	b.n	184a <bme68x_set_heatr_conf+0xf2>
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
    19e4:	2002      	movs	r0, #2
                    hctrl = BME68X_ENABLE_HEATER;
    19e6:	2300      	movs	r3, #0
    19e8:	e72f      	b.n	184a <bme68x_set_heatr_conf+0xf2>
        rslt = BME68X_E_NULL_PTR;
    19ea:	2501      	movs	r5, #1
    19ec:	426d      	negs	r5, r5
    return rslt;
    19ee:	e6cb      	b.n	1788 <bme68x_set_heatr_conf+0x30>
            for (i = 0; i < conf->profile_len; i++)
    19f0:	9902      	ldr	r1, [sp, #8]
    19f2:	7c09      	ldrb	r1, [r1, #16]
    19f4:	9101      	str	r1, [sp, #4]
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
    19f6:	2503      	movs	r5, #3
            for (i = 0; i < conf->profile_len; i++)
    19f8:	2900      	cmp	r1, #0
    19fa:	d1a4      	bne.n	1946 <bme68x_set_heatr_conf+0x1ee>
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
    19fc:	20fa      	movs	r0, #250	; 0xfa
    19fe:	0080      	lsls	r0, r0, #2
    1a00:	464b      	mov	r3, r9
    1a02:	4358      	muls	r0, r3
    1a04:	21de      	movs	r1, #222	; 0xde
    1a06:	31ff      	adds	r1, #255	; 0xff
    1a08:	4b1d      	ldr	r3, [pc, #116]	; (1a80 <bme68x_set_heatr_conf+0x328>)
    1a0a:	4798      	blx	r3
    1a0c:	b280      	uxth	r0, r0
    uint8_t factor = 0;
    1a0e:	9b01      	ldr	r3, [sp, #4]
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
    1a10:	2503      	movs	r5, #3
    1a12:	e7db      	b.n	19cc <bme68x_set_heatr_conf+0x274>
            for (i = 0; i < conf->profile_len; i++)
    1a14:	9c01      	ldr	r4, [sp, #4]
    1a16:	e6f7      	b.n	1808 <bme68x_set_heatr_conf+0xb0>
    uint8_t write_len = 0;
    1a18:	2300      	movs	r3, #0
    1a1a:	9301      	str	r3, [sp, #4]
                rslt = BME68X_E_NULL_PTR;
    1a1c:	2501      	movs	r5, #1
    1a1e:	426d      	negs	r5, r5
    1a20:	e7c1      	b.n	19a6 <bme68x_set_heatr_conf+0x24e>
    uint8_t write_len = 0;
    1a22:	2300      	movs	r3, #0
    1a24:	9301      	str	r3, [sp, #4]
                rslt = BME68X_E_NULL_PTR;
    1a26:	2501      	movs	r5, #1
    1a28:	426d      	negs	r5, r5
    1a2a:	e7bc      	b.n	19a6 <bme68x_set_heatr_conf+0x24e>
    uint8_t write_len = 0;
    1a2c:	2300      	movs	r3, #0
    1a2e:	9301      	str	r3, [sp, #4]
                rslt = BME68X_E_NULL_PTR;
    1a30:	2501      	movs	r5, #1
    1a32:	426d      	negs	r5, r5
    1a34:	e7b7      	b.n	19a6 <bme68x_set_heatr_conf+0x24e>
    uint8_t write_len = 0;
    1a36:	2300      	movs	r3, #0
    1a38:	9301      	str	r3, [sp, #4]
                rslt = BME68X_E_NULL_PTR;
    1a3a:	2501      	movs	r5, #1
    1a3c:	426d      	negs	r5, r5
    1a3e:	e7b2      	b.n	19a6 <bme68x_set_heatr_conf+0x24e>
    if (dur >= 0x783)
    1a40:	4b0e      	ldr	r3, [pc, #56]	; (1a7c <bme68x_set_heatr_conf+0x324>)
    1a42:	4298      	cmp	r0, r3
    1a44:	d9b1      	bls.n	19aa <bme68x_set_heatr_conf+0x252>
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
    1a46:	22ff      	movs	r2, #255	; 0xff
    1a48:	ab04      	add	r3, sp, #16
    1a4a:	719a      	strb	r2, [r3, #6]
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
    1a4c:	9b00      	ldr	r3, [sp, #0]
    1a4e:	2201      	movs	r2, #1
    1a50:	a904      	add	r1, sp, #16
    1a52:	3106      	adds	r1, #6
    1a54:	a804      	add	r0, sp, #16
    1a56:	3007      	adds	r0, #7
    1a58:	4c06      	ldr	r4, [pc, #24]	; (1a74 <bme68x_set_heatr_conf+0x31c>)
    1a5a:	47a0      	blx	r4
    1a5c:	0005      	movs	r5, r0
    1a5e:	e6ba      	b.n	17d6 <bme68x_set_heatr_conf+0x7e>
    1a60:	0000da08 	.word	0x0000da08
    1a64:	00001115 	.word	0x00001115
    1a68:	00008857 	.word	0x00008857
    1a6c:	00000b15 	.word	0x00000b15
    1a70:	00000fbf 	.word	0x00000fbf
    1a74:	00000e05 	.word	0x00000e05
    1a78:	00000ee9 	.word	0x00000ee9
    1a7c:	00000782 	.word	0x00000782
    1a80:	0000ab0d 	.word	0x0000ab0d

00001a84 <bme68x_default_config>:
int8_t bme68x_default_config(struct bme68x_dev *dev) {
    1a84:	b530      	push	{r4, r5, lr}
    1a86:	b089      	sub	sp, #36	; 0x24
    1a88:	0004      	movs	r4, r0
	conf.os_hum = BME68X_OS_1X;
    1a8a:	a806      	add	r0, sp, #24
    1a8c:	2501      	movs	r5, #1
    1a8e:	7005      	strb	r5, [r0, #0]
	conf.os_pres = BME68X_OS_16X;
    1a90:	2305      	movs	r3, #5
    1a92:	7083      	strb	r3, [r0, #2]
	conf.os_temp = BME68X_OS_2X;
    1a94:	3b03      	subs	r3, #3
    1a96:	7043      	strb	r3, [r0, #1]
	rslt = bme68x_set_conf(&conf, dev);
    1a98:	0021      	movs	r1, r4
    1a9a:	4b08      	ldr	r3, [pc, #32]	; (1abc <bme68x_default_config+0x38>)
    1a9c:	4798      	blx	r3
	heatr_conf.enable = BME68X_ENABLE;
    1a9e:	a901      	add	r1, sp, #4
    1aa0:	700d      	strb	r5, [r1, #0]
	heatr_conf.heatr_dur = BME68X_HEATR_DUR1;
    1aa2:	23fa      	movs	r3, #250	; 0xfa
    1aa4:	009b      	lsls	r3, r3, #2
    1aa6:	808b      	strh	r3, [r1, #4]
	heatr_conf.heatr_temp = BME68X_HIGH_TEMP;
    1aa8:	23af      	movs	r3, #175	; 0xaf
    1aaa:	005b      	lsls	r3, r3, #1
    1aac:	804b      	strh	r3, [r1, #2]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, dev);
    1aae:	0022      	movs	r2, r4
    1ab0:	2001      	movs	r0, #1
    1ab2:	4b03      	ldr	r3, [pc, #12]	; (1ac0 <bme68x_default_config+0x3c>)
    1ab4:	4798      	blx	r3
}
    1ab6:	b009      	add	sp, #36	; 0x24
    1ab8:	bd30      	pop	{r4, r5, pc}
    1aba:	46c0      	nop			; (mov r8, r8)
    1abc:	000011d9 	.word	0x000011d9
    1ac0:	00001759 	.word	0x00001759

00001ac4 <bme68x_interface_init>:
/*!
 * BME680 interface init function. Maps platform specific functions to 
 * device descriptor.
 */
int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf)
{
    1ac4:	b510      	push	{r4, lr}
    1ac6:	b082      	sub	sp, #8
    1ac8:	1e04      	subs	r4, r0, #0
	// Assuming the I2C has been initialized before. 
    int8_t rslt = BME68X_OK;
	uint8_t dev_addr;

    if (bme != NULL)
    1aca:	d018      	beq.n	1afe <bme68x_interface_init+0x3a>

#if defined(PC)
        setbuf(stdout, NULL);
#endif
        /* Bus configuration : I2C */
        if (intf == BME68X_I2C_INTF)
    1acc:	2901      	cmp	r1, #1
    1ace:	d00c      	beq.n	1aea <bme68x_interface_init+0x26>
        else if (intf == BME68X_SPI_INTF)
        {
			/* Not required for our application */
        }

        delay_ms(100);
    1ad0:	2064      	movs	r0, #100	; 0x64
    1ad2:	4b0c      	ldr	r3, [pc, #48]	; (1b04 <bme68x_interface_init+0x40>)
    1ad4:	4798      	blx	r3

        bme->delay__us = bme68x_delay__us;
    1ad6:	4b0c      	ldr	r3, [pc, #48]	; (1b08 <bme68x_interface_init+0x44>)
    1ad8:	64a3      	str	r3, [r4, #72]	; 0x48
        bme->intf_ptr = &dev_addr;
    1ada:	466b      	mov	r3, sp
    1adc:	3307      	adds	r3, #7
    1ade:	6063      	str	r3, [r4, #4]
        bme->amb_temp = 25; /* The ambient temperature in deg C is used for defining the heater temperature */
    1ae0:	2319      	movs	r3, #25
    1ae2:	73a3      	strb	r3, [r4, #14]
    int8_t rslt = BME68X_OK;
    1ae4:	2000      	movs	r0, #0
    {
        rslt = BME68X_E_NULL_PTR;
    }

    return rslt;
}
    1ae6:	b002      	add	sp, #8
    1ae8:	bd10      	pop	{r4, pc}
            dev_addr = BME68X_I2C_ADDR_HIGH;
    1aea:	2277      	movs	r2, #119	; 0x77
    1aec:	466b      	mov	r3, sp
    1aee:	71da      	strb	r2, [r3, #7]
            bme->read = bme68x_i2c_read;
    1af0:	4b06      	ldr	r3, [pc, #24]	; (1b0c <bme68x_interface_init+0x48>)
    1af2:	6403      	str	r3, [r0, #64]	; 0x40
            bme->write = bme68x_i2c_write;
    1af4:	4b06      	ldr	r3, [pc, #24]	; (1b10 <bme68x_interface_init+0x4c>)
    1af6:	6443      	str	r3, [r0, #68]	; 0x44
            bme->intf = BME68X_I2C_INTF;
    1af8:	2301      	movs	r3, #1
    1afa:	7303      	strb	r3, [r0, #12]
    1afc:	e7e8      	b.n	1ad0 <bme68x_interface_init+0xc>
        rslt = BME68X_E_NULL_PTR;
    1afe:	2001      	movs	r0, #1
    1b00:	4240      	negs	r0, r0
    1b02:	e7f0      	b.n	1ae6 <bme68x_interface_init+0x22>
    1b04:	00006c6d 	.word	0x00006c6d
    1b08:	00000dcd 	.word	0x00000dcd
    1b0c:	00000d45 	.word	0x00000d45
    1b10:	00000d91 	.word	0x00000d91

00001b14 <CLI_ResetDevice>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    1b14:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    1b18:	4a02      	ldr	r2, [pc, #8]	; (1b24 <CLI_ResetDevice+0x10>)
    1b1a:	4b03      	ldr	r3, [pc, #12]	; (1b28 <CLI_ResetDevice+0x14>)
    1b1c:	60da      	str	r2, [r3, #12]
    1b1e:	f3bf 8f4f 	dsb	sy
    1b22:	e7fe      	b.n	1b22 <CLI_ResetDevice+0xe>
    1b24:	05fa0004 	.word	0x05fa0004
    1b28:	e000ed00 	.word	0xe000ed00

00001b2c <CLI_GetTempData>:
/******************************************************************************
* CLI Functions - Define here
******************************************************************************/
//Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetTempData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
    1b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b2e:	b0ab      	sub	sp, #172	; 0xac
    1b30:	0005      	movs	r5, r0
	int8_t rslt;
	uint8_t n_fields;
	uint8_t i = 0;
	struct bme68x_data data[BME68X_N_MEAS] = { { 0 } };
    1b32:	2290      	movs	r2, #144	; 0x90
    1b34:	2100      	movs	r1, #0
    1b36:	a805      	add	r0, sp, #20
    1b38:	4b13      	ldr	r3, [pc, #76]	; (1b88 <CLI_GetTempData+0x5c>)
    1b3a:	4798      	blx	r3
	//struct bme68x_dev t_dev;

	rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &bme); /* Trigger a measurement */
    1b3c:	4c13      	ldr	r4, [pc, #76]	; (1b8c <CLI_GetTempData+0x60>)
    1b3e:	0021      	movs	r1, r4
    1b40:	2001      	movs	r0, #1
    1b42:	4b13      	ldr	r3, [pc, #76]	; (1b90 <CLI_GetTempData+0x64>)
    1b44:	4798      	blx	r3

	/* Wait for the measurement to complete */
	//t_dev.delay__us(BME68X_HEATR_DUR1_DELAY, t_dev.intf_ptr);
	vTaskDelay(pdMS_TO_TICKS((uint32_t) 1000));
    1b46:	20fa      	movs	r0, #250	; 0xfa
    1b48:	0080      	lsls	r0, r0, #2
    1b4a:	4b12      	ldr	r3, [pc, #72]	; (1b94 <CLI_GetTempData+0x68>)
    1b4c:	4798      	blx	r3
	rslt = bme68x_get_data(BME68X_FORCED_MODE, &data[0], &n_fields, &bme);
    1b4e:	0023      	movs	r3, r4
    1b50:	22a7      	movs	r2, #167	; 0xa7
    1b52:	446a      	add	r2, sp
    1b54:	a905      	add	r1, sp, #20
    1b56:	2001      	movs	r0, #1
    1b58:	4c0f      	ldr	r4, [pc, #60]	; (1b98 <CLI_GetTempData+0x6c>)
    1b5a:	47a0      	blx	r4
		    
	sprintf(pcWriteBuffer, "Temp: %f  Hum: %f Press: %f \n", data->temperature, data->humidity, data->pressure);
    1b5c:	4c0f      	ldr	r4, [pc, #60]	; (1b9c <CLI_GetTempData+0x70>)
    1b5e:	9807      	ldr	r0, [sp, #28]
    1b60:	47a0      	blx	r4
    1b62:	0006      	movs	r6, r0
    1b64:	000f      	movs	r7, r1
    1b66:	9808      	ldr	r0, [sp, #32]
    1b68:	47a0      	blx	r4
    1b6a:	9002      	str	r0, [sp, #8]
    1b6c:	9103      	str	r1, [sp, #12]
    1b6e:	9809      	ldr	r0, [sp, #36]	; 0x24
    1b70:	47a0      	blx	r4
    1b72:	9000      	str	r0, [sp, #0]
    1b74:	9101      	str	r1, [sp, #4]
    1b76:	0032      	movs	r2, r6
    1b78:	003b      	movs	r3, r7
    1b7a:	4909      	ldr	r1, [pc, #36]	; (1ba0 <CLI_GetTempData+0x74>)
    1b7c:	0028      	movs	r0, r5
    1b7e:	4c09      	ldr	r4, [pc, #36]	; (1ba4 <CLI_GetTempData+0x78>)
    1b80:	47a0      	blx	r4
	
	return pdFALSE;
}
    1b82:	2000      	movs	r0, #0
    1b84:	b02b      	add	sp, #172	; 0xac
    1b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b88:	00008857 	.word	0x00008857
    1b8c:	20004e70 	.word	0x20004e70
    1b90:	00001115 	.word	0x00001115
    1b94:	00005d59 	.word	0x00005d59
    1b98:	0000132d 	.word	0x0000132d
    1b9c:	0000d8a5 	.word	0x0000d8a5
    1ba0:	0000da50 	.word	0x0000da50
    1ba4:	00009321 	.word	0x00009321

00001ba8 <CLI_GetImuData>:

//Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
    1ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1baa:	b085      	sub	sp, #20
    1bac:	9002      	str	r0, [sp, #8]
    1bae:	9103      	str	r1, [sp, #12]
	static int16_t  data_raw_acceleration[3];
	static int16_t  data_raw_angular_rate;
	static float acceleration_mg[3];
	uint8_t reg  = 1;
	stmdev_ctx_t *dev_ctx = GetImuStruct();
    1bb0:	4b17      	ldr	r3, [pc, #92]	; (1c10 <CLI_GetImuData+0x68>)
    1bb2:	4798      	blx	r3
    1bb4:	0007      	movs	r7, r0

	/* Read output only if new xl value is available */
	//lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);

	if (reg) {
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
    1bb6:	4c17      	ldr	r4, [pc, #92]	; (1c14 <CLI_GetImuData+0x6c>)
    1bb8:	2206      	movs	r2, #6
    1bba:	2100      	movs	r1, #0
    1bbc:	0020      	movs	r0, r4
    1bbe:	4b16      	ldr	r3, [pc, #88]	; (1c18 <CLI_GetImuData+0x70>)
    1bc0:	4798      	blx	r3
		lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
    1bc2:	0021      	movs	r1, r4
    1bc4:	0038      	movs	r0, r7
    1bc6:	4b15      	ldr	r3, [pc, #84]	; (1c1c <CLI_GetImuData+0x74>)
    1bc8:	4798      	blx	r3
		acceleration_mg[0] =
		lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
    1bca:	2300      	movs	r3, #0
    1bcc:	5ee0      	ldrsh	r0, [r4, r3]
    1bce:	4f14      	ldr	r7, [pc, #80]	; (1c20 <CLI_GetImuData+0x78>)
    1bd0:	47b8      	blx	r7
		acceleration_mg[0] =
    1bd2:	4e14      	ldr	r6, [pc, #80]	; (1c24 <CLI_GetImuData+0x7c>)
    1bd4:	6030      	str	r0, [r6, #0]
		acceleration_mg[1] =
		lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
    1bd6:	2302      	movs	r3, #2
    1bd8:	5ee0      	ldrsh	r0, [r4, r3]
    1bda:	47b8      	blx	r7
		acceleration_mg[1] =
    1bdc:	6070      	str	r0, [r6, #4]
		acceleration_mg[2] =
		lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
    1bde:	2304      	movs	r3, #4
    1be0:	5ee0      	ldrsh	r0, [r4, r3]
    1be2:	47b8      	blx	r7
    1be4:	1c04      	adds	r4, r0, #0
		acceleration_mg[2] =
    1be6:	60b0      	str	r0, [r6, #8]

		snprintf(pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n",
    1be8:	4d0f      	ldr	r5, [pc, #60]	; (1c28 <CLI_GetImuData+0x80>)
    1bea:	6830      	ldr	r0, [r6, #0]
    1bec:	47a8      	blx	r5
    1bee:	0007      	movs	r7, r0
    1bf0:	1c20      	adds	r0, r4, #0
    1bf2:	47a8      	blx	r5
    1bf4:	9001      	str	r0, [sp, #4]
    1bf6:	6870      	ldr	r0, [r6, #4]
    1bf8:	47a8      	blx	r5
    1bfa:	9000      	str	r0, [sp, #0]
    1bfc:	003b      	movs	r3, r7
    1bfe:	4a0b      	ldr	r2, [pc, #44]	; (1c2c <CLI_GetImuData+0x84>)
    1c00:	9903      	ldr	r1, [sp, #12]
    1c02:	9802      	ldr	r0, [sp, #8]
    1c04:	4c0a      	ldr	r4, [pc, #40]	; (1c30 <CLI_GetImuData+0x88>)
    1c06:	47a0      	blx	r4
	} else {
		snprintf(pcWriteBuffer,xWriteBufferLen, "No data ready! \r\n");
	}

	return pdFALSE;
}
    1c08:	2000      	movs	r0, #0
    1c0a:	b005      	add	sp, #20
    1c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c0e:	46c0      	nop			; (mov r8, r8)
    1c10:	00002901 	.word	0x00002901
    1c14:	200002b0 	.word	0x200002b0
    1c18:	00008857 	.word	0x00008857
    1c1c:	000024d1 	.word	0x000024d1
    1c20:	000023b5 	.word	0x000023b5
    1c24:	20000294 	.word	0x20000294
    1c28:	0000bbe9 	.word	0x0000bbe9
    1c2c:	0000da2c 	.word	0x0000da2c
    1c30:	000092bd 	.word	0x000092bd

00001c34 <xCliClearTerminalScreen>:
//THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
//SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
//CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen( char *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
    1c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c36:	0006      	movs	r6, r0
    1c38:	000f      	movs	r7, r1
	char clearScreen = ASCII_ESC;
	snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
    1c3a:	4d06      	ldr	r5, [pc, #24]	; (1c54 <xCliClearTerminalScreen+0x20>)
    1c3c:	231b      	movs	r3, #27
    1c3e:	4a06      	ldr	r2, [pc, #24]	; (1c58 <xCliClearTerminalScreen+0x24>)
    1c40:	210f      	movs	r1, #15
    1c42:	0028      	movs	r0, r5
    1c44:	4c05      	ldr	r4, [pc, #20]	; (1c5c <xCliClearTerminalScreen+0x28>)
    1c46:	47a0      	blx	r4
	snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
    1c48:	002a      	movs	r2, r5
    1c4a:	0039      	movs	r1, r7
    1c4c:	0030      	movs	r0, r6
    1c4e:	47a0      	blx	r4
	return pdFALSE;
}
    1c50:	2000      	movs	r0, #0
    1c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c54:	200002a0 	.word	0x200002a0
    1c58:	0000dbe8 	.word	0x0000dbe8
    1c5c:	000092bd 	.word	0x000092bd

00001c60 <CLI_AirFlow>:
/**************************************************************************/ /**
 * @brief    Air Flow Command
 * @param    p_cli 
 ******************************************************************************/
BaseType_t CLI_AirFlow(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    1c60:	b510      	push	{r4, lr}
    1c62:	0004      	movs	r4, r0
	float air_speed = FS3000_readMetersPerSecond();
    1c64:	4b05      	ldr	r3, [pc, #20]	; (1c7c <CLI_AirFlow+0x1c>)
    1c66:	4798      	blx	r3
	
    sprintf(pcWriteBuffer, "Airflow: %0.2f m/s ", air_speed);
    1c68:	4b05      	ldr	r3, [pc, #20]	; (1c80 <CLI_AirFlow+0x20>)
    1c6a:	4798      	blx	r3
    1c6c:	0002      	movs	r2, r0
    1c6e:	000b      	movs	r3, r1
    1c70:	4904      	ldr	r1, [pc, #16]	; (1c84 <CLI_AirFlow+0x24>)
    1c72:	0020      	movs	r0, r4
    1c74:	4c04      	ldr	r4, [pc, #16]	; (1c88 <CLI_AirFlow+0x28>)
    1c76:	47a0      	blx	r4
	
    //SerialConsoleWriteString(bufCli);
	return pdFALSE;
}
    1c78:	2000      	movs	r0, #0
    1c7a:	bd10      	pop	{r4, pc}
    1c7c:	00000195 	.word	0x00000195
    1c80:	0000d8a5 	.word	0x0000d8a5
    1c84:	0000da18 	.word	0x0000da18
    1c88:	00009321 	.word	0x00009321

00001c8c <vCommandConsoleTask>:
{
    1c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c8e:	46d6      	mov	lr, sl
    1c90:	464f      	mov	r7, r9
    1c92:	b580      	push	{r7, lr}
    1c94:	b083      	sub	sp, #12
FreeRTOS_CLIRegisterCommand( &xTempGetCommand );
    1c96:	4867      	ldr	r0, [pc, #412]	; (1e34 <vCommandConsoleTask+0x1a8>)
    1c98:	4c67      	ldr	r4, [pc, #412]	; (1e38 <vCommandConsoleTask+0x1ac>)
    1c9a:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xImuGetCommand );
    1c9c:	4867      	ldr	r0, [pc, #412]	; (1e3c <vCommandConsoleTask+0x1b0>)
    1c9e:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xClearScreen );
    1ca0:	4867      	ldr	r0, [pc, #412]	; (1e40 <vCommandConsoleTask+0x1b4>)
    1ca2:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xResetCommand );
    1ca4:	4867      	ldr	r0, [pc, #412]	; (1e44 <vCommandConsoleTask+0x1b8>)
    1ca6:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand (&xAirFlow);
    1ca8:	4867      	ldr	r0, [pc, #412]	; (1e48 <vCommandConsoleTask+0x1bc>)
    1caa:	47a0      	blx	r4
    SerialConsoleWriteString( pcWelcomeMessage);
    1cac:	4867      	ldr	r0, [pc, #412]	; (1e4c <vCommandConsoleTask+0x1c0>)
    1cae:	4b68      	ldr	r3, [pc, #416]	; (1e50 <vCommandConsoleTask+0x1c4>)
    1cb0:	4798      	blx	r3
	cliCharReadySemaphore = xSemaphoreCreateBinary();
    1cb2:	2203      	movs	r2, #3
    1cb4:	2100      	movs	r1, #0
    1cb6:	2001      	movs	r0, #1
    1cb8:	4b66      	ldr	r3, [pc, #408]	; (1e54 <vCommandConsoleTask+0x1c8>)
    1cba:	4798      	blx	r3
    1cbc:	4b66      	ldr	r3, [pc, #408]	; (1e58 <vCommandConsoleTask+0x1cc>)
    1cbe:	6018      	str	r0, [r3, #0]
	if(cliCharReadySemaphore == NULL)
    1cc0:	2800      	cmp	r0, #0
    1cc2:	d106      	bne.n	1cd2 <vCommandConsoleTask+0x46>
		LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
    1cc4:	4965      	ldr	r1, [pc, #404]	; (1e5c <vCommandConsoleTask+0x1d0>)
    1cc6:	3003      	adds	r0, #3
    1cc8:	4b65      	ldr	r3, [pc, #404]	; (1e60 <vCommandConsoleTask+0x1d4>)
    1cca:	4798      	blx	r3
		vTaskSuspend( NULL );
    1ccc:	2000      	movs	r0, #0
    1cce:	4b65      	ldr	r3, [pc, #404]	; (1e64 <vCommandConsoleTask+0x1d8>)
    1cd0:	4798      	blx	r3
            cInputIndex = 0;
    1cd2:	2400      	movs	r4, #0
int ret = SerialConsoleReadCharacter(character);
    1cd4:	4b64      	ldr	r3, [pc, #400]	; (1e68 <vCommandConsoleTask+0x1dc>)
    1cd6:	4699      	mov	r9, r3
	xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
    1cd8:	4b5f      	ldr	r3, [pc, #380]	; (1e58 <vCommandConsoleTask+0x1cc>)
    1cda:	469a      	mov	sl, r3
    1cdc:	e033      	b.n	1d46 <vCommandConsoleTask+0xba>
    1cde:	2101      	movs	r1, #1
    1ce0:	4249      	negs	r1, r1
    1ce2:	4653      	mov	r3, sl
    1ce4:	6818      	ldr	r0, [r3, #0]
    1ce6:	4b61      	ldr	r3, [pc, #388]	; (1e6c <vCommandConsoleTask+0x1e0>)
    1ce8:	4798      	blx	r3
	SerialConsoleReadCharacter(character);
    1cea:	a801      	add	r0, sp, #4
    1cec:	4b5e      	ldr	r3, [pc, #376]	; (1e68 <vCommandConsoleTask+0x1dc>)
    1cee:	4798      	blx	r3
    1cf0:	e02d      	b.n	1d4e <vCommandConsoleTask+0xc2>
            SerialConsoleWriteString("\r\n");
    1cf2:	485f      	ldr	r0, [pc, #380]	; (1e70 <vCommandConsoleTask+0x1e4>)
    1cf4:	4b56      	ldr	r3, [pc, #344]	; (1e50 <vCommandConsoleTask+0x1c4>)
    1cf6:	4798      	blx	r3
			isEscapeCode = false; pcEscapeCodePos = 0;
    1cf8:	2400      	movs	r4, #0
    1cfa:	4b5e      	ldr	r3, [pc, #376]	; (1e74 <vCommandConsoleTask+0x1e8>)
    1cfc:	701c      	strb	r4, [r3, #0]
    1cfe:	4b5e      	ldr	r3, [pc, #376]	; (1e78 <vCommandConsoleTask+0x1ec>)
    1d00:	701c      	strb	r4, [r3, #0]
			strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI-1);
    1d02:	4d5e      	ldr	r5, [pc, #376]	; (1e7c <vCommandConsoleTask+0x1f0>)
    1d04:	2231      	movs	r2, #49	; 0x31
    1d06:	495e      	ldr	r1, [pc, #376]	; (1e80 <vCommandConsoleTask+0x1f4>)
    1d08:	0028      	movs	r0, r5
    1d0a:	4b5e      	ldr	r3, [pc, #376]	; (1e84 <vCommandConsoleTask+0x1f8>)
    1d0c:	4798      	blx	r3
			pcLastCommand[MAX_INPUT_LENGTH_CLI-1] = 0;	//Ensure null termination
    1d0e:	2331      	movs	r3, #49	; 0x31
    1d10:	54ec      	strb	r4, [r5, r3]
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
    1d12:	4c5d      	ldr	r4, [pc, #372]	; (1e88 <vCommandConsoleTask+0x1fc>)
    1d14:	4e5a      	ldr	r6, [pc, #360]	; (1e80 <vCommandConsoleTask+0x1f4>)
    1d16:	4f5d      	ldr	r7, [pc, #372]	; (1e8c <vCommandConsoleTask+0x200>)
    1d18:	2264      	movs	r2, #100	; 0x64
    1d1a:	0021      	movs	r1, r4
    1d1c:	0030      	movs	r0, r6
    1d1e:	47b8      	blx	r7
    1d20:	0005      	movs	r5, r0
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
    1d22:	2200      	movs	r2, #0
    1d24:	2363      	movs	r3, #99	; 0x63
    1d26:	54e2      	strb	r2, [r4, r3]
                SerialConsoleWriteString(pcOutputString);
    1d28:	0020      	movs	r0, r4
    1d2a:	4b49      	ldr	r3, [pc, #292]	; (1e50 <vCommandConsoleTask+0x1c4>)
    1d2c:	4798      	blx	r3
            } while( xMoreDataToFollow != pdFALSE );
    1d2e:	2d00      	cmp	r5, #0
    1d30:	d1f2      	bne.n	1d18 <vCommandConsoleTask+0x8c>
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
    1d32:	2232      	movs	r2, #50	; 0x32
    1d34:	2100      	movs	r1, #0
    1d36:	4852      	ldr	r0, [pc, #328]	; (1e80 <vCommandConsoleTask+0x1f4>)
    1d38:	4c55      	ldr	r4, [pc, #340]	; (1e90 <vCommandConsoleTask+0x204>)
    1d3a:	47a0      	blx	r4
			memset( pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
    1d3c:	2264      	movs	r2, #100	; 0x64
    1d3e:	2100      	movs	r1, #0
    1d40:	4851      	ldr	r0, [pc, #324]	; (1e88 <vCommandConsoleTask+0x1fc>)
    1d42:	47a0      	blx	r4
            cInputIndex = 0;
    1d44:	2400      	movs	r4, #0
int ret = SerialConsoleReadCharacter(character);
    1d46:	a801      	add	r0, sp, #4
    1d48:	47c8      	blx	r9
if(ret == -1)
    1d4a:	1c43      	adds	r3, r0, #1
    1d4c:	d0c7      	beq.n	1cde <vCommandConsoleTask+0x52>
	if( cRxedChar[0] == '\n' || cRxedChar[0] == '\r'  )
    1d4e:	466b      	mov	r3, sp
    1d50:	791b      	ldrb	r3, [r3, #4]
    1d52:	2b0a      	cmp	r3, #10
    1d54:	d0cd      	beq.n	1cf2 <vCommandConsoleTask+0x66>
    1d56:	2b0d      	cmp	r3, #13
    1d58:	d0cb      	beq.n	1cf2 <vCommandConsoleTask+0x66>
			if (true == isEscapeCode) {
    1d5a:	4a46      	ldr	r2, [pc, #280]	; (1e74 <vCommandConsoleTask+0x1e8>)
    1d5c:	7812      	ldrb	r2, [r2, #0]
    1d5e:	2a00      	cmp	r2, #0
    1d60:	d03f      	beq.n	1de2 <vCommandConsoleTask+0x156>
				if(pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
    1d62:	4a45      	ldr	r2, [pc, #276]	; (1e78 <vCommandConsoleTask+0x1ec>)
    1d64:	7812      	ldrb	r2, [r2, #0]
    1d66:	2a03      	cmp	r2, #3
    1d68:	d813      	bhi.n	1d92 <vCommandConsoleTask+0x106>
					pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
    1d6a:	1c51      	adds	r1, r2, #1
    1d6c:	b2c9      	uxtb	r1, r1
    1d6e:	4842      	ldr	r0, [pc, #264]	; (1e78 <vCommandConsoleTask+0x1ec>)
    1d70:	7001      	strb	r1, [r0, #0]
    1d72:	4848      	ldr	r0, [pc, #288]	; (1e94 <vCommandConsoleTask+0x208>)
    1d74:	5483      	strb	r3, [r0, r2]
				if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
    1d76:	2901      	cmp	r1, #1
    1d78:	d9e5      	bls.n	1d46 <vCommandConsoleTask+0xba>
					if(strcasecmp(pcEscapeCodes, "oa"))	{
    1d7a:	4947      	ldr	r1, [pc, #284]	; (1e98 <vCommandConsoleTask+0x20c>)
    1d7c:	4845      	ldr	r0, [pc, #276]	; (1e94 <vCommandConsoleTask+0x208>)
    1d7e:	4b47      	ldr	r3, [pc, #284]	; (1e9c <vCommandConsoleTask+0x210>)
    1d80:	4798      	blx	r3
    1d82:	2800      	cmp	r0, #0
    1d84:	d10b      	bne.n	1d9e <vCommandConsoleTask+0x112>
					isEscapeCode = false; pcEscapeCodePos = 0;
    1d86:	2300      	movs	r3, #0
    1d88:	4a3a      	ldr	r2, [pc, #232]	; (1e74 <vCommandConsoleTask+0x1e8>)
    1d8a:	7013      	strb	r3, [r2, #0]
    1d8c:	4a3a      	ldr	r2, [pc, #232]	; (1e78 <vCommandConsoleTask+0x1ec>)
    1d8e:	7013      	strb	r3, [r2, #0]
    1d90:	e7d9      	b.n	1d46 <vCommandConsoleTask+0xba>
					isEscapeCode = false; pcEscapeCodePos = 0;
    1d92:	2300      	movs	r3, #0
    1d94:	4a37      	ldr	r2, [pc, #220]	; (1e74 <vCommandConsoleTask+0x1e8>)
    1d96:	7013      	strb	r3, [r2, #0]
    1d98:	4a37      	ldr	r2, [pc, #220]	; (1e78 <vCommandConsoleTask+0x1ec>)
    1d9a:	7013      	strb	r3, [r2, #0]
    1d9c:	e7d3      	b.n	1d46 <vCommandConsoleTask+0xba>
                            sprintf(pcInputString, "%c[2K\r>", 27);
    1d9e:	4c38      	ldr	r4, [pc, #224]	; (1e80 <vCommandConsoleTask+0x1f4>)
    1da0:	221b      	movs	r2, #27
    1da2:	493f      	ldr	r1, [pc, #252]	; (1ea0 <vCommandConsoleTask+0x214>)
    1da4:	0020      	movs	r0, r4
    1da6:	4b3f      	ldr	r3, [pc, #252]	; (1ea4 <vCommandConsoleTask+0x218>)
    1da8:	4798      	blx	r3
				            SerialConsoleWriteString((char*)pcInputString);
    1daa:	0020      	movs	r0, r4
    1dac:	4b28      	ldr	r3, [pc, #160]	; (1e50 <vCommandConsoleTask+0x1c4>)
    1dae:	4798      	blx	r3
                            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
    1db0:	2232      	movs	r2, #50	; 0x32
    1db2:	2100      	movs	r1, #0
    1db4:	0020      	movs	r0, r4
    1db6:	4b36      	ldr	r3, [pc, #216]	; (1e90 <vCommandConsoleTask+0x204>)
    1db8:	4798      	blx	r3
						strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1); 	
    1dba:	2231      	movs	r2, #49	; 0x31
    1dbc:	492f      	ldr	r1, [pc, #188]	; (1e7c <vCommandConsoleTask+0x1f0>)
    1dbe:	0020      	movs	r0, r4
    1dc0:	4b30      	ldr	r3, [pc, #192]	; (1e84 <vCommandConsoleTask+0x1f8>)
    1dc2:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
    1dc4:	0020      	movs	r0, r4
    1dc6:	4b38      	ldr	r3, [pc, #224]	; (1ea8 <vCommandConsoleTask+0x21c>)
    1dc8:	4798      	blx	r3
    1dca:	2431      	movs	r4, #49	; 0x31
    1dcc:	2830      	cmp	r0, #48	; 0x30
    1dce:	d803      	bhi.n	1dd8 <vCommandConsoleTask+0x14c>
    1dd0:	482a      	ldr	r0, [pc, #168]	; (1e7c <vCommandConsoleTask+0x1f0>)
    1dd2:	4b35      	ldr	r3, [pc, #212]	; (1ea8 <vCommandConsoleTask+0x21c>)
    1dd4:	4798      	blx	r3
    1dd6:	0004      	movs	r4, r0
    1dd8:	b2e4      	uxtb	r4, r4
						SerialConsoleWriteString(pcInputString);
    1dda:	4829      	ldr	r0, [pc, #164]	; (1e80 <vCommandConsoleTask+0x1f4>)
    1ddc:	4b1c      	ldr	r3, [pc, #112]	; (1e50 <vCommandConsoleTask+0x1c4>)
    1dde:	4798      	blx	r3
    1de0:	e7d1      	b.n	1d86 <vCommandConsoleTask+0xfa>
            else if( cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE )
    1de2:	2b08      	cmp	r3, #8
    1de4:	d010      	beq.n	1e08 <vCommandConsoleTask+0x17c>
    1de6:	2b7f      	cmp	r3, #127	; 0x7f
    1de8:	d00e      	beq.n	1e08 <vCommandConsoleTask+0x17c>
			else if( cRxedChar[0] == ASCII_ESC) {
    1dea:	2b1b      	cmp	r3, #27
    1dec:	d01a      	beq.n	1e24 <vCommandConsoleTask+0x198>
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
    1dee:	2c31      	cmp	r4, #49	; 0x31
    1df0:	d803      	bhi.n	1dfa <vCommandConsoleTask+0x16e>
                    pcInputString[ cInputIndex ] = cRxedChar[0];
    1df2:	4a23      	ldr	r2, [pc, #140]	; (1e80 <vCommandConsoleTask+0x1f4>)
    1df4:	5513      	strb	r3, [r2, r4]
                    cInputIndex++;
    1df6:	3401      	adds	r4, #1
    1df8:	b2e4      	uxtb	r4, r4
					cRxedChar[1] = 0;
    1dfa:	2300      	movs	r3, #0
    1dfc:	466a      	mov	r2, sp
    1dfe:	7153      	strb	r3, [r2, #5]
					SerialConsoleWriteString(&cRxedChar[0]);
    1e00:	a801      	add	r0, sp, #4
    1e02:	4b13      	ldr	r3, [pc, #76]	; (1e50 <vCommandConsoleTask+0x1c4>)
    1e04:	4798      	blx	r3
    1e06:	e79e      	b.n	1d46 <vCommandConsoleTask+0xba>
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
    1e08:	4b28      	ldr	r3, [pc, #160]	; (1eac <vCommandConsoleTask+0x220>)
    1e0a:	681b      	ldr	r3, [r3, #0]
    1e0c:	9300      	str	r3, [sp, #0]
				SerialConsoleWriteString(erase);
    1e0e:	4668      	mov	r0, sp
    1e10:	4b0f      	ldr	r3, [pc, #60]	; (1e50 <vCommandConsoleTask+0x1c4>)
    1e12:	4798      	blx	r3
                if( cInputIndex > 0 )
    1e14:	2c00      	cmp	r4, #0
    1e16:	d096      	beq.n	1d46 <vCommandConsoleTask+0xba>
                    cInputIndex--;
    1e18:	3c01      	subs	r4, #1
    1e1a:	b2e4      	uxtb	r4, r4
                    pcInputString[ cInputIndex ] = 0;
    1e1c:	2200      	movs	r2, #0
    1e1e:	4b18      	ldr	r3, [pc, #96]	; (1e80 <vCommandConsoleTask+0x1f4>)
    1e20:	551a      	strb	r2, [r3, r4]
            {
    1e22:	e790      	b.n	1d46 <vCommandConsoleTask+0xba>
				isEscapeCode = true; //Next characters will be code arguments
    1e24:	2201      	movs	r2, #1
    1e26:	4b13      	ldr	r3, [pc, #76]	; (1e74 <vCommandConsoleTask+0x1e8>)
    1e28:	701a      	strb	r2, [r3, #0]
				pcEscapeCodePos = 0;
    1e2a:	2200      	movs	r2, #0
    1e2c:	4b12      	ldr	r3, [pc, #72]	; (1e78 <vCommandConsoleTask+0x1ec>)
    1e2e:	701a      	strb	r2, [r3, #0]
    1e30:	e789      	b.n	1d46 <vCommandConsoleTask+0xba>
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	0000dc10 	.word	0x0000dc10
    1e38:	00002f39 	.word	0x00002f39
    1e3c:	0000dbf0 	.word	0x0000dbf0
    1e40:	0000dbd8 	.word	0x0000dbd8
    1e44:	0000dc00 	.word	0x0000dc00
    1e48:	0000dbc8 	.word	0x0000dbc8
    1e4c:	0000db58 	.word	0x0000db58
    1e50:	00006b7d 	.word	0x00006b7d
    1e54:	00004799 	.word	0x00004799
    1e58:	20003924 	.word	0x20003924
    1e5c:	0000db9c 	.word	0x0000db9c
    1e60:	00006c2d 	.word	0x00006c2d
    1e64:	00005ef9 	.word	0x00005ef9
    1e68:	00006c01 	.word	0x00006c01
    1e6c:	0000527d 	.word	0x0000527d
    1e70:	0000ebfc 	.word	0x0000ebfc
    1e74:	200002b6 	.word	0x200002b6
    1e78:	200002b7 	.word	0x200002b7
    1e7c:	200002f0 	.word	0x200002f0
    1e80:	200002bc 	.word	0x200002bc
    1e84:	000093d1 	.word	0x000093d1
    1e88:	20000324 	.word	0x20000324
    1e8c:	00002f7d 	.word	0x00002f7d
    1e90:	00008857 	.word	0x00008857
    1e94:	200002b8 	.word	0x200002b8
    1e98:	0000dbbc 	.word	0x0000dbbc
    1e9c:	00009365 	.word	0x00009365
    1ea0:	0000dbc0 	.word	0x0000dbc0
    1ea4:	00009321 	.word	0x00009321
    1ea8:	000093a1 	.word	0x000093a1
    1eac:	0000da14 	.word	0x0000da14

00001eb0 <CliCharReadySemaphoreGiveFromISR>:
{
    1eb0:	b510      	push	{r4, lr}
	xHigherPriorityTaskWoken = pdFALSE;
    1eb2:	4c08      	ldr	r4, [pc, #32]	; (1ed4 <CliCharReadySemaphoreGiveFromISR+0x24>)
    1eb4:	2300      	movs	r3, #0
    1eb6:	6023      	str	r3, [r4, #0]
	xSemaphoreGiveFromISR( cliCharReadySemaphore, &xHigherPriorityTaskWoken );
    1eb8:	4b07      	ldr	r3, [pc, #28]	; (1ed8 <CliCharReadySemaphoreGiveFromISR+0x28>)
    1eba:	6818      	ldr	r0, [r3, #0]
    1ebc:	0021      	movs	r1, r4
    1ebe:	4b07      	ldr	r3, [pc, #28]	; (1edc <CliCharReadySemaphoreGiveFromISR+0x2c>)
    1ec0:	4798      	blx	r3
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    1ec2:	6823      	ldr	r3, [r4, #0]
    1ec4:	2b00      	cmp	r3, #0
    1ec6:	d003      	beq.n	1ed0 <CliCharReadySemaphoreGiveFromISR+0x20>
    1ec8:	2280      	movs	r2, #128	; 0x80
    1eca:	0552      	lsls	r2, r2, #21
    1ecc:	4b04      	ldr	r3, [pc, #16]	; (1ee0 <CliCharReadySemaphoreGiveFromISR+0x30>)
    1ece:	601a      	str	r2, [r3, #0]
}
    1ed0:	bd10      	pop	{r4, pc}
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	20000388 	.word	0x20000388
    1ed8:	20003924 	.word	0x20003924
    1edc:	00004f61 	.word	0x00004f61
    1ee0:	e000ed04 	.word	0xe000ed04

00001ee4 <I2cSensorsTxComplete>:
				and is currently waiting for a notification that it has finished.
 * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsTxComplete(struct i2c_master_module *const module){
    1ee4:	b510      	push	{r4, lr}
    1ee6:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;			
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    1ee8:	2400      	movs	r4, #0
    1eea:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    1eec:	4b07      	ldr	r3, [pc, #28]	; (1f0c <I2cSensorsTxComplete+0x28>)
    1eee:	6818      	ldr	r0, [r3, #0]
    1ef0:	a901      	add	r1, sp, #4
    1ef2:	4b07      	ldr	r3, [pc, #28]	; (1f10 <I2cSensorsTxComplete+0x2c>)
    1ef4:	4798      	blx	r3
	sensorTransmitError = false;
    1ef6:	4b07      	ldr	r3, [pc, #28]	; (1f14 <I2cSensorsTxComplete+0x30>)
    1ef8:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    1efa:	9b01      	ldr	r3, [sp, #4]
    1efc:	2b00      	cmp	r3, #0
    1efe:	d003      	beq.n	1f08 <I2cSensorsTxComplete+0x24>
    1f00:	2280      	movs	r2, #128	; 0x80
    1f02:	0552      	lsls	r2, r2, #21
    1f04:	4b04      	ldr	r3, [pc, #16]	; (1f18 <I2cSensorsTxComplete+0x34>)
    1f06:	601a      	str	r2, [r3, #0]
}
    1f08:	b002      	add	sp, #8
    1f0a:	bd10      	pop	{r4, pc}
    1f0c:	20003954 	.word	0x20003954
    1f10:	00004f61 	.word	0x00004f61
    1f14:	2000038c 	.word	0x2000038c
    1f18:	e000ed04 	.word	0xe000ed04

00001f1c <I2cSensorsRxComplete>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsRxComplete(struct i2c_master_module *const module){
    1f1c:	b510      	push	{r4, lr}
    1f1e:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    1f20:	2400      	movs	r4, #0
    1f22:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    1f24:	4b07      	ldr	r3, [pc, #28]	; (1f44 <I2cSensorsRxComplete+0x28>)
    1f26:	6818      	ldr	r0, [r3, #0]
    1f28:	a901      	add	r1, sp, #4
    1f2a:	4b07      	ldr	r3, [pc, #28]	; (1f48 <I2cSensorsRxComplete+0x2c>)
    1f2c:	4798      	blx	r3
	sensorTransmitError = false;
    1f2e:	4b07      	ldr	r3, [pc, #28]	; (1f4c <I2cSensorsRxComplete+0x30>)
    1f30:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    1f32:	9b01      	ldr	r3, [sp, #4]
    1f34:	2b00      	cmp	r3, #0
    1f36:	d003      	beq.n	1f40 <I2cSensorsRxComplete+0x24>
    1f38:	2280      	movs	r2, #128	; 0x80
    1f3a:	0552      	lsls	r2, r2, #21
    1f3c:	4b04      	ldr	r3, [pc, #16]	; (1f50 <I2cSensorsRxComplete+0x34>)
    1f3e:	601a      	str	r2, [r3, #0]
}
    1f40:	b002      	add	sp, #8
    1f42:	bd10      	pop	{r4, pc}
    1f44:	20003954 	.word	0x20003954
    1f48:	00004f61 	.word	0x00004f61
    1f4c:	2000038c 	.word	0x2000038c
    1f50:	e000ed04 	.word	0xe000ed04

00001f54 <I2cSensorsError>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsError(struct i2c_master_module *const module){
    1f54:	b510      	push	{r4, lr}
    1f56:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.txDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    1f58:	2400      	movs	r4, #0
    1f5a:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    1f5c:	4b07      	ldr	r3, [pc, #28]	; (1f7c <I2cSensorsError+0x28>)
    1f5e:	6818      	ldr	r0, [r3, #0]
    1f60:	a901      	add	r1, sp, #4
    1f62:	4b07      	ldr	r3, [pc, #28]	; (1f80 <I2cSensorsError+0x2c>)
    1f64:	4798      	blx	r3
	sensorTransmitError = false;
    1f66:	4b07      	ldr	r3, [pc, #28]	; (1f84 <I2cSensorsError+0x30>)
    1f68:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    1f6a:	9b01      	ldr	r3, [sp, #4]
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d003      	beq.n	1f78 <I2cSensorsError+0x24>
    1f70:	2280      	movs	r2, #128	; 0x80
    1f72:	0552      	lsls	r2, r2, #21
    1f74:	4b04      	ldr	r3, [pc, #16]	; (1f88 <I2cSensorsError+0x34>)
    1f76:	601a      	str	r2, [r3, #0]
}
    1f78:	b002      	add	sp, #8
    1f7a:	bd10      	pop	{r4, pc}
    1f7c:	20003954 	.word	0x20003954
    1f80:	00004f61 	.word	0x00004f61
    1f84:	2000038c 	.word	0x2000038c
    1f88:	e000ed04 	.word	0xe000ed04

00001f8c <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
    1f8c:	b570      	push	{r4, r5, r6, lr}
	/* Register callback function. */
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    1f8e:	4c0c      	ldr	r4, [pc, #48]	; (1fc0 <I2cDriverRegisterSensorBusCallbacks+0x34>)
    1f90:	2200      	movs	r2, #0
    1f92:	490c      	ldr	r1, [pc, #48]	; (1fc4 <I2cDriverRegisterSensorBusCallbacks+0x38>)
    1f94:	0020      	movs	r0, r4
    1f96:	4d0c      	ldr	r5, [pc, #48]	; (1fc8 <I2cDriverRegisterSensorBusCallbacks+0x3c>)
    1f98:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    1f9a:	7e63      	ldrb	r3, [r4, #25]
    1f9c:	2201      	movs	r2, #1
    1f9e:	4313      	orrs	r3, r2
    1fa0:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
    1fa2:	490a      	ldr	r1, [pc, #40]	; (1fcc <I2cDriverRegisterSensorBusCallbacks+0x40>)
    1fa4:	0020      	movs	r0, r4
    1fa6:	47a8      	blx	r5
    1fa8:	7e63      	ldrb	r3, [r4, #25]
    1faa:	2202      	movs	r2, #2
    1fac:	4313      	orrs	r3, r2
    1fae:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_READ_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError,I2C_MASTER_CALLBACK_ERROR);
    1fb0:	4907      	ldr	r1, [pc, #28]	; (1fd0 <I2cDriverRegisterSensorBusCallbacks+0x44>)
    1fb2:	0020      	movs	r0, r4
    1fb4:	47a8      	blx	r5
    1fb6:	7e63      	ldrb	r3, [r4, #25]
    1fb8:	2204      	movs	r2, #4
    1fba:	4313      	orrs	r3, r2
    1fbc:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_ERROR);
}
    1fbe:	bd70      	pop	{r4, r5, r6, pc}
    1fc0:	2000392c 	.word	0x2000392c
    1fc4:	00001ee5 	.word	0x00001ee5
    1fc8:	00000469 	.word	0x00000469
    1fcc:	00001f1d 	.word	0x00001f1d
    1fd0:	00001f55 	.word	0x00001f55

00001fd4 <I2cInitializeDriver>:
 * @fn			int32_t I2cInitializeDriver(void)
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note        
 *****************************************************************************/
 int32_t I2cInitializeDriver(void){
    1fd4:	b570      	push	{r4, r5, r6, lr}
    1fd6:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1fd8:	ab01      	add	r3, sp, #4
    1fda:	2264      	movs	r2, #100	; 0x64
    1fdc:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1fde:	4a33      	ldr	r2, [pc, #204]	; (20ac <STACK_SIZE+0xac>)
    1fe0:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1fe2:	2200      	movs	r2, #0
    1fe4:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1fe6:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    1fe8:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1fea:	2180      	movs	r1, #128	; 0x80
    1fec:	0389      	lsls	r1, r1, #14
    1fee:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    1ff0:	2101      	movs	r1, #1
    1ff2:	4249      	negs	r1, r1
    1ff4:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1ff6:	3125      	adds	r1, #37	; 0x25
    1ff8:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1ffa:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1ffc:	3108      	adds	r1, #8
    1ffe:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2000:	3101      	adds	r1, #1
    2002:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    2004:	3101      	adds	r1, #1
    2006:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2008:	32d7      	adds	r2, #215	; 0xd7
    200a:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    200c:	4a28      	ldr	r2, [pc, #160]	; (20b0 <STACK_SIZE+0xb0>)
    200e:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    2010:	4a28      	ldr	r2, [pc, #160]	; (20b4 <STACK_SIZE+0xb4>)
    2012:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.buffer_timeout = 10000;
    2014:	4a28      	ldr	r2, [pc, #160]	; (20b8 <STACK_SIZE+0xb8>)
    2016:	82da      	strh	r2, [r3, #22]
    2018:	2403      	movs	r4, #3
		errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
    201a:	4d28      	ldr	r5, [pc, #160]	; (20bc <STACK_SIZE+0xbc>)
    201c:	4e28      	ldr	r6, [pc, #160]	; (20c0 <STACK_SIZE+0xc0>)
    201e:	aa01      	add	r2, sp, #4
    2020:	4928      	ldr	r1, [pc, #160]	; (20c4 <STACK_SIZE+0xc4>)
    2022:	0028      	movs	r0, r5
    2024:	47b0      	blx	r6
		if(STATUS_OK == errCodeAsf){
    2026:	2800      	cmp	r0, #0
    2028:	d006      	beq.n	2038 <STACK_SIZE+0x38>
			i2c_master_reset(&i2cSensorBusInstance);
    202a:	4824      	ldr	r0, [pc, #144]	; (20bc <STACK_SIZE+0xbc>)
    202c:	4b26      	ldr	r3, [pc, #152]	; (20c8 <STACK_SIZE+0xc8>)
    202e:	4798      	blx	r3
    2030:	3c01      	subs	r4, #1
    2032:	b2e4      	uxtb	r4, r4
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
    2034:	2c00      	cmp	r4, #0
    2036:	d1f2      	bne.n	201e <STACK_SIZE+0x1e>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2038:	4b20      	ldr	r3, [pc, #128]	; (20bc <STACK_SIZE+0xbc>)
    203a:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    203c:	2207      	movs	r2, #7
    203e:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    2040:	421a      	tst	r2, r3
    2042:	d1fc      	bne.n	203e <STACK_SIZE+0x3e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2044:	6823      	ldr	r3, [r4, #0]
    2046:	2202      	movs	r2, #2
    2048:	4313      	orrs	r3, r2
    204a:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    204c:	4d1b      	ldr	r5, [pc, #108]	; (20bc <STACK_SIZE+0xbc>)
    204e:	6828      	ldr	r0, [r5, #0]
    2050:	4b1e      	ldr	r3, [pc, #120]	; (20cc <STACK_SIZE+0xcc>)
    2052:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2054:	231f      	movs	r3, #31
    2056:	4018      	ands	r0, r3
    2058:	3b1e      	subs	r3, #30
    205a:	4083      	lsls	r3, r0
    205c:	4a1c      	ldr	r2, [pc, #112]	; (20d0 <STACK_SIZE+0xd0>)
    205e:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2060:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    2062:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2064:	2110      	movs	r1, #16
    2066:	8b62      	ldrh	r2, [r4, #26]
    2068:	420a      	tst	r2, r1
    206a:	d104      	bne.n	2076 <STACK_SIZE+0x76>
		timeout_counter++;
    206c:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    206e:	4283      	cmp	r3, r0
    2070:	d3f9      	bcc.n	2066 <STACK_SIZE+0x66>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2072:	2310      	movs	r3, #16
    2074:	8363      	strh	r3, [r4, #26]


	error = I2cDriverConfigureSensorBus();
	if(STATUS_OK != error) goto exit;
	
	I2cDriverRegisterSensorBusCallbacks();
    2076:	4b17      	ldr	r3, [pc, #92]	; (20d4 <STACK_SIZE+0xd4>)
    2078:	4798      	blx	r3
	
		
	sensorI2cMutexHandle = xSemaphoreCreateMutex();
    207a:	2001      	movs	r0, #1
    207c:	4b16      	ldr	r3, [pc, #88]	; (20d8 <STACK_SIZE+0xd8>)
    207e:	4798      	blx	r3
    2080:	4c16      	ldr	r4, [pc, #88]	; (20dc <STACK_SIZE+0xdc>)
    2082:	6020      	str	r0, [r4, #0]
	
	sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
    2084:	2203      	movs	r2, #3
    2086:	2100      	movs	r1, #0
    2088:	2001      	movs	r0, #1
    208a:	4b15      	ldr	r3, [pc, #84]	; (20e0 <STACK_SIZE+0xe0>)
    208c:	4798      	blx	r3
    208e:	4b15      	ldr	r3, [pc, #84]	; (20e4 <STACK_SIZE+0xe4>)
    2090:	6018      	str	r0, [r3, #0]
	//xSemaphoreGive(sensorI2cSemaphoreHandle);

	
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
    2092:	6823      	ldr	r3, [r4, #0]
    2094:	2b00      	cmp	r3, #0
    2096:	d004      	beq.n	20a2 <STACK_SIZE+0xa2>
	error = I2cDriverConfigureSensorBus();
    2098:	2300      	movs	r3, #0
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
    209a:	2800      	cmp	r0, #0
    209c:	d102      	bne.n	20a4 <STACK_SIZE+0xa4>
		error = STATUS_SUSPEND;	//Could not initialize mutex!
    209e:	3306      	adds	r3, #6
    20a0:	e000      	b.n	20a4 <STACK_SIZE+0xa4>
    20a2:	2306      	movs	r3, #6
		goto exit;
	}

	exit:
	return error;		
}
    20a4:	0018      	movs	r0, r3
    20a6:	b00e      	add	sp, #56	; 0x38
    20a8:	bd70      	pop	{r4, r5, r6, pc}
    20aa:	46c0      	nop			; (mov r8, r8)
    20ac:	00000d48 	.word	0x00000d48
    20b0:	00080002 	.word	0x00080002
    20b4:	00090002 	.word	0x00090002
    20b8:	00002710 	.word	0x00002710
    20bc:	2000392c 	.word	0x2000392c
    20c0:	00002a81 	.word	0x00002a81
    20c4:	42000800 	.word	0x42000800
    20c8:	00002d79 	.word	0x00002d79
    20cc:	00007235 	.word	0x00007235
    20d0:	e000e100 	.word	0xe000e100
    20d4:	00001f8d 	.word	0x00001f8d
    20d8:	00004bfd 	.word	0x00004bfd
    20dc:	20003928 	.word	0x20003928
    20e0:	00004799 	.word	0x00004799
    20e4:	20003954 	.word	0x20003954

000020e8 <I2cWriteData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData(I2C_Data *data){
    20e8:	b510      	push	{r4, lr}
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
    20ea:	2800      	cmp	r0, #0
    20ec:	d012      	beq.n	2114 <I2cWriteData+0x2c>
    20ee:	6843      	ldr	r3, [r0, #4]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d012      	beq.n	211a <I2cWriteData+0x32>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
    20f4:	490a      	ldr	r1, [pc, #40]	; (2120 <I2cWriteData+0x38>)
    20f6:	7802      	ldrb	r2, [r0, #0]
    20f8:	800a      	strh	r2, [r1, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
    20fa:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenOut;
    20fc:	89c3      	ldrh	r3, [r0, #14]
    20fe:	804b      	strh	r3, [r1, #2]
	
	//Write

	 hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    2100:	4808      	ldr	r0, [pc, #32]	; (2124 <I2cWriteData+0x3c>)
    2102:	4b09      	ldr	r3, [pc, #36]	; (2128 <I2cWriteData+0x40>)
    2104:	4798      	blx	r3
	int32_t error = ERROR_NONE;
    2106:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
    2108:	2800      	cmp	r0, #0
    210a:	d101      	bne.n	2110 <I2cWriteData+0x28>
		goto exit;
	}
	
	exit:
	return error;
}
    210c:	0018      	movs	r0, r3
    210e:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
    2110:	3b06      	subs	r3, #6
    2112:	e7fb      	b.n	210c <I2cWriteData+0x24>
		error = ERR_INVALID_ARG;
    2114:	2308      	movs	r3, #8
    2116:	425b      	negs	r3, r3
    2118:	e7f8      	b.n	210c <I2cWriteData+0x24>
    211a:	2308      	movs	r3, #8
    211c:	425b      	negs	r3, r3
    211e:	e7f5      	b.n	210c <I2cWriteData+0x24>
    2120:	20003958 	.word	0x20003958
    2124:	2000392c 	.word	0x2000392c
    2128:	000004a5 	.word	0x000004a5

0000212c <I2cReadData>:
 * @details     
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
int32_t I2cReadData(I2C_Data *data){
    212c:	b510      	push	{r4, lr}
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
    212e:	2800      	cmp	r0, #0
    2130:	d013      	beq.n	215a <I2cReadData+0x2e>
    2132:	6843      	ldr	r3, [r0, #4]
    2134:	2b00      	cmp	r3, #0
    2136:	d013      	beq.n	2160 <I2cReadData+0x34>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to read
	sensorPacketWrite.address = data->address;
    2138:	490b      	ldr	r1, [pc, #44]	; (2168 <I2cReadData+0x3c>)
    213a:	7803      	ldrb	r3, [r0, #0]
    213c:	800b      	strh	r3, [r1, #0]
	sensorPacketWrite.data = data->msgIn;
    213e:	6883      	ldr	r3, [r0, #8]
    2140:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenIn;
    2142:	8983      	ldrh	r3, [r0, #12]
    2144:	804b      	strh	r3, [r1, #2]
	
	//Read
	hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    2146:	4809      	ldr	r0, [pc, #36]	; (216c <I2cReadData+0x40>)
    2148:	4b09      	ldr	r3, [pc, #36]	; (2170 <I2cReadData+0x44>)
    214a:	4798      	blx	r3
	int32_t error = ERROR_NONE;
    214c:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
    214e:	2800      	cmp	r0, #0
    2150:	d101      	bne.n	2156 <I2cReadData+0x2a>
		goto exit;
	}
	
	exit:
	return error;
}
    2152:	0018      	movs	r0, r3
    2154:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
    2156:	3b06      	subs	r3, #6
    2158:	e7fb      	b.n	2152 <I2cReadData+0x26>
		error = ERR_INVALID_ARG;
    215a:	2308      	movs	r3, #8
    215c:	425b      	negs	r3, r3
    215e:	e7f8      	b.n	2152 <I2cReadData+0x26>
    2160:	2308      	movs	r3, #8
    2162:	425b      	negs	r3, r3
    2164:	e7f5      	b.n	2152 <I2cReadData+0x26>
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	20003958 	.word	0x20003958
    216c:	2000392c 	.word	0x2000392c
    2170:	00000481 	.word	0x00000481

00002174 <I2cFreeMutex>:
 * @details     
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (ERROR_NONE) if the bus is ready, (ERROR_NOT_INITIALIZED) if it is busy.
 * @note        STUDENTS TO FILL OUT!
 *****************************************************************************/
int32_t I2cFreeMutex(void){
    2174:	b510      	push	{r4, lr}
	
	int32_t error = ERROR_NONE;
	
	//students to fill out. Check what the function has to return
	if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE)
    2176:	4b07      	ldr	r3, [pc, #28]	; (2194 <I2cFreeMutex+0x20>)
    2178:	6818      	ldr	r0, [r3, #0]
    217a:	2300      	movs	r3, #0
    217c:	2200      	movs	r2, #0
    217e:	2100      	movs	r1, #0
    2180:	4c05      	ldr	r4, [pc, #20]	; (2198 <I2cFreeMutex+0x24>)
    2182:	47a0      	blx	r4
	int32_t error = ERROR_NONE;
    2184:	2300      	movs	r3, #0
	if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE)
    2186:	2801      	cmp	r0, #1
    2188:	d101      	bne.n	218e <I2cFreeMutex+0x1a>
		error = ERROR_NOT_INITIALIZED;
	
	return error;
}
    218a:	0018      	movs	r0, r3
    218c:	bd10      	pop	{r4, pc}
		error = ERROR_NOT_INITIALIZED;
    218e:	3b14      	subs	r3, #20
    2190:	e7fb      	b.n	218a <I2cFreeMutex+0x16>
    2192:	46c0      	nop			; (mov r8, r8)
    2194:	20003928 	.word	0x20003928
    2198:	000048d5 	.word	0x000048d5

0000219c <I2cGetMutex>:
 * @details     
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (ERROR_NONE) if we got the mutex, (ERROR_NOT_READY) if we time out before we got it
 * @note        
 *****************************************************************************/
int32_t I2cGetMutex(TickType_t waitTime){
    219c:	b510      	push	{r4, lr}
    219e:	0001      	movs	r1, r0
	
	int32_t error = ERROR_NONE;
	//students to fill out. Check what the function has to return
	
	if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE)
    21a0:	4b05      	ldr	r3, [pc, #20]	; (21b8 <I2cGetMutex+0x1c>)
    21a2:	6818      	ldr	r0, [r3, #0]
    21a4:	4b05      	ldr	r3, [pc, #20]	; (21bc <I2cGetMutex+0x20>)
    21a6:	4798      	blx	r3
	int32_t error = ERROR_NONE;
    21a8:	2300      	movs	r3, #0
	if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE)
    21aa:	2801      	cmp	r0, #1
    21ac:	d101      	bne.n	21b2 <I2cGetMutex+0x16>
		error = ERROR_NOT_READY;
		
	return error;
}
    21ae:	0018      	movs	r0, r3
    21b0:	bd10      	pop	{r4, pc}
		error = ERROR_NOT_READY;
    21b2:	3b1d      	subs	r3, #29
    21b4:	e7fb      	b.n	21ae <I2cGetMutex+0x12>
    21b6:	46c0      	nop			; (mov r8, r8)
    21b8:	20003928 	.word	0x20003928
    21bc:	0000527d 	.word	0x0000527d

000021c0 <I2cOnlyReadWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cOnlyReadWait(I2C_Data *data, const TickType_t xMaxBlockTime){
    21c0:	b570      	push	{r4, r5, r6, lr}
    21c2:	0005      	movs	r5, r0
    21c4:	000c      	movs	r4, r1

	int32_t error = ERROR_NONE;
	SemaphoreHandle_t semHandle = NULL;

	//---0. Get Mutex
	error = I2cGetMutex(xMaxBlockTime);
    21c6:	0008      	movs	r0, r1
    21c8:	4b0f      	ldr	r3, [pc, #60]	; (2208 <I2cOnlyReadWait+0x48>)
    21ca:	4798      	blx	r3
	//error=0;
	if(ERROR_NONE != error) goto exit;
    21cc:	2800      	cmp	r0, #0
    21ce:	d000      	beq.n	21d2 <I2cOnlyReadWait+0x12>
exitError0:
error = I2cFreeMutex();

return error;

}
    21d0:	bd70      	pop	{r4, r5, r6, pc}
	*handle = sensorI2cSemaphoreHandle;
    21d2:	4b0e      	ldr	r3, [pc, #56]	; (220c <I2cOnlyReadWait+0x4c>)
    21d4:	681e      	ldr	r6, [r3, #0]
	error = I2cReadData(data);
    21d6:	0028      	movs	r0, r5
    21d8:	4b0d      	ldr	r3, [pc, #52]	; (2210 <I2cOnlyReadWait+0x50>)
    21da:	4798      	blx	r3
	if (ERROR_NONE != error){
    21dc:	2800      	cmp	r0, #0
    21de:	d105      	bne.n	21ec <I2cOnlyReadWait+0x2c>
	if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE ) {
    21e0:	0021      	movs	r1, r4
    21e2:	0030      	movs	r0, r6
    21e4:	4b0b      	ldr	r3, [pc, #44]	; (2214 <I2cOnlyReadWait+0x54>)
    21e6:	4798      	blx	r3
    21e8:	2801      	cmp	r0, #1
    21ea:	d002      	beq.n	21f2 <I2cOnlyReadWait+0x32>
error = I2cFreeMutex();
    21ec:	4b0a      	ldr	r3, [pc, #40]	; (2218 <I2cOnlyReadWait+0x58>)
    21ee:	4798      	blx	r3
return error;
    21f0:	e7ee      	b.n	21d0 <I2cOnlyReadWait+0x10>
	 return sensorTransmitError;
    21f2:	4b0a      	ldr	r3, [pc, #40]	; (221c <I2cOnlyReadWait+0x5c>)
		if (I2cGetTaskErrorStatus()) {
    21f4:	781b      	ldrb	r3, [r3, #0]
    21f6:	2b00      	cmp	r3, #0
    21f8:	d003      	beq.n	2202 <I2cOnlyReadWait+0x42>
	sensorTransmitError = value;
    21fa:	2200      	movs	r2, #0
    21fc:	4b07      	ldr	r3, [pc, #28]	; (221c <I2cOnlyReadWait+0x5c>)
    21fe:	701a      	strb	r2, [r3, #0]
    2200:	e7f4      	b.n	21ec <I2cOnlyReadWait+0x2c>
	error |= I2cFreeMutex();
    2202:	4b05      	ldr	r3, [pc, #20]	; (2218 <I2cOnlyReadWait+0x58>)
    2204:	4798      	blx	r3
    2206:	e7e3      	b.n	21d0 <I2cOnlyReadWait+0x10>
    2208:	0000219d 	.word	0x0000219d
    220c:	20003954 	.word	0x20003954
    2210:	0000212d 	.word	0x0000212d
    2214:	0000527d 	.word	0x0000527d
    2218:	00002175 	.word	0x00002175
    221c:	2000038c 	.word	0x2000038c

00002220 <I2cWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime){
    2220:	b570      	push	{r4, r5, r6, lr}
    2222:	0005      	movs	r5, r0
    2224:	000c      	movs	r4, r1

	int32_t error = ERROR_NONE;
	SemaphoreHandle_t semHandle = NULL;

	//---0. Get Mutex
	error = I2cGetMutex(xMaxBlockTime);
    2226:	0008      	movs	r0, r1
    2228:	4b0f      	ldr	r3, [pc, #60]	; (2268 <I2cWriteDataWait+0x48>)
    222a:	4798      	blx	r3
	//error=0;
	if(ERROR_NONE != error) goto exit;
    222c:	2800      	cmp	r0, #0
    222e:	d000      	beq.n	2232 <I2cWriteDataWait+0x12>
exitError0:
error = I2cFreeMutex();

return error;

}
    2230:	bd70      	pop	{r4, r5, r6, pc}
	*handle = sensorI2cSemaphoreHandle;
    2232:	4b0e      	ldr	r3, [pc, #56]	; (226c <I2cWriteDataWait+0x4c>)
    2234:	681e      	ldr	r6, [r3, #0]
	error = I2cWriteData(data);
    2236:	0028      	movs	r0, r5
    2238:	4b0d      	ldr	r3, [pc, #52]	; (2270 <I2cWriteDataWait+0x50>)
    223a:	4798      	blx	r3
	if (ERROR_NONE != error){
    223c:	2800      	cmp	r0, #0
    223e:	d105      	bne.n	224c <I2cWriteDataWait+0x2c>
	if( xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE ){
    2240:	0021      	movs	r1, r4
    2242:	0030      	movs	r0, r6
    2244:	4b0b      	ldr	r3, [pc, #44]	; (2274 <I2cWriteDataWait+0x54>)
    2246:	4798      	blx	r3
    2248:	2801      	cmp	r0, #1
    224a:	d002      	beq.n	2252 <I2cWriteDataWait+0x32>
error = I2cFreeMutex();
    224c:	4b0a      	ldr	r3, [pc, #40]	; (2278 <I2cWriteDataWait+0x58>)
    224e:	4798      	blx	r3
return error;
    2250:	e7ee      	b.n	2230 <I2cWriteDataWait+0x10>
	 return sensorTransmitError;
    2252:	4b0a      	ldr	r3, [pc, #40]	; (227c <I2cWriteDataWait+0x5c>)
		if(I2cGetTaskErrorStatus()){
    2254:	781b      	ldrb	r3, [r3, #0]
    2256:	2b00      	cmp	r3, #0
    2258:	d003      	beq.n	2262 <I2cWriteDataWait+0x42>
	sensorTransmitError = value;
    225a:	2200      	movs	r2, #0
    225c:	4b07      	ldr	r3, [pc, #28]	; (227c <I2cWriteDataWait+0x5c>)
    225e:	701a      	strb	r2, [r3, #0]
    2260:	e7f4      	b.n	224c <I2cWriteDataWait+0x2c>
	error |= I2cFreeMutex();
    2262:	4b05      	ldr	r3, [pc, #20]	; (2278 <I2cWriteDataWait+0x58>)
    2264:	4798      	blx	r3
    2266:	e7e3      	b.n	2230 <I2cWriteDataWait+0x10>
    2268:	0000219d 	.word	0x0000219d
    226c:	20003954 	.word	0x20003954
    2270:	000020e9 	.word	0x000020e9
    2274:	0000527d 	.word	0x0000527d
    2278:	00002175 	.word	0x00002175
    227c:	2000038c 	.word	0x2000038c

00002280 <I2cReadDataWait>:
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
				students to fill!
 *****************************************************************************/
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime) {
    2280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2282:	0005      	movs	r5, r0
    2284:	000e      	movs	r6, r1
    2286:	0014      	movs	r4, r2
	
	int32_t error = ERROR_NONE;
	SemaphoreHandle_t semHandle = NULL;
	
	//---0. Get Mutex
	error = I2cGetMutex(xMaxBlockTime);
    2288:	0010      	movs	r0, r2
    228a:	4b1b      	ldr	r3, [pc, #108]	; (22f8 <I2cReadDataWait+0x78>)
    228c:	4798      	blx	r3
	if(ERROR_NONE != error) goto exit;
    228e:	2800      	cmp	r0, #0
    2290:	d000      	beq.n	2294 <I2cReadDataWait+0x14>

	exitError0:
	error = I2cFreeMutex();

	return error;
    2292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*handle = sensorI2cSemaphoreHandle;
    2294:	4b19      	ldr	r3, [pc, #100]	; (22fc <I2cReadDataWait+0x7c>)
    2296:	681f      	ldr	r7, [r3, #0]
	error = I2cWriteData(data);
    2298:	0028      	movs	r0, r5
    229a:	4b19      	ldr	r3, [pc, #100]	; (2300 <I2cReadDataWait+0x80>)
    229c:	4798      	blx	r3
	if (ERROR_NONE != error){
    229e:	2800      	cmp	r0, #0
    22a0:	d105      	bne.n	22ae <I2cReadDataWait+0x2e>
	if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    22a2:	0021      	movs	r1, r4
    22a4:	0038      	movs	r0, r7
    22a6:	4b17      	ldr	r3, [pc, #92]	; (2304 <I2cReadDataWait+0x84>)
    22a8:	4798      	blx	r3
    22aa:	2801      	cmp	r0, #1
    22ac:	d002      	beq.n	22b4 <I2cReadDataWait+0x34>
	error = I2cFreeMutex();
    22ae:	4b16      	ldr	r3, [pc, #88]	; (2308 <I2cReadDataWait+0x88>)
    22b0:	4798      	blx	r3
	return error;
    22b2:	e7ee      	b.n	2292 <I2cReadDataWait+0x12>
	 return sensorTransmitError;
    22b4:	4b15      	ldr	r3, [pc, #84]	; (230c <I2cReadDataWait+0x8c>)
		if (I2cGetTaskErrorStatus()) {
    22b6:	781b      	ldrb	r3, [r3, #0]
    22b8:	2b00      	cmp	r3, #0
    22ba:	d003      	beq.n	22c4 <I2cReadDataWait+0x44>
	sensorTransmitError = value;
    22bc:	2200      	movs	r2, #0
    22be:	4b13      	ldr	r3, [pc, #76]	; (230c <I2cReadDataWait+0x8c>)
    22c0:	701a      	strb	r2, [r3, #0]
    22c2:	e7f4      	b.n	22ae <I2cReadDataWait+0x2e>
		vTaskDelay(delay);
    22c4:	0030      	movs	r0, r6
    22c6:	4b12      	ldr	r3, [pc, #72]	; (2310 <I2cReadDataWait+0x90>)
    22c8:	4798      	blx	r3
	error = I2cReadData(data);
    22ca:	0028      	movs	r0, r5
    22cc:	4b11      	ldr	r3, [pc, #68]	; (2314 <I2cReadDataWait+0x94>)
    22ce:	4798      	blx	r3
	if (ERROR_NONE != error){
    22d0:	2800      	cmp	r0, #0
    22d2:	d1ec      	bne.n	22ae <I2cReadDataWait+0x2e>
	if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE ) {
    22d4:	0021      	movs	r1, r4
    22d6:	0038      	movs	r0, r7
    22d8:	4b0a      	ldr	r3, [pc, #40]	; (2304 <I2cReadDataWait+0x84>)
    22da:	4798      	blx	r3
    22dc:	2801      	cmp	r0, #1
    22de:	d1e6      	bne.n	22ae <I2cReadDataWait+0x2e>
	 return sensorTransmitError;
    22e0:	4b0a      	ldr	r3, [pc, #40]	; (230c <I2cReadDataWait+0x8c>)
		if (I2cGetTaskErrorStatus()) {
    22e2:	781b      	ldrb	r3, [r3, #0]
    22e4:	2b00      	cmp	r3, #0
    22e6:	d003      	beq.n	22f0 <I2cReadDataWait+0x70>
	sensorTransmitError = value;
    22e8:	2200      	movs	r2, #0
    22ea:	4b08      	ldr	r3, [pc, #32]	; (230c <I2cReadDataWait+0x8c>)
    22ec:	701a      	strb	r2, [r3, #0]
    22ee:	e7de      	b.n	22ae <I2cReadDataWait+0x2e>
	error |= I2cFreeMutex();
    22f0:	4b05      	ldr	r3, [pc, #20]	; (2308 <I2cReadDataWait+0x88>)
    22f2:	4798      	blx	r3
    22f4:	e7cd      	b.n	2292 <I2cReadDataWait+0x12>
    22f6:	46c0      	nop			; (mov r8, r8)
    22f8:	0000219d 	.word	0x0000219d
    22fc:	20003954 	.word	0x20003954
    2300:	000020e9 	.word	0x000020e9
    2304:	0000527d 	.word	0x0000527d
    2308:	00002175 	.word	0x00002175
    230c:	2000038c 	.word	0x2000038c
    2310:	00005d59 	.word	0x00005d59
    2314:	0000212d 	.word	0x0000212d

00002318 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    2318:	b5f0      	push	{r4, r5, r6, r7, lr}
    231a:	b085      	sub	sp, #20
    231c:	0005      	movs	r5, r0
    231e:	9200      	str	r2, [sp, #0]
    2320:	9301      	str	r3, [sp, #4]
	//imuData.msgIn =  msgOutImu;
	//imuData.msgOut = msgOutImu;
	//imuData.address = 0x6B;
	//msgOutImu[0] = reg;
	
	uint8_t reg_data = reg;
    2322:	a802      	add	r0, sp, #8
    2324:	1dc3      	adds	r3, r0, #7
    2326:	71c1      	strb	r1, [r0, #7]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2328:	4c08      	ldr	r4, [pc, #32]	; (234c <platform_write+0x34>)
    232a:	2680      	movs	r6, #128	; 0x80
    232c:	02b6      	lsls	r6, r6, #10
    232e:	6166      	str	r6, [r4, #20]
	
	//spi_select_slave((struct spi_module*) handle, &slave, true);
	port_pin_set_output_level(SLAVE_SELECT_PIN, false);
	spi_write_buffer_wait((struct spi_module*) handle, &reg_data, 1);
    2330:	2201      	movs	r2, #1
    2332:	0019      	movs	r1, r3
    2334:	0028      	movs	r0, r5
    2336:	4f06      	ldr	r7, [pc, #24]	; (2350 <platform_write+0x38>)
    2338:	47b8      	blx	r7
	spi_write_buffer_wait((struct spi_module*) handle, bufp, len);
    233a:	9a01      	ldr	r2, [sp, #4]
    233c:	9900      	ldr	r1, [sp, #0]
    233e:	0028      	movs	r0, r5
    2340:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    2342:	61a6      	str	r6, [r4, #24]
	//spi_select_slave((struct spi_module*) handle, &slave, false);
	
	return 0;
	//memcpy(&msgOutImu[1], bufp, len);
	//return I2cWriteDataWait(&imuData, 100);
}
    2344:	2000      	movs	r0, #0
    2346:	b005      	add	sp, #20
    2348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    234a:	46c0      	nop			; (mov r8, r8)
    234c:	41004400 	.word	0x41004400
    2350:	0000764d 	.word	0x0000764d

00002354 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    2354:	b5f0      	push	{r4, r5, r6, r7, lr}
    2356:	b085      	sub	sp, #20
    2358:	0004      	movs	r4, r0
    235a:	9201      	str	r2, [sp, #4]
    235c:	001e      	movs	r6, r3
	//imuData.address = 0x6B;
	//
	//error = I2cReadDataWait(&imuData, 0, 100);
	//memcpy(bufp, msgOutImu, len);
	
	uint8_t reg_data = reg | SPI_READ_COMMAND;
    235e:	ab02      	add	r3, sp, #8
    2360:	1dd8      	adds	r0, r3, #7
    2362:	2380      	movs	r3, #128	; 0x80
    2364:	425b      	negs	r3, r3
    2366:	430b      	orrs	r3, r1
    2368:	7003      	strb	r3, [r0, #0]
		port_base->OUTCLR.reg = pin_mask;
    236a:	4f09      	ldr	r7, [pc, #36]	; (2390 <platform_read+0x3c>)
    236c:	2580      	movs	r5, #128	; 0x80
    236e:	02ad      	lsls	r5, r5, #10
    2370:	617d      	str	r5, [r7, #20]
	uint16_t dummy_data = 0;
	
	//spi_select_slave((struct spi_module*) handle, &slave, true);
	port_pin_set_output_level(SLAVE_SELECT_PIN, false);
	spi_write_buffer_wait((struct spi_module*) handle, &reg_data, 1);
    2372:	2201      	movs	r2, #1
    2374:	0001      	movs	r1, r0
    2376:	0020      	movs	r0, r4
    2378:	4b06      	ldr	r3, [pc, #24]	; (2394 <platform_read+0x40>)
    237a:	4798      	blx	r3
	spi_read_buffer_wait((struct spi_module*) handle, bufp, len, dummy_data);
    237c:	2300      	movs	r3, #0
    237e:	0032      	movs	r2, r6
    2380:	9901      	ldr	r1, [sp, #4]
    2382:	0020      	movs	r0, r4
    2384:	4c04      	ldr	r4, [pc, #16]	; (2398 <platform_read+0x44>)
    2386:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
    2388:	61bd      	str	r5, [r7, #24]
	port_pin_set_output_level(SLAVE_SELECT_PIN, true);
	//spi_select_slave((struct spi_module*) handle, &slave, false);
	
	return 0;
}
    238a:	2000      	movs	r0, #0
    238c:	b005      	add	sp, #20
    238e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2390:	41004400 	.word	0x41004400
    2394:	0000764d 	.word	0x0000764d
    2398:	00007589 	.word	0x00007589

0000239c <lsm6dso_read_reg>:
{
    239c:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    239e:	6885      	ldr	r5, [r0, #8]
    23a0:	6844      	ldr	r4, [r0, #4]
    23a2:	0028      	movs	r0, r5
    23a4:	47a0      	blx	r4
}
    23a6:	bd70      	pop	{r4, r5, r6, pc}

000023a8 <lsm6dso_write_reg>:
{
    23a8:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    23aa:	6885      	ldr	r5, [r0, #8]
    23ac:	6804      	ldr	r4, [r0, #0]
    23ae:	0028      	movs	r0, r5
    23b0:	47a0      	blx	r4
}
    23b2:	bd70      	pop	{r4, r5, r6, pc}

000023b4 <lsm6dso_from_fs2_to_mg>:
{
    23b4:	b510      	push	{r4, lr}
  return ((float_t)lsb) * 0.061f;
    23b6:	4b03      	ldr	r3, [pc, #12]	; (23c4 <lsm6dso_from_fs2_to_mg+0x10>)
    23b8:	4798      	blx	r3
    23ba:	4903      	ldr	r1, [pc, #12]	; (23c8 <lsm6dso_from_fs2_to_mg+0x14>)
    23bc:	4b03      	ldr	r3, [pc, #12]	; (23cc <lsm6dso_from_fs2_to_mg+0x18>)
    23be:	4798      	blx	r3
}
    23c0:	bd10      	pop	{r4, pc}
    23c2:	46c0      	nop			; (mov r8, r8)
    23c4:	0000bc29 	.word	0x0000bc29
    23c8:	3d79db23 	.word	0x3d79db23
    23cc:	0000b671 	.word	0x0000b671

000023d0 <lsm6dso_xl_full_scale_set>:
{
    23d0:	b570      	push	{r4, r5, r6, lr}
    23d2:	b082      	sub	sp, #8
    23d4:	0004      	movs	r4, r0
    23d6:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    23d8:	2301      	movs	r3, #1
    23da:	aa01      	add	r2, sp, #4
    23dc:	2110      	movs	r1, #16
    23de:	4e0a      	ldr	r6, [pc, #40]	; (2408 <lsm6dso_xl_full_scale_set+0x38>)
    23e0:	47b0      	blx	r6
  if (ret == 0)
    23e2:	2800      	cmp	r0, #0
    23e4:	d001      	beq.n	23ea <lsm6dso_xl_full_scale_set+0x1a>
}
    23e6:	b002      	add	sp, #8
    23e8:	bd70      	pop	{r4, r5, r6, pc}
    reg.fs_xl = (uint8_t) val;
    23ea:	aa01      	add	r2, sp, #4
    23ec:	2103      	movs	r1, #3
    23ee:	4029      	ands	r1, r5
    23f0:	008b      	lsls	r3, r1, #2
    23f2:	7811      	ldrb	r1, [r2, #0]
    23f4:	300c      	adds	r0, #12
    23f6:	4381      	bics	r1, r0
    23f8:	4319      	orrs	r1, r3
    23fa:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    23fc:	2301      	movs	r3, #1
    23fe:	2110      	movs	r1, #16
    2400:	0020      	movs	r0, r4
    2402:	4c02      	ldr	r4, [pc, #8]	; (240c <lsm6dso_xl_full_scale_set+0x3c>)
    2404:	47a0      	blx	r4
  return ret;
    2406:	e7ee      	b.n	23e6 <lsm6dso_xl_full_scale_set+0x16>
    2408:	0000239d 	.word	0x0000239d
    240c:	000023a9 	.word	0x000023a9

00002410 <lsm6dso_gy_full_scale_set>:
{
    2410:	b570      	push	{r4, r5, r6, lr}
    2412:	b082      	sub	sp, #8
    2414:	0004      	movs	r4, r0
    2416:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    2418:	2301      	movs	r3, #1
    241a:	aa01      	add	r2, sp, #4
    241c:	2111      	movs	r1, #17
    241e:	4e0a      	ldr	r6, [pc, #40]	; (2448 <lsm6dso_gy_full_scale_set+0x38>)
    2420:	47b0      	blx	r6
  if (ret == 0)
    2422:	2800      	cmp	r0, #0
    2424:	d001      	beq.n	242a <lsm6dso_gy_full_scale_set+0x1a>
}
    2426:	b002      	add	sp, #8
    2428:	bd70      	pop	{r4, r5, r6, pc}
    reg.fs_g = (uint8_t) val;
    242a:	aa01      	add	r2, sp, #4
    242c:	2107      	movs	r1, #7
    242e:	4029      	ands	r1, r5
    2430:	004b      	lsls	r3, r1, #1
    2432:	7811      	ldrb	r1, [r2, #0]
    2434:	300e      	adds	r0, #14
    2436:	4381      	bics	r1, r0
    2438:	4319      	orrs	r1, r3
    243a:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    243c:	2301      	movs	r3, #1
    243e:	2111      	movs	r1, #17
    2440:	0020      	movs	r0, r4
    2442:	4c02      	ldr	r4, [pc, #8]	; (244c <lsm6dso_gy_full_scale_set+0x3c>)
    2444:	47a0      	blx	r4
  return ret;
    2446:	e7ee      	b.n	2426 <lsm6dso_gy_full_scale_set+0x16>
    2448:	0000239d 	.word	0x0000239d
    244c:	000023a9 	.word	0x000023a9

00002450 <lsm6dso_block_data_update_set>:
{
    2450:	b570      	push	{r4, r5, r6, lr}
    2452:	b082      	sub	sp, #8
    2454:	0004      	movs	r4, r0
    2456:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    2458:	2301      	movs	r3, #1
    245a:	aa01      	add	r2, sp, #4
    245c:	2112      	movs	r1, #18
    245e:	4e0a      	ldr	r6, [pc, #40]	; (2488 <lsm6dso_block_data_update_set+0x38>)
    2460:	47b0      	blx	r6
  if (ret == 0)
    2462:	2800      	cmp	r0, #0
    2464:	d001      	beq.n	246a <lsm6dso_block_data_update_set+0x1a>
}
    2466:	b002      	add	sp, #8
    2468:	bd70      	pop	{r4, r5, r6, pc}
    reg.bdu = val;
    246a:	aa01      	add	r2, sp, #4
    246c:	2101      	movs	r1, #1
    246e:	4029      	ands	r1, r5
    2470:	018b      	lsls	r3, r1, #6
    2472:	7811      	ldrb	r1, [r2, #0]
    2474:	3040      	adds	r0, #64	; 0x40
    2476:	4381      	bics	r1, r0
    2478:	4319      	orrs	r1, r3
    247a:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    247c:	2301      	movs	r3, #1
    247e:	2112      	movs	r1, #18
    2480:	0020      	movs	r0, r4
    2482:	4c02      	ldr	r4, [pc, #8]	; (248c <lsm6dso_block_data_update_set+0x3c>)
    2484:	47a0      	blx	r4
  return ret;
    2486:	e7ee      	b.n	2466 <lsm6dso_block_data_update_set+0x16>
    2488:	0000239d 	.word	0x0000239d
    248c:	000023a9 	.word	0x000023a9

00002490 <lsm6dso_xl_offset_weight_set>:
{
    2490:	b570      	push	{r4, r5, r6, lr}
    2492:	b082      	sub	sp, #8
    2494:	0004      	movs	r4, r0
    2496:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
    2498:	2301      	movs	r3, #1
    249a:	aa01      	add	r2, sp, #4
    249c:	2115      	movs	r1, #21
    249e:	4e0a      	ldr	r6, [pc, #40]	; (24c8 <lsm6dso_xl_offset_weight_set+0x38>)
    24a0:	47b0      	blx	r6
  if (ret == 0)
    24a2:	2800      	cmp	r0, #0
    24a4:	d001      	beq.n	24aa <lsm6dso_xl_offset_weight_set+0x1a>
}
    24a6:	b002      	add	sp, #8
    24a8:	bd70      	pop	{r4, r5, r6, pc}
    reg.usr_off_w = (uint8_t)val;
    24aa:	aa01      	add	r2, sp, #4
    24ac:	2101      	movs	r1, #1
    24ae:	4029      	ands	r1, r5
    24b0:	00cb      	lsls	r3, r1, #3
    24b2:	7811      	ldrb	r1, [r2, #0]
    24b4:	3008      	adds	r0, #8
    24b6:	4381      	bics	r1, r0
    24b8:	4319      	orrs	r1, r3
    24ba:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
    24bc:	2301      	movs	r3, #1
    24be:	2115      	movs	r1, #21
    24c0:	0020      	movs	r0, r4
    24c2:	4c02      	ldr	r4, [pc, #8]	; (24cc <lsm6dso_xl_offset_weight_set+0x3c>)
    24c4:	47a0      	blx	r4
  return ret;
    24c6:	e7ee      	b.n	24a6 <lsm6dso_xl_offset_weight_set+0x16>
    24c8:	0000239d 	.word	0x0000239d
    24cc:	000023a9 	.word	0x000023a9

000024d0 <lsm6dso_acceleration_raw_get>:
{
    24d0:	b530      	push	{r4, r5, lr}
    24d2:	b083      	sub	sp, #12
    24d4:	000c      	movs	r4, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
    24d6:	2306      	movs	r3, #6
    24d8:	466a      	mov	r2, sp
    24da:	2128      	movs	r1, #40	; 0x28
    24dc:	4d0a      	ldr	r5, [pc, #40]	; (2508 <lsm6dso_acceleration_raw_get+0x38>)
    24de:	47a8      	blx	r5
  val[0] = (val[0] * 256) + (int16_t)buff[0];
    24e0:	466b      	mov	r3, sp
    24e2:	785a      	ldrb	r2, [r3, #1]
    24e4:	0212      	lsls	r2, r2, #8
    24e6:	781b      	ldrb	r3, [r3, #0]
    24e8:	189b      	adds	r3, r3, r2
    24ea:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
    24ec:	466b      	mov	r3, sp
    24ee:	78da      	ldrb	r2, [r3, #3]
    24f0:	0212      	lsls	r2, r2, #8
    24f2:	789b      	ldrb	r3, [r3, #2]
    24f4:	189b      	adds	r3, r3, r2
    24f6:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
    24f8:	466b      	mov	r3, sp
    24fa:	795a      	ldrb	r2, [r3, #5]
    24fc:	0212      	lsls	r2, r2, #8
    24fe:	791b      	ldrb	r3, [r3, #4]
    2500:	189b      	adds	r3, r3, r2
    2502:	80a3      	strh	r3, [r4, #4]
}
    2504:	b003      	add	sp, #12
    2506:	bd30      	pop	{r4, r5, pc}
    2508:	0000239d 	.word	0x0000239d

0000250c <lsm6dso_mem_bank_set>:
{
    250c:	b570      	push	{r4, r5, r6, lr}
    250e:	b082      	sub	sp, #8
    2510:	0004      	movs	r4, r0
    2512:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
    2514:	2301      	movs	r3, #1
    2516:	aa01      	add	r2, sp, #4
    2518:	2101      	movs	r1, #1
    251a:	4e09      	ldr	r6, [pc, #36]	; (2540 <lsm6dso_mem_bank_set+0x34>)
    251c:	47b0      	blx	r6
  if (ret == 0)
    251e:	2800      	cmp	r0, #0
    2520:	d001      	beq.n	2526 <lsm6dso_mem_bank_set+0x1a>
}
    2522:	b002      	add	sp, #8
    2524:	bd70      	pop	{r4, r5, r6, pc}
    reg.reg_access = (uint8_t)val;
    2526:	aa01      	add	r2, sp, #4
    2528:	01ad      	lsls	r5, r5, #6
    252a:	7813      	ldrb	r3, [r2, #0]
    252c:	213f      	movs	r1, #63	; 0x3f
    252e:	4019      	ands	r1, r3
    2530:	4329      	orrs	r1, r5
    2532:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
    2534:	2301      	movs	r3, #1
    2536:	2101      	movs	r1, #1
    2538:	0020      	movs	r0, r4
    253a:	4c02      	ldr	r4, [pc, #8]	; (2544 <lsm6dso_mem_bank_set+0x38>)
    253c:	47a0      	blx	r4
  return ret;
    253e:	e7f0      	b.n	2522 <lsm6dso_mem_bank_set+0x16>
    2540:	0000239d 	.word	0x0000239d
    2544:	000023a9 	.word	0x000023a9

00002548 <lsm6dso_device_id_get>:
{
    2548:	b510      	push	{r4, lr}
    254a:	000a      	movs	r2, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
    254c:	2301      	movs	r3, #1
    254e:	210f      	movs	r1, #15
    2550:	4c01      	ldr	r4, [pc, #4]	; (2558 <lsm6dso_device_id_get+0x10>)
    2552:	47a0      	blx	r4
}
    2554:	bd10      	pop	{r4, pc}
    2556:	46c0      	nop			; (mov r8, r8)
    2558:	0000239d 	.word	0x0000239d

0000255c <lsm6dso_xl_filter_lp2_set>:
{
    255c:	b570      	push	{r4, r5, r6, lr}
    255e:	b082      	sub	sp, #8
    2560:	0004      	movs	r4, r0
    2562:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    2564:	2301      	movs	r3, #1
    2566:	aa01      	add	r2, sp, #4
    2568:	2110      	movs	r1, #16
    256a:	4e0a      	ldr	r6, [pc, #40]	; (2594 <lsm6dso_xl_filter_lp2_set+0x38>)
    256c:	47b0      	blx	r6
  if (ret == 0)
    256e:	2800      	cmp	r0, #0
    2570:	d001      	beq.n	2576 <lsm6dso_xl_filter_lp2_set+0x1a>
}
    2572:	b002      	add	sp, #8
    2574:	bd70      	pop	{r4, r5, r6, pc}
    reg.lpf2_xl_en = val;
    2576:	aa01      	add	r2, sp, #4
    2578:	2101      	movs	r1, #1
    257a:	4029      	ands	r1, r5
    257c:	004b      	lsls	r3, r1, #1
    257e:	7811      	ldrb	r1, [r2, #0]
    2580:	3002      	adds	r0, #2
    2582:	4381      	bics	r1, r0
    2584:	4319      	orrs	r1, r3
    2586:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    2588:	2301      	movs	r3, #1
    258a:	2110      	movs	r1, #16
    258c:	0020      	movs	r0, r4
    258e:	4c02      	ldr	r4, [pc, #8]	; (2598 <lsm6dso_xl_filter_lp2_set+0x3c>)
    2590:	47a0      	blx	r4
  return ret;
    2592:	e7ee      	b.n	2572 <lsm6dso_xl_filter_lp2_set+0x16>
    2594:	0000239d 	.word	0x0000239d
    2598:	000023a9 	.word	0x000023a9

0000259c <lsm6dso_xl_hp_path_on_out_set>:
{
    259c:	b570      	push	{r4, r5, r6, lr}
    259e:	b082      	sub	sp, #8
    25a0:	0004      	movs	r4, r0
    25a2:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
    25a4:	2301      	movs	r3, #1
    25a6:	aa01      	add	r2, sp, #4
    25a8:	2117      	movs	r1, #23
    25aa:	4e10      	ldr	r6, [pc, #64]	; (25ec <lsm6dso_xl_hp_path_on_out_set+0x50>)
    25ac:	47b0      	blx	r6
  if (ret == 0)
    25ae:	2800      	cmp	r0, #0
    25b0:	d001      	beq.n	25b6 <lsm6dso_xl_hp_path_on_out_set+0x1a>
}
    25b2:	b002      	add	sp, #8
    25b4:	bd70      	pop	{r4, r5, r6, pc}
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
    25b6:	aa01      	add	r2, sp, #4
    25b8:	092b      	lsrs	r3, r5, #4
    25ba:	2101      	movs	r1, #1
    25bc:	400b      	ands	r3, r1
    25be:	0098      	lsls	r0, r3, #2
    25c0:	7813      	ldrb	r3, [r2, #0]
    25c2:	2604      	movs	r6, #4
    25c4:	43b3      	bics	r3, r6
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
    25c6:	096e      	lsrs	r6, r5, #5
    25c8:	4031      	ands	r1, r6
    25ca:	0109      	lsls	r1, r1, #4
    25cc:	4303      	orrs	r3, r0
    25ce:	2010      	movs	r0, #16
    25d0:	4383      	bics	r3, r0
    reg.hpcf_xl = (uint8_t)val & 0x07U;
    25d2:	016d      	lsls	r5, r5, #5
    25d4:	430b      	orrs	r3, r1
    25d6:	211f      	movs	r1, #31
    25d8:	400b      	ands	r3, r1
    25da:	431d      	orrs	r5, r3
    25dc:	7015      	strb	r5, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
    25de:	2301      	movs	r3, #1
    25e0:	3908      	subs	r1, #8
    25e2:	0020      	movs	r0, r4
    25e4:	4c02      	ldr	r4, [pc, #8]	; (25f0 <lsm6dso_xl_hp_path_on_out_set+0x54>)
    25e6:	47a0      	blx	r4
  return ret;
    25e8:	e7e3      	b.n	25b2 <lsm6dso_xl_hp_path_on_out_set+0x16>
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	0000239d 	.word	0x0000239d
    25f0:	000023a9 	.word	0x000023a9

000025f4 <lsm6dso_i3c_disable_set>:
{
    25f4:	b570      	push	{r4, r5, r6, lr}
    25f6:	b082      	sub	sp, #8
    25f8:	0004      	movs	r4, r0
    25fa:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    25fc:	2301      	movs	r3, #1
    25fe:	466a      	mov	r2, sp
    2600:	2118      	movs	r1, #24
    2602:	4e16      	ldr	r6, [pc, #88]	; (265c <lsm6dso_i3c_disable_set+0x68>)
    2604:	47b0      	blx	r6
  if (ret == 0)
    2606:	2800      	cmp	r0, #0
    2608:	d001      	beq.n	260e <lsm6dso_i3c_disable_set+0x1a>
}
    260a:	b002      	add	sp, #8
    260c:	bd70      	pop	{r4, r5, r6, pc}
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
    260e:	09ea      	lsrs	r2, r5, #7
    2610:	0052      	lsls	r2, r2, #1
    2612:	466b      	mov	r3, sp
    2614:	781b      	ldrb	r3, [r3, #0]
    2616:	2102      	movs	r1, #2
    2618:	438b      	bics	r3, r1
    261a:	4313      	orrs	r3, r2
    261c:	466a      	mov	r2, sp
    261e:	7013      	strb	r3, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    2620:	2301      	movs	r3, #1
    2622:	3116      	adds	r1, #22
    2624:	0020      	movs	r0, r4
    2626:	4e0e      	ldr	r6, [pc, #56]	; (2660 <lsm6dso_i3c_disable_set+0x6c>)
    2628:	47b0      	blx	r6
  if (ret == 0)
    262a:	2800      	cmp	r0, #0
    262c:	d1ed      	bne.n	260a <lsm6dso_i3c_disable_set+0x16>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    262e:	2301      	movs	r3, #1
    2630:	aa01      	add	r2, sp, #4
    2632:	2162      	movs	r1, #98	; 0x62
    2634:	0020      	movs	r0, r4
    2636:	4e09      	ldr	r6, [pc, #36]	; (265c <lsm6dso_i3c_disable_set+0x68>)
    2638:	47b0      	blx	r6
  if (ret == 0)
    263a:	2800      	cmp	r0, #0
    263c:	d1e5      	bne.n	260a <lsm6dso_i3c_disable_set+0x16>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
    263e:	aa01      	add	r2, sp, #4
    2640:	2103      	movs	r1, #3
    2642:	4029      	ands	r1, r5
    2644:	00cb      	lsls	r3, r1, #3
    2646:	7811      	ldrb	r1, [r2, #0]
    2648:	3018      	adds	r0, #24
    264a:	4381      	bics	r1, r0
    264c:	4319      	orrs	r1, r3
    264e:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    2650:	2301      	movs	r3, #1
    2652:	2162      	movs	r1, #98	; 0x62
    2654:	0020      	movs	r0, r4
    2656:	4c02      	ldr	r4, [pc, #8]	; (2660 <lsm6dso_i3c_disable_set+0x6c>)
    2658:	47a0      	blx	r4
  return ret;
    265a:	e7d6      	b.n	260a <lsm6dso_i3c_disable_set+0x16>
    265c:	0000239d 	.word	0x0000239d
    2660:	000023a9 	.word	0x000023a9

00002664 <lsm6dso_fsm_enable_get>:
{
    2664:	b570      	push	{r4, r5, r6, lr}
    2666:	0004      	movs	r4, r0
    2668:	000d      	movs	r5, r1
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    266a:	2102      	movs	r1, #2
    266c:	4b08      	ldr	r3, [pc, #32]	; (2690 <lsm6dso_fsm_enable_get+0x2c>)
    266e:	4798      	blx	r3
  if (ret == 0)
    2670:	2800      	cmp	r0, #0
    2672:	d000      	beq.n	2676 <lsm6dso_fsm_enable_get+0x12>
}
    2674:	bd70      	pop	{r4, r5, r6, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
    2676:	2302      	movs	r3, #2
    2678:	002a      	movs	r2, r5
    267a:	2146      	movs	r1, #70	; 0x46
    267c:	0020      	movs	r0, r4
    267e:	4d05      	ldr	r5, [pc, #20]	; (2694 <lsm6dso_fsm_enable_get+0x30>)
    2680:	47a8      	blx	r5
  if (ret == 0)
    2682:	2800      	cmp	r0, #0
    2684:	d1f6      	bne.n	2674 <lsm6dso_fsm_enable_get+0x10>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    2686:	2100      	movs	r1, #0
    2688:	0020      	movs	r0, r4
    268a:	4b01      	ldr	r3, [pc, #4]	; (2690 <lsm6dso_fsm_enable_get+0x2c>)
    268c:	4798      	blx	r3
  return ret;
    268e:	e7f1      	b.n	2674 <lsm6dso_fsm_enable_get+0x10>
    2690:	0000250d 	.word	0x0000250d
    2694:	0000239d 	.word	0x0000239d

00002698 <lsm6dso_fsm_data_rate_get>:
{
    2698:	b570      	push	{r4, r5, r6, lr}
    269a:	b082      	sub	sp, #8
    269c:	0004      	movs	r4, r0
    269e:	000d      	movs	r5, r1
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    26a0:	2102      	movs	r1, #2
    26a2:	4b17      	ldr	r3, [pc, #92]	; (2700 <lsm6dso_fsm_data_rate_get+0x68>)
    26a4:	4798      	blx	r3
  if (ret == 0)
    26a6:	2800      	cmp	r0, #0
    26a8:	d001      	beq.n	26ae <lsm6dso_fsm_data_rate_get+0x16>
}
    26aa:	b002      	add	sp, #8
    26ac:	bd70      	pop	{r4, r5, r6, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
    26ae:	2301      	movs	r3, #1
    26b0:	aa01      	add	r2, sp, #4
    26b2:	215f      	movs	r1, #95	; 0x5f
    26b4:	0020      	movs	r0, r4
    26b6:	4e13      	ldr	r6, [pc, #76]	; (2704 <lsm6dso_fsm_data_rate_get+0x6c>)
    26b8:	47b0      	blx	r6
  if (ret == 0)
    26ba:	2800      	cmp	r0, #0
    26bc:	d1f5      	bne.n	26aa <lsm6dso_fsm_data_rate_get+0x12>
    switch (reg.fsm_odr)
    26be:	ab01      	add	r3, sp, #4
    26c0:	781b      	ldrb	r3, [r3, #0]
    26c2:	06db      	lsls	r3, r3, #27
    26c4:	0f9b      	lsrs	r3, r3, #30
    26c6:	b2da      	uxtb	r2, r3
    26c8:	2a01      	cmp	r2, #1
    26ca:	d00f      	beq.n	26ec <lsm6dso_fsm_data_rate_get+0x54>
    26cc:	2a00      	cmp	r2, #0
    26ce:	d006      	beq.n	26de <lsm6dso_fsm_data_rate_get+0x46>
    26d0:	2a02      	cmp	r2, #2
    26d2:	d00e      	beq.n	26f2 <lsm6dso_fsm_data_rate_get+0x5a>
    26d4:	2a03      	cmp	r2, #3
    26d6:	d00f      	beq.n	26f8 <lsm6dso_fsm_data_rate_get+0x60>
        *val = LSM6DSO_ODR_FSM_12Hz5;
    26d8:	2300      	movs	r3, #0
    26da:	702b      	strb	r3, [r5, #0]
        break;
    26dc:	e001      	b.n	26e2 <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_12Hz5;
    26de:	2300      	movs	r3, #0
    26e0:	702b      	strb	r3, [r5, #0]
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    26e2:	2100      	movs	r1, #0
    26e4:	0020      	movs	r0, r4
    26e6:	4b06      	ldr	r3, [pc, #24]	; (2700 <lsm6dso_fsm_data_rate_get+0x68>)
    26e8:	4798      	blx	r3
  return ret;
    26ea:	e7de      	b.n	26aa <lsm6dso_fsm_data_rate_get+0x12>
        *val = LSM6DSO_ODR_FSM_26Hz;
    26ec:	2301      	movs	r3, #1
    26ee:	702b      	strb	r3, [r5, #0]
        break;
    26f0:	e7f7      	b.n	26e2 <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_52Hz;
    26f2:	2302      	movs	r3, #2
    26f4:	702b      	strb	r3, [r5, #0]
        break;
    26f6:	e7f4      	b.n	26e2 <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_104Hz;
    26f8:	2303      	movs	r3, #3
    26fa:	702b      	strb	r3, [r5, #0]
        break;
    26fc:	e7f1      	b.n	26e2 <lsm6dso_fsm_data_rate_get+0x4a>
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	0000250d 	.word	0x0000250d
    2704:	0000239d 	.word	0x0000239d

00002708 <lsm6dso_xl_data_rate_set>:
{
    2708:	b570      	push	{r4, r5, r6, lr}
    270a:	b082      	sub	sp, #8
    270c:	0004      	movs	r4, r0
    270e:	000d      	movs	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    2710:	a901      	add	r1, sp, #4
    2712:	4b38      	ldr	r3, [pc, #224]	; (27f4 <lsm6dso_xl_data_rate_set+0xec>)
    2714:	4798      	blx	r3
  if (ret == 0)
    2716:	2800      	cmp	r0, #0
    2718:	d142      	bne.n	27a0 <lsm6dso_xl_data_rate_set+0x98>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    271a:	a901      	add	r1, sp, #4
    271c:	780a      	ldrb	r2, [r1, #0]
    271e:	07d0      	lsls	r0, r2, #31
         fsm_enable.fsm_enable_a.fsm2_en  |
    2720:	0793      	lsls	r3, r2, #30
    2722:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    2724:	0753      	lsls	r3, r2, #29
    2726:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
    2728:	0710      	lsls	r0, r2, #28
    272a:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
    272c:	06d0      	lsls	r0, r2, #27
    272e:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    2730:	0693      	lsls	r3, r2, #26
    2732:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    2734:	0653      	lsls	r3, r2, #25
    2736:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
    2738:	0fdb      	lsrs	r3, r3, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    273a:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_a.fsm7_en  |
    273c:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_b.fsm9_en  |
    273e:	784a      	ldrb	r2, [r1, #1]
    2740:	07d1      	lsls	r1, r2, #31
    2742:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    2744:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
    2746:	0791      	lsls	r1, r2, #30
    2748:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm9_en  |
    274a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
    274c:	0751      	lsls	r1, r2, #29
    274e:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm10_en |
    2750:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
    2752:	0711      	lsls	r1, r2, #28
    2754:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm11_en |
    2756:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
    2758:	06d1      	lsls	r1, r2, #27
    275a:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm12_en |
    275c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
    275e:	0691      	lsls	r1, r2, #26
    2760:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm13_en |
    2762:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
    2764:	0651      	lsls	r1, r2, #25
    2766:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm14_en |
    2768:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    276a:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_b.fsm15_en |
    276c:	4313      	orrs	r3, r2
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    276e:	b2db      	uxtb	r3, r3
    2770:	2b01      	cmp	r3, #1
    2772:	d017      	beq.n	27a4 <lsm6dso_xl_data_rate_set+0x9c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    2774:	2301      	movs	r3, #1
    2776:	466a      	mov	r2, sp
    2778:	2110      	movs	r1, #16
    277a:	0020      	movs	r0, r4
    277c:	4e1e      	ldr	r6, [pc, #120]	; (27f8 <lsm6dso_xl_data_rate_set+0xf0>)
    277e:	47b0      	blx	r6
  if (ret == 0)
    2780:	2800      	cmp	r0, #0
    2782:	d10d      	bne.n	27a0 <lsm6dso_xl_data_rate_set+0x98>
    reg.odr_xl = (uint8_t) odr_xl;
    2784:	012b      	lsls	r3, r5, #4
    2786:	466a      	mov	r2, sp
    2788:	7812      	ldrb	r2, [r2, #0]
    278a:	250f      	movs	r5, #15
    278c:	4015      	ands	r5, r2
    278e:	431d      	orrs	r5, r3
    2790:	466b      	mov	r3, sp
    2792:	701d      	strb	r5, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    2794:	2301      	movs	r3, #1
    2796:	466a      	mov	r2, sp
    2798:	2110      	movs	r1, #16
    279a:	0020      	movs	r0, r4
    279c:	4c17      	ldr	r4, [pc, #92]	; (27fc <lsm6dso_xl_data_rate_set+0xf4>)
    279e:	47a0      	blx	r4
}
    27a0:	b002      	add	sp, #8
    27a2:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    27a4:	466b      	mov	r3, sp
    27a6:	1cd9      	adds	r1, r3, #3
    27a8:	0020      	movs	r0, r4
    27aa:	4b15      	ldr	r3, [pc, #84]	; (2800 <lsm6dso_xl_data_rate_set+0xf8>)
    27ac:	4798      	blx	r3
      if (ret == 0)
    27ae:	2800      	cmp	r0, #0
    27b0:	d1f6      	bne.n	27a0 <lsm6dso_xl_data_rate_set+0x98>
        switch (fsm_odr)
    27b2:	466b      	mov	r3, sp
    27b4:	3303      	adds	r3, #3
    27b6:	781b      	ldrb	r3, [r3, #0]
    27b8:	2b01      	cmp	r3, #1
    27ba:	d00f      	beq.n	27dc <lsm6dso_xl_data_rate_set+0xd4>
    27bc:	2b00      	cmp	r3, #0
    27be:	d009      	beq.n	27d4 <lsm6dso_xl_data_rate_set+0xcc>
    27c0:	2b02      	cmp	r3, #2
    27c2:	d011      	beq.n	27e8 <lsm6dso_xl_data_rate_set+0xe0>
    27c4:	2b03      	cmp	r3, #3
    27c6:	d1d5      	bne.n	2774 <lsm6dso_xl_data_rate_set+0x6c>
    27c8:	1c2b      	adds	r3, r5, #0
    27ca:	2d03      	cmp	r5, #3
    27cc:	d800      	bhi.n	27d0 <lsm6dso_xl_data_rate_set+0xc8>
    27ce:	2304      	movs	r3, #4
    27d0:	b2dd      	uxtb	r5, r3
    27d2:	e7cf      	b.n	2774 <lsm6dso_xl_data_rate_set+0x6c>
            if (val == LSM6DSO_XL_ODR_OFF)
    27d4:	2d00      	cmp	r5, #0
    27d6:	d1cd      	bne.n	2774 <lsm6dso_xl_data_rate_set+0x6c>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
    27d8:	2501      	movs	r5, #1
    27da:	e7cb      	b.n	2774 <lsm6dso_xl_data_rate_set+0x6c>
    27dc:	1c2b      	adds	r3, r5, #0
    27de:	2d01      	cmp	r5, #1
    27e0:	d800      	bhi.n	27e4 <lsm6dso_xl_data_rate_set+0xdc>
    27e2:	2302      	movs	r3, #2
    27e4:	b2dd      	uxtb	r5, r3
    27e6:	e7c5      	b.n	2774 <lsm6dso_xl_data_rate_set+0x6c>
    27e8:	1c2b      	adds	r3, r5, #0
    27ea:	2d02      	cmp	r5, #2
    27ec:	d800      	bhi.n	27f0 <lsm6dso_xl_data_rate_set+0xe8>
    27ee:	2303      	movs	r3, #3
    27f0:	b2dd      	uxtb	r5, r3
    27f2:	e7bf      	b.n	2774 <lsm6dso_xl_data_rate_set+0x6c>
    27f4:	00002665 	.word	0x00002665
    27f8:	0000239d 	.word	0x0000239d
    27fc:	000023a9 	.word	0x000023a9
    2800:	00002699 	.word	0x00002699

00002804 <lsm6dso_gy_data_rate_set>:
{
    2804:	b570      	push	{r4, r5, r6, lr}
    2806:	b082      	sub	sp, #8
    2808:	0004      	movs	r4, r0
    280a:	000d      	movs	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    280c:	a901      	add	r1, sp, #4
    280e:	4b38      	ldr	r3, [pc, #224]	; (28f0 <lsm6dso_gy_data_rate_set+0xec>)
    2810:	4798      	blx	r3
  if (ret == 0)
    2812:	2800      	cmp	r0, #0
    2814:	d142      	bne.n	289c <lsm6dso_gy_data_rate_set+0x98>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    2816:	a901      	add	r1, sp, #4
    2818:	780a      	ldrb	r2, [r1, #0]
    281a:	07d0      	lsls	r0, r2, #31
         fsm_enable.fsm_enable_a.fsm2_en  |
    281c:	0793      	lsls	r3, r2, #30
    281e:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    2820:	0753      	lsls	r3, r2, #29
    2822:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
    2824:	0710      	lsls	r0, r2, #28
    2826:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
    2828:	06d0      	lsls	r0, r2, #27
    282a:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    282c:	0693      	lsls	r3, r2, #26
    282e:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    2830:	0653      	lsls	r3, r2, #25
    2832:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
    2834:	0fdb      	lsrs	r3, r3, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    2836:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_a.fsm7_en  |
    2838:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_b.fsm9_en  |
    283a:	784a      	ldrb	r2, [r1, #1]
    283c:	07d1      	lsls	r1, r2, #31
    283e:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    2840:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
    2842:	0791      	lsls	r1, r2, #30
    2844:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm9_en  |
    2846:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
    2848:	0751      	lsls	r1, r2, #29
    284a:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm10_en |
    284c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
    284e:	0711      	lsls	r1, r2, #28
    2850:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm11_en |
    2852:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
    2854:	06d1      	lsls	r1, r2, #27
    2856:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm12_en |
    2858:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
    285a:	0691      	lsls	r1, r2, #26
    285c:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm13_en |
    285e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
    2860:	0651      	lsls	r1, r2, #25
    2862:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm14_en |
    2864:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    2866:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_b.fsm15_en |
    2868:	4313      	orrs	r3, r2
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    286a:	b2db      	uxtb	r3, r3
    286c:	2b01      	cmp	r3, #1
    286e:	d017      	beq.n	28a0 <lsm6dso_gy_data_rate_set+0x9c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    2870:	2301      	movs	r3, #1
    2872:	466a      	mov	r2, sp
    2874:	2111      	movs	r1, #17
    2876:	0020      	movs	r0, r4
    2878:	4e1e      	ldr	r6, [pc, #120]	; (28f4 <lsm6dso_gy_data_rate_set+0xf0>)
    287a:	47b0      	blx	r6
  if (ret == 0)
    287c:	2800      	cmp	r0, #0
    287e:	d10d      	bne.n	289c <lsm6dso_gy_data_rate_set+0x98>
    reg.odr_g = (uint8_t) odr_gy;
    2880:	012b      	lsls	r3, r5, #4
    2882:	466a      	mov	r2, sp
    2884:	7812      	ldrb	r2, [r2, #0]
    2886:	250f      	movs	r5, #15
    2888:	4015      	ands	r5, r2
    288a:	431d      	orrs	r5, r3
    288c:	466b      	mov	r3, sp
    288e:	701d      	strb	r5, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    2890:	2301      	movs	r3, #1
    2892:	466a      	mov	r2, sp
    2894:	2111      	movs	r1, #17
    2896:	0020      	movs	r0, r4
    2898:	4c17      	ldr	r4, [pc, #92]	; (28f8 <lsm6dso_gy_data_rate_set+0xf4>)
    289a:	47a0      	blx	r4
}
    289c:	b002      	add	sp, #8
    289e:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    28a0:	466b      	mov	r3, sp
    28a2:	1cd9      	adds	r1, r3, #3
    28a4:	0020      	movs	r0, r4
    28a6:	4b15      	ldr	r3, [pc, #84]	; (28fc <lsm6dso_gy_data_rate_set+0xf8>)
    28a8:	4798      	blx	r3
      if (ret == 0)
    28aa:	2800      	cmp	r0, #0
    28ac:	d1f6      	bne.n	289c <lsm6dso_gy_data_rate_set+0x98>
        switch (fsm_odr)
    28ae:	466b      	mov	r3, sp
    28b0:	3303      	adds	r3, #3
    28b2:	781b      	ldrb	r3, [r3, #0]
    28b4:	2b01      	cmp	r3, #1
    28b6:	d00f      	beq.n	28d8 <lsm6dso_gy_data_rate_set+0xd4>
    28b8:	2b00      	cmp	r3, #0
    28ba:	d009      	beq.n	28d0 <lsm6dso_gy_data_rate_set+0xcc>
    28bc:	2b02      	cmp	r3, #2
    28be:	d011      	beq.n	28e4 <lsm6dso_gy_data_rate_set+0xe0>
    28c0:	2b03      	cmp	r3, #3
    28c2:	d1d5      	bne.n	2870 <lsm6dso_gy_data_rate_set+0x6c>
    28c4:	1c2b      	adds	r3, r5, #0
    28c6:	2d03      	cmp	r5, #3
    28c8:	d800      	bhi.n	28cc <lsm6dso_gy_data_rate_set+0xc8>
    28ca:	2304      	movs	r3, #4
    28cc:	b2dd      	uxtb	r5, r3
    28ce:	e7cf      	b.n	2870 <lsm6dso_gy_data_rate_set+0x6c>
            if (val == LSM6DSO_GY_ODR_OFF)
    28d0:	2d00      	cmp	r5, #0
    28d2:	d1cd      	bne.n	2870 <lsm6dso_gy_data_rate_set+0x6c>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
    28d4:	2501      	movs	r5, #1
    28d6:	e7cb      	b.n	2870 <lsm6dso_gy_data_rate_set+0x6c>
    28d8:	1c2b      	adds	r3, r5, #0
    28da:	2d01      	cmp	r5, #1
    28dc:	d800      	bhi.n	28e0 <lsm6dso_gy_data_rate_set+0xdc>
    28de:	2302      	movs	r3, #2
    28e0:	b2dd      	uxtb	r5, r3
    28e2:	e7c5      	b.n	2870 <lsm6dso_gy_data_rate_set+0x6c>
    28e4:	1c2b      	adds	r3, r5, #0
    28e6:	2d02      	cmp	r5, #2
    28e8:	d800      	bhi.n	28ec <lsm6dso_gy_data_rate_set+0xe8>
    28ea:	2303      	movs	r3, #3
    28ec:	b2dd      	uxtb	r5, r3
    28ee:	e7bf      	b.n	2870 <lsm6dso_gy_data_rate_set+0x6c>
    28f0:	00002665 	.word	0x00002665
    28f4:	0000239d 	.word	0x0000239d
    28f8:	000023a9 	.word	0x000023a9
    28fc:	00002699 	.word	0x00002699

00002900 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
 return &dev_ctx;
}
    2900:	4800      	ldr	r0, [pc, #0]	; (2904 <GetImuStruct+0x4>)
    2902:	4770      	bx	lr
    2904:	20000068 	.word	0x20000068

00002908 <InitImu>:



int32_t InitImu(void)
{
    2908:	b510      	push	{r4, lr}
    290a:	b082      	sub	sp, #8
	uint8_t rst;
	int32_t error = 0;
	uint8_t whoamI = 0;
    290c:	466b      	mov	r3, sp
    290e:	1ddc      	adds	r4, r3, #7
    2910:	2300      	movs	r3, #0
    2912:	7023      	strb	r3, [r4, #0]

  /* Check device ID */
  lsm6dso_device_id_get(&dev_ctx, &whoamI);
    2914:	0021      	movs	r1, r4
    2916:	4818      	ldr	r0, [pc, #96]	; (2978 <InitImu+0x70>)
    2918:	4b18      	ldr	r3, [pc, #96]	; (297c <InitImu+0x74>)
    291a:	4798      	blx	r3
  
   if (whoamI != LSM6DSO_ID)
    291c:	7823      	ldrb	r3, [r4, #0]
    291e:	2b6c      	cmp	r3, #108	; 0x6c
    2920:	d127      	bne.n	2972 <InitImu+0x6a>
  //do {
    //error |= lsm6dso_reset_get(&dev_ctx, &rst);
  //} while (rst);   // edited reset not working on the PCB

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
    2922:	4c15      	ldr	r4, [pc, #84]	; (2978 <InitImu+0x70>)
    2924:	2180      	movs	r1, #128	; 0x80
    2926:	0020      	movs	r0, r4
    2928:	4b15      	ldr	r3, [pc, #84]	; (2980 <InitImu+0x78>)
    292a:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    292c:	2101      	movs	r1, #1
    292e:	0020      	movs	r0, r4
    2930:	4b14      	ldr	r3, [pc, #80]	; (2984 <InitImu+0x7c>)
    2932:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
    2934:	2100      	movs	r1, #0
    2936:	0020      	movs	r0, r4
    2938:	4b13      	ldr	r3, [pc, #76]	; (2988 <InitImu+0x80>)
    293a:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_833Hz);  // edited change speed here
    293c:	2107      	movs	r1, #7
    293e:	0020      	movs	r0, r4
    2940:	4b12      	ldr	r3, [pc, #72]	; (298c <InitImu+0x84>)
    2942:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx,  LSM6DSO_GY_ODR_833Hz);
    2944:	2107      	movs	r1, #7
    2946:	0020      	movs	r0, r4
    2948:	4b11      	ldr	r3, [pc, #68]	; (2990 <InitImu+0x88>)
    294a:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
    294c:	2100      	movs	r1, #0
    294e:	0020      	movs	r0, r4
    2950:	4b10      	ldr	r3, [pc, #64]	; (2994 <InitImu+0x8c>)
    2952:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
    2954:	2106      	movs	r1, #6
    2956:	0020      	movs	r0, r4
    2958:	4b0f      	ldr	r3, [pc, #60]	; (2998 <InitImu+0x90>)
    295a:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
    295c:	2104      	movs	r1, #4
    295e:	0020      	movs	r0, r4
    2960:	4b0e      	ldr	r3, [pc, #56]	; (299c <InitImu+0x94>)
    2962:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
    2964:	2101      	movs	r1, #1
    2966:	0020      	movs	r0, r4
    2968:	4b0d      	ldr	r3, [pc, #52]	; (29a0 <InitImu+0x98>)
    296a:	4798      	blx	r3

  return error;
    296c:	2000      	movs	r0, #0
}
    296e:	b002      	add	sp, #8
    2970:	bd10      	pop	{r4, pc}
		return -1;
    2972:	2001      	movs	r0, #1
    2974:	4240      	negs	r0, r0
    2976:	e7fa      	b.n	296e <InitImu+0x66>
    2978:	20000068 	.word	0x20000068
    297c:	00002549 	.word	0x00002549
    2980:	000025f5 	.word	0x000025f5
    2984:	00002451 	.word	0x00002451
    2988:	00002491 	.word	0x00002491
    298c:	00002709 	.word	0x00002709
    2990:	00002805 	.word	0x00002805
    2994:	000023d1 	.word	0x000023d1
    2998:	00002411 	.word	0x00002411
    299c:	0000259d 	.word	0x0000259d
    29a0:	0000255d 	.word	0x0000255d

000029a4 <configure_spi_master>:
* @param[out]	
* @return		
* @note         
*****************************************************************************/
void configure_spi_master(void)
{
    29a4:	b530      	push	{r4, r5, lr}
    29a6:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    29a8:	4c27      	ldr	r4, [pc, #156]	; (2a48 <configure_spi_master+0xa4>)
    29aa:	2311      	movs	r3, #17
    29ac:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    29ae:	2300      	movs	r3, #0
    29b0:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    29b2:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    29b4:	a901      	add	r1, sp, #4
    29b6:	2201      	movs	r2, #1
    29b8:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    29ba:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    29bc:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    29be:	2011      	movs	r0, #17
    29c0:	4b22      	ldr	r3, [pc, #136]	; (2a4c <configure_spi_master+0xa8>)
    29c2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    29c4:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    29c6:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    29c8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    29ca:	2900      	cmp	r1, #0
    29cc:	d104      	bne.n	29d8 <configure_spi_master+0x34>
		return &(ports[port_index]->Group[group_index]);
    29ce:	0953      	lsrs	r3, r2, #5
    29d0:	01db      	lsls	r3, r3, #7
    29d2:	491f      	ldr	r1, [pc, #124]	; (2a50 <configure_spi_master+0xac>)
    29d4:	468c      	mov	ip, r1
    29d6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    29d8:	211f      	movs	r1, #31
    29da:	4011      	ands	r1, r2
    29dc:	2201      	movs	r2, #1
    29de:	0010      	movs	r0, r2
    29e0:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    29e2:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    29e4:	ac02      	add	r4, sp, #8
    29e6:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    29e8:	2500      	movs	r5, #0
    29ea:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    29ec:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    29ee:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    29f0:	74a2      	strb	r2, [r4, #18]
	config->master_slave_select_enable= false;
    29f2:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    29f4:	2324      	movs	r3, #36	; 0x24
    29f6:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    29f8:	320b      	adds	r2, #11
    29fa:	2100      	movs	r1, #0
    29fc:	a808      	add	r0, sp, #32
    29fe:	4b15      	ldr	r3, [pc, #84]	; (2a54 <configure_spi_master+0xb0>)
    2a00:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
	spi_attach_slave(&slave, &slave_dev_config);
	
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
    2a02:	2398      	movs	r3, #152	; 0x98
    2a04:	035b      	lsls	r3, r3, #13
    2a06:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
    2a08:	4b13      	ldr	r3, [pc, #76]	; (2a58 <configure_spi_master+0xb4>)
    2a0a:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
    2a0c:	4b13      	ldr	r3, [pc, #76]	; (2a5c <configure_spi_master+0xb8>)
    2a0e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
    2a10:	2301      	movs	r3, #1
    2a12:	425b      	negs	r3, r3
    2a14:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
    2a16:	4b12      	ldr	r3, [pc, #72]	; (2a60 <configure_spi_master+0xbc>)
    2a18:	6363      	str	r3, [r4, #52]	; 0x34
	
	/* Works upto 1 MHZ with small jumpers. Doesn't work with long jumper wires. 	*/
	config_spi_master.mode_specific.master.baudrate = 1000000;  // 1 MHZ clock.
    2a1a:	4b12      	ldr	r3, [pc, #72]	; (2a64 <configure_spi_master+0xc0>)
    2a1c:	61a3      	str	r3, [r4, #24]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;  // works with both mode 0 and mode 1
    2a1e:	2380      	movs	r3, #128	; 0x80
    2a20:	055b      	lsls	r3, r3, #21
    2a22:	60a3      	str	r3, [r4, #8]
	config_spi_master.select_slave_low_detect_enable = false;
    2a24:	74e5      	strb	r5, [r4, #19]

	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
    2a26:	4d10      	ldr	r5, [pc, #64]	; (2a68 <configure_spi_master+0xc4>)
    2a28:	0022      	movs	r2, r4
    2a2a:	4910      	ldr	r1, [pc, #64]	; (2a6c <configure_spi_master+0xc8>)
    2a2c:	0028      	movs	r0, r5
    2a2e:	4b10      	ldr	r3, [pc, #64]	; (2a70 <configure_spi_master+0xcc>)
    2a30:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2a32:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2a34:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    2a36:	2b00      	cmp	r3, #0
    2a38:	d1fc      	bne.n	2a34 <configure_spi_master+0x90>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2a3a:	6813      	ldr	r3, [r2, #0]
    2a3c:	2102      	movs	r1, #2
    2a3e:	430b      	orrs	r3, r1
    2a40:	6013      	str	r3, [r2, #0]
	spi_enable(&spi_master_instance);
    2a42:	b011      	add	sp, #68	; 0x44
    2a44:	bd30      	pop	{r4, r5, pc}
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	20000074 	.word	0x20000074
    2a4c:	00006e19 	.word	0x00006e19
    2a50:	41004400 	.word	0x41004400
    2a54:	00008857 	.word	0x00008857
    2a58:	00220003 	.word	0x00220003
    2a5c:	00230003 	.word	0x00230003
    2a60:	00150002 	.word	0x00150002
    2a64:	000f4240 	.word	0x000f4240
    2a68:	20003964 	.word	0x20003964
    2a6c:	42001c00 	.word	0x42001c00
    2a70:	000072c5 	.word	0x000072c5

00002a74 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    2a74:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2a76:	2207      	movs	r2, #7
    2a78:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    2a7a:	421a      	tst	r2, r3
    2a7c:	d1fc      	bne.n	2a78 <_i2c_master_wait_for_sync+0x4>
}
    2a7e:	4770      	bx	lr

00002a80 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    2a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a82:	46d6      	mov	lr, sl
    2a84:	464f      	mov	r7, r9
    2a86:	4646      	mov	r6, r8
    2a88:	b5c0      	push	{r6, r7, lr}
    2a8a:	b08a      	sub	sp, #40	; 0x28
    2a8c:	0006      	movs	r6, r0
    2a8e:	000f      	movs	r7, r1
    2a90:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    2a92:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2a94:	0008      	movs	r0, r1
    2a96:	4ba0      	ldr	r3, [pc, #640]	; (2d18 <i2c_master_init+0x298>)
    2a98:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2a9a:	4aa0      	ldr	r2, [pc, #640]	; (2d1c <i2c_master_init+0x29c>)
    2a9c:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2a9e:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2aa0:	2301      	movs	r3, #1
    2aa2:	40ab      	lsls	r3, r5
    2aa4:	430b      	orrs	r3, r1
    2aa6:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    2aa8:	a909      	add	r1, sp, #36	; 0x24
    2aaa:	7b23      	ldrb	r3, [r4, #12]
    2aac:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2aae:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2ab0:	b2c5      	uxtb	r5, r0
    2ab2:	0028      	movs	r0, r5
    2ab4:	4b9a      	ldr	r3, [pc, #616]	; (2d20 <i2c_master_init+0x2a0>)
    2ab6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2ab8:	0028      	movs	r0, r5
    2aba:	4b9a      	ldr	r3, [pc, #616]	; (2d24 <i2c_master_init+0x2a4>)
    2abc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2abe:	7b20      	ldrb	r0, [r4, #12]
    2ac0:	2100      	movs	r1, #0
    2ac2:	4b99      	ldr	r3, [pc, #612]	; (2d28 <i2c_master_init+0x2a8>)
    2ac4:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    2ac6:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    2ac8:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    2aca:	079b      	lsls	r3, r3, #30
    2acc:	d505      	bpl.n	2ada <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    2ace:	b00a      	add	sp, #40	; 0x28
    2ad0:	bc1c      	pop	{r2, r3, r4}
    2ad2:	4690      	mov	r8, r2
    2ad4:	4699      	mov	r9, r3
    2ad6:	46a2      	mov	sl, r4
    2ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    2ada:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    2adc:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    2ade:	07db      	lsls	r3, r3, #31
    2ae0:	d4f5      	bmi.n	2ace <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2ae2:	6830      	ldr	r0, [r6, #0]
    2ae4:	4b8c      	ldr	r3, [pc, #560]	; (2d18 <i2c_master_init+0x298>)
    2ae6:	4699      	mov	r9, r3
    2ae8:	4798      	blx	r3
    2aea:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    2aec:	498f      	ldr	r1, [pc, #572]	; (2d2c <i2c_master_init+0x2ac>)
    2aee:	4b90      	ldr	r3, [pc, #576]	; (2d30 <i2c_master_init+0x2b0>)
    2af0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2af2:	00ad      	lsls	r5, r5, #2
    2af4:	4b8f      	ldr	r3, [pc, #572]	; (2d34 <i2c_master_init+0x2b4>)
    2af6:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
    2af8:	2300      	movs	r3, #0
    2afa:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
    2afc:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
    2afe:	2500      	movs	r5, #0
    2b00:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
    2b02:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
    2b04:	2225      	movs	r2, #37	; 0x25
    2b06:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
    2b08:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    2b0a:	3314      	adds	r3, #20
    2b0c:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2b0e:	6833      	ldr	r3, [r6, #0]
    2b10:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    2b12:	0018      	movs	r0, r3
    2b14:	47c8      	blx	r9
    2b16:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2b18:	2380      	movs	r3, #128	; 0x80
    2b1a:	aa08      	add	r2, sp, #32
    2b1c:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2b1e:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2b20:	2301      	movs	r3, #1
    2b22:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    2b24:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    2b26:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    2b28:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    2b2a:	2800      	cmp	r0, #0
    2b2c:	d100      	bne.n	2b30 <i2c_master_init+0xb0>
    2b2e:	e0af      	b.n	2c90 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
    2b30:	ab08      	add	r3, sp, #32
    2b32:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    2b34:	2302      	movs	r3, #2
    2b36:	aa08      	add	r2, sp, #32
    2b38:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    2b3a:	0c00      	lsrs	r0, r0, #16
    2b3c:	b2c0      	uxtb	r0, r0
    2b3e:	0011      	movs	r1, r2
    2b40:	4b7d      	ldr	r3, [pc, #500]	; (2d38 <i2c_master_init+0x2b8>)
    2b42:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    2b44:	2f00      	cmp	r7, #0
    2b46:	d100      	bne.n	2b4a <i2c_master_init+0xca>
    2b48:	e0a7      	b.n	2c9a <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
    2b4a:	ab08      	add	r3, sp, #32
    2b4c:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    2b4e:	2302      	movs	r3, #2
    2b50:	aa08      	add	r2, sp, #32
    2b52:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    2b54:	0c3f      	lsrs	r7, r7, #16
    2b56:	b2f8      	uxtb	r0, r7
    2b58:	0011      	movs	r1, r2
    2b5a:	4b77      	ldr	r3, [pc, #476]	; (2d38 <i2c_master_init+0x2b8>)
    2b5c:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    2b5e:	8aa3      	ldrh	r3, [r4, #20]
    2b60:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    2b62:	8ae3      	ldrh	r3, [r4, #22]
    2b64:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    2b66:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    2b68:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    2b6a:	2b00      	cmp	r3, #0
    2b6c:	d104      	bne.n	2b78 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2b6e:	4b73      	ldr	r3, [pc, #460]	; (2d3c <i2c_master_init+0x2bc>)
    2b70:	789b      	ldrb	r3, [r3, #2]
    2b72:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    2b74:	0fdb      	lsrs	r3, r3, #31
    2b76:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    2b78:	68a1      	ldr	r1, [r4, #8]
    2b7a:	6923      	ldr	r3, [r4, #16]
    2b7c:	430b      	orrs	r3, r1
    2b7e:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    2b80:	2224      	movs	r2, #36	; 0x24
    2b82:	5ca2      	ldrb	r2, [r4, r2]
    2b84:	2a00      	cmp	r2, #0
    2b86:	d002      	beq.n	2b8e <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    2b88:	2280      	movs	r2, #128	; 0x80
    2b8a:	05d2      	lsls	r2, r2, #23
    2b8c:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    2b8e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2b90:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    2b92:	222c      	movs	r2, #44	; 0x2c
    2b94:	5ca2      	ldrb	r2, [r4, r2]
    2b96:	2a00      	cmp	r2, #0
    2b98:	d103      	bne.n	2ba2 <i2c_master_init+0x122>
    2b9a:	2280      	movs	r2, #128	; 0x80
    2b9c:	0492      	lsls	r2, r2, #18
    2b9e:	4291      	cmp	r1, r2
    2ba0:	d102      	bne.n	2ba8 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    2ba2:	2280      	movs	r2, #128	; 0x80
    2ba4:	0512      	lsls	r2, r2, #20
    2ba6:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    2ba8:	222d      	movs	r2, #45	; 0x2d
    2baa:	5ca2      	ldrb	r2, [r4, r2]
    2bac:	2a00      	cmp	r2, #0
    2bae:	d002      	beq.n	2bb6 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    2bb0:	2280      	movs	r2, #128	; 0x80
    2bb2:	0412      	lsls	r2, r2, #16
    2bb4:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    2bb6:	222e      	movs	r2, #46	; 0x2e
    2bb8:	5ca2      	ldrb	r2, [r4, r2]
    2bba:	2a00      	cmp	r2, #0
    2bbc:	d002      	beq.n	2bc4 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    2bbe:	2280      	movs	r2, #128	; 0x80
    2bc0:	03d2      	lsls	r2, r2, #15
    2bc2:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    2bc4:	4642      	mov	r2, r8
    2bc6:	6812      	ldr	r2, [r2, #0]
    2bc8:	4313      	orrs	r3, r2
    2bca:	4642      	mov	r2, r8
    2bcc:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    2bce:	2380      	movs	r3, #128	; 0x80
    2bd0:	005b      	lsls	r3, r3, #1
    2bd2:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    2bd4:	4648      	mov	r0, r9
    2bd6:	3014      	adds	r0, #20
    2bd8:	b2c0      	uxtb	r0, r0
    2bda:	4b59      	ldr	r3, [pc, #356]	; (2d40 <i2c_master_init+0x2c0>)
    2bdc:	4798      	blx	r3
    2bde:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    2be0:	23fa      	movs	r3, #250	; 0xfa
    2be2:	009b      	lsls	r3, r3, #2
    2be4:	6822      	ldr	r2, [r4, #0]
    2be6:	435a      	muls	r2, r3
    2be8:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    2bea:	6863      	ldr	r3, [r4, #4]
    2bec:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    2bee:	4d55      	ldr	r5, [pc, #340]	; (2d44 <i2c_master_init+0x2c4>)
    2bf0:	47a8      	blx	r5
    2bf2:	9000      	str	r0, [sp, #0]
    2bf4:	9101      	str	r1, [sp, #4]
    2bf6:	464b      	mov	r3, r9
    2bf8:	0058      	lsls	r0, r3, #1
    2bfa:	47a8      	blx	r5
    2bfc:	9002      	str	r0, [sp, #8]
    2bfe:	9103      	str	r1, [sp, #12]
    2c00:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    2c02:	47a8      	blx	r5
    2c04:	9004      	str	r0, [sp, #16]
    2c06:	9105      	str	r1, [sp, #20]
    2c08:	4f4f      	ldr	r7, [pc, #316]	; (2d48 <i2c_master_init+0x2c8>)
    2c0a:	4a50      	ldr	r2, [pc, #320]	; (2d4c <i2c_master_init+0x2cc>)
    2c0c:	4b50      	ldr	r3, [pc, #320]	; (2d50 <i2c_master_init+0x2d0>)
    2c0e:	9800      	ldr	r0, [sp, #0]
    2c10:	9901      	ldr	r1, [sp, #4]
    2c12:	47b8      	blx	r7
    2c14:	0002      	movs	r2, r0
    2c16:	000b      	movs	r3, r1
    2c18:	9804      	ldr	r0, [sp, #16]
    2c1a:	9905      	ldr	r1, [sp, #20]
    2c1c:	47b8      	blx	r7
    2c1e:	4e4d      	ldr	r6, [pc, #308]	; (2d54 <i2c_master_init+0x2d4>)
    2c20:	2200      	movs	r2, #0
    2c22:	4b4d      	ldr	r3, [pc, #308]	; (2d58 <i2c_master_init+0x2d8>)
    2c24:	47b0      	blx	r6
    2c26:	9004      	str	r0, [sp, #16]
    2c28:	9105      	str	r1, [sp, #20]
    2c2a:	4648      	mov	r0, r9
    2c2c:	47a8      	blx	r5
    2c2e:	0002      	movs	r2, r0
    2c30:	000b      	movs	r3, r1
    2c32:	9804      	ldr	r0, [sp, #16]
    2c34:	9905      	ldr	r1, [sp, #20]
    2c36:	47b8      	blx	r7
    2c38:	0002      	movs	r2, r0
    2c3a:	000b      	movs	r3, r1
    2c3c:	4d47      	ldr	r5, [pc, #284]	; (2d5c <i2c_master_init+0x2dc>)
    2c3e:	9800      	ldr	r0, [sp, #0]
    2c40:	9901      	ldr	r1, [sp, #4]
    2c42:	47a8      	blx	r5
    2c44:	9a02      	ldr	r2, [sp, #8]
    2c46:	9b03      	ldr	r3, [sp, #12]
    2c48:	47b0      	blx	r6
    2c4a:	2200      	movs	r2, #0
    2c4c:	4b44      	ldr	r3, [pc, #272]	; (2d60 <i2c_master_init+0x2e0>)
    2c4e:	47a8      	blx	r5
    2c50:	9a02      	ldr	r2, [sp, #8]
    2c52:	9b03      	ldr	r3, [sp, #12]
    2c54:	4d43      	ldr	r5, [pc, #268]	; (2d64 <i2c_master_init+0x2e4>)
    2c56:	47a8      	blx	r5
    2c58:	4b43      	ldr	r3, [pc, #268]	; (2d68 <i2c_master_init+0x2e8>)
    2c5a:	4798      	blx	r3
    2c5c:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    2c5e:	2380      	movs	r3, #128	; 0x80
    2c60:	049b      	lsls	r3, r3, #18
    2c62:	68a2      	ldr	r2, [r4, #8]
    2c64:	429a      	cmp	r2, r3
    2c66:	d01e      	beq.n	2ca6 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    2c68:	0003      	movs	r3, r0
    2c6a:	2040      	movs	r0, #64	; 0x40
    2c6c:	2dff      	cmp	r5, #255	; 0xff
    2c6e:	d900      	bls.n	2c72 <i2c_master_init+0x1f2>
    2c70:	e72d      	b.n	2ace <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    2c72:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    2c74:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    2c76:	25ff      	movs	r5, #255	; 0xff
    2c78:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    2c7a:	0624      	lsls	r4, r4, #24
    2c7c:	4325      	orrs	r5, r4
    2c7e:	0400      	lsls	r0, r0, #16
    2c80:	23ff      	movs	r3, #255	; 0xff
    2c82:	041b      	lsls	r3, r3, #16
    2c84:	4018      	ands	r0, r3
    2c86:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    2c88:	4643      	mov	r3, r8
    2c8a:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    2c8c:	2000      	movs	r0, #0
    2c8e:	e71e      	b.n	2ace <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    2c90:	2100      	movs	r1, #0
    2c92:	4640      	mov	r0, r8
    2c94:	4b35      	ldr	r3, [pc, #212]	; (2d6c <i2c_master_init+0x2ec>)
    2c96:	4798      	blx	r3
    2c98:	e74a      	b.n	2b30 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    2c9a:	2101      	movs	r1, #1
    2c9c:	4640      	mov	r0, r8
    2c9e:	4b33      	ldr	r3, [pc, #204]	; (2d6c <i2c_master_init+0x2ec>)
    2ca0:	4798      	blx	r3
    2ca2:	0007      	movs	r7, r0
    2ca4:	e751      	b.n	2b4a <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    2ca6:	26fa      	movs	r6, #250	; 0xfa
    2ca8:	00b6      	lsls	r6, r6, #2
    2caa:	4653      	mov	r3, sl
    2cac:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    2cae:	9800      	ldr	r0, [sp, #0]
    2cb0:	9901      	ldr	r1, [sp, #4]
    2cb2:	0002      	movs	r2, r0
    2cb4:	000b      	movs	r3, r1
    2cb6:	4c27      	ldr	r4, [pc, #156]	; (2d54 <i2c_master_init+0x2d4>)
    2cb8:	47a0      	blx	r4
    2cba:	9000      	str	r0, [sp, #0]
    2cbc:	9101      	str	r1, [sp, #4]
    2cbe:	0030      	movs	r0, r6
    2cc0:	4b20      	ldr	r3, [pc, #128]	; (2d44 <i2c_master_init+0x2c4>)
    2cc2:	4798      	blx	r3
    2cc4:	2200      	movs	r2, #0
    2cc6:	4b2a      	ldr	r3, [pc, #168]	; (2d70 <i2c_master_init+0x2f0>)
    2cc8:	47b8      	blx	r7
    2cca:	0002      	movs	r2, r0
    2ccc:	000b      	movs	r3, r1
    2cce:	9800      	ldr	r0, [sp, #0]
    2cd0:	9901      	ldr	r1, [sp, #4]
    2cd2:	4c24      	ldr	r4, [pc, #144]	; (2d64 <i2c_master_init+0x2e4>)
    2cd4:	47a0      	blx	r4
    2cd6:	2200      	movs	r2, #0
    2cd8:	4b21      	ldr	r3, [pc, #132]	; (2d60 <i2c_master_init+0x2e0>)
    2cda:	4c20      	ldr	r4, [pc, #128]	; (2d5c <i2c_master_init+0x2dc>)
    2cdc:	47a0      	blx	r4
    2cde:	4b22      	ldr	r3, [pc, #136]	; (2d68 <i2c_master_init+0x2e8>)
    2ce0:	4798      	blx	r3
    2ce2:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    2ce4:	d00c      	beq.n	2d00 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    2ce6:	0031      	movs	r1, r6
    2ce8:	9807      	ldr	r0, [sp, #28]
    2cea:	4b22      	ldr	r3, [pc, #136]	; (2d74 <i2c_master_init+0x2f4>)
    2cec:	4798      	blx	r3
    2cee:	3802      	subs	r0, #2
    2cf0:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    2cf2:	002b      	movs	r3, r5
    2cf4:	2dff      	cmp	r5, #255	; 0xff
    2cf6:	d80c      	bhi.n	2d12 <i2c_master_init+0x292>
    2cf8:	28ff      	cmp	r0, #255	; 0xff
    2cfa:	d9bc      	bls.n	2c76 <i2c_master_init+0x1f6>
    2cfc:	2040      	movs	r0, #64	; 0x40
    2cfe:	e6e6      	b.n	2ace <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    2d00:	0071      	lsls	r1, r6, #1
    2d02:	1e48      	subs	r0, r1, #1
    2d04:	9b07      	ldr	r3, [sp, #28]
    2d06:	469c      	mov	ip, r3
    2d08:	4460      	add	r0, ip
    2d0a:	4b1a      	ldr	r3, [pc, #104]	; (2d74 <i2c_master_init+0x2f4>)
    2d0c:	4798      	blx	r3
    2d0e:	3801      	subs	r0, #1
    2d10:	e7ef      	b.n	2cf2 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    2d12:	2040      	movs	r0, #64	; 0x40
    2d14:	e6db      	b.n	2ace <i2c_master_init+0x4e>
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	000071bd 	.word	0x000071bd
    2d1c:	40000400 	.word	0x40000400
    2d20:	000082b5 	.word	0x000082b5
    2d24:	00008229 	.word	0x00008229
    2d28:	00006ff9 	.word	0x00006ff9
    2d2c:	000004c9 	.word	0x000004c9
    2d30:	000071f9 	.word	0x000071f9
    2d34:	20004e44 	.word	0x20004e44
    2d38:	000083dd 	.word	0x000083dd
    2d3c:	41002000 	.word	0x41002000
    2d40:	000082d1 	.word	0x000082d1
    2d44:	0000d835 	.word	0x0000d835
    2d48:	0000cbdd 	.word	0x0000cbdd
    2d4c:	e826d695 	.word	0xe826d695
    2d50:	3e112e0b 	.word	0x3e112e0b
    2d54:	0000bd55 	.word	0x0000bd55
    2d58:	40240000 	.word	0x40240000
    2d5c:	0000d0dd 	.word	0x0000d0dd
    2d60:	3ff00000 	.word	0x3ff00000
    2d64:	0000c375 	.word	0x0000c375
    2d68:	0000d749 	.word	0x0000d749
    2d6c:	00007045 	.word	0x00007045
    2d70:	40080000 	.word	0x40080000
    2d74:	0000ab0d 	.word	0x0000ab0d

00002d78 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    2d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d7a:	46ce      	mov	lr, r9
    2d7c:	4647      	mov	r7, r8
    2d7e:	b580      	push	{r7, lr}
    2d80:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2d82:	6803      	ldr	r3, [r0, #0]
    2d84:	4699      	mov	r9, r3

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    2d86:	4e14      	ldr	r6, [pc, #80]	; (2dd8 <i2c_master_reset+0x60>)
    2d88:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2d8a:	6825      	ldr	r5, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2d8c:	0028      	movs	r0, r5
    2d8e:	4b13      	ldr	r3, [pc, #76]	; (2ddc <i2c_master_reset+0x64>)
    2d90:	4698      	mov	r8, r3
    2d92:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2d94:	231f      	movs	r3, #31
    2d96:	4018      	ands	r0, r3
    2d98:	2701      	movs	r7, #1
    2d9a:	0039      	movs	r1, r7
    2d9c:	4081      	lsls	r1, r0
    2d9e:	3361      	adds	r3, #97	; 0x61
    2da0:	4a0f      	ldr	r2, [pc, #60]	; (2de0 <i2c_master_reset+0x68>)
    2da2:	50d1      	str	r1, [r2, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    2da4:	0020      	movs	r0, r4
    2da6:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    2da8:	2383      	movs	r3, #131	; 0x83
    2daa:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    2dac:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    2dae:	682b      	ldr	r3, [r5, #0]
    2db0:	2202      	movs	r2, #2
    2db2:	4393      	bics	r3, r2
    2db4:	602b      	str	r3, [r5, #0]
	cpu_irq_enter_critical();
    2db6:	4b0b      	ldr	r3, [pc, #44]	; (2de4 <i2c_master_reset+0x6c>)
    2db8:	4798      	blx	r3
	i2c_master_disable(module);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    2dba:	6820      	ldr	r0, [r4, #0]
    2dbc:	47c0      	blx	r8
    2dbe:	4b0a      	ldr	r3, [pc, #40]	; (2de8 <i2c_master_reset+0x70>)
    2dc0:	4798      	blx	r3
	cpu_irq_leave_critical();
    2dc2:	4b0a      	ldr	r3, [pc, #40]	; (2dec <i2c_master_reset+0x74>)
    2dc4:	4798      	blx	r3
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    2dc6:	0020      	movs	r0, r4
    2dc8:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    2dca:	464b      	mov	r3, r9
    2dcc:	601f      	str	r7, [r3, #0]
}
    2dce:	bc0c      	pop	{r2, r3}
    2dd0:	4690      	mov	r8, r2
    2dd2:	4699      	mov	r9, r3
    2dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dd6:	46c0      	nop			; (mov r8, r8)
    2dd8:	00002a75 	.word	0x00002a75
    2ddc:	00007235 	.word	0x00007235
    2de0:	e000e100 	.word	0xe000e100
    2de4:	00006c99 	.word	0x00006c99
    2de8:	00008305 	.word	0x00008305
    2dec:	00006cd9 	.word	0x00006cd9

00002df0 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2df0:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    2df2:	7e1a      	ldrb	r2, [r3, #24]
    2df4:	0792      	lsls	r2, r2, #30
    2df6:	d507      	bpl.n	2e08 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2df8:	2202      	movs	r2, #2
    2dfa:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    2dfc:	8b5b      	ldrh	r3, [r3, #26]
    2dfe:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    2e00:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    2e02:	17db      	asrs	r3, r3, #31
    2e04:	4018      	ands	r0, r3
}
    2e06:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    2e08:	8b5a      	ldrh	r2, [r3, #26]
    2e0a:	0752      	lsls	r2, r2, #29
    2e0c:	d506      	bpl.n	2e1c <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2e0e:	6859      	ldr	r1, [r3, #4]
    2e10:	22c0      	movs	r2, #192	; 0xc0
    2e12:	0292      	lsls	r2, r2, #10
    2e14:	430a      	orrs	r2, r1
    2e16:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    2e18:	2018      	movs	r0, #24
    2e1a:	e7f4      	b.n	2e06 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    2e1c:	2000      	movs	r0, #0
    2e1e:	e7f2      	b.n	2e06 <_i2c_master_address_response+0x16>

00002e20 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    2e20:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2e22:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    2e24:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    2e26:	2401      	movs	r4, #1
    2e28:	2502      	movs	r5, #2
    2e2a:	7e11      	ldrb	r1, [r2, #24]
    2e2c:	4221      	tst	r1, r4
    2e2e:	d10b      	bne.n	2e48 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    2e30:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    2e32:	4229      	tst	r1, r5
    2e34:	d106      	bne.n	2e44 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    2e36:	3301      	adds	r3, #1
    2e38:	b29b      	uxth	r3, r3
    2e3a:	8901      	ldrh	r1, [r0, #8]
    2e3c:	4299      	cmp	r1, r3
    2e3e:	d8f4      	bhi.n	2e2a <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    2e40:	2012      	movs	r0, #18
    2e42:	e002      	b.n	2e4a <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    2e44:	2000      	movs	r0, #0
    2e46:	e000      	b.n	2e4a <_i2c_master_wait_for_bus+0x2a>
    2e48:	2000      	movs	r0, #0
}
    2e4a:	bd30      	pop	{r4, r5, pc}

00002e4c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    2e4c:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2e4e:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2e50:	6862      	ldr	r2, [r4, #4]
    2e52:	2380      	movs	r3, #128	; 0x80
    2e54:	02db      	lsls	r3, r3, #11
    2e56:	4313      	orrs	r3, r2
    2e58:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    2e5a:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    2e5c:	4b02      	ldr	r3, [pc, #8]	; (2e68 <_i2c_master_send_hs_master_code+0x1c>)
    2e5e:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    2e60:	2301      	movs	r3, #1
    2e62:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    2e64:	bd10      	pop	{r4, pc}
    2e66:	46c0      	nop			; (mov r8, r8)
    2e68:	00002e21 	.word	0x00002e21

00002e6c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2e6c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    2e6e:	0080      	lsls	r0, r0, #2
    2e70:	4b16      	ldr	r3, [pc, #88]	; (2ecc <_tc_interrupt_handler+0x60>)
    2e72:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2e74:	6823      	ldr	r3, [r4, #0]
    2e76:	7b9d      	ldrb	r5, [r3, #14]
    2e78:	7e22      	ldrb	r2, [r4, #24]
    2e7a:	7e63      	ldrb	r3, [r4, #25]
    2e7c:	4013      	ands	r3, r2
    2e7e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2e80:	07eb      	lsls	r3, r5, #31
    2e82:	d406      	bmi.n	2e92 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2e84:	07ab      	lsls	r3, r5, #30
    2e86:	d40b      	bmi.n	2ea0 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2e88:	06eb      	lsls	r3, r5, #27
    2e8a:	d410      	bmi.n	2eae <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2e8c:	06ab      	lsls	r3, r5, #26
    2e8e:	d415      	bmi.n	2ebc <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    2e90:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    2e92:	0020      	movs	r0, r4
    2e94:	68a3      	ldr	r3, [r4, #8]
    2e96:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2e98:	2301      	movs	r3, #1
    2e9a:	6822      	ldr	r2, [r4, #0]
    2e9c:	7393      	strb	r3, [r2, #14]
    2e9e:	e7f1      	b.n	2e84 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    2ea0:	0020      	movs	r0, r4
    2ea2:	68e3      	ldr	r3, [r4, #12]
    2ea4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2ea6:	2302      	movs	r3, #2
    2ea8:	6822      	ldr	r2, [r4, #0]
    2eaa:	7393      	strb	r3, [r2, #14]
    2eac:	e7ec      	b.n	2e88 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2eae:	0020      	movs	r0, r4
    2eb0:	6923      	ldr	r3, [r4, #16]
    2eb2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2eb4:	2310      	movs	r3, #16
    2eb6:	6822      	ldr	r2, [r4, #0]
    2eb8:	7393      	strb	r3, [r2, #14]
    2eba:	e7e7      	b.n	2e8c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2ebc:	0020      	movs	r0, r4
    2ebe:	6963      	ldr	r3, [r4, #20]
    2ec0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    2ec2:	6823      	ldr	r3, [r4, #0]
    2ec4:	2220      	movs	r2, #32
    2ec6:	739a      	strb	r2, [r3, #14]
}
    2ec8:	e7e2      	b.n	2e90 <_tc_interrupt_handler+0x24>
    2eca:	46c0      	nop			; (mov r8, r8)
    2ecc:	20003970 	.word	0x20003970

00002ed0 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2ed0:	b510      	push	{r4, lr}
    2ed2:	2000      	movs	r0, #0
    2ed4:	4b01      	ldr	r3, [pc, #4]	; (2edc <TC3_Handler+0xc>)
    2ed6:	4798      	blx	r3
    2ed8:	bd10      	pop	{r4, pc}
    2eda:	46c0      	nop			; (mov r8, r8)
    2edc:	00002e6d 	.word	0x00002e6d

00002ee0 <TC4_Handler>:
    2ee0:	b510      	push	{r4, lr}
    2ee2:	2001      	movs	r0, #1
    2ee4:	4b01      	ldr	r3, [pc, #4]	; (2eec <TC4_Handler+0xc>)
    2ee6:	4798      	blx	r3
    2ee8:	bd10      	pop	{r4, pc}
    2eea:	46c0      	nop			; (mov r8, r8)
    2eec:	00002e6d 	.word	0x00002e6d

00002ef0 <TC5_Handler>:
    2ef0:	b510      	push	{r4, lr}
    2ef2:	2002      	movs	r0, #2
    2ef4:	4b01      	ldr	r3, [pc, #4]	; (2efc <TC5_Handler+0xc>)
    2ef6:	4798      	blx	r3
    2ef8:	bd10      	pop	{r4, pc}
    2efa:	46c0      	nop			; (mov r8, r8)
    2efc:	00002e6d 	.word	0x00002e6d

00002f00 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
    2f00:	b570      	push	{r4, r5, r6, lr}
    2f02:	000a      	movs	r2, r1
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
    2f04:	4b09      	ldr	r3, [pc, #36]	; (2f2c <prvHelpCommand+0x2c>)
    2f06:	681b      	ldr	r3, [r3, #0]
    2f08:	2b00      	cmp	r3, #0
    2f0a:	d00a      	beq.n	2f22 <prvHelpCommand+0x22>
		pxCommand = &xRegisteredCommands;
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
    2f0c:	4c07      	ldr	r4, [pc, #28]	; (2f2c <prvHelpCommand+0x2c>)
    2f0e:	6825      	ldr	r5, [r4, #0]
    2f10:	682b      	ldr	r3, [r5, #0]
    2f12:	6859      	ldr	r1, [r3, #4]
    2f14:	4b06      	ldr	r3, [pc, #24]	; (2f30 <prvHelpCommand+0x30>)
    2f16:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
    2f18:	6868      	ldr	r0, [r5, #4]
    2f1a:	6020      	str	r0, [r4, #0]

	if( pxCommand == NULL )
    2f1c:	1e43      	subs	r3, r0, #1
    2f1e:	4198      	sbcs	r0, r3
	{
		xReturn = pdTRUE;
	}

	return xReturn;
}
    2f20:	bd70      	pop	{r4, r5, r6, pc}
		pxCommand = &xRegisteredCommands;
    2f22:	4904      	ldr	r1, [pc, #16]	; (2f34 <prvHelpCommand+0x34>)
    2f24:	4b01      	ldr	r3, [pc, #4]	; (2f2c <prvHelpCommand+0x2c>)
    2f26:	6019      	str	r1, [r3, #0]
    2f28:	e7f0      	b.n	2f0c <prvHelpCommand+0xc>
    2f2a:	46c0      	nop			; (mov r8, r8)
    2f2c:	20000394 	.word	0x20000394
    2f30:	000093d1 	.word	0x000093d1
    2f34:	2000007c 	.word	0x2000007c

00002f38 <FreeRTOS_CLIRegisterCommand>:
{
    2f38:	b570      	push	{r4, r5, r6, lr}
    2f3a:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
    2f3c:	d006      	beq.n	2f4c <FreeRTOS_CLIRegisterCommand+0x14>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
    2f3e:	2008      	movs	r0, #8
    2f40:	4b0a      	ldr	r3, [pc, #40]	; (2f6c <FreeRTOS_CLIRegisterCommand+0x34>)
    2f42:	4798      	blx	r3
    2f44:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
    2f46:	d103      	bne.n	2f50 <FreeRTOS_CLIRegisterCommand+0x18>
    2f48:	b672      	cpsid	i
    2f4a:	e7fe      	b.n	2f4a <FreeRTOS_CLIRegisterCommand+0x12>
	configASSERT( pxCommandToRegister );
    2f4c:	b672      	cpsid	i
    2f4e:	e7fe      	b.n	2f4e <FreeRTOS_CLIRegisterCommand+0x16>
		taskENTER_CRITICAL();
    2f50:	4b07      	ldr	r3, [pc, #28]	; (2f70 <FreeRTOS_CLIRegisterCommand+0x38>)
    2f52:	4798      	blx	r3
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
    2f54:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
    2f56:	2300      	movs	r3, #0
    2f58:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
    2f5a:	4b06      	ldr	r3, [pc, #24]	; (2f74 <FreeRTOS_CLIRegisterCommand+0x3c>)
    2f5c:	681a      	ldr	r2, [r3, #0]
    2f5e:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
    2f60:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
    2f62:	4b05      	ldr	r3, [pc, #20]	; (2f78 <FreeRTOS_CLIRegisterCommand+0x40>)
    2f64:	4798      	blx	r3
}
    2f66:	2001      	movs	r0, #1
    2f68:	bd70      	pop	{r4, r5, r6, pc}
    2f6a:	46c0      	nop			; (mov r8, r8)
    2f6c:	000043e5 	.word	0x000043e5
    2f70:	00004321 	.word	0x00004321
    2f74:	20000078 	.word	0x20000078
    2f78:	00004339 	.word	0x00004339

00002f7c <FreeRTOS_CLIProcessCommand>:
{
    2f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f7e:	46de      	mov	lr, fp
    2f80:	4657      	mov	r7, sl
    2f82:	464e      	mov	r6, r9
    2f84:	4645      	mov	r5, r8
    2f86:	b5e0      	push	{r5, r6, r7, lr}
    2f88:	b083      	sub	sp, #12
    2f8a:	0006      	movs	r6, r0
    2f8c:	9100      	str	r1, [sp, #0]
    2f8e:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
    2f90:	4b39      	ldr	r3, [pc, #228]	; (3078 <FreeRTOS_CLIProcessCommand+0xfc>)
    2f92:	681b      	ldr	r3, [r3, #0]
    2f94:	2b00      	cmp	r3, #0
    2f96:	d011      	beq.n	2fbc <FreeRTOS_CLIProcessCommand+0x40>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
    2f98:	681b      	ldr	r3, [r3, #0]
    2f9a:	689b      	ldr	r3, [r3, #8]
    2f9c:	0032      	movs	r2, r6
    2f9e:	9901      	ldr	r1, [sp, #4]
    2fa0:	9800      	ldr	r0, [sp, #0]
    2fa2:	4798      	blx	r3
		if( xReturn == pdFALSE )
    2fa4:	2800      	cmp	r0, #0
    2fa6:	d102      	bne.n	2fae <FreeRTOS_CLIProcessCommand+0x32>
			pxCommand = NULL;
    2fa8:	2200      	movs	r2, #0
    2faa:	4b33      	ldr	r3, [pc, #204]	; (3078 <FreeRTOS_CLIProcessCommand+0xfc>)
    2fac:	601a      	str	r2, [r3, #0]
}
    2fae:	b003      	add	sp, #12
    2fb0:	bc3c      	pop	{r2, r3, r4, r5}
    2fb2:	4690      	mov	r8, r2
    2fb4:	4699      	mov	r9, r3
    2fb6:	46a2      	mov	sl, r4
    2fb8:	46ab      	mov	fp, r5
    2fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    2fbc:	4c2f      	ldr	r4, [pc, #188]	; (307c <FreeRTOS_CLIProcessCommand+0x100>)
    2fbe:	4b2e      	ldr	r3, [pc, #184]	; (3078 <FreeRTOS_CLIProcessCommand+0xfc>)
    2fc0:	601c      	str	r4, [r3, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    2fc2:	4b2f      	ldr	r3, [pc, #188]	; (3080 <FreeRTOS_CLIProcessCommand+0x104>)
    2fc4:	4699      	mov	r9, r3
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    2fc6:	2320      	movs	r3, #32
    2fc8:	4698      	mov	r8, r3
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    2fca:	4b2e      	ldr	r3, [pc, #184]	; (3084 <FreeRTOS_CLIProcessCommand+0x108>)
    2fcc:	469b      	mov	fp, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    2fce:	4b2a      	ldr	r3, [pc, #168]	; (3078 <FreeRTOS_CLIProcessCommand+0xfc>)
    2fd0:	469a      	mov	sl, r3
    2fd2:	e00a      	b.n	2fea <FreeRTOS_CLIProcessCommand+0x6e>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    2fd4:	0002      	movs	r2, r0
    2fd6:	0029      	movs	r1, r5
    2fd8:	0030      	movs	r0, r6
    2fda:	47d8      	blx	fp
    2fdc:	2800      	cmp	r0, #0
    2fde:	d00d      	beq.n	2ffc <FreeRTOS_CLIProcessCommand+0x80>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    2fe0:	6864      	ldr	r4, [r4, #4]
    2fe2:	4653      	mov	r3, sl
    2fe4:	601c      	str	r4, [r3, #0]
    2fe6:	2c00      	cmp	r4, #0
    2fe8:	d03e      	beq.n	3068 <FreeRTOS_CLIProcessCommand+0xec>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
    2fea:	6827      	ldr	r7, [r4, #0]
    2fec:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    2fee:	0028      	movs	r0, r5
    2ff0:	47c8      	blx	r9
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    2ff2:	5c33      	ldrb	r3, [r6, r0]
    2ff4:	4642      	mov	r2, r8
    2ff6:	4393      	bics	r3, r2
    2ff8:	d1f2      	bne.n	2fe0 <FreeRTOS_CLIProcessCommand+0x64>
    2ffa:	e7eb      	b.n	2fd4 <FreeRTOS_CLIProcessCommand+0x58>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
    2ffc:	7b3f      	ldrb	r7, [r7, #12]
    2ffe:	b27f      	sxtb	r7, r7
    3000:	2f00      	cmp	r7, #0
    3002:	db2d      	blt.n	3060 <FreeRTOS_CLIProcessCommand+0xe4>
{
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
    3004:	7833      	ldrb	r3, [r6, #0]
    3006:	2b00      	cmp	r3, #0
    3008:	d028      	beq.n	305c <FreeRTOS_CLIProcessCommand+0xe0>
    300a:	0032      	movs	r2, r6
    300c:	2500      	movs	r5, #0
    300e:	2100      	movs	r1, #0
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
    3010:	2401      	movs	r4, #1
    3012:	e008      	b.n	3026 <FreeRTOS_CLIProcessCommand+0xaa>
    3014:	2901      	cmp	r1, #1
    3016:	d00a      	beq.n	302e <FreeRTOS_CLIProcessCommand+0xb2>
			{
				cParameters++;
    3018:	3501      	adds	r5, #1
    301a:	b26d      	sxtb	r5, r5
				xLastCharacterWasSpace = pdTRUE;
    301c:	0021      	movs	r1, r4
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
    301e:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
    3020:	7813      	ldrb	r3, [r2, #0]
    3022:	2b00      	cmp	r3, #0
    3024:	d005      	beq.n	3032 <FreeRTOS_CLIProcessCommand+0xb6>
		if( ( *pcCommandString ) == ' ' )
    3026:	2b20      	cmp	r3, #32
    3028:	d0f4      	beq.n	3014 <FreeRTOS_CLIProcessCommand+0x98>
			xLastCharacterWasSpace = pdFALSE;
    302a:	0001      	movs	r1, r0
    302c:	e7f7      	b.n	301e <FreeRTOS_CLIProcessCommand+0xa2>
			if( xLastCharacterWasSpace != pdTRUE )
    302e:	0021      	movs	r1, r4
    3030:	e7f5      	b.n	301e <FreeRTOS_CLIProcessCommand+0xa2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
    3032:	2901      	cmp	r1, #1
    3034:	d00f      	beq.n	3056 <FreeRTOS_CLIProcessCommand+0xda>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    3036:	4b10      	ldr	r3, [pc, #64]	; (3078 <FreeRTOS_CLIProcessCommand+0xfc>)
    3038:	681b      	ldr	r3, [r3, #0]
    303a:	2b00      	cmp	r3, #0
    303c:	d014      	beq.n	3068 <FreeRTOS_CLIProcessCommand+0xec>
    303e:	42af      	cmp	r7, r5
    3040:	d0aa      	beq.n	2f98 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    3042:	9a01      	ldr	r2, [sp, #4]
    3044:	4910      	ldr	r1, [pc, #64]	; (3088 <FreeRTOS_CLIProcessCommand+0x10c>)
    3046:	9800      	ldr	r0, [sp, #0]
    3048:	4b10      	ldr	r3, [pc, #64]	; (308c <FreeRTOS_CLIProcessCommand+0x110>)
    304a:	4798      	blx	r3
		pxCommand = NULL;
    304c:	2200      	movs	r2, #0
    304e:	4b0a      	ldr	r3, [pc, #40]	; (3078 <FreeRTOS_CLIProcessCommand+0xfc>)
    3050:	601a      	str	r2, [r3, #0]
    3052:	2000      	movs	r0, #0
    3054:	e7ab      	b.n	2fae <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
    3056:	3d01      	subs	r5, #1
    3058:	b26d      	sxtb	r5, r5
    305a:	e7ec      	b.n	3036 <FreeRTOS_CLIProcessCommand+0xba>
	while( *pcCommandString != 0x00 )
    305c:	2500      	movs	r5, #0
    305e:	e7ea      	b.n	3036 <FreeRTOS_CLIProcessCommand+0xba>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    3060:	4b05      	ldr	r3, [pc, #20]	; (3078 <FreeRTOS_CLIProcessCommand+0xfc>)
    3062:	681b      	ldr	r3, [r3, #0]
    3064:	2b00      	cmp	r3, #0
    3066:	d197      	bne.n	2f98 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    3068:	9a01      	ldr	r2, [sp, #4]
    306a:	4909      	ldr	r1, [pc, #36]	; (3090 <FreeRTOS_CLIProcessCommand+0x114>)
    306c:	9800      	ldr	r0, [sp, #0]
    306e:	4b07      	ldr	r3, [pc, #28]	; (308c <FreeRTOS_CLIProcessCommand+0x110>)
    3070:	4798      	blx	r3
		xReturn = pdFALSE;
    3072:	2000      	movs	r0, #0
	return xReturn;
    3074:	e79b      	b.n	2fae <FreeRTOS_CLIProcessCommand+0x32>
    3076:	46c0      	nop			; (mov r8, r8)
    3078:	20000390 	.word	0x20000390
    307c:	2000007c 	.word	0x2000007c
    3080:	000093a1 	.word	0x000093a1
    3084:	000093af 	.word	0x000093af
    3088:	0000dc20 	.word	0x0000dc20
    308c:	000093d1 	.word	0x000093d1
    3090:	0000dc78 	.word	0x0000dc78

00003094 <prvTraceGetQueueType>:
	return (uint32_t)uxQueueGetQueueNumber(handle);
}
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
    3094:	b510      	push	{r4, lr}
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
    3096:	4b01      	ldr	r3, [pc, #4]	; (309c <prvTraceGetQueueType+0x8>)
    3098:	4798      	blx	r3
}
    309a:	bd10      	pop	{r4, pc}
    309c:	000055d5 	.word	0x000055d5

000030a0 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
    30a0:	b510      	push	{r4, lr}
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
    30a2:	4b02      	ldr	r3, [pc, #8]	; (30ac <prvTraceGetTaskNumberLow16+0xc>)
    30a4:	4798      	blx	r3
    30a6:	b280      	uxth	r0, r0
}
    30a8:	bd10      	pop	{r4, pc}
    30aa:	46c0      	nop			; (mov r8, r8)
    30ac:	00006225 	.word	0x00006225

000030b0 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
    30b0:	b510      	push	{r4, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
    30b2:	4b02      	ldr	r3, [pc, #8]	; (30bc <prvTraceGetTaskNumberHigh16+0xc>)
    30b4:	4798      	blx	r3
    30b6:	0c00      	lsrs	r0, r0, #16
}
    30b8:	bd10      	pop	{r4, pc}
    30ba:	46c0      	nop			; (mov r8, r8)
    30bc:	00006225 	.word	0x00006225

000030c0 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
    30c0:	b570      	push	{r4, r5, r6, lr}
    30c2:	0004      	movs	r4, r0
    30c4:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
    30c6:	4b04      	ldr	r3, [pc, #16]	; (30d8 <prvTraceSetTaskNumberLow16+0x18>)
    30c8:	4798      	blx	r3
    30ca:	0c01      	lsrs	r1, r0, #16
    30cc:	0409      	lsls	r1, r1, #16
    30ce:	4329      	orrs	r1, r5
    30d0:	0020      	movs	r0, r4
    30d2:	4b02      	ldr	r3, [pc, #8]	; (30dc <prvTraceSetTaskNumberLow16+0x1c>)
    30d4:	4798      	blx	r3
}
    30d6:	bd70      	pop	{r4, r5, r6, pc}
    30d8:	00006225 	.word	0x00006225
    30dc:	00006231 	.word	0x00006231

000030e0 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
    30e0:	b570      	push	{r4, r5, r6, lr}
    30e2:	0004      	movs	r4, r0
    30e4:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
    30e6:	4b05      	ldr	r3, [pc, #20]	; (30fc <prvTraceSetTaskNumberHigh16+0x1c>)
    30e8:	4798      	blx	r3
    30ea:	0401      	lsls	r1, r0, #16
    30ec:	0c09      	lsrs	r1, r1, #16
    30ee:	042d      	lsls	r5, r5, #16
    30f0:	4329      	orrs	r1, r5
    30f2:	0020      	movs	r0, r4
    30f4:	4b02      	ldr	r3, [pc, #8]	; (3100 <prvTraceSetTaskNumberHigh16+0x20>)
    30f6:	4798      	blx	r3
}
    30f8:	bd70      	pop	{r4, r5, r6, pc}
    30fa:	46c0      	nop			; (mov r8, r8)
    30fc:	00006225 	.word	0x00006225
    3100:	00006231 	.word	0x00006231

00003104 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
    3104:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
    3106:	4b02      	ldr	r3, [pc, #8]	; (3110 <prvTraceGetQueueNumberLow16+0xc>)
    3108:	4798      	blx	r3
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
    310a:	b280      	uxth	r0, r0
}
    310c:	bd10      	pop	{r4, pc}
    310e:	46c0      	nop			; (mov r8, r8)
    3110:	000055cd 	.word	0x000055cd

00003114 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
    3114:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
    3116:	4b02      	ldr	r3, [pc, #8]	; (3120 <prvTraceGetQueueNumberHigh16+0xc>)
    3118:	4798      	blx	r3
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
    311a:	0c00      	lsrs	r0, r0, #16
}
    311c:	bd10      	pop	{r4, pc}
    311e:	46c0      	nop			; (mov r8, r8)
    3120:	000055cd 	.word	0x000055cd

00003124 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
    3124:	b570      	push	{r4, r5, r6, lr}
    3126:	0004      	movs	r4, r0
    3128:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
    312a:	4b04      	ldr	r3, [pc, #16]	; (313c <prvTraceSetQueueNumberLow16+0x18>)
    312c:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
    312e:	0c01      	lsrs	r1, r0, #16
    3130:	0409      	lsls	r1, r1, #16
    3132:	4329      	orrs	r1, r5
    3134:	0020      	movs	r0, r4
    3136:	4b02      	ldr	r3, [pc, #8]	; (3140 <prvTraceSetQueueNumberLow16+0x1c>)
    3138:	4798      	blx	r3
}
    313a:	bd70      	pop	{r4, r5, r6, pc}
    313c:	000055cd 	.word	0x000055cd
    3140:	000055d1 	.word	0x000055d1

00003144 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
    3144:	b570      	push	{r4, r5, r6, lr}
    3146:	0004      	movs	r4, r0
    3148:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
    314a:	4b05      	ldr	r3, [pc, #20]	; (3160 <prvTraceSetQueueNumberHigh16+0x1c>)
    314c:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
    314e:	0401      	lsls	r1, r0, #16
    3150:	0c09      	lsrs	r1, r1, #16
    3152:	042d      	lsls	r5, r5, #16
    3154:	4329      	orrs	r1, r5
    3156:	0020      	movs	r0, r4
    3158:	4b02      	ldr	r3, [pc, #8]	; (3164 <prvTraceSetQueueNumberHigh16+0x20>)
    315a:	4798      	blx	r3
}
    315c:	bd70      	pop	{r4, r5, r6, pc}
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	000055cd 	.word	0x000055cd
    3164:	000055d1 	.word	0x000055d1

00003168 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
    3168:	b510      	push	{r4, lr}
	return xTaskGetCurrentTaskHandle();
    316a:	4b01      	ldr	r3, [pc, #4]	; (3170 <prvTraceGetCurrentTaskHandle+0x8>)
    316c:	4798      	blx	r3
}
    316e:	bd10      	pop	{r4, pc}
    3170:	00006239 	.word	0x00006239

00003174 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
    3174:	b510      	push	{r4, lr}
    3176:	0004      	movs	r4, r0
	prvTraceInitTraceData();
    3178:	4b09      	ldr	r3, [pc, #36]	; (31a0 <vTraceEnable+0x2c>)
    317a:	4798      	blx	r3

	if (startOption == TRC_START)
    317c:	2c01      	cmp	r4, #1
    317e:	d004      	beq.n	318a <vTraceEnable+0x16>
	{
		vTraceStart();
	}
	else if (startOption == TRC_START_AWAIT_HOST)
    3180:	2c02      	cmp	r4, #2
    3182:	d005      	beq.n	3190 <vTraceEnable+0x1c>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
	}
	else if (startOption != TRC_INIT)
    3184:	2c00      	cmp	r4, #0
    3186:	d107      	bne.n	3198 <vTraceEnable+0x24>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
    3188:	bd10      	pop	{r4, pc}
		vTraceStart();
    318a:	4b06      	ldr	r3, [pc, #24]	; (31a4 <vTraceEnable+0x30>)
    318c:	4798      	blx	r3
    318e:	e7fb      	b.n	3188 <vTraceEnable+0x14>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
    3190:	4805      	ldr	r0, [pc, #20]	; (31a8 <vTraceEnable+0x34>)
    3192:	4b06      	ldr	r3, [pc, #24]	; (31ac <vTraceEnable+0x38>)
    3194:	4798      	blx	r3
    3196:	e7f7      	b.n	3188 <vTraceEnable+0x14>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
    3198:	4805      	ldr	r0, [pc, #20]	; (31b0 <vTraceEnable+0x3c>)
    319a:	4b04      	ldr	r3, [pc, #16]	; (31ac <vTraceEnable+0x38>)
    319c:	4798      	blx	r3
}
    319e:	e7f3      	b.n	3188 <vTraceEnable+0x14>
    31a0:	00003399 	.word	0x00003399
    31a4:	00004179 	.word	0x00004179
    31a8:	0000e034 	.word	0x0000e034
    31ac:	00003571 	.word	0x00003571
    31b0:	0000e074 	.word	0x0000e074

000031b4 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
    31b4:	b510      	push	{r4, lr}
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
    31b6:	4b2f      	ldr	r3, [pc, #188]	; (3274 <vTraceInitObjectPropertyTable+0xc0>)
    31b8:	681b      	ldr	r3, [r3, #0]
    31ba:	2209      	movs	r2, #9
    31bc:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
    31be:	3201      	adds	r2, #1
    31c0:	2164      	movs	r1, #100	; 0x64
    31c2:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
    31c4:	3101      	adds	r1, #1
    31c6:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
    31c8:	3101      	adds	r1, #1
    31ca:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
    31cc:	3205      	adds	r2, #5
    31ce:	3101      	adds	r1, #1
    31d0:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
    31d2:	3962      	subs	r1, #98	; 0x62
    31d4:	2068      	movs	r0, #104	; 0x68
    31d6:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
    31d8:	3001      	adds	r0, #1
    31da:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
    31dc:	3001      	adds	r0, #1
    31de:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
    31e0:	3001      	adds	r0, #1
    31e2:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
    31e4:	3001      	adds	r0, #1
    31e6:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
    31e8:	316b      	adds	r1, #107	; 0x6b
    31ea:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
    31ec:	3101      	adds	r1, #1
    31ee:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
    31f0:	3101      	adds	r1, #1
    31f2:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
    31f4:	3101      	adds	r1, #1
    31f6:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
    31f8:	3101      	adds	r1, #1
    31fa:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
    31fc:	3101      	adds	r1, #1
    31fe:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
    3200:	3101      	adds	r1, #1
    3202:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
    3204:	3101      	adds	r1, #1
    3206:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
    3208:	3101      	adds	r1, #1
    320a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
    320c:	3968      	subs	r1, #104	; 0x68
    320e:	326d      	adds	r2, #109	; 0x6d
    3210:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
    3212:	3201      	adds	r2, #1
    3214:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
    3216:	3201      	adds	r2, #1
    3218:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
    321a:	3a6b      	subs	r2, #107	; 0x6b
    321c:	3013      	adds	r0, #19
    321e:	541a      	strb	r2, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
    3220:	2411      	movs	r4, #17
    3222:	3001      	adds	r0, #1
    3224:	541c      	strb	r4, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
    3226:	3001      	adds	r0, #1
    3228:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
    322a:	3172      	adds	r1, #114	; 0x72
    322c:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
    322e:	3101      	adds	r1, #1
    3230:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
    3232:	3101      	adds	r1, #1
    3234:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
    3236:	2100      	movs	r1, #0
    3238:	3275      	adds	r2, #117	; 0x75
    323a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
    323c:	31a0      	adds	r1, #160	; 0xa0
    323e:	3202      	adds	r2, #2
    3240:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
    3242:	31a0      	adds	r1, #160	; 0xa0
    3244:	3202      	adds	r2, #2
    3246:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
    3248:	31a0      	adds	r1, #160	; 0xa0
    324a:	3202      	adds	r2, #2
    324c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
    324e:	490a      	ldr	r1, [pc, #40]	; (3278 <vTraceInitObjectPropertyTable+0xc4>)
    3250:	3202      	adds	r2, #2
    3252:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
    3254:	4909      	ldr	r1, [pc, #36]	; (327c <vTraceInitObjectPropertyTable+0xc8>)
    3256:	3202      	adds	r2, #2
    3258:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
    325a:	4909      	ldr	r1, [pc, #36]	; (3280 <vTraceInitObjectPropertyTable+0xcc>)
    325c:	3202      	adds	r2, #2
    325e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
    3260:	4908      	ldr	r1, [pc, #32]	; (3284 <vTraceInitObjectPropertyTable+0xd0>)
    3262:	3202      	adds	r2, #2
    3264:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
    3266:	315f      	adds	r1, #95	; 0x5f
    3268:	3202      	adds	r2, #2
    326a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
    326c:	4a06      	ldr	r2, [pc, #24]	; (3288 <vTraceInitObjectPropertyTable+0xd4>)
    326e:	661a      	str	r2, [r3, #96]	; 0x60
}
    3270:	bd10      	pop	{r4, pc}
    3272:	46c0      	nop			; (mov r8, r8)
    3274:	20000398 	.word	0x20000398
    3278:	000002fd 	.word	0x000002fd
    327c:	00000352 	.word	0x00000352
    3280:	000003a2 	.word	0x000003a2
    3284:	00000401 	.word	0x00000401
    3288:	000004bf 	.word	0x000004bf

0000328c <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
    328c:	4b17      	ldr	r3, [pc, #92]	; (32ec <vTraceInitObjectHandleStack+0x60>)
    328e:	2200      	movs	r2, #0
    3290:	825a      	strh	r2, [r3, #18]
    3292:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
    3294:	320a      	adds	r2, #10
    3296:	829a      	strh	r2, [r3, #20]
    3298:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
    329a:	320a      	adds	r2, #10
    329c:	82da      	strh	r2, [r3, #22]
    329e:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
    32a0:	320a      	adds	r2, #10
    32a2:	831a      	strh	r2, [r3, #24]
    32a4:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
    32a6:	320f      	adds	r2, #15
    32a8:	835a      	strh	r2, [r3, #26]
    32aa:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
    32ac:	3205      	adds	r2, #5
    32ae:	839a      	strh	r2, [r3, #28]
    32b0:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
    32b2:	3205      	adds	r2, #5
    32b4:	83da      	strh	r2, [r3, #30]
    32b6:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
    32b8:	3205      	adds	r2, #5
    32ba:	841a      	strh	r2, [r3, #32]
    32bc:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
    32be:	3205      	adds	r2, #5
    32c0:	845a      	strh	r2, [r3, #34]	; 0x22
    32c2:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
    32c4:	3a38      	subs	r2, #56	; 0x38
    32c6:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
    32c8:	320a      	adds	r2, #10
    32ca:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
    32cc:	320a      	adds	r2, #10
    32ce:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
    32d0:	320f      	adds	r2, #15
    32d2:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
    32d4:	3205      	adds	r2, #5
    32d6:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
    32d8:	3205      	adds	r2, #5
    32da:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
    32dc:	3205      	adds	r2, #5
    32de:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
    32e0:	3205      	adds	r2, #5
    32e2:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
    32e4:	3205      	adds	r2, #5
    32e6:	869a      	strh	r2, [r3, #52]	; 0x34
}
    32e8:	4770      	bx	lr
    32ea:	46c0      	nop			; (mov r8, r8)
    32ec:	200003b4 	.word	0x200003b4

000032f0 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
	switch(objectclass)
    32f0:	2808      	cmp	r0, #8
    32f2:	d813      	bhi.n	331c <pszTraceGetErrorNotEnoughHandles+0x2c>
    32f4:	0080      	lsls	r0, r0, #2
    32f6:	4b0b      	ldr	r3, [pc, #44]	; (3324 <pszTraceGetErrorNotEnoughHandles+0x34>)
    32f8:	581b      	ldr	r3, [r3, r0]
    32fa:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
    32fc:	480a      	ldr	r0, [pc, #40]	; (3328 <pszTraceGetErrorNotEnoughHandles+0x38>)
    32fe:	e010      	b.n	3322 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
    3300:	480a      	ldr	r0, [pc, #40]	; (332c <pszTraceGetErrorNotEnoughHandles+0x3c>)
    3302:	e00e      	b.n	3322 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
    3304:	480a      	ldr	r0, [pc, #40]	; (3330 <pszTraceGetErrorNotEnoughHandles+0x40>)
    3306:	e00c      	b.n	3322 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
    3308:	480a      	ldr	r0, [pc, #40]	; (3334 <pszTraceGetErrorNotEnoughHandles+0x44>)
    330a:	e00a      	b.n	3322 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
    330c:	480a      	ldr	r0, [pc, #40]	; (3338 <pszTraceGetErrorNotEnoughHandles+0x48>)
    330e:	e008      	b.n	3322 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
    3310:	480a      	ldr	r0, [pc, #40]	; (333c <pszTraceGetErrorNotEnoughHandles+0x4c>)
    3312:	e006      	b.n	3322 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
    3314:	480a      	ldr	r0, [pc, #40]	; (3340 <pszTraceGetErrorNotEnoughHandles+0x50>)
    3316:	e004      	b.n	3322 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
    3318:	480a      	ldr	r0, [pc, #40]	; (3344 <pszTraceGetErrorNotEnoughHandles+0x54>)
    331a:	e002      	b.n	3322 <pszTraceGetErrorNotEnoughHandles+0x32>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
    331c:	480a      	ldr	r0, [pc, #40]	; (3348 <pszTraceGetErrorNotEnoughHandles+0x58>)
    331e:	e000      	b.n	3322 <pszTraceGetErrorNotEnoughHandles+0x32>
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
    3320:	480a      	ldr	r0, [pc, #40]	; (334c <pszTraceGetErrorNotEnoughHandles+0x5c>)
	}
}
    3322:	4770      	bx	lr
    3324:	0000dd10 	.word	0x0000dd10
    3328:	0000dd7c 	.word	0x0000dd7c
    332c:	0000ddc4 	.word	0x0000ddc4
    3330:	0000de18 	.word	0x0000de18
    3334:	0000de64 	.word	0x0000de64
    3338:	0000deb0 	.word	0x0000deb0
    333c:	0000defc 	.word	0x0000defc
    3340:	0000df50 	.word	0x0000df50
    3344:	0000dfa8 	.word	0x0000dfa8
    3348:	0000e004 	.word	0x0000e004
    334c:	0000dd34 	.word	0x0000dd34

00003350 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
    3350:	b510      	push	{r4, lr}
	uint32_t i;
	for (i = 0; i < maxLength; i++)
    3352:	2a00      	cmp	r2, #0
    3354:	d00d      	beq.n	3372 <prvStrncpy+0x22>
	{
		dst[i] = src[i];
    3356:	780b      	ldrb	r3, [r1, #0]
    3358:	7003      	strb	r3, [r0, #0]
		if (src[i] == 0)
    335a:	780b      	ldrb	r3, [r1, #0]
    335c:	2b00      	cmp	r3, #0
    335e:	d008      	beq.n	3372 <prvStrncpy+0x22>
    3360:	2300      	movs	r3, #0
	for (i = 0; i < maxLength; i++)
    3362:	3301      	adds	r3, #1
    3364:	429a      	cmp	r2, r3
    3366:	d004      	beq.n	3372 <prvStrncpy+0x22>
		dst[i] = src[i];
    3368:	5ccc      	ldrb	r4, [r1, r3]
    336a:	54c4      	strb	r4, [r0, r3]
		if (src[i] == 0)
    336c:	5ccc      	ldrb	r4, [r1, r3]
    336e:	2c00      	cmp	r4, #0
    3370:	d1f7      	bne.n	3362 <prvStrncpy+0x12>
			break;
	}
}
    3372:	bd10      	pop	{r4, pc}

00003374 <vTraceStop>:
{
    3374:	b510      	push	{r4, lr}
	if (RecorderDataPtr != NULL)
    3376:	4b06      	ldr	r3, [pc, #24]	; (3390 <vTraceStop+0x1c>)
    3378:	681b      	ldr	r3, [r3, #0]
    337a:	2b00      	cmp	r3, #0
    337c:	d001      	beq.n	3382 <vTraceStop+0xe>
		RecorderDataPtr->recorderActive = 0;
    337e:	2200      	movs	r2, #0
    3380:	631a      	str	r2, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
    3382:	4b04      	ldr	r3, [pc, #16]	; (3394 <vTraceStop+0x20>)
    3384:	681b      	ldr	r3, [r3, #0]
    3386:	2b00      	cmp	r3, #0
    3388:	d000      	beq.n	338c <vTraceStop+0x18>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
    338a:	4798      	blx	r3
}
    338c:	bd10      	pop	{r4, pc}
    338e:	46c0      	nop			; (mov r8, r8)
    3390:	20000398 	.word	0x20000398
    3394:	20000460 	.word	0x20000460

00003398 <prvTraceInitTraceData>:
{	
    3398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    339a:	46de      	mov	lr, fp
    339c:	4657      	mov	r7, sl
    339e:	464e      	mov	r6, r9
    33a0:	4645      	mov	r5, r8
    33a2:	b5e0      	push	{r5, r6, r7, lr}
	if (RecorderDataPtr == NULL)
    33a4:	4b51      	ldr	r3, [pc, #324]	; (34ec <prvTraceInitTraceData+0x154>)
    33a6:	681b      	ldr	r3, [r3, #0]
    33a8:	2b00      	cmp	r3, #0
    33aa:	d100      	bne.n	33ae <prvTraceInitTraceData+0x16>
    33ac:	e099      	b.n	34e2 <prvTraceInitTraceData+0x14a>
		if (RecorderDataPtr->startmarker0 == 1)
    33ae:	781b      	ldrb	r3, [r3, #0]
    33b0:	2b01      	cmp	r3, #1
    33b2:	d100      	bne.n	33b6 <prvTraceInitTraceData+0x1e>
    33b4:	e08f      	b.n	34d6 <prvTraceInitTraceData+0x13e>
	init_hwtc_count = TRC_HWTC_COUNT;
    33b6:	4b4e      	ldr	r3, [pc, #312]	; (34f0 <prvTraceInitTraceData+0x158>)
    33b8:	681a      	ldr	r2, [r3, #0]
    33ba:	4b4e      	ldr	r3, [pc, #312]	; (34f4 <prvTraceInitTraceData+0x15c>)
    33bc:	601a      	str	r2, [r3, #0]
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
    33be:	4c4b      	ldr	r4, [pc, #300]	; (34ec <prvTraceInitTraceData+0x154>)
    33c0:	4d4d      	ldr	r5, [pc, #308]	; (34f8 <prvTraceInitTraceData+0x160>)
    33c2:	002a      	movs	r2, r5
    33c4:	2100      	movs	r1, #0
    33c6:	6820      	ldr	r0, [r4, #0]
    33c8:	4b4c      	ldr	r3, [pc, #304]	; (34fc <prvTraceInitTraceData+0x164>)
    33ca:	4798      	blx	r3
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
    33cc:	6823      	ldr	r3, [r4, #0]
    33ce:	4a4c      	ldr	r2, [pc, #304]	; (3500 <prvTraceInitTraceData+0x168>)
    33d0:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
    33d2:	2205      	movs	r2, #5
    33d4:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
    33d6:	2200      	movs	r2, #0
    33d8:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
    33da:	611d      	str	r5, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
    33dc:	21c8      	movs	r1, #200	; 0xc8
    33de:	0049      	lsls	r1, r1, #1
    33e0:	6199      	str	r1, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
    33e2:	4948      	ldr	r1, [pc, #288]	; (3504 <prvTraceInitTraceData+0x16c>)
    33e4:	6559      	str	r1, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
    33e6:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
    33e8:	635a      	str	r2, [r3, #52]	; 0x34
	vTraceInitObjectPropertyTable();
    33ea:	4b47      	ldr	r3, [pc, #284]	; (3508 <prvTraceInitTraceData+0x170>)
    33ec:	4798      	blx	r3
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
    33ee:	6820      	ldr	r0, [r4, #0]
    33f0:	4a46      	ldr	r2, [pc, #280]	; (350c <prvTraceInitTraceData+0x174>)
    33f2:	4b47      	ldr	r3, [pc, #284]	; (3510 <prvTraceInitTraceData+0x178>)
    33f4:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
    33f6:	22c8      	movs	r2, #200	; 0xc8
    33f8:	0092      	lsls	r2, r2, #2
    33fa:	3304      	adds	r3, #4
    33fc:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
    33fe:	4b45      	ldr	r3, [pc, #276]	; (3514 <prvTraceInitTraceData+0x17c>)
    3400:	2201      	movs	r2, #1
    3402:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
    3404:	4a44      	ldr	r2, [pc, #272]	; (3518 <prvTraceInitTraceData+0x180>)
    3406:	2391      	movs	r3, #145	; 0x91
    3408:	011b      	lsls	r3, r3, #4
    340a:	50c2      	str	r2, [r0, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
    340c:	4b43      	ldr	r3, [pc, #268]	; (351c <prvTraceInitTraceData+0x184>)
    340e:	469c      	mov	ip, r3
    3410:	4460      	add	r0, ip
    3412:	2250      	movs	r2, #80	; 0x50
    3414:	4942      	ldr	r1, [pc, #264]	; (3520 <prvTraceInitTraceData+0x188>)
    3416:	4b43      	ldr	r3, [pc, #268]	; (3524 <prvTraceInitTraceData+0x18c>)
    3418:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
    341a:	6823      	ldr	r3, [r4, #0]
    341c:	4942      	ldr	r1, [pc, #264]	; (3528 <prvTraceInitTraceData+0x190>)
    341e:	4a43      	ldr	r2, [pc, #268]	; (352c <prvTraceInitTraceData+0x194>)
    3420:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
    3422:	210a      	movs	r1, #10
    3424:	4a42      	ldr	r2, [pc, #264]	; (3530 <prvTraceInitTraceData+0x198>)
    3426:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
    3428:	3101      	adds	r1, #1
    342a:	4a42      	ldr	r2, [pc, #264]	; (3534 <prvTraceInitTraceData+0x19c>)
    342c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
    342e:	3101      	adds	r1, #1
    3430:	4a41      	ldr	r2, [pc, #260]	; (3538 <prvTraceInitTraceData+0x1a0>)
    3432:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
    3434:	3101      	adds	r1, #1
    3436:	4a41      	ldr	r2, [pc, #260]	; (353c <prvTraceInitTraceData+0x1a4>)
    3438:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
    343a:	3201      	adds	r2, #1
    343c:	3164      	adds	r1, #100	; 0x64
    343e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
    3440:	2572      	movs	r5, #114	; 0x72
    3442:	4a3f      	ldr	r2, [pc, #252]	; (3540 <prvTraceInitTraceData+0x1a8>)
    3444:	549d      	strb	r5, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
    3446:	2673      	movs	r6, #115	; 0x73
    3448:	4a3e      	ldr	r2, [pc, #248]	; (3544 <prvTraceInitTraceData+0x1ac>)
    344a:	549e      	strb	r6, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
    344c:	2774      	movs	r7, #116	; 0x74
    344e:	4a3e      	ldr	r2, [pc, #248]	; (3548 <prvTraceInitTraceData+0x1b0>)
    3450:	549f      	strb	r7, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
    3452:	22f1      	movs	r2, #241	; 0xf1
    3454:	4690      	mov	r8, r2
    3456:	4a3d      	ldr	r2, [pc, #244]	; (354c <prvTraceInitTraceData+0x1b4>)
    3458:	4641      	mov	r1, r8
    345a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
    345c:	22f2      	movs	r2, #242	; 0xf2
    345e:	4691      	mov	r9, r2
    3460:	4a3b      	ldr	r2, [pc, #236]	; (3550 <prvTraceInitTraceData+0x1b8>)
    3462:	4649      	mov	r1, r9
    3464:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
    3466:	22f3      	movs	r2, #243	; 0xf3
    3468:	4692      	mov	sl, r2
    346a:	4a3a      	ldr	r2, [pc, #232]	; (3554 <prvTraceInitTraceData+0x1bc>)
    346c:	4651      	mov	r1, sl
    346e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
    3470:	22f4      	movs	r2, #244	; 0xf4
    3472:	4693      	mov	fp, r2
    3474:	4a38      	ldr	r2, [pc, #224]	; (3558 <prvTraceInitTraceData+0x1c0>)
    3476:	4659      	mov	r1, fp
    3478:	5499      	strb	r1, [r3, r2]
	vTraceInitObjectHandleStack();
    347a:	4b38      	ldr	r3, [pc, #224]	; (355c <prvTraceInitTraceData+0x1c4>)
    347c:	4798      	blx	r3
	RecorderDataPtr->startmarker11 = 0xF4;
    347e:	6823      	ldr	r3, [r4, #0]
    3480:	465a      	mov	r2, fp
    3482:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
    3484:	4652      	mov	r2, sl
    3486:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
    3488:	464a      	mov	r2, r9
    348a:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
    348c:	4642      	mov	r2, r8
    348e:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
    3490:	71df      	strb	r7, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
    3492:	719e      	strb	r6, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
    3494:	715d      	strb	r5, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
    3496:	2271      	movs	r2, #113	; 0x71
    3498:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
    349a:	2204      	movs	r2, #4
    349c:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
    349e:	2303      	movs	r3, #3
    34a0:	6822      	ldr	r2, [r4, #0]
    34a2:	7093      	strb	r3, [r2, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
    34a4:	3b01      	subs	r3, #1
    34a6:	6822      	ldr	r2, [r4, #0]
    34a8:	7053      	strb	r3, [r2, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
    34aa:	6823      	ldr	r3, [r4, #0]
    34ac:	2201      	movs	r2, #1
    34ae:	701a      	strb	r2, [r3, #0]
	if (traceErrorMessage != NULL)
    34b0:	4b2b      	ldr	r3, [pc, #172]	; (3560 <prvTraceInitTraceData+0x1c8>)
    34b2:	6819      	ldr	r1, [r3, #0]
    34b4:	2900      	cmp	r1, #0
    34b6:	d00e      	beq.n	34d6 <prvTraceInitTraceData+0x13e>
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    34b8:	4c0c      	ldr	r4, [pc, #48]	; (34ec <prvTraceInitTraceData+0x154>)
    34ba:	6823      	ldr	r3, [r4, #0]
    34bc:	4a17      	ldr	r2, [pc, #92]	; (351c <prvTraceInitTraceData+0x184>)
    34be:	4694      	mov	ip, r2
    34c0:	4463      	add	r3, ip
    34c2:	0018      	movs	r0, r3
    34c4:	2250      	movs	r2, #80	; 0x50
    34c6:	4b17      	ldr	r3, [pc, #92]	; (3524 <prvTraceInitTraceData+0x18c>)
    34c8:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
    34ca:	6822      	ldr	r2, [r4, #0]
    34cc:	2101      	movs	r1, #1
    34ce:	4b25      	ldr	r3, [pc, #148]	; (3564 <prvTraceInitTraceData+0x1cc>)
    34d0:	50d1      	str	r1, [r2, r3]
		vTraceStop();
    34d2:	4b25      	ldr	r3, [pc, #148]	; (3568 <prvTraceInitTraceData+0x1d0>)
    34d4:	4798      	blx	r3
}
    34d6:	bc3c      	pop	{r2, r3, r4, r5}
    34d8:	4690      	mov	r8, r2
    34da:	4699      	mov	r9, r3
    34dc:	46a2      	mov	sl, r4
    34de:	46ab      	mov	fp, r5
    34e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	RecorderDataPtr = &RecorderData;
    34e2:	4a22      	ldr	r2, [pc, #136]	; (356c <prvTraceInitTraceData+0x1d4>)
    34e4:	4b01      	ldr	r3, [pc, #4]	; (34ec <prvTraceInitTraceData+0x154>)
    34e6:	601a      	str	r2, [r3, #0]
    34e8:	e765      	b.n	33b6 <prvTraceInitTraceData+0x1e>
    34ea:	46c0      	nop			; (mov r8, r8)
    34ec:	20000398 	.word	0x20000398
    34f0:	e000e018 	.word	0xe000e018
    34f4:	20004934 	.word	0x20004934
    34f8:	00000fb8 	.word	0x00000fb8
    34fc:	00008857 	.word	0x00008857
    3500:	00001aa1 	.word	0x00001aa1
    3504:	f0f0f0f0 	.word	0xf0f0f0f0
    3508:	000031b5 	.word	0x000031b5
    350c:	f1f1f1f1 	.word	0xf1f1f1f1
    3510:	0000055c 	.word	0x0000055c
    3514:	00000564 	.word	0x00000564
    3518:	f2f2f2f2 	.word	0xf2f2f2f2
    351c:	00000914 	.word	0x00000914
    3520:	0000e274 	.word	0x0000e274
    3524:	00003351 	.word	0x00003351
    3528:	f3f3f3f3 	.word	0xf3f3f3f3
    352c:	00000964 	.word	0x00000964
    3530:	00000fac 	.word	0x00000fac
    3534:	00000fad 	.word	0x00000fad
    3538:	00000fae 	.word	0x00000fae
    353c:	00000faf 	.word	0x00000faf
    3540:	00000fb1 	.word	0x00000fb1
    3544:	00000fb2 	.word	0x00000fb2
    3548:	00000fb3 	.word	0x00000fb3
    354c:	00000fb4 	.word	0x00000fb4
    3550:	00000fb5 	.word	0x00000fb5
    3554:	00000fb6 	.word	0x00000fb6
    3558:	00000fb7 	.word	0x00000fb7
    355c:	0000328d 	.word	0x0000328d
    3560:	20000450 	.word	0x20000450
    3564:	0000090c 	.word	0x0000090c
    3568:	00003375 	.word	0x00003375
    356c:	2000397c 	.word	0x2000397c

00003570 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
    3570:	b510      	push	{r4, lr}
    3572:	0004      	movs	r4, r0
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
    3574:	4b0e      	ldr	r3, [pc, #56]	; (35b0 <prvTraceError+0x40>)
    3576:	681b      	ldr	r3, [r3, #0]
    3578:	2b00      	cmp	r3, #0
    357a:	d001      	beq.n	3580 <prvTraceError+0x10>
	{
		vTraceStop();
    357c:	4b0d      	ldr	r3, [pc, #52]	; (35b4 <prvTraceError+0x44>)
    357e:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
    3580:	4b0d      	ldr	r3, [pc, #52]	; (35b8 <prvTraceError+0x48>)
    3582:	681b      	ldr	r3, [r3, #0]
    3584:	2b00      	cmp	r3, #0
    3586:	d000      	beq.n	358a <prvTraceError+0x1a>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
			RecorderDataPtr->internalErrorOccured = 1;
		}
	}
}
    3588:	bd10      	pop	{r4, pc}
		traceErrorMessage = (char*)(intptr_t) msg;
    358a:	4b0b      	ldr	r3, [pc, #44]	; (35b8 <prvTraceError+0x48>)
    358c:	601c      	str	r4, [r3, #0]
		if (RecorderDataPtr != NULL)
    358e:	4b08      	ldr	r3, [pc, #32]	; (35b0 <prvTraceError+0x40>)
    3590:	6818      	ldr	r0, [r3, #0]
    3592:	2800      	cmp	r0, #0
    3594:	d0f8      	beq.n	3588 <prvTraceError+0x18>
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    3596:	4b09      	ldr	r3, [pc, #36]	; (35bc <prvTraceError+0x4c>)
    3598:	469c      	mov	ip, r3
    359a:	4460      	add	r0, ip
    359c:	2250      	movs	r2, #80	; 0x50
    359e:	0021      	movs	r1, r4
    35a0:	4b07      	ldr	r3, [pc, #28]	; (35c0 <prvTraceError+0x50>)
    35a2:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
    35a4:	4b02      	ldr	r3, [pc, #8]	; (35b0 <prvTraceError+0x40>)
    35a6:	681a      	ldr	r2, [r3, #0]
    35a8:	2101      	movs	r1, #1
    35aa:	4b06      	ldr	r3, [pc, #24]	; (35c4 <prvTraceError+0x54>)
    35ac:	50d1      	str	r1, [r2, r3]
}
    35ae:	e7eb      	b.n	3588 <prvTraceError+0x18>
    35b0:	20000398 	.word	0x20000398
    35b4:	00003375 	.word	0x00003375
    35b8:	20000450 	.word	0x20000450
    35bc:	00000914 	.word	0x00000914
    35c0:	00003351 	.word	0x00003351
    35c4:	0000090c 	.word	0x0000090c

000035c8 <prvTraceNextFreeEventBufferSlot>:
{
    35c8:	b510      	push	{r4, lr}
	if (! RecorderDataPtr->recorderActive)
    35ca:	4b0b      	ldr	r3, [pc, #44]	; (35f8 <prvTraceNextFreeEventBufferSlot+0x30>)
    35cc:	6818      	ldr	r0, [r3, #0]
    35ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
    35d0:	2b00      	cmp	r3, #0
    35d2:	d00f      	beq.n	35f4 <prvTraceNextFreeEventBufferSlot+0x2c>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    35d4:	69c3      	ldr	r3, [r0, #28]
    35d6:	2290      	movs	r2, #144	; 0x90
    35d8:	32ff      	adds	r2, #255	; 0xff
    35da:	4293      	cmp	r3, r2
    35dc:	d805      	bhi.n	35ea <prvTraceNextFreeEventBufferSlot+0x22>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
    35de:	009b      	lsls	r3, r3, #2
    35e0:	4a06      	ldr	r2, [pc, #24]	; (35fc <prvTraceNextFreeEventBufferSlot+0x34>)
    35e2:	4694      	mov	ip, r2
    35e4:	4463      	add	r3, ip
    35e6:	18c0      	adds	r0, r0, r3
}
    35e8:	bd10      	pop	{r4, pc}
		prvTraceError("Attempt to index outside event buffer!");
    35ea:	4805      	ldr	r0, [pc, #20]	; (3600 <prvTraceNextFreeEventBufferSlot+0x38>)
    35ec:	4b05      	ldr	r3, [pc, #20]	; (3604 <prvTraceNextFreeEventBufferSlot+0x3c>)
    35ee:	4798      	blx	r3
		return NULL;
    35f0:	2000      	movs	r0, #0
    35f2:	e7f9      	b.n	35e8 <prvTraceNextFreeEventBufferSlot+0x20>
		return NULL;
    35f4:	2000      	movs	r0, #0
    35f6:	e7f7      	b.n	35e8 <prvTraceNextFreeEventBufferSlot+0x20>
    35f8:	20000398 	.word	0x20000398
    35fc:	00000968 	.word	0x00000968
    3600:	0000e288 	.word	0x0000e288
    3604:	00003571 	.word	0x00003571

00003608 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
    3608:	b5f0      	push	{r4, r5, r6, r7, lr}
    360a:	46c6      	mov	lr, r8
    360c:	b500      	push	{lr}
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    360e:	2800      	cmp	r0, #0
    3610:	d006      	beq.n	3620 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x18>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
    3612:	0007      	movs	r7, r0
    3614:	2500      	movs	r5, #0
    3616:	2800      	cmp	r0, #0
    3618:	d005      	beq.n	3626 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
    361a:	4b23      	ldr	r3, [pc, #140]	; (36a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa0>)
    361c:	4698      	mov	r8, r3
    361e:	e00a      	b.n	3636 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x2e>
	TRACE_ASSERT(nofEntriesToCheck != 0, 
    3620:	4822      	ldr	r0, [pc, #136]	; (36ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa4>)
    3622:	4b23      	ldr	r3, [pc, #140]	; (36b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa8>)
    3624:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
    3626:	bc04      	pop	{r2}
    3628:	4690      	mov	r8, r2
    362a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
    362c:	2a01      	cmp	r2, #1
    362e:	d020      	beq.n	3672 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x6a>
		i++;
    3630:	3501      	adds	r5, #1
	while (i < nofEntriesToCheck)
    3632:	42bd      	cmp	r5, r7
    3634:	d2f7      	bcs.n	3626 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
		e = RecorderDataPtr->nextFreeIndex + i;
    3636:	4643      	mov	r3, r8
    3638:	681c      	ldr	r4, [r3, #0]
    363a:	69e3      	ldr	r3, [r4, #28]
    363c:	18eb      	adds	r3, r5, r3
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    363e:	009e      	lsls	r6, r3, #2
    3640:	19a2      	adds	r2, r4, r6
    3642:	491c      	ldr	r1, [pc, #112]	; (36b4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    3644:	468c      	mov	ip, r1
    3646:	4462      	add	r2, ip
    3648:	7812      	ldrb	r2, [r2, #0]
    364a:	0011      	movs	r1, r2
    364c:	3167      	adds	r1, #103	; 0x67
    364e:	b2c9      	uxtb	r1, r1
    3650:	290e      	cmp	r1, #14
    3652:	d8eb      	bhi.n	362c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x24>
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
    3654:	3268      	adds	r2, #104	; 0x68
    3656:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
    3658:	18d3      	adds	r3, r2, r3
    365a:	69a1      	ldr	r1, [r4, #24]
    365c:	428b      	cmp	r3, r1
    365e:	d2e7      	bcs.n	3630 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
    3660:	3201      	adds	r2, #1
    3662:	0092      	lsls	r2, r2, #2
    3664:	4663      	mov	r3, ip
    3666:	18f0      	adds	r0, r6, r3
    3668:	1820      	adds	r0, r4, r0
    366a:	2100      	movs	r1, #0
    366c:	4b12      	ldr	r3, [pc, #72]	; (36b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    366e:	4798      	blx	r3
    3670:	e7de      	b.n	3630 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
			if ((e + 1) < RecorderDataPtr->maxEvents)
    3672:	3301      	adds	r3, #1
    3674:	69a2      	ldr	r2, [r4, #24]
    3676:	4293      	cmp	r3, r2
    3678:	d207      	bcs.n	368a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x82>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
    367a:	4b0e      	ldr	r3, [pc, #56]	; (36b4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    367c:	18f0      	adds	r0, r6, r3
    367e:	1820      	adds	r0, r4, r0
    3680:	2208      	movs	r2, #8
    3682:	2100      	movs	r1, #0
    3684:	4b0c      	ldr	r3, [pc, #48]	; (36b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    3686:	4798      	blx	r3
    3688:	e7d2      	b.n	3630 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
    368a:	4b0a      	ldr	r3, [pc, #40]	; (36b4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    368c:	18e0      	adds	r0, r4, r3
    368e:	2204      	movs	r2, #4
    3690:	2100      	movs	r1, #0
    3692:	4b09      	ldr	r3, [pc, #36]	; (36b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    3694:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
    3696:	4b07      	ldr	r3, [pc, #28]	; (36b4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    3698:	18f0      	adds	r0, r6, r3
    369a:	1820      	adds	r0, r4, r0
    369c:	2204      	movs	r2, #4
    369e:	2100      	movs	r1, #0
    36a0:	4b05      	ldr	r3, [pc, #20]	; (36b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    36a2:	4798      	blx	r3
    36a4:	e7c4      	b.n	3630 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
    36a6:	46c0      	nop			; (mov r8, r8)
    36a8:	20000398 	.word	0x20000398
    36ac:	0000e0a8 	.word	0x0000e0a8
    36b0:	00003571 	.word	0x00003571
    36b4:	00000968 	.word	0x00000968
    36b8:	00008857 	.word	0x00008857

000036bc <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
    36bc:	b510      	push	{r4, lr}
	if (RecorderDataPtr->recorderActive == 0)
    36be:	4b0b      	ldr	r3, [pc, #44]	; (36ec <prvTraceUpdateCounters+0x30>)
    36c0:	681b      	ldr	r3, [r3, #0]
    36c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    36c4:	2a00      	cmp	r2, #0
    36c6:	d010      	beq.n	36ea <prvTraceUpdateCounters+0x2e>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
    36c8:	695a      	ldr	r2, [r3, #20]
    36ca:	3201      	adds	r2, #1
    36cc:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
    36ce:	69da      	ldr	r2, [r3, #28]
    36d0:	3201      	adds	r2, #1
    36d2:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    36d4:	2190      	movs	r1, #144	; 0x90
    36d6:	31ff      	adds	r1, #255	; 0xff
    36d8:	428a      	cmp	r2, r1
    36da:	d903      	bls.n	36e4 <prvTraceUpdateCounters+0x28>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
    36dc:	2201      	movs	r2, #1
    36de:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
    36e0:	2200      	movs	r2, #0
    36e2:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    36e4:	2001      	movs	r0, #1
    36e6:	4b02      	ldr	r3, [pc, #8]	; (36f0 <prvTraceUpdateCounters+0x34>)
    36e8:	4798      	blx	r3
#endif
}
    36ea:	bd10      	pop	{r4, pc}
    36ec:	20000398 	.word	0x20000398
    36f0:	00003609 	.word	0x00003609

000036f4 <prvTraceGetParam>:
{
    36f4:	b570      	push	{r4, r5, r6, lr}
    36f6:	0004      	movs	r4, r0
    36f8:	000d      	movs	r5, r1
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    36fa:	28ff      	cmp	r0, #255	; 0xff
    36fc:	d002      	beq.n	3704 <prvTraceGetParam+0x10>
    36fe:	4b0d      	ldr	r3, [pc, #52]	; (3734 <prvTraceGetParam+0x40>)
    3700:	4298      	cmp	r0, r3
    3702:	d103      	bne.n	370c <prvTraceGetParam+0x18>
	if (param <= param_max)
    3704:	42ac      	cmp	r4, r5
    3706:	d305      	bcc.n	3714 <prvTraceGetParam+0x20>
}
    3708:	0028      	movs	r0, r5
    370a:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    370c:	480a      	ldr	r0, [pc, #40]	; (3738 <prvTraceGetParam+0x44>)
    370e:	4b0b      	ldr	r3, [pc, #44]	; (373c <prvTraceGetParam+0x48>)
    3710:	4798      	blx	r3
    3712:	e7f9      	b.n	3708 <prvTraceGetParam+0x14>
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
    3714:	4b0a      	ldr	r3, [pc, #40]	; (3740 <prvTraceGetParam+0x4c>)
    3716:	4798      	blx	r3
		if (xps != NULL)
    3718:	2800      	cmp	r0, #0
    371a:	d009      	beq.n	3730 <prvTraceGetParam+0x3c>
			xps->type = DIV_XPS;
    371c:	2301      	movs	r3, #1
    371e:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
    3720:	002b      	movs	r3, r5
    3722:	43a3      	bics	r3, r4
    3724:	0a1a      	lsrs	r2, r3, #8
    3726:	7042      	strb	r2, [r0, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
    3728:	0c1b      	lsrs	r3, r3, #16
    372a:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
    372c:	4b05      	ldr	r3, [pc, #20]	; (3744 <prvTraceGetParam+0x50>)
    372e:	4798      	blx	r3
		return param & param_max;
    3730:	4025      	ands	r5, r4
    3732:	e7e9      	b.n	3708 <prvTraceGetParam+0x14>
    3734:	0000ffff 	.word	0x0000ffff
    3738:	0000e1ac 	.word	0x0000e1ac
    373c:	00003571 	.word	0x00003571
    3740:	000035c9 	.word	0x000035c9
    3744:	000036bd 	.word	0x000036bd

00003748 <uiIndexOfObject>:
{
    3748:	b510      	push	{r4, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    374a:	2908      	cmp	r1, #8
    374c:	d814      	bhi.n	3778 <uiIndexOfObject+0x30>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    374e:	2800      	cmp	r0, #0
    3750:	d017      	beq.n	3782 <uiIndexOfObject+0x3a>
    3752:	4b0e      	ldr	r3, [pc, #56]	; (378c <uiIndexOfObject+0x44>)
    3754:	681a      	ldr	r2, [r3, #0]
    3756:	1853      	adds	r3, r2, r1
    3758:	3364      	adds	r3, #100	; 0x64
    375a:	781b      	ldrb	r3, [r3, #0]
    375c:	4283      	cmp	r3, r0
    375e:	d310      	bcc.n	3782 <uiIndexOfObject+0x3a>
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    3760:	1853      	adds	r3, r2, r1
    3762:	337c      	adds	r3, #124	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    3764:	781b      	ldrb	r3, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    3766:	3801      	subs	r0, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    3768:	4358      	muls	r0, r3
    376a:	3140      	adds	r1, #64	; 0x40
    376c:	0049      	lsls	r1, r1, #1
    376e:	1851      	adds	r1, r2, r1
    3770:	890b      	ldrh	r3, [r1, #8]
    3772:	18c0      	adds	r0, r0, r3
    3774:	b280      	uxth	r0, r0
    3776:	e008      	b.n	378a <uiIndexOfObject+0x42>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    3778:	4805      	ldr	r0, [pc, #20]	; (3790 <uiIndexOfObject+0x48>)
    377a:	4b06      	ldr	r3, [pc, #24]	; (3794 <uiIndexOfObject+0x4c>)
    377c:	4798      	blx	r3
    377e:	2000      	movs	r0, #0
    3780:	e003      	b.n	378a <uiIndexOfObject+0x42>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    3782:	4805      	ldr	r0, [pc, #20]	; (3798 <uiIndexOfObject+0x50>)
    3784:	4b03      	ldr	r3, [pc, #12]	; (3794 <uiIndexOfObject+0x4c>)
    3786:	4798      	blx	r3
    3788:	2000      	movs	r0, #0
}
    378a:	bd10      	pop	{r4, pc}
    378c:	20000398 	.word	0x20000398
    3790:	0000e83c 	.word	0x0000e83c
    3794:	00003571 	.word	0x00003571
    3798:	0000e87c 	.word	0x0000e87c

0000379c <prvMarkObjectAsUsed>:
{
    379c:	b510      	push	{r4, lr}
    379e:	000b      	movs	r3, r1
	uint16_t idx = uiIndexOfObject(handle, objectclass);
    37a0:	0001      	movs	r1, r0
    37a2:	0018      	movs	r0, r3
    37a4:	4b04      	ldr	r3, [pc, #16]	; (37b8 <prvMarkObjectAsUsed+0x1c>)
    37a6:	4798      	blx	r3
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
    37a8:	4b04      	ldr	r3, [pc, #16]	; (37bc <prvMarkObjectAsUsed+0x20>)
    37aa:	681b      	ldr	r3, [r3, #0]
    37ac:	1818      	adds	r0, r3, r0
    37ae:	309c      	adds	r0, #156	; 0x9c
    37b0:	2301      	movs	r3, #1
    37b2:	7003      	strb	r3, [r0, #0]
}
    37b4:	bd10      	pop	{r4, pc}
    37b6:	46c0      	nop			; (mov r8, r8)
    37b8:	00003749 	.word	0x00003749
    37bc:	20000398 	.word	0x20000398

000037c0 <prvTraceSetPriorityProperty>:
{
    37c0:	b570      	push	{r4, r5, r6, lr}
    37c2:	0004      	movs	r4, r0
    37c4:	0008      	movs	r0, r1
    37c6:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    37c8:	2c08      	cmp	r4, #8
    37ca:	d813      	bhi.n	37f4 <prvTraceSetPriorityProperty+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    37cc:	4b0d      	ldr	r3, [pc, #52]	; (3804 <prvTraceSetPriorityProperty+0x44>)
    37ce:	681b      	ldr	r3, [r3, #0]
    37d0:	191b      	adds	r3, r3, r4
    37d2:	3364      	adds	r3, #100	; 0x64
    37d4:	781b      	ldrb	r3, [r3, #0]
    37d6:	428b      	cmp	r3, r1
    37d8:	d310      	bcc.n	37fc <prvTraceSetPriorityProperty+0x3c>
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
    37da:	0021      	movs	r1, r4
    37dc:	4b0a      	ldr	r3, [pc, #40]	; (3808 <prvTraceSetPriorityProperty+0x48>)
    37de:	4798      	blx	r3
    37e0:	4b08      	ldr	r3, [pc, #32]	; (3804 <prvTraceSetPriorityProperty+0x44>)
    37e2:	681b      	ldr	r3, [r3, #0]
    37e4:	191c      	adds	r4, r3, r4
    37e6:	3470      	adds	r4, #112	; 0x70
    37e8:	7822      	ldrb	r2, [r4, #0]
    37ea:	181b      	adds	r3, r3, r0
    37ec:	189b      	adds	r3, r3, r2
    37ee:	339d      	adds	r3, #157	; 0x9d
    37f0:	701d      	strb	r5, [r3, #0]
}
    37f2:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    37f4:	4805      	ldr	r0, [pc, #20]	; (380c <prvTraceSetPriorityProperty+0x4c>)
    37f6:	4b06      	ldr	r3, [pc, #24]	; (3810 <prvTraceSetPriorityProperty+0x50>)
    37f8:	4798      	blx	r3
    37fa:	e7fa      	b.n	37f2 <prvTraceSetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    37fc:	4805      	ldr	r0, [pc, #20]	; (3814 <prvTraceSetPriorityProperty+0x54>)
    37fe:	4b04      	ldr	r3, [pc, #16]	; (3810 <prvTraceSetPriorityProperty+0x50>)
    3800:	4798      	blx	r3
    3802:	e7f6      	b.n	37f2 <prvTraceSetPriorityProperty+0x32>
    3804:	20000398 	.word	0x20000398
    3808:	00003749 	.word	0x00003749
    380c:	0000e3c4 	.word	0x0000e3c4
    3810:	00003571 	.word	0x00003571
    3814:	0000e410 	.word	0x0000e410

00003818 <prvTraceGetPriorityProperty>:
{
    3818:	b510      	push	{r4, lr}
    381a:	0004      	movs	r4, r0
    381c:	0008      	movs	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    381e:	2c08      	cmp	r4, #8
    3820:	d813      	bhi.n	384a <prvTraceGetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    3822:	4b0f      	ldr	r3, [pc, #60]	; (3860 <prvTraceGetPriorityProperty+0x48>)
    3824:	681b      	ldr	r3, [r3, #0]
    3826:	191b      	adds	r3, r3, r4
    3828:	3364      	adds	r3, #100	; 0x64
    382a:	781b      	ldrb	r3, [r3, #0]
    382c:	428b      	cmp	r3, r1
    382e:	d311      	bcc.n	3854 <prvTraceGetPriorityProperty+0x3c>
	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
    3830:	0021      	movs	r1, r4
    3832:	4b0c      	ldr	r3, [pc, #48]	; (3864 <prvTraceGetPriorityProperty+0x4c>)
    3834:	4798      	blx	r3
    3836:	4b0a      	ldr	r3, [pc, #40]	; (3860 <prvTraceGetPriorityProperty+0x48>)
    3838:	681b      	ldr	r3, [r3, #0]
    383a:	191c      	adds	r4, r3, r4
    383c:	3470      	adds	r4, #112	; 0x70
    383e:	7822      	ldrb	r2, [r4, #0]
    3840:	181b      	adds	r3, r3, r0
    3842:	189b      	adds	r3, r3, r2
    3844:	339d      	adds	r3, #157	; 0x9d
    3846:	7818      	ldrb	r0, [r3, #0]
}
    3848:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    384a:	4807      	ldr	r0, [pc, #28]	; (3868 <prvTraceGetPriorityProperty+0x50>)
    384c:	4b07      	ldr	r3, [pc, #28]	; (386c <prvTraceGetPriorityProperty+0x54>)
    384e:	4798      	blx	r3
    3850:	2000      	movs	r0, #0
    3852:	e7f9      	b.n	3848 <prvTraceGetPriorityProperty+0x30>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    3854:	4806      	ldr	r0, [pc, #24]	; (3870 <prvTraceGetPriorityProperty+0x58>)
    3856:	4b05      	ldr	r3, [pc, #20]	; (386c <prvTraceGetPriorityProperty+0x54>)
    3858:	4798      	blx	r3
    385a:	2000      	movs	r0, #0
    385c:	e7f4      	b.n	3848 <prvTraceGetPriorityProperty+0x30>
    385e:	46c0      	nop			; (mov r8, r8)
    3860:	20000398 	.word	0x20000398
    3864:	00003749 	.word	0x00003749
    3868:	0000e1e8 	.word	0x0000e1e8
    386c:	00003571 	.word	0x00003571
    3870:	0000e234 	.word	0x0000e234

00003874 <prvTraceSetObjectState>:
{
    3874:	b570      	push	{r4, r5, r6, lr}
    3876:	0004      	movs	r4, r0
    3878:	0008      	movs	r0, r1
    387a:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    387c:	2c08      	cmp	r4, #8
    387e:	d813      	bhi.n	38a8 <prvTraceSetObjectState+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    3880:	4b0d      	ldr	r3, [pc, #52]	; (38b8 <prvTraceSetObjectState+0x44>)
    3882:	681b      	ldr	r3, [r3, #0]
    3884:	191b      	adds	r3, r3, r4
    3886:	3364      	adds	r3, #100	; 0x64
    3888:	781b      	ldrb	r3, [r3, #0]
    388a:	428b      	cmp	r3, r1
    388c:	d310      	bcc.n	38b0 <prvTraceSetObjectState+0x3c>
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
    388e:	0021      	movs	r1, r4
    3890:	4b0a      	ldr	r3, [pc, #40]	; (38bc <prvTraceSetObjectState+0x48>)
    3892:	4798      	blx	r3
    3894:	4b08      	ldr	r3, [pc, #32]	; (38b8 <prvTraceSetObjectState+0x44>)
    3896:	681b      	ldr	r3, [r3, #0]
    3898:	191c      	adds	r4, r3, r4
    389a:	3470      	adds	r4, #112	; 0x70
    389c:	7822      	ldrb	r2, [r4, #0]
    389e:	181b      	adds	r3, r3, r0
    38a0:	189b      	adds	r3, r3, r2
    38a2:	339c      	adds	r3, #156	; 0x9c
    38a4:	701d      	strb	r5, [r3, #0]
}
    38a6:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    38a8:	4805      	ldr	r0, [pc, #20]	; (38c0 <prvTraceSetObjectState+0x4c>)
    38aa:	4b06      	ldr	r3, [pc, #24]	; (38c4 <prvTraceSetObjectState+0x50>)
    38ac:	4798      	blx	r3
    38ae:	e7fa      	b.n	38a6 <prvTraceSetObjectState+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    38b0:	4805      	ldr	r0, [pc, #20]	; (38c8 <prvTraceSetObjectState+0x54>)
    38b2:	4b04      	ldr	r3, [pc, #16]	; (38c4 <prvTraceSetObjectState+0x50>)
    38b4:	4798      	blx	r3
    38b6:	e7f6      	b.n	38a6 <prvTraceSetObjectState+0x32>
    38b8:	20000398 	.word	0x20000398
    38bc:	00003749 	.word	0x00003749
    38c0:	0000e344 	.word	0x0000e344
    38c4:	00003571 	.word	0x00003571
    38c8:	0000e388 	.word	0x0000e388

000038cc <prvTraceSetTaskInstanceFinished>:
{
    38cc:	b510      	push	{r4, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    38ce:	4b0b      	ldr	r3, [pc, #44]	; (38fc <prvTraceSetTaskInstanceFinished+0x30>)
    38d0:	681a      	ldr	r2, [r3, #0]
    38d2:	2367      	movs	r3, #103	; 0x67
    38d4:	5cd3      	ldrb	r3, [r2, r3]
    38d6:	4283      	cmp	r3, r0
    38d8:	d30c      	bcc.n	38f4 <prvTraceSetTaskInstanceFinished+0x28>
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
    38da:	2103      	movs	r1, #3
    38dc:	4b08      	ldr	r3, [pc, #32]	; (3900 <prvTraceSetTaskInstanceFinished+0x34>)
    38de:	4798      	blx	r3
    38e0:	4b06      	ldr	r3, [pc, #24]	; (38fc <prvTraceSetTaskInstanceFinished+0x30>)
    38e2:	681b      	ldr	r3, [r3, #0]
    38e4:	2273      	movs	r2, #115	; 0x73
    38e6:	5c9a      	ldrb	r2, [r3, r2]
    38e8:	181b      	adds	r3, r3, r0
    38ea:	189b      	adds	r3, r3, r2
    38ec:	339c      	adds	r3, #156	; 0x9c
    38ee:	2200      	movs	r2, #0
    38f0:	701a      	strb	r2, [r3, #0]
}
    38f2:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    38f4:	4803      	ldr	r0, [pc, #12]	; (3904 <prvTraceSetTaskInstanceFinished+0x38>)
    38f6:	4b04      	ldr	r3, [pc, #16]	; (3908 <prvTraceSetTaskInstanceFinished+0x3c>)
    38f8:	4798      	blx	r3
    38fa:	e7fa      	b.n	38f2 <prvTraceSetTaskInstanceFinished+0x26>
    38fc:	20000398 	.word	0x20000398
    3900:	00003749 	.word	0x00003749
    3904:	0000e450 	.word	0x0000e450
    3908:	00003571 	.word	0x00003571

0000390c <prvTraceGetObjectHandle>:
{
    390c:	b570      	push	{r4, r5, r6, lr}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    390e:	4b2d      	ldr	r3, [pc, #180]	; (39c4 <prvTraceGetObjectHandle+0xb8>)
    3910:	681b      	ldr	r3, [r3, #0]
    3912:	2b00      	cmp	r3, #0
    3914:	d046      	beq.n	39a4 <prvTraceGetObjectHandle+0x98>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    3916:	2808      	cmp	r0, #8
    3918:	d849      	bhi.n	39ae <prvTraceGetObjectHandle+0xa2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    391a:	f3ef 8410 	mrs	r4, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    391e:	2301      	movs	r3, #1
    3920:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    3924:	4a28      	ldr	r2, [pc, #160]	; (39c8 <prvTraceGetObjectHandle+0xbc>)
    3926:	6813      	ldr	r3, [r2, #0]
    3928:	3301      	adds	r3, #1
    392a:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
    392c:	4a27      	ldr	r2, [pc, #156]	; (39cc <prvTraceGetObjectHandle+0xc0>)
    392e:	0043      	lsls	r3, r0, #1
    3930:	5a9b      	ldrh	r3, [r3, r2]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
    3932:	18d2      	adds	r2, r2, r3
    3934:	3248      	adds	r2, #72	; 0x48
    3936:	7812      	ldrb	r2, [r2, #0]
    3938:	2a00      	cmp	r2, #0
    393a:	d10a      	bne.n	3952 <prvTraceGetObjectHandle+0x46>
		objectHandleStacks.objectHandles[indexOfHandle] =
    393c:	4923      	ldr	r1, [pc, #140]	; (39cc <prvTraceGetObjectHandle+0xc0>)
    393e:	18cd      	adds	r5, r1, r3
    3940:	3548      	adds	r5, #72	; 0x48
			(traceHandle)(1 + indexOfHandle -
    3942:	1c5a      	adds	r2, r3, #1
			objectHandleStacks.lowestIndexOfClass[objectclass]);
    3944:	0006      	movs	r6, r0
    3946:	3608      	adds	r6, #8
    3948:	0076      	lsls	r6, r6, #1
    394a:	1989      	adds	r1, r1, r6
			(traceHandle)(1 + indexOfHandle -
    394c:	8849      	ldrh	r1, [r1, #2]
    394e:	1a52      	subs	r2, r2, r1
		objectHandleStacks.objectHandles[indexOfHandle] =
    3950:	702a      	strb	r2, [r5, #0]
		> objectHandleStacks.highestIndexOfClass[objectclass])
    3952:	0001      	movs	r1, r0
    3954:	3110      	adds	r1, #16
    3956:	0049      	lsls	r1, r1, #1
    3958:	4a1c      	ldr	r2, [pc, #112]	; (39cc <prvTraceGetObjectHandle+0xc0>)
    395a:	1852      	adds	r2, r2, r1
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    395c:	8892      	ldrh	r2, [r2, #4]
    395e:	429a      	cmp	r2, r3
    3960:	d32a      	bcc.n	39b8 <prvTraceGetObjectHandle+0xac>
	handle = objectHandleStacks.objectHandles[indexOfHandle];
    3962:	491a      	ldr	r1, [pc, #104]	; (39cc <prvTraceGetObjectHandle+0xc0>)
    3964:	18ca      	adds	r2, r1, r3
    3966:	3248      	adds	r2, #72	; 0x48
    3968:	7812      	ldrb	r2, [r2, #0]
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
    396a:	3301      	adds	r3, #1
    396c:	b29b      	uxth	r3, r3
    396e:	0045      	lsls	r5, r0, #1
    3970:	526b      	strh	r3, [r5, r1]
			objectHandleStacks.lowestIndexOfClass[objectclass];
    3972:	0005      	movs	r5, r0
    3974:	3508      	adds	r5, #8
    3976:	006d      	lsls	r5, r5, #1
    3978:	194d      	adds	r5, r1, r5
    397a:	886d      	ldrh	r5, [r5, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    397c:	1b5b      	subs	r3, r3, r5
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
    397e:	0005      	movs	r5, r0
    3980:	3518      	adds	r5, #24
    3982:	006d      	lsls	r5, r5, #1
    3984:	1949      	adds	r1, r1, r5
    3986:	88c9      	ldrh	r1, [r1, #6]
		if (hndCount >
    3988:	428b      	cmp	r3, r1
    398a:	dd03      	ble.n	3994 <prvTraceGetObjectHandle+0x88>
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    398c:	490f      	ldr	r1, [pc, #60]	; (39cc <prvTraceGetObjectHandle+0xc0>)
    398e:	1948      	adds	r0, r1, r5
				(traceHandle)hndCount;
    3990:	b2db      	uxtb	r3, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    3992:	80c3      	strh	r3, [r0, #6]
	trcCRITICAL_SECTION_END();
    3994:	490c      	ldr	r1, [pc, #48]	; (39c8 <prvTraceGetObjectHandle+0xbc>)
    3996:	680b      	ldr	r3, [r1, #0]
    3998:	3b01      	subs	r3, #1
    399a:	600b      	str	r3, [r1, #0]
    399c:	f384 8810 	msr	PRIMASK, r4
}
    39a0:	0010      	movs	r0, r2
    39a2:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    39a4:	480a      	ldr	r0, [pc, #40]	; (39d0 <prvTraceGetObjectHandle+0xc4>)
    39a6:	4b0b      	ldr	r3, [pc, #44]	; (39d4 <prvTraceGetObjectHandle+0xc8>)
    39a8:	4798      	blx	r3
    39aa:	2200      	movs	r2, #0
    39ac:	e7f8      	b.n	39a0 <prvTraceGetObjectHandle+0x94>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    39ae:	480a      	ldr	r0, [pc, #40]	; (39d8 <prvTraceGetObjectHandle+0xcc>)
    39b0:	4b08      	ldr	r3, [pc, #32]	; (39d4 <prvTraceGetObjectHandle+0xc8>)
    39b2:	4798      	blx	r3
    39b4:	2200      	movs	r2, #0
    39b6:	e7f3      	b.n	39a0 <prvTraceGetObjectHandle+0x94>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    39b8:	4b08      	ldr	r3, [pc, #32]	; (39dc <prvTraceGetObjectHandle+0xd0>)
    39ba:	4798      	blx	r3
    39bc:	4b05      	ldr	r3, [pc, #20]	; (39d4 <prvTraceGetObjectHandle+0xc8>)
    39be:	4798      	blx	r3
		handle = 0;
    39c0:	2200      	movs	r2, #0
    39c2:	e7e7      	b.n	3994 <prvTraceGetObjectHandle+0x88>
    39c4:	20000398 	.word	0x20000398
    39c8:	20000448 	.word	0x20000448
    39cc:	200003b4 	.word	0x200003b4
    39d0:	0000e940 	.word	0x0000e940
    39d4:	00003571 	.word	0x00003571
    39d8:	0000e164 	.word	0x0000e164
    39dc:	000032f1 	.word	0x000032f1

000039e0 <prvTraceSetObjectName>:
{
    39e0:	b570      	push	{r4, r5, r6, lr}
    39e2:	0004      	movs	r4, r0
    39e4:	0008      	movs	r0, r1
    39e6:	1e15      	subs	r5, r2, #0
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    39e8:	d012      	beq.n	3a10 <prvTraceSetObjectName+0x30>
	if (objectclass >= TRACE_NCLASSES)
    39ea:	2c08      	cmp	r4, #8
    39ec:	d814      	bhi.n	3a18 <prvTraceSetObjectName+0x38>
	if (handle == 0)
    39ee:	2900      	cmp	r1, #0
    39f0:	d016      	beq.n	3a20 <prvTraceSetObjectName+0x40>
	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
    39f2:	4b16      	ldr	r3, [pc, #88]	; (3a4c <prvTraceSetObjectName+0x6c>)
    39f4:	681b      	ldr	r3, [r3, #0]
    39f6:	191b      	adds	r3, r3, r4
    39f8:	3364      	adds	r3, #100	; 0x64
    39fa:	781b      	ldrb	r3, [r3, #0]
    39fc:	428b      	cmp	r3, r1
    39fe:	d313      	bcc.n	3a28 <prvTraceSetObjectName+0x48>
		idx = uiIndexOfObject(handle, objectclass);
    3a00:	0021      	movs	r1, r4
    3a02:	4b13      	ldr	r3, [pc, #76]	; (3a50 <prvTraceSetObjectName+0x70>)
    3a04:	4798      	blx	r3
		if (traceErrorMessage == NULL)
    3a06:	4b13      	ldr	r3, [pc, #76]	; (3a54 <prvTraceSetObjectName+0x74>)
    3a08:	681b      	ldr	r3, [r3, #0]
    3a0a:	2b00      	cmp	r3, #0
    3a0c:	d012      	beq.n	3a34 <prvTraceSetObjectName+0x54>
}
    3a0e:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    3a10:	4811      	ldr	r0, [pc, #68]	; (3a58 <prvTraceSetObjectName+0x78>)
    3a12:	4b12      	ldr	r3, [pc, #72]	; (3a5c <prvTraceSetObjectName+0x7c>)
    3a14:	4798      	blx	r3
    3a16:	e7fa      	b.n	3a0e <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal object class in prvTraceSetObjectName");
    3a18:	4811      	ldr	r0, [pc, #68]	; (3a60 <prvTraceSetObjectName+0x80>)
    3a1a:	4b10      	ldr	r3, [pc, #64]	; (3a5c <prvTraceSetObjectName+0x7c>)
    3a1c:	4798      	blx	r3
		return;
    3a1e:	e7f6      	b.n	3a0e <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
    3a20:	4810      	ldr	r0, [pc, #64]	; (3a64 <prvTraceSetObjectName+0x84>)
    3a22:	4b0e      	ldr	r3, [pc, #56]	; (3a5c <prvTraceSetObjectName+0x7c>)
    3a24:	4798      	blx	r3
		return;
    3a26:	e7f2      	b.n	3a0e <prvTraceSetObjectName+0x2e>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    3a28:	0020      	movs	r0, r4
    3a2a:	4b0f      	ldr	r3, [pc, #60]	; (3a68 <prvTraceSetObjectName+0x88>)
    3a2c:	4798      	blx	r3
    3a2e:	4b0b      	ldr	r3, [pc, #44]	; (3a5c <prvTraceSetObjectName+0x7c>)
    3a30:	4798      	blx	r3
    3a32:	e7ec      	b.n	3a0e <prvTraceSetObjectName+0x2e>
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    3a34:	4b05      	ldr	r3, [pc, #20]	; (3a4c <prvTraceSetObjectName+0x6c>)
    3a36:	681b      	ldr	r3, [r3, #0]
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
    3a38:	191c      	adds	r4, r3, r4
    3a3a:	3470      	adds	r4, #112	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    3a3c:	7822      	ldrb	r2, [r4, #0]
    3a3e:	309c      	adds	r0, #156	; 0x9c
    3a40:	1818      	adds	r0, r3, r0
    3a42:	0029      	movs	r1, r5
    3a44:	4b09      	ldr	r3, [pc, #36]	; (3a6c <prvTraceSetObjectName+0x8c>)
    3a46:	4798      	blx	r3
    3a48:	e7e1      	b.n	3a0e <prvTraceSetObjectName+0x2e>
    3a4a:	46c0      	nop			; (mov r8, r8)
    3a4c:	20000398 	.word	0x20000398
    3a50:	00003749 	.word	0x00003749
    3a54:	20000450 	.word	0x20000450
    3a58:	0000e2b0 	.word	0x0000e2b0
    3a5c:	00003571 	.word	0x00003571
    3a60:	0000e2e4 	.word	0x0000e2e4
    3a64:	0000e314 	.word	0x0000e314
    3a68:	000032f1 	.word	0x000032f1
    3a6c:	00003351 	.word	0x00003351

00003a70 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
    3a70:	b570      	push	{r4, r5, r6, lr}
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
    3a72:	4b1e      	ldr	r3, [pc, #120]	; (3aec <prvTracePortGetTimeStamp+0x7c>)
    3a74:	681b      	ldr	r3, [r3, #0]
    3a76:	2b01      	cmp	r3, #1
    3a78:	d02b      	beq.n	3ad2 <prvTracePortGetTimeStamp+0x62>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
    3a7a:	4b1d      	ldr	r3, [pc, #116]	; (3af0 <prvTracePortGetTimeStamp+0x80>)
    3a7c:	6819      	ldr	r1, [r3, #0]
    3a7e:	4b1d      	ldr	r3, [pc, #116]	; (3af4 <prvTracePortGetTimeStamp+0x84>)
    3a80:	681b      	ldr	r3, [r3, #0]
    3a82:	3101      	adds	r1, #1
    3a84:	1ac9      	subs	r1, r1, r3
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
    3a86:	4b1c      	ldr	r3, [pc, #112]	; (3af8 <prvTracePortGetTimeStamp+0x88>)
    3a88:	681b      	ldr	r3, [r3, #0]
    3a8a:	4a1c      	ldr	r2, [pc, #112]	; (3afc <prvTracePortGetTimeStamp+0x8c>)
    3a8c:	6814      	ldr	r4, [r2, #0]
    3a8e:	43e2      	mvns	r2, r4
    3a90:	42da      	cmn	r2, r3
    3a92:	d424      	bmi.n	3ade <prvTracePortGetTimeStamp+0x6e>
		traceTickCount = uiTraceTickCount;
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    3a94:	4a1a      	ldr	r2, [pc, #104]	; (3b00 <prvTracePortGetTimeStamp+0x90>)
    3a96:	6814      	ldr	r4, [r2, #0]
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
    3a98:	42a1      	cmp	r1, r4
    3a9a:	41a4      	sbcs	r4, r4
    3a9c:	4264      	negs	r4, r4
    3a9e:	191c      	adds	r4, r3, r4
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
    3aa0:	2800      	cmp	r0, #0
    3aa2:	d01f      	beq.n	3ae4 <prvTracePortGetTimeStamp+0x74>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
    3aa4:	4d12      	ldr	r5, [pc, #72]	; (3af0 <prvTracePortGetTimeStamp+0x80>)
    3aa6:	682b      	ldr	r3, [r5, #0]
    3aa8:	3301      	adds	r3, #1
    3aaa:	089b      	lsrs	r3, r3, #2
    3aac:	4363      	muls	r3, r4
    3aae:	001a      	movs	r2, r3
    3ab0:	4e14      	ldr	r6, [pc, #80]	; (3b04 <prvTracePortGetTimeStamp+0x94>)
    3ab2:	6033      	str	r3, [r6, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
    3ab4:	682d      	ldr	r5, [r5, #0]
    3ab6:	3501      	adds	r5, #1
    3ab8:	2303      	movs	r3, #3
    3aba:	402b      	ands	r3, r5
    3abc:	4363      	muls	r3, r4
    3abe:	185b      	adds	r3, r3, r1
    3ac0:	089b      	lsrs	r3, r3, #2
    3ac2:	189b      	adds	r3, r3, r2
    3ac4:	6033      	str	r3, [r6, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
    3ac6:	4a0c      	ldr	r2, [pc, #48]	; (3af8 <prvTracePortGetTimeStamp+0x88>)
    3ac8:	6014      	str	r4, [r2, #0]
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
		*pTimestamp = last_timestamp;
    3aca:	6003      	str	r3, [r0, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
    3acc:	4b0c      	ldr	r3, [pc, #48]	; (3b00 <prvTracePortGetTimeStamp+0x90>)
    3ace:	6019      	str	r1, [r3, #0]
}
    3ad0:	bd70      	pop	{r4, r5, r6, pc}
		if (pTimestamp)
    3ad2:	2800      	cmp	r0, #0
    3ad4:	d0fc      	beq.n	3ad0 <prvTracePortGetTimeStamp+0x60>
			*pTimestamp = last_timestamp;
    3ad6:	4b0b      	ldr	r3, [pc, #44]	; (3b04 <prvTracePortGetTimeStamp+0x94>)
    3ad8:	681b      	ldr	r3, [r3, #0]
    3ada:	6003      	str	r3, [r0, #0]
    3adc:	e7f8      	b.n	3ad0 <prvTracePortGetTimeStamp+0x60>
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    3ade:	42a3      	cmp	r3, r4
    3ae0:	d1de      	bne.n	3aa0 <prvTracePortGetTimeStamp+0x30>
    3ae2:	e7d7      	b.n	3a94 <prvTracePortGetTimeStamp+0x24>
	last_traceTickCount = traceTickCount;
    3ae4:	4b04      	ldr	r3, [pc, #16]	; (3af8 <prvTracePortGetTimeStamp+0x88>)
    3ae6:	601c      	str	r4, [r3, #0]
    3ae8:	e7f0      	b.n	3acc <prvTracePortGetTimeStamp+0x5c>
    3aea:	46c0      	nop			; (mov r8, r8)
    3aec:	20000454 	.word	0x20000454
    3af0:	e000e014 	.word	0xe000e014
    3af4:	e000e018 	.word	0xe000e018
    3af8:	200003b0 	.word	0x200003b0
    3afc:	2000045c 	.word	0x2000045c
    3b00:	200003a8 	.word	0x200003a8
    3b04:	200003ac 	.word	0x200003ac

00003b08 <prvTraceGetDTS>:
{
    3b08:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b0a:	b083      	sub	sp, #12
    3b0c:	0005      	movs	r5, r0
	uint32_t timestamp = 0;
    3b0e:	2300      	movs	r3, #0
    3b10:	9301      	str	r3, [sp, #4]
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    3b12:	28ff      	cmp	r0, #255	; 0xff
    3b14:	d002      	beq.n	3b1c <prvTraceGetDTS+0x14>
    3b16:	4b39      	ldr	r3, [pc, #228]	; (3bfc <prvTraceGetDTS+0xf4>)
    3b18:	4298      	cmp	r0, r3
    3b1a:	d135      	bne.n	3b88 <prvTraceGetDTS+0x80>
	if (RecorderDataPtr->frequency == 0)
    3b1c:	4b38      	ldr	r3, [pc, #224]	; (3c00 <prvTraceGetDTS+0xf8>)
    3b1e:	681c      	ldr	r4, [r3, #0]
    3b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3b22:	2b00      	cmp	r3, #0
    3b24:	d105      	bne.n	3b32 <prvTraceGetDTS+0x2a>
		if (timestampFrequency != 0)
    3b26:	4b37      	ldr	r3, [pc, #220]	; (3c04 <prvTraceGetDTS+0xfc>)
    3b28:	681b      	ldr	r3, [r3, #0]
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	d031      	beq.n	3b92 <prvTraceGetDTS+0x8a>
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
    3b2e:	089b      	lsrs	r3, r3, #2
    3b30:	6263      	str	r3, [r4, #36]	; 0x24
	prvTracePortGetTimeStamp(&timestamp);	
    3b32:	a801      	add	r0, sp, #4
    3b34:	4b34      	ldr	r3, [pc, #208]	; (3c08 <prvTraceGetDTS+0x100>)
    3b36:	4798      	blx	r3
	dts = timestamp - old_timestamp;
    3b38:	9b01      	ldr	r3, [sp, #4]
    3b3a:	4a34      	ldr	r2, [pc, #208]	; (3c0c <prvTraceGetDTS+0x104>)
    3b3c:	6811      	ldr	r1, [r2, #0]
    3b3e:	1a5c      	subs	r4, r3, r1
	old_timestamp = timestamp;
    3b40:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->frequency > 0)
    3b42:	4a2f      	ldr	r2, [pc, #188]	; (3c00 <prvTraceGetDTS+0xf8>)
    3b44:	6816      	ldr	r6, [r2, #0]
    3b46:	6a77      	ldr	r7, [r6, #36]	; 0x24
    3b48:	2f00      	cmp	r7, #0
    3b4a:	d032      	beq.n	3bb2 <prvTraceGetDTS+0xaa>
		if (dts > RecorderDataPtr->frequency)
    3b4c:	42bc      	cmp	r4, r7
    3b4e:	d92c      	bls.n	3baa <prvTraceGetDTS+0xa2>
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
    3b50:	0039      	movs	r1, r7
    3b52:	0020      	movs	r0, r4
    3b54:	4b2e      	ldr	r3, [pc, #184]	; (3c10 <prvTraceGetDTS+0x108>)
    3b56:	4798      	blx	r3
    3b58:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3b5a:	469c      	mov	ip, r3
    3b5c:	4460      	add	r0, ip
    3b5e:	62f0      	str	r0, [r6, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
    3b60:	0039      	movs	r1, r7
    3b62:	0020      	movs	r0, r4
    3b64:	4b2b      	ldr	r3, [pc, #172]	; (3c14 <prvTraceGetDTS+0x10c>)
    3b66:	4798      	blx	r3
    3b68:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3b6a:	469c      	mov	ip, r3
    3b6c:	4461      	add	r1, ip
    3b6e:	62b1      	str	r1, [r6, #40]	; 0x28
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
    3b70:	4b23      	ldr	r3, [pc, #140]	; (3c00 <prvTraceGetDTS+0xf8>)
    3b72:	681b      	ldr	r3, [r3, #0]
    3b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3b76:	6a59      	ldr	r1, [r3, #36]	; 0x24
    3b78:	428a      	cmp	r2, r1
    3b7a:	d31b      	bcc.n	3bb4 <prvTraceGetDTS+0xac>
			RecorderDataPtr->absTimeLastEventSecond++;
    3b7c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    3b7e:	3001      	adds	r0, #1
    3b80:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
    3b82:	1a52      	subs	r2, r2, r1
    3b84:	629a      	str	r2, [r3, #40]	; 0x28
    3b86:	e015      	b.n	3bb4 <prvTraceGetDTS+0xac>
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    3b88:	4823      	ldr	r0, [pc, #140]	; (3c18 <prvTraceGetDTS+0x110>)
    3b8a:	4b24      	ldr	r3, [pc, #144]	; (3c1c <prvTraceGetDTS+0x114>)
    3b8c:	4798      	blx	r3
    3b8e:	2000      	movs	r0, #0
    3b90:	e014      	b.n	3bbc <prvTraceGetDTS+0xb4>
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
    3b92:	4b23      	ldr	r3, [pc, #140]	; (3c20 <prvTraceGetDTS+0x118>)
    3b94:	681a      	ldr	r2, [r3, #0]
    3b96:	4b23      	ldr	r3, [pc, #140]	; (3c24 <prvTraceGetDTS+0x11c>)
    3b98:	681b      	ldr	r3, [r3, #0]
    3b9a:	429a      	cmp	r2, r3
    3b9c:	d0c9      	beq.n	3b32 <prvTraceGetDTS+0x2a>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
    3b9e:	2000      	movs	r0, #0
    3ba0:	4b21      	ldr	r3, [pc, #132]	; (3c28 <prvTraceGetDTS+0x120>)
    3ba2:	4798      	blx	r3
    3ba4:	0880      	lsrs	r0, r0, #2
    3ba6:	6260      	str	r0, [r4, #36]	; 0x24
    3ba8:	e7c3      	b.n	3b32 <prvTraceGetDTS+0x2a>
			RecorderDataPtr->absTimeLastEvent += dts;
    3baa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3bac:	191b      	adds	r3, r3, r4
    3bae:	62b3      	str	r3, [r6, #40]	; 0x28
    3bb0:	e7de      	b.n	3b70 <prvTraceGetDTS+0x68>
		RecorderDataPtr->absTimeLastEvent = timestamp;
    3bb2:	62b3      	str	r3, [r6, #40]	; 0x28
	if (dts > param_maxDTS)
    3bb4:	42ac      	cmp	r4, r5
    3bb6:	d803      	bhi.n	3bc0 <prvTraceGetDTS+0xb8>
	return (uint16_t)dts & param_maxDTS;
    3bb8:	0020      	movs	r0, r4
    3bba:	4028      	ands	r0, r5
}
    3bbc:	b003      	add	sp, #12
    3bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
    3bc0:	4b1a      	ldr	r3, [pc, #104]	; (3c2c <prvTraceGetDTS+0x124>)
    3bc2:	4798      	blx	r3
		if (xts != NULL)
    3bc4:	2800      	cmp	r0, #0
    3bc6:	d0f7      	beq.n	3bb8 <prvTraceGetDTS+0xb0>
			if (param_maxDTS == 0xFFFF)
    3bc8:	4b0c      	ldr	r3, [pc, #48]	; (3bfc <prvTraceGetDTS+0xf4>)
    3bca:	429d      	cmp	r5, r3
    3bcc:	d007      	beq.n	3bde <prvTraceGetDTS+0xd6>
			else if (param_maxDTS == 0xFF)
    3bce:	2dff      	cmp	r5, #255	; 0xff
    3bd0:	d00c      	beq.n	3bec <prvTraceGetDTS+0xe4>
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
    3bd2:	4817      	ldr	r0, [pc, #92]	; (3c30 <prvTraceGetDTS+0x128>)
    3bd4:	4b11      	ldr	r3, [pc, #68]	; (3c1c <prvTraceGetDTS+0x114>)
    3bd6:	4798      	blx	r3
			prvTraceUpdateCounters();
    3bd8:	4b16      	ldr	r3, [pc, #88]	; (3c34 <prvTraceGetDTS+0x12c>)
    3bda:	4798      	blx	r3
    3bdc:	e7ec      	b.n	3bb8 <prvTraceGetDTS+0xb0>
				xts->type = XTS16;
    3bde:	23a9      	movs	r3, #169	; 0xa9
    3be0:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
    3be2:	0c23      	lsrs	r3, r4, #16
    3be4:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = 0;
    3be6:	2300      	movs	r3, #0
    3be8:	7043      	strb	r3, [r0, #1]
    3bea:	e7f5      	b.n	3bd8 <prvTraceGetDTS+0xd0>
				xts->type = XTS8;
    3bec:	23a8      	movs	r3, #168	; 0xa8
    3bee:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
    3bf0:	0a23      	lsrs	r3, r4, #8
    3bf2:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
    3bf4:	0e23      	lsrs	r3, r4, #24
    3bf6:	7043      	strb	r3, [r0, #1]
    3bf8:	e7ee      	b.n	3bd8 <prvTraceGetDTS+0xd0>
    3bfa:	46c0      	nop			; (mov r8, r8)
    3bfc:	0000ffff 	.word	0x0000ffff
    3c00:	20000398 	.word	0x20000398
    3c04:	2000044c 	.word	0x2000044c
    3c08:	00003a71 	.word	0x00003a71
    3c0c:	20000444 	.word	0x20000444
    3c10:	0000ab0d 	.word	0x0000ab0d
    3c14:	0000ac19 	.word	0x0000ac19
    3c18:	0000e100 	.word	0x0000e100
    3c1c:	00003571 	.word	0x00003571
    3c20:	e000e018 	.word	0xe000e018
    3c24:	20004934 	.word	0x20004934
    3c28:	0000819d 	.word	0x0000819d
    3c2c:	000035c9 	.word	0x000035c9
    3c30:	0000e140 	.word	0x0000e140
    3c34:	000036bd 	.word	0x000036bd

00003c38 <prvTraceStoreTaskReady>:
{
    3c38:	b570      	push	{r4, r5, r6, lr}
    3c3a:	1e04      	subs	r4, r0, #0
	if (handle == 0)
    3c3c:	d01d      	beq.n	3c7a <prvTraceStoreTaskReady+0x42>
	if (! readyEventsEnabled)
    3c3e:	4b1b      	ldr	r3, [pc, #108]	; (3cac <prvTraceStoreTaskReady+0x74>)
    3c40:	681b      	ldr	r3, [r3, #0]
    3c42:	2b00      	cmp	r3, #0
    3c44:	d019      	beq.n	3c7a <prvTraceStoreTaskReady+0x42>
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    3c46:	280f      	cmp	r0, #15
    3c48:	d818      	bhi.n	3c7c <prvTraceStoreTaskReady+0x44>
	if (recorder_busy)
    3c4a:	4b19      	ldr	r3, [pc, #100]	; (3cb0 <prvTraceStoreTaskReady+0x78>)
    3c4c:	681b      	ldr	r3, [r3, #0]
    3c4e:	2b00      	cmp	r3, #0
    3c50:	d118      	bne.n	3c84 <prvTraceStoreTaskReady+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3c52:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3c56:	2301      	movs	r3, #1
    3c58:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    3c5c:	4a14      	ldr	r2, [pc, #80]	; (3cb0 <prvTraceStoreTaskReady+0x78>)
    3c5e:	6813      	ldr	r3, [r2, #0]
    3c60:	3301      	adds	r3, #1
    3c62:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
    3c64:	4b13      	ldr	r3, [pc, #76]	; (3cb4 <prvTraceStoreTaskReady+0x7c>)
    3c66:	681b      	ldr	r3, [r3, #0]
    3c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3c6a:	2b00      	cmp	r3, #0
    3c6c:	d10e      	bne.n	3c8c <prvTraceStoreTaskReady+0x54>
	trcCRITICAL_SECTION_END();
    3c6e:	4a10      	ldr	r2, [pc, #64]	; (3cb0 <prvTraceStoreTaskReady+0x78>)
    3c70:	6813      	ldr	r3, [r2, #0]
    3c72:	3b01      	subs	r3, #1
    3c74:	6013      	str	r3, [r2, #0]
    3c76:	f385 8810 	msr	PRIMASK, r5
}
    3c7a:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    3c7c:	480e      	ldr	r0, [pc, #56]	; (3cb8 <prvTraceStoreTaskReady+0x80>)
    3c7e:	4b0f      	ldr	r3, [pc, #60]	; (3cbc <prvTraceStoreTaskReady+0x84>)
    3c80:	4798      	blx	r3
    3c82:	e7fa      	b.n	3c7a <prvTraceStoreTaskReady+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
    3c84:	480e      	ldr	r0, [pc, #56]	; (3cc0 <prvTraceStoreTaskReady+0x88>)
    3c86:	4b0d      	ldr	r3, [pc, #52]	; (3cbc <prvTraceStoreTaskReady+0x84>)
    3c88:	4798      	blx	r3
		return;
    3c8a:	e7f6      	b.n	3c7a <prvTraceStoreTaskReady+0x42>
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    3c8c:	480d      	ldr	r0, [pc, #52]	; (3cc4 <prvTraceStoreTaskReady+0x8c>)
    3c8e:	4b0e      	ldr	r3, [pc, #56]	; (3cc8 <prvTraceStoreTaskReady+0x90>)
    3c90:	4798      	blx	r3
    3c92:	0006      	movs	r6, r0
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
    3c94:	4b0d      	ldr	r3, [pc, #52]	; (3ccc <prvTraceStoreTaskReady+0x94>)
    3c96:	4798      	blx	r3
		if (tr != NULL)
    3c98:	2800      	cmp	r0, #0
    3c9a:	d0e8      	beq.n	3c6e <prvTraceStoreTaskReady+0x36>
			tr->type = DIV_TASK_READY;
    3c9c:	2302      	movs	r3, #2
    3c9e:	7003      	strb	r3, [r0, #0]
			tr->dts = dts3;
    3ca0:	8046      	strh	r6, [r0, #2]
			tr->objHandle = hnd8;
    3ca2:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
    3ca4:	4b0a      	ldr	r3, [pc, #40]	; (3cd0 <prvTraceStoreTaskReady+0x98>)
    3ca6:	4798      	blx	r3
    3ca8:	e7e1      	b.n	3c6e <prvTraceStoreTaskReady+0x36>
    3caa:	46c0      	nop			; (mov r8, r8)
    3cac:	20000090 	.word	0x20000090
    3cb0:	20000448 	.word	0x20000448
    3cb4:	20000398 	.word	0x20000398
    3cb8:	0000e740 	.word	0x0000e740
    3cbc:	00003571 	.word	0x00003571
    3cc0:	0000e780 	.word	0x0000e780
    3cc4:	0000ffff 	.word	0x0000ffff
    3cc8:	00003b09 	.word	0x00003b09
    3ccc:	000035c9 	.word	0x000035c9
    3cd0:	000036bd 	.word	0x000036bd

00003cd4 <vTraceStoreMemMangEvent>:
{
    3cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cd6:	b083      	sub	sp, #12
    3cd8:	9000      	str	r0, [sp, #0]
    3cda:	000c      	movs	r4, r1
	if (RecorderDataPtr == NULL)
    3cdc:	4b28      	ldr	r3, [pc, #160]	; (3d80 <vTraceStoreMemMangEvent+0xac>)
    3cde:	681b      	ldr	r3, [r3, #0]
    3ce0:	2b00      	cmp	r3, #0
    3ce2:	d01d      	beq.n	3d20 <vTraceStoreMemMangEvent+0x4c>
		size = (uint32_t)(- signed_size);
    3ce4:	17d3      	asrs	r3, r2, #31
    3ce6:	18d6      	adds	r6, r2, r3
    3ce8:	405e      	eors	r6, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3cea:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3cee:	2301      	movs	r3, #1
    3cf0:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    3cf4:	4923      	ldr	r1, [pc, #140]	; (3d84 <vTraceStoreMemMangEvent+0xb0>)
    3cf6:	680b      	ldr	r3, [r1, #0]
    3cf8:	3301      	adds	r3, #1
    3cfa:	600b      	str	r3, [r1, #0]
	if (address != 0)
    3cfc:	2c00      	cmp	r4, #0
    3cfe:	d004      	beq.n	3d0a <vTraceStoreMemMangEvent+0x36>
		heapMemUsage += (uint32_t)signed_size;
    3d00:	4b21      	ldr	r3, [pc, #132]	; (3d88 <vTraceStoreMemMangEvent+0xb4>)
    3d02:	6819      	ldr	r1, [r3, #0]
    3d04:	468c      	mov	ip, r1
    3d06:	4462      	add	r2, ip
    3d08:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
    3d0a:	4b1d      	ldr	r3, [pc, #116]	; (3d80 <vTraceStoreMemMangEvent+0xac>)
    3d0c:	681b      	ldr	r3, [r3, #0]
    3d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3d10:	2b00      	cmp	r3, #0
    3d12:	d107      	bne.n	3d24 <vTraceStoreMemMangEvent+0x50>
	trcCRITICAL_SECTION_END();
    3d14:	4a1b      	ldr	r2, [pc, #108]	; (3d84 <vTraceStoreMemMangEvent+0xb0>)
    3d16:	6813      	ldr	r3, [r2, #0]
    3d18:	3b01      	subs	r3, #1
    3d1a:	6013      	str	r3, [r2, #0]
    3d1c:	f385 8810 	msr	PRIMASK, r5
}
    3d20:	b003      	add	sp, #12
    3d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
    3d24:	20ff      	movs	r0, #255	; 0xff
    3d26:	4b19      	ldr	r3, [pc, #100]	; (3d8c <vTraceStoreMemMangEvent+0xb8>)
    3d28:	4798      	blx	r3
    3d2a:	9001      	str	r0, [sp, #4]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
    3d2c:	0031      	movs	r1, r6
    3d2e:	4818      	ldr	r0, [pc, #96]	; (3d90 <vTraceStoreMemMangEvent+0xbc>)
    3d30:	4b18      	ldr	r3, [pc, #96]	; (3d94 <vTraceStoreMemMangEvent+0xc0>)
    3d32:	4798      	blx	r3
    3d34:	0006      	movs	r6, r0
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
    3d36:	4b18      	ldr	r3, [pc, #96]	; (3d98 <vTraceStoreMemMangEvent+0xc4>)
    3d38:	4798      	blx	r3
    3d3a:	1e07      	subs	r7, r0, #0
		if (ms != NULL)
    3d3c:	d0ea      	beq.n	3d14 <vTraceStoreMemMangEvent+0x40>
			ms->dts = dts1;
    3d3e:	466b      	mov	r3, sp
    3d40:	791b      	ldrb	r3, [r3, #4]
    3d42:	7043      	strb	r3, [r0, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
    3d44:	2300      	movs	r3, #0
    3d46:	7003      	strb	r3, [r0, #0]
			ms->size = size_low;
    3d48:	8046      	strh	r6, [r0, #2]
			prvTraceUpdateCounters();
    3d4a:	4b14      	ldr	r3, [pc, #80]	; (3d9c <vTraceStoreMemMangEvent+0xc8>)
    3d4c:	4798      	blx	r3
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
    3d4e:	0021      	movs	r1, r4
    3d50:	480f      	ldr	r0, [pc, #60]	; (3d90 <vTraceStoreMemMangEvent+0xbc>)
    3d52:	4b10      	ldr	r3, [pc, #64]	; (3d94 <vTraceStoreMemMangEvent+0xc0>)
    3d54:	4798      	blx	r3
    3d56:	0006      	movs	r6, r0
			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
    3d58:	4b0f      	ldr	r3, [pc, #60]	; (3d98 <vTraceStoreMemMangEvent+0xc4>)
    3d5a:	4798      	blx	r3
			if (ma != NULL)
    3d5c:	2800      	cmp	r0, #0
    3d5e:	d0d9      	beq.n	3d14 <vTraceStoreMemMangEvent+0x40>
				ma->addr_low = addr_low;
    3d60:	8046      	strh	r6, [r0, #2]
				ma->addr_high = addr_high;
    3d62:	2300      	movs	r3, #0
    3d64:	7043      	strb	r3, [r0, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
    3d66:	466b      	mov	r3, sp
    3d68:	781c      	ldrb	r4, [r3, #0]
    3d6a:	1c63      	adds	r3, r4, #1
    3d6c:	7003      	strb	r3, [r0, #0]
				ms->type = (uint8_t) ecode;
    3d6e:	703c      	strb	r4, [r7, #0]
				prvTraceUpdateCounters();					
    3d70:	4b0a      	ldr	r3, [pc, #40]	; (3d9c <vTraceStoreMemMangEvent+0xc8>)
    3d72:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
    3d74:	4b02      	ldr	r3, [pc, #8]	; (3d80 <vTraceStoreMemMangEvent+0xac>)
    3d76:	681b      	ldr	r3, [r3, #0]
    3d78:	4a03      	ldr	r2, [pc, #12]	; (3d88 <vTraceStoreMemMangEvent+0xb4>)
    3d7a:	6812      	ldr	r2, [r2, #0]
    3d7c:	651a      	str	r2, [r3, #80]	; 0x50
    3d7e:	e7c9      	b.n	3d14 <vTraceStoreMemMangEvent+0x40>
    3d80:	20000398 	.word	0x20000398
    3d84:	20000448 	.word	0x20000448
    3d88:	200003a0 	.word	0x200003a0
    3d8c:	00003b09 	.word	0x00003b09
    3d90:	0000ffff 	.word	0x0000ffff
    3d94:	000036f5 	.word	0x000036f5
    3d98:	000035c9 	.word	0x000035c9
    3d9c:	000036bd 	.word	0x000036bd

00003da0 <prvTraceStoreKernelCall>:
{
    3da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3da2:	0005      	movs	r5, r0
    3da4:	0014      	movs	r4, r2
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    3da6:	28fe      	cmp	r0, #254	; 0xfe
    3da8:	d825      	bhi.n	3df6 <prvTraceStoreKernelCall+0x56>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    3daa:	2908      	cmp	r1, #8
    3dac:	d827      	bhi.n	3dfe <prvTraceStoreKernelCall+0x5e>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    3dae:	4b21      	ldr	r3, [pc, #132]	; (3e34 <prvTraceStoreKernelCall+0x94>)
    3db0:	681b      	ldr	r3, [r3, #0]
    3db2:	1859      	adds	r1, r3, r1
    3db4:	3164      	adds	r1, #100	; 0x64
    3db6:	780b      	ldrb	r3, [r1, #0]
    3db8:	4293      	cmp	r3, r2
    3dba:	d324      	bcc.n	3e06 <prvTraceStoreKernelCall+0x66>
	if (recorder_busy)
    3dbc:	4b1e      	ldr	r3, [pc, #120]	; (3e38 <prvTraceStoreKernelCall+0x98>)
    3dbe:	681b      	ldr	r3, [r3, #0]
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	d124      	bne.n	3e0e <prvTraceStoreKernelCall+0x6e>
	if (handle_of_last_logged_task == 0)
    3dc4:	4b1d      	ldr	r3, [pc, #116]	; (3e3c <prvTraceStoreKernelCall+0x9c>)
    3dc6:	781b      	ldrb	r3, [r3, #0]
    3dc8:	2b00      	cmp	r3, #0
    3dca:	d013      	beq.n	3df4 <prvTraceStoreKernelCall+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3dcc:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3dd0:	2301      	movs	r3, #1
    3dd2:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    3dd6:	4a18      	ldr	r2, [pc, #96]	; (3e38 <prvTraceStoreKernelCall+0x98>)
    3dd8:	6813      	ldr	r3, [r2, #0]
    3dda:	3301      	adds	r3, #1
    3ddc:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
    3dde:	4b15      	ldr	r3, [pc, #84]	; (3e34 <prvTraceStoreKernelCall+0x94>)
    3de0:	681b      	ldr	r3, [r3, #0]
    3de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3de4:	2b00      	cmp	r3, #0
    3de6:	d116      	bne.n	3e16 <prvTraceStoreKernelCall+0x76>
	trcCRITICAL_SECTION_END();
    3de8:	4a13      	ldr	r2, [pc, #76]	; (3e38 <prvTraceStoreKernelCall+0x98>)
    3dea:	6813      	ldr	r3, [r2, #0]
    3dec:	3b01      	subs	r3, #1
    3dee:	6013      	str	r3, [r2, #0]
    3df0:	f386 8810 	msr	PRIMASK, r6
}
    3df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    3df6:	4812      	ldr	r0, [pc, #72]	; (3e40 <prvTraceStoreKernelCall+0xa0>)
    3df8:	4b12      	ldr	r3, [pc, #72]	; (3e44 <prvTraceStoreKernelCall+0xa4>)
    3dfa:	4798      	blx	r3
    3dfc:	e7fa      	b.n	3df4 <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    3dfe:	4812      	ldr	r0, [pc, #72]	; (3e48 <prvTraceStoreKernelCall+0xa8>)
    3e00:	4b10      	ldr	r3, [pc, #64]	; (3e44 <prvTraceStoreKernelCall+0xa4>)
    3e02:	4798      	blx	r3
    3e04:	e7f6      	b.n	3df4 <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    3e06:	4811      	ldr	r0, [pc, #68]	; (3e4c <prvTraceStoreKernelCall+0xac>)
    3e08:	4b0e      	ldr	r3, [pc, #56]	; (3e44 <prvTraceStoreKernelCall+0xa4>)
    3e0a:	4798      	blx	r3
    3e0c:	e7f2      	b.n	3df4 <prvTraceStoreKernelCall+0x54>
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
    3e0e:	4810      	ldr	r0, [pc, #64]	; (3e50 <prvTraceStoreKernelCall+0xb0>)
    3e10:	4b0c      	ldr	r3, [pc, #48]	; (3e44 <prvTraceStoreKernelCall+0xa4>)
    3e12:	4798      	blx	r3
		return;
    3e14:	e7ee      	b.n	3df4 <prvTraceStoreKernelCall+0x54>
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
    3e16:	480f      	ldr	r0, [pc, #60]	; (3e54 <prvTraceStoreKernelCall+0xb4>)
    3e18:	4b0f      	ldr	r3, [pc, #60]	; (3e58 <prvTraceStoreKernelCall+0xb8>)
    3e1a:	4798      	blx	r3
    3e1c:	0007      	movs	r7, r0
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
    3e1e:	4b0f      	ldr	r3, [pc, #60]	; (3e5c <prvTraceStoreKernelCall+0xbc>)
    3e20:	4798      	blx	r3
		if (kse != NULL)
    3e22:	2800      	cmp	r0, #0
    3e24:	d0e0      	beq.n	3de8 <prvTraceStoreKernelCall+0x48>
			kse->dts = dts1;
    3e26:	8047      	strh	r7, [r0, #2]
			kse->type = (uint8_t)ecode;
    3e28:	7005      	strb	r5, [r0, #0]
			kse->objHandle = hnd8;
    3e2a:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
    3e2c:	4b0c      	ldr	r3, [pc, #48]	; (3e60 <prvTraceStoreKernelCall+0xc0>)
    3e2e:	4798      	blx	r3
    3e30:	e7da      	b.n	3de8 <prvTraceStoreKernelCall+0x48>
    3e32:	46c0      	nop			; (mov r8, r8)
    3e34:	20000398 	.word	0x20000398
    3e38:	20000448 	.word	0x20000448
    3e3c:	2000039c 	.word	0x2000039c
    3e40:	0000e498 	.word	0x0000e498
    3e44:	00003571 	.word	0x00003571
    3e48:	0000e4d0 	.word	0x0000e4d0
    3e4c:	0000e518 	.word	0x0000e518
    3e50:	0000e560 	.word	0x0000e560
    3e54:	0000ffff 	.word	0x0000ffff
    3e58:	00003b09 	.word	0x00003b09
    3e5c:	000035c9 	.word	0x000035c9
    3e60:	000036bd 	.word	0x000036bd

00003e64 <prvTraceStoreKernelCallWithParam>:
{
    3e64:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e66:	46c6      	mov	lr, r8
    3e68:	b500      	push	{lr}
    3e6a:	0006      	movs	r6, r0
    3e6c:	0014      	movs	r4, r2
    3e6e:	001d      	movs	r5, r3
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    3e70:	28fe      	cmp	r0, #254	; 0xfe
    3e72:	d827      	bhi.n	3ec4 <prvTraceStoreKernelCallWithParam+0x60>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    3e74:	2908      	cmp	r1, #8
    3e76:	d829      	bhi.n	3ecc <prvTraceStoreKernelCallWithParam+0x68>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    3e78:	4b24      	ldr	r3, [pc, #144]	; (3f0c <prvTraceStoreKernelCallWithParam+0xa8>)
    3e7a:	681b      	ldr	r3, [r3, #0]
    3e7c:	1859      	adds	r1, r3, r1
    3e7e:	3164      	adds	r1, #100	; 0x64
    3e80:	780b      	ldrb	r3, [r1, #0]
    3e82:	4293      	cmp	r3, r2
    3e84:	d326      	bcc.n	3ed4 <prvTraceStoreKernelCallWithParam+0x70>
	if (recorder_busy)
    3e86:	4b22      	ldr	r3, [pc, #136]	; (3f10 <prvTraceStoreKernelCallWithParam+0xac>)
    3e88:	681b      	ldr	r3, [r3, #0]
    3e8a:	2b00      	cmp	r3, #0
    3e8c:	d126      	bne.n	3edc <prvTraceStoreKernelCallWithParam+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3e8e:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3e92:	2301      	movs	r3, #1
    3e94:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    3e98:	4a1d      	ldr	r2, [pc, #116]	; (3f10 <prvTraceStoreKernelCallWithParam+0xac>)
    3e9a:	6813      	ldr	r3, [r2, #0]
    3e9c:	3301      	adds	r3, #1
    3e9e:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    3ea0:	4b1a      	ldr	r3, [pc, #104]	; (3f0c <prvTraceStoreKernelCallWithParam+0xa8>)
    3ea2:	681b      	ldr	r3, [r3, #0]
    3ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d003      	beq.n	3eb2 <prvTraceStoreKernelCallWithParam+0x4e>
    3eaa:	4b1a      	ldr	r3, [pc, #104]	; (3f14 <prvTraceStoreKernelCallWithParam+0xb0>)
    3eac:	781b      	ldrb	r3, [r3, #0]
    3eae:	2b00      	cmp	r3, #0
    3eb0:	d118      	bne.n	3ee4 <prvTraceStoreKernelCallWithParam+0x80>
	trcCRITICAL_SECTION_END();
    3eb2:	4a17      	ldr	r2, [pc, #92]	; (3f10 <prvTraceStoreKernelCallWithParam+0xac>)
    3eb4:	6813      	ldr	r3, [r2, #0]
    3eb6:	3b01      	subs	r3, #1
    3eb8:	6013      	str	r3, [r2, #0]
    3eba:	f388 8810 	msr	PRIMASK, r8
}
    3ebe:	bc04      	pop	{r2}
    3ec0:	4690      	mov	r8, r2
    3ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    3ec4:	4814      	ldr	r0, [pc, #80]	; (3f18 <prvTraceStoreKernelCallWithParam+0xb4>)
    3ec6:	4b15      	ldr	r3, [pc, #84]	; (3f1c <prvTraceStoreKernelCallWithParam+0xb8>)
    3ec8:	4798      	blx	r3
    3eca:	e7f8      	b.n	3ebe <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    3ecc:	4814      	ldr	r0, [pc, #80]	; (3f20 <prvTraceStoreKernelCallWithParam+0xbc>)
    3ece:	4b13      	ldr	r3, [pc, #76]	; (3f1c <prvTraceStoreKernelCallWithParam+0xb8>)
    3ed0:	4798      	blx	r3
    3ed2:	e7f4      	b.n	3ebe <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    3ed4:	4813      	ldr	r0, [pc, #76]	; (3f24 <prvTraceStoreKernelCallWithParam+0xc0>)
    3ed6:	4b11      	ldr	r3, [pc, #68]	; (3f1c <prvTraceStoreKernelCallWithParam+0xb8>)
    3ed8:	4798      	blx	r3
    3eda:	e7f0      	b.n	3ebe <prvTraceStoreKernelCallWithParam+0x5a>
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
    3edc:	4812      	ldr	r0, [pc, #72]	; (3f28 <prvTraceStoreKernelCallWithParam+0xc4>)
    3ede:	4b0f      	ldr	r3, [pc, #60]	; (3f1c <prvTraceStoreKernelCallWithParam+0xb8>)
    3ee0:	4798      	blx	r3
		return;
    3ee2:	e7ec      	b.n	3ebe <prvTraceStoreKernelCallWithParam+0x5a>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
    3ee4:	20ff      	movs	r0, #255	; 0xff
    3ee6:	4b11      	ldr	r3, [pc, #68]	; (3f2c <prvTraceStoreKernelCallWithParam+0xc8>)
    3ee8:	4798      	blx	r3
    3eea:	0007      	movs	r7, r0
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
    3eec:	0029      	movs	r1, r5
    3eee:	20ff      	movs	r0, #255	; 0xff
    3ef0:	4b0f      	ldr	r3, [pc, #60]	; (3f30 <prvTraceStoreKernelCallWithParam+0xcc>)
    3ef2:	4798      	blx	r3
    3ef4:	0005      	movs	r5, r0
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
    3ef6:	4b0f      	ldr	r3, [pc, #60]	; (3f34 <prvTraceStoreKernelCallWithParam+0xd0>)
    3ef8:	4798      	blx	r3
		if (kse != NULL)
    3efa:	2800      	cmp	r0, #0
    3efc:	d0d9      	beq.n	3eb2 <prvTraceStoreKernelCallWithParam+0x4e>
			kse->dts = dts2;
    3efe:	70c7      	strb	r7, [r0, #3]
			kse->type = (uint8_t)evtcode;
    3f00:	7006      	strb	r6, [r0, #0]
			kse->objHandle = hnd8;
    3f02:	7044      	strb	r4, [r0, #1]
			kse->param = p8;
    3f04:	7085      	strb	r5, [r0, #2]
			prvTraceUpdateCounters();
    3f06:	4b0c      	ldr	r3, [pc, #48]	; (3f38 <prvTraceStoreKernelCallWithParam+0xd4>)
    3f08:	4798      	blx	r3
    3f0a:	e7d2      	b.n	3eb2 <prvTraceStoreKernelCallWithParam+0x4e>
    3f0c:	20000398 	.word	0x20000398
    3f10:	20000448 	.word	0x20000448
    3f14:	2000039c 	.word	0x2000039c
    3f18:	0000e628 	.word	0x0000e628
    3f1c:	00003571 	.word	0x00003571
    3f20:	0000e668 	.word	0x0000e668
    3f24:	0000e6b8 	.word	0x0000e6b8
    3f28:	0000e708 	.word	0x0000e708
    3f2c:	00003b09 	.word	0x00003b09
    3f30:	000036f5 	.word	0x000036f5
    3f34:	000035c9 	.word	0x000035c9
    3f38:	000036bd 	.word	0x000036bd

00003f3c <prvTraceStoreKernelCallWithNumericParamOnly>:
{
    3f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f3e:	0004      	movs	r4, r0
    3f40:	000d      	movs	r5, r1
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    3f42:	28fe      	cmp	r0, #254	; 0xfe
    3f44:	d81c      	bhi.n	3f80 <prvTraceStoreKernelCallWithNumericParamOnly+0x44>
	if (recorder_busy)
    3f46:	4b1c      	ldr	r3, [pc, #112]	; (3fb8 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    3f48:	681b      	ldr	r3, [r3, #0]
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	d11c      	bne.n	3f88 <prvTraceStoreKernelCallWithNumericParamOnly+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3f4e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3f52:	2301      	movs	r3, #1
    3f54:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    3f58:	4a17      	ldr	r2, [pc, #92]	; (3fb8 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    3f5a:	6813      	ldr	r3, [r2, #0]
    3f5c:	3301      	adds	r3, #1
    3f5e:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    3f60:	4b16      	ldr	r3, [pc, #88]	; (3fbc <prvTraceStoreKernelCallWithNumericParamOnly+0x80>)
    3f62:	681b      	ldr	r3, [r3, #0]
    3f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3f66:	2b00      	cmp	r3, #0
    3f68:	d003      	beq.n	3f72 <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
    3f6a:	4b15      	ldr	r3, [pc, #84]	; (3fc0 <prvTraceStoreKernelCallWithNumericParamOnly+0x84>)
    3f6c:	781b      	ldrb	r3, [r3, #0]
    3f6e:	2b00      	cmp	r3, #0
    3f70:	d10e      	bne.n	3f90 <prvTraceStoreKernelCallWithNumericParamOnly+0x54>
	trcCRITICAL_SECTION_END();
    3f72:	4a11      	ldr	r2, [pc, #68]	; (3fb8 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    3f74:	6813      	ldr	r3, [r2, #0]
    3f76:	3b01      	subs	r3, #1
    3f78:	6013      	str	r3, [r2, #0]
    3f7a:	f386 8810 	msr	PRIMASK, r6
}
    3f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    3f80:	4810      	ldr	r0, [pc, #64]	; (3fc4 <prvTraceStoreKernelCallWithNumericParamOnly+0x88>)
    3f82:	4b11      	ldr	r3, [pc, #68]	; (3fc8 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
    3f84:	4798      	blx	r3
    3f86:	e7fa      	b.n	3f7e <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
    3f88:	4810      	ldr	r0, [pc, #64]	; (3fcc <prvTraceStoreKernelCallWithNumericParamOnly+0x90>)
    3f8a:	4b0f      	ldr	r3, [pc, #60]	; (3fc8 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
    3f8c:	4798      	blx	r3
		return;
    3f8e:	e7f6      	b.n	3f7e <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
    3f90:	20ff      	movs	r0, #255	; 0xff
    3f92:	4b0f      	ldr	r3, [pc, #60]	; (3fd0 <prvTraceStoreKernelCallWithNumericParamOnly+0x94>)
    3f94:	4798      	blx	r3
    3f96:	0007      	movs	r7, r0
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
    3f98:	0029      	movs	r1, r5
    3f9a:	480e      	ldr	r0, [pc, #56]	; (3fd4 <prvTraceStoreKernelCallWithNumericParamOnly+0x98>)
    3f9c:	4b0e      	ldr	r3, [pc, #56]	; (3fd8 <prvTraceStoreKernelCallWithNumericParamOnly+0x9c>)
    3f9e:	4798      	blx	r3
    3fa0:	0005      	movs	r5, r0
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
    3fa2:	4b0e      	ldr	r3, [pc, #56]	; (3fdc <prvTraceStoreKernelCallWithNumericParamOnly+0xa0>)
    3fa4:	4798      	blx	r3
		if (kse != NULL)
    3fa6:	2800      	cmp	r0, #0
    3fa8:	d0e3      	beq.n	3f72 <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
			kse->dts = dts6;
    3faa:	7047      	strb	r7, [r0, #1]
			kse->type = (uint8_t)evtcode;
    3fac:	7004      	strb	r4, [r0, #0]
			kse->param = restParam;
    3fae:	8045      	strh	r5, [r0, #2]
			prvTraceUpdateCounters();
    3fb0:	4b0b      	ldr	r3, [pc, #44]	; (3fe0 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>)
    3fb2:	4798      	blx	r3
    3fb4:	e7dd      	b.n	3f72 <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
    3fb6:	46c0      	nop			; (mov r8, r8)
    3fb8:	20000448 	.word	0x20000448
    3fbc:	20000398 	.word	0x20000398
    3fc0:	2000039c 	.word	0x2000039c
    3fc4:	0000e598 	.word	0x0000e598
    3fc8:	00003571 	.word	0x00003571
    3fcc:	0000e5f0 	.word	0x0000e5f0
    3fd0:	00003b09 	.word	0x00003b09
    3fd4:	0000ffff 	.word	0x0000ffff
    3fd8:	000036f5 	.word	0x000036f5
    3fdc:	000035c9 	.word	0x000035c9
    3fe0:	000036bd 	.word	0x000036bd

00003fe4 <prvTraceStoreTaskswitch>:
{
    3fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fe6:	0004      	movs	r4, r0
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    3fe8:	280f      	cmp	r0, #15
    3fea:	d818      	bhi.n	401e <prvTraceStoreTaskswitch+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3fec:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3ff0:	2301      	movs	r3, #1
    3ff2:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
    3ff6:	4a26      	ldr	r2, [pc, #152]	; (4090 <prvTraceStoreTaskswitch+0xac>)
    3ff8:	6813      	ldr	r3, [r2, #0]
    3ffa:	3301      	adds	r3, #1
    3ffc:	6013      	str	r3, [r2, #0]
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
    3ffe:	4b25      	ldr	r3, [pc, #148]	; (4094 <prvTraceStoreTaskswitch+0xb0>)
    4000:	781b      	ldrb	r3, [r3, #0]
    4002:	4283      	cmp	r3, r0
    4004:	d004      	beq.n	4010 <prvTraceStoreTaskswitch+0x2c>
    4006:	4b24      	ldr	r3, [pc, #144]	; (4098 <prvTraceStoreTaskswitch+0xb4>)
    4008:	681b      	ldr	r3, [r3, #0]
    400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    400c:	2b00      	cmp	r3, #0
    400e:	d10a      	bne.n	4026 <prvTraceStoreTaskswitch+0x42>
	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
    4010:	4a1f      	ldr	r2, [pc, #124]	; (4090 <prvTraceStoreTaskswitch+0xac>)
    4012:	6813      	ldr	r3, [r2, #0]
    4014:	3b01      	subs	r3, #1
    4016:	6013      	str	r3, [r2, #0]
    4018:	f385 8810 	msr	PRIMASK, r5
}
    401c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    401e:	481f      	ldr	r0, [pc, #124]	; (409c <prvTraceStoreTaskswitch+0xb8>)
    4020:	4b1f      	ldr	r3, [pc, #124]	; (40a0 <prvTraceStoreTaskswitch+0xbc>)
    4022:	4798      	blx	r3
    4024:	e7fa      	b.n	401c <prvTraceStoreTaskswitch+0x38>
		isPendingContextSwitch = 0;
    4026:	2200      	movs	r2, #0
    4028:	4b1e      	ldr	r3, [pc, #120]	; (40a4 <prvTraceStoreTaskswitch+0xc0>)
    402a:	601a      	str	r2, [r3, #0]
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    402c:	481e      	ldr	r0, [pc, #120]	; (40a8 <prvTraceStoreTaskswitch+0xc4>)
    402e:	4b1f      	ldr	r3, [pc, #124]	; (40ac <prvTraceStoreTaskswitch+0xc8>)
    4030:	4798      	blx	r3
    4032:	0007      	movs	r7, r0
		handle_of_last_logged_task = task_handle;
    4034:	4b17      	ldr	r3, [pc, #92]	; (4094 <prvTraceStoreTaskswitch+0xb0>)
    4036:	701c      	strb	r4, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
    4038:	4b1d      	ldr	r3, [pc, #116]	; (40b0 <prvTraceStoreTaskswitch+0xcc>)
    403a:	4798      	blx	r3
    403c:	1e06      	subs	r6, r0, #0
		if (ts != NULL)
    403e:	d0e7      	beq.n	4010 <prvTraceStoreTaskswitch+0x2c>
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    4040:	4b14      	ldr	r3, [pc, #80]	; (4094 <prvTraceStoreTaskswitch+0xb0>)
    4042:	7818      	ldrb	r0, [r3, #0]
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    4044:	4b14      	ldr	r3, [pc, #80]	; (4098 <prvTraceStoreTaskswitch+0xb4>)
    4046:	681a      	ldr	r2, [r3, #0]
    4048:	2367      	movs	r3, #103	; 0x67
    404a:	5cd3      	ldrb	r3, [r2, r3]
    404c:	4283      	cmp	r3, r0
    404e:	d30f      	bcc.n	4070 <prvTraceStoreTaskswitch+0x8c>
	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
    4050:	2103      	movs	r1, #3
    4052:	4b18      	ldr	r3, [pc, #96]	; (40b4 <prvTraceStoreTaskswitch+0xd0>)
    4054:	4798      	blx	r3
    4056:	4b10      	ldr	r3, [pc, #64]	; (4098 <prvTraceStoreTaskswitch+0xb4>)
    4058:	681b      	ldr	r3, [r3, #0]
    405a:	2273      	movs	r2, #115	; 0x73
    405c:	5c9a      	ldrb	r2, [r3, r2]
    405e:	181b      	adds	r3, r3, r0
    4060:	189b      	adds	r3, r3, r2
    4062:	339c      	adds	r3, #156	; 0x9c
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    4064:	781b      	ldrb	r3, [r3, #0]
    4066:	2b01      	cmp	r3, #1
    4068:	d105      	bne.n	4076 <prvTraceStoreTaskswitch+0x92>
				ts->type = TS_TASK_RESUME;
    406a:	3306      	adds	r3, #6
    406c:	7033      	strb	r3, [r6, #0]
    406e:	e004      	b.n	407a <prvTraceStoreTaskswitch+0x96>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    4070:	4811      	ldr	r0, [pc, #68]	; (40b8 <prvTraceStoreTaskswitch+0xd4>)
    4072:	4b0b      	ldr	r3, [pc, #44]	; (40a0 <prvTraceStoreTaskswitch+0xbc>)
    4074:	4798      	blx	r3
				ts->type = TS_TASK_BEGIN;
    4076:	2306      	movs	r3, #6
    4078:	7033      	strb	r3, [r6, #0]
			ts->dts = dts3;
    407a:	8077      	strh	r7, [r6, #2]
			ts->objHandle = hnd8;
    407c:	7074      	strb	r4, [r6, #1]
			prvTraceSetObjectState(TRACE_CLASS_TASK,
    407e:	4b05      	ldr	r3, [pc, #20]	; (4094 <prvTraceStoreTaskswitch+0xb0>)
    4080:	7819      	ldrb	r1, [r3, #0]
    4082:	2201      	movs	r2, #1
    4084:	2003      	movs	r0, #3
    4086:	4b0d      	ldr	r3, [pc, #52]	; (40bc <prvTraceStoreTaskswitch+0xd8>)
    4088:	4798      	blx	r3
			prvTraceUpdateCounters();
    408a:	4b0d      	ldr	r3, [pc, #52]	; (40c0 <prvTraceStoreTaskswitch+0xdc>)
    408c:	4798      	blx	r3
    408e:	e7bf      	b.n	4010 <prvTraceStoreTaskswitch+0x2c>
    4090:	20000448 	.word	0x20000448
    4094:	2000039c 	.word	0x2000039c
    4098:	20000398 	.word	0x20000398
    409c:	0000e7b8 	.word	0x0000e7b8
    40a0:	00003571 	.word	0x00003571
    40a4:	200003a4 	.word	0x200003a4
    40a8:	0000ffff 	.word	0x0000ffff
    40ac:	00003b09 	.word	0x00003b09
    40b0:	000035c9 	.word	0x000035c9
    40b4:	00003749 	.word	0x00003749
    40b8:	0000e800 	.word	0x0000e800
    40bc:	00003875 	.word	0x00003875
    40c0:	000036bd 	.word	0x000036bd

000040c4 <uiTraceStart>:
{
    40c4:	b570      	push	{r4, r5, r6, lr}
	if (RecorderDataPtr == NULL)
    40c6:	4b20      	ldr	r3, [pc, #128]	; (4148 <uiTraceStart+0x84>)
    40c8:	681b      	ldr	r3, [r3, #0]
    40ca:	2b00      	cmp	r3, #0
    40cc:	d00a      	beq.n	40e4 <uiTraceStart+0x20>
	if (RecorderDataPtr->recorderActive == 1)
    40ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
    40d0:	2801      	cmp	r0, #1
    40d2:	d006      	beq.n	40e2 <uiTraceStart+0x1e>
	if (traceErrorMessage == NULL)
    40d4:	4b1d      	ldr	r3, [pc, #116]	; (414c <uiTraceStart+0x88>)
    40d6:	681b      	ldr	r3, [r3, #0]
    40d8:	2b00      	cmp	r3, #0
    40da:	d008      	beq.n	40ee <uiTraceStart+0x2a>
	return RecorderDataPtr->recorderActive;
    40dc:	4b1a      	ldr	r3, [pc, #104]	; (4148 <uiTraceStart+0x84>)
    40de:	681b      	ldr	r3, [r3, #0]
    40e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
    40e2:	bd70      	pop	{r4, r5, r6, pc}
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
    40e4:	481a      	ldr	r0, [pc, #104]	; (4150 <uiTraceStart+0x8c>)
    40e6:	4b1b      	ldr	r3, [pc, #108]	; (4154 <uiTraceStart+0x90>)
    40e8:	4798      	blx	r3
    40ea:	2000      	movs	r0, #0
    40ec:	e7f9      	b.n	40e2 <uiTraceStart+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    40ee:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    40f2:	2201      	movs	r2, #1
    40f4:	f382 8810 	msr	PRIMASK, r2
		trcCRITICAL_SECTION_BEGIN();
    40f8:	4917      	ldr	r1, [pc, #92]	; (4158 <uiTraceStart+0x94>)
    40fa:	680b      	ldr	r3, [r1, #0]
    40fc:	3301      	adds	r3, #1
    40fe:	600b      	str	r3, [r1, #0]
		RecorderDataPtr->recorderActive = 1;
    4100:	4b11      	ldr	r3, [pc, #68]	; (4148 <uiTraceStart+0x84>)
    4102:	681b      	ldr	r3, [r3, #0]
    4104:	631a      	str	r2, [r3, #48]	; 0x30
		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
    4106:	4b15      	ldr	r3, [pc, #84]	; (415c <uiTraceStart+0x98>)
    4108:	4798      	blx	r3
    410a:	4b15      	ldr	r3, [pc, #84]	; (4160 <uiTraceStart+0x9c>)
    410c:	4798      	blx	r3
    410e:	b2c4      	uxtb	r4, r0
		if (handle == 0)
    4110:	2c00      	cmp	r4, #0
    4112:	d009      	beq.n	4128 <uiTraceStart+0x64>
		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
    4114:	0020      	movs	r0, r4
    4116:	4b13      	ldr	r3, [pc, #76]	; (4164 <uiTraceStart+0xa0>)
    4118:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
    411a:	4a0f      	ldr	r2, [pc, #60]	; (4158 <uiTraceStart+0x94>)
    411c:	6813      	ldr	r3, [r2, #0]
    411e:	3b01      	subs	r3, #1
    4120:	6013      	str	r3, [r2, #0]
    4122:	f385 8810 	msr	PRIMASK, r5
    4126:	e7d9      	b.n	40dc <uiTraceStart+0x18>
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
    4128:	2003      	movs	r0, #3
    412a:	4b0f      	ldr	r3, [pc, #60]	; (4168 <uiTraceStart+0xa4>)
    412c:	4798      	blx	r3
    412e:	0006      	movs	r6, r0
    4130:	0004      	movs	r4, r0
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
    4132:	4a0e      	ldr	r2, [pc, #56]	; (416c <uiTraceStart+0xa8>)
    4134:	0001      	movs	r1, r0
    4136:	2003      	movs	r0, #3
    4138:	4b0d      	ldr	r3, [pc, #52]	; (4170 <uiTraceStart+0xac>)
    413a:	4798      	blx	r3
			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
    413c:	2200      	movs	r2, #0
    413e:	0031      	movs	r1, r6
    4140:	2003      	movs	r0, #3
    4142:	4b0c      	ldr	r3, [pc, #48]	; (4174 <uiTraceStart+0xb0>)
    4144:	4798      	blx	r3
    4146:	e7e5      	b.n	4114 <uiTraceStart+0x50>
    4148:	20000398 	.word	0x20000398
    414c:	20000450 	.word	0x20000450
    4150:	0000e8bc 	.word	0x0000e8bc
    4154:	00003571 	.word	0x00003571
    4158:	20000448 	.word	0x20000448
    415c:	00003169 	.word	0x00003169
    4160:	000030a1 	.word	0x000030a1
    4164:	00003fe5 	.word	0x00003fe5
    4168:	0000390d 	.word	0x0000390d
    416c:	0000e900 	.word	0x0000e900
    4170:	000039e1 	.word	0x000039e1
    4174:	000037c1 	.word	0x000037c1

00004178 <vTraceStart>:
{
    4178:	b510      	push	{r4, lr}
	(void)uiTraceStart();
    417a:	4b01      	ldr	r3, [pc, #4]	; (4180 <vTraceStart+0x8>)
    417c:	4798      	blx	r3
}
    417e:	bd10      	pop	{r4, pc}
    4180:	000040c5 	.word	0x000040c5

00004184 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    4184:	0003      	movs	r3, r0
    4186:	3308      	adds	r3, #8
    4188:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    418a:	2201      	movs	r2, #1
    418c:	4252      	negs	r2, r2
    418e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    4190:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    4192:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    4194:	2300      	movs	r3, #0
    4196:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    4198:	4770      	bx	lr

0000419a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    419a:	2300      	movs	r3, #0
    419c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    419e:	4770      	bx	lr

000041a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    41a0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    41a2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    41a4:	689a      	ldr	r2, [r3, #8]
    41a6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    41a8:	689a      	ldr	r2, [r3, #8]
    41aa:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    41ac:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    41ae:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    41b0:	6803      	ldr	r3, [r0, #0]
    41b2:	3301      	adds	r3, #1
    41b4:	6003      	str	r3, [r0, #0]
}
    41b6:	4770      	bx	lr

000041b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    41b8:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    41ba:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    41bc:	0002      	movs	r2, r0
    41be:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
    41c0:	1c63      	adds	r3, r4, #1
    41c2:	d102      	bne.n	41ca <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
    41c4:	6902      	ldr	r2, [r0, #16]
    41c6:	e004      	b.n	41d2 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    41c8:	001a      	movs	r2, r3
    41ca:	6853      	ldr	r3, [r2, #4]
    41cc:	681d      	ldr	r5, [r3, #0]
    41ce:	42ac      	cmp	r4, r5
    41d0:	d2fa      	bcs.n	41c8 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    41d2:	6853      	ldr	r3, [r2, #4]
    41d4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    41d6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    41d8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    41da:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    41dc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    41de:	6803      	ldr	r3, [r0, #0]
    41e0:	3301      	adds	r3, #1
    41e2:	6003      	str	r3, [r0, #0]
}
    41e4:	bd30      	pop	{r4, r5, pc}

000041e6 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    41e6:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    41e8:	6842      	ldr	r2, [r0, #4]
    41ea:	6881      	ldr	r1, [r0, #8]
    41ec:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    41ee:	6882      	ldr	r2, [r0, #8]
    41f0:	6841      	ldr	r1, [r0, #4]
    41f2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    41f4:	685a      	ldr	r2, [r3, #4]
    41f6:	4290      	cmp	r0, r2
    41f8:	d006      	beq.n	4208 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    41fa:	2200      	movs	r2, #0
    41fc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    41fe:	681a      	ldr	r2, [r3, #0]
    4200:	3a01      	subs	r2, #1
    4202:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    4204:	6818      	ldr	r0, [r3, #0]
}
    4206:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    4208:	6882      	ldr	r2, [r0, #8]
    420a:	605a      	str	r2, [r3, #4]
    420c:	e7f5      	b.n	41fa <uxListRemove+0x14>
	...

00004210 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    4210:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
    4212:	2300      	movs	r3, #0
    4214:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    4216:	4b06      	ldr	r3, [pc, #24]	; (4230 <prvTaskExitError+0x20>)
    4218:	681b      	ldr	r3, [r3, #0]
    421a:	3301      	adds	r3, #1
    421c:	d001      	beq.n	4222 <prvTaskExitError+0x12>
    421e:	b672      	cpsid	i
    4220:	e7fe      	b.n	4220 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
    4222:	b672      	cpsid	i
	while( ulDummy == 0 )
    4224:	9b01      	ldr	r3, [sp, #4]
    4226:	2b00      	cmp	r3, #0
    4228:	d0fc      	beq.n	4224 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    422a:	b002      	add	sp, #8
    422c:	4770      	bx	lr
    422e:	46c0      	nop			; (mov r8, r8)
    4230:	20000094 	.word	0x20000094
	...

00004240 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    4240:	4a0b      	ldr	r2, [pc, #44]	; (4270 <pxCurrentTCBConst2>)
    4242:	6813      	ldr	r3, [r2, #0]
    4244:	6818      	ldr	r0, [r3, #0]
    4246:	3020      	adds	r0, #32
    4248:	f380 8809 	msr	PSP, r0
    424c:	2002      	movs	r0, #2
    424e:	f380 8814 	msr	CONTROL, r0
    4252:	f3bf 8f6f 	isb	sy
    4256:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    4258:	46ae      	mov	lr, r5
    425a:	bc08      	pop	{r3}
    425c:	bc04      	pop	{r2}
    425e:	b662      	cpsie	i
    4260:	4718      	bx	r3
    4262:	46c0      	nop			; (mov r8, r8)
    4264:	46c0      	nop			; (mov r8, r8)
    4266:	46c0      	nop			; (mov r8, r8)
    4268:	46c0      	nop			; (mov r8, r8)
    426a:	46c0      	nop			; (mov r8, r8)
    426c:	46c0      	nop			; (mov r8, r8)
    426e:	46c0      	nop			; (mov r8, r8)

00004270 <pxCurrentTCBConst2>:
    4270:	20003734 	.word	0x20003734

00004274 <pxPortInitialiseStack>:
{
    4274:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    4276:	1f03      	subs	r3, r0, #4
    4278:	2480      	movs	r4, #128	; 0x80
    427a:	0464      	lsls	r4, r4, #17
    427c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    427e:	3b04      	subs	r3, #4
    4280:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    4282:	3b04      	subs	r3, #4
    4284:	4902      	ldr	r1, [pc, #8]	; (4290 <pxPortInitialiseStack+0x1c>)
    4286:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    4288:	3b14      	subs	r3, #20
    428a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    428c:	3840      	subs	r0, #64	; 0x40
}
    428e:	bd10      	pop	{r4, pc}
    4290:	00004211 	.word	0x00004211

00004294 <SVC_Handler>:
}
    4294:	4770      	bx	lr
	...

00004298 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    4298:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    429a:	4b13      	ldr	r3, [pc, #76]	; (42e8 <xPortStartScheduler+0x50>)
    429c:	6819      	ldr	r1, [r3, #0]
    429e:	22ff      	movs	r2, #255	; 0xff
    42a0:	0412      	lsls	r2, r2, #16
    42a2:	430a      	orrs	r2, r1
    42a4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    42a6:	6819      	ldr	r1, [r3, #0]
    42a8:	22ff      	movs	r2, #255	; 0xff
    42aa:	0612      	lsls	r2, r2, #24
    42ac:	430a      	orrs	r2, r1
    42ae:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    42b0:	4d0e      	ldr	r5, [pc, #56]	; (42ec <xPortStartScheduler+0x54>)
    42b2:	2400      	movs	r4, #0
    42b4:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    42b6:	4b0e      	ldr	r3, [pc, #56]	; (42f0 <xPortStartScheduler+0x58>)
    42b8:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    42ba:	2000      	movs	r0, #0
    42bc:	4b0d      	ldr	r3, [pc, #52]	; (42f4 <xPortStartScheduler+0x5c>)
    42be:	4798      	blx	r3
    42c0:	21fa      	movs	r1, #250	; 0xfa
    42c2:	0089      	lsls	r1, r1, #2
    42c4:	4b0c      	ldr	r3, [pc, #48]	; (42f8 <xPortStartScheduler+0x60>)
    42c6:	4798      	blx	r3
    42c8:	3801      	subs	r0, #1
    42ca:	4b0c      	ldr	r3, [pc, #48]	; (42fc <xPortStartScheduler+0x64>)
    42cc:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    42ce:	2307      	movs	r3, #7
    42d0:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
    42d2:	4b0b      	ldr	r3, [pc, #44]	; (4300 <xPortStartScheduler+0x68>)
    42d4:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
    42d6:	4b0b      	ldr	r3, [pc, #44]	; (4304 <xPortStartScheduler+0x6c>)
    42d8:	4798      	blx	r3
	vTaskSwitchContext();
    42da:	4b0b      	ldr	r3, [pc, #44]	; (4308 <xPortStartScheduler+0x70>)
    42dc:	4798      	blx	r3
	prvTaskExitError();
    42de:	4b0b      	ldr	r3, [pc, #44]	; (430c <xPortStartScheduler+0x74>)
    42e0:	4798      	blx	r3
}
    42e2:	2000      	movs	r0, #0
    42e4:	bd70      	pop	{r4, r5, r6, pc}
    42e6:	46c0      	nop			; (mov r8, r8)
    42e8:	e000ed20 	.word	0xe000ed20
    42ec:	e000e010 	.word	0xe000e010
    42f0:	e000e018 	.word	0xe000e018
    42f4:	0000819d 	.word	0x0000819d
    42f8:	0000ab0d 	.word	0x0000ab0d
    42fc:	e000e014 	.word	0xe000e014
    4300:	20000094 	.word	0x20000094
    4304:	00004241 	.word	0x00004241
    4308:	00005df9 	.word	0x00005df9
    430c:	00004211 	.word	0x00004211

00004310 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    4310:	2280      	movs	r2, #128	; 0x80
    4312:	0552      	lsls	r2, r2, #21
    4314:	4b01      	ldr	r3, [pc, #4]	; (431c <vPortYield+0xc>)
    4316:	601a      	str	r2, [r3, #0]
}
    4318:	4770      	bx	lr
    431a:	46c0      	nop			; (mov r8, r8)
    431c:	e000ed04 	.word	0xe000ed04

00004320 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
    4320:	b672      	cpsid	i
    uxCriticalNesting++;
    4322:	4a04      	ldr	r2, [pc, #16]	; (4334 <vPortEnterCritical+0x14>)
    4324:	6813      	ldr	r3, [r2, #0]
    4326:	3301      	adds	r3, #1
    4328:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
    432a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    432e:	f3bf 8f6f 	isb	sy
}
    4332:	4770      	bx	lr
    4334:	20000094 	.word	0x20000094

00004338 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    4338:	4b06      	ldr	r3, [pc, #24]	; (4354 <vPortExitCritical+0x1c>)
    433a:	681b      	ldr	r3, [r3, #0]
    433c:	2b00      	cmp	r3, #0
    433e:	d101      	bne.n	4344 <vPortExitCritical+0xc>
    4340:	b672      	cpsid	i
    4342:	e7fe      	b.n	4342 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    4344:	3b01      	subs	r3, #1
    4346:	4a03      	ldr	r2, [pc, #12]	; (4354 <vPortExitCritical+0x1c>)
    4348:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    434a:	2b00      	cmp	r3, #0
    434c:	d100      	bne.n	4350 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
    434e:	b662      	cpsie	i
}
    4350:	4770      	bx	lr
    4352:	46c0      	nop			; (mov r8, r8)
    4354:	20000094 	.word	0x20000094

00004358 <ulSetInterruptMaskFromISR>:
	__asm volatile(
    4358:	f3ef 8010 	mrs	r0, PRIMASK
    435c:	b672      	cpsid	i
    435e:	4770      	bx	lr

00004360 <vClearInterruptMaskFromISR>:
	__asm volatile(
    4360:	f380 8810 	msr	PRIMASK, r0
    4364:	4770      	bx	lr
	...

00004370 <PendSV_Handler>:
	__asm volatile
    4370:	f3ef 8009 	mrs	r0, PSP
    4374:	4b0e      	ldr	r3, [pc, #56]	; (43b0 <pxCurrentTCBConst>)
    4376:	681a      	ldr	r2, [r3, #0]
    4378:	3820      	subs	r0, #32
    437a:	6010      	str	r0, [r2, #0]
    437c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    437e:	4644      	mov	r4, r8
    4380:	464d      	mov	r5, r9
    4382:	4656      	mov	r6, sl
    4384:	465f      	mov	r7, fp
    4386:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    4388:	b508      	push	{r3, lr}
    438a:	b672      	cpsid	i
    438c:	f001 fd34 	bl	5df8 <vTaskSwitchContext>
    4390:	b662      	cpsie	i
    4392:	bc0c      	pop	{r2, r3}
    4394:	6811      	ldr	r1, [r2, #0]
    4396:	6808      	ldr	r0, [r1, #0]
    4398:	3010      	adds	r0, #16
    439a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    439c:	46a0      	mov	r8, r4
    439e:	46a9      	mov	r9, r5
    43a0:	46b2      	mov	sl, r6
    43a2:	46bb      	mov	fp, r7
    43a4:	f380 8809 	msr	PSP, r0
    43a8:	3820      	subs	r0, #32
    43aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    43ac:	4718      	bx	r3
    43ae:	46c0      	nop			; (mov r8, r8)

000043b0 <pxCurrentTCBConst>:
    43b0:	20003734 	.word	0x20003734

000043b4 <SysTick_Handler>:
{
    43b4:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    43b6:	4b07      	ldr	r3, [pc, #28]	; (43d4 <SysTick_Handler+0x20>)
    43b8:	4798      	blx	r3
    43ba:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
    43bc:	4b06      	ldr	r3, [pc, #24]	; (43d8 <SysTick_Handler+0x24>)
    43be:	4798      	blx	r3
    43c0:	2800      	cmp	r0, #0
    43c2:	d003      	beq.n	43cc <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    43c4:	2280      	movs	r2, #128	; 0x80
    43c6:	0552      	lsls	r2, r2, #21
    43c8:	4b04      	ldr	r3, [pc, #16]	; (43dc <SysTick_Handler+0x28>)
    43ca:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    43cc:	0020      	movs	r0, r4
    43ce:	4b04      	ldr	r3, [pc, #16]	; (43e0 <SysTick_Handler+0x2c>)
    43d0:	4798      	blx	r3
}
    43d2:	bd10      	pop	{r4, pc}
    43d4:	00004359 	.word	0x00004359
    43d8:	00005aa1 	.word	0x00005aa1
    43dc:	e000ed04 	.word	0xe000ed04
    43e0:	00004361 	.word	0x00004361

000043e4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    43e4:	b570      	push	{r4, r5, r6, lr}
    43e6:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    43e8:	0743      	lsls	r3, r0, #29
    43ea:	d002      	beq.n	43f2 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    43ec:	2307      	movs	r3, #7
    43ee:	439c      	bics	r4, r3
    43f0:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
    43f2:	4b18      	ldr	r3, [pc, #96]	; (4454 <pvPortMalloc+0x70>)
    43f4:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    43f6:	4b18      	ldr	r3, [pc, #96]	; (4458 <pvPortMalloc+0x74>)
    43f8:	681b      	ldr	r3, [r3, #0]
    43fa:	2b00      	cmp	r3, #0
    43fc:	d017      	beq.n	442e <pvPortMalloc+0x4a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    43fe:	4b17      	ldr	r3, [pc, #92]	; (445c <pvPortMalloc+0x78>)
    4400:	681a      	ldr	r2, [r3, #0]
    4402:	18a3      	adds	r3, r4, r2
    4404:	4916      	ldr	r1, [pc, #88]	; (4460 <pvPortMalloc+0x7c>)
    4406:	428b      	cmp	r3, r1
    4408:	d818      	bhi.n	443c <pvPortMalloc+0x58>
    440a:	429a      	cmp	r2, r3
    440c:	d216      	bcs.n	443c <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    440e:	4912      	ldr	r1, [pc, #72]	; (4458 <pvPortMalloc+0x74>)
    4410:	680d      	ldr	r5, [r1, #0]
    4412:	18ad      	adds	r5, r5, r2
			xNextFreeByte += xWantedSize;
    4414:	4a11      	ldr	r2, [pc, #68]	; (445c <pvPortMalloc+0x78>)
    4416:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
    4418:	2d00      	cmp	r5, #0
    441a:	d00f      	beq.n	443c <pvPortMalloc+0x58>
    441c:	0022      	movs	r2, r4
    441e:	0029      	movs	r1, r5
    4420:	2094      	movs	r0, #148	; 0x94
    4422:	4b10      	ldr	r3, [pc, #64]	; (4464 <pvPortMalloc+0x80>)
    4424:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
    4426:	4b10      	ldr	r3, [pc, #64]	; (4468 <pvPortMalloc+0x84>)
    4428:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    442a:	0028      	movs	r0, r5
    442c:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    442e:	2207      	movs	r2, #7
    4430:	4b0e      	ldr	r3, [pc, #56]	; (446c <pvPortMalloc+0x88>)
    4432:	3308      	adds	r3, #8
    4434:	4393      	bics	r3, r2
    4436:	4a08      	ldr	r2, [pc, #32]	; (4458 <pvPortMalloc+0x74>)
    4438:	6013      	str	r3, [r2, #0]
    443a:	e7e0      	b.n	43fe <pvPortMalloc+0x1a>
		traceMALLOC( pvReturn, xWantedSize );
    443c:	0022      	movs	r2, r4
    443e:	2100      	movs	r1, #0
    4440:	20e8      	movs	r0, #232	; 0xe8
    4442:	4b08      	ldr	r3, [pc, #32]	; (4464 <pvPortMalloc+0x80>)
    4444:	4798      	blx	r3
	( void ) xTaskResumeAll();
    4446:	4b08      	ldr	r3, [pc, #32]	; (4468 <pvPortMalloc+0x84>)
    4448:	4798      	blx	r3
			vApplicationMallocFailedHook();
    444a:	4b09      	ldr	r3, [pc, #36]	; (4470 <pvPortMalloc+0x8c>)
    444c:	4798      	blx	r3
    444e:	2500      	movs	r5, #0
	return pvReturn;
    4450:	e7eb      	b.n	442a <pvPortMalloc+0x46>
    4452:	46c0      	nop			; (mov r8, r8)
    4454:	00005a85 	.word	0x00005a85
    4458:	20000464 	.word	0x20000464
    445c:	20003730 	.word	0x20003730
    4460:	000032bf 	.word	0x000032bf
    4464:	00003cd5 	.word	0x00003cd5
    4468:	00005c2d 	.word	0x00005c2d
    446c:	20000468 	.word	0x20000468
    4470:	000087c1 	.word	0x000087c1

00004474 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    4474:	2800      	cmp	r0, #0
    4476:	d001      	beq.n	447c <vPortFree+0x8>
    4478:	b672      	cpsid	i
    447a:	e7fe      	b.n	447a <vPortFree+0x6>
}
    447c:	4770      	bx	lr
	...

00004480 <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    4480:	4b02      	ldr	r3, [pc, #8]	; (448c <xPortGetFreeHeapSize+0xc>)
    4482:	681b      	ldr	r3, [r3, #0]
    4484:	20cb      	movs	r0, #203	; 0xcb
    4486:	0180      	lsls	r0, r0, #6
    4488:	1ac0      	subs	r0, r0, r3
}
    448a:	4770      	bx	lr
    448c:	20003730 	.word	0x20003730

00004490 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    4490:	b510      	push	{r4, lr}
    4492:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    4494:	4b03      	ldr	r3, [pc, #12]	; (44a4 <prvIsQueueEmpty+0x14>)
    4496:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    4498:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    449a:	4b03      	ldr	r3, [pc, #12]	; (44a8 <prvIsQueueEmpty+0x18>)
    449c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    449e:	4260      	negs	r0, r4
    44a0:	4160      	adcs	r0, r4

	return xReturn;
}
    44a2:	bd10      	pop	{r4, pc}
    44a4:	00004321 	.word	0x00004321
    44a8:	00004339 	.word	0x00004339

000044ac <prvCopyDataToQueue>:
{
    44ac:	b570      	push	{r4, r5, r6, lr}
    44ae:	0004      	movs	r4, r0
    44b0:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    44b2:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    44b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    44b6:	2a00      	cmp	r2, #0
    44b8:	d10b      	bne.n	44d2 <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
    44ba:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    44bc:	6823      	ldr	r3, [r4, #0]
    44be:	4283      	cmp	r3, r0
    44c0:	d104      	bne.n	44cc <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    44c2:	6860      	ldr	r0, [r4, #4]
    44c4:	4b16      	ldr	r3, [pc, #88]	; (4520 <prvCopyDataToQueue+0x74>)
    44c6:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    44c8:	2300      	movs	r3, #0
    44ca:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    44cc:	3501      	adds	r5, #1
    44ce:	63a5      	str	r5, [r4, #56]	; 0x38
}
    44d0:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    44d2:	2e00      	cmp	r6, #0
    44d4:	d10e      	bne.n	44f4 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    44d6:	6880      	ldr	r0, [r0, #8]
    44d8:	4b12      	ldr	r3, [pc, #72]	; (4524 <prvCopyDataToQueue+0x78>)
    44da:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    44dc:	68a3      	ldr	r3, [r4, #8]
    44de:	6c22      	ldr	r2, [r4, #64]	; 0x40
    44e0:	4694      	mov	ip, r2
    44e2:	4463      	add	r3, ip
    44e4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
    44e6:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    44e8:	6862      	ldr	r2, [r4, #4]
    44ea:	4293      	cmp	r3, r2
    44ec:	d3ee      	bcc.n	44cc <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    44ee:	6823      	ldr	r3, [r4, #0]
    44f0:	60a3      	str	r3, [r4, #8]
    44f2:	e7eb      	b.n	44cc <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    44f4:	68c0      	ldr	r0, [r0, #12]
    44f6:	4b0b      	ldr	r3, [pc, #44]	; (4524 <prvCopyDataToQueue+0x78>)
    44f8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    44fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    44fc:	425b      	negs	r3, r3
    44fe:	68e2      	ldr	r2, [r4, #12]
    4500:	18d2      	adds	r2, r2, r3
    4502:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    4504:	6821      	ldr	r1, [r4, #0]
    4506:	428a      	cmp	r2, r1
    4508:	d203      	bcs.n	4512 <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    450a:	6862      	ldr	r2, [r4, #4]
    450c:	4694      	mov	ip, r2
    450e:	4463      	add	r3, ip
    4510:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    4512:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    4514:	2e02      	cmp	r6, #2
    4516:	d1d9      	bne.n	44cc <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    4518:	4285      	cmp	r5, r0
    451a:	d0d7      	beq.n	44cc <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
    451c:	3d01      	subs	r5, #1
    451e:	e7d5      	b.n	44cc <prvCopyDataToQueue+0x20>
    4520:	0000637d 	.word	0x0000637d
    4524:	00008845 	.word	0x00008845

00004528 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    4528:	b5f0      	push	{r4, r5, r6, r7, lr}
    452a:	46ce      	mov	lr, r9
    452c:	4647      	mov	r7, r8
    452e:	b580      	push	{r7, lr}
    4530:	b083      	sub	sp, #12
    4532:	9001      	str	r0, [sp, #4]
    4534:	9100      	str	r1, [sp, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    4536:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    4538:	2c00      	cmp	r4, #0
    453a:	d005      	beq.n	4548 <prvNotifyQueueSetContainer+0x20>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    453c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    453e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4540:	429a      	cmp	r2, r3
    4542:	d303      	bcc.n	454c <prvNotifyQueueSetContainer+0x24>
    4544:	b672      	cpsid	i
    4546:	e7fe      	b.n	4546 <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer );
    4548:	b672      	cpsid	i
    454a:	e7fe      	b.n	454a <prvNotifyQueueSetContainer+0x22>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    454c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    454e:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    4550:	4293      	cmp	r3, r2
    4552:	d805      	bhi.n	4560 <prvNotifyQueueSetContainer+0x38>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    4554:	0030      	movs	r0, r6
    4556:	b003      	add	sp, #12
    4558:	bc0c      	pop	{r2, r3}
    455a:	4690      	mov	r8, r2
    455c:	4699      	mov	r9, r3
    455e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    4560:	2345      	movs	r3, #69	; 0x45
    4562:	5ce5      	ldrb	r5, [r4, r3]
    4564:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND( pxQueueSetContainer );
    4566:	4b2c      	ldr	r3, [pc, #176]	; (4618 <prvNotifyQueueSetContainer+0xf0>)
    4568:	4798      	blx	r3
    456a:	4b2c      	ldr	r3, [pc, #176]	; (461c <prvNotifyQueueSetContainer+0xf4>)
    456c:	4798      	blx	r3
    456e:	4b2c      	ldr	r3, [pc, #176]	; (4620 <prvNotifyQueueSetContainer+0xf8>)
    4570:	881b      	ldrh	r3, [r3, #0]
    4572:	4203      	tst	r3, r0
    4574:	d01e      	beq.n	45b4 <prvNotifyQueueSetContainer+0x8c>
    4576:	0020      	movs	r0, r4
    4578:	4b2a      	ldr	r3, [pc, #168]	; (4624 <prvNotifyQueueSetContainer+0xfc>)
    457a:	4798      	blx	r3
    457c:	4b28      	ldr	r3, [pc, #160]	; (4620 <prvNotifyQueueSetContainer+0xf8>)
    457e:	881b      	ldrh	r3, [r3, #0]
    4580:	4203      	tst	r3, r0
    4582:	d017      	beq.n	45b4 <prvNotifyQueueSetContainer+0x8c>
    4584:	3625      	adds	r6, #37	; 0x25
    4586:	9b00      	ldr	r3, [sp, #0]
    4588:	2b00      	cmp	r3, #0
    458a:	d106      	bne.n	459a <prvNotifyQueueSetContainer+0x72>
    458c:	0020      	movs	r0, r4
    458e:	4b26      	ldr	r3, [pc, #152]	; (4628 <prvNotifyQueueSetContainer+0x100>)
    4590:	4798      	blx	r3
    4592:	4b26      	ldr	r3, [pc, #152]	; (462c <prvNotifyQueueSetContainer+0x104>)
    4594:	5c1e      	ldrb	r6, [r3, r0]
    4596:	3620      	adds	r6, #32
    4598:	b2f6      	uxtb	r6, r6
    459a:	0020      	movs	r0, r4
    459c:	4b22      	ldr	r3, [pc, #136]	; (4628 <prvNotifyQueueSetContainer+0x100>)
    459e:	4798      	blx	r3
    45a0:	4b22      	ldr	r3, [pc, #136]	; (462c <prvNotifyQueueSetContainer+0x104>)
    45a2:	5c1f      	ldrb	r7, [r3, r0]
    45a4:	0020      	movs	r0, r4
    45a6:	4b22      	ldr	r3, [pc, #136]	; (4630 <prvNotifyQueueSetContainer+0x108>)
    45a8:	4798      	blx	r3
    45aa:	b2c2      	uxtb	r2, r0
    45ac:	0039      	movs	r1, r7
    45ae:	0030      	movs	r0, r6
    45b0:	4b20      	ldr	r3, [pc, #128]	; (4634 <prvNotifyQueueSetContainer+0x10c>)
    45b2:	4798      	blx	r3
    45b4:	0020      	movs	r0, r4
    45b6:	4f1c      	ldr	r7, [pc, #112]	; (4628 <prvNotifyQueueSetContainer+0x100>)
    45b8:	47b8      	blx	r7
    45ba:	4e1c      	ldr	r6, [pc, #112]	; (462c <prvNotifyQueueSetContainer+0x104>)
    45bc:	5c33      	ldrb	r3, [r6, r0]
    45be:	4698      	mov	r8, r3
    45c0:	0020      	movs	r0, r4
    45c2:	4b1b      	ldr	r3, [pc, #108]	; (4630 <prvNotifyQueueSetContainer+0x108>)
    45c4:	4798      	blx	r3
    45c6:	b2c3      	uxtb	r3, r0
    45c8:	4699      	mov	r9, r3
    45ca:	0020      	movs	r0, r4
    45cc:	47b8      	blx	r7
    45ce:	5c33      	ldrb	r3, [r6, r0]
    45d0:	2b02      	cmp	r3, #2
    45d2:	d019      	beq.n	4608 <prvNotifyQueueSetContainer+0xe0>
    45d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    45d6:	3201      	adds	r2, #1
    45d8:	b2d2      	uxtb	r2, r2
    45da:	4649      	mov	r1, r9
    45dc:	4640      	mov	r0, r8
    45de:	4b16      	ldr	r3, [pc, #88]	; (4638 <prvNotifyQueueSetContainer+0x110>)
    45e0:	4798      	blx	r3
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    45e2:	9a00      	ldr	r2, [sp, #0]
    45e4:	a901      	add	r1, sp, #4
    45e6:	0020      	movs	r0, r4
    45e8:	4b14      	ldr	r3, [pc, #80]	; (463c <prvNotifyQueueSetContainer+0x114>)
    45ea:	4798      	blx	r3
    45ec:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
    45ee:	1c6b      	adds	r3, r5, #1
    45f0:	d10c      	bne.n	460c <prvNotifyQueueSetContainer+0xe4>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    45f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    45f4:	2b00      	cmp	r3, #0
    45f6:	d0ad      	beq.n	4554 <prvNotifyQueueSetContainer+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    45f8:	0020      	movs	r0, r4
    45fa:	3024      	adds	r0, #36	; 0x24
    45fc:	4b10      	ldr	r3, [pc, #64]	; (4640 <prvNotifyQueueSetContainer+0x118>)
    45fe:	4798      	blx	r3
    4600:	2800      	cmp	r0, #0
    4602:	d0a7      	beq.n	4554 <prvNotifyQueueSetContainer+0x2c>
						xReturn = pdTRUE;
    4604:	2601      	movs	r6, #1
    4606:	e7a5      	b.n	4554 <prvNotifyQueueSetContainer+0x2c>
			traceQUEUE_SEND( pxQueueSetContainer );
    4608:	2200      	movs	r2, #0
    460a:	e7e6      	b.n	45da <prvNotifyQueueSetContainer+0xb2>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    460c:	3501      	adds	r5, #1
    460e:	b26d      	sxtb	r5, r5
    4610:	2345      	movs	r3, #69	; 0x45
    4612:	54e5      	strb	r5, [r4, r3]
    4614:	e79e      	b.n	4554 <prvNotifyQueueSetContainer+0x2c>
    4616:	46c0      	nop			; (mov r8, r8)
    4618:	00003169 	.word	0x00003169
    461c:	000030b1 	.word	0x000030b1
    4620:	2000008c 	.word	0x2000008c
    4624:	00003115 	.word	0x00003115
    4628:	00003095 	.word	0x00003095
    462c:	20000084 	.word	0x20000084
    4630:	00003105 	.word	0x00003105
    4634:	00003da1 	.word	0x00003da1
    4638:	00003875 	.word	0x00003875
    463c:	000044ad 	.word	0x000044ad
    4640:	000060dd 	.word	0x000060dd

00004644 <prvCopyDataFromQueue>:
{
    4644:	b510      	push	{r4, lr}
    4646:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    4648:	6c02      	ldr	r2, [r0, #64]	; 0x40
    464a:	2a00      	cmp	r2, #0
    464c:	d00b      	beq.n	4666 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    464e:	68c3      	ldr	r3, [r0, #12]
    4650:	189b      	adds	r3, r3, r2
    4652:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    4654:	6841      	ldr	r1, [r0, #4]
    4656:	428b      	cmp	r3, r1
    4658:	d301      	bcc.n	465e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    465a:	6803      	ldr	r3, [r0, #0]
    465c:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    465e:	68c1      	ldr	r1, [r0, #12]
    4660:	0020      	movs	r0, r4
    4662:	4b01      	ldr	r3, [pc, #4]	; (4668 <prvCopyDataFromQueue+0x24>)
    4664:	4798      	blx	r3
}
    4666:	bd10      	pop	{r4, pc}
    4668:	00008845 	.word	0x00008845

0000466c <prvUnlockQueue>:
{
    466c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    466e:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
    4670:	4b25      	ldr	r3, [pc, #148]	; (4708 <prvUnlockQueue+0x9c>)
    4672:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    4674:	2345      	movs	r3, #69	; 0x45
    4676:	5cfc      	ldrb	r4, [r7, r3]
    4678:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    467a:	2c00      	cmp	r4, #0
    467c:	dd1c      	ble.n	46b8 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    467e:	4e23      	ldr	r6, [pc, #140]	; (470c <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4680:	4d23      	ldr	r5, [pc, #140]	; (4710 <prvUnlockQueue+0xa4>)
    4682:	e00b      	b.n	469c <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4686:	2b00      	cmp	r3, #0
    4688:	d016      	beq.n	46b8 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    468a:	0038      	movs	r0, r7
    468c:	3024      	adds	r0, #36	; 0x24
    468e:	47a8      	blx	r5
    4690:	2800      	cmp	r0, #0
    4692:	d10e      	bne.n	46b2 <prvUnlockQueue+0x46>
    4694:	3c01      	subs	r4, #1
    4696:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    4698:	2c00      	cmp	r4, #0
    469a:	d00d      	beq.n	46b8 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    469c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    469e:	2b00      	cmp	r3, #0
    46a0:	d0f0      	beq.n	4684 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    46a2:	2100      	movs	r1, #0
    46a4:	0038      	movs	r0, r7
    46a6:	47b0      	blx	r6
    46a8:	2800      	cmp	r0, #0
    46aa:	d0f3      	beq.n	4694 <prvUnlockQueue+0x28>
						vTaskMissedYield();
    46ac:	4b19      	ldr	r3, [pc, #100]	; (4714 <prvUnlockQueue+0xa8>)
    46ae:	4798      	blx	r3
    46b0:	e7f0      	b.n	4694 <prvUnlockQueue+0x28>
							vTaskMissedYield();
    46b2:	4b18      	ldr	r3, [pc, #96]	; (4714 <prvUnlockQueue+0xa8>)
    46b4:	4798      	blx	r3
    46b6:	e7ed      	b.n	4694 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
    46b8:	22ff      	movs	r2, #255	; 0xff
    46ba:	2345      	movs	r3, #69	; 0x45
    46bc:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    46be:	4b16      	ldr	r3, [pc, #88]	; (4718 <prvUnlockQueue+0xac>)
    46c0:	4798      	blx	r3
	taskENTER_CRITICAL();
    46c2:	4b11      	ldr	r3, [pc, #68]	; (4708 <prvUnlockQueue+0x9c>)
    46c4:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    46c6:	2344      	movs	r3, #68	; 0x44
    46c8:	5cfc      	ldrb	r4, [r7, r3]
    46ca:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    46cc:	2c00      	cmp	r4, #0
    46ce:	dd14      	ble.n	46fa <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    46d0:	693b      	ldr	r3, [r7, #16]
    46d2:	2b00      	cmp	r3, #0
    46d4:	d011      	beq.n	46fa <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    46d6:	003d      	movs	r5, r7
    46d8:	3510      	adds	r5, #16
    46da:	4e0d      	ldr	r6, [pc, #52]	; (4710 <prvUnlockQueue+0xa4>)
    46dc:	e006      	b.n	46ec <prvUnlockQueue+0x80>
    46de:	3c01      	subs	r4, #1
    46e0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    46e2:	2c00      	cmp	r4, #0
    46e4:	d009      	beq.n	46fa <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    46e6:	693b      	ldr	r3, [r7, #16]
    46e8:	2b00      	cmp	r3, #0
    46ea:	d006      	beq.n	46fa <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    46ec:	0028      	movs	r0, r5
    46ee:	47b0      	blx	r6
    46f0:	2800      	cmp	r0, #0
    46f2:	d0f4      	beq.n	46de <prvUnlockQueue+0x72>
					vTaskMissedYield();
    46f4:	4b07      	ldr	r3, [pc, #28]	; (4714 <prvUnlockQueue+0xa8>)
    46f6:	4798      	blx	r3
    46f8:	e7f1      	b.n	46de <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
    46fa:	22ff      	movs	r2, #255	; 0xff
    46fc:	2344      	movs	r3, #68	; 0x44
    46fe:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    4700:	4b05      	ldr	r3, [pc, #20]	; (4718 <prvUnlockQueue+0xac>)
    4702:	4798      	blx	r3
}
    4704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4706:	46c0      	nop			; (mov r8, r8)
    4708:	00004321 	.word	0x00004321
    470c:	00004529 	.word	0x00004529
    4710:	000060dd 	.word	0x000060dd
    4714:	00006219 	.word	0x00006219
    4718:	00004339 	.word	0x00004339

0000471c <xQueueGenericReset>:
{
    471c:	b570      	push	{r4, r5, r6, lr}
    471e:	0004      	movs	r4, r0
    4720:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    4722:	2800      	cmp	r0, #0
    4724:	d021      	beq.n	476a <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
    4726:	4b17      	ldr	r3, [pc, #92]	; (4784 <xQueueGenericReset+0x68>)
    4728:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    472a:	6822      	ldr	r2, [r4, #0]
    472c:	6c21      	ldr	r1, [r4, #64]	; 0x40
    472e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4730:	434b      	muls	r3, r1
    4732:	18d0      	adds	r0, r2, r3
    4734:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    4736:	2000      	movs	r0, #0
    4738:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    473a:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    473c:	1a5b      	subs	r3, r3, r1
    473e:	18d3      	adds	r3, r2, r3
    4740:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    4742:	23ff      	movs	r3, #255	; 0xff
    4744:	2244      	movs	r2, #68	; 0x44
    4746:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    4748:	3201      	adds	r2, #1
    474a:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
    474c:	2d00      	cmp	r5, #0
    474e:	d111      	bne.n	4774 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4750:	6923      	ldr	r3, [r4, #16]
    4752:	2b00      	cmp	r3, #0
    4754:	d005      	beq.n	4762 <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4756:	0020      	movs	r0, r4
    4758:	3010      	adds	r0, #16
    475a:	4b0b      	ldr	r3, [pc, #44]	; (4788 <xQueueGenericReset+0x6c>)
    475c:	4798      	blx	r3
    475e:	2800      	cmp	r0, #0
    4760:	d105      	bne.n	476e <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
    4762:	4b0a      	ldr	r3, [pc, #40]	; (478c <xQueueGenericReset+0x70>)
    4764:	4798      	blx	r3
}
    4766:	2001      	movs	r0, #1
    4768:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    476a:	b672      	cpsid	i
    476c:	e7fe      	b.n	476c <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
    476e:	4b08      	ldr	r3, [pc, #32]	; (4790 <xQueueGenericReset+0x74>)
    4770:	4798      	blx	r3
    4772:	e7f6      	b.n	4762 <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    4774:	0020      	movs	r0, r4
    4776:	3010      	adds	r0, #16
    4778:	4d06      	ldr	r5, [pc, #24]	; (4794 <xQueueGenericReset+0x78>)
    477a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    477c:	0020      	movs	r0, r4
    477e:	3024      	adds	r0, #36	; 0x24
    4780:	47a8      	blx	r5
    4782:	e7ee      	b.n	4762 <xQueueGenericReset+0x46>
    4784:	00004321 	.word	0x00004321
    4788:	000060dd 	.word	0x000060dd
    478c:	00004339 	.word	0x00004339
    4790:	00004311 	.word	0x00004311
    4794:	00004185 	.word	0x00004185

00004798 <xQueueGenericCreate>:
	{
    4798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    479a:	0006      	movs	r6, r0
    479c:	000d      	movs	r5, r1
    479e:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    47a0:	2800      	cmp	r0, #0
    47a2:	d101      	bne.n	47a8 <xQueueGenericCreate+0x10>
    47a4:	b672      	cpsid	i
    47a6:	e7fe      	b.n	47a6 <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    47a8:	0008      	movs	r0, r1
    47aa:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    47ac:	3054      	adds	r0, #84	; 0x54
    47ae:	4b38      	ldr	r3, [pc, #224]	; (4890 <xQueueGenericCreate+0xf8>)
    47b0:	4798      	blx	r3
    47b2:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    47b4:	d05b      	beq.n	486e <xQueueGenericCreate+0xd6>
	if( uxItemSize == ( UBaseType_t ) 0 )
    47b6:	2d00      	cmp	r5, #0
    47b8:	d13b      	bne.n	4832 <xQueueGenericCreate+0x9a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    47ba:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    47bc:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    47be:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    47c0:	2101      	movs	r1, #1
    47c2:	0020      	movs	r0, r4
    47c4:	4b33      	ldr	r3, [pc, #204]	; (4894 <xQueueGenericCreate+0xfc>)
    47c6:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    47c8:	2350      	movs	r3, #80	; 0x50
    47ca:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
    47cc:	2300      	movs	r3, #0
    47ce:	64a3      	str	r3, [r4, #72]	; 0x48
	traceQUEUE_CREATE( pxNewQueue );
    47d0:	0020      	movs	r0, r4
    47d2:	4e31      	ldr	r6, [pc, #196]	; (4898 <xQueueGenericCreate+0x100>)
    47d4:	47b0      	blx	r6
    47d6:	4d31      	ldr	r5, [pc, #196]	; (489c <xQueueGenericCreate+0x104>)
    47d8:	5c28      	ldrb	r0, [r5, r0]
    47da:	4b31      	ldr	r3, [pc, #196]	; (48a0 <xQueueGenericCreate+0x108>)
    47dc:	4798      	blx	r3
    47de:	b281      	uxth	r1, r0
    47e0:	0020      	movs	r0, r4
    47e2:	4b30      	ldr	r3, [pc, #192]	; (48a4 <xQueueGenericCreate+0x10c>)
    47e4:	4798      	blx	r3
    47e6:	4b30      	ldr	r3, [pc, #192]	; (48a8 <xQueueGenericCreate+0x110>)
    47e8:	8819      	ldrh	r1, [r3, #0]
    47ea:	0020      	movs	r0, r4
    47ec:	4b2f      	ldr	r3, [pc, #188]	; (48ac <xQueueGenericCreate+0x114>)
    47ee:	4798      	blx	r3
    47f0:	0020      	movs	r0, r4
    47f2:	47b0      	blx	r6
    47f4:	5c2d      	ldrb	r5, [r5, r0]
    47f6:	0020      	movs	r0, r4
    47f8:	4b2d      	ldr	r3, [pc, #180]	; (48b0 <xQueueGenericCreate+0x118>)
    47fa:	4798      	blx	r3
    47fc:	b2c1      	uxtb	r1, r0
    47fe:	0028      	movs	r0, r5
    4800:	4b2c      	ldr	r3, [pc, #176]	; (48b4 <xQueueGenericCreate+0x11c>)
    4802:	4798      	blx	r3
    4804:	4b2c      	ldr	r3, [pc, #176]	; (48b8 <xQueueGenericCreate+0x120>)
    4806:	4798      	blx	r3
    4808:	4b2c      	ldr	r3, [pc, #176]	; (48bc <xQueueGenericCreate+0x124>)
    480a:	4798      	blx	r3
    480c:	4b2c      	ldr	r3, [pc, #176]	; (48c0 <xQueueGenericCreate+0x128>)
    480e:	881b      	ldrh	r3, [r3, #0]
    4810:	4203      	tst	r3, r0
    4812:	d112      	bne.n	483a <xQueueGenericCreate+0xa2>
    4814:	0020      	movs	r0, r4
    4816:	4b20      	ldr	r3, [pc, #128]	; (4898 <xQueueGenericCreate+0x100>)
    4818:	4798      	blx	r3
    481a:	4b20      	ldr	r3, [pc, #128]	; (489c <xQueueGenericCreate+0x104>)
    481c:	5c1d      	ldrb	r5, [r3, r0]
    481e:	0020      	movs	r0, r4
    4820:	4b23      	ldr	r3, [pc, #140]	; (48b0 <xQueueGenericCreate+0x118>)
    4822:	4798      	blx	r3
    4824:	b2c1      	uxtb	r1, r0
    4826:	2200      	movs	r2, #0
    4828:	0028      	movs	r0, r5
    482a:	4b26      	ldr	r3, [pc, #152]	; (48c4 <xQueueGenericCreate+0x12c>)
    482c:	4798      	blx	r3
	}
    482e:	0020      	movs	r0, r4
    4830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    4832:	0003      	movs	r3, r0
    4834:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    4836:	6003      	str	r3, [r0, #0]
    4838:	e7c0      	b.n	47bc <xQueueGenericCreate+0x24>
	traceQUEUE_CREATE( pxNewQueue );
    483a:	0020      	movs	r0, r4
    483c:	4b22      	ldr	r3, [pc, #136]	; (48c8 <xQueueGenericCreate+0x130>)
    483e:	4798      	blx	r3
    4840:	4b1f      	ldr	r3, [pc, #124]	; (48c0 <xQueueGenericCreate+0x128>)
    4842:	881b      	ldrh	r3, [r3, #0]
    4844:	4203      	tst	r3, r0
    4846:	d0e5      	beq.n	4814 <xQueueGenericCreate+0x7c>
    4848:	0020      	movs	r0, r4
    484a:	4f13      	ldr	r7, [pc, #76]	; (4898 <xQueueGenericCreate+0x100>)
    484c:	47b8      	blx	r7
    484e:	4e13      	ldr	r6, [pc, #76]	; (489c <xQueueGenericCreate+0x104>)
    4850:	5c35      	ldrb	r5, [r6, r0]
    4852:	3518      	adds	r5, #24
    4854:	b2ed      	uxtb	r5, r5
    4856:	0020      	movs	r0, r4
    4858:	47b8      	blx	r7
    485a:	5c36      	ldrb	r6, [r6, r0]
    485c:	0020      	movs	r0, r4
    485e:	4b14      	ldr	r3, [pc, #80]	; (48b0 <xQueueGenericCreate+0x118>)
    4860:	4798      	blx	r3
    4862:	b2c2      	uxtb	r2, r0
    4864:	0031      	movs	r1, r6
    4866:	0028      	movs	r0, r5
    4868:	4b18      	ldr	r3, [pc, #96]	; (48cc <xQueueGenericCreate+0x134>)
    486a:	4798      	blx	r3
    486c:	e7d2      	b.n	4814 <xQueueGenericCreate+0x7c>
			traceQUEUE_CREATE_FAILED( ucQueueType );
    486e:	4b12      	ldr	r3, [pc, #72]	; (48b8 <xQueueGenericCreate+0x120>)
    4870:	4798      	blx	r3
    4872:	4b12      	ldr	r3, [pc, #72]	; (48bc <xQueueGenericCreate+0x124>)
    4874:	4798      	blx	r3
    4876:	4b12      	ldr	r3, [pc, #72]	; (48c0 <xQueueGenericCreate+0x128>)
    4878:	881b      	ldrh	r3, [r3, #0]
    487a:	4203      	tst	r3, r0
    487c:	d0d7      	beq.n	482e <xQueueGenericCreate+0x96>
    487e:	4b07      	ldr	r3, [pc, #28]	; (489c <xQueueGenericCreate+0x104>)
    4880:	5dd8      	ldrb	r0, [r3, r7]
    4882:	3040      	adds	r0, #64	; 0x40
    4884:	b2c0      	uxtb	r0, r0
    4886:	2100      	movs	r1, #0
    4888:	4b11      	ldr	r3, [pc, #68]	; (48d0 <xQueueGenericCreate+0x138>)
    488a:	4798      	blx	r3
    488c:	e7cf      	b.n	482e <xQueueGenericCreate+0x96>
    488e:	46c0      	nop			; (mov r8, r8)
    4890:	000043e5 	.word	0x000043e5
    4894:	0000471d 	.word	0x0000471d
    4898:	00003095 	.word	0x00003095
    489c:	20000084 	.word	0x20000084
    48a0:	0000390d 	.word	0x0000390d
    48a4:	00003125 	.word	0x00003125
    48a8:	2000008a 	.word	0x2000008a
    48ac:	00003145 	.word	0x00003145
    48b0:	00003105 	.word	0x00003105
    48b4:	0000379d 	.word	0x0000379d
    48b8:	00003169 	.word	0x00003169
    48bc:	000030b1 	.word	0x000030b1
    48c0:	2000008c 	.word	0x2000008c
    48c4:	00003875 	.word	0x00003875
    48c8:	00003115 	.word	0x00003115
    48cc:	00003da1 	.word	0x00003da1
    48d0:	00003f3d 	.word	0x00003f3d

000048d4 <xQueueGenericSend>:
{
    48d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    48d6:	46ce      	mov	lr, r9
    48d8:	4647      	mov	r7, r8
    48da:	b580      	push	{r7, lr}
    48dc:	b085      	sub	sp, #20
    48de:	0004      	movs	r4, r0
    48e0:	9100      	str	r1, [sp, #0]
    48e2:	9201      	str	r2, [sp, #4]
    48e4:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    48e6:	2800      	cmp	r0, #0
    48e8:	d00d      	beq.n	4906 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    48ea:	9b00      	ldr	r3, [sp, #0]
    48ec:	2b00      	cmp	r3, #0
    48ee:	d00c      	beq.n	490a <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    48f0:	2d02      	cmp	r5, #2
    48f2:	d00f      	beq.n	4914 <xQueueGenericSend+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    48f4:	4bab      	ldr	r3, [pc, #684]	; (4ba4 <xQueueGenericSend+0x2d0>)
    48f6:	4798      	blx	r3
    48f8:	2800      	cmp	r0, #0
    48fa:	d110      	bne.n	491e <xQueueGenericSend+0x4a>
    48fc:	9b01      	ldr	r3, [sp, #4]
    48fe:	2b00      	cmp	r3, #0
    4900:	d010      	beq.n	4924 <xQueueGenericSend+0x50>
    4902:	b672      	cpsid	i
    4904:	e7fe      	b.n	4904 <xQueueGenericSend+0x30>
	configASSERT( pxQueue );
    4906:	b672      	cpsid	i
    4908:	e7fe      	b.n	4908 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    490a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    490c:	2b00      	cmp	r3, #0
    490e:	d0ef      	beq.n	48f0 <xQueueGenericSend+0x1c>
    4910:	b672      	cpsid	i
    4912:	e7fe      	b.n	4912 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    4914:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4916:	2b01      	cmp	r3, #1
    4918:	d0ec      	beq.n	48f4 <xQueueGenericSend+0x20>
    491a:	b672      	cpsid	i
    491c:	e7fe      	b.n	491c <xQueueGenericSend+0x48>
    491e:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    4920:	4ea1      	ldr	r6, [pc, #644]	; (4ba8 <xQueueGenericSend+0x2d4>)
    4922:	e0bc      	b.n	4a9e <xQueueGenericSend+0x1ca>
    4924:	2700      	movs	r7, #0
    4926:	e7fb      	b.n	4920 <xQueueGenericSend+0x4c>
				traceQUEUE_SEND( pxQueue );
    4928:	4ba0      	ldr	r3, [pc, #640]	; (4bac <xQueueGenericSend+0x2d8>)
    492a:	4798      	blx	r3
    492c:	4ba0      	ldr	r3, [pc, #640]	; (4bb0 <xQueueGenericSend+0x2dc>)
    492e:	4798      	blx	r3
    4930:	4ba0      	ldr	r3, [pc, #640]	; (4bb4 <xQueueGenericSend+0x2e0>)
    4932:	881b      	ldrh	r3, [r3, #0]
    4934:	4203      	tst	r3, r0
    4936:	d01d      	beq.n	4974 <xQueueGenericSend+0xa0>
    4938:	0020      	movs	r0, r4
    493a:	4b9f      	ldr	r3, [pc, #636]	; (4bb8 <xQueueGenericSend+0x2e4>)
    493c:	4798      	blx	r3
    493e:	4b9d      	ldr	r3, [pc, #628]	; (4bb4 <xQueueGenericSend+0x2e0>)
    4940:	881b      	ldrh	r3, [r3, #0]
    4942:	4203      	tst	r3, r0
    4944:	d016      	beq.n	4974 <xQueueGenericSend+0xa0>
    4946:	2725      	movs	r7, #37	; 0x25
    4948:	2d00      	cmp	r5, #0
    494a:	d106      	bne.n	495a <xQueueGenericSend+0x86>
    494c:	0020      	movs	r0, r4
    494e:	4b9b      	ldr	r3, [pc, #620]	; (4bbc <xQueueGenericSend+0x2e8>)
    4950:	4798      	blx	r3
    4952:	4b9b      	ldr	r3, [pc, #620]	; (4bc0 <xQueueGenericSend+0x2ec>)
    4954:	5c1f      	ldrb	r7, [r3, r0]
    4956:	3720      	adds	r7, #32
    4958:	b2ff      	uxtb	r7, r7
    495a:	0020      	movs	r0, r4
    495c:	4b97      	ldr	r3, [pc, #604]	; (4bbc <xQueueGenericSend+0x2e8>)
    495e:	4798      	blx	r3
    4960:	4b97      	ldr	r3, [pc, #604]	; (4bc0 <xQueueGenericSend+0x2ec>)
    4962:	5c1e      	ldrb	r6, [r3, r0]
    4964:	0020      	movs	r0, r4
    4966:	4b97      	ldr	r3, [pc, #604]	; (4bc4 <xQueueGenericSend+0x2f0>)
    4968:	4798      	blx	r3
    496a:	b2c2      	uxtb	r2, r0
    496c:	0031      	movs	r1, r6
    496e:	0038      	movs	r0, r7
    4970:	4b95      	ldr	r3, [pc, #596]	; (4bc8 <xQueueGenericSend+0x2f4>)
    4972:	4798      	blx	r3
    4974:	0020      	movs	r0, r4
    4976:	4e91      	ldr	r6, [pc, #580]	; (4bbc <xQueueGenericSend+0x2e8>)
    4978:	47b0      	blx	r6
    497a:	4f91      	ldr	r7, [pc, #580]	; (4bc0 <xQueueGenericSend+0x2ec>)
    497c:	5c3b      	ldrb	r3, [r7, r0]
    497e:	4698      	mov	r8, r3
    4980:	0020      	movs	r0, r4
    4982:	4b90      	ldr	r3, [pc, #576]	; (4bc4 <xQueueGenericSend+0x2f0>)
    4984:	4798      	blx	r3
    4986:	b2c3      	uxtb	r3, r0
    4988:	4699      	mov	r9, r3
    498a:	0020      	movs	r0, r4
    498c:	47b0      	blx	r6
    498e:	5c3b      	ldrb	r3, [r7, r0]
    4990:	2b02      	cmp	r3, #2
    4992:	d01f      	beq.n	49d4 <xQueueGenericSend+0x100>
    4994:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4996:	3201      	adds	r2, #1
    4998:	b2d2      	uxtb	r2, r2
    499a:	4649      	mov	r1, r9
    499c:	4640      	mov	r0, r8
    499e:	4b8b      	ldr	r3, [pc, #556]	; (4bcc <xQueueGenericSend+0x2f8>)
    49a0:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    49a2:	002a      	movs	r2, r5
    49a4:	9900      	ldr	r1, [sp, #0]
    49a6:	0020      	movs	r0, r4
    49a8:	4b89      	ldr	r3, [pc, #548]	; (4bd0 <xQueueGenericSend+0x2fc>)
    49aa:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    49ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    49ae:	2b00      	cmp	r3, #0
    49b0:	d012      	beq.n	49d8 <xQueueGenericSend+0x104>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    49b2:	0029      	movs	r1, r5
    49b4:	0020      	movs	r0, r4
    49b6:	4b87      	ldr	r3, [pc, #540]	; (4bd4 <xQueueGenericSend+0x300>)
    49b8:	4798      	blx	r3
    49ba:	2800      	cmp	r0, #0
    49bc:	d001      	beq.n	49c2 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
    49be:	4b86      	ldr	r3, [pc, #536]	; (4bd8 <xQueueGenericSend+0x304>)
    49c0:	4798      	blx	r3
				taskEXIT_CRITICAL();
    49c2:	4b86      	ldr	r3, [pc, #536]	; (4bdc <xQueueGenericSend+0x308>)
    49c4:	4798      	blx	r3
				return pdPASS;
    49c6:	2301      	movs	r3, #1
}
    49c8:	0018      	movs	r0, r3
    49ca:	b005      	add	sp, #20
    49cc:	bc0c      	pop	{r2, r3}
    49ce:	4690      	mov	r8, r2
    49d0:	4699      	mov	r9, r3
    49d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_SEND( pxQueue );
    49d4:	2200      	movs	r2, #0
    49d6:	e7e0      	b.n	499a <xQueueGenericSend+0xc6>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    49d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    49da:	2b00      	cmp	r3, #0
    49dc:	d008      	beq.n	49f0 <xQueueGenericSend+0x11c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    49de:	0020      	movs	r0, r4
    49e0:	3024      	adds	r0, #36	; 0x24
    49e2:	4b7f      	ldr	r3, [pc, #508]	; (4be0 <xQueueGenericSend+0x30c>)
    49e4:	4798      	blx	r3
    49e6:	2800      	cmp	r0, #0
    49e8:	d0eb      	beq.n	49c2 <xQueueGenericSend+0xee>
								queueYIELD_IF_USING_PREEMPTION();
    49ea:	4b7b      	ldr	r3, [pc, #492]	; (4bd8 <xQueueGenericSend+0x304>)
    49ec:	4798      	blx	r3
    49ee:	e7e8      	b.n	49c2 <xQueueGenericSend+0xee>
						else if( xYieldRequired != pdFALSE )
    49f0:	2800      	cmp	r0, #0
    49f2:	d0e6      	beq.n	49c2 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
    49f4:	4b78      	ldr	r3, [pc, #480]	; (4bd8 <xQueueGenericSend+0x304>)
    49f6:	4798      	blx	r3
    49f8:	e7e3      	b.n	49c2 <xQueueGenericSend+0xee>
					taskEXIT_CRITICAL();
    49fa:	4b78      	ldr	r3, [pc, #480]	; (4bdc <xQueueGenericSend+0x308>)
    49fc:	4798      	blx	r3
					traceQUEUE_SEND_FAILED( pxQueue );
    49fe:	4b6b      	ldr	r3, [pc, #428]	; (4bac <xQueueGenericSend+0x2d8>)
    4a00:	4798      	blx	r3
    4a02:	4b6b      	ldr	r3, [pc, #428]	; (4bb0 <xQueueGenericSend+0x2dc>)
    4a04:	4798      	blx	r3
    4a06:	4b6b      	ldr	r3, [pc, #428]	; (4bb4 <xQueueGenericSend+0x2e0>)
    4a08:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
    4a0a:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
    4a0c:	4202      	tst	r2, r0
    4a0e:	d0db      	beq.n	49c8 <xQueueGenericSend+0xf4>
    4a10:	0020      	movs	r0, r4
    4a12:	4b69      	ldr	r3, [pc, #420]	; (4bb8 <xQueueGenericSend+0x2e4>)
    4a14:	4798      	blx	r3
    4a16:	4b67      	ldr	r3, [pc, #412]	; (4bb4 <xQueueGenericSend+0x2e0>)
    4a18:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
    4a1a:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
    4a1c:	4202      	tst	r2, r0
    4a1e:	d0d3      	beq.n	49c8 <xQueueGenericSend+0xf4>
    4a20:	264d      	movs	r6, #77	; 0x4d
    4a22:	2d00      	cmp	r5, #0
    4a24:	d106      	bne.n	4a34 <xQueueGenericSend+0x160>
    4a26:	0020      	movs	r0, r4
    4a28:	4b64      	ldr	r3, [pc, #400]	; (4bbc <xQueueGenericSend+0x2e8>)
    4a2a:	4798      	blx	r3
    4a2c:	4b64      	ldr	r3, [pc, #400]	; (4bc0 <xQueueGenericSend+0x2ec>)
    4a2e:	5c1e      	ldrb	r6, [r3, r0]
    4a30:	3648      	adds	r6, #72	; 0x48
    4a32:	b2f6      	uxtb	r6, r6
    4a34:	0020      	movs	r0, r4
    4a36:	4b61      	ldr	r3, [pc, #388]	; (4bbc <xQueueGenericSend+0x2e8>)
    4a38:	4798      	blx	r3
    4a3a:	4b61      	ldr	r3, [pc, #388]	; (4bc0 <xQueueGenericSend+0x2ec>)
    4a3c:	5c1d      	ldrb	r5, [r3, r0]
    4a3e:	0020      	movs	r0, r4
    4a40:	4b60      	ldr	r3, [pc, #384]	; (4bc4 <xQueueGenericSend+0x2f0>)
    4a42:	4798      	blx	r3
    4a44:	b2c2      	uxtb	r2, r0
    4a46:	0029      	movs	r1, r5
    4a48:	0030      	movs	r0, r6
    4a4a:	4b5f      	ldr	r3, [pc, #380]	; (4bc8 <xQueueGenericSend+0x2f4>)
    4a4c:	4798      	blx	r3
					return errQUEUE_FULL;
    4a4e:	2300      	movs	r3, #0
    4a50:	e7ba      	b.n	49c8 <xQueueGenericSend+0xf4>
		prvLockQueue( pxQueue );
    4a52:	4b62      	ldr	r3, [pc, #392]	; (4bdc <xQueueGenericSend+0x308>)
    4a54:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4a56:	a901      	add	r1, sp, #4
    4a58:	a802      	add	r0, sp, #8
    4a5a:	4b62      	ldr	r3, [pc, #392]	; (4be4 <xQueueGenericSend+0x310>)
    4a5c:	4798      	blx	r3
    4a5e:	2800      	cmp	r0, #0
    4a60:	d16e      	bne.n	4b40 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
    4a62:	4b51      	ldr	r3, [pc, #324]	; (4ba8 <xQueueGenericSend+0x2d4>)
    4a64:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    4a66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4a68:	4699      	mov	r9, r3
    4a6a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    4a6c:	4b5b      	ldr	r3, [pc, #364]	; (4bdc <xQueueGenericSend+0x308>)
    4a6e:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    4a70:	45b9      	cmp	r9, r7
    4a72:	d15f      	bne.n	4b34 <xQueueGenericSend+0x260>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    4a74:	4b4d      	ldr	r3, [pc, #308]	; (4bac <xQueueGenericSend+0x2d8>)
    4a76:	4798      	blx	r3
    4a78:	4b4d      	ldr	r3, [pc, #308]	; (4bb0 <xQueueGenericSend+0x2dc>)
    4a7a:	4798      	blx	r3
    4a7c:	4b4d      	ldr	r3, [pc, #308]	; (4bb4 <xQueueGenericSend+0x2e0>)
    4a7e:	881b      	ldrh	r3, [r3, #0]
    4a80:	4203      	tst	r3, r0
    4a82:	d134      	bne.n	4aee <xQueueGenericSend+0x21a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    4a84:	0020      	movs	r0, r4
    4a86:	3010      	adds	r0, #16
    4a88:	9901      	ldr	r1, [sp, #4]
    4a8a:	4b57      	ldr	r3, [pc, #348]	; (4be8 <xQueueGenericSend+0x314>)
    4a8c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    4a8e:	0020      	movs	r0, r4
    4a90:	4b56      	ldr	r3, [pc, #344]	; (4bec <xQueueGenericSend+0x318>)
    4a92:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    4a94:	4b56      	ldr	r3, [pc, #344]	; (4bf0 <xQueueGenericSend+0x31c>)
    4a96:	4798      	blx	r3
    4a98:	2800      	cmp	r0, #0
    4a9a:	d048      	beq.n	4b2e <xQueueGenericSend+0x25a>
    4a9c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    4a9e:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    4aa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4aa2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    4aa4:	4293      	cmp	r3, r2
    4aa6:	d200      	bcs.n	4aaa <xQueueGenericSend+0x1d6>
    4aa8:	e73e      	b.n	4928 <xQueueGenericSend+0x54>
    4aaa:	2d02      	cmp	r5, #2
    4aac:	d100      	bne.n	4ab0 <xQueueGenericSend+0x1dc>
    4aae:	e73b      	b.n	4928 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
    4ab0:	9b01      	ldr	r3, [sp, #4]
    4ab2:	2b00      	cmp	r3, #0
    4ab4:	d0a1      	beq.n	49fa <xQueueGenericSend+0x126>
				else if( xEntryTimeSet == pdFALSE )
    4ab6:	2f00      	cmp	r7, #0
    4ab8:	d102      	bne.n	4ac0 <xQueueGenericSend+0x1ec>
					vTaskInternalSetTimeOutState( &xTimeOut );
    4aba:	a802      	add	r0, sp, #8
    4abc:	4b4d      	ldr	r3, [pc, #308]	; (4bf4 <xQueueGenericSend+0x320>)
    4abe:	4798      	blx	r3
		taskEXIT_CRITICAL();
    4ac0:	4b46      	ldr	r3, [pc, #280]	; (4bdc <xQueueGenericSend+0x308>)
    4ac2:	4798      	blx	r3
		vTaskSuspendAll();
    4ac4:	4b4c      	ldr	r3, [pc, #304]	; (4bf8 <xQueueGenericSend+0x324>)
    4ac6:	4798      	blx	r3
		prvLockQueue( pxQueue );
    4ac8:	4b37      	ldr	r3, [pc, #220]	; (4ba8 <xQueueGenericSend+0x2d4>)
    4aca:	4798      	blx	r3
    4acc:	2344      	movs	r3, #68	; 0x44
    4ace:	5ce3      	ldrb	r3, [r4, r3]
    4ad0:	b25b      	sxtb	r3, r3
    4ad2:	3301      	adds	r3, #1
    4ad4:	d102      	bne.n	4adc <xQueueGenericSend+0x208>
    4ad6:	2200      	movs	r2, #0
    4ad8:	2344      	movs	r3, #68	; 0x44
    4ada:	54e2      	strb	r2, [r4, r3]
    4adc:	2345      	movs	r3, #69	; 0x45
    4ade:	5ce3      	ldrb	r3, [r4, r3]
    4ae0:	b25b      	sxtb	r3, r3
    4ae2:	3301      	adds	r3, #1
    4ae4:	d1b5      	bne.n	4a52 <xQueueGenericSend+0x17e>
    4ae6:	2200      	movs	r2, #0
    4ae8:	2345      	movs	r3, #69	; 0x45
    4aea:	54e2      	strb	r2, [r4, r3]
    4aec:	e7b1      	b.n	4a52 <xQueueGenericSend+0x17e>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    4aee:	0020      	movs	r0, r4
    4af0:	4b31      	ldr	r3, [pc, #196]	; (4bb8 <xQueueGenericSend+0x2e4>)
    4af2:	4798      	blx	r3
    4af4:	4b2f      	ldr	r3, [pc, #188]	; (4bb4 <xQueueGenericSend+0x2e0>)
    4af6:	881b      	ldrh	r3, [r3, #0]
    4af8:	4203      	tst	r3, r0
    4afa:	d0c3      	beq.n	4a84 <xQueueGenericSend+0x1b0>
    4afc:	2775      	movs	r7, #117	; 0x75
    4afe:	2d00      	cmp	r5, #0
    4b00:	d106      	bne.n	4b10 <xQueueGenericSend+0x23c>
    4b02:	0020      	movs	r0, r4
    4b04:	4b2d      	ldr	r3, [pc, #180]	; (4bbc <xQueueGenericSend+0x2e8>)
    4b06:	4798      	blx	r3
    4b08:	4b2d      	ldr	r3, [pc, #180]	; (4bc0 <xQueueGenericSend+0x2ec>)
    4b0a:	5c1f      	ldrb	r7, [r3, r0]
    4b0c:	3770      	adds	r7, #112	; 0x70
    4b0e:	b2ff      	uxtb	r7, r7
    4b10:	0020      	movs	r0, r4
    4b12:	4b2a      	ldr	r3, [pc, #168]	; (4bbc <xQueueGenericSend+0x2e8>)
    4b14:	4798      	blx	r3
    4b16:	4b2a      	ldr	r3, [pc, #168]	; (4bc0 <xQueueGenericSend+0x2ec>)
    4b18:	5c1b      	ldrb	r3, [r3, r0]
    4b1a:	4699      	mov	r9, r3
    4b1c:	0020      	movs	r0, r4
    4b1e:	4b29      	ldr	r3, [pc, #164]	; (4bc4 <xQueueGenericSend+0x2f0>)
    4b20:	4798      	blx	r3
    4b22:	b2c2      	uxtb	r2, r0
    4b24:	4649      	mov	r1, r9
    4b26:	0038      	movs	r0, r7
    4b28:	4b27      	ldr	r3, [pc, #156]	; (4bc8 <xQueueGenericSend+0x2f4>)
    4b2a:	4798      	blx	r3
    4b2c:	e7aa      	b.n	4a84 <xQueueGenericSend+0x1b0>
					portYIELD_WITHIN_API();
    4b2e:	4b2a      	ldr	r3, [pc, #168]	; (4bd8 <xQueueGenericSend+0x304>)
    4b30:	4798      	blx	r3
    4b32:	e7b3      	b.n	4a9c <xQueueGenericSend+0x1c8>
				prvUnlockQueue( pxQueue );
    4b34:	0020      	movs	r0, r4
    4b36:	4b2d      	ldr	r3, [pc, #180]	; (4bec <xQueueGenericSend+0x318>)
    4b38:	4798      	blx	r3
				( void ) xTaskResumeAll();
    4b3a:	4b2d      	ldr	r3, [pc, #180]	; (4bf0 <xQueueGenericSend+0x31c>)
    4b3c:	4798      	blx	r3
    4b3e:	e7ad      	b.n	4a9c <xQueueGenericSend+0x1c8>
			prvUnlockQueue( pxQueue );
    4b40:	0020      	movs	r0, r4
    4b42:	4b2a      	ldr	r3, [pc, #168]	; (4bec <xQueueGenericSend+0x318>)
    4b44:	4798      	blx	r3
			( void ) xTaskResumeAll();
    4b46:	4b2a      	ldr	r3, [pc, #168]	; (4bf0 <xQueueGenericSend+0x31c>)
    4b48:	4798      	blx	r3
			traceQUEUE_SEND_FAILED( pxQueue );
    4b4a:	4b18      	ldr	r3, [pc, #96]	; (4bac <xQueueGenericSend+0x2d8>)
    4b4c:	4798      	blx	r3
    4b4e:	4b18      	ldr	r3, [pc, #96]	; (4bb0 <xQueueGenericSend+0x2dc>)
    4b50:	4798      	blx	r3
    4b52:	4b18      	ldr	r3, [pc, #96]	; (4bb4 <xQueueGenericSend+0x2e0>)
    4b54:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
    4b56:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
    4b58:	4202      	tst	r2, r0
    4b5a:	d100      	bne.n	4b5e <xQueueGenericSend+0x28a>
    4b5c:	e734      	b.n	49c8 <xQueueGenericSend+0xf4>
    4b5e:	0020      	movs	r0, r4
    4b60:	4b15      	ldr	r3, [pc, #84]	; (4bb8 <xQueueGenericSend+0x2e4>)
    4b62:	4798      	blx	r3
    4b64:	4b13      	ldr	r3, [pc, #76]	; (4bb4 <xQueueGenericSend+0x2e0>)
    4b66:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
    4b68:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
    4b6a:	4202      	tst	r2, r0
    4b6c:	d100      	bne.n	4b70 <xQueueGenericSend+0x29c>
    4b6e:	e72b      	b.n	49c8 <xQueueGenericSend+0xf4>
    4b70:	264d      	movs	r6, #77	; 0x4d
    4b72:	2d00      	cmp	r5, #0
    4b74:	d106      	bne.n	4b84 <xQueueGenericSend+0x2b0>
    4b76:	0020      	movs	r0, r4
    4b78:	4b10      	ldr	r3, [pc, #64]	; (4bbc <xQueueGenericSend+0x2e8>)
    4b7a:	4798      	blx	r3
    4b7c:	4b10      	ldr	r3, [pc, #64]	; (4bc0 <xQueueGenericSend+0x2ec>)
    4b7e:	5c1e      	ldrb	r6, [r3, r0]
    4b80:	3648      	adds	r6, #72	; 0x48
    4b82:	b2f6      	uxtb	r6, r6
    4b84:	0020      	movs	r0, r4
    4b86:	4b0d      	ldr	r3, [pc, #52]	; (4bbc <xQueueGenericSend+0x2e8>)
    4b88:	4798      	blx	r3
    4b8a:	4b0d      	ldr	r3, [pc, #52]	; (4bc0 <xQueueGenericSend+0x2ec>)
    4b8c:	5c1d      	ldrb	r5, [r3, r0]
    4b8e:	0020      	movs	r0, r4
    4b90:	4b0c      	ldr	r3, [pc, #48]	; (4bc4 <xQueueGenericSend+0x2f0>)
    4b92:	4798      	blx	r3
    4b94:	b2c2      	uxtb	r2, r0
    4b96:	0029      	movs	r1, r5
    4b98:	0030      	movs	r0, r6
    4b9a:	4b0b      	ldr	r3, [pc, #44]	; (4bc8 <xQueueGenericSend+0x2f4>)
    4b9c:	4798      	blx	r3
			return errQUEUE_FULL;
    4b9e:	2300      	movs	r3, #0
    4ba0:	e712      	b.n	49c8 <xQueueGenericSend+0xf4>
    4ba2:	46c0      	nop			; (mov r8, r8)
    4ba4:	00006245 	.word	0x00006245
    4ba8:	00004321 	.word	0x00004321
    4bac:	00003169 	.word	0x00003169
    4bb0:	000030b1 	.word	0x000030b1
    4bb4:	2000008c 	.word	0x2000008c
    4bb8:	00003115 	.word	0x00003115
    4bbc:	00003095 	.word	0x00003095
    4bc0:	20000084 	.word	0x20000084
    4bc4:	00003105 	.word	0x00003105
    4bc8:	00003da1 	.word	0x00003da1
    4bcc:	00003875 	.word	0x00003875
    4bd0:	000044ad 	.word	0x000044ad
    4bd4:	00004529 	.word	0x00004529
    4bd8:	00004311 	.word	0x00004311
    4bdc:	00004339 	.word	0x00004339
    4be0:	000060dd 	.word	0x000060dd
    4be4:	000061a9 	.word	0x000061a9
    4be8:	00006015 	.word	0x00006015
    4bec:	0000466d 	.word	0x0000466d
    4bf0:	00005c2d 	.word	0x00005c2d
    4bf4:	00006191 	.word	0x00006191
    4bf8:	00005a85 	.word	0x00005a85

00004bfc <xQueueCreateMutex>:
	{
    4bfc:	b570      	push	{r4, r5, r6, lr}
    4bfe:	0002      	movs	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    4c00:	2100      	movs	r1, #0
    4c02:	2001      	movs	r0, #1
    4c04:	4b06      	ldr	r3, [pc, #24]	; (4c20 <xQueueCreateMutex+0x24>)
    4c06:	4798      	blx	r3
    4c08:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    4c0a:	d007      	beq.n	4c1c <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
    4c0c:	2300      	movs	r3, #0
    4c0e:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    4c10:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
    4c12:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    4c14:	2200      	movs	r2, #0
    4c16:	2100      	movs	r1, #0
    4c18:	4d02      	ldr	r5, [pc, #8]	; (4c24 <xQueueCreateMutex+0x28>)
    4c1a:	47a8      	blx	r5
	}
    4c1c:	0020      	movs	r0, r4
    4c1e:	bd70      	pop	{r4, r5, r6, pc}
    4c20:	00004799 	.word	0x00004799
    4c24:	000048d5 	.word	0x000048d5

00004c28 <xQueueGenericSendFromISR>:
{
    4c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c2a:	46de      	mov	lr, fp
    4c2c:	4647      	mov	r7, r8
    4c2e:	b580      	push	{r7, lr}
    4c30:	b083      	sub	sp, #12
    4c32:	0004      	movs	r4, r0
    4c34:	9101      	str	r1, [sp, #4]
    4c36:	0016      	movs	r6, r2
    4c38:	001f      	movs	r7, r3
	configASSERT( pxQueue );
    4c3a:	2800      	cmp	r0, #0
    4c3c:	d02d      	beq.n	4c9a <xQueueGenericSendFromISR+0x72>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    4c3e:	9b01      	ldr	r3, [sp, #4]
    4c40:	2b00      	cmp	r3, #0
    4c42:	d02c      	beq.n	4c9e <xQueueGenericSendFromISR+0x76>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    4c44:	2f02      	cmp	r7, #2
    4c46:	d02f      	beq.n	4ca8 <xQueueGenericSendFromISR+0x80>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4c48:	4b59      	ldr	r3, [pc, #356]	; (4db0 <xQueueGenericSendFromISR+0x188>)
    4c4a:	4798      	blx	r3
    4c4c:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    4c4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4c50:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    4c52:	429a      	cmp	r2, r3
    4c54:	d85a      	bhi.n	4d0c <xQueueGenericSendFromISR+0xe4>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    4c56:	0020      	movs	r0, r4
    4c58:	4b56      	ldr	r3, [pc, #344]	; (4db4 <xQueueGenericSendFromISR+0x18c>)
    4c5a:	4798      	blx	r3
    4c5c:	4b56      	ldr	r3, [pc, #344]	; (4db8 <xQueueGenericSendFromISR+0x190>)
    4c5e:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
    4c60:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    4c62:	4203      	tst	r3, r0
    4c64:	d100      	bne.n	4c68 <xQueueGenericSendFromISR+0x40>
    4c66:	e09a      	b.n	4d9e <xQueueGenericSendFromISR+0x176>
    4c68:	355d      	adds	r5, #93	; 0x5d
    4c6a:	2f00      	cmp	r7, #0
    4c6c:	d106      	bne.n	4c7c <xQueueGenericSendFromISR+0x54>
    4c6e:	0020      	movs	r0, r4
    4c70:	4b52      	ldr	r3, [pc, #328]	; (4dbc <xQueueGenericSendFromISR+0x194>)
    4c72:	4798      	blx	r3
    4c74:	4b52      	ldr	r3, [pc, #328]	; (4dc0 <xQueueGenericSendFromISR+0x198>)
    4c76:	5c1d      	ldrb	r5, [r3, r0]
    4c78:	3558      	adds	r5, #88	; 0x58
    4c7a:	b2ed      	uxtb	r5, r5
    4c7c:	0020      	movs	r0, r4
    4c7e:	4b4f      	ldr	r3, [pc, #316]	; (4dbc <xQueueGenericSendFromISR+0x194>)
    4c80:	4798      	blx	r3
    4c82:	4b4f      	ldr	r3, [pc, #316]	; (4dc0 <xQueueGenericSendFromISR+0x198>)
    4c84:	5c1f      	ldrb	r7, [r3, r0]
    4c86:	0020      	movs	r0, r4
    4c88:	4b4e      	ldr	r3, [pc, #312]	; (4dc4 <xQueueGenericSendFromISR+0x19c>)
    4c8a:	4798      	blx	r3
    4c8c:	b2c2      	uxtb	r2, r0
    4c8e:	0039      	movs	r1, r7
    4c90:	0028      	movs	r0, r5
    4c92:	4b4d      	ldr	r3, [pc, #308]	; (4dc8 <xQueueGenericSendFromISR+0x1a0>)
    4c94:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    4c96:	2500      	movs	r5, #0
    4c98:	e081      	b.n	4d9e <xQueueGenericSendFromISR+0x176>
	configASSERT( pxQueue );
    4c9a:	b672      	cpsid	i
    4c9c:	e7fe      	b.n	4c9c <xQueueGenericSendFromISR+0x74>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    4c9e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4ca0:	2b00      	cmp	r3, #0
    4ca2:	d0cf      	beq.n	4c44 <xQueueGenericSendFromISR+0x1c>
    4ca4:	b672      	cpsid	i
    4ca6:	e7fe      	b.n	4ca6 <xQueueGenericSendFromISR+0x7e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    4ca8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4caa:	2b01      	cmp	r3, #1
    4cac:	d027      	beq.n	4cfe <xQueueGenericSendFromISR+0xd6>
    4cae:	b672      	cpsid	i
    4cb0:	e7fe      	b.n	4cb0 <xQueueGenericSendFromISR+0x88>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    4cb4:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4cb6:	2b00      	cmp	r3, #0
    4cb8:	d071      	beq.n	4d9e <xQueueGenericSendFromISR+0x176>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4cba:	0020      	movs	r0, r4
    4cbc:	3024      	adds	r0, #36	; 0x24
    4cbe:	4b43      	ldr	r3, [pc, #268]	; (4dcc <xQueueGenericSendFromISR+0x1a4>)
    4cc0:	4798      	blx	r3
    4cc2:	2800      	cmp	r0, #0
    4cc4:	d06b      	beq.n	4d9e <xQueueGenericSendFromISR+0x176>
								if( pxHigherPriorityTaskWoken != NULL )
    4cc6:	2e00      	cmp	r6, #0
    4cc8:	d00a      	beq.n	4ce0 <xQueueGenericSendFromISR+0xb8>
									*pxHigherPriorityTaskWoken = pdTRUE;
    4cca:	2301      	movs	r3, #1
    4ccc:	6033      	str	r3, [r6, #0]
    4cce:	e066      	b.n	4d9e <xQueueGenericSendFromISR+0x176>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    4cd0:	3501      	adds	r5, #1
    4cd2:	b26d      	sxtb	r5, r5
    4cd4:	2345      	movs	r3, #69	; 0x45
    4cd6:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
    4cd8:	2501      	movs	r5, #1
    4cda:	e060      	b.n	4d9e <xQueueGenericSendFromISR+0x176>
    4cdc:	2501      	movs	r5, #1
    4cde:	e05e      	b.n	4d9e <xQueueGenericSendFromISR+0x176>
    4ce0:	2501      	movs	r5, #1
    4ce2:	e05c      	b.n	4d9e <xQueueGenericSendFromISR+0x176>
			const int8_t cTxLock = pxQueue->cTxLock;
    4ce4:	2345      	movs	r3, #69	; 0x45
    4ce6:	5ce5      	ldrb	r5, [r4, r3]
    4ce8:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    4cea:	0020      	movs	r0, r4
    4cec:	4b31      	ldr	r3, [pc, #196]	; (4db4 <xQueueGenericSendFromISR+0x18c>)
    4cee:	4798      	blx	r3
    4cf0:	4b31      	ldr	r3, [pc, #196]	; (4db8 <xQueueGenericSendFromISR+0x190>)
    4cf2:	881b      	ldrh	r3, [r3, #0]
    4cf4:	4203      	tst	r3, r0
    4cf6:	d02d      	beq.n	4d54 <xQueueGenericSendFromISR+0x12c>
    4cf8:	2335      	movs	r3, #53	; 0x35
    4cfa:	4698      	mov	r8, r3
    4cfc:	e01c      	b.n	4d38 <xQueueGenericSendFromISR+0x110>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4cfe:	4b2c      	ldr	r3, [pc, #176]	; (4db0 <xQueueGenericSendFromISR+0x188>)
    4d00:	4798      	blx	r3
    4d02:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    4d04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4d06:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    4d08:	429a      	cmp	r2, r3
    4d0a:	d9eb      	bls.n	4ce4 <xQueueGenericSendFromISR+0xbc>
			const int8_t cTxLock = pxQueue->cTxLock;
    4d0c:	2345      	movs	r3, #69	; 0x45
    4d0e:	5ce5      	ldrb	r5, [r4, r3]
    4d10:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    4d12:	0020      	movs	r0, r4
    4d14:	4b27      	ldr	r3, [pc, #156]	; (4db4 <xQueueGenericSendFromISR+0x18c>)
    4d16:	4798      	blx	r3
    4d18:	4b27      	ldr	r3, [pc, #156]	; (4db8 <xQueueGenericSendFromISR+0x190>)
    4d1a:	881b      	ldrh	r3, [r3, #0]
    4d1c:	4203      	tst	r3, r0
    4d1e:	d019      	beq.n	4d54 <xQueueGenericSendFromISR+0x12c>
    4d20:	2335      	movs	r3, #53	; 0x35
    4d22:	4698      	mov	r8, r3
    4d24:	2f00      	cmp	r7, #0
    4d26:	d107      	bne.n	4d38 <xQueueGenericSendFromISR+0x110>
    4d28:	0020      	movs	r0, r4
    4d2a:	4b24      	ldr	r3, [pc, #144]	; (4dbc <xQueueGenericSendFromISR+0x194>)
    4d2c:	4798      	blx	r3
    4d2e:	4b24      	ldr	r3, [pc, #144]	; (4dc0 <xQueueGenericSendFromISR+0x198>)
    4d30:	5c1b      	ldrb	r3, [r3, r0]
    4d32:	3330      	adds	r3, #48	; 0x30
    4d34:	b2db      	uxtb	r3, r3
    4d36:	4698      	mov	r8, r3
    4d38:	0020      	movs	r0, r4
    4d3a:	4b20      	ldr	r3, [pc, #128]	; (4dbc <xQueueGenericSendFromISR+0x194>)
    4d3c:	4798      	blx	r3
    4d3e:	4b20      	ldr	r3, [pc, #128]	; (4dc0 <xQueueGenericSendFromISR+0x198>)
    4d40:	5c1b      	ldrb	r3, [r3, r0]
    4d42:	469b      	mov	fp, r3
    4d44:	0020      	movs	r0, r4
    4d46:	4b1f      	ldr	r3, [pc, #124]	; (4dc4 <xQueueGenericSendFromISR+0x19c>)
    4d48:	4798      	blx	r3
    4d4a:	b2c2      	uxtb	r2, r0
    4d4c:	4659      	mov	r1, fp
    4d4e:	4640      	mov	r0, r8
    4d50:	4b1d      	ldr	r3, [pc, #116]	; (4dc8 <xQueueGenericSendFromISR+0x1a0>)
    4d52:	4798      	blx	r3
    4d54:	0020      	movs	r0, r4
    4d56:	4b19      	ldr	r3, [pc, #100]	; (4dbc <xQueueGenericSendFromISR+0x194>)
    4d58:	4798      	blx	r3
    4d5a:	4b19      	ldr	r3, [pc, #100]	; (4dc0 <xQueueGenericSendFromISR+0x198>)
    4d5c:	5c1b      	ldrb	r3, [r3, r0]
    4d5e:	4698      	mov	r8, r3
    4d60:	0020      	movs	r0, r4
    4d62:	4b18      	ldr	r3, [pc, #96]	; (4dc4 <xQueueGenericSendFromISR+0x19c>)
    4d64:	4798      	blx	r3
    4d66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4d68:	3201      	adds	r2, #1
    4d6a:	b2d2      	uxtb	r2, r2
    4d6c:	b2c1      	uxtb	r1, r0
    4d6e:	4640      	mov	r0, r8
    4d70:	4b17      	ldr	r3, [pc, #92]	; (4dd0 <xQueueGenericSendFromISR+0x1a8>)
    4d72:	4798      	blx	r3
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4d74:	003a      	movs	r2, r7
    4d76:	9901      	ldr	r1, [sp, #4]
    4d78:	0020      	movs	r0, r4
    4d7a:	4b16      	ldr	r3, [pc, #88]	; (4dd4 <xQueueGenericSendFromISR+0x1ac>)
    4d7c:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    4d7e:	1c6b      	adds	r3, r5, #1
    4d80:	d1a6      	bne.n	4cd0 <xQueueGenericSendFromISR+0xa8>
					if( pxQueue->pxQueueSetContainer != NULL )
    4d82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    4d84:	2b00      	cmp	r3, #0
    4d86:	d094      	beq.n	4cb2 <xQueueGenericSendFromISR+0x8a>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    4d88:	0039      	movs	r1, r7
    4d8a:	0020      	movs	r0, r4
    4d8c:	4b12      	ldr	r3, [pc, #72]	; (4dd8 <xQueueGenericSendFromISR+0x1b0>)
    4d8e:	4798      	blx	r3
			xReturn = pdPASS;
    4d90:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    4d92:	2800      	cmp	r0, #0
    4d94:	d003      	beq.n	4d9e <xQueueGenericSendFromISR+0x176>
							if( pxHigherPriorityTaskWoken != NULL )
    4d96:	2e00      	cmp	r6, #0
    4d98:	d0a0      	beq.n	4cdc <xQueueGenericSendFromISR+0xb4>
								*pxHigherPriorityTaskWoken = pdTRUE;
    4d9a:	2301      	movs	r3, #1
    4d9c:	6033      	str	r3, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4d9e:	9800      	ldr	r0, [sp, #0]
    4da0:	4b0e      	ldr	r3, [pc, #56]	; (4ddc <xQueueGenericSendFromISR+0x1b4>)
    4da2:	4798      	blx	r3
}
    4da4:	0028      	movs	r0, r5
    4da6:	b003      	add	sp, #12
    4da8:	bc0c      	pop	{r2, r3}
    4daa:	4690      	mov	r8, r2
    4dac:	469b      	mov	fp, r3
    4dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4db0:	00004359 	.word	0x00004359
    4db4:	00003115 	.word	0x00003115
    4db8:	2000008c 	.word	0x2000008c
    4dbc:	00003095 	.word	0x00003095
    4dc0:	20000084 	.word	0x20000084
    4dc4:	00003105 	.word	0x00003105
    4dc8:	00003da1 	.word	0x00003da1
    4dcc:	000060dd 	.word	0x000060dd
    4dd0:	00003875 	.word	0x00003875
    4dd4:	000044ad 	.word	0x000044ad
    4dd8:	00004529 	.word	0x00004529
    4ddc:	00004361 	.word	0x00004361

00004de0 <MyWrapper>:
{
    4de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4de2:	46d6      	mov	lr, sl
    4de4:	4647      	mov	r7, r8
    4de6:	b580      	push	{r7, lr}
    4de8:	b083      	sub	sp, #12
    4dea:	0004      	movs	r4, r0
    4dec:	000f      	movs	r7, r1
    4dee:	0016      	movs	r6, r2
	configASSERT( pxQueue );
    4df0:	2800      	cmp	r0, #0
    4df2:	d004      	beq.n	4dfe <MyWrapper+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
    4df4:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4df6:	2b00      	cmp	r3, #0
    4df8:	d003      	beq.n	4e02 <MyWrapper+0x22>
    4dfa:	b672      	cpsid	i
    4dfc:	e7fe      	b.n	4dfc <MyWrapper+0x1c>
	configASSERT( pxQueue );
    4dfe:	b672      	cpsid	i
    4e00:	e7fe      	b.n	4e00 <MyWrapper+0x20>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    4e02:	6803      	ldr	r3, [r0, #0]
    4e04:	2b00      	cmp	r3, #0
    4e06:	d055      	beq.n	4eb4 <MyWrapper+0xd4>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4e08:	4b4a      	ldr	r3, [pc, #296]	; (4f34 <MyWrapper+0x154>)
    4e0a:	4798      	blx	r3
    4e0c:	9001      	str	r0, [sp, #4]
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4e0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4e10:	4698      	mov	r8, r3
		if( uxMessagesWaiting < pxQueue->uxLength )
    4e12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4e14:	4598      	cmp	r8, r3
    4e16:	d267      	bcs.n	4ee8 <MyWrapper+0x108>
			const int8_t cTxLock = pxQueue->cTxLock;
    4e18:	2345      	movs	r3, #69	; 0x45
    4e1a:	5ce5      	ldrb	r5, [r4, r3]
    4e1c:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    4e1e:	0020      	movs	r0, r4
    4e20:	4b45      	ldr	r3, [pc, #276]	; (4f38 <MyWrapper+0x158>)
    4e22:	4798      	blx	r3
    4e24:	4b45      	ldr	r3, [pc, #276]	; (4f3c <MyWrapper+0x15c>)
    4e26:	881b      	ldrh	r3, [r3, #0]
    4e28:	4203      	tst	r3, r0
    4e2a:	d018      	beq.n	4e5e <MyWrapper+0x7e>
    4e2c:	2335      	movs	r3, #53	; 0x35
    4e2e:	469a      	mov	sl, r3
    4e30:	2e00      	cmp	r6, #0
    4e32:	d107      	bne.n	4e44 <MyWrapper+0x64>
    4e34:	0020      	movs	r0, r4
    4e36:	4b42      	ldr	r3, [pc, #264]	; (4f40 <MyWrapper+0x160>)
    4e38:	4798      	blx	r3
    4e3a:	4b42      	ldr	r3, [pc, #264]	; (4f44 <MyWrapper+0x164>)
    4e3c:	5c1b      	ldrb	r3, [r3, r0]
    4e3e:	3330      	adds	r3, #48	; 0x30
    4e40:	b2db      	uxtb	r3, r3
    4e42:	469a      	mov	sl, r3
    4e44:	0020      	movs	r0, r4
    4e46:	4b3e      	ldr	r3, [pc, #248]	; (4f40 <MyWrapper+0x160>)
    4e48:	4798      	blx	r3
    4e4a:	4b3e      	ldr	r3, [pc, #248]	; (4f44 <MyWrapper+0x164>)
    4e4c:	5c1e      	ldrb	r6, [r3, r0]
    4e4e:	0020      	movs	r0, r4
    4e50:	4b3d      	ldr	r3, [pc, #244]	; (4f48 <MyWrapper+0x168>)
    4e52:	4798      	blx	r3
    4e54:	b2c2      	uxtb	r2, r0
    4e56:	0031      	movs	r1, r6
    4e58:	4650      	mov	r0, sl
    4e5a:	4b3c      	ldr	r3, [pc, #240]	; (4f4c <MyWrapper+0x16c>)
    4e5c:	4798      	blx	r3
    4e5e:	0020      	movs	r0, r4
    4e60:	4b37      	ldr	r3, [pc, #220]	; (4f40 <MyWrapper+0x160>)
    4e62:	4798      	blx	r3
    4e64:	4b37      	ldr	r3, [pc, #220]	; (4f44 <MyWrapper+0x164>)
    4e66:	5c1e      	ldrb	r6, [r3, r0]
    4e68:	0020      	movs	r0, r4
    4e6a:	4b37      	ldr	r3, [pc, #220]	; (4f48 <MyWrapper+0x168>)
    4e6c:	4798      	blx	r3
    4e6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4e70:	3201      	adds	r2, #1
    4e72:	b2d2      	uxtb	r2, r2
    4e74:	b2c1      	uxtb	r1, r0
    4e76:	0030      	movs	r0, r6
    4e78:	4b35      	ldr	r3, [pc, #212]	; (4f50 <MyWrapper+0x170>)
    4e7a:	4798      	blx	r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    4e7c:	4643      	mov	r3, r8
    4e7e:	3301      	adds	r3, #1
    4e80:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
    4e82:	1c6b      	adds	r3, r5, #1
    4e84:	d12a      	bne.n	4edc <MyWrapper+0xfc>
					if( pxQueue->pxQueueSetContainer != NULL )
    4e86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    4e88:	2b00      	cmp	r3, #0
    4e8a:	d018      	beq.n	4ebe <MyWrapper+0xde>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    4e8c:	2100      	movs	r1, #0
    4e8e:	0020      	movs	r0, r4
    4e90:	4b30      	ldr	r3, [pc, #192]	; (4f54 <MyWrapper+0x174>)
    4e92:	4798      	blx	r3
			xReturn = pdPASS;
    4e94:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    4e96:	2800      	cmp	r0, #0
    4e98:	d003      	beq.n	4ea2 <MyWrapper+0xc2>
							if( pxHigherPriorityTaskWoken != NULL )
    4e9a:	2f00      	cmp	r7, #0
    4e9c:	d045      	beq.n	4f2a <MyWrapper+0x14a>
								*pxHigherPriorityTaskWoken = pdTRUE;
    4e9e:	2301      	movs	r3, #1
    4ea0:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4ea2:	9801      	ldr	r0, [sp, #4]
    4ea4:	4b2c      	ldr	r3, [pc, #176]	; (4f58 <MyWrapper+0x178>)
    4ea6:	4798      	blx	r3
}
    4ea8:	0028      	movs	r0, r5
    4eaa:	b003      	add	sp, #12
    4eac:	bc0c      	pop	{r2, r3}
    4eae:	4690      	mov	r8, r2
    4eb0:	469a      	mov	sl, r3
    4eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    4eb4:	6843      	ldr	r3, [r0, #4]
    4eb6:	2b00      	cmp	r3, #0
    4eb8:	d0a6      	beq.n	4e08 <MyWrapper+0x28>
    4eba:	b672      	cpsid	i
    4ebc:	e7fe      	b.n	4ebc <MyWrapper+0xdc>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    4ec0:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4ec2:	2b00      	cmp	r3, #0
    4ec4:	d0ed      	beq.n	4ea2 <MyWrapper+0xc2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4ec6:	0020      	movs	r0, r4
    4ec8:	3024      	adds	r0, #36	; 0x24
    4eca:	4b24      	ldr	r3, [pc, #144]	; (4f5c <MyWrapper+0x17c>)
    4ecc:	4798      	blx	r3
    4ece:	2800      	cmp	r0, #0
    4ed0:	d0e7      	beq.n	4ea2 <MyWrapper+0xc2>
								if( pxHigherPriorityTaskWoken != NULL )
    4ed2:	2f00      	cmp	r7, #0
    4ed4:	d02b      	beq.n	4f2e <MyWrapper+0x14e>
									*pxHigherPriorityTaskWoken = pdTRUE;
    4ed6:	2301      	movs	r3, #1
    4ed8:	603b      	str	r3, [r7, #0]
    4eda:	e7e2      	b.n	4ea2 <MyWrapper+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    4edc:	3501      	adds	r5, #1
    4ede:	b26d      	sxtb	r5, r5
    4ee0:	2345      	movs	r3, #69	; 0x45
    4ee2:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
    4ee4:	2501      	movs	r5, #1
    4ee6:	e7dc      	b.n	4ea2 <MyWrapper+0xc2>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    4ee8:	0020      	movs	r0, r4
    4eea:	4b13      	ldr	r3, [pc, #76]	; (4f38 <MyWrapper+0x158>)
    4eec:	4798      	blx	r3
    4eee:	4b13      	ldr	r3, [pc, #76]	; (4f3c <MyWrapper+0x15c>)
    4ef0:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
    4ef2:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    4ef4:	4203      	tst	r3, r0
    4ef6:	d0d4      	beq.n	4ea2 <MyWrapper+0xc2>
    4ef8:	355d      	adds	r5, #93	; 0x5d
    4efa:	2e00      	cmp	r6, #0
    4efc:	d106      	bne.n	4f0c <MyWrapper+0x12c>
    4efe:	0020      	movs	r0, r4
    4f00:	4b0f      	ldr	r3, [pc, #60]	; (4f40 <MyWrapper+0x160>)
    4f02:	4798      	blx	r3
    4f04:	4b0f      	ldr	r3, [pc, #60]	; (4f44 <MyWrapper+0x164>)
    4f06:	5c1d      	ldrb	r5, [r3, r0]
    4f08:	3558      	adds	r5, #88	; 0x58
    4f0a:	b2ed      	uxtb	r5, r5
    4f0c:	0020      	movs	r0, r4
    4f0e:	4b0c      	ldr	r3, [pc, #48]	; (4f40 <MyWrapper+0x160>)
    4f10:	4798      	blx	r3
    4f12:	4b0c      	ldr	r3, [pc, #48]	; (4f44 <MyWrapper+0x164>)
    4f14:	5c1f      	ldrb	r7, [r3, r0]
    4f16:	0020      	movs	r0, r4
    4f18:	4b0b      	ldr	r3, [pc, #44]	; (4f48 <MyWrapper+0x168>)
    4f1a:	4798      	blx	r3
    4f1c:	b2c2      	uxtb	r2, r0
    4f1e:	0039      	movs	r1, r7
    4f20:	0028      	movs	r0, r5
    4f22:	4b0a      	ldr	r3, [pc, #40]	; (4f4c <MyWrapper+0x16c>)
    4f24:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    4f26:	2500      	movs	r5, #0
    4f28:	e7bb      	b.n	4ea2 <MyWrapper+0xc2>
			xReturn = pdPASS;
    4f2a:	2501      	movs	r5, #1
    4f2c:	e7b9      	b.n	4ea2 <MyWrapper+0xc2>
    4f2e:	2501      	movs	r5, #1
    4f30:	e7b7      	b.n	4ea2 <MyWrapper+0xc2>
    4f32:	46c0      	nop			; (mov r8, r8)
    4f34:	00004359 	.word	0x00004359
    4f38:	00003115 	.word	0x00003115
    4f3c:	2000008c 	.word	0x2000008c
    4f40:	00003095 	.word	0x00003095
    4f44:	20000084 	.word	0x20000084
    4f48:	00003105 	.word	0x00003105
    4f4c:	00003da1 	.word	0x00003da1
    4f50:	00003875 	.word	0x00003875
    4f54:	00004529 	.word	0x00004529
    4f58:	00004361 	.word	0x00004361
    4f5c:	000060dd 	.word	0x000060dd

00004f60 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
    4f60:	b510      	push	{r4, lr}
    4f62:	2200      	movs	r2, #0
    4f64:	4b01      	ldr	r3, [pc, #4]	; (4f6c <xQueueGiveFromISR+0xc>)
    4f66:	4798      	blx	r3
    4f68:	bd10      	pop	{r4, pc}
    4f6a:	46c0      	nop			; (mov r8, r8)
    4f6c:	00004de1 	.word	0x00004de1

00004f70 <xQueueReceive>:
{
    4f70:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f72:	46ce      	mov	lr, r9
    4f74:	4647      	mov	r7, r8
    4f76:	b580      	push	{r7, lr}
    4f78:	b085      	sub	sp, #20
    4f7a:	1e04      	subs	r4, r0, #0
    4f7c:	9100      	str	r1, [sp, #0]
    4f7e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    4f80:	d00b      	beq.n	4f9a <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    4f82:	9b00      	ldr	r3, [sp, #0]
    4f84:	2b00      	cmp	r3, #0
    4f86:	d00a      	beq.n	4f9e <xQueueReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    4f88:	4ba4      	ldr	r3, [pc, #656]	; (521c <xQueueReceive+0x2ac>)
    4f8a:	4798      	blx	r3
    4f8c:	2800      	cmp	r0, #0
    4f8e:	d10b      	bne.n	4fa8 <xQueueReceive+0x38>
    4f90:	9b01      	ldr	r3, [sp, #4]
    4f92:	2b00      	cmp	r3, #0
    4f94:	d00c      	beq.n	4fb0 <xQueueReceive+0x40>
    4f96:	b672      	cpsid	i
    4f98:	e7fe      	b.n	4f98 <xQueueReceive+0x28>
	configASSERT( ( pxQueue ) );
    4f9a:	b672      	cpsid	i
    4f9c:	e7fe      	b.n	4f9c <xQueueReceive+0x2c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    4f9e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4fa0:	2b00      	cmp	r3, #0
    4fa2:	d0f1      	beq.n	4f88 <xQueueReceive+0x18>
    4fa4:	b672      	cpsid	i
    4fa6:	e7fe      	b.n	4fa6 <xQueueReceive+0x36>
    4fa8:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    4faa:	4b9d      	ldr	r3, [pc, #628]	; (5220 <xQueueReceive+0x2b0>)
    4fac:	4698      	mov	r8, r3
    4fae:	e0b4      	b.n	511a <xQueueReceive+0x1aa>
    4fb0:	2500      	movs	r5, #0
    4fb2:	e7fa      	b.n	4faa <xQueueReceive+0x3a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4fb4:	9900      	ldr	r1, [sp, #0]
    4fb6:	0020      	movs	r0, r4
    4fb8:	4b9a      	ldr	r3, [pc, #616]	; (5224 <xQueueReceive+0x2b4>)
    4fba:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
    4fbc:	4b9a      	ldr	r3, [pc, #616]	; (5228 <xQueueReceive+0x2b8>)
    4fbe:	4798      	blx	r3
    4fc0:	4b9a      	ldr	r3, [pc, #616]	; (522c <xQueueReceive+0x2bc>)
    4fc2:	4798      	blx	r3
    4fc4:	4b9a      	ldr	r3, [pc, #616]	; (5230 <xQueueReceive+0x2c0>)
    4fc6:	881b      	ldrh	r3, [r3, #0]
    4fc8:	4203      	tst	r3, r0
    4fca:	d019      	beq.n	5000 <xQueueReceive+0x90>
    4fcc:	0020      	movs	r0, r4
    4fce:	4b99      	ldr	r3, [pc, #612]	; (5234 <xQueueReceive+0x2c4>)
    4fd0:	4798      	blx	r3
    4fd2:	4b97      	ldr	r3, [pc, #604]	; (5230 <xQueueReceive+0x2c0>)
    4fd4:	881b      	ldrh	r3, [r3, #0]
    4fd6:	4203      	tst	r3, r0
    4fd8:	d012      	beq.n	5000 <xQueueReceive+0x90>
    4fda:	0020      	movs	r0, r4
    4fdc:	4b96      	ldr	r3, [pc, #600]	; (5238 <xQueueReceive+0x2c8>)
    4fde:	4698      	mov	r8, r3
    4fe0:	4798      	blx	r3
    4fe2:	4f96      	ldr	r7, [pc, #600]	; (523c <xQueueReceive+0x2cc>)
    4fe4:	5c3d      	ldrb	r5, [r7, r0]
    4fe6:	3528      	adds	r5, #40	; 0x28
    4fe8:	b2ed      	uxtb	r5, r5
    4fea:	0020      	movs	r0, r4
    4fec:	47c0      	blx	r8
    4fee:	5c3f      	ldrb	r7, [r7, r0]
    4ff0:	0020      	movs	r0, r4
    4ff2:	4b93      	ldr	r3, [pc, #588]	; (5240 <xQueueReceive+0x2d0>)
    4ff4:	4798      	blx	r3
    4ff6:	b2c2      	uxtb	r2, r0
    4ff8:	0039      	movs	r1, r7
    4ffa:	0028      	movs	r0, r5
    4ffc:	4b91      	ldr	r3, [pc, #580]	; (5244 <xQueueReceive+0x2d4>)
    4ffe:	4798      	blx	r3
    5000:	0020      	movs	r0, r4
    5002:	4f8d      	ldr	r7, [pc, #564]	; (5238 <xQueueReceive+0x2c8>)
    5004:	47b8      	blx	r7
    5006:	4d8d      	ldr	r5, [pc, #564]	; (523c <xQueueReceive+0x2cc>)
    5008:	5c2b      	ldrb	r3, [r5, r0]
    500a:	4699      	mov	r9, r3
    500c:	0020      	movs	r0, r4
    500e:	4b8c      	ldr	r3, [pc, #560]	; (5240 <xQueueReceive+0x2d0>)
    5010:	4798      	blx	r3
    5012:	b2c3      	uxtb	r3, r0
    5014:	4698      	mov	r8, r3
    5016:	0020      	movs	r0, r4
    5018:	47b8      	blx	r7
    501a:	5c2b      	ldrb	r3, [r5, r0]
    501c:	2b02      	cmp	r3, #2
    501e:	d11e      	bne.n	505e <xQueueReceive+0xee>
    5020:	4b81      	ldr	r3, [pc, #516]	; (5228 <xQueueReceive+0x2b8>)
    5022:	4798      	blx	r3
    5024:	4b88      	ldr	r3, [pc, #544]	; (5248 <xQueueReceive+0x2d8>)
    5026:	4798      	blx	r3
    5028:	b2c2      	uxtb	r2, r0
    502a:	4641      	mov	r1, r8
    502c:	4648      	mov	r0, r9
    502e:	4b87      	ldr	r3, [pc, #540]	; (524c <xQueueReceive+0x2dc>)
    5030:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    5032:	3e01      	subs	r6, #1
    5034:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5036:	6923      	ldr	r3, [r4, #16]
    5038:	2b00      	cmp	r3, #0
    503a:	d007      	beq.n	504c <xQueueReceive+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    503c:	0020      	movs	r0, r4
    503e:	3010      	adds	r0, #16
    5040:	4b83      	ldr	r3, [pc, #524]	; (5250 <xQueueReceive+0x2e0>)
    5042:	4798      	blx	r3
    5044:	2800      	cmp	r0, #0
    5046:	d001      	beq.n	504c <xQueueReceive+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
    5048:	4b82      	ldr	r3, [pc, #520]	; (5254 <xQueueReceive+0x2e4>)
    504a:	4798      	blx	r3
				taskEXIT_CRITICAL();
    504c:	4b82      	ldr	r3, [pc, #520]	; (5258 <xQueueReceive+0x2e8>)
    504e:	4798      	blx	r3
				return pdPASS;
    5050:	2301      	movs	r3, #1
}
    5052:	0018      	movs	r0, r3
    5054:	b005      	add	sp, #20
    5056:	bc0c      	pop	{r2, r3}
    5058:	4690      	mov	r8, r2
    505a:	4699      	mov	r9, r3
    505c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
    505e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    5060:	3a01      	subs	r2, #1
    5062:	b2d2      	uxtb	r2, r2
    5064:	e7e1      	b.n	502a <xQueueReceive+0xba>
					taskEXIT_CRITICAL();
    5066:	4b7c      	ldr	r3, [pc, #496]	; (5258 <xQueueReceive+0x2e8>)
    5068:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    506a:	4b6f      	ldr	r3, [pc, #444]	; (5228 <xQueueReceive+0x2b8>)
    506c:	4798      	blx	r3
    506e:	4b6f      	ldr	r3, [pc, #444]	; (522c <xQueueReceive+0x2bc>)
    5070:	4798      	blx	r3
    5072:	4b6f      	ldr	r3, [pc, #444]	; (5230 <xQueueReceive+0x2c0>)
    5074:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
    5076:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    5078:	4202      	tst	r2, r0
    507a:	d0ea      	beq.n	5052 <xQueueReceive+0xe2>
    507c:	0020      	movs	r0, r4
    507e:	4b6d      	ldr	r3, [pc, #436]	; (5234 <xQueueReceive+0x2c4>)
    5080:	4798      	blx	r3
    5082:	4b6b      	ldr	r3, [pc, #428]	; (5230 <xQueueReceive+0x2c0>)
    5084:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
    5086:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    5088:	4202      	tst	r2, r0
    508a:	d0e2      	beq.n	5052 <xQueueReceive+0xe2>
    508c:	0020      	movs	r0, r4
    508e:	4f6a      	ldr	r7, [pc, #424]	; (5238 <xQueueReceive+0x2c8>)
    5090:	47b8      	blx	r7
    5092:	4e6a      	ldr	r6, [pc, #424]	; (523c <xQueueReceive+0x2cc>)
    5094:	5c35      	ldrb	r5, [r6, r0]
    5096:	3550      	adds	r5, #80	; 0x50
    5098:	b2ed      	uxtb	r5, r5
    509a:	0020      	movs	r0, r4
    509c:	47b8      	blx	r7
    509e:	5c36      	ldrb	r6, [r6, r0]
    50a0:	0020      	movs	r0, r4
    50a2:	4b67      	ldr	r3, [pc, #412]	; (5240 <xQueueReceive+0x2d0>)
    50a4:	4798      	blx	r3
    50a6:	b2c2      	uxtb	r2, r0
    50a8:	0031      	movs	r1, r6
    50aa:	0028      	movs	r0, r5
    50ac:	4b65      	ldr	r3, [pc, #404]	; (5244 <xQueueReceive+0x2d4>)
    50ae:	4798      	blx	r3
					return errQUEUE_EMPTY;
    50b0:	2300      	movs	r3, #0
    50b2:	e7ce      	b.n	5052 <xQueueReceive+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
    50b4:	a802      	add	r0, sp, #8
    50b6:	4b69      	ldr	r3, [pc, #420]	; (525c <xQueueReceive+0x2ec>)
    50b8:	4798      	blx	r3
    50ba:	e038      	b.n	512e <xQueueReceive+0x1be>
		prvLockQueue( pxQueue );
    50bc:	2200      	movs	r2, #0
    50be:	2344      	movs	r3, #68	; 0x44
    50c0:	54e2      	strb	r2, [r4, r3]
    50c2:	e03f      	b.n	5144 <xQueueReceive+0x1d4>
    50c4:	2200      	movs	r2, #0
    50c6:	2345      	movs	r3, #69	; 0x45
    50c8:	54e2      	strb	r2, [r4, r3]
    50ca:	e040      	b.n	514e <xQueueReceive+0x1de>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    50cc:	0020      	movs	r0, r4
    50ce:	4b59      	ldr	r3, [pc, #356]	; (5234 <xQueueReceive+0x2c4>)
    50d0:	4798      	blx	r3
    50d2:	4b57      	ldr	r3, [pc, #348]	; (5230 <xQueueReceive+0x2c0>)
    50d4:	881b      	ldrh	r3, [r3, #0]
    50d6:	4203      	tst	r3, r0
    50d8:	d04e      	beq.n	5178 <xQueueReceive+0x208>
    50da:	0020      	movs	r0, r4
    50dc:	4f56      	ldr	r7, [pc, #344]	; (5238 <xQueueReceive+0x2c8>)
    50de:	47b8      	blx	r7
    50e0:	4e56      	ldr	r6, [pc, #344]	; (523c <xQueueReceive+0x2cc>)
    50e2:	5c35      	ldrb	r5, [r6, r0]
    50e4:	3568      	adds	r5, #104	; 0x68
    50e6:	b2ed      	uxtb	r5, r5
    50e8:	0020      	movs	r0, r4
    50ea:	47b8      	blx	r7
    50ec:	5c36      	ldrb	r6, [r6, r0]
    50ee:	0020      	movs	r0, r4
    50f0:	4b53      	ldr	r3, [pc, #332]	; (5240 <xQueueReceive+0x2d0>)
    50f2:	4798      	blx	r3
    50f4:	b2c2      	uxtb	r2, r0
    50f6:	0031      	movs	r1, r6
    50f8:	0028      	movs	r0, r5
    50fa:	4b52      	ldr	r3, [pc, #328]	; (5244 <xQueueReceive+0x2d4>)
    50fc:	4798      	blx	r3
    50fe:	e03b      	b.n	5178 <xQueueReceive+0x208>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    5100:	0020      	movs	r0, r4
    5102:	3024      	adds	r0, #36	; 0x24
    5104:	9901      	ldr	r1, [sp, #4]
    5106:	4b56      	ldr	r3, [pc, #344]	; (5260 <xQueueReceive+0x2f0>)
    5108:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    510a:	0020      	movs	r0, r4
    510c:	4b55      	ldr	r3, [pc, #340]	; (5264 <xQueueReceive+0x2f4>)
    510e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    5110:	4b55      	ldr	r3, [pc, #340]	; (5268 <xQueueReceive+0x2f8>)
    5112:	4798      	blx	r3
    5114:	2800      	cmp	r0, #0
    5116:	d046      	beq.n	51a6 <xQueueReceive+0x236>
    5118:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    511a:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    511c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    511e:	2e00      	cmp	r6, #0
    5120:	d000      	beq.n	5124 <xQueueReceive+0x1b4>
    5122:	e747      	b.n	4fb4 <xQueueReceive+0x44>
				if( xTicksToWait == ( TickType_t ) 0 )
    5124:	9b01      	ldr	r3, [sp, #4]
    5126:	2b00      	cmp	r3, #0
    5128:	d09d      	beq.n	5066 <xQueueReceive+0xf6>
				else if( xEntryTimeSet == pdFALSE )
    512a:	2d00      	cmp	r5, #0
    512c:	d0c2      	beq.n	50b4 <xQueueReceive+0x144>
		taskEXIT_CRITICAL();
    512e:	4b4a      	ldr	r3, [pc, #296]	; (5258 <xQueueReceive+0x2e8>)
    5130:	4798      	blx	r3
		vTaskSuspendAll();
    5132:	4b4e      	ldr	r3, [pc, #312]	; (526c <xQueueReceive+0x2fc>)
    5134:	4798      	blx	r3
		prvLockQueue( pxQueue );
    5136:	4b3a      	ldr	r3, [pc, #232]	; (5220 <xQueueReceive+0x2b0>)
    5138:	4798      	blx	r3
    513a:	2344      	movs	r3, #68	; 0x44
    513c:	5ce3      	ldrb	r3, [r4, r3]
    513e:	b25b      	sxtb	r3, r3
    5140:	3301      	adds	r3, #1
    5142:	d0bb      	beq.n	50bc <xQueueReceive+0x14c>
    5144:	2345      	movs	r3, #69	; 0x45
    5146:	5ce3      	ldrb	r3, [r4, r3]
    5148:	b25b      	sxtb	r3, r3
    514a:	3301      	adds	r3, #1
    514c:	d0ba      	beq.n	50c4 <xQueueReceive+0x154>
    514e:	4b42      	ldr	r3, [pc, #264]	; (5258 <xQueueReceive+0x2e8>)
    5150:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    5152:	a901      	add	r1, sp, #4
    5154:	a802      	add	r0, sp, #8
    5156:	4b46      	ldr	r3, [pc, #280]	; (5270 <xQueueReceive+0x300>)
    5158:	4798      	blx	r3
    515a:	2800      	cmp	r0, #0
    515c:	d12c      	bne.n	51b8 <xQueueReceive+0x248>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    515e:	0020      	movs	r0, r4
    5160:	4b44      	ldr	r3, [pc, #272]	; (5274 <xQueueReceive+0x304>)
    5162:	4798      	blx	r3
    5164:	2800      	cmp	r0, #0
    5166:	d021      	beq.n	51ac <xQueueReceive+0x23c>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    5168:	4b2f      	ldr	r3, [pc, #188]	; (5228 <xQueueReceive+0x2b8>)
    516a:	4798      	blx	r3
    516c:	4b2f      	ldr	r3, [pc, #188]	; (522c <xQueueReceive+0x2bc>)
    516e:	4798      	blx	r3
    5170:	4b2f      	ldr	r3, [pc, #188]	; (5230 <xQueueReceive+0x2c0>)
    5172:	881b      	ldrh	r3, [r3, #0]
    5174:	4203      	tst	r3, r0
    5176:	d1a9      	bne.n	50cc <xQueueReceive+0x15c>
    5178:	0020      	movs	r0, r4
    517a:	4b2f      	ldr	r3, [pc, #188]	; (5238 <xQueueReceive+0x2c8>)
    517c:	4798      	blx	r3
    517e:	4b2f      	ldr	r3, [pc, #188]	; (523c <xQueueReceive+0x2cc>)
    5180:	5c1b      	ldrb	r3, [r3, r0]
    5182:	2b02      	cmp	r3, #2
    5184:	d0bc      	beq.n	5100 <xQueueReceive+0x190>
    5186:	4b28      	ldr	r3, [pc, #160]	; (5228 <xQueueReceive+0x2b8>)
    5188:	4798      	blx	r3
    518a:	4b28      	ldr	r3, [pc, #160]	; (522c <xQueueReceive+0x2bc>)
    518c:	4798      	blx	r3
    518e:	4b28      	ldr	r3, [pc, #160]	; (5230 <xQueueReceive+0x2c0>)
    5190:	881b      	ldrh	r3, [r3, #0]
    5192:	4203      	tst	r3, r0
    5194:	d0b4      	beq.n	5100 <xQueueReceive+0x190>
    5196:	4b24      	ldr	r3, [pc, #144]	; (5228 <xQueueReceive+0x2b8>)
    5198:	4798      	blx	r3
    519a:	4b2b      	ldr	r3, [pc, #172]	; (5248 <xQueueReceive+0x2d8>)
    519c:	4798      	blx	r3
    519e:	b2c0      	uxtb	r0, r0
    51a0:	4b35      	ldr	r3, [pc, #212]	; (5278 <xQueueReceive+0x308>)
    51a2:	4798      	blx	r3
    51a4:	e7ac      	b.n	5100 <xQueueReceive+0x190>
					portYIELD_WITHIN_API();
    51a6:	4b2b      	ldr	r3, [pc, #172]	; (5254 <xQueueReceive+0x2e4>)
    51a8:	4798      	blx	r3
    51aa:	e7b5      	b.n	5118 <xQueueReceive+0x1a8>
				prvUnlockQueue( pxQueue );
    51ac:	0020      	movs	r0, r4
    51ae:	4b2d      	ldr	r3, [pc, #180]	; (5264 <xQueueReceive+0x2f4>)
    51b0:	4798      	blx	r3
				( void ) xTaskResumeAll();
    51b2:	4b2d      	ldr	r3, [pc, #180]	; (5268 <xQueueReceive+0x2f8>)
    51b4:	4798      	blx	r3
    51b6:	e7af      	b.n	5118 <xQueueReceive+0x1a8>
			prvUnlockQueue( pxQueue );
    51b8:	0020      	movs	r0, r4
    51ba:	4b2a      	ldr	r3, [pc, #168]	; (5264 <xQueueReceive+0x2f4>)
    51bc:	4798      	blx	r3
			( void ) xTaskResumeAll();
    51be:	4b2a      	ldr	r3, [pc, #168]	; (5268 <xQueueReceive+0x2f8>)
    51c0:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    51c2:	0020      	movs	r0, r4
    51c4:	4b2b      	ldr	r3, [pc, #172]	; (5274 <xQueueReceive+0x304>)
    51c6:	4798      	blx	r3
    51c8:	2800      	cmp	r0, #0
    51ca:	d0a5      	beq.n	5118 <xQueueReceive+0x1a8>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    51cc:	4b16      	ldr	r3, [pc, #88]	; (5228 <xQueueReceive+0x2b8>)
    51ce:	4798      	blx	r3
    51d0:	4b16      	ldr	r3, [pc, #88]	; (522c <xQueueReceive+0x2bc>)
    51d2:	4798      	blx	r3
    51d4:	4b16      	ldr	r3, [pc, #88]	; (5230 <xQueueReceive+0x2c0>)
    51d6:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
    51d8:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    51da:	4202      	tst	r2, r0
    51dc:	d100      	bne.n	51e0 <xQueueReceive+0x270>
    51de:	e738      	b.n	5052 <xQueueReceive+0xe2>
    51e0:	0020      	movs	r0, r4
    51e2:	4b14      	ldr	r3, [pc, #80]	; (5234 <xQueueReceive+0x2c4>)
    51e4:	4798      	blx	r3
    51e6:	4b12      	ldr	r3, [pc, #72]	; (5230 <xQueueReceive+0x2c0>)
    51e8:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
    51ea:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    51ec:	4202      	tst	r2, r0
    51ee:	d100      	bne.n	51f2 <xQueueReceive+0x282>
    51f0:	e72f      	b.n	5052 <xQueueReceive+0xe2>
    51f2:	0020      	movs	r0, r4
    51f4:	4f10      	ldr	r7, [pc, #64]	; (5238 <xQueueReceive+0x2c8>)
    51f6:	47b8      	blx	r7
    51f8:	4e10      	ldr	r6, [pc, #64]	; (523c <xQueueReceive+0x2cc>)
    51fa:	5c35      	ldrb	r5, [r6, r0]
    51fc:	3550      	adds	r5, #80	; 0x50
    51fe:	b2ed      	uxtb	r5, r5
    5200:	0020      	movs	r0, r4
    5202:	47b8      	blx	r7
    5204:	5c36      	ldrb	r6, [r6, r0]
    5206:	0020      	movs	r0, r4
    5208:	4b0d      	ldr	r3, [pc, #52]	; (5240 <xQueueReceive+0x2d0>)
    520a:	4798      	blx	r3
    520c:	b2c2      	uxtb	r2, r0
    520e:	0031      	movs	r1, r6
    5210:	0028      	movs	r0, r5
    5212:	4b0c      	ldr	r3, [pc, #48]	; (5244 <xQueueReceive+0x2d4>)
    5214:	4798      	blx	r3
				return errQUEUE_EMPTY;
    5216:	2300      	movs	r3, #0
    5218:	e71b      	b.n	5052 <xQueueReceive+0xe2>
    521a:	46c0      	nop			; (mov r8, r8)
    521c:	00006245 	.word	0x00006245
    5220:	00004321 	.word	0x00004321
    5224:	00004645 	.word	0x00004645
    5228:	00003169 	.word	0x00003169
    522c:	000030b1 	.word	0x000030b1
    5230:	2000008c 	.word	0x2000008c
    5234:	00003115 	.word	0x00003115
    5238:	00003095 	.word	0x00003095
    523c:	20000084 	.word	0x20000084
    5240:	00003105 	.word	0x00003105
    5244:	00003da1 	.word	0x00003da1
    5248:	000030a1 	.word	0x000030a1
    524c:	00003875 	.word	0x00003875
    5250:	000060dd 	.word	0x000060dd
    5254:	00004311 	.word	0x00004311
    5258:	00004339 	.word	0x00004339
    525c:	00006191 	.word	0x00006191
    5260:	00006015 	.word	0x00006015
    5264:	0000466d 	.word	0x0000466d
    5268:	00005c2d 	.word	0x00005c2d
    526c:	00005a85 	.word	0x00005a85
    5270:	000061a9 	.word	0x000061a9
    5274:	00004491 	.word	0x00004491
    5278:	000038cd 	.word	0x000038cd

0000527c <xQueueSemaphoreTake>:
{
    527c:	b5f0      	push	{r4, r5, r6, r7, lr}
    527e:	46ce      	mov	lr, r9
    5280:	4647      	mov	r7, r8
    5282:	b580      	push	{r7, lr}
    5284:	b085      	sub	sp, #20
    5286:	1e04      	subs	r4, r0, #0
    5288:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
    528a:	d004      	beq.n	5296 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
    528c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    528e:	2b00      	cmp	r3, #0
    5290:	d003      	beq.n	529a <xQueueSemaphoreTake+0x1e>
    5292:	b672      	cpsid	i
    5294:	e7fe      	b.n	5294 <xQueueSemaphoreTake+0x18>
	configASSERT( ( pxQueue ) );
    5296:	b672      	cpsid	i
    5298:	e7fe      	b.n	5298 <xQueueSemaphoreTake+0x1c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    529a:	4bb2      	ldr	r3, [pc, #712]	; (5564 <xQueueSemaphoreTake+0x2e8>)
    529c:	4798      	blx	r3
    529e:	2800      	cmp	r0, #0
    52a0:	d104      	bne.n	52ac <xQueueSemaphoreTake+0x30>
    52a2:	9b01      	ldr	r3, [sp, #4]
    52a4:	2b00      	cmp	r3, #0
    52a6:	d006      	beq.n	52b6 <xQueueSemaphoreTake+0x3a>
    52a8:	b672      	cpsid	i
    52aa:	e7fe      	b.n	52aa <xQueueSemaphoreTake+0x2e>
    52ac:	2500      	movs	r5, #0
    52ae:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    52b0:	4bad      	ldr	r3, [pc, #692]	; (5568 <xQueueSemaphoreTake+0x2ec>)
    52b2:	4698      	mov	r8, r3
    52b4:	e0bd      	b.n	5432 <xQueueSemaphoreTake+0x1b6>
    52b6:	2500      	movs	r5, #0
    52b8:	2700      	movs	r7, #0
    52ba:	e7f9      	b.n	52b0 <xQueueSemaphoreTake+0x34>
				traceQUEUE_RECEIVE( pxQueue );
    52bc:	4bab      	ldr	r3, [pc, #684]	; (556c <xQueueSemaphoreTake+0x2f0>)
    52be:	4798      	blx	r3
    52c0:	4bab      	ldr	r3, [pc, #684]	; (5570 <xQueueSemaphoreTake+0x2f4>)
    52c2:	4798      	blx	r3
    52c4:	4bab      	ldr	r3, [pc, #684]	; (5574 <xQueueSemaphoreTake+0x2f8>)
    52c6:	881b      	ldrh	r3, [r3, #0]
    52c8:	4203      	tst	r3, r0
    52ca:	d019      	beq.n	5300 <xQueueSemaphoreTake+0x84>
    52cc:	0020      	movs	r0, r4
    52ce:	4baa      	ldr	r3, [pc, #680]	; (5578 <xQueueSemaphoreTake+0x2fc>)
    52d0:	4798      	blx	r3
    52d2:	4ba8      	ldr	r3, [pc, #672]	; (5574 <xQueueSemaphoreTake+0x2f8>)
    52d4:	881b      	ldrh	r3, [r3, #0]
    52d6:	4203      	tst	r3, r0
    52d8:	d012      	beq.n	5300 <xQueueSemaphoreTake+0x84>
    52da:	0020      	movs	r0, r4
    52dc:	4ba7      	ldr	r3, [pc, #668]	; (557c <xQueueSemaphoreTake+0x300>)
    52de:	4698      	mov	r8, r3
    52e0:	4798      	blx	r3
    52e2:	4fa7      	ldr	r7, [pc, #668]	; (5580 <xQueueSemaphoreTake+0x304>)
    52e4:	5c3d      	ldrb	r5, [r7, r0]
    52e6:	3528      	adds	r5, #40	; 0x28
    52e8:	b2ed      	uxtb	r5, r5
    52ea:	0020      	movs	r0, r4
    52ec:	47c0      	blx	r8
    52ee:	5c3f      	ldrb	r7, [r7, r0]
    52f0:	0020      	movs	r0, r4
    52f2:	4ba4      	ldr	r3, [pc, #656]	; (5584 <xQueueSemaphoreTake+0x308>)
    52f4:	4798      	blx	r3
    52f6:	b2c2      	uxtb	r2, r0
    52f8:	0039      	movs	r1, r7
    52fa:	0028      	movs	r0, r5
    52fc:	4ba2      	ldr	r3, [pc, #648]	; (5588 <xQueueSemaphoreTake+0x30c>)
    52fe:	4798      	blx	r3
    5300:	0020      	movs	r0, r4
    5302:	4f9e      	ldr	r7, [pc, #632]	; (557c <xQueueSemaphoreTake+0x300>)
    5304:	47b8      	blx	r7
    5306:	4d9e      	ldr	r5, [pc, #632]	; (5580 <xQueueSemaphoreTake+0x304>)
    5308:	5c2b      	ldrb	r3, [r5, r0]
    530a:	4699      	mov	r9, r3
    530c:	0020      	movs	r0, r4
    530e:	4b9d      	ldr	r3, [pc, #628]	; (5584 <xQueueSemaphoreTake+0x308>)
    5310:	4798      	blx	r3
    5312:	b2c3      	uxtb	r3, r0
    5314:	4698      	mov	r8, r3
    5316:	0020      	movs	r0, r4
    5318:	47b8      	blx	r7
    531a:	5c2b      	ldrb	r3, [r5, r0]
    531c:	2b02      	cmp	r3, #2
    531e:	d124      	bne.n	536a <xQueueSemaphoreTake+0xee>
    5320:	4b92      	ldr	r3, [pc, #584]	; (556c <xQueueSemaphoreTake+0x2f0>)
    5322:	4798      	blx	r3
    5324:	4b99      	ldr	r3, [pc, #612]	; (558c <xQueueSemaphoreTake+0x310>)
    5326:	4798      	blx	r3
    5328:	b2c2      	uxtb	r2, r0
    532a:	4641      	mov	r1, r8
    532c:	4648      	mov	r0, r9
    532e:	4b98      	ldr	r3, [pc, #608]	; (5590 <xQueueSemaphoreTake+0x314>)
    5330:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    5332:	3e01      	subs	r6, #1
    5334:	63a6      	str	r6, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    5336:	6823      	ldr	r3, [r4, #0]
    5338:	2b00      	cmp	r3, #0
    533a:	d102      	bne.n	5342 <xQueueSemaphoreTake+0xc6>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    533c:	4b95      	ldr	r3, [pc, #596]	; (5594 <xQueueSemaphoreTake+0x318>)
    533e:	4798      	blx	r3
    5340:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5342:	6923      	ldr	r3, [r4, #16]
    5344:	2b00      	cmp	r3, #0
    5346:	d007      	beq.n	5358 <xQueueSemaphoreTake+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5348:	0020      	movs	r0, r4
    534a:	3010      	adds	r0, #16
    534c:	4b92      	ldr	r3, [pc, #584]	; (5598 <xQueueSemaphoreTake+0x31c>)
    534e:	4798      	blx	r3
    5350:	2800      	cmp	r0, #0
    5352:	d001      	beq.n	5358 <xQueueSemaphoreTake+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
    5354:	4b91      	ldr	r3, [pc, #580]	; (559c <xQueueSemaphoreTake+0x320>)
    5356:	4798      	blx	r3
				taskEXIT_CRITICAL();
    5358:	4b91      	ldr	r3, [pc, #580]	; (55a0 <xQueueSemaphoreTake+0x324>)
    535a:	4798      	blx	r3
				return pdPASS;
    535c:	2501      	movs	r5, #1
}
    535e:	0028      	movs	r0, r5
    5360:	b005      	add	sp, #20
    5362:	bc0c      	pop	{r2, r3}
    5364:	4690      	mov	r8, r2
    5366:	4699      	mov	r9, r3
    5368:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
    536a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    536c:	3a01      	subs	r2, #1
    536e:	b2d2      	uxtb	r2, r2
    5370:	e7db      	b.n	532a <xQueueSemaphoreTake+0xae>
						configASSERT( xInheritanceOccurred == pdFALSE );
    5372:	2d00      	cmp	r5, #0
    5374:	d001      	beq.n	537a <xQueueSemaphoreTake+0xfe>
    5376:	b672      	cpsid	i
    5378:	e7fe      	b.n	5378 <xQueueSemaphoreTake+0xfc>
					taskEXIT_CRITICAL();
    537a:	4b89      	ldr	r3, [pc, #548]	; (55a0 <xQueueSemaphoreTake+0x324>)
    537c:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    537e:	4b7b      	ldr	r3, [pc, #492]	; (556c <xQueueSemaphoreTake+0x2f0>)
    5380:	4798      	blx	r3
    5382:	4b7b      	ldr	r3, [pc, #492]	; (5570 <xQueueSemaphoreTake+0x2f4>)
    5384:	4798      	blx	r3
    5386:	4b7b      	ldr	r3, [pc, #492]	; (5574 <xQueueSemaphoreTake+0x2f8>)
    5388:	881b      	ldrh	r3, [r3, #0]
    538a:	4203      	tst	r3, r0
    538c:	d0e7      	beq.n	535e <xQueueSemaphoreTake+0xe2>
    538e:	0020      	movs	r0, r4
    5390:	4b79      	ldr	r3, [pc, #484]	; (5578 <xQueueSemaphoreTake+0x2fc>)
    5392:	4798      	blx	r3
    5394:	4b77      	ldr	r3, [pc, #476]	; (5574 <xQueueSemaphoreTake+0x2f8>)
    5396:	881b      	ldrh	r3, [r3, #0]
    5398:	4203      	tst	r3, r0
    539a:	d0e0      	beq.n	535e <xQueueSemaphoreTake+0xe2>
    539c:	0020      	movs	r0, r4
    539e:	4b77      	ldr	r3, [pc, #476]	; (557c <xQueueSemaphoreTake+0x300>)
    53a0:	4698      	mov	r8, r3
    53a2:	4798      	blx	r3
    53a4:	4f76      	ldr	r7, [pc, #472]	; (5580 <xQueueSemaphoreTake+0x304>)
    53a6:	5c3e      	ldrb	r6, [r7, r0]
    53a8:	3650      	adds	r6, #80	; 0x50
    53aa:	b2f6      	uxtb	r6, r6
    53ac:	0020      	movs	r0, r4
    53ae:	47c0      	blx	r8
    53b0:	5c3f      	ldrb	r7, [r7, r0]
    53b2:	0020      	movs	r0, r4
    53b4:	4b73      	ldr	r3, [pc, #460]	; (5584 <xQueueSemaphoreTake+0x308>)
    53b6:	4798      	blx	r3
    53b8:	b2c2      	uxtb	r2, r0
    53ba:	0039      	movs	r1, r7
    53bc:	0030      	movs	r0, r6
    53be:	4b72      	ldr	r3, [pc, #456]	; (5588 <xQueueSemaphoreTake+0x30c>)
    53c0:	4798      	blx	r3
    53c2:	e7cc      	b.n	535e <xQueueSemaphoreTake+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
    53c4:	a802      	add	r0, sp, #8
    53c6:	4b77      	ldr	r3, [pc, #476]	; (55a4 <xQueueSemaphoreTake+0x328>)
    53c8:	4798      	blx	r3
    53ca:	e03c      	b.n	5446 <xQueueSemaphoreTake+0x1ca>
		prvLockQueue( pxQueue );
    53cc:	2200      	movs	r2, #0
    53ce:	2344      	movs	r3, #68	; 0x44
    53d0:	54e2      	strb	r2, [r4, r3]
    53d2:	e043      	b.n	545c <xQueueSemaphoreTake+0x1e0>
    53d4:	2200      	movs	r2, #0
    53d6:	2345      	movs	r3, #69	; 0x45
    53d8:	54e2      	strb	r2, [r4, r3]
    53da:	e044      	b.n	5466 <xQueueSemaphoreTake+0x1ea>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    53dc:	0020      	movs	r0, r4
    53de:	4b66      	ldr	r3, [pc, #408]	; (5578 <xQueueSemaphoreTake+0x2fc>)
    53e0:	4798      	blx	r3
    53e2:	4b64      	ldr	r3, [pc, #400]	; (5574 <xQueueSemaphoreTake+0x2f8>)
    53e4:	881b      	ldrh	r3, [r3, #0]
    53e6:	4203      	tst	r3, r0
    53e8:	d052      	beq.n	5490 <xQueueSemaphoreTake+0x214>
    53ea:	0020      	movs	r0, r4
    53ec:	4b63      	ldr	r3, [pc, #396]	; (557c <xQueueSemaphoreTake+0x300>)
    53ee:	4699      	mov	r9, r3
    53f0:	4798      	blx	r3
    53f2:	4f63      	ldr	r7, [pc, #396]	; (5580 <xQueueSemaphoreTake+0x304>)
    53f4:	5c3e      	ldrb	r6, [r7, r0]
    53f6:	3668      	adds	r6, #104	; 0x68
    53f8:	b2f6      	uxtb	r6, r6
    53fa:	0020      	movs	r0, r4
    53fc:	47c8      	blx	r9
    53fe:	5c3f      	ldrb	r7, [r7, r0]
    5400:	0020      	movs	r0, r4
    5402:	4b60      	ldr	r3, [pc, #384]	; (5584 <xQueueSemaphoreTake+0x308>)
    5404:	4798      	blx	r3
    5406:	b2c2      	uxtb	r2, r0
    5408:	0039      	movs	r1, r7
    540a:	0030      	movs	r0, r6
    540c:	4b5e      	ldr	r3, [pc, #376]	; (5588 <xQueueSemaphoreTake+0x30c>)
    540e:	4798      	blx	r3
    5410:	e03e      	b.n	5490 <xQueueSemaphoreTake+0x214>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    5412:	6823      	ldr	r3, [r4, #0]
    5414:	2b00      	cmp	r3, #0
    5416:	d052      	beq.n	54be <xQueueSemaphoreTake+0x242>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    5418:	0020      	movs	r0, r4
    541a:	3024      	adds	r0, #36	; 0x24
    541c:	9901      	ldr	r1, [sp, #4]
    541e:	4b62      	ldr	r3, [pc, #392]	; (55a8 <xQueueSemaphoreTake+0x32c>)
    5420:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    5422:	0020      	movs	r0, r4
    5424:	4b61      	ldr	r3, [pc, #388]	; (55ac <xQueueSemaphoreTake+0x330>)
    5426:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    5428:	4b61      	ldr	r3, [pc, #388]	; (55b0 <xQueueSemaphoreTake+0x334>)
    542a:	4798      	blx	r3
    542c:	2800      	cmp	r0, #0
    542e:	d04f      	beq.n	54d0 <xQueueSemaphoreTake+0x254>
    5430:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    5432:	47c0      	blx	r8
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    5434:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    5436:	2e00      	cmp	r6, #0
    5438:	d000      	beq.n	543c <xQueueSemaphoreTake+0x1c0>
    543a:	e73f      	b.n	52bc <xQueueSemaphoreTake+0x40>
				if( xTicksToWait == ( TickType_t ) 0 )
    543c:	9b01      	ldr	r3, [sp, #4]
    543e:	2b00      	cmp	r3, #0
    5440:	d097      	beq.n	5372 <xQueueSemaphoreTake+0xf6>
				else if( xEntryTimeSet == pdFALSE )
    5442:	2f00      	cmp	r7, #0
    5444:	d0be      	beq.n	53c4 <xQueueSemaphoreTake+0x148>
		taskEXIT_CRITICAL();
    5446:	4b56      	ldr	r3, [pc, #344]	; (55a0 <xQueueSemaphoreTake+0x324>)
    5448:	4798      	blx	r3
		vTaskSuspendAll();
    544a:	4b5a      	ldr	r3, [pc, #360]	; (55b4 <xQueueSemaphoreTake+0x338>)
    544c:	4798      	blx	r3
		prvLockQueue( pxQueue );
    544e:	4b46      	ldr	r3, [pc, #280]	; (5568 <xQueueSemaphoreTake+0x2ec>)
    5450:	4798      	blx	r3
    5452:	2344      	movs	r3, #68	; 0x44
    5454:	5ce3      	ldrb	r3, [r4, r3]
    5456:	b25b      	sxtb	r3, r3
    5458:	3301      	adds	r3, #1
    545a:	d0b7      	beq.n	53cc <xQueueSemaphoreTake+0x150>
    545c:	2345      	movs	r3, #69	; 0x45
    545e:	5ce3      	ldrb	r3, [r4, r3]
    5460:	b25b      	sxtb	r3, r3
    5462:	3301      	adds	r3, #1
    5464:	d0b6      	beq.n	53d4 <xQueueSemaphoreTake+0x158>
    5466:	4b4e      	ldr	r3, [pc, #312]	; (55a0 <xQueueSemaphoreTake+0x324>)
    5468:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    546a:	a901      	add	r1, sp, #4
    546c:	a802      	add	r0, sp, #8
    546e:	4b52      	ldr	r3, [pc, #328]	; (55b8 <xQueueSemaphoreTake+0x33c>)
    5470:	4798      	blx	r3
    5472:	2800      	cmp	r0, #0
    5474:	d135      	bne.n	54e2 <xQueueSemaphoreTake+0x266>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    5476:	0020      	movs	r0, r4
    5478:	4b50      	ldr	r3, [pc, #320]	; (55bc <xQueueSemaphoreTake+0x340>)
    547a:	4798      	blx	r3
    547c:	2800      	cmp	r0, #0
    547e:	d02a      	beq.n	54d6 <xQueueSemaphoreTake+0x25a>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    5480:	4b3a      	ldr	r3, [pc, #232]	; (556c <xQueueSemaphoreTake+0x2f0>)
    5482:	4798      	blx	r3
    5484:	4b3a      	ldr	r3, [pc, #232]	; (5570 <xQueueSemaphoreTake+0x2f4>)
    5486:	4798      	blx	r3
    5488:	4b3a      	ldr	r3, [pc, #232]	; (5574 <xQueueSemaphoreTake+0x2f8>)
    548a:	881b      	ldrh	r3, [r3, #0]
    548c:	4203      	tst	r3, r0
    548e:	d1a5      	bne.n	53dc <xQueueSemaphoreTake+0x160>
    5490:	0020      	movs	r0, r4
    5492:	4b3a      	ldr	r3, [pc, #232]	; (557c <xQueueSemaphoreTake+0x300>)
    5494:	4798      	blx	r3
    5496:	4b3a      	ldr	r3, [pc, #232]	; (5580 <xQueueSemaphoreTake+0x304>)
    5498:	5c1b      	ldrb	r3, [r3, r0]
    549a:	2b02      	cmp	r3, #2
    549c:	d0b9      	beq.n	5412 <xQueueSemaphoreTake+0x196>
    549e:	4b33      	ldr	r3, [pc, #204]	; (556c <xQueueSemaphoreTake+0x2f0>)
    54a0:	4798      	blx	r3
    54a2:	4b33      	ldr	r3, [pc, #204]	; (5570 <xQueueSemaphoreTake+0x2f4>)
    54a4:	4798      	blx	r3
    54a6:	4b33      	ldr	r3, [pc, #204]	; (5574 <xQueueSemaphoreTake+0x2f8>)
    54a8:	881b      	ldrh	r3, [r3, #0]
    54aa:	4203      	tst	r3, r0
    54ac:	d0b1      	beq.n	5412 <xQueueSemaphoreTake+0x196>
    54ae:	4b2f      	ldr	r3, [pc, #188]	; (556c <xQueueSemaphoreTake+0x2f0>)
    54b0:	4798      	blx	r3
    54b2:	4b36      	ldr	r3, [pc, #216]	; (558c <xQueueSemaphoreTake+0x310>)
    54b4:	4798      	blx	r3
    54b6:	b2c0      	uxtb	r0, r0
    54b8:	4b41      	ldr	r3, [pc, #260]	; (55c0 <xQueueSemaphoreTake+0x344>)
    54ba:	4798      	blx	r3
    54bc:	e7a9      	b.n	5412 <xQueueSemaphoreTake+0x196>
						taskENTER_CRITICAL();
    54be:	4b2a      	ldr	r3, [pc, #168]	; (5568 <xQueueSemaphoreTake+0x2ec>)
    54c0:	4798      	blx	r3
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    54c2:	6860      	ldr	r0, [r4, #4]
    54c4:	4b3f      	ldr	r3, [pc, #252]	; (55c4 <xQueueSemaphoreTake+0x348>)
    54c6:	4798      	blx	r3
    54c8:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
    54ca:	4b35      	ldr	r3, [pc, #212]	; (55a0 <xQueueSemaphoreTake+0x324>)
    54cc:	4798      	blx	r3
    54ce:	e7a3      	b.n	5418 <xQueueSemaphoreTake+0x19c>
					portYIELD_WITHIN_API();
    54d0:	4b32      	ldr	r3, [pc, #200]	; (559c <xQueueSemaphoreTake+0x320>)
    54d2:	4798      	blx	r3
    54d4:	e7ac      	b.n	5430 <xQueueSemaphoreTake+0x1b4>
				prvUnlockQueue( pxQueue );
    54d6:	0020      	movs	r0, r4
    54d8:	4b34      	ldr	r3, [pc, #208]	; (55ac <xQueueSemaphoreTake+0x330>)
    54da:	4798      	blx	r3
				( void ) xTaskResumeAll();
    54dc:	4b34      	ldr	r3, [pc, #208]	; (55b0 <xQueueSemaphoreTake+0x334>)
    54de:	4798      	blx	r3
    54e0:	e7a6      	b.n	5430 <xQueueSemaphoreTake+0x1b4>
			prvUnlockQueue( pxQueue );
    54e2:	0020      	movs	r0, r4
    54e4:	4b31      	ldr	r3, [pc, #196]	; (55ac <xQueueSemaphoreTake+0x330>)
    54e6:	4798      	blx	r3
			( void ) xTaskResumeAll();
    54e8:	4b31      	ldr	r3, [pc, #196]	; (55b0 <xQueueSemaphoreTake+0x334>)
    54ea:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    54ec:	0020      	movs	r0, r4
    54ee:	4b33      	ldr	r3, [pc, #204]	; (55bc <xQueueSemaphoreTake+0x340>)
    54f0:	4798      	blx	r3
    54f2:	2800      	cmp	r0, #0
    54f4:	d09c      	beq.n	5430 <xQueueSemaphoreTake+0x1b4>
					if( xInheritanceOccurred != pdFALSE )
    54f6:	2d00      	cmp	r5, #0
    54f8:	d00e      	beq.n	5518 <xQueueSemaphoreTake+0x29c>
						taskENTER_CRITICAL();
    54fa:	4b1b      	ldr	r3, [pc, #108]	; (5568 <xQueueSemaphoreTake+0x2ec>)
    54fc:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    54fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    5500:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    5502:	2b00      	cmp	r3, #0
    5504:	d003      	beq.n	550e <xQueueSemaphoreTake+0x292>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    5506:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5508:	681b      	ldr	r3, [r3, #0]
    550a:	3105      	adds	r1, #5
    550c:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    550e:	6860      	ldr	r0, [r4, #4]
    5510:	4b2d      	ldr	r3, [pc, #180]	; (55c8 <xQueueSemaphoreTake+0x34c>)
    5512:	4798      	blx	r3
						taskEXIT_CRITICAL();
    5514:	4b22      	ldr	r3, [pc, #136]	; (55a0 <xQueueSemaphoreTake+0x324>)
    5516:	4798      	blx	r3
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    5518:	4b14      	ldr	r3, [pc, #80]	; (556c <xQueueSemaphoreTake+0x2f0>)
    551a:	4798      	blx	r3
    551c:	4b14      	ldr	r3, [pc, #80]	; (5570 <xQueueSemaphoreTake+0x2f4>)
    551e:	4798      	blx	r3
    5520:	4b14      	ldr	r3, [pc, #80]	; (5574 <xQueueSemaphoreTake+0x2f8>)
    5522:	881b      	ldrh	r3, [r3, #0]
				return errQUEUE_EMPTY;
    5524:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    5526:	4203      	tst	r3, r0
    5528:	d100      	bne.n	552c <xQueueSemaphoreTake+0x2b0>
    552a:	e718      	b.n	535e <xQueueSemaphoreTake+0xe2>
    552c:	0020      	movs	r0, r4
    552e:	4b12      	ldr	r3, [pc, #72]	; (5578 <xQueueSemaphoreTake+0x2fc>)
    5530:	4798      	blx	r3
    5532:	4b10      	ldr	r3, [pc, #64]	; (5574 <xQueueSemaphoreTake+0x2f8>)
    5534:	881b      	ldrh	r3, [r3, #0]
    5536:	4203      	tst	r3, r0
    5538:	d100      	bne.n	553c <xQueueSemaphoreTake+0x2c0>
    553a:	e710      	b.n	535e <xQueueSemaphoreTake+0xe2>
    553c:	0020      	movs	r0, r4
    553e:	4f0f      	ldr	r7, [pc, #60]	; (557c <xQueueSemaphoreTake+0x300>)
    5540:	47b8      	blx	r7
    5542:	4e0f      	ldr	r6, [pc, #60]	; (5580 <xQueueSemaphoreTake+0x304>)
    5544:	5c35      	ldrb	r5, [r6, r0]
    5546:	3550      	adds	r5, #80	; 0x50
    5548:	b2ed      	uxtb	r5, r5
    554a:	0020      	movs	r0, r4
    554c:	47b8      	blx	r7
    554e:	5c36      	ldrb	r6, [r6, r0]
    5550:	0020      	movs	r0, r4
    5552:	4b0c      	ldr	r3, [pc, #48]	; (5584 <xQueueSemaphoreTake+0x308>)
    5554:	4798      	blx	r3
    5556:	b2c2      	uxtb	r2, r0
    5558:	0031      	movs	r1, r6
    555a:	0028      	movs	r0, r5
    555c:	4b0a      	ldr	r3, [pc, #40]	; (5588 <xQueueSemaphoreTake+0x30c>)
    555e:	4798      	blx	r3
				return errQUEUE_EMPTY;
    5560:	2500      	movs	r5, #0
    5562:	e6fc      	b.n	535e <xQueueSemaphoreTake+0xe2>
    5564:	00006245 	.word	0x00006245
    5568:	00004321 	.word	0x00004321
    556c:	00003169 	.word	0x00003169
    5570:	000030b1 	.word	0x000030b1
    5574:	2000008c 	.word	0x2000008c
    5578:	00003115 	.word	0x00003115
    557c:	00003095 	.word	0x00003095
    5580:	20000084 	.word	0x20000084
    5584:	00003105 	.word	0x00003105
    5588:	00003da1 	.word	0x00003da1
    558c:	000030a1 	.word	0x000030a1
    5590:	00003875 	.word	0x00003875
    5594:	00006575 	.word	0x00006575
    5598:	000060dd 	.word	0x000060dd
    559c:	00004311 	.word	0x00004311
    55a0:	00004339 	.word	0x00004339
    55a4:	00006191 	.word	0x00006191
    55a8:	00006015 	.word	0x00006015
    55ac:	0000466d 	.word	0x0000466d
    55b0:	00005c2d 	.word	0x00005c2d
    55b4:	00005a85 	.word	0x00005a85
    55b8:	000061a9 	.word	0x000061a9
    55bc:	00004491 	.word	0x00004491
    55c0:	000038cd 	.word	0x000038cd
    55c4:	00006265 	.word	0x00006265
    55c8:	00006471 	.word	0x00006471

000055cc <uxQueueGetQueueNumber>:
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    55cc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
    55ce:	4770      	bx	lr

000055d0 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
    55d0:	64c1      	str	r1, [r0, #76]	; 0x4c
	}
    55d2:	4770      	bx	lr

000055d4 <ucQueueGetQueueType>:
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    55d4:	2350      	movs	r3, #80	; 0x50
    55d6:	5cc0      	ldrb	r0, [r0, r3]
	}
    55d8:	4770      	bx	lr
	...

000055dc <vQueueWaitForMessageRestricted>:
	{
    55dc:	b570      	push	{r4, r5, r6, lr}
    55de:	0004      	movs	r4, r0
    55e0:	000d      	movs	r5, r1
    55e2:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
    55e4:	4b11      	ldr	r3, [pc, #68]	; (562c <vQueueWaitForMessageRestricted+0x50>)
    55e6:	4798      	blx	r3
    55e8:	2344      	movs	r3, #68	; 0x44
    55ea:	5ce3      	ldrb	r3, [r4, r3]
    55ec:	b25b      	sxtb	r3, r3
    55ee:	3301      	adds	r3, #1
    55f0:	d00d      	beq.n	560e <vQueueWaitForMessageRestricted+0x32>
    55f2:	2345      	movs	r3, #69	; 0x45
    55f4:	5ce3      	ldrb	r3, [r4, r3]
    55f6:	b25b      	sxtb	r3, r3
    55f8:	3301      	adds	r3, #1
    55fa:	d00c      	beq.n	5616 <vQueueWaitForMessageRestricted+0x3a>
    55fc:	4b0c      	ldr	r3, [pc, #48]	; (5630 <vQueueWaitForMessageRestricted+0x54>)
    55fe:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    5600:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5602:	2b00      	cmp	r3, #0
    5604:	d00b      	beq.n	561e <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
    5606:	0020      	movs	r0, r4
    5608:	4b0a      	ldr	r3, [pc, #40]	; (5634 <vQueueWaitForMessageRestricted+0x58>)
    560a:	4798      	blx	r3
	}
    560c:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    560e:	2200      	movs	r2, #0
    5610:	2344      	movs	r3, #68	; 0x44
    5612:	54e2      	strb	r2, [r4, r3]
    5614:	e7ed      	b.n	55f2 <vQueueWaitForMessageRestricted+0x16>
    5616:	2200      	movs	r2, #0
    5618:	2345      	movs	r3, #69	; 0x45
    561a:	54e2      	strb	r2, [r4, r3]
    561c:	e7ee      	b.n	55fc <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    561e:	0020      	movs	r0, r4
    5620:	3024      	adds	r0, #36	; 0x24
    5622:	0032      	movs	r2, r6
    5624:	0029      	movs	r1, r5
    5626:	4b04      	ldr	r3, [pc, #16]	; (5638 <vQueueWaitForMessageRestricted+0x5c>)
    5628:	4798      	blx	r3
    562a:	e7ec      	b.n	5606 <vQueueWaitForMessageRestricted+0x2a>
    562c:	00004321 	.word	0x00004321
    5630:	00004339 	.word	0x00004339
    5634:	0000466d 	.word	0x0000466d
    5638:	00006041 	.word	0x00006041

0000563c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    563c:	4b08      	ldr	r3, [pc, #32]	; (5660 <prvResetNextTaskUnblockTime+0x24>)
    563e:	681b      	ldr	r3, [r3, #0]
    5640:	681b      	ldr	r3, [r3, #0]
    5642:	2b00      	cmp	r3, #0
    5644:	d007      	beq.n	5656 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    5646:	4b06      	ldr	r3, [pc, #24]	; (5660 <prvResetNextTaskUnblockTime+0x24>)
    5648:	681b      	ldr	r3, [r3, #0]
    564a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    564c:	68db      	ldr	r3, [r3, #12]
    564e:	685a      	ldr	r2, [r3, #4]
    5650:	4b04      	ldr	r3, [pc, #16]	; (5664 <prvResetNextTaskUnblockTime+0x28>)
    5652:	601a      	str	r2, [r3, #0]
	}
}
    5654:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    5656:	2201      	movs	r2, #1
    5658:	4252      	negs	r2, r2
    565a:	4b02      	ldr	r3, [pc, #8]	; (5664 <prvResetNextTaskUnblockTime+0x28>)
    565c:	601a      	str	r2, [r3, #0]
    565e:	e7f9      	b.n	5654 <prvResetNextTaskUnblockTime+0x18>
    5660:	20003738 	.word	0x20003738
    5664:	200037e8 	.word	0x200037e8

00005668 <prvIdleTask>:
{
    5668:	b5f0      	push	{r4, r5, r6, r7, lr}
    566a:	46d6      	mov	lr, sl
    566c:	464f      	mov	r7, r9
    566e:	4646      	mov	r6, r8
    5670:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    5672:	4b14      	ldr	r3, [pc, #80]	; (56c4 <prvIdleTask+0x5c>)
    5674:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
    5676:	4b14      	ldr	r3, [pc, #80]	; (56c8 <prvIdleTask+0x60>)
    5678:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    567a:	4f14      	ldr	r7, [pc, #80]	; (56cc <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    567c:	4b14      	ldr	r3, [pc, #80]	; (56d0 <prvIdleTask+0x68>)
    567e:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    5680:	464b      	mov	r3, r9
    5682:	681b      	ldr	r3, [r3, #0]
    5684:	2b00      	cmp	r3, #0
    5686:	d016      	beq.n	56b6 <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
    5688:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    568a:	68fb      	ldr	r3, [r7, #12]
    568c:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    568e:	1d28      	adds	r0, r5, #4
    5690:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
    5692:	4a10      	ldr	r2, [pc, #64]	; (56d4 <prvIdleTask+0x6c>)
    5694:	6813      	ldr	r3, [r2, #0]
    5696:	3b01      	subs	r3, #1
    5698:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    569a:	4c0a      	ldr	r4, [pc, #40]	; (56c4 <prvIdleTask+0x5c>)
    569c:	6823      	ldr	r3, [r4, #0]
    569e:	3b01      	subs	r3, #1
    56a0:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    56a2:	4b0d      	ldr	r3, [pc, #52]	; (56d8 <prvIdleTask+0x70>)
    56a4:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    56a6:	6b28      	ldr	r0, [r5, #48]	; 0x30
    56a8:	4e0c      	ldr	r6, [pc, #48]	; (56dc <prvIdleTask+0x74>)
    56aa:	47b0      	blx	r6
			vPortFree( pxTCB );
    56ac:	0028      	movs	r0, r5
    56ae:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    56b0:	6823      	ldr	r3, [r4, #0]
    56b2:	2b00      	cmp	r3, #0
    56b4:	d1e8      	bne.n	5688 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    56b6:	4b0a      	ldr	r3, [pc, #40]	; (56e0 <prvIdleTask+0x78>)
    56b8:	681b      	ldr	r3, [r3, #0]
    56ba:	2b01      	cmp	r3, #1
    56bc:	d9e0      	bls.n	5680 <prvIdleTask+0x18>
				taskYIELD();
    56be:	4b09      	ldr	r3, [pc, #36]	; (56e4 <prvIdleTask+0x7c>)
    56c0:	4798      	blx	r3
    56c2:	e7dd      	b.n	5680 <prvIdleTask+0x18>
    56c4:	200037a8 	.word	0x200037a8
    56c8:	00004321 	.word	0x00004321
    56cc:	2000381c 	.word	0x2000381c
    56d0:	000041e7 	.word	0x000041e7
    56d4:	200037a4 	.word	0x200037a4
    56d8:	00004339 	.word	0x00004339
    56dc:	00004475 	.word	0x00004475
    56e0:	20003740 	.word	0x20003740
    56e4:	00004311 	.word	0x00004311

000056e8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    56e8:	b570      	push	{r4, r5, r6, lr}
    56ea:	0004      	movs	r4, r0
    56ec:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    56ee:	4b17      	ldr	r3, [pc, #92]	; (574c <prvAddCurrentTaskToDelayedList+0x64>)
    56f0:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    56f2:	4b17      	ldr	r3, [pc, #92]	; (5750 <prvAddCurrentTaskToDelayedList+0x68>)
    56f4:	6818      	ldr	r0, [r3, #0]
    56f6:	3004      	adds	r0, #4
    56f8:	4b16      	ldr	r3, [pc, #88]	; (5754 <prvAddCurrentTaskToDelayedList+0x6c>)
    56fa:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    56fc:	1c63      	adds	r3, r4, #1
    56fe:	d013      	beq.n	5728 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    5700:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    5702:	4b13      	ldr	r3, [pc, #76]	; (5750 <prvAddCurrentTaskToDelayedList+0x68>)
    5704:	681b      	ldr	r3, [r3, #0]
    5706:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    5708:	42a6      	cmp	r6, r4
    570a:	d816      	bhi.n	573a <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    570c:	4b12      	ldr	r3, [pc, #72]	; (5758 <prvAddCurrentTaskToDelayedList+0x70>)
    570e:	6818      	ldr	r0, [r3, #0]
    5710:	4b0f      	ldr	r3, [pc, #60]	; (5750 <prvAddCurrentTaskToDelayedList+0x68>)
    5712:	6819      	ldr	r1, [r3, #0]
    5714:	3104      	adds	r1, #4
    5716:	4b11      	ldr	r3, [pc, #68]	; (575c <prvAddCurrentTaskToDelayedList+0x74>)
    5718:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    571a:	4b11      	ldr	r3, [pc, #68]	; (5760 <prvAddCurrentTaskToDelayedList+0x78>)
    571c:	681b      	ldr	r3, [r3, #0]
    571e:	429c      	cmp	r4, r3
    5720:	d212      	bcs.n	5748 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
    5722:	4b0f      	ldr	r3, [pc, #60]	; (5760 <prvAddCurrentTaskToDelayedList+0x78>)
    5724:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    5726:	e00f      	b.n	5748 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    5728:	2d00      	cmp	r5, #0
    572a:	d0e9      	beq.n	5700 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    572c:	4b08      	ldr	r3, [pc, #32]	; (5750 <prvAddCurrentTaskToDelayedList+0x68>)
    572e:	6819      	ldr	r1, [r3, #0]
    5730:	3104      	adds	r1, #4
    5732:	480c      	ldr	r0, [pc, #48]	; (5764 <prvAddCurrentTaskToDelayedList+0x7c>)
    5734:	4b0c      	ldr	r3, [pc, #48]	; (5768 <prvAddCurrentTaskToDelayedList+0x80>)
    5736:	4798      	blx	r3
    5738:	e006      	b.n	5748 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    573a:	4b0c      	ldr	r3, [pc, #48]	; (576c <prvAddCurrentTaskToDelayedList+0x84>)
    573c:	6818      	ldr	r0, [r3, #0]
    573e:	4b04      	ldr	r3, [pc, #16]	; (5750 <prvAddCurrentTaskToDelayedList+0x68>)
    5740:	6819      	ldr	r1, [r3, #0]
    5742:	3104      	adds	r1, #4
    5744:	4b05      	ldr	r3, [pc, #20]	; (575c <prvAddCurrentTaskToDelayedList+0x74>)
    5746:	4798      	blx	r3
}
    5748:	bd70      	pop	{r4, r5, r6, pc}
    574a:	46c0      	nop			; (mov r8, r8)
    574c:	20003830 	.word	0x20003830
    5750:	20003734 	.word	0x20003734
    5754:	000041e7 	.word	0x000041e7
    5758:	20003738 	.word	0x20003738
    575c:	000041b9 	.word	0x000041b9
    5760:	200037e8 	.word	0x200037e8
    5764:	20003808 	.word	0x20003808
    5768:	000041a1 	.word	0x000041a1
    576c:	2000373c 	.word	0x2000373c

00005770 <xTaskCreate>:
	{
    5770:	b5f0      	push	{r4, r5, r6, r7, lr}
    5772:	46c6      	mov	lr, r8
    5774:	b500      	push	{lr}
    5776:	b084      	sub	sp, #16
    5778:	9001      	str	r0, [sp, #4]
    577a:	000d      	movs	r5, r1
    577c:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    577e:	0097      	lsls	r7, r2, #2
    5780:	0038      	movs	r0, r7
    5782:	4b81      	ldr	r3, [pc, #516]	; (5988 <xTaskCreate+0x218>)
    5784:	4798      	blx	r3
    5786:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    5788:	d100      	bne.n	578c <xTaskCreate+0x1c>
    578a:	e0b6      	b.n	58fa <xTaskCreate+0x18a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    578c:	2054      	movs	r0, #84	; 0x54
    578e:	4b7e      	ldr	r3, [pc, #504]	; (5988 <xTaskCreate+0x218>)
    5790:	4798      	blx	r3
    5792:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    5794:	d100      	bne.n	5798 <xTaskCreate+0x28>
    5796:	e0ad      	b.n	58f4 <xTaskCreate+0x184>
					pxNewTCB->pxStack = pxStack;
    5798:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    579a:	003a      	movs	r2, r7
    579c:	21a5      	movs	r1, #165	; 0xa5
    579e:	0030      	movs	r0, r6
    57a0:	4b7a      	ldr	r3, [pc, #488]	; (598c <xTaskCreate+0x21c>)
    57a2:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    57a4:	1f3a      	subs	r2, r7, #4
    57a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    57a8:	469c      	mov	ip, r3
    57aa:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    57ac:	2307      	movs	r3, #7
    57ae:	439a      	bics	r2, r3
    57b0:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    57b2:	782a      	ldrb	r2, [r5, #0]
    57b4:	332d      	adds	r3, #45	; 0x2d
    57b6:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    57b8:	782b      	ldrb	r3, [r5, #0]
    57ba:	2b00      	cmp	r3, #0
    57bc:	d00d      	beq.n	57da <xTaskCreate+0x6a>
    57be:	3501      	adds	r5, #1
    57c0:	0023      	movs	r3, r4
    57c2:	3335      	adds	r3, #53	; 0x35
    57c4:	0020      	movs	r0, r4
    57c6:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    57c8:	782a      	ldrb	r2, [r5, #0]
    57ca:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
    57cc:	782a      	ldrb	r2, [r5, #0]
    57ce:	2a00      	cmp	r2, #0
    57d0:	d003      	beq.n	57da <xTaskCreate+0x6a>
    57d2:	3501      	adds	r5, #1
    57d4:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    57d6:	4283      	cmp	r3, r0
    57d8:	d1f6      	bne.n	57c8 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    57da:	2200      	movs	r2, #0
    57dc:	233b      	movs	r3, #59	; 0x3b
    57de:	54e2      	strb	r2, [r4, r3]
    57e0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    57e2:	2f04      	cmp	r7, #4
    57e4:	d900      	bls.n	57e8 <xTaskCreate+0x78>
    57e6:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
    57e8:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    57ea:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    57ec:	2600      	movs	r6, #0
    57ee:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    57f0:	1d23      	adds	r3, r4, #4
    57f2:	9303      	str	r3, [sp, #12]
    57f4:	0018      	movs	r0, r3
    57f6:	4d66      	ldr	r5, [pc, #408]	; (5990 <xTaskCreate+0x220>)
    57f8:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    57fa:	0020      	movs	r0, r4
    57fc:	3018      	adds	r0, #24
    57fe:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    5800:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5802:	2305      	movs	r3, #5
    5804:	1bdb      	subs	r3, r3, r7
    5806:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    5808:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    580a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    580c:	2350      	movs	r3, #80	; 0x50
    580e:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    5810:	9a02      	ldr	r2, [sp, #8]
    5812:	9901      	ldr	r1, [sp, #4]
    5814:	4640      	mov	r0, r8
    5816:	4b5f      	ldr	r3, [pc, #380]	; (5994 <xTaskCreate+0x224>)
    5818:	4798      	blx	r3
    581a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    581c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    581e:	2b00      	cmp	r3, #0
    5820:	d000      	beq.n	5824 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    5822:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    5824:	4b5c      	ldr	r3, [pc, #368]	; (5998 <xTaskCreate+0x228>)
    5826:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    5828:	4a5c      	ldr	r2, [pc, #368]	; (599c <xTaskCreate+0x22c>)
    582a:	6813      	ldr	r3, [r2, #0]
    582c:	3301      	adds	r3, #1
    582e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    5830:	4b5b      	ldr	r3, [pc, #364]	; (59a0 <xTaskCreate+0x230>)
    5832:	681b      	ldr	r3, [r3, #0]
    5834:	2b00      	cmp	r3, #0
    5836:	d063      	beq.n	5900 <xTaskCreate+0x190>
			if( xSchedulerRunning == pdFALSE )
    5838:	4b5a      	ldr	r3, [pc, #360]	; (59a4 <xTaskCreate+0x234>)
    583a:	681b      	ldr	r3, [r3, #0]
    583c:	2b00      	cmp	r3, #0
    583e:	d107      	bne.n	5850 <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    5840:	4b57      	ldr	r3, [pc, #348]	; (59a0 <xTaskCreate+0x230>)
    5842:	681b      	ldr	r3, [r3, #0]
    5844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5846:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5848:	4293      	cmp	r3, r2
    584a:	d801      	bhi.n	5850 <xTaskCreate+0xe0>
					pxCurrentTCB = pxNewTCB;
    584c:	4b54      	ldr	r3, [pc, #336]	; (59a0 <xTaskCreate+0x230>)
    584e:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
    5850:	4a55      	ldr	r2, [pc, #340]	; (59a8 <xTaskCreate+0x238>)
    5852:	6813      	ldr	r3, [r2, #0]
    5854:	3301      	adds	r3, #1
    5856:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    5858:	63e3      	str	r3, [r4, #60]	; 0x3c
		traceTASK_CREATE( pxNewTCB );
    585a:	2003      	movs	r0, #3
    585c:	4b53      	ldr	r3, [pc, #332]	; (59ac <xTaskCreate+0x23c>)
    585e:	4798      	blx	r3
    5860:	b281      	uxth	r1, r0
    5862:	0020      	movs	r0, r4
    5864:	4b52      	ldr	r3, [pc, #328]	; (59b0 <xTaskCreate+0x240>)
    5866:	4798      	blx	r3
    5868:	4b52      	ldr	r3, [pc, #328]	; (59b4 <xTaskCreate+0x244>)
    586a:	8819      	ldrh	r1, [r3, #0]
    586c:	0020      	movs	r0, r4
    586e:	4b52      	ldr	r3, [pc, #328]	; (59b8 <xTaskCreate+0x248>)
    5870:	4798      	blx	r3
    5872:	0020      	movs	r0, r4
    5874:	4e51      	ldr	r6, [pc, #324]	; (59bc <xTaskCreate+0x24c>)
    5876:	47b0      	blx	r6
    5878:	0022      	movs	r2, r4
    587a:	3234      	adds	r2, #52	; 0x34
    587c:	b2c1      	uxtb	r1, r0
    587e:	2003      	movs	r0, #3
    5880:	4b4f      	ldr	r3, [pc, #316]	; (59c0 <xTaskCreate+0x250>)
    5882:	4798      	blx	r3
    5884:	0020      	movs	r0, r4
    5886:	47b0      	blx	r6
    5888:	232c      	movs	r3, #44	; 0x2c
    588a:	18e3      	adds	r3, r4, r3
    588c:	781a      	ldrb	r2, [r3, #0]
    588e:	b2c1      	uxtb	r1, r0
    5890:	2003      	movs	r0, #3
    5892:	4b4c      	ldr	r3, [pc, #304]	; (59c4 <xTaskCreate+0x254>)
    5894:	4798      	blx	r3
    5896:	4b4c      	ldr	r3, [pc, #304]	; (59c8 <xTaskCreate+0x258>)
    5898:	4798      	blx	r3
    589a:	4b4c      	ldr	r3, [pc, #304]	; (59cc <xTaskCreate+0x25c>)
    589c:	4798      	blx	r3
    589e:	4b4c      	ldr	r3, [pc, #304]	; (59d0 <xTaskCreate+0x260>)
    58a0:	881b      	ldrh	r3, [r3, #0]
    58a2:	4203      	tst	r3, r0
    58a4:	d154      	bne.n	5950 <xTaskCreate+0x1e0>
		prvAddTaskToReadyList( pxNewTCB );
    58a6:	0020      	movs	r0, r4
    58a8:	4b48      	ldr	r3, [pc, #288]	; (59cc <xTaskCreate+0x25c>)
    58aa:	4798      	blx	r3
    58ac:	4b48      	ldr	r3, [pc, #288]	; (59d0 <xTaskCreate+0x260>)
    58ae:	881b      	ldrh	r3, [r3, #0]
    58b0:	4203      	tst	r3, r0
    58b2:	d15d      	bne.n	5970 <xTaskCreate+0x200>
    58b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    58b6:	4a47      	ldr	r2, [pc, #284]	; (59d4 <xTaskCreate+0x264>)
    58b8:	6812      	ldr	r2, [r2, #0]
    58ba:	4293      	cmp	r3, r2
    58bc:	d901      	bls.n	58c2 <xTaskCreate+0x152>
    58be:	4a45      	ldr	r2, [pc, #276]	; (59d4 <xTaskCreate+0x264>)
    58c0:	6013      	str	r3, [r2, #0]
    58c2:	0098      	lsls	r0, r3, #2
    58c4:	18c0      	adds	r0, r0, r3
    58c6:	0080      	lsls	r0, r0, #2
    58c8:	4b43      	ldr	r3, [pc, #268]	; (59d8 <xTaskCreate+0x268>)
    58ca:	1818      	adds	r0, r3, r0
    58cc:	9903      	ldr	r1, [sp, #12]
    58ce:	4b43      	ldr	r3, [pc, #268]	; (59dc <xTaskCreate+0x26c>)
    58d0:	4798      	blx	r3
	taskEXIT_CRITICAL();
    58d2:	4b43      	ldr	r3, [pc, #268]	; (59e0 <xTaskCreate+0x270>)
    58d4:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    58d6:	4b33      	ldr	r3, [pc, #204]	; (59a4 <xTaskCreate+0x234>)
    58d8:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
    58da:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    58dc:	2b00      	cmp	r3, #0
    58de:	d005      	beq.n	58ec <xTaskCreate+0x17c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    58e0:	4b2f      	ldr	r3, [pc, #188]	; (59a0 <xTaskCreate+0x230>)
    58e2:	681b      	ldr	r3, [r3, #0]
    58e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    58e8:	429a      	cmp	r2, r3
    58ea:	d348      	bcc.n	597e <xTaskCreate+0x20e>
	}
    58ec:	b004      	add	sp, #16
    58ee:	bc04      	pop	{r2}
    58f0:	4690      	mov	r8, r2
    58f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    58f4:	0030      	movs	r0, r6
    58f6:	4b3b      	ldr	r3, [pc, #236]	; (59e4 <xTaskCreate+0x274>)
    58f8:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    58fa:	2001      	movs	r0, #1
    58fc:	4240      	negs	r0, r0
    58fe:	e7f5      	b.n	58ec <xTaskCreate+0x17c>
			pxCurrentTCB = pxNewTCB;
    5900:	4b27      	ldr	r3, [pc, #156]	; (59a0 <xTaskCreate+0x230>)
    5902:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    5904:	6813      	ldr	r3, [r2, #0]
    5906:	2b01      	cmp	r3, #1
    5908:	d1a2      	bne.n	5850 <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    590a:	4f33      	ldr	r7, [pc, #204]	; (59d8 <xTaskCreate+0x268>)
    590c:	0038      	movs	r0, r7
    590e:	4e36      	ldr	r6, [pc, #216]	; (59e8 <xTaskCreate+0x278>)
    5910:	47b0      	blx	r6
    5912:	0038      	movs	r0, r7
    5914:	3014      	adds	r0, #20
    5916:	47b0      	blx	r6
    5918:	0038      	movs	r0, r7
    591a:	3028      	adds	r0, #40	; 0x28
    591c:	47b0      	blx	r6
    591e:	0038      	movs	r0, r7
    5920:	303c      	adds	r0, #60	; 0x3c
    5922:	47b0      	blx	r6
    5924:	0038      	movs	r0, r7
    5926:	3050      	adds	r0, #80	; 0x50
    5928:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    592a:	4b30      	ldr	r3, [pc, #192]	; (59ec <xTaskCreate+0x27c>)
    592c:	4698      	mov	r8, r3
    592e:	0018      	movs	r0, r3
    5930:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    5932:	4f2f      	ldr	r7, [pc, #188]	; (59f0 <xTaskCreate+0x280>)
    5934:	0038      	movs	r0, r7
    5936:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    5938:	482e      	ldr	r0, [pc, #184]	; (59f4 <xTaskCreate+0x284>)
    593a:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    593c:	482e      	ldr	r0, [pc, #184]	; (59f8 <xTaskCreate+0x288>)
    593e:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    5940:	482e      	ldr	r0, [pc, #184]	; (59fc <xTaskCreate+0x28c>)
    5942:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    5944:	4b2e      	ldr	r3, [pc, #184]	; (5a00 <xTaskCreate+0x290>)
    5946:	4642      	mov	r2, r8
    5948:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    594a:	4b2e      	ldr	r3, [pc, #184]	; (5a04 <xTaskCreate+0x294>)
    594c:	601f      	str	r7, [r3, #0]
    594e:	e77f      	b.n	5850 <xTaskCreate+0xe0>
		traceTASK_CREATE( pxNewTCB );
    5950:	0020      	movs	r0, r4
    5952:	4b1e      	ldr	r3, [pc, #120]	; (59cc <xTaskCreate+0x25c>)
    5954:	4798      	blx	r3
    5956:	4b1e      	ldr	r3, [pc, #120]	; (59d0 <xTaskCreate+0x260>)
    5958:	881b      	ldrh	r3, [r3, #0]
    595a:	4203      	tst	r3, r0
    595c:	d0a3      	beq.n	58a6 <xTaskCreate+0x136>
    595e:	0020      	movs	r0, r4
    5960:	4b16      	ldr	r3, [pc, #88]	; (59bc <xTaskCreate+0x24c>)
    5962:	4798      	blx	r3
    5964:	b2c2      	uxtb	r2, r0
    5966:	2103      	movs	r1, #3
    5968:	201b      	movs	r0, #27
    596a:	4b27      	ldr	r3, [pc, #156]	; (5a08 <xTaskCreate+0x298>)
    596c:	4798      	blx	r3
    596e:	e79a      	b.n	58a6 <xTaskCreate+0x136>
		prvAddTaskToReadyList( pxNewTCB );
    5970:	0020      	movs	r0, r4
    5972:	4b12      	ldr	r3, [pc, #72]	; (59bc <xTaskCreate+0x24c>)
    5974:	4798      	blx	r3
    5976:	b2c0      	uxtb	r0, r0
    5978:	4b24      	ldr	r3, [pc, #144]	; (5a0c <xTaskCreate+0x29c>)
    597a:	4798      	blx	r3
    597c:	e79a      	b.n	58b4 <xTaskCreate+0x144>
			taskYIELD_IF_USING_PREEMPTION();
    597e:	4b24      	ldr	r3, [pc, #144]	; (5a10 <xTaskCreate+0x2a0>)
    5980:	4798      	blx	r3
			xReturn = pdPASS;
    5982:	2001      	movs	r0, #1
    5984:	e7b2      	b.n	58ec <xTaskCreate+0x17c>
    5986:	46c0      	nop			; (mov r8, r8)
    5988:	000043e5 	.word	0x000043e5
    598c:	00008857 	.word	0x00008857
    5990:	0000419b 	.word	0x0000419b
    5994:	00004275 	.word	0x00004275
    5998:	00004321 	.word	0x00004321
    599c:	200037a4 	.word	0x200037a4
    59a0:	20003734 	.word	0x20003734
    59a4:	20003804 	.word	0x20003804
    59a8:	200037b4 	.word	0x200037b4
    59ac:	0000390d 	.word	0x0000390d
    59b0:	000030c1 	.word	0x000030c1
    59b4:	2000008a 	.word	0x2000008a
    59b8:	000030e1 	.word	0x000030e1
    59bc:	000030a1 	.word	0x000030a1
    59c0:	000039e1 	.word	0x000039e1
    59c4:	000037c1 	.word	0x000037c1
    59c8:	00003169 	.word	0x00003169
    59cc:	000030b1 	.word	0x000030b1
    59d0:	2000008c 	.word	0x2000008c
    59d4:	200037b8 	.word	0x200037b8
    59d8:	20003740 	.word	0x20003740
    59dc:	000041a1 	.word	0x000041a1
    59e0:	00004339 	.word	0x00004339
    59e4:	00004475 	.word	0x00004475
    59e8:	00004185 	.word	0x00004185
    59ec:	200037bc 	.word	0x200037bc
    59f0:	200037d0 	.word	0x200037d0
    59f4:	200037f0 	.word	0x200037f0
    59f8:	2000381c 	.word	0x2000381c
    59fc:	20003808 	.word	0x20003808
    5a00:	20003738 	.word	0x20003738
    5a04:	2000373c 	.word	0x2000373c
    5a08:	00003da1 	.word	0x00003da1
    5a0c:	00003c39 	.word	0x00003c39
    5a10:	00004311 	.word	0x00004311

00005a14 <vTaskStartScheduler>:
{
    5a14:	b510      	push	{r4, lr}
    5a16:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    5a18:	4b11      	ldr	r3, [pc, #68]	; (5a60 <vTaskStartScheduler+0x4c>)
    5a1a:	9301      	str	r3, [sp, #4]
    5a1c:	2300      	movs	r3, #0
    5a1e:	9300      	str	r3, [sp, #0]
    5a20:	2296      	movs	r2, #150	; 0x96
    5a22:	4910      	ldr	r1, [pc, #64]	; (5a64 <vTaskStartScheduler+0x50>)
    5a24:	4810      	ldr	r0, [pc, #64]	; (5a68 <vTaskStartScheduler+0x54>)
    5a26:	4c11      	ldr	r4, [pc, #68]	; (5a6c <vTaskStartScheduler+0x58>)
    5a28:	47a0      	blx	r4
		if( xReturn == pdPASS )
    5a2a:	2801      	cmp	r0, #1
    5a2c:	d003      	beq.n	5a36 <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    5a2e:	1c43      	adds	r3, r0, #1
    5a30:	d013      	beq.n	5a5a <vTaskStartScheduler+0x46>
}
    5a32:	b002      	add	sp, #8
    5a34:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    5a36:	4b0e      	ldr	r3, [pc, #56]	; (5a70 <vTaskStartScheduler+0x5c>)
    5a38:	4798      	blx	r3
	if( xReturn == pdPASS )
    5a3a:	2801      	cmp	r0, #1
    5a3c:	d1f7      	bne.n	5a2e <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
    5a3e:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    5a40:	2201      	movs	r2, #1
    5a42:	4252      	negs	r2, r2
    5a44:	4b0b      	ldr	r3, [pc, #44]	; (5a74 <vTaskStartScheduler+0x60>)
    5a46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    5a48:	3202      	adds	r2, #2
    5a4a:	4b0b      	ldr	r3, [pc, #44]	; (5a78 <vTaskStartScheduler+0x64>)
    5a4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    5a4e:	2200      	movs	r2, #0
    5a50:	4b0a      	ldr	r3, [pc, #40]	; (5a7c <vTaskStartScheduler+0x68>)
    5a52:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    5a54:	4b0a      	ldr	r3, [pc, #40]	; (5a80 <vTaskStartScheduler+0x6c>)
    5a56:	4798      	blx	r3
    5a58:	e7eb      	b.n	5a32 <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    5a5a:	b672      	cpsid	i
    5a5c:	e7fe      	b.n	5a5c <vTaskStartScheduler+0x48>
    5a5e:	46c0      	nop			; (mov r8, r8)
    5a60:	200037e4 	.word	0x200037e4
    5a64:	0000e984 	.word	0x0000e984
    5a68:	00005669 	.word	0x00005669
    5a6c:	00005771 	.word	0x00005771
    5a70:	00006639 	.word	0x00006639
    5a74:	200037e8 	.word	0x200037e8
    5a78:	20003804 	.word	0x20003804
    5a7c:	20003830 	.word	0x20003830
    5a80:	00004299 	.word	0x00004299

00005a84 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    5a84:	4a02      	ldr	r2, [pc, #8]	; (5a90 <vTaskSuspendAll+0xc>)
    5a86:	6813      	ldr	r3, [r2, #0]
    5a88:	3301      	adds	r3, #1
    5a8a:	6013      	str	r3, [r2, #0]
}
    5a8c:	4770      	bx	lr
    5a8e:	46c0      	nop			; (mov r8, r8)
    5a90:	200037b0 	.word	0x200037b0

00005a94 <xTaskGetTickCount>:
		xTicks = xTickCount;
    5a94:	4b01      	ldr	r3, [pc, #4]	; (5a9c <xTaskGetTickCount+0x8>)
    5a96:	6818      	ldr	r0, [r3, #0]
}
    5a98:	4770      	bx	lr
    5a9a:	46c0      	nop			; (mov r8, r8)
    5a9c:	20003830 	.word	0x20003830

00005aa0 <xTaskIncrementTick>:
{
    5aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5aa2:	b083      	sub	sp, #12
	traceTASK_INCREMENT_TICK( xTickCount );
    5aa4:	4b4c      	ldr	r3, [pc, #304]	; (5bd8 <xTaskIncrementTick+0x138>)
    5aa6:	681b      	ldr	r3, [r3, #0]
    5aa8:	2b01      	cmp	r3, #1
    5aaa:	d003      	beq.n	5ab4 <xTaskIncrementTick+0x14>
    5aac:	4b4b      	ldr	r3, [pc, #300]	; (5bdc <xTaskIncrementTick+0x13c>)
    5aae:	681b      	ldr	r3, [r3, #0]
    5ab0:	2b00      	cmp	r3, #0
    5ab2:	d106      	bne.n	5ac2 <xTaskIncrementTick+0x22>
    5ab4:	4a4a      	ldr	r2, [pc, #296]	; (5be0 <xTaskIncrementTick+0x140>)
    5ab6:	6813      	ldr	r3, [r2, #0]
    5ab8:	3301      	adds	r3, #1
    5aba:	6013      	str	r3, [r2, #0]
    5abc:	2000      	movs	r0, #0
    5abe:	4b49      	ldr	r3, [pc, #292]	; (5be4 <xTaskIncrementTick+0x144>)
    5ac0:	4798      	blx	r3
    5ac2:	4b45      	ldr	r3, [pc, #276]	; (5bd8 <xTaskIncrementTick+0x138>)
    5ac4:	681b      	ldr	r3, [r3, #0]
    5ac6:	2b00      	cmp	r3, #0
    5ac8:	d010      	beq.n	5aec <xTaskIncrementTick+0x4c>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5aca:	4b43      	ldr	r3, [pc, #268]	; (5bd8 <xTaskIncrementTick+0x138>)
    5acc:	681b      	ldr	r3, [r3, #0]
    5ace:	2b00      	cmp	r3, #0
    5ad0:	d175      	bne.n	5bbe <xTaskIncrementTick+0x11e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    5ad2:	4b45      	ldr	r3, [pc, #276]	; (5be8 <xTaskIncrementTick+0x148>)
    5ad4:	681e      	ldr	r6, [r3, #0]
    5ad6:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    5ad8:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    5ada:	2e00      	cmp	r6, #0
    5adc:	d119      	bne.n	5b12 <xTaskIncrementTick+0x72>
			taskSWITCH_DELAYED_LISTS();
    5ade:	4b43      	ldr	r3, [pc, #268]	; (5bec <xTaskIncrementTick+0x14c>)
    5ae0:	681b      	ldr	r3, [r3, #0]
    5ae2:	681b      	ldr	r3, [r3, #0]
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	d008      	beq.n	5afa <xTaskIncrementTick+0x5a>
    5ae8:	b672      	cpsid	i
    5aea:	e7fe      	b.n	5aea <xTaskIncrementTick+0x4a>
	traceTASK_INCREMENT_TICK( xTickCount );
    5aec:	4b3e      	ldr	r3, [pc, #248]	; (5be8 <xTaskIncrementTick+0x148>)
    5aee:	6819      	ldr	r1, [r3, #0]
    5af0:	3101      	adds	r1, #1
    5af2:	2003      	movs	r0, #3
    5af4:	4b3e      	ldr	r3, [pc, #248]	; (5bf0 <xTaskIncrementTick+0x150>)
    5af6:	4798      	blx	r3
    5af8:	e7e7      	b.n	5aca <xTaskIncrementTick+0x2a>
			taskSWITCH_DELAYED_LISTS();
    5afa:	4a3c      	ldr	r2, [pc, #240]	; (5bec <xTaskIncrementTick+0x14c>)
    5afc:	6811      	ldr	r1, [r2, #0]
    5afe:	4b3d      	ldr	r3, [pc, #244]	; (5bf4 <xTaskIncrementTick+0x154>)
    5b00:	6818      	ldr	r0, [r3, #0]
    5b02:	6010      	str	r0, [r2, #0]
    5b04:	6019      	str	r1, [r3, #0]
    5b06:	4a3c      	ldr	r2, [pc, #240]	; (5bf8 <xTaskIncrementTick+0x158>)
    5b08:	6813      	ldr	r3, [r2, #0]
    5b0a:	3301      	adds	r3, #1
    5b0c:	6013      	str	r3, [r2, #0]
    5b0e:	4b3b      	ldr	r3, [pc, #236]	; (5bfc <xTaskIncrementTick+0x15c>)
    5b10:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    5b12:	4b3b      	ldr	r3, [pc, #236]	; (5c00 <xTaskIncrementTick+0x160>)
    5b14:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    5b16:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    5b18:	429e      	cmp	r6, r3
    5b1a:	d33a      	bcc.n	5b92 <xTaskIncrementTick+0xf2>
    5b1c:	2500      	movs	r5, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    5b1e:	4f33      	ldr	r7, [pc, #204]	; (5bec <xTaskIncrementTick+0x14c>)
    5b20:	683b      	ldr	r3, [r7, #0]
    5b22:	681b      	ldr	r3, [r3, #0]
    5b24:	2b00      	cmp	r3, #0
    5b26:	d030      	beq.n	5b8a <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    5b28:	4b30      	ldr	r3, [pc, #192]	; (5bec <xTaskIncrementTick+0x14c>)
    5b2a:	681b      	ldr	r3, [r3, #0]
    5b2c:	68db      	ldr	r3, [r3, #12]
    5b2e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    5b30:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
    5b32:	429e      	cmp	r6, r3
    5b34:	d339      	bcc.n	5baa <xTaskIncrementTick+0x10a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5b36:	1d23      	adds	r3, r4, #4
    5b38:	9301      	str	r3, [sp, #4]
    5b3a:	0018      	movs	r0, r3
    5b3c:	4b31      	ldr	r3, [pc, #196]	; (5c04 <xTaskIncrementTick+0x164>)
    5b3e:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    5b40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5b42:	2b00      	cmp	r3, #0
    5b44:	d003      	beq.n	5b4e <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    5b46:	0020      	movs	r0, r4
    5b48:	3018      	adds	r0, #24
    5b4a:	4b2e      	ldr	r3, [pc, #184]	; (5c04 <xTaskIncrementTick+0x164>)
    5b4c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    5b4e:	0020      	movs	r0, r4
    5b50:	4b2d      	ldr	r3, [pc, #180]	; (5c08 <xTaskIncrementTick+0x168>)
    5b52:	4798      	blx	r3
    5b54:	4b2d      	ldr	r3, [pc, #180]	; (5c0c <xTaskIncrementTick+0x16c>)
    5b56:	881b      	ldrh	r3, [r3, #0]
    5b58:	4203      	tst	r3, r0
    5b5a:	d129      	bne.n	5bb0 <xTaskIncrementTick+0x110>
    5b5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5b5e:	4a2c      	ldr	r2, [pc, #176]	; (5c10 <xTaskIncrementTick+0x170>)
    5b60:	6812      	ldr	r2, [r2, #0]
    5b62:	4293      	cmp	r3, r2
    5b64:	d901      	bls.n	5b6a <xTaskIncrementTick+0xca>
    5b66:	4a2a      	ldr	r2, [pc, #168]	; (5c10 <xTaskIncrementTick+0x170>)
    5b68:	6013      	str	r3, [r2, #0]
    5b6a:	0098      	lsls	r0, r3, #2
    5b6c:	18c0      	adds	r0, r0, r3
    5b6e:	0080      	lsls	r0, r0, #2
    5b70:	4b28      	ldr	r3, [pc, #160]	; (5c14 <xTaskIncrementTick+0x174>)
    5b72:	1818      	adds	r0, r3, r0
    5b74:	9901      	ldr	r1, [sp, #4]
    5b76:	4b28      	ldr	r3, [pc, #160]	; (5c18 <xTaskIncrementTick+0x178>)
    5b78:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5b7a:	4b28      	ldr	r3, [pc, #160]	; (5c1c <xTaskIncrementTick+0x17c>)
    5b7c:	681b      	ldr	r3, [r3, #0]
    5b7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5b82:	429a      	cmp	r2, r3
    5b84:	d3cc      	bcc.n	5b20 <xTaskIncrementTick+0x80>
							xSwitchRequired = pdTRUE;
    5b86:	2501      	movs	r5, #1
    5b88:	e7ca      	b.n	5b20 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5b8a:	2201      	movs	r2, #1
    5b8c:	4252      	negs	r2, r2
    5b8e:	4b1c      	ldr	r3, [pc, #112]	; (5c00 <xTaskIncrementTick+0x160>)
    5b90:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    5b92:	4b22      	ldr	r3, [pc, #136]	; (5c1c <xTaskIncrementTick+0x17c>)
    5b94:	681b      	ldr	r3, [r3, #0]
    5b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b98:	0093      	lsls	r3, r2, #2
    5b9a:	189b      	adds	r3, r3, r2
    5b9c:	009b      	lsls	r3, r3, #2
    5b9e:	4a1d      	ldr	r2, [pc, #116]	; (5c14 <xTaskIncrementTick+0x174>)
    5ba0:	589b      	ldr	r3, [r3, r2]
    5ba2:	2b01      	cmp	r3, #1
    5ba4:	d910      	bls.n	5bc8 <xTaskIncrementTick+0x128>
				xSwitchRequired = pdTRUE;
    5ba6:	2501      	movs	r5, #1
    5ba8:	e00e      	b.n	5bc8 <xTaskIncrementTick+0x128>
						xNextTaskUnblockTime = xItemValue;
    5baa:	4a15      	ldr	r2, [pc, #84]	; (5c00 <xTaskIncrementTick+0x160>)
    5bac:	6013      	str	r3, [r2, #0]
						break;
    5bae:	e7f0      	b.n	5b92 <xTaskIncrementTick+0xf2>
					prvAddTaskToReadyList( pxTCB );
    5bb0:	0020      	movs	r0, r4
    5bb2:	4b1b      	ldr	r3, [pc, #108]	; (5c20 <xTaskIncrementTick+0x180>)
    5bb4:	4798      	blx	r3
    5bb6:	b2c0      	uxtb	r0, r0
    5bb8:	4b1a      	ldr	r3, [pc, #104]	; (5c24 <xTaskIncrementTick+0x184>)
    5bba:	4798      	blx	r3
    5bbc:	e7ce      	b.n	5b5c <xTaskIncrementTick+0xbc>
		++uxPendedTicks;
    5bbe:	4a07      	ldr	r2, [pc, #28]	; (5bdc <xTaskIncrementTick+0x13c>)
    5bc0:	6813      	ldr	r3, [r2, #0]
    5bc2:	3301      	adds	r3, #1
    5bc4:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
    5bc6:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
    5bc8:	4b17      	ldr	r3, [pc, #92]	; (5c28 <xTaskIncrementTick+0x188>)
    5bca:	681b      	ldr	r3, [r3, #0]
    5bcc:	2b00      	cmp	r3, #0
    5bce:	d000      	beq.n	5bd2 <xTaskIncrementTick+0x132>
			xSwitchRequired = pdTRUE;
    5bd0:	2501      	movs	r5, #1
}
    5bd2:	0028      	movs	r0, r5
    5bd4:	b003      	add	sp, #12
    5bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bd8:	200037b0 	.word	0x200037b0
    5bdc:	200037ac 	.word	0x200037ac
    5be0:	2000045c 	.word	0x2000045c
    5be4:	00003a71 	.word	0x00003a71
    5be8:	20003830 	.word	0x20003830
    5bec:	20003738 	.word	0x20003738
    5bf0:	00003f3d 	.word	0x00003f3d
    5bf4:	2000373c 	.word	0x2000373c
    5bf8:	200037ec 	.word	0x200037ec
    5bfc:	0000563d 	.word	0x0000563d
    5c00:	200037e8 	.word	0x200037e8
    5c04:	000041e7 	.word	0x000041e7
    5c08:	000030b1 	.word	0x000030b1
    5c0c:	2000008c 	.word	0x2000008c
    5c10:	200037b8 	.word	0x200037b8
    5c14:	20003740 	.word	0x20003740
    5c18:	000041a1 	.word	0x000041a1
    5c1c:	20003734 	.word	0x20003734
    5c20:	000030a1 	.word	0x000030a1
    5c24:	00003c39 	.word	0x00003c39
    5c28:	20003834 	.word	0x20003834

00005c2c <xTaskResumeAll>:
{
    5c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    5c2e:	4b37      	ldr	r3, [pc, #220]	; (5d0c <xTaskResumeAll+0xe0>)
    5c30:	681b      	ldr	r3, [r3, #0]
    5c32:	2b00      	cmp	r3, #0
    5c34:	d101      	bne.n	5c3a <xTaskResumeAll+0xe>
    5c36:	b672      	cpsid	i
    5c38:	e7fe      	b.n	5c38 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    5c3a:	4b35      	ldr	r3, [pc, #212]	; (5d10 <xTaskResumeAll+0xe4>)
    5c3c:	4798      	blx	r3
		--uxSchedulerSuspended;
    5c3e:	4b33      	ldr	r3, [pc, #204]	; (5d0c <xTaskResumeAll+0xe0>)
    5c40:	681a      	ldr	r2, [r3, #0]
    5c42:	3a01      	subs	r2, #1
    5c44:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5c46:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    5c48:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5c4a:	2b00      	cmp	r3, #0
    5c4c:	d103      	bne.n	5c56 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    5c4e:	4b31      	ldr	r3, [pc, #196]	; (5d14 <xTaskResumeAll+0xe8>)
    5c50:	681b      	ldr	r3, [r3, #0]
    5c52:	2b00      	cmp	r3, #0
    5c54:	d136      	bne.n	5cc4 <xTaskResumeAll+0x98>
	taskEXIT_CRITICAL();
    5c56:	4b30      	ldr	r3, [pc, #192]	; (5d18 <xTaskResumeAll+0xec>)
    5c58:	4798      	blx	r3
}
    5c5a:	0020      	movs	r0, r4
    5c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
    5c5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5c60:	4a2e      	ldr	r2, [pc, #184]	; (5d1c <xTaskResumeAll+0xf0>)
    5c62:	6812      	ldr	r2, [r2, #0]
    5c64:	4293      	cmp	r3, r2
    5c66:	d901      	bls.n	5c6c <xTaskResumeAll+0x40>
    5c68:	4a2c      	ldr	r2, [pc, #176]	; (5d1c <xTaskResumeAll+0xf0>)
    5c6a:	6013      	str	r3, [r2, #0]
    5c6c:	0098      	lsls	r0, r3, #2
    5c6e:	18c0      	adds	r0, r0, r3
    5c70:	0080      	lsls	r0, r0, #2
    5c72:	4b2b      	ldr	r3, [pc, #172]	; (5d20 <xTaskResumeAll+0xf4>)
    5c74:	1818      	adds	r0, r3, r0
    5c76:	0031      	movs	r1, r6
    5c78:	4b2a      	ldr	r3, [pc, #168]	; (5d24 <xTaskResumeAll+0xf8>)
    5c7a:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5c7c:	4b2a      	ldr	r3, [pc, #168]	; (5d28 <xTaskResumeAll+0xfc>)
    5c7e:	681b      	ldr	r3, [r3, #0]
    5c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5c82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5c84:	429a      	cmp	r2, r3
    5c86:	d302      	bcc.n	5c8e <xTaskResumeAll+0x62>
						xYieldPending = pdTRUE;
    5c88:	2201      	movs	r2, #1
    5c8a:	4b28      	ldr	r3, [pc, #160]	; (5d2c <xTaskResumeAll+0x100>)
    5c8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    5c8e:	682b      	ldr	r3, [r5, #0]
    5c90:	2b00      	cmp	r3, #0
    5c92:	d01a      	beq.n	5cca <xTaskResumeAll+0x9e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    5c94:	68fb      	ldr	r3, [r7, #12]
    5c96:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    5c98:	0020      	movs	r0, r4
    5c9a:	3018      	adds	r0, #24
    5c9c:	4b24      	ldr	r3, [pc, #144]	; (5d30 <xTaskResumeAll+0x104>)
    5c9e:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5ca0:	1d26      	adds	r6, r4, #4
    5ca2:	0030      	movs	r0, r6
    5ca4:	4b22      	ldr	r3, [pc, #136]	; (5d30 <xTaskResumeAll+0x104>)
    5ca6:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    5ca8:	0020      	movs	r0, r4
    5caa:	4b22      	ldr	r3, [pc, #136]	; (5d34 <xTaskResumeAll+0x108>)
    5cac:	4798      	blx	r3
    5cae:	4b22      	ldr	r3, [pc, #136]	; (5d38 <xTaskResumeAll+0x10c>)
    5cb0:	881b      	ldrh	r3, [r3, #0]
    5cb2:	4203      	tst	r3, r0
    5cb4:	d0d3      	beq.n	5c5e <xTaskResumeAll+0x32>
    5cb6:	0020      	movs	r0, r4
    5cb8:	4b20      	ldr	r3, [pc, #128]	; (5d3c <xTaskResumeAll+0x110>)
    5cba:	4798      	blx	r3
    5cbc:	b2c0      	uxtb	r0, r0
    5cbe:	4b20      	ldr	r3, [pc, #128]	; (5d40 <xTaskResumeAll+0x114>)
    5cc0:	4798      	blx	r3
    5cc2:	e7cc      	b.n	5c5e <xTaskResumeAll+0x32>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    5cc4:	4d1f      	ldr	r5, [pc, #124]	; (5d44 <xTaskResumeAll+0x118>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    5cc6:	002f      	movs	r7, r5
    5cc8:	e7e1      	b.n	5c8e <xTaskResumeAll+0x62>
				if( pxTCB != NULL )
    5cca:	2c00      	cmp	r4, #0
    5ccc:	d001      	beq.n	5cd2 <xTaskResumeAll+0xa6>
					prvResetNextTaskUnblockTime();
    5cce:	4b1e      	ldr	r3, [pc, #120]	; (5d48 <xTaskResumeAll+0x11c>)
    5cd0:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    5cd2:	4b1e      	ldr	r3, [pc, #120]	; (5d4c <xTaskResumeAll+0x120>)
    5cd4:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    5cd6:	2c00      	cmp	r4, #0
    5cd8:	d00e      	beq.n	5cf8 <xTaskResumeAll+0xcc>
							if( xTaskIncrementTick() != pdFALSE )
    5cda:	4f1d      	ldr	r7, [pc, #116]	; (5d50 <xTaskResumeAll+0x124>)
								xYieldPending = pdTRUE;
    5cdc:	4e13      	ldr	r6, [pc, #76]	; (5d2c <xTaskResumeAll+0x100>)
    5cde:	2501      	movs	r5, #1
    5ce0:	e002      	b.n	5ce8 <xTaskResumeAll+0xbc>
							--uxPendedCounts;
    5ce2:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    5ce4:	2c00      	cmp	r4, #0
    5ce6:	d004      	beq.n	5cf2 <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
    5ce8:	47b8      	blx	r7
    5cea:	2800      	cmp	r0, #0
    5cec:	d0f9      	beq.n	5ce2 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
    5cee:	6035      	str	r5, [r6, #0]
    5cf0:	e7f7      	b.n	5ce2 <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
    5cf2:	2200      	movs	r2, #0
    5cf4:	4b15      	ldr	r3, [pc, #84]	; (5d4c <xTaskResumeAll+0x120>)
    5cf6:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    5cf8:	4b0c      	ldr	r3, [pc, #48]	; (5d2c <xTaskResumeAll+0x100>)
    5cfa:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    5cfc:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    5cfe:	2b00      	cmp	r3, #0
    5d00:	d0a9      	beq.n	5c56 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    5d02:	4b14      	ldr	r3, [pc, #80]	; (5d54 <xTaskResumeAll+0x128>)
    5d04:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    5d06:	3401      	adds	r4, #1
    5d08:	e7a5      	b.n	5c56 <xTaskResumeAll+0x2a>
    5d0a:	46c0      	nop			; (mov r8, r8)
    5d0c:	200037b0 	.word	0x200037b0
    5d10:	00004321 	.word	0x00004321
    5d14:	200037a4 	.word	0x200037a4
    5d18:	00004339 	.word	0x00004339
    5d1c:	200037b8 	.word	0x200037b8
    5d20:	20003740 	.word	0x20003740
    5d24:	000041a1 	.word	0x000041a1
    5d28:	20003734 	.word	0x20003734
    5d2c:	20003834 	.word	0x20003834
    5d30:	000041e7 	.word	0x000041e7
    5d34:	000030b1 	.word	0x000030b1
    5d38:	2000008c 	.word	0x2000008c
    5d3c:	000030a1 	.word	0x000030a1
    5d40:	00003c39 	.word	0x00003c39
    5d44:	200037f0 	.word	0x200037f0
    5d48:	0000563d 	.word	0x0000563d
    5d4c:	200037ac 	.word	0x200037ac
    5d50:	00005aa1 	.word	0x00005aa1
    5d54:	00004311 	.word	0x00004311

00005d58 <vTaskDelay>:
	{
    5d58:	b510      	push	{r4, lr}
    5d5a:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    5d5c:	d031      	beq.n	5dc2 <vTaskDelay+0x6a>
			configASSERT( uxSchedulerSuspended == 0 );
    5d5e:	4b1a      	ldr	r3, [pc, #104]	; (5dc8 <vTaskDelay+0x70>)
    5d60:	681b      	ldr	r3, [r3, #0]
    5d62:	2b00      	cmp	r3, #0
    5d64:	d001      	beq.n	5d6a <vTaskDelay+0x12>
    5d66:	b672      	cpsid	i
    5d68:	e7fe      	b.n	5d68 <vTaskDelay+0x10>
			vTaskSuspendAll();
    5d6a:	4b18      	ldr	r3, [pc, #96]	; (5dcc <vTaskDelay+0x74>)
    5d6c:	4798      	blx	r3
				traceTASK_DELAY();
    5d6e:	4b18      	ldr	r3, [pc, #96]	; (5dd0 <vTaskDelay+0x78>)
    5d70:	6818      	ldr	r0, [r3, #0]
    5d72:	4b18      	ldr	r3, [pc, #96]	; (5dd4 <vTaskDelay+0x7c>)
    5d74:	4798      	blx	r3
    5d76:	4b18      	ldr	r3, [pc, #96]	; (5dd8 <vTaskDelay+0x80>)
    5d78:	881b      	ldrh	r3, [r3, #0]
    5d7a:	4203      	tst	r3, r0
    5d7c:	d00a      	beq.n	5d94 <vTaskDelay+0x3c>
    5d7e:	0021      	movs	r1, r4
    5d80:	2089      	movs	r0, #137	; 0x89
    5d82:	4b16      	ldr	r3, [pc, #88]	; (5ddc <vTaskDelay+0x84>)
    5d84:	4798      	blx	r3
    5d86:	4b12      	ldr	r3, [pc, #72]	; (5dd0 <vTaskDelay+0x78>)
    5d88:	6818      	ldr	r0, [r3, #0]
    5d8a:	4b15      	ldr	r3, [pc, #84]	; (5de0 <vTaskDelay+0x88>)
    5d8c:	4798      	blx	r3
    5d8e:	b2c0      	uxtb	r0, r0
    5d90:	4b14      	ldr	r3, [pc, #80]	; (5de4 <vTaskDelay+0x8c>)
    5d92:	4798      	blx	r3
    5d94:	4b14      	ldr	r3, [pc, #80]	; (5de8 <vTaskDelay+0x90>)
    5d96:	4798      	blx	r3
    5d98:	4b0e      	ldr	r3, [pc, #56]	; (5dd4 <vTaskDelay+0x7c>)
    5d9a:	4798      	blx	r3
    5d9c:	4b0e      	ldr	r3, [pc, #56]	; (5dd8 <vTaskDelay+0x80>)
    5d9e:	881b      	ldrh	r3, [r3, #0]
    5da0:	4203      	tst	r3, r0
    5da2:	d006      	beq.n	5db2 <vTaskDelay+0x5a>
    5da4:	4b10      	ldr	r3, [pc, #64]	; (5de8 <vTaskDelay+0x90>)
    5da6:	4798      	blx	r3
    5da8:	4b0d      	ldr	r3, [pc, #52]	; (5de0 <vTaskDelay+0x88>)
    5daa:	4798      	blx	r3
    5dac:	b2c0      	uxtb	r0, r0
    5dae:	4b0d      	ldr	r3, [pc, #52]	; (5de4 <vTaskDelay+0x8c>)
    5db0:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    5db2:	2100      	movs	r1, #0
    5db4:	0020      	movs	r0, r4
    5db6:	4b0d      	ldr	r3, [pc, #52]	; (5dec <vTaskDelay+0x94>)
    5db8:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    5dba:	4b0d      	ldr	r3, [pc, #52]	; (5df0 <vTaskDelay+0x98>)
    5dbc:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    5dbe:	2800      	cmp	r0, #0
    5dc0:	d101      	bne.n	5dc6 <vTaskDelay+0x6e>
			portYIELD_WITHIN_API();
    5dc2:	4b0c      	ldr	r3, [pc, #48]	; (5df4 <vTaskDelay+0x9c>)
    5dc4:	4798      	blx	r3
	}
    5dc6:	bd10      	pop	{r4, pc}
    5dc8:	200037b0 	.word	0x200037b0
    5dcc:	00005a85 	.word	0x00005a85
    5dd0:	20003734 	.word	0x20003734
    5dd4:	000030b1 	.word	0x000030b1
    5dd8:	2000008c 	.word	0x2000008c
    5ddc:	00003f3d 	.word	0x00003f3d
    5de0:	000030a1 	.word	0x000030a1
    5de4:	000038cd 	.word	0x000038cd
    5de8:	00003169 	.word	0x00003169
    5dec:	000056e9 	.word	0x000056e9
    5df0:	00005c2d 	.word	0x00005c2d
    5df4:	00004311 	.word	0x00004311

00005df8 <vTaskSwitchContext>:
{
    5df8:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    5dfa:	4b33      	ldr	r3, [pc, #204]	; (5ec8 <vTaskSwitchContext+0xd0>)
    5dfc:	681b      	ldr	r3, [r3, #0]
    5dfe:	2b00      	cmp	r3, #0
    5e00:	d125      	bne.n	5e4e <vTaskSwitchContext+0x56>
		xYieldPending = pdFALSE;
    5e02:	2200      	movs	r2, #0
    5e04:	4b31      	ldr	r3, [pc, #196]	; (5ecc <vTaskSwitchContext+0xd4>)
    5e06:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    5e08:	4b31      	ldr	r3, [pc, #196]	; (5ed0 <vTaskSwitchContext+0xd8>)
    5e0a:	681a      	ldr	r2, [r3, #0]
    5e0c:	681b      	ldr	r3, [r3, #0]
    5e0e:	6812      	ldr	r2, [r2, #0]
    5e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5e12:	429a      	cmp	r2, r3
    5e14:	d805      	bhi.n	5e22 <vTaskSwitchContext+0x2a>
    5e16:	4b2e      	ldr	r3, [pc, #184]	; (5ed0 <vTaskSwitchContext+0xd8>)
    5e18:	6818      	ldr	r0, [r3, #0]
    5e1a:	6819      	ldr	r1, [r3, #0]
    5e1c:	3134      	adds	r1, #52	; 0x34
    5e1e:	4b2d      	ldr	r3, [pc, #180]	; (5ed4 <vTaskSwitchContext+0xdc>)
    5e20:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    5e22:	4b2d      	ldr	r3, [pc, #180]	; (5ed8 <vTaskSwitchContext+0xe0>)
    5e24:	681b      	ldr	r3, [r3, #0]
    5e26:	009a      	lsls	r2, r3, #2
    5e28:	18d2      	adds	r2, r2, r3
    5e2a:	0092      	lsls	r2, r2, #2
    5e2c:	492b      	ldr	r1, [pc, #172]	; (5edc <vTaskSwitchContext+0xe4>)
    5e2e:	5852      	ldr	r2, [r2, r1]
    5e30:	2a00      	cmp	r2, #0
    5e32:	d110      	bne.n	5e56 <vTaskSwitchContext+0x5e>
    5e34:	2b00      	cmp	r3, #0
    5e36:	d008      	beq.n	5e4a <vTaskSwitchContext+0x52>
    5e38:	3b01      	subs	r3, #1
    5e3a:	009a      	lsls	r2, r3, #2
    5e3c:	18d2      	adds	r2, r2, r3
    5e3e:	0092      	lsls	r2, r2, #2
    5e40:	5852      	ldr	r2, [r2, r1]
    5e42:	2a00      	cmp	r2, #0
    5e44:	d107      	bne.n	5e56 <vTaskSwitchContext+0x5e>
    5e46:	2b00      	cmp	r3, #0
    5e48:	d1f6      	bne.n	5e38 <vTaskSwitchContext+0x40>
    5e4a:	b672      	cpsid	i
    5e4c:	e7fe      	b.n	5e4c <vTaskSwitchContext+0x54>
		xYieldPending = pdTRUE;
    5e4e:	2201      	movs	r2, #1
    5e50:	4b1e      	ldr	r3, [pc, #120]	; (5ecc <vTaskSwitchContext+0xd4>)
    5e52:	601a      	str	r2, [r3, #0]
}
    5e54:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    5e56:	4821      	ldr	r0, [pc, #132]	; (5edc <vTaskSwitchContext+0xe4>)
    5e58:	009a      	lsls	r2, r3, #2
    5e5a:	18d1      	adds	r1, r2, r3
    5e5c:	0089      	lsls	r1, r1, #2
    5e5e:	1841      	adds	r1, r0, r1
    5e60:	684c      	ldr	r4, [r1, #4]
    5e62:	6864      	ldr	r4, [r4, #4]
    5e64:	604c      	str	r4, [r1, #4]
    5e66:	18d2      	adds	r2, r2, r3
    5e68:	0092      	lsls	r2, r2, #2
    5e6a:	3208      	adds	r2, #8
    5e6c:	1882      	adds	r2, r0, r2
    5e6e:	4294      	cmp	r4, r2
    5e70:	d019      	beq.n	5ea6 <vTaskSwitchContext+0xae>
    5e72:	009a      	lsls	r2, r3, #2
    5e74:	18d2      	adds	r2, r2, r3
    5e76:	0092      	lsls	r2, r2, #2
    5e78:	4918      	ldr	r1, [pc, #96]	; (5edc <vTaskSwitchContext+0xe4>)
    5e7a:	188a      	adds	r2, r1, r2
    5e7c:	6852      	ldr	r2, [r2, #4]
    5e7e:	68d1      	ldr	r1, [r2, #12]
    5e80:	4a13      	ldr	r2, [pc, #76]	; (5ed0 <vTaskSwitchContext+0xd8>)
    5e82:	6011      	str	r1, [r2, #0]
    5e84:	4a14      	ldr	r2, [pc, #80]	; (5ed8 <vTaskSwitchContext+0xe0>)
    5e86:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
    5e88:	2201      	movs	r2, #1
    5e8a:	4b15      	ldr	r3, [pc, #84]	; (5ee0 <vTaskSwitchContext+0xe8>)
    5e8c:	601a      	str	r2, [r3, #0]
    5e8e:	4b15      	ldr	r3, [pc, #84]	; (5ee4 <vTaskSwitchContext+0xec>)
    5e90:	4798      	blx	r3
    5e92:	4b15      	ldr	r3, [pc, #84]	; (5ee8 <vTaskSwitchContext+0xf0>)
    5e94:	4798      	blx	r3
    5e96:	4b15      	ldr	r3, [pc, #84]	; (5eec <vTaskSwitchContext+0xf4>)
    5e98:	881b      	ldrh	r3, [r3, #0]
    5e9a:	4203      	tst	r3, r0
    5e9c:	d10b      	bne.n	5eb6 <vTaskSwitchContext+0xbe>
    5e9e:	2202      	movs	r2, #2
    5ea0:	4b0f      	ldr	r3, [pc, #60]	; (5ee0 <vTaskSwitchContext+0xe8>)
    5ea2:	601a      	str	r2, [r3, #0]
}
    5ea4:	e7d6      	b.n	5e54 <vTaskSwitchContext+0x5c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    5ea6:	6860      	ldr	r0, [r4, #4]
    5ea8:	009a      	lsls	r2, r3, #2
    5eaa:	18d2      	adds	r2, r2, r3
    5eac:	0092      	lsls	r2, r2, #2
    5eae:	490b      	ldr	r1, [pc, #44]	; (5edc <vTaskSwitchContext+0xe4>)
    5eb0:	188a      	adds	r2, r1, r2
    5eb2:	6050      	str	r0, [r2, #4]
    5eb4:	e7dd      	b.n	5e72 <vTaskSwitchContext+0x7a>
		traceTASK_SWITCHED_IN();
    5eb6:	4b0b      	ldr	r3, [pc, #44]	; (5ee4 <vTaskSwitchContext+0xec>)
    5eb8:	4798      	blx	r3
    5eba:	4b0d      	ldr	r3, [pc, #52]	; (5ef0 <vTaskSwitchContext+0xf8>)
    5ebc:	4798      	blx	r3
    5ebe:	b2c0      	uxtb	r0, r0
    5ec0:	4b0c      	ldr	r3, [pc, #48]	; (5ef4 <vTaskSwitchContext+0xfc>)
    5ec2:	4798      	blx	r3
    5ec4:	e7eb      	b.n	5e9e <vTaskSwitchContext+0xa6>
    5ec6:	46c0      	nop			; (mov r8, r8)
    5ec8:	200037b0 	.word	0x200037b0
    5ecc:	20003834 	.word	0x20003834
    5ed0:	20003734 	.word	0x20003734
    5ed4:	000087d5 	.word	0x000087d5
    5ed8:	200037b8 	.word	0x200037b8
    5edc:	20003740 	.word	0x20003740
    5ee0:	20000458 	.word	0x20000458
    5ee4:	00003169 	.word	0x00003169
    5ee8:	000030b1 	.word	0x000030b1
    5eec:	2000008c 	.word	0x2000008c
    5ef0:	000030a1 	.word	0x000030a1
    5ef4:	00003fe5 	.word	0x00003fe5

00005ef8 <vTaskSuspend>:
	{
    5ef8:	b570      	push	{r4, r5, r6, lr}
    5efa:	0005      	movs	r5, r0
		taskENTER_CRITICAL();
    5efc:	4b33      	ldr	r3, [pc, #204]	; (5fcc <vTaskSuspend+0xd4>)
    5efe:	4798      	blx	r3
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    5f00:	1e2c      	subs	r4, r5, #0
    5f02:	d02b      	beq.n	5f5c <vTaskSuspend+0x64>
			traceTASK_SUSPEND( pxTCB );
    5f04:	4b32      	ldr	r3, [pc, #200]	; (5fd0 <vTaskSuspend+0xd8>)
    5f06:	4798      	blx	r3
    5f08:	4b32      	ldr	r3, [pc, #200]	; (5fd4 <vTaskSuspend+0xdc>)
    5f0a:	4798      	blx	r3
    5f0c:	4b32      	ldr	r3, [pc, #200]	; (5fd8 <vTaskSuspend+0xe0>)
    5f0e:	881b      	ldrh	r3, [r3, #0]
    5f10:	4203      	tst	r3, r0
    5f12:	d126      	bne.n	5f62 <vTaskSuspend+0x6a>
    5f14:	0020      	movs	r0, r4
    5f16:	4b31      	ldr	r3, [pc, #196]	; (5fdc <vTaskSuspend+0xe4>)
    5f18:	4798      	blx	r3
    5f1a:	b2c0      	uxtb	r0, r0
    5f1c:	4b30      	ldr	r3, [pc, #192]	; (5fe0 <vTaskSuspend+0xe8>)
    5f1e:	4798      	blx	r3
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    5f20:	1d25      	adds	r5, r4, #4
    5f22:	0028      	movs	r0, r5
    5f24:	4b2f      	ldr	r3, [pc, #188]	; (5fe4 <vTaskSuspend+0xec>)
    5f26:	4798      	blx	r3
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    5f28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5f2a:	2b00      	cmp	r3, #0
    5f2c:	d003      	beq.n	5f36 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    5f2e:	0020      	movs	r0, r4
    5f30:	3018      	adds	r0, #24
    5f32:	4b2c      	ldr	r3, [pc, #176]	; (5fe4 <vTaskSuspend+0xec>)
    5f34:	4798      	blx	r3
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    5f36:	0029      	movs	r1, r5
    5f38:	482b      	ldr	r0, [pc, #172]	; (5fe8 <vTaskSuspend+0xf0>)
    5f3a:	4b2c      	ldr	r3, [pc, #176]	; (5fec <vTaskSuspend+0xf4>)
    5f3c:	4798      	blx	r3
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    5f3e:	2350      	movs	r3, #80	; 0x50
    5f40:	5ce3      	ldrb	r3, [r4, r3]
    5f42:	2b01      	cmp	r3, #1
    5f44:	d01d      	beq.n	5f82 <vTaskSuspend+0x8a>
		taskEXIT_CRITICAL();
    5f46:	4b2a      	ldr	r3, [pc, #168]	; (5ff0 <vTaskSuspend+0xf8>)
    5f48:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
    5f4a:	4b2a      	ldr	r3, [pc, #168]	; (5ff4 <vTaskSuspend+0xfc>)
    5f4c:	681b      	ldr	r3, [r3, #0]
    5f4e:	2b00      	cmp	r3, #0
    5f50:	d11b      	bne.n	5f8a <vTaskSuspend+0x92>
		if( pxTCB == pxCurrentTCB )
    5f52:	4b29      	ldr	r3, [pc, #164]	; (5ff8 <vTaskSuspend+0x100>)
    5f54:	681b      	ldr	r3, [r3, #0]
    5f56:	429c      	cmp	r4, r3
    5f58:	d01e      	beq.n	5f98 <vTaskSuspend+0xa0>
	}
    5f5a:	bd70      	pop	{r4, r5, r6, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    5f5c:	4b26      	ldr	r3, [pc, #152]	; (5ff8 <vTaskSuspend+0x100>)
    5f5e:	681c      	ldr	r4, [r3, #0]
    5f60:	e7d0      	b.n	5f04 <vTaskSuspend+0xc>
			traceTASK_SUSPEND( pxTCB );
    5f62:	0020      	movs	r0, r4
    5f64:	4b1b      	ldr	r3, [pc, #108]	; (5fd4 <vTaskSuspend+0xdc>)
    5f66:	4798      	blx	r3
    5f68:	4b1b      	ldr	r3, [pc, #108]	; (5fd8 <vTaskSuspend+0xe0>)
    5f6a:	881b      	ldrh	r3, [r3, #0]
    5f6c:	4203      	tst	r3, r0
    5f6e:	d0d1      	beq.n	5f14 <vTaskSuspend+0x1c>
    5f70:	0020      	movs	r0, r4
    5f72:	4b1a      	ldr	r3, [pc, #104]	; (5fdc <vTaskSuspend+0xe4>)
    5f74:	4798      	blx	r3
    5f76:	b2c2      	uxtb	r2, r0
    5f78:	2103      	movs	r1, #3
    5f7a:	208a      	movs	r0, #138	; 0x8a
    5f7c:	4b1f      	ldr	r3, [pc, #124]	; (5ffc <vTaskSuspend+0x104>)
    5f7e:	4798      	blx	r3
    5f80:	e7c8      	b.n	5f14 <vTaskSuspend+0x1c>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5f82:	2200      	movs	r2, #0
    5f84:	334f      	adds	r3, #79	; 0x4f
    5f86:	54e2      	strb	r2, [r4, r3]
    5f88:	e7dd      	b.n	5f46 <vTaskSuspend+0x4e>
			taskENTER_CRITICAL();
    5f8a:	4b10      	ldr	r3, [pc, #64]	; (5fcc <vTaskSuspend+0xd4>)
    5f8c:	4798      	blx	r3
				prvResetNextTaskUnblockTime();
    5f8e:	4b1c      	ldr	r3, [pc, #112]	; (6000 <vTaskSuspend+0x108>)
    5f90:	4798      	blx	r3
			taskEXIT_CRITICAL();
    5f92:	4b17      	ldr	r3, [pc, #92]	; (5ff0 <vTaskSuspend+0xf8>)
    5f94:	4798      	blx	r3
    5f96:	e7dc      	b.n	5f52 <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
    5f98:	4b16      	ldr	r3, [pc, #88]	; (5ff4 <vTaskSuspend+0xfc>)
    5f9a:	681b      	ldr	r3, [r3, #0]
    5f9c:	2b00      	cmp	r3, #0
    5f9e:	d008      	beq.n	5fb2 <vTaskSuspend+0xba>
				configASSERT( uxSchedulerSuspended == 0 );
    5fa0:	4b18      	ldr	r3, [pc, #96]	; (6004 <vTaskSuspend+0x10c>)
    5fa2:	681b      	ldr	r3, [r3, #0]
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	d001      	beq.n	5fac <vTaskSuspend+0xb4>
    5fa8:	b672      	cpsid	i
    5faa:	e7fe      	b.n	5faa <vTaskSuspend+0xb2>
				portYIELD_WITHIN_API();
    5fac:	4b16      	ldr	r3, [pc, #88]	; (6008 <vTaskSuspend+0x110>)
    5fae:	4798      	blx	r3
    5fb0:	e7d3      	b.n	5f5a <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    5fb2:	4b0d      	ldr	r3, [pc, #52]	; (5fe8 <vTaskSuspend+0xf0>)
    5fb4:	681a      	ldr	r2, [r3, #0]
    5fb6:	4b15      	ldr	r3, [pc, #84]	; (600c <vTaskSuspend+0x114>)
    5fb8:	681b      	ldr	r3, [r3, #0]
    5fba:	429a      	cmp	r2, r3
    5fbc:	d002      	beq.n	5fc4 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
    5fbe:	4b14      	ldr	r3, [pc, #80]	; (6010 <vTaskSuspend+0x118>)
    5fc0:	4798      	blx	r3
	}
    5fc2:	e7ca      	b.n	5f5a <vTaskSuspend+0x62>
					pxCurrentTCB = NULL;
    5fc4:	2200      	movs	r2, #0
    5fc6:	4b0c      	ldr	r3, [pc, #48]	; (5ff8 <vTaskSuspend+0x100>)
    5fc8:	601a      	str	r2, [r3, #0]
    5fca:	e7c6      	b.n	5f5a <vTaskSuspend+0x62>
    5fcc:	00004321 	.word	0x00004321
    5fd0:	00003169 	.word	0x00003169
    5fd4:	000030b1 	.word	0x000030b1
    5fd8:	2000008c 	.word	0x2000008c
    5fdc:	000030a1 	.word	0x000030a1
    5fe0:	000038cd 	.word	0x000038cd
    5fe4:	000041e7 	.word	0x000041e7
    5fe8:	20003808 	.word	0x20003808
    5fec:	000041a1 	.word	0x000041a1
    5ff0:	00004339 	.word	0x00004339
    5ff4:	20003804 	.word	0x20003804
    5ff8:	20003734 	.word	0x20003734
    5ffc:	00003da1 	.word	0x00003da1
    6000:	0000563d 	.word	0x0000563d
    6004:	200037b0 	.word	0x200037b0
    6008:	00004311 	.word	0x00004311
    600c:	200037a4 	.word	0x200037a4
    6010:	00005df9 	.word	0x00005df9

00006014 <vTaskPlaceOnEventList>:
{
    6014:	b510      	push	{r4, lr}
    6016:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    6018:	2800      	cmp	r0, #0
    601a:	d101      	bne.n	6020 <vTaskPlaceOnEventList+0xc>
    601c:	b672      	cpsid	i
    601e:	e7fe      	b.n	601e <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    6020:	4b04      	ldr	r3, [pc, #16]	; (6034 <vTaskPlaceOnEventList+0x20>)
    6022:	6819      	ldr	r1, [r3, #0]
    6024:	3118      	adds	r1, #24
    6026:	4b04      	ldr	r3, [pc, #16]	; (6038 <vTaskPlaceOnEventList+0x24>)
    6028:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    602a:	2101      	movs	r1, #1
    602c:	0020      	movs	r0, r4
    602e:	4b03      	ldr	r3, [pc, #12]	; (603c <vTaskPlaceOnEventList+0x28>)
    6030:	4798      	blx	r3
}
    6032:	bd10      	pop	{r4, pc}
    6034:	20003734 	.word	0x20003734
    6038:	000041b9 	.word	0x000041b9
    603c:	000056e9 	.word	0x000056e9

00006040 <vTaskPlaceOnEventListRestricted>:
	{
    6040:	b570      	push	{r4, r5, r6, lr}
    6042:	000c      	movs	r4, r1
    6044:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    6046:	2800      	cmp	r0, #0
    6048:	d031      	beq.n	60ae <vTaskPlaceOnEventListRestricted+0x6e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    604a:	4b1a      	ldr	r3, [pc, #104]	; (60b4 <vTaskPlaceOnEventListRestricted+0x74>)
    604c:	6819      	ldr	r1, [r3, #0]
    604e:	3118      	adds	r1, #24
    6050:	4b19      	ldr	r3, [pc, #100]	; (60b8 <vTaskPlaceOnEventListRestricted+0x78>)
    6052:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    6054:	2d00      	cmp	r5, #0
    6056:	d001      	beq.n	605c <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    6058:	2401      	movs	r4, #1
    605a:	4264      	negs	r4, r4
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
    605c:	4b15      	ldr	r3, [pc, #84]	; (60b4 <vTaskPlaceOnEventListRestricted+0x74>)
    605e:	6818      	ldr	r0, [r3, #0]
    6060:	4b16      	ldr	r3, [pc, #88]	; (60bc <vTaskPlaceOnEventListRestricted+0x7c>)
    6062:	4798      	blx	r3
    6064:	4b16      	ldr	r3, [pc, #88]	; (60c0 <vTaskPlaceOnEventListRestricted+0x80>)
    6066:	881b      	ldrh	r3, [r3, #0]
    6068:	4203      	tst	r3, r0
    606a:	d00c      	beq.n	6086 <vTaskPlaceOnEventListRestricted+0x46>
    606c:	4b15      	ldr	r3, [pc, #84]	; (60c4 <vTaskPlaceOnEventListRestricted+0x84>)
    606e:	6819      	ldr	r1, [r3, #0]
    6070:	1861      	adds	r1, r4, r1
    6072:	2088      	movs	r0, #136	; 0x88
    6074:	4b14      	ldr	r3, [pc, #80]	; (60c8 <vTaskPlaceOnEventListRestricted+0x88>)
    6076:	4798      	blx	r3
    6078:	4b0e      	ldr	r3, [pc, #56]	; (60b4 <vTaskPlaceOnEventListRestricted+0x74>)
    607a:	6818      	ldr	r0, [r3, #0]
    607c:	4b13      	ldr	r3, [pc, #76]	; (60cc <vTaskPlaceOnEventListRestricted+0x8c>)
    607e:	4798      	blx	r3
    6080:	b2c0      	uxtb	r0, r0
    6082:	4b13      	ldr	r3, [pc, #76]	; (60d0 <vTaskPlaceOnEventListRestricted+0x90>)
    6084:	4798      	blx	r3
    6086:	4b13      	ldr	r3, [pc, #76]	; (60d4 <vTaskPlaceOnEventListRestricted+0x94>)
    6088:	4798      	blx	r3
    608a:	4b0c      	ldr	r3, [pc, #48]	; (60bc <vTaskPlaceOnEventListRestricted+0x7c>)
    608c:	4798      	blx	r3
    608e:	4b0c      	ldr	r3, [pc, #48]	; (60c0 <vTaskPlaceOnEventListRestricted+0x80>)
    6090:	881b      	ldrh	r3, [r3, #0]
    6092:	4203      	tst	r3, r0
    6094:	d006      	beq.n	60a4 <vTaskPlaceOnEventListRestricted+0x64>
    6096:	4b0f      	ldr	r3, [pc, #60]	; (60d4 <vTaskPlaceOnEventListRestricted+0x94>)
    6098:	4798      	blx	r3
    609a:	4b0c      	ldr	r3, [pc, #48]	; (60cc <vTaskPlaceOnEventListRestricted+0x8c>)
    609c:	4798      	blx	r3
    609e:	b2c0      	uxtb	r0, r0
    60a0:	4b0b      	ldr	r3, [pc, #44]	; (60d0 <vTaskPlaceOnEventListRestricted+0x90>)
    60a2:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    60a4:	0029      	movs	r1, r5
    60a6:	0020      	movs	r0, r4
    60a8:	4b0b      	ldr	r3, [pc, #44]	; (60d8 <vTaskPlaceOnEventListRestricted+0x98>)
    60aa:	4798      	blx	r3
	}
    60ac:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    60ae:	b672      	cpsid	i
    60b0:	e7fe      	b.n	60b0 <vTaskPlaceOnEventListRestricted+0x70>
    60b2:	46c0      	nop			; (mov r8, r8)
    60b4:	20003734 	.word	0x20003734
    60b8:	000041a1 	.word	0x000041a1
    60bc:	000030b1 	.word	0x000030b1
    60c0:	2000008c 	.word	0x2000008c
    60c4:	20003830 	.word	0x20003830
    60c8:	00003f3d 	.word	0x00003f3d
    60cc:	000030a1 	.word	0x000030a1
    60d0:	000038cd 	.word	0x000038cd
    60d4:	00003169 	.word	0x00003169
    60d8:	000056e9 	.word	0x000056e9

000060dc <xTaskRemoveFromEventList>:
{
    60dc:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    60de:	68c3      	ldr	r3, [r0, #12]
    60e0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    60e2:	2c00      	cmp	r4, #0
    60e4:	d02e      	beq.n	6144 <xTaskRemoveFromEventList+0x68>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    60e6:	0025      	movs	r5, r4
    60e8:	3518      	adds	r5, #24
    60ea:	0028      	movs	r0, r5
    60ec:	4b1c      	ldr	r3, [pc, #112]	; (6160 <xTaskRemoveFromEventList+0x84>)
    60ee:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    60f0:	4b1c      	ldr	r3, [pc, #112]	; (6164 <xTaskRemoveFromEventList+0x88>)
    60f2:	681b      	ldr	r3, [r3, #0]
    60f4:	2b00      	cmp	r3, #0
    60f6:	d12e      	bne.n	6156 <xTaskRemoveFromEventList+0x7a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    60f8:	1d25      	adds	r5, r4, #4
    60fa:	0028      	movs	r0, r5
    60fc:	4b18      	ldr	r3, [pc, #96]	; (6160 <xTaskRemoveFromEventList+0x84>)
    60fe:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    6100:	0020      	movs	r0, r4
    6102:	4b19      	ldr	r3, [pc, #100]	; (6168 <xTaskRemoveFromEventList+0x8c>)
    6104:	4798      	blx	r3
    6106:	4b19      	ldr	r3, [pc, #100]	; (616c <xTaskRemoveFromEventList+0x90>)
    6108:	881b      	ldrh	r3, [r3, #0]
    610a:	4203      	tst	r3, r0
    610c:	d11c      	bne.n	6148 <xTaskRemoveFromEventList+0x6c>
    610e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6110:	4a17      	ldr	r2, [pc, #92]	; (6170 <xTaskRemoveFromEventList+0x94>)
    6112:	6812      	ldr	r2, [r2, #0]
    6114:	4293      	cmp	r3, r2
    6116:	d901      	bls.n	611c <xTaskRemoveFromEventList+0x40>
    6118:	4a15      	ldr	r2, [pc, #84]	; (6170 <xTaskRemoveFromEventList+0x94>)
    611a:	6013      	str	r3, [r2, #0]
    611c:	0098      	lsls	r0, r3, #2
    611e:	18c0      	adds	r0, r0, r3
    6120:	0080      	lsls	r0, r0, #2
    6122:	4b14      	ldr	r3, [pc, #80]	; (6174 <xTaskRemoveFromEventList+0x98>)
    6124:	1818      	adds	r0, r3, r0
    6126:	0029      	movs	r1, r5
    6128:	4b13      	ldr	r3, [pc, #76]	; (6178 <xTaskRemoveFromEventList+0x9c>)
    612a:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    612c:	4b13      	ldr	r3, [pc, #76]	; (617c <xTaskRemoveFromEventList+0xa0>)
    612e:	681b      	ldr	r3, [r3, #0]
    6130:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    6132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    6134:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    6136:	429a      	cmp	r2, r3
    6138:	d903      	bls.n	6142 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
    613a:	2201      	movs	r2, #1
    613c:	4b10      	ldr	r3, [pc, #64]	; (6180 <xTaskRemoveFromEventList+0xa4>)
    613e:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    6140:	3001      	adds	r0, #1
}
    6142:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    6144:	b672      	cpsid	i
    6146:	e7fe      	b.n	6146 <xTaskRemoveFromEventList+0x6a>
		prvAddTaskToReadyList( pxUnblockedTCB );
    6148:	0020      	movs	r0, r4
    614a:	4b0e      	ldr	r3, [pc, #56]	; (6184 <xTaskRemoveFromEventList+0xa8>)
    614c:	4798      	blx	r3
    614e:	b2c0      	uxtb	r0, r0
    6150:	4b0d      	ldr	r3, [pc, #52]	; (6188 <xTaskRemoveFromEventList+0xac>)
    6152:	4798      	blx	r3
    6154:	e7db      	b.n	610e <xTaskRemoveFromEventList+0x32>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    6156:	0029      	movs	r1, r5
    6158:	480c      	ldr	r0, [pc, #48]	; (618c <xTaskRemoveFromEventList+0xb0>)
    615a:	4b07      	ldr	r3, [pc, #28]	; (6178 <xTaskRemoveFromEventList+0x9c>)
    615c:	4798      	blx	r3
    615e:	e7e5      	b.n	612c <xTaskRemoveFromEventList+0x50>
    6160:	000041e7 	.word	0x000041e7
    6164:	200037b0 	.word	0x200037b0
    6168:	000030b1 	.word	0x000030b1
    616c:	2000008c 	.word	0x2000008c
    6170:	200037b8 	.word	0x200037b8
    6174:	20003740 	.word	0x20003740
    6178:	000041a1 	.word	0x000041a1
    617c:	20003734 	.word	0x20003734
    6180:	20003834 	.word	0x20003834
    6184:	000030a1 	.word	0x000030a1
    6188:	00003c39 	.word	0x00003c39
    618c:	200037f0 	.word	0x200037f0

00006190 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    6190:	4b03      	ldr	r3, [pc, #12]	; (61a0 <vTaskInternalSetTimeOutState+0x10>)
    6192:	681b      	ldr	r3, [r3, #0]
    6194:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    6196:	4b03      	ldr	r3, [pc, #12]	; (61a4 <vTaskInternalSetTimeOutState+0x14>)
    6198:	681b      	ldr	r3, [r3, #0]
    619a:	6043      	str	r3, [r0, #4]
}
    619c:	4770      	bx	lr
    619e:	46c0      	nop			; (mov r8, r8)
    61a0:	200037ec 	.word	0x200037ec
    61a4:	20003830 	.word	0x20003830

000061a8 <xTaskCheckForTimeOut>:
{
    61a8:	b570      	push	{r4, r5, r6, lr}
    61aa:	0006      	movs	r6, r0
    61ac:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    61ae:	2800      	cmp	r0, #0
    61b0:	d01b      	beq.n	61ea <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    61b2:	2900      	cmp	r1, #0
    61b4:	d01b      	beq.n	61ee <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    61b6:	4b13      	ldr	r3, [pc, #76]	; (6204 <xTaskCheckForTimeOut+0x5c>)
    61b8:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    61ba:	4b13      	ldr	r3, [pc, #76]	; (6208 <xTaskCheckForTimeOut+0x60>)
    61bc:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    61be:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    61c0:	682b      	ldr	r3, [r5, #0]
    61c2:	1c58      	adds	r0, r3, #1
    61c4:	d01c      	beq.n	6200 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    61c6:	4811      	ldr	r0, [pc, #68]	; (620c <xTaskCheckForTimeOut+0x64>)
    61c8:	6800      	ldr	r0, [r0, #0]
    61ca:	6834      	ldr	r4, [r6, #0]
    61cc:	4284      	cmp	r4, r0
    61ce:	d002      	beq.n	61d6 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    61d0:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    61d2:	428a      	cmp	r2, r1
    61d4:	d205      	bcs.n	61e2 <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    61d6:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    61d8:	429a      	cmp	r2, r3
    61da:	d30a      	bcc.n	61f2 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    61dc:	2300      	movs	r3, #0
    61de:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    61e0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    61e2:	4b0b      	ldr	r3, [pc, #44]	; (6210 <xTaskCheckForTimeOut+0x68>)
    61e4:	4798      	blx	r3
}
    61e6:	0020      	movs	r0, r4
    61e8:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    61ea:	b672      	cpsid	i
    61ec:	e7fe      	b.n	61ec <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    61ee:	b672      	cpsid	i
    61f0:	e7fe      	b.n	61f0 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    61f2:	1a9b      	subs	r3, r3, r2
    61f4:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    61f6:	0030      	movs	r0, r6
    61f8:	4b06      	ldr	r3, [pc, #24]	; (6214 <xTaskCheckForTimeOut+0x6c>)
    61fa:	4798      	blx	r3
			xReturn = pdFALSE;
    61fc:	2400      	movs	r4, #0
    61fe:	e7f0      	b.n	61e2 <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    6200:	2400      	movs	r4, #0
    6202:	e7ee      	b.n	61e2 <xTaskCheckForTimeOut+0x3a>
    6204:	00004321 	.word	0x00004321
    6208:	20003830 	.word	0x20003830
    620c:	200037ec 	.word	0x200037ec
    6210:	00004339 	.word	0x00004339
    6214:	00006191 	.word	0x00006191

00006218 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    6218:	2201      	movs	r2, #1
    621a:	4b01      	ldr	r3, [pc, #4]	; (6220 <vTaskMissedYield+0x8>)
    621c:	601a      	str	r2, [r3, #0]
}
    621e:	4770      	bx	lr
    6220:	20003834 	.word	0x20003834

00006224 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
    6224:	2800      	cmp	r0, #0
    6226:	d001      	beq.n	622c <uxTaskGetTaskNumber+0x8>
			uxReturn = pxTCB->uxTaskNumber;
    6228:	6c00      	ldr	r0, [r0, #64]	; 0x40
	}
    622a:	4770      	bx	lr
			uxReturn = 0U;
    622c:	2000      	movs	r0, #0
		return uxReturn;
    622e:	e7fc      	b.n	622a <uxTaskGetTaskNumber+0x6>

00006230 <vTaskSetTaskNumber>:
		if( xTask != NULL )
    6230:	2800      	cmp	r0, #0
    6232:	d000      	beq.n	6236 <vTaskSetTaskNumber+0x6>
			pxTCB->uxTaskNumber = uxHandle;
    6234:	6401      	str	r1, [r0, #64]	; 0x40
	}
    6236:	4770      	bx	lr

00006238 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
    6238:	4b01      	ldr	r3, [pc, #4]	; (6240 <xTaskGetCurrentTaskHandle+0x8>)
    623a:	6818      	ldr	r0, [r3, #0]
	}
    623c:	4770      	bx	lr
    623e:	46c0      	nop			; (mov r8, r8)
    6240:	20003734 	.word	0x20003734

00006244 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    6244:	4b05      	ldr	r3, [pc, #20]	; (625c <xTaskGetSchedulerState+0x18>)
    6246:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    6248:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    624a:	2b00      	cmp	r3, #0
    624c:	d004      	beq.n	6258 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    624e:	4b04      	ldr	r3, [pc, #16]	; (6260 <xTaskGetSchedulerState+0x1c>)
    6250:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    6252:	4243      	negs	r3, r0
    6254:	4158      	adcs	r0, r3
    6256:	0040      	lsls	r0, r0, #1
	}
    6258:	4770      	bx	lr
    625a:	46c0      	nop			; (mov r8, r8)
    625c:	20003804 	.word	0x20003804
    6260:	200037b0 	.word	0x200037b0

00006264 <xTaskPriorityInherit>:
	{
    6264:	b570      	push	{r4, r5, r6, lr}
    6266:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    6268:	d100      	bne.n	626c <xTaskPriorityInherit+0x8>
    626a:	e06d      	b.n	6348 <xTaskPriorityInherit+0xe4>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    626c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    626e:	4b37      	ldr	r3, [pc, #220]	; (634c <xTaskPriorityInherit+0xe8>)
    6270:	681b      	ldr	r3, [r3, #0]
    6272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6274:	429a      	cmp	r2, r3
    6276:	d25f      	bcs.n	6338 <xTaskPriorityInherit+0xd4>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    6278:	6983      	ldr	r3, [r0, #24]
    627a:	2b00      	cmp	r3, #0
    627c:	db05      	blt.n	628a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    627e:	4b33      	ldr	r3, [pc, #204]	; (634c <xTaskPriorityInherit+0xe8>)
    6280:	681b      	ldr	r3, [r3, #0]
    6282:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    6284:	2305      	movs	r3, #5
    6286:	1a5b      	subs	r3, r3, r1
    6288:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    628a:	0093      	lsls	r3, r2, #2
    628c:	189b      	adds	r3, r3, r2
    628e:	009b      	lsls	r3, r3, #2
    6290:	4a2f      	ldr	r2, [pc, #188]	; (6350 <xTaskPriorityInherit+0xec>)
    6292:	18d3      	adds	r3, r2, r3
    6294:	6962      	ldr	r2, [r4, #20]
    6296:	429a      	cmp	r2, r3
    6298:	d028      	beq.n	62ec <xTaskPriorityInherit+0x88>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    629a:	4b2c      	ldr	r3, [pc, #176]	; (634c <xTaskPriorityInherit+0xe8>)
    629c:	681b      	ldr	r3, [r3, #0]
    629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    62a0:	62e3      	str	r3, [r4, #44]	; 0x2c
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    62a2:	0020      	movs	r0, r4
    62a4:	4b2b      	ldr	r3, [pc, #172]	; (6354 <xTaskPriorityInherit+0xf0>)
    62a6:	4798      	blx	r3
    62a8:	0003      	movs	r3, r0
    62aa:	4a2b      	ldr	r2, [pc, #172]	; (6358 <xTaskPriorityInherit+0xf4>)
    62ac:	8812      	ldrh	r2, [r2, #0]
				xReturn = pdTRUE;
    62ae:	2001      	movs	r0, #1
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    62b0:	421a      	tst	r2, r3
    62b2:	d048      	beq.n	6346 <xTaskPriorityInherit+0xe2>
    62b4:	0020      	movs	r0, r4
    62b6:	4d29      	ldr	r5, [pc, #164]	; (635c <xTaskPriorityInherit+0xf8>)
    62b8:	47a8      	blx	r5
    62ba:	0006      	movs	r6, r0
    62bc:	0020      	movs	r0, r4
    62be:	47a8      	blx	r5
    62c0:	b2c1      	uxtb	r1, r0
    62c2:	2003      	movs	r0, #3
    62c4:	4b26      	ldr	r3, [pc, #152]	; (6360 <xTaskPriorityInherit+0xfc>)
    62c6:	4798      	blx	r3
    62c8:	0003      	movs	r3, r0
    62ca:	b2f2      	uxtb	r2, r6
    62cc:	2103      	movs	r1, #3
    62ce:	208e      	movs	r0, #142	; 0x8e
    62d0:	4e24      	ldr	r6, [pc, #144]	; (6364 <xTaskPriorityInherit+0x100>)
    62d2:	47b0      	blx	r6
    62d4:	0020      	movs	r0, r4
    62d6:	47a8      	blx	r5
    62d8:	4b1c      	ldr	r3, [pc, #112]	; (634c <xTaskPriorityInherit+0xe8>)
    62da:	681b      	ldr	r3, [r3, #0]
    62dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    62de:	b2d2      	uxtb	r2, r2
    62e0:	b2c1      	uxtb	r1, r0
    62e2:	2003      	movs	r0, #3
    62e4:	4b20      	ldr	r3, [pc, #128]	; (6368 <xTaskPriorityInherit+0x104>)
    62e6:	4798      	blx	r3
				xReturn = pdTRUE;
    62e8:	2001      	movs	r0, #1
    62ea:	e02c      	b.n	6346 <xTaskPriorityInherit+0xe2>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    62ec:	1d25      	adds	r5, r4, #4
    62ee:	0028      	movs	r0, r5
    62f0:	4b1e      	ldr	r3, [pc, #120]	; (636c <xTaskPriorityInherit+0x108>)
    62f2:	4798      	blx	r3
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    62f4:	4b15      	ldr	r3, [pc, #84]	; (634c <xTaskPriorityInherit+0xe8>)
    62f6:	681b      	ldr	r3, [r3, #0]
    62f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    62fa:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    62fc:	0020      	movs	r0, r4
    62fe:	4b15      	ldr	r3, [pc, #84]	; (6354 <xTaskPriorityInherit+0xf0>)
    6300:	4798      	blx	r3
    6302:	4b15      	ldr	r3, [pc, #84]	; (6358 <xTaskPriorityInherit+0xf4>)
    6304:	881b      	ldrh	r3, [r3, #0]
    6306:	4203      	tst	r3, r0
    6308:	d10f      	bne.n	632a <xTaskPriorityInherit+0xc6>
    630a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    630c:	4a18      	ldr	r2, [pc, #96]	; (6370 <xTaskPriorityInherit+0x10c>)
    630e:	6812      	ldr	r2, [r2, #0]
    6310:	4293      	cmp	r3, r2
    6312:	d901      	bls.n	6318 <xTaskPriorityInherit+0xb4>
    6314:	4a16      	ldr	r2, [pc, #88]	; (6370 <xTaskPriorityInherit+0x10c>)
    6316:	6013      	str	r3, [r2, #0]
    6318:	0098      	lsls	r0, r3, #2
    631a:	18c0      	adds	r0, r0, r3
    631c:	0080      	lsls	r0, r0, #2
    631e:	4b0c      	ldr	r3, [pc, #48]	; (6350 <xTaskPriorityInherit+0xec>)
    6320:	1818      	adds	r0, r3, r0
    6322:	0029      	movs	r1, r5
    6324:	4b13      	ldr	r3, [pc, #76]	; (6374 <xTaskPriorityInherit+0x110>)
    6326:	4798      	blx	r3
    6328:	e7bb      	b.n	62a2 <xTaskPriorityInherit+0x3e>
    632a:	0020      	movs	r0, r4
    632c:	4b0b      	ldr	r3, [pc, #44]	; (635c <xTaskPriorityInherit+0xf8>)
    632e:	4798      	blx	r3
    6330:	b2c0      	uxtb	r0, r0
    6332:	4b11      	ldr	r3, [pc, #68]	; (6378 <xTaskPriorityInherit+0x114>)
    6334:	4798      	blx	r3
    6336:	e7e8      	b.n	630a <xTaskPriorityInherit+0xa6>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    6338:	4b04      	ldr	r3, [pc, #16]	; (634c <xTaskPriorityInherit+0xe8>)
    633a:	681b      	ldr	r3, [r3, #0]
    633c:	6c40      	ldr	r0, [r0, #68]	; 0x44
    633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6340:	4298      	cmp	r0, r3
    6342:	4180      	sbcs	r0, r0
    6344:	4240      	negs	r0, r0
	}
    6346:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    6348:	2000      	movs	r0, #0
    634a:	e7fc      	b.n	6346 <xTaskPriorityInherit+0xe2>
    634c:	20003734 	.word	0x20003734
    6350:	20003740 	.word	0x20003740
    6354:	000030b1 	.word	0x000030b1
    6358:	2000008c 	.word	0x2000008c
    635c:	000030a1 	.word	0x000030a1
    6360:	00003819 	.word	0x00003819
    6364:	00003e65 	.word	0x00003e65
    6368:	000037c1 	.word	0x000037c1
    636c:	000041e7 	.word	0x000041e7
    6370:	200037b8 	.word	0x200037b8
    6374:	000041a1 	.word	0x000041a1
    6378:	00003c39 	.word	0x00003c39

0000637c <xTaskPriorityDisinherit>:
	{
    637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    637e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    6380:	d05a      	beq.n	6438 <xTaskPriorityDisinherit+0xbc>
			configASSERT( pxTCB == pxCurrentTCB );
    6382:	4b2f      	ldr	r3, [pc, #188]	; (6440 <xTaskPriorityDisinherit+0xc4>)
    6384:	681b      	ldr	r3, [r3, #0]
    6386:	4298      	cmp	r0, r3
    6388:	d001      	beq.n	638e <xTaskPriorityDisinherit+0x12>
    638a:	b672      	cpsid	i
    638c:	e7fe      	b.n	638c <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    638e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    6390:	2b00      	cmp	r3, #0
    6392:	d101      	bne.n	6398 <xTaskPriorityDisinherit+0x1c>
    6394:	b672      	cpsid	i
    6396:	e7fe      	b.n	6396 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    6398:	3b01      	subs	r3, #1
    639a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    639c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    639e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    63a0:	428a      	cmp	r2, r1
    63a2:	d04b      	beq.n	643c <xTaskPriorityDisinherit+0xc0>
	BaseType_t xReturn = pdFALSE;
    63a4:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    63a6:	2b00      	cmp	r3, #0
    63a8:	d145      	bne.n	6436 <xTaskPriorityDisinherit+0xba>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    63aa:	1d25      	adds	r5, r4, #4
    63ac:	0028      	movs	r0, r5
    63ae:	4b25      	ldr	r3, [pc, #148]	; (6444 <xTaskPriorityDisinherit+0xc8>)
    63b0:	4798      	blx	r3
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    63b2:	0020      	movs	r0, r4
    63b4:	4b24      	ldr	r3, [pc, #144]	; (6448 <xTaskPriorityDisinherit+0xcc>)
    63b6:	4798      	blx	r3
    63b8:	4b24      	ldr	r3, [pc, #144]	; (644c <xTaskPriorityDisinherit+0xd0>)
    63ba:	881b      	ldrh	r3, [r3, #0]
    63bc:	4203      	tst	r3, r0
    63be:	d018      	beq.n	63f2 <xTaskPriorityDisinherit+0x76>
    63c0:	0020      	movs	r0, r4
    63c2:	4e23      	ldr	r6, [pc, #140]	; (6450 <xTaskPriorityDisinherit+0xd4>)
    63c4:	47b0      	blx	r6
    63c6:	0007      	movs	r7, r0
    63c8:	0020      	movs	r0, r4
    63ca:	47b0      	blx	r6
    63cc:	b2c1      	uxtb	r1, r0
    63ce:	2003      	movs	r0, #3
    63d0:	4b20      	ldr	r3, [pc, #128]	; (6454 <xTaskPriorityDisinherit+0xd8>)
    63d2:	4798      	blx	r3
    63d4:	0003      	movs	r3, r0
    63d6:	b2fa      	uxtb	r2, r7
    63d8:	2103      	movs	r1, #3
    63da:	208f      	movs	r0, #143	; 0x8f
    63dc:	4f1e      	ldr	r7, [pc, #120]	; (6458 <xTaskPriorityDisinherit+0xdc>)
    63de:	47b8      	blx	r7
    63e0:	0020      	movs	r0, r4
    63e2:	47b0      	blx	r6
    63e4:	2344      	movs	r3, #68	; 0x44
    63e6:	18e3      	adds	r3, r4, r3
    63e8:	781a      	ldrb	r2, [r3, #0]
    63ea:	b2c1      	uxtb	r1, r0
    63ec:	2003      	movs	r0, #3
    63ee:	4b1b      	ldr	r3, [pc, #108]	; (645c <xTaskPriorityDisinherit+0xe0>)
    63f0:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    63f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
    63f4:	62e2      	str	r2, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    63f6:	2305      	movs	r3, #5
    63f8:	1a9b      	subs	r3, r3, r2
    63fa:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    63fc:	0020      	movs	r0, r4
    63fe:	4b12      	ldr	r3, [pc, #72]	; (6448 <xTaskPriorityDisinherit+0xcc>)
    6400:	4798      	blx	r3
    6402:	4b12      	ldr	r3, [pc, #72]	; (644c <xTaskPriorityDisinherit+0xd0>)
    6404:	881b      	ldrh	r3, [r3, #0]
    6406:	4203      	tst	r3, r0
    6408:	d005      	beq.n	6416 <xTaskPriorityDisinherit+0x9a>
    640a:	0020      	movs	r0, r4
    640c:	4b10      	ldr	r3, [pc, #64]	; (6450 <xTaskPriorityDisinherit+0xd4>)
    640e:	4798      	blx	r3
    6410:	b2c0      	uxtb	r0, r0
    6412:	4b13      	ldr	r3, [pc, #76]	; (6460 <xTaskPriorityDisinherit+0xe4>)
    6414:	4798      	blx	r3
    6416:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6418:	4a12      	ldr	r2, [pc, #72]	; (6464 <xTaskPriorityDisinherit+0xe8>)
    641a:	6812      	ldr	r2, [r2, #0]
    641c:	4293      	cmp	r3, r2
    641e:	d901      	bls.n	6424 <xTaskPriorityDisinherit+0xa8>
    6420:	4a10      	ldr	r2, [pc, #64]	; (6464 <xTaskPriorityDisinherit+0xe8>)
    6422:	6013      	str	r3, [r2, #0]
    6424:	0098      	lsls	r0, r3, #2
    6426:	18c0      	adds	r0, r0, r3
    6428:	0080      	lsls	r0, r0, #2
    642a:	4b0f      	ldr	r3, [pc, #60]	; (6468 <xTaskPriorityDisinherit+0xec>)
    642c:	1818      	adds	r0, r3, r0
    642e:	0029      	movs	r1, r5
    6430:	4b0e      	ldr	r3, [pc, #56]	; (646c <xTaskPriorityDisinherit+0xf0>)
    6432:	4798      	blx	r3
					xReturn = pdTRUE;
    6434:	2001      	movs	r0, #1
	}
    6436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
    6438:	2000      	movs	r0, #0
    643a:	e7fc      	b.n	6436 <xTaskPriorityDisinherit+0xba>
    643c:	2000      	movs	r0, #0
    643e:	e7fa      	b.n	6436 <xTaskPriorityDisinherit+0xba>
    6440:	20003734 	.word	0x20003734
    6444:	000041e7 	.word	0x000041e7
    6448:	000030b1 	.word	0x000030b1
    644c:	2000008c 	.word	0x2000008c
    6450:	000030a1 	.word	0x000030a1
    6454:	00003819 	.word	0x00003819
    6458:	00003e65 	.word	0x00003e65
    645c:	000037c1 	.word	0x000037c1
    6460:	00003c39 	.word	0x00003c39
    6464:	200037b8 	.word	0x200037b8
    6468:	20003740 	.word	0x20003740
    646c:	000041a1 	.word	0x000041a1

00006470 <vTaskPriorityDisinheritAfterTimeout>:
	{
    6470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6472:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    6474:	d00d      	beq.n	6492 <vTaskPriorityDisinheritAfterTimeout+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    6476:	6c83      	ldr	r3, [r0, #72]	; 0x48
    6478:	2b00      	cmp	r3, #0
    647a:	d101      	bne.n	6480 <vTaskPriorityDisinheritAfterTimeout+0x10>
    647c:	b672      	cpsid	i
    647e:	e7fe      	b.n	647e <vTaskPriorityDisinheritAfterTimeout+0xe>
    6480:	6c45      	ldr	r5, [r0, #68]	; 0x44
    6482:	428d      	cmp	r5, r1
    6484:	d200      	bcs.n	6488 <vTaskPriorityDisinheritAfterTimeout+0x18>
    6486:	000d      	movs	r5, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
    6488:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    648a:	42aa      	cmp	r2, r5
    648c:	d001      	beq.n	6492 <vTaskPriorityDisinheritAfterTimeout+0x22>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    648e:	2b01      	cmp	r3, #1
    6490:	d000      	beq.n	6494 <vTaskPriorityDisinheritAfterTimeout+0x24>
	}
    6492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					configASSERT( pxTCB != pxCurrentTCB );
    6494:	4b2b      	ldr	r3, [pc, #172]	; (6544 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
    6496:	681b      	ldr	r3, [r3, #0]
    6498:	429c      	cmp	r4, r3
    649a:	d101      	bne.n	64a0 <vTaskPriorityDisinheritAfterTimeout+0x30>
    649c:	b672      	cpsid	i
    649e:	e7fe      	b.n	649e <vTaskPriorityDisinheritAfterTimeout+0x2e>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    64a0:	0020      	movs	r0, r4
    64a2:	4b29      	ldr	r3, [pc, #164]	; (6548 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
    64a4:	4798      	blx	r3
    64a6:	4b29      	ldr	r3, [pc, #164]	; (654c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    64a8:	881b      	ldrh	r3, [r3, #0]
    64aa:	4203      	tst	r3, r0
    64ac:	d018      	beq.n	64e0 <vTaskPriorityDisinheritAfterTimeout+0x70>
    64ae:	0020      	movs	r0, r4
    64b0:	4e27      	ldr	r6, [pc, #156]	; (6550 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    64b2:	47b0      	blx	r6
    64b4:	0007      	movs	r7, r0
    64b6:	0020      	movs	r0, r4
    64b8:	47b0      	blx	r6
    64ba:	b2c1      	uxtb	r1, r0
    64bc:	2003      	movs	r0, #3
    64be:	4b25      	ldr	r3, [pc, #148]	; (6554 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
    64c0:	4798      	blx	r3
    64c2:	0003      	movs	r3, r0
    64c4:	b2fa      	uxtb	r2, r7
    64c6:	2103      	movs	r1, #3
    64c8:	208f      	movs	r0, #143	; 0x8f
    64ca:	4f23      	ldr	r7, [pc, #140]	; (6558 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
    64cc:	47b8      	blx	r7
    64ce:	0020      	movs	r0, r4
    64d0:	47b0      	blx	r6
    64d2:	2344      	movs	r3, #68	; 0x44
    64d4:	18e3      	adds	r3, r4, r3
    64d6:	781a      	ldrb	r2, [r3, #0]
    64d8:	b2c1      	uxtb	r1, r0
    64da:	2003      	movs	r0, #3
    64dc:	4b1f      	ldr	r3, [pc, #124]	; (655c <vTaskPriorityDisinheritAfterTimeout+0xec>)
    64de:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    64e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					pxTCB->uxPriority = uxPriorityToUse;
    64e2:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    64e4:	69a3      	ldr	r3, [r4, #24]
    64e6:	2b00      	cmp	r3, #0
    64e8:	db02      	blt.n	64f0 <vTaskPriorityDisinheritAfterTimeout+0x80>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    64ea:	2205      	movs	r2, #5
    64ec:	1b55      	subs	r5, r2, r5
    64ee:	61a5      	str	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    64f0:	008b      	lsls	r3, r1, #2
    64f2:	185b      	adds	r3, r3, r1
    64f4:	009b      	lsls	r3, r3, #2
    64f6:	4a1a      	ldr	r2, [pc, #104]	; (6560 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
    64f8:	18d3      	adds	r3, r2, r3
    64fa:	6962      	ldr	r2, [r4, #20]
    64fc:	429a      	cmp	r2, r3
    64fe:	d1c8      	bne.n	6492 <vTaskPriorityDisinheritAfterTimeout+0x22>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    6500:	1d25      	adds	r5, r4, #4
    6502:	0028      	movs	r0, r5
    6504:	4b17      	ldr	r3, [pc, #92]	; (6564 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
    6506:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
    6508:	0020      	movs	r0, r4
    650a:	4b0f      	ldr	r3, [pc, #60]	; (6548 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
    650c:	4798      	blx	r3
    650e:	4b0f      	ldr	r3, [pc, #60]	; (654c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    6510:	881b      	ldrh	r3, [r3, #0]
    6512:	4203      	tst	r3, r0
    6514:	d005      	beq.n	6522 <vTaskPriorityDisinheritAfterTimeout+0xb2>
    6516:	0020      	movs	r0, r4
    6518:	4b0d      	ldr	r3, [pc, #52]	; (6550 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    651a:	4798      	blx	r3
    651c:	b2c0      	uxtb	r0, r0
    651e:	4b12      	ldr	r3, [pc, #72]	; (6568 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
    6520:	4798      	blx	r3
    6522:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6524:	4a11      	ldr	r2, [pc, #68]	; (656c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
    6526:	6812      	ldr	r2, [r2, #0]
    6528:	4293      	cmp	r3, r2
    652a:	d901      	bls.n	6530 <vTaskPriorityDisinheritAfterTimeout+0xc0>
    652c:	4a0f      	ldr	r2, [pc, #60]	; (656c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
    652e:	6013      	str	r3, [r2, #0]
    6530:	0098      	lsls	r0, r3, #2
    6532:	18c0      	adds	r0, r0, r3
    6534:	0080      	lsls	r0, r0, #2
    6536:	4b0a      	ldr	r3, [pc, #40]	; (6560 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
    6538:	1818      	adds	r0, r3, r0
    653a:	0029      	movs	r1, r5
    653c:	4b0c      	ldr	r3, [pc, #48]	; (6570 <vTaskPriorityDisinheritAfterTimeout+0x100>)
    653e:	4798      	blx	r3
	}
    6540:	e7a7      	b.n	6492 <vTaskPriorityDisinheritAfterTimeout+0x22>
    6542:	46c0      	nop			; (mov r8, r8)
    6544:	20003734 	.word	0x20003734
    6548:	000030b1 	.word	0x000030b1
    654c:	2000008c 	.word	0x2000008c
    6550:	000030a1 	.word	0x000030a1
    6554:	00003819 	.word	0x00003819
    6558:	00003e65 	.word	0x00003e65
    655c:	000037c1 	.word	0x000037c1
    6560:	20003740 	.word	0x20003740
    6564:	000041e7 	.word	0x000041e7
    6568:	00003c39 	.word	0x00003c39
    656c:	200037b8 	.word	0x200037b8
    6570:	000041a1 	.word	0x000041a1

00006574 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
    6574:	4b05      	ldr	r3, [pc, #20]	; (658c <pvTaskIncrementMutexHeldCount+0x18>)
    6576:	681b      	ldr	r3, [r3, #0]
    6578:	2b00      	cmp	r3, #0
    657a:	d004      	beq.n	6586 <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
    657c:	4b03      	ldr	r3, [pc, #12]	; (658c <pvTaskIncrementMutexHeldCount+0x18>)
    657e:	681a      	ldr	r2, [r3, #0]
    6580:	6c93      	ldr	r3, [r2, #72]	; 0x48
    6582:	3301      	adds	r3, #1
    6584:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
    6586:	4b01      	ldr	r3, [pc, #4]	; (658c <pvTaskIncrementMutexHeldCount+0x18>)
    6588:	6818      	ldr	r0, [r3, #0]
	}
    658a:	4770      	bx	lr
    658c:	20003734 	.word	0x20003734

00006590 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    6590:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    6592:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    6594:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    6596:	4291      	cmp	r1, r2
    6598:	d80b      	bhi.n	65b2 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    659a:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    659c:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    659e:	6983      	ldr	r3, [r0, #24]
    65a0:	429a      	cmp	r2, r3
    65a2:	d211      	bcs.n	65c8 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    65a4:	1d01      	adds	r1, r0, #4
    65a6:	4b09      	ldr	r3, [pc, #36]	; (65cc <prvInsertTimerInActiveList+0x3c>)
    65a8:	6818      	ldr	r0, [r3, #0]
    65aa:	4b09      	ldr	r3, [pc, #36]	; (65d0 <prvInsertTimerInActiveList+0x40>)
    65ac:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    65ae:	2400      	movs	r4, #0
    65b0:	e00a      	b.n	65c8 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    65b2:	429a      	cmp	r2, r3
    65b4:	d202      	bcs.n	65bc <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    65b6:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    65b8:	4299      	cmp	r1, r3
    65ba:	d205      	bcs.n	65c8 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    65bc:	1d01      	adds	r1, r0, #4
    65be:	4b05      	ldr	r3, [pc, #20]	; (65d4 <prvInsertTimerInActiveList+0x44>)
    65c0:	6818      	ldr	r0, [r3, #0]
    65c2:	4b03      	ldr	r3, [pc, #12]	; (65d0 <prvInsertTimerInActiveList+0x40>)
    65c4:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    65c6:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    65c8:	0020      	movs	r0, r4
    65ca:	bd10      	pop	{r4, pc}
    65cc:	2000383c 	.word	0x2000383c
    65d0:	000041b9 	.word	0x000041b9
    65d4:	20003838 	.word	0x20003838

000065d8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    65d8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    65da:	4b0e      	ldr	r3, [pc, #56]	; (6614 <prvCheckForValidListAndQueue+0x3c>)
    65dc:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    65de:	4b0e      	ldr	r3, [pc, #56]	; (6618 <prvCheckForValidListAndQueue+0x40>)
    65e0:	681b      	ldr	r3, [r3, #0]
    65e2:	2b00      	cmp	r3, #0
    65e4:	d002      	beq.n	65ec <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    65e6:	4b0d      	ldr	r3, [pc, #52]	; (661c <prvCheckForValidListAndQueue+0x44>)
    65e8:	4798      	blx	r3
}
    65ea:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    65ec:	4d0c      	ldr	r5, [pc, #48]	; (6620 <prvCheckForValidListAndQueue+0x48>)
    65ee:	0028      	movs	r0, r5
    65f0:	4e0c      	ldr	r6, [pc, #48]	; (6624 <prvCheckForValidListAndQueue+0x4c>)
    65f2:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    65f4:	4c0c      	ldr	r4, [pc, #48]	; (6628 <prvCheckForValidListAndQueue+0x50>)
    65f6:	0020      	movs	r0, r4
    65f8:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    65fa:	4b0c      	ldr	r3, [pc, #48]	; (662c <prvCheckForValidListAndQueue+0x54>)
    65fc:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    65fe:	4b0c      	ldr	r3, [pc, #48]	; (6630 <prvCheckForValidListAndQueue+0x58>)
    6600:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    6602:	2200      	movs	r2, #0
    6604:	210c      	movs	r1, #12
    6606:	2002      	movs	r0, #2
    6608:	4b0a      	ldr	r3, [pc, #40]	; (6634 <prvCheckForValidListAndQueue+0x5c>)
    660a:	4798      	blx	r3
    660c:	4b02      	ldr	r3, [pc, #8]	; (6618 <prvCheckForValidListAndQueue+0x40>)
    660e:	6018      	str	r0, [r3, #0]
    6610:	e7e9      	b.n	65e6 <prvCheckForValidListAndQueue+0xe>
    6612:	46c0      	nop			; (mov r8, r8)
    6614:	00004321 	.word	0x00004321
    6618:	2000386c 	.word	0x2000386c
    661c:	00004339 	.word	0x00004339
    6620:	20003840 	.word	0x20003840
    6624:	00004185 	.word	0x00004185
    6628:	20003854 	.word	0x20003854
    662c:	20003838 	.word	0x20003838
    6630:	2000383c 	.word	0x2000383c
    6634:	00004799 	.word	0x00004799

00006638 <xTimerCreateTimerTask>:
{
    6638:	b510      	push	{r4, lr}
    663a:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    663c:	4b0a      	ldr	r3, [pc, #40]	; (6668 <xTimerCreateTimerTask+0x30>)
    663e:	4798      	blx	r3
	if( xTimerQueue != NULL )
    6640:	4b0a      	ldr	r3, [pc, #40]	; (666c <xTimerCreateTimerTask+0x34>)
    6642:	681b      	ldr	r3, [r3, #0]
    6644:	2b00      	cmp	r3, #0
    6646:	d00d      	beq.n	6664 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
    6648:	4b09      	ldr	r3, [pc, #36]	; (6670 <xTimerCreateTimerTask+0x38>)
    664a:	9301      	str	r3, [sp, #4]
    664c:	2302      	movs	r3, #2
    664e:	9300      	str	r3, [sp, #0]
    6650:	2300      	movs	r3, #0
    6652:	2280      	movs	r2, #128	; 0x80
    6654:	4907      	ldr	r1, [pc, #28]	; (6674 <xTimerCreateTimerTask+0x3c>)
    6656:	4808      	ldr	r0, [pc, #32]	; (6678 <xTimerCreateTimerTask+0x40>)
    6658:	4c08      	ldr	r4, [pc, #32]	; (667c <xTimerCreateTimerTask+0x44>)
    665a:	47a0      	blx	r4
	configASSERT( xReturn );
    665c:	2800      	cmp	r0, #0
    665e:	d001      	beq.n	6664 <xTimerCreateTimerTask+0x2c>
}
    6660:	b002      	add	sp, #8
    6662:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    6664:	b672      	cpsid	i
    6666:	e7fe      	b.n	6666 <xTimerCreateTimerTask+0x2e>
    6668:	000065d9 	.word	0x000065d9
    666c:	2000386c 	.word	0x2000386c
    6670:	20003870 	.word	0x20003870
    6674:	0000e9b4 	.word	0x0000e9b4
    6678:	000067a5 	.word	0x000067a5
    667c:	00005771 	.word	0x00005771

00006680 <xTimerGenericCommand>:
{
    6680:	b530      	push	{r4, r5, lr}
    6682:	b085      	sub	sp, #20
    6684:	0004      	movs	r4, r0
    6686:	001d      	movs	r5, r3
	configASSERT( xTimer );
    6688:	2800      	cmp	r0, #0
    668a:	d014      	beq.n	66b6 <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    668c:	4b13      	ldr	r3, [pc, #76]	; (66dc <xTimerGenericCommand+0x5c>)
    668e:	6818      	ldr	r0, [r3, #0]
    6690:	2800      	cmp	r0, #0
    6692:	d021      	beq.n	66d8 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    6694:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    6696:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    6698:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    669a:	2905      	cmp	r1, #5
    669c:	dc15      	bgt.n	66ca <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    669e:	4b10      	ldr	r3, [pc, #64]	; (66e0 <xTimerGenericCommand+0x60>)
    66a0:	4798      	blx	r3
    66a2:	2802      	cmp	r0, #2
    66a4:	d009      	beq.n	66ba <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    66a6:	4b0d      	ldr	r3, [pc, #52]	; (66dc <xTimerGenericCommand+0x5c>)
    66a8:	6818      	ldr	r0, [r3, #0]
    66aa:	2300      	movs	r3, #0
    66ac:	2200      	movs	r2, #0
    66ae:	a901      	add	r1, sp, #4
    66b0:	4c0c      	ldr	r4, [pc, #48]	; (66e4 <xTimerGenericCommand+0x64>)
    66b2:	47a0      	blx	r4
    66b4:	e00e      	b.n	66d4 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    66b6:	b672      	cpsid	i
    66b8:	e7fe      	b.n	66b8 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    66ba:	4b08      	ldr	r3, [pc, #32]	; (66dc <xTimerGenericCommand+0x5c>)
    66bc:	6818      	ldr	r0, [r3, #0]
    66be:	2300      	movs	r3, #0
    66c0:	9a08      	ldr	r2, [sp, #32]
    66c2:	a901      	add	r1, sp, #4
    66c4:	4c07      	ldr	r4, [pc, #28]	; (66e4 <xTimerGenericCommand+0x64>)
    66c6:	47a0      	blx	r4
    66c8:	e004      	b.n	66d4 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    66ca:	2300      	movs	r3, #0
    66cc:	002a      	movs	r2, r5
    66ce:	a901      	add	r1, sp, #4
    66d0:	4c05      	ldr	r4, [pc, #20]	; (66e8 <xTimerGenericCommand+0x68>)
    66d2:	47a0      	blx	r4
}
    66d4:	b005      	add	sp, #20
    66d6:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    66d8:	2000      	movs	r0, #0
	return xReturn;
    66da:	e7fb      	b.n	66d4 <xTimerGenericCommand+0x54>
    66dc:	2000386c 	.word	0x2000386c
    66e0:	00006245 	.word	0x00006245
    66e4:	000048d5 	.word	0x000048d5
    66e8:	00004c29 	.word	0x00004c29

000066ec <prvSampleTimeNow>:
{
    66ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    66ee:	46d6      	mov	lr, sl
    66f0:	464f      	mov	r7, r9
    66f2:	4646      	mov	r6, r8
    66f4:	b5c0      	push	{r6, r7, lr}
    66f6:	b082      	sub	sp, #8
    66f8:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    66fa:	4b23      	ldr	r3, [pc, #140]	; (6788 <prvSampleTimeNow+0x9c>)
    66fc:	4798      	blx	r3
    66fe:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    6700:	4b22      	ldr	r3, [pc, #136]	; (678c <prvSampleTimeNow+0xa0>)
    6702:	681b      	ldr	r3, [r3, #0]
    6704:	4298      	cmp	r0, r3
    6706:	d317      	bcc.n	6738 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    6708:	2300      	movs	r3, #0
    670a:	4642      	mov	r2, r8
    670c:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    670e:	4b1f      	ldr	r3, [pc, #124]	; (678c <prvSampleTimeNow+0xa0>)
    6710:	4652      	mov	r2, sl
    6712:	601a      	str	r2, [r3, #0]
}
    6714:	4650      	mov	r0, sl
    6716:	b002      	add	sp, #8
    6718:	bc1c      	pop	{r2, r3, r4}
    671a:	4690      	mov	r8, r2
    671c:	4699      	mov	r9, r3
    671e:	46a2      	mov	sl, r4
    6720:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    6722:	2300      	movs	r3, #0
    6724:	9300      	str	r3, [sp, #0]
    6726:	003a      	movs	r2, r7
    6728:	2100      	movs	r1, #0
    672a:	0020      	movs	r0, r4
    672c:	4c18      	ldr	r4, [pc, #96]	; (6790 <prvSampleTimeNow+0xa4>)
    672e:	47a0      	blx	r4
				configASSERT( xResult );
    6730:	2800      	cmp	r0, #0
    6732:	d104      	bne.n	673e <prvSampleTimeNow+0x52>
    6734:	b672      	cpsid	i
    6736:	e7fe      	b.n	6736 <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    6738:	4d16      	ldr	r5, [pc, #88]	; (6794 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    673a:	4b17      	ldr	r3, [pc, #92]	; (6798 <prvSampleTimeNow+0xac>)
    673c:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    673e:	682b      	ldr	r3, [r5, #0]
    6740:	681a      	ldr	r2, [r3, #0]
    6742:	2a00      	cmp	r2, #0
    6744:	d017      	beq.n	6776 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    6746:	68db      	ldr	r3, [r3, #12]
    6748:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    674a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    674c:	1d26      	adds	r6, r4, #4
    674e:	0030      	movs	r0, r6
    6750:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    6752:	0020      	movs	r0, r4
    6754:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6756:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    6758:	69e3      	ldr	r3, [r4, #28]
    675a:	2b01      	cmp	r3, #1
    675c:	d1ef      	bne.n	673e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    675e:	69a3      	ldr	r3, [r4, #24]
    6760:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    6762:	429f      	cmp	r7, r3
    6764:	d2dd      	bcs.n	6722 <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    6766:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    6768:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    676a:	4b0a      	ldr	r3, [pc, #40]	; (6794 <prvSampleTimeNow+0xa8>)
    676c:	6818      	ldr	r0, [r3, #0]
    676e:	0031      	movs	r1, r6
    6770:	4b0a      	ldr	r3, [pc, #40]	; (679c <prvSampleTimeNow+0xb0>)
    6772:	4798      	blx	r3
    6774:	e7e3      	b.n	673e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    6776:	4a0a      	ldr	r2, [pc, #40]	; (67a0 <prvSampleTimeNow+0xb4>)
    6778:	4906      	ldr	r1, [pc, #24]	; (6794 <prvSampleTimeNow+0xa8>)
    677a:	6810      	ldr	r0, [r2, #0]
    677c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    677e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    6780:	2301      	movs	r3, #1
    6782:	4642      	mov	r2, r8
    6784:	6013      	str	r3, [r2, #0]
    6786:	e7c2      	b.n	670e <prvSampleTimeNow+0x22>
    6788:	00005a95 	.word	0x00005a95
    678c:	20003868 	.word	0x20003868
    6790:	00006681 	.word	0x00006681
    6794:	20003838 	.word	0x20003838
    6798:	000041e7 	.word	0x000041e7
    679c:	000041b9 	.word	0x000041b9
    67a0:	2000383c 	.word	0x2000383c

000067a4 <prvTimerTask>:
{
    67a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    67a6:	b089      	sub	sp, #36	; 0x24
		vApplicationDaemonTaskStartupHook();
    67a8:	4b53      	ldr	r3, [pc, #332]	; (68f8 <prvTimerTask+0x154>)
    67aa:	4798      	blx	r3
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    67ac:	4f53      	ldr	r7, [pc, #332]	; (68fc <prvTimerTask+0x158>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    67ae:	4b54      	ldr	r3, [pc, #336]	; (6900 <prvTimerTask+0x15c>)
    67b0:	681b      	ldr	r3, [r3, #0]
    67b2:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    67b4:	2a00      	cmp	r2, #0
    67b6:	d00e      	beq.n	67d6 <prvTimerTask+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    67b8:	68db      	ldr	r3, [r3, #12]
    67ba:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    67bc:	4b51      	ldr	r3, [pc, #324]	; (6904 <prvTimerTask+0x160>)
    67be:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    67c0:	a805      	add	r0, sp, #20
    67c2:	4b51      	ldr	r3, [pc, #324]	; (6908 <prvTimerTask+0x164>)
    67c4:	4798      	blx	r3
    67c6:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    67c8:	9b05      	ldr	r3, [sp, #20]
    67ca:	2b00      	cmp	r3, #0
    67cc:	d15f      	bne.n	688e <prvTimerTask+0xea>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    67ce:	4284      	cmp	r4, r0
    67d0:	d936      	bls.n	6840 <prvTimerTask+0x9c>
    67d2:	2200      	movs	r2, #0
    67d4:	e00f      	b.n	67f6 <prvTimerTask+0x52>
	vTaskSuspendAll();
    67d6:	4b4b      	ldr	r3, [pc, #300]	; (6904 <prvTimerTask+0x160>)
    67d8:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    67da:	a805      	add	r0, sp, #20
    67dc:	4b4a      	ldr	r3, [pc, #296]	; (6908 <prvTimerTask+0x164>)
    67de:	4798      	blx	r3
    67e0:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    67e2:	9b05      	ldr	r3, [sp, #20]
    67e4:	2b00      	cmp	r3, #0
    67e6:	d152      	bne.n	688e <prvTimerTask+0xea>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    67e8:	4b48      	ldr	r3, [pc, #288]	; (690c <prvTimerTask+0x168>)
    67ea:	681b      	ldr	r3, [r3, #0]
    67ec:	681b      	ldr	r3, [r3, #0]
    67ee:	425a      	negs	r2, r3
    67f0:	415a      	adcs	r2, r3
    67f2:	b2d2      	uxtb	r2, r2
    67f4:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    67f6:	1b61      	subs	r1, r4, r5
    67f8:	4b45      	ldr	r3, [pc, #276]	; (6910 <prvTimerTask+0x16c>)
    67fa:	6818      	ldr	r0, [r3, #0]
    67fc:	4b45      	ldr	r3, [pc, #276]	; (6914 <prvTimerTask+0x170>)
    67fe:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    6800:	4b45      	ldr	r3, [pc, #276]	; (6918 <prvTimerTask+0x174>)
    6802:	4798      	blx	r3
    6804:	2800      	cmp	r0, #0
    6806:	d03f      	beq.n	6888 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    6808:	4d41      	ldr	r5, [pc, #260]	; (6910 <prvTimerTask+0x16c>)
    680a:	4c44      	ldr	r4, [pc, #272]	; (691c <prvTimerTask+0x178>)
    680c:	2200      	movs	r2, #0
    680e:	a905      	add	r1, sp, #20
    6810:	6828      	ldr	r0, [r5, #0]
    6812:	47a0      	blx	r4
    6814:	2800      	cmp	r0, #0
    6816:	d0ca      	beq.n	67ae <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    6818:	9b05      	ldr	r3, [sp, #20]
    681a:	9303      	str	r3, [sp, #12]
    681c:	2b00      	cmp	r3, #0
    681e:	dbf5      	blt.n	680c <prvTimerTask+0x68>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    6820:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    6822:	6973      	ldr	r3, [r6, #20]
    6824:	2b00      	cmp	r3, #0
    6826:	d001      	beq.n	682c <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    6828:	1d30      	adds	r0, r6, #4
    682a:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    682c:	a804      	add	r0, sp, #16
    682e:	4b36      	ldr	r3, [pc, #216]	; (6908 <prvTimerTask+0x164>)
    6830:	4798      	blx	r3
			switch( xMessage.xMessageID )
    6832:	9b05      	ldr	r3, [sp, #20]
    6834:	2b09      	cmp	r3, #9
    6836:	d8e9      	bhi.n	680c <prvTimerTask+0x68>
    6838:	009b      	lsls	r3, r3, #2
    683a:	4a39      	ldr	r2, [pc, #228]	; (6920 <prvTimerTask+0x17c>)
    683c:	58d3      	ldr	r3, [r2, r3]
    683e:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
    6840:	4b35      	ldr	r3, [pc, #212]	; (6918 <prvTimerTask+0x174>)
    6842:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    6844:	4b2e      	ldr	r3, [pc, #184]	; (6900 <prvTimerTask+0x15c>)
    6846:	681b      	ldr	r3, [r3, #0]
    6848:	68db      	ldr	r3, [r3, #12]
    684a:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    684c:	1d30      	adds	r0, r6, #4
    684e:	4b2b      	ldr	r3, [pc, #172]	; (68fc <prvTimerTask+0x158>)
    6850:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    6852:	69f3      	ldr	r3, [r6, #28]
    6854:	2b01      	cmp	r3, #1
    6856:	d003      	beq.n	6860 <prvTimerTask+0xbc>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    6858:	6a73      	ldr	r3, [r6, #36]	; 0x24
    685a:	0030      	movs	r0, r6
    685c:	4798      	blx	r3
    685e:	e7d3      	b.n	6808 <prvTimerTask+0x64>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    6860:	69b3      	ldr	r3, [r6, #24]
    6862:	18e1      	adds	r1, r4, r3
    6864:	0023      	movs	r3, r4
    6866:	002a      	movs	r2, r5
    6868:	0030      	movs	r0, r6
    686a:	4d2e      	ldr	r5, [pc, #184]	; (6924 <prvTimerTask+0x180>)
    686c:	47a8      	blx	r5
    686e:	2800      	cmp	r0, #0
    6870:	d0f2      	beq.n	6858 <prvTimerTask+0xb4>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    6872:	2300      	movs	r3, #0
    6874:	9300      	str	r3, [sp, #0]
    6876:	0022      	movs	r2, r4
    6878:	2100      	movs	r1, #0
    687a:	0030      	movs	r0, r6
    687c:	4c2a      	ldr	r4, [pc, #168]	; (6928 <prvTimerTask+0x184>)
    687e:	47a0      	blx	r4
			configASSERT( xResult );
    6880:	2800      	cmp	r0, #0
    6882:	d1e9      	bne.n	6858 <prvTimerTask+0xb4>
    6884:	b672      	cpsid	i
    6886:	e7fe      	b.n	6886 <prvTimerTask+0xe2>
					portYIELD_WITHIN_API();
    6888:	4b28      	ldr	r3, [pc, #160]	; (692c <prvTimerTask+0x188>)
    688a:	4798      	blx	r3
    688c:	e7bc      	b.n	6808 <prvTimerTask+0x64>
			( void ) xTaskResumeAll();
    688e:	4b22      	ldr	r3, [pc, #136]	; (6918 <prvTimerTask+0x174>)
    6890:	4798      	blx	r3
    6892:	e7b9      	b.n	6808 <prvTimerTask+0x64>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    6894:	9b06      	ldr	r3, [sp, #24]
    6896:	69b2      	ldr	r2, [r6, #24]
    6898:	4694      	mov	ip, r2
    689a:	4463      	add	r3, ip
    689c:	0019      	movs	r1, r3
    689e:	9b06      	ldr	r3, [sp, #24]
    68a0:	0002      	movs	r2, r0
    68a2:	0030      	movs	r0, r6
    68a4:	4c1f      	ldr	r4, [pc, #124]	; (6924 <prvTimerTask+0x180>)
    68a6:	47a0      	blx	r4
    68a8:	2800      	cmp	r0, #0
    68aa:	d0ae      	beq.n	680a <prvTimerTask+0x66>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    68ac:	0030      	movs	r0, r6
    68ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
    68b0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    68b2:	69f3      	ldr	r3, [r6, #28]
    68b4:	2b01      	cmp	r3, #1
    68b6:	d1a8      	bne.n	680a <prvTimerTask+0x66>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    68b8:	9b06      	ldr	r3, [sp, #24]
    68ba:	69b1      	ldr	r1, [r6, #24]
    68bc:	468c      	mov	ip, r1
    68be:	4463      	add	r3, ip
    68c0:	001a      	movs	r2, r3
    68c2:	2300      	movs	r3, #0
    68c4:	9300      	str	r3, [sp, #0]
    68c6:	2100      	movs	r1, #0
    68c8:	0030      	movs	r0, r6
    68ca:	4c17      	ldr	r4, [pc, #92]	; (6928 <prvTimerTask+0x184>)
    68cc:	47a0      	blx	r4
							configASSERT( xResult );
    68ce:	2800      	cmp	r0, #0
    68d0:	d19b      	bne.n	680a <prvTimerTask+0x66>
    68d2:	b672      	cpsid	i
    68d4:	e7fe      	b.n	68d4 <prvTimerTask+0x130>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    68d6:	9906      	ldr	r1, [sp, #24]
    68d8:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    68da:	2900      	cmp	r1, #0
    68dc:	d006      	beq.n	68ec <prvTimerTask+0x148>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    68de:	1841      	adds	r1, r0, r1
    68e0:	0003      	movs	r3, r0
    68e2:	0002      	movs	r2, r0
    68e4:	0030      	movs	r0, r6
    68e6:	4c0f      	ldr	r4, [pc, #60]	; (6924 <prvTimerTask+0x180>)
    68e8:	47a0      	blx	r4
    68ea:	e78e      	b.n	680a <prvTimerTask+0x66>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    68ec:	b672      	cpsid	i
    68ee:	e7fe      	b.n	68ee <prvTimerTask+0x14a>
						vPortFree( pxTimer );
    68f0:	0030      	movs	r0, r6
    68f2:	4b0f      	ldr	r3, [pc, #60]	; (6930 <prvTimerTask+0x18c>)
    68f4:	4798      	blx	r3
    68f6:	e788      	b.n	680a <prvTimerTask+0x66>
    68f8:	00008669 	.word	0x00008669
    68fc:	000041e7 	.word	0x000041e7
    6900:	20003838 	.word	0x20003838
    6904:	00005a85 	.word	0x00005a85
    6908:	000066ed 	.word	0x000066ed
    690c:	2000383c 	.word	0x2000383c
    6910:	2000386c 	.word	0x2000386c
    6914:	000055dd 	.word	0x000055dd
    6918:	00005c2d 	.word	0x00005c2d
    691c:	00004f71 	.word	0x00004f71
    6920:	0000e98c 	.word	0x0000e98c
    6924:	00006591 	.word	0x00006591
    6928:	00006681 	.word	0x00006681
    692c:	00004311 	.word	0x00004311
    6930:	00004475 	.word	0x00004475

00006934 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    6934:	b510      	push	{r4, lr}
    6936:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
    6938:	7c03      	ldrb	r3, [r0, #16]
    693a:	2b00      	cmp	r3, #0
    693c:	d005      	beq.n	694a <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    693e:	6883      	ldr	r3, [r0, #8]
    6940:	1c58      	adds	r0, r3, #1
    6942:	68e1      	ldr	r1, [r4, #12]
    6944:	4b07      	ldr	r3, [pc, #28]	; (6964 <advance_pointer+0x30>)
    6946:	4798      	blx	r3
    6948:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    694a:	6863      	ldr	r3, [r4, #4]
    694c:	1c58      	adds	r0, r3, #1
    694e:	68e1      	ldr	r1, [r4, #12]
    6950:	4b04      	ldr	r3, [pc, #16]	; (6964 <advance_pointer+0x30>)
    6952:	4798      	blx	r3
    6954:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    6956:	68a3      	ldr	r3, [r4, #8]
    6958:	1a59      	subs	r1, r3, r1
    695a:	424a      	negs	r2, r1
    695c:	414a      	adcs	r2, r1
    695e:	7422      	strb	r2, [r4, #16]
 }
    6960:	bd10      	pop	{r4, pc}
    6962:	46c0      	nop			; (mov r8, r8)
    6964:	0000ac19 	.word	0x0000ac19

00006968 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    6968:	b570      	push	{r4, r5, r6, lr}
    696a:	0005      	movs	r5, r0
    696c:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    696e:	2014      	movs	r0, #20
    6970:	4b04      	ldr	r3, [pc, #16]	; (6984 <circular_buf_init+0x1c>)
    6972:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    6974:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
    6976:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
    6978:	2300      	movs	r3, #0
    697a:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
    697c:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
    697e:	7403      	strb	r3, [r0, #16]
 }
    6980:	bd70      	pop	{r4, r5, r6, pc}
    6982:	46c0      	nop			; (mov r8, r8)
    6984:	00008831 	.word	0x00008831

00006988 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    6988:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    698a:	6803      	ldr	r3, [r0, #0]
    698c:	6842      	ldr	r2, [r0, #4]
    698e:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
    6990:	4b01      	ldr	r3, [pc, #4]	; (6998 <circular_buf_put+0x10>)
    6992:	4798      	blx	r3
 }
    6994:	bd10      	pop	{r4, pc}
    6996:	46c0      	nop			; (mov r8, r8)
    6998:	00006935 	.word	0x00006935

0000699c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    699c:	7c02      	ldrb	r2, [r0, #16]
    699e:	2300      	movs	r3, #0
    69a0:	2a00      	cmp	r2, #0
    69a2:	d105      	bne.n	69b0 <circular_buf_empty+0x14>
    69a4:	6843      	ldr	r3, [r0, #4]
    69a6:	6880      	ldr	r0, [r0, #8]
    69a8:	1a1b      	subs	r3, r3, r0
    69aa:	4258      	negs	r0, r3
    69ac:	4143      	adcs	r3, r0
    69ae:	b2db      	uxtb	r3, r3
    69b0:	0018      	movs	r0, r3
 }
    69b2:	4770      	bx	lr

000069b4 <circular_buf_get>:
 {
    69b4:	b570      	push	{r4, r5, r6, lr}
    69b6:	0004      	movs	r4, r0
    69b8:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
    69ba:	4b0a      	ldr	r3, [pc, #40]	; (69e4 <circular_buf_get+0x30>)
    69bc:	4798      	blx	r3
    69be:	2800      	cmp	r0, #0
    69c0:	d10d      	bne.n	69de <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
    69c2:	6823      	ldr	r3, [r4, #0]
    69c4:	68a2      	ldr	r2, [r4, #8]
    69c6:	5c9b      	ldrb	r3, [r3, r2]
    69c8:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
    69ca:	2300      	movs	r3, #0
    69cc:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    69ce:	68a3      	ldr	r3, [r4, #8]
    69d0:	1c58      	adds	r0, r3, #1
    69d2:	68e1      	ldr	r1, [r4, #12]
    69d4:	4b04      	ldr	r3, [pc, #16]	; (69e8 <circular_buf_get+0x34>)
    69d6:	4798      	blx	r3
    69d8:	60a1      	str	r1, [r4, #8]
		 r = 0;
    69da:	2000      	movs	r0, #0
 }
    69dc:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
    69de:	2001      	movs	r0, #1
    69e0:	4240      	negs	r0, r0
	 return r;
    69e2:	e7fb      	b.n	69dc <circular_buf_get+0x28>
    69e4:	0000699d 	.word	0x0000699d
    69e8:	0000ac19 	.word	0x0000ac19

000069ec <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    69ec:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    69ee:	4b06      	ldr	r3, [pc, #24]	; (6a08 <usart_write_callback+0x1c>)
    69f0:	6818      	ldr	r0, [r3, #0]
    69f2:	4906      	ldr	r1, [pc, #24]	; (6a0c <usart_write_callback+0x20>)
    69f4:	4b06      	ldr	r3, [pc, #24]	; (6a10 <usart_write_callback+0x24>)
    69f6:	4798      	blx	r3
    69f8:	1c43      	adds	r3, r0, #1
    69fa:	d004      	beq.n	6a06 <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    69fc:	2201      	movs	r2, #1
    69fe:	4903      	ldr	r1, [pc, #12]	; (6a0c <usart_write_callback+0x20>)
    6a00:	4804      	ldr	r0, [pc, #16]	; (6a14 <usart_write_callback+0x28>)
    6a02:	4b05      	ldr	r3, [pc, #20]	; (6a18 <usart_write_callback+0x2c>)
    6a04:	4798      	blx	r3
	}
	
}
    6a06:	bd10      	pop	{r4, pc}
    6a08:	20004df8 	.word	0x20004df8
    6a0c:	20004df4 	.word	0x20004df4
    6a10:	000069b5 	.word	0x000069b5
    6a14:	200049b8 	.word	0x200049b8
    6a18:	00007af9 	.word	0x00007af9

00006a1c <usart_read_callback>:
{
    6a1c:	b510      	push	{r4, lr}
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
    6a1e:	4c07      	ldr	r4, [pc, #28]	; (6a3c <usart_read_callback+0x20>)
    6a20:	7821      	ldrb	r1, [r4, #0]
    6a22:	4b07      	ldr	r3, [pc, #28]	; (6a40 <usart_read_callback+0x24>)
    6a24:	6818      	ldr	r0, [r3, #0]
    6a26:	4b07      	ldr	r3, [pc, #28]	; (6a44 <usart_read_callback+0x28>)
    6a28:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
    6a2a:	2201      	movs	r2, #1
    6a2c:	0021      	movs	r1, r4
    6a2e:	4806      	ldr	r0, [pc, #24]	; (6a48 <usart_read_callback+0x2c>)
    6a30:	4b06      	ldr	r3, [pc, #24]	; (6a4c <usart_read_callback+0x30>)
    6a32:	4798      	blx	r3
	CliCharReadySemaphoreGiveFromISR(); //Give binary semaphore
    6a34:	4b06      	ldr	r3, [pc, #24]	; (6a50 <usart_read_callback+0x34>)
    6a36:	4798      	blx	r3
}
    6a38:	bd10      	pop	{r4, pc}
    6a3a:	46c0      	nop			; (mov r8, r8)
    6a3c:	200049f0 	.word	0x200049f0
    6a40:	200049ec 	.word	0x200049ec
    6a44:	00006989 	.word	0x00006989
    6a48:	200049b8 	.word	0x200049b8
    6a4c:	00007b19 	.word	0x00007b19
    6a50:	00001eb1 	.word	0x00001eb1

00006a54 <InitializeSerialConsole>:
{
    6a54:	b530      	push	{r4, r5, lr}
    6a56:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
    6a58:	2580      	movs	r5, #128	; 0x80
    6a5a:	00ad      	lsls	r5, r5, #2
    6a5c:	0029      	movs	r1, r5
    6a5e:	4836      	ldr	r0, [pc, #216]	; (6b38 <InitializeSerialConsole+0xe4>)
    6a60:	4c36      	ldr	r4, [pc, #216]	; (6b3c <InitializeSerialConsole+0xe8>)
    6a62:	47a0      	blx	r4
    6a64:	4b36      	ldr	r3, [pc, #216]	; (6b40 <InitializeSerialConsole+0xec>)
    6a66:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
    6a68:	0029      	movs	r1, r5
    6a6a:	4836      	ldr	r0, [pc, #216]	; (6b44 <InitializeSerialConsole+0xf0>)
    6a6c:	47a0      	blx	r4
    6a6e:	4b36      	ldr	r3, [pc, #216]	; (6b48 <InitializeSerialConsole+0xf4>)
    6a70:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    6a72:	2380      	movs	r3, #128	; 0x80
    6a74:	05db      	lsls	r3, r3, #23
    6a76:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    6a78:	2300      	movs	r3, #0
    6a7a:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    6a7c:	22ff      	movs	r2, #255	; 0xff
    6a7e:	4669      	mov	r1, sp
    6a80:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    6a82:	2200      	movs	r2, #0
    6a84:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    6a86:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    6a88:	2101      	movs	r1, #1
    6a8a:	2024      	movs	r0, #36	; 0x24
    6a8c:	466c      	mov	r4, sp
    6a8e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    6a90:	3001      	adds	r0, #1
    6a92:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    6a94:	3125      	adds	r1, #37	; 0x25
    6a96:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    6a98:	3101      	adds	r1, #1
    6a9a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    6a9c:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    6a9e:	3105      	adds	r1, #5
    6aa0:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    6aa2:	3101      	adds	r1, #1
    6aa4:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    6aa6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    6aa8:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    6aaa:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    6aac:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    6aae:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    6ab0:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    6ab2:	2313      	movs	r3, #19
    6ab4:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    6ab6:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
    6ab8:	23e1      	movs	r3, #225	; 0xe1
    6aba:	025b      	lsls	r3, r3, #9
    6abc:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    6abe:	23c4      	movs	r3, #196	; 0xc4
    6ac0:	039b      	lsls	r3, r3, #14
    6ac2:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    6ac4:	2301      	movs	r3, #1
    6ac6:	425b      	negs	r3, r3
    6ac8:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    6aca:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    6acc:	4b1f      	ldr	r3, [pc, #124]	; (6b4c <InitializeSerialConsole+0xf8>)
    6ace:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    6ad0:	4b1f      	ldr	r3, [pc, #124]	; (6b50 <InitializeSerialConsole+0xfc>)
    6ad2:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
    6ad4:	4d1f      	ldr	r5, [pc, #124]	; (6b54 <InitializeSerialConsole+0x100>)
    6ad6:	4c20      	ldr	r4, [pc, #128]	; (6b58 <InitializeSerialConsole+0x104>)
    6ad8:	466a      	mov	r2, sp
    6ada:	4920      	ldr	r1, [pc, #128]	; (6b5c <InitializeSerialConsole+0x108>)
    6adc:	0028      	movs	r0, r5
    6ade:	47a0      	blx	r4
    6ae0:	2800      	cmp	r0, #0
    6ae2:	d1f9      	bne.n	6ad8 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6ae4:	4d1b      	ldr	r5, [pc, #108]	; (6b54 <InitializeSerialConsole+0x100>)
    6ae6:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6ae8:	0020      	movs	r0, r4
    6aea:	4b1d      	ldr	r3, [pc, #116]	; (6b60 <InitializeSerialConsole+0x10c>)
    6aec:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6aee:	231f      	movs	r3, #31
    6af0:	4018      	ands	r0, r3
    6af2:	3b1e      	subs	r3, #30
    6af4:	4083      	lsls	r3, r0
    6af6:	4a1b      	ldr	r2, [pc, #108]	; (6b64 <InitializeSerialConsole+0x110>)
    6af8:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6afa:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6afc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    6afe:	2b00      	cmp	r3, #0
    6b00:	d1fc      	bne.n	6afc <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6b02:	6823      	ldr	r3, [r4, #0]
    6b04:	2202      	movs	r2, #2
    6b06:	4313      	orrs	r3, r2
    6b08:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
    6b0a:	4c12      	ldr	r4, [pc, #72]	; (6b54 <InitializeSerialConsole+0x100>)
    6b0c:	2200      	movs	r2, #0
    6b0e:	4916      	ldr	r1, [pc, #88]	; (6b68 <InitializeSerialConsole+0x114>)
    6b10:	0020      	movs	r0, r4
    6b12:	4d16      	ldr	r5, [pc, #88]	; (6b6c <InitializeSerialConsole+0x118>)
    6b14:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
    6b16:	2201      	movs	r2, #1
    6b18:	4915      	ldr	r1, [pc, #84]	; (6b70 <InitializeSerialConsole+0x11c>)
    6b1a:	0020      	movs	r0, r4
    6b1c:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    6b1e:	2231      	movs	r2, #49	; 0x31
    6b20:	5ca3      	ldrb	r3, [r4, r2]
    6b22:	2103      	movs	r1, #3
    6b24:	430b      	orrs	r3, r1
    6b26:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
    6b28:	3a30      	subs	r2, #48	; 0x30
    6b2a:	4912      	ldr	r1, [pc, #72]	; (6b74 <InitializeSerialConsole+0x120>)
    6b2c:	0020      	movs	r0, r4
    6b2e:	4b12      	ldr	r3, [pc, #72]	; (6b78 <InitializeSerialConsole+0x124>)
    6b30:	4798      	blx	r3
}
    6b32:	b011      	add	sp, #68	; 0x44
    6b34:	bd30      	pop	{r4, r5, pc}
    6b36:	46c0      	nop			; (mov r8, r8)
    6b38:	20004bf4 	.word	0x20004bf4
    6b3c:	00006969 	.word	0x00006969
    6b40:	200049ec 	.word	0x200049ec
    6b44:	200049f4 	.word	0x200049f4
    6b48:	20004df8 	.word	0x20004df8
    6b4c:	002a0003 	.word	0x002a0003
    6b50:	002b0003 	.word	0x002b0003
    6b54:	200049b8 	.word	0x200049b8
    6b58:	00007711 	.word	0x00007711
    6b5c:	42001800 	.word	0x42001800
    6b60:	00007235 	.word	0x00007235
    6b64:	e000e100 	.word	0xe000e100
    6b68:	000069ed 	.word	0x000069ed
    6b6c:	00007ae1 	.word	0x00007ae1
    6b70:	00006a1d 	.word	0x00006a1d
    6b74:	200049f0 	.word	0x200049f0
    6b78:	00007b19 	.word	0x00007b19

00006b7c <SerialConsoleWriteString>:
{
    6b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b7e:	46c6      	mov	lr, r8
    6b80:	b500      	push	{lr}
    6b82:	0005      	movs	r5, r0
vTaskSuspendAll();
    6b84:	4b14      	ldr	r3, [pc, #80]	; (6bd8 <SerialConsoleWriteString+0x5c>)
    6b86:	4798      	blx	r3
    6b88:	2400      	movs	r4, #0
	if(string != NULL)
    6b8a:	2d00      	cmp	r5, #0
    6b8c:	d012      	beq.n	6bb4 <SerialConsoleWriteString+0x38>
		for (size_t iter = 0; iter < strlen(string); iter++)
    6b8e:	4e13      	ldr	r6, [pc, #76]	; (6bdc <SerialConsoleWriteString+0x60>)
			circular_buf_put(cbufTx, string[iter]);
    6b90:	4f13      	ldr	r7, [pc, #76]	; (6be0 <SerialConsoleWriteString+0x64>)
    6b92:	4b14      	ldr	r3, [pc, #80]	; (6be4 <SerialConsoleWriteString+0x68>)
    6b94:	4698      	mov	r8, r3
    6b96:	e003      	b.n	6ba0 <SerialConsoleWriteString+0x24>
    6b98:	5d29      	ldrb	r1, [r5, r4]
    6b9a:	6838      	ldr	r0, [r7, #0]
    6b9c:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
    6b9e:	3401      	adds	r4, #1
    6ba0:	0028      	movs	r0, r5
    6ba2:	47b0      	blx	r6
    6ba4:	4284      	cmp	r4, r0
    6ba6:	d3f7      	bcc.n	6b98 <SerialConsoleWriteString+0x1c>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
    6ba8:	2101      	movs	r1, #1
    6baa:	480f      	ldr	r0, [pc, #60]	; (6be8 <SerialConsoleWriteString+0x6c>)
    6bac:	4b0f      	ldr	r3, [pc, #60]	; (6bec <SerialConsoleWriteString+0x70>)
    6bae:	4798      	blx	r3
    6bb0:	2800      	cmp	r0, #0
    6bb2:	d004      	beq.n	6bbe <SerialConsoleWriteString+0x42>
xTaskResumeAll();
    6bb4:	4b0e      	ldr	r3, [pc, #56]	; (6bf0 <SerialConsoleWriteString+0x74>)
    6bb6:	4798      	blx	r3
}
    6bb8:	bc04      	pop	{r2}
    6bba:	4690      	mov	r8, r2
    6bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
    6bbe:	4c0d      	ldr	r4, [pc, #52]	; (6bf4 <SerialConsoleWriteString+0x78>)
    6bc0:	4b07      	ldr	r3, [pc, #28]	; (6be0 <SerialConsoleWriteString+0x64>)
    6bc2:	6818      	ldr	r0, [r3, #0]
    6bc4:	0021      	movs	r1, r4
    6bc6:	4b0c      	ldr	r3, [pc, #48]	; (6bf8 <SerialConsoleWriteString+0x7c>)
    6bc8:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    6bca:	2201      	movs	r2, #1
    6bcc:	0021      	movs	r1, r4
    6bce:	4806      	ldr	r0, [pc, #24]	; (6be8 <SerialConsoleWriteString+0x6c>)
    6bd0:	4b0a      	ldr	r3, [pc, #40]	; (6bfc <SerialConsoleWriteString+0x80>)
    6bd2:	4798      	blx	r3
    6bd4:	e7ee      	b.n	6bb4 <SerialConsoleWriteString+0x38>
    6bd6:	46c0      	nop			; (mov r8, r8)
    6bd8:	00005a85 	.word	0x00005a85
    6bdc:	000093a1 	.word	0x000093a1
    6be0:	20004df8 	.word	0x20004df8
    6be4:	00006989 	.word	0x00006989
    6be8:	200049b8 	.word	0x200049b8
    6bec:	00007b39 	.word	0x00007b39
    6bf0:	00005c2d 	.word	0x00005c2d
    6bf4:	20004df4 	.word	0x20004df4
    6bf8:	000069b5 	.word	0x000069b5
    6bfc:	00007af9 	.word	0x00007af9

00006c00 <SerialConsoleReadCharacter>:
{
    6c00:	b510      	push	{r4, lr}
    6c02:	0004      	movs	r4, r0
	vTaskSuspendAll();
    6c04:	4b05      	ldr	r3, [pc, #20]	; (6c1c <SerialConsoleReadCharacter+0x1c>)
    6c06:	4798      	blx	r3
	int a = circular_buf_get(cbufRx, (uint8_t*) rxChar);
    6c08:	4b05      	ldr	r3, [pc, #20]	; (6c20 <SerialConsoleReadCharacter+0x20>)
    6c0a:	6818      	ldr	r0, [r3, #0]
    6c0c:	0021      	movs	r1, r4
    6c0e:	4b05      	ldr	r3, [pc, #20]	; (6c24 <SerialConsoleReadCharacter+0x24>)
    6c10:	4798      	blx	r3
    6c12:	0004      	movs	r4, r0
	xTaskResumeAll();
    6c14:	4b04      	ldr	r3, [pc, #16]	; (6c28 <SerialConsoleReadCharacter+0x28>)
    6c16:	4798      	blx	r3
}
    6c18:	0020      	movs	r0, r4
    6c1a:	bd10      	pop	{r4, pc}
    6c1c:	00005a85 	.word	0x00005a85
    6c20:	200049ec 	.word	0x200049ec
    6c24:	000069b5 	.word	0x000069b5
    6c28:	00005c2d 	.word	0x00005c2d

00006c2c <LogMessage>:
{
    6c2c:	b40e      	push	{r1, r2, r3}
    6c2e:	b530      	push	{r4, r5, lr}
    6c30:	b082      	sub	sp, #8
return currentDebugLevel;
    6c32:	4b0a      	ldr	r3, [pc, #40]	; (6c5c <LogMessage+0x30>)
if(getLogLevel() <= level){
    6c34:	781b      	ldrb	r3, [r3, #0]
    6c36:	4283      	cmp	r3, r0
    6c38:	d904      	bls.n	6c44 <LogMessage+0x18>
};
    6c3a:	b002      	add	sp, #8
    6c3c:	bc30      	pop	{r4, r5}
    6c3e:	bc08      	pop	{r3}
    6c40:	b003      	add	sp, #12
    6c42:	4718      	bx	r3
	va_start(ap, format);
    6c44:	ab06      	add	r3, sp, #24
    6c46:	9301      	str	r3, [sp, #4]
	vsnprintf(debugBuffer, 127, format, ap);
    6c48:	4c05      	ldr	r4, [pc, #20]	; (6c60 <LogMessage+0x34>)
    6c4a:	9a05      	ldr	r2, [sp, #20]
    6c4c:	217f      	movs	r1, #127	; 0x7f
    6c4e:	0020      	movs	r0, r4
    6c50:	4d04      	ldr	r5, [pc, #16]	; (6c64 <LogMessage+0x38>)
    6c52:	47a8      	blx	r5
	SerialConsoleWriteString(debugBuffer);
    6c54:	0020      	movs	r0, r4
    6c56:	4b04      	ldr	r3, [pc, #16]	; (6c68 <LogMessage+0x3c>)
    6c58:	4798      	blx	r3
};
    6c5a:	e7ee      	b.n	6c3a <LogMessage+0xe>
    6c5c:	20003874 	.word	0x20003874
    6c60:	20004938 	.word	0x20004938
    6c64:	00009451 	.word	0x00009451
    6c68:	00006b7d 	.word	0x00006b7d

00006c6c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    6c6c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    6c6e:	4b08      	ldr	r3, [pc, #32]	; (6c90 <delay_cycles_ms+0x24>)
    6c70:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    6c72:	4a08      	ldr	r2, [pc, #32]	; (6c94 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    6c74:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    6c76:	2180      	movs	r1, #128	; 0x80
    6c78:	0249      	lsls	r1, r1, #9
	while (n--) {
    6c7a:	3801      	subs	r0, #1
    6c7c:	d307      	bcc.n	6c8e <delay_cycles_ms+0x22>
	if (n > 0) {
    6c7e:	2c00      	cmp	r4, #0
    6c80:	d0fb      	beq.n	6c7a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    6c82:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    6c84:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    6c86:	6813      	ldr	r3, [r2, #0]
    6c88:	420b      	tst	r3, r1
    6c8a:	d0fc      	beq.n	6c86 <delay_cycles_ms+0x1a>
    6c8c:	e7f5      	b.n	6c7a <delay_cycles_ms+0xe>
	}
}
    6c8e:	bd30      	pop	{r4, r5, pc}
    6c90:	20000098 	.word	0x20000098
    6c94:	e000e010 	.word	0xe000e010

00006c98 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    6c98:	4b0c      	ldr	r3, [pc, #48]	; (6ccc <cpu_irq_enter_critical+0x34>)
    6c9a:	681b      	ldr	r3, [r3, #0]
    6c9c:	2b00      	cmp	r3, #0
    6c9e:	d106      	bne.n	6cae <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6ca0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    6ca4:	2b00      	cmp	r3, #0
    6ca6:	d007      	beq.n	6cb8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    6ca8:	2200      	movs	r2, #0
    6caa:	4b09      	ldr	r3, [pc, #36]	; (6cd0 <cpu_irq_enter_critical+0x38>)
    6cac:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    6cae:	4a07      	ldr	r2, [pc, #28]	; (6ccc <cpu_irq_enter_critical+0x34>)
    6cb0:	6813      	ldr	r3, [r2, #0]
    6cb2:	3301      	adds	r3, #1
    6cb4:	6013      	str	r3, [r2, #0]
}
    6cb6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    6cb8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    6cba:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    6cbe:	2200      	movs	r2, #0
    6cc0:	4b04      	ldr	r3, [pc, #16]	; (6cd4 <cpu_irq_enter_critical+0x3c>)
    6cc2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    6cc4:	3201      	adds	r2, #1
    6cc6:	4b02      	ldr	r3, [pc, #8]	; (6cd0 <cpu_irq_enter_critical+0x38>)
    6cc8:	701a      	strb	r2, [r3, #0]
    6cca:	e7f0      	b.n	6cae <cpu_irq_enter_critical+0x16>
    6ccc:	20003878 	.word	0x20003878
    6cd0:	2000387c 	.word	0x2000387c
    6cd4:	2000009c 	.word	0x2000009c

00006cd8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    6cd8:	4b08      	ldr	r3, [pc, #32]	; (6cfc <cpu_irq_leave_critical+0x24>)
    6cda:	681a      	ldr	r2, [r3, #0]
    6cdc:	3a01      	subs	r2, #1
    6cde:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    6ce0:	681b      	ldr	r3, [r3, #0]
    6ce2:	2b00      	cmp	r3, #0
    6ce4:	d109      	bne.n	6cfa <cpu_irq_leave_critical+0x22>
    6ce6:	4b06      	ldr	r3, [pc, #24]	; (6d00 <cpu_irq_leave_critical+0x28>)
    6ce8:	781b      	ldrb	r3, [r3, #0]
    6cea:	2b00      	cmp	r3, #0
    6cec:	d005      	beq.n	6cfa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    6cee:	2201      	movs	r2, #1
    6cf0:	4b04      	ldr	r3, [pc, #16]	; (6d04 <cpu_irq_leave_critical+0x2c>)
    6cf2:	701a      	strb	r2, [r3, #0]
    6cf4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    6cf8:	b662      	cpsie	i
	}
}
    6cfa:	4770      	bx	lr
    6cfc:	20003878 	.word	0x20003878
    6d00:	2000387c 	.word	0x2000387c
    6d04:	2000009c 	.word	0x2000009c

00006d08 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    6d08:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d0a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    6d0c:	ac01      	add	r4, sp, #4
    6d0e:	2501      	movs	r5, #1
    6d10:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    6d12:	2700      	movs	r7, #0
    6d14:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6d16:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    6d18:	0021      	movs	r1, r4
    6d1a:	2017      	movs	r0, #23
    6d1c:	4e06      	ldr	r6, [pc, #24]	; (6d38 <system_board_init+0x30>)
    6d1e:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    6d20:	2280      	movs	r2, #128	; 0x80
    6d22:	0412      	lsls	r2, r2, #16
    6d24:	4b05      	ldr	r3, [pc, #20]	; (6d3c <system_board_init+0x34>)
    6d26:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    6d28:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    6d2a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    6d2c:	0021      	movs	r1, r4
    6d2e:	2037      	movs	r0, #55	; 0x37
    6d30:	47b0      	blx	r6
}
    6d32:	b003      	add	sp, #12
    6d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d36:	46c0      	nop			; (mov r8, r8)
    6d38:	00006e19 	.word	0x00006e19
    6d3c:	41004400 	.word	0x41004400

00006d40 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    6d40:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    6d42:	2200      	movs	r2, #0
    6d44:	4b10      	ldr	r3, [pc, #64]	; (6d88 <EIC_Handler+0x48>)
    6d46:	701a      	strb	r2, [r3, #0]
    6d48:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    6d4a:	4910      	ldr	r1, [pc, #64]	; (6d8c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    6d4c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    6d4e:	4e10      	ldr	r6, [pc, #64]	; (6d90 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    6d50:	4c0d      	ldr	r4, [pc, #52]	; (6d88 <EIC_Handler+0x48>)
    6d52:	e00a      	b.n	6d6a <EIC_Handler+0x2a>
		return eics[eic_index];
    6d54:	490d      	ldr	r1, [pc, #52]	; (6d8c <EIC_Handler+0x4c>)
    6d56:	e008      	b.n	6d6a <EIC_Handler+0x2a>
    6d58:	7823      	ldrb	r3, [r4, #0]
    6d5a:	3301      	adds	r3, #1
    6d5c:	b2db      	uxtb	r3, r3
    6d5e:	7023      	strb	r3, [r4, #0]
    6d60:	2b0f      	cmp	r3, #15
    6d62:	d810      	bhi.n	6d86 <EIC_Handler+0x46>
		return NULL;
    6d64:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    6d66:	2b1f      	cmp	r3, #31
    6d68:	d9f4      	bls.n	6d54 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    6d6a:	0028      	movs	r0, r5
    6d6c:	4018      	ands	r0, r3
    6d6e:	2201      	movs	r2, #1
    6d70:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    6d72:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    6d74:	4210      	tst	r0, r2
    6d76:	d0ef      	beq.n	6d58 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    6d78:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    6d7a:	009b      	lsls	r3, r3, #2
    6d7c:	599b      	ldr	r3, [r3, r6]
    6d7e:	2b00      	cmp	r3, #0
    6d80:	d0ea      	beq.n	6d58 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    6d82:	4798      	blx	r3
    6d84:	e7e8      	b.n	6d58 <EIC_Handler+0x18>
			}
		}
	}
}
    6d86:	bd70      	pop	{r4, r5, r6, pc}
    6d88:	20004dfc 	.word	0x20004dfc
    6d8c:	40001800 	.word	0x40001800
    6d90:	20004e00 	.word	0x20004e00

00006d94 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    6d94:	4a04      	ldr	r2, [pc, #16]	; (6da8 <_extint_enable+0x14>)
    6d96:	7813      	ldrb	r3, [r2, #0]
    6d98:	2102      	movs	r1, #2
    6d9a:	430b      	orrs	r3, r1
    6d9c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    6d9e:	7853      	ldrb	r3, [r2, #1]
    6da0:	b25b      	sxtb	r3, r3
    6da2:	2b00      	cmp	r3, #0
    6da4:	dbfb      	blt.n	6d9e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    6da6:	4770      	bx	lr
    6da8:	40001800 	.word	0x40001800

00006dac <_system_extint_init>:
{
    6dac:	b500      	push	{lr}
    6dae:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    6db0:	4a12      	ldr	r2, [pc, #72]	; (6dfc <_system_extint_init+0x50>)
    6db2:	6993      	ldr	r3, [r2, #24]
    6db4:	2140      	movs	r1, #64	; 0x40
    6db6:	430b      	orrs	r3, r1
    6db8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    6dba:	a901      	add	r1, sp, #4
    6dbc:	2300      	movs	r3, #0
    6dbe:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    6dc0:	2005      	movs	r0, #5
    6dc2:	4b0f      	ldr	r3, [pc, #60]	; (6e00 <_system_extint_init+0x54>)
    6dc4:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    6dc6:	2005      	movs	r0, #5
    6dc8:	4b0e      	ldr	r3, [pc, #56]	; (6e04 <_system_extint_init+0x58>)
    6dca:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    6dcc:	4a0e      	ldr	r2, [pc, #56]	; (6e08 <_system_extint_init+0x5c>)
    6dce:	7813      	ldrb	r3, [r2, #0]
    6dd0:	2101      	movs	r1, #1
    6dd2:	430b      	orrs	r3, r1
    6dd4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    6dd6:	7853      	ldrb	r3, [r2, #1]
    6dd8:	b25b      	sxtb	r3, r3
    6dda:	2b00      	cmp	r3, #0
    6ddc:	dbfb      	blt.n	6dd6 <_system_extint_init+0x2a>
    6dde:	4b0b      	ldr	r3, [pc, #44]	; (6e0c <_system_extint_init+0x60>)
    6de0:	0019      	movs	r1, r3
    6de2:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    6de4:	2200      	movs	r2, #0
    6de6:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    6de8:	4299      	cmp	r1, r3
    6dea:	d1fc      	bne.n	6de6 <_system_extint_init+0x3a>
    6dec:	2210      	movs	r2, #16
    6dee:	4b08      	ldr	r3, [pc, #32]	; (6e10 <_system_extint_init+0x64>)
    6df0:	601a      	str	r2, [r3, #0]
	_extint_enable();
    6df2:	4b08      	ldr	r3, [pc, #32]	; (6e14 <_system_extint_init+0x68>)
    6df4:	4798      	blx	r3
}
    6df6:	b003      	add	sp, #12
    6df8:	bd00      	pop	{pc}
    6dfa:	46c0      	nop			; (mov r8, r8)
    6dfc:	40000400 	.word	0x40000400
    6e00:	000082b5 	.word	0x000082b5
    6e04:	00008229 	.word	0x00008229
    6e08:	40001800 	.word	0x40001800
    6e0c:	20004e00 	.word	0x20004e00
    6e10:	e000e100 	.word	0xe000e100
    6e14:	00006d95 	.word	0x00006d95

00006e18 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    6e18:	b500      	push	{lr}
    6e1a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6e1c:	ab01      	add	r3, sp, #4
    6e1e:	2280      	movs	r2, #128	; 0x80
    6e20:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    6e22:	780a      	ldrb	r2, [r1, #0]
    6e24:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    6e26:	784a      	ldrb	r2, [r1, #1]
    6e28:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    6e2a:	788a      	ldrb	r2, [r1, #2]
    6e2c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    6e2e:	0019      	movs	r1, r3
    6e30:	4b01      	ldr	r3, [pc, #4]	; (6e38 <port_pin_set_config+0x20>)
    6e32:	4798      	blx	r3
}
    6e34:	b003      	add	sp, #12
    6e36:	bd00      	pop	{pc}
    6e38:	000083dd 	.word	0x000083dd

00006e3c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    6e3c:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    6e3e:	4b0f      	ldr	r3, [pc, #60]	; (6e7c <RTC_Handler+0x40>)
    6e40:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    6e42:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    6e44:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    6e46:	8a13      	ldrh	r3, [r2, #16]
    6e48:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    6e4a:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    6e4c:	79e3      	ldrb	r3, [r4, #7]
    6e4e:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    6e50:	b258      	sxtb	r0, r3
    6e52:	2800      	cmp	r0, #0
    6e54:	db06      	blt.n	6e64 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    6e56:	07db      	lsls	r3, r3, #31
    6e58:	d503      	bpl.n	6e62 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    6e5a:	07cb      	lsls	r3, r1, #31
    6e5c:	d40a      	bmi.n	6e74 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    6e5e:	2301      	movs	r3, #1
    6e60:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    6e62:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    6e64:	078b      	lsls	r3, r1, #30
    6e66:	d402      	bmi.n	6e6e <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    6e68:	2380      	movs	r3, #128	; 0x80
    6e6a:	7223      	strb	r3, [r4, #8]
    6e6c:	e7f9      	b.n	6e62 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    6e6e:	68d3      	ldr	r3, [r2, #12]
    6e70:	4798      	blx	r3
    6e72:	e7f9      	b.n	6e68 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    6e74:	6893      	ldr	r3, [r2, #8]
    6e76:	4798      	blx	r3
    6e78:	e7f1      	b.n	6e5e <RTC_Handler+0x22>
    6e7a:	46c0      	nop			; (mov r8, r8)
    6e7c:	20004e40 	.word	0x20004e40

00006e80 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    6e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e82:	46de      	mov	lr, fp
    6e84:	4657      	mov	r7, sl
    6e86:	464e      	mov	r6, r9
    6e88:	4645      	mov	r5, r8
    6e8a:	b5e0      	push	{r5, r6, r7, lr}
    6e8c:	b087      	sub	sp, #28
    6e8e:	4680      	mov	r8, r0
    6e90:	9104      	str	r1, [sp, #16]
    6e92:	0016      	movs	r6, r2
    6e94:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    6e96:	2200      	movs	r2, #0
    6e98:	2300      	movs	r3, #0
    6e9a:	2100      	movs	r1, #0
    6e9c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    6e9e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    6ea0:	2001      	movs	r0, #1
    6ea2:	0021      	movs	r1, r4
    6ea4:	9600      	str	r6, [sp, #0]
    6ea6:	9701      	str	r7, [sp, #4]
    6ea8:	465c      	mov	r4, fp
    6eaa:	9403      	str	r4, [sp, #12]
    6eac:	4644      	mov	r4, r8
    6eae:	9405      	str	r4, [sp, #20]
    6eb0:	e013      	b.n	6eda <long_division+0x5a>
    6eb2:	2420      	movs	r4, #32
    6eb4:	1a64      	subs	r4, r4, r1
    6eb6:	0005      	movs	r5, r0
    6eb8:	40e5      	lsrs	r5, r4
    6eba:	46a8      	mov	r8, r5
    6ebc:	e014      	b.n	6ee8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    6ebe:	9c00      	ldr	r4, [sp, #0]
    6ec0:	9d01      	ldr	r5, [sp, #4]
    6ec2:	1b12      	subs	r2, r2, r4
    6ec4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    6ec6:	465c      	mov	r4, fp
    6ec8:	464d      	mov	r5, r9
    6eca:	432c      	orrs	r4, r5
    6ecc:	46a3      	mov	fp, r4
    6ece:	9c03      	ldr	r4, [sp, #12]
    6ed0:	4645      	mov	r5, r8
    6ed2:	432c      	orrs	r4, r5
    6ed4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    6ed6:	3901      	subs	r1, #1
    6ed8:	d325      	bcc.n	6f26 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    6eda:	2420      	movs	r4, #32
    6edc:	4264      	negs	r4, r4
    6ede:	190c      	adds	r4, r1, r4
    6ee0:	d4e7      	bmi.n	6eb2 <long_division+0x32>
    6ee2:	0005      	movs	r5, r0
    6ee4:	40a5      	lsls	r5, r4
    6ee6:	46a8      	mov	r8, r5
    6ee8:	0004      	movs	r4, r0
    6eea:	408c      	lsls	r4, r1
    6eec:	46a1      	mov	r9, r4
		r = r << 1;
    6eee:	1892      	adds	r2, r2, r2
    6ef0:	415b      	adcs	r3, r3
    6ef2:	0014      	movs	r4, r2
    6ef4:	001d      	movs	r5, r3
		if (n & bit_shift) {
    6ef6:	9e05      	ldr	r6, [sp, #20]
    6ef8:	464f      	mov	r7, r9
    6efa:	403e      	ands	r6, r7
    6efc:	46b4      	mov	ip, r6
    6efe:	9e04      	ldr	r6, [sp, #16]
    6f00:	4647      	mov	r7, r8
    6f02:	403e      	ands	r6, r7
    6f04:	46b2      	mov	sl, r6
    6f06:	4666      	mov	r6, ip
    6f08:	4657      	mov	r7, sl
    6f0a:	433e      	orrs	r6, r7
    6f0c:	d003      	beq.n	6f16 <long_division+0x96>
			r |= 0x01;
    6f0e:	0006      	movs	r6, r0
    6f10:	4326      	orrs	r6, r4
    6f12:	0032      	movs	r2, r6
    6f14:	002b      	movs	r3, r5
		if (r >= d) {
    6f16:	9c00      	ldr	r4, [sp, #0]
    6f18:	9d01      	ldr	r5, [sp, #4]
    6f1a:	429d      	cmp	r5, r3
    6f1c:	d8db      	bhi.n	6ed6 <long_division+0x56>
    6f1e:	d1ce      	bne.n	6ebe <long_division+0x3e>
    6f20:	4294      	cmp	r4, r2
    6f22:	d8d8      	bhi.n	6ed6 <long_division+0x56>
    6f24:	e7cb      	b.n	6ebe <long_division+0x3e>
    6f26:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    6f28:	4658      	mov	r0, fp
    6f2a:	0019      	movs	r1, r3
    6f2c:	b007      	add	sp, #28
    6f2e:	bc3c      	pop	{r2, r3, r4, r5}
    6f30:	4690      	mov	r8, r2
    6f32:	4699      	mov	r9, r3
    6f34:	46a2      	mov	sl, r4
    6f36:	46ab      	mov	fp, r5
    6f38:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006f3a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    6f3a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    6f3c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6f3e:	2340      	movs	r3, #64	; 0x40
    6f40:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    6f42:	4281      	cmp	r1, r0
    6f44:	d202      	bcs.n	6f4c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    6f46:	0018      	movs	r0, r3
    6f48:	bd10      	pop	{r4, pc}
		baud_calculated++;
    6f4a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    6f4c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    6f4e:	1c63      	adds	r3, r4, #1
    6f50:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    6f52:	4288      	cmp	r0, r1
    6f54:	d9f9      	bls.n	6f4a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6f56:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    6f58:	2cff      	cmp	r4, #255	; 0xff
    6f5a:	d8f4      	bhi.n	6f46 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    6f5c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    6f5e:	2300      	movs	r3, #0
    6f60:	e7f1      	b.n	6f46 <_sercom_get_sync_baud_val+0xc>
	...

00006f64 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    6f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f66:	b083      	sub	sp, #12
    6f68:	000f      	movs	r7, r1
    6f6a:	0016      	movs	r6, r2
    6f6c:	aa08      	add	r2, sp, #32
    6f6e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    6f70:	0004      	movs	r4, r0
    6f72:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6f74:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    6f76:	42bc      	cmp	r4, r7
    6f78:	d902      	bls.n	6f80 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    6f7a:	0010      	movs	r0, r2
    6f7c:	b003      	add	sp, #12
    6f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    6f80:	2b00      	cmp	r3, #0
    6f82:	d114      	bne.n	6fae <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    6f84:	0002      	movs	r2, r0
    6f86:	0008      	movs	r0, r1
    6f88:	2100      	movs	r1, #0
    6f8a:	4c19      	ldr	r4, [pc, #100]	; (6ff0 <_sercom_get_async_baud_val+0x8c>)
    6f8c:	47a0      	blx	r4
    6f8e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    6f90:	003a      	movs	r2, r7
    6f92:	2300      	movs	r3, #0
    6f94:	2000      	movs	r0, #0
    6f96:	4c17      	ldr	r4, [pc, #92]	; (6ff4 <_sercom_get_async_baud_val+0x90>)
    6f98:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    6f9a:	2200      	movs	r2, #0
    6f9c:	2301      	movs	r3, #1
    6f9e:	1a12      	subs	r2, r2, r0
    6fa0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    6fa2:	0c12      	lsrs	r2, r2, #16
    6fa4:	041b      	lsls	r3, r3, #16
    6fa6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    6fa8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    6faa:	2200      	movs	r2, #0
    6fac:	e7e5      	b.n	6f7a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    6fae:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    6fb0:	2b01      	cmp	r3, #1
    6fb2:	d1f9      	bne.n	6fa8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    6fb4:	000a      	movs	r2, r1
    6fb6:	2300      	movs	r3, #0
    6fb8:	2100      	movs	r1, #0
    6fba:	4c0d      	ldr	r4, [pc, #52]	; (6ff0 <_sercom_get_async_baud_val+0x8c>)
    6fbc:	47a0      	blx	r4
    6fbe:	0002      	movs	r2, r0
    6fc0:	000b      	movs	r3, r1
    6fc2:	9200      	str	r2, [sp, #0]
    6fc4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    6fc6:	0038      	movs	r0, r7
    6fc8:	2100      	movs	r1, #0
    6fca:	4c0a      	ldr	r4, [pc, #40]	; (6ff4 <_sercom_get_async_baud_val+0x90>)
    6fcc:	47a0      	blx	r4
    6fce:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    6fd0:	2380      	movs	r3, #128	; 0x80
    6fd2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6fd4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    6fd6:	4298      	cmp	r0, r3
    6fd8:	d8cf      	bhi.n	6f7a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    6fda:	0f79      	lsrs	r1, r7, #29
    6fdc:	00f8      	lsls	r0, r7, #3
    6fde:	9a00      	ldr	r2, [sp, #0]
    6fe0:	9b01      	ldr	r3, [sp, #4]
    6fe2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    6fe4:	00ea      	lsls	r2, r5, #3
    6fe6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    6fe8:	b2d2      	uxtb	r2, r2
    6fea:	0352      	lsls	r2, r2, #13
    6fec:	432a      	orrs	r2, r5
    6fee:	e7db      	b.n	6fa8 <_sercom_get_async_baud_val+0x44>
    6ff0:	0000aee9 	.word	0x0000aee9
    6ff4:	00006e81 	.word	0x00006e81

00006ff8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    6ff8:	b510      	push	{r4, lr}
    6ffa:	b082      	sub	sp, #8
    6ffc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    6ffe:	4b0e      	ldr	r3, [pc, #56]	; (7038 <sercom_set_gclk_generator+0x40>)
    7000:	781b      	ldrb	r3, [r3, #0]
    7002:	2b00      	cmp	r3, #0
    7004:	d007      	beq.n	7016 <sercom_set_gclk_generator+0x1e>
    7006:	2900      	cmp	r1, #0
    7008:	d105      	bne.n	7016 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    700a:	4b0b      	ldr	r3, [pc, #44]	; (7038 <sercom_set_gclk_generator+0x40>)
    700c:	785b      	ldrb	r3, [r3, #1]
    700e:	4283      	cmp	r3, r0
    7010:	d010      	beq.n	7034 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    7012:	201d      	movs	r0, #29
    7014:	e00c      	b.n	7030 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    7016:	a901      	add	r1, sp, #4
    7018:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    701a:	2013      	movs	r0, #19
    701c:	4b07      	ldr	r3, [pc, #28]	; (703c <sercom_set_gclk_generator+0x44>)
    701e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    7020:	2013      	movs	r0, #19
    7022:	4b07      	ldr	r3, [pc, #28]	; (7040 <sercom_set_gclk_generator+0x48>)
    7024:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    7026:	4b04      	ldr	r3, [pc, #16]	; (7038 <sercom_set_gclk_generator+0x40>)
    7028:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    702a:	2201      	movs	r2, #1
    702c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    702e:	2000      	movs	r0, #0
}
    7030:	b002      	add	sp, #8
    7032:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    7034:	2000      	movs	r0, #0
    7036:	e7fb      	b.n	7030 <sercom_set_gclk_generator+0x38>
    7038:	20003880 	.word	0x20003880
    703c:	000082b5 	.word	0x000082b5
    7040:	00008229 	.word	0x00008229

00007044 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    7044:	4b40      	ldr	r3, [pc, #256]	; (7148 <_sercom_get_default_pad+0x104>)
    7046:	4298      	cmp	r0, r3
    7048:	d031      	beq.n	70ae <_sercom_get_default_pad+0x6a>
    704a:	d90a      	bls.n	7062 <_sercom_get_default_pad+0x1e>
    704c:	4b3f      	ldr	r3, [pc, #252]	; (714c <_sercom_get_default_pad+0x108>)
    704e:	4298      	cmp	r0, r3
    7050:	d04d      	beq.n	70ee <_sercom_get_default_pad+0xaa>
    7052:	4b3f      	ldr	r3, [pc, #252]	; (7150 <_sercom_get_default_pad+0x10c>)
    7054:	4298      	cmp	r0, r3
    7056:	d05a      	beq.n	710e <_sercom_get_default_pad+0xca>
    7058:	4b3e      	ldr	r3, [pc, #248]	; (7154 <_sercom_get_default_pad+0x110>)
    705a:	4298      	cmp	r0, r3
    705c:	d037      	beq.n	70ce <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    705e:	2000      	movs	r0, #0
}
    7060:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    7062:	4b3d      	ldr	r3, [pc, #244]	; (7158 <_sercom_get_default_pad+0x114>)
    7064:	4298      	cmp	r0, r3
    7066:	d00c      	beq.n	7082 <_sercom_get_default_pad+0x3e>
    7068:	4b3c      	ldr	r3, [pc, #240]	; (715c <_sercom_get_default_pad+0x118>)
    706a:	4298      	cmp	r0, r3
    706c:	d1f7      	bne.n	705e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    706e:	2901      	cmp	r1, #1
    7070:	d017      	beq.n	70a2 <_sercom_get_default_pad+0x5e>
    7072:	2900      	cmp	r1, #0
    7074:	d05d      	beq.n	7132 <_sercom_get_default_pad+0xee>
    7076:	2902      	cmp	r1, #2
    7078:	d015      	beq.n	70a6 <_sercom_get_default_pad+0x62>
    707a:	2903      	cmp	r1, #3
    707c:	d015      	beq.n	70aa <_sercom_get_default_pad+0x66>
	return 0;
    707e:	2000      	movs	r0, #0
    7080:	e7ee      	b.n	7060 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7082:	2901      	cmp	r1, #1
    7084:	d007      	beq.n	7096 <_sercom_get_default_pad+0x52>
    7086:	2900      	cmp	r1, #0
    7088:	d051      	beq.n	712e <_sercom_get_default_pad+0xea>
    708a:	2902      	cmp	r1, #2
    708c:	d005      	beq.n	709a <_sercom_get_default_pad+0x56>
    708e:	2903      	cmp	r1, #3
    7090:	d005      	beq.n	709e <_sercom_get_default_pad+0x5a>
	return 0;
    7092:	2000      	movs	r0, #0
    7094:	e7e4      	b.n	7060 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7096:	4832      	ldr	r0, [pc, #200]	; (7160 <_sercom_get_default_pad+0x11c>)
    7098:	e7e2      	b.n	7060 <_sercom_get_default_pad+0x1c>
    709a:	4832      	ldr	r0, [pc, #200]	; (7164 <_sercom_get_default_pad+0x120>)
    709c:	e7e0      	b.n	7060 <_sercom_get_default_pad+0x1c>
    709e:	4832      	ldr	r0, [pc, #200]	; (7168 <_sercom_get_default_pad+0x124>)
    70a0:	e7de      	b.n	7060 <_sercom_get_default_pad+0x1c>
    70a2:	4832      	ldr	r0, [pc, #200]	; (716c <_sercom_get_default_pad+0x128>)
    70a4:	e7dc      	b.n	7060 <_sercom_get_default_pad+0x1c>
    70a6:	4832      	ldr	r0, [pc, #200]	; (7170 <_sercom_get_default_pad+0x12c>)
    70a8:	e7da      	b.n	7060 <_sercom_get_default_pad+0x1c>
    70aa:	4832      	ldr	r0, [pc, #200]	; (7174 <_sercom_get_default_pad+0x130>)
    70ac:	e7d8      	b.n	7060 <_sercom_get_default_pad+0x1c>
    70ae:	2901      	cmp	r1, #1
    70b0:	d007      	beq.n	70c2 <_sercom_get_default_pad+0x7e>
    70b2:	2900      	cmp	r1, #0
    70b4:	d03f      	beq.n	7136 <_sercom_get_default_pad+0xf2>
    70b6:	2902      	cmp	r1, #2
    70b8:	d005      	beq.n	70c6 <_sercom_get_default_pad+0x82>
    70ba:	2903      	cmp	r1, #3
    70bc:	d005      	beq.n	70ca <_sercom_get_default_pad+0x86>
	return 0;
    70be:	2000      	movs	r0, #0
    70c0:	e7ce      	b.n	7060 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    70c2:	482d      	ldr	r0, [pc, #180]	; (7178 <_sercom_get_default_pad+0x134>)
    70c4:	e7cc      	b.n	7060 <_sercom_get_default_pad+0x1c>
    70c6:	482d      	ldr	r0, [pc, #180]	; (717c <_sercom_get_default_pad+0x138>)
    70c8:	e7ca      	b.n	7060 <_sercom_get_default_pad+0x1c>
    70ca:	482d      	ldr	r0, [pc, #180]	; (7180 <_sercom_get_default_pad+0x13c>)
    70cc:	e7c8      	b.n	7060 <_sercom_get_default_pad+0x1c>
    70ce:	2901      	cmp	r1, #1
    70d0:	d007      	beq.n	70e2 <_sercom_get_default_pad+0x9e>
    70d2:	2900      	cmp	r1, #0
    70d4:	d031      	beq.n	713a <_sercom_get_default_pad+0xf6>
    70d6:	2902      	cmp	r1, #2
    70d8:	d005      	beq.n	70e6 <_sercom_get_default_pad+0xa2>
    70da:	2903      	cmp	r1, #3
    70dc:	d005      	beq.n	70ea <_sercom_get_default_pad+0xa6>
	return 0;
    70de:	2000      	movs	r0, #0
    70e0:	e7be      	b.n	7060 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    70e2:	4828      	ldr	r0, [pc, #160]	; (7184 <_sercom_get_default_pad+0x140>)
    70e4:	e7bc      	b.n	7060 <_sercom_get_default_pad+0x1c>
    70e6:	4828      	ldr	r0, [pc, #160]	; (7188 <_sercom_get_default_pad+0x144>)
    70e8:	e7ba      	b.n	7060 <_sercom_get_default_pad+0x1c>
    70ea:	4828      	ldr	r0, [pc, #160]	; (718c <_sercom_get_default_pad+0x148>)
    70ec:	e7b8      	b.n	7060 <_sercom_get_default_pad+0x1c>
    70ee:	2901      	cmp	r1, #1
    70f0:	d007      	beq.n	7102 <_sercom_get_default_pad+0xbe>
    70f2:	2900      	cmp	r1, #0
    70f4:	d023      	beq.n	713e <_sercom_get_default_pad+0xfa>
    70f6:	2902      	cmp	r1, #2
    70f8:	d005      	beq.n	7106 <_sercom_get_default_pad+0xc2>
    70fa:	2903      	cmp	r1, #3
    70fc:	d005      	beq.n	710a <_sercom_get_default_pad+0xc6>
	return 0;
    70fe:	2000      	movs	r0, #0
    7100:	e7ae      	b.n	7060 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7102:	4823      	ldr	r0, [pc, #140]	; (7190 <_sercom_get_default_pad+0x14c>)
    7104:	e7ac      	b.n	7060 <_sercom_get_default_pad+0x1c>
    7106:	4823      	ldr	r0, [pc, #140]	; (7194 <_sercom_get_default_pad+0x150>)
    7108:	e7aa      	b.n	7060 <_sercom_get_default_pad+0x1c>
    710a:	4823      	ldr	r0, [pc, #140]	; (7198 <_sercom_get_default_pad+0x154>)
    710c:	e7a8      	b.n	7060 <_sercom_get_default_pad+0x1c>
    710e:	2901      	cmp	r1, #1
    7110:	d007      	beq.n	7122 <_sercom_get_default_pad+0xde>
    7112:	2900      	cmp	r1, #0
    7114:	d015      	beq.n	7142 <_sercom_get_default_pad+0xfe>
    7116:	2902      	cmp	r1, #2
    7118:	d005      	beq.n	7126 <_sercom_get_default_pad+0xe2>
    711a:	2903      	cmp	r1, #3
    711c:	d005      	beq.n	712a <_sercom_get_default_pad+0xe6>
	return 0;
    711e:	2000      	movs	r0, #0
    7120:	e79e      	b.n	7060 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7122:	481e      	ldr	r0, [pc, #120]	; (719c <_sercom_get_default_pad+0x158>)
    7124:	e79c      	b.n	7060 <_sercom_get_default_pad+0x1c>
    7126:	481e      	ldr	r0, [pc, #120]	; (71a0 <_sercom_get_default_pad+0x15c>)
    7128:	e79a      	b.n	7060 <_sercom_get_default_pad+0x1c>
    712a:	481e      	ldr	r0, [pc, #120]	; (71a4 <_sercom_get_default_pad+0x160>)
    712c:	e798      	b.n	7060 <_sercom_get_default_pad+0x1c>
    712e:	481e      	ldr	r0, [pc, #120]	; (71a8 <_sercom_get_default_pad+0x164>)
    7130:	e796      	b.n	7060 <_sercom_get_default_pad+0x1c>
    7132:	2003      	movs	r0, #3
    7134:	e794      	b.n	7060 <_sercom_get_default_pad+0x1c>
    7136:	481d      	ldr	r0, [pc, #116]	; (71ac <_sercom_get_default_pad+0x168>)
    7138:	e792      	b.n	7060 <_sercom_get_default_pad+0x1c>
    713a:	481d      	ldr	r0, [pc, #116]	; (71b0 <_sercom_get_default_pad+0x16c>)
    713c:	e790      	b.n	7060 <_sercom_get_default_pad+0x1c>
    713e:	481d      	ldr	r0, [pc, #116]	; (71b4 <_sercom_get_default_pad+0x170>)
    7140:	e78e      	b.n	7060 <_sercom_get_default_pad+0x1c>
    7142:	481d      	ldr	r0, [pc, #116]	; (71b8 <_sercom_get_default_pad+0x174>)
    7144:	e78c      	b.n	7060 <_sercom_get_default_pad+0x1c>
    7146:	46c0      	nop			; (mov r8, r8)
    7148:	42001000 	.word	0x42001000
    714c:	42001800 	.word	0x42001800
    7150:	42001c00 	.word	0x42001c00
    7154:	42001400 	.word	0x42001400
    7158:	42000800 	.word	0x42000800
    715c:	42000c00 	.word	0x42000c00
    7160:	00050003 	.word	0x00050003
    7164:	00060003 	.word	0x00060003
    7168:	00070003 	.word	0x00070003
    716c:	00010003 	.word	0x00010003
    7170:	001e0003 	.word	0x001e0003
    7174:	001f0003 	.word	0x001f0003
    7178:	00090003 	.word	0x00090003
    717c:	000a0003 	.word	0x000a0003
    7180:	000b0003 	.word	0x000b0003
    7184:	00110003 	.word	0x00110003
    7188:	00120003 	.word	0x00120003
    718c:	00130003 	.word	0x00130003
    7190:	000d0003 	.word	0x000d0003
    7194:	000e0003 	.word	0x000e0003
    7198:	000f0003 	.word	0x000f0003
    719c:	00170003 	.word	0x00170003
    71a0:	00180003 	.word	0x00180003
    71a4:	00190003 	.word	0x00190003
    71a8:	00040003 	.word	0x00040003
    71ac:	00080003 	.word	0x00080003
    71b0:	00100003 	.word	0x00100003
    71b4:	000c0003 	.word	0x000c0003
    71b8:	00160003 	.word	0x00160003

000071bc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    71bc:	b530      	push	{r4, r5, lr}
    71be:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    71c0:	4b0b      	ldr	r3, [pc, #44]	; (71f0 <_sercom_get_sercom_inst_index+0x34>)
    71c2:	466a      	mov	r2, sp
    71c4:	cb32      	ldmia	r3!, {r1, r4, r5}
    71c6:	c232      	stmia	r2!, {r1, r4, r5}
    71c8:	cb32      	ldmia	r3!, {r1, r4, r5}
    71ca:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    71cc:	9b00      	ldr	r3, [sp, #0]
    71ce:	4283      	cmp	r3, r0
    71d0:	d00b      	beq.n	71ea <_sercom_get_sercom_inst_index+0x2e>
    71d2:	2301      	movs	r3, #1
    71d4:	009a      	lsls	r2, r3, #2
    71d6:	4669      	mov	r1, sp
    71d8:	5852      	ldr	r2, [r2, r1]
    71da:	4282      	cmp	r2, r0
    71dc:	d006      	beq.n	71ec <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    71de:	3301      	adds	r3, #1
    71e0:	2b06      	cmp	r3, #6
    71e2:	d1f7      	bne.n	71d4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    71e4:	2000      	movs	r0, #0
}
    71e6:	b007      	add	sp, #28
    71e8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    71ea:	2300      	movs	r3, #0
			return i;
    71ec:	b2d8      	uxtb	r0, r3
    71ee:	e7fa      	b.n	71e6 <_sercom_get_sercom_inst_index+0x2a>
    71f0:	0000e9bc 	.word	0x0000e9bc

000071f4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    71f4:	4770      	bx	lr
	...

000071f8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    71f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    71fa:	4b0a      	ldr	r3, [pc, #40]	; (7224 <_sercom_set_handler+0x2c>)
    71fc:	781b      	ldrb	r3, [r3, #0]
    71fe:	2b00      	cmp	r3, #0
    7200:	d10c      	bne.n	721c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    7202:	4f09      	ldr	r7, [pc, #36]	; (7228 <_sercom_set_handler+0x30>)
    7204:	4e09      	ldr	r6, [pc, #36]	; (722c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    7206:	4d0a      	ldr	r5, [pc, #40]	; (7230 <_sercom_set_handler+0x38>)
    7208:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    720a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    720c:	195a      	adds	r2, r3, r5
    720e:	6014      	str	r4, [r2, #0]
    7210:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7212:	2b18      	cmp	r3, #24
    7214:	d1f9      	bne.n	720a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    7216:	2201      	movs	r2, #1
    7218:	4b02      	ldr	r3, [pc, #8]	; (7224 <_sercom_set_handler+0x2c>)
    721a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    721c:	0080      	lsls	r0, r0, #2
    721e:	4b02      	ldr	r3, [pc, #8]	; (7228 <_sercom_set_handler+0x30>)
    7220:	50c1      	str	r1, [r0, r3]
}
    7222:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7224:	20003882 	.word	0x20003882
    7228:	20003884 	.word	0x20003884
    722c:	000071f5 	.word	0x000071f5
    7230:	20004e44 	.word	0x20004e44

00007234 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    7234:	b500      	push	{lr}
    7236:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    7238:	2309      	movs	r3, #9
    723a:	466a      	mov	r2, sp
    723c:	7013      	strb	r3, [r2, #0]
    723e:	3301      	adds	r3, #1
    7240:	7053      	strb	r3, [r2, #1]
    7242:	3301      	adds	r3, #1
    7244:	7093      	strb	r3, [r2, #2]
    7246:	3301      	adds	r3, #1
    7248:	70d3      	strb	r3, [r2, #3]
    724a:	3301      	adds	r3, #1
    724c:	7113      	strb	r3, [r2, #4]
    724e:	3301      	adds	r3, #1
    7250:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    7252:	4b03      	ldr	r3, [pc, #12]	; (7260 <_sercom_get_interrupt_vector+0x2c>)
    7254:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    7256:	466b      	mov	r3, sp
    7258:	5618      	ldrsb	r0, [r3, r0]
}
    725a:	b003      	add	sp, #12
    725c:	bd00      	pop	{pc}
    725e:	46c0      	nop			; (mov r8, r8)
    7260:	000071bd 	.word	0x000071bd

00007264 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    7264:	b510      	push	{r4, lr}
    7266:	4b02      	ldr	r3, [pc, #8]	; (7270 <SERCOM0_Handler+0xc>)
    7268:	681b      	ldr	r3, [r3, #0]
    726a:	2000      	movs	r0, #0
    726c:	4798      	blx	r3
    726e:	bd10      	pop	{r4, pc}
    7270:	20003884 	.word	0x20003884

00007274 <SERCOM1_Handler>:
    7274:	b510      	push	{r4, lr}
    7276:	4b02      	ldr	r3, [pc, #8]	; (7280 <SERCOM1_Handler+0xc>)
    7278:	685b      	ldr	r3, [r3, #4]
    727a:	2001      	movs	r0, #1
    727c:	4798      	blx	r3
    727e:	bd10      	pop	{r4, pc}
    7280:	20003884 	.word	0x20003884

00007284 <SERCOM2_Handler>:
    7284:	b510      	push	{r4, lr}
    7286:	4b02      	ldr	r3, [pc, #8]	; (7290 <SERCOM2_Handler+0xc>)
    7288:	689b      	ldr	r3, [r3, #8]
    728a:	2002      	movs	r0, #2
    728c:	4798      	blx	r3
    728e:	bd10      	pop	{r4, pc}
    7290:	20003884 	.word	0x20003884

00007294 <SERCOM3_Handler>:
    7294:	b510      	push	{r4, lr}
    7296:	4b02      	ldr	r3, [pc, #8]	; (72a0 <SERCOM3_Handler+0xc>)
    7298:	68db      	ldr	r3, [r3, #12]
    729a:	2003      	movs	r0, #3
    729c:	4798      	blx	r3
    729e:	bd10      	pop	{r4, pc}
    72a0:	20003884 	.word	0x20003884

000072a4 <SERCOM4_Handler>:
    72a4:	b510      	push	{r4, lr}
    72a6:	4b02      	ldr	r3, [pc, #8]	; (72b0 <SERCOM4_Handler+0xc>)
    72a8:	691b      	ldr	r3, [r3, #16]
    72aa:	2004      	movs	r0, #4
    72ac:	4798      	blx	r3
    72ae:	bd10      	pop	{r4, pc}
    72b0:	20003884 	.word	0x20003884

000072b4 <SERCOM5_Handler>:
    72b4:	b510      	push	{r4, lr}
    72b6:	4b02      	ldr	r3, [pc, #8]	; (72c0 <SERCOM5_Handler+0xc>)
    72b8:	695b      	ldr	r3, [r3, #20]
    72ba:	2005      	movs	r0, #5
    72bc:	4798      	blx	r3
    72be:	bd10      	pop	{r4, pc}
    72c0:	20003884 	.word	0x20003884

000072c4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    72c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    72c6:	46d6      	mov	lr, sl
    72c8:	464f      	mov	r7, r9
    72ca:	b580      	push	{r7, lr}
    72cc:	b08b      	sub	sp, #44	; 0x2c
    72ce:	4681      	mov	r9, r0
    72d0:	000f      	movs	r7, r1
    72d2:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    72d4:	0003      	movs	r3, r0
    72d6:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    72d8:	680b      	ldr	r3, [r1, #0]
    72da:	079b      	lsls	r3, r3, #30
    72dc:	d409      	bmi.n	72f2 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    72de:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    72e0:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    72e2:	07db      	lsls	r3, r3, #31
    72e4:	d400      	bmi.n	72e8 <spi_init+0x24>
    72e6:	e098      	b.n	741a <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    72e8:	b00b      	add	sp, #44	; 0x2c
    72ea:	bc0c      	pop	{r2, r3}
    72ec:	4691      	mov	r9, r2
    72ee:	469a      	mov	sl, r3
    72f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    72f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    72f4:	9305      	str	r3, [sp, #20]
    72f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    72f8:	9306      	str	r3, [sp, #24]
    72fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
    72fc:	9307      	str	r3, [sp, #28]
    72fe:	6b53      	ldr	r3, [r2, #52]	; 0x34
    7300:	9308      	str	r3, [sp, #32]
    7302:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7304:	ab05      	add	r3, sp, #20
    7306:	9301      	str	r3, [sp, #4]
    7308:	e00a      	b.n	7320 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    730a:	0038      	movs	r0, r7
    730c:	4b93      	ldr	r3, [pc, #588]	; (755c <spi_init+0x298>)
    730e:	4798      	blx	r3
    7310:	e00c      	b.n	732c <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    7312:	230f      	movs	r3, #15
    7314:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    7316:	4281      	cmp	r1, r0
    7318:	d12d      	bne.n	7376 <spi_init+0xb2>
    731a:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    731c:	2e04      	cmp	r6, #4
    731e:	d02f      	beq.n	7380 <spi_init+0xbc>
    7320:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7322:	00b3      	lsls	r3, r6, #2
    7324:	9a01      	ldr	r2, [sp, #4]
    7326:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    7328:	2800      	cmp	r0, #0
    732a:	d0ee      	beq.n	730a <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    732c:	1c43      	adds	r3, r0, #1
    732e:	d0f4      	beq.n	731a <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    7330:	0401      	lsls	r1, r0, #16
    7332:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    7334:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    7336:	b2c3      	uxtb	r3, r0
    7338:	469c      	mov	ip, r3
		return NULL;
    733a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    733c:	0602      	lsls	r2, r0, #24
    733e:	d405      	bmi.n	734c <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    7340:	4663      	mov	r3, ip
    7342:	095b      	lsrs	r3, r3, #5
    7344:	01db      	lsls	r3, r3, #7
    7346:	4a86      	ldr	r2, [pc, #536]	; (7560 <spi_init+0x29c>)
    7348:	4692      	mov	sl, r2
    734a:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    734c:	221f      	movs	r2, #31
    734e:	4660      	mov	r0, ip
    7350:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    7352:	1898      	adds	r0, r3, r2
    7354:	3040      	adds	r0, #64	; 0x40
    7356:	7800      	ldrb	r0, [r0, #0]
    7358:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    735a:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    735c:	4655      	mov	r5, sl
    735e:	07ed      	lsls	r5, r5, #31
    7360:	d5d9      	bpl.n	7316 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    7362:	0852      	lsrs	r2, r2, #1
    7364:	189b      	adds	r3, r3, r2
    7366:	3330      	adds	r3, #48	; 0x30
    7368:	7818      	ldrb	r0, [r3, #0]
    736a:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    736c:	4663      	mov	r3, ip
    736e:	07db      	lsls	r3, r3, #31
    7370:	d5cf      	bpl.n	7312 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    7372:	0900      	lsrs	r0, r0, #4
    7374:	e7cf      	b.n	7316 <spi_init+0x52>
			module->hw = NULL;
    7376:	2300      	movs	r3, #0
    7378:	464a      	mov	r2, r9
    737a:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    737c:	201c      	movs	r0, #28
    737e:	e7b3      	b.n	72e8 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    7380:	2013      	movs	r0, #19
    7382:	4b78      	ldr	r3, [pc, #480]	; (7564 <spi_init+0x2a0>)
    7384:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    7386:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    7388:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    738a:	2a01      	cmp	r2, #1
    738c:	d027      	beq.n	73de <spi_init+0x11a>
	ctrla |= config->mux_setting;
    738e:	6863      	ldr	r3, [r4, #4]
    7390:	68a2      	ldr	r2, [r4, #8]
    7392:	4313      	orrs	r3, r2
    7394:	68e2      	ldr	r2, [r4, #12]
    7396:	4313      	orrs	r3, r2
    7398:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    739a:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    739c:	7c61      	ldrb	r1, [r4, #17]
    739e:	2900      	cmp	r1, #0
    73a0:	d001      	beq.n	73a6 <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    73a2:	2180      	movs	r1, #128	; 0x80
    73a4:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    73a6:	7ca1      	ldrb	r1, [r4, #18]
    73a8:	2900      	cmp	r1, #0
    73aa:	d002      	beq.n	73b2 <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    73ac:	2180      	movs	r1, #128	; 0x80
    73ae:	0289      	lsls	r1, r1, #10
    73b0:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    73b2:	7ce1      	ldrb	r1, [r4, #19]
    73b4:	2900      	cmp	r1, #0
    73b6:	d002      	beq.n	73be <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    73b8:	2180      	movs	r1, #128	; 0x80
    73ba:	0089      	lsls	r1, r1, #2
    73bc:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    73be:	7d21      	ldrb	r1, [r4, #20]
    73c0:	2900      	cmp	r1, #0
    73c2:	d002      	beq.n	73ca <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    73c4:	2180      	movs	r1, #128	; 0x80
    73c6:	0189      	lsls	r1, r1, #6
    73c8:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    73ca:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    73cc:	2002      	movs	r0, #2
    73ce:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    73d0:	428b      	cmp	r3, r1
    73d2:	d018      	beq.n	7406 <spi_init+0x142>
	module->hw = NULL;
    73d4:	2300      	movs	r3, #0
    73d6:	464a      	mov	r2, r9
    73d8:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    73da:	201c      	movs	r0, #28
    73dc:	e784      	b.n	72e8 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    73de:	aa04      	add	r2, sp, #16
    73e0:	0001      	movs	r1, r0
    73e2:	69a0      	ldr	r0, [r4, #24]
    73e4:	4b60      	ldr	r3, [pc, #384]	; (7568 <spi_init+0x2a4>)
    73e6:	4798      	blx	r3
    73e8:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    73ea:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    73ec:	2b00      	cmp	r3, #0
    73ee:	d000      	beq.n	73f2 <spi_init+0x12e>
    73f0:	e77a      	b.n	72e8 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    73f2:	7b3b      	ldrb	r3, [r7, #12]
    73f4:	b2db      	uxtb	r3, r3
    73f6:	aa04      	add	r2, sp, #16
    73f8:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    73fa:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    73fc:	429a      	cmp	r2, r3
    73fe:	d000      	beq.n	7402 <spi_init+0x13e>
    7400:	e772      	b.n	72e8 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    7402:	350c      	adds	r5, #12
    7404:	e7c3      	b.n	738e <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
    7406:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    7408:	4293      	cmp	r3, r2
    740a:	d1e3      	bne.n	73d4 <spi_init+0x110>
		module->mode           = config->mode;
    740c:	7823      	ldrb	r3, [r4, #0]
    740e:	464a      	mov	r2, r9
    7410:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
    7412:	7c23      	ldrb	r3, [r4, #16]
    7414:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    7416:	2000      	movs	r0, #0
    7418:	e766      	b.n	72e8 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    741a:	0008      	movs	r0, r1
    741c:	4b53      	ldr	r3, [pc, #332]	; (756c <spi_init+0x2a8>)
    741e:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    7420:	4a53      	ldr	r2, [pc, #332]	; (7570 <spi_init+0x2ac>)
    7422:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    7424:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    7426:	2301      	movs	r3, #1
    7428:	40ab      	lsls	r3, r5
    742a:	430b      	orrs	r3, r1
    742c:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    742e:	a909      	add	r1, sp, #36	; 0x24
    7430:	2624      	movs	r6, #36	; 0x24
    7432:	5da3      	ldrb	r3, [r4, r6]
    7434:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7436:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7438:	b2c5      	uxtb	r5, r0
    743a:	0028      	movs	r0, r5
    743c:	4b4d      	ldr	r3, [pc, #308]	; (7574 <spi_init+0x2b0>)
    743e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7440:	0028      	movs	r0, r5
    7442:	4b4d      	ldr	r3, [pc, #308]	; (7578 <spi_init+0x2b4>)
    7444:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7446:	5da0      	ldrb	r0, [r4, r6]
    7448:	2100      	movs	r1, #0
    744a:	4b4c      	ldr	r3, [pc, #304]	; (757c <spi_init+0x2b8>)
    744c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    744e:	7823      	ldrb	r3, [r4, #0]
    7450:	2b01      	cmp	r3, #1
    7452:	d019      	beq.n	7488 <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7454:	464b      	mov	r3, r9
    7456:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7458:	ab04      	add	r3, sp, #16
    745a:	2280      	movs	r2, #128	; 0x80
    745c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    745e:	2200      	movs	r2, #0
    7460:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7462:	2101      	movs	r1, #1
    7464:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    7466:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    7468:	7823      	ldrb	r3, [r4, #0]
    746a:	2b00      	cmp	r3, #0
    746c:	d101      	bne.n	7472 <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    746e:	ab04      	add	r3, sp, #16
    7470:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    7472:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7474:	9305      	str	r3, [sp, #20]
    7476:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7478:	9306      	str	r3, [sp, #24]
    747a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    747c:	9307      	str	r3, [sp, #28]
    747e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7480:	9308      	str	r3, [sp, #32]
    7482:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7484:	ad05      	add	r5, sp, #20
    7486:	e011      	b.n	74ac <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    7488:	683b      	ldr	r3, [r7, #0]
    748a:	220c      	movs	r2, #12
    748c:	4313      	orrs	r3, r2
    748e:	603b      	str	r3, [r7, #0]
    7490:	e7e0      	b.n	7454 <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7492:	0030      	movs	r0, r6
    7494:	4b31      	ldr	r3, [pc, #196]	; (755c <spi_init+0x298>)
    7496:	4798      	blx	r3
    7498:	e00d      	b.n	74b6 <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    749a:	a904      	add	r1, sp, #16
    749c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    749e:	0c00      	lsrs	r0, r0, #16
    74a0:	b2c0      	uxtb	r0, r0
    74a2:	4b37      	ldr	r3, [pc, #220]	; (7580 <spi_init+0x2bc>)
    74a4:	4798      	blx	r3
    74a6:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    74a8:	2f04      	cmp	r7, #4
    74aa:	d007      	beq.n	74bc <spi_init+0x1f8>
    74ac:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    74ae:	00bb      	lsls	r3, r7, #2
    74b0:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    74b2:	2800      	cmp	r0, #0
    74b4:	d0ed      	beq.n	7492 <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
    74b6:	1c43      	adds	r3, r0, #1
    74b8:	d1ef      	bne.n	749a <spi_init+0x1d6>
    74ba:	e7f4      	b.n	74a6 <spi_init+0x1e2>
	module->mode             = config->mode;
    74bc:	7823      	ldrb	r3, [r4, #0]
    74be:	464a      	mov	r2, r9
    74c0:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    74c2:	7c23      	ldrb	r3, [r4, #16]
    74c4:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    74c6:	7ca3      	ldrb	r3, [r4, #18]
    74c8:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    74ca:	7d23      	ldrb	r3, [r4, #20]
    74cc:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    74ce:	2200      	movs	r2, #0
    74d0:	ab02      	add	r3, sp, #8
    74d2:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    74d4:	7823      	ldrb	r3, [r4, #0]
    74d6:	2b01      	cmp	r3, #1
    74d8:	d028      	beq.n	752c <spi_init+0x268>
	ctrla |= config->transfer_mode;
    74da:	6863      	ldr	r3, [r4, #4]
    74dc:	68a2      	ldr	r2, [r4, #8]
    74de:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    74e0:	68e2      	ldr	r2, [r4, #12]
    74e2:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    74e4:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    74e6:	7c62      	ldrb	r2, [r4, #17]
    74e8:	2a00      	cmp	r2, #0
    74ea:	d103      	bne.n	74f4 <spi_init+0x230>
    74ec:	4a25      	ldr	r2, [pc, #148]	; (7584 <spi_init+0x2c0>)
    74ee:	7892      	ldrb	r2, [r2, #2]
    74f0:	0792      	lsls	r2, r2, #30
    74f2:	d501      	bpl.n	74f8 <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    74f4:	2280      	movs	r2, #128	; 0x80
    74f6:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    74f8:	7ca2      	ldrb	r2, [r4, #18]
    74fa:	2a00      	cmp	r2, #0
    74fc:	d002      	beq.n	7504 <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    74fe:	2280      	movs	r2, #128	; 0x80
    7500:	0292      	lsls	r2, r2, #10
    7502:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    7504:	7ce2      	ldrb	r2, [r4, #19]
    7506:	2a00      	cmp	r2, #0
    7508:	d002      	beq.n	7510 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    750a:	2280      	movs	r2, #128	; 0x80
    750c:	0092      	lsls	r2, r2, #2
    750e:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    7510:	7d22      	ldrb	r2, [r4, #20]
    7512:	2a00      	cmp	r2, #0
    7514:	d002      	beq.n	751c <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    7516:	2280      	movs	r2, #128	; 0x80
    7518:	0192      	lsls	r2, r2, #6
    751a:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    751c:	6832      	ldr	r2, [r6, #0]
    751e:	4313      	orrs	r3, r2
    7520:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    7522:	6873      	ldr	r3, [r6, #4]
    7524:	430b      	orrs	r3, r1
    7526:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
    7528:	2000      	movs	r0, #0
    752a:	e6dd      	b.n	72e8 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    752c:	464b      	mov	r3, r9
    752e:	6818      	ldr	r0, [r3, #0]
    7530:	4b0e      	ldr	r3, [pc, #56]	; (756c <spi_init+0x2a8>)
    7532:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7534:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    7536:	b2c0      	uxtb	r0, r0
    7538:	4b0a      	ldr	r3, [pc, #40]	; (7564 <spi_init+0x2a0>)
    753a:	4798      	blx	r3
    753c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    753e:	ab02      	add	r3, sp, #8
    7540:	1d9a      	adds	r2, r3, #6
    7542:	69a0      	ldr	r0, [r4, #24]
    7544:	4b08      	ldr	r3, [pc, #32]	; (7568 <spi_init+0x2a4>)
    7546:	4798      	blx	r3
    7548:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    754a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    754c:	2b00      	cmp	r3, #0
    754e:	d000      	beq.n	7552 <spi_init+0x28e>
    7550:	e6ca      	b.n	72e8 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    7552:	ab02      	add	r3, sp, #8
    7554:	3306      	adds	r3, #6
    7556:	781b      	ldrb	r3, [r3, #0]
    7558:	7333      	strb	r3, [r6, #12]
    755a:	e7be      	b.n	74da <spi_init+0x216>
    755c:	00007045 	.word	0x00007045
    7560:	41004400 	.word	0x41004400
    7564:	000082d1 	.word	0x000082d1
    7568:	00006f3b 	.word	0x00006f3b
    756c:	000071bd 	.word	0x000071bd
    7570:	40000400 	.word	0x40000400
    7574:	000082b5 	.word	0x000082b5
    7578:	00008229 	.word	0x00008229
    757c:	00006ff9 	.word	0x00006ff9
    7580:	000083dd 	.word	0x000083dd
    7584:	41002000 	.word	0x41002000

00007588 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    7588:	b5f0      	push	{r4, r5, r6, r7, lr}
    758a:	46d6      	mov	lr, sl
    758c:	464f      	mov	r7, r9
    758e:	b580      	push	{r7, lr}
    7590:	b083      	sub	sp, #12
    7592:	468c      	mov	ip, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7594:	2617      	movs	r6, #23
	if (length == 0) {
    7596:	2a00      	cmp	r2, #0
    7598:	d105      	bne.n	75a6 <spi_read_buffer_wait+0x1e>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    759a:	0030      	movs	r0, r6
    759c:	b003      	add	sp, #12
    759e:	bc0c      	pop	{r2, r3}
    75a0:	4691      	mov	r9, r2
    75a2:	469a      	mov	sl, r3
    75a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    75a6:	79c1      	ldrb	r1, [r0, #7]
    75a8:	2900      	cmp	r1, #0
    75aa:	d140      	bne.n	762e <spi_read_buffer_wait+0xa6>
		return STATUS_ERR_DENIED;
    75ac:	3605      	adds	r6, #5
    75ae:	e7f4      	b.n	759a <spi_read_buffer_wait+0x12>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    75b0:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    75b2:	7e21      	ldrb	r1, [r4, #24]
			while (!spi_is_ready_to_write(module)) {
    75b4:	4239      	tst	r1, r7
    75b6:	d0fc      	beq.n	75b2 <spi_read_buffer_wait+0x2a>
    75b8:	7e21      	ldrb	r1, [r4, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    75ba:	4239      	tst	r1, r7
    75bc:	d019      	beq.n	75f2 <spi_read_buffer_wait+0x6a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    75be:	4649      	mov	r1, r9
    75c0:	62a1      	str	r1, [r4, #40]	; 0x28
    75c2:	e016      	b.n	75f2 <spi_read_buffer_wait+0x6a>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    75c4:	7981      	ldrb	r1, [r0, #6]
    75c6:	2901      	cmp	r1, #1
    75c8:	d023      	beq.n	7612 <spi_read_buffer_wait+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    75ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    75cc:	b2f6      	uxtb	r6, r6
		if (retval != STATUS_OK) {
    75ce:	9901      	ldr	r1, [sp, #4]
    75d0:	2900      	cmp	r1, #0
    75d2:	d137      	bne.n	7644 <spi_read_buffer_wait+0xbc>
		rx_data[rx_pos++] = received_data;
    75d4:	1c69      	adds	r1, r5, #1
    75d6:	b289      	uxth	r1, r1
    75d8:	4664      	mov	r4, ip
    75da:	5566      	strb	r6, [r4, r5]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    75dc:	7984      	ldrb	r4, [r0, #6]
    75de:	2c01      	cmp	r4, #1
    75e0:	d01b      	beq.n	761a <spi_read_buffer_wait+0x92>
		rx_data[rx_pos++] = received_data;
    75e2:	000d      	movs	r5, r1
	while (length--) {
    75e4:	3a01      	subs	r2, #1
    75e6:	b292      	uxth	r2, r2
    75e8:	4552      	cmp	r2, sl
    75ea:	d01c      	beq.n	7626 <spi_read_buffer_wait+0x9e>
		if (module->mode == SPI_MODE_MASTER) {
    75ec:	7941      	ldrb	r1, [r0, #5]
    75ee:	2901      	cmp	r1, #1
    75f0:	d0de      	beq.n	75b0 <spi_read_buffer_wait+0x28>
	SercomSpi *const spi_module = &(module->hw->SPI);
    75f2:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    75f4:	7e21      	ldrb	r1, [r4, #24]
		while (!spi_is_ready_to_read(module)) {
    75f6:	4219      	tst	r1, r3
    75f8:	d0fc      	beq.n	75f4 <spi_read_buffer_wait+0x6c>
    75fa:	7e21      	ldrb	r1, [r4, #24]
	if (!spi_is_ready_to_read(module)) {
    75fc:	4219      	tst	r1, r3
    75fe:	d014      	beq.n	762a <spi_read_buffer_wait+0xa2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7600:	8b61      	ldrh	r1, [r4, #26]
	enum status_code retval = STATUS_OK;
    7602:	2600      	movs	r6, #0
    7604:	9601      	str	r6, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7606:	4219      	tst	r1, r3
    7608:	d0dc      	beq.n	75c4 <spi_read_buffer_wait+0x3c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    760a:	8363      	strh	r3, [r4, #26]
		retval = STATUS_ERR_OVERFLOW;
    760c:	211e      	movs	r1, #30
    760e:	9101      	str	r1, [sp, #4]
    7610:	e7d8      	b.n	75c4 <spi_read_buffer_wait+0x3c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7612:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    7614:	05e4      	lsls	r4, r4, #23
    7616:	0de6      	lsrs	r6, r4, #23
    7618:	e7d9      	b.n	75ce <spi_read_buffer_wait+0x46>
			rx_data[rx_pos++] = (received_data >> 8);
    761a:	3502      	adds	r5, #2
    761c:	b2ad      	uxth	r5, r5
    761e:	0a34      	lsrs	r4, r6, #8
    7620:	4666      	mov	r6, ip
    7622:	5474      	strb	r4, [r6, r1]
    7624:	e7de      	b.n	75e4 <spi_read_buffer_wait+0x5c>
    7626:	9e01      	ldr	r6, [sp, #4]
    7628:	e7b7      	b.n	759a <spi_read_buffer_wait+0x12>
		return STATUS_ERR_IO;
    762a:	2610      	movs	r6, #16
    762c:	e7b5      	b.n	759a <spi_read_buffer_wait+0x12>
	while (length--) {
    762e:	3a01      	subs	r2, #1
    7630:	b292      	uxth	r2, r2
    7632:	2500      	movs	r5, #0
			while (!spi_is_ready_to_write(module)) {
    7634:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7636:	05db      	lsls	r3, r3, #23
    7638:	0ddb      	lsrs	r3, r3, #23
    763a:	4699      	mov	r9, r3
		while (!spi_is_ready_to_read(module)) {
    763c:	2304      	movs	r3, #4
	while (length--) {
    763e:	4902      	ldr	r1, [pc, #8]	; (7648 <spi_read_buffer_wait+0xc0>)
    7640:	468a      	mov	sl, r1
    7642:	e7d3      	b.n	75ec <spi_read_buffer_wait+0x64>
    7644:	9e01      	ldr	r6, [sp, #4]
    7646:	e7a8      	b.n	759a <spi_read_buffer_wait+0x12>
    7648:	0000ffff 	.word	0x0000ffff

0000764c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    764c:	b5f0      	push	{r4, r5, r6, r7, lr}
    764e:	46de      	mov	lr, fp
    7650:	4657      	mov	r7, sl
    7652:	464e      	mov	r6, r9
    7654:	4645      	mov	r5, r8
    7656:	b5e0      	push	{r5, r6, r7, lr}
    7658:	b083      	sub	sp, #12
    765a:	468a      	mov	sl, r1
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    765c:	2317      	movs	r3, #23
	if (length == 0) {
    765e:	2a00      	cmp	r2, #0
    7660:	d14b      	bne.n	76fa <spi_write_buffer_wait+0xae>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    7662:	0018      	movs	r0, r3
    7664:	b003      	add	sp, #12
    7666:	bc3c      	pop	{r2, r3, r4, r5}
    7668:	4690      	mov	r8, r2
    766a:	4699      	mov	r9, r3
    766c:	46a2      	mov	sl, r4
    766e:	46ab      	mov	fp, r5
    7670:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    7672:	3702      	adds	r7, #2
    7674:	b2bf      	uxth	r7, r7
    7676:	4641      	mov	r1, r8
    7678:	4653      	mov	r3, sl
    767a:	5c59      	ldrb	r1, [r3, r1]
    767c:	0209      	lsls	r1, r1, #8
    767e:	465b      	mov	r3, fp
    7680:	430b      	orrs	r3, r1
    7682:	e018      	b.n	76b6 <spi_write_buffer_wait+0x6a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7684:	7983      	ldrb	r3, [r0, #6]
    7686:	2b01      	cmp	r3, #1
    7688:	d02a      	beq.n	76e0 <spi_write_buffer_wait+0x94>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    768a:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    768c:	3e01      	subs	r6, #1
    768e:	b2b6      	uxth	r6, r6
    7690:	4566      	cmp	r6, ip
    7692:	d027      	beq.n	76e4 <spi_write_buffer_wait+0x98>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7694:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7696:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    7698:	4223      	tst	r3, r4
    769a:	d0fc      	beq.n	7696 <spi_write_buffer_wait+0x4a>
		uint16_t data_to_send = tx_data[tx_pos++];
    769c:	1c7b      	adds	r3, r7, #1
    769e:	b29b      	uxth	r3, r3
    76a0:	4698      	mov	r8, r3
    76a2:	4653      	mov	r3, sl
    76a4:	5ddb      	ldrb	r3, [r3, r7]
    76a6:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    76a8:	7981      	ldrb	r1, [r0, #6]
    76aa:	2901      	cmp	r1, #1
    76ac:	d0e1      	beq.n	7672 <spi_write_buffer_wait+0x26>
		uint16_t data_to_send = tx_data[tx_pos++];
    76ae:	4669      	mov	r1, sp
    76b0:	80cb      	strh	r3, [r1, #6]
    76b2:	88cb      	ldrh	r3, [r1, #6]
    76b4:	4647      	mov	r7, r8
    76b6:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    76b8:	4221      	tst	r1, r4
    76ba:	d002      	beq.n	76c2 <spi_write_buffer_wait+0x76>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    76bc:	05db      	lsls	r3, r3, #23
    76be:	0ddb      	lsrs	r3, r3, #23
    76c0:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    76c2:	79c3      	ldrb	r3, [r0, #7]
    76c4:	2b00      	cmp	r3, #0
    76c6:	d0e1      	beq.n	768c <spi_write_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
    76c8:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    76ca:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    76cc:	422b      	tst	r3, r5
    76ce:	d0fc      	beq.n	76ca <spi_write_buffer_wait+0x7e>
    76d0:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    76d2:	422b      	tst	r3, r5
    76d4:	d0da      	beq.n	768c <spi_write_buffer_wait+0x40>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    76d6:	8b53      	ldrh	r3, [r2, #26]
    76d8:	422b      	tst	r3, r5
    76da:	d0d3      	beq.n	7684 <spi_write_buffer_wait+0x38>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    76dc:	8355      	strh	r5, [r2, #26]
    76de:	e7d1      	b.n	7684 <spi_write_buffer_wait+0x38>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    76e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    76e2:	e7d3      	b.n	768c <spi_write_buffer_wait+0x40>
	if (module->mode == SPI_MODE_MASTER) {
    76e4:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    76e6:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    76e8:	2a01      	cmp	r2, #1
    76ea:	d1ba      	bne.n	7662 <spi_write_buffer_wait+0x16>
	SercomSpi *const spi_module = &(module->hw->SPI);
    76ec:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    76ee:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    76f0:	7e0b      	ldrb	r3, [r1, #24]
    76f2:	4213      	tst	r3, r2
    76f4:	d0fc      	beq.n	76f0 <spi_write_buffer_wait+0xa4>
	return STATUS_OK;
    76f6:	2300      	movs	r3, #0
    76f8:	e7b3      	b.n	7662 <spi_write_buffer_wait+0x16>
	while (length--) {
    76fa:	3a01      	subs	r2, #1
    76fc:	b296      	uxth	r6, r2
    76fe:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    7700:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    7702:	2504      	movs	r5, #4
	while (length--) {
    7704:	4b01      	ldr	r3, [pc, #4]	; (770c <spi_write_buffer_wait+0xc0>)
    7706:	469c      	mov	ip, r3
    7708:	e7c4      	b.n	7694 <spi_write_buffer_wait+0x48>
    770a:	46c0      	nop			; (mov r8, r8)
    770c:	0000ffff 	.word	0x0000ffff

00007710 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    7710:	b5f0      	push	{r4, r5, r6, r7, lr}
    7712:	46de      	mov	lr, fp
    7714:	4657      	mov	r7, sl
    7716:	464e      	mov	r6, r9
    7718:	4645      	mov	r5, r8
    771a:	b5e0      	push	{r5, r6, r7, lr}
    771c:	b091      	sub	sp, #68	; 0x44
    771e:	0005      	movs	r5, r0
    7720:	000c      	movs	r4, r1
    7722:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    7724:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7726:	0008      	movs	r0, r1
    7728:	4bbc      	ldr	r3, [pc, #752]	; (7a1c <usart_init+0x30c>)
    772a:	4798      	blx	r3
    772c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    772e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    7730:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    7732:	07db      	lsls	r3, r3, #31
    7734:	d506      	bpl.n	7744 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    7736:	b011      	add	sp, #68	; 0x44
    7738:	bc3c      	pop	{r2, r3, r4, r5}
    773a:	4690      	mov	r8, r2
    773c:	4699      	mov	r9, r3
    773e:	46a2      	mov	sl, r4
    7740:	46ab      	mov	fp, r5
    7742:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    7744:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    7746:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    7748:	079b      	lsls	r3, r3, #30
    774a:	d4f4      	bmi.n	7736 <usart_init+0x26>
    774c:	49b4      	ldr	r1, [pc, #720]	; (7a20 <usart_init+0x310>)
    774e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    7750:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    7752:	2301      	movs	r3, #1
    7754:	40bb      	lsls	r3, r7
    7756:	4303      	orrs	r3, r0
    7758:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    775a:	a90f      	add	r1, sp, #60	; 0x3c
    775c:	272d      	movs	r7, #45	; 0x2d
    775e:	5df3      	ldrb	r3, [r6, r7]
    7760:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7762:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7764:	b2d3      	uxtb	r3, r2
    7766:	9302      	str	r3, [sp, #8]
    7768:	0018      	movs	r0, r3
    776a:	4bae      	ldr	r3, [pc, #696]	; (7a24 <usart_init+0x314>)
    776c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    776e:	9802      	ldr	r0, [sp, #8]
    7770:	4bad      	ldr	r3, [pc, #692]	; (7a28 <usart_init+0x318>)
    7772:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7774:	5df0      	ldrb	r0, [r6, r7]
    7776:	2100      	movs	r1, #0
    7778:	4bac      	ldr	r3, [pc, #688]	; (7a2c <usart_init+0x31c>)
    777a:	4798      	blx	r3
	module->character_size = config->character_size;
    777c:	7af3      	ldrb	r3, [r6, #11]
    777e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    7780:	2324      	movs	r3, #36	; 0x24
    7782:	5cf3      	ldrb	r3, [r6, r3]
    7784:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    7786:	2325      	movs	r3, #37	; 0x25
    7788:	5cf3      	ldrb	r3, [r6, r3]
    778a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    778c:	7ef3      	ldrb	r3, [r6, #27]
    778e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    7790:	7f33      	ldrb	r3, [r6, #28]
    7792:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7794:	682b      	ldr	r3, [r5, #0]
    7796:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7798:	0018      	movs	r0, r3
    779a:	4ba0      	ldr	r3, [pc, #640]	; (7a1c <usart_init+0x30c>)
    779c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    779e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    77a0:	2200      	movs	r2, #0
    77a2:	230e      	movs	r3, #14
    77a4:	a906      	add	r1, sp, #24
    77a6:	468c      	mov	ip, r1
    77a8:	4463      	add	r3, ip
    77aa:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    77ac:	8a32      	ldrh	r2, [r6, #16]
    77ae:	9202      	str	r2, [sp, #8]
    77b0:	2380      	movs	r3, #128	; 0x80
    77b2:	01db      	lsls	r3, r3, #7
    77b4:	429a      	cmp	r2, r3
    77b6:	d100      	bne.n	77ba <usart_init+0xaa>
    77b8:	e09e      	b.n	78f8 <usart_init+0x1e8>
    77ba:	d90f      	bls.n	77dc <usart_init+0xcc>
    77bc:	23c0      	movs	r3, #192	; 0xc0
    77be:	01db      	lsls	r3, r3, #7
    77c0:	9a02      	ldr	r2, [sp, #8]
    77c2:	429a      	cmp	r2, r3
    77c4:	d100      	bne.n	77c8 <usart_init+0xb8>
    77c6:	e092      	b.n	78ee <usart_init+0x1de>
    77c8:	2380      	movs	r3, #128	; 0x80
    77ca:	021b      	lsls	r3, r3, #8
    77cc:	429a      	cmp	r2, r3
    77ce:	d000      	beq.n	77d2 <usart_init+0xc2>
    77d0:	e11f      	b.n	7a12 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    77d2:	2303      	movs	r3, #3
    77d4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    77d6:	2300      	movs	r3, #0
    77d8:	9307      	str	r3, [sp, #28]
    77da:	e008      	b.n	77ee <usart_init+0xde>
	switch (config->sample_rate) {
    77dc:	2380      	movs	r3, #128	; 0x80
    77de:	019b      	lsls	r3, r3, #6
    77e0:	429a      	cmp	r2, r3
    77e2:	d000      	beq.n	77e6 <usart_init+0xd6>
    77e4:	e115      	b.n	7a12 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    77e6:	2310      	movs	r3, #16
    77e8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    77ea:	3b0f      	subs	r3, #15
    77ec:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    77ee:	6833      	ldr	r3, [r6, #0]
    77f0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    77f2:	68f3      	ldr	r3, [r6, #12]
    77f4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    77f6:	6973      	ldr	r3, [r6, #20]
    77f8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    77fa:	7e33      	ldrb	r3, [r6, #24]
    77fc:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    77fe:	2326      	movs	r3, #38	; 0x26
    7800:	5cf3      	ldrb	r3, [r6, r3]
    7802:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    7804:	6873      	ldr	r3, [r6, #4]
    7806:	4699      	mov	r9, r3
	switch (transfer_mode)
    7808:	2b00      	cmp	r3, #0
    780a:	d100      	bne.n	780e <usart_init+0xfe>
    780c:	e0a0      	b.n	7950 <usart_init+0x240>
    780e:	2380      	movs	r3, #128	; 0x80
    7810:	055b      	lsls	r3, r3, #21
    7812:	4599      	cmp	r9, r3
    7814:	d100      	bne.n	7818 <usart_init+0x108>
    7816:	e084      	b.n	7922 <usart_init+0x212>
	if(config->encoding_format_enable) {
    7818:	7e73      	ldrb	r3, [r6, #25]
    781a:	2b00      	cmp	r3, #0
    781c:	d002      	beq.n	7824 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    781e:	7eb3      	ldrb	r3, [r6, #26]
    7820:	4642      	mov	r2, r8
    7822:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7824:	682a      	ldr	r2, [r5, #0]
    7826:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    7828:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    782a:	2b00      	cmp	r3, #0
    782c:	d1fc      	bne.n	7828 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    782e:	330e      	adds	r3, #14
    7830:	aa06      	add	r2, sp, #24
    7832:	4694      	mov	ip, r2
    7834:	4463      	add	r3, ip
    7836:	881b      	ldrh	r3, [r3, #0]
    7838:	4642      	mov	r2, r8
    783a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    783c:	9b05      	ldr	r3, [sp, #20]
    783e:	9a03      	ldr	r2, [sp, #12]
    7840:	4313      	orrs	r3, r2
    7842:	9a04      	ldr	r2, [sp, #16]
    7844:	4313      	orrs	r3, r2
    7846:	464a      	mov	r2, r9
    7848:	4313      	orrs	r3, r2
    784a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    784c:	465b      	mov	r3, fp
    784e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    7850:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    7852:	4653      	mov	r3, sl
    7854:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    7856:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    7858:	2327      	movs	r3, #39	; 0x27
    785a:	5cf3      	ldrb	r3, [r6, r3]
    785c:	2b00      	cmp	r3, #0
    785e:	d101      	bne.n	7864 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    7860:	3304      	adds	r3, #4
    7862:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    7864:	7e73      	ldrb	r3, [r6, #25]
    7866:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    7868:	7f32      	ldrb	r2, [r6, #28]
    786a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    786c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    786e:	7f72      	ldrb	r2, [r6, #29]
    7870:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    7872:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    7874:	2224      	movs	r2, #36	; 0x24
    7876:	5cb2      	ldrb	r2, [r6, r2]
    7878:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    787a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    787c:	2225      	movs	r2, #37	; 0x25
    787e:	5cb2      	ldrb	r2, [r6, r2]
    7880:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    7882:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    7884:	7ab1      	ldrb	r1, [r6, #10]
    7886:	7af2      	ldrb	r2, [r6, #11]
    7888:	4311      	orrs	r1, r2
    788a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    788c:	8933      	ldrh	r3, [r6, #8]
    788e:	2bff      	cmp	r3, #255	; 0xff
    7890:	d100      	bne.n	7894 <usart_init+0x184>
    7892:	e081      	b.n	7998 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    7894:	2280      	movs	r2, #128	; 0x80
    7896:	0452      	lsls	r2, r2, #17
    7898:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    789a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    789c:	232c      	movs	r3, #44	; 0x2c
    789e:	5cf3      	ldrb	r3, [r6, r3]
    78a0:	2b00      	cmp	r3, #0
    78a2:	d103      	bne.n	78ac <usart_init+0x19c>
    78a4:	4b62      	ldr	r3, [pc, #392]	; (7a30 <usart_init+0x320>)
    78a6:	789b      	ldrb	r3, [r3, #2]
    78a8:	079b      	lsls	r3, r3, #30
    78aa:	d501      	bpl.n	78b0 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    78ac:	2380      	movs	r3, #128	; 0x80
    78ae:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    78b0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    78b2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    78b4:	2b00      	cmp	r3, #0
    78b6:	d1fc      	bne.n	78b2 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    78b8:	4643      	mov	r3, r8
    78ba:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    78bc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    78be:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    78c0:	2b00      	cmp	r3, #0
    78c2:	d1fc      	bne.n	78be <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    78c4:	4643      	mov	r3, r8
    78c6:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    78c8:	ab0e      	add	r3, sp, #56	; 0x38
    78ca:	2280      	movs	r2, #128	; 0x80
    78cc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    78ce:	2200      	movs	r2, #0
    78d0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    78d2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    78d4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    78d6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    78d8:	930a      	str	r3, [sp, #40]	; 0x28
    78da:	6b73      	ldr	r3, [r6, #52]	; 0x34
    78dc:	930b      	str	r3, [sp, #44]	; 0x2c
    78de:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    78e0:	930c      	str	r3, [sp, #48]	; 0x30
    78e2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    78e4:	9302      	str	r3, [sp, #8]
    78e6:	930d      	str	r3, [sp, #52]	; 0x34
    78e8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    78ea:	ae0a      	add	r6, sp, #40	; 0x28
    78ec:	e063      	b.n	79b6 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    78ee:	2308      	movs	r3, #8
    78f0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    78f2:	3b07      	subs	r3, #7
    78f4:	9307      	str	r3, [sp, #28]
    78f6:	e77a      	b.n	77ee <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    78f8:	6833      	ldr	r3, [r6, #0]
    78fa:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    78fc:	68f3      	ldr	r3, [r6, #12]
    78fe:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    7900:	6973      	ldr	r3, [r6, #20]
    7902:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    7904:	7e33      	ldrb	r3, [r6, #24]
    7906:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    7908:	2326      	movs	r3, #38	; 0x26
    790a:	5cf3      	ldrb	r3, [r6, r3]
    790c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    790e:	6873      	ldr	r3, [r6, #4]
    7910:	4699      	mov	r9, r3
	switch (transfer_mode)
    7912:	2b00      	cmp	r3, #0
    7914:	d018      	beq.n	7948 <usart_init+0x238>
    7916:	2380      	movs	r3, #128	; 0x80
    7918:	055b      	lsls	r3, r3, #21
    791a:	4599      	cmp	r9, r3
    791c:	d001      	beq.n	7922 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    791e:	2000      	movs	r0, #0
    7920:	e025      	b.n	796e <usart_init+0x25e>
			if (!config->use_external_clock) {
    7922:	2327      	movs	r3, #39	; 0x27
    7924:	5cf3      	ldrb	r3, [r6, r3]
    7926:	2b00      	cmp	r3, #0
    7928:	d000      	beq.n	792c <usart_init+0x21c>
    792a:	e775      	b.n	7818 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    792c:	6a33      	ldr	r3, [r6, #32]
    792e:	001f      	movs	r7, r3
    7930:	b2c0      	uxtb	r0, r0
    7932:	4b40      	ldr	r3, [pc, #256]	; (7a34 <usart_init+0x324>)
    7934:	4798      	blx	r3
    7936:	0001      	movs	r1, r0
    7938:	220e      	movs	r2, #14
    793a:	ab06      	add	r3, sp, #24
    793c:	469c      	mov	ip, r3
    793e:	4462      	add	r2, ip
    7940:	0038      	movs	r0, r7
    7942:	4b3d      	ldr	r3, [pc, #244]	; (7a38 <usart_init+0x328>)
    7944:	4798      	blx	r3
    7946:	e012      	b.n	796e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7948:	2308      	movs	r3, #8
    794a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    794c:	2300      	movs	r3, #0
    794e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    7950:	2327      	movs	r3, #39	; 0x27
    7952:	5cf3      	ldrb	r3, [r6, r3]
    7954:	2b00      	cmp	r3, #0
    7956:	d00e      	beq.n	7976 <usart_init+0x266>
				status_code =
    7958:	9b06      	ldr	r3, [sp, #24]
    795a:	9300      	str	r3, [sp, #0]
    795c:	9b07      	ldr	r3, [sp, #28]
    795e:	220e      	movs	r2, #14
    7960:	a906      	add	r1, sp, #24
    7962:	468c      	mov	ip, r1
    7964:	4462      	add	r2, ip
    7966:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    7968:	6a30      	ldr	r0, [r6, #32]
    796a:	4f34      	ldr	r7, [pc, #208]	; (7a3c <usart_init+0x32c>)
    796c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    796e:	2800      	cmp	r0, #0
    7970:	d000      	beq.n	7974 <usart_init+0x264>
    7972:	e6e0      	b.n	7736 <usart_init+0x26>
    7974:	e750      	b.n	7818 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    7976:	6a33      	ldr	r3, [r6, #32]
    7978:	001f      	movs	r7, r3
    797a:	b2c0      	uxtb	r0, r0
    797c:	4b2d      	ldr	r3, [pc, #180]	; (7a34 <usart_init+0x324>)
    797e:	4798      	blx	r3
    7980:	0001      	movs	r1, r0
				status_code =
    7982:	9b06      	ldr	r3, [sp, #24]
    7984:	9300      	str	r3, [sp, #0]
    7986:	9b07      	ldr	r3, [sp, #28]
    7988:	220e      	movs	r2, #14
    798a:	a806      	add	r0, sp, #24
    798c:	4684      	mov	ip, r0
    798e:	4462      	add	r2, ip
    7990:	0038      	movs	r0, r7
    7992:	4f2a      	ldr	r7, [pc, #168]	; (7a3c <usart_init+0x32c>)
    7994:	47b8      	blx	r7
    7996:	e7ea      	b.n	796e <usart_init+0x25e>
		if(config->lin_slave_enable) {
    7998:	7ef3      	ldrb	r3, [r6, #27]
    799a:	2b00      	cmp	r3, #0
    799c:	d100      	bne.n	79a0 <usart_init+0x290>
    799e:	e77d      	b.n	789c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    79a0:	2380      	movs	r3, #128	; 0x80
    79a2:	04db      	lsls	r3, r3, #19
    79a4:	431f      	orrs	r7, r3
    79a6:	e779      	b.n	789c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    79a8:	0020      	movs	r0, r4
    79aa:	4b25      	ldr	r3, [pc, #148]	; (7a40 <usart_init+0x330>)
    79ac:	4798      	blx	r3
    79ae:	e007      	b.n	79c0 <usart_init+0x2b0>
    79b0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    79b2:	2f04      	cmp	r7, #4
    79b4:	d00d      	beq.n	79d2 <usart_init+0x2c2>
    79b6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    79b8:	00bb      	lsls	r3, r7, #2
    79ba:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    79bc:	2800      	cmp	r0, #0
    79be:	d0f3      	beq.n	79a8 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    79c0:	1c43      	adds	r3, r0, #1
    79c2:	d0f5      	beq.n	79b0 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    79c4:	a90e      	add	r1, sp, #56	; 0x38
    79c6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    79c8:	0c00      	lsrs	r0, r0, #16
    79ca:	b2c0      	uxtb	r0, r0
    79cc:	4b1d      	ldr	r3, [pc, #116]	; (7a44 <usart_init+0x334>)
    79ce:	4798      	blx	r3
    79d0:	e7ee      	b.n	79b0 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    79d2:	2300      	movs	r3, #0
    79d4:	60eb      	str	r3, [r5, #12]
    79d6:	612b      	str	r3, [r5, #16]
    79d8:	616b      	str	r3, [r5, #20]
    79da:	61ab      	str	r3, [r5, #24]
    79dc:	61eb      	str	r3, [r5, #28]
    79de:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    79e0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    79e2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    79e4:	2200      	movs	r2, #0
    79e6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    79e8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    79ea:	3330      	adds	r3, #48	; 0x30
    79ec:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    79ee:	3301      	adds	r3, #1
    79f0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    79f2:	3301      	adds	r3, #1
    79f4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    79f6:	3301      	adds	r3, #1
    79f8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    79fa:	6828      	ldr	r0, [r5, #0]
    79fc:	4b07      	ldr	r3, [pc, #28]	; (7a1c <usart_init+0x30c>)
    79fe:	4798      	blx	r3
    7a00:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    7a02:	4911      	ldr	r1, [pc, #68]	; (7a48 <usart_init+0x338>)
    7a04:	4b11      	ldr	r3, [pc, #68]	; (7a4c <usart_init+0x33c>)
    7a06:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7a08:	00a4      	lsls	r4, r4, #2
    7a0a:	4b11      	ldr	r3, [pc, #68]	; (7a50 <usart_init+0x340>)
    7a0c:	50e5      	str	r5, [r4, r3]
	return status_code;
    7a0e:	2000      	movs	r0, #0
    7a10:	e691      	b.n	7736 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    7a12:	2310      	movs	r3, #16
    7a14:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7a16:	2300      	movs	r3, #0
    7a18:	9307      	str	r3, [sp, #28]
    7a1a:	e6e8      	b.n	77ee <usart_init+0xde>
    7a1c:	000071bd 	.word	0x000071bd
    7a20:	40000400 	.word	0x40000400
    7a24:	000082b5 	.word	0x000082b5
    7a28:	00008229 	.word	0x00008229
    7a2c:	00006ff9 	.word	0x00006ff9
    7a30:	41002000 	.word	0x41002000
    7a34:	000082d1 	.word	0x000082d1
    7a38:	00006f3b 	.word	0x00006f3b
    7a3c:	00006f65 	.word	0x00006f65
    7a40:	00007045 	.word	0x00007045
    7a44:	000083dd 	.word	0x000083dd
    7a48:	00007b55 	.word	0x00007b55
    7a4c:	000071f9 	.word	0x000071f9
    7a50:	20004e44 	.word	0x20004e44

00007a54 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    7a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a56:	0006      	movs	r6, r0
    7a58:	000c      	movs	r4, r1
    7a5a:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7a5c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    7a5e:	4b0a      	ldr	r3, [pc, #40]	; (7a88 <_usart_write_buffer+0x34>)
    7a60:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    7a62:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    7a64:	b29b      	uxth	r3, r3
    7a66:	2b00      	cmp	r3, #0
    7a68:	d003      	beq.n	7a72 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    7a6a:	4b08      	ldr	r3, [pc, #32]	; (7a8c <_usart_write_buffer+0x38>)
    7a6c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    7a6e:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    7a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    7a72:	85f5      	strh	r5, [r6, #46]	; 0x2e
    7a74:	4b05      	ldr	r3, [pc, #20]	; (7a8c <_usart_write_buffer+0x38>)
    7a76:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    7a78:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    7a7a:	2205      	movs	r2, #5
    7a7c:	2333      	movs	r3, #51	; 0x33
    7a7e:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    7a80:	3b32      	subs	r3, #50	; 0x32
    7a82:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    7a84:	2000      	movs	r0, #0
    7a86:	e7f3      	b.n	7a70 <_usart_write_buffer+0x1c>
    7a88:	00006c99 	.word	0x00006c99
    7a8c:	00006cd9 	.word	0x00006cd9

00007a90 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    7a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a92:	0004      	movs	r4, r0
    7a94:	000d      	movs	r5, r1
    7a96:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7a98:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    7a9a:	4b0f      	ldr	r3, [pc, #60]	; (7ad8 <_usart_read_buffer+0x48>)
    7a9c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    7a9e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    7aa0:	b29b      	uxth	r3, r3
    7aa2:	2b00      	cmp	r3, #0
    7aa4:	d003      	beq.n	7aae <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    7aa6:	4b0d      	ldr	r3, [pc, #52]	; (7adc <_usart_read_buffer+0x4c>)
    7aa8:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    7aaa:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    7aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    7aae:	85a6      	strh	r6, [r4, #44]	; 0x2c
    7ab0:	4b0a      	ldr	r3, [pc, #40]	; (7adc <_usart_read_buffer+0x4c>)
    7ab2:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    7ab4:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    7ab6:	2205      	movs	r2, #5
    7ab8:	2332      	movs	r3, #50	; 0x32
    7aba:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    7abc:	3b2e      	subs	r3, #46	; 0x2e
    7abe:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    7ac0:	7a23      	ldrb	r3, [r4, #8]
    7ac2:	2b00      	cmp	r3, #0
    7ac4:	d001      	beq.n	7aca <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    7ac6:	2320      	movs	r3, #32
    7ac8:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    7aca:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    7acc:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    7ace:	2b00      	cmp	r3, #0
    7ad0:	d0ec      	beq.n	7aac <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    7ad2:	2308      	movs	r3, #8
    7ad4:	75bb      	strb	r3, [r7, #22]
    7ad6:	e7e9      	b.n	7aac <_usart_read_buffer+0x1c>
    7ad8:	00006c99 	.word	0x00006c99
    7adc:	00006cd9 	.word	0x00006cd9

00007ae0 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    7ae0:	1c93      	adds	r3, r2, #2
    7ae2:	009b      	lsls	r3, r3, #2
    7ae4:	18c3      	adds	r3, r0, r3
    7ae6:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    7ae8:	2130      	movs	r1, #48	; 0x30
    7aea:	2301      	movs	r3, #1
    7aec:	4093      	lsls	r3, r2
    7aee:	001a      	movs	r2, r3
    7af0:	5c43      	ldrb	r3, [r0, r1]
    7af2:	4313      	orrs	r3, r2
    7af4:	5443      	strb	r3, [r0, r1]
}
    7af6:	4770      	bx	lr

00007af8 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    7af8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7afa:	2317      	movs	r3, #23
	if (length == 0) {
    7afc:	2a00      	cmp	r2, #0
    7afe:	d101      	bne.n	7b04 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    7b00:	0018      	movs	r0, r3
    7b02:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    7b04:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    7b06:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    7b08:	2c00      	cmp	r4, #0
    7b0a:	d0f9      	beq.n	7b00 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    7b0c:	4b01      	ldr	r3, [pc, #4]	; (7b14 <usart_write_buffer_job+0x1c>)
    7b0e:	4798      	blx	r3
    7b10:	0003      	movs	r3, r0
    7b12:	e7f5      	b.n	7b00 <usart_write_buffer_job+0x8>
    7b14:	00007a55 	.word	0x00007a55

00007b18 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    7b18:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7b1a:	2317      	movs	r3, #23
	if (length == 0) {
    7b1c:	2a00      	cmp	r2, #0
    7b1e:	d101      	bne.n	7b24 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    7b20:	0018      	movs	r0, r3
    7b22:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    7b24:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    7b26:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    7b28:	2c00      	cmp	r4, #0
    7b2a:	d0f9      	beq.n	7b20 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    7b2c:	4b01      	ldr	r3, [pc, #4]	; (7b34 <usart_read_buffer_job+0x1c>)
    7b2e:	4798      	blx	r3
    7b30:	0003      	movs	r3, r0
    7b32:	e7f5      	b.n	7b20 <usart_read_buffer_job+0x8>
    7b34:	00007a91 	.word	0x00007a91

00007b38 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    7b38:	2900      	cmp	r1, #0
    7b3a:	d003      	beq.n	7b44 <usart_get_job_status+0xc>
    7b3c:	2901      	cmp	r1, #1
    7b3e:	d005      	beq.n	7b4c <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    7b40:	2017      	movs	r0, #23
    7b42:	e002      	b.n	7b4a <usart_get_job_status+0x12>
			status_code = module->rx_status;
    7b44:	2332      	movs	r3, #50	; 0x32
    7b46:	5cc0      	ldrb	r0, [r0, r3]
    7b48:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    7b4a:	4770      	bx	lr
			status_code = module->tx_status;
    7b4c:	2333      	movs	r3, #51	; 0x33
    7b4e:	5cc0      	ldrb	r0, [r0, r3]
    7b50:	b2c0      	uxtb	r0, r0
			break;
    7b52:	e7fa      	b.n	7b4a <usart_get_job_status+0x12>

00007b54 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    7b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    7b56:	0080      	lsls	r0, r0, #2
    7b58:	4b62      	ldr	r3, [pc, #392]	; (7ce4 <_usart_interrupt_handler+0x190>)
    7b5a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    7b5c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7b5e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    7b60:	2b00      	cmp	r3, #0
    7b62:	d1fc      	bne.n	7b5e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    7b64:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    7b66:	7da6      	ldrb	r6, [r4, #22]
    7b68:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    7b6a:	2330      	movs	r3, #48	; 0x30
    7b6c:	5ceb      	ldrb	r3, [r5, r3]
    7b6e:	2231      	movs	r2, #49	; 0x31
    7b70:	5caf      	ldrb	r7, [r5, r2]
    7b72:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    7b74:	07f3      	lsls	r3, r6, #31
    7b76:	d522      	bpl.n	7bbe <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    7b78:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    7b7a:	b29b      	uxth	r3, r3
    7b7c:	2b00      	cmp	r3, #0
    7b7e:	d01c      	beq.n	7bba <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7b80:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7b82:	7813      	ldrb	r3, [r2, #0]
    7b84:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    7b86:	1c51      	adds	r1, r2, #1
    7b88:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7b8a:	7969      	ldrb	r1, [r5, #5]
    7b8c:	2901      	cmp	r1, #1
    7b8e:	d00e      	beq.n	7bae <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7b90:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    7b92:	05db      	lsls	r3, r3, #23
    7b94:	0ddb      	lsrs	r3, r3, #23
    7b96:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    7b98:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    7b9a:	3b01      	subs	r3, #1
    7b9c:	b29b      	uxth	r3, r3
    7b9e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    7ba0:	2b00      	cmp	r3, #0
    7ba2:	d10c      	bne.n	7bbe <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    7ba4:	3301      	adds	r3, #1
    7ba6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    7ba8:	3301      	adds	r3, #1
    7baa:	75a3      	strb	r3, [r4, #22]
    7bac:	e007      	b.n	7bbe <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    7bae:	7851      	ldrb	r1, [r2, #1]
    7bb0:	0209      	lsls	r1, r1, #8
    7bb2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    7bb4:	3202      	adds	r2, #2
    7bb6:	62aa      	str	r2, [r5, #40]	; 0x28
    7bb8:	e7eb      	b.n	7b92 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    7bba:	2301      	movs	r3, #1
    7bbc:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    7bbe:	07b3      	lsls	r3, r6, #30
    7bc0:	d506      	bpl.n	7bd0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    7bc2:	2302      	movs	r3, #2
    7bc4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    7bc6:	2200      	movs	r2, #0
    7bc8:	3331      	adds	r3, #49	; 0x31
    7bca:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    7bcc:	07fb      	lsls	r3, r7, #31
    7bce:	d41a      	bmi.n	7c06 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    7bd0:	0773      	lsls	r3, r6, #29
    7bd2:	d565      	bpl.n	7ca0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    7bd4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    7bd6:	b29b      	uxth	r3, r3
    7bd8:	2b00      	cmp	r3, #0
    7bda:	d05f      	beq.n	7c9c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7bdc:	8b63      	ldrh	r3, [r4, #26]
    7bde:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    7be0:	071a      	lsls	r2, r3, #28
    7be2:	d414      	bmi.n	7c0e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7be4:	223f      	movs	r2, #63	; 0x3f
    7be6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    7be8:	2b00      	cmp	r3, #0
    7bea:	d034      	beq.n	7c56 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    7bec:	079a      	lsls	r2, r3, #30
    7bee:	d511      	bpl.n	7c14 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    7bf0:	221a      	movs	r2, #26
    7bf2:	2332      	movs	r3, #50	; 0x32
    7bf4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    7bf6:	3b30      	subs	r3, #48	; 0x30
    7bf8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    7bfa:	077b      	lsls	r3, r7, #29
    7bfc:	d550      	bpl.n	7ca0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    7bfe:	0028      	movs	r0, r5
    7c00:	696b      	ldr	r3, [r5, #20]
    7c02:	4798      	blx	r3
    7c04:	e04c      	b.n	7ca0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    7c06:	0028      	movs	r0, r5
    7c08:	68eb      	ldr	r3, [r5, #12]
    7c0a:	4798      	blx	r3
    7c0c:	e7e0      	b.n	7bd0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    7c0e:	2237      	movs	r2, #55	; 0x37
    7c10:	4013      	ands	r3, r2
    7c12:	e7e9      	b.n	7be8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    7c14:	075a      	lsls	r2, r3, #29
    7c16:	d505      	bpl.n	7c24 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    7c18:	221e      	movs	r2, #30
    7c1a:	2332      	movs	r3, #50	; 0x32
    7c1c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    7c1e:	3b2e      	subs	r3, #46	; 0x2e
    7c20:	8363      	strh	r3, [r4, #26]
    7c22:	e7ea      	b.n	7bfa <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7c24:	07da      	lsls	r2, r3, #31
    7c26:	d505      	bpl.n	7c34 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    7c28:	2213      	movs	r2, #19
    7c2a:	2332      	movs	r3, #50	; 0x32
    7c2c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    7c2e:	3b31      	subs	r3, #49	; 0x31
    7c30:	8363      	strh	r3, [r4, #26]
    7c32:	e7e2      	b.n	7bfa <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    7c34:	06da      	lsls	r2, r3, #27
    7c36:	d505      	bpl.n	7c44 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    7c38:	2242      	movs	r2, #66	; 0x42
    7c3a:	2332      	movs	r3, #50	; 0x32
    7c3c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    7c3e:	3b22      	subs	r3, #34	; 0x22
    7c40:	8363      	strh	r3, [r4, #26]
    7c42:	e7da      	b.n	7bfa <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    7c44:	2220      	movs	r2, #32
    7c46:	421a      	tst	r2, r3
    7c48:	d0d7      	beq.n	7bfa <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    7c4a:	3221      	adds	r2, #33	; 0x21
    7c4c:	2332      	movs	r3, #50	; 0x32
    7c4e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    7c50:	3b12      	subs	r3, #18
    7c52:	8363      	strh	r3, [r4, #26]
    7c54:	e7d1      	b.n	7bfa <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    7c56:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    7c58:	05db      	lsls	r3, r3, #23
    7c5a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    7c5c:	b2da      	uxtb	r2, r3
    7c5e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7c60:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    7c62:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    7c64:	1c51      	adds	r1, r2, #1
    7c66:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7c68:	7969      	ldrb	r1, [r5, #5]
    7c6a:	2901      	cmp	r1, #1
    7c6c:	d010      	beq.n	7c90 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    7c6e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    7c70:	3b01      	subs	r3, #1
    7c72:	b29b      	uxth	r3, r3
    7c74:	85ab      	strh	r3, [r5, #44]	; 0x2c
    7c76:	2b00      	cmp	r3, #0
    7c78:	d112      	bne.n	7ca0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7c7a:	3304      	adds	r3, #4
    7c7c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    7c7e:	2200      	movs	r2, #0
    7c80:	332e      	adds	r3, #46	; 0x2e
    7c82:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    7c84:	07bb      	lsls	r3, r7, #30
    7c86:	d50b      	bpl.n	7ca0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    7c88:	0028      	movs	r0, r5
    7c8a:	692b      	ldr	r3, [r5, #16]
    7c8c:	4798      	blx	r3
    7c8e:	e007      	b.n	7ca0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    7c90:	0a1b      	lsrs	r3, r3, #8
    7c92:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    7c94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7c96:	3301      	adds	r3, #1
    7c98:	626b      	str	r3, [r5, #36]	; 0x24
    7c9a:	e7e8      	b.n	7c6e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7c9c:	2304      	movs	r3, #4
    7c9e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    7ca0:	06f3      	lsls	r3, r6, #27
    7ca2:	d504      	bpl.n	7cae <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    7ca4:	2310      	movs	r3, #16
    7ca6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    7ca8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    7caa:	06fb      	lsls	r3, r7, #27
    7cac:	d40e      	bmi.n	7ccc <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    7cae:	06b3      	lsls	r3, r6, #26
    7cb0:	d504      	bpl.n	7cbc <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    7cb2:	2320      	movs	r3, #32
    7cb4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    7cb6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    7cb8:	073b      	lsls	r3, r7, #28
    7cba:	d40b      	bmi.n	7cd4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    7cbc:	0733      	lsls	r3, r6, #28
    7cbe:	d504      	bpl.n	7cca <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    7cc0:	2308      	movs	r3, #8
    7cc2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    7cc4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    7cc6:	06bb      	lsls	r3, r7, #26
    7cc8:	d408      	bmi.n	7cdc <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    7cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    7ccc:	0028      	movs	r0, r5
    7cce:	69eb      	ldr	r3, [r5, #28]
    7cd0:	4798      	blx	r3
    7cd2:	e7ec      	b.n	7cae <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    7cd4:	0028      	movs	r0, r5
    7cd6:	69ab      	ldr	r3, [r5, #24]
    7cd8:	4798      	blx	r3
    7cda:	e7ef      	b.n	7cbc <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    7cdc:	6a2b      	ldr	r3, [r5, #32]
    7cde:	0028      	movs	r0, r5
    7ce0:	4798      	blx	r3
}
    7ce2:	e7f2      	b.n	7cca <_usart_interrupt_handler+0x176>
    7ce4:	20004e44 	.word	0x20004e44

00007ce8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    7ce8:	b510      	push	{r4, lr}
	switch (clock_source) {
    7cea:	2808      	cmp	r0, #8
    7cec:	d803      	bhi.n	7cf6 <system_clock_source_get_hz+0xe>
    7cee:	0080      	lsls	r0, r0, #2
    7cf0:	4b1c      	ldr	r3, [pc, #112]	; (7d64 <system_clock_source_get_hz+0x7c>)
    7cf2:	581b      	ldr	r3, [r3, r0]
    7cf4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    7cf6:	2000      	movs	r0, #0
    7cf8:	e032      	b.n	7d60 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    7cfa:	4b1b      	ldr	r3, [pc, #108]	; (7d68 <system_clock_source_get_hz+0x80>)
    7cfc:	6918      	ldr	r0, [r3, #16]
    7cfe:	e02f      	b.n	7d60 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    7d00:	4b1a      	ldr	r3, [pc, #104]	; (7d6c <system_clock_source_get_hz+0x84>)
    7d02:	6a1b      	ldr	r3, [r3, #32]
    7d04:	059b      	lsls	r3, r3, #22
    7d06:	0f9b      	lsrs	r3, r3, #30
    7d08:	4819      	ldr	r0, [pc, #100]	; (7d70 <system_clock_source_get_hz+0x88>)
    7d0a:	40d8      	lsrs	r0, r3
    7d0c:	e028      	b.n	7d60 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    7d0e:	4b16      	ldr	r3, [pc, #88]	; (7d68 <system_clock_source_get_hz+0x80>)
    7d10:	6958      	ldr	r0, [r3, #20]
    7d12:	e025      	b.n	7d60 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    7d14:	4b14      	ldr	r3, [pc, #80]	; (7d68 <system_clock_source_get_hz+0x80>)
    7d16:	681b      	ldr	r3, [r3, #0]
			return 0;
    7d18:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    7d1a:	079b      	lsls	r3, r3, #30
    7d1c:	d520      	bpl.n	7d60 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7d1e:	4913      	ldr	r1, [pc, #76]	; (7d6c <system_clock_source_get_hz+0x84>)
    7d20:	2210      	movs	r2, #16
    7d22:	68cb      	ldr	r3, [r1, #12]
    7d24:	421a      	tst	r2, r3
    7d26:	d0fc      	beq.n	7d22 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    7d28:	4b0f      	ldr	r3, [pc, #60]	; (7d68 <system_clock_source_get_hz+0x80>)
    7d2a:	681a      	ldr	r2, [r3, #0]
    7d2c:	2324      	movs	r3, #36	; 0x24
    7d2e:	4013      	ands	r3, r2
    7d30:	2b04      	cmp	r3, #4
    7d32:	d001      	beq.n	7d38 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    7d34:	480f      	ldr	r0, [pc, #60]	; (7d74 <system_clock_source_get_hz+0x8c>)
    7d36:	e013      	b.n	7d60 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7d38:	2000      	movs	r0, #0
    7d3a:	4b0f      	ldr	r3, [pc, #60]	; (7d78 <system_clock_source_get_hz+0x90>)
    7d3c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    7d3e:	4b0a      	ldr	r3, [pc, #40]	; (7d68 <system_clock_source_get_hz+0x80>)
    7d40:	689b      	ldr	r3, [r3, #8]
    7d42:	041b      	lsls	r3, r3, #16
    7d44:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7d46:	4358      	muls	r0, r3
    7d48:	e00a      	b.n	7d60 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    7d4a:	2350      	movs	r3, #80	; 0x50
    7d4c:	4a07      	ldr	r2, [pc, #28]	; (7d6c <system_clock_source_get_hz+0x84>)
    7d4e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    7d50:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    7d52:	075b      	lsls	r3, r3, #29
    7d54:	d504      	bpl.n	7d60 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    7d56:	4b04      	ldr	r3, [pc, #16]	; (7d68 <system_clock_source_get_hz+0x80>)
    7d58:	68d8      	ldr	r0, [r3, #12]
    7d5a:	e001      	b.n	7d60 <system_clock_source_get_hz+0x78>
		return 32768UL;
    7d5c:	2080      	movs	r0, #128	; 0x80
    7d5e:	0200      	lsls	r0, r0, #8
	}
}
    7d60:	bd10      	pop	{r4, pc}
    7d62:	46c0      	nop			; (mov r8, r8)
    7d64:	0000e9d4 	.word	0x0000e9d4
    7d68:	2000389c 	.word	0x2000389c
    7d6c:	40000800 	.word	0x40000800
    7d70:	007a1200 	.word	0x007a1200
    7d74:	02dc6c00 	.word	0x02dc6c00
    7d78:	000082d1 	.word	0x000082d1

00007d7c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    7d7c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    7d7e:	490c      	ldr	r1, [pc, #48]	; (7db0 <system_clock_source_osc8m_set_config+0x34>)
    7d80:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    7d82:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    7d84:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    7d86:	7840      	ldrb	r0, [r0, #1]
    7d88:	2201      	movs	r2, #1
    7d8a:	4010      	ands	r0, r2
    7d8c:	0180      	lsls	r0, r0, #6
    7d8e:	2640      	movs	r6, #64	; 0x40
    7d90:	43b3      	bics	r3, r6
    7d92:	4303      	orrs	r3, r0
    7d94:	402a      	ands	r2, r5
    7d96:	01d2      	lsls	r2, r2, #7
    7d98:	2080      	movs	r0, #128	; 0x80
    7d9a:	4383      	bics	r3, r0
    7d9c:	4313      	orrs	r3, r2
    7d9e:	2203      	movs	r2, #3
    7da0:	4022      	ands	r2, r4
    7da2:	0212      	lsls	r2, r2, #8
    7da4:	4803      	ldr	r0, [pc, #12]	; (7db4 <system_clock_source_osc8m_set_config+0x38>)
    7da6:	4003      	ands	r3, r0
    7da8:	4313      	orrs	r3, r2
    7daa:	620b      	str	r3, [r1, #32]
}
    7dac:	bd70      	pop	{r4, r5, r6, pc}
    7dae:	46c0      	nop			; (mov r8, r8)
    7db0:	40000800 	.word	0x40000800
    7db4:	fffffcff 	.word	0xfffffcff

00007db8 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    7db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7dba:	0005      	movs	r5, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    7dbc:	68c4      	ldr	r4, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    7dbe:	7d03      	ldrb	r3, [r0, #20]
    7dc0:	2b01      	cmp	r3, #1
    7dc2:	d03b      	beq.n	7e3c <system_clock_source_dpll_set_config+0x84>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    7dc4:	68ab      	ldr	r3, [r5, #8]
    7dc6:	0118      	lsls	r0, r3, #4
    7dc8:	0021      	movs	r1, r4
    7dca:	4b20      	ldr	r3, [pc, #128]	; (7e4c <system_clock_source_dpll_set_config+0x94>)
    7dcc:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    7dce:	220f      	movs	r2, #15
    7dd0:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    7dd2:	0903      	lsrs	r3, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    7dd4:	782e      	ldrb	r6, [r5, #0]
    7dd6:	01f6      	lsls	r6, r6, #7
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    7dd8:	7869      	ldrb	r1, [r5, #1]
    7dda:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    7ddc:	430e      	orrs	r6, r1
    7dde:	b2f6      	uxtb	r6, r6
	SYSCTRL->DPLLCTRLA.reg =
    7de0:	491b      	ldr	r1, [pc, #108]	; (7e50 <system_clock_source_dpll_set_config+0x98>)
    7de2:	2744      	movs	r7, #68	; 0x44
    7de4:	55ce      	strb	r6, [r1, r7]

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    7de6:	0416      	lsls	r6, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    7de8:	3b01      	subs	r3, #1
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    7dea:	051b      	lsls	r3, r3, #20
    7dec:	0d1b      	lsrs	r3, r3, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    7dee:	4333      	orrs	r3, r6
	SYSCTRL->DPLLRATIO.reg =
    7df0:	648b      	str	r3, [r1, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    7df2:	78ab      	ldrb	r3, [r5, #2]
    7df4:	031b      	lsls	r3, r3, #12
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    7df6:	78ee      	ldrb	r6, [r5, #3]
    7df8:	00f6      	lsls	r6, r6, #3
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    7dfa:	4333      	orrs	r3, r6
    7dfc:	792e      	ldrb	r6, [r5, #4]
    7dfe:	00b6      	lsls	r6, r6, #2
    7e00:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    7e02:	7caf      	ldrb	r7, [r5, #18]
    7e04:	2603      	movs	r6, #3
    7e06:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    7e08:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    7e0a:	8a2e      	ldrh	r6, [r5, #16]
    7e0c:	0436      	lsls	r6, r6, #16
    7e0e:	4f11      	ldr	r7, [pc, #68]	; (7e54 <system_clock_source_dpll_set_config+0x9c>)
    7e10:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    7e12:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    7e14:	7cee      	ldrb	r6, [r5, #19]
    7e16:	0236      	lsls	r6, r6, #8
    7e18:	27e0      	movs	r7, #224	; 0xe0
    7e1a:	00ff      	lsls	r7, r7, #3
    7e1c:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    7e1e:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    7e20:	7d2e      	ldrb	r6, [r5, #20]
    7e22:	0136      	lsls	r6, r6, #4
    7e24:	2530      	movs	r5, #48	; 0x30
    7e26:	4035      	ands	r5, r6
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    7e28:	432b      	orrs	r3, r5
	SYSCTRL->DPLLCTRLB.reg =
    7e2a:	64cb      	str	r3, [r1, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    7e2c:	230f      	movs	r3, #15
    7e2e:	4398      	bics	r0, r3
    7e30:	1880      	adds	r0, r0, r2
    7e32:	4344      	muls	r4, r0
    7e34:	0924      	lsrs	r4, r4, #4
	_system_clock_inst.dpll.frequency =
    7e36:	4b08      	ldr	r3, [pc, #32]	; (7e58 <system_clock_source_dpll_set_config+0xa0>)
    7e38:	60dc      	str	r4, [r3, #12]
}
    7e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    7e3c:	8a01      	ldrh	r1, [r0, #16]
    7e3e:	3101      	adds	r1, #1
    7e40:	0049      	lsls	r1, r1, #1
    7e42:	0020      	movs	r0, r4
    7e44:	4b01      	ldr	r3, [pc, #4]	; (7e4c <system_clock_source_dpll_set_config+0x94>)
    7e46:	4798      	blx	r3
    7e48:	0004      	movs	r4, r0
    7e4a:	e7bb      	b.n	7dc4 <system_clock_source_dpll_set_config+0xc>
    7e4c:	0000ab0d 	.word	0x0000ab0d
    7e50:	40000800 	.word	0x40000800
    7e54:	07ff0000 	.word	0x07ff0000
    7e58:	2000389c 	.word	0x2000389c

00007e5c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    7e5c:	2808      	cmp	r0, #8
    7e5e:	d803      	bhi.n	7e68 <system_clock_source_enable+0xc>
    7e60:	0080      	lsls	r0, r0, #2
    7e62:	4b25      	ldr	r3, [pc, #148]	; (7ef8 <system_clock_source_enable+0x9c>)
    7e64:	581b      	ldr	r3, [r3, r0]
    7e66:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7e68:	2017      	movs	r0, #23
    7e6a:	e044      	b.n	7ef6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    7e6c:	4a23      	ldr	r2, [pc, #140]	; (7efc <system_clock_source_enable+0xa0>)
    7e6e:	6a13      	ldr	r3, [r2, #32]
    7e70:	2102      	movs	r1, #2
    7e72:	430b      	orrs	r3, r1
    7e74:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    7e76:	2000      	movs	r0, #0
    7e78:	e03d      	b.n	7ef6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    7e7a:	4a20      	ldr	r2, [pc, #128]	; (7efc <system_clock_source_enable+0xa0>)
    7e7c:	6993      	ldr	r3, [r2, #24]
    7e7e:	2102      	movs	r1, #2
    7e80:	430b      	orrs	r3, r1
    7e82:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    7e84:	2000      	movs	r0, #0
		break;
    7e86:	e036      	b.n	7ef6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    7e88:	4a1c      	ldr	r2, [pc, #112]	; (7efc <system_clock_source_enable+0xa0>)
    7e8a:	8a13      	ldrh	r3, [r2, #16]
    7e8c:	2102      	movs	r1, #2
    7e8e:	430b      	orrs	r3, r1
    7e90:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    7e92:	2000      	movs	r0, #0
		break;
    7e94:	e02f      	b.n	7ef6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    7e96:	4a19      	ldr	r2, [pc, #100]	; (7efc <system_clock_source_enable+0xa0>)
    7e98:	8a93      	ldrh	r3, [r2, #20]
    7e9a:	2102      	movs	r1, #2
    7e9c:	430b      	orrs	r3, r1
    7e9e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    7ea0:	2000      	movs	r0, #0
		break;
    7ea2:	e028      	b.n	7ef6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    7ea4:	4916      	ldr	r1, [pc, #88]	; (7f00 <system_clock_source_enable+0xa4>)
    7ea6:	680b      	ldr	r3, [r1, #0]
    7ea8:	2202      	movs	r2, #2
    7eaa:	4313      	orrs	r3, r2
    7eac:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    7eae:	4b13      	ldr	r3, [pc, #76]	; (7efc <system_clock_source_enable+0xa0>)
    7eb0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7eb2:	0019      	movs	r1, r3
    7eb4:	320e      	adds	r2, #14
    7eb6:	68cb      	ldr	r3, [r1, #12]
    7eb8:	421a      	tst	r2, r3
    7eba:	d0fc      	beq.n	7eb6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    7ebc:	4a10      	ldr	r2, [pc, #64]	; (7f00 <system_clock_source_enable+0xa4>)
    7ebe:	6891      	ldr	r1, [r2, #8]
    7ec0:	4b0e      	ldr	r3, [pc, #56]	; (7efc <system_clock_source_enable+0xa0>)
    7ec2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    7ec4:	6852      	ldr	r2, [r2, #4]
    7ec6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    7ec8:	2200      	movs	r2, #0
    7eca:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7ecc:	0019      	movs	r1, r3
    7ece:	3210      	adds	r2, #16
    7ed0:	68cb      	ldr	r3, [r1, #12]
    7ed2:	421a      	tst	r2, r3
    7ed4:	d0fc      	beq.n	7ed0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    7ed6:	4b0a      	ldr	r3, [pc, #40]	; (7f00 <system_clock_source_enable+0xa4>)
    7ed8:	681b      	ldr	r3, [r3, #0]
    7eda:	b29b      	uxth	r3, r3
    7edc:	4a07      	ldr	r2, [pc, #28]	; (7efc <system_clock_source_enable+0xa0>)
    7ede:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    7ee0:	2000      	movs	r0, #0
    7ee2:	e008      	b.n	7ef6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    7ee4:	4905      	ldr	r1, [pc, #20]	; (7efc <system_clock_source_enable+0xa0>)
    7ee6:	2244      	movs	r2, #68	; 0x44
    7ee8:	5c8b      	ldrb	r3, [r1, r2]
    7eea:	2002      	movs	r0, #2
    7eec:	4303      	orrs	r3, r0
    7eee:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    7ef0:	2000      	movs	r0, #0
		break;
    7ef2:	e000      	b.n	7ef6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    7ef4:	2000      	movs	r0, #0
}
    7ef6:	4770      	bx	lr
    7ef8:	0000e9f8 	.word	0x0000e9f8
    7efc:	40000800 	.word	0x40000800
    7f00:	2000389c 	.word	0x2000389c

00007f04 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    7f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f06:	46de      	mov	lr, fp
    7f08:	4657      	mov	r7, sl
    7f0a:	464e      	mov	r6, r9
    7f0c:	4645      	mov	r5, r8
    7f0e:	b5e0      	push	{r5, r6, r7, lr}
    7f10:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    7f12:	22c2      	movs	r2, #194	; 0xc2
    7f14:	00d2      	lsls	r2, r2, #3
    7f16:	4b4c      	ldr	r3, [pc, #304]	; (8048 <system_clock_init+0x144>)
    7f18:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    7f1a:	4a4c      	ldr	r2, [pc, #304]	; (804c <system_clock_init+0x148>)
    7f1c:	6853      	ldr	r3, [r2, #4]
    7f1e:	211e      	movs	r1, #30
    7f20:	438b      	bics	r3, r1
    7f22:	3918      	subs	r1, #24
    7f24:	430b      	orrs	r3, r1
    7f26:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    7f28:	2203      	movs	r2, #3
    7f2a:	ab01      	add	r3, sp, #4
    7f2c:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    7f2e:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    7f30:	4d47      	ldr	r5, [pc, #284]	; (8050 <system_clock_init+0x14c>)
    7f32:	b2e0      	uxtb	r0, r4
    7f34:	a901      	add	r1, sp, #4
    7f36:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    7f38:	3401      	adds	r4, #1
    7f3a:	2c25      	cmp	r4, #37	; 0x25
    7f3c:	d1f9      	bne.n	7f32 <system_clock_init+0x2e>
	config->run_in_standby  = false;
    7f3e:	a80b      	add	r0, sp, #44	; 0x2c
    7f40:	2500      	movs	r5, #0
    7f42:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    7f44:	2601      	movs	r6, #1
    7f46:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    7f48:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    7f4a:	4b42      	ldr	r3, [pc, #264]	; (8054 <system_clock_init+0x150>)
    7f4c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    7f4e:	2006      	movs	r0, #6
    7f50:	4b41      	ldr	r3, [pc, #260]	; (8058 <system_clock_init+0x154>)
    7f52:	4699      	mov	r9, r3
    7f54:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    7f56:	4b41      	ldr	r3, [pc, #260]	; (805c <system_clock_init+0x158>)
    7f58:	4798      	blx	r3
	config->high_when_disabled = false;
    7f5a:	ac01      	add	r4, sp, #4
    7f5c:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    7f5e:	2306      	movs	r3, #6
    7f60:	469a      	mov	sl, r3
    7f62:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    7f64:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    7f66:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    7f68:	2308      	movs	r3, #8
    7f6a:	6063      	str	r3, [r4, #4]
    7f6c:	0021      	movs	r1, r4
    7f6e:	2001      	movs	r0, #1
    7f70:	4b3b      	ldr	r3, [pc, #236]	; (8060 <system_clock_init+0x15c>)
    7f72:	4698      	mov	r8, r3
    7f74:	4798      	blx	r3
    7f76:	2001      	movs	r0, #1
    7f78:	4f3a      	ldr	r7, [pc, #232]	; (8064 <system_clock_init+0x160>)
    7f7a:	47b8      	blx	r7
	config->division_factor    = 1;
    7f7c:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    7f7e:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    7f80:	7265      	strb	r5, [r4, #9]
    7f82:	2303      	movs	r3, #3
    7f84:	469b      	mov	fp, r3
    7f86:	7023      	strb	r3, [r4, #0]
    7f88:	7226      	strb	r6, [r4, #8]
    7f8a:	0021      	movs	r1, r4
    7f8c:	2002      	movs	r0, #2
    7f8e:	47c0      	blx	r8
    7f90:	2002      	movs	r0, #2
    7f92:	47b8      	blx	r7
	config->high_when_disabled = false;
    7f94:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    7f96:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    7f98:	7265      	strb	r5, [r4, #9]
    7f9a:	465b      	mov	r3, fp
    7f9c:	7023      	strb	r3, [r4, #0]
    7f9e:	2320      	movs	r3, #32
    7fa0:	6063      	str	r3, [r4, #4]
    7fa2:	0021      	movs	r1, r4
    7fa4:	2004      	movs	r0, #4
    7fa6:	47c0      	blx	r8
    7fa8:	2004      	movs	r0, #4
    7faa:	47b8      	blx	r7
	config->division_factor    = 1;
    7fac:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    7fae:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    7fb0:	4653      	mov	r3, sl
    7fb2:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    7fb4:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    7fb6:	7265      	strb	r5, [r4, #9]
    7fb8:	0021      	movs	r1, r4
    7fba:	2005      	movs	r0, #5
    7fbc:	47c0      	blx	r8
    7fbe:	2005      	movs	r0, #5
    7fc0:	47b8      	blx	r7
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
    7fc2:	a90a      	add	r1, sp, #40	; 0x28
    7fc4:	700e      	strb	r6, [r1, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
    7fc6:	2001      	movs	r0, #1
    7fc8:	4b21      	ldr	r3, [pc, #132]	; (8050 <system_clock_init+0x14c>)
    7fca:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
    7fcc:	2001      	movs	r0, #1
    7fce:	4b26      	ldr	r3, [pc, #152]	; (8068 <system_clock_init+0x164>)
    7fd0:	4798      	blx	r3
	config->run_in_standby      = false;
    7fd2:	a804      	add	r0, sp, #16
    7fd4:	7045      	strb	r5, [r0, #1]
	config->lock_bypass         = false;
    7fd6:	7085      	strb	r5, [r0, #2]
	config->wake_up_fast        = false;
    7fd8:	70c5      	strb	r5, [r0, #3]
	config->low_power_enable    = false;
    7fda:	7105      	strb	r5, [r0, #4]
	config->output_frequency    = 48000000;
    7fdc:	4b23      	ldr	r3, [pc, #140]	; (806c <system_clock_init+0x168>)
    7fde:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
    7fe0:	8206      	strh	r6, [r0, #16]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    7fe2:	74c5      	strb	r5, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    7fe4:	7485      	strb	r5, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    7fe6:	7005      	strb	r5, [r0, #0]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    7fe8:	2302      	movs	r3, #2
    7fea:	7503      	strb	r3, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    7fec:	4b20      	ldr	r3, [pc, #128]	; (8070 <system_clock_init+0x16c>)
    7fee:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    7ff0:	4b20      	ldr	r3, [pc, #128]	; (8074 <system_clock_init+0x170>)
    7ff2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    7ff4:	2008      	movs	r0, #8
    7ff6:	47c8      	blx	r9
		return ((SYSCTRL->DPLLSTATUS.reg &
    7ff8:	4813      	ldr	r0, [pc, #76]	; (8048 <system_clock_init+0x144>)
    7ffa:	2150      	movs	r1, #80	; 0x50
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    7ffc:	2203      	movs	r2, #3
		return ((SYSCTRL->DPLLSTATUS.reg &
    7ffe:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    8000:	4013      	ands	r3, r2
    8002:	2b03      	cmp	r3, #3
    8004:	d1fb      	bne.n	7ffe <system_clock_init+0xfa>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    8006:	4910      	ldr	r1, [pc, #64]	; (8048 <system_clock_init+0x144>)
    8008:	2244      	movs	r2, #68	; 0x44
    800a:	5c88      	ldrb	r0, [r1, r2]
    800c:	3b83      	subs	r3, #131	; 0x83
    800e:	4303      	orrs	r3, r0
    8010:	548b      	strb	r3, [r1, r2]
	PM->CPUSEL.reg = (uint32_t)divider;
    8012:	4a19      	ldr	r2, [pc, #100]	; (8078 <system_clock_init+0x174>)
    8014:	2300      	movs	r3, #0
    8016:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    8018:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    801a:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    801c:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    801e:	a901      	add	r1, sp, #4
    8020:	2201      	movs	r2, #1
    8022:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    8024:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    8026:	720b      	strb	r3, [r1, #8]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    8028:	3308      	adds	r3, #8
    802a:	700b      	strb	r3, [r1, #0]
    802c:	724a      	strb	r2, [r1, #9]
    802e:	2000      	movs	r0, #0
    8030:	4b0b      	ldr	r3, [pc, #44]	; (8060 <system_clock_init+0x15c>)
    8032:	4798      	blx	r3
    8034:	2000      	movs	r0, #0
    8036:	4b0b      	ldr	r3, [pc, #44]	; (8064 <system_clock_init+0x160>)
    8038:	4798      	blx	r3
#endif
}
    803a:	b00d      	add	sp, #52	; 0x34
    803c:	bc3c      	pop	{r2, r3, r4, r5}
    803e:	4690      	mov	r8, r2
    8040:	4699      	mov	r9, r3
    8042:	46a2      	mov	sl, r4
    8044:	46ab      	mov	fp, r5
    8046:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8048:	40000800 	.word	0x40000800
    804c:	41004000 	.word	0x41004000
    8050:	000082b5 	.word	0x000082b5
    8054:	00007d7d 	.word	0x00007d7d
    8058:	00007e5d 	.word	0x00007e5d
    805c:	0000807d 	.word	0x0000807d
    8060:	000080a1 	.word	0x000080a1
    8064:	00008159 	.word	0x00008159
    8068:	00008229 	.word	0x00008229
    806c:	02dc6c00 	.word	0x02dc6c00
    8070:	000f4240 	.word	0x000f4240
    8074:	00007db9 	.word	0x00007db9
    8078:	40000400 	.word	0x40000400

0000807c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    807c:	4a06      	ldr	r2, [pc, #24]	; (8098 <system_gclk_init+0x1c>)
    807e:	6993      	ldr	r3, [r2, #24]
    8080:	2108      	movs	r1, #8
    8082:	430b      	orrs	r3, r1
    8084:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    8086:	2201      	movs	r2, #1
    8088:	4b04      	ldr	r3, [pc, #16]	; (809c <system_gclk_init+0x20>)
    808a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    808c:	0019      	movs	r1, r3
    808e:	780b      	ldrb	r3, [r1, #0]
    8090:	4213      	tst	r3, r2
    8092:	d1fc      	bne.n	808e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    8094:	4770      	bx	lr
    8096:	46c0      	nop			; (mov r8, r8)
    8098:	40000400 	.word	0x40000400
    809c:	40000c00 	.word	0x40000c00

000080a0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    80a0:	b570      	push	{r4, r5, r6, lr}
    80a2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    80a4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    80a6:	780d      	ldrb	r5, [r1, #0]
    80a8:	022d      	lsls	r5, r5, #8
    80aa:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    80ac:	784b      	ldrb	r3, [r1, #1]
    80ae:	2b00      	cmp	r3, #0
    80b0:	d002      	beq.n	80b8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    80b2:	2380      	movs	r3, #128	; 0x80
    80b4:	02db      	lsls	r3, r3, #11
    80b6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    80b8:	7a4b      	ldrb	r3, [r1, #9]
    80ba:	2b00      	cmp	r3, #0
    80bc:	d002      	beq.n	80c4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    80be:	2380      	movs	r3, #128	; 0x80
    80c0:	031b      	lsls	r3, r3, #12
    80c2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    80c4:	6848      	ldr	r0, [r1, #4]
    80c6:	2801      	cmp	r0, #1
    80c8:	d910      	bls.n	80ec <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    80ca:	1e43      	subs	r3, r0, #1
    80cc:	4218      	tst	r0, r3
    80ce:	d134      	bne.n	813a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    80d0:	2802      	cmp	r0, #2
    80d2:	d930      	bls.n	8136 <system_gclk_gen_set_config+0x96>
    80d4:	2302      	movs	r3, #2
    80d6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    80d8:	3201      	adds	r2, #1
						mask <<= 1) {
    80da:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    80dc:	4298      	cmp	r0, r3
    80de:	d8fb      	bhi.n	80d8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    80e0:	0212      	lsls	r2, r2, #8
    80e2:	4332      	orrs	r2, r6
    80e4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    80e6:	2380      	movs	r3, #128	; 0x80
    80e8:	035b      	lsls	r3, r3, #13
    80ea:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    80ec:	7a0b      	ldrb	r3, [r1, #8]
    80ee:	2b00      	cmp	r3, #0
    80f0:	d002      	beq.n	80f8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    80f2:	2380      	movs	r3, #128	; 0x80
    80f4:	039b      	lsls	r3, r3, #14
    80f6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    80f8:	4a13      	ldr	r2, [pc, #76]	; (8148 <system_gclk_gen_set_config+0xa8>)
    80fa:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    80fc:	b25b      	sxtb	r3, r3
    80fe:	2b00      	cmp	r3, #0
    8100:	dbfb      	blt.n	80fa <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    8102:	4b12      	ldr	r3, [pc, #72]	; (814c <system_gclk_gen_set_config+0xac>)
    8104:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8106:	4b12      	ldr	r3, [pc, #72]	; (8150 <system_gclk_gen_set_config+0xb0>)
    8108:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    810a:	4a0f      	ldr	r2, [pc, #60]	; (8148 <system_gclk_gen_set_config+0xa8>)
    810c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    810e:	b25b      	sxtb	r3, r3
    8110:	2b00      	cmp	r3, #0
    8112:	dbfb      	blt.n	810c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    8114:	4b0c      	ldr	r3, [pc, #48]	; (8148 <system_gclk_gen_set_config+0xa8>)
    8116:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8118:	001a      	movs	r2, r3
    811a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    811c:	b25b      	sxtb	r3, r3
    811e:	2b00      	cmp	r3, #0
    8120:	dbfb      	blt.n	811a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    8122:	4a09      	ldr	r2, [pc, #36]	; (8148 <system_gclk_gen_set_config+0xa8>)
    8124:	6853      	ldr	r3, [r2, #4]
    8126:	2180      	movs	r1, #128	; 0x80
    8128:	0249      	lsls	r1, r1, #9
    812a:	400b      	ands	r3, r1
    812c:	431d      	orrs	r5, r3
    812e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    8130:	4b08      	ldr	r3, [pc, #32]	; (8154 <system_gclk_gen_set_config+0xb4>)
    8132:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8134:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    8136:	2200      	movs	r2, #0
    8138:	e7d2      	b.n	80e0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    813a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    813c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    813e:	2380      	movs	r3, #128	; 0x80
    8140:	029b      	lsls	r3, r3, #10
    8142:	431d      	orrs	r5, r3
    8144:	e7d2      	b.n	80ec <system_gclk_gen_set_config+0x4c>
    8146:	46c0      	nop			; (mov r8, r8)
    8148:	40000c00 	.word	0x40000c00
    814c:	00006c99 	.word	0x00006c99
    8150:	40000c08 	.word	0x40000c08
    8154:	00006cd9 	.word	0x00006cd9

00008158 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    8158:	b510      	push	{r4, lr}
    815a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    815c:	4a0b      	ldr	r2, [pc, #44]	; (818c <system_gclk_gen_enable+0x34>)
    815e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8160:	b25b      	sxtb	r3, r3
    8162:	2b00      	cmp	r3, #0
    8164:	dbfb      	blt.n	815e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    8166:	4b0a      	ldr	r3, [pc, #40]	; (8190 <system_gclk_gen_enable+0x38>)
    8168:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    816a:	4b0a      	ldr	r3, [pc, #40]	; (8194 <system_gclk_gen_enable+0x3c>)
    816c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    816e:	4a07      	ldr	r2, [pc, #28]	; (818c <system_gclk_gen_enable+0x34>)
    8170:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8172:	b25b      	sxtb	r3, r3
    8174:	2b00      	cmp	r3, #0
    8176:	dbfb      	blt.n	8170 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    8178:	4a04      	ldr	r2, [pc, #16]	; (818c <system_gclk_gen_enable+0x34>)
    817a:	6851      	ldr	r1, [r2, #4]
    817c:	2380      	movs	r3, #128	; 0x80
    817e:	025b      	lsls	r3, r3, #9
    8180:	430b      	orrs	r3, r1
    8182:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    8184:	4b04      	ldr	r3, [pc, #16]	; (8198 <system_gclk_gen_enable+0x40>)
    8186:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8188:	bd10      	pop	{r4, pc}
    818a:	46c0      	nop			; (mov r8, r8)
    818c:	40000c00 	.word	0x40000c00
    8190:	00006c99 	.word	0x00006c99
    8194:	40000c04 	.word	0x40000c04
    8198:	00006cd9 	.word	0x00006cd9

0000819c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    819c:	b570      	push	{r4, r5, r6, lr}
    819e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    81a0:	4a1a      	ldr	r2, [pc, #104]	; (820c <system_gclk_gen_get_hz+0x70>)
    81a2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    81a4:	b25b      	sxtb	r3, r3
    81a6:	2b00      	cmp	r3, #0
    81a8:	dbfb      	blt.n	81a2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    81aa:	4b19      	ldr	r3, [pc, #100]	; (8210 <system_gclk_gen_get_hz+0x74>)
    81ac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    81ae:	4b19      	ldr	r3, [pc, #100]	; (8214 <system_gclk_gen_get_hz+0x78>)
    81b0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    81b2:	4a16      	ldr	r2, [pc, #88]	; (820c <system_gclk_gen_get_hz+0x70>)
    81b4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    81b6:	b25b      	sxtb	r3, r3
    81b8:	2b00      	cmp	r3, #0
    81ba:	dbfb      	blt.n	81b4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    81bc:	4e13      	ldr	r6, [pc, #76]	; (820c <system_gclk_gen_get_hz+0x70>)
    81be:	6870      	ldr	r0, [r6, #4]
    81c0:	04c0      	lsls	r0, r0, #19
    81c2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    81c4:	4b14      	ldr	r3, [pc, #80]	; (8218 <system_gclk_gen_get_hz+0x7c>)
    81c6:	4798      	blx	r3
    81c8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    81ca:	4b12      	ldr	r3, [pc, #72]	; (8214 <system_gclk_gen_get_hz+0x78>)
    81cc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    81ce:	6876      	ldr	r6, [r6, #4]
    81d0:	02f6      	lsls	r6, r6, #11
    81d2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    81d4:	4b11      	ldr	r3, [pc, #68]	; (821c <system_gclk_gen_get_hz+0x80>)
    81d6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    81d8:	4a0c      	ldr	r2, [pc, #48]	; (820c <system_gclk_gen_get_hz+0x70>)
    81da:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    81dc:	b25b      	sxtb	r3, r3
    81de:	2b00      	cmp	r3, #0
    81e0:	dbfb      	blt.n	81da <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    81e2:	4b0a      	ldr	r3, [pc, #40]	; (820c <system_gclk_gen_get_hz+0x70>)
    81e4:	689c      	ldr	r4, [r3, #8]
    81e6:	0224      	lsls	r4, r4, #8
    81e8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    81ea:	4b0d      	ldr	r3, [pc, #52]	; (8220 <system_gclk_gen_get_hz+0x84>)
    81ec:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    81ee:	2e00      	cmp	r6, #0
    81f0:	d107      	bne.n	8202 <system_gclk_gen_get_hz+0x66>
    81f2:	2c01      	cmp	r4, #1
    81f4:	d907      	bls.n	8206 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    81f6:	0021      	movs	r1, r4
    81f8:	0028      	movs	r0, r5
    81fa:	4b0a      	ldr	r3, [pc, #40]	; (8224 <system_gclk_gen_get_hz+0x88>)
    81fc:	4798      	blx	r3
    81fe:	0005      	movs	r5, r0
    8200:	e001      	b.n	8206 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    8202:	3401      	adds	r4, #1
    8204:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    8206:	0028      	movs	r0, r5
    8208:	bd70      	pop	{r4, r5, r6, pc}
    820a:	46c0      	nop			; (mov r8, r8)
    820c:	40000c00 	.word	0x40000c00
    8210:	00006c99 	.word	0x00006c99
    8214:	40000c04 	.word	0x40000c04
    8218:	00007ce9 	.word	0x00007ce9
    821c:	40000c08 	.word	0x40000c08
    8220:	00006cd9 	.word	0x00006cd9
    8224:	0000ab0d 	.word	0x0000ab0d

00008228 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    8228:	b510      	push	{r4, lr}
    822a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    822c:	4b06      	ldr	r3, [pc, #24]	; (8248 <system_gclk_chan_enable+0x20>)
    822e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8230:	4b06      	ldr	r3, [pc, #24]	; (824c <system_gclk_chan_enable+0x24>)
    8232:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    8234:	4a06      	ldr	r2, [pc, #24]	; (8250 <system_gclk_chan_enable+0x28>)
    8236:	8853      	ldrh	r3, [r2, #2]
    8238:	2180      	movs	r1, #128	; 0x80
    823a:	01c9      	lsls	r1, r1, #7
    823c:	430b      	orrs	r3, r1
    823e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    8240:	4b04      	ldr	r3, [pc, #16]	; (8254 <system_gclk_chan_enable+0x2c>)
    8242:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8244:	bd10      	pop	{r4, pc}
    8246:	46c0      	nop			; (mov r8, r8)
    8248:	00006c99 	.word	0x00006c99
    824c:	40000c02 	.word	0x40000c02
    8250:	40000c00 	.word	0x40000c00
    8254:	00006cd9 	.word	0x00006cd9

00008258 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8258:	b510      	push	{r4, lr}
    825a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    825c:	4b0f      	ldr	r3, [pc, #60]	; (829c <system_gclk_chan_disable+0x44>)
    825e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8260:	4b0f      	ldr	r3, [pc, #60]	; (82a0 <system_gclk_chan_disable+0x48>)
    8262:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    8264:	4a0f      	ldr	r2, [pc, #60]	; (82a4 <system_gclk_chan_disable+0x4c>)
    8266:	8853      	ldrh	r3, [r2, #2]
    8268:	051b      	lsls	r3, r3, #20
    826a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    826c:	8853      	ldrh	r3, [r2, #2]
    826e:	490e      	ldr	r1, [pc, #56]	; (82a8 <system_gclk_chan_disable+0x50>)
    8270:	400b      	ands	r3, r1
    8272:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    8274:	8853      	ldrh	r3, [r2, #2]
    8276:	490d      	ldr	r1, [pc, #52]	; (82ac <system_gclk_chan_disable+0x54>)
    8278:	400b      	ands	r3, r1
    827a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    827c:	0011      	movs	r1, r2
    827e:	2280      	movs	r2, #128	; 0x80
    8280:	01d2      	lsls	r2, r2, #7
    8282:	884b      	ldrh	r3, [r1, #2]
    8284:	4213      	tst	r3, r2
    8286:	d1fc      	bne.n	8282 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    8288:	4906      	ldr	r1, [pc, #24]	; (82a4 <system_gclk_chan_disable+0x4c>)
    828a:	884a      	ldrh	r2, [r1, #2]
    828c:	0203      	lsls	r3, r0, #8
    828e:	4806      	ldr	r0, [pc, #24]	; (82a8 <system_gclk_chan_disable+0x50>)
    8290:	4002      	ands	r2, r0
    8292:	4313      	orrs	r3, r2
    8294:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    8296:	4b06      	ldr	r3, [pc, #24]	; (82b0 <system_gclk_chan_disable+0x58>)
    8298:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    829a:	bd10      	pop	{r4, pc}
    829c:	00006c99 	.word	0x00006c99
    82a0:	40000c02 	.word	0x40000c02
    82a4:	40000c00 	.word	0x40000c00
    82a8:	fffff0ff 	.word	0xfffff0ff
    82ac:	ffffbfff 	.word	0xffffbfff
    82b0:	00006cd9 	.word	0x00006cd9

000082b4 <system_gclk_chan_set_config>:
{
    82b4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    82b6:	780c      	ldrb	r4, [r1, #0]
    82b8:	0224      	lsls	r4, r4, #8
    82ba:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    82bc:	4b02      	ldr	r3, [pc, #8]	; (82c8 <system_gclk_chan_set_config+0x14>)
    82be:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    82c0:	b2a4      	uxth	r4, r4
    82c2:	4b02      	ldr	r3, [pc, #8]	; (82cc <system_gclk_chan_set_config+0x18>)
    82c4:	805c      	strh	r4, [r3, #2]
}
    82c6:	bd10      	pop	{r4, pc}
    82c8:	00008259 	.word	0x00008259
    82cc:	40000c00 	.word	0x40000c00

000082d0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    82d0:	b510      	push	{r4, lr}
    82d2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    82d4:	4b06      	ldr	r3, [pc, #24]	; (82f0 <system_gclk_chan_get_hz+0x20>)
    82d6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    82d8:	4b06      	ldr	r3, [pc, #24]	; (82f4 <system_gclk_chan_get_hz+0x24>)
    82da:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    82dc:	4b06      	ldr	r3, [pc, #24]	; (82f8 <system_gclk_chan_get_hz+0x28>)
    82de:	885c      	ldrh	r4, [r3, #2]
    82e0:	0524      	lsls	r4, r4, #20
    82e2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    82e4:	4b05      	ldr	r3, [pc, #20]	; (82fc <system_gclk_chan_get_hz+0x2c>)
    82e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    82e8:	0020      	movs	r0, r4
    82ea:	4b05      	ldr	r3, [pc, #20]	; (8300 <system_gclk_chan_get_hz+0x30>)
    82ec:	4798      	blx	r3
}
    82ee:	bd10      	pop	{r4, pc}
    82f0:	00006c99 	.word	0x00006c99
    82f4:	40000c02 	.word	0x40000c02
    82f8:	40000c00 	.word	0x40000c00
    82fc:	00006cd9 	.word	0x00006cd9
    8300:	0000819d 	.word	0x0000819d

00008304 <system_interrupt_clear_pending>:
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    8304:	2800      	cmp	r0, #0
    8306:	db08      	blt.n	831a <system_interrupt_clear_pending+0x16>
		NVIC->ICPR[0] = (1 << vector);
    8308:	2301      	movs	r3, #1
    830a:	4083      	lsls	r3, r0
    830c:	22c0      	movs	r2, #192	; 0xc0
    830e:	0052      	lsls	r2, r2, #1
    8310:	4906      	ldr	r1, [pc, #24]	; (832c <system_interrupt_clear_pending+0x28>)
    8312:	508b      	str	r3, [r1, r2]
	enum status_code status = STATUS_OK;
    8314:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    8316:	0018      	movs	r0, r3
    8318:	4770      	bx	lr
		status = STATUS_ERR_INVALID_ARG;
    831a:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    831c:	1c42      	adds	r2, r0, #1
    831e:	d1fa      	bne.n	8316 <system_interrupt_clear_pending+0x12>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
    8320:	2280      	movs	r2, #128	; 0x80
    8322:	0492      	lsls	r2, r2, #18
    8324:	4b02      	ldr	r3, [pc, #8]	; (8330 <system_interrupt_clear_pending+0x2c>)
    8326:	605a      	str	r2, [r3, #4]
	enum status_code status = STATUS_OK;
    8328:	2300      	movs	r3, #0
    832a:	e7f4      	b.n	8316 <system_interrupt_clear_pending+0x12>
    832c:	e000e100 	.word	0xe000e100
    8330:	e000ed00 	.word	0xe000ed00

00008334 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    8334:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    8336:	78d3      	ldrb	r3, [r2, #3]
    8338:	2b00      	cmp	r3, #0
    833a:	d135      	bne.n	83a8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    833c:	7813      	ldrb	r3, [r2, #0]
    833e:	2b80      	cmp	r3, #128	; 0x80
    8340:	d029      	beq.n	8396 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    8342:	061b      	lsls	r3, r3, #24
    8344:	2480      	movs	r4, #128	; 0x80
    8346:	0264      	lsls	r4, r4, #9
    8348:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    834a:	7854      	ldrb	r4, [r2, #1]
    834c:	2502      	movs	r5, #2
    834e:	43ac      	bics	r4, r5
    8350:	d106      	bne.n	8360 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    8352:	7894      	ldrb	r4, [r2, #2]
    8354:	2c00      	cmp	r4, #0
    8356:	d120      	bne.n	839a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    8358:	2480      	movs	r4, #128	; 0x80
    835a:	02a4      	lsls	r4, r4, #10
    835c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    835e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8360:	7854      	ldrb	r4, [r2, #1]
    8362:	3c01      	subs	r4, #1
    8364:	2c01      	cmp	r4, #1
    8366:	d91c      	bls.n	83a2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8368:	040d      	lsls	r5, r1, #16
    836a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    836c:	24a0      	movs	r4, #160	; 0xa0
    836e:	05e4      	lsls	r4, r4, #23
    8370:	432c      	orrs	r4, r5
    8372:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8374:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8376:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8378:	24d0      	movs	r4, #208	; 0xd0
    837a:	0624      	lsls	r4, r4, #24
    837c:	432c      	orrs	r4, r5
    837e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8380:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    8382:	78d4      	ldrb	r4, [r2, #3]
    8384:	2c00      	cmp	r4, #0
    8386:	d122      	bne.n	83ce <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    8388:	035b      	lsls	r3, r3, #13
    838a:	d51c      	bpl.n	83c6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    838c:	7893      	ldrb	r3, [r2, #2]
    838e:	2b01      	cmp	r3, #1
    8390:	d01e      	beq.n	83d0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    8392:	6141      	str	r1, [r0, #20]
    8394:	e017      	b.n	83c6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    8396:	2300      	movs	r3, #0
    8398:	e7d7      	b.n	834a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    839a:	24c0      	movs	r4, #192	; 0xc0
    839c:	02e4      	lsls	r4, r4, #11
    839e:	4323      	orrs	r3, r4
    83a0:	e7dd      	b.n	835e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    83a2:	4c0d      	ldr	r4, [pc, #52]	; (83d8 <_system_pinmux_config+0xa4>)
    83a4:	4023      	ands	r3, r4
    83a6:	e7df      	b.n	8368 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    83a8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    83aa:	040c      	lsls	r4, r1, #16
    83ac:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    83ae:	23a0      	movs	r3, #160	; 0xa0
    83b0:	05db      	lsls	r3, r3, #23
    83b2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    83b4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    83b6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    83b8:	23d0      	movs	r3, #208	; 0xd0
    83ba:	061b      	lsls	r3, r3, #24
    83bc:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    83be:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    83c0:	78d3      	ldrb	r3, [r2, #3]
    83c2:	2b00      	cmp	r3, #0
    83c4:	d103      	bne.n	83ce <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    83c6:	7853      	ldrb	r3, [r2, #1]
    83c8:	3b01      	subs	r3, #1
    83ca:	2b01      	cmp	r3, #1
    83cc:	d902      	bls.n	83d4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    83ce:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    83d0:	6181      	str	r1, [r0, #24]
    83d2:	e7f8      	b.n	83c6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    83d4:	6081      	str	r1, [r0, #8]
}
    83d6:	e7fa      	b.n	83ce <_system_pinmux_config+0x9a>
    83d8:	fffbffff 	.word	0xfffbffff

000083dc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    83dc:	b510      	push	{r4, lr}
    83de:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    83e0:	09c1      	lsrs	r1, r0, #7
		return NULL;
    83e2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    83e4:	2900      	cmp	r1, #0
    83e6:	d104      	bne.n	83f2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    83e8:	0943      	lsrs	r3, r0, #5
    83ea:	01db      	lsls	r3, r3, #7
    83ec:	4905      	ldr	r1, [pc, #20]	; (8404 <system_pinmux_pin_set_config+0x28>)
    83ee:	468c      	mov	ip, r1
    83f0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    83f2:	241f      	movs	r4, #31
    83f4:	4020      	ands	r0, r4
    83f6:	2101      	movs	r1, #1
    83f8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    83fa:	0018      	movs	r0, r3
    83fc:	4b02      	ldr	r3, [pc, #8]	; (8408 <system_pinmux_pin_set_config+0x2c>)
    83fe:	4798      	blx	r3
}
    8400:	bd10      	pop	{r4, pc}
    8402:	46c0      	nop			; (mov r8, r8)
    8404:	41004400 	.word	0x41004400
    8408:	00008335 	.word	0x00008335

0000840c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    840c:	4770      	bx	lr
	...

00008410 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    8410:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    8412:	4b05      	ldr	r3, [pc, #20]	; (8428 <system_init+0x18>)
    8414:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    8416:	4b05      	ldr	r3, [pc, #20]	; (842c <system_init+0x1c>)
    8418:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    841a:	4b05      	ldr	r3, [pc, #20]	; (8430 <system_init+0x20>)
    841c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    841e:	4b05      	ldr	r3, [pc, #20]	; (8434 <system_init+0x24>)
    8420:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    8422:	4b05      	ldr	r3, [pc, #20]	; (8438 <system_init+0x28>)
    8424:	4798      	blx	r3
}
    8426:	bd10      	pop	{r4, pc}
    8428:	00007f05 	.word	0x00007f05
    842c:	00006d09 	.word	0x00006d09
    8430:	0000840d 	.word	0x0000840d
    8434:	00006dad 	.word	0x00006dad
    8438:	0000840d 	.word	0x0000840d

0000843c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    843c:	b5f0      	push	{r4, r5, r6, r7, lr}
    843e:	46c6      	mov	lr, r8
    8440:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    8442:	0080      	lsls	r0, r0, #2
    8444:	4b0e      	ldr	r3, [pc, #56]	; (8480 <_tcc_interrupt_handler+0x44>)
    8446:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    8448:	683b      	ldr	r3, [r7, #0]
    844a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    844e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8450:	4013      	ands	r3, r2
    8452:	401e      	ands	r6, r3
    8454:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    8456:	4b0b      	ldr	r3, [pc, #44]	; (8484 <_tcc_interrupt_handler+0x48>)
    8458:	4698      	mov	r8, r3
    845a:	e002      	b.n	8462 <_tcc_interrupt_handler+0x26>
    845c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    845e:	2c30      	cmp	r4, #48	; 0x30
    8460:	d00a      	beq.n	8478 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    8462:	4643      	mov	r3, r8
    8464:	58e5      	ldr	r5, [r4, r3]
    8466:	4235      	tst	r5, r6
    8468:	d0f8      	beq.n	845c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    846a:	193b      	adds	r3, r7, r4
    846c:	685b      	ldr	r3, [r3, #4]
    846e:	0038      	movs	r0, r7
    8470:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    8472:	683b      	ldr	r3, [r7, #0]
    8474:	62dd      	str	r5, [r3, #44]	; 0x2c
    8476:	e7f1      	b.n	845c <_tcc_interrupt_handler+0x20>
		}
	}
}
    8478:	bc04      	pop	{r2}
    847a:	4690      	mov	r8, r2
    847c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    847e:	46c0      	nop			; (mov r8, r8)
    8480:	20004e5c 	.word	0x20004e5c
    8484:	0000ea1c 	.word	0x0000ea1c

00008488 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    8488:	b510      	push	{r4, lr}
    848a:	2000      	movs	r0, #0
    848c:	4b01      	ldr	r3, [pc, #4]	; (8494 <TCC0_Handler+0xc>)
    848e:	4798      	blx	r3
    8490:	bd10      	pop	{r4, pc}
    8492:	46c0      	nop			; (mov r8, r8)
    8494:	0000843d 	.word	0x0000843d

00008498 <TCC1_Handler>:
    8498:	b510      	push	{r4, lr}
    849a:	2001      	movs	r0, #1
    849c:	4b01      	ldr	r3, [pc, #4]	; (84a4 <TCC1_Handler+0xc>)
    849e:	4798      	blx	r3
    84a0:	bd10      	pop	{r4, pc}
    84a2:	46c0      	nop			; (mov r8, r8)
    84a4:	0000843d 	.word	0x0000843d

000084a8 <TCC2_Handler>:
    84a8:	b510      	push	{r4, lr}
    84aa:	2002      	movs	r0, #2
    84ac:	4b01      	ldr	r3, [pc, #4]	; (84b4 <TCC2_Handler+0xc>)
    84ae:	4798      	blx	r3
    84b0:	bd10      	pop	{r4, pc}
    84b2:	46c0      	nop			; (mov r8, r8)
    84b4:	0000843d 	.word	0x0000843d

000084b8 <Dummy_Handler>:
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
  __asm volatile (
    84b8:	2004      	movs	r0, #4
    84ba:	4671      	mov	r1, lr
    84bc:	4208      	tst	r0, r1
    84be:	d002      	beq.n	84c6 <_MSP>
    84c0:	f3ef 8009 	mrs	r0, PSP
    84c4:	e001      	b.n	84ca <_HALT>

000084c6 <_MSP>:
    84c6:	f3ef 8008 	mrs	r0, MSP

000084ca <_HALT>:
    84ca:	6941      	ldr	r1, [r0, #20]
    84cc:	e074      	b.n	85b8 <HardFault_HandlerC>
    84ce:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
    84d0:	4770      	bx	lr
	...

000084d4 <Reset_Handler>:
{
    84d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    84d6:	4a2a      	ldr	r2, [pc, #168]	; (8580 <Reset_Handler+0xac>)
    84d8:	4b2a      	ldr	r3, [pc, #168]	; (8584 <Reset_Handler+0xb0>)
    84da:	429a      	cmp	r2, r3
    84dc:	d011      	beq.n	8502 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    84de:	001a      	movs	r2, r3
    84e0:	4b29      	ldr	r3, [pc, #164]	; (8588 <Reset_Handler+0xb4>)
    84e2:	429a      	cmp	r2, r3
    84e4:	d20d      	bcs.n	8502 <Reset_Handler+0x2e>
    84e6:	4a29      	ldr	r2, [pc, #164]	; (858c <Reset_Handler+0xb8>)
    84e8:	3303      	adds	r3, #3
    84ea:	1a9b      	subs	r3, r3, r2
    84ec:	089b      	lsrs	r3, r3, #2
    84ee:	3301      	adds	r3, #1
    84f0:	009b      	lsls	r3, r3, #2
    84f2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    84f4:	4823      	ldr	r0, [pc, #140]	; (8584 <Reset_Handler+0xb0>)
    84f6:	4922      	ldr	r1, [pc, #136]	; (8580 <Reset_Handler+0xac>)
    84f8:	588c      	ldr	r4, [r1, r2]
    84fa:	5084      	str	r4, [r0, r2]
    84fc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    84fe:	429a      	cmp	r2, r3
    8500:	d1fa      	bne.n	84f8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    8502:	4a23      	ldr	r2, [pc, #140]	; (8590 <Reset_Handler+0xbc>)
    8504:	4b23      	ldr	r3, [pc, #140]	; (8594 <Reset_Handler+0xc0>)
    8506:	429a      	cmp	r2, r3
    8508:	d20a      	bcs.n	8520 <Reset_Handler+0x4c>
    850a:	43d3      	mvns	r3, r2
    850c:	4921      	ldr	r1, [pc, #132]	; (8594 <Reset_Handler+0xc0>)
    850e:	185b      	adds	r3, r3, r1
    8510:	2103      	movs	r1, #3
    8512:	438b      	bics	r3, r1
    8514:	3304      	adds	r3, #4
    8516:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    8518:	2100      	movs	r1, #0
    851a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    851c:	4293      	cmp	r3, r2
    851e:	d1fc      	bne.n	851a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8520:	4a1d      	ldr	r2, [pc, #116]	; (8598 <Reset_Handler+0xc4>)
    8522:	21ff      	movs	r1, #255	; 0xff
    8524:	4b1d      	ldr	r3, [pc, #116]	; (859c <Reset_Handler+0xc8>)
    8526:	438b      	bics	r3, r1
    8528:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    852a:	39fd      	subs	r1, #253	; 0xfd
    852c:	2390      	movs	r3, #144	; 0x90
    852e:	005b      	lsls	r3, r3, #1
    8530:	4a1b      	ldr	r2, [pc, #108]	; (85a0 <Reset_Handler+0xcc>)
    8532:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8534:	4a1b      	ldr	r2, [pc, #108]	; (85a4 <Reset_Handler+0xd0>)
    8536:	78d3      	ldrb	r3, [r2, #3]
    8538:	2503      	movs	r5, #3
    853a:	43ab      	bics	r3, r5
    853c:	2402      	movs	r4, #2
    853e:	4323      	orrs	r3, r4
    8540:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8542:	78d3      	ldrb	r3, [r2, #3]
    8544:	270c      	movs	r7, #12
    8546:	43bb      	bics	r3, r7
    8548:	2608      	movs	r6, #8
    854a:	4333      	orrs	r3, r6
    854c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    854e:	4b16      	ldr	r3, [pc, #88]	; (85a8 <Reset_Handler+0xd4>)
    8550:	7b98      	ldrb	r0, [r3, #14]
    8552:	2230      	movs	r2, #48	; 0x30
    8554:	4390      	bics	r0, r2
    8556:	2220      	movs	r2, #32
    8558:	4310      	orrs	r0, r2
    855a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    855c:	7b99      	ldrb	r1, [r3, #14]
    855e:	43b9      	bics	r1, r7
    8560:	4331      	orrs	r1, r6
    8562:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    8564:	7b9a      	ldrb	r2, [r3, #14]
    8566:	43aa      	bics	r2, r5
    8568:	4322      	orrs	r2, r4
    856a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    856c:	4a0f      	ldr	r2, [pc, #60]	; (85ac <Reset_Handler+0xd8>)
    856e:	6853      	ldr	r3, [r2, #4]
    8570:	2180      	movs	r1, #128	; 0x80
    8572:	430b      	orrs	r3, r1
    8574:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    8576:	4b0e      	ldr	r3, [pc, #56]	; (85b0 <Reset_Handler+0xdc>)
    8578:	4798      	blx	r3
        main();
    857a:	4b0e      	ldr	r3, [pc, #56]	; (85b4 <Reset_Handler+0xe0>)
    857c:	4798      	blx	r3
    857e:	e7fe      	b.n	857e <Reset_Handler+0xaa>
    8580:	0000efc0 	.word	0x0000efc0
    8584:	20000000 	.word	0x20000000
    8588:	20000270 	.word	0x20000270
    858c:	20000004 	.word	0x20000004
    8590:	20000270 	.word	0x20000270
    8594:	20004f04 	.word	0x20004f04
    8598:	e000ed00 	.word	0xe000ed00
    859c:	00000000 	.word	0x00000000
    85a0:	41007000 	.word	0x41007000
    85a4:	41005000 	.word	0x41005000
    85a8:	41004800 	.word	0x41004800
    85ac:	41004000 	.word	0x41004000
    85b0:	000087e9 	.word	0x000087e9
    85b4:	00008641 	.word	0x00008641

000085b8 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
    85b8:	b08e      	sub	sp, #56	; 0x38
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
    85ba:	6803      	ldr	r3, [r0, #0]
    85bc:	930d      	str	r3, [sp, #52]	; 0x34
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
    85be:	6843      	ldr	r3, [r0, #4]
    85c0:	930c      	str	r3, [sp, #48]	; 0x30
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
    85c2:	6883      	ldr	r3, [r0, #8]
    85c4:	930b      	str	r3, [sp, #44]	; 0x2c
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
    85c6:	68c3      	ldr	r3, [r0, #12]
    85c8:	930a      	str	r3, [sp, #40]	; 0x28
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
    85ca:	6903      	ldr	r3, [r0, #16]
    85cc:	9309      	str	r3, [sp, #36]	; 0x24
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
    85ce:	6943      	ldr	r3, [r0, #20]
    85d0:	9308      	str	r3, [sp, #32]
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
    85d2:	6983      	ldr	r3, [r0, #24]
    85d4:	9307      	str	r3, [sp, #28]
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
    85d6:	69c3      	ldr	r3, [r0, #28]
    85d8:	9306      	str	r3, [sp, #24]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
    85da:	4b0a      	ldr	r3, [pc, #40]	; (8604 <HardFault_HandlerC+0x4c>)
    85dc:	681b      	ldr	r3, [r3, #0]
    85de:	9305      	str	r3, [sp, #20]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
    85e0:	4b09      	ldr	r3, [pc, #36]	; (8608 <HardFault_HandlerC+0x50>)
    85e2:	681b      	ldr	r3, [r3, #0]
    85e4:	9304      	str	r3, [sp, #16]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
    85e6:	4b09      	ldr	r3, [pc, #36]	; (860c <HardFault_HandlerC+0x54>)
    85e8:	681b      	ldr	r3, [r3, #0]
    85ea:	9303      	str	r3, [sp, #12]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
    85ec:	4b08      	ldr	r3, [pc, #32]	; (8610 <HardFault_HandlerC+0x58>)
    85ee:	681b      	ldr	r3, [r3, #0]
    85f0:	9302      	str	r3, [sp, #8]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
    85f2:	4b08      	ldr	r3, [pc, #32]	; (8614 <HardFault_HandlerC+0x5c>)
    85f4:	681b      	ldr	r3, [r3, #0]
    85f6:	9300      	str	r3, [sp, #0]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
    85f8:	4b07      	ldr	r3, [pc, #28]	; (8618 <HardFault_HandlerC+0x60>)
    85fa:	681b      	ldr	r3, [r3, #0]
    85fc:	9301      	str	r3, [sp, #4]
	
	__asm("BKPT #0\n") ; // Break into the debugger
    85fe:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
    8600:	b00e      	add	sp, #56	; 0x38
    8602:	4770      	bx	lr
    8604:	e000ed28 	.word	0xe000ed28
    8608:	e000ed2c 	.word	0xe000ed2c
    860c:	e000ed30 	.word	0xe000ed30
    8610:	e000ed3c 	.word	0xe000ed3c
    8614:	e000ed34 	.word	0xe000ed34
    8618:	e000ed38 	.word	0xe000ed38

0000861c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    861c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    861e:	4a06      	ldr	r2, [pc, #24]	; (8638 <_sbrk+0x1c>)
    8620:	6812      	ldr	r2, [r2, #0]
    8622:	2a00      	cmp	r2, #0
    8624:	d004      	beq.n	8630 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    8626:	4a04      	ldr	r2, [pc, #16]	; (8638 <_sbrk+0x1c>)
    8628:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    862a:	18c3      	adds	r3, r0, r3
    862c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    862e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    8630:	4902      	ldr	r1, [pc, #8]	; (863c <_sbrk+0x20>)
    8632:	4a01      	ldr	r2, [pc, #4]	; (8638 <_sbrk+0x1c>)
    8634:	6011      	str	r1, [r2, #0]
    8636:	e7f6      	b.n	8626 <_sbrk+0xa>
    8638:	200038b4 	.word	0x200038b4
    863c:	20006f08 	.word	0x20006f08

00008640 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    8640:	b510      	push	{r4, lr}
	/* Initialize the board. */
	system_init();
    8642:	4b05      	ldr	r3, [pc, #20]	; (8658 <main+0x18>)
    8644:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
    8646:	4b05      	ldr	r3, [pc, #20]	; (865c <main+0x1c>)
    8648:	4798      	blx	r3

	//Initialize trace capabilities
	 vTraceEnable(TRC_START);
    864a:	2001      	movs	r0, #1
    864c:	4b04      	ldr	r3, [pc, #16]	; (8660 <main+0x20>)
    864e:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
    8650:	4b04      	ldr	r3, [pc, #16]	; (8664 <main+0x24>)
    8652:	4798      	blx	r3

	return 0; //Will not get here
}
    8654:	2000      	movs	r0, #0
    8656:	bd10      	pop	{r4, pc}
    8658:	00008411 	.word	0x00008411
    865c:	00006a55 	.word	0x00006a55
    8660:	00003175 	.word	0x00003175
    8664:	00005a15 	.word	0x00005a15

00008668 <vApplicationDaemonTaskStartupHook>:
*					here will be called before other tasks are initialized.
* @param[in]        None
* @return           None
*****************************************************************************/
void vApplicationDaemonTaskStartupHook(void)
{
    8668:	b530      	push	{r4, r5, lr}
    866a:	b083      	sub	sp, #12
	 int result;
	 
	SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
    866c:	4835      	ldr	r0, [pc, #212]	; (8744 <vApplicationDaemonTaskStartupHook+0xdc>)
    866e:	4c36      	ldr	r4, [pc, #216]	; (8748 <vApplicationDaemonTaskStartupHook+0xe0>)
    8670:	47a0      	blx	r4

	/* Initialize HW that needs FreeRTOS Initialization */
	SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
    8672:	4836      	ldr	r0, [pc, #216]	; (874c <vApplicationDaemonTaskStartupHook+0xe4>)
    8674:	47a0      	blx	r4
	if (I2cInitializeDriver() != STATUS_OK)
    8676:	4b36      	ldr	r3, [pc, #216]	; (8750 <vApplicationDaemonTaskStartupHook+0xe8>)
    8678:	4798      	blx	r3
    867a:	2800      	cmp	r0, #0
    867c:	d055      	beq.n	872a <vApplicationDaemonTaskStartupHook+0xc2>
	{
		SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
    867e:	4835      	ldr	r0, [pc, #212]	; (8754 <vApplicationDaemonTaskStartupHook+0xec>)
    8680:	4b31      	ldr	r3, [pc, #196]	; (8748 <vApplicationDaemonTaskStartupHook+0xe0>)
    8682:	4798      	blx	r3
	
	/* Initialize the BME680 Sensor
     * Interface preference is updated as a parameter
     * For I2C : BME68X_I2C_INTF
     */
    result = bme68x_interface_init(&bme, BME68X_I2C_INTF);
    8684:	4d34      	ldr	r5, [pc, #208]	; (8758 <vApplicationDaemonTaskStartupHook+0xf0>)
    8686:	2101      	movs	r1, #1
    8688:	0028      	movs	r0, r5
    868a:	4b34      	ldr	r3, [pc, #208]	; (875c <vApplicationDaemonTaskStartupHook+0xf4>)
    868c:	4798      	blx	r3
    868e:	0004      	movs	r4, r0
	result |= bme68x_init(&bme);
    8690:	0028      	movs	r0, r5
    8692:	4b33      	ldr	r3, [pc, #204]	; (8760 <vApplicationDaemonTaskStartupHook+0xf8>)
    8694:	4798      	blx	r3
    8696:	4304      	orrs	r4, r0
    8698:	b264      	sxtb	r4, r4
	result |= bme68x_default_config(&bme);
    869a:	0028      	movs	r0, r5
    869c:	4b31      	ldr	r3, [pc, #196]	; (8764 <vApplicationDaemonTaskStartupHook+0xfc>)
    869e:	4798      	blx	r3

	if (result != BME68X_OK) {
    86a0:	4320      	orrs	r0, r4
    86a2:	b240      	sxtb	r0, r0
    86a4:	2800      	cmp	r0, #0
    86a6:	d044      	beq.n	8732 <vApplicationDaemonTaskStartupHook+0xca>
		SerialConsoleWriteString("BME680 Initial failed!\r\n");
    86a8:	482f      	ldr	r0, [pc, #188]	; (8768 <vApplicationDaemonTaskStartupHook+0x100>)
    86aa:	4b27      	ldr	r3, [pc, #156]	; (8748 <vApplicationDaemonTaskStartupHook+0xe0>)
    86ac:	4798      	blx	r3
	} else{
		SerialConsoleWriteString("BME680 Initialed Success!\r\n");
	}
	
	/* Configure SPI for LSM6DSO */
	configure_spi_master();
    86ae:	4b2f      	ldr	r3, [pc, #188]	; (876c <vApplicationDaemonTaskStartupHook+0x104>)
    86b0:	4798      	blx	r3
	dev_ctx = GetImuStruct();
    86b2:	4b2f      	ldr	r3, [pc, #188]	; (8770 <vApplicationDaemonTaskStartupHook+0x108>)
    86b4:	4798      	blx	r3
    86b6:	4b2f      	ldr	r3, [pc, #188]	; (8774 <vApplicationDaemonTaskStartupHook+0x10c>)
    86b8:	6018      	str	r0, [r3, #0]
		
	/* Passing device specific handle. */
	dev_ctx->handle = &spi_master_instance;
    86ba:	4b2f      	ldr	r3, [pc, #188]	; (8778 <vApplicationDaemonTaskStartupHook+0x110>)
    86bc:	6083      	str	r3, [r0, #8]

	/* Initialize the IMU LSM6DSO Sensor */
	if(InitImu() == 0)
    86be:	4b2f      	ldr	r3, [pc, #188]	; (877c <vApplicationDaemonTaskStartupHook+0x114>)
    86c0:	4798      	blx	r3
    86c2:	2800      	cmp	r0, #0
    86c4:	d039      	beq.n	873a <vApplicationDaemonTaskStartupHook+0xd2>
	{
		SerialConsoleWriteString("IMU initialized!\r\n");
	} else {
		SerialConsoleWriteString("Could not initialize IMU\r\n");
    86c6:	482e      	ldr	r0, [pc, #184]	; (8780 <vApplicationDaemonTaskStartupHook+0x118>)
    86c8:	4b1f      	ldr	r3, [pc, #124]	; (8748 <vApplicationDaemonTaskStartupHook+0xe0>)
    86ca:	4798      	blx	r3
	}
	
	FS3000_begin();
    86cc:	4b2d      	ldr	r3, [pc, #180]	; (8784 <vApplicationDaemonTaskStartupHook+0x11c>)
    86ce:	4798      	blx	r3
* @return           None
*****************************************************************************/
static void StartTasks(void)
{

snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
    86d0:	4b2d      	ldr	r3, [pc, #180]	; (8788 <vApplicationDaemonTaskStartupHook+0x120>)
    86d2:	4798      	blx	r3
    86d4:	0003      	movs	r3, r0
    86d6:	4c2d      	ldr	r4, [pc, #180]	; (878c <vApplicationDaemonTaskStartupHook+0x124>)
    86d8:	4a2d      	ldr	r2, [pc, #180]	; (8790 <vApplicationDaemonTaskStartupHook+0x128>)
    86da:	2140      	movs	r1, #64	; 0x40
    86dc:	0020      	movs	r0, r4
    86de:	4d2d      	ldr	r5, [pc, #180]	; (8794 <vApplicationDaemonTaskStartupHook+0x12c>)
    86e0:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
    86e2:	0020      	movs	r0, r4
    86e4:	4b18      	ldr	r3, [pc, #96]	; (8748 <vApplicationDaemonTaskStartupHook+0xe0>)
    86e6:	4798      	blx	r3

//Initialize Tasks here
if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
    86e8:	4b2b      	ldr	r3, [pc, #172]	; (8798 <vApplicationDaemonTaskStartupHook+0x130>)
    86ea:	9301      	str	r3, [sp, #4]
    86ec:	2304      	movs	r3, #4
    86ee:	9300      	str	r3, [sp, #0]
    86f0:	2300      	movs	r3, #0
    86f2:	22c8      	movs	r2, #200	; 0xc8
    86f4:	0052      	lsls	r2, r2, #1
    86f6:	4929      	ldr	r1, [pc, #164]	; (879c <vApplicationDaemonTaskStartupHook+0x134>)
    86f8:	4829      	ldr	r0, [pc, #164]	; (87a0 <vApplicationDaemonTaskStartupHook+0x138>)
    86fa:	4c2a      	ldr	r4, [pc, #168]	; (87a4 <vApplicationDaemonTaskStartupHook+0x13c>)
    86fc:	47a0      	blx	r4
    86fe:	2801      	cmp	r0, #1
    8700:	d002      	beq.n	8708 <vApplicationDaemonTaskStartupHook+0xa0>
	SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
    8702:	4829      	ldr	r0, [pc, #164]	; (87a8 <vApplicationDaemonTaskStartupHook+0x140>)
    8704:	4b10      	ldr	r3, [pc, #64]	; (8748 <vApplicationDaemonTaskStartupHook+0xe0>)
    8706:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
    8708:	4b1f      	ldr	r3, [pc, #124]	; (8788 <vApplicationDaemonTaskStartupHook+0x120>)
    870a:	4798      	blx	r3
    870c:	0003      	movs	r3, r0
    870e:	4c1f      	ldr	r4, [pc, #124]	; (878c <vApplicationDaemonTaskStartupHook+0x124>)
    8710:	4a26      	ldr	r2, [pc, #152]	; (87ac <vApplicationDaemonTaskStartupHook+0x144>)
    8712:	2140      	movs	r1, #64	; 0x40
    8714:	0020      	movs	r0, r4
    8716:	4d1f      	ldr	r5, [pc, #124]	; (8794 <vApplicationDaemonTaskStartupHook+0x12c>)
    8718:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
    871a:	0020      	movs	r0, r4
    871c:	4b0a      	ldr	r3, [pc, #40]	; (8748 <vApplicationDaemonTaskStartupHook+0xe0>)
    871e:	4798      	blx	r3
	vTaskSuspend(daemonTaskHandle);
    8720:	2000      	movs	r0, #0
    8722:	4b23      	ldr	r3, [pc, #140]	; (87b0 <vApplicationDaemonTaskStartupHook+0x148>)
    8724:	4798      	blx	r3
}
    8726:	b003      	add	sp, #12
    8728:	bd30      	pop	{r4, r5, pc}
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
    872a:	4822      	ldr	r0, [pc, #136]	; (87b4 <vApplicationDaemonTaskStartupHook+0x14c>)
    872c:	4b06      	ldr	r3, [pc, #24]	; (8748 <vApplicationDaemonTaskStartupHook+0xe0>)
    872e:	4798      	blx	r3
    8730:	e7a8      	b.n	8684 <vApplicationDaemonTaskStartupHook+0x1c>
		SerialConsoleWriteString("BME680 Initialed Success!\r\n");
    8732:	4821      	ldr	r0, [pc, #132]	; (87b8 <vApplicationDaemonTaskStartupHook+0x150>)
    8734:	4b04      	ldr	r3, [pc, #16]	; (8748 <vApplicationDaemonTaskStartupHook+0xe0>)
    8736:	4798      	blx	r3
    8738:	e7b9      	b.n	86ae <vApplicationDaemonTaskStartupHook+0x46>
		SerialConsoleWriteString("IMU initialized!\r\n");
    873a:	4820      	ldr	r0, [pc, #128]	; (87bc <vApplicationDaemonTaskStartupHook+0x154>)
    873c:	4b02      	ldr	r3, [pc, #8]	; (8748 <vApplicationDaemonTaskStartupHook+0xe0>)
    873e:	4798      	blx	r3
    8740:	e7c4      	b.n	86cc <vApplicationDaemonTaskStartupHook+0x64>
    8742:	46c0      	nop			; (mov r8, r8)
    8744:	0000ea4c 	.word	0x0000ea4c
    8748:	00006b7d 	.word	0x00006b7d
    874c:	0000ea70 	.word	0x0000ea70
    8750:	00001fd5 	.word	0x00001fd5
    8754:	0000ea88 	.word	0x0000ea88
    8758:	20004e70 	.word	0x20004e70
    875c:	00001ac5 	.word	0x00001ac5
    8760:	00000fbd 	.word	0x00000fbd
    8764:	00001a85 	.word	0x00001a85
    8768:	0000eac8 	.word	0x0000eac8
    876c:	000029a5 	.word	0x000029a5
    8770:	00002901 	.word	0x00002901
    8774:	20004e68 	.word	0x20004e68
    8778:	20003964 	.word	0x20003964
    877c:	00002909 	.word	0x00002909
    8780:	0000eb14 	.word	0x0000eb14
    8784:	00000131 	.word	0x00000131
    8788:	00004481 	.word	0x00004481
    878c:	20004ec0 	.word	0x20004ec0
    8790:	0000eb30 	.word	0x0000eb30
    8794:	000092bd 	.word	0x000092bd
    8798:	200038b8 	.word	0x200038b8
    879c:	0000eb54 	.word	0x0000eb54
    87a0:	00001c8d 	.word	0x00001c8d
    87a4:	00005771 	.word	0x00005771
    87a8:	0000eb60 	.word	0x0000eb60
    87ac:	0000eb8c 	.word	0x0000eb8c
    87b0:	00005ef9 	.word	0x00005ef9
    87b4:	0000eaac 	.word	0x0000eaac
    87b8:	0000eae4 	.word	0x0000eae4
    87bc:	0000eb00 	.word	0x0000eb00

000087c0 <vApplicationMallocFailedHook>:
	//stdio_serial_init(GetUsartModule(), EDBG_CDC_MODULE, &usart_conf);
	//usart_enable(&cdc_uart_module);
}

void vApplicationMallocFailedHook(void)
{
    87c0:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
    87c2:	4802      	ldr	r0, [pc, #8]	; (87cc <vApplicationMallocFailedHook+0xc>)
    87c4:	4b02      	ldr	r3, [pc, #8]	; (87d0 <vApplicationMallocFailedHook+0x10>)
    87c6:	4798      	blx	r3
    87c8:	e7fe      	b.n	87c8 <vApplicationMallocFailedHook+0x8>
    87ca:	46c0      	nop			; (mov r8, r8)
    87cc:	0000ebac 	.word	0x0000ebac
    87d0:	00006b7d 	.word	0x00006b7d

000087d4 <vApplicationStackOverflowHook>:
while(1);
}

void vApplicationStackOverflowHook(void)
{
    87d4:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
    87d6:	4802      	ldr	r0, [pc, #8]	; (87e0 <vApplicationStackOverflowHook+0xc>)
    87d8:	4b02      	ldr	r3, [pc, #8]	; (87e4 <vApplicationStackOverflowHook+0x10>)
    87da:	4798      	blx	r3
    87dc:	e7fe      	b.n	87dc <vApplicationStackOverflowHook+0x8>
    87de:	46c0      	nop			; (mov r8, r8)
    87e0:	0000ebd8 	.word	0x0000ebd8
    87e4:	00006b7d 	.word	0x00006b7d

000087e8 <__libc_init_array>:
    87e8:	b570      	push	{r4, r5, r6, lr}
    87ea:	2600      	movs	r6, #0
    87ec:	4d0c      	ldr	r5, [pc, #48]	; (8820 <__libc_init_array+0x38>)
    87ee:	4c0d      	ldr	r4, [pc, #52]	; (8824 <__libc_init_array+0x3c>)
    87f0:	1b64      	subs	r4, r4, r5
    87f2:	10a4      	asrs	r4, r4, #2
    87f4:	42a6      	cmp	r6, r4
    87f6:	d109      	bne.n	880c <__libc_init_array+0x24>
    87f8:	2600      	movs	r6, #0
    87fa:	f006 fbd1 	bl	efa0 <_init>
    87fe:	4d0a      	ldr	r5, [pc, #40]	; (8828 <__libc_init_array+0x40>)
    8800:	4c0a      	ldr	r4, [pc, #40]	; (882c <__libc_init_array+0x44>)
    8802:	1b64      	subs	r4, r4, r5
    8804:	10a4      	asrs	r4, r4, #2
    8806:	42a6      	cmp	r6, r4
    8808:	d105      	bne.n	8816 <__libc_init_array+0x2e>
    880a:	bd70      	pop	{r4, r5, r6, pc}
    880c:	00b3      	lsls	r3, r6, #2
    880e:	58eb      	ldr	r3, [r5, r3]
    8810:	4798      	blx	r3
    8812:	3601      	adds	r6, #1
    8814:	e7ee      	b.n	87f4 <__libc_init_array+0xc>
    8816:	00b3      	lsls	r3, r6, #2
    8818:	58eb      	ldr	r3, [r5, r3]
    881a:	4798      	blx	r3
    881c:	3601      	adds	r6, #1
    881e:	e7f2      	b.n	8806 <__libc_init_array+0x1e>
    8820:	0000efac 	.word	0x0000efac
    8824:	0000efac 	.word	0x0000efac
    8828:	0000efac 	.word	0x0000efac
    882c:	0000efb0 	.word	0x0000efb0

00008830 <malloc>:
    8830:	b510      	push	{r4, lr}
    8832:	4b03      	ldr	r3, [pc, #12]	; (8840 <malloc+0x10>)
    8834:	0001      	movs	r1, r0
    8836:	6818      	ldr	r0, [r3, #0]
    8838:	f000 f860 	bl	88fc <_malloc_r>
    883c:	bd10      	pop	{r4, pc}
    883e:	46c0      	nop			; (mov r8, r8)
    8840:	200000a0 	.word	0x200000a0

00008844 <memcpy>:
    8844:	2300      	movs	r3, #0
    8846:	b510      	push	{r4, lr}
    8848:	429a      	cmp	r2, r3
    884a:	d100      	bne.n	884e <memcpy+0xa>
    884c:	bd10      	pop	{r4, pc}
    884e:	5ccc      	ldrb	r4, [r1, r3]
    8850:	54c4      	strb	r4, [r0, r3]
    8852:	3301      	adds	r3, #1
    8854:	e7f8      	b.n	8848 <memcpy+0x4>

00008856 <memset>:
    8856:	0003      	movs	r3, r0
    8858:	1882      	adds	r2, r0, r2
    885a:	4293      	cmp	r3, r2
    885c:	d100      	bne.n	8860 <memset+0xa>
    885e:	4770      	bx	lr
    8860:	7019      	strb	r1, [r3, #0]
    8862:	3301      	adds	r3, #1
    8864:	e7f9      	b.n	885a <memset+0x4>
	...

00008868 <_free_r>:
    8868:	b570      	push	{r4, r5, r6, lr}
    886a:	0005      	movs	r5, r0
    886c:	2900      	cmp	r1, #0
    886e:	d010      	beq.n	8892 <_free_r+0x2a>
    8870:	1f0c      	subs	r4, r1, #4
    8872:	6823      	ldr	r3, [r4, #0]
    8874:	2b00      	cmp	r3, #0
    8876:	da00      	bge.n	887a <_free_r+0x12>
    8878:	18e4      	adds	r4, r4, r3
    887a:	0028      	movs	r0, r5
    887c:	f001 fc97 	bl	a1ae <__malloc_lock>
    8880:	4a1d      	ldr	r2, [pc, #116]	; (88f8 <_free_r+0x90>)
    8882:	6813      	ldr	r3, [r2, #0]
    8884:	2b00      	cmp	r3, #0
    8886:	d105      	bne.n	8894 <_free_r+0x2c>
    8888:	6063      	str	r3, [r4, #4]
    888a:	6014      	str	r4, [r2, #0]
    888c:	0028      	movs	r0, r5
    888e:	f001 fc8f 	bl	a1b0 <__malloc_unlock>
    8892:	bd70      	pop	{r4, r5, r6, pc}
    8894:	42a3      	cmp	r3, r4
    8896:	d909      	bls.n	88ac <_free_r+0x44>
    8898:	6821      	ldr	r1, [r4, #0]
    889a:	1860      	adds	r0, r4, r1
    889c:	4283      	cmp	r3, r0
    889e:	d1f3      	bne.n	8888 <_free_r+0x20>
    88a0:	6818      	ldr	r0, [r3, #0]
    88a2:	685b      	ldr	r3, [r3, #4]
    88a4:	1841      	adds	r1, r0, r1
    88a6:	6021      	str	r1, [r4, #0]
    88a8:	e7ee      	b.n	8888 <_free_r+0x20>
    88aa:	0013      	movs	r3, r2
    88ac:	685a      	ldr	r2, [r3, #4]
    88ae:	2a00      	cmp	r2, #0
    88b0:	d001      	beq.n	88b6 <_free_r+0x4e>
    88b2:	42a2      	cmp	r2, r4
    88b4:	d9f9      	bls.n	88aa <_free_r+0x42>
    88b6:	6819      	ldr	r1, [r3, #0]
    88b8:	1858      	adds	r0, r3, r1
    88ba:	42a0      	cmp	r0, r4
    88bc:	d10b      	bne.n	88d6 <_free_r+0x6e>
    88be:	6820      	ldr	r0, [r4, #0]
    88c0:	1809      	adds	r1, r1, r0
    88c2:	1858      	adds	r0, r3, r1
    88c4:	6019      	str	r1, [r3, #0]
    88c6:	4282      	cmp	r2, r0
    88c8:	d1e0      	bne.n	888c <_free_r+0x24>
    88ca:	6810      	ldr	r0, [r2, #0]
    88cc:	6852      	ldr	r2, [r2, #4]
    88ce:	1841      	adds	r1, r0, r1
    88d0:	6019      	str	r1, [r3, #0]
    88d2:	605a      	str	r2, [r3, #4]
    88d4:	e7da      	b.n	888c <_free_r+0x24>
    88d6:	42a0      	cmp	r0, r4
    88d8:	d902      	bls.n	88e0 <_free_r+0x78>
    88da:	230c      	movs	r3, #12
    88dc:	602b      	str	r3, [r5, #0]
    88de:	e7d5      	b.n	888c <_free_r+0x24>
    88e0:	6821      	ldr	r1, [r4, #0]
    88e2:	1860      	adds	r0, r4, r1
    88e4:	4282      	cmp	r2, r0
    88e6:	d103      	bne.n	88f0 <_free_r+0x88>
    88e8:	6810      	ldr	r0, [r2, #0]
    88ea:	6852      	ldr	r2, [r2, #4]
    88ec:	1841      	adds	r1, r0, r1
    88ee:	6021      	str	r1, [r4, #0]
    88f0:	6062      	str	r2, [r4, #4]
    88f2:	605c      	str	r4, [r3, #4]
    88f4:	e7ca      	b.n	888c <_free_r+0x24>
    88f6:	46c0      	nop			; (mov r8, r8)
    88f8:	200038bc 	.word	0x200038bc

000088fc <_malloc_r>:
    88fc:	2303      	movs	r3, #3
    88fe:	b570      	push	{r4, r5, r6, lr}
    8900:	1ccd      	adds	r5, r1, #3
    8902:	439d      	bics	r5, r3
    8904:	3508      	adds	r5, #8
    8906:	0006      	movs	r6, r0
    8908:	2d0c      	cmp	r5, #12
    890a:	d21e      	bcs.n	894a <_malloc_r+0x4e>
    890c:	250c      	movs	r5, #12
    890e:	42a9      	cmp	r1, r5
    8910:	d81d      	bhi.n	894e <_malloc_r+0x52>
    8912:	0030      	movs	r0, r6
    8914:	f001 fc4b 	bl	a1ae <__malloc_lock>
    8918:	4a25      	ldr	r2, [pc, #148]	; (89b0 <_malloc_r+0xb4>)
    891a:	6814      	ldr	r4, [r2, #0]
    891c:	0021      	movs	r1, r4
    891e:	2900      	cmp	r1, #0
    8920:	d119      	bne.n	8956 <_malloc_r+0x5a>
    8922:	4c24      	ldr	r4, [pc, #144]	; (89b4 <_malloc_r+0xb8>)
    8924:	6823      	ldr	r3, [r4, #0]
    8926:	2b00      	cmp	r3, #0
    8928:	d103      	bne.n	8932 <_malloc_r+0x36>
    892a:	0030      	movs	r0, r6
    892c:	f000 fcb4 	bl	9298 <_sbrk_r>
    8930:	6020      	str	r0, [r4, #0]
    8932:	0029      	movs	r1, r5
    8934:	0030      	movs	r0, r6
    8936:	f000 fcaf 	bl	9298 <_sbrk_r>
    893a:	1c43      	adds	r3, r0, #1
    893c:	d12c      	bne.n	8998 <_malloc_r+0x9c>
    893e:	230c      	movs	r3, #12
    8940:	0030      	movs	r0, r6
    8942:	6033      	str	r3, [r6, #0]
    8944:	f001 fc34 	bl	a1b0 <__malloc_unlock>
    8948:	e003      	b.n	8952 <_malloc_r+0x56>
    894a:	2d00      	cmp	r5, #0
    894c:	dadf      	bge.n	890e <_malloc_r+0x12>
    894e:	230c      	movs	r3, #12
    8950:	6033      	str	r3, [r6, #0]
    8952:	2000      	movs	r0, #0
    8954:	bd70      	pop	{r4, r5, r6, pc}
    8956:	680b      	ldr	r3, [r1, #0]
    8958:	1b5b      	subs	r3, r3, r5
    895a:	d41a      	bmi.n	8992 <_malloc_r+0x96>
    895c:	2b0b      	cmp	r3, #11
    895e:	d903      	bls.n	8968 <_malloc_r+0x6c>
    8960:	600b      	str	r3, [r1, #0]
    8962:	18cc      	adds	r4, r1, r3
    8964:	6025      	str	r5, [r4, #0]
    8966:	e003      	b.n	8970 <_malloc_r+0x74>
    8968:	428c      	cmp	r4, r1
    896a:	d10e      	bne.n	898a <_malloc_r+0x8e>
    896c:	6863      	ldr	r3, [r4, #4]
    896e:	6013      	str	r3, [r2, #0]
    8970:	0030      	movs	r0, r6
    8972:	f001 fc1d 	bl	a1b0 <__malloc_unlock>
    8976:	0020      	movs	r0, r4
    8978:	2207      	movs	r2, #7
    897a:	300b      	adds	r0, #11
    897c:	1d23      	adds	r3, r4, #4
    897e:	4390      	bics	r0, r2
    8980:	1ac3      	subs	r3, r0, r3
    8982:	d0e7      	beq.n	8954 <_malloc_r+0x58>
    8984:	425a      	negs	r2, r3
    8986:	50e2      	str	r2, [r4, r3]
    8988:	e7e4      	b.n	8954 <_malloc_r+0x58>
    898a:	684b      	ldr	r3, [r1, #4]
    898c:	6063      	str	r3, [r4, #4]
    898e:	000c      	movs	r4, r1
    8990:	e7ee      	b.n	8970 <_malloc_r+0x74>
    8992:	000c      	movs	r4, r1
    8994:	6849      	ldr	r1, [r1, #4]
    8996:	e7c2      	b.n	891e <_malloc_r+0x22>
    8998:	2303      	movs	r3, #3
    899a:	1cc4      	adds	r4, r0, #3
    899c:	439c      	bics	r4, r3
    899e:	42a0      	cmp	r0, r4
    89a0:	d0e0      	beq.n	8964 <_malloc_r+0x68>
    89a2:	1a21      	subs	r1, r4, r0
    89a4:	0030      	movs	r0, r6
    89a6:	f000 fc77 	bl	9298 <_sbrk_r>
    89aa:	1c43      	adds	r3, r0, #1
    89ac:	d1da      	bne.n	8964 <_malloc_r+0x68>
    89ae:	e7c6      	b.n	893e <_malloc_r+0x42>
    89b0:	200038bc 	.word	0x200038bc
    89b4:	200038c0 	.word	0x200038c0

000089b8 <__cvt>:
    89b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    89ba:	b08b      	sub	sp, #44	; 0x2c
    89bc:	0014      	movs	r4, r2
    89be:	1e1d      	subs	r5, r3, #0
    89c0:	9912      	ldr	r1, [sp, #72]	; 0x48
    89c2:	da53      	bge.n	8a6c <__cvt+0xb4>
    89c4:	2480      	movs	r4, #128	; 0x80
    89c6:	0624      	lsls	r4, r4, #24
    89c8:	191b      	adds	r3, r3, r4
    89ca:	001d      	movs	r5, r3
    89cc:	0014      	movs	r4, r2
    89ce:	232d      	movs	r3, #45	; 0x2d
    89d0:	700b      	strb	r3, [r1, #0]
    89d2:	2320      	movs	r3, #32
    89d4:	9e14      	ldr	r6, [sp, #80]	; 0x50
    89d6:	2203      	movs	r2, #3
    89d8:	439e      	bics	r6, r3
    89da:	2e46      	cmp	r6, #70	; 0x46
    89dc:	d007      	beq.n	89ee <__cvt+0x36>
    89de:	0033      	movs	r3, r6
    89e0:	3b45      	subs	r3, #69	; 0x45
    89e2:	4259      	negs	r1, r3
    89e4:	414b      	adcs	r3, r1
    89e6:	9910      	ldr	r1, [sp, #64]	; 0x40
    89e8:	3a01      	subs	r2, #1
    89ea:	18cb      	adds	r3, r1, r3
    89ec:	9310      	str	r3, [sp, #64]	; 0x40
    89ee:	ab09      	add	r3, sp, #36	; 0x24
    89f0:	9304      	str	r3, [sp, #16]
    89f2:	ab08      	add	r3, sp, #32
    89f4:	9303      	str	r3, [sp, #12]
    89f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    89f8:	9200      	str	r2, [sp, #0]
    89fa:	9302      	str	r3, [sp, #8]
    89fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    89fe:	0022      	movs	r2, r4
    8a00:	9301      	str	r3, [sp, #4]
    8a02:	002b      	movs	r3, r5
    8a04:	f000 fdb4 	bl	9570 <_dtoa_r>
    8a08:	0007      	movs	r7, r0
    8a0a:	2e47      	cmp	r6, #71	; 0x47
    8a0c:	d102      	bne.n	8a14 <__cvt+0x5c>
    8a0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a10:	07db      	lsls	r3, r3, #31
    8a12:	d524      	bpl.n	8a5e <__cvt+0xa6>
    8a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8a16:	18fb      	adds	r3, r7, r3
    8a18:	9307      	str	r3, [sp, #28]
    8a1a:	2e46      	cmp	r6, #70	; 0x46
    8a1c:	d114      	bne.n	8a48 <__cvt+0x90>
    8a1e:	783b      	ldrb	r3, [r7, #0]
    8a20:	2b30      	cmp	r3, #48	; 0x30
    8a22:	d10c      	bne.n	8a3e <__cvt+0x86>
    8a24:	2200      	movs	r2, #0
    8a26:	2300      	movs	r3, #0
    8a28:	0020      	movs	r0, r4
    8a2a:	0029      	movs	r1, r5
    8a2c:	f002 f9f4 	bl	ae18 <__aeabi_dcmpeq>
    8a30:	2800      	cmp	r0, #0
    8a32:	d104      	bne.n	8a3e <__cvt+0x86>
    8a34:	2301      	movs	r3, #1
    8a36:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8a38:	1a9b      	subs	r3, r3, r2
    8a3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8a3c:	6013      	str	r3, [r2, #0]
    8a3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8a40:	9a07      	ldr	r2, [sp, #28]
    8a42:	681b      	ldr	r3, [r3, #0]
    8a44:	18d3      	adds	r3, r2, r3
    8a46:	9307      	str	r3, [sp, #28]
    8a48:	2200      	movs	r2, #0
    8a4a:	2300      	movs	r3, #0
    8a4c:	0020      	movs	r0, r4
    8a4e:	0029      	movs	r1, r5
    8a50:	f002 f9e2 	bl	ae18 <__aeabi_dcmpeq>
    8a54:	2230      	movs	r2, #48	; 0x30
    8a56:	2800      	cmp	r0, #0
    8a58:	d00d      	beq.n	8a76 <__cvt+0xbe>
    8a5a:	9b07      	ldr	r3, [sp, #28]
    8a5c:	9309      	str	r3, [sp, #36]	; 0x24
    8a5e:	0038      	movs	r0, r7
    8a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8a62:	9a15      	ldr	r2, [sp, #84]	; 0x54
    8a64:	1bdb      	subs	r3, r3, r7
    8a66:	6013      	str	r3, [r2, #0]
    8a68:	b00b      	add	sp, #44	; 0x2c
    8a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a6c:	2300      	movs	r3, #0
    8a6e:	e7af      	b.n	89d0 <__cvt+0x18>
    8a70:	1c59      	adds	r1, r3, #1
    8a72:	9109      	str	r1, [sp, #36]	; 0x24
    8a74:	701a      	strb	r2, [r3, #0]
    8a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8a78:	9907      	ldr	r1, [sp, #28]
    8a7a:	4299      	cmp	r1, r3
    8a7c:	d8f8      	bhi.n	8a70 <__cvt+0xb8>
    8a7e:	e7ee      	b.n	8a5e <__cvt+0xa6>

00008a80 <__exponent>:
    8a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a82:	232b      	movs	r3, #43	; 0x2b
    8a84:	b085      	sub	sp, #20
    8a86:	0007      	movs	r7, r0
    8a88:	000c      	movs	r4, r1
    8a8a:	7002      	strb	r2, [r0, #0]
    8a8c:	1c86      	adds	r6, r0, #2
    8a8e:	2900      	cmp	r1, #0
    8a90:	da01      	bge.n	8a96 <__exponent+0x16>
    8a92:	232d      	movs	r3, #45	; 0x2d
    8a94:	424c      	negs	r4, r1
    8a96:	707b      	strb	r3, [r7, #1]
    8a98:	2c09      	cmp	r4, #9
    8a9a:	dd23      	ble.n	8ae4 <__exponent+0x64>
    8a9c:	ab02      	add	r3, sp, #8
    8a9e:	1ddd      	adds	r5, r3, #7
    8aa0:	1e6b      	subs	r3, r5, #1
    8aa2:	0020      	movs	r0, r4
    8aa4:	210a      	movs	r1, #10
    8aa6:	9301      	str	r3, [sp, #4]
    8aa8:	f002 f9a0 	bl	adec <__aeabi_idivmod>
    8aac:	1e6b      	subs	r3, r5, #1
    8aae:	3130      	adds	r1, #48	; 0x30
    8ab0:	7019      	strb	r1, [r3, #0]
    8ab2:	0020      	movs	r0, r4
    8ab4:	210a      	movs	r1, #10
    8ab6:	f002 f8b3 	bl	ac20 <__divsi3>
    8aba:	0004      	movs	r4, r0
    8abc:	2809      	cmp	r0, #9
    8abe:	dc0a      	bgt.n	8ad6 <__exponent+0x56>
    8ac0:	3d02      	subs	r5, #2
    8ac2:	3430      	adds	r4, #48	; 0x30
    8ac4:	702c      	strb	r4, [r5, #0]
    8ac6:	ab02      	add	r3, sp, #8
    8ac8:	3307      	adds	r3, #7
    8aca:	0030      	movs	r0, r6
    8acc:	42ab      	cmp	r3, r5
    8ace:	d804      	bhi.n	8ada <__exponent+0x5a>
    8ad0:	1bc0      	subs	r0, r0, r7
    8ad2:	b005      	add	sp, #20
    8ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ad6:	9d01      	ldr	r5, [sp, #4]
    8ad8:	e7e2      	b.n	8aa0 <__exponent+0x20>
    8ada:	782b      	ldrb	r3, [r5, #0]
    8adc:	3501      	adds	r5, #1
    8ade:	7033      	strb	r3, [r6, #0]
    8ae0:	3601      	adds	r6, #1
    8ae2:	e7f0      	b.n	8ac6 <__exponent+0x46>
    8ae4:	2330      	movs	r3, #48	; 0x30
    8ae6:	18e4      	adds	r4, r4, r3
    8ae8:	7033      	strb	r3, [r6, #0]
    8aea:	1cb0      	adds	r0, r6, #2
    8aec:	7074      	strb	r4, [r6, #1]
    8aee:	e7ef      	b.n	8ad0 <__exponent+0x50>

00008af0 <_printf_float>:
    8af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8af2:	b095      	sub	sp, #84	; 0x54
    8af4:	000c      	movs	r4, r1
    8af6:	920a      	str	r2, [sp, #40]	; 0x28
    8af8:	930b      	str	r3, [sp, #44]	; 0x2c
    8afa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    8afc:	9009      	str	r0, [sp, #36]	; 0x24
    8afe:	f001 fb2d 	bl	a15c <_localeconv_r>
    8b02:	6803      	ldr	r3, [r0, #0]
    8b04:	0018      	movs	r0, r3
    8b06:	930d      	str	r3, [sp, #52]	; 0x34
    8b08:	f000 fc4a 	bl	93a0 <strlen>
    8b0c:	2300      	movs	r3, #0
    8b0e:	9312      	str	r3, [sp, #72]	; 0x48
    8b10:	6823      	ldr	r3, [r4, #0]
    8b12:	900e      	str	r0, [sp, #56]	; 0x38
    8b14:	930c      	str	r3, [sp, #48]	; 0x30
    8b16:	990c      	ldr	r1, [sp, #48]	; 0x30
    8b18:	7e27      	ldrb	r7, [r4, #24]
    8b1a:	682b      	ldr	r3, [r5, #0]
    8b1c:	2207      	movs	r2, #7
    8b1e:	05c9      	lsls	r1, r1, #23
    8b20:	d547      	bpl.n	8bb2 <_printf_float+0xc2>
    8b22:	189b      	adds	r3, r3, r2
    8b24:	4393      	bics	r3, r2
    8b26:	001a      	movs	r2, r3
    8b28:	3208      	adds	r2, #8
    8b2a:	602a      	str	r2, [r5, #0]
    8b2c:	681a      	ldr	r2, [r3, #0]
    8b2e:	685b      	ldr	r3, [r3, #4]
    8b30:	64a2      	str	r2, [r4, #72]	; 0x48
    8b32:	64e3      	str	r3, [r4, #76]	; 0x4c
    8b34:	2201      	movs	r2, #1
    8b36:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    8b38:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    8b3a:	006b      	lsls	r3, r5, #1
    8b3c:	085b      	lsrs	r3, r3, #1
    8b3e:	930f      	str	r3, [sp, #60]	; 0x3c
    8b40:	4252      	negs	r2, r2
    8b42:	4ba7      	ldr	r3, [pc, #668]	; (8de0 <_printf_float+0x2f0>)
    8b44:	0030      	movs	r0, r6
    8b46:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8b48:	f004 fdde 	bl	d708 <__aeabi_dcmpun>
    8b4c:	2800      	cmp	r0, #0
    8b4e:	d000      	beq.n	8b52 <_printf_float+0x62>
    8b50:	e206      	b.n	8f60 <_printf_float+0x470>
    8b52:	2201      	movs	r2, #1
    8b54:	4ba2      	ldr	r3, [pc, #648]	; (8de0 <_printf_float+0x2f0>)
    8b56:	4252      	negs	r2, r2
    8b58:	0030      	movs	r0, r6
    8b5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8b5c:	f002 f96c 	bl	ae38 <__aeabi_dcmple>
    8b60:	2800      	cmp	r0, #0
    8b62:	d000      	beq.n	8b66 <_printf_float+0x76>
    8b64:	e1fc      	b.n	8f60 <_printf_float+0x470>
    8b66:	2200      	movs	r2, #0
    8b68:	2300      	movs	r3, #0
    8b6a:	0030      	movs	r0, r6
    8b6c:	0029      	movs	r1, r5
    8b6e:	f002 f959 	bl	ae24 <__aeabi_dcmplt>
    8b72:	2800      	cmp	r0, #0
    8b74:	d003      	beq.n	8b7e <_printf_float+0x8e>
    8b76:	0023      	movs	r3, r4
    8b78:	222d      	movs	r2, #45	; 0x2d
    8b7a:	3343      	adds	r3, #67	; 0x43
    8b7c:	701a      	strb	r2, [r3, #0]
    8b7e:	4d99      	ldr	r5, [pc, #612]	; (8de4 <_printf_float+0x2f4>)
    8b80:	2f47      	cmp	r7, #71	; 0x47
    8b82:	d800      	bhi.n	8b86 <_printf_float+0x96>
    8b84:	4d98      	ldr	r5, [pc, #608]	; (8de8 <_printf_float+0x2f8>)
    8b86:	2303      	movs	r3, #3
    8b88:	2600      	movs	r6, #0
    8b8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8b8c:	6123      	str	r3, [r4, #16]
    8b8e:	3301      	adds	r3, #1
    8b90:	439a      	bics	r2, r3
    8b92:	6022      	str	r2, [r4, #0]
    8b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8b96:	aa13      	add	r2, sp, #76	; 0x4c
    8b98:	9300      	str	r3, [sp, #0]
    8b9a:	0021      	movs	r1, r4
    8b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8b9e:	9809      	ldr	r0, [sp, #36]	; 0x24
    8ba0:	f000 f9f2 	bl	8f88 <_printf_common>
    8ba4:	1c43      	adds	r3, r0, #1
    8ba6:	d000      	beq.n	8baa <_printf_float+0xba>
    8ba8:	e09c      	b.n	8ce4 <_printf_float+0x1f4>
    8baa:	2001      	movs	r0, #1
    8bac:	4240      	negs	r0, r0
    8bae:	b015      	add	sp, #84	; 0x54
    8bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8bb2:	3307      	adds	r3, #7
    8bb4:	e7b6      	b.n	8b24 <_printf_float+0x34>
    8bb6:	2380      	movs	r3, #128	; 0x80
    8bb8:	6862      	ldr	r2, [r4, #4]
    8bba:	00db      	lsls	r3, r3, #3
    8bbc:	1c51      	adds	r1, r2, #1
    8bbe:	d145      	bne.n	8c4c <_printf_float+0x15c>
    8bc0:	3207      	adds	r2, #7
    8bc2:	6062      	str	r2, [r4, #4]
    8bc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8bc6:	2100      	movs	r1, #0
    8bc8:	4313      	orrs	r3, r2
    8bca:	aa12      	add	r2, sp, #72	; 0x48
    8bcc:	9205      	str	r2, [sp, #20]
    8bce:	aa11      	add	r2, sp, #68	; 0x44
    8bd0:	9203      	str	r2, [sp, #12]
    8bd2:	2223      	movs	r2, #35	; 0x23
    8bd4:	6023      	str	r3, [r4, #0]
    8bd6:	9106      	str	r1, [sp, #24]
    8bd8:	9301      	str	r3, [sp, #4]
    8bda:	a908      	add	r1, sp, #32
    8bdc:	6863      	ldr	r3, [r4, #4]
    8bde:	1852      	adds	r2, r2, r1
    8be0:	9202      	str	r2, [sp, #8]
    8be2:	9300      	str	r3, [sp, #0]
    8be4:	0032      	movs	r2, r6
    8be6:	002b      	movs	r3, r5
    8be8:	9704      	str	r7, [sp, #16]
    8bea:	9809      	ldr	r0, [sp, #36]	; 0x24
    8bec:	f7ff fee4 	bl	89b8 <__cvt>
    8bf0:	2320      	movs	r3, #32
    8bf2:	003a      	movs	r2, r7
    8bf4:	0005      	movs	r5, r0
    8bf6:	439a      	bics	r2, r3
    8bf8:	2a47      	cmp	r2, #71	; 0x47
    8bfa:	d107      	bne.n	8c0c <_printf_float+0x11c>
    8bfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8bfe:	1cda      	adds	r2, r3, #3
    8c00:	db02      	blt.n	8c08 <_printf_float+0x118>
    8c02:	6862      	ldr	r2, [r4, #4]
    8c04:	4293      	cmp	r3, r2
    8c06:	dd5b      	ble.n	8cc0 <_printf_float+0x1d0>
    8c08:	3f02      	subs	r7, #2
    8c0a:	b2ff      	uxtb	r7, r7
    8c0c:	9911      	ldr	r1, [sp, #68]	; 0x44
    8c0e:	2f65      	cmp	r7, #101	; 0x65
    8c10:	d83b      	bhi.n	8c8a <_printf_float+0x19a>
    8c12:	0020      	movs	r0, r4
    8c14:	3901      	subs	r1, #1
    8c16:	003a      	movs	r2, r7
    8c18:	3050      	adds	r0, #80	; 0x50
    8c1a:	9111      	str	r1, [sp, #68]	; 0x44
    8c1c:	f7ff ff30 	bl	8a80 <__exponent>
    8c20:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8c22:	0006      	movs	r6, r0
    8c24:	1883      	adds	r3, r0, r2
    8c26:	6123      	str	r3, [r4, #16]
    8c28:	2a01      	cmp	r2, #1
    8c2a:	dc02      	bgt.n	8c32 <_printf_float+0x142>
    8c2c:	6822      	ldr	r2, [r4, #0]
    8c2e:	07d2      	lsls	r2, r2, #31
    8c30:	d501      	bpl.n	8c36 <_printf_float+0x146>
    8c32:	3301      	adds	r3, #1
    8c34:	6123      	str	r3, [r4, #16]
    8c36:	2323      	movs	r3, #35	; 0x23
    8c38:	aa08      	add	r2, sp, #32
    8c3a:	189b      	adds	r3, r3, r2
    8c3c:	781b      	ldrb	r3, [r3, #0]
    8c3e:	2b00      	cmp	r3, #0
    8c40:	d0a8      	beq.n	8b94 <_printf_float+0xa4>
    8c42:	0023      	movs	r3, r4
    8c44:	222d      	movs	r2, #45	; 0x2d
    8c46:	3343      	adds	r3, #67	; 0x43
    8c48:	701a      	strb	r2, [r3, #0]
    8c4a:	e7a3      	b.n	8b94 <_printf_float+0xa4>
    8c4c:	2f67      	cmp	r7, #103	; 0x67
    8c4e:	d001      	beq.n	8c54 <_printf_float+0x164>
    8c50:	2f47      	cmp	r7, #71	; 0x47
    8c52:	d1b7      	bne.n	8bc4 <_printf_float+0xd4>
    8c54:	2a00      	cmp	r2, #0
    8c56:	d016      	beq.n	8c86 <_printf_float+0x196>
    8c58:	990c      	ldr	r1, [sp, #48]	; 0x30
    8c5a:	a808      	add	r0, sp, #32
    8c5c:	430b      	orrs	r3, r1
    8c5e:	2100      	movs	r1, #0
    8c60:	9106      	str	r1, [sp, #24]
    8c62:	a912      	add	r1, sp, #72	; 0x48
    8c64:	9105      	str	r1, [sp, #20]
    8c66:	a911      	add	r1, sp, #68	; 0x44
    8c68:	9103      	str	r1, [sp, #12]
    8c6a:	2123      	movs	r1, #35	; 0x23
    8c6c:	1809      	adds	r1, r1, r0
    8c6e:	6023      	str	r3, [r4, #0]
    8c70:	9301      	str	r3, [sp, #4]
    8c72:	9200      	str	r2, [sp, #0]
    8c74:	002b      	movs	r3, r5
    8c76:	9704      	str	r7, [sp, #16]
    8c78:	9102      	str	r1, [sp, #8]
    8c7a:	0032      	movs	r2, r6
    8c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
    8c7e:	f7ff fe9b 	bl	89b8 <__cvt>
    8c82:	0005      	movs	r5, r0
    8c84:	e7ba      	b.n	8bfc <_printf_float+0x10c>
    8c86:	2201      	movs	r2, #1
    8c88:	e79b      	b.n	8bc2 <_printf_float+0xd2>
    8c8a:	2f66      	cmp	r7, #102	; 0x66
    8c8c:	d119      	bne.n	8cc2 <_printf_float+0x1d2>
    8c8e:	6863      	ldr	r3, [r4, #4]
    8c90:	2900      	cmp	r1, #0
    8c92:	dd0c      	ble.n	8cae <_printf_float+0x1be>
    8c94:	6121      	str	r1, [r4, #16]
    8c96:	2b00      	cmp	r3, #0
    8c98:	d102      	bne.n	8ca0 <_printf_float+0x1b0>
    8c9a:	6822      	ldr	r2, [r4, #0]
    8c9c:	07d2      	lsls	r2, r2, #31
    8c9e:	d502      	bpl.n	8ca6 <_printf_float+0x1b6>
    8ca0:	3301      	adds	r3, #1
    8ca2:	185b      	adds	r3, r3, r1
    8ca4:	6123      	str	r3, [r4, #16]
    8ca6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ca8:	2600      	movs	r6, #0
    8caa:	65a3      	str	r3, [r4, #88]	; 0x58
    8cac:	e7c3      	b.n	8c36 <_printf_float+0x146>
    8cae:	2b00      	cmp	r3, #0
    8cb0:	d103      	bne.n	8cba <_printf_float+0x1ca>
    8cb2:	2201      	movs	r2, #1
    8cb4:	6821      	ldr	r1, [r4, #0]
    8cb6:	4211      	tst	r1, r2
    8cb8:	d000      	beq.n	8cbc <_printf_float+0x1cc>
    8cba:	1c9a      	adds	r2, r3, #2
    8cbc:	6122      	str	r2, [r4, #16]
    8cbe:	e7f2      	b.n	8ca6 <_printf_float+0x1b6>
    8cc0:	2767      	movs	r7, #103	; 0x67
    8cc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8cc4:	9812      	ldr	r0, [sp, #72]	; 0x48
    8cc6:	4283      	cmp	r3, r0
    8cc8:	db05      	blt.n	8cd6 <_printf_float+0x1e6>
    8cca:	6822      	ldr	r2, [r4, #0]
    8ccc:	6123      	str	r3, [r4, #16]
    8cce:	07d2      	lsls	r2, r2, #31
    8cd0:	d5e9      	bpl.n	8ca6 <_printf_float+0x1b6>
    8cd2:	3301      	adds	r3, #1
    8cd4:	e7e6      	b.n	8ca4 <_printf_float+0x1b4>
    8cd6:	2201      	movs	r2, #1
    8cd8:	2b00      	cmp	r3, #0
    8cda:	dc01      	bgt.n	8ce0 <_printf_float+0x1f0>
    8cdc:	1892      	adds	r2, r2, r2
    8cde:	1ad2      	subs	r2, r2, r3
    8ce0:	1812      	adds	r2, r2, r0
    8ce2:	e7eb      	b.n	8cbc <_printf_float+0x1cc>
    8ce4:	6822      	ldr	r2, [r4, #0]
    8ce6:	0553      	lsls	r3, r2, #21
    8ce8:	d408      	bmi.n	8cfc <_printf_float+0x20c>
    8cea:	6923      	ldr	r3, [r4, #16]
    8cec:	002a      	movs	r2, r5
    8cee:	990a      	ldr	r1, [sp, #40]	; 0x28
    8cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
    8cf2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8cf4:	47a8      	blx	r5
    8cf6:	1c43      	adds	r3, r0, #1
    8cf8:	d129      	bne.n	8d4e <_printf_float+0x25e>
    8cfa:	e756      	b.n	8baa <_printf_float+0xba>
    8cfc:	2f65      	cmp	r7, #101	; 0x65
    8cfe:	d800      	bhi.n	8d02 <_printf_float+0x212>
    8d00:	e0dc      	b.n	8ebc <_printf_float+0x3cc>
    8d02:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    8d04:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    8d06:	2200      	movs	r2, #0
    8d08:	2300      	movs	r3, #0
    8d0a:	f002 f885 	bl	ae18 <__aeabi_dcmpeq>
    8d0e:	2800      	cmp	r0, #0
    8d10:	d035      	beq.n	8d7e <_printf_float+0x28e>
    8d12:	2301      	movs	r3, #1
    8d14:	4a35      	ldr	r2, [pc, #212]	; (8dec <_printf_float+0x2fc>)
    8d16:	990a      	ldr	r1, [sp, #40]	; 0x28
    8d18:	9809      	ldr	r0, [sp, #36]	; 0x24
    8d1a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8d1c:	47a8      	blx	r5
    8d1e:	1c43      	adds	r3, r0, #1
    8d20:	d100      	bne.n	8d24 <_printf_float+0x234>
    8d22:	e742      	b.n	8baa <_printf_float+0xba>
    8d24:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8d26:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8d28:	4293      	cmp	r3, r2
    8d2a:	db02      	blt.n	8d32 <_printf_float+0x242>
    8d2c:	6823      	ldr	r3, [r4, #0]
    8d2e:	07db      	lsls	r3, r3, #31
    8d30:	d50d      	bpl.n	8d4e <_printf_float+0x25e>
    8d32:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8d36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8d38:	990a      	ldr	r1, [sp, #40]	; 0x28
    8d3a:	9809      	ldr	r0, [sp, #36]	; 0x24
    8d3c:	47a8      	blx	r5
    8d3e:	2500      	movs	r5, #0
    8d40:	1c43      	adds	r3, r0, #1
    8d42:	d100      	bne.n	8d46 <_printf_float+0x256>
    8d44:	e731      	b.n	8baa <_printf_float+0xba>
    8d46:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d48:	3b01      	subs	r3, #1
    8d4a:	429d      	cmp	r5, r3
    8d4c:	db0b      	blt.n	8d66 <_printf_float+0x276>
    8d4e:	6823      	ldr	r3, [r4, #0]
    8d50:	2500      	movs	r5, #0
    8d52:	079b      	lsls	r3, r3, #30
    8d54:	d500      	bpl.n	8d58 <_printf_float+0x268>
    8d56:	e0fd      	b.n	8f54 <_printf_float+0x464>
    8d58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8d5a:	68e0      	ldr	r0, [r4, #12]
    8d5c:	4298      	cmp	r0, r3
    8d5e:	db00      	blt.n	8d62 <_printf_float+0x272>
    8d60:	e725      	b.n	8bae <_printf_float+0xbe>
    8d62:	0018      	movs	r0, r3
    8d64:	e723      	b.n	8bae <_printf_float+0xbe>
    8d66:	0022      	movs	r2, r4
    8d68:	2301      	movs	r3, #1
    8d6a:	321a      	adds	r2, #26
    8d6c:	990a      	ldr	r1, [sp, #40]	; 0x28
    8d6e:	9809      	ldr	r0, [sp, #36]	; 0x24
    8d70:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8d72:	47b0      	blx	r6
    8d74:	1c43      	adds	r3, r0, #1
    8d76:	d100      	bne.n	8d7a <_printf_float+0x28a>
    8d78:	e717      	b.n	8baa <_printf_float+0xba>
    8d7a:	3501      	adds	r5, #1
    8d7c:	e7e3      	b.n	8d46 <_printf_float+0x256>
    8d7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8d80:	2b00      	cmp	r3, #0
    8d82:	dc35      	bgt.n	8df0 <_printf_float+0x300>
    8d84:	2301      	movs	r3, #1
    8d86:	4a19      	ldr	r2, [pc, #100]	; (8dec <_printf_float+0x2fc>)
    8d88:	990a      	ldr	r1, [sp, #40]	; 0x28
    8d8a:	9809      	ldr	r0, [sp, #36]	; 0x24
    8d8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8d8e:	47b0      	blx	r6
    8d90:	1c43      	adds	r3, r0, #1
    8d92:	d100      	bne.n	8d96 <_printf_float+0x2a6>
    8d94:	e709      	b.n	8baa <_printf_float+0xba>
    8d96:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8d98:	2b00      	cmp	r3, #0
    8d9a:	d105      	bne.n	8da8 <_printf_float+0x2b8>
    8d9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d9e:	2b00      	cmp	r3, #0
    8da0:	d102      	bne.n	8da8 <_printf_float+0x2b8>
    8da2:	6823      	ldr	r3, [r4, #0]
    8da4:	07db      	lsls	r3, r3, #31
    8da6:	d5d2      	bpl.n	8d4e <_printf_float+0x25e>
    8da8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8daa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8dac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8dae:	990a      	ldr	r1, [sp, #40]	; 0x28
    8db0:	9809      	ldr	r0, [sp, #36]	; 0x24
    8db2:	47b0      	blx	r6
    8db4:	2600      	movs	r6, #0
    8db6:	1c43      	adds	r3, r0, #1
    8db8:	d100      	bne.n	8dbc <_printf_float+0x2cc>
    8dba:	e6f6      	b.n	8baa <_printf_float+0xba>
    8dbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8dbe:	425b      	negs	r3, r3
    8dc0:	429e      	cmp	r6, r3
    8dc2:	db01      	blt.n	8dc8 <_printf_float+0x2d8>
    8dc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8dc6:	e791      	b.n	8cec <_printf_float+0x1fc>
    8dc8:	0022      	movs	r2, r4
    8dca:	2301      	movs	r3, #1
    8dcc:	321a      	adds	r2, #26
    8dce:	990a      	ldr	r1, [sp, #40]	; 0x28
    8dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
    8dd2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    8dd4:	47b8      	blx	r7
    8dd6:	1c43      	adds	r3, r0, #1
    8dd8:	d100      	bne.n	8ddc <_printf_float+0x2ec>
    8dda:	e6e6      	b.n	8baa <_printf_float+0xba>
    8ddc:	3601      	adds	r6, #1
    8dde:	e7ed      	b.n	8dbc <_printf_float+0x2cc>
    8de0:	7fefffff 	.word	0x7fefffff
    8de4:	0000ec04 	.word	0x0000ec04
    8de8:	0000ec00 	.word	0x0000ec00
    8dec:	0000ec10 	.word	0x0000ec10
    8df0:	6da3      	ldr	r3, [r4, #88]	; 0x58
    8df2:	9e12      	ldr	r6, [sp, #72]	; 0x48
    8df4:	429e      	cmp	r6, r3
    8df6:	dd00      	ble.n	8dfa <_printf_float+0x30a>
    8df8:	001e      	movs	r6, r3
    8dfa:	2e00      	cmp	r6, #0
    8dfc:	dc35      	bgt.n	8e6a <_printf_float+0x37a>
    8dfe:	2300      	movs	r3, #0
    8e00:	930c      	str	r3, [sp, #48]	; 0x30
    8e02:	43f3      	mvns	r3, r6
    8e04:	17db      	asrs	r3, r3, #31
    8e06:	930f      	str	r3, [sp, #60]	; 0x3c
    8e08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8e0a:	6da7      	ldr	r7, [r4, #88]	; 0x58
    8e0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8e0e:	4033      	ands	r3, r6
    8e10:	1afb      	subs	r3, r7, r3
    8e12:	429a      	cmp	r2, r3
    8e14:	db32      	blt.n	8e7c <_printf_float+0x38c>
    8e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8e18:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8e1a:	4293      	cmp	r3, r2
    8e1c:	db3c      	blt.n	8e98 <_printf_float+0x3a8>
    8e1e:	6823      	ldr	r3, [r4, #0]
    8e20:	07db      	lsls	r3, r3, #31
    8e22:	d439      	bmi.n	8e98 <_printf_float+0x3a8>
    8e24:	9e12      	ldr	r6, [sp, #72]	; 0x48
    8e26:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8e28:	1bf3      	subs	r3, r6, r7
    8e2a:	1ab6      	subs	r6, r6, r2
    8e2c:	429e      	cmp	r6, r3
    8e2e:	dd00      	ble.n	8e32 <_printf_float+0x342>
    8e30:	001e      	movs	r6, r3
    8e32:	2e00      	cmp	r6, #0
    8e34:	dc39      	bgt.n	8eaa <_printf_float+0x3ba>
    8e36:	43f7      	mvns	r7, r6
    8e38:	2500      	movs	r5, #0
    8e3a:	17fb      	asrs	r3, r7, #31
    8e3c:	930c      	str	r3, [sp, #48]	; 0x30
    8e3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8e40:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e42:	990c      	ldr	r1, [sp, #48]	; 0x30
    8e44:	1a9b      	subs	r3, r3, r2
    8e46:	0032      	movs	r2, r6
    8e48:	400a      	ands	r2, r1
    8e4a:	1a9b      	subs	r3, r3, r2
    8e4c:	429d      	cmp	r5, r3
    8e4e:	db00      	blt.n	8e52 <_printf_float+0x362>
    8e50:	e77d      	b.n	8d4e <_printf_float+0x25e>
    8e52:	0022      	movs	r2, r4
    8e54:	2301      	movs	r3, #1
    8e56:	321a      	adds	r2, #26
    8e58:	990a      	ldr	r1, [sp, #40]	; 0x28
    8e5a:	9809      	ldr	r0, [sp, #36]	; 0x24
    8e5c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    8e5e:	47b8      	blx	r7
    8e60:	1c43      	adds	r3, r0, #1
    8e62:	d100      	bne.n	8e66 <_printf_float+0x376>
    8e64:	e6a1      	b.n	8baa <_printf_float+0xba>
    8e66:	3501      	adds	r5, #1
    8e68:	e7e9      	b.n	8e3e <_printf_float+0x34e>
    8e6a:	0033      	movs	r3, r6
    8e6c:	002a      	movs	r2, r5
    8e6e:	990a      	ldr	r1, [sp, #40]	; 0x28
    8e70:	9809      	ldr	r0, [sp, #36]	; 0x24
    8e72:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    8e74:	47b8      	blx	r7
    8e76:	1c43      	adds	r3, r0, #1
    8e78:	d1c1      	bne.n	8dfe <_printf_float+0x30e>
    8e7a:	e696      	b.n	8baa <_printf_float+0xba>
    8e7c:	0022      	movs	r2, r4
    8e7e:	2301      	movs	r3, #1
    8e80:	321a      	adds	r2, #26
    8e82:	990a      	ldr	r1, [sp, #40]	; 0x28
    8e84:	9809      	ldr	r0, [sp, #36]	; 0x24
    8e86:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    8e88:	47b8      	blx	r7
    8e8a:	1c43      	adds	r3, r0, #1
    8e8c:	d100      	bne.n	8e90 <_printf_float+0x3a0>
    8e8e:	e68c      	b.n	8baa <_printf_float+0xba>
    8e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8e92:	3301      	adds	r3, #1
    8e94:	930c      	str	r3, [sp, #48]	; 0x30
    8e96:	e7b7      	b.n	8e08 <_printf_float+0x318>
    8e98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8e9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8e9c:	990a      	ldr	r1, [sp, #40]	; 0x28
    8e9e:	9809      	ldr	r0, [sp, #36]	; 0x24
    8ea0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8ea2:	47b0      	blx	r6
    8ea4:	1c43      	adds	r3, r0, #1
    8ea6:	d1bd      	bne.n	8e24 <_printf_float+0x334>
    8ea8:	e67f      	b.n	8baa <_printf_float+0xba>
    8eaa:	19ea      	adds	r2, r5, r7
    8eac:	0033      	movs	r3, r6
    8eae:	990a      	ldr	r1, [sp, #40]	; 0x28
    8eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
    8eb2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8eb4:	47a8      	blx	r5
    8eb6:	1c43      	adds	r3, r0, #1
    8eb8:	d1bd      	bne.n	8e36 <_printf_float+0x346>
    8eba:	e676      	b.n	8baa <_printf_float+0xba>
    8ebc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ebe:	2b01      	cmp	r3, #1
    8ec0:	dc02      	bgt.n	8ec8 <_printf_float+0x3d8>
    8ec2:	2301      	movs	r3, #1
    8ec4:	421a      	tst	r2, r3
    8ec6:	d038      	beq.n	8f3a <_printf_float+0x44a>
    8ec8:	2301      	movs	r3, #1
    8eca:	002a      	movs	r2, r5
    8ecc:	990a      	ldr	r1, [sp, #40]	; 0x28
    8ece:	9809      	ldr	r0, [sp, #36]	; 0x24
    8ed0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    8ed2:	47b8      	blx	r7
    8ed4:	1c43      	adds	r3, r0, #1
    8ed6:	d100      	bne.n	8eda <_printf_float+0x3ea>
    8ed8:	e667      	b.n	8baa <_printf_float+0xba>
    8eda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8edc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8ede:	990a      	ldr	r1, [sp, #40]	; 0x28
    8ee0:	9809      	ldr	r0, [sp, #36]	; 0x24
    8ee2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    8ee4:	47b8      	blx	r7
    8ee6:	1c43      	adds	r3, r0, #1
    8ee8:	d100      	bne.n	8eec <_printf_float+0x3fc>
    8eea:	e65e      	b.n	8baa <_printf_float+0xba>
    8eec:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    8eee:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    8ef0:	2200      	movs	r2, #0
    8ef2:	2300      	movs	r3, #0
    8ef4:	f001 ff90 	bl	ae18 <__aeabi_dcmpeq>
    8ef8:	2800      	cmp	r0, #0
    8efa:	d008      	beq.n	8f0e <_printf_float+0x41e>
    8efc:	2500      	movs	r5, #0
    8efe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f00:	3b01      	subs	r3, #1
    8f02:	429d      	cmp	r5, r3
    8f04:	db0d      	blt.n	8f22 <_printf_float+0x432>
    8f06:	0022      	movs	r2, r4
    8f08:	0033      	movs	r3, r6
    8f0a:	3250      	adds	r2, #80	; 0x50
    8f0c:	e6ef      	b.n	8cee <_printf_float+0x1fe>
    8f0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f10:	1c6a      	adds	r2, r5, #1
    8f12:	3b01      	subs	r3, #1
    8f14:	990a      	ldr	r1, [sp, #40]	; 0x28
    8f16:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f18:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8f1a:	47a8      	blx	r5
    8f1c:	1c43      	adds	r3, r0, #1
    8f1e:	d1f2      	bne.n	8f06 <_printf_float+0x416>
    8f20:	e643      	b.n	8baa <_printf_float+0xba>
    8f22:	0022      	movs	r2, r4
    8f24:	2301      	movs	r3, #1
    8f26:	321a      	adds	r2, #26
    8f28:	990a      	ldr	r1, [sp, #40]	; 0x28
    8f2a:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f2c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    8f2e:	47b8      	blx	r7
    8f30:	1c43      	adds	r3, r0, #1
    8f32:	d100      	bne.n	8f36 <_printf_float+0x446>
    8f34:	e639      	b.n	8baa <_printf_float+0xba>
    8f36:	3501      	adds	r5, #1
    8f38:	e7e1      	b.n	8efe <_printf_float+0x40e>
    8f3a:	002a      	movs	r2, r5
    8f3c:	e7ea      	b.n	8f14 <_printf_float+0x424>
    8f3e:	0022      	movs	r2, r4
    8f40:	2301      	movs	r3, #1
    8f42:	3219      	adds	r2, #25
    8f44:	990a      	ldr	r1, [sp, #40]	; 0x28
    8f46:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f48:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8f4a:	47b0      	blx	r6
    8f4c:	1c43      	adds	r3, r0, #1
    8f4e:	d100      	bne.n	8f52 <_printf_float+0x462>
    8f50:	e62b      	b.n	8baa <_printf_float+0xba>
    8f52:	3501      	adds	r5, #1
    8f54:	68e3      	ldr	r3, [r4, #12]
    8f56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8f58:	1a9b      	subs	r3, r3, r2
    8f5a:	429d      	cmp	r5, r3
    8f5c:	dbef      	blt.n	8f3e <_printf_float+0x44e>
    8f5e:	e6fb      	b.n	8d58 <_printf_float+0x268>
    8f60:	0032      	movs	r2, r6
    8f62:	002b      	movs	r3, r5
    8f64:	0030      	movs	r0, r6
    8f66:	0029      	movs	r1, r5
    8f68:	f004 fbce 	bl	d708 <__aeabi_dcmpun>
    8f6c:	2800      	cmp	r0, #0
    8f6e:	d100      	bne.n	8f72 <_printf_float+0x482>
    8f70:	e621      	b.n	8bb6 <_printf_float+0xc6>
    8f72:	4d03      	ldr	r5, [pc, #12]	; (8f80 <_printf_float+0x490>)
    8f74:	2f47      	cmp	r7, #71	; 0x47
    8f76:	d900      	bls.n	8f7a <_printf_float+0x48a>
    8f78:	e605      	b.n	8b86 <_printf_float+0x96>
    8f7a:	4d02      	ldr	r5, [pc, #8]	; (8f84 <_printf_float+0x494>)
    8f7c:	e603      	b.n	8b86 <_printf_float+0x96>
    8f7e:	46c0      	nop			; (mov r8, r8)
    8f80:	0000ec0c 	.word	0x0000ec0c
    8f84:	0000ec08 	.word	0x0000ec08

00008f88 <_printf_common>:
    8f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8f8a:	0015      	movs	r5, r2
    8f8c:	9301      	str	r3, [sp, #4]
    8f8e:	688a      	ldr	r2, [r1, #8]
    8f90:	690b      	ldr	r3, [r1, #16]
    8f92:	9000      	str	r0, [sp, #0]
    8f94:	000c      	movs	r4, r1
    8f96:	4293      	cmp	r3, r2
    8f98:	da00      	bge.n	8f9c <_printf_common+0x14>
    8f9a:	0013      	movs	r3, r2
    8f9c:	0022      	movs	r2, r4
    8f9e:	602b      	str	r3, [r5, #0]
    8fa0:	3243      	adds	r2, #67	; 0x43
    8fa2:	7812      	ldrb	r2, [r2, #0]
    8fa4:	2a00      	cmp	r2, #0
    8fa6:	d001      	beq.n	8fac <_printf_common+0x24>
    8fa8:	3301      	adds	r3, #1
    8faa:	602b      	str	r3, [r5, #0]
    8fac:	6823      	ldr	r3, [r4, #0]
    8fae:	069b      	lsls	r3, r3, #26
    8fb0:	d502      	bpl.n	8fb8 <_printf_common+0x30>
    8fb2:	682b      	ldr	r3, [r5, #0]
    8fb4:	3302      	adds	r3, #2
    8fb6:	602b      	str	r3, [r5, #0]
    8fb8:	2706      	movs	r7, #6
    8fba:	6823      	ldr	r3, [r4, #0]
    8fbc:	401f      	ands	r7, r3
    8fbe:	d027      	beq.n	9010 <_printf_common+0x88>
    8fc0:	0023      	movs	r3, r4
    8fc2:	3343      	adds	r3, #67	; 0x43
    8fc4:	781b      	ldrb	r3, [r3, #0]
    8fc6:	1e5a      	subs	r2, r3, #1
    8fc8:	4193      	sbcs	r3, r2
    8fca:	6822      	ldr	r2, [r4, #0]
    8fcc:	0692      	lsls	r2, r2, #26
    8fce:	d430      	bmi.n	9032 <_printf_common+0xaa>
    8fd0:	0022      	movs	r2, r4
    8fd2:	9901      	ldr	r1, [sp, #4]
    8fd4:	3243      	adds	r2, #67	; 0x43
    8fd6:	9800      	ldr	r0, [sp, #0]
    8fd8:	9e08      	ldr	r6, [sp, #32]
    8fda:	47b0      	blx	r6
    8fdc:	1c43      	adds	r3, r0, #1
    8fde:	d025      	beq.n	902c <_printf_common+0xa4>
    8fe0:	2306      	movs	r3, #6
    8fe2:	6820      	ldr	r0, [r4, #0]
    8fe4:	682a      	ldr	r2, [r5, #0]
    8fe6:	68e1      	ldr	r1, [r4, #12]
    8fe8:	4003      	ands	r3, r0
    8fea:	2500      	movs	r5, #0
    8fec:	2b04      	cmp	r3, #4
    8fee:	d103      	bne.n	8ff8 <_printf_common+0x70>
    8ff0:	1a8d      	subs	r5, r1, r2
    8ff2:	43eb      	mvns	r3, r5
    8ff4:	17db      	asrs	r3, r3, #31
    8ff6:	401d      	ands	r5, r3
    8ff8:	68a3      	ldr	r3, [r4, #8]
    8ffa:	6922      	ldr	r2, [r4, #16]
    8ffc:	4293      	cmp	r3, r2
    8ffe:	dd01      	ble.n	9004 <_printf_common+0x7c>
    9000:	1a9b      	subs	r3, r3, r2
    9002:	18ed      	adds	r5, r5, r3
    9004:	2700      	movs	r7, #0
    9006:	42bd      	cmp	r5, r7
    9008:	d120      	bne.n	904c <_printf_common+0xc4>
    900a:	2000      	movs	r0, #0
    900c:	e010      	b.n	9030 <_printf_common+0xa8>
    900e:	3701      	adds	r7, #1
    9010:	68e3      	ldr	r3, [r4, #12]
    9012:	682a      	ldr	r2, [r5, #0]
    9014:	1a9b      	subs	r3, r3, r2
    9016:	429f      	cmp	r7, r3
    9018:	dad2      	bge.n	8fc0 <_printf_common+0x38>
    901a:	0022      	movs	r2, r4
    901c:	2301      	movs	r3, #1
    901e:	3219      	adds	r2, #25
    9020:	9901      	ldr	r1, [sp, #4]
    9022:	9800      	ldr	r0, [sp, #0]
    9024:	9e08      	ldr	r6, [sp, #32]
    9026:	47b0      	blx	r6
    9028:	1c43      	adds	r3, r0, #1
    902a:	d1f0      	bne.n	900e <_printf_common+0x86>
    902c:	2001      	movs	r0, #1
    902e:	4240      	negs	r0, r0
    9030:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9032:	2030      	movs	r0, #48	; 0x30
    9034:	18e1      	adds	r1, r4, r3
    9036:	3143      	adds	r1, #67	; 0x43
    9038:	7008      	strb	r0, [r1, #0]
    903a:	0021      	movs	r1, r4
    903c:	1c5a      	adds	r2, r3, #1
    903e:	3145      	adds	r1, #69	; 0x45
    9040:	7809      	ldrb	r1, [r1, #0]
    9042:	18a2      	adds	r2, r4, r2
    9044:	3243      	adds	r2, #67	; 0x43
    9046:	3302      	adds	r3, #2
    9048:	7011      	strb	r1, [r2, #0]
    904a:	e7c1      	b.n	8fd0 <_printf_common+0x48>
    904c:	0022      	movs	r2, r4
    904e:	2301      	movs	r3, #1
    9050:	321a      	adds	r2, #26
    9052:	9901      	ldr	r1, [sp, #4]
    9054:	9800      	ldr	r0, [sp, #0]
    9056:	9e08      	ldr	r6, [sp, #32]
    9058:	47b0      	blx	r6
    905a:	1c43      	adds	r3, r0, #1
    905c:	d0e6      	beq.n	902c <_printf_common+0xa4>
    905e:	3701      	adds	r7, #1
    9060:	e7d1      	b.n	9006 <_printf_common+0x7e>
	...

00009064 <_printf_i>:
    9064:	b5f0      	push	{r4, r5, r6, r7, lr}
    9066:	b08b      	sub	sp, #44	; 0x2c
    9068:	9206      	str	r2, [sp, #24]
    906a:	000a      	movs	r2, r1
    906c:	3243      	adds	r2, #67	; 0x43
    906e:	9307      	str	r3, [sp, #28]
    9070:	9005      	str	r0, [sp, #20]
    9072:	9204      	str	r2, [sp, #16]
    9074:	7e0a      	ldrb	r2, [r1, #24]
    9076:	000c      	movs	r4, r1
    9078:	9b10      	ldr	r3, [sp, #64]	; 0x40
    907a:	2a6e      	cmp	r2, #110	; 0x6e
    907c:	d100      	bne.n	9080 <_printf_i+0x1c>
    907e:	e08f      	b.n	91a0 <_printf_i+0x13c>
    9080:	d817      	bhi.n	90b2 <_printf_i+0x4e>
    9082:	2a63      	cmp	r2, #99	; 0x63
    9084:	d02c      	beq.n	90e0 <_printf_i+0x7c>
    9086:	d808      	bhi.n	909a <_printf_i+0x36>
    9088:	2a00      	cmp	r2, #0
    908a:	d100      	bne.n	908e <_printf_i+0x2a>
    908c:	e099      	b.n	91c2 <_printf_i+0x15e>
    908e:	2a58      	cmp	r2, #88	; 0x58
    9090:	d054      	beq.n	913c <_printf_i+0xd8>
    9092:	0026      	movs	r6, r4
    9094:	3642      	adds	r6, #66	; 0x42
    9096:	7032      	strb	r2, [r6, #0]
    9098:	e029      	b.n	90ee <_printf_i+0x8a>
    909a:	2a64      	cmp	r2, #100	; 0x64
    909c:	d001      	beq.n	90a2 <_printf_i+0x3e>
    909e:	2a69      	cmp	r2, #105	; 0x69
    90a0:	d1f7      	bne.n	9092 <_printf_i+0x2e>
    90a2:	6821      	ldr	r1, [r4, #0]
    90a4:	681a      	ldr	r2, [r3, #0]
    90a6:	0608      	lsls	r0, r1, #24
    90a8:	d523      	bpl.n	90f2 <_printf_i+0x8e>
    90aa:	1d11      	adds	r1, r2, #4
    90ac:	6019      	str	r1, [r3, #0]
    90ae:	6815      	ldr	r5, [r2, #0]
    90b0:	e025      	b.n	90fe <_printf_i+0x9a>
    90b2:	2a73      	cmp	r2, #115	; 0x73
    90b4:	d100      	bne.n	90b8 <_printf_i+0x54>
    90b6:	e088      	b.n	91ca <_printf_i+0x166>
    90b8:	d808      	bhi.n	90cc <_printf_i+0x68>
    90ba:	2a6f      	cmp	r2, #111	; 0x6f
    90bc:	d029      	beq.n	9112 <_printf_i+0xae>
    90be:	2a70      	cmp	r2, #112	; 0x70
    90c0:	d1e7      	bne.n	9092 <_printf_i+0x2e>
    90c2:	2220      	movs	r2, #32
    90c4:	6809      	ldr	r1, [r1, #0]
    90c6:	430a      	orrs	r2, r1
    90c8:	6022      	str	r2, [r4, #0]
    90ca:	e003      	b.n	90d4 <_printf_i+0x70>
    90cc:	2a75      	cmp	r2, #117	; 0x75
    90ce:	d020      	beq.n	9112 <_printf_i+0xae>
    90d0:	2a78      	cmp	r2, #120	; 0x78
    90d2:	d1de      	bne.n	9092 <_printf_i+0x2e>
    90d4:	0022      	movs	r2, r4
    90d6:	2178      	movs	r1, #120	; 0x78
    90d8:	3245      	adds	r2, #69	; 0x45
    90da:	7011      	strb	r1, [r2, #0]
    90dc:	4a6c      	ldr	r2, [pc, #432]	; (9290 <_printf_i+0x22c>)
    90de:	e030      	b.n	9142 <_printf_i+0xde>
    90e0:	000e      	movs	r6, r1
    90e2:	681a      	ldr	r2, [r3, #0]
    90e4:	3642      	adds	r6, #66	; 0x42
    90e6:	1d11      	adds	r1, r2, #4
    90e8:	6019      	str	r1, [r3, #0]
    90ea:	6813      	ldr	r3, [r2, #0]
    90ec:	7033      	strb	r3, [r6, #0]
    90ee:	2301      	movs	r3, #1
    90f0:	e079      	b.n	91e6 <_printf_i+0x182>
    90f2:	0649      	lsls	r1, r1, #25
    90f4:	d5d9      	bpl.n	90aa <_printf_i+0x46>
    90f6:	1d11      	adds	r1, r2, #4
    90f8:	6019      	str	r1, [r3, #0]
    90fa:	2300      	movs	r3, #0
    90fc:	5ed5      	ldrsh	r5, [r2, r3]
    90fe:	2d00      	cmp	r5, #0
    9100:	da03      	bge.n	910a <_printf_i+0xa6>
    9102:	232d      	movs	r3, #45	; 0x2d
    9104:	9a04      	ldr	r2, [sp, #16]
    9106:	426d      	negs	r5, r5
    9108:	7013      	strb	r3, [r2, #0]
    910a:	4b62      	ldr	r3, [pc, #392]	; (9294 <_printf_i+0x230>)
    910c:	270a      	movs	r7, #10
    910e:	9303      	str	r3, [sp, #12]
    9110:	e02f      	b.n	9172 <_printf_i+0x10e>
    9112:	6820      	ldr	r0, [r4, #0]
    9114:	6819      	ldr	r1, [r3, #0]
    9116:	0605      	lsls	r5, r0, #24
    9118:	d503      	bpl.n	9122 <_printf_i+0xbe>
    911a:	1d08      	adds	r0, r1, #4
    911c:	6018      	str	r0, [r3, #0]
    911e:	680d      	ldr	r5, [r1, #0]
    9120:	e005      	b.n	912e <_printf_i+0xca>
    9122:	0640      	lsls	r0, r0, #25
    9124:	d5f9      	bpl.n	911a <_printf_i+0xb6>
    9126:	680d      	ldr	r5, [r1, #0]
    9128:	1d08      	adds	r0, r1, #4
    912a:	6018      	str	r0, [r3, #0]
    912c:	b2ad      	uxth	r5, r5
    912e:	4b59      	ldr	r3, [pc, #356]	; (9294 <_printf_i+0x230>)
    9130:	2708      	movs	r7, #8
    9132:	9303      	str	r3, [sp, #12]
    9134:	2a6f      	cmp	r2, #111	; 0x6f
    9136:	d018      	beq.n	916a <_printf_i+0x106>
    9138:	270a      	movs	r7, #10
    913a:	e016      	b.n	916a <_printf_i+0x106>
    913c:	3145      	adds	r1, #69	; 0x45
    913e:	700a      	strb	r2, [r1, #0]
    9140:	4a54      	ldr	r2, [pc, #336]	; (9294 <_printf_i+0x230>)
    9142:	9203      	str	r2, [sp, #12]
    9144:	681a      	ldr	r2, [r3, #0]
    9146:	6821      	ldr	r1, [r4, #0]
    9148:	1d10      	adds	r0, r2, #4
    914a:	6018      	str	r0, [r3, #0]
    914c:	6815      	ldr	r5, [r2, #0]
    914e:	0608      	lsls	r0, r1, #24
    9150:	d522      	bpl.n	9198 <_printf_i+0x134>
    9152:	07cb      	lsls	r3, r1, #31
    9154:	d502      	bpl.n	915c <_printf_i+0xf8>
    9156:	2320      	movs	r3, #32
    9158:	4319      	orrs	r1, r3
    915a:	6021      	str	r1, [r4, #0]
    915c:	2710      	movs	r7, #16
    915e:	2d00      	cmp	r5, #0
    9160:	d103      	bne.n	916a <_printf_i+0x106>
    9162:	2320      	movs	r3, #32
    9164:	6822      	ldr	r2, [r4, #0]
    9166:	439a      	bics	r2, r3
    9168:	6022      	str	r2, [r4, #0]
    916a:	0023      	movs	r3, r4
    916c:	2200      	movs	r2, #0
    916e:	3343      	adds	r3, #67	; 0x43
    9170:	701a      	strb	r2, [r3, #0]
    9172:	6863      	ldr	r3, [r4, #4]
    9174:	60a3      	str	r3, [r4, #8]
    9176:	2b00      	cmp	r3, #0
    9178:	db5c      	blt.n	9234 <_printf_i+0x1d0>
    917a:	2204      	movs	r2, #4
    917c:	6821      	ldr	r1, [r4, #0]
    917e:	4391      	bics	r1, r2
    9180:	6021      	str	r1, [r4, #0]
    9182:	2d00      	cmp	r5, #0
    9184:	d158      	bne.n	9238 <_printf_i+0x1d4>
    9186:	9e04      	ldr	r6, [sp, #16]
    9188:	2b00      	cmp	r3, #0
    918a:	d064      	beq.n	9256 <_printf_i+0x1f2>
    918c:	0026      	movs	r6, r4
    918e:	9b03      	ldr	r3, [sp, #12]
    9190:	3642      	adds	r6, #66	; 0x42
    9192:	781b      	ldrb	r3, [r3, #0]
    9194:	7033      	strb	r3, [r6, #0]
    9196:	e05e      	b.n	9256 <_printf_i+0x1f2>
    9198:	0648      	lsls	r0, r1, #25
    919a:	d5da      	bpl.n	9152 <_printf_i+0xee>
    919c:	b2ad      	uxth	r5, r5
    919e:	e7d8      	b.n	9152 <_printf_i+0xee>
    91a0:	6809      	ldr	r1, [r1, #0]
    91a2:	681a      	ldr	r2, [r3, #0]
    91a4:	0608      	lsls	r0, r1, #24
    91a6:	d505      	bpl.n	91b4 <_printf_i+0x150>
    91a8:	1d11      	adds	r1, r2, #4
    91aa:	6019      	str	r1, [r3, #0]
    91ac:	6813      	ldr	r3, [r2, #0]
    91ae:	6962      	ldr	r2, [r4, #20]
    91b0:	601a      	str	r2, [r3, #0]
    91b2:	e006      	b.n	91c2 <_printf_i+0x15e>
    91b4:	0649      	lsls	r1, r1, #25
    91b6:	d5f7      	bpl.n	91a8 <_printf_i+0x144>
    91b8:	1d11      	adds	r1, r2, #4
    91ba:	6019      	str	r1, [r3, #0]
    91bc:	6813      	ldr	r3, [r2, #0]
    91be:	8aa2      	ldrh	r2, [r4, #20]
    91c0:	801a      	strh	r2, [r3, #0]
    91c2:	2300      	movs	r3, #0
    91c4:	9e04      	ldr	r6, [sp, #16]
    91c6:	6123      	str	r3, [r4, #16]
    91c8:	e054      	b.n	9274 <_printf_i+0x210>
    91ca:	681a      	ldr	r2, [r3, #0]
    91cc:	1d11      	adds	r1, r2, #4
    91ce:	6019      	str	r1, [r3, #0]
    91d0:	6816      	ldr	r6, [r2, #0]
    91d2:	2100      	movs	r1, #0
    91d4:	6862      	ldr	r2, [r4, #4]
    91d6:	0030      	movs	r0, r6
    91d8:	f000 ffde 	bl	a198 <memchr>
    91dc:	2800      	cmp	r0, #0
    91de:	d001      	beq.n	91e4 <_printf_i+0x180>
    91e0:	1b80      	subs	r0, r0, r6
    91e2:	6060      	str	r0, [r4, #4]
    91e4:	6863      	ldr	r3, [r4, #4]
    91e6:	6123      	str	r3, [r4, #16]
    91e8:	2300      	movs	r3, #0
    91ea:	9a04      	ldr	r2, [sp, #16]
    91ec:	7013      	strb	r3, [r2, #0]
    91ee:	e041      	b.n	9274 <_printf_i+0x210>
    91f0:	6923      	ldr	r3, [r4, #16]
    91f2:	0032      	movs	r2, r6
    91f4:	9906      	ldr	r1, [sp, #24]
    91f6:	9805      	ldr	r0, [sp, #20]
    91f8:	9d07      	ldr	r5, [sp, #28]
    91fa:	47a8      	blx	r5
    91fc:	1c43      	adds	r3, r0, #1
    91fe:	d043      	beq.n	9288 <_printf_i+0x224>
    9200:	6823      	ldr	r3, [r4, #0]
    9202:	2500      	movs	r5, #0
    9204:	079b      	lsls	r3, r3, #30
    9206:	d40f      	bmi.n	9228 <_printf_i+0x1c4>
    9208:	9b09      	ldr	r3, [sp, #36]	; 0x24
    920a:	68e0      	ldr	r0, [r4, #12]
    920c:	4298      	cmp	r0, r3
    920e:	da3d      	bge.n	928c <_printf_i+0x228>
    9210:	0018      	movs	r0, r3
    9212:	e03b      	b.n	928c <_printf_i+0x228>
    9214:	0022      	movs	r2, r4
    9216:	2301      	movs	r3, #1
    9218:	3219      	adds	r2, #25
    921a:	9906      	ldr	r1, [sp, #24]
    921c:	9805      	ldr	r0, [sp, #20]
    921e:	9e07      	ldr	r6, [sp, #28]
    9220:	47b0      	blx	r6
    9222:	1c43      	adds	r3, r0, #1
    9224:	d030      	beq.n	9288 <_printf_i+0x224>
    9226:	3501      	adds	r5, #1
    9228:	68e3      	ldr	r3, [r4, #12]
    922a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    922c:	1a9b      	subs	r3, r3, r2
    922e:	429d      	cmp	r5, r3
    9230:	dbf0      	blt.n	9214 <_printf_i+0x1b0>
    9232:	e7e9      	b.n	9208 <_printf_i+0x1a4>
    9234:	2d00      	cmp	r5, #0
    9236:	d0a9      	beq.n	918c <_printf_i+0x128>
    9238:	9e04      	ldr	r6, [sp, #16]
    923a:	0028      	movs	r0, r5
    923c:	0039      	movs	r1, r7
    923e:	f001 fceb 	bl	ac18 <__aeabi_uidivmod>
    9242:	9b03      	ldr	r3, [sp, #12]
    9244:	3e01      	subs	r6, #1
    9246:	5c5b      	ldrb	r3, [r3, r1]
    9248:	0028      	movs	r0, r5
    924a:	7033      	strb	r3, [r6, #0]
    924c:	0039      	movs	r1, r7
    924e:	f001 fc5d 	bl	ab0c <__udivsi3>
    9252:	1e05      	subs	r5, r0, #0
    9254:	d1f1      	bne.n	923a <_printf_i+0x1d6>
    9256:	2f08      	cmp	r7, #8
    9258:	d109      	bne.n	926e <_printf_i+0x20a>
    925a:	6823      	ldr	r3, [r4, #0]
    925c:	07db      	lsls	r3, r3, #31
    925e:	d506      	bpl.n	926e <_printf_i+0x20a>
    9260:	6863      	ldr	r3, [r4, #4]
    9262:	6922      	ldr	r2, [r4, #16]
    9264:	4293      	cmp	r3, r2
    9266:	dc02      	bgt.n	926e <_printf_i+0x20a>
    9268:	2330      	movs	r3, #48	; 0x30
    926a:	3e01      	subs	r6, #1
    926c:	7033      	strb	r3, [r6, #0]
    926e:	9b04      	ldr	r3, [sp, #16]
    9270:	1b9b      	subs	r3, r3, r6
    9272:	6123      	str	r3, [r4, #16]
    9274:	9b07      	ldr	r3, [sp, #28]
    9276:	aa09      	add	r2, sp, #36	; 0x24
    9278:	9300      	str	r3, [sp, #0]
    927a:	0021      	movs	r1, r4
    927c:	9b06      	ldr	r3, [sp, #24]
    927e:	9805      	ldr	r0, [sp, #20]
    9280:	f7ff fe82 	bl	8f88 <_printf_common>
    9284:	1c43      	adds	r3, r0, #1
    9286:	d1b3      	bne.n	91f0 <_printf_i+0x18c>
    9288:	2001      	movs	r0, #1
    928a:	4240      	negs	r0, r0
    928c:	b00b      	add	sp, #44	; 0x2c
    928e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9290:	0000ec23 	.word	0x0000ec23
    9294:	0000ec12 	.word	0x0000ec12

00009298 <_sbrk_r>:
    9298:	2300      	movs	r3, #0
    929a:	b570      	push	{r4, r5, r6, lr}
    929c:	4c06      	ldr	r4, [pc, #24]	; (92b8 <_sbrk_r+0x20>)
    929e:	0005      	movs	r5, r0
    92a0:	0008      	movs	r0, r1
    92a2:	6023      	str	r3, [r4, #0]
    92a4:	f7ff f9ba 	bl	861c <_sbrk>
    92a8:	1c43      	adds	r3, r0, #1
    92aa:	d103      	bne.n	92b4 <_sbrk_r+0x1c>
    92ac:	6823      	ldr	r3, [r4, #0]
    92ae:	2b00      	cmp	r3, #0
    92b0:	d000      	beq.n	92b4 <_sbrk_r+0x1c>
    92b2:	602b      	str	r3, [r5, #0]
    92b4:	bd70      	pop	{r4, r5, r6, pc}
    92b6:	46c0      	nop			; (mov r8, r8)
    92b8:	20004f00 	.word	0x20004f00

000092bc <sniprintf>:
    92bc:	b40c      	push	{r2, r3}
    92be:	b530      	push	{r4, r5, lr}
    92c0:	4b16      	ldr	r3, [pc, #88]	; (931c <sniprintf+0x60>)
    92c2:	b09d      	sub	sp, #116	; 0x74
    92c4:	1e0c      	subs	r4, r1, #0
    92c6:	681d      	ldr	r5, [r3, #0]
    92c8:	da08      	bge.n	92dc <sniprintf+0x20>
    92ca:	238b      	movs	r3, #139	; 0x8b
    92cc:	2001      	movs	r0, #1
    92ce:	602b      	str	r3, [r5, #0]
    92d0:	4240      	negs	r0, r0
    92d2:	b01d      	add	sp, #116	; 0x74
    92d4:	bc30      	pop	{r4, r5}
    92d6:	bc08      	pop	{r3}
    92d8:	b002      	add	sp, #8
    92da:	4718      	bx	r3
    92dc:	2382      	movs	r3, #130	; 0x82
    92de:	a902      	add	r1, sp, #8
    92e0:	009b      	lsls	r3, r3, #2
    92e2:	818b      	strh	r3, [r1, #12]
    92e4:	2300      	movs	r3, #0
    92e6:	9002      	str	r0, [sp, #8]
    92e8:	6108      	str	r0, [r1, #16]
    92ea:	429c      	cmp	r4, r3
    92ec:	d000      	beq.n	92f0 <sniprintf+0x34>
    92ee:	1e63      	subs	r3, r4, #1
    92f0:	608b      	str	r3, [r1, #8]
    92f2:	614b      	str	r3, [r1, #20]
    92f4:	2301      	movs	r3, #1
    92f6:	425b      	negs	r3, r3
    92f8:	81cb      	strh	r3, [r1, #14]
    92fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
    92fc:	ab21      	add	r3, sp, #132	; 0x84
    92fe:	0028      	movs	r0, r5
    9300:	9301      	str	r3, [sp, #4]
    9302:	f001 faa9 	bl	a858 <_svfiprintf_r>
    9306:	1c43      	adds	r3, r0, #1
    9308:	da01      	bge.n	930e <sniprintf+0x52>
    930a:	238b      	movs	r3, #139	; 0x8b
    930c:	602b      	str	r3, [r5, #0]
    930e:	2c00      	cmp	r4, #0
    9310:	d0df      	beq.n	92d2 <sniprintf+0x16>
    9312:	2300      	movs	r3, #0
    9314:	9a02      	ldr	r2, [sp, #8]
    9316:	7013      	strb	r3, [r2, #0]
    9318:	e7db      	b.n	92d2 <sniprintf+0x16>
    931a:	46c0      	nop			; (mov r8, r8)
    931c:	200000a0 	.word	0x200000a0

00009320 <siprintf>:
    9320:	b40e      	push	{r1, r2, r3}
    9322:	b510      	push	{r4, lr}
    9324:	b09d      	sub	sp, #116	; 0x74
    9326:	a902      	add	r1, sp, #8
    9328:	9002      	str	r0, [sp, #8]
    932a:	6108      	str	r0, [r1, #16]
    932c:	480b      	ldr	r0, [pc, #44]	; (935c <siprintf+0x3c>)
    932e:	2482      	movs	r4, #130	; 0x82
    9330:	6088      	str	r0, [r1, #8]
    9332:	6148      	str	r0, [r1, #20]
    9334:	2001      	movs	r0, #1
    9336:	4240      	negs	r0, r0
    9338:	ab1f      	add	r3, sp, #124	; 0x7c
    933a:	81c8      	strh	r0, [r1, #14]
    933c:	4808      	ldr	r0, [pc, #32]	; (9360 <siprintf+0x40>)
    933e:	cb04      	ldmia	r3!, {r2}
    9340:	00a4      	lsls	r4, r4, #2
    9342:	6800      	ldr	r0, [r0, #0]
    9344:	9301      	str	r3, [sp, #4]
    9346:	818c      	strh	r4, [r1, #12]
    9348:	f001 fa86 	bl	a858 <_svfiprintf_r>
    934c:	2300      	movs	r3, #0
    934e:	9a02      	ldr	r2, [sp, #8]
    9350:	7013      	strb	r3, [r2, #0]
    9352:	b01d      	add	sp, #116	; 0x74
    9354:	bc10      	pop	{r4}
    9356:	bc08      	pop	{r3}
    9358:	b003      	add	sp, #12
    935a:	4718      	bx	r3
    935c:	7fffffff 	.word	0x7fffffff
    9360:	200000a0 	.word	0x200000a0

00009364 <strcasecmp>:
    9364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9366:	0007      	movs	r7, r0
    9368:	000e      	movs	r6, r1
    936a:	783c      	ldrb	r4, [r7, #0]
    936c:	f000 fee8 	bl	a140 <__locale_ctype_ptr>
    9370:	2203      	movs	r2, #3
    9372:	1900      	adds	r0, r0, r4
    9374:	7843      	ldrb	r3, [r0, #1]
    9376:	4013      	ands	r3, r2
    9378:	2b01      	cmp	r3, #1
    937a:	d100      	bne.n	937e <strcasecmp+0x1a>
    937c:	3420      	adds	r4, #32
    937e:	7835      	ldrb	r5, [r6, #0]
    9380:	f000 fede 	bl	a140 <__locale_ctype_ptr>
    9384:	2203      	movs	r2, #3
    9386:	1940      	adds	r0, r0, r5
    9388:	7843      	ldrb	r3, [r0, #1]
    938a:	4013      	ands	r3, r2
    938c:	2b01      	cmp	r3, #1
    938e:	d100      	bne.n	9392 <strcasecmp+0x2e>
    9390:	3520      	adds	r5, #32
    9392:	1b60      	subs	r0, r4, r5
    9394:	d103      	bne.n	939e <strcasecmp+0x3a>
    9396:	3701      	adds	r7, #1
    9398:	3601      	adds	r6, #1
    939a:	2d00      	cmp	r5, #0
    939c:	d1e5      	bne.n	936a <strcasecmp+0x6>
    939e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000093a0 <strlen>:
    93a0:	2300      	movs	r3, #0
    93a2:	5cc2      	ldrb	r2, [r0, r3]
    93a4:	3301      	adds	r3, #1
    93a6:	2a00      	cmp	r2, #0
    93a8:	d1fb      	bne.n	93a2 <strlen+0x2>
    93aa:	1e58      	subs	r0, r3, #1
    93ac:	4770      	bx	lr

000093ae <strncmp>:
    93ae:	2300      	movs	r3, #0
    93b0:	b530      	push	{r4, r5, lr}
    93b2:	429a      	cmp	r2, r3
    93b4:	d00a      	beq.n	93cc <strncmp+0x1e>
    93b6:	3a01      	subs	r2, #1
    93b8:	5cc4      	ldrb	r4, [r0, r3]
    93ba:	5ccd      	ldrb	r5, [r1, r3]
    93bc:	42ac      	cmp	r4, r5
    93be:	d104      	bne.n	93ca <strncmp+0x1c>
    93c0:	429a      	cmp	r2, r3
    93c2:	d002      	beq.n	93ca <strncmp+0x1c>
    93c4:	3301      	adds	r3, #1
    93c6:	2c00      	cmp	r4, #0
    93c8:	d1f6      	bne.n	93b8 <strncmp+0xa>
    93ca:	1b63      	subs	r3, r4, r5
    93cc:	0018      	movs	r0, r3
    93ce:	bd30      	pop	{r4, r5, pc}

000093d0 <strncpy>:
    93d0:	b570      	push	{r4, r5, r6, lr}
    93d2:	0004      	movs	r4, r0
    93d4:	2a00      	cmp	r2, #0
    93d6:	d100      	bne.n	93da <strncpy+0xa>
    93d8:	bd70      	pop	{r4, r5, r6, pc}
    93da:	780d      	ldrb	r5, [r1, #0]
    93dc:	1e56      	subs	r6, r2, #1
    93de:	1c63      	adds	r3, r4, #1
    93e0:	7025      	strb	r5, [r4, #0]
    93e2:	3101      	adds	r1, #1
    93e4:	2d00      	cmp	r5, #0
    93e6:	d105      	bne.n	93f4 <strncpy+0x24>
    93e8:	18a4      	adds	r4, r4, r2
    93ea:	429c      	cmp	r4, r3
    93ec:	d0f4      	beq.n	93d8 <strncpy+0x8>
    93ee:	701d      	strb	r5, [r3, #0]
    93f0:	3301      	adds	r3, #1
    93f2:	e7fa      	b.n	93ea <strncpy+0x1a>
    93f4:	001c      	movs	r4, r3
    93f6:	0032      	movs	r2, r6
    93f8:	e7ec      	b.n	93d4 <strncpy+0x4>

000093fa <_vsniprintf_r>:
    93fa:	b530      	push	{r4, r5, lr}
    93fc:	0014      	movs	r4, r2
    93fe:	b09b      	sub	sp, #108	; 0x6c
    9400:	0005      	movs	r5, r0
    9402:	001a      	movs	r2, r3
    9404:	2c00      	cmp	r4, #0
    9406:	da05      	bge.n	9414 <_vsniprintf_r+0x1a>
    9408:	238b      	movs	r3, #139	; 0x8b
    940a:	6003      	str	r3, [r0, #0]
    940c:	2001      	movs	r0, #1
    940e:	4240      	negs	r0, r0
    9410:	b01b      	add	sp, #108	; 0x6c
    9412:	bd30      	pop	{r4, r5, pc}
    9414:	2382      	movs	r3, #130	; 0x82
    9416:	4668      	mov	r0, sp
    9418:	009b      	lsls	r3, r3, #2
    941a:	8183      	strh	r3, [r0, #12]
    941c:	2300      	movs	r3, #0
    941e:	9100      	str	r1, [sp, #0]
    9420:	9104      	str	r1, [sp, #16]
    9422:	429c      	cmp	r4, r3
    9424:	d000      	beq.n	9428 <_vsniprintf_r+0x2e>
    9426:	1e63      	subs	r3, r4, #1
    9428:	9302      	str	r3, [sp, #8]
    942a:	9305      	str	r3, [sp, #20]
    942c:	2301      	movs	r3, #1
    942e:	4669      	mov	r1, sp
    9430:	425b      	negs	r3, r3
    9432:	81cb      	strh	r3, [r1, #14]
    9434:	0028      	movs	r0, r5
    9436:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9438:	f001 fa0e 	bl	a858 <_svfiprintf_r>
    943c:	1c43      	adds	r3, r0, #1
    943e:	da01      	bge.n	9444 <_vsniprintf_r+0x4a>
    9440:	238b      	movs	r3, #139	; 0x8b
    9442:	602b      	str	r3, [r5, #0]
    9444:	2c00      	cmp	r4, #0
    9446:	d0e3      	beq.n	9410 <_vsniprintf_r+0x16>
    9448:	2300      	movs	r3, #0
    944a:	9a00      	ldr	r2, [sp, #0]
    944c:	7013      	strb	r3, [r2, #0]
    944e:	e7df      	b.n	9410 <_vsniprintf_r+0x16>

00009450 <vsniprintf>:
    9450:	b507      	push	{r0, r1, r2, lr}
    9452:	9300      	str	r3, [sp, #0]
    9454:	0013      	movs	r3, r2
    9456:	000a      	movs	r2, r1
    9458:	0001      	movs	r1, r0
    945a:	4802      	ldr	r0, [pc, #8]	; (9464 <vsniprintf+0x14>)
    945c:	6800      	ldr	r0, [r0, #0]
    945e:	f7ff ffcc 	bl	93fa <_vsniprintf_r>
    9462:	bd0e      	pop	{r1, r2, r3, pc}
    9464:	200000a0 	.word	0x200000a0

00009468 <quorem>:
    9468:	b5f0      	push	{r4, r5, r6, r7, lr}
    946a:	6903      	ldr	r3, [r0, #16]
    946c:	690c      	ldr	r4, [r1, #16]
    946e:	b089      	sub	sp, #36	; 0x24
    9470:	0007      	movs	r7, r0
    9472:	9105      	str	r1, [sp, #20]
    9474:	2600      	movs	r6, #0
    9476:	429c      	cmp	r4, r3
    9478:	dc6d      	bgt.n	9556 <quorem+0xee>
    947a:	000b      	movs	r3, r1
    947c:	3c01      	subs	r4, #1
    947e:	3314      	adds	r3, #20
    9480:	00a5      	lsls	r5, r4, #2
    9482:	9303      	str	r3, [sp, #12]
    9484:	195b      	adds	r3, r3, r5
    9486:	9304      	str	r3, [sp, #16]
    9488:	0003      	movs	r3, r0
    948a:	3314      	adds	r3, #20
    948c:	9302      	str	r3, [sp, #8]
    948e:	195d      	adds	r5, r3, r5
    9490:	9b04      	ldr	r3, [sp, #16]
    9492:	6828      	ldr	r0, [r5, #0]
    9494:	681b      	ldr	r3, [r3, #0]
    9496:	1c59      	adds	r1, r3, #1
    9498:	9301      	str	r3, [sp, #4]
    949a:	f001 fb37 	bl	ab0c <__udivsi3>
    949e:	9001      	str	r0, [sp, #4]
    94a0:	42b0      	cmp	r0, r6
    94a2:	d02d      	beq.n	9500 <quorem+0x98>
    94a4:	9b03      	ldr	r3, [sp, #12]
    94a6:	9802      	ldr	r0, [sp, #8]
    94a8:	469c      	mov	ip, r3
    94aa:	9606      	str	r6, [sp, #24]
    94ac:	4662      	mov	r2, ip
    94ae:	ca08      	ldmia	r2!, {r3}
    94b0:	4694      	mov	ip, r2
    94b2:	9a01      	ldr	r2, [sp, #4]
    94b4:	b299      	uxth	r1, r3
    94b6:	4351      	muls	r1, r2
    94b8:	0c1b      	lsrs	r3, r3, #16
    94ba:	4353      	muls	r3, r2
    94bc:	1989      	adds	r1, r1, r6
    94be:	0c0a      	lsrs	r2, r1, #16
    94c0:	189b      	adds	r3, r3, r2
    94c2:	9307      	str	r3, [sp, #28]
    94c4:	8802      	ldrh	r2, [r0, #0]
    94c6:	0c1e      	lsrs	r6, r3, #16
    94c8:	9b06      	ldr	r3, [sp, #24]
    94ca:	b289      	uxth	r1, r1
    94cc:	18d2      	adds	r2, r2, r3
    94ce:	6803      	ldr	r3, [r0, #0]
    94d0:	1a52      	subs	r2, r2, r1
    94d2:	0c19      	lsrs	r1, r3, #16
    94d4:	466b      	mov	r3, sp
    94d6:	8b9b      	ldrh	r3, [r3, #28]
    94d8:	1acb      	subs	r3, r1, r3
    94da:	1411      	asrs	r1, r2, #16
    94dc:	185b      	adds	r3, r3, r1
    94de:	1419      	asrs	r1, r3, #16
    94e0:	b292      	uxth	r2, r2
    94e2:	041b      	lsls	r3, r3, #16
    94e4:	431a      	orrs	r2, r3
    94e6:	9b04      	ldr	r3, [sp, #16]
    94e8:	9106      	str	r1, [sp, #24]
    94ea:	c004      	stmia	r0!, {r2}
    94ec:	4563      	cmp	r3, ip
    94ee:	d2dd      	bcs.n	94ac <quorem+0x44>
    94f0:	682b      	ldr	r3, [r5, #0]
    94f2:	2b00      	cmp	r3, #0
    94f4:	d104      	bne.n	9500 <quorem+0x98>
    94f6:	9b02      	ldr	r3, [sp, #8]
    94f8:	3d04      	subs	r5, #4
    94fa:	42ab      	cmp	r3, r5
    94fc:	d32e      	bcc.n	955c <quorem+0xf4>
    94fe:	613c      	str	r4, [r7, #16]
    9500:	9905      	ldr	r1, [sp, #20]
    9502:	0038      	movs	r0, r7
    9504:	f001 f867 	bl	a5d6 <__mcmp>
    9508:	2800      	cmp	r0, #0
    950a:	db23      	blt.n	9554 <quorem+0xec>
    950c:	2500      	movs	r5, #0
    950e:	9b01      	ldr	r3, [sp, #4]
    9510:	9802      	ldr	r0, [sp, #8]
    9512:	3301      	adds	r3, #1
    9514:	9903      	ldr	r1, [sp, #12]
    9516:	9301      	str	r3, [sp, #4]
    9518:	c908      	ldmia	r1!, {r3}
    951a:	8802      	ldrh	r2, [r0, #0]
    951c:	1955      	adds	r5, r2, r5
    951e:	b29a      	uxth	r2, r3
    9520:	1aaa      	subs	r2, r5, r2
    9522:	6805      	ldr	r5, [r0, #0]
    9524:	0c1b      	lsrs	r3, r3, #16
    9526:	0c2d      	lsrs	r5, r5, #16
    9528:	1aeb      	subs	r3, r5, r3
    952a:	1415      	asrs	r5, r2, #16
    952c:	195b      	adds	r3, r3, r5
    952e:	141d      	asrs	r5, r3, #16
    9530:	b292      	uxth	r2, r2
    9532:	041b      	lsls	r3, r3, #16
    9534:	4313      	orrs	r3, r2
    9536:	c008      	stmia	r0!, {r3}
    9538:	9b04      	ldr	r3, [sp, #16]
    953a:	428b      	cmp	r3, r1
    953c:	d2ec      	bcs.n	9518 <quorem+0xb0>
    953e:	9a02      	ldr	r2, [sp, #8]
    9540:	00a3      	lsls	r3, r4, #2
    9542:	18d3      	adds	r3, r2, r3
    9544:	681a      	ldr	r2, [r3, #0]
    9546:	2a00      	cmp	r2, #0
    9548:	d104      	bne.n	9554 <quorem+0xec>
    954a:	9a02      	ldr	r2, [sp, #8]
    954c:	3b04      	subs	r3, #4
    954e:	429a      	cmp	r2, r3
    9550:	d309      	bcc.n	9566 <quorem+0xfe>
    9552:	613c      	str	r4, [r7, #16]
    9554:	9e01      	ldr	r6, [sp, #4]
    9556:	0030      	movs	r0, r6
    9558:	b009      	add	sp, #36	; 0x24
    955a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    955c:	682b      	ldr	r3, [r5, #0]
    955e:	2b00      	cmp	r3, #0
    9560:	d1cd      	bne.n	94fe <quorem+0x96>
    9562:	3c01      	subs	r4, #1
    9564:	e7c7      	b.n	94f6 <quorem+0x8e>
    9566:	681a      	ldr	r2, [r3, #0]
    9568:	2a00      	cmp	r2, #0
    956a:	d1f2      	bne.n	9552 <quorem+0xea>
    956c:	3c01      	subs	r4, #1
    956e:	e7ec      	b.n	954a <quorem+0xe2>

00009570 <_dtoa_r>:
    9570:	b5f0      	push	{r4, r5, r6, r7, lr}
    9572:	0016      	movs	r6, r2
    9574:	001f      	movs	r7, r3
    9576:	6a44      	ldr	r4, [r0, #36]	; 0x24
    9578:	b09d      	sub	sp, #116	; 0x74
    957a:	9004      	str	r0, [sp, #16]
    957c:	9d25      	ldr	r5, [sp, #148]	; 0x94
    957e:	9606      	str	r6, [sp, #24]
    9580:	9707      	str	r7, [sp, #28]
    9582:	2c00      	cmp	r4, #0
    9584:	d108      	bne.n	9598 <_dtoa_r+0x28>
    9586:	2010      	movs	r0, #16
    9588:	f7ff f952 	bl	8830 <malloc>
    958c:	9b04      	ldr	r3, [sp, #16]
    958e:	6258      	str	r0, [r3, #36]	; 0x24
    9590:	6044      	str	r4, [r0, #4]
    9592:	6084      	str	r4, [r0, #8]
    9594:	6004      	str	r4, [r0, #0]
    9596:	60c4      	str	r4, [r0, #12]
    9598:	9b04      	ldr	r3, [sp, #16]
    959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    959c:	6819      	ldr	r1, [r3, #0]
    959e:	2900      	cmp	r1, #0
    95a0:	d00b      	beq.n	95ba <_dtoa_r+0x4a>
    95a2:	685a      	ldr	r2, [r3, #4]
    95a4:	2301      	movs	r3, #1
    95a6:	4093      	lsls	r3, r2
    95a8:	604a      	str	r2, [r1, #4]
    95aa:	608b      	str	r3, [r1, #8]
    95ac:	9804      	ldr	r0, [sp, #16]
    95ae:	f000 fe38 	bl	a222 <_Bfree>
    95b2:	2200      	movs	r2, #0
    95b4:	9b04      	ldr	r3, [sp, #16]
    95b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    95b8:	601a      	str	r2, [r3, #0]
    95ba:	9b07      	ldr	r3, [sp, #28]
    95bc:	2b00      	cmp	r3, #0
    95be:	da1f      	bge.n	9600 <_dtoa_r+0x90>
    95c0:	2301      	movs	r3, #1
    95c2:	602b      	str	r3, [r5, #0]
    95c4:	007b      	lsls	r3, r7, #1
    95c6:	085b      	lsrs	r3, r3, #1
    95c8:	9307      	str	r3, [sp, #28]
    95ca:	9c07      	ldr	r4, [sp, #28]
    95cc:	4bb7      	ldr	r3, [pc, #732]	; (98ac <_dtoa_r+0x33c>)
    95ce:	0022      	movs	r2, r4
    95d0:	9319      	str	r3, [sp, #100]	; 0x64
    95d2:	401a      	ands	r2, r3
    95d4:	429a      	cmp	r2, r3
    95d6:	d116      	bne.n	9606 <_dtoa_r+0x96>
    95d8:	4bb5      	ldr	r3, [pc, #724]	; (98b0 <_dtoa_r+0x340>)
    95da:	9a24      	ldr	r2, [sp, #144]	; 0x90
    95dc:	6013      	str	r3, [r2, #0]
    95de:	9b06      	ldr	r3, [sp, #24]
    95e0:	2b00      	cmp	r3, #0
    95e2:	d103      	bne.n	95ec <_dtoa_r+0x7c>
    95e4:	0324      	lsls	r4, r4, #12
    95e6:	d101      	bne.n	95ec <_dtoa_r+0x7c>
    95e8:	f000 fd91 	bl	a10e <_dtoa_r+0xb9e>
    95ec:	4bb1      	ldr	r3, [pc, #708]	; (98b4 <_dtoa_r+0x344>)
    95ee:	9a26      	ldr	r2, [sp, #152]	; 0x98
    95f0:	930a      	str	r3, [sp, #40]	; 0x28
    95f2:	4bb1      	ldr	r3, [pc, #708]	; (98b8 <_dtoa_r+0x348>)
    95f4:	2a00      	cmp	r2, #0
    95f6:	d001      	beq.n	95fc <_dtoa_r+0x8c>
    95f8:	f000 fd8f 	bl	a11a <_dtoa_r+0xbaa>
    95fc:	f000 fd8f 	bl	a11e <_dtoa_r+0xbae>
    9600:	2300      	movs	r3, #0
    9602:	602b      	str	r3, [r5, #0]
    9604:	e7e1      	b.n	95ca <_dtoa_r+0x5a>
    9606:	9e06      	ldr	r6, [sp, #24]
    9608:	9f07      	ldr	r7, [sp, #28]
    960a:	2200      	movs	r2, #0
    960c:	2300      	movs	r3, #0
    960e:	0030      	movs	r0, r6
    9610:	0039      	movs	r1, r7
    9612:	f001 fc01 	bl	ae18 <__aeabi_dcmpeq>
    9616:	1e05      	subs	r5, r0, #0
    9618:	d00e      	beq.n	9638 <_dtoa_r+0xc8>
    961a:	2301      	movs	r3, #1
    961c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    961e:	6013      	str	r3, [r2, #0]
    9620:	4ba6      	ldr	r3, [pc, #664]	; (98bc <_dtoa_r+0x34c>)
    9622:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9624:	930a      	str	r3, [sp, #40]	; 0x28
    9626:	2a00      	cmp	r2, #0
    9628:	d101      	bne.n	962e <_dtoa_r+0xbe>
    962a:	f000 fd78 	bl	a11e <_dtoa_r+0xbae>
    962e:	4aa4      	ldr	r2, [pc, #656]	; (98c0 <_dtoa_r+0x350>)
    9630:	9926      	ldr	r1, [sp, #152]	; 0x98
    9632:	600a      	str	r2, [r1, #0]
    9634:	f000 fd73 	bl	a11e <_dtoa_r+0xbae>
    9638:	ab1a      	add	r3, sp, #104	; 0x68
    963a:	9301      	str	r3, [sp, #4]
    963c:	ab1b      	add	r3, sp, #108	; 0x6c
    963e:	9300      	str	r3, [sp, #0]
    9640:	0032      	movs	r2, r6
    9642:	003b      	movs	r3, r7
    9644:	9804      	ldr	r0, [sp, #16]
    9646:	f001 f843 	bl	a6d0 <__d2b>
    964a:	0063      	lsls	r3, r4, #1
    964c:	9005      	str	r0, [sp, #20]
    964e:	0d5b      	lsrs	r3, r3, #21
    9650:	d100      	bne.n	9654 <_dtoa_r+0xe4>
    9652:	e07f      	b.n	9754 <_dtoa_r+0x1e4>
    9654:	033a      	lsls	r2, r7, #12
    9656:	4c9b      	ldr	r4, [pc, #620]	; (98c4 <_dtoa_r+0x354>)
    9658:	0b12      	lsrs	r2, r2, #12
    965a:	4314      	orrs	r4, r2
    965c:	0021      	movs	r1, r4
    965e:	4a9a      	ldr	r2, [pc, #616]	; (98c8 <_dtoa_r+0x358>)
    9660:	0030      	movs	r0, r6
    9662:	9518      	str	r5, [sp, #96]	; 0x60
    9664:	189e      	adds	r6, r3, r2
    9666:	2200      	movs	r2, #0
    9668:	4b98      	ldr	r3, [pc, #608]	; (98cc <_dtoa_r+0x35c>)
    966a:	f003 fd37 	bl	d0dc <__aeabi_dsub>
    966e:	4a98      	ldr	r2, [pc, #608]	; (98d0 <_dtoa_r+0x360>)
    9670:	4b98      	ldr	r3, [pc, #608]	; (98d4 <_dtoa_r+0x364>)
    9672:	f003 fab3 	bl	cbdc <__aeabi_dmul>
    9676:	4a98      	ldr	r2, [pc, #608]	; (98d8 <_dtoa_r+0x368>)
    9678:	4b98      	ldr	r3, [pc, #608]	; (98dc <_dtoa_r+0x36c>)
    967a:	f002 fb6b 	bl	bd54 <__aeabi_dadd>
    967e:	0004      	movs	r4, r0
    9680:	0030      	movs	r0, r6
    9682:	000d      	movs	r5, r1
    9684:	f004 f894 	bl	d7b0 <__aeabi_i2d>
    9688:	4a95      	ldr	r2, [pc, #596]	; (98e0 <_dtoa_r+0x370>)
    968a:	4b96      	ldr	r3, [pc, #600]	; (98e4 <_dtoa_r+0x374>)
    968c:	f003 faa6 	bl	cbdc <__aeabi_dmul>
    9690:	0002      	movs	r2, r0
    9692:	000b      	movs	r3, r1
    9694:	0020      	movs	r0, r4
    9696:	0029      	movs	r1, r5
    9698:	f002 fb5c 	bl	bd54 <__aeabi_dadd>
    969c:	0004      	movs	r4, r0
    969e:	000d      	movs	r5, r1
    96a0:	f004 f852 	bl	d748 <__aeabi_d2iz>
    96a4:	2200      	movs	r2, #0
    96a6:	9003      	str	r0, [sp, #12]
    96a8:	2300      	movs	r3, #0
    96aa:	0020      	movs	r0, r4
    96ac:	0029      	movs	r1, r5
    96ae:	f001 fbb9 	bl	ae24 <__aeabi_dcmplt>
    96b2:	2800      	cmp	r0, #0
    96b4:	d00e      	beq.n	96d4 <_dtoa_r+0x164>
    96b6:	9803      	ldr	r0, [sp, #12]
    96b8:	f004 f87a 	bl	d7b0 <__aeabi_i2d>
    96bc:	000b      	movs	r3, r1
    96be:	0002      	movs	r2, r0
    96c0:	0029      	movs	r1, r5
    96c2:	0020      	movs	r0, r4
    96c4:	f001 fba8 	bl	ae18 <__aeabi_dcmpeq>
    96c8:	0003      	movs	r3, r0
    96ca:	4258      	negs	r0, r3
    96cc:	4158      	adcs	r0, r3
    96ce:	9b03      	ldr	r3, [sp, #12]
    96d0:	1a1b      	subs	r3, r3, r0
    96d2:	9303      	str	r3, [sp, #12]
    96d4:	2301      	movs	r3, #1
    96d6:	9316      	str	r3, [sp, #88]	; 0x58
    96d8:	9b03      	ldr	r3, [sp, #12]
    96da:	2b16      	cmp	r3, #22
    96dc:	d80f      	bhi.n	96fe <_dtoa_r+0x18e>
    96de:	4982      	ldr	r1, [pc, #520]	; (98e8 <_dtoa_r+0x378>)
    96e0:	00db      	lsls	r3, r3, #3
    96e2:	18c9      	adds	r1, r1, r3
    96e4:	6808      	ldr	r0, [r1, #0]
    96e6:	6849      	ldr	r1, [r1, #4]
    96e8:	9a06      	ldr	r2, [sp, #24]
    96ea:	9b07      	ldr	r3, [sp, #28]
    96ec:	f001 fbae 	bl	ae4c <__aeabi_dcmpgt>
    96f0:	2800      	cmp	r0, #0
    96f2:	d04b      	beq.n	978c <_dtoa_r+0x21c>
    96f4:	9b03      	ldr	r3, [sp, #12]
    96f6:	3b01      	subs	r3, #1
    96f8:	9303      	str	r3, [sp, #12]
    96fa:	2300      	movs	r3, #0
    96fc:	9316      	str	r3, [sp, #88]	; 0x58
    96fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9700:	1b9e      	subs	r6, r3, r6
    9702:	2300      	movs	r3, #0
    9704:	930b      	str	r3, [sp, #44]	; 0x2c
    9706:	0033      	movs	r3, r6
    9708:	3b01      	subs	r3, #1
    970a:	930c      	str	r3, [sp, #48]	; 0x30
    970c:	d504      	bpl.n	9718 <_dtoa_r+0x1a8>
    970e:	2301      	movs	r3, #1
    9710:	1b9b      	subs	r3, r3, r6
    9712:	930b      	str	r3, [sp, #44]	; 0x2c
    9714:	2300      	movs	r3, #0
    9716:	930c      	str	r3, [sp, #48]	; 0x30
    9718:	9b03      	ldr	r3, [sp, #12]
    971a:	2b00      	cmp	r3, #0
    971c:	db38      	blt.n	9790 <_dtoa_r+0x220>
    971e:	9a03      	ldr	r2, [sp, #12]
    9720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9722:	4694      	mov	ip, r2
    9724:	4463      	add	r3, ip
    9726:	930c      	str	r3, [sp, #48]	; 0x30
    9728:	2300      	movs	r3, #0
    972a:	920f      	str	r2, [sp, #60]	; 0x3c
    972c:	9308      	str	r3, [sp, #32]
    972e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9730:	2501      	movs	r5, #1
    9732:	2b09      	cmp	r3, #9
    9734:	d900      	bls.n	9738 <_dtoa_r+0x1c8>
    9736:	e091      	b.n	985c <_dtoa_r+0x2ec>
    9738:	2b05      	cmp	r3, #5
    973a:	dd02      	ble.n	9742 <_dtoa_r+0x1d2>
    973c:	2500      	movs	r5, #0
    973e:	3b04      	subs	r3, #4
    9740:	9322      	str	r3, [sp, #136]	; 0x88
    9742:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9744:	1e98      	subs	r0, r3, #2
    9746:	2803      	cmp	r0, #3
    9748:	d900      	bls.n	974c <_dtoa_r+0x1dc>
    974a:	e091      	b.n	9870 <_dtoa_r+0x300>
    974c:	f001 f9d4 	bl	aaf8 <__gnu_thumb1_case_uqi>
    9750:	76298482 	.word	0x76298482
    9754:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9756:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9758:	189e      	adds	r6, r3, r2
    975a:	4b64      	ldr	r3, [pc, #400]	; (98ec <_dtoa_r+0x37c>)
    975c:	18f2      	adds	r2, r6, r3
    975e:	2a20      	cmp	r2, #32
    9760:	dd0f      	ble.n	9782 <_dtoa_r+0x212>
    9762:	4b63      	ldr	r3, [pc, #396]	; (98f0 <_dtoa_r+0x380>)
    9764:	9806      	ldr	r0, [sp, #24]
    9766:	18f3      	adds	r3, r6, r3
    9768:	40d8      	lsrs	r0, r3
    976a:	2340      	movs	r3, #64	; 0x40
    976c:	1a9b      	subs	r3, r3, r2
    976e:	409c      	lsls	r4, r3
    9770:	4320      	orrs	r0, r4
    9772:	f004 f85f 	bl	d834 <__aeabi_ui2d>
    9776:	2301      	movs	r3, #1
    9778:	4c5e      	ldr	r4, [pc, #376]	; (98f4 <_dtoa_r+0x384>)
    977a:	3e01      	subs	r6, #1
    977c:	1909      	adds	r1, r1, r4
    977e:	9318      	str	r3, [sp, #96]	; 0x60
    9780:	e771      	b.n	9666 <_dtoa_r+0xf6>
    9782:	2320      	movs	r3, #32
    9784:	9806      	ldr	r0, [sp, #24]
    9786:	1a9b      	subs	r3, r3, r2
    9788:	4098      	lsls	r0, r3
    978a:	e7f2      	b.n	9772 <_dtoa_r+0x202>
    978c:	9016      	str	r0, [sp, #88]	; 0x58
    978e:	e7b6      	b.n	96fe <_dtoa_r+0x18e>
    9790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9792:	9a03      	ldr	r2, [sp, #12]
    9794:	1a9b      	subs	r3, r3, r2
    9796:	930b      	str	r3, [sp, #44]	; 0x2c
    9798:	4253      	negs	r3, r2
    979a:	9308      	str	r3, [sp, #32]
    979c:	2300      	movs	r3, #0
    979e:	930f      	str	r3, [sp, #60]	; 0x3c
    97a0:	e7c5      	b.n	972e <_dtoa_r+0x1be>
    97a2:	2301      	movs	r3, #1
    97a4:	930e      	str	r3, [sp, #56]	; 0x38
    97a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    97a8:	2b00      	cmp	r3, #0
    97aa:	dd65      	ble.n	9878 <_dtoa_r+0x308>
    97ac:	001f      	movs	r7, r3
    97ae:	930d      	str	r3, [sp, #52]	; 0x34
    97b0:	9a04      	ldr	r2, [sp, #16]
    97b2:	6a54      	ldr	r4, [r2, #36]	; 0x24
    97b4:	2200      	movs	r2, #0
    97b6:	6062      	str	r2, [r4, #4]
    97b8:	3204      	adds	r2, #4
    97ba:	0011      	movs	r1, r2
    97bc:	3114      	adds	r1, #20
    97be:	4299      	cmp	r1, r3
    97c0:	d95f      	bls.n	9882 <_dtoa_r+0x312>
    97c2:	6861      	ldr	r1, [r4, #4]
    97c4:	9804      	ldr	r0, [sp, #16]
    97c6:	f000 fcf4 	bl	a1b2 <_Balloc>
    97ca:	9b04      	ldr	r3, [sp, #16]
    97cc:	6020      	str	r0, [r4, #0]
    97ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    97d0:	681b      	ldr	r3, [r3, #0]
    97d2:	930a      	str	r3, [sp, #40]	; 0x28
    97d4:	2f0e      	cmp	r7, #14
    97d6:	d900      	bls.n	97da <_dtoa_r+0x26a>
    97d8:	e105      	b.n	99e6 <_dtoa_r+0x476>
    97da:	2d00      	cmp	r5, #0
    97dc:	d100      	bne.n	97e0 <_dtoa_r+0x270>
    97de:	e102      	b.n	99e6 <_dtoa_r+0x476>
    97e0:	9b06      	ldr	r3, [sp, #24]
    97e2:	9c07      	ldr	r4, [sp, #28]
    97e4:	9314      	str	r3, [sp, #80]	; 0x50
    97e6:	9415      	str	r4, [sp, #84]	; 0x54
    97e8:	9b03      	ldr	r3, [sp, #12]
    97ea:	2b00      	cmp	r3, #0
    97ec:	dc00      	bgt.n	97f0 <_dtoa_r+0x280>
    97ee:	e085      	b.n	98fc <_dtoa_r+0x38c>
    97f0:	001a      	movs	r2, r3
    97f2:	210f      	movs	r1, #15
    97f4:	4b3c      	ldr	r3, [pc, #240]	; (98e8 <_dtoa_r+0x378>)
    97f6:	400a      	ands	r2, r1
    97f8:	00d2      	lsls	r2, r2, #3
    97fa:	189b      	adds	r3, r3, r2
    97fc:	685c      	ldr	r4, [r3, #4]
    97fe:	681b      	ldr	r3, [r3, #0]
    9800:	9310      	str	r3, [sp, #64]	; 0x40
    9802:	9411      	str	r4, [sp, #68]	; 0x44
    9804:	9b03      	ldr	r3, [sp, #12]
    9806:	2402      	movs	r4, #2
    9808:	111d      	asrs	r5, r3, #4
    980a:	06eb      	lsls	r3, r5, #27
    980c:	d50a      	bpl.n	9824 <_dtoa_r+0x2b4>
    980e:	4b3a      	ldr	r3, [pc, #232]	; (98f8 <_dtoa_r+0x388>)
    9810:	400d      	ands	r5, r1
    9812:	6a1a      	ldr	r2, [r3, #32]
    9814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9816:	9814      	ldr	r0, [sp, #80]	; 0x50
    9818:	9915      	ldr	r1, [sp, #84]	; 0x54
    981a:	f002 fdab 	bl	c374 <__aeabi_ddiv>
    981e:	9006      	str	r0, [sp, #24]
    9820:	9107      	str	r1, [sp, #28]
    9822:	3401      	adds	r4, #1
    9824:	4e34      	ldr	r6, [pc, #208]	; (98f8 <_dtoa_r+0x388>)
    9826:	2d00      	cmp	r5, #0
    9828:	d130      	bne.n	988c <_dtoa_r+0x31c>
    982a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    982c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    982e:	9806      	ldr	r0, [sp, #24]
    9830:	9907      	ldr	r1, [sp, #28]
    9832:	f002 fd9f 	bl	c374 <__aeabi_ddiv>
    9836:	9006      	str	r0, [sp, #24]
    9838:	9107      	str	r1, [sp, #28]
    983a:	e07a      	b.n	9932 <_dtoa_r+0x3c2>
    983c:	2301      	movs	r3, #1
    983e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    9840:	930e      	str	r3, [sp, #56]	; 0x38
    9842:	4694      	mov	ip, r2
    9844:	9b03      	ldr	r3, [sp, #12]
    9846:	4463      	add	r3, ip
    9848:	1c5f      	adds	r7, r3, #1
    984a:	930d      	str	r3, [sp, #52]	; 0x34
    984c:	1e3b      	subs	r3, r7, #0
    984e:	dcaf      	bgt.n	97b0 <_dtoa_r+0x240>
    9850:	2301      	movs	r3, #1
    9852:	e7ad      	b.n	97b0 <_dtoa_r+0x240>
    9854:	2300      	movs	r3, #0
    9856:	e7a5      	b.n	97a4 <_dtoa_r+0x234>
    9858:	2300      	movs	r3, #0
    985a:	e7f0      	b.n	983e <_dtoa_r+0x2ce>
    985c:	2300      	movs	r3, #0
    985e:	950e      	str	r5, [sp, #56]	; 0x38
    9860:	9322      	str	r3, [sp, #136]	; 0x88
    9862:	3b01      	subs	r3, #1
    9864:	2200      	movs	r2, #0
    9866:	930d      	str	r3, [sp, #52]	; 0x34
    9868:	001f      	movs	r7, r3
    986a:	3313      	adds	r3, #19
    986c:	9223      	str	r2, [sp, #140]	; 0x8c
    986e:	e79f      	b.n	97b0 <_dtoa_r+0x240>
    9870:	2301      	movs	r3, #1
    9872:	930e      	str	r3, [sp, #56]	; 0x38
    9874:	3b02      	subs	r3, #2
    9876:	e7f5      	b.n	9864 <_dtoa_r+0x2f4>
    9878:	2301      	movs	r3, #1
    987a:	930d      	str	r3, [sp, #52]	; 0x34
    987c:	001f      	movs	r7, r3
    987e:	001a      	movs	r2, r3
    9880:	e7f4      	b.n	986c <_dtoa_r+0x2fc>
    9882:	6861      	ldr	r1, [r4, #4]
    9884:	0052      	lsls	r2, r2, #1
    9886:	3101      	adds	r1, #1
    9888:	6061      	str	r1, [r4, #4]
    988a:	e796      	b.n	97ba <_dtoa_r+0x24a>
    988c:	2301      	movs	r3, #1
    988e:	421d      	tst	r5, r3
    9890:	d008      	beq.n	98a4 <_dtoa_r+0x334>
    9892:	9810      	ldr	r0, [sp, #64]	; 0x40
    9894:	9911      	ldr	r1, [sp, #68]	; 0x44
    9896:	18e4      	adds	r4, r4, r3
    9898:	6832      	ldr	r2, [r6, #0]
    989a:	6873      	ldr	r3, [r6, #4]
    989c:	f003 f99e 	bl	cbdc <__aeabi_dmul>
    98a0:	9010      	str	r0, [sp, #64]	; 0x40
    98a2:	9111      	str	r1, [sp, #68]	; 0x44
    98a4:	106d      	asrs	r5, r5, #1
    98a6:	3608      	adds	r6, #8
    98a8:	e7bd      	b.n	9826 <_dtoa_r+0x2b6>
    98aa:	46c0      	nop			; (mov r8, r8)
    98ac:	7ff00000 	.word	0x7ff00000
    98b0:	0000270f 	.word	0x0000270f
    98b4:	0000ec3d 	.word	0x0000ec3d
    98b8:	0000ec40 	.word	0x0000ec40
    98bc:	0000ec10 	.word	0x0000ec10
    98c0:	0000ec11 	.word	0x0000ec11
    98c4:	3ff00000 	.word	0x3ff00000
    98c8:	fffffc01 	.word	0xfffffc01
    98cc:	3ff80000 	.word	0x3ff80000
    98d0:	636f4361 	.word	0x636f4361
    98d4:	3fd287a7 	.word	0x3fd287a7
    98d8:	8b60c8b3 	.word	0x8b60c8b3
    98dc:	3fc68a28 	.word	0x3fc68a28
    98e0:	509f79fb 	.word	0x509f79fb
    98e4:	3fd34413 	.word	0x3fd34413
    98e8:	0000ec78 	.word	0x0000ec78
    98ec:	00000432 	.word	0x00000432
    98f0:	00000412 	.word	0x00000412
    98f4:	fe100000 	.word	0xfe100000
    98f8:	0000ec50 	.word	0x0000ec50
    98fc:	9b03      	ldr	r3, [sp, #12]
    98fe:	2402      	movs	r4, #2
    9900:	2b00      	cmp	r3, #0
    9902:	d016      	beq.n	9932 <_dtoa_r+0x3c2>
    9904:	9814      	ldr	r0, [sp, #80]	; 0x50
    9906:	9915      	ldr	r1, [sp, #84]	; 0x54
    9908:	425d      	negs	r5, r3
    990a:	230f      	movs	r3, #15
    990c:	4aca      	ldr	r2, [pc, #808]	; (9c38 <_dtoa_r+0x6c8>)
    990e:	402b      	ands	r3, r5
    9910:	00db      	lsls	r3, r3, #3
    9912:	18d3      	adds	r3, r2, r3
    9914:	681a      	ldr	r2, [r3, #0]
    9916:	685b      	ldr	r3, [r3, #4]
    9918:	f003 f960 	bl	cbdc <__aeabi_dmul>
    991c:	2300      	movs	r3, #0
    991e:	9006      	str	r0, [sp, #24]
    9920:	9107      	str	r1, [sp, #28]
    9922:	4ec6      	ldr	r6, [pc, #792]	; (9c3c <_dtoa_r+0x6cc>)
    9924:	112d      	asrs	r5, r5, #4
    9926:	2d00      	cmp	r5, #0
    9928:	d000      	beq.n	992c <_dtoa_r+0x3bc>
    992a:	e08c      	b.n	9a46 <_dtoa_r+0x4d6>
    992c:	2b00      	cmp	r3, #0
    992e:	d000      	beq.n	9932 <_dtoa_r+0x3c2>
    9930:	e781      	b.n	9836 <_dtoa_r+0x2c6>
    9932:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9934:	2b00      	cmp	r3, #0
    9936:	d100      	bne.n	993a <_dtoa_r+0x3ca>
    9938:	e091      	b.n	9a5e <_dtoa_r+0x4ee>
    993a:	9a06      	ldr	r2, [sp, #24]
    993c:	9b07      	ldr	r3, [sp, #28]
    993e:	9210      	str	r2, [sp, #64]	; 0x40
    9940:	9311      	str	r3, [sp, #68]	; 0x44
    9942:	9810      	ldr	r0, [sp, #64]	; 0x40
    9944:	9911      	ldr	r1, [sp, #68]	; 0x44
    9946:	2200      	movs	r2, #0
    9948:	4bbd      	ldr	r3, [pc, #756]	; (9c40 <_dtoa_r+0x6d0>)
    994a:	f001 fa6b 	bl	ae24 <__aeabi_dcmplt>
    994e:	2800      	cmp	r0, #0
    9950:	d100      	bne.n	9954 <_dtoa_r+0x3e4>
    9952:	e084      	b.n	9a5e <_dtoa_r+0x4ee>
    9954:	2f00      	cmp	r7, #0
    9956:	d100      	bne.n	995a <_dtoa_r+0x3ea>
    9958:	e081      	b.n	9a5e <_dtoa_r+0x4ee>
    995a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    995c:	2b00      	cmp	r3, #0
    995e:	dd3e      	ble.n	99de <_dtoa_r+0x46e>
    9960:	9810      	ldr	r0, [sp, #64]	; 0x40
    9962:	9911      	ldr	r1, [sp, #68]	; 0x44
    9964:	9b03      	ldr	r3, [sp, #12]
    9966:	2200      	movs	r2, #0
    9968:	1e5e      	subs	r6, r3, #1
    996a:	4bb6      	ldr	r3, [pc, #728]	; (9c44 <_dtoa_r+0x6d4>)
    996c:	f003 f936 	bl	cbdc <__aeabi_dmul>
    9970:	9006      	str	r0, [sp, #24]
    9972:	9107      	str	r1, [sp, #28]
    9974:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    9976:	3401      	adds	r4, #1
    9978:	0020      	movs	r0, r4
    997a:	f003 ff19 	bl	d7b0 <__aeabi_i2d>
    997e:	9a06      	ldr	r2, [sp, #24]
    9980:	9b07      	ldr	r3, [sp, #28]
    9982:	f003 f92b 	bl	cbdc <__aeabi_dmul>
    9986:	2200      	movs	r2, #0
    9988:	4baf      	ldr	r3, [pc, #700]	; (9c48 <_dtoa_r+0x6d8>)
    998a:	f002 f9e3 	bl	bd54 <__aeabi_dadd>
    998e:	9012      	str	r0, [sp, #72]	; 0x48
    9990:	9113      	str	r1, [sp, #76]	; 0x4c
    9992:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9994:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    9996:	4aad      	ldr	r2, [pc, #692]	; (9c4c <_dtoa_r+0x6dc>)
    9998:	9310      	str	r3, [sp, #64]	; 0x40
    999a:	9411      	str	r4, [sp, #68]	; 0x44
    999c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    999e:	189c      	adds	r4, r3, r2
    99a0:	9411      	str	r4, [sp, #68]	; 0x44
    99a2:	2d00      	cmp	r5, #0
    99a4:	d15e      	bne.n	9a64 <_dtoa_r+0x4f4>
    99a6:	9806      	ldr	r0, [sp, #24]
    99a8:	9907      	ldr	r1, [sp, #28]
    99aa:	2200      	movs	r2, #0
    99ac:	4ba8      	ldr	r3, [pc, #672]	; (9c50 <_dtoa_r+0x6e0>)
    99ae:	f003 fb95 	bl	d0dc <__aeabi_dsub>
    99b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    99b4:	0023      	movs	r3, r4
    99b6:	9006      	str	r0, [sp, #24]
    99b8:	9107      	str	r1, [sp, #28]
    99ba:	f001 fa47 	bl	ae4c <__aeabi_dcmpgt>
    99be:	2800      	cmp	r0, #0
    99c0:	d000      	beq.n	99c4 <_dtoa_r+0x454>
    99c2:	e301      	b.n	9fc8 <_dtoa_r+0xa58>
    99c4:	48a3      	ldr	r0, [pc, #652]	; (9c54 <_dtoa_r+0x6e4>)
    99c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    99c8:	4684      	mov	ip, r0
    99ca:	4461      	add	r1, ip
    99cc:	000b      	movs	r3, r1
    99ce:	9806      	ldr	r0, [sp, #24]
    99d0:	9907      	ldr	r1, [sp, #28]
    99d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    99d4:	f001 fa26 	bl	ae24 <__aeabi_dcmplt>
    99d8:	2800      	cmp	r0, #0
    99da:	d000      	beq.n	99de <_dtoa_r+0x46e>
    99dc:	e2e8      	b.n	9fb0 <_dtoa_r+0xa40>
    99de:	9b14      	ldr	r3, [sp, #80]	; 0x50
    99e0:	9c15      	ldr	r4, [sp, #84]	; 0x54
    99e2:	9306      	str	r3, [sp, #24]
    99e4:	9407      	str	r4, [sp, #28]
    99e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    99e8:	2b00      	cmp	r3, #0
    99ea:	da00      	bge.n	99ee <_dtoa_r+0x47e>
    99ec:	e157      	b.n	9c9e <_dtoa_r+0x72e>
    99ee:	9a03      	ldr	r2, [sp, #12]
    99f0:	2a0e      	cmp	r2, #14
    99f2:	dd00      	ble.n	99f6 <_dtoa_r+0x486>
    99f4:	e153      	b.n	9c9e <_dtoa_r+0x72e>
    99f6:	4b90      	ldr	r3, [pc, #576]	; (9c38 <_dtoa_r+0x6c8>)
    99f8:	00d2      	lsls	r2, r2, #3
    99fa:	189b      	adds	r3, r3, r2
    99fc:	685c      	ldr	r4, [r3, #4]
    99fe:	681b      	ldr	r3, [r3, #0]
    9a00:	9308      	str	r3, [sp, #32]
    9a02:	9409      	str	r4, [sp, #36]	; 0x24
    9a04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9a06:	2b00      	cmp	r3, #0
    9a08:	db00      	blt.n	9a0c <_dtoa_r+0x49c>
    9a0a:	e0ce      	b.n	9baa <_dtoa_r+0x63a>
    9a0c:	2f00      	cmp	r7, #0
    9a0e:	dd00      	ble.n	9a12 <_dtoa_r+0x4a2>
    9a10:	e0cb      	b.n	9baa <_dtoa_r+0x63a>
    9a12:	d000      	beq.n	9a16 <_dtoa_r+0x4a6>
    9a14:	e2cf      	b.n	9fb6 <_dtoa_r+0xa46>
    9a16:	9808      	ldr	r0, [sp, #32]
    9a18:	9909      	ldr	r1, [sp, #36]	; 0x24
    9a1a:	2200      	movs	r2, #0
    9a1c:	4b8c      	ldr	r3, [pc, #560]	; (9c50 <_dtoa_r+0x6e0>)
    9a1e:	f003 f8dd 	bl	cbdc <__aeabi_dmul>
    9a22:	9a06      	ldr	r2, [sp, #24]
    9a24:	9b07      	ldr	r3, [sp, #28]
    9a26:	f001 fa1b 	bl	ae60 <__aeabi_dcmpge>
    9a2a:	003e      	movs	r6, r7
    9a2c:	9708      	str	r7, [sp, #32]
    9a2e:	2800      	cmp	r0, #0
    9a30:	d000      	beq.n	9a34 <_dtoa_r+0x4c4>
    9a32:	e2a4      	b.n	9f7e <_dtoa_r+0xa0e>
    9a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9a38:	1c5d      	adds	r5, r3, #1
    9a3a:	2331      	movs	r3, #49	; 0x31
    9a3c:	7013      	strb	r3, [r2, #0]
    9a3e:	9b03      	ldr	r3, [sp, #12]
    9a40:	3301      	adds	r3, #1
    9a42:	9303      	str	r3, [sp, #12]
    9a44:	e29f      	b.n	9f86 <_dtoa_r+0xa16>
    9a46:	2201      	movs	r2, #1
    9a48:	4215      	tst	r5, r2
    9a4a:	d005      	beq.n	9a58 <_dtoa_r+0x4e8>
    9a4c:	18a4      	adds	r4, r4, r2
    9a4e:	6832      	ldr	r2, [r6, #0]
    9a50:	6873      	ldr	r3, [r6, #4]
    9a52:	f003 f8c3 	bl	cbdc <__aeabi_dmul>
    9a56:	2301      	movs	r3, #1
    9a58:	106d      	asrs	r5, r5, #1
    9a5a:	3608      	adds	r6, #8
    9a5c:	e763      	b.n	9926 <_dtoa_r+0x3b6>
    9a5e:	9e03      	ldr	r6, [sp, #12]
    9a60:	003d      	movs	r5, r7
    9a62:	e789      	b.n	9978 <_dtoa_r+0x408>
    9a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9a66:	1e69      	subs	r1, r5, #1
    9a68:	1952      	adds	r2, r2, r5
    9a6a:	9217      	str	r2, [sp, #92]	; 0x5c
    9a6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9a6e:	4b72      	ldr	r3, [pc, #456]	; (9c38 <_dtoa_r+0x6c8>)
    9a70:	00c9      	lsls	r1, r1, #3
    9a72:	2a00      	cmp	r2, #0
    9a74:	d04a      	beq.n	9b0c <_dtoa_r+0x59c>
    9a76:	185b      	adds	r3, r3, r1
    9a78:	681a      	ldr	r2, [r3, #0]
    9a7a:	685b      	ldr	r3, [r3, #4]
    9a7c:	2000      	movs	r0, #0
    9a7e:	4976      	ldr	r1, [pc, #472]	; (9c58 <_dtoa_r+0x6e8>)
    9a80:	f002 fc78 	bl	c374 <__aeabi_ddiv>
    9a84:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9a86:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9a88:	f003 fb28 	bl	d0dc <__aeabi_dsub>
    9a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9a8e:	9010      	str	r0, [sp, #64]	; 0x40
    9a90:	9111      	str	r1, [sp, #68]	; 0x44
    9a92:	9312      	str	r3, [sp, #72]	; 0x48
    9a94:	9806      	ldr	r0, [sp, #24]
    9a96:	9907      	ldr	r1, [sp, #28]
    9a98:	f003 fe56 	bl	d748 <__aeabi_d2iz>
    9a9c:	0004      	movs	r4, r0
    9a9e:	f003 fe87 	bl	d7b0 <__aeabi_i2d>
    9aa2:	0002      	movs	r2, r0
    9aa4:	000b      	movs	r3, r1
    9aa6:	9806      	ldr	r0, [sp, #24]
    9aa8:	9907      	ldr	r1, [sp, #28]
    9aaa:	f003 fb17 	bl	d0dc <__aeabi_dsub>
    9aae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9ab0:	3430      	adds	r4, #48	; 0x30
    9ab2:	1c5d      	adds	r5, r3, #1
    9ab4:	701c      	strb	r4, [r3, #0]
    9ab6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9ab8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9aba:	9006      	str	r0, [sp, #24]
    9abc:	9107      	str	r1, [sp, #28]
    9abe:	f001 f9b1 	bl	ae24 <__aeabi_dcmplt>
    9ac2:	2800      	cmp	r0, #0
    9ac4:	d165      	bne.n	9b92 <_dtoa_r+0x622>
    9ac6:	9a06      	ldr	r2, [sp, #24]
    9ac8:	9b07      	ldr	r3, [sp, #28]
    9aca:	2000      	movs	r0, #0
    9acc:	495c      	ldr	r1, [pc, #368]	; (9c40 <_dtoa_r+0x6d0>)
    9ace:	f003 fb05 	bl	d0dc <__aeabi_dsub>
    9ad2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9ad4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9ad6:	f001 f9a5 	bl	ae24 <__aeabi_dcmplt>
    9ada:	2800      	cmp	r0, #0
    9adc:	d000      	beq.n	9ae0 <_dtoa_r+0x570>
    9ade:	e0be      	b.n	9c5e <_dtoa_r+0x6ee>
    9ae0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9ae2:	429d      	cmp	r5, r3
    9ae4:	d100      	bne.n	9ae8 <_dtoa_r+0x578>
    9ae6:	e77a      	b.n	99de <_dtoa_r+0x46e>
    9ae8:	9810      	ldr	r0, [sp, #64]	; 0x40
    9aea:	9911      	ldr	r1, [sp, #68]	; 0x44
    9aec:	2200      	movs	r2, #0
    9aee:	4b55      	ldr	r3, [pc, #340]	; (9c44 <_dtoa_r+0x6d4>)
    9af0:	f003 f874 	bl	cbdc <__aeabi_dmul>
    9af4:	2200      	movs	r2, #0
    9af6:	9010      	str	r0, [sp, #64]	; 0x40
    9af8:	9111      	str	r1, [sp, #68]	; 0x44
    9afa:	9806      	ldr	r0, [sp, #24]
    9afc:	9907      	ldr	r1, [sp, #28]
    9afe:	4b51      	ldr	r3, [pc, #324]	; (9c44 <_dtoa_r+0x6d4>)
    9b00:	f003 f86c 	bl	cbdc <__aeabi_dmul>
    9b04:	9512      	str	r5, [sp, #72]	; 0x48
    9b06:	9006      	str	r0, [sp, #24]
    9b08:	9107      	str	r1, [sp, #28]
    9b0a:	e7c3      	b.n	9a94 <_dtoa_r+0x524>
    9b0c:	1859      	adds	r1, r3, r1
    9b0e:	6808      	ldr	r0, [r1, #0]
    9b10:	6849      	ldr	r1, [r1, #4]
    9b12:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9b14:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9b16:	f003 f861 	bl	cbdc <__aeabi_dmul>
    9b1a:	9010      	str	r0, [sp, #64]	; 0x40
    9b1c:	9111      	str	r1, [sp, #68]	; 0x44
    9b1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9b20:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    9b22:	9806      	ldr	r0, [sp, #24]
    9b24:	9907      	ldr	r1, [sp, #28]
    9b26:	f003 fe0f 	bl	d748 <__aeabi_d2iz>
    9b2a:	9012      	str	r0, [sp, #72]	; 0x48
    9b2c:	f003 fe40 	bl	d7b0 <__aeabi_i2d>
    9b30:	0002      	movs	r2, r0
    9b32:	000b      	movs	r3, r1
    9b34:	9806      	ldr	r0, [sp, #24]
    9b36:	9907      	ldr	r1, [sp, #28]
    9b38:	f003 fad0 	bl	d0dc <__aeabi_dsub>
    9b3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9b3e:	9006      	str	r0, [sp, #24]
    9b40:	9107      	str	r1, [sp, #28]
    9b42:	3330      	adds	r3, #48	; 0x30
    9b44:	7023      	strb	r3, [r4, #0]
    9b46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9b48:	3401      	adds	r4, #1
    9b4a:	2200      	movs	r2, #0
    9b4c:	42a3      	cmp	r3, r4
    9b4e:	d124      	bne.n	9b9a <_dtoa_r+0x62a>
    9b50:	4b41      	ldr	r3, [pc, #260]	; (9c58 <_dtoa_r+0x6e8>)
    9b52:	9810      	ldr	r0, [sp, #64]	; 0x40
    9b54:	9911      	ldr	r1, [sp, #68]	; 0x44
    9b56:	f002 f8fd 	bl	bd54 <__aeabi_dadd>
    9b5a:	0002      	movs	r2, r0
    9b5c:	000b      	movs	r3, r1
    9b5e:	9806      	ldr	r0, [sp, #24]
    9b60:	9907      	ldr	r1, [sp, #28]
    9b62:	f001 f973 	bl	ae4c <__aeabi_dcmpgt>
    9b66:	2800      	cmp	r0, #0
    9b68:	d000      	beq.n	9b6c <_dtoa_r+0x5fc>
    9b6a:	e078      	b.n	9c5e <_dtoa_r+0x6ee>
    9b6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9b6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9b70:	2000      	movs	r0, #0
    9b72:	4939      	ldr	r1, [pc, #228]	; (9c58 <_dtoa_r+0x6e8>)
    9b74:	f003 fab2 	bl	d0dc <__aeabi_dsub>
    9b78:	0002      	movs	r2, r0
    9b7a:	000b      	movs	r3, r1
    9b7c:	9806      	ldr	r0, [sp, #24]
    9b7e:	9907      	ldr	r1, [sp, #28]
    9b80:	f001 f950 	bl	ae24 <__aeabi_dcmplt>
    9b84:	2800      	cmp	r0, #0
    9b86:	d100      	bne.n	9b8a <_dtoa_r+0x61a>
    9b88:	e729      	b.n	99de <_dtoa_r+0x46e>
    9b8a:	1e6b      	subs	r3, r5, #1
    9b8c:	781a      	ldrb	r2, [r3, #0]
    9b8e:	2a30      	cmp	r2, #48	; 0x30
    9b90:	d001      	beq.n	9b96 <_dtoa_r+0x626>
    9b92:	9603      	str	r6, [sp, #12]
    9b94:	e03f      	b.n	9c16 <_dtoa_r+0x6a6>
    9b96:	001d      	movs	r5, r3
    9b98:	e7f7      	b.n	9b8a <_dtoa_r+0x61a>
    9b9a:	9806      	ldr	r0, [sp, #24]
    9b9c:	9907      	ldr	r1, [sp, #28]
    9b9e:	4b29      	ldr	r3, [pc, #164]	; (9c44 <_dtoa_r+0x6d4>)
    9ba0:	f003 f81c 	bl	cbdc <__aeabi_dmul>
    9ba4:	9006      	str	r0, [sp, #24]
    9ba6:	9107      	str	r1, [sp, #28]
    9ba8:	e7bb      	b.n	9b22 <_dtoa_r+0x5b2>
    9baa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    9bac:	9a08      	ldr	r2, [sp, #32]
    9bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9bb0:	9806      	ldr	r0, [sp, #24]
    9bb2:	9907      	ldr	r1, [sp, #28]
    9bb4:	f002 fbde 	bl	c374 <__aeabi_ddiv>
    9bb8:	f003 fdc6 	bl	d748 <__aeabi_d2iz>
    9bbc:	0004      	movs	r4, r0
    9bbe:	f003 fdf7 	bl	d7b0 <__aeabi_i2d>
    9bc2:	9a08      	ldr	r2, [sp, #32]
    9bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9bc6:	f003 f809 	bl	cbdc <__aeabi_dmul>
    9bca:	000b      	movs	r3, r1
    9bcc:	0002      	movs	r2, r0
    9bce:	9806      	ldr	r0, [sp, #24]
    9bd0:	9907      	ldr	r1, [sp, #28]
    9bd2:	f003 fa83 	bl	d0dc <__aeabi_dsub>
    9bd6:	0023      	movs	r3, r4
    9bd8:	3330      	adds	r3, #48	; 0x30
    9bda:	7033      	strb	r3, [r6, #0]
    9bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9bde:	1c75      	adds	r5, r6, #1
    9be0:	1aeb      	subs	r3, r5, r3
    9be2:	429f      	cmp	r7, r3
    9be4:	d14c      	bne.n	9c80 <_dtoa_r+0x710>
    9be6:	0002      	movs	r2, r0
    9be8:	000b      	movs	r3, r1
    9bea:	f002 f8b3 	bl	bd54 <__aeabi_dadd>
    9bee:	0006      	movs	r6, r0
    9bf0:	000f      	movs	r7, r1
    9bf2:	0002      	movs	r2, r0
    9bf4:	000b      	movs	r3, r1
    9bf6:	9808      	ldr	r0, [sp, #32]
    9bf8:	9909      	ldr	r1, [sp, #36]	; 0x24
    9bfa:	f001 f913 	bl	ae24 <__aeabi_dcmplt>
    9bfe:	2800      	cmp	r0, #0
    9c00:	d12c      	bne.n	9c5c <_dtoa_r+0x6ec>
    9c02:	9808      	ldr	r0, [sp, #32]
    9c04:	9909      	ldr	r1, [sp, #36]	; 0x24
    9c06:	0032      	movs	r2, r6
    9c08:	003b      	movs	r3, r7
    9c0a:	f001 f905 	bl	ae18 <__aeabi_dcmpeq>
    9c0e:	2800      	cmp	r0, #0
    9c10:	d001      	beq.n	9c16 <_dtoa_r+0x6a6>
    9c12:	07e3      	lsls	r3, r4, #31
    9c14:	d422      	bmi.n	9c5c <_dtoa_r+0x6ec>
    9c16:	9905      	ldr	r1, [sp, #20]
    9c18:	9804      	ldr	r0, [sp, #16]
    9c1a:	f000 fb02 	bl	a222 <_Bfree>
    9c1e:	2300      	movs	r3, #0
    9c20:	702b      	strb	r3, [r5, #0]
    9c22:	9b03      	ldr	r3, [sp, #12]
    9c24:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9c26:	3301      	adds	r3, #1
    9c28:	6013      	str	r3, [r2, #0]
    9c2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9c2c:	2b00      	cmp	r3, #0
    9c2e:	d100      	bne.n	9c32 <_dtoa_r+0x6c2>
    9c30:	e275      	b.n	a11e <_dtoa_r+0xbae>
    9c32:	601d      	str	r5, [r3, #0]
    9c34:	e273      	b.n	a11e <_dtoa_r+0xbae>
    9c36:	46c0      	nop			; (mov r8, r8)
    9c38:	0000ec78 	.word	0x0000ec78
    9c3c:	0000ec50 	.word	0x0000ec50
    9c40:	3ff00000 	.word	0x3ff00000
    9c44:	40240000 	.word	0x40240000
    9c48:	401c0000 	.word	0x401c0000
    9c4c:	fcc00000 	.word	0xfcc00000
    9c50:	40140000 	.word	0x40140000
    9c54:	7cc00000 	.word	0x7cc00000
    9c58:	3fe00000 	.word	0x3fe00000
    9c5c:	9e03      	ldr	r6, [sp, #12]
    9c5e:	1e6b      	subs	r3, r5, #1
    9c60:	781a      	ldrb	r2, [r3, #0]
    9c62:	2a39      	cmp	r2, #57	; 0x39
    9c64:	d106      	bne.n	9c74 <_dtoa_r+0x704>
    9c66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9c68:	429a      	cmp	r2, r3
    9c6a:	d107      	bne.n	9c7c <_dtoa_r+0x70c>
    9c6c:	2330      	movs	r3, #48	; 0x30
    9c6e:	7013      	strb	r3, [r2, #0]
    9c70:	0013      	movs	r3, r2
    9c72:	3601      	adds	r6, #1
    9c74:	781a      	ldrb	r2, [r3, #0]
    9c76:	3201      	adds	r2, #1
    9c78:	701a      	strb	r2, [r3, #0]
    9c7a:	e78a      	b.n	9b92 <_dtoa_r+0x622>
    9c7c:	001d      	movs	r5, r3
    9c7e:	e7ee      	b.n	9c5e <_dtoa_r+0x6ee>
    9c80:	2200      	movs	r2, #0
    9c82:	4bcf      	ldr	r3, [pc, #828]	; (9fc0 <_dtoa_r+0xa50>)
    9c84:	f002 ffaa 	bl	cbdc <__aeabi_dmul>
    9c88:	2200      	movs	r2, #0
    9c8a:	2300      	movs	r3, #0
    9c8c:	9006      	str	r0, [sp, #24]
    9c8e:	9107      	str	r1, [sp, #28]
    9c90:	002e      	movs	r6, r5
    9c92:	f001 f8c1 	bl	ae18 <__aeabi_dcmpeq>
    9c96:	2800      	cmp	r0, #0
    9c98:	d100      	bne.n	9c9c <_dtoa_r+0x72c>
    9c9a:	e787      	b.n	9bac <_dtoa_r+0x63c>
    9c9c:	e7bb      	b.n	9c16 <_dtoa_r+0x6a6>
    9c9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9ca0:	2a00      	cmp	r2, #0
    9ca2:	d100      	bne.n	9ca6 <_dtoa_r+0x736>
    9ca4:	e087      	b.n	9db6 <_dtoa_r+0x846>
    9ca6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9ca8:	2a01      	cmp	r2, #1
    9caa:	dc6e      	bgt.n	9d8a <_dtoa_r+0x81a>
    9cac:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9cae:	2a00      	cmp	r2, #0
    9cb0:	d067      	beq.n	9d82 <_dtoa_r+0x812>
    9cb2:	4ac4      	ldr	r2, [pc, #784]	; (9fc4 <_dtoa_r+0xa54>)
    9cb4:	189b      	adds	r3, r3, r2
    9cb6:	9d08      	ldr	r5, [sp, #32]
    9cb8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    9cba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9cbc:	2101      	movs	r1, #1
    9cbe:	18d2      	adds	r2, r2, r3
    9cc0:	920b      	str	r2, [sp, #44]	; 0x2c
    9cc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9cc4:	9804      	ldr	r0, [sp, #16]
    9cc6:	18d3      	adds	r3, r2, r3
    9cc8:	930c      	str	r3, [sp, #48]	; 0x30
    9cca:	f000 fb48 	bl	a35e <__i2b>
    9cce:	0006      	movs	r6, r0
    9cd0:	2c00      	cmp	r4, #0
    9cd2:	dd0e      	ble.n	9cf2 <_dtoa_r+0x782>
    9cd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9cd6:	2b00      	cmp	r3, #0
    9cd8:	dd0b      	ble.n	9cf2 <_dtoa_r+0x782>
    9cda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9cdc:	0023      	movs	r3, r4
    9cde:	4294      	cmp	r4, r2
    9ce0:	dd00      	ble.n	9ce4 <_dtoa_r+0x774>
    9ce2:	0013      	movs	r3, r2
    9ce4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9ce6:	1ae4      	subs	r4, r4, r3
    9ce8:	1ad2      	subs	r2, r2, r3
    9cea:	920b      	str	r2, [sp, #44]	; 0x2c
    9cec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9cee:	1ad3      	subs	r3, r2, r3
    9cf0:	930c      	str	r3, [sp, #48]	; 0x30
    9cf2:	9b08      	ldr	r3, [sp, #32]
    9cf4:	2b00      	cmp	r3, #0
    9cf6:	d01e      	beq.n	9d36 <_dtoa_r+0x7c6>
    9cf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9cfa:	2b00      	cmp	r3, #0
    9cfc:	d05f      	beq.n	9dbe <_dtoa_r+0x84e>
    9cfe:	2d00      	cmp	r5, #0
    9d00:	dd11      	ble.n	9d26 <_dtoa_r+0x7b6>
    9d02:	0031      	movs	r1, r6
    9d04:	002a      	movs	r2, r5
    9d06:	9804      	ldr	r0, [sp, #16]
    9d08:	f000 fbc2 	bl	a490 <__pow5mult>
    9d0c:	9a05      	ldr	r2, [sp, #20]
    9d0e:	0001      	movs	r1, r0
    9d10:	0006      	movs	r6, r0
    9d12:	9804      	ldr	r0, [sp, #16]
    9d14:	f000 fb2c 	bl	a370 <__multiply>
    9d18:	9905      	ldr	r1, [sp, #20]
    9d1a:	9010      	str	r0, [sp, #64]	; 0x40
    9d1c:	9804      	ldr	r0, [sp, #16]
    9d1e:	f000 fa80 	bl	a222 <_Bfree>
    9d22:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9d24:	9305      	str	r3, [sp, #20]
    9d26:	9b08      	ldr	r3, [sp, #32]
    9d28:	1b5a      	subs	r2, r3, r5
    9d2a:	d004      	beq.n	9d36 <_dtoa_r+0x7c6>
    9d2c:	9905      	ldr	r1, [sp, #20]
    9d2e:	9804      	ldr	r0, [sp, #16]
    9d30:	f000 fbae 	bl	a490 <__pow5mult>
    9d34:	9005      	str	r0, [sp, #20]
    9d36:	2101      	movs	r1, #1
    9d38:	9804      	ldr	r0, [sp, #16]
    9d3a:	f000 fb10 	bl	a35e <__i2b>
    9d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9d40:	9008      	str	r0, [sp, #32]
    9d42:	2b00      	cmp	r3, #0
    9d44:	dd3d      	ble.n	9dc2 <_dtoa_r+0x852>
    9d46:	001a      	movs	r2, r3
    9d48:	0001      	movs	r1, r0
    9d4a:	9804      	ldr	r0, [sp, #16]
    9d4c:	f000 fba0 	bl	a490 <__pow5mult>
    9d50:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9d52:	9008      	str	r0, [sp, #32]
    9d54:	2500      	movs	r5, #0
    9d56:	2b01      	cmp	r3, #1
    9d58:	dc3b      	bgt.n	9dd2 <_dtoa_r+0x862>
    9d5a:	2500      	movs	r5, #0
    9d5c:	9b06      	ldr	r3, [sp, #24]
    9d5e:	42ab      	cmp	r3, r5
    9d60:	d133      	bne.n	9dca <_dtoa_r+0x85a>
    9d62:	9b07      	ldr	r3, [sp, #28]
    9d64:	031b      	lsls	r3, r3, #12
    9d66:	42ab      	cmp	r3, r5
    9d68:	d12f      	bne.n	9dca <_dtoa_r+0x85a>
    9d6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9d6c:	9a07      	ldr	r2, [sp, #28]
    9d6e:	4213      	tst	r3, r2
    9d70:	d02b      	beq.n	9dca <_dtoa_r+0x85a>
    9d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d74:	3501      	adds	r5, #1
    9d76:	3301      	adds	r3, #1
    9d78:	930b      	str	r3, [sp, #44]	; 0x2c
    9d7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9d7c:	3301      	adds	r3, #1
    9d7e:	930c      	str	r3, [sp, #48]	; 0x30
    9d80:	e023      	b.n	9dca <_dtoa_r+0x85a>
    9d82:	2336      	movs	r3, #54	; 0x36
    9d84:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    9d86:	1a9b      	subs	r3, r3, r2
    9d88:	e795      	b.n	9cb6 <_dtoa_r+0x746>
    9d8a:	9b08      	ldr	r3, [sp, #32]
    9d8c:	1e7d      	subs	r5, r7, #1
    9d8e:	42ab      	cmp	r3, r5
    9d90:	db06      	blt.n	9da0 <_dtoa_r+0x830>
    9d92:	1b5d      	subs	r5, r3, r5
    9d94:	2f00      	cmp	r7, #0
    9d96:	da0b      	bge.n	9db0 <_dtoa_r+0x840>
    9d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d9a:	1bdc      	subs	r4, r3, r7
    9d9c:	2300      	movs	r3, #0
    9d9e:	e78c      	b.n	9cba <_dtoa_r+0x74a>
    9da0:	9b08      	ldr	r3, [sp, #32]
    9da2:	9508      	str	r5, [sp, #32]
    9da4:	1aea      	subs	r2, r5, r3
    9da6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9da8:	2500      	movs	r5, #0
    9daa:	189b      	adds	r3, r3, r2
    9dac:	930f      	str	r3, [sp, #60]	; 0x3c
    9dae:	e7f1      	b.n	9d94 <_dtoa_r+0x824>
    9db0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    9db2:	003b      	movs	r3, r7
    9db4:	e781      	b.n	9cba <_dtoa_r+0x74a>
    9db6:	9d08      	ldr	r5, [sp, #32]
    9db8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    9dba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    9dbc:	e788      	b.n	9cd0 <_dtoa_r+0x760>
    9dbe:	9a08      	ldr	r2, [sp, #32]
    9dc0:	e7b4      	b.n	9d2c <_dtoa_r+0x7bc>
    9dc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9dc4:	2500      	movs	r5, #0
    9dc6:	2b01      	cmp	r3, #1
    9dc8:	ddc7      	ble.n	9d5a <_dtoa_r+0x7ea>
    9dca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9dcc:	2001      	movs	r0, #1
    9dce:	2b00      	cmp	r3, #0
    9dd0:	d00b      	beq.n	9dea <_dtoa_r+0x87a>
    9dd2:	9b08      	ldr	r3, [sp, #32]
    9dd4:	9a08      	ldr	r2, [sp, #32]
    9dd6:	691b      	ldr	r3, [r3, #16]
    9dd8:	930f      	str	r3, [sp, #60]	; 0x3c
    9dda:	3303      	adds	r3, #3
    9ddc:	009b      	lsls	r3, r3, #2
    9dde:	18d3      	adds	r3, r2, r3
    9de0:	6858      	ldr	r0, [r3, #4]
    9de2:	f000 fa73 	bl	a2cc <__hi0bits>
    9de6:	2320      	movs	r3, #32
    9de8:	1a18      	subs	r0, r3, r0
    9dea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9dec:	18c0      	adds	r0, r0, r3
    9dee:	231f      	movs	r3, #31
    9df0:	4018      	ands	r0, r3
    9df2:	d100      	bne.n	9df6 <_dtoa_r+0x886>
    9df4:	e0ab      	b.n	9f4e <_dtoa_r+0x9de>
    9df6:	3301      	adds	r3, #1
    9df8:	1a1b      	subs	r3, r3, r0
    9dfa:	2b04      	cmp	r3, #4
    9dfc:	dc00      	bgt.n	9e00 <_dtoa_r+0x890>
    9dfe:	e09b      	b.n	9f38 <_dtoa_r+0x9c8>
    9e00:	231c      	movs	r3, #28
    9e02:	1a18      	subs	r0, r3, r0
    9e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9e06:	1824      	adds	r4, r4, r0
    9e08:	181b      	adds	r3, r3, r0
    9e0a:	930b      	str	r3, [sp, #44]	; 0x2c
    9e0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9e0e:	181b      	adds	r3, r3, r0
    9e10:	930c      	str	r3, [sp, #48]	; 0x30
    9e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9e14:	2b00      	cmp	r3, #0
    9e16:	dd05      	ble.n	9e24 <_dtoa_r+0x8b4>
    9e18:	001a      	movs	r2, r3
    9e1a:	9905      	ldr	r1, [sp, #20]
    9e1c:	9804      	ldr	r0, [sp, #16]
    9e1e:	f000 fb89 	bl	a534 <__lshift>
    9e22:	9005      	str	r0, [sp, #20]
    9e24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9e26:	2b00      	cmp	r3, #0
    9e28:	dd05      	ble.n	9e36 <_dtoa_r+0x8c6>
    9e2a:	001a      	movs	r2, r3
    9e2c:	9908      	ldr	r1, [sp, #32]
    9e2e:	9804      	ldr	r0, [sp, #16]
    9e30:	f000 fb80 	bl	a534 <__lshift>
    9e34:	9008      	str	r0, [sp, #32]
    9e36:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9e38:	2b00      	cmp	r3, #0
    9e3a:	d100      	bne.n	9e3e <_dtoa_r+0x8ce>
    9e3c:	e089      	b.n	9f52 <_dtoa_r+0x9e2>
    9e3e:	9908      	ldr	r1, [sp, #32]
    9e40:	9805      	ldr	r0, [sp, #20]
    9e42:	f000 fbc8 	bl	a5d6 <__mcmp>
    9e46:	2800      	cmp	r0, #0
    9e48:	db00      	blt.n	9e4c <_dtoa_r+0x8dc>
    9e4a:	e082      	b.n	9f52 <_dtoa_r+0x9e2>
    9e4c:	9b03      	ldr	r3, [sp, #12]
    9e4e:	220a      	movs	r2, #10
    9e50:	3b01      	subs	r3, #1
    9e52:	9303      	str	r3, [sp, #12]
    9e54:	9905      	ldr	r1, [sp, #20]
    9e56:	2300      	movs	r3, #0
    9e58:	9804      	ldr	r0, [sp, #16]
    9e5a:	f000 f9fb 	bl	a254 <__multadd>
    9e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9e60:	9005      	str	r0, [sp, #20]
    9e62:	2b00      	cmp	r3, #0
    9e64:	d100      	bne.n	9e68 <_dtoa_r+0x8f8>
    9e66:	e15d      	b.n	a124 <_dtoa_r+0xbb4>
    9e68:	2300      	movs	r3, #0
    9e6a:	0031      	movs	r1, r6
    9e6c:	220a      	movs	r2, #10
    9e6e:	9804      	ldr	r0, [sp, #16]
    9e70:	f000 f9f0 	bl	a254 <__multadd>
    9e74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9e76:	0006      	movs	r6, r0
    9e78:	2b00      	cmp	r3, #0
    9e7a:	dc02      	bgt.n	9e82 <_dtoa_r+0x912>
    9e7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9e7e:	2b02      	cmp	r3, #2
    9e80:	dc6d      	bgt.n	9f5e <_dtoa_r+0x9ee>
    9e82:	2c00      	cmp	r4, #0
    9e84:	dd05      	ble.n	9e92 <_dtoa_r+0x922>
    9e86:	0031      	movs	r1, r6
    9e88:	0022      	movs	r2, r4
    9e8a:	9804      	ldr	r0, [sp, #16]
    9e8c:	f000 fb52 	bl	a534 <__lshift>
    9e90:	0006      	movs	r6, r0
    9e92:	0030      	movs	r0, r6
    9e94:	2d00      	cmp	r5, #0
    9e96:	d011      	beq.n	9ebc <_dtoa_r+0x94c>
    9e98:	6871      	ldr	r1, [r6, #4]
    9e9a:	9804      	ldr	r0, [sp, #16]
    9e9c:	f000 f989 	bl	a1b2 <_Balloc>
    9ea0:	0031      	movs	r1, r6
    9ea2:	0004      	movs	r4, r0
    9ea4:	6933      	ldr	r3, [r6, #16]
    9ea6:	310c      	adds	r1, #12
    9ea8:	1c9a      	adds	r2, r3, #2
    9eaa:	0092      	lsls	r2, r2, #2
    9eac:	300c      	adds	r0, #12
    9eae:	f7fe fcc9 	bl	8844 <memcpy>
    9eb2:	2201      	movs	r2, #1
    9eb4:	0021      	movs	r1, r4
    9eb6:	9804      	ldr	r0, [sp, #16]
    9eb8:	f000 fb3c 	bl	a534 <__lshift>
    9ebc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    9ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9ec0:	3f01      	subs	r7, #1
    9ec2:	930b      	str	r3, [sp, #44]	; 0x2c
    9ec4:	19db      	adds	r3, r3, r7
    9ec6:	0037      	movs	r7, r6
    9ec8:	0006      	movs	r6, r0
    9eca:	930f      	str	r3, [sp, #60]	; 0x3c
    9ecc:	9908      	ldr	r1, [sp, #32]
    9ece:	9805      	ldr	r0, [sp, #20]
    9ed0:	f7ff faca 	bl	9468 <quorem>
    9ed4:	0039      	movs	r1, r7
    9ed6:	900d      	str	r0, [sp, #52]	; 0x34
    9ed8:	0004      	movs	r4, r0
    9eda:	9805      	ldr	r0, [sp, #20]
    9edc:	f000 fb7b 	bl	a5d6 <__mcmp>
    9ee0:	0032      	movs	r2, r6
    9ee2:	900e      	str	r0, [sp, #56]	; 0x38
    9ee4:	9908      	ldr	r1, [sp, #32]
    9ee6:	9804      	ldr	r0, [sp, #16]
    9ee8:	f000 fb8e 	bl	a608 <__mdiff>
    9eec:	2301      	movs	r3, #1
    9eee:	930c      	str	r3, [sp, #48]	; 0x30
    9ef0:	68c3      	ldr	r3, [r0, #12]
    9ef2:	3430      	adds	r4, #48	; 0x30
    9ef4:	0005      	movs	r5, r0
    9ef6:	2b00      	cmp	r3, #0
    9ef8:	d104      	bne.n	9f04 <_dtoa_r+0x994>
    9efa:	0001      	movs	r1, r0
    9efc:	9805      	ldr	r0, [sp, #20]
    9efe:	f000 fb6a 	bl	a5d6 <__mcmp>
    9f02:	900c      	str	r0, [sp, #48]	; 0x30
    9f04:	0029      	movs	r1, r5
    9f06:	9804      	ldr	r0, [sp, #16]
    9f08:	f000 f98b 	bl	a222 <_Bfree>
    9f0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9f0e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9f10:	4313      	orrs	r3, r2
    9f12:	d000      	beq.n	9f16 <_dtoa_r+0x9a6>
    9f14:	e089      	b.n	a02a <_dtoa_r+0xaba>
    9f16:	9a06      	ldr	r2, [sp, #24]
    9f18:	3301      	adds	r3, #1
    9f1a:	4213      	tst	r3, r2
    9f1c:	d000      	beq.n	9f20 <_dtoa_r+0x9b0>
    9f1e:	e084      	b.n	a02a <_dtoa_r+0xaba>
    9f20:	2c39      	cmp	r4, #57	; 0x39
    9f22:	d100      	bne.n	9f26 <_dtoa_r+0x9b6>
    9f24:	e0a3      	b.n	a06e <_dtoa_r+0xafe>
    9f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9f28:	2b00      	cmp	r3, #0
    9f2a:	dd01      	ble.n	9f30 <_dtoa_r+0x9c0>
    9f2c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    9f2e:	3431      	adds	r4, #49	; 0x31
    9f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9f32:	1c5d      	adds	r5, r3, #1
    9f34:	701c      	strb	r4, [r3, #0]
    9f36:	e027      	b.n	9f88 <_dtoa_r+0xa18>
    9f38:	2b04      	cmp	r3, #4
    9f3a:	d100      	bne.n	9f3e <_dtoa_r+0x9ce>
    9f3c:	e769      	b.n	9e12 <_dtoa_r+0x8a2>
    9f3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9f40:	331c      	adds	r3, #28
    9f42:	18d2      	adds	r2, r2, r3
    9f44:	920b      	str	r2, [sp, #44]	; 0x2c
    9f46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9f48:	18e4      	adds	r4, r4, r3
    9f4a:	18d3      	adds	r3, r2, r3
    9f4c:	e760      	b.n	9e10 <_dtoa_r+0x8a0>
    9f4e:	0003      	movs	r3, r0
    9f50:	e7f5      	b.n	9f3e <_dtoa_r+0x9ce>
    9f52:	2f00      	cmp	r7, #0
    9f54:	dc3c      	bgt.n	9fd0 <_dtoa_r+0xa60>
    9f56:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9f58:	2b02      	cmp	r3, #2
    9f5a:	dd39      	ble.n	9fd0 <_dtoa_r+0xa60>
    9f5c:	970d      	str	r7, [sp, #52]	; 0x34
    9f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9f60:	2b00      	cmp	r3, #0
    9f62:	d10c      	bne.n	9f7e <_dtoa_r+0xa0e>
    9f64:	9908      	ldr	r1, [sp, #32]
    9f66:	2205      	movs	r2, #5
    9f68:	9804      	ldr	r0, [sp, #16]
    9f6a:	f000 f973 	bl	a254 <__multadd>
    9f6e:	9008      	str	r0, [sp, #32]
    9f70:	0001      	movs	r1, r0
    9f72:	9805      	ldr	r0, [sp, #20]
    9f74:	f000 fb2f 	bl	a5d6 <__mcmp>
    9f78:	2800      	cmp	r0, #0
    9f7a:	dd00      	ble.n	9f7e <_dtoa_r+0xa0e>
    9f7c:	e55a      	b.n	9a34 <_dtoa_r+0x4c4>
    9f7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9f80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    9f82:	43db      	mvns	r3, r3
    9f84:	9303      	str	r3, [sp, #12]
    9f86:	2700      	movs	r7, #0
    9f88:	9908      	ldr	r1, [sp, #32]
    9f8a:	9804      	ldr	r0, [sp, #16]
    9f8c:	f000 f949 	bl	a222 <_Bfree>
    9f90:	2e00      	cmp	r6, #0
    9f92:	d100      	bne.n	9f96 <_dtoa_r+0xa26>
    9f94:	e63f      	b.n	9c16 <_dtoa_r+0x6a6>
    9f96:	2f00      	cmp	r7, #0
    9f98:	d005      	beq.n	9fa6 <_dtoa_r+0xa36>
    9f9a:	42b7      	cmp	r7, r6
    9f9c:	d003      	beq.n	9fa6 <_dtoa_r+0xa36>
    9f9e:	0039      	movs	r1, r7
    9fa0:	9804      	ldr	r0, [sp, #16]
    9fa2:	f000 f93e 	bl	a222 <_Bfree>
    9fa6:	0031      	movs	r1, r6
    9fa8:	9804      	ldr	r0, [sp, #16]
    9faa:	f000 f93a 	bl	a222 <_Bfree>
    9fae:	e632      	b.n	9c16 <_dtoa_r+0x6a6>
    9fb0:	9508      	str	r5, [sp, #32]
    9fb2:	002e      	movs	r6, r5
    9fb4:	e7e3      	b.n	9f7e <_dtoa_r+0xa0e>
    9fb6:	2300      	movs	r3, #0
    9fb8:	9308      	str	r3, [sp, #32]
    9fba:	001e      	movs	r6, r3
    9fbc:	e7df      	b.n	9f7e <_dtoa_r+0xa0e>
    9fbe:	46c0      	nop			; (mov r8, r8)
    9fc0:	40240000 	.word	0x40240000
    9fc4:	00000433 	.word	0x00000433
    9fc8:	9603      	str	r6, [sp, #12]
    9fca:	9508      	str	r5, [sp, #32]
    9fcc:	002e      	movs	r6, r5
    9fce:	e531      	b.n	9a34 <_dtoa_r+0x4c4>
    9fd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9fd2:	970d      	str	r7, [sp, #52]	; 0x34
    9fd4:	2b00      	cmp	r3, #0
    9fd6:	d000      	beq.n	9fda <_dtoa_r+0xa6a>
    9fd8:	e753      	b.n	9e82 <_dtoa_r+0x912>
    9fda:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    9fdc:	9908      	ldr	r1, [sp, #32]
    9fde:	9805      	ldr	r0, [sp, #20]
    9fe0:	f7ff fa42 	bl	9468 <quorem>
    9fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9fe6:	3030      	adds	r0, #48	; 0x30
    9fe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9fea:	7028      	strb	r0, [r5, #0]
    9fec:	3501      	adds	r5, #1
    9fee:	0004      	movs	r4, r0
    9ff0:	1aeb      	subs	r3, r5, r3
    9ff2:	429a      	cmp	r2, r3
    9ff4:	dc78      	bgt.n	a0e8 <_dtoa_r+0xb78>
    9ff6:	1e15      	subs	r5, r2, #0
    9ff8:	dc00      	bgt.n	9ffc <_dtoa_r+0xa8c>
    9ffa:	2501      	movs	r5, #1
    9ffc:	2700      	movs	r7, #0
    9ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a000:	195d      	adds	r5, r3, r5
    a002:	9905      	ldr	r1, [sp, #20]
    a004:	2201      	movs	r2, #1
    a006:	9804      	ldr	r0, [sp, #16]
    a008:	f000 fa94 	bl	a534 <__lshift>
    a00c:	9908      	ldr	r1, [sp, #32]
    a00e:	9005      	str	r0, [sp, #20]
    a010:	f000 fae1 	bl	a5d6 <__mcmp>
    a014:	2800      	cmp	r0, #0
    a016:	dc2f      	bgt.n	a078 <_dtoa_r+0xb08>
    a018:	d101      	bne.n	a01e <_dtoa_r+0xaae>
    a01a:	07e3      	lsls	r3, r4, #31
    a01c:	d42c      	bmi.n	a078 <_dtoa_r+0xb08>
    a01e:	1e6b      	subs	r3, r5, #1
    a020:	781a      	ldrb	r2, [r3, #0]
    a022:	2a30      	cmp	r2, #48	; 0x30
    a024:	d1b0      	bne.n	9f88 <_dtoa_r+0xa18>
    a026:	001d      	movs	r5, r3
    a028:	e7f9      	b.n	a01e <_dtoa_r+0xaae>
    a02a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a02c:	2b00      	cmp	r3, #0
    a02e:	db07      	blt.n	a040 <_dtoa_r+0xad0>
    a030:	001d      	movs	r5, r3
    a032:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a034:	431d      	orrs	r5, r3
    a036:	d126      	bne.n	a086 <_dtoa_r+0xb16>
    a038:	2301      	movs	r3, #1
    a03a:	9a06      	ldr	r2, [sp, #24]
    a03c:	4213      	tst	r3, r2
    a03e:	d122      	bne.n	a086 <_dtoa_r+0xb16>
    a040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a042:	2b00      	cmp	r3, #0
    a044:	dc00      	bgt.n	a048 <_dtoa_r+0xad8>
    a046:	e773      	b.n	9f30 <_dtoa_r+0x9c0>
    a048:	9905      	ldr	r1, [sp, #20]
    a04a:	2201      	movs	r2, #1
    a04c:	9804      	ldr	r0, [sp, #16]
    a04e:	f000 fa71 	bl	a534 <__lshift>
    a052:	9908      	ldr	r1, [sp, #32]
    a054:	9005      	str	r0, [sp, #20]
    a056:	f000 fabe 	bl	a5d6 <__mcmp>
    a05a:	2800      	cmp	r0, #0
    a05c:	dc04      	bgt.n	a068 <_dtoa_r+0xaf8>
    a05e:	d000      	beq.n	a062 <_dtoa_r+0xaf2>
    a060:	e766      	b.n	9f30 <_dtoa_r+0x9c0>
    a062:	07e3      	lsls	r3, r4, #31
    a064:	d400      	bmi.n	a068 <_dtoa_r+0xaf8>
    a066:	e763      	b.n	9f30 <_dtoa_r+0x9c0>
    a068:	2c39      	cmp	r4, #57	; 0x39
    a06a:	d000      	beq.n	a06e <_dtoa_r+0xafe>
    a06c:	e75e      	b.n	9f2c <_dtoa_r+0x9bc>
    a06e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a070:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a072:	1c5d      	adds	r5, r3, #1
    a074:	2339      	movs	r3, #57	; 0x39
    a076:	7013      	strb	r3, [r2, #0]
    a078:	1e6b      	subs	r3, r5, #1
    a07a:	781a      	ldrb	r2, [r3, #0]
    a07c:	2a39      	cmp	r2, #57	; 0x39
    a07e:	d03b      	beq.n	a0f8 <_dtoa_r+0xb88>
    a080:	3201      	adds	r2, #1
    a082:	701a      	strb	r2, [r3, #0]
    a084:	e780      	b.n	9f88 <_dtoa_r+0xa18>
    a086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a088:	3301      	adds	r3, #1
    a08a:	930d      	str	r3, [sp, #52]	; 0x34
    a08c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a08e:	2b00      	cmp	r3, #0
    a090:	dd05      	ble.n	a09e <_dtoa_r+0xb2e>
    a092:	2c39      	cmp	r4, #57	; 0x39
    a094:	d0eb      	beq.n	a06e <_dtoa_r+0xafe>
    a096:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    a098:	3401      	adds	r4, #1
    a09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a09c:	e74a      	b.n	9f34 <_dtoa_r+0x9c4>
    a09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a0a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    a0a4:	701c      	strb	r4, [r3, #0]
    a0a6:	4293      	cmp	r3, r2
    a0a8:	d0ab      	beq.n	a002 <_dtoa_r+0xa92>
    a0aa:	2300      	movs	r3, #0
    a0ac:	220a      	movs	r2, #10
    a0ae:	9905      	ldr	r1, [sp, #20]
    a0b0:	9804      	ldr	r0, [sp, #16]
    a0b2:	f000 f8cf 	bl	a254 <__multadd>
    a0b6:	2300      	movs	r3, #0
    a0b8:	9005      	str	r0, [sp, #20]
    a0ba:	220a      	movs	r2, #10
    a0bc:	0039      	movs	r1, r7
    a0be:	9804      	ldr	r0, [sp, #16]
    a0c0:	42b7      	cmp	r7, r6
    a0c2:	d106      	bne.n	a0d2 <_dtoa_r+0xb62>
    a0c4:	f000 f8c6 	bl	a254 <__multadd>
    a0c8:	0007      	movs	r7, r0
    a0ca:	0006      	movs	r6, r0
    a0cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a0ce:	930b      	str	r3, [sp, #44]	; 0x2c
    a0d0:	e6fc      	b.n	9ecc <_dtoa_r+0x95c>
    a0d2:	f000 f8bf 	bl	a254 <__multadd>
    a0d6:	0031      	movs	r1, r6
    a0d8:	0007      	movs	r7, r0
    a0da:	2300      	movs	r3, #0
    a0dc:	220a      	movs	r2, #10
    a0de:	9804      	ldr	r0, [sp, #16]
    a0e0:	f000 f8b8 	bl	a254 <__multadd>
    a0e4:	0006      	movs	r6, r0
    a0e6:	e7f1      	b.n	a0cc <_dtoa_r+0xb5c>
    a0e8:	2300      	movs	r3, #0
    a0ea:	220a      	movs	r2, #10
    a0ec:	9905      	ldr	r1, [sp, #20]
    a0ee:	9804      	ldr	r0, [sp, #16]
    a0f0:	f000 f8b0 	bl	a254 <__multadd>
    a0f4:	9005      	str	r0, [sp, #20]
    a0f6:	e771      	b.n	9fdc <_dtoa_r+0xa6c>
    a0f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a0fa:	429a      	cmp	r2, r3
    a0fc:	d105      	bne.n	a10a <_dtoa_r+0xb9a>
    a0fe:	9b03      	ldr	r3, [sp, #12]
    a100:	3301      	adds	r3, #1
    a102:	9303      	str	r3, [sp, #12]
    a104:	2331      	movs	r3, #49	; 0x31
    a106:	7013      	strb	r3, [r2, #0]
    a108:	e73e      	b.n	9f88 <_dtoa_r+0xa18>
    a10a:	001d      	movs	r5, r3
    a10c:	e7b4      	b.n	a078 <_dtoa_r+0xb08>
    a10e:	4b0a      	ldr	r3, [pc, #40]	; (a138 <_dtoa_r+0xbc8>)
    a110:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a112:	930a      	str	r3, [sp, #40]	; 0x28
    a114:	4b09      	ldr	r3, [pc, #36]	; (a13c <_dtoa_r+0xbcc>)
    a116:	2a00      	cmp	r2, #0
    a118:	d001      	beq.n	a11e <_dtoa_r+0xbae>
    a11a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a11c:	6013      	str	r3, [r2, #0]
    a11e:	980a      	ldr	r0, [sp, #40]	; 0x28
    a120:	b01d      	add	sp, #116	; 0x74
    a122:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a126:	2b00      	cmp	r3, #0
    a128:	dd00      	ble.n	a12c <_dtoa_r+0xbbc>
    a12a:	e756      	b.n	9fda <_dtoa_r+0xa6a>
    a12c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a12e:	2b02      	cmp	r3, #2
    a130:	dc00      	bgt.n	a134 <_dtoa_r+0xbc4>
    a132:	e752      	b.n	9fda <_dtoa_r+0xa6a>
    a134:	e713      	b.n	9f5e <_dtoa_r+0x9ee>
    a136:	46c0      	nop			; (mov r8, r8)
    a138:	0000ec34 	.word	0x0000ec34
    a13c:	0000ec3c 	.word	0x0000ec3c

0000a140 <__locale_ctype_ptr>:
    a140:	4b04      	ldr	r3, [pc, #16]	; (a154 <__locale_ctype_ptr+0x14>)
    a142:	681b      	ldr	r3, [r3, #0]
    a144:	6a1b      	ldr	r3, [r3, #32]
    a146:	2b00      	cmp	r3, #0
    a148:	d100      	bne.n	a14c <__locale_ctype_ptr+0xc>
    a14a:	4b03      	ldr	r3, [pc, #12]	; (a158 <__locale_ctype_ptr+0x18>)
    a14c:	33ec      	adds	r3, #236	; 0xec
    a14e:	6818      	ldr	r0, [r3, #0]
    a150:	4770      	bx	lr
    a152:	46c0      	nop			; (mov r8, r8)
    a154:	200000a0 	.word	0x200000a0
    a158:	20000104 	.word	0x20000104

0000a15c <_localeconv_r>:
    a15c:	4b03      	ldr	r3, [pc, #12]	; (a16c <_localeconv_r+0x10>)
    a15e:	681b      	ldr	r3, [r3, #0]
    a160:	6a18      	ldr	r0, [r3, #32]
    a162:	2800      	cmp	r0, #0
    a164:	d100      	bne.n	a168 <_localeconv_r+0xc>
    a166:	4802      	ldr	r0, [pc, #8]	; (a170 <_localeconv_r+0x14>)
    a168:	30f0      	adds	r0, #240	; 0xf0
    a16a:	4770      	bx	lr
    a16c:	200000a0 	.word	0x200000a0
    a170:	20000104 	.word	0x20000104

0000a174 <__ascii_mbtowc>:
    a174:	b082      	sub	sp, #8
    a176:	2900      	cmp	r1, #0
    a178:	d100      	bne.n	a17c <__ascii_mbtowc+0x8>
    a17a:	a901      	add	r1, sp, #4
    a17c:	1e10      	subs	r0, r2, #0
    a17e:	d006      	beq.n	a18e <__ascii_mbtowc+0x1a>
    a180:	2b00      	cmp	r3, #0
    a182:	d006      	beq.n	a192 <__ascii_mbtowc+0x1e>
    a184:	7813      	ldrb	r3, [r2, #0]
    a186:	600b      	str	r3, [r1, #0]
    a188:	7810      	ldrb	r0, [r2, #0]
    a18a:	1e43      	subs	r3, r0, #1
    a18c:	4198      	sbcs	r0, r3
    a18e:	b002      	add	sp, #8
    a190:	4770      	bx	lr
    a192:	2002      	movs	r0, #2
    a194:	4240      	negs	r0, r0
    a196:	e7fa      	b.n	a18e <__ascii_mbtowc+0x1a>

0000a198 <memchr>:
    a198:	b2c9      	uxtb	r1, r1
    a19a:	1882      	adds	r2, r0, r2
    a19c:	4290      	cmp	r0, r2
    a19e:	d101      	bne.n	a1a4 <memchr+0xc>
    a1a0:	2000      	movs	r0, #0
    a1a2:	4770      	bx	lr
    a1a4:	7803      	ldrb	r3, [r0, #0]
    a1a6:	428b      	cmp	r3, r1
    a1a8:	d0fb      	beq.n	a1a2 <memchr+0xa>
    a1aa:	3001      	adds	r0, #1
    a1ac:	e7f6      	b.n	a19c <memchr+0x4>

0000a1ae <__malloc_lock>:
    a1ae:	4770      	bx	lr

0000a1b0 <__malloc_unlock>:
    a1b0:	4770      	bx	lr

0000a1b2 <_Balloc>:
    a1b2:	b570      	push	{r4, r5, r6, lr}
    a1b4:	6a46      	ldr	r6, [r0, #36]	; 0x24
    a1b6:	0004      	movs	r4, r0
    a1b8:	000d      	movs	r5, r1
    a1ba:	2e00      	cmp	r6, #0
    a1bc:	d107      	bne.n	a1ce <_Balloc+0x1c>
    a1be:	2010      	movs	r0, #16
    a1c0:	f7fe fb36 	bl	8830 <malloc>
    a1c4:	6260      	str	r0, [r4, #36]	; 0x24
    a1c6:	6046      	str	r6, [r0, #4]
    a1c8:	6086      	str	r6, [r0, #8]
    a1ca:	6006      	str	r6, [r0, #0]
    a1cc:	60c6      	str	r6, [r0, #12]
    a1ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
    a1d0:	68f3      	ldr	r3, [r6, #12]
    a1d2:	2b00      	cmp	r3, #0
    a1d4:	d013      	beq.n	a1fe <_Balloc+0x4c>
    a1d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a1d8:	00aa      	lsls	r2, r5, #2
    a1da:	68db      	ldr	r3, [r3, #12]
    a1dc:	189b      	adds	r3, r3, r2
    a1de:	6818      	ldr	r0, [r3, #0]
    a1e0:	2800      	cmp	r0, #0
    a1e2:	d118      	bne.n	a216 <_Balloc+0x64>
    a1e4:	2101      	movs	r1, #1
    a1e6:	000e      	movs	r6, r1
    a1e8:	40ae      	lsls	r6, r5
    a1ea:	1d72      	adds	r2, r6, #5
    a1ec:	0092      	lsls	r2, r2, #2
    a1ee:	0020      	movs	r0, r4
    a1f0:	f000 fac2 	bl	a778 <_calloc_r>
    a1f4:	2800      	cmp	r0, #0
    a1f6:	d00c      	beq.n	a212 <_Balloc+0x60>
    a1f8:	6045      	str	r5, [r0, #4]
    a1fa:	6086      	str	r6, [r0, #8]
    a1fc:	e00d      	b.n	a21a <_Balloc+0x68>
    a1fe:	2221      	movs	r2, #33	; 0x21
    a200:	2104      	movs	r1, #4
    a202:	0020      	movs	r0, r4
    a204:	f000 fab8 	bl	a778 <_calloc_r>
    a208:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a20a:	60f0      	str	r0, [r6, #12]
    a20c:	68db      	ldr	r3, [r3, #12]
    a20e:	2b00      	cmp	r3, #0
    a210:	d1e1      	bne.n	a1d6 <_Balloc+0x24>
    a212:	2000      	movs	r0, #0
    a214:	bd70      	pop	{r4, r5, r6, pc}
    a216:	6802      	ldr	r2, [r0, #0]
    a218:	601a      	str	r2, [r3, #0]
    a21a:	2300      	movs	r3, #0
    a21c:	6103      	str	r3, [r0, #16]
    a21e:	60c3      	str	r3, [r0, #12]
    a220:	e7f8      	b.n	a214 <_Balloc+0x62>

0000a222 <_Bfree>:
    a222:	b570      	push	{r4, r5, r6, lr}
    a224:	6a44      	ldr	r4, [r0, #36]	; 0x24
    a226:	0006      	movs	r6, r0
    a228:	000d      	movs	r5, r1
    a22a:	2c00      	cmp	r4, #0
    a22c:	d107      	bne.n	a23e <_Bfree+0x1c>
    a22e:	2010      	movs	r0, #16
    a230:	f7fe fafe 	bl	8830 <malloc>
    a234:	6270      	str	r0, [r6, #36]	; 0x24
    a236:	6044      	str	r4, [r0, #4]
    a238:	6084      	str	r4, [r0, #8]
    a23a:	6004      	str	r4, [r0, #0]
    a23c:	60c4      	str	r4, [r0, #12]
    a23e:	2d00      	cmp	r5, #0
    a240:	d007      	beq.n	a252 <_Bfree+0x30>
    a242:	6a73      	ldr	r3, [r6, #36]	; 0x24
    a244:	686a      	ldr	r2, [r5, #4]
    a246:	68db      	ldr	r3, [r3, #12]
    a248:	0092      	lsls	r2, r2, #2
    a24a:	189b      	adds	r3, r3, r2
    a24c:	681a      	ldr	r2, [r3, #0]
    a24e:	602a      	str	r2, [r5, #0]
    a250:	601d      	str	r5, [r3, #0]
    a252:	bd70      	pop	{r4, r5, r6, pc}

0000a254 <__multadd>:
    a254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a256:	001e      	movs	r6, r3
    a258:	2314      	movs	r3, #20
    a25a:	469c      	mov	ip, r3
    a25c:	0007      	movs	r7, r0
    a25e:	000c      	movs	r4, r1
    a260:	2000      	movs	r0, #0
    a262:	690d      	ldr	r5, [r1, #16]
    a264:	448c      	add	ip, r1
    a266:	4663      	mov	r3, ip
    a268:	8819      	ldrh	r1, [r3, #0]
    a26a:	681b      	ldr	r3, [r3, #0]
    a26c:	4351      	muls	r1, r2
    a26e:	0c1b      	lsrs	r3, r3, #16
    a270:	4353      	muls	r3, r2
    a272:	1989      	adds	r1, r1, r6
    a274:	0c0e      	lsrs	r6, r1, #16
    a276:	199b      	adds	r3, r3, r6
    a278:	b289      	uxth	r1, r1
    a27a:	0c1e      	lsrs	r6, r3, #16
    a27c:	041b      	lsls	r3, r3, #16
    a27e:	185b      	adds	r3, r3, r1
    a280:	4661      	mov	r1, ip
    a282:	3001      	adds	r0, #1
    a284:	c108      	stmia	r1!, {r3}
    a286:	468c      	mov	ip, r1
    a288:	4285      	cmp	r5, r0
    a28a:	dcec      	bgt.n	a266 <__multadd+0x12>
    a28c:	2e00      	cmp	r6, #0
    a28e:	d01b      	beq.n	a2c8 <__multadd+0x74>
    a290:	68a3      	ldr	r3, [r4, #8]
    a292:	429d      	cmp	r5, r3
    a294:	db12      	blt.n	a2bc <__multadd+0x68>
    a296:	6863      	ldr	r3, [r4, #4]
    a298:	0038      	movs	r0, r7
    a29a:	1c59      	adds	r1, r3, #1
    a29c:	f7ff ff89 	bl	a1b2 <_Balloc>
    a2a0:	0021      	movs	r1, r4
    a2a2:	6923      	ldr	r3, [r4, #16]
    a2a4:	9001      	str	r0, [sp, #4]
    a2a6:	1c9a      	adds	r2, r3, #2
    a2a8:	0092      	lsls	r2, r2, #2
    a2aa:	310c      	adds	r1, #12
    a2ac:	300c      	adds	r0, #12
    a2ae:	f7fe fac9 	bl	8844 <memcpy>
    a2b2:	0021      	movs	r1, r4
    a2b4:	0038      	movs	r0, r7
    a2b6:	f7ff ffb4 	bl	a222 <_Bfree>
    a2ba:	9c01      	ldr	r4, [sp, #4]
    a2bc:	1d2b      	adds	r3, r5, #4
    a2be:	009b      	lsls	r3, r3, #2
    a2c0:	18e3      	adds	r3, r4, r3
    a2c2:	3501      	adds	r5, #1
    a2c4:	605e      	str	r6, [r3, #4]
    a2c6:	6125      	str	r5, [r4, #16]
    a2c8:	0020      	movs	r0, r4
    a2ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000a2cc <__hi0bits>:
    a2cc:	0003      	movs	r3, r0
    a2ce:	0c02      	lsrs	r2, r0, #16
    a2d0:	2000      	movs	r0, #0
    a2d2:	4282      	cmp	r2, r0
    a2d4:	d101      	bne.n	a2da <__hi0bits+0xe>
    a2d6:	041b      	lsls	r3, r3, #16
    a2d8:	3010      	adds	r0, #16
    a2da:	0e1a      	lsrs	r2, r3, #24
    a2dc:	d101      	bne.n	a2e2 <__hi0bits+0x16>
    a2de:	3008      	adds	r0, #8
    a2e0:	021b      	lsls	r3, r3, #8
    a2e2:	0f1a      	lsrs	r2, r3, #28
    a2e4:	d101      	bne.n	a2ea <__hi0bits+0x1e>
    a2e6:	3004      	adds	r0, #4
    a2e8:	011b      	lsls	r3, r3, #4
    a2ea:	0f9a      	lsrs	r2, r3, #30
    a2ec:	d101      	bne.n	a2f2 <__hi0bits+0x26>
    a2ee:	3002      	adds	r0, #2
    a2f0:	009b      	lsls	r3, r3, #2
    a2f2:	2b00      	cmp	r3, #0
    a2f4:	db03      	blt.n	a2fe <__hi0bits+0x32>
    a2f6:	3001      	adds	r0, #1
    a2f8:	005b      	lsls	r3, r3, #1
    a2fa:	d400      	bmi.n	a2fe <__hi0bits+0x32>
    a2fc:	2020      	movs	r0, #32
    a2fe:	4770      	bx	lr

0000a300 <__lo0bits>:
    a300:	2207      	movs	r2, #7
    a302:	6803      	ldr	r3, [r0, #0]
    a304:	b510      	push	{r4, lr}
    a306:	0001      	movs	r1, r0
    a308:	401a      	ands	r2, r3
    a30a:	d00d      	beq.n	a328 <__lo0bits+0x28>
    a30c:	2401      	movs	r4, #1
    a30e:	2000      	movs	r0, #0
    a310:	4223      	tst	r3, r4
    a312:	d105      	bne.n	a320 <__lo0bits+0x20>
    a314:	3002      	adds	r0, #2
    a316:	4203      	tst	r3, r0
    a318:	d003      	beq.n	a322 <__lo0bits+0x22>
    a31a:	40e3      	lsrs	r3, r4
    a31c:	0020      	movs	r0, r4
    a31e:	600b      	str	r3, [r1, #0]
    a320:	bd10      	pop	{r4, pc}
    a322:	089b      	lsrs	r3, r3, #2
    a324:	600b      	str	r3, [r1, #0]
    a326:	e7fb      	b.n	a320 <__lo0bits+0x20>
    a328:	b29c      	uxth	r4, r3
    a32a:	0010      	movs	r0, r2
    a32c:	2c00      	cmp	r4, #0
    a32e:	d101      	bne.n	a334 <__lo0bits+0x34>
    a330:	2010      	movs	r0, #16
    a332:	0c1b      	lsrs	r3, r3, #16
    a334:	b2da      	uxtb	r2, r3
    a336:	2a00      	cmp	r2, #0
    a338:	d101      	bne.n	a33e <__lo0bits+0x3e>
    a33a:	3008      	adds	r0, #8
    a33c:	0a1b      	lsrs	r3, r3, #8
    a33e:	071a      	lsls	r2, r3, #28
    a340:	d101      	bne.n	a346 <__lo0bits+0x46>
    a342:	3004      	adds	r0, #4
    a344:	091b      	lsrs	r3, r3, #4
    a346:	079a      	lsls	r2, r3, #30
    a348:	d101      	bne.n	a34e <__lo0bits+0x4e>
    a34a:	3002      	adds	r0, #2
    a34c:	089b      	lsrs	r3, r3, #2
    a34e:	07da      	lsls	r2, r3, #31
    a350:	d4e8      	bmi.n	a324 <__lo0bits+0x24>
    a352:	085b      	lsrs	r3, r3, #1
    a354:	d001      	beq.n	a35a <__lo0bits+0x5a>
    a356:	3001      	adds	r0, #1
    a358:	e7e4      	b.n	a324 <__lo0bits+0x24>
    a35a:	2020      	movs	r0, #32
    a35c:	e7e0      	b.n	a320 <__lo0bits+0x20>

0000a35e <__i2b>:
    a35e:	b510      	push	{r4, lr}
    a360:	000c      	movs	r4, r1
    a362:	2101      	movs	r1, #1
    a364:	f7ff ff25 	bl	a1b2 <_Balloc>
    a368:	2301      	movs	r3, #1
    a36a:	6144      	str	r4, [r0, #20]
    a36c:	6103      	str	r3, [r0, #16]
    a36e:	bd10      	pop	{r4, pc}

0000a370 <__multiply>:
    a370:	b5f0      	push	{r4, r5, r6, r7, lr}
    a372:	690b      	ldr	r3, [r1, #16]
    a374:	0015      	movs	r5, r2
    a376:	6912      	ldr	r2, [r2, #16]
    a378:	b089      	sub	sp, #36	; 0x24
    a37a:	000c      	movs	r4, r1
    a37c:	4293      	cmp	r3, r2
    a37e:	da01      	bge.n	a384 <__multiply+0x14>
    a380:	002c      	movs	r4, r5
    a382:	000d      	movs	r5, r1
    a384:	6927      	ldr	r7, [r4, #16]
    a386:	692e      	ldr	r6, [r5, #16]
    a388:	68a2      	ldr	r2, [r4, #8]
    a38a:	19bb      	adds	r3, r7, r6
    a38c:	6861      	ldr	r1, [r4, #4]
    a38e:	9301      	str	r3, [sp, #4]
    a390:	4293      	cmp	r3, r2
    a392:	dd00      	ble.n	a396 <__multiply+0x26>
    a394:	3101      	adds	r1, #1
    a396:	f7ff ff0c 	bl	a1b2 <_Balloc>
    a39a:	0003      	movs	r3, r0
    a39c:	3314      	adds	r3, #20
    a39e:	9300      	str	r3, [sp, #0]
    a3a0:	9a00      	ldr	r2, [sp, #0]
    a3a2:	19bb      	adds	r3, r7, r6
    a3a4:	4694      	mov	ip, r2
    a3a6:	009b      	lsls	r3, r3, #2
    a3a8:	449c      	add	ip, r3
    a3aa:	0013      	movs	r3, r2
    a3ac:	2200      	movs	r2, #0
    a3ae:	9004      	str	r0, [sp, #16]
    a3b0:	4563      	cmp	r3, ip
    a3b2:	d31c      	bcc.n	a3ee <__multiply+0x7e>
    a3b4:	002a      	movs	r2, r5
    a3b6:	3414      	adds	r4, #20
    a3b8:	00bf      	lsls	r7, r7, #2
    a3ba:	19e3      	adds	r3, r4, r7
    a3bc:	3214      	adds	r2, #20
    a3be:	00b6      	lsls	r6, r6, #2
    a3c0:	9305      	str	r3, [sp, #20]
    a3c2:	1993      	adds	r3, r2, r6
    a3c4:	9402      	str	r4, [sp, #8]
    a3c6:	9306      	str	r3, [sp, #24]
    a3c8:	9b06      	ldr	r3, [sp, #24]
    a3ca:	429a      	cmp	r2, r3
    a3cc:	d311      	bcc.n	a3f2 <__multiply+0x82>
    a3ce:	9b01      	ldr	r3, [sp, #4]
    a3d0:	2b00      	cmp	r3, #0
    a3d2:	dd06      	ble.n	a3e2 <__multiply+0x72>
    a3d4:	2304      	movs	r3, #4
    a3d6:	425b      	negs	r3, r3
    a3d8:	449c      	add	ip, r3
    a3da:	4663      	mov	r3, ip
    a3dc:	681b      	ldr	r3, [r3, #0]
    a3de:	2b00      	cmp	r3, #0
    a3e0:	d051      	beq.n	a486 <__multiply+0x116>
    a3e2:	9b04      	ldr	r3, [sp, #16]
    a3e4:	9a01      	ldr	r2, [sp, #4]
    a3e6:	0018      	movs	r0, r3
    a3e8:	611a      	str	r2, [r3, #16]
    a3ea:	b009      	add	sp, #36	; 0x24
    a3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3ee:	c304      	stmia	r3!, {r2}
    a3f0:	e7de      	b.n	a3b0 <__multiply+0x40>
    a3f2:	8814      	ldrh	r4, [r2, #0]
    a3f4:	2c00      	cmp	r4, #0
    a3f6:	d01e      	beq.n	a436 <__multiply+0xc6>
    a3f8:	2600      	movs	r6, #0
    a3fa:	9d00      	ldr	r5, [sp, #0]
    a3fc:	9f02      	ldr	r7, [sp, #8]
    a3fe:	cf01      	ldmia	r7!, {r0}
    a400:	9507      	str	r5, [sp, #28]
    a402:	cd08      	ldmia	r5!, {r3}
    a404:	9303      	str	r3, [sp, #12]
    a406:	b283      	uxth	r3, r0
    a408:	4363      	muls	r3, r4
    a40a:	0019      	movs	r1, r3
    a40c:	466b      	mov	r3, sp
    a40e:	0c00      	lsrs	r0, r0, #16
    a410:	899b      	ldrh	r3, [r3, #12]
    a412:	4360      	muls	r0, r4
    a414:	18cb      	adds	r3, r1, r3
    a416:	9903      	ldr	r1, [sp, #12]
    a418:	199b      	adds	r3, r3, r6
    a41a:	0c09      	lsrs	r1, r1, #16
    a41c:	1841      	adds	r1, r0, r1
    a41e:	0c18      	lsrs	r0, r3, #16
    a420:	1809      	adds	r1, r1, r0
    a422:	0c0e      	lsrs	r6, r1, #16
    a424:	b29b      	uxth	r3, r3
    a426:	0409      	lsls	r1, r1, #16
    a428:	430b      	orrs	r3, r1
    a42a:	9907      	ldr	r1, [sp, #28]
    a42c:	600b      	str	r3, [r1, #0]
    a42e:	9b05      	ldr	r3, [sp, #20]
    a430:	42bb      	cmp	r3, r7
    a432:	d8e4      	bhi.n	a3fe <__multiply+0x8e>
    a434:	602e      	str	r6, [r5, #0]
    a436:	6813      	ldr	r3, [r2, #0]
    a438:	0c1b      	lsrs	r3, r3, #16
    a43a:	9303      	str	r3, [sp, #12]
    a43c:	d01e      	beq.n	a47c <__multiply+0x10c>
    a43e:	2600      	movs	r6, #0
    a440:	9b00      	ldr	r3, [sp, #0]
    a442:	9c02      	ldr	r4, [sp, #8]
    a444:	681b      	ldr	r3, [r3, #0]
    a446:	9800      	ldr	r0, [sp, #0]
    a448:	0007      	movs	r7, r0
    a44a:	8821      	ldrh	r1, [r4, #0]
    a44c:	9d03      	ldr	r5, [sp, #12]
    a44e:	b29b      	uxth	r3, r3
    a450:	4369      	muls	r1, r5
    a452:	c820      	ldmia	r0!, {r5}
    a454:	0c2d      	lsrs	r5, r5, #16
    a456:	1949      	adds	r1, r1, r5
    a458:	198e      	adds	r6, r1, r6
    a45a:	0431      	lsls	r1, r6, #16
    a45c:	430b      	orrs	r3, r1
    a45e:	603b      	str	r3, [r7, #0]
    a460:	cc08      	ldmia	r4!, {r3}
    a462:	9903      	ldr	r1, [sp, #12]
    a464:	0c1b      	lsrs	r3, r3, #16
    a466:	434b      	muls	r3, r1
    a468:	6879      	ldr	r1, [r7, #4]
    a46a:	0c36      	lsrs	r6, r6, #16
    a46c:	b289      	uxth	r1, r1
    a46e:	185b      	adds	r3, r3, r1
    a470:	9905      	ldr	r1, [sp, #20]
    a472:	199b      	adds	r3, r3, r6
    a474:	0c1e      	lsrs	r6, r3, #16
    a476:	42a1      	cmp	r1, r4
    a478:	d8e6      	bhi.n	a448 <__multiply+0xd8>
    a47a:	6003      	str	r3, [r0, #0]
    a47c:	9b00      	ldr	r3, [sp, #0]
    a47e:	3204      	adds	r2, #4
    a480:	3304      	adds	r3, #4
    a482:	9300      	str	r3, [sp, #0]
    a484:	e7a0      	b.n	a3c8 <__multiply+0x58>
    a486:	9b01      	ldr	r3, [sp, #4]
    a488:	3b01      	subs	r3, #1
    a48a:	9301      	str	r3, [sp, #4]
    a48c:	e79f      	b.n	a3ce <__multiply+0x5e>
	...

0000a490 <__pow5mult>:
    a490:	2303      	movs	r3, #3
    a492:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a494:	4013      	ands	r3, r2
    a496:	0005      	movs	r5, r0
    a498:	000e      	movs	r6, r1
    a49a:	0014      	movs	r4, r2
    a49c:	2b00      	cmp	r3, #0
    a49e:	d008      	beq.n	a4b2 <__pow5mult+0x22>
    a4a0:	4922      	ldr	r1, [pc, #136]	; (a52c <__pow5mult+0x9c>)
    a4a2:	3b01      	subs	r3, #1
    a4a4:	009a      	lsls	r2, r3, #2
    a4a6:	5852      	ldr	r2, [r2, r1]
    a4a8:	2300      	movs	r3, #0
    a4aa:	0031      	movs	r1, r6
    a4ac:	f7ff fed2 	bl	a254 <__multadd>
    a4b0:	0006      	movs	r6, r0
    a4b2:	10a3      	asrs	r3, r4, #2
    a4b4:	9301      	str	r3, [sp, #4]
    a4b6:	d036      	beq.n	a526 <__pow5mult+0x96>
    a4b8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    a4ba:	2c00      	cmp	r4, #0
    a4bc:	d107      	bne.n	a4ce <__pow5mult+0x3e>
    a4be:	2010      	movs	r0, #16
    a4c0:	f7fe f9b6 	bl	8830 <malloc>
    a4c4:	6268      	str	r0, [r5, #36]	; 0x24
    a4c6:	6044      	str	r4, [r0, #4]
    a4c8:	6084      	str	r4, [r0, #8]
    a4ca:	6004      	str	r4, [r0, #0]
    a4cc:	60c4      	str	r4, [r0, #12]
    a4ce:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    a4d0:	68bc      	ldr	r4, [r7, #8]
    a4d2:	2c00      	cmp	r4, #0
    a4d4:	d107      	bne.n	a4e6 <__pow5mult+0x56>
    a4d6:	4916      	ldr	r1, [pc, #88]	; (a530 <__pow5mult+0xa0>)
    a4d8:	0028      	movs	r0, r5
    a4da:	f7ff ff40 	bl	a35e <__i2b>
    a4de:	2300      	movs	r3, #0
    a4e0:	0004      	movs	r4, r0
    a4e2:	60b8      	str	r0, [r7, #8]
    a4e4:	6003      	str	r3, [r0, #0]
    a4e6:	2201      	movs	r2, #1
    a4e8:	9b01      	ldr	r3, [sp, #4]
    a4ea:	4213      	tst	r3, r2
    a4ec:	d00a      	beq.n	a504 <__pow5mult+0x74>
    a4ee:	0031      	movs	r1, r6
    a4f0:	0022      	movs	r2, r4
    a4f2:	0028      	movs	r0, r5
    a4f4:	f7ff ff3c 	bl	a370 <__multiply>
    a4f8:	0007      	movs	r7, r0
    a4fa:	0031      	movs	r1, r6
    a4fc:	0028      	movs	r0, r5
    a4fe:	f7ff fe90 	bl	a222 <_Bfree>
    a502:	003e      	movs	r6, r7
    a504:	9b01      	ldr	r3, [sp, #4]
    a506:	105b      	asrs	r3, r3, #1
    a508:	9301      	str	r3, [sp, #4]
    a50a:	d00c      	beq.n	a526 <__pow5mult+0x96>
    a50c:	6820      	ldr	r0, [r4, #0]
    a50e:	2800      	cmp	r0, #0
    a510:	d107      	bne.n	a522 <__pow5mult+0x92>
    a512:	0022      	movs	r2, r4
    a514:	0021      	movs	r1, r4
    a516:	0028      	movs	r0, r5
    a518:	f7ff ff2a 	bl	a370 <__multiply>
    a51c:	2300      	movs	r3, #0
    a51e:	6020      	str	r0, [r4, #0]
    a520:	6003      	str	r3, [r0, #0]
    a522:	0004      	movs	r4, r0
    a524:	e7df      	b.n	a4e6 <__pow5mult+0x56>
    a526:	0030      	movs	r0, r6
    a528:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a52a:	46c0      	nop			; (mov r8, r8)
    a52c:	0000ed40 	.word	0x0000ed40
    a530:	00000271 	.word	0x00000271

0000a534 <__lshift>:
    a534:	b5f0      	push	{r4, r5, r6, r7, lr}
    a536:	000d      	movs	r5, r1
    a538:	0017      	movs	r7, r2
    a53a:	692b      	ldr	r3, [r5, #16]
    a53c:	1154      	asrs	r4, r2, #5
    a53e:	b085      	sub	sp, #20
    a540:	18e3      	adds	r3, r4, r3
    a542:	9302      	str	r3, [sp, #8]
    a544:	3301      	adds	r3, #1
    a546:	9301      	str	r3, [sp, #4]
    a548:	6849      	ldr	r1, [r1, #4]
    a54a:	68ab      	ldr	r3, [r5, #8]
    a54c:	9003      	str	r0, [sp, #12]
    a54e:	9a01      	ldr	r2, [sp, #4]
    a550:	4293      	cmp	r3, r2
    a552:	db34      	blt.n	a5be <__lshift+0x8a>
    a554:	9803      	ldr	r0, [sp, #12]
    a556:	f7ff fe2c 	bl	a1b2 <_Balloc>
    a55a:	2300      	movs	r3, #0
    a55c:	0002      	movs	r2, r0
    a55e:	0006      	movs	r6, r0
    a560:	0019      	movs	r1, r3
    a562:	3214      	adds	r2, #20
    a564:	42a3      	cmp	r3, r4
    a566:	db2d      	blt.n	a5c4 <__lshift+0x90>
    a568:	43e3      	mvns	r3, r4
    a56a:	17db      	asrs	r3, r3, #31
    a56c:	401c      	ands	r4, r3
    a56e:	002b      	movs	r3, r5
    a570:	211f      	movs	r1, #31
    a572:	00a4      	lsls	r4, r4, #2
    a574:	1914      	adds	r4, r2, r4
    a576:	692a      	ldr	r2, [r5, #16]
    a578:	3314      	adds	r3, #20
    a57a:	0092      	lsls	r2, r2, #2
    a57c:	189a      	adds	r2, r3, r2
    a57e:	400f      	ands	r7, r1
    a580:	d024      	beq.n	a5cc <__lshift+0x98>
    a582:	3101      	adds	r1, #1
    a584:	1bc9      	subs	r1, r1, r7
    a586:	468c      	mov	ip, r1
    a588:	2100      	movs	r1, #0
    a58a:	6818      	ldr	r0, [r3, #0]
    a58c:	40b8      	lsls	r0, r7
    a58e:	4301      	orrs	r1, r0
    a590:	4660      	mov	r0, ip
    a592:	6021      	str	r1, [r4, #0]
    a594:	cb02      	ldmia	r3!, {r1}
    a596:	3404      	adds	r4, #4
    a598:	40c1      	lsrs	r1, r0
    a59a:	429a      	cmp	r2, r3
    a59c:	d8f5      	bhi.n	a58a <__lshift+0x56>
    a59e:	6021      	str	r1, [r4, #0]
    a5a0:	2900      	cmp	r1, #0
    a5a2:	d002      	beq.n	a5aa <__lshift+0x76>
    a5a4:	9b02      	ldr	r3, [sp, #8]
    a5a6:	3302      	adds	r3, #2
    a5a8:	9301      	str	r3, [sp, #4]
    a5aa:	9b01      	ldr	r3, [sp, #4]
    a5ac:	9803      	ldr	r0, [sp, #12]
    a5ae:	3b01      	subs	r3, #1
    a5b0:	6133      	str	r3, [r6, #16]
    a5b2:	0029      	movs	r1, r5
    a5b4:	f7ff fe35 	bl	a222 <_Bfree>
    a5b8:	0030      	movs	r0, r6
    a5ba:	b005      	add	sp, #20
    a5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a5be:	3101      	adds	r1, #1
    a5c0:	005b      	lsls	r3, r3, #1
    a5c2:	e7c4      	b.n	a54e <__lshift+0x1a>
    a5c4:	0098      	lsls	r0, r3, #2
    a5c6:	5011      	str	r1, [r2, r0]
    a5c8:	3301      	adds	r3, #1
    a5ca:	e7cb      	b.n	a564 <__lshift+0x30>
    a5cc:	cb02      	ldmia	r3!, {r1}
    a5ce:	c402      	stmia	r4!, {r1}
    a5d0:	429a      	cmp	r2, r3
    a5d2:	d8fb      	bhi.n	a5cc <__lshift+0x98>
    a5d4:	e7e9      	b.n	a5aa <__lshift+0x76>

0000a5d6 <__mcmp>:
    a5d6:	690a      	ldr	r2, [r1, #16]
    a5d8:	6903      	ldr	r3, [r0, #16]
    a5da:	b530      	push	{r4, r5, lr}
    a5dc:	1a9b      	subs	r3, r3, r2
    a5de:	d10e      	bne.n	a5fe <__mcmp+0x28>
    a5e0:	0092      	lsls	r2, r2, #2
    a5e2:	3014      	adds	r0, #20
    a5e4:	3114      	adds	r1, #20
    a5e6:	1884      	adds	r4, r0, r2
    a5e8:	1889      	adds	r1, r1, r2
    a5ea:	3c04      	subs	r4, #4
    a5ec:	3904      	subs	r1, #4
    a5ee:	6822      	ldr	r2, [r4, #0]
    a5f0:	680d      	ldr	r5, [r1, #0]
    a5f2:	42aa      	cmp	r2, r5
    a5f4:	d005      	beq.n	a602 <__mcmp+0x2c>
    a5f6:	42aa      	cmp	r2, r5
    a5f8:	4192      	sbcs	r2, r2
    a5fa:	2301      	movs	r3, #1
    a5fc:	4313      	orrs	r3, r2
    a5fe:	0018      	movs	r0, r3
    a600:	bd30      	pop	{r4, r5, pc}
    a602:	42a0      	cmp	r0, r4
    a604:	d3f1      	bcc.n	a5ea <__mcmp+0x14>
    a606:	e7fa      	b.n	a5fe <__mcmp+0x28>

0000a608 <__mdiff>:
    a608:	b5f0      	push	{r4, r5, r6, r7, lr}
    a60a:	000d      	movs	r5, r1
    a60c:	b085      	sub	sp, #20
    a60e:	0007      	movs	r7, r0
    a610:	0011      	movs	r1, r2
    a612:	0028      	movs	r0, r5
    a614:	0014      	movs	r4, r2
    a616:	f7ff ffde 	bl	a5d6 <__mcmp>
    a61a:	1e06      	subs	r6, r0, #0
    a61c:	d108      	bne.n	a630 <__mdiff+0x28>
    a61e:	0001      	movs	r1, r0
    a620:	0038      	movs	r0, r7
    a622:	f7ff fdc6 	bl	a1b2 <_Balloc>
    a626:	2301      	movs	r3, #1
    a628:	6146      	str	r6, [r0, #20]
    a62a:	6103      	str	r3, [r0, #16]
    a62c:	b005      	add	sp, #20
    a62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a630:	2301      	movs	r3, #1
    a632:	9301      	str	r3, [sp, #4]
    a634:	2800      	cmp	r0, #0
    a636:	db04      	blt.n	a642 <__mdiff+0x3a>
    a638:	0023      	movs	r3, r4
    a63a:	002c      	movs	r4, r5
    a63c:	001d      	movs	r5, r3
    a63e:	2300      	movs	r3, #0
    a640:	9301      	str	r3, [sp, #4]
    a642:	6861      	ldr	r1, [r4, #4]
    a644:	0038      	movs	r0, r7
    a646:	f7ff fdb4 	bl	a1b2 <_Balloc>
    a64a:	002f      	movs	r7, r5
    a64c:	2200      	movs	r2, #0
    a64e:	9b01      	ldr	r3, [sp, #4]
    a650:	6926      	ldr	r6, [r4, #16]
    a652:	60c3      	str	r3, [r0, #12]
    a654:	3414      	adds	r4, #20
    a656:	00b3      	lsls	r3, r6, #2
    a658:	18e3      	adds	r3, r4, r3
    a65a:	9302      	str	r3, [sp, #8]
    a65c:	692b      	ldr	r3, [r5, #16]
    a65e:	3714      	adds	r7, #20
    a660:	009b      	lsls	r3, r3, #2
    a662:	18fb      	adds	r3, r7, r3
    a664:	9303      	str	r3, [sp, #12]
    a666:	0003      	movs	r3, r0
    a668:	4694      	mov	ip, r2
    a66a:	3314      	adds	r3, #20
    a66c:	cc20      	ldmia	r4!, {r5}
    a66e:	cf04      	ldmia	r7!, {r2}
    a670:	9201      	str	r2, [sp, #4]
    a672:	b2aa      	uxth	r2, r5
    a674:	4494      	add	ip, r2
    a676:	466a      	mov	r2, sp
    a678:	4661      	mov	r1, ip
    a67a:	8892      	ldrh	r2, [r2, #4]
    a67c:	0c2d      	lsrs	r5, r5, #16
    a67e:	1a8a      	subs	r2, r1, r2
    a680:	9901      	ldr	r1, [sp, #4]
    a682:	0c09      	lsrs	r1, r1, #16
    a684:	1a69      	subs	r1, r5, r1
    a686:	1415      	asrs	r5, r2, #16
    a688:	1949      	adds	r1, r1, r5
    a68a:	140d      	asrs	r5, r1, #16
    a68c:	b292      	uxth	r2, r2
    a68e:	0409      	lsls	r1, r1, #16
    a690:	430a      	orrs	r2, r1
    a692:	601a      	str	r2, [r3, #0]
    a694:	9a03      	ldr	r2, [sp, #12]
    a696:	46ac      	mov	ip, r5
    a698:	3304      	adds	r3, #4
    a69a:	42ba      	cmp	r2, r7
    a69c:	d8e6      	bhi.n	a66c <__mdiff+0x64>
    a69e:	9902      	ldr	r1, [sp, #8]
    a6a0:	001a      	movs	r2, r3
    a6a2:	428c      	cmp	r4, r1
    a6a4:	d305      	bcc.n	a6b2 <__mdiff+0xaa>
    a6a6:	3a04      	subs	r2, #4
    a6a8:	6813      	ldr	r3, [r2, #0]
    a6aa:	2b00      	cmp	r3, #0
    a6ac:	d00e      	beq.n	a6cc <__mdiff+0xc4>
    a6ae:	6106      	str	r6, [r0, #16]
    a6b0:	e7bc      	b.n	a62c <__mdiff+0x24>
    a6b2:	cc04      	ldmia	r4!, {r2}
    a6b4:	b291      	uxth	r1, r2
    a6b6:	4461      	add	r1, ip
    a6b8:	140d      	asrs	r5, r1, #16
    a6ba:	0c12      	lsrs	r2, r2, #16
    a6bc:	1952      	adds	r2, r2, r5
    a6be:	1415      	asrs	r5, r2, #16
    a6c0:	b289      	uxth	r1, r1
    a6c2:	0412      	lsls	r2, r2, #16
    a6c4:	430a      	orrs	r2, r1
    a6c6:	46ac      	mov	ip, r5
    a6c8:	c304      	stmia	r3!, {r2}
    a6ca:	e7e8      	b.n	a69e <__mdiff+0x96>
    a6cc:	3e01      	subs	r6, #1
    a6ce:	e7ea      	b.n	a6a6 <__mdiff+0x9e>

0000a6d0 <__d2b>:
    a6d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a6d2:	001d      	movs	r5, r3
    a6d4:	2101      	movs	r1, #1
    a6d6:	9f08      	ldr	r7, [sp, #32]
    a6d8:	0014      	movs	r4, r2
    a6da:	f7ff fd6a 	bl	a1b2 <_Balloc>
    a6de:	032b      	lsls	r3, r5, #12
    a6e0:	006d      	lsls	r5, r5, #1
    a6e2:	0006      	movs	r6, r0
    a6e4:	0b1b      	lsrs	r3, r3, #12
    a6e6:	0d6d      	lsrs	r5, r5, #21
    a6e8:	d124      	bne.n	a734 <__d2b+0x64>
    a6ea:	9301      	str	r3, [sp, #4]
    a6ec:	2c00      	cmp	r4, #0
    a6ee:	d027      	beq.n	a740 <__d2b+0x70>
    a6f0:	4668      	mov	r0, sp
    a6f2:	9400      	str	r4, [sp, #0]
    a6f4:	f7ff fe04 	bl	a300 <__lo0bits>
    a6f8:	9c00      	ldr	r4, [sp, #0]
    a6fa:	2800      	cmp	r0, #0
    a6fc:	d01e      	beq.n	a73c <__d2b+0x6c>
    a6fe:	9b01      	ldr	r3, [sp, #4]
    a700:	2120      	movs	r1, #32
    a702:	001a      	movs	r2, r3
    a704:	1a09      	subs	r1, r1, r0
    a706:	408a      	lsls	r2, r1
    a708:	40c3      	lsrs	r3, r0
    a70a:	4322      	orrs	r2, r4
    a70c:	6172      	str	r2, [r6, #20]
    a70e:	9301      	str	r3, [sp, #4]
    a710:	9c01      	ldr	r4, [sp, #4]
    a712:	61b4      	str	r4, [r6, #24]
    a714:	1e63      	subs	r3, r4, #1
    a716:	419c      	sbcs	r4, r3
    a718:	3401      	adds	r4, #1
    a71a:	6134      	str	r4, [r6, #16]
    a71c:	2d00      	cmp	r5, #0
    a71e:	d018      	beq.n	a752 <__d2b+0x82>
    a720:	4b12      	ldr	r3, [pc, #72]	; (a76c <__d2b+0x9c>)
    a722:	18ed      	adds	r5, r5, r3
    a724:	2335      	movs	r3, #53	; 0x35
    a726:	182d      	adds	r5, r5, r0
    a728:	603d      	str	r5, [r7, #0]
    a72a:	1a18      	subs	r0, r3, r0
    a72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a72e:	6018      	str	r0, [r3, #0]
    a730:	0030      	movs	r0, r6
    a732:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a734:	2280      	movs	r2, #128	; 0x80
    a736:	0352      	lsls	r2, r2, #13
    a738:	4313      	orrs	r3, r2
    a73a:	e7d6      	b.n	a6ea <__d2b+0x1a>
    a73c:	6174      	str	r4, [r6, #20]
    a73e:	e7e7      	b.n	a710 <__d2b+0x40>
    a740:	a801      	add	r0, sp, #4
    a742:	f7ff fddd 	bl	a300 <__lo0bits>
    a746:	2401      	movs	r4, #1
    a748:	9b01      	ldr	r3, [sp, #4]
    a74a:	6134      	str	r4, [r6, #16]
    a74c:	6173      	str	r3, [r6, #20]
    a74e:	3020      	adds	r0, #32
    a750:	e7e4      	b.n	a71c <__d2b+0x4c>
    a752:	4b07      	ldr	r3, [pc, #28]	; (a770 <__d2b+0xa0>)
    a754:	18c0      	adds	r0, r0, r3
    a756:	4b07      	ldr	r3, [pc, #28]	; (a774 <__d2b+0xa4>)
    a758:	6038      	str	r0, [r7, #0]
    a75a:	18e3      	adds	r3, r4, r3
    a75c:	009b      	lsls	r3, r3, #2
    a75e:	18f3      	adds	r3, r6, r3
    a760:	6958      	ldr	r0, [r3, #20]
    a762:	f7ff fdb3 	bl	a2cc <__hi0bits>
    a766:	0164      	lsls	r4, r4, #5
    a768:	1a20      	subs	r0, r4, r0
    a76a:	e7df      	b.n	a72c <__d2b+0x5c>
    a76c:	fffffbcd 	.word	0xfffffbcd
    a770:	fffffbce 	.word	0xfffffbce
    a774:	3fffffff 	.word	0x3fffffff

0000a778 <_calloc_r>:
    a778:	434a      	muls	r2, r1
    a77a:	b570      	push	{r4, r5, r6, lr}
    a77c:	0011      	movs	r1, r2
    a77e:	0014      	movs	r4, r2
    a780:	f7fe f8bc 	bl	88fc <_malloc_r>
    a784:	1e05      	subs	r5, r0, #0
    a786:	d003      	beq.n	a790 <_calloc_r+0x18>
    a788:	0022      	movs	r2, r4
    a78a:	2100      	movs	r1, #0
    a78c:	f7fe f863 	bl	8856 <memset>
    a790:	0028      	movs	r0, r5
    a792:	bd70      	pop	{r4, r5, r6, pc}

0000a794 <__ssputs_r>:
    a794:	b5f0      	push	{r4, r5, r6, r7, lr}
    a796:	688e      	ldr	r6, [r1, #8]
    a798:	b085      	sub	sp, #20
    a79a:	0007      	movs	r7, r0
    a79c:	000c      	movs	r4, r1
    a79e:	9203      	str	r2, [sp, #12]
    a7a0:	9301      	str	r3, [sp, #4]
    a7a2:	429e      	cmp	r6, r3
    a7a4:	d839      	bhi.n	a81a <__ssputs_r+0x86>
    a7a6:	2390      	movs	r3, #144	; 0x90
    a7a8:	898a      	ldrh	r2, [r1, #12]
    a7aa:	00db      	lsls	r3, r3, #3
    a7ac:	421a      	tst	r2, r3
    a7ae:	d034      	beq.n	a81a <__ssputs_r+0x86>
    a7b0:	2503      	movs	r5, #3
    a7b2:	6909      	ldr	r1, [r1, #16]
    a7b4:	6823      	ldr	r3, [r4, #0]
    a7b6:	1a5b      	subs	r3, r3, r1
    a7b8:	9302      	str	r3, [sp, #8]
    a7ba:	6963      	ldr	r3, [r4, #20]
    a7bc:	9802      	ldr	r0, [sp, #8]
    a7be:	435d      	muls	r5, r3
    a7c0:	0feb      	lsrs	r3, r5, #31
    a7c2:	195d      	adds	r5, r3, r5
    a7c4:	9b01      	ldr	r3, [sp, #4]
    a7c6:	106d      	asrs	r5, r5, #1
    a7c8:	3301      	adds	r3, #1
    a7ca:	181b      	adds	r3, r3, r0
    a7cc:	42ab      	cmp	r3, r5
    a7ce:	d900      	bls.n	a7d2 <__ssputs_r+0x3e>
    a7d0:	001d      	movs	r5, r3
    a7d2:	0553      	lsls	r3, r2, #21
    a7d4:	d532      	bpl.n	a83c <__ssputs_r+0xa8>
    a7d6:	0029      	movs	r1, r5
    a7d8:	0038      	movs	r0, r7
    a7da:	f7fe f88f 	bl	88fc <_malloc_r>
    a7de:	1e06      	subs	r6, r0, #0
    a7e0:	d109      	bne.n	a7f6 <__ssputs_r+0x62>
    a7e2:	230c      	movs	r3, #12
    a7e4:	603b      	str	r3, [r7, #0]
    a7e6:	2340      	movs	r3, #64	; 0x40
    a7e8:	2001      	movs	r0, #1
    a7ea:	89a2      	ldrh	r2, [r4, #12]
    a7ec:	4240      	negs	r0, r0
    a7ee:	4313      	orrs	r3, r2
    a7f0:	81a3      	strh	r3, [r4, #12]
    a7f2:	b005      	add	sp, #20
    a7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a7f6:	9a02      	ldr	r2, [sp, #8]
    a7f8:	6921      	ldr	r1, [r4, #16]
    a7fa:	f7fe f823 	bl	8844 <memcpy>
    a7fe:	89a3      	ldrh	r3, [r4, #12]
    a800:	4a14      	ldr	r2, [pc, #80]	; (a854 <__ssputs_r+0xc0>)
    a802:	401a      	ands	r2, r3
    a804:	2380      	movs	r3, #128	; 0x80
    a806:	4313      	orrs	r3, r2
    a808:	81a3      	strh	r3, [r4, #12]
    a80a:	9b02      	ldr	r3, [sp, #8]
    a80c:	6126      	str	r6, [r4, #16]
    a80e:	18f6      	adds	r6, r6, r3
    a810:	6026      	str	r6, [r4, #0]
    a812:	6165      	str	r5, [r4, #20]
    a814:	9e01      	ldr	r6, [sp, #4]
    a816:	1aed      	subs	r5, r5, r3
    a818:	60a5      	str	r5, [r4, #8]
    a81a:	9b01      	ldr	r3, [sp, #4]
    a81c:	42b3      	cmp	r3, r6
    a81e:	d200      	bcs.n	a822 <__ssputs_r+0x8e>
    a820:	001e      	movs	r6, r3
    a822:	0032      	movs	r2, r6
    a824:	9903      	ldr	r1, [sp, #12]
    a826:	6820      	ldr	r0, [r4, #0]
    a828:	f000 f926 	bl	aa78 <memmove>
    a82c:	68a3      	ldr	r3, [r4, #8]
    a82e:	2000      	movs	r0, #0
    a830:	1b9b      	subs	r3, r3, r6
    a832:	60a3      	str	r3, [r4, #8]
    a834:	6823      	ldr	r3, [r4, #0]
    a836:	199e      	adds	r6, r3, r6
    a838:	6026      	str	r6, [r4, #0]
    a83a:	e7da      	b.n	a7f2 <__ssputs_r+0x5e>
    a83c:	002a      	movs	r2, r5
    a83e:	0038      	movs	r0, r7
    a840:	f000 f92c 	bl	aa9c <_realloc_r>
    a844:	1e06      	subs	r6, r0, #0
    a846:	d1e0      	bne.n	a80a <__ssputs_r+0x76>
    a848:	6921      	ldr	r1, [r4, #16]
    a84a:	0038      	movs	r0, r7
    a84c:	f7fe f80c 	bl	8868 <_free_r>
    a850:	e7c7      	b.n	a7e2 <__ssputs_r+0x4e>
    a852:	46c0      	nop			; (mov r8, r8)
    a854:	fffffb7f 	.word	0xfffffb7f

0000a858 <_svfiprintf_r>:
    a858:	b5f0      	push	{r4, r5, r6, r7, lr}
    a85a:	b09f      	sub	sp, #124	; 0x7c
    a85c:	9002      	str	r0, [sp, #8]
    a85e:	9305      	str	r3, [sp, #20]
    a860:	898b      	ldrh	r3, [r1, #12]
    a862:	000f      	movs	r7, r1
    a864:	0016      	movs	r6, r2
    a866:	061b      	lsls	r3, r3, #24
    a868:	d511      	bpl.n	a88e <_svfiprintf_r+0x36>
    a86a:	690b      	ldr	r3, [r1, #16]
    a86c:	2b00      	cmp	r3, #0
    a86e:	d10e      	bne.n	a88e <_svfiprintf_r+0x36>
    a870:	2140      	movs	r1, #64	; 0x40
    a872:	f7fe f843 	bl	88fc <_malloc_r>
    a876:	6038      	str	r0, [r7, #0]
    a878:	6138      	str	r0, [r7, #16]
    a87a:	2800      	cmp	r0, #0
    a87c:	d105      	bne.n	a88a <_svfiprintf_r+0x32>
    a87e:	230c      	movs	r3, #12
    a880:	9a02      	ldr	r2, [sp, #8]
    a882:	3801      	subs	r0, #1
    a884:	6013      	str	r3, [r2, #0]
    a886:	b01f      	add	sp, #124	; 0x7c
    a888:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a88a:	2340      	movs	r3, #64	; 0x40
    a88c:	617b      	str	r3, [r7, #20]
    a88e:	2300      	movs	r3, #0
    a890:	ad06      	add	r5, sp, #24
    a892:	616b      	str	r3, [r5, #20]
    a894:	3320      	adds	r3, #32
    a896:	766b      	strb	r3, [r5, #25]
    a898:	3310      	adds	r3, #16
    a89a:	76ab      	strb	r3, [r5, #26]
    a89c:	0034      	movs	r4, r6
    a89e:	7823      	ldrb	r3, [r4, #0]
    a8a0:	2b00      	cmp	r3, #0
    a8a2:	d147      	bne.n	a934 <_svfiprintf_r+0xdc>
    a8a4:	1ba3      	subs	r3, r4, r6
    a8a6:	9304      	str	r3, [sp, #16]
    a8a8:	d00d      	beq.n	a8c6 <_svfiprintf_r+0x6e>
    a8aa:	1ba3      	subs	r3, r4, r6
    a8ac:	0032      	movs	r2, r6
    a8ae:	0039      	movs	r1, r7
    a8b0:	9802      	ldr	r0, [sp, #8]
    a8b2:	f7ff ff6f 	bl	a794 <__ssputs_r>
    a8b6:	1c43      	adds	r3, r0, #1
    a8b8:	d100      	bne.n	a8bc <_svfiprintf_r+0x64>
    a8ba:	e0b5      	b.n	aa28 <_svfiprintf_r+0x1d0>
    a8bc:	696a      	ldr	r2, [r5, #20]
    a8be:	9b04      	ldr	r3, [sp, #16]
    a8c0:	4694      	mov	ip, r2
    a8c2:	4463      	add	r3, ip
    a8c4:	616b      	str	r3, [r5, #20]
    a8c6:	7823      	ldrb	r3, [r4, #0]
    a8c8:	2b00      	cmp	r3, #0
    a8ca:	d100      	bne.n	a8ce <_svfiprintf_r+0x76>
    a8cc:	e0ac      	b.n	aa28 <_svfiprintf_r+0x1d0>
    a8ce:	2201      	movs	r2, #1
    a8d0:	2300      	movs	r3, #0
    a8d2:	4252      	negs	r2, r2
    a8d4:	606a      	str	r2, [r5, #4]
    a8d6:	a902      	add	r1, sp, #8
    a8d8:	3254      	adds	r2, #84	; 0x54
    a8da:	1852      	adds	r2, r2, r1
    a8dc:	3401      	adds	r4, #1
    a8de:	602b      	str	r3, [r5, #0]
    a8e0:	60eb      	str	r3, [r5, #12]
    a8e2:	60ab      	str	r3, [r5, #8]
    a8e4:	7013      	strb	r3, [r2, #0]
    a8e6:	65ab      	str	r3, [r5, #88]	; 0x58
    a8e8:	4e58      	ldr	r6, [pc, #352]	; (aa4c <_svfiprintf_r+0x1f4>)
    a8ea:	2205      	movs	r2, #5
    a8ec:	7821      	ldrb	r1, [r4, #0]
    a8ee:	0030      	movs	r0, r6
    a8f0:	f7ff fc52 	bl	a198 <memchr>
    a8f4:	1c62      	adds	r2, r4, #1
    a8f6:	2800      	cmp	r0, #0
    a8f8:	d120      	bne.n	a93c <_svfiprintf_r+0xe4>
    a8fa:	6829      	ldr	r1, [r5, #0]
    a8fc:	06cb      	lsls	r3, r1, #27
    a8fe:	d504      	bpl.n	a90a <_svfiprintf_r+0xb2>
    a900:	2353      	movs	r3, #83	; 0x53
    a902:	ae02      	add	r6, sp, #8
    a904:	3020      	adds	r0, #32
    a906:	199b      	adds	r3, r3, r6
    a908:	7018      	strb	r0, [r3, #0]
    a90a:	070b      	lsls	r3, r1, #28
    a90c:	d504      	bpl.n	a918 <_svfiprintf_r+0xc0>
    a90e:	2353      	movs	r3, #83	; 0x53
    a910:	202b      	movs	r0, #43	; 0x2b
    a912:	ae02      	add	r6, sp, #8
    a914:	199b      	adds	r3, r3, r6
    a916:	7018      	strb	r0, [r3, #0]
    a918:	7823      	ldrb	r3, [r4, #0]
    a91a:	2b2a      	cmp	r3, #42	; 0x2a
    a91c:	d016      	beq.n	a94c <_svfiprintf_r+0xf4>
    a91e:	2000      	movs	r0, #0
    a920:	210a      	movs	r1, #10
    a922:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a924:	7822      	ldrb	r2, [r4, #0]
    a926:	3a30      	subs	r2, #48	; 0x30
    a928:	2a09      	cmp	r2, #9
    a92a:	d955      	bls.n	a9d8 <_svfiprintf_r+0x180>
    a92c:	2800      	cmp	r0, #0
    a92e:	d015      	beq.n	a95c <_svfiprintf_r+0x104>
    a930:	9309      	str	r3, [sp, #36]	; 0x24
    a932:	e013      	b.n	a95c <_svfiprintf_r+0x104>
    a934:	2b25      	cmp	r3, #37	; 0x25
    a936:	d0b5      	beq.n	a8a4 <_svfiprintf_r+0x4c>
    a938:	3401      	adds	r4, #1
    a93a:	e7b0      	b.n	a89e <_svfiprintf_r+0x46>
    a93c:	2301      	movs	r3, #1
    a93e:	1b80      	subs	r0, r0, r6
    a940:	4083      	lsls	r3, r0
    a942:	6829      	ldr	r1, [r5, #0]
    a944:	0014      	movs	r4, r2
    a946:	430b      	orrs	r3, r1
    a948:	602b      	str	r3, [r5, #0]
    a94a:	e7cd      	b.n	a8e8 <_svfiprintf_r+0x90>
    a94c:	9b05      	ldr	r3, [sp, #20]
    a94e:	1d18      	adds	r0, r3, #4
    a950:	681b      	ldr	r3, [r3, #0]
    a952:	9005      	str	r0, [sp, #20]
    a954:	2b00      	cmp	r3, #0
    a956:	db39      	blt.n	a9cc <_svfiprintf_r+0x174>
    a958:	9309      	str	r3, [sp, #36]	; 0x24
    a95a:	0014      	movs	r4, r2
    a95c:	7823      	ldrb	r3, [r4, #0]
    a95e:	2b2e      	cmp	r3, #46	; 0x2e
    a960:	d10b      	bne.n	a97a <_svfiprintf_r+0x122>
    a962:	7863      	ldrb	r3, [r4, #1]
    a964:	1c62      	adds	r2, r4, #1
    a966:	2b2a      	cmp	r3, #42	; 0x2a
    a968:	d13e      	bne.n	a9e8 <_svfiprintf_r+0x190>
    a96a:	9b05      	ldr	r3, [sp, #20]
    a96c:	3402      	adds	r4, #2
    a96e:	1d1a      	adds	r2, r3, #4
    a970:	681b      	ldr	r3, [r3, #0]
    a972:	9205      	str	r2, [sp, #20]
    a974:	2b00      	cmp	r3, #0
    a976:	db34      	blt.n	a9e2 <_svfiprintf_r+0x18a>
    a978:	9307      	str	r3, [sp, #28]
    a97a:	4e35      	ldr	r6, [pc, #212]	; (aa50 <_svfiprintf_r+0x1f8>)
    a97c:	7821      	ldrb	r1, [r4, #0]
    a97e:	2203      	movs	r2, #3
    a980:	0030      	movs	r0, r6
    a982:	f7ff fc09 	bl	a198 <memchr>
    a986:	2800      	cmp	r0, #0
    a988:	d006      	beq.n	a998 <_svfiprintf_r+0x140>
    a98a:	2340      	movs	r3, #64	; 0x40
    a98c:	1b80      	subs	r0, r0, r6
    a98e:	4083      	lsls	r3, r0
    a990:	682a      	ldr	r2, [r5, #0]
    a992:	3401      	adds	r4, #1
    a994:	4313      	orrs	r3, r2
    a996:	602b      	str	r3, [r5, #0]
    a998:	7821      	ldrb	r1, [r4, #0]
    a99a:	2206      	movs	r2, #6
    a99c:	482d      	ldr	r0, [pc, #180]	; (aa54 <_svfiprintf_r+0x1fc>)
    a99e:	1c66      	adds	r6, r4, #1
    a9a0:	7629      	strb	r1, [r5, #24]
    a9a2:	f7ff fbf9 	bl	a198 <memchr>
    a9a6:	2800      	cmp	r0, #0
    a9a8:	d046      	beq.n	aa38 <_svfiprintf_r+0x1e0>
    a9aa:	4b2b      	ldr	r3, [pc, #172]	; (aa58 <_svfiprintf_r+0x200>)
    a9ac:	2b00      	cmp	r3, #0
    a9ae:	d12f      	bne.n	aa10 <_svfiprintf_r+0x1b8>
    a9b0:	6829      	ldr	r1, [r5, #0]
    a9b2:	9b05      	ldr	r3, [sp, #20]
    a9b4:	2207      	movs	r2, #7
    a9b6:	05c9      	lsls	r1, r1, #23
    a9b8:	d528      	bpl.n	aa0c <_svfiprintf_r+0x1b4>
    a9ba:	189b      	adds	r3, r3, r2
    a9bc:	4393      	bics	r3, r2
    a9be:	3308      	adds	r3, #8
    a9c0:	9305      	str	r3, [sp, #20]
    a9c2:	696b      	ldr	r3, [r5, #20]
    a9c4:	9a03      	ldr	r2, [sp, #12]
    a9c6:	189b      	adds	r3, r3, r2
    a9c8:	616b      	str	r3, [r5, #20]
    a9ca:	e767      	b.n	a89c <_svfiprintf_r+0x44>
    a9cc:	425b      	negs	r3, r3
    a9ce:	60eb      	str	r3, [r5, #12]
    a9d0:	2302      	movs	r3, #2
    a9d2:	430b      	orrs	r3, r1
    a9d4:	602b      	str	r3, [r5, #0]
    a9d6:	e7c0      	b.n	a95a <_svfiprintf_r+0x102>
    a9d8:	434b      	muls	r3, r1
    a9da:	3401      	adds	r4, #1
    a9dc:	189b      	adds	r3, r3, r2
    a9de:	2001      	movs	r0, #1
    a9e0:	e7a0      	b.n	a924 <_svfiprintf_r+0xcc>
    a9e2:	2301      	movs	r3, #1
    a9e4:	425b      	negs	r3, r3
    a9e6:	e7c7      	b.n	a978 <_svfiprintf_r+0x120>
    a9e8:	2300      	movs	r3, #0
    a9ea:	0014      	movs	r4, r2
    a9ec:	200a      	movs	r0, #10
    a9ee:	001a      	movs	r2, r3
    a9f0:	606b      	str	r3, [r5, #4]
    a9f2:	7821      	ldrb	r1, [r4, #0]
    a9f4:	3930      	subs	r1, #48	; 0x30
    a9f6:	2909      	cmp	r1, #9
    a9f8:	d903      	bls.n	aa02 <_svfiprintf_r+0x1aa>
    a9fa:	2b00      	cmp	r3, #0
    a9fc:	d0bd      	beq.n	a97a <_svfiprintf_r+0x122>
    a9fe:	9207      	str	r2, [sp, #28]
    aa00:	e7bb      	b.n	a97a <_svfiprintf_r+0x122>
    aa02:	4342      	muls	r2, r0
    aa04:	3401      	adds	r4, #1
    aa06:	1852      	adds	r2, r2, r1
    aa08:	2301      	movs	r3, #1
    aa0a:	e7f2      	b.n	a9f2 <_svfiprintf_r+0x19a>
    aa0c:	3307      	adds	r3, #7
    aa0e:	e7d5      	b.n	a9bc <_svfiprintf_r+0x164>
    aa10:	ab05      	add	r3, sp, #20
    aa12:	9300      	str	r3, [sp, #0]
    aa14:	003a      	movs	r2, r7
    aa16:	4b11      	ldr	r3, [pc, #68]	; (aa5c <_svfiprintf_r+0x204>)
    aa18:	0029      	movs	r1, r5
    aa1a:	9802      	ldr	r0, [sp, #8]
    aa1c:	f7fe f868 	bl	8af0 <_printf_float>
    aa20:	9003      	str	r0, [sp, #12]
    aa22:	9b03      	ldr	r3, [sp, #12]
    aa24:	3301      	adds	r3, #1
    aa26:	d1cc      	bne.n	a9c2 <_svfiprintf_r+0x16a>
    aa28:	89bb      	ldrh	r3, [r7, #12]
    aa2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    aa2c:	065b      	lsls	r3, r3, #25
    aa2e:	d400      	bmi.n	aa32 <_svfiprintf_r+0x1da>
    aa30:	e729      	b.n	a886 <_svfiprintf_r+0x2e>
    aa32:	2001      	movs	r0, #1
    aa34:	4240      	negs	r0, r0
    aa36:	e726      	b.n	a886 <_svfiprintf_r+0x2e>
    aa38:	ab05      	add	r3, sp, #20
    aa3a:	9300      	str	r3, [sp, #0]
    aa3c:	003a      	movs	r2, r7
    aa3e:	4b07      	ldr	r3, [pc, #28]	; (aa5c <_svfiprintf_r+0x204>)
    aa40:	0029      	movs	r1, r5
    aa42:	9802      	ldr	r0, [sp, #8]
    aa44:	f7fe fb0e 	bl	9064 <_printf_i>
    aa48:	e7ea      	b.n	aa20 <_svfiprintf_r+0x1c8>
    aa4a:	46c0      	nop			; (mov r8, r8)
    aa4c:	0000ed4c 	.word	0x0000ed4c
    aa50:	0000ed52 	.word	0x0000ed52
    aa54:	0000ed56 	.word	0x0000ed56
    aa58:	00008af1 	.word	0x00008af1
    aa5c:	0000a795 	.word	0x0000a795

0000aa60 <__ascii_wctomb>:
    aa60:	1e0b      	subs	r3, r1, #0
    aa62:	d004      	beq.n	aa6e <__ascii_wctomb+0xe>
    aa64:	2aff      	cmp	r2, #255	; 0xff
    aa66:	d904      	bls.n	aa72 <__ascii_wctomb+0x12>
    aa68:	238a      	movs	r3, #138	; 0x8a
    aa6a:	6003      	str	r3, [r0, #0]
    aa6c:	3b8b      	subs	r3, #139	; 0x8b
    aa6e:	0018      	movs	r0, r3
    aa70:	4770      	bx	lr
    aa72:	700a      	strb	r2, [r1, #0]
    aa74:	2301      	movs	r3, #1
    aa76:	e7fa      	b.n	aa6e <__ascii_wctomb+0xe>

0000aa78 <memmove>:
    aa78:	b510      	push	{r4, lr}
    aa7a:	4288      	cmp	r0, r1
    aa7c:	d902      	bls.n	aa84 <memmove+0xc>
    aa7e:	188b      	adds	r3, r1, r2
    aa80:	4298      	cmp	r0, r3
    aa82:	d308      	bcc.n	aa96 <memmove+0x1e>
    aa84:	2300      	movs	r3, #0
    aa86:	429a      	cmp	r2, r3
    aa88:	d007      	beq.n	aa9a <memmove+0x22>
    aa8a:	5ccc      	ldrb	r4, [r1, r3]
    aa8c:	54c4      	strb	r4, [r0, r3]
    aa8e:	3301      	adds	r3, #1
    aa90:	e7f9      	b.n	aa86 <memmove+0xe>
    aa92:	5c8b      	ldrb	r3, [r1, r2]
    aa94:	5483      	strb	r3, [r0, r2]
    aa96:	3a01      	subs	r2, #1
    aa98:	d2fb      	bcs.n	aa92 <memmove+0x1a>
    aa9a:	bd10      	pop	{r4, pc}

0000aa9c <_realloc_r>:
    aa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa9e:	0007      	movs	r7, r0
    aaa0:	000d      	movs	r5, r1
    aaa2:	0016      	movs	r6, r2
    aaa4:	2900      	cmp	r1, #0
    aaa6:	d105      	bne.n	aab4 <_realloc_r+0x18>
    aaa8:	0011      	movs	r1, r2
    aaaa:	f7fd ff27 	bl	88fc <_malloc_r>
    aaae:	0004      	movs	r4, r0
    aab0:	0020      	movs	r0, r4
    aab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aab4:	2a00      	cmp	r2, #0
    aab6:	d103      	bne.n	aac0 <_realloc_r+0x24>
    aab8:	f7fd fed6 	bl	8868 <_free_r>
    aabc:	0034      	movs	r4, r6
    aabe:	e7f7      	b.n	aab0 <_realloc_r+0x14>
    aac0:	f000 f812 	bl	aae8 <_malloc_usable_size_r>
    aac4:	002c      	movs	r4, r5
    aac6:	4286      	cmp	r6, r0
    aac8:	d9f2      	bls.n	aab0 <_realloc_r+0x14>
    aaca:	0031      	movs	r1, r6
    aacc:	0038      	movs	r0, r7
    aace:	f7fd ff15 	bl	88fc <_malloc_r>
    aad2:	1e04      	subs	r4, r0, #0
    aad4:	d0ec      	beq.n	aab0 <_realloc_r+0x14>
    aad6:	0029      	movs	r1, r5
    aad8:	0032      	movs	r2, r6
    aada:	f7fd feb3 	bl	8844 <memcpy>
    aade:	0029      	movs	r1, r5
    aae0:	0038      	movs	r0, r7
    aae2:	f7fd fec1 	bl	8868 <_free_r>
    aae6:	e7e3      	b.n	aab0 <_realloc_r+0x14>

0000aae8 <_malloc_usable_size_r>:
    aae8:	1f0b      	subs	r3, r1, #4
    aaea:	681b      	ldr	r3, [r3, #0]
    aaec:	1f18      	subs	r0, r3, #4
    aaee:	2b00      	cmp	r3, #0
    aaf0:	da01      	bge.n	aaf6 <_malloc_usable_size_r+0xe>
    aaf2:	580b      	ldr	r3, [r1, r0]
    aaf4:	18c0      	adds	r0, r0, r3
    aaf6:	4770      	bx	lr

0000aaf8 <__gnu_thumb1_case_uqi>:
    aaf8:	b402      	push	{r1}
    aafa:	4671      	mov	r1, lr
    aafc:	0849      	lsrs	r1, r1, #1
    aafe:	0049      	lsls	r1, r1, #1
    ab00:	5c09      	ldrb	r1, [r1, r0]
    ab02:	0049      	lsls	r1, r1, #1
    ab04:	448e      	add	lr, r1
    ab06:	bc02      	pop	{r1}
    ab08:	4770      	bx	lr
    ab0a:	46c0      	nop			; (mov r8, r8)

0000ab0c <__udivsi3>:
    ab0c:	2200      	movs	r2, #0
    ab0e:	0843      	lsrs	r3, r0, #1
    ab10:	428b      	cmp	r3, r1
    ab12:	d374      	bcc.n	abfe <__udivsi3+0xf2>
    ab14:	0903      	lsrs	r3, r0, #4
    ab16:	428b      	cmp	r3, r1
    ab18:	d35f      	bcc.n	abda <__udivsi3+0xce>
    ab1a:	0a03      	lsrs	r3, r0, #8
    ab1c:	428b      	cmp	r3, r1
    ab1e:	d344      	bcc.n	abaa <__udivsi3+0x9e>
    ab20:	0b03      	lsrs	r3, r0, #12
    ab22:	428b      	cmp	r3, r1
    ab24:	d328      	bcc.n	ab78 <__udivsi3+0x6c>
    ab26:	0c03      	lsrs	r3, r0, #16
    ab28:	428b      	cmp	r3, r1
    ab2a:	d30d      	bcc.n	ab48 <__udivsi3+0x3c>
    ab2c:	22ff      	movs	r2, #255	; 0xff
    ab2e:	0209      	lsls	r1, r1, #8
    ab30:	ba12      	rev	r2, r2
    ab32:	0c03      	lsrs	r3, r0, #16
    ab34:	428b      	cmp	r3, r1
    ab36:	d302      	bcc.n	ab3e <__udivsi3+0x32>
    ab38:	1212      	asrs	r2, r2, #8
    ab3a:	0209      	lsls	r1, r1, #8
    ab3c:	d065      	beq.n	ac0a <__udivsi3+0xfe>
    ab3e:	0b03      	lsrs	r3, r0, #12
    ab40:	428b      	cmp	r3, r1
    ab42:	d319      	bcc.n	ab78 <__udivsi3+0x6c>
    ab44:	e000      	b.n	ab48 <__udivsi3+0x3c>
    ab46:	0a09      	lsrs	r1, r1, #8
    ab48:	0bc3      	lsrs	r3, r0, #15
    ab4a:	428b      	cmp	r3, r1
    ab4c:	d301      	bcc.n	ab52 <__udivsi3+0x46>
    ab4e:	03cb      	lsls	r3, r1, #15
    ab50:	1ac0      	subs	r0, r0, r3
    ab52:	4152      	adcs	r2, r2
    ab54:	0b83      	lsrs	r3, r0, #14
    ab56:	428b      	cmp	r3, r1
    ab58:	d301      	bcc.n	ab5e <__udivsi3+0x52>
    ab5a:	038b      	lsls	r3, r1, #14
    ab5c:	1ac0      	subs	r0, r0, r3
    ab5e:	4152      	adcs	r2, r2
    ab60:	0b43      	lsrs	r3, r0, #13
    ab62:	428b      	cmp	r3, r1
    ab64:	d301      	bcc.n	ab6a <__udivsi3+0x5e>
    ab66:	034b      	lsls	r3, r1, #13
    ab68:	1ac0      	subs	r0, r0, r3
    ab6a:	4152      	adcs	r2, r2
    ab6c:	0b03      	lsrs	r3, r0, #12
    ab6e:	428b      	cmp	r3, r1
    ab70:	d301      	bcc.n	ab76 <__udivsi3+0x6a>
    ab72:	030b      	lsls	r3, r1, #12
    ab74:	1ac0      	subs	r0, r0, r3
    ab76:	4152      	adcs	r2, r2
    ab78:	0ac3      	lsrs	r3, r0, #11
    ab7a:	428b      	cmp	r3, r1
    ab7c:	d301      	bcc.n	ab82 <__udivsi3+0x76>
    ab7e:	02cb      	lsls	r3, r1, #11
    ab80:	1ac0      	subs	r0, r0, r3
    ab82:	4152      	adcs	r2, r2
    ab84:	0a83      	lsrs	r3, r0, #10
    ab86:	428b      	cmp	r3, r1
    ab88:	d301      	bcc.n	ab8e <__udivsi3+0x82>
    ab8a:	028b      	lsls	r3, r1, #10
    ab8c:	1ac0      	subs	r0, r0, r3
    ab8e:	4152      	adcs	r2, r2
    ab90:	0a43      	lsrs	r3, r0, #9
    ab92:	428b      	cmp	r3, r1
    ab94:	d301      	bcc.n	ab9a <__udivsi3+0x8e>
    ab96:	024b      	lsls	r3, r1, #9
    ab98:	1ac0      	subs	r0, r0, r3
    ab9a:	4152      	adcs	r2, r2
    ab9c:	0a03      	lsrs	r3, r0, #8
    ab9e:	428b      	cmp	r3, r1
    aba0:	d301      	bcc.n	aba6 <__udivsi3+0x9a>
    aba2:	020b      	lsls	r3, r1, #8
    aba4:	1ac0      	subs	r0, r0, r3
    aba6:	4152      	adcs	r2, r2
    aba8:	d2cd      	bcs.n	ab46 <__udivsi3+0x3a>
    abaa:	09c3      	lsrs	r3, r0, #7
    abac:	428b      	cmp	r3, r1
    abae:	d301      	bcc.n	abb4 <__udivsi3+0xa8>
    abb0:	01cb      	lsls	r3, r1, #7
    abb2:	1ac0      	subs	r0, r0, r3
    abb4:	4152      	adcs	r2, r2
    abb6:	0983      	lsrs	r3, r0, #6
    abb8:	428b      	cmp	r3, r1
    abba:	d301      	bcc.n	abc0 <__udivsi3+0xb4>
    abbc:	018b      	lsls	r3, r1, #6
    abbe:	1ac0      	subs	r0, r0, r3
    abc0:	4152      	adcs	r2, r2
    abc2:	0943      	lsrs	r3, r0, #5
    abc4:	428b      	cmp	r3, r1
    abc6:	d301      	bcc.n	abcc <__udivsi3+0xc0>
    abc8:	014b      	lsls	r3, r1, #5
    abca:	1ac0      	subs	r0, r0, r3
    abcc:	4152      	adcs	r2, r2
    abce:	0903      	lsrs	r3, r0, #4
    abd0:	428b      	cmp	r3, r1
    abd2:	d301      	bcc.n	abd8 <__udivsi3+0xcc>
    abd4:	010b      	lsls	r3, r1, #4
    abd6:	1ac0      	subs	r0, r0, r3
    abd8:	4152      	adcs	r2, r2
    abda:	08c3      	lsrs	r3, r0, #3
    abdc:	428b      	cmp	r3, r1
    abde:	d301      	bcc.n	abe4 <__udivsi3+0xd8>
    abe0:	00cb      	lsls	r3, r1, #3
    abe2:	1ac0      	subs	r0, r0, r3
    abe4:	4152      	adcs	r2, r2
    abe6:	0883      	lsrs	r3, r0, #2
    abe8:	428b      	cmp	r3, r1
    abea:	d301      	bcc.n	abf0 <__udivsi3+0xe4>
    abec:	008b      	lsls	r3, r1, #2
    abee:	1ac0      	subs	r0, r0, r3
    abf0:	4152      	adcs	r2, r2
    abf2:	0843      	lsrs	r3, r0, #1
    abf4:	428b      	cmp	r3, r1
    abf6:	d301      	bcc.n	abfc <__udivsi3+0xf0>
    abf8:	004b      	lsls	r3, r1, #1
    abfa:	1ac0      	subs	r0, r0, r3
    abfc:	4152      	adcs	r2, r2
    abfe:	1a41      	subs	r1, r0, r1
    ac00:	d200      	bcs.n	ac04 <__udivsi3+0xf8>
    ac02:	4601      	mov	r1, r0
    ac04:	4152      	adcs	r2, r2
    ac06:	4610      	mov	r0, r2
    ac08:	4770      	bx	lr
    ac0a:	e7ff      	b.n	ac0c <__udivsi3+0x100>
    ac0c:	b501      	push	{r0, lr}
    ac0e:	2000      	movs	r0, #0
    ac10:	f000 f8f0 	bl	adf4 <__aeabi_idiv0>
    ac14:	bd02      	pop	{r1, pc}
    ac16:	46c0      	nop			; (mov r8, r8)

0000ac18 <__aeabi_uidivmod>:
    ac18:	2900      	cmp	r1, #0
    ac1a:	d0f7      	beq.n	ac0c <__udivsi3+0x100>
    ac1c:	e776      	b.n	ab0c <__udivsi3>
    ac1e:	4770      	bx	lr

0000ac20 <__divsi3>:
    ac20:	4603      	mov	r3, r0
    ac22:	430b      	orrs	r3, r1
    ac24:	d47f      	bmi.n	ad26 <__divsi3+0x106>
    ac26:	2200      	movs	r2, #0
    ac28:	0843      	lsrs	r3, r0, #1
    ac2a:	428b      	cmp	r3, r1
    ac2c:	d374      	bcc.n	ad18 <__divsi3+0xf8>
    ac2e:	0903      	lsrs	r3, r0, #4
    ac30:	428b      	cmp	r3, r1
    ac32:	d35f      	bcc.n	acf4 <__divsi3+0xd4>
    ac34:	0a03      	lsrs	r3, r0, #8
    ac36:	428b      	cmp	r3, r1
    ac38:	d344      	bcc.n	acc4 <__divsi3+0xa4>
    ac3a:	0b03      	lsrs	r3, r0, #12
    ac3c:	428b      	cmp	r3, r1
    ac3e:	d328      	bcc.n	ac92 <__divsi3+0x72>
    ac40:	0c03      	lsrs	r3, r0, #16
    ac42:	428b      	cmp	r3, r1
    ac44:	d30d      	bcc.n	ac62 <__divsi3+0x42>
    ac46:	22ff      	movs	r2, #255	; 0xff
    ac48:	0209      	lsls	r1, r1, #8
    ac4a:	ba12      	rev	r2, r2
    ac4c:	0c03      	lsrs	r3, r0, #16
    ac4e:	428b      	cmp	r3, r1
    ac50:	d302      	bcc.n	ac58 <__divsi3+0x38>
    ac52:	1212      	asrs	r2, r2, #8
    ac54:	0209      	lsls	r1, r1, #8
    ac56:	d065      	beq.n	ad24 <__divsi3+0x104>
    ac58:	0b03      	lsrs	r3, r0, #12
    ac5a:	428b      	cmp	r3, r1
    ac5c:	d319      	bcc.n	ac92 <__divsi3+0x72>
    ac5e:	e000      	b.n	ac62 <__divsi3+0x42>
    ac60:	0a09      	lsrs	r1, r1, #8
    ac62:	0bc3      	lsrs	r3, r0, #15
    ac64:	428b      	cmp	r3, r1
    ac66:	d301      	bcc.n	ac6c <__divsi3+0x4c>
    ac68:	03cb      	lsls	r3, r1, #15
    ac6a:	1ac0      	subs	r0, r0, r3
    ac6c:	4152      	adcs	r2, r2
    ac6e:	0b83      	lsrs	r3, r0, #14
    ac70:	428b      	cmp	r3, r1
    ac72:	d301      	bcc.n	ac78 <__divsi3+0x58>
    ac74:	038b      	lsls	r3, r1, #14
    ac76:	1ac0      	subs	r0, r0, r3
    ac78:	4152      	adcs	r2, r2
    ac7a:	0b43      	lsrs	r3, r0, #13
    ac7c:	428b      	cmp	r3, r1
    ac7e:	d301      	bcc.n	ac84 <__divsi3+0x64>
    ac80:	034b      	lsls	r3, r1, #13
    ac82:	1ac0      	subs	r0, r0, r3
    ac84:	4152      	adcs	r2, r2
    ac86:	0b03      	lsrs	r3, r0, #12
    ac88:	428b      	cmp	r3, r1
    ac8a:	d301      	bcc.n	ac90 <__divsi3+0x70>
    ac8c:	030b      	lsls	r3, r1, #12
    ac8e:	1ac0      	subs	r0, r0, r3
    ac90:	4152      	adcs	r2, r2
    ac92:	0ac3      	lsrs	r3, r0, #11
    ac94:	428b      	cmp	r3, r1
    ac96:	d301      	bcc.n	ac9c <__divsi3+0x7c>
    ac98:	02cb      	lsls	r3, r1, #11
    ac9a:	1ac0      	subs	r0, r0, r3
    ac9c:	4152      	adcs	r2, r2
    ac9e:	0a83      	lsrs	r3, r0, #10
    aca0:	428b      	cmp	r3, r1
    aca2:	d301      	bcc.n	aca8 <__divsi3+0x88>
    aca4:	028b      	lsls	r3, r1, #10
    aca6:	1ac0      	subs	r0, r0, r3
    aca8:	4152      	adcs	r2, r2
    acaa:	0a43      	lsrs	r3, r0, #9
    acac:	428b      	cmp	r3, r1
    acae:	d301      	bcc.n	acb4 <__divsi3+0x94>
    acb0:	024b      	lsls	r3, r1, #9
    acb2:	1ac0      	subs	r0, r0, r3
    acb4:	4152      	adcs	r2, r2
    acb6:	0a03      	lsrs	r3, r0, #8
    acb8:	428b      	cmp	r3, r1
    acba:	d301      	bcc.n	acc0 <__divsi3+0xa0>
    acbc:	020b      	lsls	r3, r1, #8
    acbe:	1ac0      	subs	r0, r0, r3
    acc0:	4152      	adcs	r2, r2
    acc2:	d2cd      	bcs.n	ac60 <__divsi3+0x40>
    acc4:	09c3      	lsrs	r3, r0, #7
    acc6:	428b      	cmp	r3, r1
    acc8:	d301      	bcc.n	acce <__divsi3+0xae>
    acca:	01cb      	lsls	r3, r1, #7
    accc:	1ac0      	subs	r0, r0, r3
    acce:	4152      	adcs	r2, r2
    acd0:	0983      	lsrs	r3, r0, #6
    acd2:	428b      	cmp	r3, r1
    acd4:	d301      	bcc.n	acda <__divsi3+0xba>
    acd6:	018b      	lsls	r3, r1, #6
    acd8:	1ac0      	subs	r0, r0, r3
    acda:	4152      	adcs	r2, r2
    acdc:	0943      	lsrs	r3, r0, #5
    acde:	428b      	cmp	r3, r1
    ace0:	d301      	bcc.n	ace6 <__divsi3+0xc6>
    ace2:	014b      	lsls	r3, r1, #5
    ace4:	1ac0      	subs	r0, r0, r3
    ace6:	4152      	adcs	r2, r2
    ace8:	0903      	lsrs	r3, r0, #4
    acea:	428b      	cmp	r3, r1
    acec:	d301      	bcc.n	acf2 <__divsi3+0xd2>
    acee:	010b      	lsls	r3, r1, #4
    acf0:	1ac0      	subs	r0, r0, r3
    acf2:	4152      	adcs	r2, r2
    acf4:	08c3      	lsrs	r3, r0, #3
    acf6:	428b      	cmp	r3, r1
    acf8:	d301      	bcc.n	acfe <__divsi3+0xde>
    acfa:	00cb      	lsls	r3, r1, #3
    acfc:	1ac0      	subs	r0, r0, r3
    acfe:	4152      	adcs	r2, r2
    ad00:	0883      	lsrs	r3, r0, #2
    ad02:	428b      	cmp	r3, r1
    ad04:	d301      	bcc.n	ad0a <__divsi3+0xea>
    ad06:	008b      	lsls	r3, r1, #2
    ad08:	1ac0      	subs	r0, r0, r3
    ad0a:	4152      	adcs	r2, r2
    ad0c:	0843      	lsrs	r3, r0, #1
    ad0e:	428b      	cmp	r3, r1
    ad10:	d301      	bcc.n	ad16 <__divsi3+0xf6>
    ad12:	004b      	lsls	r3, r1, #1
    ad14:	1ac0      	subs	r0, r0, r3
    ad16:	4152      	adcs	r2, r2
    ad18:	1a41      	subs	r1, r0, r1
    ad1a:	d200      	bcs.n	ad1e <__divsi3+0xfe>
    ad1c:	4601      	mov	r1, r0
    ad1e:	4152      	adcs	r2, r2
    ad20:	4610      	mov	r0, r2
    ad22:	4770      	bx	lr
    ad24:	e05d      	b.n	ade2 <__divsi3+0x1c2>
    ad26:	0fca      	lsrs	r2, r1, #31
    ad28:	d000      	beq.n	ad2c <__divsi3+0x10c>
    ad2a:	4249      	negs	r1, r1
    ad2c:	1003      	asrs	r3, r0, #32
    ad2e:	d300      	bcc.n	ad32 <__divsi3+0x112>
    ad30:	4240      	negs	r0, r0
    ad32:	4053      	eors	r3, r2
    ad34:	2200      	movs	r2, #0
    ad36:	469c      	mov	ip, r3
    ad38:	0903      	lsrs	r3, r0, #4
    ad3a:	428b      	cmp	r3, r1
    ad3c:	d32d      	bcc.n	ad9a <__divsi3+0x17a>
    ad3e:	0a03      	lsrs	r3, r0, #8
    ad40:	428b      	cmp	r3, r1
    ad42:	d312      	bcc.n	ad6a <__divsi3+0x14a>
    ad44:	22fc      	movs	r2, #252	; 0xfc
    ad46:	0189      	lsls	r1, r1, #6
    ad48:	ba12      	rev	r2, r2
    ad4a:	0a03      	lsrs	r3, r0, #8
    ad4c:	428b      	cmp	r3, r1
    ad4e:	d30c      	bcc.n	ad6a <__divsi3+0x14a>
    ad50:	0189      	lsls	r1, r1, #6
    ad52:	1192      	asrs	r2, r2, #6
    ad54:	428b      	cmp	r3, r1
    ad56:	d308      	bcc.n	ad6a <__divsi3+0x14a>
    ad58:	0189      	lsls	r1, r1, #6
    ad5a:	1192      	asrs	r2, r2, #6
    ad5c:	428b      	cmp	r3, r1
    ad5e:	d304      	bcc.n	ad6a <__divsi3+0x14a>
    ad60:	0189      	lsls	r1, r1, #6
    ad62:	d03a      	beq.n	adda <__divsi3+0x1ba>
    ad64:	1192      	asrs	r2, r2, #6
    ad66:	e000      	b.n	ad6a <__divsi3+0x14a>
    ad68:	0989      	lsrs	r1, r1, #6
    ad6a:	09c3      	lsrs	r3, r0, #7
    ad6c:	428b      	cmp	r3, r1
    ad6e:	d301      	bcc.n	ad74 <__divsi3+0x154>
    ad70:	01cb      	lsls	r3, r1, #7
    ad72:	1ac0      	subs	r0, r0, r3
    ad74:	4152      	adcs	r2, r2
    ad76:	0983      	lsrs	r3, r0, #6
    ad78:	428b      	cmp	r3, r1
    ad7a:	d301      	bcc.n	ad80 <__divsi3+0x160>
    ad7c:	018b      	lsls	r3, r1, #6
    ad7e:	1ac0      	subs	r0, r0, r3
    ad80:	4152      	adcs	r2, r2
    ad82:	0943      	lsrs	r3, r0, #5
    ad84:	428b      	cmp	r3, r1
    ad86:	d301      	bcc.n	ad8c <__divsi3+0x16c>
    ad88:	014b      	lsls	r3, r1, #5
    ad8a:	1ac0      	subs	r0, r0, r3
    ad8c:	4152      	adcs	r2, r2
    ad8e:	0903      	lsrs	r3, r0, #4
    ad90:	428b      	cmp	r3, r1
    ad92:	d301      	bcc.n	ad98 <__divsi3+0x178>
    ad94:	010b      	lsls	r3, r1, #4
    ad96:	1ac0      	subs	r0, r0, r3
    ad98:	4152      	adcs	r2, r2
    ad9a:	08c3      	lsrs	r3, r0, #3
    ad9c:	428b      	cmp	r3, r1
    ad9e:	d301      	bcc.n	ada4 <__divsi3+0x184>
    ada0:	00cb      	lsls	r3, r1, #3
    ada2:	1ac0      	subs	r0, r0, r3
    ada4:	4152      	adcs	r2, r2
    ada6:	0883      	lsrs	r3, r0, #2
    ada8:	428b      	cmp	r3, r1
    adaa:	d301      	bcc.n	adb0 <__divsi3+0x190>
    adac:	008b      	lsls	r3, r1, #2
    adae:	1ac0      	subs	r0, r0, r3
    adb0:	4152      	adcs	r2, r2
    adb2:	d2d9      	bcs.n	ad68 <__divsi3+0x148>
    adb4:	0843      	lsrs	r3, r0, #1
    adb6:	428b      	cmp	r3, r1
    adb8:	d301      	bcc.n	adbe <__divsi3+0x19e>
    adba:	004b      	lsls	r3, r1, #1
    adbc:	1ac0      	subs	r0, r0, r3
    adbe:	4152      	adcs	r2, r2
    adc0:	1a41      	subs	r1, r0, r1
    adc2:	d200      	bcs.n	adc6 <__divsi3+0x1a6>
    adc4:	4601      	mov	r1, r0
    adc6:	4663      	mov	r3, ip
    adc8:	4152      	adcs	r2, r2
    adca:	105b      	asrs	r3, r3, #1
    adcc:	4610      	mov	r0, r2
    adce:	d301      	bcc.n	add4 <__divsi3+0x1b4>
    add0:	4240      	negs	r0, r0
    add2:	2b00      	cmp	r3, #0
    add4:	d500      	bpl.n	add8 <__divsi3+0x1b8>
    add6:	4249      	negs	r1, r1
    add8:	4770      	bx	lr
    adda:	4663      	mov	r3, ip
    addc:	105b      	asrs	r3, r3, #1
    adde:	d300      	bcc.n	ade2 <__divsi3+0x1c2>
    ade0:	4240      	negs	r0, r0
    ade2:	b501      	push	{r0, lr}
    ade4:	2000      	movs	r0, #0
    ade6:	f000 f805 	bl	adf4 <__aeabi_idiv0>
    adea:	bd02      	pop	{r1, pc}

0000adec <__aeabi_idivmod>:
    adec:	2900      	cmp	r1, #0
    adee:	d0f8      	beq.n	ade2 <__divsi3+0x1c2>
    adf0:	e716      	b.n	ac20 <__divsi3>
    adf2:	4770      	bx	lr

0000adf4 <__aeabi_idiv0>:
    adf4:	4770      	bx	lr
    adf6:	46c0      	nop			; (mov r8, r8)

0000adf8 <__aeabi_cdrcmple>:
    adf8:	4684      	mov	ip, r0
    adfa:	1c10      	adds	r0, r2, #0
    adfc:	4662      	mov	r2, ip
    adfe:	468c      	mov	ip, r1
    ae00:	1c19      	adds	r1, r3, #0
    ae02:	4663      	mov	r3, ip
    ae04:	e000      	b.n	ae08 <__aeabi_cdcmpeq>
    ae06:	46c0      	nop			; (mov r8, r8)

0000ae08 <__aeabi_cdcmpeq>:
    ae08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ae0a:	f001 fe85 	bl	cb18 <__ledf2>
    ae0e:	2800      	cmp	r0, #0
    ae10:	d401      	bmi.n	ae16 <__aeabi_cdcmpeq+0xe>
    ae12:	2100      	movs	r1, #0
    ae14:	42c8      	cmn	r0, r1
    ae16:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000ae18 <__aeabi_dcmpeq>:
    ae18:	b510      	push	{r4, lr}
    ae1a:	f001 fddf 	bl	c9dc <__eqdf2>
    ae1e:	4240      	negs	r0, r0
    ae20:	3001      	adds	r0, #1
    ae22:	bd10      	pop	{r4, pc}

0000ae24 <__aeabi_dcmplt>:
    ae24:	b510      	push	{r4, lr}
    ae26:	f001 fe77 	bl	cb18 <__ledf2>
    ae2a:	2800      	cmp	r0, #0
    ae2c:	db01      	blt.n	ae32 <__aeabi_dcmplt+0xe>
    ae2e:	2000      	movs	r0, #0
    ae30:	bd10      	pop	{r4, pc}
    ae32:	2001      	movs	r0, #1
    ae34:	bd10      	pop	{r4, pc}
    ae36:	46c0      	nop			; (mov r8, r8)

0000ae38 <__aeabi_dcmple>:
    ae38:	b510      	push	{r4, lr}
    ae3a:	f001 fe6d 	bl	cb18 <__ledf2>
    ae3e:	2800      	cmp	r0, #0
    ae40:	dd01      	ble.n	ae46 <__aeabi_dcmple+0xe>
    ae42:	2000      	movs	r0, #0
    ae44:	bd10      	pop	{r4, pc}
    ae46:	2001      	movs	r0, #1
    ae48:	bd10      	pop	{r4, pc}
    ae4a:	46c0      	nop			; (mov r8, r8)

0000ae4c <__aeabi_dcmpgt>:
    ae4c:	b510      	push	{r4, lr}
    ae4e:	f001 fdff 	bl	ca50 <__gedf2>
    ae52:	2800      	cmp	r0, #0
    ae54:	dc01      	bgt.n	ae5a <__aeabi_dcmpgt+0xe>
    ae56:	2000      	movs	r0, #0
    ae58:	bd10      	pop	{r4, pc}
    ae5a:	2001      	movs	r0, #1
    ae5c:	bd10      	pop	{r4, pc}
    ae5e:	46c0      	nop			; (mov r8, r8)

0000ae60 <__aeabi_dcmpge>:
    ae60:	b510      	push	{r4, lr}
    ae62:	f001 fdf5 	bl	ca50 <__gedf2>
    ae66:	2800      	cmp	r0, #0
    ae68:	da01      	bge.n	ae6e <__aeabi_dcmpge+0xe>
    ae6a:	2000      	movs	r0, #0
    ae6c:	bd10      	pop	{r4, pc}
    ae6e:	2001      	movs	r0, #1
    ae70:	bd10      	pop	{r4, pc}
    ae72:	46c0      	nop			; (mov r8, r8)

0000ae74 <__aeabi_cfrcmple>:
    ae74:	4684      	mov	ip, r0
    ae76:	1c08      	adds	r0, r1, #0
    ae78:	4661      	mov	r1, ip
    ae7a:	e7ff      	b.n	ae7c <__aeabi_cfcmpeq>

0000ae7c <__aeabi_cfcmpeq>:
    ae7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ae7e:	f000 fbb5 	bl	b5ec <__lesf2>
    ae82:	2800      	cmp	r0, #0
    ae84:	d401      	bmi.n	ae8a <__aeabi_cfcmpeq+0xe>
    ae86:	2100      	movs	r1, #0
    ae88:	42c8      	cmn	r0, r1
    ae8a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000ae8c <__aeabi_fcmpeq>:
    ae8c:	b510      	push	{r4, lr}
    ae8e:	f000 fb47 	bl	b520 <__eqsf2>
    ae92:	4240      	negs	r0, r0
    ae94:	3001      	adds	r0, #1
    ae96:	bd10      	pop	{r4, pc}

0000ae98 <__aeabi_fcmplt>:
    ae98:	b510      	push	{r4, lr}
    ae9a:	f000 fba7 	bl	b5ec <__lesf2>
    ae9e:	2800      	cmp	r0, #0
    aea0:	db01      	blt.n	aea6 <__aeabi_fcmplt+0xe>
    aea2:	2000      	movs	r0, #0
    aea4:	bd10      	pop	{r4, pc}
    aea6:	2001      	movs	r0, #1
    aea8:	bd10      	pop	{r4, pc}
    aeaa:	46c0      	nop			; (mov r8, r8)

0000aeac <__aeabi_fcmple>:
    aeac:	b510      	push	{r4, lr}
    aeae:	f000 fb9d 	bl	b5ec <__lesf2>
    aeb2:	2800      	cmp	r0, #0
    aeb4:	dd01      	ble.n	aeba <__aeabi_fcmple+0xe>
    aeb6:	2000      	movs	r0, #0
    aeb8:	bd10      	pop	{r4, pc}
    aeba:	2001      	movs	r0, #1
    aebc:	bd10      	pop	{r4, pc}
    aebe:	46c0      	nop			; (mov r8, r8)

0000aec0 <__aeabi_fcmpgt>:
    aec0:	b510      	push	{r4, lr}
    aec2:	f000 fb53 	bl	b56c <__gesf2>
    aec6:	2800      	cmp	r0, #0
    aec8:	dc01      	bgt.n	aece <__aeabi_fcmpgt+0xe>
    aeca:	2000      	movs	r0, #0
    aecc:	bd10      	pop	{r4, pc}
    aece:	2001      	movs	r0, #1
    aed0:	bd10      	pop	{r4, pc}
    aed2:	46c0      	nop			; (mov r8, r8)

0000aed4 <__aeabi_fcmpge>:
    aed4:	b510      	push	{r4, lr}
    aed6:	f000 fb49 	bl	b56c <__gesf2>
    aeda:	2800      	cmp	r0, #0
    aedc:	da01      	bge.n	aee2 <__aeabi_fcmpge+0xe>
    aede:	2000      	movs	r0, #0
    aee0:	bd10      	pop	{r4, pc}
    aee2:	2001      	movs	r0, #1
    aee4:	bd10      	pop	{r4, pc}
    aee6:	46c0      	nop			; (mov r8, r8)

0000aee8 <__aeabi_lmul>:
    aee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    aeea:	46ce      	mov	lr, r9
    aeec:	4647      	mov	r7, r8
    aeee:	0415      	lsls	r5, r2, #16
    aef0:	0c2d      	lsrs	r5, r5, #16
    aef2:	002e      	movs	r6, r5
    aef4:	b580      	push	{r7, lr}
    aef6:	0407      	lsls	r7, r0, #16
    aef8:	0c14      	lsrs	r4, r2, #16
    aefa:	0c3f      	lsrs	r7, r7, #16
    aefc:	4699      	mov	r9, r3
    aefe:	0c03      	lsrs	r3, r0, #16
    af00:	437e      	muls	r6, r7
    af02:	435d      	muls	r5, r3
    af04:	4367      	muls	r7, r4
    af06:	4363      	muls	r3, r4
    af08:	197f      	adds	r7, r7, r5
    af0a:	0c34      	lsrs	r4, r6, #16
    af0c:	19e4      	adds	r4, r4, r7
    af0e:	469c      	mov	ip, r3
    af10:	42a5      	cmp	r5, r4
    af12:	d903      	bls.n	af1c <__aeabi_lmul+0x34>
    af14:	2380      	movs	r3, #128	; 0x80
    af16:	025b      	lsls	r3, r3, #9
    af18:	4698      	mov	r8, r3
    af1a:	44c4      	add	ip, r8
    af1c:	464b      	mov	r3, r9
    af1e:	4351      	muls	r1, r2
    af20:	4343      	muls	r3, r0
    af22:	0436      	lsls	r6, r6, #16
    af24:	0c36      	lsrs	r6, r6, #16
    af26:	0c25      	lsrs	r5, r4, #16
    af28:	0424      	lsls	r4, r4, #16
    af2a:	4465      	add	r5, ip
    af2c:	19a4      	adds	r4, r4, r6
    af2e:	1859      	adds	r1, r3, r1
    af30:	1949      	adds	r1, r1, r5
    af32:	0020      	movs	r0, r4
    af34:	bc0c      	pop	{r2, r3}
    af36:	4690      	mov	r8, r2
    af38:	4699      	mov	r9, r3
    af3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000af3c <__aeabi_f2uiz>:
    af3c:	219e      	movs	r1, #158	; 0x9e
    af3e:	b510      	push	{r4, lr}
    af40:	05c9      	lsls	r1, r1, #23
    af42:	1c04      	adds	r4, r0, #0
    af44:	f7ff ffc6 	bl	aed4 <__aeabi_fcmpge>
    af48:	2800      	cmp	r0, #0
    af4a:	d103      	bne.n	af54 <__aeabi_f2uiz+0x18>
    af4c:	1c20      	adds	r0, r4, #0
    af4e:	f000 fe4b 	bl	bbe8 <__aeabi_f2iz>
    af52:	bd10      	pop	{r4, pc}
    af54:	219e      	movs	r1, #158	; 0x9e
    af56:	1c20      	adds	r0, r4, #0
    af58:	05c9      	lsls	r1, r1, #23
    af5a:	f000 fca9 	bl	b8b0 <__aeabi_fsub>
    af5e:	f000 fe43 	bl	bbe8 <__aeabi_f2iz>
    af62:	2380      	movs	r3, #128	; 0x80
    af64:	061b      	lsls	r3, r3, #24
    af66:	469c      	mov	ip, r3
    af68:	4460      	add	r0, ip
    af6a:	e7f2      	b.n	af52 <__aeabi_f2uiz+0x16>

0000af6c <__aeabi_fadd>:
    af6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    af6e:	46c6      	mov	lr, r8
    af70:	024e      	lsls	r6, r1, #9
    af72:	0247      	lsls	r7, r0, #9
    af74:	0a76      	lsrs	r6, r6, #9
    af76:	0a7b      	lsrs	r3, r7, #9
    af78:	0044      	lsls	r4, r0, #1
    af7a:	0fc5      	lsrs	r5, r0, #31
    af7c:	00f7      	lsls	r7, r6, #3
    af7e:	0048      	lsls	r0, r1, #1
    af80:	4698      	mov	r8, r3
    af82:	b500      	push	{lr}
    af84:	0e24      	lsrs	r4, r4, #24
    af86:	002a      	movs	r2, r5
    af88:	00db      	lsls	r3, r3, #3
    af8a:	0e00      	lsrs	r0, r0, #24
    af8c:	0fc9      	lsrs	r1, r1, #31
    af8e:	46bc      	mov	ip, r7
    af90:	428d      	cmp	r5, r1
    af92:	d067      	beq.n	b064 <__aeabi_fadd+0xf8>
    af94:	1a22      	subs	r2, r4, r0
    af96:	2a00      	cmp	r2, #0
    af98:	dc00      	bgt.n	af9c <__aeabi_fadd+0x30>
    af9a:	e0a5      	b.n	b0e8 <__aeabi_fadd+0x17c>
    af9c:	2800      	cmp	r0, #0
    af9e:	d13a      	bne.n	b016 <__aeabi_fadd+0xaa>
    afa0:	2f00      	cmp	r7, #0
    afa2:	d100      	bne.n	afa6 <__aeabi_fadd+0x3a>
    afa4:	e093      	b.n	b0ce <__aeabi_fadd+0x162>
    afa6:	1e51      	subs	r1, r2, #1
    afa8:	2900      	cmp	r1, #0
    afaa:	d000      	beq.n	afae <__aeabi_fadd+0x42>
    afac:	e0bc      	b.n	b128 <__aeabi_fadd+0x1bc>
    afae:	2401      	movs	r4, #1
    afb0:	1bdb      	subs	r3, r3, r7
    afb2:	015a      	lsls	r2, r3, #5
    afb4:	d546      	bpl.n	b044 <__aeabi_fadd+0xd8>
    afb6:	019b      	lsls	r3, r3, #6
    afb8:	099e      	lsrs	r6, r3, #6
    afba:	0030      	movs	r0, r6
    afbc:	f002 fcc4 	bl	d948 <__clzsi2>
    afc0:	3805      	subs	r0, #5
    afc2:	4086      	lsls	r6, r0
    afc4:	4284      	cmp	r4, r0
    afc6:	dd00      	ble.n	afca <__aeabi_fadd+0x5e>
    afc8:	e09d      	b.n	b106 <__aeabi_fadd+0x19a>
    afca:	1b04      	subs	r4, r0, r4
    afcc:	0032      	movs	r2, r6
    afce:	2020      	movs	r0, #32
    afd0:	3401      	adds	r4, #1
    afd2:	40e2      	lsrs	r2, r4
    afd4:	1b04      	subs	r4, r0, r4
    afd6:	40a6      	lsls	r6, r4
    afd8:	0033      	movs	r3, r6
    afda:	1e5e      	subs	r6, r3, #1
    afdc:	41b3      	sbcs	r3, r6
    afde:	2400      	movs	r4, #0
    afe0:	4313      	orrs	r3, r2
    afe2:	075a      	lsls	r2, r3, #29
    afe4:	d004      	beq.n	aff0 <__aeabi_fadd+0x84>
    afe6:	220f      	movs	r2, #15
    afe8:	401a      	ands	r2, r3
    afea:	2a04      	cmp	r2, #4
    afec:	d000      	beq.n	aff0 <__aeabi_fadd+0x84>
    afee:	3304      	adds	r3, #4
    aff0:	015a      	lsls	r2, r3, #5
    aff2:	d529      	bpl.n	b048 <__aeabi_fadd+0xdc>
    aff4:	3401      	adds	r4, #1
    aff6:	2cff      	cmp	r4, #255	; 0xff
    aff8:	d100      	bne.n	affc <__aeabi_fadd+0x90>
    affa:	e081      	b.n	b100 <__aeabi_fadd+0x194>
    affc:	002a      	movs	r2, r5
    affe:	019b      	lsls	r3, r3, #6
    b000:	0a5b      	lsrs	r3, r3, #9
    b002:	b2e4      	uxtb	r4, r4
    b004:	025b      	lsls	r3, r3, #9
    b006:	05e4      	lsls	r4, r4, #23
    b008:	0a58      	lsrs	r0, r3, #9
    b00a:	07d2      	lsls	r2, r2, #31
    b00c:	4320      	orrs	r0, r4
    b00e:	4310      	orrs	r0, r2
    b010:	bc04      	pop	{r2}
    b012:	4690      	mov	r8, r2
    b014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b016:	2cff      	cmp	r4, #255	; 0xff
    b018:	d0e3      	beq.n	afe2 <__aeabi_fadd+0x76>
    b01a:	2180      	movs	r1, #128	; 0x80
    b01c:	0038      	movs	r0, r7
    b01e:	04c9      	lsls	r1, r1, #19
    b020:	4308      	orrs	r0, r1
    b022:	4684      	mov	ip, r0
    b024:	2a1b      	cmp	r2, #27
    b026:	dd00      	ble.n	b02a <__aeabi_fadd+0xbe>
    b028:	e082      	b.n	b130 <__aeabi_fadd+0x1c4>
    b02a:	2020      	movs	r0, #32
    b02c:	4661      	mov	r1, ip
    b02e:	40d1      	lsrs	r1, r2
    b030:	1a82      	subs	r2, r0, r2
    b032:	4660      	mov	r0, ip
    b034:	4090      	lsls	r0, r2
    b036:	0002      	movs	r2, r0
    b038:	1e50      	subs	r0, r2, #1
    b03a:	4182      	sbcs	r2, r0
    b03c:	430a      	orrs	r2, r1
    b03e:	1a9b      	subs	r3, r3, r2
    b040:	015a      	lsls	r2, r3, #5
    b042:	d4b8      	bmi.n	afb6 <__aeabi_fadd+0x4a>
    b044:	075a      	lsls	r2, r3, #29
    b046:	d1ce      	bne.n	afe6 <__aeabi_fadd+0x7a>
    b048:	08de      	lsrs	r6, r3, #3
    b04a:	002a      	movs	r2, r5
    b04c:	2cff      	cmp	r4, #255	; 0xff
    b04e:	d13a      	bne.n	b0c6 <__aeabi_fadd+0x15a>
    b050:	2e00      	cmp	r6, #0
    b052:	d100      	bne.n	b056 <__aeabi_fadd+0xea>
    b054:	e0ae      	b.n	b1b4 <__aeabi_fadd+0x248>
    b056:	2380      	movs	r3, #128	; 0x80
    b058:	03db      	lsls	r3, r3, #15
    b05a:	4333      	orrs	r3, r6
    b05c:	025b      	lsls	r3, r3, #9
    b05e:	0a5b      	lsrs	r3, r3, #9
    b060:	24ff      	movs	r4, #255	; 0xff
    b062:	e7cf      	b.n	b004 <__aeabi_fadd+0x98>
    b064:	1a21      	subs	r1, r4, r0
    b066:	2900      	cmp	r1, #0
    b068:	dd52      	ble.n	b110 <__aeabi_fadd+0x1a4>
    b06a:	2800      	cmp	r0, #0
    b06c:	d031      	beq.n	b0d2 <__aeabi_fadd+0x166>
    b06e:	2cff      	cmp	r4, #255	; 0xff
    b070:	d0b7      	beq.n	afe2 <__aeabi_fadd+0x76>
    b072:	2080      	movs	r0, #128	; 0x80
    b074:	003e      	movs	r6, r7
    b076:	04c0      	lsls	r0, r0, #19
    b078:	4306      	orrs	r6, r0
    b07a:	46b4      	mov	ip, r6
    b07c:	291b      	cmp	r1, #27
    b07e:	dd00      	ble.n	b082 <__aeabi_fadd+0x116>
    b080:	e0aa      	b.n	b1d8 <__aeabi_fadd+0x26c>
    b082:	2620      	movs	r6, #32
    b084:	4660      	mov	r0, ip
    b086:	40c8      	lsrs	r0, r1
    b088:	1a71      	subs	r1, r6, r1
    b08a:	4666      	mov	r6, ip
    b08c:	408e      	lsls	r6, r1
    b08e:	0031      	movs	r1, r6
    b090:	1e4e      	subs	r6, r1, #1
    b092:	41b1      	sbcs	r1, r6
    b094:	4301      	orrs	r1, r0
    b096:	185b      	adds	r3, r3, r1
    b098:	0159      	lsls	r1, r3, #5
    b09a:	d5d3      	bpl.n	b044 <__aeabi_fadd+0xd8>
    b09c:	3401      	adds	r4, #1
    b09e:	2cff      	cmp	r4, #255	; 0xff
    b0a0:	d100      	bne.n	b0a4 <__aeabi_fadd+0x138>
    b0a2:	e087      	b.n	b1b4 <__aeabi_fadd+0x248>
    b0a4:	2201      	movs	r2, #1
    b0a6:	4978      	ldr	r1, [pc, #480]	; (b288 <__aeabi_fadd+0x31c>)
    b0a8:	401a      	ands	r2, r3
    b0aa:	085b      	lsrs	r3, r3, #1
    b0ac:	400b      	ands	r3, r1
    b0ae:	4313      	orrs	r3, r2
    b0b0:	e797      	b.n	afe2 <__aeabi_fadd+0x76>
    b0b2:	2c00      	cmp	r4, #0
    b0b4:	d000      	beq.n	b0b8 <__aeabi_fadd+0x14c>
    b0b6:	e0a7      	b.n	b208 <__aeabi_fadd+0x29c>
    b0b8:	2b00      	cmp	r3, #0
    b0ba:	d000      	beq.n	b0be <__aeabi_fadd+0x152>
    b0bc:	e0b6      	b.n	b22c <__aeabi_fadd+0x2c0>
    b0be:	1e3b      	subs	r3, r7, #0
    b0c0:	d162      	bne.n	b188 <__aeabi_fadd+0x21c>
    b0c2:	2600      	movs	r6, #0
    b0c4:	2200      	movs	r2, #0
    b0c6:	0273      	lsls	r3, r6, #9
    b0c8:	0a5b      	lsrs	r3, r3, #9
    b0ca:	b2e4      	uxtb	r4, r4
    b0cc:	e79a      	b.n	b004 <__aeabi_fadd+0x98>
    b0ce:	0014      	movs	r4, r2
    b0d0:	e787      	b.n	afe2 <__aeabi_fadd+0x76>
    b0d2:	2f00      	cmp	r7, #0
    b0d4:	d04d      	beq.n	b172 <__aeabi_fadd+0x206>
    b0d6:	1e48      	subs	r0, r1, #1
    b0d8:	2800      	cmp	r0, #0
    b0da:	d157      	bne.n	b18c <__aeabi_fadd+0x220>
    b0dc:	4463      	add	r3, ip
    b0de:	2401      	movs	r4, #1
    b0e0:	015a      	lsls	r2, r3, #5
    b0e2:	d5af      	bpl.n	b044 <__aeabi_fadd+0xd8>
    b0e4:	2402      	movs	r4, #2
    b0e6:	e7dd      	b.n	b0a4 <__aeabi_fadd+0x138>
    b0e8:	2a00      	cmp	r2, #0
    b0ea:	d124      	bne.n	b136 <__aeabi_fadd+0x1ca>
    b0ec:	1c62      	adds	r2, r4, #1
    b0ee:	b2d2      	uxtb	r2, r2
    b0f0:	2a01      	cmp	r2, #1
    b0f2:	ddde      	ble.n	b0b2 <__aeabi_fadd+0x146>
    b0f4:	1bde      	subs	r6, r3, r7
    b0f6:	0172      	lsls	r2, r6, #5
    b0f8:	d535      	bpl.n	b166 <__aeabi_fadd+0x1fa>
    b0fa:	1afe      	subs	r6, r7, r3
    b0fc:	000d      	movs	r5, r1
    b0fe:	e75c      	b.n	afba <__aeabi_fadd+0x4e>
    b100:	002a      	movs	r2, r5
    b102:	2300      	movs	r3, #0
    b104:	e77e      	b.n	b004 <__aeabi_fadd+0x98>
    b106:	0033      	movs	r3, r6
    b108:	4a60      	ldr	r2, [pc, #384]	; (b28c <__aeabi_fadd+0x320>)
    b10a:	1a24      	subs	r4, r4, r0
    b10c:	4013      	ands	r3, r2
    b10e:	e768      	b.n	afe2 <__aeabi_fadd+0x76>
    b110:	2900      	cmp	r1, #0
    b112:	d163      	bne.n	b1dc <__aeabi_fadd+0x270>
    b114:	1c61      	adds	r1, r4, #1
    b116:	b2c8      	uxtb	r0, r1
    b118:	2801      	cmp	r0, #1
    b11a:	dd4e      	ble.n	b1ba <__aeabi_fadd+0x24e>
    b11c:	29ff      	cmp	r1, #255	; 0xff
    b11e:	d049      	beq.n	b1b4 <__aeabi_fadd+0x248>
    b120:	4463      	add	r3, ip
    b122:	085b      	lsrs	r3, r3, #1
    b124:	000c      	movs	r4, r1
    b126:	e75c      	b.n	afe2 <__aeabi_fadd+0x76>
    b128:	2aff      	cmp	r2, #255	; 0xff
    b12a:	d041      	beq.n	b1b0 <__aeabi_fadd+0x244>
    b12c:	000a      	movs	r2, r1
    b12e:	e779      	b.n	b024 <__aeabi_fadd+0xb8>
    b130:	2201      	movs	r2, #1
    b132:	1a9b      	subs	r3, r3, r2
    b134:	e784      	b.n	b040 <__aeabi_fadd+0xd4>
    b136:	2c00      	cmp	r4, #0
    b138:	d01d      	beq.n	b176 <__aeabi_fadd+0x20a>
    b13a:	28ff      	cmp	r0, #255	; 0xff
    b13c:	d022      	beq.n	b184 <__aeabi_fadd+0x218>
    b13e:	2480      	movs	r4, #128	; 0x80
    b140:	04e4      	lsls	r4, r4, #19
    b142:	4252      	negs	r2, r2
    b144:	4323      	orrs	r3, r4
    b146:	2a1b      	cmp	r2, #27
    b148:	dd00      	ble.n	b14c <__aeabi_fadd+0x1e0>
    b14a:	e08a      	b.n	b262 <__aeabi_fadd+0x2f6>
    b14c:	001c      	movs	r4, r3
    b14e:	2520      	movs	r5, #32
    b150:	40d4      	lsrs	r4, r2
    b152:	1aaa      	subs	r2, r5, r2
    b154:	4093      	lsls	r3, r2
    b156:	1e5a      	subs	r2, r3, #1
    b158:	4193      	sbcs	r3, r2
    b15a:	4323      	orrs	r3, r4
    b15c:	4662      	mov	r2, ip
    b15e:	0004      	movs	r4, r0
    b160:	1ad3      	subs	r3, r2, r3
    b162:	000d      	movs	r5, r1
    b164:	e725      	b.n	afb2 <__aeabi_fadd+0x46>
    b166:	2e00      	cmp	r6, #0
    b168:	d000      	beq.n	b16c <__aeabi_fadd+0x200>
    b16a:	e726      	b.n	afba <__aeabi_fadd+0x4e>
    b16c:	2200      	movs	r2, #0
    b16e:	2400      	movs	r4, #0
    b170:	e7a9      	b.n	b0c6 <__aeabi_fadd+0x15a>
    b172:	000c      	movs	r4, r1
    b174:	e735      	b.n	afe2 <__aeabi_fadd+0x76>
    b176:	2b00      	cmp	r3, #0
    b178:	d04d      	beq.n	b216 <__aeabi_fadd+0x2aa>
    b17a:	43d2      	mvns	r2, r2
    b17c:	2a00      	cmp	r2, #0
    b17e:	d0ed      	beq.n	b15c <__aeabi_fadd+0x1f0>
    b180:	28ff      	cmp	r0, #255	; 0xff
    b182:	d1e0      	bne.n	b146 <__aeabi_fadd+0x1da>
    b184:	4663      	mov	r3, ip
    b186:	24ff      	movs	r4, #255	; 0xff
    b188:	000d      	movs	r5, r1
    b18a:	e72a      	b.n	afe2 <__aeabi_fadd+0x76>
    b18c:	29ff      	cmp	r1, #255	; 0xff
    b18e:	d00f      	beq.n	b1b0 <__aeabi_fadd+0x244>
    b190:	0001      	movs	r1, r0
    b192:	e773      	b.n	b07c <__aeabi_fadd+0x110>
    b194:	2b00      	cmp	r3, #0
    b196:	d061      	beq.n	b25c <__aeabi_fadd+0x2f0>
    b198:	24ff      	movs	r4, #255	; 0xff
    b19a:	2f00      	cmp	r7, #0
    b19c:	d100      	bne.n	b1a0 <__aeabi_fadd+0x234>
    b19e:	e720      	b.n	afe2 <__aeabi_fadd+0x76>
    b1a0:	2280      	movs	r2, #128	; 0x80
    b1a2:	4641      	mov	r1, r8
    b1a4:	03d2      	lsls	r2, r2, #15
    b1a6:	4211      	tst	r1, r2
    b1a8:	d002      	beq.n	b1b0 <__aeabi_fadd+0x244>
    b1aa:	4216      	tst	r6, r2
    b1ac:	d100      	bne.n	b1b0 <__aeabi_fadd+0x244>
    b1ae:	003b      	movs	r3, r7
    b1b0:	24ff      	movs	r4, #255	; 0xff
    b1b2:	e716      	b.n	afe2 <__aeabi_fadd+0x76>
    b1b4:	24ff      	movs	r4, #255	; 0xff
    b1b6:	2300      	movs	r3, #0
    b1b8:	e724      	b.n	b004 <__aeabi_fadd+0x98>
    b1ba:	2c00      	cmp	r4, #0
    b1bc:	d1ea      	bne.n	b194 <__aeabi_fadd+0x228>
    b1be:	2b00      	cmp	r3, #0
    b1c0:	d058      	beq.n	b274 <__aeabi_fadd+0x308>
    b1c2:	2f00      	cmp	r7, #0
    b1c4:	d100      	bne.n	b1c8 <__aeabi_fadd+0x25c>
    b1c6:	e70c      	b.n	afe2 <__aeabi_fadd+0x76>
    b1c8:	4463      	add	r3, ip
    b1ca:	015a      	lsls	r2, r3, #5
    b1cc:	d400      	bmi.n	b1d0 <__aeabi_fadd+0x264>
    b1ce:	e739      	b.n	b044 <__aeabi_fadd+0xd8>
    b1d0:	4a2e      	ldr	r2, [pc, #184]	; (b28c <__aeabi_fadd+0x320>)
    b1d2:	000c      	movs	r4, r1
    b1d4:	4013      	ands	r3, r2
    b1d6:	e704      	b.n	afe2 <__aeabi_fadd+0x76>
    b1d8:	2101      	movs	r1, #1
    b1da:	e75c      	b.n	b096 <__aeabi_fadd+0x12a>
    b1dc:	2c00      	cmp	r4, #0
    b1de:	d11e      	bne.n	b21e <__aeabi_fadd+0x2b2>
    b1e0:	2b00      	cmp	r3, #0
    b1e2:	d040      	beq.n	b266 <__aeabi_fadd+0x2fa>
    b1e4:	43c9      	mvns	r1, r1
    b1e6:	2900      	cmp	r1, #0
    b1e8:	d00b      	beq.n	b202 <__aeabi_fadd+0x296>
    b1ea:	28ff      	cmp	r0, #255	; 0xff
    b1ec:	d036      	beq.n	b25c <__aeabi_fadd+0x2f0>
    b1ee:	291b      	cmp	r1, #27
    b1f0:	dc47      	bgt.n	b282 <__aeabi_fadd+0x316>
    b1f2:	001c      	movs	r4, r3
    b1f4:	2620      	movs	r6, #32
    b1f6:	40cc      	lsrs	r4, r1
    b1f8:	1a71      	subs	r1, r6, r1
    b1fa:	408b      	lsls	r3, r1
    b1fc:	1e59      	subs	r1, r3, #1
    b1fe:	418b      	sbcs	r3, r1
    b200:	4323      	orrs	r3, r4
    b202:	4463      	add	r3, ip
    b204:	0004      	movs	r4, r0
    b206:	e747      	b.n	b098 <__aeabi_fadd+0x12c>
    b208:	2b00      	cmp	r3, #0
    b20a:	d118      	bne.n	b23e <__aeabi_fadd+0x2d2>
    b20c:	1e3b      	subs	r3, r7, #0
    b20e:	d02d      	beq.n	b26c <__aeabi_fadd+0x300>
    b210:	000d      	movs	r5, r1
    b212:	24ff      	movs	r4, #255	; 0xff
    b214:	e6e5      	b.n	afe2 <__aeabi_fadd+0x76>
    b216:	003b      	movs	r3, r7
    b218:	0004      	movs	r4, r0
    b21a:	000d      	movs	r5, r1
    b21c:	e6e1      	b.n	afe2 <__aeabi_fadd+0x76>
    b21e:	28ff      	cmp	r0, #255	; 0xff
    b220:	d01c      	beq.n	b25c <__aeabi_fadd+0x2f0>
    b222:	2480      	movs	r4, #128	; 0x80
    b224:	04e4      	lsls	r4, r4, #19
    b226:	4249      	negs	r1, r1
    b228:	4323      	orrs	r3, r4
    b22a:	e7e0      	b.n	b1ee <__aeabi_fadd+0x282>
    b22c:	2f00      	cmp	r7, #0
    b22e:	d100      	bne.n	b232 <__aeabi_fadd+0x2c6>
    b230:	e6d7      	b.n	afe2 <__aeabi_fadd+0x76>
    b232:	1bde      	subs	r6, r3, r7
    b234:	0172      	lsls	r2, r6, #5
    b236:	d51f      	bpl.n	b278 <__aeabi_fadd+0x30c>
    b238:	1afb      	subs	r3, r7, r3
    b23a:	000d      	movs	r5, r1
    b23c:	e6d1      	b.n	afe2 <__aeabi_fadd+0x76>
    b23e:	24ff      	movs	r4, #255	; 0xff
    b240:	2f00      	cmp	r7, #0
    b242:	d100      	bne.n	b246 <__aeabi_fadd+0x2da>
    b244:	e6cd      	b.n	afe2 <__aeabi_fadd+0x76>
    b246:	2280      	movs	r2, #128	; 0x80
    b248:	4640      	mov	r0, r8
    b24a:	03d2      	lsls	r2, r2, #15
    b24c:	4210      	tst	r0, r2
    b24e:	d0af      	beq.n	b1b0 <__aeabi_fadd+0x244>
    b250:	4216      	tst	r6, r2
    b252:	d1ad      	bne.n	b1b0 <__aeabi_fadd+0x244>
    b254:	003b      	movs	r3, r7
    b256:	000d      	movs	r5, r1
    b258:	24ff      	movs	r4, #255	; 0xff
    b25a:	e6c2      	b.n	afe2 <__aeabi_fadd+0x76>
    b25c:	4663      	mov	r3, ip
    b25e:	24ff      	movs	r4, #255	; 0xff
    b260:	e6bf      	b.n	afe2 <__aeabi_fadd+0x76>
    b262:	2301      	movs	r3, #1
    b264:	e77a      	b.n	b15c <__aeabi_fadd+0x1f0>
    b266:	003b      	movs	r3, r7
    b268:	0004      	movs	r4, r0
    b26a:	e6ba      	b.n	afe2 <__aeabi_fadd+0x76>
    b26c:	2680      	movs	r6, #128	; 0x80
    b26e:	2200      	movs	r2, #0
    b270:	03f6      	lsls	r6, r6, #15
    b272:	e6f0      	b.n	b056 <__aeabi_fadd+0xea>
    b274:	003b      	movs	r3, r7
    b276:	e6b4      	b.n	afe2 <__aeabi_fadd+0x76>
    b278:	1e33      	subs	r3, r6, #0
    b27a:	d000      	beq.n	b27e <__aeabi_fadd+0x312>
    b27c:	e6e2      	b.n	b044 <__aeabi_fadd+0xd8>
    b27e:	2200      	movs	r2, #0
    b280:	e721      	b.n	b0c6 <__aeabi_fadd+0x15a>
    b282:	2301      	movs	r3, #1
    b284:	e7bd      	b.n	b202 <__aeabi_fadd+0x296>
    b286:	46c0      	nop			; (mov r8, r8)
    b288:	7dffffff 	.word	0x7dffffff
    b28c:	fbffffff 	.word	0xfbffffff

0000b290 <__aeabi_fdiv>:
    b290:	b5f0      	push	{r4, r5, r6, r7, lr}
    b292:	4657      	mov	r7, sl
    b294:	464e      	mov	r6, r9
    b296:	46de      	mov	lr, fp
    b298:	4645      	mov	r5, r8
    b29a:	b5e0      	push	{r5, r6, r7, lr}
    b29c:	0244      	lsls	r4, r0, #9
    b29e:	0043      	lsls	r3, r0, #1
    b2a0:	0fc6      	lsrs	r6, r0, #31
    b2a2:	b083      	sub	sp, #12
    b2a4:	1c0f      	adds	r7, r1, #0
    b2a6:	0a64      	lsrs	r4, r4, #9
    b2a8:	0e1b      	lsrs	r3, r3, #24
    b2aa:	46b2      	mov	sl, r6
    b2ac:	d053      	beq.n	b356 <__aeabi_fdiv+0xc6>
    b2ae:	2bff      	cmp	r3, #255	; 0xff
    b2b0:	d027      	beq.n	b302 <__aeabi_fdiv+0x72>
    b2b2:	2280      	movs	r2, #128	; 0x80
    b2b4:	00e4      	lsls	r4, r4, #3
    b2b6:	04d2      	lsls	r2, r2, #19
    b2b8:	4314      	orrs	r4, r2
    b2ba:	227f      	movs	r2, #127	; 0x7f
    b2bc:	4252      	negs	r2, r2
    b2be:	4690      	mov	r8, r2
    b2c0:	4498      	add	r8, r3
    b2c2:	2300      	movs	r3, #0
    b2c4:	4699      	mov	r9, r3
    b2c6:	469b      	mov	fp, r3
    b2c8:	027d      	lsls	r5, r7, #9
    b2ca:	0078      	lsls	r0, r7, #1
    b2cc:	0ffb      	lsrs	r3, r7, #31
    b2ce:	0a6d      	lsrs	r5, r5, #9
    b2d0:	0e00      	lsrs	r0, r0, #24
    b2d2:	9300      	str	r3, [sp, #0]
    b2d4:	d024      	beq.n	b320 <__aeabi_fdiv+0x90>
    b2d6:	28ff      	cmp	r0, #255	; 0xff
    b2d8:	d046      	beq.n	b368 <__aeabi_fdiv+0xd8>
    b2da:	2380      	movs	r3, #128	; 0x80
    b2dc:	2100      	movs	r1, #0
    b2de:	00ed      	lsls	r5, r5, #3
    b2e0:	04db      	lsls	r3, r3, #19
    b2e2:	431d      	orrs	r5, r3
    b2e4:	387f      	subs	r0, #127	; 0x7f
    b2e6:	4647      	mov	r7, r8
    b2e8:	1a38      	subs	r0, r7, r0
    b2ea:	464f      	mov	r7, r9
    b2ec:	430f      	orrs	r7, r1
    b2ee:	00bf      	lsls	r7, r7, #2
    b2f0:	46b9      	mov	r9, r7
    b2f2:	0033      	movs	r3, r6
    b2f4:	9a00      	ldr	r2, [sp, #0]
    b2f6:	4f87      	ldr	r7, [pc, #540]	; (b514 <__aeabi_fdiv+0x284>)
    b2f8:	4053      	eors	r3, r2
    b2fa:	464a      	mov	r2, r9
    b2fc:	58ba      	ldr	r2, [r7, r2]
    b2fe:	9301      	str	r3, [sp, #4]
    b300:	4697      	mov	pc, r2
    b302:	2c00      	cmp	r4, #0
    b304:	d14e      	bne.n	b3a4 <__aeabi_fdiv+0x114>
    b306:	2308      	movs	r3, #8
    b308:	4699      	mov	r9, r3
    b30a:	33f7      	adds	r3, #247	; 0xf7
    b30c:	4698      	mov	r8, r3
    b30e:	3bfd      	subs	r3, #253	; 0xfd
    b310:	469b      	mov	fp, r3
    b312:	027d      	lsls	r5, r7, #9
    b314:	0078      	lsls	r0, r7, #1
    b316:	0ffb      	lsrs	r3, r7, #31
    b318:	0a6d      	lsrs	r5, r5, #9
    b31a:	0e00      	lsrs	r0, r0, #24
    b31c:	9300      	str	r3, [sp, #0]
    b31e:	d1da      	bne.n	b2d6 <__aeabi_fdiv+0x46>
    b320:	2d00      	cmp	r5, #0
    b322:	d126      	bne.n	b372 <__aeabi_fdiv+0xe2>
    b324:	2000      	movs	r0, #0
    b326:	2101      	movs	r1, #1
    b328:	0033      	movs	r3, r6
    b32a:	9a00      	ldr	r2, [sp, #0]
    b32c:	4f7a      	ldr	r7, [pc, #488]	; (b518 <__aeabi_fdiv+0x288>)
    b32e:	4053      	eors	r3, r2
    b330:	4642      	mov	r2, r8
    b332:	1a10      	subs	r0, r2, r0
    b334:	464a      	mov	r2, r9
    b336:	430a      	orrs	r2, r1
    b338:	0092      	lsls	r2, r2, #2
    b33a:	58ba      	ldr	r2, [r7, r2]
    b33c:	001d      	movs	r5, r3
    b33e:	4697      	mov	pc, r2
    b340:	9b00      	ldr	r3, [sp, #0]
    b342:	002c      	movs	r4, r5
    b344:	469a      	mov	sl, r3
    b346:	468b      	mov	fp, r1
    b348:	465b      	mov	r3, fp
    b34a:	2b02      	cmp	r3, #2
    b34c:	d131      	bne.n	b3b2 <__aeabi_fdiv+0x122>
    b34e:	4653      	mov	r3, sl
    b350:	21ff      	movs	r1, #255	; 0xff
    b352:	2400      	movs	r4, #0
    b354:	e038      	b.n	b3c8 <__aeabi_fdiv+0x138>
    b356:	2c00      	cmp	r4, #0
    b358:	d117      	bne.n	b38a <__aeabi_fdiv+0xfa>
    b35a:	2304      	movs	r3, #4
    b35c:	4699      	mov	r9, r3
    b35e:	2300      	movs	r3, #0
    b360:	4698      	mov	r8, r3
    b362:	3301      	adds	r3, #1
    b364:	469b      	mov	fp, r3
    b366:	e7af      	b.n	b2c8 <__aeabi_fdiv+0x38>
    b368:	20ff      	movs	r0, #255	; 0xff
    b36a:	2d00      	cmp	r5, #0
    b36c:	d10b      	bne.n	b386 <__aeabi_fdiv+0xf6>
    b36e:	2102      	movs	r1, #2
    b370:	e7da      	b.n	b328 <__aeabi_fdiv+0x98>
    b372:	0028      	movs	r0, r5
    b374:	f002 fae8 	bl	d948 <__clzsi2>
    b378:	1f43      	subs	r3, r0, #5
    b37a:	409d      	lsls	r5, r3
    b37c:	2376      	movs	r3, #118	; 0x76
    b37e:	425b      	negs	r3, r3
    b380:	1a18      	subs	r0, r3, r0
    b382:	2100      	movs	r1, #0
    b384:	e7af      	b.n	b2e6 <__aeabi_fdiv+0x56>
    b386:	2103      	movs	r1, #3
    b388:	e7ad      	b.n	b2e6 <__aeabi_fdiv+0x56>
    b38a:	0020      	movs	r0, r4
    b38c:	f002 fadc 	bl	d948 <__clzsi2>
    b390:	1f43      	subs	r3, r0, #5
    b392:	409c      	lsls	r4, r3
    b394:	2376      	movs	r3, #118	; 0x76
    b396:	425b      	negs	r3, r3
    b398:	1a1b      	subs	r3, r3, r0
    b39a:	4698      	mov	r8, r3
    b39c:	2300      	movs	r3, #0
    b39e:	4699      	mov	r9, r3
    b3a0:	469b      	mov	fp, r3
    b3a2:	e791      	b.n	b2c8 <__aeabi_fdiv+0x38>
    b3a4:	230c      	movs	r3, #12
    b3a6:	4699      	mov	r9, r3
    b3a8:	33f3      	adds	r3, #243	; 0xf3
    b3aa:	4698      	mov	r8, r3
    b3ac:	3bfc      	subs	r3, #252	; 0xfc
    b3ae:	469b      	mov	fp, r3
    b3b0:	e78a      	b.n	b2c8 <__aeabi_fdiv+0x38>
    b3b2:	2b03      	cmp	r3, #3
    b3b4:	d100      	bne.n	b3b8 <__aeabi_fdiv+0x128>
    b3b6:	e0a5      	b.n	b504 <__aeabi_fdiv+0x274>
    b3b8:	4655      	mov	r5, sl
    b3ba:	2b01      	cmp	r3, #1
    b3bc:	d000      	beq.n	b3c0 <__aeabi_fdiv+0x130>
    b3be:	e081      	b.n	b4c4 <__aeabi_fdiv+0x234>
    b3c0:	2301      	movs	r3, #1
    b3c2:	2100      	movs	r1, #0
    b3c4:	2400      	movs	r4, #0
    b3c6:	402b      	ands	r3, r5
    b3c8:	0264      	lsls	r4, r4, #9
    b3ca:	05c9      	lsls	r1, r1, #23
    b3cc:	0a60      	lsrs	r0, r4, #9
    b3ce:	07db      	lsls	r3, r3, #31
    b3d0:	4308      	orrs	r0, r1
    b3d2:	4318      	orrs	r0, r3
    b3d4:	b003      	add	sp, #12
    b3d6:	bc3c      	pop	{r2, r3, r4, r5}
    b3d8:	4690      	mov	r8, r2
    b3da:	4699      	mov	r9, r3
    b3dc:	46a2      	mov	sl, r4
    b3de:	46ab      	mov	fp, r5
    b3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b3e2:	2480      	movs	r4, #128	; 0x80
    b3e4:	2300      	movs	r3, #0
    b3e6:	03e4      	lsls	r4, r4, #15
    b3e8:	21ff      	movs	r1, #255	; 0xff
    b3ea:	e7ed      	b.n	b3c8 <__aeabi_fdiv+0x138>
    b3ec:	21ff      	movs	r1, #255	; 0xff
    b3ee:	2400      	movs	r4, #0
    b3f0:	e7ea      	b.n	b3c8 <__aeabi_fdiv+0x138>
    b3f2:	2301      	movs	r3, #1
    b3f4:	1a59      	subs	r1, r3, r1
    b3f6:	291b      	cmp	r1, #27
    b3f8:	dd66      	ble.n	b4c8 <__aeabi_fdiv+0x238>
    b3fa:	9a01      	ldr	r2, [sp, #4]
    b3fc:	4013      	ands	r3, r2
    b3fe:	2100      	movs	r1, #0
    b400:	2400      	movs	r4, #0
    b402:	e7e1      	b.n	b3c8 <__aeabi_fdiv+0x138>
    b404:	2380      	movs	r3, #128	; 0x80
    b406:	03db      	lsls	r3, r3, #15
    b408:	421c      	tst	r4, r3
    b40a:	d038      	beq.n	b47e <__aeabi_fdiv+0x1ee>
    b40c:	421d      	tst	r5, r3
    b40e:	d051      	beq.n	b4b4 <__aeabi_fdiv+0x224>
    b410:	431c      	orrs	r4, r3
    b412:	0264      	lsls	r4, r4, #9
    b414:	0a64      	lsrs	r4, r4, #9
    b416:	0033      	movs	r3, r6
    b418:	21ff      	movs	r1, #255	; 0xff
    b41a:	e7d5      	b.n	b3c8 <__aeabi_fdiv+0x138>
    b41c:	0163      	lsls	r3, r4, #5
    b41e:	016c      	lsls	r4, r5, #5
    b420:	42a3      	cmp	r3, r4
    b422:	d23b      	bcs.n	b49c <__aeabi_fdiv+0x20c>
    b424:	261b      	movs	r6, #27
    b426:	2100      	movs	r1, #0
    b428:	3801      	subs	r0, #1
    b42a:	2501      	movs	r5, #1
    b42c:	001f      	movs	r7, r3
    b42e:	0049      	lsls	r1, r1, #1
    b430:	005b      	lsls	r3, r3, #1
    b432:	2f00      	cmp	r7, #0
    b434:	db01      	blt.n	b43a <__aeabi_fdiv+0x1aa>
    b436:	429c      	cmp	r4, r3
    b438:	d801      	bhi.n	b43e <__aeabi_fdiv+0x1ae>
    b43a:	1b1b      	subs	r3, r3, r4
    b43c:	4329      	orrs	r1, r5
    b43e:	3e01      	subs	r6, #1
    b440:	2e00      	cmp	r6, #0
    b442:	d1f3      	bne.n	b42c <__aeabi_fdiv+0x19c>
    b444:	001c      	movs	r4, r3
    b446:	1e63      	subs	r3, r4, #1
    b448:	419c      	sbcs	r4, r3
    b44a:	430c      	orrs	r4, r1
    b44c:	0001      	movs	r1, r0
    b44e:	317f      	adds	r1, #127	; 0x7f
    b450:	2900      	cmp	r1, #0
    b452:	ddce      	ble.n	b3f2 <__aeabi_fdiv+0x162>
    b454:	0763      	lsls	r3, r4, #29
    b456:	d004      	beq.n	b462 <__aeabi_fdiv+0x1d2>
    b458:	230f      	movs	r3, #15
    b45a:	4023      	ands	r3, r4
    b45c:	2b04      	cmp	r3, #4
    b45e:	d000      	beq.n	b462 <__aeabi_fdiv+0x1d2>
    b460:	3404      	adds	r4, #4
    b462:	0123      	lsls	r3, r4, #4
    b464:	d503      	bpl.n	b46e <__aeabi_fdiv+0x1de>
    b466:	0001      	movs	r1, r0
    b468:	4b2c      	ldr	r3, [pc, #176]	; (b51c <__aeabi_fdiv+0x28c>)
    b46a:	3180      	adds	r1, #128	; 0x80
    b46c:	401c      	ands	r4, r3
    b46e:	29fe      	cmp	r1, #254	; 0xfe
    b470:	dd0d      	ble.n	b48e <__aeabi_fdiv+0x1fe>
    b472:	2301      	movs	r3, #1
    b474:	9a01      	ldr	r2, [sp, #4]
    b476:	21ff      	movs	r1, #255	; 0xff
    b478:	4013      	ands	r3, r2
    b47a:	2400      	movs	r4, #0
    b47c:	e7a4      	b.n	b3c8 <__aeabi_fdiv+0x138>
    b47e:	2380      	movs	r3, #128	; 0x80
    b480:	03db      	lsls	r3, r3, #15
    b482:	431c      	orrs	r4, r3
    b484:	0264      	lsls	r4, r4, #9
    b486:	0a64      	lsrs	r4, r4, #9
    b488:	0033      	movs	r3, r6
    b48a:	21ff      	movs	r1, #255	; 0xff
    b48c:	e79c      	b.n	b3c8 <__aeabi_fdiv+0x138>
    b48e:	2301      	movs	r3, #1
    b490:	9a01      	ldr	r2, [sp, #4]
    b492:	01a4      	lsls	r4, r4, #6
    b494:	0a64      	lsrs	r4, r4, #9
    b496:	b2c9      	uxtb	r1, r1
    b498:	4013      	ands	r3, r2
    b49a:	e795      	b.n	b3c8 <__aeabi_fdiv+0x138>
    b49c:	1b1b      	subs	r3, r3, r4
    b49e:	261a      	movs	r6, #26
    b4a0:	2101      	movs	r1, #1
    b4a2:	e7c2      	b.n	b42a <__aeabi_fdiv+0x19a>
    b4a4:	9b00      	ldr	r3, [sp, #0]
    b4a6:	468b      	mov	fp, r1
    b4a8:	469a      	mov	sl, r3
    b4aa:	2400      	movs	r4, #0
    b4ac:	e74c      	b.n	b348 <__aeabi_fdiv+0xb8>
    b4ae:	0263      	lsls	r3, r4, #9
    b4b0:	d5e5      	bpl.n	b47e <__aeabi_fdiv+0x1ee>
    b4b2:	2500      	movs	r5, #0
    b4b4:	2480      	movs	r4, #128	; 0x80
    b4b6:	03e4      	lsls	r4, r4, #15
    b4b8:	432c      	orrs	r4, r5
    b4ba:	0264      	lsls	r4, r4, #9
    b4bc:	0a64      	lsrs	r4, r4, #9
    b4be:	9b00      	ldr	r3, [sp, #0]
    b4c0:	21ff      	movs	r1, #255	; 0xff
    b4c2:	e781      	b.n	b3c8 <__aeabi_fdiv+0x138>
    b4c4:	9501      	str	r5, [sp, #4]
    b4c6:	e7c1      	b.n	b44c <__aeabi_fdiv+0x1bc>
    b4c8:	0023      	movs	r3, r4
    b4ca:	2020      	movs	r0, #32
    b4cc:	40cb      	lsrs	r3, r1
    b4ce:	1a41      	subs	r1, r0, r1
    b4d0:	408c      	lsls	r4, r1
    b4d2:	1e61      	subs	r1, r4, #1
    b4d4:	418c      	sbcs	r4, r1
    b4d6:	431c      	orrs	r4, r3
    b4d8:	0763      	lsls	r3, r4, #29
    b4da:	d004      	beq.n	b4e6 <__aeabi_fdiv+0x256>
    b4dc:	230f      	movs	r3, #15
    b4de:	4023      	ands	r3, r4
    b4e0:	2b04      	cmp	r3, #4
    b4e2:	d000      	beq.n	b4e6 <__aeabi_fdiv+0x256>
    b4e4:	3404      	adds	r4, #4
    b4e6:	0163      	lsls	r3, r4, #5
    b4e8:	d505      	bpl.n	b4f6 <__aeabi_fdiv+0x266>
    b4ea:	2301      	movs	r3, #1
    b4ec:	9a01      	ldr	r2, [sp, #4]
    b4ee:	2101      	movs	r1, #1
    b4f0:	4013      	ands	r3, r2
    b4f2:	2400      	movs	r4, #0
    b4f4:	e768      	b.n	b3c8 <__aeabi_fdiv+0x138>
    b4f6:	2301      	movs	r3, #1
    b4f8:	9a01      	ldr	r2, [sp, #4]
    b4fa:	01a4      	lsls	r4, r4, #6
    b4fc:	0a64      	lsrs	r4, r4, #9
    b4fe:	4013      	ands	r3, r2
    b500:	2100      	movs	r1, #0
    b502:	e761      	b.n	b3c8 <__aeabi_fdiv+0x138>
    b504:	2380      	movs	r3, #128	; 0x80
    b506:	03db      	lsls	r3, r3, #15
    b508:	431c      	orrs	r4, r3
    b50a:	0264      	lsls	r4, r4, #9
    b50c:	0a64      	lsrs	r4, r4, #9
    b50e:	4653      	mov	r3, sl
    b510:	21ff      	movs	r1, #255	; 0xff
    b512:	e759      	b.n	b3c8 <__aeabi_fdiv+0x138>
    b514:	0000ee60 	.word	0x0000ee60
    b518:	0000eea0 	.word	0x0000eea0
    b51c:	f7ffffff 	.word	0xf7ffffff

0000b520 <__eqsf2>:
    b520:	b570      	push	{r4, r5, r6, lr}
    b522:	0042      	lsls	r2, r0, #1
    b524:	0245      	lsls	r5, r0, #9
    b526:	024e      	lsls	r6, r1, #9
    b528:	004c      	lsls	r4, r1, #1
    b52a:	0fc3      	lsrs	r3, r0, #31
    b52c:	0a6d      	lsrs	r5, r5, #9
    b52e:	0e12      	lsrs	r2, r2, #24
    b530:	0a76      	lsrs	r6, r6, #9
    b532:	0e24      	lsrs	r4, r4, #24
    b534:	0fc9      	lsrs	r1, r1, #31
    b536:	2001      	movs	r0, #1
    b538:	2aff      	cmp	r2, #255	; 0xff
    b53a:	d006      	beq.n	b54a <__eqsf2+0x2a>
    b53c:	2cff      	cmp	r4, #255	; 0xff
    b53e:	d003      	beq.n	b548 <__eqsf2+0x28>
    b540:	42a2      	cmp	r2, r4
    b542:	d101      	bne.n	b548 <__eqsf2+0x28>
    b544:	42b5      	cmp	r5, r6
    b546:	d006      	beq.n	b556 <__eqsf2+0x36>
    b548:	bd70      	pop	{r4, r5, r6, pc}
    b54a:	2d00      	cmp	r5, #0
    b54c:	d1fc      	bne.n	b548 <__eqsf2+0x28>
    b54e:	2cff      	cmp	r4, #255	; 0xff
    b550:	d1fa      	bne.n	b548 <__eqsf2+0x28>
    b552:	2e00      	cmp	r6, #0
    b554:	d1f8      	bne.n	b548 <__eqsf2+0x28>
    b556:	428b      	cmp	r3, r1
    b558:	d006      	beq.n	b568 <__eqsf2+0x48>
    b55a:	2001      	movs	r0, #1
    b55c:	2a00      	cmp	r2, #0
    b55e:	d1f3      	bne.n	b548 <__eqsf2+0x28>
    b560:	0028      	movs	r0, r5
    b562:	1e45      	subs	r5, r0, #1
    b564:	41a8      	sbcs	r0, r5
    b566:	e7ef      	b.n	b548 <__eqsf2+0x28>
    b568:	2000      	movs	r0, #0
    b56a:	e7ed      	b.n	b548 <__eqsf2+0x28>

0000b56c <__gesf2>:
    b56c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b56e:	0042      	lsls	r2, r0, #1
    b570:	0245      	lsls	r5, r0, #9
    b572:	024c      	lsls	r4, r1, #9
    b574:	0fc3      	lsrs	r3, r0, #31
    b576:	0048      	lsls	r0, r1, #1
    b578:	0a6d      	lsrs	r5, r5, #9
    b57a:	0e12      	lsrs	r2, r2, #24
    b57c:	0a64      	lsrs	r4, r4, #9
    b57e:	0e00      	lsrs	r0, r0, #24
    b580:	0fc9      	lsrs	r1, r1, #31
    b582:	2aff      	cmp	r2, #255	; 0xff
    b584:	d01e      	beq.n	b5c4 <__gesf2+0x58>
    b586:	28ff      	cmp	r0, #255	; 0xff
    b588:	d021      	beq.n	b5ce <__gesf2+0x62>
    b58a:	2a00      	cmp	r2, #0
    b58c:	d10a      	bne.n	b5a4 <__gesf2+0x38>
    b58e:	426e      	negs	r6, r5
    b590:	416e      	adcs	r6, r5
    b592:	b2f6      	uxtb	r6, r6
    b594:	2800      	cmp	r0, #0
    b596:	d10f      	bne.n	b5b8 <__gesf2+0x4c>
    b598:	2c00      	cmp	r4, #0
    b59a:	d10d      	bne.n	b5b8 <__gesf2+0x4c>
    b59c:	2000      	movs	r0, #0
    b59e:	2d00      	cmp	r5, #0
    b5a0:	d009      	beq.n	b5b6 <__gesf2+0x4a>
    b5a2:	e005      	b.n	b5b0 <__gesf2+0x44>
    b5a4:	2800      	cmp	r0, #0
    b5a6:	d101      	bne.n	b5ac <__gesf2+0x40>
    b5a8:	2c00      	cmp	r4, #0
    b5aa:	d001      	beq.n	b5b0 <__gesf2+0x44>
    b5ac:	428b      	cmp	r3, r1
    b5ae:	d011      	beq.n	b5d4 <__gesf2+0x68>
    b5b0:	2101      	movs	r1, #1
    b5b2:	4258      	negs	r0, r3
    b5b4:	4308      	orrs	r0, r1
    b5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b5b8:	2e00      	cmp	r6, #0
    b5ba:	d0f7      	beq.n	b5ac <__gesf2+0x40>
    b5bc:	2001      	movs	r0, #1
    b5be:	3901      	subs	r1, #1
    b5c0:	4308      	orrs	r0, r1
    b5c2:	e7f8      	b.n	b5b6 <__gesf2+0x4a>
    b5c4:	2d00      	cmp	r5, #0
    b5c6:	d0de      	beq.n	b586 <__gesf2+0x1a>
    b5c8:	2002      	movs	r0, #2
    b5ca:	4240      	negs	r0, r0
    b5cc:	e7f3      	b.n	b5b6 <__gesf2+0x4a>
    b5ce:	2c00      	cmp	r4, #0
    b5d0:	d0db      	beq.n	b58a <__gesf2+0x1e>
    b5d2:	e7f9      	b.n	b5c8 <__gesf2+0x5c>
    b5d4:	4282      	cmp	r2, r0
    b5d6:	dceb      	bgt.n	b5b0 <__gesf2+0x44>
    b5d8:	db04      	blt.n	b5e4 <__gesf2+0x78>
    b5da:	42a5      	cmp	r5, r4
    b5dc:	d8e8      	bhi.n	b5b0 <__gesf2+0x44>
    b5de:	2000      	movs	r0, #0
    b5e0:	42a5      	cmp	r5, r4
    b5e2:	d2e8      	bcs.n	b5b6 <__gesf2+0x4a>
    b5e4:	2101      	movs	r1, #1
    b5e6:	1e58      	subs	r0, r3, #1
    b5e8:	4308      	orrs	r0, r1
    b5ea:	e7e4      	b.n	b5b6 <__gesf2+0x4a>

0000b5ec <__lesf2>:
    b5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5ee:	0042      	lsls	r2, r0, #1
    b5f0:	024d      	lsls	r5, r1, #9
    b5f2:	004c      	lsls	r4, r1, #1
    b5f4:	0246      	lsls	r6, r0, #9
    b5f6:	0a76      	lsrs	r6, r6, #9
    b5f8:	0e12      	lsrs	r2, r2, #24
    b5fa:	0fc3      	lsrs	r3, r0, #31
    b5fc:	0a6d      	lsrs	r5, r5, #9
    b5fe:	0e24      	lsrs	r4, r4, #24
    b600:	0fc9      	lsrs	r1, r1, #31
    b602:	2aff      	cmp	r2, #255	; 0xff
    b604:	d016      	beq.n	b634 <__lesf2+0x48>
    b606:	2cff      	cmp	r4, #255	; 0xff
    b608:	d018      	beq.n	b63c <__lesf2+0x50>
    b60a:	2a00      	cmp	r2, #0
    b60c:	d10a      	bne.n	b624 <__lesf2+0x38>
    b60e:	4270      	negs	r0, r6
    b610:	4170      	adcs	r0, r6
    b612:	b2c0      	uxtb	r0, r0
    b614:	2c00      	cmp	r4, #0
    b616:	d015      	beq.n	b644 <__lesf2+0x58>
    b618:	2800      	cmp	r0, #0
    b61a:	d005      	beq.n	b628 <__lesf2+0x3c>
    b61c:	2001      	movs	r0, #1
    b61e:	3901      	subs	r1, #1
    b620:	4308      	orrs	r0, r1
    b622:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b624:	2c00      	cmp	r4, #0
    b626:	d013      	beq.n	b650 <__lesf2+0x64>
    b628:	4299      	cmp	r1, r3
    b62a:	d014      	beq.n	b656 <__lesf2+0x6a>
    b62c:	2001      	movs	r0, #1
    b62e:	425b      	negs	r3, r3
    b630:	4318      	orrs	r0, r3
    b632:	e7f6      	b.n	b622 <__lesf2+0x36>
    b634:	2002      	movs	r0, #2
    b636:	2e00      	cmp	r6, #0
    b638:	d1f3      	bne.n	b622 <__lesf2+0x36>
    b63a:	e7e4      	b.n	b606 <__lesf2+0x1a>
    b63c:	2002      	movs	r0, #2
    b63e:	2d00      	cmp	r5, #0
    b640:	d1ef      	bne.n	b622 <__lesf2+0x36>
    b642:	e7e2      	b.n	b60a <__lesf2+0x1e>
    b644:	2d00      	cmp	r5, #0
    b646:	d1e7      	bne.n	b618 <__lesf2+0x2c>
    b648:	2000      	movs	r0, #0
    b64a:	2e00      	cmp	r6, #0
    b64c:	d0e9      	beq.n	b622 <__lesf2+0x36>
    b64e:	e7ed      	b.n	b62c <__lesf2+0x40>
    b650:	2d00      	cmp	r5, #0
    b652:	d1e9      	bne.n	b628 <__lesf2+0x3c>
    b654:	e7ea      	b.n	b62c <__lesf2+0x40>
    b656:	42a2      	cmp	r2, r4
    b658:	dc06      	bgt.n	b668 <__lesf2+0x7c>
    b65a:	dbdf      	blt.n	b61c <__lesf2+0x30>
    b65c:	42ae      	cmp	r6, r5
    b65e:	d803      	bhi.n	b668 <__lesf2+0x7c>
    b660:	2000      	movs	r0, #0
    b662:	42ae      	cmp	r6, r5
    b664:	d3da      	bcc.n	b61c <__lesf2+0x30>
    b666:	e7dc      	b.n	b622 <__lesf2+0x36>
    b668:	2001      	movs	r0, #1
    b66a:	4249      	negs	r1, r1
    b66c:	4308      	orrs	r0, r1
    b66e:	e7d8      	b.n	b622 <__lesf2+0x36>

0000b670 <__aeabi_fmul>:
    b670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b672:	4657      	mov	r7, sl
    b674:	464e      	mov	r6, r9
    b676:	4645      	mov	r5, r8
    b678:	46de      	mov	lr, fp
    b67a:	b5e0      	push	{r5, r6, r7, lr}
    b67c:	0247      	lsls	r7, r0, #9
    b67e:	0046      	lsls	r6, r0, #1
    b680:	4688      	mov	r8, r1
    b682:	0a7f      	lsrs	r7, r7, #9
    b684:	0e36      	lsrs	r6, r6, #24
    b686:	0fc4      	lsrs	r4, r0, #31
    b688:	2e00      	cmp	r6, #0
    b68a:	d047      	beq.n	b71c <__aeabi_fmul+0xac>
    b68c:	2eff      	cmp	r6, #255	; 0xff
    b68e:	d024      	beq.n	b6da <__aeabi_fmul+0x6a>
    b690:	00fb      	lsls	r3, r7, #3
    b692:	2780      	movs	r7, #128	; 0x80
    b694:	04ff      	lsls	r7, r7, #19
    b696:	431f      	orrs	r7, r3
    b698:	2300      	movs	r3, #0
    b69a:	4699      	mov	r9, r3
    b69c:	469a      	mov	sl, r3
    b69e:	3e7f      	subs	r6, #127	; 0x7f
    b6a0:	4643      	mov	r3, r8
    b6a2:	025d      	lsls	r5, r3, #9
    b6a4:	0058      	lsls	r0, r3, #1
    b6a6:	0fdb      	lsrs	r3, r3, #31
    b6a8:	0a6d      	lsrs	r5, r5, #9
    b6aa:	0e00      	lsrs	r0, r0, #24
    b6ac:	4698      	mov	r8, r3
    b6ae:	d043      	beq.n	b738 <__aeabi_fmul+0xc8>
    b6b0:	28ff      	cmp	r0, #255	; 0xff
    b6b2:	d03b      	beq.n	b72c <__aeabi_fmul+0xbc>
    b6b4:	00eb      	lsls	r3, r5, #3
    b6b6:	2580      	movs	r5, #128	; 0x80
    b6b8:	2200      	movs	r2, #0
    b6ba:	04ed      	lsls	r5, r5, #19
    b6bc:	431d      	orrs	r5, r3
    b6be:	387f      	subs	r0, #127	; 0x7f
    b6c0:	1836      	adds	r6, r6, r0
    b6c2:	1c73      	adds	r3, r6, #1
    b6c4:	4641      	mov	r1, r8
    b6c6:	469b      	mov	fp, r3
    b6c8:	464b      	mov	r3, r9
    b6ca:	4061      	eors	r1, r4
    b6cc:	4313      	orrs	r3, r2
    b6ce:	2b0f      	cmp	r3, #15
    b6d0:	d864      	bhi.n	b79c <__aeabi_fmul+0x12c>
    b6d2:	4875      	ldr	r0, [pc, #468]	; (b8a8 <__aeabi_fmul+0x238>)
    b6d4:	009b      	lsls	r3, r3, #2
    b6d6:	58c3      	ldr	r3, [r0, r3]
    b6d8:	469f      	mov	pc, r3
    b6da:	2f00      	cmp	r7, #0
    b6dc:	d142      	bne.n	b764 <__aeabi_fmul+0xf4>
    b6de:	2308      	movs	r3, #8
    b6e0:	4699      	mov	r9, r3
    b6e2:	3b06      	subs	r3, #6
    b6e4:	26ff      	movs	r6, #255	; 0xff
    b6e6:	469a      	mov	sl, r3
    b6e8:	e7da      	b.n	b6a0 <__aeabi_fmul+0x30>
    b6ea:	4641      	mov	r1, r8
    b6ec:	2a02      	cmp	r2, #2
    b6ee:	d028      	beq.n	b742 <__aeabi_fmul+0xd2>
    b6f0:	2a03      	cmp	r2, #3
    b6f2:	d100      	bne.n	b6f6 <__aeabi_fmul+0x86>
    b6f4:	e0ce      	b.n	b894 <__aeabi_fmul+0x224>
    b6f6:	2a01      	cmp	r2, #1
    b6f8:	d000      	beq.n	b6fc <__aeabi_fmul+0x8c>
    b6fa:	e0ac      	b.n	b856 <__aeabi_fmul+0x1e6>
    b6fc:	4011      	ands	r1, r2
    b6fe:	2000      	movs	r0, #0
    b700:	2200      	movs	r2, #0
    b702:	b2cc      	uxtb	r4, r1
    b704:	0240      	lsls	r0, r0, #9
    b706:	05d2      	lsls	r2, r2, #23
    b708:	0a40      	lsrs	r0, r0, #9
    b70a:	07e4      	lsls	r4, r4, #31
    b70c:	4310      	orrs	r0, r2
    b70e:	4320      	orrs	r0, r4
    b710:	bc3c      	pop	{r2, r3, r4, r5}
    b712:	4690      	mov	r8, r2
    b714:	4699      	mov	r9, r3
    b716:	46a2      	mov	sl, r4
    b718:	46ab      	mov	fp, r5
    b71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b71c:	2f00      	cmp	r7, #0
    b71e:	d115      	bne.n	b74c <__aeabi_fmul+0xdc>
    b720:	2304      	movs	r3, #4
    b722:	4699      	mov	r9, r3
    b724:	3b03      	subs	r3, #3
    b726:	2600      	movs	r6, #0
    b728:	469a      	mov	sl, r3
    b72a:	e7b9      	b.n	b6a0 <__aeabi_fmul+0x30>
    b72c:	20ff      	movs	r0, #255	; 0xff
    b72e:	2202      	movs	r2, #2
    b730:	2d00      	cmp	r5, #0
    b732:	d0c5      	beq.n	b6c0 <__aeabi_fmul+0x50>
    b734:	2203      	movs	r2, #3
    b736:	e7c3      	b.n	b6c0 <__aeabi_fmul+0x50>
    b738:	2d00      	cmp	r5, #0
    b73a:	d119      	bne.n	b770 <__aeabi_fmul+0x100>
    b73c:	2000      	movs	r0, #0
    b73e:	2201      	movs	r2, #1
    b740:	e7be      	b.n	b6c0 <__aeabi_fmul+0x50>
    b742:	2401      	movs	r4, #1
    b744:	22ff      	movs	r2, #255	; 0xff
    b746:	400c      	ands	r4, r1
    b748:	2000      	movs	r0, #0
    b74a:	e7db      	b.n	b704 <__aeabi_fmul+0x94>
    b74c:	0038      	movs	r0, r7
    b74e:	f002 f8fb 	bl	d948 <__clzsi2>
    b752:	2676      	movs	r6, #118	; 0x76
    b754:	1f43      	subs	r3, r0, #5
    b756:	409f      	lsls	r7, r3
    b758:	2300      	movs	r3, #0
    b75a:	4276      	negs	r6, r6
    b75c:	1a36      	subs	r6, r6, r0
    b75e:	4699      	mov	r9, r3
    b760:	469a      	mov	sl, r3
    b762:	e79d      	b.n	b6a0 <__aeabi_fmul+0x30>
    b764:	230c      	movs	r3, #12
    b766:	4699      	mov	r9, r3
    b768:	3b09      	subs	r3, #9
    b76a:	26ff      	movs	r6, #255	; 0xff
    b76c:	469a      	mov	sl, r3
    b76e:	e797      	b.n	b6a0 <__aeabi_fmul+0x30>
    b770:	0028      	movs	r0, r5
    b772:	f002 f8e9 	bl	d948 <__clzsi2>
    b776:	1f43      	subs	r3, r0, #5
    b778:	409d      	lsls	r5, r3
    b77a:	2376      	movs	r3, #118	; 0x76
    b77c:	425b      	negs	r3, r3
    b77e:	1a18      	subs	r0, r3, r0
    b780:	2200      	movs	r2, #0
    b782:	e79d      	b.n	b6c0 <__aeabi_fmul+0x50>
    b784:	2080      	movs	r0, #128	; 0x80
    b786:	2400      	movs	r4, #0
    b788:	03c0      	lsls	r0, r0, #15
    b78a:	22ff      	movs	r2, #255	; 0xff
    b78c:	e7ba      	b.n	b704 <__aeabi_fmul+0x94>
    b78e:	003d      	movs	r5, r7
    b790:	4652      	mov	r2, sl
    b792:	e7ab      	b.n	b6ec <__aeabi_fmul+0x7c>
    b794:	003d      	movs	r5, r7
    b796:	0021      	movs	r1, r4
    b798:	4652      	mov	r2, sl
    b79a:	e7a7      	b.n	b6ec <__aeabi_fmul+0x7c>
    b79c:	0c3b      	lsrs	r3, r7, #16
    b79e:	469c      	mov	ip, r3
    b7a0:	042a      	lsls	r2, r5, #16
    b7a2:	0c12      	lsrs	r2, r2, #16
    b7a4:	0c2b      	lsrs	r3, r5, #16
    b7a6:	0014      	movs	r4, r2
    b7a8:	4660      	mov	r0, ip
    b7aa:	4665      	mov	r5, ip
    b7ac:	043f      	lsls	r7, r7, #16
    b7ae:	0c3f      	lsrs	r7, r7, #16
    b7b0:	437c      	muls	r4, r7
    b7b2:	4342      	muls	r2, r0
    b7b4:	435d      	muls	r5, r3
    b7b6:	437b      	muls	r3, r7
    b7b8:	0c27      	lsrs	r7, r4, #16
    b7ba:	189b      	adds	r3, r3, r2
    b7bc:	18ff      	adds	r7, r7, r3
    b7be:	42ba      	cmp	r2, r7
    b7c0:	d903      	bls.n	b7ca <__aeabi_fmul+0x15a>
    b7c2:	2380      	movs	r3, #128	; 0x80
    b7c4:	025b      	lsls	r3, r3, #9
    b7c6:	469c      	mov	ip, r3
    b7c8:	4465      	add	r5, ip
    b7ca:	0424      	lsls	r4, r4, #16
    b7cc:	043a      	lsls	r2, r7, #16
    b7ce:	0c24      	lsrs	r4, r4, #16
    b7d0:	1912      	adds	r2, r2, r4
    b7d2:	0193      	lsls	r3, r2, #6
    b7d4:	1e5c      	subs	r4, r3, #1
    b7d6:	41a3      	sbcs	r3, r4
    b7d8:	0c3f      	lsrs	r7, r7, #16
    b7da:	0e92      	lsrs	r2, r2, #26
    b7dc:	197d      	adds	r5, r7, r5
    b7de:	431a      	orrs	r2, r3
    b7e0:	01ad      	lsls	r5, r5, #6
    b7e2:	4315      	orrs	r5, r2
    b7e4:	012b      	lsls	r3, r5, #4
    b7e6:	d504      	bpl.n	b7f2 <__aeabi_fmul+0x182>
    b7e8:	2301      	movs	r3, #1
    b7ea:	465e      	mov	r6, fp
    b7ec:	086a      	lsrs	r2, r5, #1
    b7ee:	401d      	ands	r5, r3
    b7f0:	4315      	orrs	r5, r2
    b7f2:	0032      	movs	r2, r6
    b7f4:	327f      	adds	r2, #127	; 0x7f
    b7f6:	2a00      	cmp	r2, #0
    b7f8:	dd25      	ble.n	b846 <__aeabi_fmul+0x1d6>
    b7fa:	076b      	lsls	r3, r5, #29
    b7fc:	d004      	beq.n	b808 <__aeabi_fmul+0x198>
    b7fe:	230f      	movs	r3, #15
    b800:	402b      	ands	r3, r5
    b802:	2b04      	cmp	r3, #4
    b804:	d000      	beq.n	b808 <__aeabi_fmul+0x198>
    b806:	3504      	adds	r5, #4
    b808:	012b      	lsls	r3, r5, #4
    b80a:	d503      	bpl.n	b814 <__aeabi_fmul+0x1a4>
    b80c:	0032      	movs	r2, r6
    b80e:	4b27      	ldr	r3, [pc, #156]	; (b8ac <__aeabi_fmul+0x23c>)
    b810:	3280      	adds	r2, #128	; 0x80
    b812:	401d      	ands	r5, r3
    b814:	2afe      	cmp	r2, #254	; 0xfe
    b816:	dc94      	bgt.n	b742 <__aeabi_fmul+0xd2>
    b818:	2401      	movs	r4, #1
    b81a:	01a8      	lsls	r0, r5, #6
    b81c:	0a40      	lsrs	r0, r0, #9
    b81e:	b2d2      	uxtb	r2, r2
    b820:	400c      	ands	r4, r1
    b822:	e76f      	b.n	b704 <__aeabi_fmul+0x94>
    b824:	2080      	movs	r0, #128	; 0x80
    b826:	03c0      	lsls	r0, r0, #15
    b828:	4207      	tst	r7, r0
    b82a:	d007      	beq.n	b83c <__aeabi_fmul+0x1cc>
    b82c:	4205      	tst	r5, r0
    b82e:	d105      	bne.n	b83c <__aeabi_fmul+0x1cc>
    b830:	4328      	orrs	r0, r5
    b832:	0240      	lsls	r0, r0, #9
    b834:	0a40      	lsrs	r0, r0, #9
    b836:	4644      	mov	r4, r8
    b838:	22ff      	movs	r2, #255	; 0xff
    b83a:	e763      	b.n	b704 <__aeabi_fmul+0x94>
    b83c:	4338      	orrs	r0, r7
    b83e:	0240      	lsls	r0, r0, #9
    b840:	0a40      	lsrs	r0, r0, #9
    b842:	22ff      	movs	r2, #255	; 0xff
    b844:	e75e      	b.n	b704 <__aeabi_fmul+0x94>
    b846:	2401      	movs	r4, #1
    b848:	1aa3      	subs	r3, r4, r2
    b84a:	2b1b      	cmp	r3, #27
    b84c:	dd05      	ble.n	b85a <__aeabi_fmul+0x1ea>
    b84e:	400c      	ands	r4, r1
    b850:	2200      	movs	r2, #0
    b852:	2000      	movs	r0, #0
    b854:	e756      	b.n	b704 <__aeabi_fmul+0x94>
    b856:	465e      	mov	r6, fp
    b858:	e7cb      	b.n	b7f2 <__aeabi_fmul+0x182>
    b85a:	002a      	movs	r2, r5
    b85c:	2020      	movs	r0, #32
    b85e:	40da      	lsrs	r2, r3
    b860:	1ac3      	subs	r3, r0, r3
    b862:	409d      	lsls	r5, r3
    b864:	002b      	movs	r3, r5
    b866:	1e5d      	subs	r5, r3, #1
    b868:	41ab      	sbcs	r3, r5
    b86a:	4313      	orrs	r3, r2
    b86c:	075a      	lsls	r2, r3, #29
    b86e:	d004      	beq.n	b87a <__aeabi_fmul+0x20a>
    b870:	220f      	movs	r2, #15
    b872:	401a      	ands	r2, r3
    b874:	2a04      	cmp	r2, #4
    b876:	d000      	beq.n	b87a <__aeabi_fmul+0x20a>
    b878:	3304      	adds	r3, #4
    b87a:	015a      	lsls	r2, r3, #5
    b87c:	d504      	bpl.n	b888 <__aeabi_fmul+0x218>
    b87e:	2401      	movs	r4, #1
    b880:	2201      	movs	r2, #1
    b882:	400c      	ands	r4, r1
    b884:	2000      	movs	r0, #0
    b886:	e73d      	b.n	b704 <__aeabi_fmul+0x94>
    b888:	2401      	movs	r4, #1
    b88a:	019b      	lsls	r3, r3, #6
    b88c:	0a58      	lsrs	r0, r3, #9
    b88e:	400c      	ands	r4, r1
    b890:	2200      	movs	r2, #0
    b892:	e737      	b.n	b704 <__aeabi_fmul+0x94>
    b894:	2080      	movs	r0, #128	; 0x80
    b896:	2401      	movs	r4, #1
    b898:	03c0      	lsls	r0, r0, #15
    b89a:	4328      	orrs	r0, r5
    b89c:	0240      	lsls	r0, r0, #9
    b89e:	0a40      	lsrs	r0, r0, #9
    b8a0:	400c      	ands	r4, r1
    b8a2:	22ff      	movs	r2, #255	; 0xff
    b8a4:	e72e      	b.n	b704 <__aeabi_fmul+0x94>
    b8a6:	46c0      	nop			; (mov r8, r8)
    b8a8:	0000eee0 	.word	0x0000eee0
    b8ac:	f7ffffff 	.word	0xf7ffffff

0000b8b0 <__aeabi_fsub>:
    b8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b8b2:	464f      	mov	r7, r9
    b8b4:	46d6      	mov	lr, sl
    b8b6:	4646      	mov	r6, r8
    b8b8:	0044      	lsls	r4, r0, #1
    b8ba:	b5c0      	push	{r6, r7, lr}
    b8bc:	0fc2      	lsrs	r2, r0, #31
    b8be:	0247      	lsls	r7, r0, #9
    b8c0:	0248      	lsls	r0, r1, #9
    b8c2:	0a40      	lsrs	r0, r0, #9
    b8c4:	4684      	mov	ip, r0
    b8c6:	4666      	mov	r6, ip
    b8c8:	0a7b      	lsrs	r3, r7, #9
    b8ca:	0048      	lsls	r0, r1, #1
    b8cc:	0fc9      	lsrs	r1, r1, #31
    b8ce:	469a      	mov	sl, r3
    b8d0:	0e24      	lsrs	r4, r4, #24
    b8d2:	0015      	movs	r5, r2
    b8d4:	00db      	lsls	r3, r3, #3
    b8d6:	0e00      	lsrs	r0, r0, #24
    b8d8:	4689      	mov	r9, r1
    b8da:	00f6      	lsls	r6, r6, #3
    b8dc:	28ff      	cmp	r0, #255	; 0xff
    b8de:	d100      	bne.n	b8e2 <__aeabi_fsub+0x32>
    b8e0:	e08f      	b.n	ba02 <__aeabi_fsub+0x152>
    b8e2:	2101      	movs	r1, #1
    b8e4:	464f      	mov	r7, r9
    b8e6:	404f      	eors	r7, r1
    b8e8:	0039      	movs	r1, r7
    b8ea:	4291      	cmp	r1, r2
    b8ec:	d066      	beq.n	b9bc <__aeabi_fsub+0x10c>
    b8ee:	1a22      	subs	r2, r4, r0
    b8f0:	2a00      	cmp	r2, #0
    b8f2:	dc00      	bgt.n	b8f6 <__aeabi_fsub+0x46>
    b8f4:	e09d      	b.n	ba32 <__aeabi_fsub+0x182>
    b8f6:	2800      	cmp	r0, #0
    b8f8:	d13d      	bne.n	b976 <__aeabi_fsub+0xc6>
    b8fa:	2e00      	cmp	r6, #0
    b8fc:	d100      	bne.n	b900 <__aeabi_fsub+0x50>
    b8fe:	e08b      	b.n	ba18 <__aeabi_fsub+0x168>
    b900:	1e51      	subs	r1, r2, #1
    b902:	2900      	cmp	r1, #0
    b904:	d000      	beq.n	b908 <__aeabi_fsub+0x58>
    b906:	e0b5      	b.n	ba74 <__aeabi_fsub+0x1c4>
    b908:	2401      	movs	r4, #1
    b90a:	1b9b      	subs	r3, r3, r6
    b90c:	015a      	lsls	r2, r3, #5
    b90e:	d544      	bpl.n	b99a <__aeabi_fsub+0xea>
    b910:	019b      	lsls	r3, r3, #6
    b912:	099f      	lsrs	r7, r3, #6
    b914:	0038      	movs	r0, r7
    b916:	f002 f817 	bl	d948 <__clzsi2>
    b91a:	3805      	subs	r0, #5
    b91c:	4087      	lsls	r7, r0
    b91e:	4284      	cmp	r4, r0
    b920:	dd00      	ble.n	b924 <__aeabi_fsub+0x74>
    b922:	e096      	b.n	ba52 <__aeabi_fsub+0x1a2>
    b924:	1b04      	subs	r4, r0, r4
    b926:	003a      	movs	r2, r7
    b928:	2020      	movs	r0, #32
    b92a:	3401      	adds	r4, #1
    b92c:	40e2      	lsrs	r2, r4
    b92e:	1b04      	subs	r4, r0, r4
    b930:	40a7      	lsls	r7, r4
    b932:	003b      	movs	r3, r7
    b934:	1e5f      	subs	r7, r3, #1
    b936:	41bb      	sbcs	r3, r7
    b938:	2400      	movs	r4, #0
    b93a:	4313      	orrs	r3, r2
    b93c:	075a      	lsls	r2, r3, #29
    b93e:	d004      	beq.n	b94a <__aeabi_fsub+0x9a>
    b940:	220f      	movs	r2, #15
    b942:	401a      	ands	r2, r3
    b944:	2a04      	cmp	r2, #4
    b946:	d000      	beq.n	b94a <__aeabi_fsub+0x9a>
    b948:	3304      	adds	r3, #4
    b94a:	015a      	lsls	r2, r3, #5
    b94c:	d527      	bpl.n	b99e <__aeabi_fsub+0xee>
    b94e:	3401      	adds	r4, #1
    b950:	2cff      	cmp	r4, #255	; 0xff
    b952:	d100      	bne.n	b956 <__aeabi_fsub+0xa6>
    b954:	e079      	b.n	ba4a <__aeabi_fsub+0x19a>
    b956:	2201      	movs	r2, #1
    b958:	019b      	lsls	r3, r3, #6
    b95a:	0a5b      	lsrs	r3, r3, #9
    b95c:	b2e4      	uxtb	r4, r4
    b95e:	402a      	ands	r2, r5
    b960:	025b      	lsls	r3, r3, #9
    b962:	05e4      	lsls	r4, r4, #23
    b964:	0a58      	lsrs	r0, r3, #9
    b966:	07d2      	lsls	r2, r2, #31
    b968:	4320      	orrs	r0, r4
    b96a:	4310      	orrs	r0, r2
    b96c:	bc1c      	pop	{r2, r3, r4}
    b96e:	4690      	mov	r8, r2
    b970:	4699      	mov	r9, r3
    b972:	46a2      	mov	sl, r4
    b974:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b976:	2cff      	cmp	r4, #255	; 0xff
    b978:	d0e0      	beq.n	b93c <__aeabi_fsub+0x8c>
    b97a:	2180      	movs	r1, #128	; 0x80
    b97c:	04c9      	lsls	r1, r1, #19
    b97e:	430e      	orrs	r6, r1
    b980:	2a1b      	cmp	r2, #27
    b982:	dc7b      	bgt.n	ba7c <__aeabi_fsub+0x1cc>
    b984:	0031      	movs	r1, r6
    b986:	2020      	movs	r0, #32
    b988:	40d1      	lsrs	r1, r2
    b98a:	1a82      	subs	r2, r0, r2
    b98c:	4096      	lsls	r6, r2
    b98e:	1e72      	subs	r2, r6, #1
    b990:	4196      	sbcs	r6, r2
    b992:	430e      	orrs	r6, r1
    b994:	1b9b      	subs	r3, r3, r6
    b996:	015a      	lsls	r2, r3, #5
    b998:	d4ba      	bmi.n	b910 <__aeabi_fsub+0x60>
    b99a:	075a      	lsls	r2, r3, #29
    b99c:	d1d0      	bne.n	b940 <__aeabi_fsub+0x90>
    b99e:	2201      	movs	r2, #1
    b9a0:	08df      	lsrs	r7, r3, #3
    b9a2:	402a      	ands	r2, r5
    b9a4:	2cff      	cmp	r4, #255	; 0xff
    b9a6:	d133      	bne.n	ba10 <__aeabi_fsub+0x160>
    b9a8:	2f00      	cmp	r7, #0
    b9aa:	d100      	bne.n	b9ae <__aeabi_fsub+0xfe>
    b9ac:	e0a8      	b.n	bb00 <__aeabi_fsub+0x250>
    b9ae:	2380      	movs	r3, #128	; 0x80
    b9b0:	03db      	lsls	r3, r3, #15
    b9b2:	433b      	orrs	r3, r7
    b9b4:	025b      	lsls	r3, r3, #9
    b9b6:	0a5b      	lsrs	r3, r3, #9
    b9b8:	24ff      	movs	r4, #255	; 0xff
    b9ba:	e7d1      	b.n	b960 <__aeabi_fsub+0xb0>
    b9bc:	1a21      	subs	r1, r4, r0
    b9be:	2900      	cmp	r1, #0
    b9c0:	dd4c      	ble.n	ba5c <__aeabi_fsub+0x1ac>
    b9c2:	2800      	cmp	r0, #0
    b9c4:	d02a      	beq.n	ba1c <__aeabi_fsub+0x16c>
    b9c6:	2cff      	cmp	r4, #255	; 0xff
    b9c8:	d0b8      	beq.n	b93c <__aeabi_fsub+0x8c>
    b9ca:	2080      	movs	r0, #128	; 0x80
    b9cc:	04c0      	lsls	r0, r0, #19
    b9ce:	4306      	orrs	r6, r0
    b9d0:	291b      	cmp	r1, #27
    b9d2:	dd00      	ble.n	b9d6 <__aeabi_fsub+0x126>
    b9d4:	e0af      	b.n	bb36 <__aeabi_fsub+0x286>
    b9d6:	0030      	movs	r0, r6
    b9d8:	2720      	movs	r7, #32
    b9da:	40c8      	lsrs	r0, r1
    b9dc:	1a79      	subs	r1, r7, r1
    b9de:	408e      	lsls	r6, r1
    b9e0:	1e71      	subs	r1, r6, #1
    b9e2:	418e      	sbcs	r6, r1
    b9e4:	4306      	orrs	r6, r0
    b9e6:	199b      	adds	r3, r3, r6
    b9e8:	0159      	lsls	r1, r3, #5
    b9ea:	d5d6      	bpl.n	b99a <__aeabi_fsub+0xea>
    b9ec:	3401      	adds	r4, #1
    b9ee:	2cff      	cmp	r4, #255	; 0xff
    b9f0:	d100      	bne.n	b9f4 <__aeabi_fsub+0x144>
    b9f2:	e085      	b.n	bb00 <__aeabi_fsub+0x250>
    b9f4:	2201      	movs	r2, #1
    b9f6:	497a      	ldr	r1, [pc, #488]	; (bbe0 <__aeabi_fsub+0x330>)
    b9f8:	401a      	ands	r2, r3
    b9fa:	085b      	lsrs	r3, r3, #1
    b9fc:	400b      	ands	r3, r1
    b9fe:	4313      	orrs	r3, r2
    ba00:	e79c      	b.n	b93c <__aeabi_fsub+0x8c>
    ba02:	2e00      	cmp	r6, #0
    ba04:	d000      	beq.n	ba08 <__aeabi_fsub+0x158>
    ba06:	e770      	b.n	b8ea <__aeabi_fsub+0x3a>
    ba08:	e76b      	b.n	b8e2 <__aeabi_fsub+0x32>
    ba0a:	1e3b      	subs	r3, r7, #0
    ba0c:	d1c5      	bne.n	b99a <__aeabi_fsub+0xea>
    ba0e:	2200      	movs	r2, #0
    ba10:	027b      	lsls	r3, r7, #9
    ba12:	0a5b      	lsrs	r3, r3, #9
    ba14:	b2e4      	uxtb	r4, r4
    ba16:	e7a3      	b.n	b960 <__aeabi_fsub+0xb0>
    ba18:	0014      	movs	r4, r2
    ba1a:	e78f      	b.n	b93c <__aeabi_fsub+0x8c>
    ba1c:	2e00      	cmp	r6, #0
    ba1e:	d04d      	beq.n	babc <__aeabi_fsub+0x20c>
    ba20:	1e48      	subs	r0, r1, #1
    ba22:	2800      	cmp	r0, #0
    ba24:	d157      	bne.n	bad6 <__aeabi_fsub+0x226>
    ba26:	199b      	adds	r3, r3, r6
    ba28:	2401      	movs	r4, #1
    ba2a:	015a      	lsls	r2, r3, #5
    ba2c:	d5b5      	bpl.n	b99a <__aeabi_fsub+0xea>
    ba2e:	2402      	movs	r4, #2
    ba30:	e7e0      	b.n	b9f4 <__aeabi_fsub+0x144>
    ba32:	2a00      	cmp	r2, #0
    ba34:	d125      	bne.n	ba82 <__aeabi_fsub+0x1d2>
    ba36:	1c62      	adds	r2, r4, #1
    ba38:	b2d2      	uxtb	r2, r2
    ba3a:	2a01      	cmp	r2, #1
    ba3c:	dd72      	ble.n	bb24 <__aeabi_fsub+0x274>
    ba3e:	1b9f      	subs	r7, r3, r6
    ba40:	017a      	lsls	r2, r7, #5
    ba42:	d535      	bpl.n	bab0 <__aeabi_fsub+0x200>
    ba44:	1af7      	subs	r7, r6, r3
    ba46:	000d      	movs	r5, r1
    ba48:	e764      	b.n	b914 <__aeabi_fsub+0x64>
    ba4a:	2201      	movs	r2, #1
    ba4c:	2300      	movs	r3, #0
    ba4e:	402a      	ands	r2, r5
    ba50:	e786      	b.n	b960 <__aeabi_fsub+0xb0>
    ba52:	003b      	movs	r3, r7
    ba54:	4a63      	ldr	r2, [pc, #396]	; (bbe4 <__aeabi_fsub+0x334>)
    ba56:	1a24      	subs	r4, r4, r0
    ba58:	4013      	ands	r3, r2
    ba5a:	e76f      	b.n	b93c <__aeabi_fsub+0x8c>
    ba5c:	2900      	cmp	r1, #0
    ba5e:	d16c      	bne.n	bb3a <__aeabi_fsub+0x28a>
    ba60:	1c61      	adds	r1, r4, #1
    ba62:	b2c8      	uxtb	r0, r1
    ba64:	2801      	cmp	r0, #1
    ba66:	dd4e      	ble.n	bb06 <__aeabi_fsub+0x256>
    ba68:	29ff      	cmp	r1, #255	; 0xff
    ba6a:	d049      	beq.n	bb00 <__aeabi_fsub+0x250>
    ba6c:	199b      	adds	r3, r3, r6
    ba6e:	085b      	lsrs	r3, r3, #1
    ba70:	000c      	movs	r4, r1
    ba72:	e763      	b.n	b93c <__aeabi_fsub+0x8c>
    ba74:	2aff      	cmp	r2, #255	; 0xff
    ba76:	d041      	beq.n	bafc <__aeabi_fsub+0x24c>
    ba78:	000a      	movs	r2, r1
    ba7a:	e781      	b.n	b980 <__aeabi_fsub+0xd0>
    ba7c:	2601      	movs	r6, #1
    ba7e:	1b9b      	subs	r3, r3, r6
    ba80:	e789      	b.n	b996 <__aeabi_fsub+0xe6>
    ba82:	2c00      	cmp	r4, #0
    ba84:	d01c      	beq.n	bac0 <__aeabi_fsub+0x210>
    ba86:	28ff      	cmp	r0, #255	; 0xff
    ba88:	d021      	beq.n	bace <__aeabi_fsub+0x21e>
    ba8a:	2480      	movs	r4, #128	; 0x80
    ba8c:	04e4      	lsls	r4, r4, #19
    ba8e:	4252      	negs	r2, r2
    ba90:	4323      	orrs	r3, r4
    ba92:	2a1b      	cmp	r2, #27
    ba94:	dd00      	ble.n	ba98 <__aeabi_fsub+0x1e8>
    ba96:	e096      	b.n	bbc6 <__aeabi_fsub+0x316>
    ba98:	001c      	movs	r4, r3
    ba9a:	2520      	movs	r5, #32
    ba9c:	40d4      	lsrs	r4, r2
    ba9e:	1aaa      	subs	r2, r5, r2
    baa0:	4093      	lsls	r3, r2
    baa2:	1e5a      	subs	r2, r3, #1
    baa4:	4193      	sbcs	r3, r2
    baa6:	4323      	orrs	r3, r4
    baa8:	1af3      	subs	r3, r6, r3
    baaa:	0004      	movs	r4, r0
    baac:	000d      	movs	r5, r1
    baae:	e72d      	b.n	b90c <__aeabi_fsub+0x5c>
    bab0:	2f00      	cmp	r7, #0
    bab2:	d000      	beq.n	bab6 <__aeabi_fsub+0x206>
    bab4:	e72e      	b.n	b914 <__aeabi_fsub+0x64>
    bab6:	2200      	movs	r2, #0
    bab8:	2400      	movs	r4, #0
    baba:	e7a9      	b.n	ba10 <__aeabi_fsub+0x160>
    babc:	000c      	movs	r4, r1
    babe:	e73d      	b.n	b93c <__aeabi_fsub+0x8c>
    bac0:	2b00      	cmp	r3, #0
    bac2:	d058      	beq.n	bb76 <__aeabi_fsub+0x2c6>
    bac4:	43d2      	mvns	r2, r2
    bac6:	2a00      	cmp	r2, #0
    bac8:	d0ee      	beq.n	baa8 <__aeabi_fsub+0x1f8>
    baca:	28ff      	cmp	r0, #255	; 0xff
    bacc:	d1e1      	bne.n	ba92 <__aeabi_fsub+0x1e2>
    bace:	0033      	movs	r3, r6
    bad0:	24ff      	movs	r4, #255	; 0xff
    bad2:	000d      	movs	r5, r1
    bad4:	e732      	b.n	b93c <__aeabi_fsub+0x8c>
    bad6:	29ff      	cmp	r1, #255	; 0xff
    bad8:	d010      	beq.n	bafc <__aeabi_fsub+0x24c>
    bada:	0001      	movs	r1, r0
    badc:	e778      	b.n	b9d0 <__aeabi_fsub+0x120>
    bade:	2b00      	cmp	r3, #0
    bae0:	d06e      	beq.n	bbc0 <__aeabi_fsub+0x310>
    bae2:	24ff      	movs	r4, #255	; 0xff
    bae4:	2e00      	cmp	r6, #0
    bae6:	d100      	bne.n	baea <__aeabi_fsub+0x23a>
    bae8:	e728      	b.n	b93c <__aeabi_fsub+0x8c>
    baea:	2280      	movs	r2, #128	; 0x80
    baec:	4651      	mov	r1, sl
    baee:	03d2      	lsls	r2, r2, #15
    baf0:	4211      	tst	r1, r2
    baf2:	d003      	beq.n	bafc <__aeabi_fsub+0x24c>
    baf4:	4661      	mov	r1, ip
    baf6:	4211      	tst	r1, r2
    baf8:	d100      	bne.n	bafc <__aeabi_fsub+0x24c>
    bafa:	0033      	movs	r3, r6
    bafc:	24ff      	movs	r4, #255	; 0xff
    bafe:	e71d      	b.n	b93c <__aeabi_fsub+0x8c>
    bb00:	24ff      	movs	r4, #255	; 0xff
    bb02:	2300      	movs	r3, #0
    bb04:	e72c      	b.n	b960 <__aeabi_fsub+0xb0>
    bb06:	2c00      	cmp	r4, #0
    bb08:	d1e9      	bne.n	bade <__aeabi_fsub+0x22e>
    bb0a:	2b00      	cmp	r3, #0
    bb0c:	d063      	beq.n	bbd6 <__aeabi_fsub+0x326>
    bb0e:	2e00      	cmp	r6, #0
    bb10:	d100      	bne.n	bb14 <__aeabi_fsub+0x264>
    bb12:	e713      	b.n	b93c <__aeabi_fsub+0x8c>
    bb14:	199b      	adds	r3, r3, r6
    bb16:	015a      	lsls	r2, r3, #5
    bb18:	d400      	bmi.n	bb1c <__aeabi_fsub+0x26c>
    bb1a:	e73e      	b.n	b99a <__aeabi_fsub+0xea>
    bb1c:	4a31      	ldr	r2, [pc, #196]	; (bbe4 <__aeabi_fsub+0x334>)
    bb1e:	000c      	movs	r4, r1
    bb20:	4013      	ands	r3, r2
    bb22:	e70b      	b.n	b93c <__aeabi_fsub+0x8c>
    bb24:	2c00      	cmp	r4, #0
    bb26:	d11e      	bne.n	bb66 <__aeabi_fsub+0x2b6>
    bb28:	2b00      	cmp	r3, #0
    bb2a:	d12f      	bne.n	bb8c <__aeabi_fsub+0x2dc>
    bb2c:	2e00      	cmp	r6, #0
    bb2e:	d04f      	beq.n	bbd0 <__aeabi_fsub+0x320>
    bb30:	0033      	movs	r3, r6
    bb32:	000d      	movs	r5, r1
    bb34:	e702      	b.n	b93c <__aeabi_fsub+0x8c>
    bb36:	2601      	movs	r6, #1
    bb38:	e755      	b.n	b9e6 <__aeabi_fsub+0x136>
    bb3a:	2c00      	cmp	r4, #0
    bb3c:	d11f      	bne.n	bb7e <__aeabi_fsub+0x2ce>
    bb3e:	2b00      	cmp	r3, #0
    bb40:	d043      	beq.n	bbca <__aeabi_fsub+0x31a>
    bb42:	43c9      	mvns	r1, r1
    bb44:	2900      	cmp	r1, #0
    bb46:	d00b      	beq.n	bb60 <__aeabi_fsub+0x2b0>
    bb48:	28ff      	cmp	r0, #255	; 0xff
    bb4a:	d039      	beq.n	bbc0 <__aeabi_fsub+0x310>
    bb4c:	291b      	cmp	r1, #27
    bb4e:	dc44      	bgt.n	bbda <__aeabi_fsub+0x32a>
    bb50:	001c      	movs	r4, r3
    bb52:	2720      	movs	r7, #32
    bb54:	40cc      	lsrs	r4, r1
    bb56:	1a79      	subs	r1, r7, r1
    bb58:	408b      	lsls	r3, r1
    bb5a:	1e59      	subs	r1, r3, #1
    bb5c:	418b      	sbcs	r3, r1
    bb5e:	4323      	orrs	r3, r4
    bb60:	199b      	adds	r3, r3, r6
    bb62:	0004      	movs	r4, r0
    bb64:	e740      	b.n	b9e8 <__aeabi_fsub+0x138>
    bb66:	2b00      	cmp	r3, #0
    bb68:	d11a      	bne.n	bba0 <__aeabi_fsub+0x2f0>
    bb6a:	2e00      	cmp	r6, #0
    bb6c:	d124      	bne.n	bbb8 <__aeabi_fsub+0x308>
    bb6e:	2780      	movs	r7, #128	; 0x80
    bb70:	2200      	movs	r2, #0
    bb72:	03ff      	lsls	r7, r7, #15
    bb74:	e71b      	b.n	b9ae <__aeabi_fsub+0xfe>
    bb76:	0033      	movs	r3, r6
    bb78:	0004      	movs	r4, r0
    bb7a:	000d      	movs	r5, r1
    bb7c:	e6de      	b.n	b93c <__aeabi_fsub+0x8c>
    bb7e:	28ff      	cmp	r0, #255	; 0xff
    bb80:	d01e      	beq.n	bbc0 <__aeabi_fsub+0x310>
    bb82:	2480      	movs	r4, #128	; 0x80
    bb84:	04e4      	lsls	r4, r4, #19
    bb86:	4249      	negs	r1, r1
    bb88:	4323      	orrs	r3, r4
    bb8a:	e7df      	b.n	bb4c <__aeabi_fsub+0x29c>
    bb8c:	2e00      	cmp	r6, #0
    bb8e:	d100      	bne.n	bb92 <__aeabi_fsub+0x2e2>
    bb90:	e6d4      	b.n	b93c <__aeabi_fsub+0x8c>
    bb92:	1b9f      	subs	r7, r3, r6
    bb94:	017a      	lsls	r2, r7, #5
    bb96:	d400      	bmi.n	bb9a <__aeabi_fsub+0x2ea>
    bb98:	e737      	b.n	ba0a <__aeabi_fsub+0x15a>
    bb9a:	1af3      	subs	r3, r6, r3
    bb9c:	000d      	movs	r5, r1
    bb9e:	e6cd      	b.n	b93c <__aeabi_fsub+0x8c>
    bba0:	24ff      	movs	r4, #255	; 0xff
    bba2:	2e00      	cmp	r6, #0
    bba4:	d100      	bne.n	bba8 <__aeabi_fsub+0x2f8>
    bba6:	e6c9      	b.n	b93c <__aeabi_fsub+0x8c>
    bba8:	2280      	movs	r2, #128	; 0x80
    bbaa:	4650      	mov	r0, sl
    bbac:	03d2      	lsls	r2, r2, #15
    bbae:	4210      	tst	r0, r2
    bbb0:	d0a4      	beq.n	bafc <__aeabi_fsub+0x24c>
    bbb2:	4660      	mov	r0, ip
    bbb4:	4210      	tst	r0, r2
    bbb6:	d1a1      	bne.n	bafc <__aeabi_fsub+0x24c>
    bbb8:	0033      	movs	r3, r6
    bbba:	000d      	movs	r5, r1
    bbbc:	24ff      	movs	r4, #255	; 0xff
    bbbe:	e6bd      	b.n	b93c <__aeabi_fsub+0x8c>
    bbc0:	0033      	movs	r3, r6
    bbc2:	24ff      	movs	r4, #255	; 0xff
    bbc4:	e6ba      	b.n	b93c <__aeabi_fsub+0x8c>
    bbc6:	2301      	movs	r3, #1
    bbc8:	e76e      	b.n	baa8 <__aeabi_fsub+0x1f8>
    bbca:	0033      	movs	r3, r6
    bbcc:	0004      	movs	r4, r0
    bbce:	e6b5      	b.n	b93c <__aeabi_fsub+0x8c>
    bbd0:	2700      	movs	r7, #0
    bbd2:	2200      	movs	r2, #0
    bbd4:	e71c      	b.n	ba10 <__aeabi_fsub+0x160>
    bbd6:	0033      	movs	r3, r6
    bbd8:	e6b0      	b.n	b93c <__aeabi_fsub+0x8c>
    bbda:	2301      	movs	r3, #1
    bbdc:	e7c0      	b.n	bb60 <__aeabi_fsub+0x2b0>
    bbde:	46c0      	nop			; (mov r8, r8)
    bbe0:	7dffffff 	.word	0x7dffffff
    bbe4:	fbffffff 	.word	0xfbffffff

0000bbe8 <__aeabi_f2iz>:
    bbe8:	0241      	lsls	r1, r0, #9
    bbea:	0043      	lsls	r3, r0, #1
    bbec:	0fc2      	lsrs	r2, r0, #31
    bbee:	0a49      	lsrs	r1, r1, #9
    bbf0:	0e1b      	lsrs	r3, r3, #24
    bbf2:	2000      	movs	r0, #0
    bbf4:	2b7e      	cmp	r3, #126	; 0x7e
    bbf6:	dd0d      	ble.n	bc14 <__aeabi_f2iz+0x2c>
    bbf8:	2b9d      	cmp	r3, #157	; 0x9d
    bbfa:	dc0c      	bgt.n	bc16 <__aeabi_f2iz+0x2e>
    bbfc:	2080      	movs	r0, #128	; 0x80
    bbfe:	0400      	lsls	r0, r0, #16
    bc00:	4301      	orrs	r1, r0
    bc02:	2b95      	cmp	r3, #149	; 0x95
    bc04:	dc0a      	bgt.n	bc1c <__aeabi_f2iz+0x34>
    bc06:	2096      	movs	r0, #150	; 0x96
    bc08:	1ac3      	subs	r3, r0, r3
    bc0a:	40d9      	lsrs	r1, r3
    bc0c:	4248      	negs	r0, r1
    bc0e:	2a00      	cmp	r2, #0
    bc10:	d100      	bne.n	bc14 <__aeabi_f2iz+0x2c>
    bc12:	0008      	movs	r0, r1
    bc14:	4770      	bx	lr
    bc16:	4b03      	ldr	r3, [pc, #12]	; (bc24 <__aeabi_f2iz+0x3c>)
    bc18:	18d0      	adds	r0, r2, r3
    bc1a:	e7fb      	b.n	bc14 <__aeabi_f2iz+0x2c>
    bc1c:	3b96      	subs	r3, #150	; 0x96
    bc1e:	4099      	lsls	r1, r3
    bc20:	e7f4      	b.n	bc0c <__aeabi_f2iz+0x24>
    bc22:	46c0      	nop			; (mov r8, r8)
    bc24:	7fffffff 	.word	0x7fffffff

0000bc28 <__aeabi_i2f>:
    bc28:	b570      	push	{r4, r5, r6, lr}
    bc2a:	2800      	cmp	r0, #0
    bc2c:	d030      	beq.n	bc90 <__aeabi_i2f+0x68>
    bc2e:	17c3      	asrs	r3, r0, #31
    bc30:	18c4      	adds	r4, r0, r3
    bc32:	405c      	eors	r4, r3
    bc34:	0fc5      	lsrs	r5, r0, #31
    bc36:	0020      	movs	r0, r4
    bc38:	f001 fe86 	bl	d948 <__clzsi2>
    bc3c:	239e      	movs	r3, #158	; 0x9e
    bc3e:	1a1b      	subs	r3, r3, r0
    bc40:	2b96      	cmp	r3, #150	; 0x96
    bc42:	dc0d      	bgt.n	bc60 <__aeabi_i2f+0x38>
    bc44:	2296      	movs	r2, #150	; 0x96
    bc46:	1ad2      	subs	r2, r2, r3
    bc48:	4094      	lsls	r4, r2
    bc4a:	002a      	movs	r2, r5
    bc4c:	0264      	lsls	r4, r4, #9
    bc4e:	0a64      	lsrs	r4, r4, #9
    bc50:	b2db      	uxtb	r3, r3
    bc52:	0264      	lsls	r4, r4, #9
    bc54:	05db      	lsls	r3, r3, #23
    bc56:	0a60      	lsrs	r0, r4, #9
    bc58:	07d2      	lsls	r2, r2, #31
    bc5a:	4318      	orrs	r0, r3
    bc5c:	4310      	orrs	r0, r2
    bc5e:	bd70      	pop	{r4, r5, r6, pc}
    bc60:	2b99      	cmp	r3, #153	; 0x99
    bc62:	dc19      	bgt.n	bc98 <__aeabi_i2f+0x70>
    bc64:	2299      	movs	r2, #153	; 0x99
    bc66:	1ad2      	subs	r2, r2, r3
    bc68:	2a00      	cmp	r2, #0
    bc6a:	dd29      	ble.n	bcc0 <__aeabi_i2f+0x98>
    bc6c:	4094      	lsls	r4, r2
    bc6e:	0022      	movs	r2, r4
    bc70:	4c14      	ldr	r4, [pc, #80]	; (bcc4 <__aeabi_i2f+0x9c>)
    bc72:	4014      	ands	r4, r2
    bc74:	0751      	lsls	r1, r2, #29
    bc76:	d004      	beq.n	bc82 <__aeabi_i2f+0x5a>
    bc78:	210f      	movs	r1, #15
    bc7a:	400a      	ands	r2, r1
    bc7c:	2a04      	cmp	r2, #4
    bc7e:	d000      	beq.n	bc82 <__aeabi_i2f+0x5a>
    bc80:	3404      	adds	r4, #4
    bc82:	0162      	lsls	r2, r4, #5
    bc84:	d413      	bmi.n	bcae <__aeabi_i2f+0x86>
    bc86:	01a4      	lsls	r4, r4, #6
    bc88:	0a64      	lsrs	r4, r4, #9
    bc8a:	b2db      	uxtb	r3, r3
    bc8c:	002a      	movs	r2, r5
    bc8e:	e7e0      	b.n	bc52 <__aeabi_i2f+0x2a>
    bc90:	2200      	movs	r2, #0
    bc92:	2300      	movs	r3, #0
    bc94:	2400      	movs	r4, #0
    bc96:	e7dc      	b.n	bc52 <__aeabi_i2f+0x2a>
    bc98:	2205      	movs	r2, #5
    bc9a:	0021      	movs	r1, r4
    bc9c:	1a12      	subs	r2, r2, r0
    bc9e:	40d1      	lsrs	r1, r2
    bca0:	22b9      	movs	r2, #185	; 0xb9
    bca2:	1ad2      	subs	r2, r2, r3
    bca4:	4094      	lsls	r4, r2
    bca6:	1e62      	subs	r2, r4, #1
    bca8:	4194      	sbcs	r4, r2
    bcaa:	430c      	orrs	r4, r1
    bcac:	e7da      	b.n	bc64 <__aeabi_i2f+0x3c>
    bcae:	4b05      	ldr	r3, [pc, #20]	; (bcc4 <__aeabi_i2f+0x9c>)
    bcb0:	002a      	movs	r2, r5
    bcb2:	401c      	ands	r4, r3
    bcb4:	239f      	movs	r3, #159	; 0x9f
    bcb6:	01a4      	lsls	r4, r4, #6
    bcb8:	1a1b      	subs	r3, r3, r0
    bcba:	0a64      	lsrs	r4, r4, #9
    bcbc:	b2db      	uxtb	r3, r3
    bcbe:	e7c8      	b.n	bc52 <__aeabi_i2f+0x2a>
    bcc0:	0022      	movs	r2, r4
    bcc2:	e7d5      	b.n	bc70 <__aeabi_i2f+0x48>
    bcc4:	fbffffff 	.word	0xfbffffff

0000bcc8 <__aeabi_ui2f>:
    bcc8:	b510      	push	{r4, lr}
    bcca:	1e04      	subs	r4, r0, #0
    bccc:	d027      	beq.n	bd1e <__aeabi_ui2f+0x56>
    bcce:	f001 fe3b 	bl	d948 <__clzsi2>
    bcd2:	239e      	movs	r3, #158	; 0x9e
    bcd4:	1a1b      	subs	r3, r3, r0
    bcd6:	2b96      	cmp	r3, #150	; 0x96
    bcd8:	dc0a      	bgt.n	bcf0 <__aeabi_ui2f+0x28>
    bcda:	2296      	movs	r2, #150	; 0x96
    bcdc:	1ad2      	subs	r2, r2, r3
    bcde:	4094      	lsls	r4, r2
    bce0:	0264      	lsls	r4, r4, #9
    bce2:	0a64      	lsrs	r4, r4, #9
    bce4:	b2db      	uxtb	r3, r3
    bce6:	0264      	lsls	r4, r4, #9
    bce8:	05db      	lsls	r3, r3, #23
    bcea:	0a60      	lsrs	r0, r4, #9
    bcec:	4318      	orrs	r0, r3
    bcee:	bd10      	pop	{r4, pc}
    bcf0:	2b99      	cmp	r3, #153	; 0x99
    bcf2:	dc17      	bgt.n	bd24 <__aeabi_ui2f+0x5c>
    bcf4:	2299      	movs	r2, #153	; 0x99
    bcf6:	1ad2      	subs	r2, r2, r3
    bcf8:	2a00      	cmp	r2, #0
    bcfa:	dd27      	ble.n	bd4c <__aeabi_ui2f+0x84>
    bcfc:	4094      	lsls	r4, r2
    bcfe:	0022      	movs	r2, r4
    bd00:	4c13      	ldr	r4, [pc, #76]	; (bd50 <__aeabi_ui2f+0x88>)
    bd02:	4014      	ands	r4, r2
    bd04:	0751      	lsls	r1, r2, #29
    bd06:	d004      	beq.n	bd12 <__aeabi_ui2f+0x4a>
    bd08:	210f      	movs	r1, #15
    bd0a:	400a      	ands	r2, r1
    bd0c:	2a04      	cmp	r2, #4
    bd0e:	d000      	beq.n	bd12 <__aeabi_ui2f+0x4a>
    bd10:	3404      	adds	r4, #4
    bd12:	0162      	lsls	r2, r4, #5
    bd14:	d412      	bmi.n	bd3c <__aeabi_ui2f+0x74>
    bd16:	01a4      	lsls	r4, r4, #6
    bd18:	0a64      	lsrs	r4, r4, #9
    bd1a:	b2db      	uxtb	r3, r3
    bd1c:	e7e3      	b.n	bce6 <__aeabi_ui2f+0x1e>
    bd1e:	2300      	movs	r3, #0
    bd20:	2400      	movs	r4, #0
    bd22:	e7e0      	b.n	bce6 <__aeabi_ui2f+0x1e>
    bd24:	22b9      	movs	r2, #185	; 0xb9
    bd26:	0021      	movs	r1, r4
    bd28:	1ad2      	subs	r2, r2, r3
    bd2a:	4091      	lsls	r1, r2
    bd2c:	000a      	movs	r2, r1
    bd2e:	1e51      	subs	r1, r2, #1
    bd30:	418a      	sbcs	r2, r1
    bd32:	2105      	movs	r1, #5
    bd34:	1a09      	subs	r1, r1, r0
    bd36:	40cc      	lsrs	r4, r1
    bd38:	4314      	orrs	r4, r2
    bd3a:	e7db      	b.n	bcf4 <__aeabi_ui2f+0x2c>
    bd3c:	4b04      	ldr	r3, [pc, #16]	; (bd50 <__aeabi_ui2f+0x88>)
    bd3e:	401c      	ands	r4, r3
    bd40:	239f      	movs	r3, #159	; 0x9f
    bd42:	01a4      	lsls	r4, r4, #6
    bd44:	1a1b      	subs	r3, r3, r0
    bd46:	0a64      	lsrs	r4, r4, #9
    bd48:	b2db      	uxtb	r3, r3
    bd4a:	e7cc      	b.n	bce6 <__aeabi_ui2f+0x1e>
    bd4c:	0022      	movs	r2, r4
    bd4e:	e7d7      	b.n	bd00 <__aeabi_ui2f+0x38>
    bd50:	fbffffff 	.word	0xfbffffff

0000bd54 <__aeabi_dadd>:
    bd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd56:	4645      	mov	r5, r8
    bd58:	46de      	mov	lr, fp
    bd5a:	4657      	mov	r7, sl
    bd5c:	464e      	mov	r6, r9
    bd5e:	030c      	lsls	r4, r1, #12
    bd60:	b5e0      	push	{r5, r6, r7, lr}
    bd62:	004e      	lsls	r6, r1, #1
    bd64:	0fc9      	lsrs	r1, r1, #31
    bd66:	4688      	mov	r8, r1
    bd68:	000d      	movs	r5, r1
    bd6a:	0a61      	lsrs	r1, r4, #9
    bd6c:	0f44      	lsrs	r4, r0, #29
    bd6e:	430c      	orrs	r4, r1
    bd70:	00c7      	lsls	r7, r0, #3
    bd72:	0319      	lsls	r1, r3, #12
    bd74:	0058      	lsls	r0, r3, #1
    bd76:	0fdb      	lsrs	r3, r3, #31
    bd78:	469b      	mov	fp, r3
    bd7a:	0a4b      	lsrs	r3, r1, #9
    bd7c:	0f51      	lsrs	r1, r2, #29
    bd7e:	430b      	orrs	r3, r1
    bd80:	0d76      	lsrs	r6, r6, #21
    bd82:	0d40      	lsrs	r0, r0, #21
    bd84:	0019      	movs	r1, r3
    bd86:	00d2      	lsls	r2, r2, #3
    bd88:	45d8      	cmp	r8, fp
    bd8a:	d100      	bne.n	bd8e <__aeabi_dadd+0x3a>
    bd8c:	e0ae      	b.n	beec <__aeabi_dadd+0x198>
    bd8e:	1a35      	subs	r5, r6, r0
    bd90:	2d00      	cmp	r5, #0
    bd92:	dc00      	bgt.n	bd96 <__aeabi_dadd+0x42>
    bd94:	e0f6      	b.n	bf84 <__aeabi_dadd+0x230>
    bd96:	2800      	cmp	r0, #0
    bd98:	d10f      	bne.n	bdba <__aeabi_dadd+0x66>
    bd9a:	4313      	orrs	r3, r2
    bd9c:	d100      	bne.n	bda0 <__aeabi_dadd+0x4c>
    bd9e:	e0db      	b.n	bf58 <__aeabi_dadd+0x204>
    bda0:	1e6b      	subs	r3, r5, #1
    bda2:	2b00      	cmp	r3, #0
    bda4:	d000      	beq.n	bda8 <__aeabi_dadd+0x54>
    bda6:	e137      	b.n	c018 <__aeabi_dadd+0x2c4>
    bda8:	1aba      	subs	r2, r7, r2
    bdaa:	4297      	cmp	r7, r2
    bdac:	41bf      	sbcs	r7, r7
    bdae:	1a64      	subs	r4, r4, r1
    bdb0:	427f      	negs	r7, r7
    bdb2:	1be4      	subs	r4, r4, r7
    bdb4:	2601      	movs	r6, #1
    bdb6:	0017      	movs	r7, r2
    bdb8:	e024      	b.n	be04 <__aeabi_dadd+0xb0>
    bdba:	4bc6      	ldr	r3, [pc, #792]	; (c0d4 <__aeabi_dadd+0x380>)
    bdbc:	429e      	cmp	r6, r3
    bdbe:	d04d      	beq.n	be5c <__aeabi_dadd+0x108>
    bdc0:	2380      	movs	r3, #128	; 0x80
    bdc2:	041b      	lsls	r3, r3, #16
    bdc4:	4319      	orrs	r1, r3
    bdc6:	2d38      	cmp	r5, #56	; 0x38
    bdc8:	dd00      	ble.n	bdcc <__aeabi_dadd+0x78>
    bdca:	e107      	b.n	bfdc <__aeabi_dadd+0x288>
    bdcc:	2d1f      	cmp	r5, #31
    bdce:	dd00      	ble.n	bdd2 <__aeabi_dadd+0x7e>
    bdd0:	e138      	b.n	c044 <__aeabi_dadd+0x2f0>
    bdd2:	2020      	movs	r0, #32
    bdd4:	1b43      	subs	r3, r0, r5
    bdd6:	469a      	mov	sl, r3
    bdd8:	000b      	movs	r3, r1
    bdda:	4650      	mov	r0, sl
    bddc:	4083      	lsls	r3, r0
    bdde:	4699      	mov	r9, r3
    bde0:	0013      	movs	r3, r2
    bde2:	4648      	mov	r0, r9
    bde4:	40eb      	lsrs	r3, r5
    bde6:	4318      	orrs	r0, r3
    bde8:	0003      	movs	r3, r0
    bdea:	4650      	mov	r0, sl
    bdec:	4082      	lsls	r2, r0
    bdee:	1e50      	subs	r0, r2, #1
    bdf0:	4182      	sbcs	r2, r0
    bdf2:	40e9      	lsrs	r1, r5
    bdf4:	431a      	orrs	r2, r3
    bdf6:	1aba      	subs	r2, r7, r2
    bdf8:	1a61      	subs	r1, r4, r1
    bdfa:	4297      	cmp	r7, r2
    bdfc:	41a4      	sbcs	r4, r4
    bdfe:	0017      	movs	r7, r2
    be00:	4264      	negs	r4, r4
    be02:	1b0c      	subs	r4, r1, r4
    be04:	0223      	lsls	r3, r4, #8
    be06:	d562      	bpl.n	bece <__aeabi_dadd+0x17a>
    be08:	0264      	lsls	r4, r4, #9
    be0a:	0a65      	lsrs	r5, r4, #9
    be0c:	2d00      	cmp	r5, #0
    be0e:	d100      	bne.n	be12 <__aeabi_dadd+0xbe>
    be10:	e0df      	b.n	bfd2 <__aeabi_dadd+0x27e>
    be12:	0028      	movs	r0, r5
    be14:	f001 fd98 	bl	d948 <__clzsi2>
    be18:	0003      	movs	r3, r0
    be1a:	3b08      	subs	r3, #8
    be1c:	2b1f      	cmp	r3, #31
    be1e:	dd00      	ble.n	be22 <__aeabi_dadd+0xce>
    be20:	e0d2      	b.n	bfc8 <__aeabi_dadd+0x274>
    be22:	2220      	movs	r2, #32
    be24:	003c      	movs	r4, r7
    be26:	1ad2      	subs	r2, r2, r3
    be28:	409d      	lsls	r5, r3
    be2a:	40d4      	lsrs	r4, r2
    be2c:	409f      	lsls	r7, r3
    be2e:	4325      	orrs	r5, r4
    be30:	429e      	cmp	r6, r3
    be32:	dd00      	ble.n	be36 <__aeabi_dadd+0xe2>
    be34:	e0c4      	b.n	bfc0 <__aeabi_dadd+0x26c>
    be36:	1b9e      	subs	r6, r3, r6
    be38:	1c73      	adds	r3, r6, #1
    be3a:	2b1f      	cmp	r3, #31
    be3c:	dd00      	ble.n	be40 <__aeabi_dadd+0xec>
    be3e:	e0f1      	b.n	c024 <__aeabi_dadd+0x2d0>
    be40:	2220      	movs	r2, #32
    be42:	0038      	movs	r0, r7
    be44:	0029      	movs	r1, r5
    be46:	1ad2      	subs	r2, r2, r3
    be48:	40d8      	lsrs	r0, r3
    be4a:	4091      	lsls	r1, r2
    be4c:	4097      	lsls	r7, r2
    be4e:	002c      	movs	r4, r5
    be50:	4301      	orrs	r1, r0
    be52:	1e78      	subs	r0, r7, #1
    be54:	4187      	sbcs	r7, r0
    be56:	40dc      	lsrs	r4, r3
    be58:	2600      	movs	r6, #0
    be5a:	430f      	orrs	r7, r1
    be5c:	077b      	lsls	r3, r7, #29
    be5e:	d009      	beq.n	be74 <__aeabi_dadd+0x120>
    be60:	230f      	movs	r3, #15
    be62:	403b      	ands	r3, r7
    be64:	2b04      	cmp	r3, #4
    be66:	d005      	beq.n	be74 <__aeabi_dadd+0x120>
    be68:	1d3b      	adds	r3, r7, #4
    be6a:	42bb      	cmp	r3, r7
    be6c:	41bf      	sbcs	r7, r7
    be6e:	427f      	negs	r7, r7
    be70:	19e4      	adds	r4, r4, r7
    be72:	001f      	movs	r7, r3
    be74:	0223      	lsls	r3, r4, #8
    be76:	d52c      	bpl.n	bed2 <__aeabi_dadd+0x17e>
    be78:	4b96      	ldr	r3, [pc, #600]	; (c0d4 <__aeabi_dadd+0x380>)
    be7a:	3601      	adds	r6, #1
    be7c:	429e      	cmp	r6, r3
    be7e:	d100      	bne.n	be82 <__aeabi_dadd+0x12e>
    be80:	e09a      	b.n	bfb8 <__aeabi_dadd+0x264>
    be82:	4645      	mov	r5, r8
    be84:	4b94      	ldr	r3, [pc, #592]	; (c0d8 <__aeabi_dadd+0x384>)
    be86:	08ff      	lsrs	r7, r7, #3
    be88:	401c      	ands	r4, r3
    be8a:	0760      	lsls	r0, r4, #29
    be8c:	0576      	lsls	r6, r6, #21
    be8e:	0264      	lsls	r4, r4, #9
    be90:	4307      	orrs	r7, r0
    be92:	0b24      	lsrs	r4, r4, #12
    be94:	0d76      	lsrs	r6, r6, #21
    be96:	2100      	movs	r1, #0
    be98:	0324      	lsls	r4, r4, #12
    be9a:	0b23      	lsrs	r3, r4, #12
    be9c:	0d0c      	lsrs	r4, r1, #20
    be9e:	4a8f      	ldr	r2, [pc, #572]	; (c0dc <__aeabi_dadd+0x388>)
    bea0:	0524      	lsls	r4, r4, #20
    bea2:	431c      	orrs	r4, r3
    bea4:	4014      	ands	r4, r2
    bea6:	0533      	lsls	r3, r6, #20
    bea8:	4323      	orrs	r3, r4
    beaa:	005b      	lsls	r3, r3, #1
    beac:	07ed      	lsls	r5, r5, #31
    beae:	085b      	lsrs	r3, r3, #1
    beb0:	432b      	orrs	r3, r5
    beb2:	0038      	movs	r0, r7
    beb4:	0019      	movs	r1, r3
    beb6:	bc3c      	pop	{r2, r3, r4, r5}
    beb8:	4690      	mov	r8, r2
    beba:	4699      	mov	r9, r3
    bebc:	46a2      	mov	sl, r4
    bebe:	46ab      	mov	fp, r5
    bec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bec2:	4664      	mov	r4, ip
    bec4:	4304      	orrs	r4, r0
    bec6:	d100      	bne.n	beca <__aeabi_dadd+0x176>
    bec8:	e211      	b.n	c2ee <__aeabi_dadd+0x59a>
    beca:	0004      	movs	r4, r0
    becc:	4667      	mov	r7, ip
    bece:	077b      	lsls	r3, r7, #29
    bed0:	d1c6      	bne.n	be60 <__aeabi_dadd+0x10c>
    bed2:	4645      	mov	r5, r8
    bed4:	0760      	lsls	r0, r4, #29
    bed6:	08ff      	lsrs	r7, r7, #3
    bed8:	4307      	orrs	r7, r0
    beda:	08e4      	lsrs	r4, r4, #3
    bedc:	4b7d      	ldr	r3, [pc, #500]	; (c0d4 <__aeabi_dadd+0x380>)
    bede:	429e      	cmp	r6, r3
    bee0:	d030      	beq.n	bf44 <__aeabi_dadd+0x1f0>
    bee2:	0324      	lsls	r4, r4, #12
    bee4:	0576      	lsls	r6, r6, #21
    bee6:	0b24      	lsrs	r4, r4, #12
    bee8:	0d76      	lsrs	r6, r6, #21
    beea:	e7d4      	b.n	be96 <__aeabi_dadd+0x142>
    beec:	1a33      	subs	r3, r6, r0
    beee:	469a      	mov	sl, r3
    bef0:	2b00      	cmp	r3, #0
    bef2:	dd78      	ble.n	bfe6 <__aeabi_dadd+0x292>
    bef4:	2800      	cmp	r0, #0
    bef6:	d031      	beq.n	bf5c <__aeabi_dadd+0x208>
    bef8:	4876      	ldr	r0, [pc, #472]	; (c0d4 <__aeabi_dadd+0x380>)
    befa:	4286      	cmp	r6, r0
    befc:	d0ae      	beq.n	be5c <__aeabi_dadd+0x108>
    befe:	2080      	movs	r0, #128	; 0x80
    bf00:	0400      	lsls	r0, r0, #16
    bf02:	4301      	orrs	r1, r0
    bf04:	4653      	mov	r3, sl
    bf06:	2b38      	cmp	r3, #56	; 0x38
    bf08:	dc00      	bgt.n	bf0c <__aeabi_dadd+0x1b8>
    bf0a:	e0e9      	b.n	c0e0 <__aeabi_dadd+0x38c>
    bf0c:	430a      	orrs	r2, r1
    bf0e:	1e51      	subs	r1, r2, #1
    bf10:	418a      	sbcs	r2, r1
    bf12:	2100      	movs	r1, #0
    bf14:	19d2      	adds	r2, r2, r7
    bf16:	42ba      	cmp	r2, r7
    bf18:	41bf      	sbcs	r7, r7
    bf1a:	1909      	adds	r1, r1, r4
    bf1c:	427c      	negs	r4, r7
    bf1e:	0017      	movs	r7, r2
    bf20:	190c      	adds	r4, r1, r4
    bf22:	0223      	lsls	r3, r4, #8
    bf24:	d5d3      	bpl.n	bece <__aeabi_dadd+0x17a>
    bf26:	4b6b      	ldr	r3, [pc, #428]	; (c0d4 <__aeabi_dadd+0x380>)
    bf28:	3601      	adds	r6, #1
    bf2a:	429e      	cmp	r6, r3
    bf2c:	d100      	bne.n	bf30 <__aeabi_dadd+0x1dc>
    bf2e:	e13a      	b.n	c1a6 <__aeabi_dadd+0x452>
    bf30:	2001      	movs	r0, #1
    bf32:	4b69      	ldr	r3, [pc, #420]	; (c0d8 <__aeabi_dadd+0x384>)
    bf34:	401c      	ands	r4, r3
    bf36:	087b      	lsrs	r3, r7, #1
    bf38:	4007      	ands	r7, r0
    bf3a:	431f      	orrs	r7, r3
    bf3c:	07e0      	lsls	r0, r4, #31
    bf3e:	4307      	orrs	r7, r0
    bf40:	0864      	lsrs	r4, r4, #1
    bf42:	e78b      	b.n	be5c <__aeabi_dadd+0x108>
    bf44:	0023      	movs	r3, r4
    bf46:	433b      	orrs	r3, r7
    bf48:	d100      	bne.n	bf4c <__aeabi_dadd+0x1f8>
    bf4a:	e1cb      	b.n	c2e4 <__aeabi_dadd+0x590>
    bf4c:	2280      	movs	r2, #128	; 0x80
    bf4e:	0312      	lsls	r2, r2, #12
    bf50:	4314      	orrs	r4, r2
    bf52:	0324      	lsls	r4, r4, #12
    bf54:	0b24      	lsrs	r4, r4, #12
    bf56:	e79e      	b.n	be96 <__aeabi_dadd+0x142>
    bf58:	002e      	movs	r6, r5
    bf5a:	e77f      	b.n	be5c <__aeabi_dadd+0x108>
    bf5c:	0008      	movs	r0, r1
    bf5e:	4310      	orrs	r0, r2
    bf60:	d100      	bne.n	bf64 <__aeabi_dadd+0x210>
    bf62:	e0b4      	b.n	c0ce <__aeabi_dadd+0x37a>
    bf64:	1e58      	subs	r0, r3, #1
    bf66:	2800      	cmp	r0, #0
    bf68:	d000      	beq.n	bf6c <__aeabi_dadd+0x218>
    bf6a:	e0de      	b.n	c12a <__aeabi_dadd+0x3d6>
    bf6c:	18ba      	adds	r2, r7, r2
    bf6e:	42ba      	cmp	r2, r7
    bf70:	419b      	sbcs	r3, r3
    bf72:	1864      	adds	r4, r4, r1
    bf74:	425b      	negs	r3, r3
    bf76:	18e4      	adds	r4, r4, r3
    bf78:	0017      	movs	r7, r2
    bf7a:	2601      	movs	r6, #1
    bf7c:	0223      	lsls	r3, r4, #8
    bf7e:	d5a6      	bpl.n	bece <__aeabi_dadd+0x17a>
    bf80:	2602      	movs	r6, #2
    bf82:	e7d5      	b.n	bf30 <__aeabi_dadd+0x1dc>
    bf84:	2d00      	cmp	r5, #0
    bf86:	d16e      	bne.n	c066 <__aeabi_dadd+0x312>
    bf88:	1c70      	adds	r0, r6, #1
    bf8a:	0540      	lsls	r0, r0, #21
    bf8c:	0d40      	lsrs	r0, r0, #21
    bf8e:	2801      	cmp	r0, #1
    bf90:	dc00      	bgt.n	bf94 <__aeabi_dadd+0x240>
    bf92:	e0f9      	b.n	c188 <__aeabi_dadd+0x434>
    bf94:	1ab8      	subs	r0, r7, r2
    bf96:	4684      	mov	ip, r0
    bf98:	4287      	cmp	r7, r0
    bf9a:	4180      	sbcs	r0, r0
    bf9c:	1ae5      	subs	r5, r4, r3
    bf9e:	4240      	negs	r0, r0
    bfa0:	1a2d      	subs	r5, r5, r0
    bfa2:	0228      	lsls	r0, r5, #8
    bfa4:	d400      	bmi.n	bfa8 <__aeabi_dadd+0x254>
    bfa6:	e089      	b.n	c0bc <__aeabi_dadd+0x368>
    bfa8:	1bd7      	subs	r7, r2, r7
    bfaa:	42ba      	cmp	r2, r7
    bfac:	4192      	sbcs	r2, r2
    bfae:	1b1c      	subs	r4, r3, r4
    bfb0:	4252      	negs	r2, r2
    bfb2:	1aa5      	subs	r5, r4, r2
    bfb4:	46d8      	mov	r8, fp
    bfb6:	e729      	b.n	be0c <__aeabi_dadd+0xb8>
    bfb8:	4645      	mov	r5, r8
    bfba:	2400      	movs	r4, #0
    bfbc:	2700      	movs	r7, #0
    bfbe:	e76a      	b.n	be96 <__aeabi_dadd+0x142>
    bfc0:	4c45      	ldr	r4, [pc, #276]	; (c0d8 <__aeabi_dadd+0x384>)
    bfc2:	1af6      	subs	r6, r6, r3
    bfc4:	402c      	ands	r4, r5
    bfc6:	e749      	b.n	be5c <__aeabi_dadd+0x108>
    bfc8:	003d      	movs	r5, r7
    bfca:	3828      	subs	r0, #40	; 0x28
    bfcc:	4085      	lsls	r5, r0
    bfce:	2700      	movs	r7, #0
    bfd0:	e72e      	b.n	be30 <__aeabi_dadd+0xdc>
    bfd2:	0038      	movs	r0, r7
    bfd4:	f001 fcb8 	bl	d948 <__clzsi2>
    bfd8:	3020      	adds	r0, #32
    bfda:	e71d      	b.n	be18 <__aeabi_dadd+0xc4>
    bfdc:	430a      	orrs	r2, r1
    bfde:	1e51      	subs	r1, r2, #1
    bfe0:	418a      	sbcs	r2, r1
    bfe2:	2100      	movs	r1, #0
    bfe4:	e707      	b.n	bdf6 <__aeabi_dadd+0xa2>
    bfe6:	2b00      	cmp	r3, #0
    bfe8:	d000      	beq.n	bfec <__aeabi_dadd+0x298>
    bfea:	e0f3      	b.n	c1d4 <__aeabi_dadd+0x480>
    bfec:	1c70      	adds	r0, r6, #1
    bfee:	0543      	lsls	r3, r0, #21
    bff0:	0d5b      	lsrs	r3, r3, #21
    bff2:	2b01      	cmp	r3, #1
    bff4:	dc00      	bgt.n	bff8 <__aeabi_dadd+0x2a4>
    bff6:	e0ad      	b.n	c154 <__aeabi_dadd+0x400>
    bff8:	4b36      	ldr	r3, [pc, #216]	; (c0d4 <__aeabi_dadd+0x380>)
    bffa:	4298      	cmp	r0, r3
    bffc:	d100      	bne.n	c000 <__aeabi_dadd+0x2ac>
    bffe:	e0d1      	b.n	c1a4 <__aeabi_dadd+0x450>
    c000:	18ba      	adds	r2, r7, r2
    c002:	42ba      	cmp	r2, r7
    c004:	41bf      	sbcs	r7, r7
    c006:	1864      	adds	r4, r4, r1
    c008:	427f      	negs	r7, r7
    c00a:	19e4      	adds	r4, r4, r7
    c00c:	07e7      	lsls	r7, r4, #31
    c00e:	0852      	lsrs	r2, r2, #1
    c010:	4317      	orrs	r7, r2
    c012:	0864      	lsrs	r4, r4, #1
    c014:	0006      	movs	r6, r0
    c016:	e721      	b.n	be5c <__aeabi_dadd+0x108>
    c018:	482e      	ldr	r0, [pc, #184]	; (c0d4 <__aeabi_dadd+0x380>)
    c01a:	4285      	cmp	r5, r0
    c01c:	d100      	bne.n	c020 <__aeabi_dadd+0x2cc>
    c01e:	e093      	b.n	c148 <__aeabi_dadd+0x3f4>
    c020:	001d      	movs	r5, r3
    c022:	e6d0      	b.n	bdc6 <__aeabi_dadd+0x72>
    c024:	0029      	movs	r1, r5
    c026:	3e1f      	subs	r6, #31
    c028:	40f1      	lsrs	r1, r6
    c02a:	2b20      	cmp	r3, #32
    c02c:	d100      	bne.n	c030 <__aeabi_dadd+0x2dc>
    c02e:	e08d      	b.n	c14c <__aeabi_dadd+0x3f8>
    c030:	2240      	movs	r2, #64	; 0x40
    c032:	1ad3      	subs	r3, r2, r3
    c034:	409d      	lsls	r5, r3
    c036:	432f      	orrs	r7, r5
    c038:	1e7d      	subs	r5, r7, #1
    c03a:	41af      	sbcs	r7, r5
    c03c:	2400      	movs	r4, #0
    c03e:	430f      	orrs	r7, r1
    c040:	2600      	movs	r6, #0
    c042:	e744      	b.n	bece <__aeabi_dadd+0x17a>
    c044:	002b      	movs	r3, r5
    c046:	0008      	movs	r0, r1
    c048:	3b20      	subs	r3, #32
    c04a:	40d8      	lsrs	r0, r3
    c04c:	0003      	movs	r3, r0
    c04e:	2d20      	cmp	r5, #32
    c050:	d100      	bne.n	c054 <__aeabi_dadd+0x300>
    c052:	e07d      	b.n	c150 <__aeabi_dadd+0x3fc>
    c054:	2040      	movs	r0, #64	; 0x40
    c056:	1b45      	subs	r5, r0, r5
    c058:	40a9      	lsls	r1, r5
    c05a:	430a      	orrs	r2, r1
    c05c:	1e51      	subs	r1, r2, #1
    c05e:	418a      	sbcs	r2, r1
    c060:	2100      	movs	r1, #0
    c062:	431a      	orrs	r2, r3
    c064:	e6c7      	b.n	bdf6 <__aeabi_dadd+0xa2>
    c066:	2e00      	cmp	r6, #0
    c068:	d050      	beq.n	c10c <__aeabi_dadd+0x3b8>
    c06a:	4e1a      	ldr	r6, [pc, #104]	; (c0d4 <__aeabi_dadd+0x380>)
    c06c:	42b0      	cmp	r0, r6
    c06e:	d057      	beq.n	c120 <__aeabi_dadd+0x3cc>
    c070:	2680      	movs	r6, #128	; 0x80
    c072:	426b      	negs	r3, r5
    c074:	4699      	mov	r9, r3
    c076:	0436      	lsls	r6, r6, #16
    c078:	4334      	orrs	r4, r6
    c07a:	464b      	mov	r3, r9
    c07c:	2b38      	cmp	r3, #56	; 0x38
    c07e:	dd00      	ble.n	c082 <__aeabi_dadd+0x32e>
    c080:	e0d6      	b.n	c230 <__aeabi_dadd+0x4dc>
    c082:	2b1f      	cmp	r3, #31
    c084:	dd00      	ble.n	c088 <__aeabi_dadd+0x334>
    c086:	e135      	b.n	c2f4 <__aeabi_dadd+0x5a0>
    c088:	2620      	movs	r6, #32
    c08a:	1af5      	subs	r5, r6, r3
    c08c:	0026      	movs	r6, r4
    c08e:	40ae      	lsls	r6, r5
    c090:	46b2      	mov	sl, r6
    c092:	003e      	movs	r6, r7
    c094:	40de      	lsrs	r6, r3
    c096:	46ac      	mov	ip, r5
    c098:	0035      	movs	r5, r6
    c09a:	4656      	mov	r6, sl
    c09c:	432e      	orrs	r6, r5
    c09e:	4665      	mov	r5, ip
    c0a0:	40af      	lsls	r7, r5
    c0a2:	1e7d      	subs	r5, r7, #1
    c0a4:	41af      	sbcs	r7, r5
    c0a6:	40dc      	lsrs	r4, r3
    c0a8:	4337      	orrs	r7, r6
    c0aa:	1bd7      	subs	r7, r2, r7
    c0ac:	42ba      	cmp	r2, r7
    c0ae:	4192      	sbcs	r2, r2
    c0b0:	1b0c      	subs	r4, r1, r4
    c0b2:	4252      	negs	r2, r2
    c0b4:	1aa4      	subs	r4, r4, r2
    c0b6:	0006      	movs	r6, r0
    c0b8:	46d8      	mov	r8, fp
    c0ba:	e6a3      	b.n	be04 <__aeabi_dadd+0xb0>
    c0bc:	4664      	mov	r4, ip
    c0be:	4667      	mov	r7, ip
    c0c0:	432c      	orrs	r4, r5
    c0c2:	d000      	beq.n	c0c6 <__aeabi_dadd+0x372>
    c0c4:	e6a2      	b.n	be0c <__aeabi_dadd+0xb8>
    c0c6:	2500      	movs	r5, #0
    c0c8:	2600      	movs	r6, #0
    c0ca:	2700      	movs	r7, #0
    c0cc:	e706      	b.n	bedc <__aeabi_dadd+0x188>
    c0ce:	001e      	movs	r6, r3
    c0d0:	e6c4      	b.n	be5c <__aeabi_dadd+0x108>
    c0d2:	46c0      	nop			; (mov r8, r8)
    c0d4:	000007ff 	.word	0x000007ff
    c0d8:	ff7fffff 	.word	0xff7fffff
    c0dc:	800fffff 	.word	0x800fffff
    c0e0:	2b1f      	cmp	r3, #31
    c0e2:	dc63      	bgt.n	c1ac <__aeabi_dadd+0x458>
    c0e4:	2020      	movs	r0, #32
    c0e6:	1ac3      	subs	r3, r0, r3
    c0e8:	0008      	movs	r0, r1
    c0ea:	4098      	lsls	r0, r3
    c0ec:	469c      	mov	ip, r3
    c0ee:	4683      	mov	fp, r0
    c0f0:	4653      	mov	r3, sl
    c0f2:	0010      	movs	r0, r2
    c0f4:	40d8      	lsrs	r0, r3
    c0f6:	0003      	movs	r3, r0
    c0f8:	4658      	mov	r0, fp
    c0fa:	4318      	orrs	r0, r3
    c0fc:	4663      	mov	r3, ip
    c0fe:	409a      	lsls	r2, r3
    c100:	1e53      	subs	r3, r2, #1
    c102:	419a      	sbcs	r2, r3
    c104:	4653      	mov	r3, sl
    c106:	4302      	orrs	r2, r0
    c108:	40d9      	lsrs	r1, r3
    c10a:	e703      	b.n	bf14 <__aeabi_dadd+0x1c0>
    c10c:	0026      	movs	r6, r4
    c10e:	433e      	orrs	r6, r7
    c110:	d006      	beq.n	c120 <__aeabi_dadd+0x3cc>
    c112:	43eb      	mvns	r3, r5
    c114:	4699      	mov	r9, r3
    c116:	2b00      	cmp	r3, #0
    c118:	d0c7      	beq.n	c0aa <__aeabi_dadd+0x356>
    c11a:	4e94      	ldr	r6, [pc, #592]	; (c36c <__aeabi_dadd+0x618>)
    c11c:	42b0      	cmp	r0, r6
    c11e:	d1ac      	bne.n	c07a <__aeabi_dadd+0x326>
    c120:	000c      	movs	r4, r1
    c122:	0017      	movs	r7, r2
    c124:	0006      	movs	r6, r0
    c126:	46d8      	mov	r8, fp
    c128:	e698      	b.n	be5c <__aeabi_dadd+0x108>
    c12a:	4b90      	ldr	r3, [pc, #576]	; (c36c <__aeabi_dadd+0x618>)
    c12c:	459a      	cmp	sl, r3
    c12e:	d00b      	beq.n	c148 <__aeabi_dadd+0x3f4>
    c130:	4682      	mov	sl, r0
    c132:	e6e7      	b.n	bf04 <__aeabi_dadd+0x1b0>
    c134:	2800      	cmp	r0, #0
    c136:	d000      	beq.n	c13a <__aeabi_dadd+0x3e6>
    c138:	e09e      	b.n	c278 <__aeabi_dadd+0x524>
    c13a:	0018      	movs	r0, r3
    c13c:	4310      	orrs	r0, r2
    c13e:	d100      	bne.n	c142 <__aeabi_dadd+0x3ee>
    c140:	e0e9      	b.n	c316 <__aeabi_dadd+0x5c2>
    c142:	001c      	movs	r4, r3
    c144:	0017      	movs	r7, r2
    c146:	46d8      	mov	r8, fp
    c148:	4e88      	ldr	r6, [pc, #544]	; (c36c <__aeabi_dadd+0x618>)
    c14a:	e687      	b.n	be5c <__aeabi_dadd+0x108>
    c14c:	2500      	movs	r5, #0
    c14e:	e772      	b.n	c036 <__aeabi_dadd+0x2e2>
    c150:	2100      	movs	r1, #0
    c152:	e782      	b.n	c05a <__aeabi_dadd+0x306>
    c154:	0023      	movs	r3, r4
    c156:	433b      	orrs	r3, r7
    c158:	2e00      	cmp	r6, #0
    c15a:	d000      	beq.n	c15e <__aeabi_dadd+0x40a>
    c15c:	e0ab      	b.n	c2b6 <__aeabi_dadd+0x562>
    c15e:	2b00      	cmp	r3, #0
    c160:	d100      	bne.n	c164 <__aeabi_dadd+0x410>
    c162:	e0e7      	b.n	c334 <__aeabi_dadd+0x5e0>
    c164:	000b      	movs	r3, r1
    c166:	4313      	orrs	r3, r2
    c168:	d100      	bne.n	c16c <__aeabi_dadd+0x418>
    c16a:	e677      	b.n	be5c <__aeabi_dadd+0x108>
    c16c:	18ba      	adds	r2, r7, r2
    c16e:	42ba      	cmp	r2, r7
    c170:	41bf      	sbcs	r7, r7
    c172:	1864      	adds	r4, r4, r1
    c174:	427f      	negs	r7, r7
    c176:	19e4      	adds	r4, r4, r7
    c178:	0223      	lsls	r3, r4, #8
    c17a:	d400      	bmi.n	c17e <__aeabi_dadd+0x42a>
    c17c:	e0f2      	b.n	c364 <__aeabi_dadd+0x610>
    c17e:	4b7c      	ldr	r3, [pc, #496]	; (c370 <__aeabi_dadd+0x61c>)
    c180:	0017      	movs	r7, r2
    c182:	401c      	ands	r4, r3
    c184:	0006      	movs	r6, r0
    c186:	e669      	b.n	be5c <__aeabi_dadd+0x108>
    c188:	0020      	movs	r0, r4
    c18a:	4338      	orrs	r0, r7
    c18c:	2e00      	cmp	r6, #0
    c18e:	d1d1      	bne.n	c134 <__aeabi_dadd+0x3e0>
    c190:	2800      	cmp	r0, #0
    c192:	d15b      	bne.n	c24c <__aeabi_dadd+0x4f8>
    c194:	001c      	movs	r4, r3
    c196:	4314      	orrs	r4, r2
    c198:	d100      	bne.n	c19c <__aeabi_dadd+0x448>
    c19a:	e0a8      	b.n	c2ee <__aeabi_dadd+0x59a>
    c19c:	001c      	movs	r4, r3
    c19e:	0017      	movs	r7, r2
    c1a0:	46d8      	mov	r8, fp
    c1a2:	e65b      	b.n	be5c <__aeabi_dadd+0x108>
    c1a4:	0006      	movs	r6, r0
    c1a6:	2400      	movs	r4, #0
    c1a8:	2700      	movs	r7, #0
    c1aa:	e697      	b.n	bedc <__aeabi_dadd+0x188>
    c1ac:	4650      	mov	r0, sl
    c1ae:	000b      	movs	r3, r1
    c1b0:	3820      	subs	r0, #32
    c1b2:	40c3      	lsrs	r3, r0
    c1b4:	4699      	mov	r9, r3
    c1b6:	4653      	mov	r3, sl
    c1b8:	2b20      	cmp	r3, #32
    c1ba:	d100      	bne.n	c1be <__aeabi_dadd+0x46a>
    c1bc:	e095      	b.n	c2ea <__aeabi_dadd+0x596>
    c1be:	2340      	movs	r3, #64	; 0x40
    c1c0:	4650      	mov	r0, sl
    c1c2:	1a1b      	subs	r3, r3, r0
    c1c4:	4099      	lsls	r1, r3
    c1c6:	430a      	orrs	r2, r1
    c1c8:	1e51      	subs	r1, r2, #1
    c1ca:	418a      	sbcs	r2, r1
    c1cc:	464b      	mov	r3, r9
    c1ce:	2100      	movs	r1, #0
    c1d0:	431a      	orrs	r2, r3
    c1d2:	e69f      	b.n	bf14 <__aeabi_dadd+0x1c0>
    c1d4:	2e00      	cmp	r6, #0
    c1d6:	d130      	bne.n	c23a <__aeabi_dadd+0x4e6>
    c1d8:	0026      	movs	r6, r4
    c1da:	433e      	orrs	r6, r7
    c1dc:	d067      	beq.n	c2ae <__aeabi_dadd+0x55a>
    c1de:	43db      	mvns	r3, r3
    c1e0:	469a      	mov	sl, r3
    c1e2:	2b00      	cmp	r3, #0
    c1e4:	d01c      	beq.n	c220 <__aeabi_dadd+0x4cc>
    c1e6:	4e61      	ldr	r6, [pc, #388]	; (c36c <__aeabi_dadd+0x618>)
    c1e8:	42b0      	cmp	r0, r6
    c1ea:	d060      	beq.n	c2ae <__aeabi_dadd+0x55a>
    c1ec:	4653      	mov	r3, sl
    c1ee:	2b38      	cmp	r3, #56	; 0x38
    c1f0:	dd00      	ble.n	c1f4 <__aeabi_dadd+0x4a0>
    c1f2:	e096      	b.n	c322 <__aeabi_dadd+0x5ce>
    c1f4:	2b1f      	cmp	r3, #31
    c1f6:	dd00      	ble.n	c1fa <__aeabi_dadd+0x4a6>
    c1f8:	e09f      	b.n	c33a <__aeabi_dadd+0x5e6>
    c1fa:	2620      	movs	r6, #32
    c1fc:	1af3      	subs	r3, r6, r3
    c1fe:	0026      	movs	r6, r4
    c200:	409e      	lsls	r6, r3
    c202:	469c      	mov	ip, r3
    c204:	46b3      	mov	fp, r6
    c206:	4653      	mov	r3, sl
    c208:	003e      	movs	r6, r7
    c20a:	40de      	lsrs	r6, r3
    c20c:	0033      	movs	r3, r6
    c20e:	465e      	mov	r6, fp
    c210:	431e      	orrs	r6, r3
    c212:	4663      	mov	r3, ip
    c214:	409f      	lsls	r7, r3
    c216:	1e7b      	subs	r3, r7, #1
    c218:	419f      	sbcs	r7, r3
    c21a:	4653      	mov	r3, sl
    c21c:	40dc      	lsrs	r4, r3
    c21e:	4337      	orrs	r7, r6
    c220:	18bf      	adds	r7, r7, r2
    c222:	4297      	cmp	r7, r2
    c224:	4192      	sbcs	r2, r2
    c226:	1864      	adds	r4, r4, r1
    c228:	4252      	negs	r2, r2
    c22a:	18a4      	adds	r4, r4, r2
    c22c:	0006      	movs	r6, r0
    c22e:	e678      	b.n	bf22 <__aeabi_dadd+0x1ce>
    c230:	4327      	orrs	r7, r4
    c232:	1e7c      	subs	r4, r7, #1
    c234:	41a7      	sbcs	r7, r4
    c236:	2400      	movs	r4, #0
    c238:	e737      	b.n	c0aa <__aeabi_dadd+0x356>
    c23a:	4e4c      	ldr	r6, [pc, #304]	; (c36c <__aeabi_dadd+0x618>)
    c23c:	42b0      	cmp	r0, r6
    c23e:	d036      	beq.n	c2ae <__aeabi_dadd+0x55a>
    c240:	2680      	movs	r6, #128	; 0x80
    c242:	425b      	negs	r3, r3
    c244:	0436      	lsls	r6, r6, #16
    c246:	469a      	mov	sl, r3
    c248:	4334      	orrs	r4, r6
    c24a:	e7cf      	b.n	c1ec <__aeabi_dadd+0x498>
    c24c:	0018      	movs	r0, r3
    c24e:	4310      	orrs	r0, r2
    c250:	d100      	bne.n	c254 <__aeabi_dadd+0x500>
    c252:	e603      	b.n	be5c <__aeabi_dadd+0x108>
    c254:	1ab8      	subs	r0, r7, r2
    c256:	4684      	mov	ip, r0
    c258:	4567      	cmp	r7, ip
    c25a:	41ad      	sbcs	r5, r5
    c25c:	1ae0      	subs	r0, r4, r3
    c25e:	426d      	negs	r5, r5
    c260:	1b40      	subs	r0, r0, r5
    c262:	0205      	lsls	r5, r0, #8
    c264:	d400      	bmi.n	c268 <__aeabi_dadd+0x514>
    c266:	e62c      	b.n	bec2 <__aeabi_dadd+0x16e>
    c268:	1bd7      	subs	r7, r2, r7
    c26a:	42ba      	cmp	r2, r7
    c26c:	4192      	sbcs	r2, r2
    c26e:	1b1c      	subs	r4, r3, r4
    c270:	4252      	negs	r2, r2
    c272:	1aa4      	subs	r4, r4, r2
    c274:	46d8      	mov	r8, fp
    c276:	e5f1      	b.n	be5c <__aeabi_dadd+0x108>
    c278:	0018      	movs	r0, r3
    c27a:	4310      	orrs	r0, r2
    c27c:	d100      	bne.n	c280 <__aeabi_dadd+0x52c>
    c27e:	e763      	b.n	c148 <__aeabi_dadd+0x3f4>
    c280:	08f8      	lsrs	r0, r7, #3
    c282:	0767      	lsls	r7, r4, #29
    c284:	4307      	orrs	r7, r0
    c286:	2080      	movs	r0, #128	; 0x80
    c288:	08e4      	lsrs	r4, r4, #3
    c28a:	0300      	lsls	r0, r0, #12
    c28c:	4204      	tst	r4, r0
    c28e:	d008      	beq.n	c2a2 <__aeabi_dadd+0x54e>
    c290:	08dd      	lsrs	r5, r3, #3
    c292:	4205      	tst	r5, r0
    c294:	d105      	bne.n	c2a2 <__aeabi_dadd+0x54e>
    c296:	08d2      	lsrs	r2, r2, #3
    c298:	0759      	lsls	r1, r3, #29
    c29a:	4311      	orrs	r1, r2
    c29c:	000f      	movs	r7, r1
    c29e:	002c      	movs	r4, r5
    c2a0:	46d8      	mov	r8, fp
    c2a2:	0f7b      	lsrs	r3, r7, #29
    c2a4:	00e4      	lsls	r4, r4, #3
    c2a6:	431c      	orrs	r4, r3
    c2a8:	00ff      	lsls	r7, r7, #3
    c2aa:	4e30      	ldr	r6, [pc, #192]	; (c36c <__aeabi_dadd+0x618>)
    c2ac:	e5d6      	b.n	be5c <__aeabi_dadd+0x108>
    c2ae:	000c      	movs	r4, r1
    c2b0:	0017      	movs	r7, r2
    c2b2:	0006      	movs	r6, r0
    c2b4:	e5d2      	b.n	be5c <__aeabi_dadd+0x108>
    c2b6:	2b00      	cmp	r3, #0
    c2b8:	d038      	beq.n	c32c <__aeabi_dadd+0x5d8>
    c2ba:	000b      	movs	r3, r1
    c2bc:	4313      	orrs	r3, r2
    c2be:	d100      	bne.n	c2c2 <__aeabi_dadd+0x56e>
    c2c0:	e742      	b.n	c148 <__aeabi_dadd+0x3f4>
    c2c2:	08f8      	lsrs	r0, r7, #3
    c2c4:	0767      	lsls	r7, r4, #29
    c2c6:	4307      	orrs	r7, r0
    c2c8:	2080      	movs	r0, #128	; 0x80
    c2ca:	08e4      	lsrs	r4, r4, #3
    c2cc:	0300      	lsls	r0, r0, #12
    c2ce:	4204      	tst	r4, r0
    c2d0:	d0e7      	beq.n	c2a2 <__aeabi_dadd+0x54e>
    c2d2:	08cb      	lsrs	r3, r1, #3
    c2d4:	4203      	tst	r3, r0
    c2d6:	d1e4      	bne.n	c2a2 <__aeabi_dadd+0x54e>
    c2d8:	08d2      	lsrs	r2, r2, #3
    c2da:	0749      	lsls	r1, r1, #29
    c2dc:	4311      	orrs	r1, r2
    c2de:	000f      	movs	r7, r1
    c2e0:	001c      	movs	r4, r3
    c2e2:	e7de      	b.n	c2a2 <__aeabi_dadd+0x54e>
    c2e4:	2700      	movs	r7, #0
    c2e6:	2400      	movs	r4, #0
    c2e8:	e5d5      	b.n	be96 <__aeabi_dadd+0x142>
    c2ea:	2100      	movs	r1, #0
    c2ec:	e76b      	b.n	c1c6 <__aeabi_dadd+0x472>
    c2ee:	2500      	movs	r5, #0
    c2f0:	2700      	movs	r7, #0
    c2f2:	e5f3      	b.n	bedc <__aeabi_dadd+0x188>
    c2f4:	464e      	mov	r6, r9
    c2f6:	0025      	movs	r5, r4
    c2f8:	3e20      	subs	r6, #32
    c2fa:	40f5      	lsrs	r5, r6
    c2fc:	464b      	mov	r3, r9
    c2fe:	002e      	movs	r6, r5
    c300:	2b20      	cmp	r3, #32
    c302:	d02d      	beq.n	c360 <__aeabi_dadd+0x60c>
    c304:	2540      	movs	r5, #64	; 0x40
    c306:	1aed      	subs	r5, r5, r3
    c308:	40ac      	lsls	r4, r5
    c30a:	4327      	orrs	r7, r4
    c30c:	1e7c      	subs	r4, r7, #1
    c30e:	41a7      	sbcs	r7, r4
    c310:	2400      	movs	r4, #0
    c312:	4337      	orrs	r7, r6
    c314:	e6c9      	b.n	c0aa <__aeabi_dadd+0x356>
    c316:	2480      	movs	r4, #128	; 0x80
    c318:	2500      	movs	r5, #0
    c31a:	0324      	lsls	r4, r4, #12
    c31c:	4e13      	ldr	r6, [pc, #76]	; (c36c <__aeabi_dadd+0x618>)
    c31e:	2700      	movs	r7, #0
    c320:	e5dc      	b.n	bedc <__aeabi_dadd+0x188>
    c322:	4327      	orrs	r7, r4
    c324:	1e7c      	subs	r4, r7, #1
    c326:	41a7      	sbcs	r7, r4
    c328:	2400      	movs	r4, #0
    c32a:	e779      	b.n	c220 <__aeabi_dadd+0x4cc>
    c32c:	000c      	movs	r4, r1
    c32e:	0017      	movs	r7, r2
    c330:	4e0e      	ldr	r6, [pc, #56]	; (c36c <__aeabi_dadd+0x618>)
    c332:	e593      	b.n	be5c <__aeabi_dadd+0x108>
    c334:	000c      	movs	r4, r1
    c336:	0017      	movs	r7, r2
    c338:	e590      	b.n	be5c <__aeabi_dadd+0x108>
    c33a:	4656      	mov	r6, sl
    c33c:	0023      	movs	r3, r4
    c33e:	3e20      	subs	r6, #32
    c340:	40f3      	lsrs	r3, r6
    c342:	4699      	mov	r9, r3
    c344:	4653      	mov	r3, sl
    c346:	2b20      	cmp	r3, #32
    c348:	d00e      	beq.n	c368 <__aeabi_dadd+0x614>
    c34a:	2340      	movs	r3, #64	; 0x40
    c34c:	4656      	mov	r6, sl
    c34e:	1b9b      	subs	r3, r3, r6
    c350:	409c      	lsls	r4, r3
    c352:	4327      	orrs	r7, r4
    c354:	1e7c      	subs	r4, r7, #1
    c356:	41a7      	sbcs	r7, r4
    c358:	464b      	mov	r3, r9
    c35a:	2400      	movs	r4, #0
    c35c:	431f      	orrs	r7, r3
    c35e:	e75f      	b.n	c220 <__aeabi_dadd+0x4cc>
    c360:	2400      	movs	r4, #0
    c362:	e7d2      	b.n	c30a <__aeabi_dadd+0x5b6>
    c364:	0017      	movs	r7, r2
    c366:	e5b2      	b.n	bece <__aeabi_dadd+0x17a>
    c368:	2400      	movs	r4, #0
    c36a:	e7f2      	b.n	c352 <__aeabi_dadd+0x5fe>
    c36c:	000007ff 	.word	0x000007ff
    c370:	ff7fffff 	.word	0xff7fffff

0000c374 <__aeabi_ddiv>:
    c374:	b5f0      	push	{r4, r5, r6, r7, lr}
    c376:	4657      	mov	r7, sl
    c378:	4645      	mov	r5, r8
    c37a:	46de      	mov	lr, fp
    c37c:	464e      	mov	r6, r9
    c37e:	b5e0      	push	{r5, r6, r7, lr}
    c380:	004c      	lsls	r4, r1, #1
    c382:	030e      	lsls	r6, r1, #12
    c384:	b087      	sub	sp, #28
    c386:	4683      	mov	fp, r0
    c388:	4692      	mov	sl, r2
    c38a:	001d      	movs	r5, r3
    c38c:	4680      	mov	r8, r0
    c38e:	0b36      	lsrs	r6, r6, #12
    c390:	0d64      	lsrs	r4, r4, #21
    c392:	0fcf      	lsrs	r7, r1, #31
    c394:	2c00      	cmp	r4, #0
    c396:	d04f      	beq.n	c438 <__aeabi_ddiv+0xc4>
    c398:	4b6f      	ldr	r3, [pc, #444]	; (c558 <__aeabi_ddiv+0x1e4>)
    c39a:	429c      	cmp	r4, r3
    c39c:	d035      	beq.n	c40a <__aeabi_ddiv+0x96>
    c39e:	2380      	movs	r3, #128	; 0x80
    c3a0:	0f42      	lsrs	r2, r0, #29
    c3a2:	041b      	lsls	r3, r3, #16
    c3a4:	00f6      	lsls	r6, r6, #3
    c3a6:	4313      	orrs	r3, r2
    c3a8:	4333      	orrs	r3, r6
    c3aa:	4699      	mov	r9, r3
    c3ac:	00c3      	lsls	r3, r0, #3
    c3ae:	4698      	mov	r8, r3
    c3b0:	4b6a      	ldr	r3, [pc, #424]	; (c55c <__aeabi_ddiv+0x1e8>)
    c3b2:	2600      	movs	r6, #0
    c3b4:	469c      	mov	ip, r3
    c3b6:	2300      	movs	r3, #0
    c3b8:	4464      	add	r4, ip
    c3ba:	9303      	str	r3, [sp, #12]
    c3bc:	032b      	lsls	r3, r5, #12
    c3be:	0b1b      	lsrs	r3, r3, #12
    c3c0:	469b      	mov	fp, r3
    c3c2:	006b      	lsls	r3, r5, #1
    c3c4:	0fed      	lsrs	r5, r5, #31
    c3c6:	4650      	mov	r0, sl
    c3c8:	0d5b      	lsrs	r3, r3, #21
    c3ca:	9501      	str	r5, [sp, #4]
    c3cc:	d05e      	beq.n	c48c <__aeabi_ddiv+0x118>
    c3ce:	4a62      	ldr	r2, [pc, #392]	; (c558 <__aeabi_ddiv+0x1e4>)
    c3d0:	4293      	cmp	r3, r2
    c3d2:	d053      	beq.n	c47c <__aeabi_ddiv+0x108>
    c3d4:	465a      	mov	r2, fp
    c3d6:	00d1      	lsls	r1, r2, #3
    c3d8:	2280      	movs	r2, #128	; 0x80
    c3da:	0f40      	lsrs	r0, r0, #29
    c3dc:	0412      	lsls	r2, r2, #16
    c3de:	4302      	orrs	r2, r0
    c3e0:	430a      	orrs	r2, r1
    c3e2:	4693      	mov	fp, r2
    c3e4:	4652      	mov	r2, sl
    c3e6:	00d1      	lsls	r1, r2, #3
    c3e8:	4a5c      	ldr	r2, [pc, #368]	; (c55c <__aeabi_ddiv+0x1e8>)
    c3ea:	4694      	mov	ip, r2
    c3ec:	2200      	movs	r2, #0
    c3ee:	4463      	add	r3, ip
    c3f0:	0038      	movs	r0, r7
    c3f2:	4068      	eors	r0, r5
    c3f4:	4684      	mov	ip, r0
    c3f6:	9002      	str	r0, [sp, #8]
    c3f8:	1ae4      	subs	r4, r4, r3
    c3fa:	4316      	orrs	r6, r2
    c3fc:	2e0f      	cmp	r6, #15
    c3fe:	d900      	bls.n	c402 <__aeabi_ddiv+0x8e>
    c400:	e0b4      	b.n	c56c <__aeabi_ddiv+0x1f8>
    c402:	4b57      	ldr	r3, [pc, #348]	; (c560 <__aeabi_ddiv+0x1ec>)
    c404:	00b6      	lsls	r6, r6, #2
    c406:	599b      	ldr	r3, [r3, r6]
    c408:	469f      	mov	pc, r3
    c40a:	0003      	movs	r3, r0
    c40c:	4333      	orrs	r3, r6
    c40e:	4699      	mov	r9, r3
    c410:	d16c      	bne.n	c4ec <__aeabi_ddiv+0x178>
    c412:	2300      	movs	r3, #0
    c414:	4698      	mov	r8, r3
    c416:	3302      	adds	r3, #2
    c418:	2608      	movs	r6, #8
    c41a:	9303      	str	r3, [sp, #12]
    c41c:	e7ce      	b.n	c3bc <__aeabi_ddiv+0x48>
    c41e:	46cb      	mov	fp, r9
    c420:	4641      	mov	r1, r8
    c422:	9a03      	ldr	r2, [sp, #12]
    c424:	9701      	str	r7, [sp, #4]
    c426:	2a02      	cmp	r2, #2
    c428:	d165      	bne.n	c4f6 <__aeabi_ddiv+0x182>
    c42a:	9b01      	ldr	r3, [sp, #4]
    c42c:	4c4a      	ldr	r4, [pc, #296]	; (c558 <__aeabi_ddiv+0x1e4>)
    c42e:	469c      	mov	ip, r3
    c430:	2300      	movs	r3, #0
    c432:	2200      	movs	r2, #0
    c434:	4698      	mov	r8, r3
    c436:	e06b      	b.n	c510 <__aeabi_ddiv+0x19c>
    c438:	0003      	movs	r3, r0
    c43a:	4333      	orrs	r3, r6
    c43c:	4699      	mov	r9, r3
    c43e:	d04e      	beq.n	c4de <__aeabi_ddiv+0x16a>
    c440:	2e00      	cmp	r6, #0
    c442:	d100      	bne.n	c446 <__aeabi_ddiv+0xd2>
    c444:	e1bc      	b.n	c7c0 <__aeabi_ddiv+0x44c>
    c446:	0030      	movs	r0, r6
    c448:	f001 fa7e 	bl	d948 <__clzsi2>
    c44c:	0003      	movs	r3, r0
    c44e:	3b0b      	subs	r3, #11
    c450:	2b1c      	cmp	r3, #28
    c452:	dd00      	ble.n	c456 <__aeabi_ddiv+0xe2>
    c454:	e1ac      	b.n	c7b0 <__aeabi_ddiv+0x43c>
    c456:	221d      	movs	r2, #29
    c458:	1ad3      	subs	r3, r2, r3
    c45a:	465a      	mov	r2, fp
    c45c:	0001      	movs	r1, r0
    c45e:	40da      	lsrs	r2, r3
    c460:	3908      	subs	r1, #8
    c462:	408e      	lsls	r6, r1
    c464:	0013      	movs	r3, r2
    c466:	4333      	orrs	r3, r6
    c468:	4699      	mov	r9, r3
    c46a:	465b      	mov	r3, fp
    c46c:	408b      	lsls	r3, r1
    c46e:	4698      	mov	r8, r3
    c470:	2300      	movs	r3, #0
    c472:	4c3c      	ldr	r4, [pc, #240]	; (c564 <__aeabi_ddiv+0x1f0>)
    c474:	2600      	movs	r6, #0
    c476:	1a24      	subs	r4, r4, r0
    c478:	9303      	str	r3, [sp, #12]
    c47a:	e79f      	b.n	c3bc <__aeabi_ddiv+0x48>
    c47c:	4651      	mov	r1, sl
    c47e:	465a      	mov	r2, fp
    c480:	4311      	orrs	r1, r2
    c482:	d129      	bne.n	c4d8 <__aeabi_ddiv+0x164>
    c484:	2200      	movs	r2, #0
    c486:	4693      	mov	fp, r2
    c488:	3202      	adds	r2, #2
    c48a:	e7b1      	b.n	c3f0 <__aeabi_ddiv+0x7c>
    c48c:	4659      	mov	r1, fp
    c48e:	4301      	orrs	r1, r0
    c490:	d01e      	beq.n	c4d0 <__aeabi_ddiv+0x15c>
    c492:	465b      	mov	r3, fp
    c494:	2b00      	cmp	r3, #0
    c496:	d100      	bne.n	c49a <__aeabi_ddiv+0x126>
    c498:	e19e      	b.n	c7d8 <__aeabi_ddiv+0x464>
    c49a:	4658      	mov	r0, fp
    c49c:	f001 fa54 	bl	d948 <__clzsi2>
    c4a0:	0003      	movs	r3, r0
    c4a2:	3b0b      	subs	r3, #11
    c4a4:	2b1c      	cmp	r3, #28
    c4a6:	dd00      	ble.n	c4aa <__aeabi_ddiv+0x136>
    c4a8:	e18f      	b.n	c7ca <__aeabi_ddiv+0x456>
    c4aa:	0002      	movs	r2, r0
    c4ac:	4659      	mov	r1, fp
    c4ae:	3a08      	subs	r2, #8
    c4b0:	4091      	lsls	r1, r2
    c4b2:	468b      	mov	fp, r1
    c4b4:	211d      	movs	r1, #29
    c4b6:	1acb      	subs	r3, r1, r3
    c4b8:	4651      	mov	r1, sl
    c4ba:	40d9      	lsrs	r1, r3
    c4bc:	000b      	movs	r3, r1
    c4be:	4659      	mov	r1, fp
    c4c0:	430b      	orrs	r3, r1
    c4c2:	4651      	mov	r1, sl
    c4c4:	469b      	mov	fp, r3
    c4c6:	4091      	lsls	r1, r2
    c4c8:	4b26      	ldr	r3, [pc, #152]	; (c564 <__aeabi_ddiv+0x1f0>)
    c4ca:	2200      	movs	r2, #0
    c4cc:	1a1b      	subs	r3, r3, r0
    c4ce:	e78f      	b.n	c3f0 <__aeabi_ddiv+0x7c>
    c4d0:	2300      	movs	r3, #0
    c4d2:	2201      	movs	r2, #1
    c4d4:	469b      	mov	fp, r3
    c4d6:	e78b      	b.n	c3f0 <__aeabi_ddiv+0x7c>
    c4d8:	4651      	mov	r1, sl
    c4da:	2203      	movs	r2, #3
    c4dc:	e788      	b.n	c3f0 <__aeabi_ddiv+0x7c>
    c4de:	2300      	movs	r3, #0
    c4e0:	4698      	mov	r8, r3
    c4e2:	3301      	adds	r3, #1
    c4e4:	2604      	movs	r6, #4
    c4e6:	2400      	movs	r4, #0
    c4e8:	9303      	str	r3, [sp, #12]
    c4ea:	e767      	b.n	c3bc <__aeabi_ddiv+0x48>
    c4ec:	2303      	movs	r3, #3
    c4ee:	46b1      	mov	r9, r6
    c4f0:	9303      	str	r3, [sp, #12]
    c4f2:	260c      	movs	r6, #12
    c4f4:	e762      	b.n	c3bc <__aeabi_ddiv+0x48>
    c4f6:	2a03      	cmp	r2, #3
    c4f8:	d100      	bne.n	c4fc <__aeabi_ddiv+0x188>
    c4fa:	e25c      	b.n	c9b6 <__aeabi_ddiv+0x642>
    c4fc:	9b01      	ldr	r3, [sp, #4]
    c4fe:	2a01      	cmp	r2, #1
    c500:	d000      	beq.n	c504 <__aeabi_ddiv+0x190>
    c502:	e1e4      	b.n	c8ce <__aeabi_ddiv+0x55a>
    c504:	4013      	ands	r3, r2
    c506:	469c      	mov	ip, r3
    c508:	2300      	movs	r3, #0
    c50a:	2400      	movs	r4, #0
    c50c:	2200      	movs	r2, #0
    c50e:	4698      	mov	r8, r3
    c510:	2100      	movs	r1, #0
    c512:	0312      	lsls	r2, r2, #12
    c514:	0b13      	lsrs	r3, r2, #12
    c516:	0d0a      	lsrs	r2, r1, #20
    c518:	0512      	lsls	r2, r2, #20
    c51a:	431a      	orrs	r2, r3
    c51c:	0523      	lsls	r3, r4, #20
    c51e:	4c12      	ldr	r4, [pc, #72]	; (c568 <__aeabi_ddiv+0x1f4>)
    c520:	4640      	mov	r0, r8
    c522:	4022      	ands	r2, r4
    c524:	4313      	orrs	r3, r2
    c526:	4662      	mov	r2, ip
    c528:	005b      	lsls	r3, r3, #1
    c52a:	07d2      	lsls	r2, r2, #31
    c52c:	085b      	lsrs	r3, r3, #1
    c52e:	4313      	orrs	r3, r2
    c530:	0019      	movs	r1, r3
    c532:	b007      	add	sp, #28
    c534:	bc3c      	pop	{r2, r3, r4, r5}
    c536:	4690      	mov	r8, r2
    c538:	4699      	mov	r9, r3
    c53a:	46a2      	mov	sl, r4
    c53c:	46ab      	mov	fp, r5
    c53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c540:	2300      	movs	r3, #0
    c542:	2280      	movs	r2, #128	; 0x80
    c544:	469c      	mov	ip, r3
    c546:	0312      	lsls	r2, r2, #12
    c548:	4698      	mov	r8, r3
    c54a:	4c03      	ldr	r4, [pc, #12]	; (c558 <__aeabi_ddiv+0x1e4>)
    c54c:	e7e0      	b.n	c510 <__aeabi_ddiv+0x19c>
    c54e:	2300      	movs	r3, #0
    c550:	4c01      	ldr	r4, [pc, #4]	; (c558 <__aeabi_ddiv+0x1e4>)
    c552:	2200      	movs	r2, #0
    c554:	4698      	mov	r8, r3
    c556:	e7db      	b.n	c510 <__aeabi_ddiv+0x19c>
    c558:	000007ff 	.word	0x000007ff
    c55c:	fffffc01 	.word	0xfffffc01
    c560:	0000ef20 	.word	0x0000ef20
    c564:	fffffc0d 	.word	0xfffffc0d
    c568:	800fffff 	.word	0x800fffff
    c56c:	45d9      	cmp	r9, fp
    c56e:	d900      	bls.n	c572 <__aeabi_ddiv+0x1fe>
    c570:	e139      	b.n	c7e6 <__aeabi_ddiv+0x472>
    c572:	d100      	bne.n	c576 <__aeabi_ddiv+0x202>
    c574:	e134      	b.n	c7e0 <__aeabi_ddiv+0x46c>
    c576:	2300      	movs	r3, #0
    c578:	4646      	mov	r6, r8
    c57a:	464d      	mov	r5, r9
    c57c:	469a      	mov	sl, r3
    c57e:	3c01      	subs	r4, #1
    c580:	465b      	mov	r3, fp
    c582:	0e0a      	lsrs	r2, r1, #24
    c584:	021b      	lsls	r3, r3, #8
    c586:	431a      	orrs	r2, r3
    c588:	020b      	lsls	r3, r1, #8
    c58a:	0c17      	lsrs	r7, r2, #16
    c58c:	9303      	str	r3, [sp, #12]
    c58e:	0413      	lsls	r3, r2, #16
    c590:	0c1b      	lsrs	r3, r3, #16
    c592:	0039      	movs	r1, r7
    c594:	0028      	movs	r0, r5
    c596:	4690      	mov	r8, r2
    c598:	9301      	str	r3, [sp, #4]
    c59a:	f7fe fab7 	bl	ab0c <__udivsi3>
    c59e:	0002      	movs	r2, r0
    c5a0:	9b01      	ldr	r3, [sp, #4]
    c5a2:	4683      	mov	fp, r0
    c5a4:	435a      	muls	r2, r3
    c5a6:	0028      	movs	r0, r5
    c5a8:	0039      	movs	r1, r7
    c5aa:	4691      	mov	r9, r2
    c5ac:	f7fe fb34 	bl	ac18 <__aeabi_uidivmod>
    c5b0:	0c35      	lsrs	r5, r6, #16
    c5b2:	0409      	lsls	r1, r1, #16
    c5b4:	430d      	orrs	r5, r1
    c5b6:	45a9      	cmp	r9, r5
    c5b8:	d90d      	bls.n	c5d6 <__aeabi_ddiv+0x262>
    c5ba:	465b      	mov	r3, fp
    c5bc:	4445      	add	r5, r8
    c5be:	3b01      	subs	r3, #1
    c5c0:	45a8      	cmp	r8, r5
    c5c2:	d900      	bls.n	c5c6 <__aeabi_ddiv+0x252>
    c5c4:	e13a      	b.n	c83c <__aeabi_ddiv+0x4c8>
    c5c6:	45a9      	cmp	r9, r5
    c5c8:	d800      	bhi.n	c5cc <__aeabi_ddiv+0x258>
    c5ca:	e137      	b.n	c83c <__aeabi_ddiv+0x4c8>
    c5cc:	2302      	movs	r3, #2
    c5ce:	425b      	negs	r3, r3
    c5d0:	469c      	mov	ip, r3
    c5d2:	4445      	add	r5, r8
    c5d4:	44e3      	add	fp, ip
    c5d6:	464b      	mov	r3, r9
    c5d8:	1aeb      	subs	r3, r5, r3
    c5da:	0039      	movs	r1, r7
    c5dc:	0018      	movs	r0, r3
    c5de:	9304      	str	r3, [sp, #16]
    c5e0:	f7fe fa94 	bl	ab0c <__udivsi3>
    c5e4:	9b01      	ldr	r3, [sp, #4]
    c5e6:	0005      	movs	r5, r0
    c5e8:	4343      	muls	r3, r0
    c5ea:	0039      	movs	r1, r7
    c5ec:	9804      	ldr	r0, [sp, #16]
    c5ee:	4699      	mov	r9, r3
    c5f0:	f7fe fb12 	bl	ac18 <__aeabi_uidivmod>
    c5f4:	0433      	lsls	r3, r6, #16
    c5f6:	0409      	lsls	r1, r1, #16
    c5f8:	0c1b      	lsrs	r3, r3, #16
    c5fa:	430b      	orrs	r3, r1
    c5fc:	4599      	cmp	r9, r3
    c5fe:	d909      	bls.n	c614 <__aeabi_ddiv+0x2a0>
    c600:	4443      	add	r3, r8
    c602:	1e6a      	subs	r2, r5, #1
    c604:	4598      	cmp	r8, r3
    c606:	d900      	bls.n	c60a <__aeabi_ddiv+0x296>
    c608:	e11a      	b.n	c840 <__aeabi_ddiv+0x4cc>
    c60a:	4599      	cmp	r9, r3
    c60c:	d800      	bhi.n	c610 <__aeabi_ddiv+0x29c>
    c60e:	e117      	b.n	c840 <__aeabi_ddiv+0x4cc>
    c610:	3d02      	subs	r5, #2
    c612:	4443      	add	r3, r8
    c614:	464a      	mov	r2, r9
    c616:	1a9b      	subs	r3, r3, r2
    c618:	465a      	mov	r2, fp
    c61a:	0412      	lsls	r2, r2, #16
    c61c:	432a      	orrs	r2, r5
    c61e:	9903      	ldr	r1, [sp, #12]
    c620:	4693      	mov	fp, r2
    c622:	0c10      	lsrs	r0, r2, #16
    c624:	0c0a      	lsrs	r2, r1, #16
    c626:	4691      	mov	r9, r2
    c628:	0409      	lsls	r1, r1, #16
    c62a:	465a      	mov	r2, fp
    c62c:	0c09      	lsrs	r1, r1, #16
    c62e:	464e      	mov	r6, r9
    c630:	000d      	movs	r5, r1
    c632:	0412      	lsls	r2, r2, #16
    c634:	0c12      	lsrs	r2, r2, #16
    c636:	4345      	muls	r5, r0
    c638:	9105      	str	r1, [sp, #20]
    c63a:	4351      	muls	r1, r2
    c63c:	4372      	muls	r2, r6
    c63e:	4370      	muls	r0, r6
    c640:	1952      	adds	r2, r2, r5
    c642:	0c0e      	lsrs	r6, r1, #16
    c644:	18b2      	adds	r2, r6, r2
    c646:	4295      	cmp	r5, r2
    c648:	d903      	bls.n	c652 <__aeabi_ddiv+0x2de>
    c64a:	2580      	movs	r5, #128	; 0x80
    c64c:	026d      	lsls	r5, r5, #9
    c64e:	46ac      	mov	ip, r5
    c650:	4460      	add	r0, ip
    c652:	0c15      	lsrs	r5, r2, #16
    c654:	0409      	lsls	r1, r1, #16
    c656:	0412      	lsls	r2, r2, #16
    c658:	0c09      	lsrs	r1, r1, #16
    c65a:	1828      	adds	r0, r5, r0
    c65c:	1852      	adds	r2, r2, r1
    c65e:	4283      	cmp	r3, r0
    c660:	d200      	bcs.n	c664 <__aeabi_ddiv+0x2f0>
    c662:	e0ce      	b.n	c802 <__aeabi_ddiv+0x48e>
    c664:	d100      	bne.n	c668 <__aeabi_ddiv+0x2f4>
    c666:	e0c8      	b.n	c7fa <__aeabi_ddiv+0x486>
    c668:	1a1d      	subs	r5, r3, r0
    c66a:	4653      	mov	r3, sl
    c66c:	1a9e      	subs	r6, r3, r2
    c66e:	45b2      	cmp	sl, r6
    c670:	4192      	sbcs	r2, r2
    c672:	4252      	negs	r2, r2
    c674:	1aab      	subs	r3, r5, r2
    c676:	469a      	mov	sl, r3
    c678:	4598      	cmp	r8, r3
    c67a:	d100      	bne.n	c67e <__aeabi_ddiv+0x30a>
    c67c:	e117      	b.n	c8ae <__aeabi_ddiv+0x53a>
    c67e:	0039      	movs	r1, r7
    c680:	0018      	movs	r0, r3
    c682:	f7fe fa43 	bl	ab0c <__udivsi3>
    c686:	9b01      	ldr	r3, [sp, #4]
    c688:	0005      	movs	r5, r0
    c68a:	4343      	muls	r3, r0
    c68c:	0039      	movs	r1, r7
    c68e:	4650      	mov	r0, sl
    c690:	9304      	str	r3, [sp, #16]
    c692:	f7fe fac1 	bl	ac18 <__aeabi_uidivmod>
    c696:	9804      	ldr	r0, [sp, #16]
    c698:	040b      	lsls	r3, r1, #16
    c69a:	0c31      	lsrs	r1, r6, #16
    c69c:	4319      	orrs	r1, r3
    c69e:	4288      	cmp	r0, r1
    c6a0:	d909      	bls.n	c6b6 <__aeabi_ddiv+0x342>
    c6a2:	4441      	add	r1, r8
    c6a4:	1e6b      	subs	r3, r5, #1
    c6a6:	4588      	cmp	r8, r1
    c6a8:	d900      	bls.n	c6ac <__aeabi_ddiv+0x338>
    c6aa:	e107      	b.n	c8bc <__aeabi_ddiv+0x548>
    c6ac:	4288      	cmp	r0, r1
    c6ae:	d800      	bhi.n	c6b2 <__aeabi_ddiv+0x33e>
    c6b0:	e104      	b.n	c8bc <__aeabi_ddiv+0x548>
    c6b2:	3d02      	subs	r5, #2
    c6b4:	4441      	add	r1, r8
    c6b6:	9b04      	ldr	r3, [sp, #16]
    c6b8:	1acb      	subs	r3, r1, r3
    c6ba:	0018      	movs	r0, r3
    c6bc:	0039      	movs	r1, r7
    c6be:	9304      	str	r3, [sp, #16]
    c6c0:	f7fe fa24 	bl	ab0c <__udivsi3>
    c6c4:	9b01      	ldr	r3, [sp, #4]
    c6c6:	4682      	mov	sl, r0
    c6c8:	4343      	muls	r3, r0
    c6ca:	0039      	movs	r1, r7
    c6cc:	9804      	ldr	r0, [sp, #16]
    c6ce:	9301      	str	r3, [sp, #4]
    c6d0:	f7fe faa2 	bl	ac18 <__aeabi_uidivmod>
    c6d4:	9801      	ldr	r0, [sp, #4]
    c6d6:	040b      	lsls	r3, r1, #16
    c6d8:	0431      	lsls	r1, r6, #16
    c6da:	0c09      	lsrs	r1, r1, #16
    c6dc:	4319      	orrs	r1, r3
    c6de:	4288      	cmp	r0, r1
    c6e0:	d90d      	bls.n	c6fe <__aeabi_ddiv+0x38a>
    c6e2:	4653      	mov	r3, sl
    c6e4:	4441      	add	r1, r8
    c6e6:	3b01      	subs	r3, #1
    c6e8:	4588      	cmp	r8, r1
    c6ea:	d900      	bls.n	c6ee <__aeabi_ddiv+0x37a>
    c6ec:	e0e8      	b.n	c8c0 <__aeabi_ddiv+0x54c>
    c6ee:	4288      	cmp	r0, r1
    c6f0:	d800      	bhi.n	c6f4 <__aeabi_ddiv+0x380>
    c6f2:	e0e5      	b.n	c8c0 <__aeabi_ddiv+0x54c>
    c6f4:	2302      	movs	r3, #2
    c6f6:	425b      	negs	r3, r3
    c6f8:	469c      	mov	ip, r3
    c6fa:	4441      	add	r1, r8
    c6fc:	44e2      	add	sl, ip
    c6fe:	9b01      	ldr	r3, [sp, #4]
    c700:	042d      	lsls	r5, r5, #16
    c702:	1ace      	subs	r6, r1, r3
    c704:	4651      	mov	r1, sl
    c706:	4329      	orrs	r1, r5
    c708:	9d05      	ldr	r5, [sp, #20]
    c70a:	464f      	mov	r7, r9
    c70c:	002a      	movs	r2, r5
    c70e:	040b      	lsls	r3, r1, #16
    c710:	0c08      	lsrs	r0, r1, #16
    c712:	0c1b      	lsrs	r3, r3, #16
    c714:	435a      	muls	r2, r3
    c716:	4345      	muls	r5, r0
    c718:	437b      	muls	r3, r7
    c71a:	4378      	muls	r0, r7
    c71c:	195b      	adds	r3, r3, r5
    c71e:	0c17      	lsrs	r7, r2, #16
    c720:	18fb      	adds	r3, r7, r3
    c722:	429d      	cmp	r5, r3
    c724:	d903      	bls.n	c72e <__aeabi_ddiv+0x3ba>
    c726:	2580      	movs	r5, #128	; 0x80
    c728:	026d      	lsls	r5, r5, #9
    c72a:	46ac      	mov	ip, r5
    c72c:	4460      	add	r0, ip
    c72e:	0c1d      	lsrs	r5, r3, #16
    c730:	0412      	lsls	r2, r2, #16
    c732:	041b      	lsls	r3, r3, #16
    c734:	0c12      	lsrs	r2, r2, #16
    c736:	1828      	adds	r0, r5, r0
    c738:	189b      	adds	r3, r3, r2
    c73a:	4286      	cmp	r6, r0
    c73c:	d200      	bcs.n	c740 <__aeabi_ddiv+0x3cc>
    c73e:	e093      	b.n	c868 <__aeabi_ddiv+0x4f4>
    c740:	d100      	bne.n	c744 <__aeabi_ddiv+0x3d0>
    c742:	e08e      	b.n	c862 <__aeabi_ddiv+0x4ee>
    c744:	2301      	movs	r3, #1
    c746:	4319      	orrs	r1, r3
    c748:	4ba0      	ldr	r3, [pc, #640]	; (c9cc <__aeabi_ddiv+0x658>)
    c74a:	18e3      	adds	r3, r4, r3
    c74c:	2b00      	cmp	r3, #0
    c74e:	dc00      	bgt.n	c752 <__aeabi_ddiv+0x3de>
    c750:	e099      	b.n	c886 <__aeabi_ddiv+0x512>
    c752:	074a      	lsls	r2, r1, #29
    c754:	d000      	beq.n	c758 <__aeabi_ddiv+0x3e4>
    c756:	e09e      	b.n	c896 <__aeabi_ddiv+0x522>
    c758:	465a      	mov	r2, fp
    c75a:	01d2      	lsls	r2, r2, #7
    c75c:	d506      	bpl.n	c76c <__aeabi_ddiv+0x3f8>
    c75e:	465a      	mov	r2, fp
    c760:	4b9b      	ldr	r3, [pc, #620]	; (c9d0 <__aeabi_ddiv+0x65c>)
    c762:	401a      	ands	r2, r3
    c764:	2380      	movs	r3, #128	; 0x80
    c766:	4693      	mov	fp, r2
    c768:	00db      	lsls	r3, r3, #3
    c76a:	18e3      	adds	r3, r4, r3
    c76c:	4a99      	ldr	r2, [pc, #612]	; (c9d4 <__aeabi_ddiv+0x660>)
    c76e:	4293      	cmp	r3, r2
    c770:	dd68      	ble.n	c844 <__aeabi_ddiv+0x4d0>
    c772:	2301      	movs	r3, #1
    c774:	9a02      	ldr	r2, [sp, #8]
    c776:	4c98      	ldr	r4, [pc, #608]	; (c9d8 <__aeabi_ddiv+0x664>)
    c778:	401a      	ands	r2, r3
    c77a:	2300      	movs	r3, #0
    c77c:	4694      	mov	ip, r2
    c77e:	4698      	mov	r8, r3
    c780:	2200      	movs	r2, #0
    c782:	e6c5      	b.n	c510 <__aeabi_ddiv+0x19c>
    c784:	2280      	movs	r2, #128	; 0x80
    c786:	464b      	mov	r3, r9
    c788:	0312      	lsls	r2, r2, #12
    c78a:	4213      	tst	r3, r2
    c78c:	d00a      	beq.n	c7a4 <__aeabi_ddiv+0x430>
    c78e:	465b      	mov	r3, fp
    c790:	4213      	tst	r3, r2
    c792:	d106      	bne.n	c7a2 <__aeabi_ddiv+0x42e>
    c794:	431a      	orrs	r2, r3
    c796:	0312      	lsls	r2, r2, #12
    c798:	0b12      	lsrs	r2, r2, #12
    c79a:	46ac      	mov	ip, r5
    c79c:	4688      	mov	r8, r1
    c79e:	4c8e      	ldr	r4, [pc, #568]	; (c9d8 <__aeabi_ddiv+0x664>)
    c7a0:	e6b6      	b.n	c510 <__aeabi_ddiv+0x19c>
    c7a2:	464b      	mov	r3, r9
    c7a4:	431a      	orrs	r2, r3
    c7a6:	0312      	lsls	r2, r2, #12
    c7a8:	0b12      	lsrs	r2, r2, #12
    c7aa:	46bc      	mov	ip, r7
    c7ac:	4c8a      	ldr	r4, [pc, #552]	; (c9d8 <__aeabi_ddiv+0x664>)
    c7ae:	e6af      	b.n	c510 <__aeabi_ddiv+0x19c>
    c7b0:	0003      	movs	r3, r0
    c7b2:	465a      	mov	r2, fp
    c7b4:	3b28      	subs	r3, #40	; 0x28
    c7b6:	409a      	lsls	r2, r3
    c7b8:	2300      	movs	r3, #0
    c7ba:	4691      	mov	r9, r2
    c7bc:	4698      	mov	r8, r3
    c7be:	e657      	b.n	c470 <__aeabi_ddiv+0xfc>
    c7c0:	4658      	mov	r0, fp
    c7c2:	f001 f8c1 	bl	d948 <__clzsi2>
    c7c6:	3020      	adds	r0, #32
    c7c8:	e640      	b.n	c44c <__aeabi_ddiv+0xd8>
    c7ca:	0003      	movs	r3, r0
    c7cc:	4652      	mov	r2, sl
    c7ce:	3b28      	subs	r3, #40	; 0x28
    c7d0:	409a      	lsls	r2, r3
    c7d2:	2100      	movs	r1, #0
    c7d4:	4693      	mov	fp, r2
    c7d6:	e677      	b.n	c4c8 <__aeabi_ddiv+0x154>
    c7d8:	f001 f8b6 	bl	d948 <__clzsi2>
    c7dc:	3020      	adds	r0, #32
    c7de:	e65f      	b.n	c4a0 <__aeabi_ddiv+0x12c>
    c7e0:	4588      	cmp	r8, r1
    c7e2:	d200      	bcs.n	c7e6 <__aeabi_ddiv+0x472>
    c7e4:	e6c7      	b.n	c576 <__aeabi_ddiv+0x202>
    c7e6:	464b      	mov	r3, r9
    c7e8:	07de      	lsls	r6, r3, #31
    c7ea:	085d      	lsrs	r5, r3, #1
    c7ec:	4643      	mov	r3, r8
    c7ee:	085b      	lsrs	r3, r3, #1
    c7f0:	431e      	orrs	r6, r3
    c7f2:	4643      	mov	r3, r8
    c7f4:	07db      	lsls	r3, r3, #31
    c7f6:	469a      	mov	sl, r3
    c7f8:	e6c2      	b.n	c580 <__aeabi_ddiv+0x20c>
    c7fa:	2500      	movs	r5, #0
    c7fc:	4592      	cmp	sl, r2
    c7fe:	d300      	bcc.n	c802 <__aeabi_ddiv+0x48e>
    c800:	e733      	b.n	c66a <__aeabi_ddiv+0x2f6>
    c802:	9e03      	ldr	r6, [sp, #12]
    c804:	4659      	mov	r1, fp
    c806:	46b4      	mov	ip, r6
    c808:	44e2      	add	sl, ip
    c80a:	45b2      	cmp	sl, r6
    c80c:	41ad      	sbcs	r5, r5
    c80e:	426d      	negs	r5, r5
    c810:	4445      	add	r5, r8
    c812:	18eb      	adds	r3, r5, r3
    c814:	3901      	subs	r1, #1
    c816:	4598      	cmp	r8, r3
    c818:	d207      	bcs.n	c82a <__aeabi_ddiv+0x4b6>
    c81a:	4298      	cmp	r0, r3
    c81c:	d900      	bls.n	c820 <__aeabi_ddiv+0x4ac>
    c81e:	e07f      	b.n	c920 <__aeabi_ddiv+0x5ac>
    c820:	d100      	bne.n	c824 <__aeabi_ddiv+0x4b0>
    c822:	e0bc      	b.n	c99e <__aeabi_ddiv+0x62a>
    c824:	1a1d      	subs	r5, r3, r0
    c826:	468b      	mov	fp, r1
    c828:	e71f      	b.n	c66a <__aeabi_ddiv+0x2f6>
    c82a:	4598      	cmp	r8, r3
    c82c:	d1fa      	bne.n	c824 <__aeabi_ddiv+0x4b0>
    c82e:	9d03      	ldr	r5, [sp, #12]
    c830:	4555      	cmp	r5, sl
    c832:	d9f2      	bls.n	c81a <__aeabi_ddiv+0x4a6>
    c834:	4643      	mov	r3, r8
    c836:	468b      	mov	fp, r1
    c838:	1a1d      	subs	r5, r3, r0
    c83a:	e716      	b.n	c66a <__aeabi_ddiv+0x2f6>
    c83c:	469b      	mov	fp, r3
    c83e:	e6ca      	b.n	c5d6 <__aeabi_ddiv+0x262>
    c840:	0015      	movs	r5, r2
    c842:	e6e7      	b.n	c614 <__aeabi_ddiv+0x2a0>
    c844:	465a      	mov	r2, fp
    c846:	08c9      	lsrs	r1, r1, #3
    c848:	0752      	lsls	r2, r2, #29
    c84a:	430a      	orrs	r2, r1
    c84c:	055b      	lsls	r3, r3, #21
    c84e:	4690      	mov	r8, r2
    c850:	0d5c      	lsrs	r4, r3, #21
    c852:	465a      	mov	r2, fp
    c854:	2301      	movs	r3, #1
    c856:	9902      	ldr	r1, [sp, #8]
    c858:	0252      	lsls	r2, r2, #9
    c85a:	4019      	ands	r1, r3
    c85c:	0b12      	lsrs	r2, r2, #12
    c85e:	468c      	mov	ip, r1
    c860:	e656      	b.n	c510 <__aeabi_ddiv+0x19c>
    c862:	2b00      	cmp	r3, #0
    c864:	d100      	bne.n	c868 <__aeabi_ddiv+0x4f4>
    c866:	e76f      	b.n	c748 <__aeabi_ddiv+0x3d4>
    c868:	4446      	add	r6, r8
    c86a:	1e4a      	subs	r2, r1, #1
    c86c:	45b0      	cmp	r8, r6
    c86e:	d929      	bls.n	c8c4 <__aeabi_ddiv+0x550>
    c870:	0011      	movs	r1, r2
    c872:	4286      	cmp	r6, r0
    c874:	d000      	beq.n	c878 <__aeabi_ddiv+0x504>
    c876:	e765      	b.n	c744 <__aeabi_ddiv+0x3d0>
    c878:	9a03      	ldr	r2, [sp, #12]
    c87a:	4293      	cmp	r3, r2
    c87c:	d000      	beq.n	c880 <__aeabi_ddiv+0x50c>
    c87e:	e761      	b.n	c744 <__aeabi_ddiv+0x3d0>
    c880:	e762      	b.n	c748 <__aeabi_ddiv+0x3d4>
    c882:	2101      	movs	r1, #1
    c884:	4249      	negs	r1, r1
    c886:	2001      	movs	r0, #1
    c888:	1ac2      	subs	r2, r0, r3
    c88a:	2a38      	cmp	r2, #56	; 0x38
    c88c:	dd21      	ble.n	c8d2 <__aeabi_ddiv+0x55e>
    c88e:	9b02      	ldr	r3, [sp, #8]
    c890:	4003      	ands	r3, r0
    c892:	469c      	mov	ip, r3
    c894:	e638      	b.n	c508 <__aeabi_ddiv+0x194>
    c896:	220f      	movs	r2, #15
    c898:	400a      	ands	r2, r1
    c89a:	2a04      	cmp	r2, #4
    c89c:	d100      	bne.n	c8a0 <__aeabi_ddiv+0x52c>
    c89e:	e75b      	b.n	c758 <__aeabi_ddiv+0x3e4>
    c8a0:	000a      	movs	r2, r1
    c8a2:	1d11      	adds	r1, r2, #4
    c8a4:	4291      	cmp	r1, r2
    c8a6:	4192      	sbcs	r2, r2
    c8a8:	4252      	negs	r2, r2
    c8aa:	4493      	add	fp, r2
    c8ac:	e754      	b.n	c758 <__aeabi_ddiv+0x3e4>
    c8ae:	4b47      	ldr	r3, [pc, #284]	; (c9cc <__aeabi_ddiv+0x658>)
    c8b0:	18e3      	adds	r3, r4, r3
    c8b2:	2b00      	cmp	r3, #0
    c8b4:	dde5      	ble.n	c882 <__aeabi_ddiv+0x50e>
    c8b6:	2201      	movs	r2, #1
    c8b8:	4252      	negs	r2, r2
    c8ba:	e7f2      	b.n	c8a2 <__aeabi_ddiv+0x52e>
    c8bc:	001d      	movs	r5, r3
    c8be:	e6fa      	b.n	c6b6 <__aeabi_ddiv+0x342>
    c8c0:	469a      	mov	sl, r3
    c8c2:	e71c      	b.n	c6fe <__aeabi_ddiv+0x38a>
    c8c4:	42b0      	cmp	r0, r6
    c8c6:	d839      	bhi.n	c93c <__aeabi_ddiv+0x5c8>
    c8c8:	d06e      	beq.n	c9a8 <__aeabi_ddiv+0x634>
    c8ca:	0011      	movs	r1, r2
    c8cc:	e73a      	b.n	c744 <__aeabi_ddiv+0x3d0>
    c8ce:	9302      	str	r3, [sp, #8]
    c8d0:	e73a      	b.n	c748 <__aeabi_ddiv+0x3d4>
    c8d2:	2a1f      	cmp	r2, #31
    c8d4:	dc3c      	bgt.n	c950 <__aeabi_ddiv+0x5dc>
    c8d6:	2320      	movs	r3, #32
    c8d8:	1a9b      	subs	r3, r3, r2
    c8da:	000c      	movs	r4, r1
    c8dc:	4658      	mov	r0, fp
    c8de:	4099      	lsls	r1, r3
    c8e0:	4098      	lsls	r0, r3
    c8e2:	1e4b      	subs	r3, r1, #1
    c8e4:	4199      	sbcs	r1, r3
    c8e6:	465b      	mov	r3, fp
    c8e8:	40d4      	lsrs	r4, r2
    c8ea:	40d3      	lsrs	r3, r2
    c8ec:	4320      	orrs	r0, r4
    c8ee:	4308      	orrs	r0, r1
    c8f0:	001a      	movs	r2, r3
    c8f2:	0743      	lsls	r3, r0, #29
    c8f4:	d009      	beq.n	c90a <__aeabi_ddiv+0x596>
    c8f6:	230f      	movs	r3, #15
    c8f8:	4003      	ands	r3, r0
    c8fa:	2b04      	cmp	r3, #4
    c8fc:	d005      	beq.n	c90a <__aeabi_ddiv+0x596>
    c8fe:	0001      	movs	r1, r0
    c900:	1d08      	adds	r0, r1, #4
    c902:	4288      	cmp	r0, r1
    c904:	419b      	sbcs	r3, r3
    c906:	425b      	negs	r3, r3
    c908:	18d2      	adds	r2, r2, r3
    c90a:	0213      	lsls	r3, r2, #8
    c90c:	d53a      	bpl.n	c984 <__aeabi_ddiv+0x610>
    c90e:	2301      	movs	r3, #1
    c910:	9a02      	ldr	r2, [sp, #8]
    c912:	2401      	movs	r4, #1
    c914:	401a      	ands	r2, r3
    c916:	2300      	movs	r3, #0
    c918:	4694      	mov	ip, r2
    c91a:	4698      	mov	r8, r3
    c91c:	2200      	movs	r2, #0
    c91e:	e5f7      	b.n	c510 <__aeabi_ddiv+0x19c>
    c920:	2102      	movs	r1, #2
    c922:	4249      	negs	r1, r1
    c924:	468c      	mov	ip, r1
    c926:	9d03      	ldr	r5, [sp, #12]
    c928:	44e3      	add	fp, ip
    c92a:	46ac      	mov	ip, r5
    c92c:	44e2      	add	sl, ip
    c92e:	45aa      	cmp	sl, r5
    c930:	41ad      	sbcs	r5, r5
    c932:	426d      	negs	r5, r5
    c934:	4445      	add	r5, r8
    c936:	18ed      	adds	r5, r5, r3
    c938:	1a2d      	subs	r5, r5, r0
    c93a:	e696      	b.n	c66a <__aeabi_ddiv+0x2f6>
    c93c:	1e8a      	subs	r2, r1, #2
    c93e:	9903      	ldr	r1, [sp, #12]
    c940:	004d      	lsls	r5, r1, #1
    c942:	428d      	cmp	r5, r1
    c944:	4189      	sbcs	r1, r1
    c946:	4249      	negs	r1, r1
    c948:	4441      	add	r1, r8
    c94a:	1876      	adds	r6, r6, r1
    c94c:	9503      	str	r5, [sp, #12]
    c94e:	e78f      	b.n	c870 <__aeabi_ddiv+0x4fc>
    c950:	201f      	movs	r0, #31
    c952:	4240      	negs	r0, r0
    c954:	1ac3      	subs	r3, r0, r3
    c956:	4658      	mov	r0, fp
    c958:	40d8      	lsrs	r0, r3
    c95a:	0003      	movs	r3, r0
    c95c:	2a20      	cmp	r2, #32
    c95e:	d028      	beq.n	c9b2 <__aeabi_ddiv+0x63e>
    c960:	2040      	movs	r0, #64	; 0x40
    c962:	465d      	mov	r5, fp
    c964:	1a82      	subs	r2, r0, r2
    c966:	4095      	lsls	r5, r2
    c968:	4329      	orrs	r1, r5
    c96a:	1e4a      	subs	r2, r1, #1
    c96c:	4191      	sbcs	r1, r2
    c96e:	4319      	orrs	r1, r3
    c970:	2307      	movs	r3, #7
    c972:	2200      	movs	r2, #0
    c974:	400b      	ands	r3, r1
    c976:	d009      	beq.n	c98c <__aeabi_ddiv+0x618>
    c978:	230f      	movs	r3, #15
    c97a:	2200      	movs	r2, #0
    c97c:	400b      	ands	r3, r1
    c97e:	0008      	movs	r0, r1
    c980:	2b04      	cmp	r3, #4
    c982:	d1bd      	bne.n	c900 <__aeabi_ddiv+0x58c>
    c984:	0001      	movs	r1, r0
    c986:	0753      	lsls	r3, r2, #29
    c988:	0252      	lsls	r2, r2, #9
    c98a:	0b12      	lsrs	r2, r2, #12
    c98c:	08c9      	lsrs	r1, r1, #3
    c98e:	4319      	orrs	r1, r3
    c990:	2301      	movs	r3, #1
    c992:	4688      	mov	r8, r1
    c994:	9902      	ldr	r1, [sp, #8]
    c996:	2400      	movs	r4, #0
    c998:	4019      	ands	r1, r3
    c99a:	468c      	mov	ip, r1
    c99c:	e5b8      	b.n	c510 <__aeabi_ddiv+0x19c>
    c99e:	4552      	cmp	r2, sl
    c9a0:	d8be      	bhi.n	c920 <__aeabi_ddiv+0x5ac>
    c9a2:	468b      	mov	fp, r1
    c9a4:	2500      	movs	r5, #0
    c9a6:	e660      	b.n	c66a <__aeabi_ddiv+0x2f6>
    c9a8:	9d03      	ldr	r5, [sp, #12]
    c9aa:	429d      	cmp	r5, r3
    c9ac:	d3c6      	bcc.n	c93c <__aeabi_ddiv+0x5c8>
    c9ae:	0011      	movs	r1, r2
    c9b0:	e762      	b.n	c878 <__aeabi_ddiv+0x504>
    c9b2:	2500      	movs	r5, #0
    c9b4:	e7d8      	b.n	c968 <__aeabi_ddiv+0x5f4>
    c9b6:	2280      	movs	r2, #128	; 0x80
    c9b8:	465b      	mov	r3, fp
    c9ba:	0312      	lsls	r2, r2, #12
    c9bc:	431a      	orrs	r2, r3
    c9be:	9b01      	ldr	r3, [sp, #4]
    c9c0:	0312      	lsls	r2, r2, #12
    c9c2:	0b12      	lsrs	r2, r2, #12
    c9c4:	469c      	mov	ip, r3
    c9c6:	4688      	mov	r8, r1
    c9c8:	4c03      	ldr	r4, [pc, #12]	; (c9d8 <__aeabi_ddiv+0x664>)
    c9ca:	e5a1      	b.n	c510 <__aeabi_ddiv+0x19c>
    c9cc:	000003ff 	.word	0x000003ff
    c9d0:	feffffff 	.word	0xfeffffff
    c9d4:	000007fe 	.word	0x000007fe
    c9d8:	000007ff 	.word	0x000007ff

0000c9dc <__eqdf2>:
    c9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9de:	464f      	mov	r7, r9
    c9e0:	4646      	mov	r6, r8
    c9e2:	46d6      	mov	lr, sl
    c9e4:	005c      	lsls	r4, r3, #1
    c9e6:	b5c0      	push	{r6, r7, lr}
    c9e8:	031f      	lsls	r7, r3, #12
    c9ea:	0fdb      	lsrs	r3, r3, #31
    c9ec:	469a      	mov	sl, r3
    c9ee:	4b17      	ldr	r3, [pc, #92]	; (ca4c <__eqdf2+0x70>)
    c9f0:	030e      	lsls	r6, r1, #12
    c9f2:	004d      	lsls	r5, r1, #1
    c9f4:	4684      	mov	ip, r0
    c9f6:	4680      	mov	r8, r0
    c9f8:	0b36      	lsrs	r6, r6, #12
    c9fa:	0d6d      	lsrs	r5, r5, #21
    c9fc:	0fc9      	lsrs	r1, r1, #31
    c9fe:	4691      	mov	r9, r2
    ca00:	0b3f      	lsrs	r7, r7, #12
    ca02:	0d64      	lsrs	r4, r4, #21
    ca04:	2001      	movs	r0, #1
    ca06:	429d      	cmp	r5, r3
    ca08:	d008      	beq.n	ca1c <__eqdf2+0x40>
    ca0a:	429c      	cmp	r4, r3
    ca0c:	d001      	beq.n	ca12 <__eqdf2+0x36>
    ca0e:	42a5      	cmp	r5, r4
    ca10:	d00b      	beq.n	ca2a <__eqdf2+0x4e>
    ca12:	bc1c      	pop	{r2, r3, r4}
    ca14:	4690      	mov	r8, r2
    ca16:	4699      	mov	r9, r3
    ca18:	46a2      	mov	sl, r4
    ca1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca1c:	4663      	mov	r3, ip
    ca1e:	4333      	orrs	r3, r6
    ca20:	d1f7      	bne.n	ca12 <__eqdf2+0x36>
    ca22:	42ac      	cmp	r4, r5
    ca24:	d1f5      	bne.n	ca12 <__eqdf2+0x36>
    ca26:	433a      	orrs	r2, r7
    ca28:	d1f3      	bne.n	ca12 <__eqdf2+0x36>
    ca2a:	2001      	movs	r0, #1
    ca2c:	42be      	cmp	r6, r7
    ca2e:	d1f0      	bne.n	ca12 <__eqdf2+0x36>
    ca30:	45c8      	cmp	r8, r9
    ca32:	d1ee      	bne.n	ca12 <__eqdf2+0x36>
    ca34:	4551      	cmp	r1, sl
    ca36:	d007      	beq.n	ca48 <__eqdf2+0x6c>
    ca38:	2d00      	cmp	r5, #0
    ca3a:	d1ea      	bne.n	ca12 <__eqdf2+0x36>
    ca3c:	4663      	mov	r3, ip
    ca3e:	431e      	orrs	r6, r3
    ca40:	0030      	movs	r0, r6
    ca42:	1e46      	subs	r6, r0, #1
    ca44:	41b0      	sbcs	r0, r6
    ca46:	e7e4      	b.n	ca12 <__eqdf2+0x36>
    ca48:	2000      	movs	r0, #0
    ca4a:	e7e2      	b.n	ca12 <__eqdf2+0x36>
    ca4c:	000007ff 	.word	0x000007ff

0000ca50 <__gedf2>:
    ca50:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca52:	4645      	mov	r5, r8
    ca54:	46de      	mov	lr, fp
    ca56:	4657      	mov	r7, sl
    ca58:	464e      	mov	r6, r9
    ca5a:	b5e0      	push	{r5, r6, r7, lr}
    ca5c:	031f      	lsls	r7, r3, #12
    ca5e:	0b3d      	lsrs	r5, r7, #12
    ca60:	4f2c      	ldr	r7, [pc, #176]	; (cb14 <__gedf2+0xc4>)
    ca62:	030e      	lsls	r6, r1, #12
    ca64:	004c      	lsls	r4, r1, #1
    ca66:	46ab      	mov	fp, r5
    ca68:	005d      	lsls	r5, r3, #1
    ca6a:	4684      	mov	ip, r0
    ca6c:	0b36      	lsrs	r6, r6, #12
    ca6e:	0d64      	lsrs	r4, r4, #21
    ca70:	0fc9      	lsrs	r1, r1, #31
    ca72:	4690      	mov	r8, r2
    ca74:	0d6d      	lsrs	r5, r5, #21
    ca76:	0fdb      	lsrs	r3, r3, #31
    ca78:	42bc      	cmp	r4, r7
    ca7a:	d02a      	beq.n	cad2 <__gedf2+0x82>
    ca7c:	4f25      	ldr	r7, [pc, #148]	; (cb14 <__gedf2+0xc4>)
    ca7e:	42bd      	cmp	r5, r7
    ca80:	d02d      	beq.n	cade <__gedf2+0x8e>
    ca82:	2c00      	cmp	r4, #0
    ca84:	d10f      	bne.n	caa6 <__gedf2+0x56>
    ca86:	4330      	orrs	r0, r6
    ca88:	0007      	movs	r7, r0
    ca8a:	4681      	mov	r9, r0
    ca8c:	4278      	negs	r0, r7
    ca8e:	4178      	adcs	r0, r7
    ca90:	b2c0      	uxtb	r0, r0
    ca92:	2d00      	cmp	r5, #0
    ca94:	d117      	bne.n	cac6 <__gedf2+0x76>
    ca96:	465f      	mov	r7, fp
    ca98:	433a      	orrs	r2, r7
    ca9a:	d114      	bne.n	cac6 <__gedf2+0x76>
    ca9c:	464b      	mov	r3, r9
    ca9e:	2000      	movs	r0, #0
    caa0:	2b00      	cmp	r3, #0
    caa2:	d00a      	beq.n	caba <__gedf2+0x6a>
    caa4:	e006      	b.n	cab4 <__gedf2+0x64>
    caa6:	2d00      	cmp	r5, #0
    caa8:	d102      	bne.n	cab0 <__gedf2+0x60>
    caaa:	4658      	mov	r0, fp
    caac:	4302      	orrs	r2, r0
    caae:	d001      	beq.n	cab4 <__gedf2+0x64>
    cab0:	4299      	cmp	r1, r3
    cab2:	d018      	beq.n	cae6 <__gedf2+0x96>
    cab4:	4248      	negs	r0, r1
    cab6:	2101      	movs	r1, #1
    cab8:	4308      	orrs	r0, r1
    caba:	bc3c      	pop	{r2, r3, r4, r5}
    cabc:	4690      	mov	r8, r2
    cabe:	4699      	mov	r9, r3
    cac0:	46a2      	mov	sl, r4
    cac2:	46ab      	mov	fp, r5
    cac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cac6:	2800      	cmp	r0, #0
    cac8:	d0f2      	beq.n	cab0 <__gedf2+0x60>
    caca:	2001      	movs	r0, #1
    cacc:	3b01      	subs	r3, #1
    cace:	4318      	orrs	r0, r3
    cad0:	e7f3      	b.n	caba <__gedf2+0x6a>
    cad2:	0037      	movs	r7, r6
    cad4:	4307      	orrs	r7, r0
    cad6:	d0d1      	beq.n	ca7c <__gedf2+0x2c>
    cad8:	2002      	movs	r0, #2
    cada:	4240      	negs	r0, r0
    cadc:	e7ed      	b.n	caba <__gedf2+0x6a>
    cade:	465f      	mov	r7, fp
    cae0:	4317      	orrs	r7, r2
    cae2:	d0ce      	beq.n	ca82 <__gedf2+0x32>
    cae4:	e7f8      	b.n	cad8 <__gedf2+0x88>
    cae6:	42ac      	cmp	r4, r5
    cae8:	dce4      	bgt.n	cab4 <__gedf2+0x64>
    caea:	da03      	bge.n	caf4 <__gedf2+0xa4>
    caec:	1e48      	subs	r0, r1, #1
    caee:	2101      	movs	r1, #1
    caf0:	4308      	orrs	r0, r1
    caf2:	e7e2      	b.n	caba <__gedf2+0x6a>
    caf4:	455e      	cmp	r6, fp
    caf6:	d8dd      	bhi.n	cab4 <__gedf2+0x64>
    caf8:	d006      	beq.n	cb08 <__gedf2+0xb8>
    cafa:	2000      	movs	r0, #0
    cafc:	455e      	cmp	r6, fp
    cafe:	d2dc      	bcs.n	caba <__gedf2+0x6a>
    cb00:	2301      	movs	r3, #1
    cb02:	1e48      	subs	r0, r1, #1
    cb04:	4318      	orrs	r0, r3
    cb06:	e7d8      	b.n	caba <__gedf2+0x6a>
    cb08:	45c4      	cmp	ip, r8
    cb0a:	d8d3      	bhi.n	cab4 <__gedf2+0x64>
    cb0c:	2000      	movs	r0, #0
    cb0e:	45c4      	cmp	ip, r8
    cb10:	d3f6      	bcc.n	cb00 <__gedf2+0xb0>
    cb12:	e7d2      	b.n	caba <__gedf2+0x6a>
    cb14:	000007ff 	.word	0x000007ff

0000cb18 <__ledf2>:
    cb18:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb1a:	464e      	mov	r6, r9
    cb1c:	4645      	mov	r5, r8
    cb1e:	46de      	mov	lr, fp
    cb20:	4657      	mov	r7, sl
    cb22:	005c      	lsls	r4, r3, #1
    cb24:	b5e0      	push	{r5, r6, r7, lr}
    cb26:	031f      	lsls	r7, r3, #12
    cb28:	0fdb      	lsrs	r3, r3, #31
    cb2a:	4699      	mov	r9, r3
    cb2c:	4b2a      	ldr	r3, [pc, #168]	; (cbd8 <__ledf2+0xc0>)
    cb2e:	030e      	lsls	r6, r1, #12
    cb30:	004d      	lsls	r5, r1, #1
    cb32:	0fc9      	lsrs	r1, r1, #31
    cb34:	4684      	mov	ip, r0
    cb36:	0b36      	lsrs	r6, r6, #12
    cb38:	0d6d      	lsrs	r5, r5, #21
    cb3a:	468b      	mov	fp, r1
    cb3c:	4690      	mov	r8, r2
    cb3e:	0b3f      	lsrs	r7, r7, #12
    cb40:	0d64      	lsrs	r4, r4, #21
    cb42:	429d      	cmp	r5, r3
    cb44:	d020      	beq.n	cb88 <__ledf2+0x70>
    cb46:	4b24      	ldr	r3, [pc, #144]	; (cbd8 <__ledf2+0xc0>)
    cb48:	429c      	cmp	r4, r3
    cb4a:	d022      	beq.n	cb92 <__ledf2+0x7a>
    cb4c:	2d00      	cmp	r5, #0
    cb4e:	d112      	bne.n	cb76 <__ledf2+0x5e>
    cb50:	4330      	orrs	r0, r6
    cb52:	4243      	negs	r3, r0
    cb54:	4143      	adcs	r3, r0
    cb56:	b2db      	uxtb	r3, r3
    cb58:	2c00      	cmp	r4, #0
    cb5a:	d01f      	beq.n	cb9c <__ledf2+0x84>
    cb5c:	2b00      	cmp	r3, #0
    cb5e:	d00c      	beq.n	cb7a <__ledf2+0x62>
    cb60:	464b      	mov	r3, r9
    cb62:	2001      	movs	r0, #1
    cb64:	3b01      	subs	r3, #1
    cb66:	4303      	orrs	r3, r0
    cb68:	0018      	movs	r0, r3
    cb6a:	bc3c      	pop	{r2, r3, r4, r5}
    cb6c:	4690      	mov	r8, r2
    cb6e:	4699      	mov	r9, r3
    cb70:	46a2      	mov	sl, r4
    cb72:	46ab      	mov	fp, r5
    cb74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb76:	2c00      	cmp	r4, #0
    cb78:	d016      	beq.n	cba8 <__ledf2+0x90>
    cb7a:	45cb      	cmp	fp, r9
    cb7c:	d017      	beq.n	cbae <__ledf2+0x96>
    cb7e:	465b      	mov	r3, fp
    cb80:	4259      	negs	r1, r3
    cb82:	2301      	movs	r3, #1
    cb84:	430b      	orrs	r3, r1
    cb86:	e7ef      	b.n	cb68 <__ledf2+0x50>
    cb88:	0031      	movs	r1, r6
    cb8a:	2302      	movs	r3, #2
    cb8c:	4301      	orrs	r1, r0
    cb8e:	d1eb      	bne.n	cb68 <__ledf2+0x50>
    cb90:	e7d9      	b.n	cb46 <__ledf2+0x2e>
    cb92:	0039      	movs	r1, r7
    cb94:	2302      	movs	r3, #2
    cb96:	4311      	orrs	r1, r2
    cb98:	d1e6      	bne.n	cb68 <__ledf2+0x50>
    cb9a:	e7d7      	b.n	cb4c <__ledf2+0x34>
    cb9c:	433a      	orrs	r2, r7
    cb9e:	d1dd      	bne.n	cb5c <__ledf2+0x44>
    cba0:	2300      	movs	r3, #0
    cba2:	2800      	cmp	r0, #0
    cba4:	d0e0      	beq.n	cb68 <__ledf2+0x50>
    cba6:	e7ea      	b.n	cb7e <__ledf2+0x66>
    cba8:	433a      	orrs	r2, r7
    cbaa:	d1e6      	bne.n	cb7a <__ledf2+0x62>
    cbac:	e7e7      	b.n	cb7e <__ledf2+0x66>
    cbae:	42a5      	cmp	r5, r4
    cbb0:	dce5      	bgt.n	cb7e <__ledf2+0x66>
    cbb2:	db05      	blt.n	cbc0 <__ledf2+0xa8>
    cbb4:	42be      	cmp	r6, r7
    cbb6:	d8e2      	bhi.n	cb7e <__ledf2+0x66>
    cbb8:	d007      	beq.n	cbca <__ledf2+0xb2>
    cbba:	2300      	movs	r3, #0
    cbbc:	42be      	cmp	r6, r7
    cbbe:	d2d3      	bcs.n	cb68 <__ledf2+0x50>
    cbc0:	4659      	mov	r1, fp
    cbc2:	2301      	movs	r3, #1
    cbc4:	3901      	subs	r1, #1
    cbc6:	430b      	orrs	r3, r1
    cbc8:	e7ce      	b.n	cb68 <__ledf2+0x50>
    cbca:	45c4      	cmp	ip, r8
    cbcc:	d8d7      	bhi.n	cb7e <__ledf2+0x66>
    cbce:	2300      	movs	r3, #0
    cbd0:	45c4      	cmp	ip, r8
    cbd2:	d3f5      	bcc.n	cbc0 <__ledf2+0xa8>
    cbd4:	e7c8      	b.n	cb68 <__ledf2+0x50>
    cbd6:	46c0      	nop			; (mov r8, r8)
    cbd8:	000007ff 	.word	0x000007ff

0000cbdc <__aeabi_dmul>:
    cbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbde:	4657      	mov	r7, sl
    cbe0:	4645      	mov	r5, r8
    cbe2:	46de      	mov	lr, fp
    cbe4:	464e      	mov	r6, r9
    cbe6:	b5e0      	push	{r5, r6, r7, lr}
    cbe8:	030c      	lsls	r4, r1, #12
    cbea:	4698      	mov	r8, r3
    cbec:	004e      	lsls	r6, r1, #1
    cbee:	0b23      	lsrs	r3, r4, #12
    cbf0:	b087      	sub	sp, #28
    cbf2:	0007      	movs	r7, r0
    cbf4:	4692      	mov	sl, r2
    cbf6:	469b      	mov	fp, r3
    cbf8:	0d76      	lsrs	r6, r6, #21
    cbfa:	0fcd      	lsrs	r5, r1, #31
    cbfc:	2e00      	cmp	r6, #0
    cbfe:	d06b      	beq.n	ccd8 <__aeabi_dmul+0xfc>
    cc00:	4b6d      	ldr	r3, [pc, #436]	; (cdb8 <__aeabi_dmul+0x1dc>)
    cc02:	429e      	cmp	r6, r3
    cc04:	d035      	beq.n	cc72 <__aeabi_dmul+0x96>
    cc06:	2480      	movs	r4, #128	; 0x80
    cc08:	465b      	mov	r3, fp
    cc0a:	0f42      	lsrs	r2, r0, #29
    cc0c:	0424      	lsls	r4, r4, #16
    cc0e:	00db      	lsls	r3, r3, #3
    cc10:	4314      	orrs	r4, r2
    cc12:	431c      	orrs	r4, r3
    cc14:	00c3      	lsls	r3, r0, #3
    cc16:	4699      	mov	r9, r3
    cc18:	4b68      	ldr	r3, [pc, #416]	; (cdbc <__aeabi_dmul+0x1e0>)
    cc1a:	46a3      	mov	fp, r4
    cc1c:	469c      	mov	ip, r3
    cc1e:	2300      	movs	r3, #0
    cc20:	2700      	movs	r7, #0
    cc22:	4466      	add	r6, ip
    cc24:	9302      	str	r3, [sp, #8]
    cc26:	4643      	mov	r3, r8
    cc28:	031c      	lsls	r4, r3, #12
    cc2a:	005a      	lsls	r2, r3, #1
    cc2c:	0fdb      	lsrs	r3, r3, #31
    cc2e:	4650      	mov	r0, sl
    cc30:	0b24      	lsrs	r4, r4, #12
    cc32:	0d52      	lsrs	r2, r2, #21
    cc34:	4698      	mov	r8, r3
    cc36:	d100      	bne.n	cc3a <__aeabi_dmul+0x5e>
    cc38:	e076      	b.n	cd28 <__aeabi_dmul+0x14c>
    cc3a:	4b5f      	ldr	r3, [pc, #380]	; (cdb8 <__aeabi_dmul+0x1dc>)
    cc3c:	429a      	cmp	r2, r3
    cc3e:	d06d      	beq.n	cd1c <__aeabi_dmul+0x140>
    cc40:	2380      	movs	r3, #128	; 0x80
    cc42:	0f41      	lsrs	r1, r0, #29
    cc44:	041b      	lsls	r3, r3, #16
    cc46:	430b      	orrs	r3, r1
    cc48:	495c      	ldr	r1, [pc, #368]	; (cdbc <__aeabi_dmul+0x1e0>)
    cc4a:	00e4      	lsls	r4, r4, #3
    cc4c:	468c      	mov	ip, r1
    cc4e:	431c      	orrs	r4, r3
    cc50:	00c3      	lsls	r3, r0, #3
    cc52:	2000      	movs	r0, #0
    cc54:	4462      	add	r2, ip
    cc56:	4641      	mov	r1, r8
    cc58:	18b6      	adds	r6, r6, r2
    cc5a:	4069      	eors	r1, r5
    cc5c:	1c72      	adds	r2, r6, #1
    cc5e:	9101      	str	r1, [sp, #4]
    cc60:	4694      	mov	ip, r2
    cc62:	4307      	orrs	r7, r0
    cc64:	2f0f      	cmp	r7, #15
    cc66:	d900      	bls.n	cc6a <__aeabi_dmul+0x8e>
    cc68:	e0b0      	b.n	cdcc <__aeabi_dmul+0x1f0>
    cc6a:	4a55      	ldr	r2, [pc, #340]	; (cdc0 <__aeabi_dmul+0x1e4>)
    cc6c:	00bf      	lsls	r7, r7, #2
    cc6e:	59d2      	ldr	r2, [r2, r7]
    cc70:	4697      	mov	pc, r2
    cc72:	465b      	mov	r3, fp
    cc74:	4303      	orrs	r3, r0
    cc76:	4699      	mov	r9, r3
    cc78:	d000      	beq.n	cc7c <__aeabi_dmul+0xa0>
    cc7a:	e087      	b.n	cd8c <__aeabi_dmul+0x1b0>
    cc7c:	2300      	movs	r3, #0
    cc7e:	469b      	mov	fp, r3
    cc80:	3302      	adds	r3, #2
    cc82:	2708      	movs	r7, #8
    cc84:	9302      	str	r3, [sp, #8]
    cc86:	e7ce      	b.n	cc26 <__aeabi_dmul+0x4a>
    cc88:	4642      	mov	r2, r8
    cc8a:	9201      	str	r2, [sp, #4]
    cc8c:	2802      	cmp	r0, #2
    cc8e:	d067      	beq.n	cd60 <__aeabi_dmul+0x184>
    cc90:	2803      	cmp	r0, #3
    cc92:	d100      	bne.n	cc96 <__aeabi_dmul+0xba>
    cc94:	e20e      	b.n	d0b4 <__aeabi_dmul+0x4d8>
    cc96:	2801      	cmp	r0, #1
    cc98:	d000      	beq.n	cc9c <__aeabi_dmul+0xc0>
    cc9a:	e162      	b.n	cf62 <__aeabi_dmul+0x386>
    cc9c:	2300      	movs	r3, #0
    cc9e:	2400      	movs	r4, #0
    cca0:	2200      	movs	r2, #0
    cca2:	4699      	mov	r9, r3
    cca4:	9901      	ldr	r1, [sp, #4]
    cca6:	4001      	ands	r1, r0
    cca8:	b2cd      	uxtb	r5, r1
    ccaa:	2100      	movs	r1, #0
    ccac:	0312      	lsls	r2, r2, #12
    ccae:	0d0b      	lsrs	r3, r1, #20
    ccb0:	0b12      	lsrs	r2, r2, #12
    ccb2:	051b      	lsls	r3, r3, #20
    ccb4:	4313      	orrs	r3, r2
    ccb6:	4a43      	ldr	r2, [pc, #268]	; (cdc4 <__aeabi_dmul+0x1e8>)
    ccb8:	0524      	lsls	r4, r4, #20
    ccba:	4013      	ands	r3, r2
    ccbc:	431c      	orrs	r4, r3
    ccbe:	0064      	lsls	r4, r4, #1
    ccc0:	07ed      	lsls	r5, r5, #31
    ccc2:	0864      	lsrs	r4, r4, #1
    ccc4:	432c      	orrs	r4, r5
    ccc6:	4648      	mov	r0, r9
    ccc8:	0021      	movs	r1, r4
    ccca:	b007      	add	sp, #28
    cccc:	bc3c      	pop	{r2, r3, r4, r5}
    ccce:	4690      	mov	r8, r2
    ccd0:	4699      	mov	r9, r3
    ccd2:	46a2      	mov	sl, r4
    ccd4:	46ab      	mov	fp, r5
    ccd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccd8:	4303      	orrs	r3, r0
    ccda:	4699      	mov	r9, r3
    ccdc:	d04f      	beq.n	cd7e <__aeabi_dmul+0x1a2>
    ccde:	465b      	mov	r3, fp
    cce0:	2b00      	cmp	r3, #0
    cce2:	d100      	bne.n	cce6 <__aeabi_dmul+0x10a>
    cce4:	e189      	b.n	cffa <__aeabi_dmul+0x41e>
    cce6:	4658      	mov	r0, fp
    cce8:	f000 fe2e 	bl	d948 <__clzsi2>
    ccec:	0003      	movs	r3, r0
    ccee:	3b0b      	subs	r3, #11
    ccf0:	2b1c      	cmp	r3, #28
    ccf2:	dd00      	ble.n	ccf6 <__aeabi_dmul+0x11a>
    ccf4:	e17a      	b.n	cfec <__aeabi_dmul+0x410>
    ccf6:	221d      	movs	r2, #29
    ccf8:	1ad3      	subs	r3, r2, r3
    ccfa:	003a      	movs	r2, r7
    ccfc:	0001      	movs	r1, r0
    ccfe:	465c      	mov	r4, fp
    cd00:	40da      	lsrs	r2, r3
    cd02:	3908      	subs	r1, #8
    cd04:	408c      	lsls	r4, r1
    cd06:	0013      	movs	r3, r2
    cd08:	408f      	lsls	r7, r1
    cd0a:	4323      	orrs	r3, r4
    cd0c:	469b      	mov	fp, r3
    cd0e:	46b9      	mov	r9, r7
    cd10:	2300      	movs	r3, #0
    cd12:	4e2d      	ldr	r6, [pc, #180]	; (cdc8 <__aeabi_dmul+0x1ec>)
    cd14:	2700      	movs	r7, #0
    cd16:	1a36      	subs	r6, r6, r0
    cd18:	9302      	str	r3, [sp, #8]
    cd1a:	e784      	b.n	cc26 <__aeabi_dmul+0x4a>
    cd1c:	4653      	mov	r3, sl
    cd1e:	4323      	orrs	r3, r4
    cd20:	d12a      	bne.n	cd78 <__aeabi_dmul+0x19c>
    cd22:	2400      	movs	r4, #0
    cd24:	2002      	movs	r0, #2
    cd26:	e796      	b.n	cc56 <__aeabi_dmul+0x7a>
    cd28:	4653      	mov	r3, sl
    cd2a:	4323      	orrs	r3, r4
    cd2c:	d020      	beq.n	cd70 <__aeabi_dmul+0x194>
    cd2e:	2c00      	cmp	r4, #0
    cd30:	d100      	bne.n	cd34 <__aeabi_dmul+0x158>
    cd32:	e157      	b.n	cfe4 <__aeabi_dmul+0x408>
    cd34:	0020      	movs	r0, r4
    cd36:	f000 fe07 	bl	d948 <__clzsi2>
    cd3a:	0003      	movs	r3, r0
    cd3c:	3b0b      	subs	r3, #11
    cd3e:	2b1c      	cmp	r3, #28
    cd40:	dd00      	ble.n	cd44 <__aeabi_dmul+0x168>
    cd42:	e149      	b.n	cfd8 <__aeabi_dmul+0x3fc>
    cd44:	211d      	movs	r1, #29
    cd46:	1acb      	subs	r3, r1, r3
    cd48:	4651      	mov	r1, sl
    cd4a:	0002      	movs	r2, r0
    cd4c:	40d9      	lsrs	r1, r3
    cd4e:	4653      	mov	r3, sl
    cd50:	3a08      	subs	r2, #8
    cd52:	4094      	lsls	r4, r2
    cd54:	4093      	lsls	r3, r2
    cd56:	430c      	orrs	r4, r1
    cd58:	4a1b      	ldr	r2, [pc, #108]	; (cdc8 <__aeabi_dmul+0x1ec>)
    cd5a:	1a12      	subs	r2, r2, r0
    cd5c:	2000      	movs	r0, #0
    cd5e:	e77a      	b.n	cc56 <__aeabi_dmul+0x7a>
    cd60:	2501      	movs	r5, #1
    cd62:	9b01      	ldr	r3, [sp, #4]
    cd64:	4c14      	ldr	r4, [pc, #80]	; (cdb8 <__aeabi_dmul+0x1dc>)
    cd66:	401d      	ands	r5, r3
    cd68:	2300      	movs	r3, #0
    cd6a:	2200      	movs	r2, #0
    cd6c:	4699      	mov	r9, r3
    cd6e:	e79c      	b.n	ccaa <__aeabi_dmul+0xce>
    cd70:	2400      	movs	r4, #0
    cd72:	2200      	movs	r2, #0
    cd74:	2001      	movs	r0, #1
    cd76:	e76e      	b.n	cc56 <__aeabi_dmul+0x7a>
    cd78:	4653      	mov	r3, sl
    cd7a:	2003      	movs	r0, #3
    cd7c:	e76b      	b.n	cc56 <__aeabi_dmul+0x7a>
    cd7e:	2300      	movs	r3, #0
    cd80:	469b      	mov	fp, r3
    cd82:	3301      	adds	r3, #1
    cd84:	2704      	movs	r7, #4
    cd86:	2600      	movs	r6, #0
    cd88:	9302      	str	r3, [sp, #8]
    cd8a:	e74c      	b.n	cc26 <__aeabi_dmul+0x4a>
    cd8c:	2303      	movs	r3, #3
    cd8e:	4681      	mov	r9, r0
    cd90:	270c      	movs	r7, #12
    cd92:	9302      	str	r3, [sp, #8]
    cd94:	e747      	b.n	cc26 <__aeabi_dmul+0x4a>
    cd96:	2280      	movs	r2, #128	; 0x80
    cd98:	2300      	movs	r3, #0
    cd9a:	2500      	movs	r5, #0
    cd9c:	0312      	lsls	r2, r2, #12
    cd9e:	4699      	mov	r9, r3
    cda0:	4c05      	ldr	r4, [pc, #20]	; (cdb8 <__aeabi_dmul+0x1dc>)
    cda2:	e782      	b.n	ccaa <__aeabi_dmul+0xce>
    cda4:	465c      	mov	r4, fp
    cda6:	464b      	mov	r3, r9
    cda8:	9802      	ldr	r0, [sp, #8]
    cdaa:	e76f      	b.n	cc8c <__aeabi_dmul+0xb0>
    cdac:	465c      	mov	r4, fp
    cdae:	464b      	mov	r3, r9
    cdb0:	9501      	str	r5, [sp, #4]
    cdb2:	9802      	ldr	r0, [sp, #8]
    cdb4:	e76a      	b.n	cc8c <__aeabi_dmul+0xb0>
    cdb6:	46c0      	nop			; (mov r8, r8)
    cdb8:	000007ff 	.word	0x000007ff
    cdbc:	fffffc01 	.word	0xfffffc01
    cdc0:	0000ef60 	.word	0x0000ef60
    cdc4:	800fffff 	.word	0x800fffff
    cdc8:	fffffc0d 	.word	0xfffffc0d
    cdcc:	464a      	mov	r2, r9
    cdce:	4649      	mov	r1, r9
    cdd0:	0c17      	lsrs	r7, r2, #16
    cdd2:	0c1a      	lsrs	r2, r3, #16
    cdd4:	041b      	lsls	r3, r3, #16
    cdd6:	0c1b      	lsrs	r3, r3, #16
    cdd8:	0408      	lsls	r0, r1, #16
    cdda:	0019      	movs	r1, r3
    cddc:	0c00      	lsrs	r0, r0, #16
    cdde:	4341      	muls	r1, r0
    cde0:	0015      	movs	r5, r2
    cde2:	4688      	mov	r8, r1
    cde4:	0019      	movs	r1, r3
    cde6:	437d      	muls	r5, r7
    cde8:	4379      	muls	r1, r7
    cdea:	9503      	str	r5, [sp, #12]
    cdec:	4689      	mov	r9, r1
    cdee:	0029      	movs	r1, r5
    cdf0:	0015      	movs	r5, r2
    cdf2:	4345      	muls	r5, r0
    cdf4:	444d      	add	r5, r9
    cdf6:	9502      	str	r5, [sp, #8]
    cdf8:	4645      	mov	r5, r8
    cdfa:	0c2d      	lsrs	r5, r5, #16
    cdfc:	46aa      	mov	sl, r5
    cdfe:	9d02      	ldr	r5, [sp, #8]
    ce00:	4455      	add	r5, sl
    ce02:	45a9      	cmp	r9, r5
    ce04:	d906      	bls.n	ce14 <__aeabi_dmul+0x238>
    ce06:	468a      	mov	sl, r1
    ce08:	2180      	movs	r1, #128	; 0x80
    ce0a:	0249      	lsls	r1, r1, #9
    ce0c:	4689      	mov	r9, r1
    ce0e:	44ca      	add	sl, r9
    ce10:	4651      	mov	r1, sl
    ce12:	9103      	str	r1, [sp, #12]
    ce14:	0c29      	lsrs	r1, r5, #16
    ce16:	9104      	str	r1, [sp, #16]
    ce18:	4641      	mov	r1, r8
    ce1a:	0409      	lsls	r1, r1, #16
    ce1c:	042d      	lsls	r5, r5, #16
    ce1e:	0c09      	lsrs	r1, r1, #16
    ce20:	4688      	mov	r8, r1
    ce22:	0029      	movs	r1, r5
    ce24:	0c25      	lsrs	r5, r4, #16
    ce26:	0424      	lsls	r4, r4, #16
    ce28:	4441      	add	r1, r8
    ce2a:	0c24      	lsrs	r4, r4, #16
    ce2c:	9105      	str	r1, [sp, #20]
    ce2e:	0021      	movs	r1, r4
    ce30:	4341      	muls	r1, r0
    ce32:	4688      	mov	r8, r1
    ce34:	0021      	movs	r1, r4
    ce36:	4379      	muls	r1, r7
    ce38:	468a      	mov	sl, r1
    ce3a:	4368      	muls	r0, r5
    ce3c:	4641      	mov	r1, r8
    ce3e:	4450      	add	r0, sl
    ce40:	4681      	mov	r9, r0
    ce42:	0c08      	lsrs	r0, r1, #16
    ce44:	4448      	add	r0, r9
    ce46:	436f      	muls	r7, r5
    ce48:	4582      	cmp	sl, r0
    ce4a:	d903      	bls.n	ce54 <__aeabi_dmul+0x278>
    ce4c:	2180      	movs	r1, #128	; 0x80
    ce4e:	0249      	lsls	r1, r1, #9
    ce50:	4689      	mov	r9, r1
    ce52:	444f      	add	r7, r9
    ce54:	0c01      	lsrs	r1, r0, #16
    ce56:	4689      	mov	r9, r1
    ce58:	0039      	movs	r1, r7
    ce5a:	4449      	add	r1, r9
    ce5c:	9102      	str	r1, [sp, #8]
    ce5e:	4641      	mov	r1, r8
    ce60:	040f      	lsls	r7, r1, #16
    ce62:	9904      	ldr	r1, [sp, #16]
    ce64:	0c3f      	lsrs	r7, r7, #16
    ce66:	4688      	mov	r8, r1
    ce68:	0400      	lsls	r0, r0, #16
    ce6a:	19c0      	adds	r0, r0, r7
    ce6c:	4480      	add	r8, r0
    ce6e:	4641      	mov	r1, r8
    ce70:	9104      	str	r1, [sp, #16]
    ce72:	4659      	mov	r1, fp
    ce74:	0c0f      	lsrs	r7, r1, #16
    ce76:	0409      	lsls	r1, r1, #16
    ce78:	0c09      	lsrs	r1, r1, #16
    ce7a:	4688      	mov	r8, r1
    ce7c:	4359      	muls	r1, r3
    ce7e:	468a      	mov	sl, r1
    ce80:	0039      	movs	r1, r7
    ce82:	4351      	muls	r1, r2
    ce84:	4689      	mov	r9, r1
    ce86:	4641      	mov	r1, r8
    ce88:	434a      	muls	r2, r1
    ce8a:	4651      	mov	r1, sl
    ce8c:	0c09      	lsrs	r1, r1, #16
    ce8e:	468b      	mov	fp, r1
    ce90:	437b      	muls	r3, r7
    ce92:	18d2      	adds	r2, r2, r3
    ce94:	445a      	add	r2, fp
    ce96:	4293      	cmp	r3, r2
    ce98:	d903      	bls.n	cea2 <__aeabi_dmul+0x2c6>
    ce9a:	2380      	movs	r3, #128	; 0x80
    ce9c:	025b      	lsls	r3, r3, #9
    ce9e:	469b      	mov	fp, r3
    cea0:	44d9      	add	r9, fp
    cea2:	4651      	mov	r1, sl
    cea4:	0409      	lsls	r1, r1, #16
    cea6:	0c09      	lsrs	r1, r1, #16
    cea8:	468a      	mov	sl, r1
    ceaa:	4641      	mov	r1, r8
    ceac:	4361      	muls	r1, r4
    ceae:	437c      	muls	r4, r7
    ceb0:	0c13      	lsrs	r3, r2, #16
    ceb2:	0412      	lsls	r2, r2, #16
    ceb4:	444b      	add	r3, r9
    ceb6:	4452      	add	r2, sl
    ceb8:	46a1      	mov	r9, r4
    ceba:	468a      	mov	sl, r1
    cebc:	003c      	movs	r4, r7
    cebe:	4641      	mov	r1, r8
    cec0:	436c      	muls	r4, r5
    cec2:	434d      	muls	r5, r1
    cec4:	4651      	mov	r1, sl
    cec6:	444d      	add	r5, r9
    cec8:	0c0f      	lsrs	r7, r1, #16
    ceca:	197d      	adds	r5, r7, r5
    cecc:	45a9      	cmp	r9, r5
    cece:	d903      	bls.n	ced8 <__aeabi_dmul+0x2fc>
    ced0:	2180      	movs	r1, #128	; 0x80
    ced2:	0249      	lsls	r1, r1, #9
    ced4:	4688      	mov	r8, r1
    ced6:	4444      	add	r4, r8
    ced8:	9f04      	ldr	r7, [sp, #16]
    ceda:	9903      	ldr	r1, [sp, #12]
    cedc:	46b8      	mov	r8, r7
    cede:	4441      	add	r1, r8
    cee0:	468b      	mov	fp, r1
    cee2:	4583      	cmp	fp, r0
    cee4:	4180      	sbcs	r0, r0
    cee6:	4241      	negs	r1, r0
    cee8:	4688      	mov	r8, r1
    ceea:	4651      	mov	r1, sl
    ceec:	0408      	lsls	r0, r1, #16
    ceee:	042f      	lsls	r7, r5, #16
    cef0:	0c00      	lsrs	r0, r0, #16
    cef2:	183f      	adds	r7, r7, r0
    cef4:	4658      	mov	r0, fp
    cef6:	9902      	ldr	r1, [sp, #8]
    cef8:	1810      	adds	r0, r2, r0
    cefa:	4689      	mov	r9, r1
    cefc:	4290      	cmp	r0, r2
    cefe:	4192      	sbcs	r2, r2
    cf00:	444f      	add	r7, r9
    cf02:	46ba      	mov	sl, r7
    cf04:	4252      	negs	r2, r2
    cf06:	4699      	mov	r9, r3
    cf08:	4693      	mov	fp, r2
    cf0a:	44c2      	add	sl, r8
    cf0c:	44d1      	add	r9, sl
    cf0e:	44cb      	add	fp, r9
    cf10:	428f      	cmp	r7, r1
    cf12:	41bf      	sbcs	r7, r7
    cf14:	45c2      	cmp	sl, r8
    cf16:	4189      	sbcs	r1, r1
    cf18:	4599      	cmp	r9, r3
    cf1a:	419b      	sbcs	r3, r3
    cf1c:	4593      	cmp	fp, r2
    cf1e:	4192      	sbcs	r2, r2
    cf20:	427f      	negs	r7, r7
    cf22:	4249      	negs	r1, r1
    cf24:	0c2d      	lsrs	r5, r5, #16
    cf26:	4252      	negs	r2, r2
    cf28:	430f      	orrs	r7, r1
    cf2a:	425b      	negs	r3, r3
    cf2c:	4313      	orrs	r3, r2
    cf2e:	197f      	adds	r7, r7, r5
    cf30:	18ff      	adds	r7, r7, r3
    cf32:	465b      	mov	r3, fp
    cf34:	193c      	adds	r4, r7, r4
    cf36:	0ddb      	lsrs	r3, r3, #23
    cf38:	9a05      	ldr	r2, [sp, #20]
    cf3a:	0264      	lsls	r4, r4, #9
    cf3c:	431c      	orrs	r4, r3
    cf3e:	0243      	lsls	r3, r0, #9
    cf40:	4313      	orrs	r3, r2
    cf42:	1e5d      	subs	r5, r3, #1
    cf44:	41ab      	sbcs	r3, r5
    cf46:	465a      	mov	r2, fp
    cf48:	0dc0      	lsrs	r0, r0, #23
    cf4a:	4303      	orrs	r3, r0
    cf4c:	0252      	lsls	r2, r2, #9
    cf4e:	4313      	orrs	r3, r2
    cf50:	01e2      	lsls	r2, r4, #7
    cf52:	d556      	bpl.n	d002 <__aeabi_dmul+0x426>
    cf54:	2001      	movs	r0, #1
    cf56:	085a      	lsrs	r2, r3, #1
    cf58:	4003      	ands	r3, r0
    cf5a:	4313      	orrs	r3, r2
    cf5c:	07e2      	lsls	r2, r4, #31
    cf5e:	4313      	orrs	r3, r2
    cf60:	0864      	lsrs	r4, r4, #1
    cf62:	485a      	ldr	r0, [pc, #360]	; (d0cc <__aeabi_dmul+0x4f0>)
    cf64:	4460      	add	r0, ip
    cf66:	2800      	cmp	r0, #0
    cf68:	dd4d      	ble.n	d006 <__aeabi_dmul+0x42a>
    cf6a:	075a      	lsls	r2, r3, #29
    cf6c:	d009      	beq.n	cf82 <__aeabi_dmul+0x3a6>
    cf6e:	220f      	movs	r2, #15
    cf70:	401a      	ands	r2, r3
    cf72:	2a04      	cmp	r2, #4
    cf74:	d005      	beq.n	cf82 <__aeabi_dmul+0x3a6>
    cf76:	1d1a      	adds	r2, r3, #4
    cf78:	429a      	cmp	r2, r3
    cf7a:	419b      	sbcs	r3, r3
    cf7c:	425b      	negs	r3, r3
    cf7e:	18e4      	adds	r4, r4, r3
    cf80:	0013      	movs	r3, r2
    cf82:	01e2      	lsls	r2, r4, #7
    cf84:	d504      	bpl.n	cf90 <__aeabi_dmul+0x3b4>
    cf86:	2080      	movs	r0, #128	; 0x80
    cf88:	4a51      	ldr	r2, [pc, #324]	; (d0d0 <__aeabi_dmul+0x4f4>)
    cf8a:	00c0      	lsls	r0, r0, #3
    cf8c:	4014      	ands	r4, r2
    cf8e:	4460      	add	r0, ip
    cf90:	4a50      	ldr	r2, [pc, #320]	; (d0d4 <__aeabi_dmul+0x4f8>)
    cf92:	4290      	cmp	r0, r2
    cf94:	dd00      	ble.n	cf98 <__aeabi_dmul+0x3bc>
    cf96:	e6e3      	b.n	cd60 <__aeabi_dmul+0x184>
    cf98:	2501      	movs	r5, #1
    cf9a:	08db      	lsrs	r3, r3, #3
    cf9c:	0762      	lsls	r2, r4, #29
    cf9e:	431a      	orrs	r2, r3
    cfa0:	0264      	lsls	r4, r4, #9
    cfa2:	9b01      	ldr	r3, [sp, #4]
    cfa4:	4691      	mov	r9, r2
    cfa6:	0b22      	lsrs	r2, r4, #12
    cfa8:	0544      	lsls	r4, r0, #21
    cfaa:	0d64      	lsrs	r4, r4, #21
    cfac:	401d      	ands	r5, r3
    cfae:	e67c      	b.n	ccaa <__aeabi_dmul+0xce>
    cfb0:	2280      	movs	r2, #128	; 0x80
    cfb2:	4659      	mov	r1, fp
    cfb4:	0312      	lsls	r2, r2, #12
    cfb6:	4211      	tst	r1, r2
    cfb8:	d008      	beq.n	cfcc <__aeabi_dmul+0x3f0>
    cfba:	4214      	tst	r4, r2
    cfbc:	d106      	bne.n	cfcc <__aeabi_dmul+0x3f0>
    cfbe:	4322      	orrs	r2, r4
    cfc0:	0312      	lsls	r2, r2, #12
    cfc2:	0b12      	lsrs	r2, r2, #12
    cfc4:	4645      	mov	r5, r8
    cfc6:	4699      	mov	r9, r3
    cfc8:	4c43      	ldr	r4, [pc, #268]	; (d0d8 <__aeabi_dmul+0x4fc>)
    cfca:	e66e      	b.n	ccaa <__aeabi_dmul+0xce>
    cfcc:	465b      	mov	r3, fp
    cfce:	431a      	orrs	r2, r3
    cfd0:	0312      	lsls	r2, r2, #12
    cfd2:	0b12      	lsrs	r2, r2, #12
    cfd4:	4c40      	ldr	r4, [pc, #256]	; (d0d8 <__aeabi_dmul+0x4fc>)
    cfd6:	e668      	b.n	ccaa <__aeabi_dmul+0xce>
    cfd8:	0003      	movs	r3, r0
    cfda:	4654      	mov	r4, sl
    cfdc:	3b28      	subs	r3, #40	; 0x28
    cfde:	409c      	lsls	r4, r3
    cfe0:	2300      	movs	r3, #0
    cfe2:	e6b9      	b.n	cd58 <__aeabi_dmul+0x17c>
    cfe4:	f000 fcb0 	bl	d948 <__clzsi2>
    cfe8:	3020      	adds	r0, #32
    cfea:	e6a6      	b.n	cd3a <__aeabi_dmul+0x15e>
    cfec:	0003      	movs	r3, r0
    cfee:	3b28      	subs	r3, #40	; 0x28
    cff0:	409f      	lsls	r7, r3
    cff2:	2300      	movs	r3, #0
    cff4:	46bb      	mov	fp, r7
    cff6:	4699      	mov	r9, r3
    cff8:	e68a      	b.n	cd10 <__aeabi_dmul+0x134>
    cffa:	f000 fca5 	bl	d948 <__clzsi2>
    cffe:	3020      	adds	r0, #32
    d000:	e674      	b.n	ccec <__aeabi_dmul+0x110>
    d002:	46b4      	mov	ip, r6
    d004:	e7ad      	b.n	cf62 <__aeabi_dmul+0x386>
    d006:	2501      	movs	r5, #1
    d008:	1a2a      	subs	r2, r5, r0
    d00a:	2a38      	cmp	r2, #56	; 0x38
    d00c:	dd06      	ble.n	d01c <__aeabi_dmul+0x440>
    d00e:	9b01      	ldr	r3, [sp, #4]
    d010:	2400      	movs	r4, #0
    d012:	401d      	ands	r5, r3
    d014:	2300      	movs	r3, #0
    d016:	2200      	movs	r2, #0
    d018:	4699      	mov	r9, r3
    d01a:	e646      	b.n	ccaa <__aeabi_dmul+0xce>
    d01c:	2a1f      	cmp	r2, #31
    d01e:	dc21      	bgt.n	d064 <__aeabi_dmul+0x488>
    d020:	2520      	movs	r5, #32
    d022:	0020      	movs	r0, r4
    d024:	1aad      	subs	r5, r5, r2
    d026:	001e      	movs	r6, r3
    d028:	40ab      	lsls	r3, r5
    d02a:	40a8      	lsls	r0, r5
    d02c:	40d6      	lsrs	r6, r2
    d02e:	1e5d      	subs	r5, r3, #1
    d030:	41ab      	sbcs	r3, r5
    d032:	4330      	orrs	r0, r6
    d034:	4318      	orrs	r0, r3
    d036:	40d4      	lsrs	r4, r2
    d038:	0743      	lsls	r3, r0, #29
    d03a:	d009      	beq.n	d050 <__aeabi_dmul+0x474>
    d03c:	230f      	movs	r3, #15
    d03e:	4003      	ands	r3, r0
    d040:	2b04      	cmp	r3, #4
    d042:	d005      	beq.n	d050 <__aeabi_dmul+0x474>
    d044:	0003      	movs	r3, r0
    d046:	1d18      	adds	r0, r3, #4
    d048:	4298      	cmp	r0, r3
    d04a:	419b      	sbcs	r3, r3
    d04c:	425b      	negs	r3, r3
    d04e:	18e4      	adds	r4, r4, r3
    d050:	0223      	lsls	r3, r4, #8
    d052:	d521      	bpl.n	d098 <__aeabi_dmul+0x4bc>
    d054:	2501      	movs	r5, #1
    d056:	9b01      	ldr	r3, [sp, #4]
    d058:	2401      	movs	r4, #1
    d05a:	401d      	ands	r5, r3
    d05c:	2300      	movs	r3, #0
    d05e:	2200      	movs	r2, #0
    d060:	4699      	mov	r9, r3
    d062:	e622      	b.n	ccaa <__aeabi_dmul+0xce>
    d064:	251f      	movs	r5, #31
    d066:	0021      	movs	r1, r4
    d068:	426d      	negs	r5, r5
    d06a:	1a28      	subs	r0, r5, r0
    d06c:	40c1      	lsrs	r1, r0
    d06e:	0008      	movs	r0, r1
    d070:	2a20      	cmp	r2, #32
    d072:	d01d      	beq.n	d0b0 <__aeabi_dmul+0x4d4>
    d074:	355f      	adds	r5, #95	; 0x5f
    d076:	1aaa      	subs	r2, r5, r2
    d078:	4094      	lsls	r4, r2
    d07a:	4323      	orrs	r3, r4
    d07c:	1e5c      	subs	r4, r3, #1
    d07e:	41a3      	sbcs	r3, r4
    d080:	2507      	movs	r5, #7
    d082:	4303      	orrs	r3, r0
    d084:	401d      	ands	r5, r3
    d086:	2200      	movs	r2, #0
    d088:	2d00      	cmp	r5, #0
    d08a:	d009      	beq.n	d0a0 <__aeabi_dmul+0x4c4>
    d08c:	220f      	movs	r2, #15
    d08e:	2400      	movs	r4, #0
    d090:	401a      	ands	r2, r3
    d092:	0018      	movs	r0, r3
    d094:	2a04      	cmp	r2, #4
    d096:	d1d6      	bne.n	d046 <__aeabi_dmul+0x46a>
    d098:	0003      	movs	r3, r0
    d09a:	0765      	lsls	r5, r4, #29
    d09c:	0264      	lsls	r4, r4, #9
    d09e:	0b22      	lsrs	r2, r4, #12
    d0a0:	08db      	lsrs	r3, r3, #3
    d0a2:	432b      	orrs	r3, r5
    d0a4:	2501      	movs	r5, #1
    d0a6:	4699      	mov	r9, r3
    d0a8:	9b01      	ldr	r3, [sp, #4]
    d0aa:	2400      	movs	r4, #0
    d0ac:	401d      	ands	r5, r3
    d0ae:	e5fc      	b.n	ccaa <__aeabi_dmul+0xce>
    d0b0:	2400      	movs	r4, #0
    d0b2:	e7e2      	b.n	d07a <__aeabi_dmul+0x49e>
    d0b4:	2280      	movs	r2, #128	; 0x80
    d0b6:	2501      	movs	r5, #1
    d0b8:	0312      	lsls	r2, r2, #12
    d0ba:	4322      	orrs	r2, r4
    d0bc:	9901      	ldr	r1, [sp, #4]
    d0be:	0312      	lsls	r2, r2, #12
    d0c0:	0b12      	lsrs	r2, r2, #12
    d0c2:	400d      	ands	r5, r1
    d0c4:	4699      	mov	r9, r3
    d0c6:	4c04      	ldr	r4, [pc, #16]	; (d0d8 <__aeabi_dmul+0x4fc>)
    d0c8:	e5ef      	b.n	ccaa <__aeabi_dmul+0xce>
    d0ca:	46c0      	nop			; (mov r8, r8)
    d0cc:	000003ff 	.word	0x000003ff
    d0d0:	feffffff 	.word	0xfeffffff
    d0d4:	000007fe 	.word	0x000007fe
    d0d8:	000007ff 	.word	0x000007ff

0000d0dc <__aeabi_dsub>:
    d0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d0de:	4646      	mov	r6, r8
    d0e0:	46d6      	mov	lr, sl
    d0e2:	464f      	mov	r7, r9
    d0e4:	030c      	lsls	r4, r1, #12
    d0e6:	b5c0      	push	{r6, r7, lr}
    d0e8:	0fcd      	lsrs	r5, r1, #31
    d0ea:	004e      	lsls	r6, r1, #1
    d0ec:	0a61      	lsrs	r1, r4, #9
    d0ee:	0f44      	lsrs	r4, r0, #29
    d0f0:	430c      	orrs	r4, r1
    d0f2:	00c1      	lsls	r1, r0, #3
    d0f4:	0058      	lsls	r0, r3, #1
    d0f6:	0d40      	lsrs	r0, r0, #21
    d0f8:	4684      	mov	ip, r0
    d0fa:	468a      	mov	sl, r1
    d0fc:	000f      	movs	r7, r1
    d0fe:	0319      	lsls	r1, r3, #12
    d100:	0f50      	lsrs	r0, r2, #29
    d102:	0a49      	lsrs	r1, r1, #9
    d104:	4301      	orrs	r1, r0
    d106:	48c6      	ldr	r0, [pc, #792]	; (d420 <__aeabi_dsub+0x344>)
    d108:	0d76      	lsrs	r6, r6, #21
    d10a:	46a8      	mov	r8, r5
    d10c:	0fdb      	lsrs	r3, r3, #31
    d10e:	00d2      	lsls	r2, r2, #3
    d110:	4584      	cmp	ip, r0
    d112:	d100      	bne.n	d116 <__aeabi_dsub+0x3a>
    d114:	e0d8      	b.n	d2c8 <__aeabi_dsub+0x1ec>
    d116:	2001      	movs	r0, #1
    d118:	4043      	eors	r3, r0
    d11a:	42ab      	cmp	r3, r5
    d11c:	d100      	bne.n	d120 <__aeabi_dsub+0x44>
    d11e:	e0a6      	b.n	d26e <__aeabi_dsub+0x192>
    d120:	4660      	mov	r0, ip
    d122:	1a35      	subs	r5, r6, r0
    d124:	2d00      	cmp	r5, #0
    d126:	dc00      	bgt.n	d12a <__aeabi_dsub+0x4e>
    d128:	e105      	b.n	d336 <__aeabi_dsub+0x25a>
    d12a:	2800      	cmp	r0, #0
    d12c:	d110      	bne.n	d150 <__aeabi_dsub+0x74>
    d12e:	000b      	movs	r3, r1
    d130:	4313      	orrs	r3, r2
    d132:	d100      	bne.n	d136 <__aeabi_dsub+0x5a>
    d134:	e0d7      	b.n	d2e6 <__aeabi_dsub+0x20a>
    d136:	1e6b      	subs	r3, r5, #1
    d138:	2b00      	cmp	r3, #0
    d13a:	d000      	beq.n	d13e <__aeabi_dsub+0x62>
    d13c:	e14b      	b.n	d3d6 <__aeabi_dsub+0x2fa>
    d13e:	4653      	mov	r3, sl
    d140:	1a9f      	subs	r7, r3, r2
    d142:	45ba      	cmp	sl, r7
    d144:	4180      	sbcs	r0, r0
    d146:	1a64      	subs	r4, r4, r1
    d148:	4240      	negs	r0, r0
    d14a:	1a24      	subs	r4, r4, r0
    d14c:	2601      	movs	r6, #1
    d14e:	e01e      	b.n	d18e <__aeabi_dsub+0xb2>
    d150:	4bb3      	ldr	r3, [pc, #716]	; (d420 <__aeabi_dsub+0x344>)
    d152:	429e      	cmp	r6, r3
    d154:	d048      	beq.n	d1e8 <__aeabi_dsub+0x10c>
    d156:	2380      	movs	r3, #128	; 0x80
    d158:	041b      	lsls	r3, r3, #16
    d15a:	4319      	orrs	r1, r3
    d15c:	2d38      	cmp	r5, #56	; 0x38
    d15e:	dd00      	ble.n	d162 <__aeabi_dsub+0x86>
    d160:	e119      	b.n	d396 <__aeabi_dsub+0x2ba>
    d162:	2d1f      	cmp	r5, #31
    d164:	dd00      	ble.n	d168 <__aeabi_dsub+0x8c>
    d166:	e14c      	b.n	d402 <__aeabi_dsub+0x326>
    d168:	2320      	movs	r3, #32
    d16a:	000f      	movs	r7, r1
    d16c:	1b5b      	subs	r3, r3, r5
    d16e:	0010      	movs	r0, r2
    d170:	409a      	lsls	r2, r3
    d172:	409f      	lsls	r7, r3
    d174:	40e8      	lsrs	r0, r5
    d176:	1e53      	subs	r3, r2, #1
    d178:	419a      	sbcs	r2, r3
    d17a:	40e9      	lsrs	r1, r5
    d17c:	4307      	orrs	r7, r0
    d17e:	4317      	orrs	r7, r2
    d180:	4653      	mov	r3, sl
    d182:	1bdf      	subs	r7, r3, r7
    d184:	1a61      	subs	r1, r4, r1
    d186:	45ba      	cmp	sl, r7
    d188:	41a4      	sbcs	r4, r4
    d18a:	4264      	negs	r4, r4
    d18c:	1b0c      	subs	r4, r1, r4
    d18e:	0223      	lsls	r3, r4, #8
    d190:	d400      	bmi.n	d194 <__aeabi_dsub+0xb8>
    d192:	e0c5      	b.n	d320 <__aeabi_dsub+0x244>
    d194:	0264      	lsls	r4, r4, #9
    d196:	0a65      	lsrs	r5, r4, #9
    d198:	2d00      	cmp	r5, #0
    d19a:	d100      	bne.n	d19e <__aeabi_dsub+0xc2>
    d19c:	e0f6      	b.n	d38c <__aeabi_dsub+0x2b0>
    d19e:	0028      	movs	r0, r5
    d1a0:	f000 fbd2 	bl	d948 <__clzsi2>
    d1a4:	0003      	movs	r3, r0
    d1a6:	3b08      	subs	r3, #8
    d1a8:	2b1f      	cmp	r3, #31
    d1aa:	dd00      	ble.n	d1ae <__aeabi_dsub+0xd2>
    d1ac:	e0e9      	b.n	d382 <__aeabi_dsub+0x2a6>
    d1ae:	2220      	movs	r2, #32
    d1b0:	003c      	movs	r4, r7
    d1b2:	1ad2      	subs	r2, r2, r3
    d1b4:	409d      	lsls	r5, r3
    d1b6:	40d4      	lsrs	r4, r2
    d1b8:	409f      	lsls	r7, r3
    d1ba:	4325      	orrs	r5, r4
    d1bc:	429e      	cmp	r6, r3
    d1be:	dd00      	ble.n	d1c2 <__aeabi_dsub+0xe6>
    d1c0:	e0db      	b.n	d37a <__aeabi_dsub+0x29e>
    d1c2:	1b9e      	subs	r6, r3, r6
    d1c4:	1c73      	adds	r3, r6, #1
    d1c6:	2b1f      	cmp	r3, #31
    d1c8:	dd00      	ble.n	d1cc <__aeabi_dsub+0xf0>
    d1ca:	e10a      	b.n	d3e2 <__aeabi_dsub+0x306>
    d1cc:	2220      	movs	r2, #32
    d1ce:	0038      	movs	r0, r7
    d1d0:	1ad2      	subs	r2, r2, r3
    d1d2:	0029      	movs	r1, r5
    d1d4:	4097      	lsls	r7, r2
    d1d6:	002c      	movs	r4, r5
    d1d8:	4091      	lsls	r1, r2
    d1da:	40d8      	lsrs	r0, r3
    d1dc:	1e7a      	subs	r2, r7, #1
    d1de:	4197      	sbcs	r7, r2
    d1e0:	40dc      	lsrs	r4, r3
    d1e2:	2600      	movs	r6, #0
    d1e4:	4301      	orrs	r1, r0
    d1e6:	430f      	orrs	r7, r1
    d1e8:	077b      	lsls	r3, r7, #29
    d1ea:	d009      	beq.n	d200 <__aeabi_dsub+0x124>
    d1ec:	230f      	movs	r3, #15
    d1ee:	403b      	ands	r3, r7
    d1f0:	2b04      	cmp	r3, #4
    d1f2:	d005      	beq.n	d200 <__aeabi_dsub+0x124>
    d1f4:	1d3b      	adds	r3, r7, #4
    d1f6:	42bb      	cmp	r3, r7
    d1f8:	41bf      	sbcs	r7, r7
    d1fa:	427f      	negs	r7, r7
    d1fc:	19e4      	adds	r4, r4, r7
    d1fe:	001f      	movs	r7, r3
    d200:	0223      	lsls	r3, r4, #8
    d202:	d525      	bpl.n	d250 <__aeabi_dsub+0x174>
    d204:	4b86      	ldr	r3, [pc, #536]	; (d420 <__aeabi_dsub+0x344>)
    d206:	3601      	adds	r6, #1
    d208:	429e      	cmp	r6, r3
    d20a:	d100      	bne.n	d20e <__aeabi_dsub+0x132>
    d20c:	e0af      	b.n	d36e <__aeabi_dsub+0x292>
    d20e:	4b85      	ldr	r3, [pc, #532]	; (d424 <__aeabi_dsub+0x348>)
    d210:	2501      	movs	r5, #1
    d212:	401c      	ands	r4, r3
    d214:	4643      	mov	r3, r8
    d216:	0762      	lsls	r2, r4, #29
    d218:	08ff      	lsrs	r7, r7, #3
    d21a:	0264      	lsls	r4, r4, #9
    d21c:	0576      	lsls	r6, r6, #21
    d21e:	4317      	orrs	r7, r2
    d220:	0b24      	lsrs	r4, r4, #12
    d222:	0d76      	lsrs	r6, r6, #21
    d224:	401d      	ands	r5, r3
    d226:	2100      	movs	r1, #0
    d228:	0324      	lsls	r4, r4, #12
    d22a:	0b23      	lsrs	r3, r4, #12
    d22c:	0d0c      	lsrs	r4, r1, #20
    d22e:	4a7e      	ldr	r2, [pc, #504]	; (d428 <__aeabi_dsub+0x34c>)
    d230:	0524      	lsls	r4, r4, #20
    d232:	431c      	orrs	r4, r3
    d234:	4014      	ands	r4, r2
    d236:	0533      	lsls	r3, r6, #20
    d238:	4323      	orrs	r3, r4
    d23a:	005b      	lsls	r3, r3, #1
    d23c:	07ed      	lsls	r5, r5, #31
    d23e:	085b      	lsrs	r3, r3, #1
    d240:	432b      	orrs	r3, r5
    d242:	0038      	movs	r0, r7
    d244:	0019      	movs	r1, r3
    d246:	bc1c      	pop	{r2, r3, r4}
    d248:	4690      	mov	r8, r2
    d24a:	4699      	mov	r9, r3
    d24c:	46a2      	mov	sl, r4
    d24e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d250:	2501      	movs	r5, #1
    d252:	4643      	mov	r3, r8
    d254:	0762      	lsls	r2, r4, #29
    d256:	08ff      	lsrs	r7, r7, #3
    d258:	4317      	orrs	r7, r2
    d25a:	08e4      	lsrs	r4, r4, #3
    d25c:	401d      	ands	r5, r3
    d25e:	4b70      	ldr	r3, [pc, #448]	; (d420 <__aeabi_dsub+0x344>)
    d260:	429e      	cmp	r6, r3
    d262:	d036      	beq.n	d2d2 <__aeabi_dsub+0x1f6>
    d264:	0324      	lsls	r4, r4, #12
    d266:	0576      	lsls	r6, r6, #21
    d268:	0b24      	lsrs	r4, r4, #12
    d26a:	0d76      	lsrs	r6, r6, #21
    d26c:	e7db      	b.n	d226 <__aeabi_dsub+0x14a>
    d26e:	4663      	mov	r3, ip
    d270:	1af3      	subs	r3, r6, r3
    d272:	2b00      	cmp	r3, #0
    d274:	dc00      	bgt.n	d278 <__aeabi_dsub+0x19c>
    d276:	e094      	b.n	d3a2 <__aeabi_dsub+0x2c6>
    d278:	4660      	mov	r0, ip
    d27a:	2800      	cmp	r0, #0
    d27c:	d035      	beq.n	d2ea <__aeabi_dsub+0x20e>
    d27e:	4868      	ldr	r0, [pc, #416]	; (d420 <__aeabi_dsub+0x344>)
    d280:	4286      	cmp	r6, r0
    d282:	d0b1      	beq.n	d1e8 <__aeabi_dsub+0x10c>
    d284:	2780      	movs	r7, #128	; 0x80
    d286:	043f      	lsls	r7, r7, #16
    d288:	4339      	orrs	r1, r7
    d28a:	2b38      	cmp	r3, #56	; 0x38
    d28c:	dc00      	bgt.n	d290 <__aeabi_dsub+0x1b4>
    d28e:	e0fd      	b.n	d48c <__aeabi_dsub+0x3b0>
    d290:	430a      	orrs	r2, r1
    d292:	0017      	movs	r7, r2
    d294:	2100      	movs	r1, #0
    d296:	1e7a      	subs	r2, r7, #1
    d298:	4197      	sbcs	r7, r2
    d29a:	4457      	add	r7, sl
    d29c:	4557      	cmp	r7, sl
    d29e:	4180      	sbcs	r0, r0
    d2a0:	1909      	adds	r1, r1, r4
    d2a2:	4244      	negs	r4, r0
    d2a4:	190c      	adds	r4, r1, r4
    d2a6:	0223      	lsls	r3, r4, #8
    d2a8:	d53a      	bpl.n	d320 <__aeabi_dsub+0x244>
    d2aa:	4b5d      	ldr	r3, [pc, #372]	; (d420 <__aeabi_dsub+0x344>)
    d2ac:	3601      	adds	r6, #1
    d2ae:	429e      	cmp	r6, r3
    d2b0:	d100      	bne.n	d2b4 <__aeabi_dsub+0x1d8>
    d2b2:	e14b      	b.n	d54c <__aeabi_dsub+0x470>
    d2b4:	2201      	movs	r2, #1
    d2b6:	4b5b      	ldr	r3, [pc, #364]	; (d424 <__aeabi_dsub+0x348>)
    d2b8:	401c      	ands	r4, r3
    d2ba:	087b      	lsrs	r3, r7, #1
    d2bc:	4017      	ands	r7, r2
    d2be:	431f      	orrs	r7, r3
    d2c0:	07e2      	lsls	r2, r4, #31
    d2c2:	4317      	orrs	r7, r2
    d2c4:	0864      	lsrs	r4, r4, #1
    d2c6:	e78f      	b.n	d1e8 <__aeabi_dsub+0x10c>
    d2c8:	0008      	movs	r0, r1
    d2ca:	4310      	orrs	r0, r2
    d2cc:	d000      	beq.n	d2d0 <__aeabi_dsub+0x1f4>
    d2ce:	e724      	b.n	d11a <__aeabi_dsub+0x3e>
    d2d0:	e721      	b.n	d116 <__aeabi_dsub+0x3a>
    d2d2:	0023      	movs	r3, r4
    d2d4:	433b      	orrs	r3, r7
    d2d6:	d100      	bne.n	d2da <__aeabi_dsub+0x1fe>
    d2d8:	e1b9      	b.n	d64e <__aeabi_dsub+0x572>
    d2da:	2280      	movs	r2, #128	; 0x80
    d2dc:	0312      	lsls	r2, r2, #12
    d2de:	4314      	orrs	r4, r2
    d2e0:	0324      	lsls	r4, r4, #12
    d2e2:	0b24      	lsrs	r4, r4, #12
    d2e4:	e79f      	b.n	d226 <__aeabi_dsub+0x14a>
    d2e6:	002e      	movs	r6, r5
    d2e8:	e77e      	b.n	d1e8 <__aeabi_dsub+0x10c>
    d2ea:	0008      	movs	r0, r1
    d2ec:	4310      	orrs	r0, r2
    d2ee:	d100      	bne.n	d2f2 <__aeabi_dsub+0x216>
    d2f0:	e0ca      	b.n	d488 <__aeabi_dsub+0x3ac>
    d2f2:	1e58      	subs	r0, r3, #1
    d2f4:	4684      	mov	ip, r0
    d2f6:	2800      	cmp	r0, #0
    d2f8:	d000      	beq.n	d2fc <__aeabi_dsub+0x220>
    d2fa:	e0e7      	b.n	d4cc <__aeabi_dsub+0x3f0>
    d2fc:	4452      	add	r2, sl
    d2fe:	4552      	cmp	r2, sl
    d300:	4180      	sbcs	r0, r0
    d302:	1864      	adds	r4, r4, r1
    d304:	4240      	negs	r0, r0
    d306:	1824      	adds	r4, r4, r0
    d308:	0017      	movs	r7, r2
    d30a:	2601      	movs	r6, #1
    d30c:	0223      	lsls	r3, r4, #8
    d30e:	d507      	bpl.n	d320 <__aeabi_dsub+0x244>
    d310:	2602      	movs	r6, #2
    d312:	e7cf      	b.n	d2b4 <__aeabi_dsub+0x1d8>
    d314:	4664      	mov	r4, ip
    d316:	432c      	orrs	r4, r5
    d318:	d100      	bne.n	d31c <__aeabi_dsub+0x240>
    d31a:	e1b3      	b.n	d684 <__aeabi_dsub+0x5a8>
    d31c:	002c      	movs	r4, r5
    d31e:	4667      	mov	r7, ip
    d320:	077b      	lsls	r3, r7, #29
    d322:	d000      	beq.n	d326 <__aeabi_dsub+0x24a>
    d324:	e762      	b.n	d1ec <__aeabi_dsub+0x110>
    d326:	0763      	lsls	r3, r4, #29
    d328:	08ff      	lsrs	r7, r7, #3
    d32a:	431f      	orrs	r7, r3
    d32c:	2501      	movs	r5, #1
    d32e:	4643      	mov	r3, r8
    d330:	08e4      	lsrs	r4, r4, #3
    d332:	401d      	ands	r5, r3
    d334:	e793      	b.n	d25e <__aeabi_dsub+0x182>
    d336:	2d00      	cmp	r5, #0
    d338:	d178      	bne.n	d42c <__aeabi_dsub+0x350>
    d33a:	1c75      	adds	r5, r6, #1
    d33c:	056d      	lsls	r5, r5, #21
    d33e:	0d6d      	lsrs	r5, r5, #21
    d340:	2d01      	cmp	r5, #1
    d342:	dc00      	bgt.n	d346 <__aeabi_dsub+0x26a>
    d344:	e0f2      	b.n	d52c <__aeabi_dsub+0x450>
    d346:	4650      	mov	r0, sl
    d348:	1a80      	subs	r0, r0, r2
    d34a:	4582      	cmp	sl, r0
    d34c:	41bf      	sbcs	r7, r7
    d34e:	1a65      	subs	r5, r4, r1
    d350:	427f      	negs	r7, r7
    d352:	1bed      	subs	r5, r5, r7
    d354:	4684      	mov	ip, r0
    d356:	0228      	lsls	r0, r5, #8
    d358:	d400      	bmi.n	d35c <__aeabi_dsub+0x280>
    d35a:	e08c      	b.n	d476 <__aeabi_dsub+0x39a>
    d35c:	4650      	mov	r0, sl
    d35e:	1a17      	subs	r7, r2, r0
    d360:	42ba      	cmp	r2, r7
    d362:	4192      	sbcs	r2, r2
    d364:	1b0c      	subs	r4, r1, r4
    d366:	4255      	negs	r5, r2
    d368:	1b65      	subs	r5, r4, r5
    d36a:	4698      	mov	r8, r3
    d36c:	e714      	b.n	d198 <__aeabi_dsub+0xbc>
    d36e:	2501      	movs	r5, #1
    d370:	4643      	mov	r3, r8
    d372:	2400      	movs	r4, #0
    d374:	401d      	ands	r5, r3
    d376:	2700      	movs	r7, #0
    d378:	e755      	b.n	d226 <__aeabi_dsub+0x14a>
    d37a:	4c2a      	ldr	r4, [pc, #168]	; (d424 <__aeabi_dsub+0x348>)
    d37c:	1af6      	subs	r6, r6, r3
    d37e:	402c      	ands	r4, r5
    d380:	e732      	b.n	d1e8 <__aeabi_dsub+0x10c>
    d382:	003d      	movs	r5, r7
    d384:	3828      	subs	r0, #40	; 0x28
    d386:	4085      	lsls	r5, r0
    d388:	2700      	movs	r7, #0
    d38a:	e717      	b.n	d1bc <__aeabi_dsub+0xe0>
    d38c:	0038      	movs	r0, r7
    d38e:	f000 fadb 	bl	d948 <__clzsi2>
    d392:	3020      	adds	r0, #32
    d394:	e706      	b.n	d1a4 <__aeabi_dsub+0xc8>
    d396:	430a      	orrs	r2, r1
    d398:	0017      	movs	r7, r2
    d39a:	2100      	movs	r1, #0
    d39c:	1e7a      	subs	r2, r7, #1
    d39e:	4197      	sbcs	r7, r2
    d3a0:	e6ee      	b.n	d180 <__aeabi_dsub+0xa4>
    d3a2:	2b00      	cmp	r3, #0
    d3a4:	d000      	beq.n	d3a8 <__aeabi_dsub+0x2cc>
    d3a6:	e0e5      	b.n	d574 <__aeabi_dsub+0x498>
    d3a8:	1c73      	adds	r3, r6, #1
    d3aa:	469c      	mov	ip, r3
    d3ac:	055b      	lsls	r3, r3, #21
    d3ae:	0d5b      	lsrs	r3, r3, #21
    d3b0:	2b01      	cmp	r3, #1
    d3b2:	dc00      	bgt.n	d3b6 <__aeabi_dsub+0x2da>
    d3b4:	e09f      	b.n	d4f6 <__aeabi_dsub+0x41a>
    d3b6:	4b1a      	ldr	r3, [pc, #104]	; (d420 <__aeabi_dsub+0x344>)
    d3b8:	459c      	cmp	ip, r3
    d3ba:	d100      	bne.n	d3be <__aeabi_dsub+0x2e2>
    d3bc:	e0c5      	b.n	d54a <__aeabi_dsub+0x46e>
    d3be:	4452      	add	r2, sl
    d3c0:	4552      	cmp	r2, sl
    d3c2:	4180      	sbcs	r0, r0
    d3c4:	1864      	adds	r4, r4, r1
    d3c6:	4240      	negs	r0, r0
    d3c8:	1824      	adds	r4, r4, r0
    d3ca:	07e7      	lsls	r7, r4, #31
    d3cc:	0852      	lsrs	r2, r2, #1
    d3ce:	4317      	orrs	r7, r2
    d3d0:	0864      	lsrs	r4, r4, #1
    d3d2:	4666      	mov	r6, ip
    d3d4:	e708      	b.n	d1e8 <__aeabi_dsub+0x10c>
    d3d6:	4812      	ldr	r0, [pc, #72]	; (d420 <__aeabi_dsub+0x344>)
    d3d8:	4285      	cmp	r5, r0
    d3da:	d100      	bne.n	d3de <__aeabi_dsub+0x302>
    d3dc:	e085      	b.n	d4ea <__aeabi_dsub+0x40e>
    d3de:	001d      	movs	r5, r3
    d3e0:	e6bc      	b.n	d15c <__aeabi_dsub+0x80>
    d3e2:	0029      	movs	r1, r5
    d3e4:	3e1f      	subs	r6, #31
    d3e6:	40f1      	lsrs	r1, r6
    d3e8:	2b20      	cmp	r3, #32
    d3ea:	d100      	bne.n	d3ee <__aeabi_dsub+0x312>
    d3ec:	e07f      	b.n	d4ee <__aeabi_dsub+0x412>
    d3ee:	2240      	movs	r2, #64	; 0x40
    d3f0:	1ad3      	subs	r3, r2, r3
    d3f2:	409d      	lsls	r5, r3
    d3f4:	432f      	orrs	r7, r5
    d3f6:	1e7d      	subs	r5, r7, #1
    d3f8:	41af      	sbcs	r7, r5
    d3fa:	2400      	movs	r4, #0
    d3fc:	430f      	orrs	r7, r1
    d3fe:	2600      	movs	r6, #0
    d400:	e78e      	b.n	d320 <__aeabi_dsub+0x244>
    d402:	002b      	movs	r3, r5
    d404:	000f      	movs	r7, r1
    d406:	3b20      	subs	r3, #32
    d408:	40df      	lsrs	r7, r3
    d40a:	2d20      	cmp	r5, #32
    d40c:	d071      	beq.n	d4f2 <__aeabi_dsub+0x416>
    d40e:	2340      	movs	r3, #64	; 0x40
    d410:	1b5d      	subs	r5, r3, r5
    d412:	40a9      	lsls	r1, r5
    d414:	430a      	orrs	r2, r1
    d416:	1e51      	subs	r1, r2, #1
    d418:	418a      	sbcs	r2, r1
    d41a:	2100      	movs	r1, #0
    d41c:	4317      	orrs	r7, r2
    d41e:	e6af      	b.n	d180 <__aeabi_dsub+0xa4>
    d420:	000007ff 	.word	0x000007ff
    d424:	ff7fffff 	.word	0xff7fffff
    d428:	800fffff 	.word	0x800fffff
    d42c:	2e00      	cmp	r6, #0
    d42e:	d03e      	beq.n	d4ae <__aeabi_dsub+0x3d2>
    d430:	4eb3      	ldr	r6, [pc, #716]	; (d700 <__aeabi_dsub+0x624>)
    d432:	45b4      	cmp	ip, r6
    d434:	d045      	beq.n	d4c2 <__aeabi_dsub+0x3e6>
    d436:	2680      	movs	r6, #128	; 0x80
    d438:	0436      	lsls	r6, r6, #16
    d43a:	426d      	negs	r5, r5
    d43c:	4334      	orrs	r4, r6
    d43e:	2d38      	cmp	r5, #56	; 0x38
    d440:	dd00      	ble.n	d444 <__aeabi_dsub+0x368>
    d442:	e0a8      	b.n	d596 <__aeabi_dsub+0x4ba>
    d444:	2d1f      	cmp	r5, #31
    d446:	dd00      	ble.n	d44a <__aeabi_dsub+0x36e>
    d448:	e11f      	b.n	d68a <__aeabi_dsub+0x5ae>
    d44a:	2620      	movs	r6, #32
    d44c:	0027      	movs	r7, r4
    d44e:	4650      	mov	r0, sl
    d450:	1b76      	subs	r6, r6, r5
    d452:	40b7      	lsls	r7, r6
    d454:	40e8      	lsrs	r0, r5
    d456:	4307      	orrs	r7, r0
    d458:	4650      	mov	r0, sl
    d45a:	40b0      	lsls	r0, r6
    d45c:	1e46      	subs	r6, r0, #1
    d45e:	41b0      	sbcs	r0, r6
    d460:	40ec      	lsrs	r4, r5
    d462:	4338      	orrs	r0, r7
    d464:	1a17      	subs	r7, r2, r0
    d466:	42ba      	cmp	r2, r7
    d468:	4192      	sbcs	r2, r2
    d46a:	1b0c      	subs	r4, r1, r4
    d46c:	4252      	negs	r2, r2
    d46e:	1aa4      	subs	r4, r4, r2
    d470:	4666      	mov	r6, ip
    d472:	4698      	mov	r8, r3
    d474:	e68b      	b.n	d18e <__aeabi_dsub+0xb2>
    d476:	4664      	mov	r4, ip
    d478:	4667      	mov	r7, ip
    d47a:	432c      	orrs	r4, r5
    d47c:	d000      	beq.n	d480 <__aeabi_dsub+0x3a4>
    d47e:	e68b      	b.n	d198 <__aeabi_dsub+0xbc>
    d480:	2500      	movs	r5, #0
    d482:	2600      	movs	r6, #0
    d484:	2700      	movs	r7, #0
    d486:	e6ea      	b.n	d25e <__aeabi_dsub+0x182>
    d488:	001e      	movs	r6, r3
    d48a:	e6ad      	b.n	d1e8 <__aeabi_dsub+0x10c>
    d48c:	2b1f      	cmp	r3, #31
    d48e:	dc60      	bgt.n	d552 <__aeabi_dsub+0x476>
    d490:	2720      	movs	r7, #32
    d492:	1af8      	subs	r0, r7, r3
    d494:	000f      	movs	r7, r1
    d496:	4684      	mov	ip, r0
    d498:	4087      	lsls	r7, r0
    d49a:	0010      	movs	r0, r2
    d49c:	40d8      	lsrs	r0, r3
    d49e:	4307      	orrs	r7, r0
    d4a0:	4660      	mov	r0, ip
    d4a2:	4082      	lsls	r2, r0
    d4a4:	1e50      	subs	r0, r2, #1
    d4a6:	4182      	sbcs	r2, r0
    d4a8:	40d9      	lsrs	r1, r3
    d4aa:	4317      	orrs	r7, r2
    d4ac:	e6f5      	b.n	d29a <__aeabi_dsub+0x1be>
    d4ae:	0026      	movs	r6, r4
    d4b0:	4650      	mov	r0, sl
    d4b2:	4306      	orrs	r6, r0
    d4b4:	d005      	beq.n	d4c2 <__aeabi_dsub+0x3e6>
    d4b6:	43ed      	mvns	r5, r5
    d4b8:	2d00      	cmp	r5, #0
    d4ba:	d0d3      	beq.n	d464 <__aeabi_dsub+0x388>
    d4bc:	4e90      	ldr	r6, [pc, #576]	; (d700 <__aeabi_dsub+0x624>)
    d4be:	45b4      	cmp	ip, r6
    d4c0:	d1bd      	bne.n	d43e <__aeabi_dsub+0x362>
    d4c2:	000c      	movs	r4, r1
    d4c4:	0017      	movs	r7, r2
    d4c6:	4666      	mov	r6, ip
    d4c8:	4698      	mov	r8, r3
    d4ca:	e68d      	b.n	d1e8 <__aeabi_dsub+0x10c>
    d4cc:	488c      	ldr	r0, [pc, #560]	; (d700 <__aeabi_dsub+0x624>)
    d4ce:	4283      	cmp	r3, r0
    d4d0:	d00b      	beq.n	d4ea <__aeabi_dsub+0x40e>
    d4d2:	4663      	mov	r3, ip
    d4d4:	e6d9      	b.n	d28a <__aeabi_dsub+0x1ae>
    d4d6:	2d00      	cmp	r5, #0
    d4d8:	d000      	beq.n	d4dc <__aeabi_dsub+0x400>
    d4da:	e096      	b.n	d60a <__aeabi_dsub+0x52e>
    d4dc:	0008      	movs	r0, r1
    d4de:	4310      	orrs	r0, r2
    d4e0:	d100      	bne.n	d4e4 <__aeabi_dsub+0x408>
    d4e2:	e0e2      	b.n	d6aa <__aeabi_dsub+0x5ce>
    d4e4:	000c      	movs	r4, r1
    d4e6:	0017      	movs	r7, r2
    d4e8:	4698      	mov	r8, r3
    d4ea:	4e85      	ldr	r6, [pc, #532]	; (d700 <__aeabi_dsub+0x624>)
    d4ec:	e67c      	b.n	d1e8 <__aeabi_dsub+0x10c>
    d4ee:	2500      	movs	r5, #0
    d4f0:	e780      	b.n	d3f4 <__aeabi_dsub+0x318>
    d4f2:	2100      	movs	r1, #0
    d4f4:	e78e      	b.n	d414 <__aeabi_dsub+0x338>
    d4f6:	0023      	movs	r3, r4
    d4f8:	4650      	mov	r0, sl
    d4fa:	4303      	orrs	r3, r0
    d4fc:	2e00      	cmp	r6, #0
    d4fe:	d000      	beq.n	d502 <__aeabi_dsub+0x426>
    d500:	e0a8      	b.n	d654 <__aeabi_dsub+0x578>
    d502:	2b00      	cmp	r3, #0
    d504:	d100      	bne.n	d508 <__aeabi_dsub+0x42c>
    d506:	e0de      	b.n	d6c6 <__aeabi_dsub+0x5ea>
    d508:	000b      	movs	r3, r1
    d50a:	4313      	orrs	r3, r2
    d50c:	d100      	bne.n	d510 <__aeabi_dsub+0x434>
    d50e:	e66b      	b.n	d1e8 <__aeabi_dsub+0x10c>
    d510:	4452      	add	r2, sl
    d512:	4552      	cmp	r2, sl
    d514:	4180      	sbcs	r0, r0
    d516:	1864      	adds	r4, r4, r1
    d518:	4240      	negs	r0, r0
    d51a:	1824      	adds	r4, r4, r0
    d51c:	0017      	movs	r7, r2
    d51e:	0223      	lsls	r3, r4, #8
    d520:	d400      	bmi.n	d524 <__aeabi_dsub+0x448>
    d522:	e6fd      	b.n	d320 <__aeabi_dsub+0x244>
    d524:	4b77      	ldr	r3, [pc, #476]	; (d704 <__aeabi_dsub+0x628>)
    d526:	4666      	mov	r6, ip
    d528:	401c      	ands	r4, r3
    d52a:	e65d      	b.n	d1e8 <__aeabi_dsub+0x10c>
    d52c:	0025      	movs	r5, r4
    d52e:	4650      	mov	r0, sl
    d530:	4305      	orrs	r5, r0
    d532:	2e00      	cmp	r6, #0
    d534:	d1cf      	bne.n	d4d6 <__aeabi_dsub+0x3fa>
    d536:	2d00      	cmp	r5, #0
    d538:	d14f      	bne.n	d5da <__aeabi_dsub+0x4fe>
    d53a:	000c      	movs	r4, r1
    d53c:	4314      	orrs	r4, r2
    d53e:	d100      	bne.n	d542 <__aeabi_dsub+0x466>
    d540:	e0a0      	b.n	d684 <__aeabi_dsub+0x5a8>
    d542:	000c      	movs	r4, r1
    d544:	0017      	movs	r7, r2
    d546:	4698      	mov	r8, r3
    d548:	e64e      	b.n	d1e8 <__aeabi_dsub+0x10c>
    d54a:	4666      	mov	r6, ip
    d54c:	2400      	movs	r4, #0
    d54e:	2700      	movs	r7, #0
    d550:	e685      	b.n	d25e <__aeabi_dsub+0x182>
    d552:	001f      	movs	r7, r3
    d554:	0008      	movs	r0, r1
    d556:	3f20      	subs	r7, #32
    d558:	40f8      	lsrs	r0, r7
    d55a:	0007      	movs	r7, r0
    d55c:	2b20      	cmp	r3, #32
    d55e:	d100      	bne.n	d562 <__aeabi_dsub+0x486>
    d560:	e08e      	b.n	d680 <__aeabi_dsub+0x5a4>
    d562:	2040      	movs	r0, #64	; 0x40
    d564:	1ac3      	subs	r3, r0, r3
    d566:	4099      	lsls	r1, r3
    d568:	430a      	orrs	r2, r1
    d56a:	1e51      	subs	r1, r2, #1
    d56c:	418a      	sbcs	r2, r1
    d56e:	2100      	movs	r1, #0
    d570:	4317      	orrs	r7, r2
    d572:	e692      	b.n	d29a <__aeabi_dsub+0x1be>
    d574:	2e00      	cmp	r6, #0
    d576:	d114      	bne.n	d5a2 <__aeabi_dsub+0x4c6>
    d578:	0026      	movs	r6, r4
    d57a:	4650      	mov	r0, sl
    d57c:	4306      	orrs	r6, r0
    d57e:	d062      	beq.n	d646 <__aeabi_dsub+0x56a>
    d580:	43db      	mvns	r3, r3
    d582:	2b00      	cmp	r3, #0
    d584:	d15c      	bne.n	d640 <__aeabi_dsub+0x564>
    d586:	1887      	adds	r7, r0, r2
    d588:	4297      	cmp	r7, r2
    d58a:	4192      	sbcs	r2, r2
    d58c:	1864      	adds	r4, r4, r1
    d58e:	4252      	negs	r2, r2
    d590:	18a4      	adds	r4, r4, r2
    d592:	4666      	mov	r6, ip
    d594:	e687      	b.n	d2a6 <__aeabi_dsub+0x1ca>
    d596:	4650      	mov	r0, sl
    d598:	4320      	orrs	r0, r4
    d59a:	1e44      	subs	r4, r0, #1
    d59c:	41a0      	sbcs	r0, r4
    d59e:	2400      	movs	r4, #0
    d5a0:	e760      	b.n	d464 <__aeabi_dsub+0x388>
    d5a2:	4e57      	ldr	r6, [pc, #348]	; (d700 <__aeabi_dsub+0x624>)
    d5a4:	45b4      	cmp	ip, r6
    d5a6:	d04e      	beq.n	d646 <__aeabi_dsub+0x56a>
    d5a8:	2680      	movs	r6, #128	; 0x80
    d5aa:	0436      	lsls	r6, r6, #16
    d5ac:	425b      	negs	r3, r3
    d5ae:	4334      	orrs	r4, r6
    d5b0:	2b38      	cmp	r3, #56	; 0x38
    d5b2:	dd00      	ble.n	d5b6 <__aeabi_dsub+0x4da>
    d5b4:	e07f      	b.n	d6b6 <__aeabi_dsub+0x5da>
    d5b6:	2b1f      	cmp	r3, #31
    d5b8:	dd00      	ble.n	d5bc <__aeabi_dsub+0x4e0>
    d5ba:	e08b      	b.n	d6d4 <__aeabi_dsub+0x5f8>
    d5bc:	2620      	movs	r6, #32
    d5be:	0027      	movs	r7, r4
    d5c0:	4650      	mov	r0, sl
    d5c2:	1af6      	subs	r6, r6, r3
    d5c4:	40b7      	lsls	r7, r6
    d5c6:	40d8      	lsrs	r0, r3
    d5c8:	4307      	orrs	r7, r0
    d5ca:	4650      	mov	r0, sl
    d5cc:	40b0      	lsls	r0, r6
    d5ce:	1e46      	subs	r6, r0, #1
    d5d0:	41b0      	sbcs	r0, r6
    d5d2:	4307      	orrs	r7, r0
    d5d4:	40dc      	lsrs	r4, r3
    d5d6:	18bf      	adds	r7, r7, r2
    d5d8:	e7d6      	b.n	d588 <__aeabi_dsub+0x4ac>
    d5da:	000d      	movs	r5, r1
    d5dc:	4315      	orrs	r5, r2
    d5de:	d100      	bne.n	d5e2 <__aeabi_dsub+0x506>
    d5e0:	e602      	b.n	d1e8 <__aeabi_dsub+0x10c>
    d5e2:	4650      	mov	r0, sl
    d5e4:	1a80      	subs	r0, r0, r2
    d5e6:	4582      	cmp	sl, r0
    d5e8:	41bf      	sbcs	r7, r7
    d5ea:	1a65      	subs	r5, r4, r1
    d5ec:	427f      	negs	r7, r7
    d5ee:	1bed      	subs	r5, r5, r7
    d5f0:	4684      	mov	ip, r0
    d5f2:	0228      	lsls	r0, r5, #8
    d5f4:	d400      	bmi.n	d5f8 <__aeabi_dsub+0x51c>
    d5f6:	e68d      	b.n	d314 <__aeabi_dsub+0x238>
    d5f8:	4650      	mov	r0, sl
    d5fa:	1a17      	subs	r7, r2, r0
    d5fc:	42ba      	cmp	r2, r7
    d5fe:	4192      	sbcs	r2, r2
    d600:	1b0c      	subs	r4, r1, r4
    d602:	4252      	negs	r2, r2
    d604:	1aa4      	subs	r4, r4, r2
    d606:	4698      	mov	r8, r3
    d608:	e5ee      	b.n	d1e8 <__aeabi_dsub+0x10c>
    d60a:	000d      	movs	r5, r1
    d60c:	4315      	orrs	r5, r2
    d60e:	d100      	bne.n	d612 <__aeabi_dsub+0x536>
    d610:	e76b      	b.n	d4ea <__aeabi_dsub+0x40e>
    d612:	4650      	mov	r0, sl
    d614:	0767      	lsls	r7, r4, #29
    d616:	08c0      	lsrs	r0, r0, #3
    d618:	4307      	orrs	r7, r0
    d61a:	2080      	movs	r0, #128	; 0x80
    d61c:	08e4      	lsrs	r4, r4, #3
    d61e:	0300      	lsls	r0, r0, #12
    d620:	4204      	tst	r4, r0
    d622:	d007      	beq.n	d634 <__aeabi_dsub+0x558>
    d624:	08cd      	lsrs	r5, r1, #3
    d626:	4205      	tst	r5, r0
    d628:	d104      	bne.n	d634 <__aeabi_dsub+0x558>
    d62a:	002c      	movs	r4, r5
    d62c:	4698      	mov	r8, r3
    d62e:	08d7      	lsrs	r7, r2, #3
    d630:	0749      	lsls	r1, r1, #29
    d632:	430f      	orrs	r7, r1
    d634:	0f7b      	lsrs	r3, r7, #29
    d636:	00e4      	lsls	r4, r4, #3
    d638:	431c      	orrs	r4, r3
    d63a:	00ff      	lsls	r7, r7, #3
    d63c:	4e30      	ldr	r6, [pc, #192]	; (d700 <__aeabi_dsub+0x624>)
    d63e:	e5d3      	b.n	d1e8 <__aeabi_dsub+0x10c>
    d640:	4e2f      	ldr	r6, [pc, #188]	; (d700 <__aeabi_dsub+0x624>)
    d642:	45b4      	cmp	ip, r6
    d644:	d1b4      	bne.n	d5b0 <__aeabi_dsub+0x4d4>
    d646:	000c      	movs	r4, r1
    d648:	0017      	movs	r7, r2
    d64a:	4666      	mov	r6, ip
    d64c:	e5cc      	b.n	d1e8 <__aeabi_dsub+0x10c>
    d64e:	2700      	movs	r7, #0
    d650:	2400      	movs	r4, #0
    d652:	e5e8      	b.n	d226 <__aeabi_dsub+0x14a>
    d654:	2b00      	cmp	r3, #0
    d656:	d039      	beq.n	d6cc <__aeabi_dsub+0x5f0>
    d658:	000b      	movs	r3, r1
    d65a:	4313      	orrs	r3, r2
    d65c:	d100      	bne.n	d660 <__aeabi_dsub+0x584>
    d65e:	e744      	b.n	d4ea <__aeabi_dsub+0x40e>
    d660:	08c0      	lsrs	r0, r0, #3
    d662:	0767      	lsls	r7, r4, #29
    d664:	4307      	orrs	r7, r0
    d666:	2080      	movs	r0, #128	; 0x80
    d668:	08e4      	lsrs	r4, r4, #3
    d66a:	0300      	lsls	r0, r0, #12
    d66c:	4204      	tst	r4, r0
    d66e:	d0e1      	beq.n	d634 <__aeabi_dsub+0x558>
    d670:	08cb      	lsrs	r3, r1, #3
    d672:	4203      	tst	r3, r0
    d674:	d1de      	bne.n	d634 <__aeabi_dsub+0x558>
    d676:	08d7      	lsrs	r7, r2, #3
    d678:	0749      	lsls	r1, r1, #29
    d67a:	430f      	orrs	r7, r1
    d67c:	001c      	movs	r4, r3
    d67e:	e7d9      	b.n	d634 <__aeabi_dsub+0x558>
    d680:	2100      	movs	r1, #0
    d682:	e771      	b.n	d568 <__aeabi_dsub+0x48c>
    d684:	2500      	movs	r5, #0
    d686:	2700      	movs	r7, #0
    d688:	e5e9      	b.n	d25e <__aeabi_dsub+0x182>
    d68a:	002e      	movs	r6, r5
    d68c:	0027      	movs	r7, r4
    d68e:	3e20      	subs	r6, #32
    d690:	40f7      	lsrs	r7, r6
    d692:	2d20      	cmp	r5, #32
    d694:	d02f      	beq.n	d6f6 <__aeabi_dsub+0x61a>
    d696:	2640      	movs	r6, #64	; 0x40
    d698:	1b75      	subs	r5, r6, r5
    d69a:	40ac      	lsls	r4, r5
    d69c:	4650      	mov	r0, sl
    d69e:	4320      	orrs	r0, r4
    d6a0:	1e44      	subs	r4, r0, #1
    d6a2:	41a0      	sbcs	r0, r4
    d6a4:	2400      	movs	r4, #0
    d6a6:	4338      	orrs	r0, r7
    d6a8:	e6dc      	b.n	d464 <__aeabi_dsub+0x388>
    d6aa:	2480      	movs	r4, #128	; 0x80
    d6ac:	2500      	movs	r5, #0
    d6ae:	0324      	lsls	r4, r4, #12
    d6b0:	4e13      	ldr	r6, [pc, #76]	; (d700 <__aeabi_dsub+0x624>)
    d6b2:	2700      	movs	r7, #0
    d6b4:	e5d3      	b.n	d25e <__aeabi_dsub+0x182>
    d6b6:	4650      	mov	r0, sl
    d6b8:	4320      	orrs	r0, r4
    d6ba:	0007      	movs	r7, r0
    d6bc:	1e78      	subs	r0, r7, #1
    d6be:	4187      	sbcs	r7, r0
    d6c0:	2400      	movs	r4, #0
    d6c2:	18bf      	adds	r7, r7, r2
    d6c4:	e760      	b.n	d588 <__aeabi_dsub+0x4ac>
    d6c6:	000c      	movs	r4, r1
    d6c8:	0017      	movs	r7, r2
    d6ca:	e58d      	b.n	d1e8 <__aeabi_dsub+0x10c>
    d6cc:	000c      	movs	r4, r1
    d6ce:	0017      	movs	r7, r2
    d6d0:	4e0b      	ldr	r6, [pc, #44]	; (d700 <__aeabi_dsub+0x624>)
    d6d2:	e589      	b.n	d1e8 <__aeabi_dsub+0x10c>
    d6d4:	001e      	movs	r6, r3
    d6d6:	0027      	movs	r7, r4
    d6d8:	3e20      	subs	r6, #32
    d6da:	40f7      	lsrs	r7, r6
    d6dc:	2b20      	cmp	r3, #32
    d6de:	d00c      	beq.n	d6fa <__aeabi_dsub+0x61e>
    d6e0:	2640      	movs	r6, #64	; 0x40
    d6e2:	1af3      	subs	r3, r6, r3
    d6e4:	409c      	lsls	r4, r3
    d6e6:	4650      	mov	r0, sl
    d6e8:	4320      	orrs	r0, r4
    d6ea:	1e44      	subs	r4, r0, #1
    d6ec:	41a0      	sbcs	r0, r4
    d6ee:	4307      	orrs	r7, r0
    d6f0:	2400      	movs	r4, #0
    d6f2:	18bf      	adds	r7, r7, r2
    d6f4:	e748      	b.n	d588 <__aeabi_dsub+0x4ac>
    d6f6:	2400      	movs	r4, #0
    d6f8:	e7d0      	b.n	d69c <__aeabi_dsub+0x5c0>
    d6fa:	2400      	movs	r4, #0
    d6fc:	e7f3      	b.n	d6e6 <__aeabi_dsub+0x60a>
    d6fe:	46c0      	nop			; (mov r8, r8)
    d700:	000007ff 	.word	0x000007ff
    d704:	ff7fffff 	.word	0xff7fffff

0000d708 <__aeabi_dcmpun>:
    d708:	b570      	push	{r4, r5, r6, lr}
    d70a:	4e0e      	ldr	r6, [pc, #56]	; (d744 <__aeabi_dcmpun+0x3c>)
    d70c:	030d      	lsls	r5, r1, #12
    d70e:	031c      	lsls	r4, r3, #12
    d710:	0049      	lsls	r1, r1, #1
    d712:	005b      	lsls	r3, r3, #1
    d714:	0b2d      	lsrs	r5, r5, #12
    d716:	0d49      	lsrs	r1, r1, #21
    d718:	0b24      	lsrs	r4, r4, #12
    d71a:	0d5b      	lsrs	r3, r3, #21
    d71c:	42b1      	cmp	r1, r6
    d71e:	d004      	beq.n	d72a <__aeabi_dcmpun+0x22>
    d720:	4908      	ldr	r1, [pc, #32]	; (d744 <__aeabi_dcmpun+0x3c>)
    d722:	2000      	movs	r0, #0
    d724:	428b      	cmp	r3, r1
    d726:	d008      	beq.n	d73a <__aeabi_dcmpun+0x32>
    d728:	bd70      	pop	{r4, r5, r6, pc}
    d72a:	4305      	orrs	r5, r0
    d72c:	2001      	movs	r0, #1
    d72e:	2d00      	cmp	r5, #0
    d730:	d1fa      	bne.n	d728 <__aeabi_dcmpun+0x20>
    d732:	4904      	ldr	r1, [pc, #16]	; (d744 <__aeabi_dcmpun+0x3c>)
    d734:	2000      	movs	r0, #0
    d736:	428b      	cmp	r3, r1
    d738:	d1f6      	bne.n	d728 <__aeabi_dcmpun+0x20>
    d73a:	4314      	orrs	r4, r2
    d73c:	0020      	movs	r0, r4
    d73e:	1e44      	subs	r4, r0, #1
    d740:	41a0      	sbcs	r0, r4
    d742:	e7f1      	b.n	d728 <__aeabi_dcmpun+0x20>
    d744:	000007ff 	.word	0x000007ff

0000d748 <__aeabi_d2iz>:
    d748:	b530      	push	{r4, r5, lr}
    d74a:	4d13      	ldr	r5, [pc, #76]	; (d798 <__aeabi_d2iz+0x50>)
    d74c:	030a      	lsls	r2, r1, #12
    d74e:	004b      	lsls	r3, r1, #1
    d750:	0b12      	lsrs	r2, r2, #12
    d752:	0d5b      	lsrs	r3, r3, #21
    d754:	0fc9      	lsrs	r1, r1, #31
    d756:	2400      	movs	r4, #0
    d758:	42ab      	cmp	r3, r5
    d75a:	dd10      	ble.n	d77e <__aeabi_d2iz+0x36>
    d75c:	4c0f      	ldr	r4, [pc, #60]	; (d79c <__aeabi_d2iz+0x54>)
    d75e:	42a3      	cmp	r3, r4
    d760:	dc0f      	bgt.n	d782 <__aeabi_d2iz+0x3a>
    d762:	2480      	movs	r4, #128	; 0x80
    d764:	4d0e      	ldr	r5, [pc, #56]	; (d7a0 <__aeabi_d2iz+0x58>)
    d766:	0364      	lsls	r4, r4, #13
    d768:	4322      	orrs	r2, r4
    d76a:	1aed      	subs	r5, r5, r3
    d76c:	2d1f      	cmp	r5, #31
    d76e:	dd0b      	ble.n	d788 <__aeabi_d2iz+0x40>
    d770:	480c      	ldr	r0, [pc, #48]	; (d7a4 <__aeabi_d2iz+0x5c>)
    d772:	1ac3      	subs	r3, r0, r3
    d774:	40da      	lsrs	r2, r3
    d776:	4254      	negs	r4, r2
    d778:	2900      	cmp	r1, #0
    d77a:	d100      	bne.n	d77e <__aeabi_d2iz+0x36>
    d77c:	0014      	movs	r4, r2
    d77e:	0020      	movs	r0, r4
    d780:	bd30      	pop	{r4, r5, pc}
    d782:	4b09      	ldr	r3, [pc, #36]	; (d7a8 <__aeabi_d2iz+0x60>)
    d784:	18cc      	adds	r4, r1, r3
    d786:	e7fa      	b.n	d77e <__aeabi_d2iz+0x36>
    d788:	4c08      	ldr	r4, [pc, #32]	; (d7ac <__aeabi_d2iz+0x64>)
    d78a:	40e8      	lsrs	r0, r5
    d78c:	46a4      	mov	ip, r4
    d78e:	4463      	add	r3, ip
    d790:	409a      	lsls	r2, r3
    d792:	4302      	orrs	r2, r0
    d794:	e7ef      	b.n	d776 <__aeabi_d2iz+0x2e>
    d796:	46c0      	nop			; (mov r8, r8)
    d798:	000003fe 	.word	0x000003fe
    d79c:	0000041d 	.word	0x0000041d
    d7a0:	00000433 	.word	0x00000433
    d7a4:	00000413 	.word	0x00000413
    d7a8:	7fffffff 	.word	0x7fffffff
    d7ac:	fffffbed 	.word	0xfffffbed

0000d7b0 <__aeabi_i2d>:
    d7b0:	b570      	push	{r4, r5, r6, lr}
    d7b2:	2800      	cmp	r0, #0
    d7b4:	d030      	beq.n	d818 <__aeabi_i2d+0x68>
    d7b6:	17c3      	asrs	r3, r0, #31
    d7b8:	18c4      	adds	r4, r0, r3
    d7ba:	405c      	eors	r4, r3
    d7bc:	0fc5      	lsrs	r5, r0, #31
    d7be:	0020      	movs	r0, r4
    d7c0:	f000 f8c2 	bl	d948 <__clzsi2>
    d7c4:	4b17      	ldr	r3, [pc, #92]	; (d824 <__aeabi_i2d+0x74>)
    d7c6:	4a18      	ldr	r2, [pc, #96]	; (d828 <__aeabi_i2d+0x78>)
    d7c8:	1a1b      	subs	r3, r3, r0
    d7ca:	1ad2      	subs	r2, r2, r3
    d7cc:	2a1f      	cmp	r2, #31
    d7ce:	dd18      	ble.n	d802 <__aeabi_i2d+0x52>
    d7d0:	4a16      	ldr	r2, [pc, #88]	; (d82c <__aeabi_i2d+0x7c>)
    d7d2:	1ad2      	subs	r2, r2, r3
    d7d4:	4094      	lsls	r4, r2
    d7d6:	2200      	movs	r2, #0
    d7d8:	0324      	lsls	r4, r4, #12
    d7da:	055b      	lsls	r3, r3, #21
    d7dc:	0b24      	lsrs	r4, r4, #12
    d7de:	0d5b      	lsrs	r3, r3, #21
    d7e0:	2100      	movs	r1, #0
    d7e2:	0010      	movs	r0, r2
    d7e4:	0324      	lsls	r4, r4, #12
    d7e6:	0d0a      	lsrs	r2, r1, #20
    d7e8:	0b24      	lsrs	r4, r4, #12
    d7ea:	0512      	lsls	r2, r2, #20
    d7ec:	4322      	orrs	r2, r4
    d7ee:	4c10      	ldr	r4, [pc, #64]	; (d830 <__aeabi_i2d+0x80>)
    d7f0:	051b      	lsls	r3, r3, #20
    d7f2:	4022      	ands	r2, r4
    d7f4:	4313      	orrs	r3, r2
    d7f6:	005b      	lsls	r3, r3, #1
    d7f8:	07ed      	lsls	r5, r5, #31
    d7fa:	085b      	lsrs	r3, r3, #1
    d7fc:	432b      	orrs	r3, r5
    d7fe:	0019      	movs	r1, r3
    d800:	bd70      	pop	{r4, r5, r6, pc}
    d802:	0021      	movs	r1, r4
    d804:	4091      	lsls	r1, r2
    d806:	000a      	movs	r2, r1
    d808:	210b      	movs	r1, #11
    d80a:	1a08      	subs	r0, r1, r0
    d80c:	40c4      	lsrs	r4, r0
    d80e:	055b      	lsls	r3, r3, #21
    d810:	0324      	lsls	r4, r4, #12
    d812:	0b24      	lsrs	r4, r4, #12
    d814:	0d5b      	lsrs	r3, r3, #21
    d816:	e7e3      	b.n	d7e0 <__aeabi_i2d+0x30>
    d818:	2500      	movs	r5, #0
    d81a:	2300      	movs	r3, #0
    d81c:	2400      	movs	r4, #0
    d81e:	2200      	movs	r2, #0
    d820:	e7de      	b.n	d7e0 <__aeabi_i2d+0x30>
    d822:	46c0      	nop			; (mov r8, r8)
    d824:	0000041e 	.word	0x0000041e
    d828:	00000433 	.word	0x00000433
    d82c:	00000413 	.word	0x00000413
    d830:	800fffff 	.word	0x800fffff

0000d834 <__aeabi_ui2d>:
    d834:	b510      	push	{r4, lr}
    d836:	1e04      	subs	r4, r0, #0
    d838:	d028      	beq.n	d88c <__aeabi_ui2d+0x58>
    d83a:	f000 f885 	bl	d948 <__clzsi2>
    d83e:	4b15      	ldr	r3, [pc, #84]	; (d894 <__aeabi_ui2d+0x60>)
    d840:	4a15      	ldr	r2, [pc, #84]	; (d898 <__aeabi_ui2d+0x64>)
    d842:	1a1b      	subs	r3, r3, r0
    d844:	1ad2      	subs	r2, r2, r3
    d846:	2a1f      	cmp	r2, #31
    d848:	dd15      	ble.n	d876 <__aeabi_ui2d+0x42>
    d84a:	4a14      	ldr	r2, [pc, #80]	; (d89c <__aeabi_ui2d+0x68>)
    d84c:	1ad2      	subs	r2, r2, r3
    d84e:	4094      	lsls	r4, r2
    d850:	2200      	movs	r2, #0
    d852:	0324      	lsls	r4, r4, #12
    d854:	055b      	lsls	r3, r3, #21
    d856:	0b24      	lsrs	r4, r4, #12
    d858:	0d5b      	lsrs	r3, r3, #21
    d85a:	2100      	movs	r1, #0
    d85c:	0010      	movs	r0, r2
    d85e:	0324      	lsls	r4, r4, #12
    d860:	0d0a      	lsrs	r2, r1, #20
    d862:	0b24      	lsrs	r4, r4, #12
    d864:	0512      	lsls	r2, r2, #20
    d866:	4322      	orrs	r2, r4
    d868:	4c0d      	ldr	r4, [pc, #52]	; (d8a0 <__aeabi_ui2d+0x6c>)
    d86a:	051b      	lsls	r3, r3, #20
    d86c:	4022      	ands	r2, r4
    d86e:	4313      	orrs	r3, r2
    d870:	005b      	lsls	r3, r3, #1
    d872:	0859      	lsrs	r1, r3, #1
    d874:	bd10      	pop	{r4, pc}
    d876:	0021      	movs	r1, r4
    d878:	4091      	lsls	r1, r2
    d87a:	000a      	movs	r2, r1
    d87c:	210b      	movs	r1, #11
    d87e:	1a08      	subs	r0, r1, r0
    d880:	40c4      	lsrs	r4, r0
    d882:	055b      	lsls	r3, r3, #21
    d884:	0324      	lsls	r4, r4, #12
    d886:	0b24      	lsrs	r4, r4, #12
    d888:	0d5b      	lsrs	r3, r3, #21
    d88a:	e7e6      	b.n	d85a <__aeabi_ui2d+0x26>
    d88c:	2300      	movs	r3, #0
    d88e:	2400      	movs	r4, #0
    d890:	2200      	movs	r2, #0
    d892:	e7e2      	b.n	d85a <__aeabi_ui2d+0x26>
    d894:	0000041e 	.word	0x0000041e
    d898:	00000433 	.word	0x00000433
    d89c:	00000413 	.word	0x00000413
    d8a0:	800fffff 	.word	0x800fffff

0000d8a4 <__aeabi_f2d>:
    d8a4:	0041      	lsls	r1, r0, #1
    d8a6:	0e09      	lsrs	r1, r1, #24
    d8a8:	1c4b      	adds	r3, r1, #1
    d8aa:	b570      	push	{r4, r5, r6, lr}
    d8ac:	b2db      	uxtb	r3, r3
    d8ae:	0246      	lsls	r6, r0, #9
    d8b0:	0a75      	lsrs	r5, r6, #9
    d8b2:	0fc4      	lsrs	r4, r0, #31
    d8b4:	2b01      	cmp	r3, #1
    d8b6:	dd14      	ble.n	d8e2 <__aeabi_f2d+0x3e>
    d8b8:	23e0      	movs	r3, #224	; 0xe0
    d8ba:	009b      	lsls	r3, r3, #2
    d8bc:	076d      	lsls	r5, r5, #29
    d8be:	0b36      	lsrs	r6, r6, #12
    d8c0:	18cb      	adds	r3, r1, r3
    d8c2:	2100      	movs	r1, #0
    d8c4:	0d0a      	lsrs	r2, r1, #20
    d8c6:	0028      	movs	r0, r5
    d8c8:	0512      	lsls	r2, r2, #20
    d8ca:	4d1c      	ldr	r5, [pc, #112]	; (d93c <__aeabi_f2d+0x98>)
    d8cc:	4332      	orrs	r2, r6
    d8ce:	055b      	lsls	r3, r3, #21
    d8d0:	402a      	ands	r2, r5
    d8d2:	085b      	lsrs	r3, r3, #1
    d8d4:	4313      	orrs	r3, r2
    d8d6:	005b      	lsls	r3, r3, #1
    d8d8:	07e4      	lsls	r4, r4, #31
    d8da:	085b      	lsrs	r3, r3, #1
    d8dc:	4323      	orrs	r3, r4
    d8de:	0019      	movs	r1, r3
    d8e0:	bd70      	pop	{r4, r5, r6, pc}
    d8e2:	2900      	cmp	r1, #0
    d8e4:	d114      	bne.n	d910 <__aeabi_f2d+0x6c>
    d8e6:	2d00      	cmp	r5, #0
    d8e8:	d01e      	beq.n	d928 <__aeabi_f2d+0x84>
    d8ea:	0028      	movs	r0, r5
    d8ec:	f000 f82c 	bl	d948 <__clzsi2>
    d8f0:	280a      	cmp	r0, #10
    d8f2:	dc1c      	bgt.n	d92e <__aeabi_f2d+0x8a>
    d8f4:	230b      	movs	r3, #11
    d8f6:	002a      	movs	r2, r5
    d8f8:	1a1b      	subs	r3, r3, r0
    d8fa:	40da      	lsrs	r2, r3
    d8fc:	0003      	movs	r3, r0
    d8fe:	3315      	adds	r3, #21
    d900:	409d      	lsls	r5, r3
    d902:	4b0f      	ldr	r3, [pc, #60]	; (d940 <__aeabi_f2d+0x9c>)
    d904:	0312      	lsls	r2, r2, #12
    d906:	1a1b      	subs	r3, r3, r0
    d908:	055b      	lsls	r3, r3, #21
    d90a:	0b16      	lsrs	r6, r2, #12
    d90c:	0d5b      	lsrs	r3, r3, #21
    d90e:	e7d8      	b.n	d8c2 <__aeabi_f2d+0x1e>
    d910:	2d00      	cmp	r5, #0
    d912:	d006      	beq.n	d922 <__aeabi_f2d+0x7e>
    d914:	0b32      	lsrs	r2, r6, #12
    d916:	2680      	movs	r6, #128	; 0x80
    d918:	0336      	lsls	r6, r6, #12
    d91a:	076d      	lsls	r5, r5, #29
    d91c:	4316      	orrs	r6, r2
    d91e:	4b09      	ldr	r3, [pc, #36]	; (d944 <__aeabi_f2d+0xa0>)
    d920:	e7cf      	b.n	d8c2 <__aeabi_f2d+0x1e>
    d922:	4b08      	ldr	r3, [pc, #32]	; (d944 <__aeabi_f2d+0xa0>)
    d924:	2600      	movs	r6, #0
    d926:	e7cc      	b.n	d8c2 <__aeabi_f2d+0x1e>
    d928:	2300      	movs	r3, #0
    d92a:	2600      	movs	r6, #0
    d92c:	e7c9      	b.n	d8c2 <__aeabi_f2d+0x1e>
    d92e:	0003      	movs	r3, r0
    d930:	002a      	movs	r2, r5
    d932:	3b0b      	subs	r3, #11
    d934:	409a      	lsls	r2, r3
    d936:	2500      	movs	r5, #0
    d938:	e7e3      	b.n	d902 <__aeabi_f2d+0x5e>
    d93a:	46c0      	nop			; (mov r8, r8)
    d93c:	800fffff 	.word	0x800fffff
    d940:	00000389 	.word	0x00000389
    d944:	000007ff 	.word	0x000007ff

0000d948 <__clzsi2>:
    d948:	211c      	movs	r1, #28
    d94a:	2301      	movs	r3, #1
    d94c:	041b      	lsls	r3, r3, #16
    d94e:	4298      	cmp	r0, r3
    d950:	d301      	bcc.n	d956 <__clzsi2+0xe>
    d952:	0c00      	lsrs	r0, r0, #16
    d954:	3910      	subs	r1, #16
    d956:	0a1b      	lsrs	r3, r3, #8
    d958:	4298      	cmp	r0, r3
    d95a:	d301      	bcc.n	d960 <__clzsi2+0x18>
    d95c:	0a00      	lsrs	r0, r0, #8
    d95e:	3908      	subs	r1, #8
    d960:	091b      	lsrs	r3, r3, #4
    d962:	4298      	cmp	r0, r3
    d964:	d301      	bcc.n	d96a <__clzsi2+0x22>
    d966:	0900      	lsrs	r0, r0, #4
    d968:	3904      	subs	r1, #4
    d96a:	a202      	add	r2, pc, #8	; (adr r2, d974 <__clzsi2+0x2c>)
    d96c:	5c10      	ldrb	r0, [r2, r0]
    d96e:	1840      	adds	r0, r0, r1
    d970:	4770      	bx	lr
    d972:	46c0      	nop			; (mov r8, r8)
    d974:	02020304 	.word	0x02020304
    d978:	01010101 	.word	0x01010101
	...
    d984:	00000190 	.word	0x00000190
	...
    d99c:	bf800000 	.word	0xbf800000
    d9a0:	00000000 	.word	0x00000000
    d9a4:	bf4ccccd 	.word	0xbf4ccccd
	...
    d9b0:	be4ccccd 	.word	0xbe4ccccd
    d9b4:	bf000000 	.word	0xbf000000
    d9b8:	00000000 	.word	0x00000000
    d9bc:	bf800000 	.word	0xbf800000
	...
    d9d8:	3dcccccd 	.word	0x3dcccccd
    d9dc:	3f333333 	.word	0x3f333333
    d9e0:	00000000 	.word	0x00000000
    d9e4:	bf4ccccd 	.word	0xbf4ccccd
    d9e8:	bdcccccd 	.word	0xbdcccccd
	...
    da08:	74737271 	.word	0x74737271
    da0c:	00000075 	.word	0x00000075
    da10:	00007170 	.word	0x00007170
    da14:	00082008 	.word	0x00082008
    da18:	66726941 	.word	0x66726941
    da1c:	3a776f6c 	.word	0x3a776f6c
    da20:	2e302520 	.word	0x2e302520
    da24:	6d206632 	.word	0x6d206632
    da28:	0020732f 	.word	0x0020732f
    da2c:	65636341 	.word	0x65636341
    da30:	6172656c 	.word	0x6172656c
    da34:	6e6f6974 	.word	0x6e6f6974
    da38:	676d5b20 	.word	0x676d5b20
    da3c:	20583a5d 	.word	0x20583a5d
    da40:	59096425 	.word	0x59096425
    da44:	09642520 	.word	0x09642520
    da48:	6425205a 	.word	0x6425205a
    da4c:	00000a0d 	.word	0x00000a0d
    da50:	706d6554 	.word	0x706d6554
    da54:	6625203a 	.word	0x6625203a
    da58:	75482020 	.word	0x75482020
    da5c:	25203a6d 	.word	0x25203a6d
    da60:	72502066 	.word	0x72502066
    da64:	3a737365 	.word	0x3a737365
    da68:	20662520 	.word	0x20662520
    da6c:	0000000a 	.word	0x0000000a
    da70:	00736c63 	.word	0x00736c63
    da74:	3a736c63 	.word	0x3a736c63
    da78:	656c4320 	.word	0x656c4320
    da7c:	20737261 	.word	0x20737261
    da80:	20656874 	.word	0x20656874
    da84:	6d726574 	.word	0x6d726574
    da88:	6c616e69 	.word	0x6c616e69
    da8c:	72637320 	.word	0x72637320
    da90:	0d6e6565 	.word	0x0d6e6565
    da94:	0000000a 	.word	0x0000000a
    da98:	00726961 	.word	0x00726961
    da9c:	3a726961 	.word	0x3a726961
    daa0:	74655220 	.word	0x74655220
    daa4:	736e7275 	.word	0x736e7275
    daa8:	76206120 	.word	0x76206120
    daac:	65756c61 	.word	0x65756c61
    dab0:	6f726620 	.word	0x6f726620
    dab4:	5346206d 	.word	0x5346206d
    dab8:	3030332d 	.word	0x3030332d
    dabc:	69612030 	.word	0x69612030
    dac0:	6f6c6672 	.word	0x6f6c6672
    dac4:	65732077 	.word	0x65732077
    dac8:	726f736e 	.word	0x726f736e
    dacc:	00000a0d 	.word	0x00000a0d
    dad0:	65736572 	.word	0x65736572
    dad4:	00000074 	.word	0x00000074
    dad8:	65736572 	.word	0x65736572
    dadc:	52203a74 	.word	0x52203a74
    dae0:	74657365 	.word	0x74657365
    dae4:	68742073 	.word	0x68742073
    dae8:	65642065 	.word	0x65642065
    daec:	65636976 	.word	0x65636976
    daf0:	00000a0d 	.word	0x00000a0d
    daf4:	00756d69 	.word	0x00756d69
    daf8:	3a756d69 	.word	0x3a756d69
    dafc:	74655220 	.word	0x74655220
    db00:	736e7275 	.word	0x736e7275
    db04:	76206120 	.word	0x76206120
    db08:	65756c61 	.word	0x65756c61
    db0c:	6f726620 	.word	0x6f726620
    db10:	6874206d 	.word	0x6874206d
    db14:	4d492065 	.word	0x4d492065
    db18:	000a0d55 	.word	0x000a0d55
    db1c:	706d6574 	.word	0x706d6574
    db20:	00000000 	.word	0x00000000
    db24:	706d6574 	.word	0x706d6574
    db28:	6552203a 	.word	0x6552203a
    db2c:	6e727574 	.word	0x6e727574
    db30:	20612073 	.word	0x20612073
    db34:	756c6176 	.word	0x756c6176
    db38:	72662065 	.word	0x72662065
    db3c:	74206d6f 	.word	0x74206d6f
    db40:	74206568 	.word	0x74206568
    db44:	65706d65 	.word	0x65706d65
    db48:	75746172 	.word	0x75746172
    db4c:	73206572 	.word	0x73206572
    db50:	6f736e65 	.word	0x6f736e65
    db54:	000a0d72 	.word	0x000a0d72
    db58:	65657246 	.word	0x65657246
    db5c:	534f5452 	.word	0x534f5452
    db60:	494c4320 	.word	0x494c4320
    db64:	540a0d2e 	.word	0x540a0d2e
    db68:	20657079 	.word	0x20657079
    db6c:	706c6548 	.word	0x706c6548
    db70:	206f7420 	.word	0x206f7420
    db74:	77656976 	.word	0x77656976
    db78:	6c206120 	.word	0x6c206120
    db7c:	20747369 	.word	0x20747369
    db80:	7220666f 	.word	0x7220666f
    db84:	73696765 	.word	0x73696765
    db88:	65726574 	.word	0x65726574
    db8c:	6f632064 	.word	0x6f632064
    db90:	6e616d6d 	.word	0x6e616d6d
    db94:	0d2e7364 	.word	0x0d2e7364
    db98:	0000000a 	.word	0x0000000a
    db9c:	6c756f43 	.word	0x6c756f43
    dba0:	6f6e2064 	.word	0x6f6e2064
    dba4:	6c612074 	.word	0x6c612074
    dba8:	61636f6c 	.word	0x61636f6c
    dbac:	73206574 	.word	0x73206574
    dbb0:	70616d65 	.word	0x70616d65
    dbb4:	65726f68 	.word	0x65726f68
    dbb8:	00000a0d 	.word	0x00000a0d
    dbbc:	0000616f 	.word	0x0000616f
    dbc0:	325b6325 	.word	0x325b6325
    dbc4:	003e0d4b 	.word	0x003e0d4b

0000dbc8 <xAirFlow>:
    dbc8:	0000da98 0000da9c 00001c61 00000000     ........a.......

0000dbd8 <xClearScreen>:
    dbd8:	0000da70 0000da74 00001c35 00000000     p...t...5.......
    dbe8:	325b6325 0000004a                       %c[2J...

0000dbf0 <xImuGetCommand>:
    dbf0:	0000daf4 0000daf8 00001ba9 00000000     ................

0000dc00 <xResetCommand>:
    dc00:	0000dad0 0000dad8 00001b15 00000000     ................

0000dc10 <xTempGetCommand>:
    dc10:	0000db1c 0000db24 00001b2d 00000000     ....$...-.......
    dc20:	6f636e49 63657272 6f632074 6e616d6d     Incorrect comman
    dc30:	61702064 656d6172 28726574 202e2973     d parameter(s). 
    dc40:	746e4520 22207265 706c6568 6f742022      Enter "help" to
    dc50:	65697620 20612077 7473696c 20666f20      view a list of 
    dc60:	69617661 6c62616c 6f632065 6e616d6d     available comman
    dc70:	0d2e7364 000a0d0a 6d6d6f43 20646e61     ds......Command 
    dc80:	20746f6e 6f636572 73696e67 202e6465     not recognised. 
    dc90:	746e4520 27207265 706c6568 6f742027      Enter 'help' to
    dca0:	65697620 20612077 7473696c 20666f20      view a list of 
    dcb0:	69617661 6c62616c 6f632065 6e616d6d     available comman
    dcc0:	0d2e7364 000a0d0a 706c6568 00000000     ds......help....
    dcd0:	65680a0d 0d3a706c 694c200a 20737473     ..help:.. Lists 
    dce0:	206c6c61 20656874 69676572 72657473     all the register
    dcf0:	63206465 616d6d6f 0d73646e 000a0d0a     ed commands.....

0000dd00 <xHelpCommand>:
    dd00:	0000dcc8 0000dcd0 00002f01 00000000     ........./......
    dd10:	00003308 00003300 00003304 00003320     .3...3...3.. 3..
    dd20:	000032fc 0000330c 00003310 00003314     .2...3...3...3..
    dd30:	00003318 20746f4e 756f6e65 54206867     .3..Not enough T
    dd40:	204b5341 646e6168 2073656c 6e69202d     ASK handles - in
    dd50:	61657263 54206573 435f4352 4e5f4746     crease TRC_CFG_N
    dd60:	4b534154 206e6920 53637274 7370616e     TASK in trcSnaps
    dd70:	43746f68 69666e6f 00682e67 20746f4e     hotConfig.h.Not 
    dd80:	756f6e65 49206867 68205253 6c646e61     enough ISR handl
    dd90:	2d207365 636e6920 73616572 52542065     es - increase TR
    dda0:	46435f43 494e5f47 69205253 7274206e     C_CFG_NISR in tr
    ddb0:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    ddc0:	00000068 20746f4e 756f6e65 53206867     h...Not enough S
    ddd0:	50414d45 45524f48 6e616820 73656c64     EMAPHORE handles
    dde0:	69202d20 6572636e 20657361 5f435254      - increase TRC_
    ddf0:	5f474643 4d45534e 4f485041 69204552     CFG_NSEMAPHORE i
    de00:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
    de10:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
    de20:	4d206867 58455455 6e616820 73656c64     gh MUTEX handles
    de30:	69202d20 6572636e 20657361 5f435254      - increase TRC_
    de40:	5f474643 54554d4e 69205845 7274206e     CFG_NMUTEX in tr
    de50:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    de60:	00000068 20746f4e 756f6e65 51206867     h...Not enough Q
    de70:	45554555 6e616820 73656c64 69202d20     UEUE handles - i
    de80:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
    de90:	4555514e 69204555 7274206e 616e5363     NQUEUE in trcSna
    dea0:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
    deb0:	20746f4e 756f6e65 54206867 52454d49     Not enough TIMER
    dec0:	6e616820 73656c64 69202d20 6572636e      handles - incre
    ded0:	20657361 5f435254 5f474643 4d49544e     ase TRC_CFG_NTIM
    dee0:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
    def0:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
    df00:	756f6e65 45206867 544e4556 554f5247     enough EVENTGROU
    df10:	61682050 656c646e 202d2073 72636e69     P handles - incr
    df20:	65736165 43525420 4746435f 56454e5f     ease TRC_CFG_NEV
    df30:	47544e45 50554f52 206e6920 53637274     ENTGROUP in trcS
    df40:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
    df50:	20746f4e 756f6e65 53206867 41455254     Not enough STREA
    df60:	4655424d 20524546 646e6168 2073656c     MBUFFER handles 
    df70:	6e69202d 61657263 54206573 435f4352     - increase TRC_C
    df80:	4e5f4746 45525453 55424d41 52454646     FG_NSTREAMBUFFER
    df90:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
    dfa0:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
    dfb0:	4d206867 41535345 55424547 52454646     gh MESSAGEBUFFER
    dfc0:	6e616820 73656c64 69202d20 6572636e      handles - incre
    dfd0:	20657361 5f435254 5f474643 53454d4e     ase TRC_CFG_NMES
    dfe0:	45474153 46465542 69205245 7274206e     SAGEBUFFER in tr
    dff0:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    e000:	00000068 547a7370 65636172 45746547     h...pszTraceGetE
    e010:	726f7272 646e6148 3a73656c 766e4920     rrorHandles: Inv
    e020:	64696c61 6a626f20 63746365 7373616c     alid objectclass
    e030:	00000021 61725476 6e456563 656c6261     !...vTraceEnable
    e040:	43525428 4154535f 415f5452 54494157     (TRC_START_AWAIT
    e050:	534f485f 6e202954 6120746f 776f6c6c     _HOST) not allow
    e060:	69206465 6e53206e 68737061 6d20746f     ed in Snapshot m
    e070:	0065646f 78656e55 74636570 61206465     ode.Unexpected a
    e080:	6d756772 20746e65 76206f74 63617254     rgument to vTrac
    e090:	616e4565 20656c62 616e7328 6f687370     eEnable (snapsho
    e0a0:	6f6d2074 00296564 43415254 53415f45     t mode).TRACE_AS
    e0b0:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
    e0c0:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
    e0d0:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
    e0e0:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
    e0f0:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
    e100:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    e110:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
    e120:	696c6176 61762064 2065756c 20726f66     valid value for 
    e130:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
    e140:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
    e150:	206e6920 54767270 65636172 44746547      in prvTraceGetD
    e160:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
    e170:	7270203a 61725476 65476563 6a624f74     : prvTraceGetObj
    e180:	48746365 6c646e61 49203a65 6c61766e     ectHandle: Inval
    e190:	76206469 65756c61 726f6620 6a626f20     id value for obj
    e1a0:	63746365 7373616c 00000000 43415254     ectclass....TRAC
    e1b0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
    e1c0:	65476563 72615074 203a6d61 61766e49     ceGetParam: Inva
    e1d0:	2064696c 756c6176 6f662065 61702072     lid value for pa
    e1e0:	5f6d6172 0078616d 43415254 53415f45     ram_max.TRACE_AS
    e1f0:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
    e200:	69725074 7469726f 6f725079 74726570     tPriorityPropert
    e210:	6f203a79 63656a62 616c6374 3e207373     y: objectclass >
    e220:	5254203d 5f454341 414c434e 53455353     = TRACE_NCLASSES
    e230:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
    e240:	7270203a 61725476 65476563 69725074     : prvTraceGetPri
    e250:	7469726f 6f725079 74726570 49203a79     orityProperty: I
    e260:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    e270:	00646920 63617254 65522065 64726f63      id.Trace Record
    e280:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
    e290:	69206f74 7865646e 74756f20 65646973     to index outside
    e2a0:	65766520 6220746e 65666675 00002172      event buffer!..
    e2b0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    e2c0:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
    e2d0:	3a656d61 6d616e20 3d3d2065 4c554e20     ame: name == NUL
    e2e0:	0000004c 656c6c49 206c6167 656a626f     L...Illegal obje
    e2f0:	63207463 7373616c 206e6920 54767270     ct class in prvT
    e300:	65636172 4f746553 63656a62 6d614e74     raceSetObjectNam
    e310:	00000065 656c6c49 206c6167 646e6168     e...Illegal hand
    e320:	2820656c 69202930 7270206e 61725476     le (0) in prvTra
    e330:	65536563 6a624f74 4e746365 2e656d61     ceSetObjectName.
    e340:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
    e350:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
    e360:	53746365 65746174 626f203a 7463656a     ectState: object
    e370:	73616c63 3d3e2073 41525420 4e5f4543     class >= TRACE_N
    e380:	53414c43 00534553 43415254 53415f45     CLASSES.TRACE_AS
    e390:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
    e3a0:	6a624f74 53746365 65746174 6e49203a     tObjectState: In
    e3b0:	696c6176 61762064 2065756c 20726f66     valid value for 
    e3c0:	00006469 43415254 53415f45 54524553     id..TRACE_ASSERT
    e3d0:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
    e3e0:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
    e3f0:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
    e400:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
    e410:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    e420:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
    e430:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
    e440:	76206469 65756c61 726f6620 00646920     id value for id.
    e450:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    e460:	61725476 65536563 73615474 736e496b     vTraceSetTaskIns
    e470:	636e6174 6e694665 65687369 49203a64     tanceFinished: I
    e480:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    e490:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
    e4a0:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    e4b0:	4b65726f 656e7265 6c61436c 65203a6c     oreKernelCall: e
    e4c0:	65646f63 203d3e20 46467830 00000000     code >= 0xFF....
    e4d0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    e4e0:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
    e4f0:	6c61436c 6f203a6c 63656a62 616c4374     lCall: objectCla
    e500:	3e207373 5254203d 5f454341 414c434e     ss >= TRACE_NCLA
    e510:	53455353 00000000 43415254 53415f45     SSES....TRACE_AS
    e520:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    e530:	4b65726f 656e7265 6c61436c 49203a6c     oreKernelCall: I
    e540:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    e550:	6a626f20 4e746365 65626d75 00000072      objectNumber...
    e560:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    e570:	68676968 69727020 7469726f 53492079     high priority IS
    e580:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    e590:	29322820 00000000 43415254 53415f45      (2)....TRACE_AS
    e5a0:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    e5b0:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    e5c0:	6d754e68 63697265 61726150 6c6e4f6d     hNumericParamOnl
    e5d0:	49203a79 6c61766e 76206469 65756c61     y: Invalid value
    e5e0:	726f6620 74766520 65646f63 00000000      for evtcode....
    e5f0:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    e600:	68676968 69727020 7469726f 53492079     high priority IS
    e610:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    e620:	29342820 00000000 43415254 53415f45      (4)....TRACE_AS
    e630:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    e640:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    e650:	72615068 203a6d61 63747665 2065646f     hParam: evtcode 
    e660:	30203d3e 00464678 43415254 53415f45     >= 0xFF.TRACE_AS
    e670:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    e680:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    e690:	72615068 203a6d61 656a626f 6c437463     hParam: objectCl
    e6a0:	20737361 54203d3e 45434152 4c434e5f     ass >= TRACE_NCL
    e6b0:	45535341 00000053 43415254 53415f45     ASSES...TRACE_AS
    e6c0:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    e6d0:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    e6e0:	72615068 203a6d61 61766e49 2064696c     hParam: Invalid 
    e6f0:	756c6176 6f662065 626f2072 7463656a     value for object
    e700:	626d754e 00007265 6f636552 72656472     Number..Recorder
    e710:	73756220 202d2079 68676968 69727020      busy - high pri
    e720:	7469726f 53492079 73752052 20676e69     ority ISR using 
    e730:	63737973 3f6c6c61 29332820 00000000     syscall? (3)....
    e740:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    e750:	61725476 74536563 5465726f 526b7361     vTraceStoreTaskR
    e760:	79646165 6e49203a 696c6176 61762064     eady: Invalid va
    e770:	2065756c 20726f66 646e6168 0000656c     lue for handle..
    e780:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    e790:	68676968 69727020 7469726f 53492079     high priority IS
    e7a0:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    e7b0:	29312820 00000000 43415254 53415f45      (1)....TRACE_AS
    e7c0:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    e7d0:	5465726f 736b7361 63746977 49203a68     oreTaskswitch: I
    e7e0:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    e7f0:	73617420 61685f6b 656c646e 00000000      task_handle....
    e800:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    e810:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
    e820:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
    e830:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
    e840:	53415f45 54524553 6975203a 65646e49     E_ASSERT: uiInde
    e850:	4f664f78 63656a62 49203a74 6c61766e     xOfObject: Inval
    e860:	76206469 65756c61 726f6620 6a626f20     id value for obj
    e870:	63746365 7373616c 00000000 43415254     ectclass....TRAC
    e880:	53415f45 54524553 6975203a 65646e49     E_ASSERT: uiInde
    e890:	4f664f78 63656a62 49203a74 6c61766e     xOfObject: Inval
    e8a0:	76206469 65756c61 726f6620 6a626f20     id value for obj
    e8b0:	68746365 6c646e61 00000065 43415254     ecthandle...TRAC
    e8c0:	53415f45 54524553 6552203a 64726f63     E_ASSERT: Record
    e8d0:	6e207265 6920746f 6974696e 7a696c61     er not initializ
    e8e0:	202e6465 20657355 61725476 6e456563     ed. Use vTraceEn
    e8f0:	656c6261 69202928 6574736e 00216461     able() instead!.
    e900:	61747328 70757472 00000029 43415254     (startup)...TRAC
    e910:	53415f45 54524553 5478203a 65636172     E_ASSERT: xTrace
    e920:	69676552 72657473 69727453 203a676e     RegisterString: 
    e930:	6562616c 3d3d206c 4c554e20 0000004c     label == NULL...
    e940:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
    e950:	64726f63 6e207265 6920746f 6974696e     corder not initi
    e960:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
    e970:	45656361 6c62616e 20292865 73726966     aceEnable() firs
    e980:	00002174 454c4449 00000000 00006894     t!..IDLE.....h..
    e990:	00006894 00006894 0000680c 000068d6     .h...h...h...h..
    e9a0:	000068f0 00006894 00006894 0000680c     .h...h...h...h..
    e9b0:	000068d6 20726d54 00637653 42000800     .h..Tmr Svc....B
    e9c0:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    e9d0:	42001c00 00007cfa 00007cf6 00007cf6     ...B.|...|...|..
    e9e0:	00007d5c 00007d5c 00007d0e 00007d00     \}..\}...}...}..
    e9f0:	00007d14 00007d4a 00007e88 00007e68     .}..J}...~..h~..
    ea00:	00007e68 00007ef4 00007e7a 00007e96     h~...~..z~...~..
    ea10:	00007e6c 00007ea4 00007ee4              l~...~...~..

0000ea1c <_tcc_intflag>:
    ea1c:	00000001 00000002 00000004 00000008     ................
    ea2c:	00001000 00002000 00004000 00008000     ..... ...@......
    ea3c:	00010000 00020000 00040000 00080000     ................
    ea4c:	0a0d0a0d 2d2d2d2d 4553452d 20363135     ....-----ESE516 
    ea5c:	6e69614d 6f725020 6d617267 2d2d2d2d     Main Program----
    ea6c:	000a0d2d 0a0d0a0d 74696e49 696c6169     -.......Initiali
    ea7c:	4820657a 2e2e2e57 00000a0d 6f727245     ze HW.......Erro
    ea8c:	6e692072 61697469 697a696c 4920676e     r initializing I
    ea9c:	44204332 65766972 0a0d2172 00000000     2C Driver!......
    eaac:	74696e49 696c6169 2064657a 20433249     Initialized I2C 
    eabc:	76697244 0d217265 0000000a 36454d42     Driver!.....BME6
    eacc:	49203038 6974696e 66206c61 656c6961     80 Initial faile
    eadc:	0a0d2164 00000000 36454d42 49203038     d!......BME680 I
    eaec:	6974696e 64656c61 63755320 73736563     nitialed Success
    eafc:	000a0d21 20554d49 74696e69 696c6169     !...IMU initiali
    eb0c:	2164657a 00000a0d 6c756f43 6f6e2064     zed!....Could no
    eb1c:	6e692074 61697469 657a696c 554d4920     t initialize IMU
    eb2c:	00000a0d 70616548 66656220 2065726f     ....Heap before 
    eb3c:	72617473 676e6974 73617420 203a736b     starting tasks: 
    eb4c:	0a0d6425 00000000 5f494c43 4b534154     %d......CLI_TASK
    eb5c:	00000000 3a525245 494c4320 73617420     ....ERR: CLI tas
    eb6c:	6f63206b 20646c75 20746f6e 69206562     k could not be i
    eb7c:	6974696e 7a696c61 0d216465 0000000a     nitialized!.....
    eb8c:	70616548 74666120 73207265 74726174     Heap after start
    eb9c:	20676e69 3a494c43 0d642520 0000000a     ing CLI: %d.....
    ebac:	6f727245 6e6f2072 6d656d20 2079726f     Error on memory 
    ebbc:	6f6c6c61 69746163 6f206e6f 5246206e     allocation on FR
    ebcc:	54524545 0d21534f 0000000a 6f727245     EERTOS!.....Erro
    ebdc:	6e6f2072 61747320 6f206b63 66726576     r on stack overf
    ebec:	20776f6c 46206e6f 52454552 21534f54     low on FREERTOS!
    ebfc:	00000a0d 00464e49 00666e69 004e414e     ....INF.inf.NAN.
    ec0c:	006e616e 31300030 35343332 39383736     nan.0.0123456789
    ec1c:	44434241 30004645 34333231 38373635     ABCDEF.012345678
    ec2c:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
    ec3c:	4e614e00 50004300 5849534f 00002e00     .NaN.C.POSIX....
    ec4c:	00000000                                ....

0000ec50 <__mprec_bigtens>:
    ec50:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    ec60:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    ec70:	7f73bf3c 75154fdd                       <.s..O.u

0000ec78 <__mprec_tens>:
    ec78:	00000000 3ff00000 00000000 40240000     .......?......$@
    ec88:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    ec98:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    eca8:	00000000 412e8480 00000000 416312d0     .......A......cA
    ecb8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    ecc8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    ecd8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    ece8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    ecf8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    ed08:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    ed18:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    ed28:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    ed38:	79d99db4 44ea7843                       ...yCx.D

0000ed40 <p05.6047>:
    ed40:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    ed50:	6c680020 6665004c 47464567 20200000               .hlL.efgEFG.

0000ed5d <_ctype_>:
    ed5d:	20202000 20202020 28282020 20282828     .         ((((( 
    ed6d:	20202020 20202020 20202020 20202020                     
    ed7d:	10108820 10101010 10101010 10101010      ...............
    ed8d:	04040410 04040404 10040404 10101010     ................
    ed9d:	41411010 41414141 01010101 01010101     ..AAAAAA........
    edad:	01010101 01010101 01010101 10101010     ................
    edbd:	42421010 42424242 02020202 02020202     ..BBBBBB........
    edcd:	02020202 02020202 02020202 10101010     ................
    eddd:	00000020 00000000 00000000 00000000      ...............
	...
    ee5d:	1c000000 ec0000b4 fe0000b3 400000b3     ...............@
    ee6d:	fe0000b3 e20000b3 fe0000b3 400000b3     ...............@
    ee7d:	ec0000b3 ec0000b3 e20000b3 400000b3     ...............@
    ee8d:	480000b3 480000b3 480000b3 040000b3     ...H...H...H....
    ee9d:	ec0000b4 ec0000b3 c00000b3 a40000b3     ................
    eead:	c00000b4 e20000b3 c00000b3 a40000b3     ................
    eebd:	ec0000b4 ec0000b3 e20000b3 a40000b3     ................
    eecd:	480000b4 480000b3 480000b3 ae0000b3     ...H...H...H....
    eedd:	9c0000b4 ec0000b7 ec0000b6 ea0000b6     ................
    eeed:	8e0000b6 8e0000b7 840000b7 ea0000b7     ................
    eefd:	8e0000b6 840000b7 8e0000b7 ea0000b7     ................
    ef0d:	940000b6 940000b7 940000b7 240000b7     ...............$
    ef1d:	6c0000b8 4e0000c5 080000c5 260000c5     ...l...N.......&
    ef2d:	080000c4 400000c5 080000c5 260000c5     .......@.......&
    ef3d:	4e0000c4 4e0000c5 400000c5 260000c5     ...N...N...@...&
    ef4d:	1e0000c4 1e0000c4 1e0000c4 840000c4     ................
    ef5d:	cc0000c7 8c0000cd 8c0000cc 880000cc     ................
    ef6d:	a40000cc a40000cd 960000cd 880000cd     ................
    ef7d:	a40000cc 960000cd a40000cd 880000cd     ................
    ef8d:	ac0000cc ac0000cd ac0000cd b00000cd     ................
    ef9d:	f80000cf                                         ...

0000efa0 <_init>:
    efa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    efa2:	46c0      	nop			; (mov r8, r8)
    efa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    efa6:	bc08      	pop	{r3}
    efa8:	469e      	mov	lr, r3
    efaa:	4770      	bx	lr

0000efac <__init_array_start>:
    efac:	000000dd 	.word	0x000000dd

0000efb0 <_fini>:
    efb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    efb2:	46c0      	nop			; (mov r8, r8)
    efb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    efb6:	bc08      	pop	{r3}
    efb8:	469e      	mov	lr, r3
    efba:	4770      	bx	lr

0000efbc <__fini_array_start>:
    efbc:	000000b5 	.word	0x000000b5
