
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001c0a8  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001c0a8  0001c0a8  0002c0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000003f8  20000000  0001c0b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005a0c  200003f8  0001c4a8  000303f8  2**2
                  ALLOC
  4 .stack        00002004  20005e04  00021eb4  000303f8  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000303f8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030420  2**0
                  CONTENTS, READONLY
  7 .debug_info   000d1a0f  00000000  00000000  00030479  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010fb3  00000000  00000000  00101e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00043784  00000000  00000000  00112e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002dd0  00000000  00000000  001565bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003bf0  00000000  00000000  0015938f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00039ea4  00000000  00000000  0015cf7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0004cf82  00000000  00000000  00196e23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000c0499  00000000  00000000  001e3da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a0c8  00000000  00000000  002a4240  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	08 7e 00 20 85 f3 00 00 69 f3 00 00 69 f3 00 00     .~. ....i...i...
	...
      2c:	05 62 00 00 00 00 00 00 00 00 00 00 e1 62 00 00     .b...........b..
      3c:	25 63 00 00 69 f3 00 00 69 f3 00 00 69 f3 00 00     %c..i...i...i...
      4c:	91 d5 00 00 11 d2 00 00 69 f3 00 00 69 f3 00 00     ........i...i...
      5c:	69 f3 00 00 69 f3 00 00 b9 d9 00 00 c9 d9 00 00     i...i...........
      6c:	d9 d9 00 00 e9 d9 00 00 f9 d9 00 00 09 da 00 00     ................
      7c:	39 f3 00 00 49 f3 00 00 59 f3 00 00 45 4e 00 00     9...I...Y...EN..
      8c:	55 4e 00 00 65 4e 00 00 00 00 00 00 00 00 00 00     UN..eN..........
      9c:	69 f3 00 00 69 f3 00 00 69 f3 00 00 69 f3 00 00     i...i...i...i...
      ac:	69 f3 00 00 00 00 00 00                             i.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200003f8 	.word	0x200003f8
      d4:	00000000 	.word	0x00000000
      d8:	0001c0b0 	.word	0x0001c0b0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200003fc 	.word	0x200003fc
     108:	0001c0b0 	.word	0x0001c0b0
     10c:	0001c0b0 	.word	0x0001c0b0
     110:	00000000 	.word	0x00000000

00000114 <FS3000_isConnected>:
    //return (i2c_tools_endTransmission() == 0);
	//packet.data_length = 0;
	//return i2c_master_read_packet_job(module, &packet);
	
	int32_t error;
	airflow.lenIn = 0;
     114:	4b04      	ldr	r3, [pc, #16]	; (128 <FS3000_isConnected+0x14>)
     116:	2200      	movs	r2, #0
     118:	819a      	strh	r2, [r3, #12]
	airflow.msgIn = _buff;
     11a:	4904      	ldr	r1, [pc, #16]	; (12c <FS3000_isConnected+0x18>)
     11c:	6099      	str	r1, [r3, #8]
	
	airflow.address = FS3000_DEVICE_ADDRESS;
     11e:	2028      	movs	r0, #40	; 0x28
     120:	7018      	strb	r0, [r3, #0]
	airflow.msgOut = _buff;
     122:	6059      	str	r1, [r3, #4]
	airflow.lenOut = 0;
     124:	81da      	strh	r2, [r3, #14]
	
	//return I2cReadDataWait(&airflow, 0, 100);
}
     126:	4770      	bx	lr
     128:	20004568 	.word	0x20004568
     12c:	20000414 	.word	0x20000414

00000130 <FS3000_begin>:
{
     130:	b510      	push	{r4, lr}
    return FS3000_isConnected();
     132:	4b01      	ldr	r3, [pc, #4]	; (138 <FS3000_begin+0x8>)
     134:	4798      	blx	r3
}
     136:	bd10      	pop	{r4, pc}
     138:	00000115 	.word	0x00000115

0000013c <FS3000_readData>:
}

/*************************** READ DATA *************************/
/*                Read 5 bytes from sensor, put it at a pointer (given as argument)                  */
void FS3000_readData(uint8_t *buffer_in)
{
     13c:	b500      	push	{lr}
     13e:	b083      	sub	sp, #12
	
	//packet.data = buffer_in;
	//packet.data_length = 5;
	//packet.high_speed = true;
	//error = i2c_master_read_packet_job(module, &packet);
	uint8_t reg_add = 0;
     140:	466b      	mov	r3, sp
     142:	2200      	movs	r2, #0
     144:	71da      	strb	r2, [r3, #7]
     146:	3307      	adds	r3, #7
	
	airflow.address = FS3000_DEVICE_ADDRESS;
     148:	4807      	ldr	r0, [pc, #28]	; (168 <FS3000_readData+0x2c>)
     14a:	3228      	adds	r2, #40	; 0x28
     14c:	7002      	strb	r2, [r0, #0]
	airflow.lenIn = 5;
     14e:	3a23      	subs	r2, #35	; 0x23
     150:	8182      	strh	r2, [r0, #12]
	airflow.msgIn = _buff;
     152:	4a06      	ldr	r2, [pc, #24]	; (16c <FS3000_readData+0x30>)
     154:	6082      	str	r2, [r0, #8]
	
	//airflow.address = FS3000_DEVICE_ADDRESS;
	airflow.msgOut = &reg_add;
     156:	6043      	str	r3, [r0, #4]
	airflow.lenOut = 1;
     158:	2301      	movs	r3, #1
     15a:	81c3      	strh	r3, [r0, #14]
	
	return I2cOnlyReadWait(&airflow, 1000); //I2cReadDataWait(&airflow, 0, 100);
     15c:	21fa      	movs	r1, #250	; 0xfa
     15e:	0089      	lsls	r1, r1, #2
     160:	4b03      	ldr	r3, [pc, #12]	; (170 <FS3000_readData+0x34>)
     162:	4798      	blx	r3
    //while (i2c_tools_available())
    //{
        //buffer_in[i] = i2c_tools_read(); // Receive Byte
        //i += 1;
    //}
}
     164:	b003      	add	sp, #12
     166:	bd00      	pop	{pc}
     168:	20004568 	.word	0x20004568
     16c:	20000414 	.word	0x20000414
     170:	00002f49 	.word	0x00002f49

00000174 <FS3000_readRaw>:
{
     174:	b510      	push	{r4, lr}
    FS3000_readData(_buff);
     176:	4c05      	ldr	r4, [pc, #20]	; (18c <FS3000_readRaw+0x18>)
     178:	0020      	movs	r0, r4
     17a:	4b05      	ldr	r3, [pc, #20]	; (190 <FS3000_readRaw+0x1c>)
     17c:	4798      	blx	r3
    uint8_t data_high_byte = _buff[1];
     17e:	7863      	ldrb	r3, [r4, #1]
    airflowRaw |= (data_high_byte << 8);
     180:	200f      	movs	r0, #15
     182:	4018      	ands	r0, r3
     184:	0200      	lsls	r0, r0, #8
     186:	78a3      	ldrb	r3, [r4, #2]
    return airflowRaw;
     188:	4318      	orrs	r0, r3
}
     18a:	bd10      	pop	{r4, pc}
     18c:	20000414 	.word	0x20000414
     190:	0000013d 	.word	0x0000013d

00000194 <FS3000_readMetersPerSecond>:
{
     194:	b5f0      	push	{r4, r5, r6, r7, lr}
     196:	46ce      	mov	lr, r9
     198:	b500      	push	{lr}
     19a:	b082      	sub	sp, #8
    int airflowRaw = FS3000_readRaw();
     19c:	4b26      	ldr	r3, [pc, #152]	; (238 <FS3000_readMetersPerSecond+0xa4>)
     19e:	4798      	blx	r3
     1a0:	0004      	movs	r4, r0
    if (_range == AIRFLOW_RANGE_7_MPS)
     1a2:	4b26      	ldr	r3, [pc, #152]	; (23c <FS3000_readMetersPerSecond+0xa8>)
     1a4:	781f      	ldrb	r7, [r3, #0]
    uint8_t dataPointsNum = 9; // Default to FS3000_1005 AIRFLOW_RANGE_7_MPS
     1a6:	2109      	movs	r1, #9
    else if (_range == AIRFLOW_RANGE_15_MPS)
     1a8:	2f01      	cmp	r7, #1
     1aa:	d003      	beq.n	1b4 <FS3000_readMetersPerSecond+0x20>
    for (int i = 0; i < dataPointsNum; i++) // cound be an array of datapoints 9 or 13 long...
     1ac:	2300      	movs	r3, #0
     1ae:	2600      	movs	r6, #0
        if (airflowRaw > _rawDataPoint[i])
     1b0:	4d23      	ldr	r5, [pc, #140]	; (240 <FS3000_readMetersPerSecond+0xac>)
     1b2:	e004      	b.n	1be <FS3000_readMetersPerSecond+0x2a>
        dataPointsNum = 13;
     1b4:	3104      	adds	r1, #4
     1b6:	e7f9      	b.n	1ac <FS3000_readMetersPerSecond+0x18>
    for (int i = 0; i < dataPointsNum; i++) // cound be an array of datapoints 9 or 13 long...
     1b8:	3301      	adds	r3, #1
     1ba:	428b      	cmp	r3, r1
     1bc:	da05      	bge.n	1ca <FS3000_readMetersPerSecond+0x36>
        if (airflowRaw > _rawDataPoint[i])
     1be:	009a      	lsls	r2, r3, #2
     1c0:	5952      	ldr	r2, [r2, r5]
     1c2:	4294      	cmp	r4, r2
     1c4:	ddf8      	ble.n	1b8 <FS3000_readMetersPerSecond+0x24>
     1c6:	001e      	movs	r6, r3
     1c8:	e7f6      	b.n	1b8 <FS3000_readMetersPerSecond+0x24>
    if (airflowRaw <= 409)
     1ca:	239a      	movs	r3, #154	; 0x9a
     1cc:	33ff      	adds	r3, #255	; 0xff
     1ce:	429c      	cmp	r4, r3
     1d0:	dd2c      	ble.n	22c <FS3000_readMetersPerSecond+0x98>
    if (airflowRaw >= 3686)
     1d2:	4b1c      	ldr	r3, [pc, #112]	; (244 <FS3000_readMetersPerSecond+0xb0>)
     1d4:	429c      	cmp	r4, r3
     1d6:	dd03      	ble.n	1e0 <FS3000_readMetersPerSecond+0x4c>
        if (_range == AIRFLOW_RANGE_7_MPS)
     1d8:	2f00      	cmp	r7, #0
     1da:	d029      	beq.n	230 <FS3000_readMetersPerSecond+0x9c>
        if (_range == AIRFLOW_RANGE_15_MPS)
     1dc:	2f01      	cmp	r7, #1
     1de:	d029      	beq.n	234 <FS3000_readMetersPerSecond+0xa0>
    int window_size = (_rawDataPoint[data_position + 1] - _rawDataPoint[data_position]);
     1e0:	1c74      	adds	r4, r6, #1
     1e2:	4b17      	ldr	r3, [pc, #92]	; (240 <FS3000_readMetersPerSecond+0xac>)
     1e4:	4699      	mov	r9, r3
     1e6:	00b6      	lsls	r6, r6, #2
     1e8:	58f5      	ldr	r5, [r6, r3]
    float window_size_mps = (_mpsDataPoint[data_position + 1] - _mpsDataPoint[data_position]);
     1ea:	4f17      	ldr	r7, [pc, #92]	; (248 <FS3000_readMetersPerSecond+0xb4>)
     1ec:	59f3      	ldr	r3, [r6, r7]
     1ee:	9300      	str	r3, [sp, #0]
    int diff = (airflowRaw - _rawDataPoint[data_position]);
     1f0:	1b40      	subs	r0, r0, r5
    float percentage_of_window = ((float)diff / (float)window_size);
     1f2:	4e16      	ldr	r6, [pc, #88]	; (24c <FS3000_readMetersPerSecond+0xb8>)
     1f4:	47b0      	blx	r6
     1f6:	9001      	str	r0, [sp, #4]
    int window_size = (_rawDataPoint[data_position + 1] - _rawDataPoint[data_position]);
     1f8:	00a4      	lsls	r4, r4, #2
     1fa:	464a      	mov	r2, r9
     1fc:	58a0      	ldr	r0, [r4, r2]
     1fe:	1b40      	subs	r0, r0, r5
    float percentage_of_window = ((float)diff / (float)window_size);
     200:	47b0      	blx	r6
     202:	1c01      	adds	r1, r0, #0
     204:	9801      	ldr	r0, [sp, #4]
     206:	4b12      	ldr	r3, [pc, #72]	; (250 <FS3000_readMetersPerSecond+0xbc>)
     208:	4798      	blx	r3
     20a:	1c06      	adds	r6, r0, #0
    float window_size_mps = (_mpsDataPoint[data_position + 1] - _mpsDataPoint[data_position]);
     20c:	9d00      	ldr	r5, [sp, #0]
     20e:	1c29      	adds	r1, r5, #0
     210:	59e0      	ldr	r0, [r4, r7]
     212:	4b10      	ldr	r3, [pc, #64]	; (254 <FS3000_readMetersPerSecond+0xc0>)
     214:	4798      	blx	r3
     216:	1c01      	adds	r1, r0, #0
    airflowMps = _mpsDataPoint[data_position] + (window_size_mps * percentage_of_window);
     218:	1c30      	adds	r0, r6, #0
     21a:	4b0f      	ldr	r3, [pc, #60]	; (258 <FS3000_readMetersPerSecond+0xc4>)
     21c:	4798      	blx	r3
     21e:	1c29      	adds	r1, r5, #0
     220:	4b0e      	ldr	r3, [pc, #56]	; (25c <FS3000_readMetersPerSecond+0xc8>)
     222:	4798      	blx	r3
}
     224:	b002      	add	sp, #8
     226:	bc04      	pop	{r2}
     228:	4691      	mov	r9, r2
     22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 0;
     22c:	2000      	movs	r0, #0
     22e:	e7f9      	b.n	224 <FS3000_readMetersPerSecond+0x90>
            return 7.23;
     230:	480b      	ldr	r0, [pc, #44]	; (260 <FS3000_readMetersPerSecond+0xcc>)
     232:	e7f7      	b.n	224 <FS3000_readMetersPerSecond+0x90>
            return 15.00;
     234:	480b      	ldr	r0, [pc, #44]	; (264 <FS3000_readMetersPerSecond+0xd0>)
     236:	e7f5      	b.n	224 <FS3000_readMetersPerSecond+0x90>
     238:	00000175 	.word	0x00000175
     23c:	20000419 	.word	0x20000419
     240:	20000034 	.word	0x20000034
     244:	00000e65 	.word	0x00000e65
     248:	20000000 	.word	0x20000000
     24c:	000167ed 	.word	0x000167ed
     250:	00015fa5 	.word	0x00015fa5
     254:	00016475 	.word	0x00016475
     258:	00016235 	.word	0x00016235
     25c:	00015c81 	.word	0x00015c81
     260:	40e75c29 	.word	0x40e75c29
     264:	41700000 	.word	0x41700000

00000268 <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
    down_state |= mask;
     268:	4b02      	ldr	r3, [pc, #8]	; (274 <add_state+0xc>)
     26a:	781a      	ldrb	r2, [r3, #0]
     26c:	4310      	orrs	r0, r2
     26e:	7018      	strb	r0, [r3, #0]
}
     270:	4770      	bx	lr
     272:	46c0      	nop			; (mov r8, r8)
     274:	2000041b 	.word	0x2000041b

00000278 <SubscribeHandlerImuTopic>:
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}

void SubscribeHandlerImuTopic(MessageData *msgData)
{
     278:	b570      	push	{r4, r5, r6, lr}
     27a:	0005      	movs	r5, r0
    LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
     27c:	4905      	ldr	r1, [pc, #20]	; (294 <SubscribeHandlerImuTopic+0x1c>)
     27e:	2001      	movs	r0, #1
     280:	4c05      	ldr	r4, [pc, #20]	; (298 <SubscribeHandlerImuTopic+0x20>)
     282:	47a0      	blx	r4
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
     284:	686a      	ldr	r2, [r5, #4]
     286:	6893      	ldr	r3, [r2, #8]
     288:	6852      	ldr	r2, [r2, #4]
     28a:	4904      	ldr	r1, [pc, #16]	; (29c <SubscribeHandlerImuTopic+0x24>)
     28c:	2001      	movs	r0, #1
     28e:	47a0      	blx	r4
}
     290:	bd70      	pop	{r4, r5, r6, pc}
     292:	46c0      	nop			; (mov r8, r8)
     294:	00018968 	.word	0x00018968
     298:	00008b9d 	.word	0x00008b9d
     29c:	00018980 	.word	0x00018980

000002a0 <SubscribeHandlerLedTopic>:
{
     2a0:	b570      	push	{r4, r5, r6, lr}
     2a2:	b084      	sub	sp, #16
     2a4:	0004      	movs	r4, r0
    uint8_t rgb[3] = {0, 0, 0};
     2a6:	ab03      	add	r3, sp, #12
     2a8:	2200      	movs	r2, #0
     2aa:	701a      	strb	r2, [r3, #0]
     2ac:	705a      	strb	r2, [r3, #1]
     2ae:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
     2b0:	6842      	ldr	r2, [r0, #4]
     2b2:	6893      	ldr	r3, [r2, #8]
     2b4:	6852      	ldr	r2, [r2, #4]
     2b6:	4918      	ldr	r1, [pc, #96]	; (318 <SubscribeHandlerLedTopic+0x78>)
     2b8:	2001      	movs	r0, #1
     2ba:	4d18      	ldr	r5, [pc, #96]	; (31c <SubscribeHandlerLedTopic+0x7c>)
     2bc:	47a8      	blx	r5
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
     2be:	6823      	ldr	r3, [r4, #0]
     2c0:	689c      	ldr	r4, [r3, #8]
     2c2:	2204      	movs	r2, #4
     2c4:	4916      	ldr	r1, [pc, #88]	; (320 <SubscribeHandlerLedTopic+0x80>)
     2c6:	0020      	movs	r0, r4
     2c8:	4b16      	ldr	r3, [pc, #88]	; (324 <SubscribeHandlerLedTopic+0x84>)
     2ca:	4798      	blx	r3
     2cc:	2800      	cmp	r0, #0
     2ce:	d120      	bne.n	312 <SubscribeHandlerLedTopic+0x72>
        char *p = (char *)&msgData->message->payload[4];
     2d0:	1d20      	adds	r0, r4, #4
     2d2:	9002      	str	r0, [sp, #8]
        while (nb <= 2 && *p) {
     2d4:	7923      	ldrb	r3, [r4, #4]
     2d6:	2b00      	cmp	r3, #0
     2d8:	d012      	beq.n	300 <SubscribeHandlerLedTopic+0x60>
     2da:	2400      	movs	r4, #0
            rgb[nb++] = strtol(p, &p, 10);
     2dc:	4e12      	ldr	r6, [pc, #72]	; (328 <SubscribeHandlerLedTopic+0x88>)
     2de:	ad03      	add	r5, sp, #12
     2e0:	220a      	movs	r2, #10
     2e2:	a902      	add	r1, sp, #8
     2e4:	47b0      	blx	r6
     2e6:	5560      	strb	r0, [r4, r5]
            if (*p != ',') break;
     2e8:	9b02      	ldr	r3, [sp, #8]
     2ea:	781a      	ldrb	r2, [r3, #0]
     2ec:	2a2c      	cmp	r2, #44	; 0x2c
     2ee:	d107      	bne.n	300 <SubscribeHandlerLedTopic+0x60>
            p++; /* skip, */
     2f0:	1c58      	adds	r0, r3, #1
     2f2:	9002      	str	r0, [sp, #8]
        while (nb <= 2 && *p) {
     2f4:	2c02      	cmp	r4, #2
     2f6:	d003      	beq.n	300 <SubscribeHandlerLedTopic+0x60>
     2f8:	3401      	adds	r4, #1
     2fa:	785b      	ldrb	r3, [r3, #1]
     2fc:	2b00      	cmp	r3, #0
     2fe:	d1ef      	bne.n	2e0 <SubscribeHandlerLedTopic+0x40>
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
     300:	a903      	add	r1, sp, #12
     302:	784b      	ldrb	r3, [r1, #1]
     304:	780a      	ldrb	r2, [r1, #0]
     306:	7889      	ldrb	r1, [r1, #2]
     308:	9100      	str	r1, [sp, #0]
     30a:	4908      	ldr	r1, [pc, #32]	; (32c <SubscribeHandlerLedTopic+0x8c>)
     30c:	2001      	movs	r0, #1
     30e:	4c03      	ldr	r4, [pc, #12]	; (31c <SubscribeHandlerLedTopic+0x7c>)
     310:	47a0      	blx	r4
}
     312:	b004      	add	sp, #16
     314:	bd70      	pop	{r4, r5, r6, pc}
     316:	46c0      	nop			; (mov r8, r8)
     318:	00018980 	.word	0x00018980
     31c:	00008b9d 	.word	0x00008b9d
     320:	00018988 	.word	0x00018988
     324:	00013829 	.word	0x00013829
     328:	000139d5 	.word	0x000139d5
     32c:	00018990 	.word	0x00018990

00000330 <SubscribeHandlerGameTopic>:
{
     330:	b5f0      	push	{r4, r5, r6, r7, lr}
     332:	b087      	sub	sp, #28
     334:	0004      	movs	r4, r0
    memset(game.game, 0xff, sizeof(game.game));
     336:	2214      	movs	r2, #20
     338:	21ff      	movs	r1, #255	; 0xff
     33a:	a801      	add	r0, sp, #4
     33c:	4b2b      	ldr	r3, [pc, #172]	; (3ec <SubscribeHandlerGameTopic+0xbc>)
     33e:	4798      	blx	r3
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
     340:	6823      	ldr	r3, [r4, #0]
     342:	6898      	ldr	r0, [r3, #8]
     344:	2209      	movs	r2, #9
     346:	492a      	ldr	r1, [pc, #168]	; (3f0 <SubscribeHandlerGameTopic+0xc0>)
     348:	4b2a      	ldr	r3, [pc, #168]	; (3f4 <SubscribeHandlerGameTopic+0xc4>)
     34a:	4798      	blx	r3
     34c:	2800      	cmp	r0, #0
     34e:	d13b      	bne.n	3c8 <SubscribeHandlerGameTopic+0x98>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
     350:	4929      	ldr	r1, [pc, #164]	; (3f8 <SubscribeHandlerGameTopic+0xc8>)
     352:	3001      	adds	r0, #1
     354:	4d29      	ldr	r5, [pc, #164]	; (3fc <SubscribeHandlerGameTopic+0xcc>)
     356:	47a8      	blx	r5
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
     358:	6862      	ldr	r2, [r4, #4]
     35a:	6893      	ldr	r3, [r2, #8]
     35c:	6852      	ldr	r2, [r2, #4]
     35e:	4928      	ldr	r1, [pc, #160]	; (400 <SubscribeHandlerGameTopic+0xd0>)
     360:	2001      	movs	r0, #1
     362:	47a8      	blx	r5
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
     364:	6822      	ldr	r2, [r4, #0]
     366:	6893      	ldr	r3, [r2, #8]
     368:	68d2      	ldr	r2, [r2, #12]
     36a:	4926      	ldr	r1, [pc, #152]	; (404 <SubscribeHandlerGameTopic+0xd4>)
     36c:	2001      	movs	r0, #1
     36e:	47a8      	blx	r5
        char *p = &msgData->message->payload[9];
     370:	6823      	ldr	r3, [r4, #0]
     372:	689b      	ldr	r3, [r3, #8]
     374:	0018      	movs	r0, r3
     376:	3009      	adds	r0, #9
     378:	9000      	str	r0, [sp, #0]
        while (nb < GAME_SIZE && *p) {
     37a:	7a5b      	ldrb	r3, [r3, #9]
     37c:	2b00      	cmp	r3, #0
     37e:	d013      	beq.n	3a8 <SubscribeHandlerGameTopic+0x78>
     380:	ac01      	add	r4, sp, #4
     382:	2517      	movs	r5, #23
     384:	446d      	add	r5, sp
            game.game[nb++] = strtol(p, &p, 10);
     386:	4e20      	ldr	r6, [pc, #128]	; (408 <SubscribeHandlerGameTopic+0xd8>)
     388:	220a      	movs	r2, #10
     38a:	4669      	mov	r1, sp
     38c:	47b0      	blx	r6
     38e:	7020      	strb	r0, [r4, #0]
            if (*p != ',') break;
     390:	9b00      	ldr	r3, [sp, #0]
     392:	781a      	ldrb	r2, [r3, #0]
     394:	2a2c      	cmp	r2, #44	; 0x2c
     396:	d107      	bne.n	3a8 <SubscribeHandlerGameTopic+0x78>
            p++; /* skip, */
     398:	1c58      	adds	r0, r3, #1
     39a:	9000      	str	r0, [sp, #0]
        while (nb < GAME_SIZE && *p) {
     39c:	42ac      	cmp	r4, r5
     39e:	d003      	beq.n	3a8 <SubscribeHandlerGameTopic+0x78>
     3a0:	3401      	adds	r4, #1
     3a2:	785b      	ldrb	r3, [r3, #1]
     3a4:	2b00      	cmp	r3, #0
     3a6:	d1ef      	bne.n	388 <SubscribeHandlerGameTopic+0x58>
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
     3a8:	4918      	ldr	r1, [pc, #96]	; (40c <SubscribeHandlerGameTopic+0xdc>)
     3aa:	2001      	movs	r0, #1
     3ac:	4b13      	ldr	r3, [pc, #76]	; (3fc <SubscribeHandlerGameTopic+0xcc>)
     3ae:	4798      	blx	r3
     3b0:	ac01      	add	r4, sp, #4
     3b2:	af06      	add	r7, sp, #24
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
     3b4:	4e16      	ldr	r6, [pc, #88]	; (410 <SubscribeHandlerGameTopic+0xe0>)
     3b6:	4d11      	ldr	r5, [pc, #68]	; (3fc <SubscribeHandlerGameTopic+0xcc>)
     3b8:	7822      	ldrb	r2, [r4, #0]
     3ba:	0031      	movs	r1, r6
     3bc:	2001      	movs	r0, #1
     3be:	47a8      	blx	r5
     3c0:	3401      	adds	r4, #1
        for (int i = 0; i < GAME_SIZE; i++) {
     3c2:	42a7      	cmp	r7, r4
     3c4:	d1f8      	bne.n	3b8 <SubscribeHandlerGameTopic+0x88>
     3c6:	e00f      	b.n	3e8 <SubscribeHandlerGameTopic+0xb8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
     3c8:	4912      	ldr	r1, [pc, #72]	; (414 <SubscribeHandlerGameTopic+0xe4>)
     3ca:	2001      	movs	r0, #1
     3cc:	4d0b      	ldr	r5, [pc, #44]	; (3fc <SubscribeHandlerGameTopic+0xcc>)
     3ce:	47a8      	blx	r5
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
     3d0:	6862      	ldr	r2, [r4, #4]
     3d2:	6893      	ldr	r3, [r2, #8]
     3d4:	6852      	ldr	r2, [r2, #4]
     3d6:	490a      	ldr	r1, [pc, #40]	; (400 <SubscribeHandlerGameTopic+0xd0>)
     3d8:	2001      	movs	r0, #1
     3da:	47a8      	blx	r5
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
     3dc:	6822      	ldr	r2, [r4, #0]
     3de:	6893      	ldr	r3, [r2, #8]
     3e0:	68d2      	ldr	r2, [r2, #12]
     3e2:	4908      	ldr	r1, [pc, #32]	; (404 <SubscribeHandlerGameTopic+0xd4>)
     3e4:	2001      	movs	r0, #1
     3e6:	47a8      	blx	r5
}
     3e8:	b007      	add	sp, #28
     3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3ec:	00012b83 	.word	0x00012b83
     3f0:	000188f0 	.word	0x000188f0
     3f4:	00013829 	.word	0x00013829
     3f8:	000188fc 	.word	0x000188fc
     3fc:	00008b9d 	.word	0x00008b9d
     400:	00018980 	.word	0x00018980
     404:	00018918 	.word	0x00018918
     408:	000139d5 	.word	0x000139d5
     40c:	00018920 	.word	0x00018920
     410:	00018934 	.word	0x00018934
     414:	00018938 	.word	0x00018938

00000418 <extint_detection_callback>:
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
}

volatile bool isPressed = false;
void extint_detection_callback(void)
{
     418:	b510      	push	{r4, lr}
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
     41a:	4b0a      	ldr	r3, [pc, #40]	; (444 <extint_detection_callback+0x2c>)
     41c:	681a      	ldr	r2, [r3, #0]
     41e:	3201      	adds	r2, #1
     420:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
     422:	681b      	ldr	r3, [r3, #0]
     424:	2b28      	cmp	r3, #40	; 0x28
     426:	d902      	bls.n	42e <extint_detection_callback+0x16>
     428:	2201      	movs	r2, #1
     42a:	4b06      	ldr	r3, [pc, #24]	; (444 <extint_detection_callback+0x2c>)
     42c:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
     42e:	4b05      	ldr	r3, [pc, #20]	; (444 <extint_detection_callback+0x2c>)
     430:	681b      	ldr	r3, [r3, #0]
     432:	4a05      	ldr	r2, [pc, #20]	; (448 <extint_detection_callback+0x30>)
     434:	213f      	movs	r1, #63	; 0x3f
     436:	4805      	ldr	r0, [pc, #20]	; (44c <extint_detection_callback+0x34>)
     438:	4c05      	ldr	r4, [pc, #20]	; (450 <extint_detection_callback+0x38>)
     43a:	47a0      	blx	r4
    isPressed = true;
     43c:	2201      	movs	r2, #1
     43e:	4b05      	ldr	r3, [pc, #20]	; (454 <extint_detection_callback+0x3c>)
     440:	701a      	strb	r2, [r3, #0]
    // Published in the Wifi thread main loop
}
     442:	bd10      	pop	{r4, pc}
     444:	200001e4 	.word	0x200001e4
     448:	00018a0c 	.word	0x00018a0c
     44c:	200000a8 	.word	0x200000a8
     450:	000136bd 	.word	0x000136bd
     454:	20000674 	.word	0x20000674

00000458 <socket_resolve_handler>:
{
     458:	b510      	push	{r4, lr}
    mqtt_socket_resolve_handler(doamin_name, server_ip);
     45a:	4b01      	ldr	r3, [pc, #4]	; (460 <socket_resolve_handler+0x8>)
     45c:	4798      	blx	r3
}
     45e:	bd10      	pop	{r4, pc}
     460:	00011ebd 	.word	0x00011ebd

00000464 <socket_event_handler>:
{
     464:	b510      	push	{r4, lr}
    mqtt_socket_event_handler(sock, msg_type, msg_data);
     466:	4b01      	ldr	r3, [pc, #4]	; (46c <socket_event_handler+0x8>)
     468:	4798      	blx	r3
}
     46a:	bd10      	pop	{r4, pc}
     46c:	00011eb1 	.word	0x00011eb1

00000470 <start_download>:
{
     470:	b510      	push	{r4, lr}
     472:	b082      	sub	sp, #8
    return ((down_state & mask) != 0);
     474:	4b15      	ldr	r3, [pc, #84]	; (4cc <start_download+0x5c>)
     476:	781b      	ldrb	r3, [r3, #0]
    if (!is_state_set(STORAGE_READY)) {
     478:	07da      	lsls	r2, r3, #31
     47a:	d512      	bpl.n	4a2 <start_download+0x32>
    if (!is_state_set(WIFI_CONNECTED)) {
     47c:	079a      	lsls	r2, r3, #30
     47e:	d515      	bpl.n	4ac <start_download+0x3c>
    if (is_state_set(GET_REQUESTED)) {
     480:	075a      	lsls	r2, r3, #29
     482:	d418      	bmi.n	4b6 <start_download+0x46>
    if (is_state_set(DOWNLOADING)) {
     484:	071b      	lsls	r3, r3, #28
     486:	d41b      	bmi.n	4c0 <start_download+0x50>
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
     488:	4911      	ldr	r1, [pc, #68]	; (4d0 <start_download+0x60>)
     48a:	2001      	movs	r0, #1
     48c:	4b11      	ldr	r3, [pc, #68]	; (4d4 <start_download+0x64>)
     48e:	4798      	blx	r3
    int http_req_status = http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
     490:	2300      	movs	r3, #0
     492:	9300      	str	r3, [sp, #0]
     494:	2201      	movs	r2, #1
     496:	4910      	ldr	r1, [pc, #64]	; (4d8 <start_download+0x68>)
     498:	4810      	ldr	r0, [pc, #64]	; (4dc <start_download+0x6c>)
     49a:	4c11      	ldr	r4, [pc, #68]	; (4e0 <start_download+0x70>)
     49c:	47a0      	blx	r4
}
     49e:	b002      	add	sp, #8
     4a0:	bd10      	pop	{r4, pc}
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
     4a2:	4910      	ldr	r1, [pc, #64]	; (4e4 <start_download+0x74>)
     4a4:	2001      	movs	r0, #1
     4a6:	4b0b      	ldr	r3, [pc, #44]	; (4d4 <start_download+0x64>)
     4a8:	4798      	blx	r3
        return;
     4aa:	e7f8      	b.n	49e <start_download+0x2e>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
     4ac:	490e      	ldr	r1, [pc, #56]	; (4e8 <start_download+0x78>)
     4ae:	2001      	movs	r0, #1
     4b0:	4b08      	ldr	r3, [pc, #32]	; (4d4 <start_download+0x64>)
     4b2:	4798      	blx	r3
        return;
     4b4:	e7f3      	b.n	49e <start_download+0x2e>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
     4b6:	490d      	ldr	r1, [pc, #52]	; (4ec <start_download+0x7c>)
     4b8:	2001      	movs	r0, #1
     4ba:	4b06      	ldr	r3, [pc, #24]	; (4d4 <start_download+0x64>)
     4bc:	4798      	blx	r3
        return;
     4be:	e7ee      	b.n	49e <start_download+0x2e>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
     4c0:	490b      	ldr	r1, [pc, #44]	; (4f0 <start_download+0x80>)
     4c2:	2001      	movs	r0, #1
     4c4:	4b03      	ldr	r3, [pc, #12]	; (4d4 <start_download+0x64>)
     4c6:	4798      	blx	r3
        return;
     4c8:	e7e9      	b.n	49e <start_download+0x2e>
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	2000041b 	.word	0x2000041b
     4d0:	00018e38 	.word	0x00018e38
     4d4:	00008b9d 	.word	0x00008b9d
     4d8:	00018e64 	.word	0x00018e64
     4dc:	200045d0 	.word	0x200045d0
     4e0:	00003e3d 	.word	0x00003e3d
     4e4:	00018d88 	.word	0x00018d88
     4e8:	00018db4 	.word	0x00018db4
     4ec:	00018de0 	.word	0x00018de0
     4f0:	00018e0c 	.word	0x00018e0c

000004f4 <configure_mqtt>:
{
     4f4:	b500      	push	{lr}
     4f6:	b087      	sub	sp, #28
    mqtt_get_config_defaults(&mqtt_conf);
     4f8:	4668      	mov	r0, sp
     4fa:	4b13      	ldr	r3, [pc, #76]	; (548 <configure_mqtt+0x54>)
     4fc:	4798      	blx	r3
    mqtt_conf.read_buffer = mqtt_read_buffer;
     4fe:	4b13      	ldr	r3, [pc, #76]	; (54c <configure_mqtt+0x58>)
     500:	9302      	str	r3, [sp, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
     502:	2380      	movs	r3, #128	; 0x80
     504:	009b      	lsls	r3, r3, #2
     506:	9303      	str	r3, [sp, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
     508:	4a11      	ldr	r2, [pc, #68]	; (550 <configure_mqtt+0x5c>)
     50a:	9204      	str	r2, [sp, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
     50c:	9305      	str	r3, [sp, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
     50e:	4b11      	ldr	r3, [pc, #68]	; (554 <configure_mqtt+0x60>)
     510:	466a      	mov	r2, sp
     512:	8013      	strh	r3, [r2, #0]
    mqtt_conf.keep_alive = 6000;
     514:	4b10      	ldr	r3, [pc, #64]	; (558 <configure_mqtt+0x64>)
     516:	8093      	strh	r3, [r2, #4]
    result = mqtt_init(&mqtt_inst, &mqtt_conf);
     518:	4669      	mov	r1, sp
     51a:	4810      	ldr	r0, [pc, #64]	; (55c <configure_mqtt+0x68>)
     51c:	4b10      	ldr	r3, [pc, #64]	; (560 <configure_mqtt+0x6c>)
     51e:	4798      	blx	r3
     520:	1e02      	subs	r2, r0, #0
    if (result < 0) {
     522:	db07      	blt.n	534 <configure_mqtt+0x40>
    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
     524:	490f      	ldr	r1, [pc, #60]	; (564 <configure_mqtt+0x70>)
     526:	480d      	ldr	r0, [pc, #52]	; (55c <configure_mqtt+0x68>)
     528:	4b0f      	ldr	r3, [pc, #60]	; (568 <configure_mqtt+0x74>)
     52a:	4798      	blx	r3
     52c:	1e02      	subs	r2, r0, #0
    if (result < 0) {
     52e:	db06      	blt.n	53e <configure_mqtt+0x4a>
}
     530:	b007      	add	sp, #28
     532:	bd00      	pop	{pc}
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
     534:	490d      	ldr	r1, [pc, #52]	; (56c <configure_mqtt+0x78>)
     536:	2001      	movs	r0, #1
     538:	4b0d      	ldr	r3, [pc, #52]	; (570 <configure_mqtt+0x7c>)
     53a:	4798      	blx	r3
     53c:	e7fe      	b.n	53c <configure_mqtt+0x48>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
     53e:	490d      	ldr	r1, [pc, #52]	; (574 <configure_mqtt+0x80>)
     540:	2001      	movs	r0, #1
     542:	4b0b      	ldr	r3, [pc, #44]	; (570 <configure_mqtt+0x7c>)
     544:	4798      	blx	r3
     546:	e7fe      	b.n	546 <configure_mqtt+0x52>
     548:	00011e85 	.word	0x00011e85
     54c:	200006b0 	.word	0x200006b0
     550:	200008b0 	.word	0x200008b0
     554:	0000075b 	.word	0x0000075b
     558:	00001770 	.word	0x00001770
     55c:	20000678 	.word	0x20000678
     560:	00011dcd 	.word	0x00011dcd
     564:	00000579 	.word	0x00000579
     568:	00011ea1 	.word	0x00011ea1
     56c:	000189a4 	.word	0x000189a4
     570:	00008b9d 	.word	0x00008b9d
     574:	000189d8 	.word	0x000189d8

00000578 <mqtt_callback>:
{
     578:	b530      	push	{r4, r5, lr}
     57a:	b087      	sub	sp, #28
     57c:	0004      	movs	r4, r0
    switch (type) {
     57e:	2901      	cmp	r1, #1
     580:	d030      	beq.n	5e4 <mqtt_callback+0x6c>
     582:	2905      	cmp	r1, #5
     584:	d04a      	beq.n	61c <mqtt_callback+0xa4>
     586:	2900      	cmp	r1, #0
     588:	d001      	beq.n	58e <mqtt_callback+0x16>
}
     58a:	b007      	add	sp, #28
     58c:	bd30      	pop	{r4, r5, pc}
            if (data->sock_connected.result >= 0) {
     58e:	6813      	ldr	r3, [r2, #0]
     590:	2b00      	cmp	r3, #0
     592:	db1c      	blt.n	5ce <mqtt_callback+0x56>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
     594:	4924      	ldr	r1, [pc, #144]	; (628 <mqtt_callback+0xb0>)
     596:	2001      	movs	r0, #1
     598:	4b24      	ldr	r3, [pc, #144]	; (62c <mqtt_callback+0xb4>)
     59a:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
     59c:	4a24      	ldr	r2, [pc, #144]	; (630 <mqtt_callback+0xb8>)
     59e:	2300      	movs	r3, #0
     5a0:	9305      	str	r3, [sp, #20]
     5a2:	9304      	str	r3, [sp, #16]
     5a4:	9303      	str	r3, [sp, #12]
     5a6:	9302      	str	r3, [sp, #8]
     5a8:	9301      	str	r3, [sp, #4]
     5aa:	9200      	str	r2, [sp, #0]
     5ac:	0013      	movs	r3, r2
     5ae:	2101      	movs	r1, #1
     5b0:	0020      	movs	r0, r4
     5b2:	4c20      	ldr	r4, [pc, #128]	; (634 <mqtt_callback+0xbc>)
     5b4:	47a0      	blx	r4
     5b6:	2800      	cmp	r0, #0
     5b8:	d004      	beq.n	5c4 <mqtt_callback+0x4c>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
     5ba:	491f      	ldr	r1, [pc, #124]	; (638 <mqtt_callback+0xc0>)
     5bc:	2001      	movs	r0, #1
     5be:	4b1b      	ldr	r3, [pc, #108]	; (62c <mqtt_callback+0xb4>)
     5c0:	4798      	blx	r3
     5c2:	e7e2      	b.n	58a <mqtt_callback+0x12>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
     5c4:	491d      	ldr	r1, [pc, #116]	; (63c <mqtt_callback+0xc4>)
     5c6:	2001      	movs	r0, #1
     5c8:	4b18      	ldr	r3, [pc, #96]	; (62c <mqtt_callback+0xb4>)
     5ca:	4798      	blx	r3
     5cc:	e7dd      	b.n	58a <mqtt_callback+0x12>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
     5ce:	4d1c      	ldr	r5, [pc, #112]	; (640 <mqtt_callback+0xc8>)
     5d0:	002a      	movs	r2, r5
     5d2:	491c      	ldr	r1, [pc, #112]	; (644 <mqtt_callback+0xcc>)
     5d4:	2001      	movs	r0, #1
     5d6:	4b15      	ldr	r3, [pc, #84]	; (62c <mqtt_callback+0xb4>)
     5d8:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
     5da:	0029      	movs	r1, r5
     5dc:	0020      	movs	r0, r4
     5de:	4b1a      	ldr	r3, [pc, #104]	; (648 <mqtt_callback+0xd0>)
     5e0:	4798      	blx	r3
     5e2:	e7d2      	b.n	58a <mqtt_callback+0x12>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
     5e4:	7812      	ldrb	r2, [r2, #0]
     5e6:	2a00      	cmp	r2, #0
     5e8:	d113      	bne.n	612 <mqtt_callback+0x9a>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
     5ea:	4b18      	ldr	r3, [pc, #96]	; (64c <mqtt_callback+0xd4>)
     5ec:	3202      	adds	r2, #2
     5ee:	4918      	ldr	r1, [pc, #96]	; (650 <mqtt_callback+0xd8>)
     5f0:	4d18      	ldr	r5, [pc, #96]	; (654 <mqtt_callback+0xdc>)
     5f2:	47a8      	blx	r5
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
     5f4:	4b18      	ldr	r3, [pc, #96]	; (658 <mqtt_callback+0xe0>)
     5f6:	2202      	movs	r2, #2
     5f8:	4918      	ldr	r1, [pc, #96]	; (65c <mqtt_callback+0xe4>)
     5fa:	0020      	movs	r0, r4
     5fc:	47a8      	blx	r5
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
     5fe:	4b18      	ldr	r3, [pc, #96]	; (660 <mqtt_callback+0xe8>)
     600:	2202      	movs	r2, #2
     602:	4918      	ldr	r1, [pc, #96]	; (664 <mqtt_callback+0xec>)
     604:	0020      	movs	r0, r4
     606:	47a8      	blx	r5
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
     608:	4917      	ldr	r1, [pc, #92]	; (668 <mqtt_callback+0xf0>)
     60a:	2001      	movs	r0, #1
     60c:	4b07      	ldr	r3, [pc, #28]	; (62c <mqtt_callback+0xb4>)
     60e:	4798      	blx	r3
     610:	e7bb      	b.n	58a <mqtt_callback+0x12>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
     612:	4916      	ldr	r1, [pc, #88]	; (66c <mqtt_callback+0xf4>)
     614:	2001      	movs	r0, #1
     616:	4b05      	ldr	r3, [pc, #20]	; (62c <mqtt_callback+0xb4>)
     618:	4798      	blx	r3
     61a:	e7b6      	b.n	58a <mqtt_callback+0x12>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
     61c:	4914      	ldr	r1, [pc, #80]	; (670 <mqtt_callback+0xf8>)
     61e:	2001      	movs	r0, #1
     620:	4b02      	ldr	r3, [pc, #8]	; (62c <mqtt_callback+0xb4>)
     622:	4798      	blx	r3
}
     624:	e7b1      	b.n	58a <mqtt_callback+0x12>
     626:	46c0      	nop			; (mov r8, r8)
     628:	00018c10 	.word	0x00018c10
     62c:	00008b9d 	.word	0x00008b9d
     630:	00018c2c 	.word	0x00018c2c
     634:	00011ef5 	.word	0x00011ef5
     638:	00018c3c 	.word	0x00018c3c
     63c:	00018c64 	.word	0x00018c64
     640:	00018bfc 	.word	0x00018bfc
     644:	00018c80 	.word	0x00018c80
     648:	00011ec9 	.word	0x00011ec9
     64c:	00000331 	.word	0x00000331
     650:	00018cb8 	.word	0x00018cb8
     654:	00011ff9 	.word	0x00011ff9
     658:	000002a1 	.word	0x000002a1
     65c:	00018ccc 	.word	0x00018ccc
     660:	00000279 	.word	0x00000279
     664:	00018ce0 	.word	0x00018ce0
     668:	00018cf4 	.word	0x00018cf4
     66c:	00018d08 	.word	0x00018d08
     670:	00018d3c 	.word	0x00018d3c

00000674 <resolve_cb>:
{
     674:	b570      	push	{r4, r5, r6, lr}
     676:	b084      	sub	sp, #16
     678:	0005      	movs	r5, r0
     67a:	000c      	movs	r4, r1
    LogMessage(LOG_DEBUG_LVL,
     67c:	22ff      	movs	r2, #255	; 0xff
     67e:	0013      	movs	r3, r2
     680:	400b      	ands	r3, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
     682:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
     684:	9102      	str	r1, [sp, #8]
               (int)IPV4_BYTE(u32ServerIP, 2),
     686:	0c21      	lsrs	r1, r4, #16
    LogMessage(LOG_DEBUG_LVL,
     688:	4011      	ands	r1, r2
     68a:	9101      	str	r1, [sp, #4]
               (int)IPV4_BYTE(u32ServerIP, 1),
     68c:	0a21      	lsrs	r1, r4, #8
    LogMessage(LOG_DEBUG_LVL,
     68e:	400a      	ands	r2, r1
     690:	9200      	str	r2, [sp, #0]
     692:	0002      	movs	r2, r0
     694:	4904      	ldr	r1, [pc, #16]	; (6a8 <resolve_cb+0x34>)
     696:	2001      	movs	r0, #1
     698:	4e04      	ldr	r6, [pc, #16]	; (6ac <resolve_cb+0x38>)
     69a:	47b0      	blx	r6
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
     69c:	0021      	movs	r1, r4
     69e:	0028      	movs	r0, r5
     6a0:	4b03      	ldr	r3, [pc, #12]	; (6b0 <resolve_cb+0x3c>)
     6a2:	4798      	blx	r3
}
     6a4:	b004      	add	sp, #16
     6a6:	bd70      	pop	{r4, r5, r6, pc}
     6a8:	00018d58 	.word	0x00018d58
     6ac:	00008b9d 	.word	0x00008b9d
     6b0:	0000390d 	.word	0x0000390d

000006b4 <socket_cb>:
{
     6b4:	b510      	push	{r4, lr}
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
     6b6:	4b01      	ldr	r3, [pc, #4]	; (6bc <socket_cb+0x8>)
     6b8:	4798      	blx	r3
}
     6ba:	bd10      	pop	{r4, pc}
     6bc:	00004539 	.word	0x00004539

000006c0 <rename_to_unique>:
{
     6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6c2:	46de      	mov	lr, fp
     6c4:	b500      	push	{lr}
     6c6:	b0c8      	sub	sp, #288	; 0x120
     6c8:	0007      	movs	r7, r0
     6ca:	000e      	movs	r6, r1
     6cc:	9101      	str	r1, [sp, #4]
     6ce:	9203      	str	r2, [sp, #12]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
     6d0:	22fb      	movs	r2, #251	; 0xfb
     6d2:	2100      	movs	r1, #0
     6d4:	a809      	add	r0, sp, #36	; 0x24
     6d6:	4d52      	ldr	r5, [pc, #328]	; (820 <rename_to_unique+0x160>)
     6d8:	47a8      	blx	r5
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
     6da:	2209      	movs	r2, #9
     6dc:	2100      	movs	r1, #0
     6de:	a806      	add	r0, sp, #24
     6e0:	47a8      	blx	r5
    char numbering[NUMBRING_MAX + 1] = {0};
     6e2:	2300      	movs	r3, #0
     6e4:	9305      	str	r3, [sp, #20]
    if (file_path_name == NULL) {
     6e6:	2e00      	cmp	r6, #0
     6e8:	d100      	bne.n	6ec <rename_to_unique+0x2c>
     6ea:	e090      	b.n	80e <rename_to_unique+0x14e>
    if (fp == NULL || file_path_name == NULL) {
     6ec:	2f00      	cmp	r7, #0
     6ee:	d100      	bne.n	6f2 <rename_to_unique+0x32>
     6f0:	e08f      	b.n	812 <rename_to_unique+0x152>
    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
     6f2:	4d4c      	ldr	r5, [pc, #304]	; (824 <rename_to_unique+0x164>)
     6f4:	2200      	movs	r2, #0
     6f6:	0031      	movs	r1, r6
     6f8:	0028      	movs	r0, r5
     6fa:	4b4b      	ldr	r3, [pc, #300]	; (828 <rename_to_unique+0x168>)
     6fc:	4798      	blx	r3
     6fe:	0007      	movs	r7, r0
    f_close(&file_object);
     700:	0028      	movs	r0, r5
     702:	4b4a      	ldr	r3, [pc, #296]	; (82c <rename_to_unique+0x16c>)
     704:	4798      	blx	r3
    if (!is_exist_file(fp, file_path_name)) {
     706:	2f00      	cmp	r7, #0
     708:	d000      	beq.n	70c <rename_to_unique+0x4c>
     70a:	e084      	b.n	816 <rename_to_unique+0x156>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
     70c:	0030      	movs	r0, r6
     70e:	4b48      	ldr	r3, [pc, #288]	; (830 <rename_to_unique+0x170>)
     710:	4798      	blx	r3
     712:	0003      	movs	r3, r0
        return false;
     714:	2000      	movs	r0, #0
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
     716:	2bfa      	cmp	r3, #250	; 0xfa
     718:	d87e      	bhi.n	818 <rename_to_unique+0x158>
    p = strrchr(file_path_name, '.');
     71a:	212e      	movs	r1, #46	; 0x2e
     71c:	0030      	movs	r0, r6
     71e:	4b45      	ldr	r3, [pc, #276]	; (834 <rename_to_unique+0x174>)
     720:	4798      	blx	r3
     722:	1e05      	subs	r5, r0, #0
    if (p != NULL) {
     724:	d039      	beq.n	79a <rename_to_unique+0xda>
        ext_len = strlen(p);
     726:	4b42      	ldr	r3, [pc, #264]	; (830 <rename_to_unique+0x170>)
     728:	4798      	blx	r3
     72a:	0007      	movs	r7, r0
     72c:	b284      	uxth	r4, r0
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
     72e:	2c07      	cmp	r4, #7
     730:	d820      	bhi.n	774 <rename_to_unique+0xb4>
            strcpy(ext, p);
     732:	0029      	movs	r1, r5
     734:	a806      	add	r0, sp, #24
     736:	4b40      	ldr	r3, [pc, #256]	; (838 <rename_to_unique+0x178>)
     738:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
     73a:	0030      	movs	r0, r6
     73c:	4b3c      	ldr	r3, [pc, #240]	; (830 <rename_to_unique+0x170>)
     73e:	4798      	blx	r3
     740:	043f      	lsls	r7, r7, #16
     742:	0c3f      	lsrs	r7, r7, #16
     744:	1bc7      	subs	r7, r0, r7
     746:	2ff6      	cmp	r7, #246	; 0xf6
     748:	d909      	bls.n	75e <rename_to_unique+0x9e>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
     74a:	25f6      	movs	r5, #246	; 0xf6
     74c:	1b2d      	subs	r5, r5, r4
     74e:	b2ad      	uxth	r5, r5
                strncpy(name, file_path_name, name_len);
     750:	002a      	movs	r2, r5
     752:	0031      	movs	r1, r6
     754:	a809      	add	r0, sp, #36	; 0x24
     756:	4b39      	ldr	r3, [pc, #228]	; (83c <rename_to_unique+0x17c>)
     758:	4798      	blx	r3
            valid_ext = true;
     75a:	2401      	movs	r4, #1
     75c:	e011      	b.n	782 <rename_to_unique+0xc2>
                name_len = (p - file_path_name);
     75e:	9b01      	ldr	r3, [sp, #4]
     760:	1aea      	subs	r2, r5, r3
     762:	b295      	uxth	r5, r2
                strncpy(name, file_path_name, name_len);
     764:	0412      	lsls	r2, r2, #16
     766:	0c12      	lsrs	r2, r2, #16
     768:	0019      	movs	r1, r3
     76a:	a809      	add	r0, sp, #36	; 0x24
     76c:	4b33      	ldr	r3, [pc, #204]	; (83c <rename_to_unique+0x17c>)
     76e:	4798      	blx	r3
            valid_ext = true;
     770:	2401      	movs	r4, #1
     772:	e006      	b.n	782 <rename_to_unique+0xc2>
            strncpy(name, file_path_name, name_len);
     774:	22f6      	movs	r2, #246	; 0xf6
     776:	9901      	ldr	r1, [sp, #4]
     778:	a809      	add	r0, sp, #36	; 0x24
     77a:	4b30      	ldr	r3, [pc, #192]	; (83c <rename_to_unique+0x17c>)
     77c:	4798      	blx	r3
    bool valid_ext = false;
     77e:	2400      	movs	r4, #0
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
     780:	25f6      	movs	r5, #246	; 0xf6
    name[name_len++] = '-';
     782:	1c6e      	adds	r6, r5, #1
     784:	b2b6      	uxth	r6, r6
     786:	222d      	movs	r2, #45	; 0x2d
     788:	ab09      	add	r3, sp, #36	; 0x24
     78a:	555a      	strb	r2, [r3, r5]
     78c:	2501      	movs	r5, #1
            strcpy(&name[name_len + NUMBRING_MAX], ext);
     78e:	1cf3      	adds	r3, r6, #3
     790:	aa09      	add	r2, sp, #36	; 0x24
     792:	4694      	mov	ip, r2
     794:	4463      	add	r3, ip
     796:	9302      	str	r3, [sp, #8]
     798:	e019      	b.n	7ce <rename_to_unique+0x10e>
        strncpy(name, file_path_name, name_len);
     79a:	22f6      	movs	r2, #246	; 0xf6
     79c:	9901      	ldr	r1, [sp, #4]
     79e:	a809      	add	r0, sp, #36	; 0x24
     7a0:	4b26      	ldr	r3, [pc, #152]	; (83c <rename_to_unique+0x17c>)
     7a2:	4798      	blx	r3
    bool valid_ext = false;
     7a4:	2400      	movs	r4, #0
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
     7a6:	25f6      	movs	r5, #246	; 0xf6
     7a8:	e7eb      	b.n	782 <rename_to_unique+0xc2>
    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
     7aa:	4f1e      	ldr	r7, [pc, #120]	; (824 <rename_to_unique+0x164>)
     7ac:	2200      	movs	r2, #0
     7ae:	a909      	add	r1, sp, #36	; 0x24
     7b0:	0038      	movs	r0, r7
     7b2:	4b1d      	ldr	r3, [pc, #116]	; (828 <rename_to_unique+0x168>)
     7b4:	4798      	blx	r3
     7b6:	4683      	mov	fp, r0
    f_close(&file_object);
     7b8:	0038      	movs	r0, r7
     7ba:	4b1c      	ldr	r3, [pc, #112]	; (82c <rename_to_unique+0x16c>)
     7bc:	4798      	blx	r3
        if (!is_exist_file(fp, name)) {
     7be:	465b      	mov	r3, fp
     7c0:	2b00      	cmp	r3, #0
     7c2:	d116      	bne.n	7f2 <rename_to_unique+0x132>
     7c4:	3501      	adds	r5, #1
    for (i = 1; i < count; i++) {
     7c6:	4b1e      	ldr	r3, [pc, #120]	; (840 <rename_to_unique+0x180>)
     7c8:	b2aa      	uxth	r2, r5
     7ca:	429a      	cmp	r2, r3
     7cc:	d81d      	bhi.n	80a <rename_to_unique+0x14a>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
     7ce:	002a      	movs	r2, r5
     7d0:	491c      	ldr	r1, [pc, #112]	; (844 <rename_to_unique+0x184>)
     7d2:	a805      	add	r0, sp, #20
     7d4:	4b1c      	ldr	r3, [pc, #112]	; (848 <rename_to_unique+0x188>)
     7d6:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
     7d8:	ab09      	add	r3, sp, #36	; 0x24
     7da:	1998      	adds	r0, r3, r6
     7dc:	2203      	movs	r2, #3
     7de:	a905      	add	r1, sp, #20
     7e0:	4b16      	ldr	r3, [pc, #88]	; (83c <rename_to_unique+0x17c>)
     7e2:	4798      	blx	r3
        if (valid_ext) {
     7e4:	2c00      	cmp	r4, #0
     7e6:	d0e0      	beq.n	7aa <rename_to_unique+0xea>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
     7e8:	a906      	add	r1, sp, #24
     7ea:	9802      	ldr	r0, [sp, #8]
     7ec:	4b12      	ldr	r3, [pc, #72]	; (838 <rename_to_unique+0x178>)
     7ee:	4798      	blx	r3
     7f0:	e7db      	b.n	7aa <rename_to_unique+0xea>
            memset(file_path_name, 0, max_len);
     7f2:	9a03      	ldr	r2, [sp, #12]
     7f4:	2100      	movs	r1, #0
     7f6:	9c01      	ldr	r4, [sp, #4]
     7f8:	0020      	movs	r0, r4
     7fa:	4b09      	ldr	r3, [pc, #36]	; (820 <rename_to_unique+0x160>)
     7fc:	4798      	blx	r3
            strcpy(file_path_name, name);
     7fe:	a909      	add	r1, sp, #36	; 0x24
     800:	0020      	movs	r0, r4
     802:	4b0d      	ldr	r3, [pc, #52]	; (838 <rename_to_unique+0x178>)
     804:	4798      	blx	r3
            return true;
     806:	2001      	movs	r0, #1
     808:	e006      	b.n	818 <rename_to_unique+0x158>
    return false;
     80a:	2000      	movs	r0, #0
     80c:	e004      	b.n	818 <rename_to_unique+0x158>
        return false;
     80e:	2000      	movs	r0, #0
     810:	e002      	b.n	818 <rename_to_unique+0x158>
        return true;
     812:	2001      	movs	r0, #1
     814:	e000      	b.n	818 <rename_to_unique+0x158>
     816:	2001      	movs	r0, #1
}
     818:	b048      	add	sp, #288	; 0x120
     81a:	bc04      	pop	{r2}
     81c:	4693      	mov	fp, r2
     81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     820:	00012b83 	.word	0x00012b83
     824:	2000064c 	.word	0x2000064c
     828:	00010d61 	.word	0x00010d61
     82c:	000111ad 	.word	0x000111ad
     830:	0001381b 	.word	0x0001381b
     834:	00013875 	.word	0x00013875
     838:	000137cf 	.word	0x000137cf
     83c:	0001384b 	.word	0x0001384b
     840:	000003e7 	.word	0x000003e7
     844:	00018d50 	.word	0x00018d50
     848:	00013721 	.word	0x00013721

0000084c <store_file_packet>:
{
     84c:	b5f0      	push	{r4, r5, r6, r7, lr}
     84e:	b083      	sub	sp, #12
     850:	0005      	movs	r5, r0
     852:	000e      	movs	r6, r1
    if ((data == NULL) || (length < 1)) {
     854:	2800      	cmp	r0, #0
     856:	d00c      	beq.n	872 <store_file_packet+0x26>
     858:	2900      	cmp	r1, #0
     85a:	d00a      	beq.n	872 <store_file_packet+0x26>
    return ((down_state & mask) != 0);
     85c:	4b3c      	ldr	r3, [pc, #240]	; (950 <store_file_packet+0x104>)
     85e:	781b      	ldrb	r3, [r3, #0]
    if (!is_state_set(DOWNLOADING)) {
     860:	071b      	lsls	r3, r3, #28
     862:	d432      	bmi.n	8ca <store_file_packet+0x7e>
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
     864:	4b3b      	ldr	r3, [pc, #236]	; (954 <store_file_packet+0x108>)
     866:	2230      	movs	r2, #48	; 0x30
     868:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
     86a:	320a      	adds	r2, #10
     86c:	705a      	strb	r2, [r3, #1]
     86e:	4c3a      	ldr	r4, [pc, #232]	; (958 <store_file_packet+0x10c>)
     870:	e006      	b.n	880 <store_file_packet+0x34>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
     872:	493a      	ldr	r1, [pc, #232]	; (95c <store_file_packet+0x110>)
     874:	2001      	movs	r0, #1
     876:	4b3a      	ldr	r3, [pc, #232]	; (960 <store_file_packet+0x114>)
     878:	4798      	blx	r3
}
     87a:	b003      	add	sp, #12
     87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            cp--;
     87e:	0004      	movs	r4, r0
     880:	1e60      	subs	r0, r4, #1
        while (*cp != '/') {
     882:	7803      	ldrb	r3, [r0, #0]
     884:	2b2f      	cmp	r3, #47	; 0x2f
     886:	d1fa      	bne.n	87e <store_file_packet+0x32>
        if (strlen(cp) > 1) {
     888:	4b36      	ldr	r3, [pc, #216]	; (964 <store_file_packet+0x118>)
     88a:	4798      	blx	r3
     88c:	2801      	cmp	r0, #1
     88e:	d931      	bls.n	8f4 <store_file_packet+0xa8>
            strcpy(&save_file_name[2], cp);
     890:	4f30      	ldr	r7, [pc, #192]	; (954 <store_file_packet+0x108>)
     892:	1cb8      	adds	r0, r7, #2
     894:	0021      	movs	r1, r4
     896:	4b34      	ldr	r3, [pc, #208]	; (968 <store_file_packet+0x11c>)
     898:	4798      	blx	r3
        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
     89a:	4c34      	ldr	r4, [pc, #208]	; (96c <store_file_packet+0x120>)
     89c:	22fa      	movs	r2, #250	; 0xfa
     89e:	0039      	movs	r1, r7
     8a0:	0020      	movs	r0, r4
     8a2:	4b33      	ldr	r3, [pc, #204]	; (970 <store_file_packet+0x124>)
     8a4:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
     8a6:	003a      	movs	r2, r7
     8a8:	4932      	ldr	r1, [pc, #200]	; (974 <store_file_packet+0x128>)
     8aa:	2001      	movs	r0, #1
     8ac:	4b2c      	ldr	r3, [pc, #176]	; (960 <store_file_packet+0x114>)
     8ae:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
     8b0:	220a      	movs	r2, #10
     8b2:	0039      	movs	r1, r7
     8b4:	0020      	movs	r0, r4
     8b6:	4b30      	ldr	r3, [pc, #192]	; (978 <store_file_packet+0x12c>)
     8b8:	4798      	blx	r3
        if (ret != FR_OK) {
     8ba:	2800      	cmp	r0, #0
     8bc:	d122      	bne.n	904 <store_file_packet+0xb8>
        received_file_size = 0;
     8be:	2200      	movs	r2, #0
     8c0:	4b2e      	ldr	r3, [pc, #184]	; (97c <store_file_packet+0x130>)
     8c2:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
     8c4:	2008      	movs	r0, #8
     8c6:	4b2e      	ldr	r3, [pc, #184]	; (980 <store_file_packet+0x134>)
     8c8:	4798      	blx	r3
        UINT wsize = 0;
     8ca:	2300      	movs	r3, #0
     8cc:	9301      	str	r3, [sp, #4]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
     8ce:	ab01      	add	r3, sp, #4
     8d0:	0032      	movs	r2, r6
     8d2:	0029      	movs	r1, r5
     8d4:	4825      	ldr	r0, [pc, #148]	; (96c <store_file_packet+0x120>)
     8d6:	4c2b      	ldr	r4, [pc, #172]	; (984 <store_file_packet+0x138>)
     8d8:	47a0      	blx	r4
        if (ret != FR_OK) {
     8da:	2800      	cmp	r0, #0
     8dc:	d018      	beq.n	910 <store_file_packet+0xc4>
            f_close(&file_object);
     8de:	4823      	ldr	r0, [pc, #140]	; (96c <store_file_packet+0x120>)
     8e0:	4b29      	ldr	r3, [pc, #164]	; (988 <store_file_packet+0x13c>)
     8e2:	4798      	blx	r3
            add_state(CANCELED);
     8e4:	2020      	movs	r0, #32
     8e6:	4b26      	ldr	r3, [pc, #152]	; (980 <store_file_packet+0x134>)
     8e8:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
     8ea:	4928      	ldr	r1, [pc, #160]	; (98c <store_file_packet+0x140>)
     8ec:	2001      	movs	r0, #1
     8ee:	4b1c      	ldr	r3, [pc, #112]	; (960 <store_file_packet+0x114>)
     8f0:	4798      	blx	r3
            return;
     8f2:	e7c2      	b.n	87a <store_file_packet+0x2e>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
     8f4:	4926      	ldr	r1, [pc, #152]	; (990 <store_file_packet+0x144>)
     8f6:	2001      	movs	r0, #1
     8f8:	4b19      	ldr	r3, [pc, #100]	; (960 <store_file_packet+0x114>)
     8fa:	4798      	blx	r3
            add_state(CANCELED);
     8fc:	2020      	movs	r0, #32
     8fe:	4b20      	ldr	r3, [pc, #128]	; (980 <store_file_packet+0x134>)
     900:	4798      	blx	r3
            return;
     902:	e7ba      	b.n	87a <store_file_packet+0x2e>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
     904:	0002      	movs	r2, r0
     906:	4923      	ldr	r1, [pc, #140]	; (994 <store_file_packet+0x148>)
     908:	2001      	movs	r0, #1
     90a:	4b15      	ldr	r3, [pc, #84]	; (960 <store_file_packet+0x114>)
     90c:	4798      	blx	r3
            return;
     90e:	e7b4      	b.n	87a <store_file_packet+0x2e>
        received_file_size += wsize;
     910:	4c1a      	ldr	r4, [pc, #104]	; (97c <store_file_packet+0x130>)
     912:	6823      	ldr	r3, [r4, #0]
     914:	9901      	ldr	r1, [sp, #4]
     916:	468c      	mov	ip, r1
     918:	4463      	add	r3, ip
     91a:	001a      	movs	r2, r3
     91c:	6023      	str	r3, [r4, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
     91e:	4d1e      	ldr	r5, [pc, #120]	; (998 <store_file_packet+0x14c>)
     920:	682b      	ldr	r3, [r5, #0]
     922:	491e      	ldr	r1, [pc, #120]	; (99c <store_file_packet+0x150>)
     924:	2001      	movs	r0, #1
     926:	4e0e      	ldr	r6, [pc, #56]	; (960 <store_file_packet+0x114>)
     928:	47b0      	blx	r6
        if (received_file_size >= http_file_size) {
     92a:	6822      	ldr	r2, [r4, #0]
     92c:	682b      	ldr	r3, [r5, #0]
     92e:	429a      	cmp	r2, r3
     930:	d3a3      	bcc.n	87a <store_file_packet+0x2e>
            f_close(&file_object);
     932:	480e      	ldr	r0, [pc, #56]	; (96c <store_file_packet+0x120>)
     934:	4b14      	ldr	r3, [pc, #80]	; (988 <store_file_packet+0x13c>)
     936:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
     938:	4919      	ldr	r1, [pc, #100]	; (9a0 <store_file_packet+0x154>)
     93a:	2001      	movs	r0, #1
     93c:	4b08      	ldr	r3, [pc, #32]	; (960 <store_file_packet+0x114>)
     93e:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     940:	2280      	movs	r2, #128	; 0x80
     942:	0412      	lsls	r2, r2, #16
     944:	4b17      	ldr	r3, [pc, #92]	; (9a4 <store_file_packet+0x158>)
     946:	615a      	str	r2, [r3, #20]
            add_state(COMPLETED);
     948:	2010      	movs	r0, #16
     94a:	4b0d      	ldr	r3, [pc, #52]	; (980 <store_file_packet+0x134>)
     94c:	4798      	blx	r3
            return;
     94e:	e794      	b.n	87a <store_file_packet+0x2e>
     950:	2000041b 	.word	0x2000041b
     954:	200000e8 	.word	0x200000e8
     958:	00018e8c 	.word	0x00018e8c
     95c:	00018e90 	.word	0x00018e90
     960:	00008b9d 	.word	0x00008b9d
     964:	0001381b 	.word	0x0001381b
     968:	000137cf 	.word	0x000137cf
     96c:	2000064c 	.word	0x2000064c
     970:	000006c1 	.word	0x000006c1
     974:	00018eb4 	.word	0x00018eb4
     978:	00010d61 	.word	0x00010d61
     97c:	20000ab0 	.word	0x20000ab0
     980:	00000269 	.word	0x00000269
     984:	00010ee9 	.word	0x00010ee9
     988:	000111ad 	.word	0x000111ad
     98c:	00018f50 	.word	0x00018f50
     990:	00018edc 	.word	0x00018edc
     994:	00018f1c 	.word	0x00018f1c
     998:	20000670 	.word	0x20000670
     99c:	00018f8c 	.word	0x00018f8c
     9a0:	00018fc0 	.word	0x00018fc0
     9a4:	41004400 	.word	0x41004400

000009a8 <http_client_callback>:
{
     9a8:	b570      	push	{r4, r5, r6, lr}
     9aa:	0014      	movs	r4, r2
    switch (type) {
     9ac:	2904      	cmp	r1, #4
     9ae:	d807      	bhi.n	9c0 <http_client_callback+0x18>
     9b0:	0089      	lsls	r1, r1, #2
     9b2:	4b2d      	ldr	r3, [pc, #180]	; (a68 <http_client_callback+0xc0>)
     9b4:	585b      	ldr	r3, [r3, r1]
     9b6:	469f      	mov	pc, r3
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
     9b8:	492c      	ldr	r1, [pc, #176]	; (a6c <http_client_callback+0xc4>)
     9ba:	2001      	movs	r0, #1
     9bc:	4b2c      	ldr	r3, [pc, #176]	; (a70 <http_client_callback+0xc8>)
     9be:	4798      	blx	r3
}
     9c0:	bd70      	pop	{r4, r5, r6, pc}
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
     9c2:	492c      	ldr	r1, [pc, #176]	; (a74 <http_client_callback+0xcc>)
     9c4:	2001      	movs	r0, #1
     9c6:	4b2a      	ldr	r3, [pc, #168]	; (a70 <http_client_callback+0xc8>)
     9c8:	4798      	blx	r3
            add_state(GET_REQUESTED);
     9ca:	2004      	movs	r0, #4
     9cc:	4b2a      	ldr	r3, [pc, #168]	; (a78 <http_client_callback+0xd0>)
     9ce:	4798      	blx	r3
            break;
     9d0:	e7f6      	b.n	9c0 <http_client_callback+0x18>
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
     9d2:	8812      	ldrh	r2, [r2, #0]
     9d4:	6863      	ldr	r3, [r4, #4]
     9d6:	4929      	ldr	r1, [pc, #164]	; (a7c <http_client_callback+0xd4>)
     9d8:	2001      	movs	r0, #1
     9da:	4d25      	ldr	r5, [pc, #148]	; (a70 <http_client_callback+0xc8>)
     9dc:	47a8      	blx	r5
            if ((unsigned int)data->recv_response.response_code == 200) {
     9de:	8823      	ldrh	r3, [r4, #0]
     9e0:	2bc8      	cmp	r3, #200	; 0xc8
     9e2:	d110      	bne.n	a06 <http_client_callback+0x5e>
                http_file_size = data->recv_response.content_length;
     9e4:	6861      	ldr	r1, [r4, #4]
     9e6:	4b26      	ldr	r3, [pc, #152]	; (a80 <http_client_callback+0xd8>)
     9e8:	6019      	str	r1, [r3, #0]
                received_file_size = 0;
     9ea:	2200      	movs	r2, #0
     9ec:	4b25      	ldr	r3, [pc, #148]	; (a84 <http_client_callback+0xdc>)
     9ee:	601a      	str	r2, [r3, #0]
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
     9f0:	23c8      	movs	r3, #200	; 0xc8
     9f2:	009b      	lsls	r3, r3, #2
     9f4:	4299      	cmp	r1, r3
     9f6:	d8e3      	bhi.n	9c0 <http_client_callback+0x18>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
     9f8:	68a0      	ldr	r0, [r4, #8]
     9fa:	4b23      	ldr	r3, [pc, #140]	; (a88 <http_client_callback+0xe0>)
     9fc:	4798      	blx	r3
                add_state(COMPLETED);
     9fe:	2010      	movs	r0, #16
     a00:	4b1d      	ldr	r3, [pc, #116]	; (a78 <http_client_callback+0xd0>)
     a02:	4798      	blx	r3
     a04:	e7dc      	b.n	9c0 <http_client_callback+0x18>
                add_state(CANCELED);
     a06:	2020      	movs	r0, #32
     a08:	4b1b      	ldr	r3, [pc, #108]	; (a78 <http_client_callback+0xd0>)
     a0a:	4798      	blx	r3
                return;
     a0c:	e7d8      	b.n	9c0 <http_client_callback+0x18>
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
     a0e:	6811      	ldr	r1, [r2, #0]
     a10:	6850      	ldr	r0, [r2, #4]
     a12:	4b1d      	ldr	r3, [pc, #116]	; (a88 <http_client_callback+0xe0>)
     a14:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
     a16:	7a23      	ldrb	r3, [r4, #8]
     a18:	2b00      	cmp	r3, #0
     a1a:	d0d1      	beq.n	9c0 <http_client_callback+0x18>
                add_state(COMPLETED);
     a1c:	2010      	movs	r0, #16
     a1e:	4b16      	ldr	r3, [pc, #88]	; (a78 <http_client_callback+0xd0>)
     a20:	4798      	blx	r3
     a22:	e7cd      	b.n	9c0 <http_client_callback+0x18>
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
     a24:	6812      	ldr	r2, [r2, #0]
     a26:	4919      	ldr	r1, [pc, #100]	; (a8c <http_client_callback+0xe4>)
     a28:	2001      	movs	r0, #1
     a2a:	4b11      	ldr	r3, [pc, #68]	; (a70 <http_client_callback+0xc8>)
     a2c:	4798      	blx	r3
            if (data->disconnected.reason == -EAGAIN) {
     a2e:	6823      	ldr	r3, [r4, #0]
     a30:	330b      	adds	r3, #11
     a32:	d1c5      	bne.n	9c0 <http_client_callback+0x18>
    return ((down_state & mask) != 0);
     a34:	4b16      	ldr	r3, [pc, #88]	; (a90 <http_client_callback+0xe8>)
     a36:	781b      	ldrb	r3, [r3, #0]
                if (is_state_set(DOWNLOADING)) {
     a38:	071b      	lsls	r3, r3, #28
     a3a:	d406      	bmi.n	a4a <http_client_callback+0xa2>
    return ((down_state & mask) != 0);
     a3c:	4b14      	ldr	r3, [pc, #80]	; (a90 <http_client_callback+0xe8>)
     a3e:	781b      	ldrb	r3, [r3, #0]
                if (is_state_set(GET_REQUESTED)) {
     a40:	075a      	lsls	r2, r3, #29
     a42:	d40b      	bmi.n	a5c <http_client_callback+0xb4>
                start_download();
     a44:	4b13      	ldr	r3, [pc, #76]	; (a94 <http_client_callback+0xec>)
     a46:	4798      	blx	r3
     a48:	e7ba      	b.n	9c0 <http_client_callback+0x18>
                    f_close(&file_object);
     a4a:	4813      	ldr	r0, [pc, #76]	; (a98 <http_client_callback+0xf0>)
     a4c:	4b13      	ldr	r3, [pc, #76]	; (a9c <http_client_callback+0xf4>)
     a4e:	4798      	blx	r3
    down_state &= ~mask;
     a50:	4a0f      	ldr	r2, [pc, #60]	; (a90 <http_client_callback+0xe8>)
     a52:	7813      	ldrb	r3, [r2, #0]
     a54:	2108      	movs	r1, #8
     a56:	438b      	bics	r3, r1
     a58:	7013      	strb	r3, [r2, #0]
     a5a:	e7ef      	b.n	a3c <http_client_callback+0x94>
     a5c:	2204      	movs	r2, #4
     a5e:	4393      	bics	r3, r2
     a60:	4a0b      	ldr	r2, [pc, #44]	; (a90 <http_client_callback+0xe8>)
     a62:	7013      	strb	r3, [r2, #0]
     a64:	e7ee      	b.n	a44 <http_client_callback+0x9c>
     a66:	46c0      	nop			; (mov r8, r8)
     a68:	000188dc 	.word	0x000188dc
     a6c:	00018a20 	.word	0x00018a20
     a70:	00008b9d 	.word	0x00008b9d
     a74:	00018a58 	.word	0x00018a58
     a78:	00000269 	.word	0x00000269
     a7c:	00018a84 	.word	0x00018a84
     a80:	20000670 	.word	0x20000670
     a84:	20000ab0 	.word	0x20000ab0
     a88:	0000084d 	.word	0x0000084d
     a8c:	00018ac0 	.word	0x00018ac0
     a90:	2000041b 	.word	0x2000041b
     a94:	00000471 	.word	0x00000471
     a98:	2000064c 	.word	0x2000064c
     a9c:	000111ad 	.word	0x000111ad

00000aa0 <wifi_cb>:
{
     aa0:	b510      	push	{r4, lr}
     aa2:	b082      	sub	sp, #8
    switch (u8MsgType) {
     aa4:	282c      	cmp	r0, #44	; 0x2c
     aa6:	d003      	beq.n	ab0 <wifi_cb+0x10>
     aa8:	2832      	cmp	r0, #50	; 0x32
     aaa:	d037      	beq.n	b1c <wifi_cb+0x7c>
}
     aac:	b002      	add	sp, #8
     aae:	bd10      	pop	{r4, pc}
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
     ab0:	780b      	ldrb	r3, [r1, #0]
     ab2:	2b01      	cmp	r3, #1
     ab4:	d01d      	beq.n	af2 <wifi_cb+0x52>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
     ab6:	2b00      	cmp	r3, #0
     ab8:	d1f8      	bne.n	aac <wifi_cb+0xc>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
     aba:	4928      	ldr	r1, [pc, #160]	; (b5c <wifi_cb+0xbc>)
     abc:	2001      	movs	r0, #1
     abe:	4b28      	ldr	r3, [pc, #160]	; (b60 <wifi_cb+0xc0>)
     ac0:	4798      	blx	r3
    down_state &= ~mask;
     ac2:	4a28      	ldr	r2, [pc, #160]	; (b64 <wifi_cb+0xc4>)
     ac4:	7813      	ldrb	r3, [r2, #0]
     ac6:	2102      	movs	r1, #2
     ac8:	438b      	bics	r3, r1
     aca:	7013      	strb	r3, [r2, #0]
                if (is_state_set(DOWNLOADING)) {
     acc:	071b      	lsls	r3, r3, #28
     ace:	d417      	bmi.n	b00 <wifi_cb+0x60>
    return ((down_state & mask) != 0);
     ad0:	4b24      	ldr	r3, [pc, #144]	; (b64 <wifi_cb+0xc4>)
     ad2:	781b      	ldrb	r3, [r3, #0]
                if (is_state_set(GET_REQUESTED)) {
     ad4:	075a      	lsls	r2, r3, #29
     ad6:	d41c      	bmi.n	b12 <wifi_cb+0x72>
                mqtt_disconnect(&mqtt_inst, 1);
     ad8:	2101      	movs	r1, #1
     ada:	4823      	ldr	r0, [pc, #140]	; (b68 <wifi_cb+0xc8>)
     adc:	4b23      	ldr	r3, [pc, #140]	; (b6c <wifi_cb+0xcc>)
     ade:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
     ae0:	23ff      	movs	r3, #255	; 0xff
     ae2:	9300      	str	r3, [sp, #0]
     ae4:	4b22      	ldr	r3, [pc, #136]	; (b70 <wifi_cb+0xd0>)
     ae6:	2202      	movs	r2, #2
     ae8:	2111      	movs	r1, #17
     aea:	4822      	ldr	r0, [pc, #136]	; (b74 <wifi_cb+0xd4>)
     aec:	4c22      	ldr	r4, [pc, #136]	; (b78 <wifi_cb+0xd8>)
     aee:	47a0      	blx	r4
     af0:	e7dc      	b.n	aac <wifi_cb+0xc>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
     af2:	4922      	ldr	r1, [pc, #136]	; (b7c <wifi_cb+0xdc>)
     af4:	2001      	movs	r0, #1
     af6:	4b1a      	ldr	r3, [pc, #104]	; (b60 <wifi_cb+0xc0>)
     af8:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
     afa:	4b21      	ldr	r3, [pc, #132]	; (b80 <wifi_cb+0xe0>)
     afc:	4798      	blx	r3
     afe:	e7d5      	b.n	aac <wifi_cb+0xc>
                    f_close(&file_object);
     b00:	4820      	ldr	r0, [pc, #128]	; (b84 <wifi_cb+0xe4>)
     b02:	4b21      	ldr	r3, [pc, #132]	; (b88 <wifi_cb+0xe8>)
     b04:	4798      	blx	r3
    down_state &= ~mask;
     b06:	4a17      	ldr	r2, [pc, #92]	; (b64 <wifi_cb+0xc4>)
     b08:	7813      	ldrb	r3, [r2, #0]
     b0a:	2108      	movs	r1, #8
     b0c:	438b      	bics	r3, r1
     b0e:	7013      	strb	r3, [r2, #0]
     b10:	e7de      	b.n	ad0 <wifi_cb+0x30>
     b12:	2204      	movs	r2, #4
     b14:	4393      	bics	r3, r2
     b16:	4a13      	ldr	r2, [pc, #76]	; (b64 <wifi_cb+0xc4>)
     b18:	7013      	strb	r3, [r2, #0]
     b1a:	e7dd      	b.n	ad8 <wifi_cb+0x38>
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
     b1c:	784b      	ldrb	r3, [r1, #1]
     b1e:	780a      	ldrb	r2, [r1, #0]
     b20:	78c8      	ldrb	r0, [r1, #3]
     b22:	9001      	str	r0, [sp, #4]
     b24:	7889      	ldrb	r1, [r1, #2]
     b26:	9100      	str	r1, [sp, #0]
     b28:	4918      	ldr	r1, [pc, #96]	; (b8c <wifi_cb+0xec>)
     b2a:	2001      	movs	r0, #1
     b2c:	4c0c      	ldr	r4, [pc, #48]	; (b60 <wifi_cb+0xc0>)
     b2e:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
     b30:	2002      	movs	r0, #2
     b32:	4b17      	ldr	r3, [pc, #92]	; (b90 <wifi_cb+0xf0>)
     b34:	4798      	blx	r3
            if (do_download_flag == 1) {
     b36:	4b17      	ldr	r3, [pc, #92]	; (b94 <wifi_cb+0xf4>)
     b38:	781b      	ldrb	r3, [r3, #0]
     b3a:	2b01      	cmp	r3, #1
     b3c:	d00a      	beq.n	b54 <wifi_cb+0xb4>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
     b3e:	4916      	ldr	r1, [pc, #88]	; (b98 <wifi_cb+0xf8>)
     b40:	4809      	ldr	r0, [pc, #36]	; (b68 <wifi_cb+0xc8>)
     b42:	4b16      	ldr	r3, [pc, #88]	; (b9c <wifi_cb+0xfc>)
     b44:	4798      	blx	r3
     b46:	2800      	cmp	r0, #0
     b48:	d0b0      	beq.n	aac <wifi_cb+0xc>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
     b4a:	4915      	ldr	r1, [pc, #84]	; (ba0 <wifi_cb+0x100>)
     b4c:	2001      	movs	r0, #1
     b4e:	4b04      	ldr	r3, [pc, #16]	; (b60 <wifi_cb+0xc0>)
     b50:	4798      	blx	r3
}
     b52:	e7ab      	b.n	aac <wifi_cb+0xc>
                start_download();
     b54:	4b13      	ldr	r3, [pc, #76]	; (ba4 <wifi_cb+0x104>)
     b56:	4798      	blx	r3
     b58:	e7a8      	b.n	aac <wifi_cb+0xc>
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	000191a8 	.word	0x000191a8
     b60:	00008b9d 	.word	0x00008b9d
     b64:	2000041b 	.word	0x2000041b
     b68:	20000678 	.word	0x20000678
     b6c:	00011f8d 	.word	0x00011f8d
     b70:	000191cc 	.word	0x000191cc
     b74:	000191dc 	.word	0x000191dc
     b78:	0000afa5 	.word	0x0000afa5
     b7c:	00019188 	.word	0x00019188
     b80:	0000afc1 	.word	0x0000afc1
     b84:	2000064c 	.word	0x2000064c
     b88:	000111ad 	.word	0x000111ad
     b8c:	000191f0 	.word	0x000191f0
     b90:	00000269 	.word	0x00000269
     b94:	2000041a 	.word	0x2000041a
     b98:	00018bfc 	.word	0x00018bfc
     b9c:	00011ec9 	.word	0x00011ec9
     ba0:	00019218 	.word	0x00019218
     ba4:	00000471 	.word	0x00000471

00000ba8 <init_storage>:
{
     ba8:	b570      	push	{r4, r5, r6, lr}
    sd_mmc_init();
     baa:	4b1c      	ldr	r3, [pc, #112]	; (c1c <init_storage+0x74>)
     bac:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
     bae:	491c      	ldr	r1, [pc, #112]	; (c20 <init_storage+0x78>)
     bb0:	2001      	movs	r0, #1
     bb2:	4b1c      	ldr	r3, [pc, #112]	; (c24 <init_storage+0x7c>)
     bb4:	4798      	blx	r3
            status = sd_mmc_test_unit_ready(0);
     bb6:	4e1c      	ldr	r6, [pc, #112]	; (c28 <init_storage+0x80>)
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
     bb8:	4c1a      	ldr	r4, [pc, #104]	; (c24 <init_storage+0x7c>)
     bba:	e009      	b.n	bd0 <init_storage+0x28>
     bbc:	491b      	ldr	r1, [pc, #108]	; (c2c <init_storage+0x84>)
     bbe:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
     bc0:	491b      	ldr	r1, [pc, #108]	; (c30 <init_storage+0x88>)
     bc2:	2001      	movs	r0, #1
     bc4:	47a0      	blx	r4
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
     bc6:	4d1b      	ldr	r5, [pc, #108]	; (c34 <init_storage+0x8c>)
     bc8:	2000      	movs	r0, #0
     bca:	47a8      	blx	r5
     bcc:	2802      	cmp	r0, #2
     bce:	d1fb      	bne.n	bc8 <init_storage+0x20>
            status = sd_mmc_test_unit_ready(0);
     bd0:	2000      	movs	r0, #0
     bd2:	47b0      	blx	r6
            if (CTRL_FAIL == status) {
     bd4:	2801      	cmp	r0, #1
     bd6:	d0f1      	beq.n	bbc <init_storage+0x14>
        } while (CTRL_GOOD != status);
     bd8:	2800      	cmp	r0, #0
     bda:	d1f9      	bne.n	bd0 <init_storage+0x28>
        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
     bdc:	4916      	ldr	r1, [pc, #88]	; (c38 <init_storage+0x90>)
     bde:	3001      	adds	r0, #1
     be0:	4b10      	ldr	r3, [pc, #64]	; (c24 <init_storage+0x7c>)
     be2:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
     be4:	4c15      	ldr	r4, [pc, #84]	; (c3c <init_storage+0x94>)
     be6:	228c      	movs	r2, #140	; 0x8c
     be8:	0092      	lsls	r2, r2, #2
     bea:	2100      	movs	r1, #0
     bec:	0020      	movs	r0, r4
     bee:	4b14      	ldr	r3, [pc, #80]	; (c40 <init_storage+0x98>)
     bf0:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
     bf2:	0021      	movs	r1, r4
     bf4:	2000      	movs	r0, #0
     bf6:	4b13      	ldr	r3, [pc, #76]	; (c44 <init_storage+0x9c>)
     bf8:	4798      	blx	r3
        if (FR_INVALID_DRIVE == res) {
     bfa:	280b      	cmp	r0, #11
     bfc:	d007      	beq.n	c0e <init_storage+0x66>
        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
     bfe:	4912      	ldr	r1, [pc, #72]	; (c48 <init_storage+0xa0>)
     c00:	2001      	movs	r0, #1
     c02:	4b08      	ldr	r3, [pc, #32]	; (c24 <init_storage+0x7c>)
     c04:	4798      	blx	r3
        add_state(STORAGE_READY);
     c06:	2001      	movs	r0, #1
     c08:	4b10      	ldr	r3, [pc, #64]	; (c4c <init_storage+0xa4>)
     c0a:	4798      	blx	r3
}
     c0c:	bd70      	pop	{r4, r5, r6, pc}
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
     c0e:	220b      	movs	r2, #11
     c10:	490f      	ldr	r1, [pc, #60]	; (c50 <init_storage+0xa8>)
     c12:	380a      	subs	r0, #10
     c14:	4b03      	ldr	r3, [pc, #12]	; (c24 <init_storage+0x7c>)
     c16:	4798      	blx	r3
            return;
     c18:	e7f8      	b.n	c0c <init_storage+0x64>
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	00008d19 	.word	0x00008d19
     c20:	00018af0 	.word	0x00018af0
     c24:	00008b9d 	.word	0x00008b9d
     c28:	0000944d 	.word	0x0000944d
     c2c:	00018b28 	.word	0x00018b28
     c30:	00018b50 	.word	0x00018b50
     c34:	00008d39 	.word	0x00008d39
     c38:	00018b84 	.word	0x00018b84
     c3c:	2000041c 	.word	0x2000041c
     c40:	00012b83 	.word	0x00012b83
     c44:	00010d31 	.word	0x00010d31
     c48:	00018bd8 	.word	0x00018bd8
     c4c:	00000269 	.word	0x00000269
     c50:	00018ba8 	.word	0x00018ba8

00000c54 <configure_extint_channel>:
{
     c54:	b510      	push	{r4, lr}
     c56:	b084      	sub	sp, #16
    extint_chan_get_config_defaults(&config_extint_chan);
     c58:	ac01      	add	r4, sp, #4
     c5a:	0020      	movs	r0, r4
     c5c:	4b07      	ldr	r3, [pc, #28]	; (c7c <configure_extint_channel+0x28>)
     c5e:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
     c60:	2337      	movs	r3, #55	; 0x37
     c62:	9301      	str	r3, [sp, #4]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
     c64:	2300      	movs	r3, #0
     c66:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     c68:	3301      	adds	r3, #1
     c6a:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     c6c:	3301      	adds	r3, #1
     c6e:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
     c70:	0021      	movs	r1, r4
     c72:	2007      	movs	r0, #7
     c74:	4b02      	ldr	r3, [pc, #8]	; (c80 <configure_extint_channel+0x2c>)
     c76:	4798      	blx	r3
}
     c78:	b004      	add	sp, #16
     c7a:	bd10      	pop	{r4, pc}
     c7c:	0000d2e9 	.word	0x0000d2e9
     c80:	0000d2fd 	.word	0x0000d2fd

00000c84 <configure_extint_callbacks>:
{
     c84:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
     c86:	2200      	movs	r2, #0
     c88:	2107      	movs	r1, #7
     c8a:	4804      	ldr	r0, [pc, #16]	; (c9c <configure_extint_callbacks+0x18>)
     c8c:	4b04      	ldr	r3, [pc, #16]	; (ca0 <configure_extint_callbacks+0x1c>)
     c8e:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
     c90:	2100      	movs	r1, #0
     c92:	2007      	movs	r0, #7
     c94:	4b03      	ldr	r3, [pc, #12]	; (ca4 <configure_extint_callbacks+0x20>)
     c96:	4798      	blx	r3
}
     c98:	bd10      	pop	{r4, pc}
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	00000419 	.word	0x00000419
     ca0:	0000d1a5 	.word	0x0000d1a5
     ca4:	0000d1d1 	.word	0x0000d1d1

00000ca8 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
     ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
     caa:	46d6      	mov	lr, sl
     cac:	464f      	mov	r7, r9
     cae:	4646      	mov	r6, r8
     cb0:	b5c0      	push	{r6, r7, lr}
     cb2:	b092      	sub	sp, #72	; 0x48
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
     cb4:	2064      	movs	r0, #100	; 0x64
     cb6:	4bc6      	ldr	r3, [pc, #792]	; (fd0 <vWifiTask+0x328>)
     cb8:	4798      	blx	r3
    down_state = NOT_READY;
     cba:	2200      	movs	r2, #0
     cbc:	4bc5      	ldr	r3, [pc, #788]	; (fd4 <vWifiTask+0x32c>)
     cbe:	701a      	strb	r2, [r3, #0]
    init_state();
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
     cc0:	2104      	movs	r1, #4
     cc2:	2005      	movs	r0, #5
     cc4:	4cc4      	ldr	r4, [pc, #784]	; (fd8 <vWifiTask+0x330>)
     cc6:	47a0      	blx	r4
     cc8:	4dc4      	ldr	r5, [pc, #784]	; (fdc <vWifiTask+0x334>)
     cca:	6028      	str	r0, [r5, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
     ccc:	2200      	movs	r2, #0
     cce:	2106      	movs	r1, #6
     cd0:	2005      	movs	r0, #5
     cd2:	47a0      	blx	r4
     cd4:	4bc2      	ldr	r3, [pc, #776]	; (fe0 <vWifiTask+0x338>)
     cd6:	6018      	str	r0, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
     cd8:	2200      	movs	r2, #0
     cda:	2114      	movs	r1, #20
     cdc:	2002      	movs	r0, #2
     cde:	47a0      	blx	r4
     ce0:	4bc0      	ldr	r3, [pc, #768]	; (fe4 <vWifiTask+0x33c>)
     ce2:	6018      	str	r0, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
     ce4:	2200      	movs	r2, #0
     ce6:	2102      	movs	r1, #2
     ce8:	2005      	movs	r0, #5
     cea:	47a0      	blx	r4
     cec:	4bbe      	ldr	r3, [pc, #760]	; (fe8 <vWifiTask+0x340>)
     cee:	6018      	str	r0, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
     cf0:	682b      	ldr	r3, [r5, #0]
     cf2:	2b00      	cmp	r3, #0
     cf4:	d043      	beq.n	d7e <vWifiTask+0xd6>
     cf6:	4bba      	ldr	r3, [pc, #744]	; (fe0 <vWifiTask+0x338>)
     cf8:	681b      	ldr	r3, [r3, #0]
     cfa:	2b00      	cmp	r3, #0
     cfc:	d03f      	beq.n	d7e <vWifiTask+0xd6>
     cfe:	4bb9      	ldr	r3, [pc, #740]	; (fe4 <vWifiTask+0x33c>)
     d00:	681b      	ldr	r3, [r3, #0]
     d02:	2b00      	cmp	r3, #0
     d04:	d03b      	beq.n	d7e <vWifiTask+0xd6>
     d06:	2800      	cmp	r0, #0
     d08:	d039      	beq.n	d7e <vWifiTask+0xd6>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
     d0a:	48b8      	ldr	r0, [pc, #736]	; (fec <vWifiTask+0x344>)
     d0c:	4bb8      	ldr	r3, [pc, #736]	; (ff0 <vWifiTask+0x348>)
     d0e:	4798      	blx	r3
    sw_timer_get_config_defaults(&swt_conf);
     d10:	a805      	add	r0, sp, #20
     d12:	4bb8      	ldr	r3, [pc, #736]	; (ff4 <vWifiTask+0x34c>)
     d14:	4798      	blx	r3
    sw_timer_init(&swt_module_inst, &swt_conf);
     d16:	4cb8      	ldr	r4, [pc, #736]	; (ff8 <vWifiTask+0x350>)
     d18:	a905      	add	r1, sp, #20
     d1a:	0020      	movs	r0, r4
     d1c:	4bb7      	ldr	r3, [pc, #732]	; (ffc <vWifiTask+0x354>)
     d1e:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
     d20:	0020      	movs	r0, r4
     d22:	4bb7      	ldr	r3, [pc, #732]	; (1000 <vWifiTask+0x358>)
     d24:	4798      	blx	r3
    http_client_get_config_defaults(&httpc_conf);
     d26:	a805      	add	r0, sp, #20
     d28:	4bb6      	ldr	r3, [pc, #728]	; (1004 <vWifiTask+0x35c>)
     d2a:	4798      	blx	r3
    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
     d2c:	23c8      	movs	r3, #200	; 0xc8
     d2e:	009b      	lsls	r3, r3, #2
     d30:	9309      	str	r3, [sp, #36]	; 0x24
    httpc_conf.timer_inst = &swt_module_inst;
     d32:	9406      	str	r4, [sp, #24]
    ret = http_client_init(&http_client_module_inst, &httpc_conf);
     d34:	a905      	add	r1, sp, #20
     d36:	48b4      	ldr	r0, [pc, #720]	; (1008 <vWifiTask+0x360>)
     d38:	4bb4      	ldr	r3, [pc, #720]	; (100c <vWifiTask+0x364>)
     d3a:	4798      	blx	r3
     d3c:	1e02      	subs	r2, r0, #0
    if (ret < 0) {
     d3e:	db22      	blt.n	d86 <vWifiTask+0xde>
    http_client_register_callback(&http_client_module_inst, http_client_callback);
     d40:	49b3      	ldr	r1, [pc, #716]	; (1010 <vWifiTask+0x368>)
     d42:	48b1      	ldr	r0, [pc, #708]	; (1008 <vWifiTask+0x360>)
     d44:	4bb3      	ldr	r3, [pc, #716]	; (1014 <vWifiTask+0x36c>)
     d46:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();

    /* Initialize the MQTT service. */
    configure_mqtt();
     d48:	4bb3      	ldr	r3, [pc, #716]	; (1018 <vWifiTask+0x370>)
     d4a:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
     d4c:	4bb3      	ldr	r3, [pc, #716]	; (101c <vWifiTask+0x374>)
     d4e:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
     d50:	4bb3      	ldr	r3, [pc, #716]	; (1020 <vWifiTask+0x378>)
     d52:	4798      	blx	r3
    configure_extint_callbacks();
     d54:	4bb3      	ldr	r3, [pc, #716]	; (1024 <vWifiTask+0x37c>)
     d56:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
     d58:	2218      	movs	r2, #24
     d5a:	2100      	movs	r1, #0
     d5c:	a80c      	add	r0, sp, #48	; 0x30
     d5e:	4bb2      	ldr	r3, [pc, #712]	; (1028 <vWifiTask+0x380>)
     d60:	4798      	blx	r3

    nm_bsp_init();
     d62:	4bb2      	ldr	r3, [pc, #712]	; (102c <vWifiTask+0x384>)
     d64:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
     d66:	4bb2      	ldr	r3, [pc, #712]	; (1030 <vWifiTask+0x388>)
     d68:	930c      	str	r3, [sp, #48]	; 0x30
    ret = m2m_wifi_init(&param);
     d6a:	a80c      	add	r0, sp, #48	; 0x30
     d6c:	4bb1      	ldr	r3, [pc, #708]	; (1034 <vWifiTask+0x38c>)
     d6e:	4798      	blx	r3
     d70:	1e02      	subs	r2, r0, #0
    if (M2M_SUCCESS != ret) {
     d72:	d00d      	beq.n	d90 <vWifiTask+0xe8>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
     d74:	49b0      	ldr	r1, [pc, #704]	; (1038 <vWifiTask+0x390>)
     d76:	2001      	movs	r0, #1
     d78:	4bb0      	ldr	r3, [pc, #704]	; (103c <vWifiTask+0x394>)
     d7a:	4798      	blx	r3
     d7c:	e7fe      	b.n	d7c <vWifiTask+0xd4>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
     d7e:	48b0      	ldr	r0, [pc, #704]	; (1040 <vWifiTask+0x398>)
     d80:	4b9b      	ldr	r3, [pc, #620]	; (ff0 <vWifiTask+0x348>)
     d82:	4798      	blx	r3
     d84:	e7c1      	b.n	d0a <vWifiTask+0x62>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
     d86:	49af      	ldr	r1, [pc, #700]	; (1044 <vWifiTask+0x39c>)
     d88:	2001      	movs	r0, #1
     d8a:	4bac      	ldr	r3, [pc, #688]	; (103c <vWifiTask+0x394>)
     d8c:	4798      	blx	r3
     d8e:	e7fe      	b.n	d8e <vWifiTask+0xe6>
        while (1) {
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
     d90:	4cad      	ldr	r4, [pc, #692]	; (1048 <vWifiTask+0x3a0>)
     d92:	0022      	movs	r2, r4
     d94:	49ad      	ldr	r1, [pc, #692]	; (104c <vWifiTask+0x3a4>)
     d96:	2001      	movs	r0, #1
     d98:	4ba8      	ldr	r3, [pc, #672]	; (103c <vWifiTask+0x394>)
     d9a:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
     d9c:	4bac      	ldr	r3, [pc, #688]	; (1050 <vWifiTask+0x3a8>)
     d9e:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
     da0:	49ac      	ldr	r1, [pc, #688]	; (1054 <vWifiTask+0x3ac>)
     da2:	48ad      	ldr	r0, [pc, #692]	; (1058 <vWifiTask+0x3b0>)
     da4:	4bad      	ldr	r3, [pc, #692]	; (105c <vWifiTask+0x3b4>)
     da6:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
     da8:	23ff      	movs	r3, #255	; 0xff
     daa:	9300      	str	r3, [sp, #0]
     dac:	4bac      	ldr	r3, [pc, #688]	; (1060 <vWifiTask+0x3b8>)
     dae:	2202      	movs	r2, #2
     db0:	2111      	movs	r1, #17
     db2:	0020      	movs	r0, r4
     db4:	4cab      	ldr	r4, [pc, #684]	; (1064 <vWifiTask+0x3bc>)
     db6:	47a0      	blx	r4
    return ((down_state & mask) != 0);
     db8:	4b86      	ldr	r3, [pc, #536]	; (fd4 <vWifiTask+0x32c>)
     dba:	781b      	ldrb	r3, [r3, #0]

    while (!(is_state_set(WIFI_CONNECTED))) {
     dbc:	079b      	lsls	r3, r3, #30
     dbe:	d40a      	bmi.n	dd6 <vWifiTask+0x12e>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
     dc0:	4ea9      	ldr	r6, [pc, #676]	; (1068 <vWifiTask+0x3c0>)
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
     dc2:	4d8d      	ldr	r5, [pc, #564]	; (ff8 <vWifiTask+0x350>)
     dc4:	4ca9      	ldr	r4, [pc, #676]	; (106c <vWifiTask+0x3c4>)
        m2m_wifi_handle_events(NULL);
     dc6:	2000      	movs	r0, #0
     dc8:	47b0      	blx	r6
        sw_timer_task(&swt_module_inst);
     dca:	0028      	movs	r0, r5
     dcc:	47a0      	blx	r4
    return ((down_state & mask) != 0);
     dce:	4b81      	ldr	r3, [pc, #516]	; (fd4 <vWifiTask+0x32c>)
     dd0:	781b      	ldrb	r3, [r3, #0]
    while (!(is_state_set(WIFI_CONNECTED))) {
     dd2:	079b      	lsls	r3, r3, #30
     dd4:	d5f7      	bpl.n	dc6 <vWifiTask+0x11e>
    }

    vTaskDelay(1000);
     dd6:	20fa      	movs	r0, #250	; 0xfa
     dd8:	0080      	lsls	r0, r0, #2
     dda:	4b7d      	ldr	r3, [pc, #500]	; (fd0 <vWifiTask+0x328>)
     ddc:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
     dde:	2201      	movs	r2, #1
     de0:	4ba3      	ldr	r3, [pc, #652]	; (1070 <vWifiTask+0x3c8>)
     de2:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
     de4:	4698      	mov	r8, r3
    m2m_wifi_handle_events(NULL);
     de6:	4ba0      	ldr	r3, [pc, #640]	; (1068 <vWifiTask+0x3c0>)
     de8:	4699      	mov	r9, r3
        m2m_wifi_handle_events(NULL);
     dea:	001d      	movs	r5, r3
     dec:	e02b      	b.n	e46 <vWifiTask+0x19e>
        switch (wifiStateMachine) {
     dee:	2b00      	cmp	r3, #0
     df0:	d000      	beq.n	df4 <vWifiTask+0x14c>
     df2:	e1a6      	b.n	1142 <vWifiTask+0x49a>
    socketDeinit();
     df4:	4b9f      	ldr	r3, [pc, #636]	; (1074 <vWifiTask+0x3cc>)
     df6:	4798      	blx	r3
    configure_mqtt();
     df8:	4b87      	ldr	r3, [pc, #540]	; (1018 <vWifiTask+0x370>)
     dfa:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
     dfc:	4995      	ldr	r1, [pc, #596]	; (1054 <vWifiTask+0x3ac>)
     dfe:	4896      	ldr	r0, [pc, #600]	; (1058 <vWifiTask+0x3b0>)
     e00:	4b96      	ldr	r3, [pc, #600]	; (105c <vWifiTask+0x3b4>)
     e02:	4798      	blx	r3
    socketInit();
     e04:	4b92      	ldr	r3, [pc, #584]	; (1050 <vWifiTask+0x3a8>)
     e06:	4798      	blx	r3
    if (!(mqtt_inst.isConnected)) {
     e08:	2334      	movs	r3, #52	; 0x34
     e0a:	4a9b      	ldr	r2, [pc, #620]	; (1078 <vWifiTask+0x3d0>)
     e0c:	5cd3      	ldrb	r3, [r2, r3]
     e0e:	2b00      	cmp	r3, #0
     e10:	d028      	beq.n	e64 <vWifiTask+0x1bc>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
     e12:	499a      	ldr	r1, [pc, #616]	; (107c <vWifiTask+0x3d4>)
     e14:	2001      	movs	r0, #1
     e16:	4b89      	ldr	r3, [pc, #548]	; (103c <vWifiTask+0x394>)
     e18:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_HANDLE;
     e1a:	2201      	movs	r2, #1
     e1c:	4b94      	ldr	r3, [pc, #592]	; (1070 <vWifiTask+0x3c8>)
     e1e:	701a      	strb	r2, [r3, #0]
            default:
                wifiStateMachine = WIFI_MQTT_INIT;
                break;
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
     e20:	a905      	add	r1, sp, #20
     e22:	2300      	movs	r3, #0
     e24:	700b      	strb	r3, [r1, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
     e26:	4b6d      	ldr	r3, [pc, #436]	; (fdc <vWifiTask+0x334>)
     e28:	6818      	ldr	r0, [r3, #0]
     e2a:	2200      	movs	r2, #0
     e2c:	4b94      	ldr	r3, [pc, #592]	; (1080 <vWifiTask+0x3d8>)
     e2e:	4798      	blx	r3
     e30:	2801      	cmp	r0, #1
     e32:	d100      	bne.n	e36 <vWifiTask+0x18e>
     e34:	e189      	b.n	114a <vWifiTask+0x4a2>
            wifiStateMachine = DataToReceive;  // Update new state
        }

        // Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if (isPressed) {
     e36:	4b93      	ldr	r3, [pc, #588]	; (1084 <vWifiTask+0x3dc>)
     e38:	781b      	ldrb	r3, [r3, #0]
     e3a:	2b00      	cmp	r3, #0
     e3c:	d000      	beq.n	e40 <vWifiTask+0x198>
     e3e:	e189      	b.n	1154 <vWifiTask+0x4ac>
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
            isPressed = false;
        }

        vTaskDelay(100);
     e40:	2064      	movs	r0, #100	; 0x64
     e42:	4b63      	ldr	r3, [pc, #396]	; (fd0 <vWifiTask+0x328>)
     e44:	4798      	blx	r3
        switch (wifiStateMachine) {
     e46:	4643      	mov	r3, r8
     e48:	781b      	ldrb	r3, [r3, #0]
     e4a:	2b01      	cmp	r3, #1
     e4c:	d01b      	beq.n	e86 <vWifiTask+0x1de>
     e4e:	b25a      	sxtb	r2, r3
     e50:	2a01      	cmp	r2, #1
     e52:	ddcc      	ble.n	dee <vWifiTask+0x146>
     e54:	2b02      	cmp	r3, #2
     e56:	d100      	bne.n	e5a <vWifiTask+0x1b2>
     e58:	e091      	b.n	f7e <vWifiTask+0x2d6>
     e5a:	2b03      	cmp	r3, #3
     e5c:	d000      	beq.n	e60 <vWifiTask+0x1b8>
     e5e:	e170      	b.n	1142 <vWifiTask+0x49a>
    return ((down_state & mask) != 0);
     e60:	4e5c      	ldr	r6, [pc, #368]	; (fd4 <vWifiTask+0x32c>)
     e62:	e145      	b.n	10f0 <vWifiTask+0x448>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
     e64:	4988      	ldr	r1, [pc, #544]	; (1088 <vWifiTask+0x3e0>)
     e66:	0010      	movs	r0, r2
     e68:	4b88      	ldr	r3, [pc, #544]	; (108c <vWifiTask+0x3e4>)
     e6a:	4798      	blx	r3
     e6c:	2800      	cmp	r0, #0
     e6e:	d105      	bne.n	e7c <vWifiTask+0x1d4>
    if (mqtt_inst.isConnected) {
     e70:	2334      	movs	r3, #52	; 0x34
     e72:	4a81      	ldr	r2, [pc, #516]	; (1078 <vWifiTask+0x3d0>)
     e74:	5cd3      	ldrb	r3, [r2, r3]
     e76:	2b00      	cmp	r3, #0
     e78:	d0cf      	beq.n	e1a <vWifiTask+0x172>
     e7a:	e7ca      	b.n	e12 <vWifiTask+0x16a>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
     e7c:	4984      	ldr	r1, [pc, #528]	; (1090 <vWifiTask+0x3e8>)
     e7e:	2001      	movs	r0, #1
     e80:	4b6e      	ldr	r3, [pc, #440]	; (103c <vWifiTask+0x394>)
     e82:	4798      	blx	r3
     e84:	e7f4      	b.n	e70 <vWifiTask+0x1c8>
    m2m_wifi_handle_events(NULL);
     e86:	2000      	movs	r0, #0
     e88:	47c8      	blx	r9
    sw_timer_task(&swt_module_inst);
     e8a:	485b      	ldr	r0, [pc, #364]	; (ff8 <vWifiTask+0x350>)
     e8c:	4b77      	ldr	r3, [pc, #476]	; (106c <vWifiTask+0x3c4>)
     e8e:	4798      	blx	r3
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
     e90:	4b54      	ldr	r3, [pc, #336]	; (fe4 <vWifiTask+0x33c>)
     e92:	6818      	ldr	r0, [r3, #0]
     e94:	2200      	movs	r2, #0
     e96:	a905      	add	r1, sp, #20
     e98:	4b79      	ldr	r3, [pc, #484]	; (1080 <vWifiTask+0x3d8>)
     e9a:	4798      	blx	r3
     e9c:	2801      	cmp	r0, #1
     e9e:	d011      	beq.n	ec4 <vWifiTask+0x21c>
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
     ea0:	4b4f      	ldr	r3, [pc, #316]	; (fe0 <vWifiTask+0x338>)
     ea2:	6818      	ldr	r0, [r3, #0]
     ea4:	2200      	movs	r2, #0
     ea6:	a905      	add	r1, sp, #20
     ea8:	4b75      	ldr	r3, [pc, #468]	; (1080 <vWifiTask+0x3d8>)
     eaa:	4798      	blx	r3
     eac:	2801      	cmp	r0, #1
     eae:	d049      	beq.n	f44 <vWifiTask+0x29c>
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
     eb0:	2334      	movs	r3, #52	; 0x34
     eb2:	4a71      	ldr	r2, [pc, #452]	; (1078 <vWifiTask+0x3d0>)
     eb4:	5cd3      	ldrb	r3, [r2, r3]
     eb6:	2b00      	cmp	r3, #0
     eb8:	d0b2      	beq.n	e20 <vWifiTask+0x178>
     eba:	2164      	movs	r1, #100	; 0x64
     ebc:	0010      	movs	r0, r2
     ebe:	4b75      	ldr	r3, [pc, #468]	; (1094 <vWifiTask+0x3ec>)
     ec0:	4798      	blx	r3
     ec2:	e7ad      	b.n	e20 <vWifiTask+0x178>
        snprintf(mqtt_msg, 63, "{\"game\":[");
     ec4:	4a74      	ldr	r2, [pc, #464]	; (1098 <vWifiTask+0x3f0>)
     ec6:	4b75      	ldr	r3, [pc, #468]	; (109c <vWifiTask+0x3f4>)
     ec8:	cb03      	ldmia	r3!, {r0, r1}
     eca:	c203      	stmia	r2!, {r0, r1}
     ecc:	881b      	ldrh	r3, [r3, #0]
     ece:	8013      	strh	r3, [r2, #0]
            if (gamePacket.game[iter] != 0xFF) {
     ed0:	ab05      	add	r3, sp, #20
     ed2:	781f      	ldrb	r7, [r3, #0]
     ed4:	2fff      	cmp	r7, #255	; 0xff
     ed6:	d018      	beq.n	f0a <vWifiTask+0x262>
     ed8:	2600      	movs	r6, #0
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
     eda:	4c71      	ldr	r4, [pc, #452]	; (10a0 <vWifiTask+0x3f8>)
     edc:	e005      	b.n	eea <vWifiTask+0x242>
                    snprintf(numGame, 5, ",");
     ede:	a903      	add	r1, sp, #12
     ee0:	232c      	movs	r3, #44	; 0x2c
     ee2:	800b      	strh	r3, [r1, #0]
                    strcat(mqtt_msg, numGame);
     ee4:	486c      	ldr	r0, [pc, #432]	; (1098 <vWifiTask+0x3f0>)
     ee6:	4b6f      	ldr	r3, [pc, #444]	; (10a4 <vWifiTask+0x3fc>)
     ee8:	4798      	blx	r3
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
     eea:	003b      	movs	r3, r7
     eec:	4a6e      	ldr	r2, [pc, #440]	; (10a8 <vWifiTask+0x400>)
     eee:	2103      	movs	r1, #3
     ef0:	a803      	add	r0, sp, #12
     ef2:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
     ef4:	a903      	add	r1, sp, #12
     ef6:	4868      	ldr	r0, [pc, #416]	; (1098 <vWifiTask+0x3f0>)
     ef8:	4b6a      	ldr	r3, [pc, #424]	; (10a4 <vWifiTask+0x3fc>)
     efa:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
     efc:	3601      	adds	r6, #1
     efe:	ab05      	add	r3, sp, #20
     f00:	5cf7      	ldrb	r7, [r6, r3]
     f02:	2fff      	cmp	r7, #255	; 0xff
     f04:	d001      	beq.n	f0a <vWifiTask+0x262>
     f06:	2e14      	cmp	r6, #20
     f08:	d1e9      	bne.n	ede <vWifiTask+0x236>
        strcat(mqtt_msg, "]}");
     f0a:	4e63      	ldr	r6, [pc, #396]	; (1098 <vWifiTask+0x3f0>)
     f0c:	0030      	movs	r0, r6
     f0e:	4f67      	ldr	r7, [pc, #412]	; (10ac <vWifiTask+0x404>)
     f10:	47b8      	blx	r7
     f12:	1830      	adds	r0, r6, r0
     f14:	2203      	movs	r2, #3
     f16:	4966      	ldr	r1, [pc, #408]	; (10b0 <vWifiTask+0x408>)
     f18:	4b66      	ldr	r3, [pc, #408]	; (10b4 <vWifiTask+0x40c>)
     f1a:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
     f1c:	0031      	movs	r1, r6
     f1e:	2001      	movs	r0, #1
     f20:	4c46      	ldr	r4, [pc, #280]	; (103c <vWifiTask+0x394>)
     f22:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "\r\n");
     f24:	4964      	ldr	r1, [pc, #400]	; (10b8 <vWifiTask+0x410>)
     f26:	2001      	movs	r0, #1
     f28:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
     f2a:	0030      	movs	r0, r6
     f2c:	47b8      	blx	r7
     f2e:	0003      	movs	r3, r0
     f30:	2200      	movs	r2, #0
     f32:	9201      	str	r2, [sp, #4]
     f34:	3201      	adds	r2, #1
     f36:	9200      	str	r2, [sp, #0]
     f38:	0032      	movs	r2, r6
     f3a:	4960      	ldr	r1, [pc, #384]	; (10bc <vWifiTask+0x414>)
     f3c:	484e      	ldr	r0, [pc, #312]	; (1078 <vWifiTask+0x3d0>)
     f3e:	4e60      	ldr	r6, [pc, #384]	; (10c0 <vWifiTask+0x418>)
     f40:	47b0      	blx	r6
     f42:	e7ad      	b.n	ea0 <vWifiTask+0x1f8>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
     f44:	aa05      	add	r2, sp, #20
     f46:	2100      	movs	r1, #0
     f48:	5e53      	ldrsh	r3, [r2, r1]
     f4a:	4e53      	ldr	r6, [pc, #332]	; (1098 <vWifiTask+0x3f0>)
     f4c:	2004      	movs	r0, #4
     f4e:	5e11      	ldrsh	r1, [r2, r0]
     f50:	9101      	str	r1, [sp, #4]
     f52:	2102      	movs	r1, #2
     f54:	5e52      	ldrsh	r2, [r2, r1]
     f56:	9200      	str	r2, [sp, #0]
     f58:	4a5a      	ldr	r2, [pc, #360]	; (10c4 <vWifiTask+0x41c>)
     f5a:	213f      	movs	r1, #63	; 0x3f
     f5c:	0030      	movs	r0, r6
     f5e:	4f50      	ldr	r7, [pc, #320]	; (10a0 <vWifiTask+0x3f8>)
     f60:	47b8      	blx	r7
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
     f62:	0030      	movs	r0, r6
     f64:	4b51      	ldr	r3, [pc, #324]	; (10ac <vWifiTask+0x404>)
     f66:	4798      	blx	r3
     f68:	0003      	movs	r3, r0
     f6a:	2200      	movs	r2, #0
     f6c:	9201      	str	r2, [sp, #4]
     f6e:	3201      	adds	r2, #1
     f70:	9200      	str	r2, [sp, #0]
     f72:	0032      	movs	r2, r6
     f74:	4954      	ldr	r1, [pc, #336]	; (10c8 <vWifiTask+0x420>)
     f76:	4840      	ldr	r0, [pc, #256]	; (1078 <vWifiTask+0x3d0>)
     f78:	4e51      	ldr	r6, [pc, #324]	; (10c0 <vWifiTask+0x418>)
     f7a:	47b0      	blx	r6
     f7c:	e798      	b.n	eb0 <vWifiTask+0x208>
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
     f7e:	4942      	ldr	r1, [pc, #264]	; (1088 <vWifiTask+0x3e0>)
     f80:	483d      	ldr	r0, [pc, #244]	; (1078 <vWifiTask+0x3d0>)
     f82:	4b52      	ldr	r3, [pc, #328]	; (10cc <vWifiTask+0x424>)
     f84:	4798      	blx	r3
     f86:	2800      	cmp	r0, #0
     f88:	d11d      	bne.n	fc6 <vWifiTask+0x31e>
    while ((mqtt_inst.isConnected)) {
     f8a:	2334      	movs	r3, #52	; 0x34
     f8c:	4a3a      	ldr	r2, [pc, #232]	; (1078 <vWifiTask+0x3d0>)
     f8e:	5cd3      	ldrb	r3, [r2, r3]
     f90:	2b00      	cmp	r3, #0
     f92:	d007      	beq.n	fa4 <vWifiTask+0x2fc>
        m2m_wifi_handle_events(NULL);
     f94:	4c34      	ldr	r4, [pc, #208]	; (1068 <vWifiTask+0x3c0>)
    while ((mqtt_inst.isConnected)) {
     f96:	0017      	movs	r7, r2
     f98:	2634      	movs	r6, #52	; 0x34
        m2m_wifi_handle_events(NULL);
     f9a:	2000      	movs	r0, #0
     f9c:	47a0      	blx	r4
    while ((mqtt_inst.isConnected)) {
     f9e:	5dbb      	ldrb	r3, [r7, r6]
     fa0:	2b00      	cmp	r3, #0
     fa2:	d1fa      	bne.n	f9a <vWifiTask+0x2f2>
    socketDeinit();
     fa4:	4b33      	ldr	r3, [pc, #204]	; (1074 <vWifiTask+0x3cc>)
     fa6:	4798      	blx	r3
    do_download_flag = true;
     fa8:	2201      	movs	r2, #1
     faa:	4b49      	ldr	r3, [pc, #292]	; (10d0 <vWifiTask+0x428>)
     fac:	701a      	strb	r2, [r3, #0]
    registerSocketCallback(socket_cb, resolve_cb);
     fae:	4949      	ldr	r1, [pc, #292]	; (10d4 <vWifiTask+0x42c>)
     fb0:	4849      	ldr	r0, [pc, #292]	; (10d8 <vWifiTask+0x430>)
     fb2:	4b2a      	ldr	r3, [pc, #168]	; (105c <vWifiTask+0x3b4>)
     fb4:	4798      	blx	r3
    socketInit();
     fb6:	4b26      	ldr	r3, [pc, #152]	; (1050 <vWifiTask+0x3a8>)
     fb8:	4798      	blx	r3
    start_download();
     fba:	4b48      	ldr	r3, [pc, #288]	; (10dc <vWifiTask+0x434>)
     fbc:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
     fbe:	2203      	movs	r2, #3
     fc0:	4b2b      	ldr	r3, [pc, #172]	; (1070 <vWifiTask+0x3c8>)
     fc2:	701a      	strb	r2, [r3, #0]
     fc4:	e72c      	b.n	e20 <vWifiTask+0x178>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
     fc6:	4932      	ldr	r1, [pc, #200]	; (1090 <vWifiTask+0x3e8>)
     fc8:	2001      	movs	r0, #1
     fca:	4b1c      	ldr	r3, [pc, #112]	; (103c <vWifiTask+0x394>)
     fcc:	4798      	blx	r3
     fce:	e7dc      	b.n	f8a <vWifiTask+0x2e2>
     fd0:	00007cc9 	.word	0x00007cc9
     fd4:	2000041b 	.word	0x2000041b
     fd8:	00006709 	.word	0x00006709
     fdc:	20000ac4 	.word	0x20000ac4
     fe0:	20000ac0 	.word	0x20000ac0
     fe4:	20000abc 	.word	0x20000abc
     fe8:	20000ab8 	.word	0x20000ab8
     fec:	0001901c 	.word	0x0001901c
     ff0:	00008aed 	.word	0x00008aed
     ff4:	00004781 	.word	0x00004781
     ff8:	20004578 	.word	0x20004578
     ffc:	0000478d 	.word	0x0000478d
    1000:	00004839 	.word	0x00004839
    1004:	00003799 	.word	0x00003799
    1008:	200045d0 	.word	0x200045d0
    100c:	000037c1 	.word	0x000037c1
    1010:	000009a9 	.word	0x000009a9
    1014:	00003875 	.word	0x00003875
    1018:	000004f5 	.word	0x000004f5
    101c:	00000ba9 	.word	0x00000ba9
    1020:	00000c55 	.word	0x00000c55
    1024:	00000c85 	.word	0x00000c85
    1028:	00012b83 	.word	0x00012b83
    102c:	00009d15 	.word	0x00009d15
    1030:	00000aa1 	.word	0x00000aa1
    1034:	0000ac01 	.word	0x0000ac01
    1038:	00019080 	.word	0x00019080
    103c:	00008b9d 	.word	0x00008b9d
    1040:	00018ff4 	.word	0x00018ff4
    1044:	00019038 	.word	0x00019038
    1048:	000191dc 	.word	0x000191dc
    104c:	000190ac 	.word	0x000190ac
    1050:	0000ca71 	.word	0x0000ca71
    1054:	00000459 	.word	0x00000459
    1058:	00000465 	.word	0x00000465
    105c:	0000caf1 	.word	0x0000caf1
    1060:	000191cc 	.word	0x000191cc
    1064:	0000afa5 	.word	0x0000afa5
    1068:	0000ad2d 	.word	0x0000ad2d
    106c:	000048c1 	.word	0x000048c1
    1070:	20000ab4 	.word	0x20000ab4
    1074:	0000cab5 	.word	0x0000cab5
    1078:	20000678 	.word	0x20000678
    107c:	000190d0 	.word	0x000190d0
    1080:	00006ee1 	.word	0x00006ee1
    1084:	20000674 	.word	0x20000674
    1088:	00018bfc 	.word	0x00018bfc
    108c:	00011ec9 	.word	0x00011ec9
    1090:	00019218 	.word	0x00019218
    1094:	0001201d 	.word	0x0001201d
    1098:	20000068 	.word	0x20000068
    109c:	000188f0 	.word	0x000188f0
    10a0:	000136bd 	.word	0x000136bd
    10a4:	000137a1 	.word	0x000137a1
    10a8:	000190ec 	.word	0x000190ec
    10ac:	0001381b 	.word	0x0001381b
    10b0:	000190f0 	.word	0x000190f0
    10b4:	00012b4d 	.word	0x00012b4d
    10b8:	0001bc7c 	.word	0x0001bc7c
    10bc:	000190f4 	.word	0x000190f4
    10c0:	00011fbd 	.word	0x00011fbd
    10c4:	00019108 	.word	0x00019108
    10c8:	00018ce0 	.word	0x00018ce0
    10cc:	00011f8d 	.word	0x00011f8d
    10d0:	2000041a 	.word	0x2000041a
    10d4:	00000675 	.word	0x00000675
    10d8:	000006b5 	.word	0x000006b5
    10dc:	00000471 	.word	0x00000471
        m2m_wifi_handle_events(NULL);
    10e0:	2000      	movs	r0, #0
    10e2:	47a8      	blx	r5
        sw_timer_task(&swt_module_inst);
    10e4:	4826      	ldr	r0, [pc, #152]	; (1180 <vWifiTask+0x4d8>)
    10e6:	4b27      	ldr	r3, [pc, #156]	; (1184 <vWifiTask+0x4dc>)
    10e8:	4798      	blx	r3
        vTaskDelay(5);
    10ea:	2005      	movs	r0, #5
    10ec:	4b26      	ldr	r3, [pc, #152]	; (1188 <vWifiTask+0x4e0>)
    10ee:	4798      	blx	r3
    return ((down_state & mask) != 0);
    10f0:	7833      	ldrb	r3, [r6, #0]
    while (!(is_state_set(COMPLETED)) || is_state_set(CANCELED)) {
    10f2:	06da      	lsls	r2, r3, #27
    10f4:	d5f4      	bpl.n	10e0 <vWifiTask+0x438>
    10f6:	069b      	lsls	r3, r3, #26
    10f8:	d4f2      	bmi.n	10e0 <vWifiTask+0x438>
    socketDeinit();
    10fa:	4b24      	ldr	r3, [pc, #144]	; (118c <vWifiTask+0x4e4>)
    10fc:	4798      	blx	r3
    vTaskDelay(1000);
    10fe:	20fa      	movs	r0, #250	; 0xfa
    1100:	0080      	lsls	r0, r0, #2
    1102:	4b21      	ldr	r3, [pc, #132]	; (1188 <vWifiTask+0x4e0>)
    1104:	4798      	blx	r3
    do_download_flag = false;
    1106:	2200      	movs	r2, #0
    1108:	4b21      	ldr	r3, [pc, #132]	; (1190 <vWifiTask+0x4e8>)
    110a:	701a      	strb	r2, [r3, #0]
    char test_file_name[] = "0:FlagA.txt";
    110c:	a905      	add	r1, sp, #20
    110e:	4b21      	ldr	r3, [pc, #132]	; (1194 <vWifiTask+0x4ec>)
    1110:	000a      	movs	r2, r1
    1112:	cb51      	ldmia	r3!, {r0, r4, r6}
    1114:	c251      	stmia	r2!, {r0, r4, r6}
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    1116:	220a      	movs	r2, #10
    1118:	481f      	ldr	r0, [pc, #124]	; (1198 <vWifiTask+0x4f0>)
    111a:	4b20      	ldr	r3, [pc, #128]	; (119c <vWifiTask+0x4f4>)
    111c:	4798      	blx	r3
    if (res != FR_OK) {
    111e:	2800      	cmp	r0, #0
    1120:	d109      	bne.n	1136 <vWifiTask+0x48e>
        SerialConsoleWriteString("FlagA.txt added!\r\n");
    1122:	481f      	ldr	r0, [pc, #124]	; (11a0 <vWifiTask+0x4f8>)
    1124:	4b1f      	ldr	r3, [pc, #124]	; (11a4 <vWifiTask+0x4fc>)
    1126:	4798      	blx	r3
    f_close(&file_object);
    1128:	481b      	ldr	r0, [pc, #108]	; (1198 <vWifiTask+0x4f0>)
    112a:	4b1f      	ldr	r3, [pc, #124]	; (11a8 <vWifiTask+0x500>)
    112c:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
    112e:	2200      	movs	r2, #0
    1130:	4b1e      	ldr	r3, [pc, #120]	; (11ac <vWifiTask+0x504>)
    1132:	701a      	strb	r2, [r3, #0]
    1134:	e674      	b.n	e20 <vWifiTask+0x178>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    1136:	0002      	movs	r2, r0
    1138:	491d      	ldr	r1, [pc, #116]	; (11b0 <vWifiTask+0x508>)
    113a:	2000      	movs	r0, #0
    113c:	4b1d      	ldr	r3, [pc, #116]	; (11b4 <vWifiTask+0x50c>)
    113e:	4798      	blx	r3
    1140:	e7f2      	b.n	1128 <vWifiTask+0x480>
                wifiStateMachine = WIFI_MQTT_INIT;
    1142:	2200      	movs	r2, #0
    1144:	4b19      	ldr	r3, [pc, #100]	; (11ac <vWifiTask+0x504>)
    1146:	701a      	strb	r2, [r3, #0]
                break;
    1148:	e66a      	b.n	e20 <vWifiTask+0x178>
            wifiStateMachine = DataToReceive;  // Update new state
    114a:	ab05      	add	r3, sp, #20
    114c:	781a      	ldrb	r2, [r3, #0]
    114e:	4b17      	ldr	r3, [pc, #92]	; (11ac <vWifiTask+0x504>)
    1150:	701a      	strb	r2, [r3, #0]
    1152:	e670      	b.n	e36 <vWifiTask+0x18e>
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
    1154:	4e18      	ldr	r6, [pc, #96]	; (11b8 <vWifiTask+0x510>)
    1156:	0030      	movs	r0, r6
    1158:	4b18      	ldr	r3, [pc, #96]	; (11bc <vWifiTask+0x514>)
    115a:	4798      	blx	r3
    115c:	0003      	movs	r3, r0
    115e:	2700      	movs	r7, #0
    1160:	9701      	str	r7, [sp, #4]
    1162:	2201      	movs	r2, #1
    1164:	9200      	str	r2, [sp, #0]
    1166:	0032      	movs	r2, r6
    1168:	4915      	ldr	r1, [pc, #84]	; (11c0 <vWifiTask+0x518>)
    116a:	4816      	ldr	r0, [pc, #88]	; (11c4 <vWifiTask+0x51c>)
    116c:	4c16      	ldr	r4, [pc, #88]	; (11c8 <vWifiTask+0x520>)
    116e:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
    1170:	0032      	movs	r2, r6
    1172:	4916      	ldr	r1, [pc, #88]	; (11cc <vWifiTask+0x524>)
    1174:	2001      	movs	r0, #1
    1176:	4b0f      	ldr	r3, [pc, #60]	; (11b4 <vWifiTask+0x50c>)
    1178:	4798      	blx	r3
            isPressed = false;
    117a:	4b15      	ldr	r3, [pc, #84]	; (11d0 <vWifiTask+0x528>)
    117c:	701f      	strb	r7, [r3, #0]
    117e:	e65f      	b.n	e40 <vWifiTask+0x198>
    1180:	20004578 	.word	0x20004578
    1184:	000048c1 	.word	0x000048c1
    1188:	00007cc9 	.word	0x00007cc9
    118c:	0000cab5 	.word	0x0000cab5
    1190:	2000041a 	.word	0x2000041a
    1194:	0001917c 	.word	0x0001917c
    1198:	2000064c 	.word	0x2000064c
    119c:	00010d61 	.word	0x00010d61
    11a0:	0001913c 	.word	0x0001913c
    11a4:	00008aed 	.word	0x00008aed
    11a8:	000111ad 	.word	0x000111ad
    11ac:	20000ab4 	.word	0x20000ab4
    11b0:	0001912c 	.word	0x0001912c
    11b4:	00008b9d 	.word	0x00008b9d
    11b8:	200000a8 	.word	0x200000a8
    11bc:	0001381b 	.word	0x0001381b
    11c0:	00019150 	.word	0x00019150
    11c4:	20000678 	.word	0x20000678
    11c8:	00011fbd 	.word	0x00011fbd
    11cc:	0001916c 	.word	0x0001916c
    11d0:	20000674 	.word	0x20000674

000011d4 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
    11d4:	b510      	push	{r4, lr}
    11d6:	b082      	sub	sp, #8
    11d8:	466b      	mov	r3, sp
    11da:	71d8      	strb	r0, [r3, #7]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
    11dc:	2803      	cmp	r0, #3
    11de:	d901      	bls.n	11e4 <WifiHandlerSetState+0x10>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
    }
}
    11e0:	b002      	add	sp, #8
    11e2:	bd10      	pop	{r4, pc}
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
    11e4:	4b04      	ldr	r3, [pc, #16]	; (11f8 <WifiHandlerSetState+0x24>)
    11e6:	6818      	ldr	r0, [r3, #0]
    11e8:	2300      	movs	r3, #0
    11ea:	220a      	movs	r2, #10
    11ec:	4669      	mov	r1, sp
    11ee:	3107      	adds	r1, #7
    11f0:	4c02      	ldr	r4, [pc, #8]	; (11fc <WifiHandlerSetState+0x28>)
    11f2:	47a0      	blx	r4
}
    11f4:	e7f4      	b.n	11e0 <WifiHandlerSetState+0xc>
    11f6:	46c0      	nop			; (mov r8, r8)
    11f8:	20000ac4 	.word	0x20000ac4
    11fc:	00006845 	.word	0x00006845

00001200 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1200:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1202:	2207      	movs	r2, #7
    1204:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    1206:	421a      	tst	r2, r3
    1208:	d1fc      	bne.n	1204 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    120a:	4770      	bx	lr

0000120c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    120c:	b570      	push	{r4, r5, r6, lr}
    120e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1210:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1212:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    1214:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    1216:	8b83      	ldrh	r3, [r0, #28]
    1218:	1aed      	subs	r5, r5, r3
    121a:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    121c:	8b83      	ldrh	r3, [r0, #28]
    121e:	3b01      	subs	r3, #1
    1220:	b29b      	uxth	r3, r3
    1222:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    1224:	0113      	lsls	r3, r2, #4
    1226:	d51d      	bpl.n	1264 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    1228:	7ac3      	ldrb	r3, [r0, #11]
    122a:	2b00      	cmp	r3, #0
    122c:	d003      	beq.n	1236 <_i2c_master_read+0x2a>
    122e:	8b83      	ldrh	r3, [r0, #28]
    1230:	b29b      	uxth	r3, r3
    1232:	2b01      	cmp	r3, #1
    1234:	d010      	beq.n	1258 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    1236:	8ba3      	ldrh	r3, [r4, #28]
    1238:	b29b      	uxth	r3, r3
    123a:	2b00      	cmp	r3, #0
    123c:	d102      	bne.n	1244 <_i2c_master_read+0x38>
		if (module->send_stop) {
    123e:	7aa3      	ldrb	r3, [r4, #10]
    1240:	2b00      	cmp	r3, #0
    1242:	d11c      	bne.n	127e <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1244:	0020      	movs	r0, r4
    1246:	4b12      	ldr	r3, [pc, #72]	; (1290 <_i2c_master_read+0x84>)
    1248:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    124a:	6a23      	ldr	r3, [r4, #32]
    124c:	195d      	adds	r5, r3, r5
    124e:	2328      	movs	r3, #40	; 0x28
    1250:	5cf3      	ldrb	r3, [r6, r3]
    1252:	b2db      	uxtb	r3, r3
    1254:	702b      	strb	r3, [r5, #0]
}
    1256:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1258:	6872      	ldr	r2, [r6, #4]
    125a:	2380      	movs	r3, #128	; 0x80
    125c:	02db      	lsls	r3, r3, #11
    125e:	4313      	orrs	r3, r2
    1260:	6073      	str	r3, [r6, #4]
    1262:	e7e8      	b.n	1236 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    1264:	7ac3      	ldrb	r3, [r0, #11]
    1266:	2b00      	cmp	r3, #0
    1268:	d0e5      	beq.n	1236 <_i2c_master_read+0x2a>
    126a:	8b83      	ldrh	r3, [r0, #28]
    126c:	b29b      	uxth	r3, r3
    126e:	2b00      	cmp	r3, #0
    1270:	d1e1      	bne.n	1236 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1272:	6872      	ldr	r2, [r6, #4]
    1274:	2380      	movs	r3, #128	; 0x80
    1276:	02db      	lsls	r3, r3, #11
    1278:	4313      	orrs	r3, r2
    127a:	6073      	str	r3, [r6, #4]
    127c:	e7db      	b.n	1236 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    127e:	0020      	movs	r0, r4
    1280:	4b03      	ldr	r3, [pc, #12]	; (1290 <_i2c_master_read+0x84>)
    1282:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1284:	6872      	ldr	r2, [r6, #4]
    1286:	23c0      	movs	r3, #192	; 0xc0
    1288:	029b      	lsls	r3, r3, #10
    128a:	4313      	orrs	r3, r2
    128c:	6073      	str	r3, [r6, #4]
    128e:	e7d9      	b.n	1244 <_i2c_master_read+0x38>
    1290:	00001201 	.word	0x00001201

00001294 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1294:	b570      	push	{r4, r5, r6, lr}
    1296:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1298:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    129a:	8b6b      	ldrh	r3, [r5, #26]
    129c:	075b      	lsls	r3, r3, #29
    129e:	d503      	bpl.n	12a8 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    12a0:	221e      	movs	r2, #30
    12a2:	2325      	movs	r3, #37	; 0x25
    12a4:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    12a6:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    12a8:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    12aa:	8b83      	ldrh	r3, [r0, #28]
    12ac:	1af6      	subs	r6, r6, r3
    12ae:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    12b0:	8b83      	ldrh	r3, [r0, #28]
    12b2:	3b01      	subs	r3, #1
    12b4:	b29b      	uxth	r3, r3
    12b6:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    12b8:	4b04      	ldr	r3, [pc, #16]	; (12cc <_i2c_master_write+0x38>)
    12ba:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    12bc:	6a23      	ldr	r3, [r4, #32]
    12be:	199e      	adds	r6, r3, r6
    12c0:	7833      	ldrb	r3, [r6, #0]
    12c2:	b2db      	uxtb	r3, r3
    12c4:	2228      	movs	r2, #40	; 0x28
    12c6:	54ab      	strb	r3, [r5, r2]
    12c8:	e7ed      	b.n	12a6 <_i2c_master_write+0x12>
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	00001201 	.word	0x00001201

000012d0 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    12d0:	b570      	push	{r4, r5, r6, lr}
    12d2:	0005      	movs	r5, r0
    12d4:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    12d6:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    12d8:	7a4b      	ldrb	r3, [r1, #9]
    12da:	2b00      	cmp	r3, #0
    12dc:	d11a      	bne.n	1314 <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    12de:	6873      	ldr	r3, [r6, #4]
    12e0:	4a13      	ldr	r2, [pc, #76]	; (1330 <_i2c_master_write_packet+0x60>)
    12e2:	4013      	ands	r3, r2
    12e4:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
    12e6:	6863      	ldr	r3, [r4, #4]
    12e8:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
    12ea:	8863      	ldrh	r3, [r4, #2]
    12ec:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
    12ee:	2200      	movs	r2, #0
    12f0:	2324      	movs	r3, #36	; 0x24
    12f2:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
    12f4:	3205      	adds	r2, #5
    12f6:	3301      	adds	r3, #1
    12f8:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
    12fa:	3b22      	subs	r3, #34	; 0x22
    12fc:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
    12fe:	7a23      	ldrb	r3, [r4, #8]
    1300:	2b00      	cmp	r3, #0
    1302:	d10b      	bne.n	131c <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1304:	8823      	ldrh	r3, [r4, #0]
    1306:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1308:	7a62      	ldrb	r2, [r4, #9]
    130a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    130c:	4313      	orrs	r3, r2
    130e:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
    1310:	2000      	movs	r0, #0
    1312:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1314:	7a89      	ldrb	r1, [r1, #10]
    1316:	4b07      	ldr	r3, [pc, #28]	; (1334 <_i2c_master_write_packet+0x64>)
    1318:	4798      	blx	r3
    131a:	e7e0      	b.n	12de <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    131c:	8823      	ldrh	r3, [r4, #0]
    131e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1320:	7a62      	ldrb	r2, [r4, #9]
    1322:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1324:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1326:	2280      	movs	r2, #128	; 0x80
    1328:	0212      	lsls	r2, r2, #8
    132a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    132c:	6273      	str	r3, [r6, #36]	; 0x24
    132e:	e7ef      	b.n	1310 <_i2c_master_write_packet+0x40>
    1330:	fffbffff 	.word	0xfffbffff
    1334:	00004dc1 	.word	0x00004dc1

00001338 <_i2c_master_read_packet>:
{
    1338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    133a:	0005      	movs	r5, r0
    133c:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    133e:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
    1340:	684b      	ldr	r3, [r1, #4]
    1342:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
    1344:	884b      	ldrh	r3, [r1, #2]
    1346:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
    1348:	2201      	movs	r2, #1
    134a:	2324      	movs	r3, #36	; 0x24
    134c:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
    134e:	3204      	adds	r2, #4
    1350:	3301      	adds	r3, #1
    1352:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1354:	6837      	ldr	r7, [r6, #0]
    1356:	013f      	lsls	r7, r7, #4
    1358:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
    135a:	7a4b      	ldrb	r3, [r1, #9]
    135c:	2b00      	cmp	r3, #0
    135e:	d117      	bne.n	1390 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1360:	2f00      	cmp	r7, #0
    1362:	d002      	beq.n	136a <_i2c_master_read_packet+0x32>
    1364:	8863      	ldrh	r3, [r4, #2]
    1366:	2b01      	cmp	r3, #1
    1368:	d016      	beq.n	1398 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    136a:	6873      	ldr	r3, [r6, #4]
    136c:	4a20      	ldr	r2, [pc, #128]	; (13f0 <_i2c_master_read_packet+0xb8>)
    136e:	4013      	ands	r3, r2
    1370:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
    1372:	7a23      	ldrb	r3, [r4, #8]
    1374:	2b00      	cmp	r3, #0
    1376:	d115      	bne.n	13a4 <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
    1378:	2303      	movs	r3, #3
    137a:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    137c:	8823      	ldrh	r3, [r4, #0]
    137e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1380:	7a62      	ldrb	r2, [r4, #9]
    1382:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1384:	4313      	orrs	r3, r2
    1386:	2201      	movs	r2, #1
    1388:	4313      	orrs	r3, r2
    138a:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
    138c:	2000      	movs	r0, #0
}
    138e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1390:	7a89      	ldrb	r1, [r1, #10]
    1392:	4b18      	ldr	r3, [pc, #96]	; (13f4 <_i2c_master_read_packet+0xbc>)
    1394:	4798      	blx	r3
    1396:	e7e3      	b.n	1360 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1398:	6872      	ldr	r2, [r6, #4]
    139a:	2380      	movs	r3, #128	; 0x80
    139c:	02db      	lsls	r3, r3, #11
    139e:	4313      	orrs	r3, r2
    13a0:	6073      	str	r3, [r6, #4]
    13a2:	e7e6      	b.n	1372 <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
    13a4:	8823      	ldrh	r3, [r4, #0]
    13a6:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    13a8:	7a62      	ldrb	r2, [r4, #9]
    13aa:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    13ac:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    13ae:	2280      	movs	r2, #128	; 0x80
    13b0:	0212      	lsls	r2, r2, #8
    13b2:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    13b4:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    13b6:	0028      	movs	r0, r5
    13b8:	4b0f      	ldr	r3, [pc, #60]	; (13f8 <_i2c_master_read_packet+0xc0>)
    13ba:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    13bc:	6873      	ldr	r3, [r6, #4]
    13be:	4a0c      	ldr	r2, [pc, #48]	; (13f0 <_i2c_master_read_packet+0xb8>)
    13c0:	4013      	ands	r3, r2
    13c2:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
    13c4:	2800      	cmp	r0, #0
    13c6:	d1e2      	bne.n	138e <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
    13c8:	0028      	movs	r0, r5
    13ca:	4b0c      	ldr	r3, [pc, #48]	; (13fc <_i2c_master_read_packet+0xc4>)
    13cc:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
    13ce:	2800      	cmp	r0, #0
    13d0:	d1dd      	bne.n	138e <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
    13d2:	2303      	movs	r3, #3
    13d4:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    13d6:	8823      	ldrh	r3, [r4, #0]
    13d8:	0a1b      	lsrs	r3, r3, #8
    13da:	2278      	movs	r2, #120	; 0x78
    13dc:	4313      	orrs	r3, r2
    13de:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    13e0:	7a62      	ldrb	r2, [r4, #9]
    13e2:	0392      	lsls	r2, r2, #14
    13e4:	2101      	movs	r1, #1
    13e6:	430a      	orrs	r2, r1
    13e8:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    13ea:	6273      	str	r3, [r6, #36]	; 0x24
    13ec:	e7cf      	b.n	138e <_i2c_master_read_packet+0x56>
    13ee:	46c0      	nop			; (mov r8, r8)
    13f0:	fffbffff 	.word	0xfffbffff
    13f4:	00004dc1 	.word	0x00004dc1
    13f8:	00004d95 	.word	0x00004d95
    13fc:	00004d65 	.word	0x00004d65

00001400 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
    1400:	1c93      	adds	r3, r2, #2
    1402:	009b      	lsls	r3, r3, #2
    1404:	18c3      	adds	r3, r0, r3
    1406:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
    1408:	7e03      	ldrb	r3, [r0, #24]
    140a:	2101      	movs	r1, #1
    140c:	4091      	lsls	r1, r2
    140e:	430b      	orrs	r3, r1
    1410:	b2db      	uxtb	r3, r3
    1412:	7603      	strb	r3, [r0, #24]
}
    1414:	4770      	bx	lr
	...

00001418 <i2c_master_read_packet_job>:
{
    1418:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    141a:	8b83      	ldrh	r3, [r0, #28]
    141c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    141e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    1420:	2b00      	cmp	r3, #0
    1422:	d001      	beq.n	1428 <i2c_master_read_packet_job+0x10>
}
    1424:	0010      	movs	r0, r2
    1426:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    1428:	3301      	adds	r3, #1
    142a:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    142c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    142e:	4b02      	ldr	r3, [pc, #8]	; (1438 <i2c_master_read_packet_job+0x20>)
    1430:	4798      	blx	r3
    1432:	0002      	movs	r2, r0
    1434:	e7f6      	b.n	1424 <i2c_master_read_packet_job+0xc>
    1436:	46c0      	nop			; (mov r8, r8)
    1438:	00001339 	.word	0x00001339

0000143c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    143c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
    143e:	8b83      	ldrh	r3, [r0, #28]
    1440:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    1442:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    1444:	2b00      	cmp	r3, #0
    1446:	d001      	beq.n	144c <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
    1448:	0010      	movs	r0, r2
    144a:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    144c:	3301      	adds	r3, #1
    144e:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    1450:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    1452:	4b02      	ldr	r3, [pc, #8]	; (145c <i2c_master_write_packet_job+0x20>)
    1454:	4798      	blx	r3
    1456:	0002      	movs	r2, r0
    1458:	e7f6      	b.n	1448 <i2c_master_write_packet_job+0xc>
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	000012d1 	.word	0x000012d1

00001460 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1460:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    1462:	0080      	lsls	r0, r0, #2
    1464:	4b75      	ldr	r3, [pc, #468]	; (163c <_i2c_master_interrupt_handler+0x1dc>)
    1466:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1468:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    146a:	682b      	ldr	r3, [r5, #0]
    146c:	011b      	lsls	r3, r3, #4
    146e:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1470:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    1472:	7e26      	ldrb	r6, [r4, #24]
    1474:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1476:	8b63      	ldrh	r3, [r4, #26]
    1478:	b29b      	uxth	r3, r3
    147a:	2b00      	cmp	r3, #0
    147c:	d103      	bne.n	1486 <_i2c_master_interrupt_handler+0x26>
    147e:	8ba3      	ldrh	r3, [r4, #28]
    1480:	b29b      	uxth	r3, r3
    1482:	2b00      	cmp	r3, #0
    1484:	d123      	bne.n	14ce <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1486:	8b63      	ldrh	r3, [r4, #26]
    1488:	b29b      	uxth	r3, r3
    148a:	2b00      	cmp	r3, #0
    148c:	d008      	beq.n	14a0 <_i2c_master_interrupt_handler+0x40>
    148e:	8ba3      	ldrh	r3, [r4, #28]
    1490:	b29b      	uxth	r3, r3
    1492:	2b00      	cmp	r3, #0
    1494:	d104      	bne.n	14a0 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    1496:	3325      	adds	r3, #37	; 0x25
    1498:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    149a:	2b05      	cmp	r3, #5
    149c:	d100      	bne.n	14a0 <_i2c_master_interrupt_handler+0x40>
    149e:	e06d      	b.n	157c <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    14a0:	8b63      	ldrh	r3, [r4, #26]
    14a2:	b29b      	uxth	r3, r3
    14a4:	2b00      	cmp	r3, #0
    14a6:	d024      	beq.n	14f2 <_i2c_master_interrupt_handler+0x92>
    14a8:	8ba3      	ldrh	r3, [r4, #28]
    14aa:	b29b      	uxth	r3, r3
    14ac:	2b00      	cmp	r3, #0
    14ae:	d020      	beq.n	14f2 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    14b0:	8b6b      	ldrh	r3, [r5, #26]
    14b2:	069b      	lsls	r3, r3, #26
    14b4:	d500      	bpl.n	14b8 <_i2c_master_interrupt_handler+0x58>
    14b6:	e081      	b.n	15bc <_i2c_master_interrupt_handler+0x15c>
    14b8:	2a00      	cmp	r2, #0
    14ba:	d004      	beq.n	14c6 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    14bc:	8ba3      	ldrh	r3, [r4, #28]
    14be:	b29b      	uxth	r3, r3
    14c0:	2b01      	cmp	r3, #1
    14c2:	d100      	bne.n	14c6 <_i2c_master_interrupt_handler+0x66>
    14c4:	e07a      	b.n	15bc <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    14c6:	2241      	movs	r2, #65	; 0x41
    14c8:	2325      	movs	r3, #37	; 0x25
    14ca:	54e2      	strb	r2, [r4, r3]
    14cc:	e011      	b.n	14f2 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    14ce:	7e2b      	ldrb	r3, [r5, #24]
    14d0:	07db      	lsls	r3, r3, #31
    14d2:	d507      	bpl.n	14e4 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    14d4:	2301      	movs	r3, #1
    14d6:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    14d8:	8b6b      	ldrh	r3, [r5, #26]
    14da:	079b      	lsls	r3, r3, #30
    14dc:	d52e      	bpl.n	153c <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    14de:	2241      	movs	r2, #65	; 0x41
    14e0:	2325      	movs	r3, #37	; 0x25
    14e2:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    14e4:	8ba3      	ldrh	r3, [r4, #28]
    14e6:	b29b      	uxth	r3, r3
    14e8:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    14ea:	2325      	movs	r3, #37	; 0x25
    14ec:	5ce3      	ldrb	r3, [r4, r3]
    14ee:	2b05      	cmp	r3, #5
    14f0:	d038      	beq.n	1564 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    14f2:	8b63      	ldrh	r3, [r4, #26]
    14f4:	b29b      	uxth	r3, r3
    14f6:	2b00      	cmp	r3, #0
    14f8:	d007      	beq.n	150a <_i2c_master_interrupt_handler+0xaa>
    14fa:	8ba3      	ldrh	r3, [r4, #28]
    14fc:	b29b      	uxth	r3, r3
    14fe:	2b00      	cmp	r3, #0
    1500:	d103      	bne.n	150a <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    1502:	3325      	adds	r3, #37	; 0x25
    1504:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1506:	2b05      	cmp	r3, #5
    1508:	d064      	beq.n	15d4 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    150a:	2325      	movs	r3, #37	; 0x25
    150c:	5ce3      	ldrb	r3, [r4, r3]
    150e:	2b05      	cmp	r3, #5
    1510:	d013      	beq.n	153a <_i2c_master_interrupt_handler+0xda>
    1512:	2325      	movs	r3, #37	; 0x25
    1514:	5ce3      	ldrb	r3, [r4, r3]
    1516:	2b00      	cmp	r3, #0
    1518:	d00f      	beq.n	153a <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    151a:	2303      	movs	r3, #3
    151c:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    151e:	2300      	movs	r3, #0
    1520:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    1522:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1524:	3325      	adds	r3, #37	; 0x25
    1526:	5ce3      	ldrb	r3, [r4, r3]
    1528:	2b41      	cmp	r3, #65	; 0x41
    152a:	d003      	beq.n	1534 <_i2c_master_interrupt_handler+0xd4>
    152c:	7aa3      	ldrb	r3, [r4, #10]
    152e:	2b00      	cmp	r3, #0
    1530:	d000      	beq.n	1534 <_i2c_master_interrupt_handler+0xd4>
    1532:	e075      	b.n	1620 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1534:	0773      	lsls	r3, r6, #29
    1536:	d500      	bpl.n	153a <_i2c_master_interrupt_handler+0xda>
    1538:	e07b      	b.n	1632 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    153a:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    153c:	8b6b      	ldrh	r3, [r5, #26]
    153e:	075b      	lsls	r3, r3, #29
    1540:	d5d0      	bpl.n	14e4 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1542:	2218      	movs	r2, #24
    1544:	2325      	movs	r3, #37	; 0x25
    1546:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    1548:	2300      	movs	r3, #0
    154a:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    154c:	7aa3      	ldrb	r3, [r4, #10]
    154e:	2b00      	cmp	r3, #0
    1550:	d0c8      	beq.n	14e4 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    1552:	0020      	movs	r0, r4
    1554:	4b3a      	ldr	r3, [pc, #232]	; (1640 <_i2c_master_interrupt_handler+0x1e0>)
    1556:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1558:	686a      	ldr	r2, [r5, #4]
    155a:	23c0      	movs	r3, #192	; 0xc0
    155c:	029b      	lsls	r3, r3, #10
    155e:	4313      	orrs	r3, r2
    1560:	606b      	str	r3, [r5, #4]
    1562:	e7bf      	b.n	14e4 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1564:	331f      	adds	r3, #31
    1566:	5ce3      	ldrb	r3, [r4, r3]
    1568:	2b00      	cmp	r3, #0
    156a:	d003      	beq.n	1574 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    156c:	0020      	movs	r0, r4
    156e:	4b35      	ldr	r3, [pc, #212]	; (1644 <_i2c_master_interrupt_handler+0x1e4>)
    1570:	4798      	blx	r3
    1572:	e7be      	b.n	14f2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    1574:	0020      	movs	r0, r4
    1576:	4b34      	ldr	r3, [pc, #208]	; (1648 <_i2c_master_interrupt_handler+0x1e8>)
    1578:	4798      	blx	r3
    157a:	e7ba      	b.n	14f2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    157c:	331f      	adds	r3, #31
    157e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1580:	2b00      	cmp	r3, #0
    1582:	d000      	beq.n	1586 <_i2c_master_interrupt_handler+0x126>
    1584:	e78c      	b.n	14a0 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    1586:	3303      	adds	r3, #3
    1588:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    158a:	2300      	movs	r3, #0
    158c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    158e:	3325      	adds	r3, #37	; 0x25
    1590:	2200      	movs	r2, #0
    1592:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    1594:	7aa3      	ldrb	r3, [r4, #10]
    1596:	2b00      	cmp	r3, #0
    1598:	d107      	bne.n	15aa <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    159a:	2301      	movs	r3, #1
    159c:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    159e:	07f3      	lsls	r3, r6, #31
    15a0:	d5a7      	bpl.n	14f2 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    15a2:	68e3      	ldr	r3, [r4, #12]
    15a4:	0020      	movs	r0, r4
    15a6:	4798      	blx	r3
    15a8:	e7a3      	b.n	14f2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    15aa:	0020      	movs	r0, r4
    15ac:	4b24      	ldr	r3, [pc, #144]	; (1640 <_i2c_master_interrupt_handler+0x1e0>)
    15ae:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    15b0:	686a      	ldr	r2, [r5, #4]
    15b2:	23c0      	movs	r3, #192	; 0xc0
    15b4:	029b      	lsls	r3, r3, #10
    15b6:	4313      	orrs	r3, r2
    15b8:	606b      	str	r3, [r5, #4]
    15ba:	e7f0      	b.n	159e <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    15bc:	2324      	movs	r3, #36	; 0x24
    15be:	5ce3      	ldrb	r3, [r4, r3]
    15c0:	2b00      	cmp	r3, #0
    15c2:	d103      	bne.n	15cc <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    15c4:	0020      	movs	r0, r4
    15c6:	4b20      	ldr	r3, [pc, #128]	; (1648 <_i2c_master_interrupt_handler+0x1e8>)
    15c8:	4798      	blx	r3
    15ca:	e792      	b.n	14f2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    15cc:	0020      	movs	r0, r4
    15ce:	4b1d      	ldr	r3, [pc, #116]	; (1644 <_i2c_master_interrupt_handler+0x1e4>)
    15d0:	4798      	blx	r3
    15d2:	e78e      	b.n	14f2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    15d4:	331f      	adds	r3, #31
    15d6:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    15d8:	2b01      	cmp	r3, #1
    15da:	d196      	bne.n	150a <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    15dc:	7e2b      	ldrb	r3, [r5, #24]
    15de:	079b      	lsls	r3, r3, #30
    15e0:	d501      	bpl.n	15e6 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    15e2:	2302      	movs	r3, #2
    15e4:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    15e6:	2303      	movs	r3, #3
    15e8:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    15ea:	2300      	movs	r3, #0
    15ec:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    15ee:	3325      	adds	r3, #37	; 0x25
    15f0:	2200      	movs	r2, #0
    15f2:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    15f4:	07b3      	lsls	r3, r6, #30
    15f6:	d503      	bpl.n	1600 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    15f8:	2324      	movs	r3, #36	; 0x24
    15fa:	5ce3      	ldrb	r3, [r4, r3]
    15fc:	2b01      	cmp	r3, #1
    15fe:	d00b      	beq.n	1618 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1600:	07f3      	lsls	r3, r6, #31
    1602:	d400      	bmi.n	1606 <_i2c_master_interrupt_handler+0x1a6>
    1604:	e781      	b.n	150a <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1606:	2324      	movs	r3, #36	; 0x24
    1608:	5ce3      	ldrb	r3, [r4, r3]
    160a:	2b00      	cmp	r3, #0
    160c:	d000      	beq.n	1610 <_i2c_master_interrupt_handler+0x1b0>
    160e:	e77c      	b.n	150a <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1610:	68e3      	ldr	r3, [r4, #12]
    1612:	0020      	movs	r0, r4
    1614:	4798      	blx	r3
    1616:	e778      	b.n	150a <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1618:	6923      	ldr	r3, [r4, #16]
    161a:	0020      	movs	r0, r4
    161c:	4798      	blx	r3
    161e:	e774      	b.n	150a <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    1620:	0020      	movs	r0, r4
    1622:	4b07      	ldr	r3, [pc, #28]	; (1640 <_i2c_master_interrupt_handler+0x1e0>)
    1624:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1626:	686a      	ldr	r2, [r5, #4]
    1628:	23e0      	movs	r3, #224	; 0xe0
    162a:	02db      	lsls	r3, r3, #11
    162c:	4313      	orrs	r3, r2
    162e:	606b      	str	r3, [r5, #4]
    1630:	e780      	b.n	1534 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1632:	6963      	ldr	r3, [r4, #20]
    1634:	0020      	movs	r0, r4
    1636:	4798      	blx	r3
}
    1638:	e77f      	b.n	153a <_i2c_master_interrupt_handler+0xda>
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	20005d24 	.word	0x20005d24
    1640:	00001201 	.word	0x00001201
    1644:	0000120d 	.word	0x0000120d
    1648:	00001295 	.word	0x00001295

0000164c <calc_temperature>:
/*****************************INTERNAL APIs***********************************************/
#ifndef BME68X_USE_FPU

/* @brief This internal API is used to calculate the temperature value. */
static int16_t calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
    164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    164e:	46ce      	mov	lr, r9
    1650:	4647      	mov	r7, r8
    1652:	b580      	push	{r7, lr}
    1654:	000e      	movs	r6, r1
    int64_t var2;
    int64_t var3;
    int16_t calc_temp;

    /*lint -save -e701 -e702 -e704 */
    var1 = ((int32_t)temp_adc >> 3) - ((int32_t)dev->calib.par_t1 << 1);
    1656:	10c0      	asrs	r0, r0, #3
    1658:	8bcc      	ldrh	r4, [r1, #30]
    165a:	0064      	lsls	r4, r4, #1
    165c:	1b04      	subs	r4, r0, r4
    165e:	17e7      	asrs	r7, r4, #31
    var2 = (var1 * (int32_t)dev->calib.par_t2) >> 11;
    var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
    1660:	07fb      	lsls	r3, r7, #31
    1662:	0860      	lsrs	r0, r4, #1
    1664:	4318      	orrs	r0, r3
    1666:	4d14      	ldr	r5, [pc, #80]	; (16b8 <calc_temperature+0x6c>)
    1668:	0002      	movs	r2, r0
    166a:	003b      	movs	r3, r7
    166c:	0039      	movs	r1, r7
    166e:	47a8      	blx	r5
    1670:	050b      	lsls	r3, r1, #20
    1672:	0b00      	lsrs	r0, r0, #12
    1674:	4318      	orrs	r0, r3
    1676:	1309      	asrs	r1, r1, #12
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
    1678:	2322      	movs	r3, #34	; 0x22
    167a:	56f2      	ldrsb	r2, [r6, r3]
    167c:	0112      	lsls	r2, r2, #4
    167e:	17d3      	asrs	r3, r2, #31
    1680:	47a8      	blx	r5
    1682:	4680      	mov	r8, r0
    1684:	4689      	mov	r9, r1
    var2 = (var1 * (int32_t)dev->calib.par_t2) >> 11;
    1686:	2320      	movs	r3, #32
    1688:	5ef0      	ldrsh	r0, [r6, r3]
    168a:	17c1      	asrs	r1, r0, #31
    168c:	0022      	movs	r2, r4
    168e:	003b      	movs	r3, r7
    1690:	47a8      	blx	r5
    1692:	0549      	lsls	r1, r1, #21
    1694:	0ac0      	lsrs	r0, r0, #11
    1696:	4308      	orrs	r0, r1
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
    1698:	464b      	mov	r3, r9
    169a:	049a      	lsls	r2, r3, #18
    169c:	4643      	mov	r3, r8
    169e:	0b9b      	lsrs	r3, r3, #14
    16a0:	4313      	orrs	r3, r2
    dev->calib.t_fine = (int32_t)(var2 + var3);
    16a2:	18c3      	adds	r3, r0, r3
    16a4:	63b3      	str	r3, [r6, #56]	; 0x38
    calc_temp = (int16_t)(((dev->calib.t_fine * 5) + 128) >> 8);
    16a6:	0098      	lsls	r0, r3, #2
    16a8:	18c0      	adds	r0, r0, r3
    16aa:	3080      	adds	r0, #128	; 0x80
    16ac:	1200      	asrs	r0, r0, #8

    /*lint -restore */
    return calc_temp;
    16ae:	b200      	sxth	r0, r0
}
    16b0:	bc0c      	pop	{r2, r3}
    16b2:	4690      	mov	r8, r2
    16b4:	4699      	mov	r9, r3
    16b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16b8:	00015bc5 	.word	0x00015bc5

000016bc <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
    16bc:	b570      	push	{r4, r5, r6, lr}
    16be:	000c      	movs	r4, r1
     * i.e Comparing value, pres_ovf_check = (1 << 31) >> 1
     */
    const int32_t pres_ovf_check = INT32_C(0x40000000);

    /*lint -save -e701 -e702 -e713 */
    var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
    16c0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    16c2:	1059      	asrs	r1, r3, #1
    16c4:	4b2a      	ldr	r3, [pc, #168]	; (1770 <calc_pressure+0xb4>)
    16c6:	469c      	mov	ip, r3
    16c8:	4461      	add	r1, ip
    var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) * (int32_t)dev->calib.par_p6) >> 2;
    16ca:	108b      	asrs	r3, r1, #2
    16cc:	435b      	muls	r3, r3
    16ce:	12da      	asrs	r2, r3, #11
    16d0:	252e      	movs	r5, #46	; 0x2e
    16d2:	5765      	ldrsb	r5, [r4, r5]
    16d4:	436a      	muls	r2, r5
    16d6:	1092      	asrs	r2, r2, #2
    var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
    16d8:	262c      	movs	r6, #44	; 0x2c
    16da:	5fa5      	ldrsh	r5, [r4, r6]
    16dc:	434d      	muls	r5, r1
    16de:	006d      	lsls	r5, r5, #1
    16e0:	18ad      	adds	r5, r5, r2
    var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
    16e2:	10ad      	asrs	r5, r5, #2
    var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) * ((int32_t)dev->calib.par_p3 << 5)) >> 3) +
           (((int32_t)dev->calib.par_p2 * var1) >> 1);
    16e4:	2626      	movs	r6, #38	; 0x26
    16e6:	5fa2      	ldrsh	r2, [r4, r6]
    16e8:	434a      	muls	r2, r1
    16ea:	1052      	asrs	r2, r2, #1
    var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) * ((int32_t)dev->calib.par_p3 << 5)) >> 3) +
    16ec:	2128      	movs	r1, #40	; 0x28
    16ee:	5666      	ldrsb	r6, [r4, r1]
    16f0:	0176      	lsls	r6, r6, #5
    16f2:	1359      	asrs	r1, r3, #13
    16f4:	4371      	muls	r1, r6
    16f6:	10c9      	asrs	r1, r1, #3
    16f8:	1889      	adds	r1, r1, r2
    var1 = var1 >> 18;
    16fa:	1489      	asrs	r1, r1, #18
    var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
    16fc:	2380      	movs	r3, #128	; 0x80
    16fe:	021b      	lsls	r3, r3, #8
    1700:	469c      	mov	ip, r3
    1702:	4461      	add	r1, ip
    1704:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    1706:	4359      	muls	r1, r3
    1708:	13c9      	asrs	r1, r1, #15
    pressure_comp = 1048576 - pres_adc;
    170a:	2380      	movs	r3, #128	; 0x80
    170c:	035b      	lsls	r3, r3, #13
    170e:	1a18      	subs	r0, r3, r0
    var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
    1710:	222a      	movs	r2, #42	; 0x2a
    1712:	5ea3      	ldrsh	r3, [r4, r2]
    1714:	041b      	lsls	r3, r3, #16
    1716:	195b      	adds	r3, r3, r5
    pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
    1718:	131b      	asrs	r3, r3, #12
    171a:	1ac3      	subs	r3, r0, r3
    171c:	4815      	ldr	r0, [pc, #84]	; (1774 <calc_pressure+0xb8>)
    171e:	4358      	muls	r0, r3
    if (pressure_comp >= pres_ovf_check)
    1720:	4b15      	ldr	r3, [pc, #84]	; (1778 <calc_pressure+0xbc>)
    1722:	4298      	cmp	r0, r3
    1724:	dc1f      	bgt.n	1766 <calc_pressure+0xaa>
    {
        pressure_comp = ((pressure_comp / var1) << 1);
    }
    else
    {
        pressure_comp = ((pressure_comp << 1) / var1);
    1726:	0040      	lsls	r0, r0, #1
    1728:	4b14      	ldr	r3, [pc, #80]	; (177c <calc_pressure+0xc0>)
    172a:	4798      	blx	r3
    }

    var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) * (pressure_comp >> 3)) >> 13)) >> 12;
    172c:	10c3      	asrs	r3, r0, #3
    var2 = ((int32_t)(pressure_comp >> 2) * (int32_t)dev->calib.par_p8) >> 13;
    var3 =
        ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
    172e:	1201      	asrs	r1, r0, #8
    var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) * (pressure_comp >> 3)) >> 13)) >> 12;
    1730:	435b      	muls	r3, r3
    1732:	135a      	asrs	r2, r3, #13
    1734:	2532      	movs	r5, #50	; 0x32
    1736:	5f63      	ldrsh	r3, [r4, r5]
    1738:	4353      	muls	r3, r2
    173a:	131b      	asrs	r3, r3, #12
    var2 = ((int32_t)(pressure_comp >> 2) * (int32_t)dev->calib.par_p8) >> 13;
    173c:	1082      	asrs	r2, r0, #2
    173e:	2630      	movs	r6, #48	; 0x30
    1740:	5fa5      	ldrsh	r5, [r4, r6]
    1742:	4355      	muls	r5, r2
    1744:	136d      	asrs	r5, r5, #13
         (int32_t)dev->calib.par_p10) >> 17;
    pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 + ((int32_t)dev->calib.par_p7 << 7)) >> 4);
    1746:	195b      	adds	r3, r3, r5
        ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
    1748:	000a      	movs	r2, r1
    174a:	434a      	muls	r2, r1
    174c:	4351      	muls	r1, r2
         (int32_t)dev->calib.par_p10) >> 17;
    174e:	2234      	movs	r2, #52	; 0x34
    1750:	5ca2      	ldrb	r2, [r4, r2]
        ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
    1752:	434a      	muls	r2, r1
    var3 =
    1754:	1452      	asrs	r2, r2, #17
    pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 + ((int32_t)dev->calib.par_p7 << 7)) >> 4);
    1756:	189b      	adds	r3, r3, r2
    1758:	222f      	movs	r2, #47	; 0x2f
    175a:	56a2      	ldrsb	r2, [r4, r2]
    175c:	01d2      	lsls	r2, r2, #7
    175e:	189b      	adds	r3, r3, r2
    1760:	111b      	asrs	r3, r3, #4
    1762:	18c0      	adds	r0, r0, r3

    /*lint -restore */
    return (uint32_t)pressure_comp;
}
    1764:	bd70      	pop	{r4, r5, r6, pc}
        pressure_comp = ((pressure_comp / var1) << 1);
    1766:	4b05      	ldr	r3, [pc, #20]	; (177c <calc_pressure+0xc0>)
    1768:	4798      	blx	r3
    176a:	0040      	lsls	r0, r0, #1
    176c:	e7de      	b.n	172c <calc_pressure+0x70>
    176e:	46c0      	nop			; (mov r8, r8)
    1770:	ffff0600 	.word	0xffff0600
    1774:	00000c35 	.word	0x00000c35
    1778:	3fffffff 	.word	0x3fffffff
    177c:	00015929 	.word	0x00015929

00001780 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
    1780:	b5f0      	push	{r4, r5, r6, r7, lr}
    1782:	46c6      	mov	lr, r8
    1784:	b500      	push	{lr}
    1786:	0007      	movs	r7, r0
    1788:	000e      	movs	r6, r1
    int32_t var6;
    int32_t temp_scaled;
    int32_t calc_hum;

    /*lint -save -e702 -e704 */
    temp_scaled = (((int32_t)dev->calib.t_fine * 5) + 128) >> 8;
    178a:	6b88      	ldr	r0, [r1, #56]	; 0x38
    178c:	0084      	lsls	r4, r0, #2
    178e:	1824      	adds	r4, r4, r0
    1790:	3480      	adds	r4, #128	; 0x80
    1792:	1224      	asrs	r4, r4, #8
    var1 = (int32_t)(hum_adc - ((int32_t)((int32_t)dev->calib.par_h1 * 16))) -
           (((temp_scaled * (int32_t)dev->calib.par_h3) / ((int32_t)100)) >> 1);
    var2 =
        ((int32_t)dev->calib.par_h2 *
         (((temp_scaled * (int32_t)dev->calib.par_h4) / ((int32_t)100)) +
          (((temp_scaled * ((temp_scaled * (int32_t)dev->calib.par_h5) / ((int32_t)100))) >> 6) / ((int32_t)100)) +
    1794:	2016      	movs	r0, #22
    1796:	5608      	ldrsb	r0, [r1, r0]
    1798:	4360      	muls	r0, r4
    179a:	4b1f      	ldr	r3, [pc, #124]	; (1818 <calc_humidity+0x98>)
    179c:	4698      	mov	r8, r3
    179e:	2164      	movs	r1, #100	; 0x64
    17a0:	4798      	blx	r3
    17a2:	4360      	muls	r0, r4
    17a4:	1180      	asrs	r0, r0, #6
    17a6:	2164      	movs	r1, #100	; 0x64
    17a8:	47c0      	blx	r8
    17aa:	0005      	movs	r5, r0
         (((temp_scaled * (int32_t)dev->calib.par_h4) / ((int32_t)100)) +
    17ac:	2015      	movs	r0, #21
    17ae:	5630      	ldrsb	r0, [r6, r0]
    17b0:	4360      	muls	r0, r4
    17b2:	2164      	movs	r1, #100	; 0x64
    17b4:	47c0      	blx	r8
    17b6:	182d      	adds	r5, r5, r0
          (((temp_scaled * ((temp_scaled * (int32_t)dev->calib.par_h5) / ((int32_t)100))) >> 6) / ((int32_t)100)) +
    17b8:	2380      	movs	r3, #128	; 0x80
    17ba:	01db      	lsls	r3, r3, #7
    17bc:	469c      	mov	ip, r3
    17be:	4465      	add	r5, ip
        ((int32_t)dev->calib.par_h2 *
    17c0:	8a70      	ldrh	r0, [r6, #18]
    17c2:	4345      	muls	r5, r0
    var2 =
    17c4:	12ad      	asrs	r5, r5, #10
    var1 = (int32_t)(hum_adc - ((int32_t)((int32_t)dev->calib.par_h1 * 16))) -
    17c6:	8a30      	ldrh	r0, [r6, #16]
    17c8:	0100      	lsls	r0, r0, #4
    17ca:	1a3f      	subs	r7, r7, r0
           (((temp_scaled * (int32_t)dev->calib.par_h3) / ((int32_t)100)) >> 1);
    17cc:	2014      	movs	r0, #20
    17ce:	5630      	ldrsb	r0, [r6, r0]
    17d0:	4360      	muls	r0, r4
    17d2:	2164      	movs	r1, #100	; 0x64
    17d4:	47c0      	blx	r8
    17d6:	1040      	asrs	r0, r0, #1
    var1 = (int32_t)(hum_adc - ((int32_t)((int32_t)dev->calib.par_h1 * 16))) -
    17d8:	1a38      	subs	r0, r7, r0
          (int32_t)(1 << 14))) >> 10;
    var3 = var1 * var2;
    17da:	4345      	muls	r5, r0
    var4 = (int32_t)dev->calib.par_h6 << 7;
    var4 = ((var4) + ((temp_scaled * (int32_t)dev->calib.par_h7) / ((int32_t)100))) >> 4;
    17dc:	2018      	movs	r0, #24
    17de:	5630      	ldrsb	r0, [r6, r0]
    17e0:	4360      	muls	r0, r4
    17e2:	2164      	movs	r1, #100	; 0x64
    17e4:	47c0      	blx	r8
    var4 = (int32_t)dev->calib.par_h6 << 7;
    17e6:	7df3      	ldrb	r3, [r6, #23]
    17e8:	01db      	lsls	r3, r3, #7
    var4 = ((var4) + ((temp_scaled * (int32_t)dev->calib.par_h7) / ((int32_t)100))) >> 4;
    17ea:	18c0      	adds	r0, r0, r3
    var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
    17ec:	13ab      	asrs	r3, r5, #14
    17ee:	435b      	muls	r3, r3
    17f0:	129b      	asrs	r3, r3, #10
    var4 = ((var4) + ((temp_scaled * (int32_t)dev->calib.par_h7) / ((int32_t)100))) >> 4;
    17f2:	1100      	asrs	r0, r0, #4
    var6 = (var4 * var5) >> 1;
    17f4:	4358      	muls	r0, r3
    17f6:	1040      	asrs	r0, r0, #1
    calc_hum = (((var3 + var6) >> 10) * ((int32_t)1000)) >> 12;
    17f8:	1940      	adds	r0, r0, r5
    17fa:	1280      	asrs	r0, r0, #10
    17fc:	23fa      	movs	r3, #250	; 0xfa
    17fe:	009b      	lsls	r3, r3, #2
    1800:	4358      	muls	r0, r3
    1802:	1300      	asrs	r0, r0, #12
    1804:	43c3      	mvns	r3, r0
    1806:	17db      	asrs	r3, r3, #31
    {
        calc_hum = 0;
    }

    /*lint -restore */
    return (uint32_t)calc_hum;
    1808:	4018      	ands	r0, r3
    180a:	4b04      	ldr	r3, [pc, #16]	; (181c <calc_humidity+0x9c>)
    180c:	4298      	cmp	r0, r3
    180e:	dd00      	ble.n	1812 <calc_humidity+0x92>
    1810:	0018      	movs	r0, r3
}
    1812:	bc04      	pop	{r2}
    1814:	4690      	mov	r8, r2
    1816:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1818:	00015929 	.word	0x00015929
    181c:	000186a0 	.word	0x000186a0

00001820 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low */
static uint32_t calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
    1820:	b5f0      	push	{r4, r5, r6, r7, lr}
    1822:	46ce      	mov	lr, r9
    1824:	4647      	mov	r7, r8
    1826:	b580      	push	{r7, lr}
    1828:	b0a1      	sub	sp, #132	; 0x84
    182a:	4681      	mov	r9, r0
    182c:	4688      	mov	r8, r1
    182e:	0017      	movs	r7, r2
    int64_t var1;
    uint64_t var2;
    int64_t var3;
    uint32_t calc_gas_res;
    uint32_t lookup_table1[16] = {
    1830:	ad10      	add	r5, sp, #64	; 0x40
    1832:	4c23      	ldr	r4, [pc, #140]	; (18c0 <calc_gas_resistance_low+0xa0>)
    1834:	2240      	movs	r2, #64	; 0x40
    1836:	0021      	movs	r1, r4
    1838:	0028      	movs	r0, r5
    183a:	4e22      	ldr	r6, [pc, #136]	; (18c4 <calc_gas_resistance_low+0xa4>)
    183c:	47b0      	blx	r6
        UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
        UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777), UINT32_C(2147483647), UINT32_C(2147483647),
        UINT32_C(2143188679), UINT32_C(2136746228), UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647),
        UINT32_C(2147483647)
    };
    uint32_t lookup_table2[16] = {
    183e:	0021      	movs	r1, r4
    1840:	3140      	adds	r1, #64	; 0x40
    1842:	2240      	movs	r2, #64	; 0x40
    1844:	4668      	mov	r0, sp
    1846:	47b0      	blx	r6
        UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016), UINT32_C(8000000), UINT32_C(
            4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000), UINT32_C(250000), UINT32_C(125000)
    };

    /*lint -save -e704 */
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
    1848:	233e      	movs	r3, #62	; 0x3e
    184a:	56fc      	ldrsb	r4, [r7, r3]
    184c:	0022      	movs	r2, r4
    184e:	17e4      	asrs	r4, r4, #31
    1850:	0023      	movs	r3, r4
    1852:	0f96      	lsrs	r6, r2, #30
    1854:	00a1      	lsls	r1, r4, #2
    1856:	4331      	orrs	r1, r6
    1858:	0090      	lsls	r0, r2, #2
    185a:	1880      	adds	r0, r0, r2
    185c:	4159      	adcs	r1, r3
    185e:	4e1a      	ldr	r6, [pc, #104]	; (18c8 <calc_gas_resistance_low+0xa8>)
    1860:	2700      	movs	r7, #0
    1862:	1980      	adds	r0, r0, r6
    1864:	4179      	adcs	r1, r7
    1866:	4643      	mov	r3, r8
    1868:	009f      	lsls	r7, r3, #2
    186a:	597a      	ldr	r2, [r7, r5]
    186c:	4e17      	ldr	r6, [pc, #92]	; (18cc <calc_gas_resistance_low+0xac>)
    186e:	2300      	movs	r3, #0
    1870:	47b0      	blx	r6
    1872:	040c      	lsls	r4, r1, #16
    1874:	0c02      	lsrs	r2, r0, #16
    1876:	4322      	orrs	r2, r4
    1878:	140b      	asrs	r3, r1, #16
    var2 = (((int64_t)((int64_t)gas_res_adc << 15) - (int64_t)(16777216)) + var1);
    187a:	2500      	movs	r5, #0
    187c:	4649      	mov	r1, r9
    187e:	03cc      	lsls	r4, r1, #15
    1880:	20ff      	movs	r0, #255	; 0xff
    1882:	0600      	lsls	r0, r0, #24
    1884:	2101      	movs	r1, #1
    1886:	4249      	negs	r1, r1
    1888:	1824      	adds	r4, r4, r0
    188a:	414d      	adcs	r5, r1
    188c:	18a4      	adds	r4, r4, r2
    188e:	415d      	adcs	r5, r3
    var3 = (((int64_t)lookup_table2[gas_range] * (int64_t)var1) >> 9);
    1890:	4669      	mov	r1, sp
    1892:	5878      	ldr	r0, [r7, r1]
    1894:	2100      	movs	r1, #0
    1896:	47b0      	blx	r6
    1898:	05ce      	lsls	r6, r1, #23
    189a:	0a42      	lsrs	r2, r0, #9
    189c:	4332      	orrs	r2, r6
    189e:	124b      	asrs	r3, r1, #9
    calc_gas_res = (uint32_t)((var3 + ((int64_t)var2 >> 1)) / (int64_t)var2);
    18a0:	07ee      	lsls	r6, r5, #31
    18a2:	0860      	lsrs	r0, r4, #1
    18a4:	4330      	orrs	r0, r6
    18a6:	1069      	asrs	r1, r5, #1
    18a8:	1880      	adds	r0, r0, r2
    18aa:	4159      	adcs	r1, r3
    18ac:	0022      	movs	r2, r4
    18ae:	002b      	movs	r3, r5
    18b0:	4c07      	ldr	r4, [pc, #28]	; (18d0 <calc_gas_resistance_low+0xb0>)
    18b2:	47a0      	blx	r4

    /*lint -restore */
    return calc_gas_res;
}
    18b4:	b021      	add	sp, #132	; 0x84
    18b6:	bc0c      	pop	{r2, r3}
    18b8:	4690      	mov	r8, r2
    18ba:	4699      	mov	r9, r3
    18bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	00019240 	.word	0x00019240
    18c4:	00012b4d 	.word	0x00012b4d
    18c8:	0000053c 	.word	0x0000053c
    18cc:	00015bc5 	.word	0x00015bc5
    18d0:	00015b7d 	.word	0x00015b7d

000018d4 <calc_res_heat>:
    return calc_gas_res;
}

/* This internal API is used to calculate the heater resistance value using integer */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
    18d4:	b570      	push	{r4, r5, r6, lr}
    18d6:	000e      	movs	r6, r1
    {
        temp = 400;
    }

    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
    18d8:	231a      	movs	r3, #26
    18da:	5eca      	ldrsh	r2, [r1, r3]
    18dc:	4b21      	ldr	r3, [pc, #132]	; (1964 <calc_res_heat+0x90>)
    18de:	469c      	mov	ip, r3
    18e0:	4462      	add	r2, ip
    18e2:	1c03      	adds	r3, r0, #0
    18e4:	21c8      	movs	r1, #200	; 0xc8
    18e6:	0049      	lsls	r1, r1, #1
    18e8:	4288      	cmp	r0, r1
    18ea:	d901      	bls.n	18f0 <calc_res_heat+0x1c>
    18ec:	4b1e      	ldr	r3, [pc, #120]	; (1968 <calc_res_heat+0x94>)
    18ee:	881b      	ldrh	r3, [r3, #0]
    18f0:	b298      	uxth	r0, r3
    18f2:	4350      	muls	r0, r2
    18f4:	0083      	lsls	r3, r0, #2
    18f6:	1818      	adds	r0, r3, r0
    18f8:	4c1c      	ldr	r4, [pc, #112]	; (196c <calc_res_heat+0x98>)
    18fa:	2164      	movs	r1, #100	; 0x64
    18fc:	47a0      	blx	r4
    18fe:	23c8      	movs	r3, #200	; 0xc8
    1900:	039b      	lsls	r3, r3, #14
    1902:	469c      	mov	ip, r3
    1904:	4460      	add	r0, ip
    1906:	210a      	movs	r1, #10
    1908:	47a0      	blx	r4
    190a:	2319      	movs	r3, #25
    190c:	56f3      	ldrsb	r3, [r6, r3]
    190e:	22c4      	movs	r2, #196	; 0xc4
    1910:	0092      	lsls	r2, r2, #2
    1912:	4694      	mov	ip, r2
    1914:	4463      	add	r3, ip
    1916:	4358      	muls	r0, r3
    var3 = var1 + (var2 / 2);
    1918:	0fc5      	lsrs	r5, r0, #31
    191a:	182d      	adds	r5, r5, r0
    191c:	106d      	asrs	r5, r5, #1
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
    191e:	230e      	movs	r3, #14
    1920:	56f3      	ldrsb	r3, [r6, r3]
    1922:	201c      	movs	r0, #28
    1924:	5630      	ldrsb	r0, [r6, r0]
    1926:	4358      	muls	r0, r3
    1928:	21fa      	movs	r1, #250	; 0xfa
    192a:	0089      	lsls	r1, r1, #2
    192c:	47a0      	blx	r4
    192e:	0200      	lsls	r0, r0, #8
    var3 = var1 + (var2 / 2);
    1930:	1828      	adds	r0, r5, r0
    var4 = (var3 / (dev->calib.res_heat_range + 4));
    1932:	233c      	movs	r3, #60	; 0x3c
    1934:	5cf1      	ldrb	r1, [r6, r3]
    1936:	3104      	adds	r1, #4
    1938:	47a0      	blx	r4
    var5 = (131 * dev->calib.res_heat_val) + 65536;
    193a:	233d      	movs	r3, #61	; 0x3d
    193c:	56f3      	ldrsb	r3, [r6, r3]
    193e:	0199      	lsls	r1, r3, #6
    1940:	18c9      	adds	r1, r1, r3
    1942:	0049      	lsls	r1, r1, #1
    1944:	18c9      	adds	r1, r1, r3
    1946:	2380      	movs	r3, #128	; 0x80
    1948:	025b      	lsls	r3, r3, #9
    194a:	469c      	mov	ip, r3
    194c:	4461      	add	r1, ip
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
    194e:	47a0      	blx	r4
    1950:	0003      	movs	r3, r0
    1952:	3bfa      	subs	r3, #250	; 0xfa
    1954:	0118      	lsls	r0, r3, #4
    1956:	18c0      	adds	r0, r0, r3
    1958:	0040      	lsls	r0, r0, #1
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
    195a:	3032      	adds	r0, #50	; 0x32
    195c:	2164      	movs	r1, #100	; 0x64
    195e:	47a0      	blx	r4

    return heatr_res;
    1960:	b2c0      	uxtb	r0, r0
}
    1962:	bd70      	pop	{r4, r5, r6, pc}
    1964:	00025999 	.word	0x00025999
    1968:	0001923c 	.word	0x0001923c
    196c:	00015929 	.word	0x00015929

00001970 <null_ptr_check>:
/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
    int8_t rslt = BME68X_OK;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay__us == NULL))
    1970:	2800      	cmp	r0, #0
    1972:	d00a      	beq.n	198a <null_ptr_check+0x1a>
    1974:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1976:	2b00      	cmp	r3, #0
    1978:	d00a      	beq.n	1990 <null_ptr_check+0x20>
    197a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    197c:	2b00      	cmp	r3, #0
    197e:	d00a      	beq.n	1996 <null_ptr_check+0x26>
    1980:	6c83      	ldr	r3, [r0, #72]	; 0x48
    1982:	4258      	negs	r0, r3
    1984:	4158      	adcs	r0, r3
    1986:	4240      	negs	r0, r0
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
    }

    return rslt;
}
    1988:	4770      	bx	lr
        rslt = BME68X_E_NULL_PTR;
    198a:	2001      	movs	r0, #1
    198c:	4240      	negs	r0, r0
    198e:	e7fb      	b.n	1988 <null_ptr_check+0x18>
    1990:	2001      	movs	r0, #1
    1992:	4240      	negs	r0, r0
    1994:	e7f8      	b.n	1988 <null_ptr_check+0x18>
    1996:	2001      	movs	r0, #1
    1998:	4240      	negs	r0, r0
    199a:	e7f5      	b.n	1988 <null_ptr_check+0x18>

0000199c <set_mem_page>:
{
    199c:	b530      	push	{r4, r5, lr}
    199e:	b083      	sub	sp, #12
    19a0:	0004      	movs	r4, r0
    19a2:	000d      	movs	r5, r1
    rslt = null_ptr_check(dev);
    19a4:	0008      	movs	r0, r1
    19a6:	4b18      	ldr	r3, [pc, #96]	; (1a08 <set_mem_page+0x6c>)
    19a8:	4798      	blx	r3
    if (rslt == BME68X_OK)
    19aa:	2800      	cmp	r0, #0
    19ac:	d114      	bne.n	19d8 <set_mem_page+0x3c>
        if (reg_addr > 0x7f)
    19ae:	b263      	sxtb	r3, r4
            mem_page = BME68X_MEM_PAGE0;
    19b0:	43db      	mvns	r3, r3
    19b2:	0fdb      	lsrs	r3, r3, #31
    19b4:	011b      	lsls	r3, r3, #4
        if (mem_page != dev->mem_page)
    19b6:	7b6a      	ldrb	r2, [r5, #13]
    19b8:	429a      	cmp	r2, r3
    19ba:	d00d      	beq.n	19d8 <set_mem_page+0x3c>
            dev->mem_page = mem_page;
    19bc:	736b      	strb	r3, [r5, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
    19be:	686b      	ldr	r3, [r5, #4]
    19c0:	2201      	movs	r2, #1
    19c2:	4669      	mov	r1, sp
    19c4:	3107      	adds	r1, #7
    19c6:	30f3      	adds	r0, #243	; 0xf3
    19c8:	6c2c      	ldr	r4, [r5, #64]	; 0x40
    19ca:	47a0      	blx	r4
    19cc:	234c      	movs	r3, #76	; 0x4c
    19ce:	54e8      	strb	r0, [r5, r3]
            if (dev->intf_rslt != 0)
    19d0:	2800      	cmp	r0, #0
    19d2:	d003      	beq.n	19dc <set_mem_page+0x40>
                rslt = BME68X_E_COM_FAIL;
    19d4:	2002      	movs	r0, #2
    19d6:	4240      	negs	r0, r0
}
    19d8:	b003      	add	sp, #12
    19da:	bd30      	pop	{r4, r5, pc}
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
    19dc:	466b      	mov	r3, sp
    19de:	1dd9      	adds	r1, r3, #7
    19e0:	7b6a      	ldrb	r2, [r5, #13]
    19e2:	2310      	movs	r3, #16
    19e4:	4013      	ands	r3, r2
                reg = reg & (~BME68X_MEM_PAGE_MSK);
    19e6:	780a      	ldrb	r2, [r1, #0]
    19e8:	2010      	movs	r0, #16
    19ea:	4382      	bics	r2, r0
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
    19ec:	4313      	orrs	r3, r2
    19ee:	700b      	strb	r3, [r1, #0]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
    19f0:	686b      	ldr	r3, [r5, #4]
    19f2:	2201      	movs	r2, #1
    19f4:	3063      	adds	r0, #99	; 0x63
    19f6:	6c6c      	ldr	r4, [r5, #68]	; 0x44
    19f8:	47a0      	blx	r4
    19fa:	224c      	movs	r2, #76	; 0x4c
    19fc:	54a8      	strb	r0, [r5, r2]
                if (dev->intf_rslt != 0)
    19fe:	2800      	cmp	r0, #0
    1a00:	d0ea      	beq.n	19d8 <set_mem_page+0x3c>
                    rslt = BME68X_E_COM_FAIL;
    1a02:	2002      	movs	r0, #2
    1a04:	4240      	negs	r0, r0
    return rslt;
    1a06:	e7e7      	b.n	19d8 <set_mem_page+0x3c>
    1a08:	00001971 	.word	0x00001971

00001a0c <get_mem_page>:
{
    1a0c:	b530      	push	{r4, r5, lr}
    1a0e:	b083      	sub	sp, #12
    1a10:	0004      	movs	r4, r0
    rslt = null_ptr_check(dev);
    1a12:	4b0d      	ldr	r3, [pc, #52]	; (1a48 <get_mem_page+0x3c>)
    1a14:	4798      	blx	r3
    if (rslt == BME68X_OK)
    1a16:	2800      	cmp	r0, #0
    1a18:	d001      	beq.n	1a1e <get_mem_page+0x12>
}
    1a1a:	b003      	add	sp, #12
    1a1c:	bd30      	pop	{r4, r5, pc}
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
    1a1e:	6863      	ldr	r3, [r4, #4]
    1a20:	2201      	movs	r2, #1
    1a22:	4669      	mov	r1, sp
    1a24:	3107      	adds	r1, #7
    1a26:	30f3      	adds	r0, #243	; 0xf3
    1a28:	6c25      	ldr	r5, [r4, #64]	; 0x40
    1a2a:	47a8      	blx	r5
    1a2c:	224c      	movs	r2, #76	; 0x4c
    1a2e:	54a0      	strb	r0, [r4, r2]
        if (dev->intf_rslt != 0)
    1a30:	2800      	cmp	r0, #0
    1a32:	d105      	bne.n	1a40 <get_mem_page+0x34>
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
    1a34:	466b      	mov	r3, sp
    1a36:	79da      	ldrb	r2, [r3, #7]
    1a38:	2310      	movs	r3, #16
    1a3a:	4013      	ands	r3, r2
    1a3c:	7363      	strb	r3, [r4, #13]
    1a3e:	e7ec      	b.n	1a1a <get_mem_page+0xe>
            rslt = BME68X_E_COM_FAIL;
    1a40:	2002      	movs	r0, #2
    1a42:	4240      	negs	r0, r0
    1a44:	e7e9      	b.n	1a1a <get_mem_page+0xe>
    1a46:	46c0      	nop			; (mov r8, r8)
    1a48:	00001971 	.word	0x00001971

00001a4c <boundary_check>:
{
    1a4c:	b570      	push	{r4, r5, r6, lr}
    1a4e:	0004      	movs	r4, r0
    1a50:	000e      	movs	r6, r1
    1a52:	0015      	movs	r5, r2
    rslt = null_ptr_check(dev);
    1a54:	0010      	movs	r0, r2
    1a56:	4b0b      	ldr	r3, [pc, #44]	; (1a84 <boundary_check+0x38>)
    1a58:	4798      	blx	r3
    if ((value != NULL) && (rslt == BME68X_OK))
    1a5a:	2c00      	cmp	r4, #0
    1a5c:	d00b      	beq.n	1a76 <boundary_check+0x2a>
    1a5e:	2800      	cmp	r0, #0
    1a60:	d10c      	bne.n	1a7c <boundary_check+0x30>
        if (*value > max)
    1a62:	7823      	ldrb	r3, [r4, #0]
    1a64:	42b3      	cmp	r3, r6
    1a66:	d905      	bls.n	1a74 <boundary_check+0x28>
            *value = max;
    1a68:	7026      	strb	r6, [r4, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
    1a6a:	224d      	movs	r2, #77	; 0x4d
    1a6c:	5cab      	ldrb	r3, [r5, r2]
    1a6e:	2101      	movs	r1, #1
    1a70:	430b      	orrs	r3, r1
    1a72:	54ab      	strb	r3, [r5, r2]
}
    1a74:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BME68X_E_NULL_PTR;
    1a76:	2001      	movs	r0, #1
    1a78:	4240      	negs	r0, r0
    1a7a:	e7fb      	b.n	1a74 <boundary_check+0x28>
    1a7c:	2001      	movs	r0, #1
    1a7e:	4240      	negs	r0, r0
    1a80:	e7f8      	b.n	1a74 <boundary_check+0x28>
    1a82:	46c0      	nop			; (mov r8, r8)
    1a84:	00001971 	.word	0x00001971

00001a88 <bme68x_i2c_read>:

/*!
 * I2C read function map to SAMD21 Platform
 */
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
    1a88:	b570      	push	{r4, r5, r6, lr}
    1a8a:	b082      	sub	sp, #8
    1a8c:	000e      	movs	r6, r1
    1a8e:	0015      	movs	r5, r2

    //(void)intf_ptr;

	uint8_t reg_add;

	Bme680Data.lenIn = len;
    1a90:	4b0c      	ldr	r3, [pc, #48]	; (1ac4 <bme68x_i2c_read+0x3c>)
    1a92:	819a      	strh	r2, [r3, #12]
	Bme680Data.msgIn = MsgOutBme680;
    1a94:	4c0c      	ldr	r4, [pc, #48]	; (1ac8 <bme68x_i2c_read+0x40>)
    1a96:	609c      	str	r4, [r3, #8]

	reg_add = reg_addr;
    1a98:	466a      	mov	r2, sp
    1a9a:	71d0      	strb	r0, [r2, #7]
    1a9c:	3207      	adds	r2, #7
	Bme680Data.msgOut = &reg_add;
    1a9e:	605a      	str	r2, [r3, #4]
	Bme680Data.lenOut = 1;
    1aa0:	2201      	movs	r2, #1
    1aa2:	81da      	strh	r2, [r3, #14]
	Bme680Data.address = BME68X_I2C_ADDR_HIGH;
    1aa4:	3276      	adds	r2, #118	; 0x76
    1aa6:	701a      	strb	r2, [r3, #0]

	I2cReadDataWait(&Bme680Data, 0, 1000);
    1aa8:	22fa      	movs	r2, #250	; 0xfa
    1aaa:	0092      	lsls	r2, r2, #2
    1aac:	2100      	movs	r1, #0
    1aae:	0018      	movs	r0, r3
    1ab0:	4b06      	ldr	r3, [pc, #24]	; (1acc <bme68x_i2c_read+0x44>)
    1ab2:	4798      	blx	r3
	memcpy(reg_data, MsgOutBme680, len);
    1ab4:	002a      	movs	r2, r5
    1ab6:	0021      	movs	r1, r4
    1ab8:	0030      	movs	r0, r6
    1aba:	4b05      	ldr	r3, [pc, #20]	; (1ad0 <bme68x_i2c_read+0x48>)
    1abc:	4798      	blx	r3
	
	return BME68X_INTF_RET_SUCCESS;
}
    1abe:	2000      	movs	r0, #0
    1ac0:	b002      	add	sp, #8
    1ac2:	bd70      	pop	{r4, r5, r6, pc}
    1ac4:	200046b8 	.word	0x200046b8
    1ac8:	200046c8 	.word	0x200046c8
    1acc:	00003009 	.word	0x00003009
    1ad0:	00012b4d 	.word	0x00012b4d

00001ad4 <bme68x_i2c_write>:

/*!
 * I2C write function map to SAMD21 Platform
 */
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
    1ad4:	b570      	push	{r4, r5, r6, lr}
    //uint8_t device_addr = *(uint8_t*)intf_ptr;

    (void)intf_ptr;
	
	Bme680Data.lenIn = 0;
    1ad6:	4c0a      	ldr	r4, [pc, #40]	; (1b00 <bme68x_i2c_write+0x2c>)
    1ad8:	2300      	movs	r3, #0
    1ada:	81a3      	strh	r3, [r4, #12]
	Bme680Data.lenOut = len+1; // accounting for register write byte as well.
    1adc:	1c53      	adds	r3, r2, #1
    1ade:	81e3      	strh	r3, [r4, #14]
	Bme680Data.msgIn =  MsgOutBme680;
    1ae0:	4b08      	ldr	r3, [pc, #32]	; (1b04 <bme68x_i2c_write+0x30>)
    1ae2:	60a3      	str	r3, [r4, #8]
	Bme680Data.msgOut = MsgOutBme680;
    1ae4:	6063      	str	r3, [r4, #4]
	Bme680Data.address = BME68X_I2C_ADDR_HIGH;
    1ae6:	2577      	movs	r5, #119	; 0x77
    1ae8:	7025      	strb	r5, [r4, #0]
	MsgOutBme680[0] = reg_addr;
    1aea:	7018      	strb	r0, [r3, #0]
	
	/* Copying data into buffer starting from 2nd byte */
	memcpy(&MsgOutBme680[1], reg_data, len);
    1aec:	1c58      	adds	r0, r3, #1
    1aee:	4b06      	ldr	r3, [pc, #24]	; (1b08 <bme68x_i2c_write+0x34>)
    1af0:	4798      	blx	r3
	I2cWriteDataWait(&Bme680Data, 1000);
    1af2:	21fa      	movs	r1, #250	; 0xfa
    1af4:	0089      	lsls	r1, r1, #2
    1af6:	0020      	movs	r0, r4
    1af8:	4b04      	ldr	r3, [pc, #16]	; (1b0c <bme68x_i2c_write+0x38>)
    1afa:	4798      	blx	r3
	
	return BME68X_INTF_RET_SUCCESS;
}
    1afc:	2000      	movs	r0, #0
    1afe:	bd70      	pop	{r4, r5, r6, pc}
    1b00:	200046b8 	.word	0x200046b8
    1b04:	200046c8 	.word	0x200046c8
    1b08:	00012b4d 	.word	0x00012b4d
    1b0c:	00002fa9 	.word	0x00002fa9

00001b10 <bme68x_delay__us>:

/*!
 * Delay function map to SAMD21 Platform
 */
void bme68x_delay__us(uint32_t period, void *intf_ptr)
{
    1b10:	b510      	push	{r4, lr}
    (void)intf_ptr;
	vTaskDelay(pdMS_TO_TICKS((uint32_t) period / 1000.0f));  // Best I could do.
    1b12:	4b07      	ldr	r3, [pc, #28]	; (1b30 <bme68x_delay__us+0x20>)
    1b14:	4798      	blx	r3
    1b16:	4907      	ldr	r1, [pc, #28]	; (1b34 <bme68x_delay__us+0x24>)
    1b18:	4b07      	ldr	r3, [pc, #28]	; (1b38 <bme68x_delay__us+0x28>)
    1b1a:	4798      	blx	r3
    1b1c:	4b07      	ldr	r3, [pc, #28]	; (1b3c <bme68x_delay__us+0x2c>)
    1b1e:	4798      	blx	r3
    1b20:	21fa      	movs	r1, #250	; 0xfa
    1b22:	0089      	lsls	r1, r1, #2
    1b24:	4348      	muls	r0, r1
    1b26:	4b06      	ldr	r3, [pc, #24]	; (1b40 <bme68x_delay__us+0x30>)
    1b28:	4798      	blx	r3
    1b2a:	4b06      	ldr	r3, [pc, #24]	; (1b44 <bme68x_delay__us+0x34>)
    1b2c:	4798      	blx	r3
}
    1b2e:	bd10      	pop	{r4, pc}
    1b30:	0001688d 	.word	0x0001688d
    1b34:	447a0000 	.word	0x447a0000
    1b38:	00015fa5 	.word	0x00015fa5
    1b3c:	00015c19 	.word	0x00015c19
    1b40:	00015815 	.word	0x00015815
    1b44:	00007cc9 	.word	0x00007cc9

00001b48 <bme68x_set_regs>:
{
    1b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b4a:	46de      	mov	lr, fp
    1b4c:	4657      	mov	r7, sl
    1b4e:	464e      	mov	r6, r9
    1b50:	4645      	mov	r5, r8
    1b52:	b5e0      	push	{r5, r6, r7, lr}
    1b54:	b087      	sub	sp, #28
    1b56:	4681      	mov	r9, r0
    1b58:	468a      	mov	sl, r1
    1b5a:	4690      	mov	r8, r2
    1b5c:	001f      	movs	r7, r3
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
    1b5e:	2214      	movs	r2, #20
    1b60:	2100      	movs	r1, #0
    1b62:	a801      	add	r0, sp, #4
    1b64:	4b2e      	ldr	r3, [pc, #184]	; (1c20 <bme68x_set_regs+0xd8>)
    1b66:	4798      	blx	r3
    rslt = null_ptr_check(dev);
    1b68:	0038      	movs	r0, r7
    1b6a:	4b2e      	ldr	r3, [pc, #184]	; (1c24 <bme68x_set_regs+0xdc>)
    1b6c:	4798      	blx	r3
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
    1b6e:	2800      	cmp	r0, #0
    1b70:	d149      	bne.n	1c06 <bme68x_set_regs+0xbe>
    1b72:	464b      	mov	r3, r9
    1b74:	2b00      	cmp	r3, #0
    1b76:	d049      	beq.n	1c0c <bme68x_set_regs+0xc4>
    1b78:	4653      	mov	r3, sl
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d049      	beq.n	1c12 <bme68x_set_regs+0xca>
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
    1b7e:	4643      	mov	r3, r8
    1b80:	3b01      	subs	r3, #1
    1b82:	2b09      	cmp	r3, #9
    1b84:	d848      	bhi.n	1c18 <bme68x_set_regs+0xd0>
            for (index = 0; index < len; index++)
    1b86:	4643      	mov	r3, r8
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d02b      	beq.n	1be4 <bme68x_set_regs+0x9c>
    1b8c:	2500      	movs	r5, #0
    1b8e:	2400      	movs	r4, #0
                    tmp_buff[(2 * index)] = reg_addr[index];
    1b90:	ae01      	add	r6, sp, #4
    1b92:	e016      	b.n	1bc2 <bme68x_set_regs+0x7a>
                    rslt = set_mem_page(reg_addr[index], dev);
    1b94:	46ab      	mov	fp, r5
    1b96:	44cb      	add	fp, r9
    1b98:	465b      	mov	r3, fp
    1b9a:	7818      	ldrb	r0, [r3, #0]
    1b9c:	0039      	movs	r1, r7
    1b9e:	4b22      	ldr	r3, [pc, #136]	; (1c28 <bme68x_set_regs+0xe0>)
    1ba0:	4798      	blx	r3
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
    1ba2:	0063      	lsls	r3, r4, #1
    1ba4:	465a      	mov	r2, fp
    1ba6:	7812      	ldrb	r2, [r2, #0]
    1ba8:	217f      	movs	r1, #127	; 0x7f
    1baa:	400a      	ands	r2, r1
    1bac:	559a      	strb	r2, [r3, r6]
                tmp_buff[(2 * index) + 1] = reg_data[index];
    1bae:	0063      	lsls	r3, r4, #1
    1bb0:	18f3      	adds	r3, r6, r3
    1bb2:	4652      	mov	r2, sl
    1bb4:	5d52      	ldrb	r2, [r2, r5]
    1bb6:	705a      	strb	r2, [r3, #1]
            for (index = 0; index < len; index++)
    1bb8:	3401      	adds	r4, #1
    1bba:	b2a4      	uxth	r4, r4
    1bbc:	0025      	movs	r5, r4
    1bbe:	45a0      	cmp	r8, r4
    1bc0:	d907      	bls.n	1bd2 <bme68x_set_regs+0x8a>
                if (dev->intf == BME68X_SPI_INTF)
    1bc2:	7b3b      	ldrb	r3, [r7, #12]
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d0e5      	beq.n	1b94 <bme68x_set_regs+0x4c>
                    tmp_buff[(2 * index)] = reg_addr[index];
    1bc8:	0063      	lsls	r3, r4, #1
    1bca:	464a      	mov	r2, r9
    1bcc:	5d52      	ldrb	r2, [r2, r5]
    1bce:	559a      	strb	r2, [r3, r6]
    1bd0:	e7ed      	b.n	1bae <bme68x_set_regs+0x66>
            if (rslt == BME68X_OK)
    1bd2:	2800      	cmp	r0, #0
    1bd4:	d006      	beq.n	1be4 <bme68x_set_regs+0x9c>
}
    1bd6:	b007      	add	sp, #28
    1bd8:	bc3c      	pop	{r2, r3, r4, r5}
    1bda:	4690      	mov	r8, r2
    1bdc:	4699      	mov	r9, r3
    1bde:	46a2      	mov	sl, r4
    1be0:	46ab      	mov	fp, r5
    1be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
    1be4:	4643      	mov	r3, r8
    1be6:	005a      	lsls	r2, r3, #1
    1be8:	3a01      	subs	r2, #1
    1bea:	ab01      	add	r3, sp, #4
    1bec:	7818      	ldrb	r0, [r3, #0]
    1bee:	687b      	ldr	r3, [r7, #4]
    1bf0:	4669      	mov	r1, sp
    1bf2:	3105      	adds	r1, #5
    1bf4:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    1bf6:	47a0      	blx	r4
    1bf8:	224c      	movs	r2, #76	; 0x4c
    1bfa:	54b8      	strb	r0, [r7, r2]
                if (dev->intf_rslt != 0)
    1bfc:	2800      	cmp	r0, #0
    1bfe:	d0ea      	beq.n	1bd6 <bme68x_set_regs+0x8e>
                    rslt = BME68X_E_COM_FAIL;
    1c00:	2002      	movs	r0, #2
    1c02:	4240      	negs	r0, r0
    1c04:	e7e7      	b.n	1bd6 <bme68x_set_regs+0x8e>
        rslt = BME68X_E_NULL_PTR;
    1c06:	2001      	movs	r0, #1
    1c08:	4240      	negs	r0, r0
    1c0a:	e7e4      	b.n	1bd6 <bme68x_set_regs+0x8e>
    1c0c:	2001      	movs	r0, #1
    1c0e:	4240      	negs	r0, r0
    1c10:	e7e1      	b.n	1bd6 <bme68x_set_regs+0x8e>
    1c12:	2001      	movs	r0, #1
    1c14:	4240      	negs	r0, r0
    1c16:	e7de      	b.n	1bd6 <bme68x_set_regs+0x8e>
            rslt = BME68X_E_INVALID_LENGTH;
    1c18:	2004      	movs	r0, #4
    1c1a:	4240      	negs	r0, r0
    1c1c:	e7db      	b.n	1bd6 <bme68x_set_regs+0x8e>
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	00012b83 	.word	0x00012b83
    1c24:	00001971 	.word	0x00001971
    1c28:	0000199d 	.word	0x0000199d

00001c2c <bme68x_get_regs>:
{
    1c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c2e:	b083      	sub	sp, #12
    1c30:	0006      	movs	r6, r0
    1c32:	000d      	movs	r5, r1
    1c34:	9201      	str	r2, [sp, #4]
    1c36:	001f      	movs	r7, r3
    rslt = null_ptr_check(dev);
    1c38:	0018      	movs	r0, r3
    1c3a:	4b14      	ldr	r3, [pc, #80]	; (1c8c <bme68x_get_regs+0x60>)
    1c3c:	4798      	blx	r3
    1c3e:	1e04      	subs	r4, r0, #0
    if ((rslt == BME68X_OK) && reg_data)
    1c40:	d11d      	bne.n	1c7e <bme68x_get_regs+0x52>
    1c42:	2d00      	cmp	r5, #0
    1c44:	d01e      	beq.n	1c84 <bme68x_get_regs+0x58>
        if (dev->intf == BME68X_SPI_INTF)
    1c46:	7b3b      	ldrb	r3, [r7, #12]
    1c48:	2b00      	cmp	r3, #0
    1c4a:	d00c      	beq.n	1c66 <bme68x_get_regs+0x3a>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	9a01      	ldr	r2, [sp, #4]
    1c50:	0029      	movs	r1, r5
    1c52:	0030      	movs	r0, r6
    1c54:	6c3d      	ldr	r5, [r7, #64]	; 0x40
    1c56:	47a8      	blx	r5
    1c58:	234c      	movs	r3, #76	; 0x4c
    1c5a:	54f8      	strb	r0, [r7, r3]
        if (dev->intf_rslt != 0)
    1c5c:	2800      	cmp	r0, #0
    1c5e:	d10b      	bne.n	1c78 <bme68x_get_regs+0x4c>
}
    1c60:	0020      	movs	r0, r4
    1c62:	b003      	add	sp, #12
    1c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rslt = set_mem_page(reg_addr, dev);
    1c66:	0039      	movs	r1, r7
    1c68:	0030      	movs	r0, r6
    1c6a:	4b09      	ldr	r3, [pc, #36]	; (1c90 <bme68x_get_regs+0x64>)
    1c6c:	4798      	blx	r3
    1c6e:	1e04      	subs	r4, r0, #0
            if (rslt == BME68X_OK)
    1c70:	d1ec      	bne.n	1c4c <bme68x_get_regs+0x20>
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
    1c72:	2380      	movs	r3, #128	; 0x80
    1c74:	431e      	orrs	r6, r3
    1c76:	e7e9      	b.n	1c4c <bme68x_get_regs+0x20>
            rslt = BME68X_E_COM_FAIL;
    1c78:	2402      	movs	r4, #2
    1c7a:	4264      	negs	r4, r4
    1c7c:	e7f0      	b.n	1c60 <bme68x_get_regs+0x34>
        rslt = BME68X_E_NULL_PTR;
    1c7e:	2401      	movs	r4, #1
    1c80:	4264      	negs	r4, r4
    1c82:	e7ed      	b.n	1c60 <bme68x_get_regs+0x34>
    1c84:	2401      	movs	r4, #1
    1c86:	4264      	negs	r4, r4
    1c88:	e7ea      	b.n	1c60 <bme68x_get_regs+0x34>
    1c8a:	46c0      	nop			; (mov r8, r8)
    1c8c:	00001971 	.word	0x00001971
    1c90:	0000199d 	.word	0x0000199d

00001c94 <bme68x_soft_reset>:
{
    1c94:	b530      	push	{r4, r5, lr}
    1c96:	b083      	sub	sp, #12
    1c98:	0005      	movs	r5, r0
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
    1c9a:	22e0      	movs	r2, #224	; 0xe0
    1c9c:	466b      	mov	r3, sp
    1c9e:	71da      	strb	r2, [r3, #7]
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
    1ca0:	3a2a      	subs	r2, #42	; 0x2a
    1ca2:	466b      	mov	r3, sp
    1ca4:	719a      	strb	r2, [r3, #6]
    rslt = null_ptr_check(dev);
    1ca6:	4b12      	ldr	r3, [pc, #72]	; (1cf0 <bme68x_soft_reset+0x5c>)
    1ca8:	4798      	blx	r3
    1caa:	1e04      	subs	r4, r0, #0
    if (rslt == BME68X_OK)
    1cac:	d11d      	bne.n	1cea <bme68x_soft_reset+0x56>
        if (dev->intf == BME68X_SPI_INTF)
    1cae:	7b2b      	ldrb	r3, [r5, #12]
    1cb0:	2b00      	cmp	r3, #0
    1cb2:	d015      	beq.n	1ce0 <bme68x_soft_reset+0x4c>
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
    1cb4:	002b      	movs	r3, r5
    1cb6:	2201      	movs	r2, #1
    1cb8:	4669      	mov	r1, sp
    1cba:	3106      	adds	r1, #6
    1cbc:	4668      	mov	r0, sp
    1cbe:	3007      	adds	r0, #7
    1cc0:	4c0c      	ldr	r4, [pc, #48]	; (1cf4 <bme68x_soft_reset+0x60>)
    1cc2:	47a0      	blx	r4
    1cc4:	1e04      	subs	r4, r0, #0
            if (rslt == BME68X_OK)
    1cc6:	d110      	bne.n	1cea <bme68x_soft_reset+0x56>
                dev->delay__us(BME68X_PERIOD_RESET, dev->intf_ptr);
    1cc8:	6869      	ldr	r1, [r5, #4]
    1cca:	480b      	ldr	r0, [pc, #44]	; (1cf8 <bme68x_soft_reset+0x64>)
    1ccc:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1cce:	4798      	blx	r3
                if (dev->intf == BME68X_SPI_INTF)
    1cd0:	7b2b      	ldrb	r3, [r5, #12]
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	d109      	bne.n	1cea <bme68x_soft_reset+0x56>
                    rslt = get_mem_page(dev);
    1cd6:	0028      	movs	r0, r5
    1cd8:	4b08      	ldr	r3, [pc, #32]	; (1cfc <bme68x_soft_reset+0x68>)
    1cda:	4798      	blx	r3
    1cdc:	0004      	movs	r4, r0
    1cde:	e004      	b.n	1cea <bme68x_soft_reset+0x56>
            rslt = get_mem_page(dev);
    1ce0:	0028      	movs	r0, r5
    1ce2:	4b06      	ldr	r3, [pc, #24]	; (1cfc <bme68x_soft_reset+0x68>)
    1ce4:	4798      	blx	r3
    1ce6:	1e04      	subs	r4, r0, #0
        if (rslt == BME68X_OK)
    1ce8:	d0e4      	beq.n	1cb4 <bme68x_soft_reset+0x20>
}
    1cea:	0020      	movs	r0, r4
    1cec:	b003      	add	sp, #12
    1cee:	bd30      	pop	{r4, r5, pc}
    1cf0:	00001971 	.word	0x00001971
    1cf4:	00001b49 	.word	0x00001b49
    1cf8:	00002710 	.word	0x00002710
    1cfc:	00001a0d 	.word	0x00001a0d

00001d00 <bme68x_init>:
{
    1d00:	b570      	push	{r4, r5, r6, lr}
    1d02:	b08c      	sub	sp, #48	; 0x30
    1d04:	0004      	movs	r4, r0
    (void) bme68x_soft_reset(dev);
    1d06:	4b52      	ldr	r3, [pc, #328]	; (1e50 <bme68x_init+0x150>)
    1d08:	4798      	blx	r3
    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
    1d0a:	0023      	movs	r3, r4
    1d0c:	2201      	movs	r2, #1
    1d0e:	0021      	movs	r1, r4
    1d10:	20d0      	movs	r0, #208	; 0xd0
    1d12:	4d50      	ldr	r5, [pc, #320]	; (1e54 <bme68x_init+0x154>)
    1d14:	47a8      	blx	r5
    1d16:	1e05      	subs	r5, r0, #0
    if (rslt == BME68X_OK)
    1d18:	d118      	bne.n	1d4c <bme68x_init+0x4c>
        if (dev->chip_id == BME68X_CHIP_ID)
    1d1a:	7823      	ldrb	r3, [r4, #0]
    1d1c:	2b61      	cmp	r3, #97	; 0x61
    1d1e:	d000      	beq.n	1d22 <bme68x_init+0x22>
    1d20:	e093      	b.n	1e4a <bme68x_init+0x14a>
    uint8_t reg_data = 0;
    1d22:	a901      	add	r1, sp, #4
    1d24:	2300      	movs	r3, #0
    1d26:	700b      	strb	r3, [r1, #0]
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
    1d28:	0023      	movs	r3, r4
    1d2a:	2201      	movs	r2, #1
    1d2c:	20f0      	movs	r0, #240	; 0xf0
    1d2e:	4e49      	ldr	r6, [pc, #292]	; (1e54 <bme68x_init+0x154>)
    1d30:	47b0      	blx	r6
    1d32:	1e06      	subs	r6, r0, #0
    if (rslt == BME68X_OK)
    1d34:	d10a      	bne.n	1d4c <bme68x_init+0x4c>
        dev->variant_id = reg_data;
    1d36:	a901      	add	r1, sp, #4
    1d38:	780b      	ldrb	r3, [r1, #0]
    1d3a:	60a3      	str	r3, [r4, #8]
    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
    1d3c:	0023      	movs	r3, r4
    1d3e:	2217      	movs	r2, #23
    1d40:	208a      	movs	r0, #138	; 0x8a
    1d42:	4d44      	ldr	r5, [pc, #272]	; (1e54 <bme68x_init+0x154>)
    1d44:	47a8      	blx	r5
    if (rslt == BME68X_OK)
    1d46:	2800      	cmp	r0, #0
    1d48:	d003      	beq.n	1d52 <bme68x_init+0x52>
			rslt = BME68X_OK;
    1d4a:	0035      	movs	r5, r6
}
    1d4c:	0028      	movs	r0, r5
    1d4e:	b00c      	add	sp, #48	; 0x30
    1d50:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
    1d52:	0023      	movs	r3, r4
    1d54:	220e      	movs	r2, #14
    1d56:	211b      	movs	r1, #27
    1d58:	4469      	add	r1, sp
    1d5a:	30e1      	adds	r0, #225	; 0xe1
    1d5c:	4d3d      	ldr	r5, [pc, #244]	; (1e54 <bme68x_init+0x154>)
    1d5e:	47a8      	blx	r5
    if (rslt == BME68X_OK)
    1d60:	2800      	cmp	r0, #0
    1d62:	d1f2      	bne.n	1d4a <bme68x_init+0x4a>
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
    1d64:	0023      	movs	r3, r4
    1d66:	2205      	movs	r2, #5
    1d68:	2129      	movs	r1, #41	; 0x29
    1d6a:	4469      	add	r1, sp
    1d6c:	4d39      	ldr	r5, [pc, #228]	; (1e54 <bme68x_init+0x154>)
    1d6e:	47a8      	blx	r5
    if (rslt == BME68X_OK)
    1d70:	2800      	cmp	r0, #0
    1d72:	d1ea      	bne.n	1d4a <bme68x_init+0x4a>
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
    1d74:	ab01      	add	r3, sp, #4
    1d76:	2220      	movs	r2, #32
    1d78:	5c99      	ldrb	r1, [r3, r2]
    1d7a:	0209      	lsls	r1, r1, #8
    1d7c:	7fda      	ldrb	r2, [r3, #31]
    1d7e:	430a      	orrs	r2, r1
        dev->calib.par_t1 =
    1d80:	83e2      	strh	r2, [r4, #30]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
    1d82:	7859      	ldrb	r1, [r3, #1]
    1d84:	0209      	lsls	r1, r1, #8
    1d86:	781a      	ldrb	r2, [r3, #0]
    1d88:	430a      	orrs	r2, r1
        dev->calib.par_t2 =
    1d8a:	8422      	strh	r2, [r4, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
    1d8c:	2522      	movs	r5, #34	; 0x22
    1d8e:	789a      	ldrb	r2, [r3, #2]
    1d90:	5562      	strb	r2, [r4, r5]
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
    1d92:	7959      	ldrb	r1, [r3, #5]
    1d94:	0209      	lsls	r1, r1, #8
    1d96:	791a      	ldrb	r2, [r3, #4]
    1d98:	430a      	orrs	r2, r1
        dev->calib.par_p1 =
    1d9a:	84a2      	strh	r2, [r4, #36]	; 0x24
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
    1d9c:	79d9      	ldrb	r1, [r3, #7]
    1d9e:	0209      	lsls	r1, r1, #8
    1da0:	799a      	ldrb	r2, [r3, #6]
    1da2:	430a      	orrs	r2, r1
        dev->calib.par_p2 =
    1da4:	84e2      	strh	r2, [r4, #38]	; 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
    1da6:	7a19      	ldrb	r1, [r3, #8]
    1da8:	2228      	movs	r2, #40	; 0x28
    1daa:	54a1      	strb	r1, [r4, r2]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
    1dac:	7ad9      	ldrb	r1, [r3, #11]
    1dae:	0209      	lsls	r1, r1, #8
    1db0:	7a9a      	ldrb	r2, [r3, #10]
    1db2:	430a      	orrs	r2, r1
        dev->calib.par_p4 =
    1db4:	8562      	strh	r2, [r4, #42]	; 0x2a
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
    1db6:	7b59      	ldrb	r1, [r3, #13]
    1db8:	0209      	lsls	r1, r1, #8
    1dba:	7b1a      	ldrb	r2, [r3, #12]
    1dbc:	430a      	orrs	r2, r1
        dev->calib.par_p5 =
    1dbe:	85a2      	strh	r2, [r4, #44]	; 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
    1dc0:	7bd9      	ldrb	r1, [r3, #15]
    1dc2:	222e      	movs	r2, #46	; 0x2e
    1dc4:	54a1      	strb	r1, [r4, r2]
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
    1dc6:	7b99      	ldrb	r1, [r3, #14]
    1dc8:	3201      	adds	r2, #1
    1dca:	54a1      	strb	r1, [r4, r2]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
    1dcc:	7cd9      	ldrb	r1, [r3, #19]
    1dce:	0209      	lsls	r1, r1, #8
    1dd0:	7c9a      	ldrb	r2, [r3, #18]
    1dd2:	430a      	orrs	r2, r1
        dev->calib.par_p8 =
    1dd4:	8622      	strh	r2, [r4, #48]	; 0x30
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
    1dd6:	7d59      	ldrb	r1, [r3, #21]
    1dd8:	0209      	lsls	r1, r1, #8
    1dda:	7d1a      	ldrb	r2, [r3, #20]
    1ddc:	430a      	orrs	r2, r1
        dev->calib.par_p9 =
    1dde:	8662      	strh	r2, [r4, #50]	; 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
    1de0:	7d99      	ldrb	r1, [r3, #22]
    1de2:	2234      	movs	r2, #52	; 0x34
    1de4:	54a1      	strb	r1, [r4, r2]
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
    1de6:	7e1a      	ldrb	r2, [r3, #24]
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
    1de8:	7e58      	ldrb	r0, [r3, #25]
    1dea:	0100      	lsls	r0, r0, #4
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
    1dec:	210f      	movs	r1, #15
    1dee:	4011      	ands	r1, r2
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
    1df0:	4301      	orrs	r1, r0
        dev->calib.par_h1 =
    1df2:	8221      	strh	r1, [r4, #16]
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
    1df4:	7dd9      	ldrb	r1, [r3, #23]
    1df6:	0109      	lsls	r1, r1, #4
    1df8:	0912      	lsrs	r2, r2, #4
    1dfa:	430a      	orrs	r2, r1
        dev->calib.par_h2 =
    1dfc:	8262      	strh	r2, [r4, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
    1dfe:	7e9a      	ldrb	r2, [r3, #26]
    1e00:	7522      	strb	r2, [r4, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
    1e02:	7eda      	ldrb	r2, [r3, #27]
    1e04:	7562      	strb	r2, [r4, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
    1e06:	7f1a      	ldrb	r2, [r3, #28]
    1e08:	75a2      	strb	r2, [r4, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
    1e0a:	7f5a      	ldrb	r2, [r3, #29]
    1e0c:	75e2      	strb	r2, [r4, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
    1e0e:	7f9a      	ldrb	r2, [r3, #30]
    1e10:	7622      	strb	r2, [r4, #24]
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
    1e12:	2223      	movs	r2, #35	; 0x23
    1e14:	5c9a      	ldrb	r2, [r3, r2]
    1e16:	7662      	strb	r2, [r4, #25]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
    1e18:	5d59      	ldrb	r1, [r3, r5]
    1e1a:	0209      	lsls	r1, r1, #8
    1e1c:	2221      	movs	r2, #33	; 0x21
    1e1e:	5c9a      	ldrb	r2, [r3, r2]
    1e20:	430a      	orrs	r2, r1
        dev->calib.par_gh2 =
    1e22:	8362      	strh	r2, [r4, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
    1e24:	2224      	movs	r2, #36	; 0x24
    1e26:	5c9a      	ldrb	r2, [r3, r2]
    1e28:	7722      	strb	r2, [r4, #28]
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
    1e2a:	2227      	movs	r2, #39	; 0x27
    1e2c:	5c9a      	ldrb	r2, [r3, r2]
    1e2e:	0692      	lsls	r2, r2, #26
    1e30:	0f92      	lsrs	r2, r2, #30
    1e32:	213c      	movs	r1, #60	; 0x3c
    1e34:	5462      	strb	r2, [r4, r1]
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
    1e36:	2225      	movs	r2, #37	; 0x25
    1e38:	5c99      	ldrb	r1, [r3, r2]
    1e3a:	3218      	adds	r2, #24
    1e3c:	54a1      	strb	r1, [r4, r2]
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
    1e3e:	3a14      	subs	r2, #20
    1e40:	569b      	ldrsb	r3, [r3, r2]
    1e42:	111b      	asrs	r3, r3, #4
    1e44:	3215      	adds	r2, #21
    1e46:	54a3      	strb	r3, [r4, r2]
    1e48:	e77f      	b.n	1d4a <bme68x_init+0x4a>
            rslt = BME68X_E_DEV_NOT_FOUND;
    1e4a:	2503      	movs	r5, #3
    1e4c:	426d      	negs	r5, r5
    1e4e:	e77d      	b.n	1d4c <bme68x_init+0x4c>
    1e50:	00001c95 	.word	0x00001c95
    1e54:	00001c2d 	.word	0x00001c2d

00001e58 <bme68x_set_op_mode>:
{
    1e58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e5a:	46ce      	mov	lr, r9
    1e5c:	4647      	mov	r7, r8
    1e5e:	b580      	push	{r7, lr}
    1e60:	b083      	sub	sp, #12
    1e62:	4681      	mov	r9, r0
    1e64:	000e      	movs	r6, r1
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
    1e66:	2274      	movs	r2, #116	; 0x74
    1e68:	466b      	mov	r3, sp
    1e6a:	719a      	strb	r2, [r3, #6]
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
    1e6c:	466b      	mov	r3, sp
    1e6e:	1ddd      	adds	r5, r3, #7
    1e70:	4f1b      	ldr	r7, [pc, #108]	; (1ee0 <bme68x_set_op_mode+0x88>)
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
    1e72:	4b1c      	ldr	r3, [pc, #112]	; (1ee4 <bme68x_set_op_mode+0x8c>)
    1e74:	4698      	mov	r8, r3
    1e76:	e00f      	b.n	1e98 <bme68x_set_op_mode+0x40>
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
    1e78:	2203      	movs	r2, #3
    1e7a:	4393      	bics	r3, r2
    1e7c:	702b      	strb	r3, [r5, #0]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
    1e7e:	0033      	movs	r3, r6
    1e80:	3a02      	subs	r2, #2
    1e82:	0029      	movs	r1, r5
    1e84:	4668      	mov	r0, sp
    1e86:	3006      	adds	r0, #6
    1e88:	47c0      	blx	r8
    1e8a:	0004      	movs	r4, r0
                dev->delay__us(BME68X_PERIOD_POLL, dev->intf_ptr);
    1e8c:	6871      	ldr	r1, [r6, #4]
    1e8e:	4816      	ldr	r0, [pc, #88]	; (1ee8 <bme68x_set_op_mode+0x90>)
    1e90:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    1e92:	4798      	blx	r3
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
    1e94:	2c00      	cmp	r4, #0
    1e96:	d11c      	bne.n	1ed2 <bme68x_set_op_mode+0x7a>
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
    1e98:	0033      	movs	r3, r6
    1e9a:	2201      	movs	r2, #1
    1e9c:	0029      	movs	r1, r5
    1e9e:	2074      	movs	r0, #116	; 0x74
    1ea0:	47b8      	blx	r7
    1ea2:	1e04      	subs	r4, r0, #0
        if (rslt == BME68X_OK)
    1ea4:	d115      	bne.n	1ed2 <bme68x_set_op_mode+0x7a>
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
    1ea6:	782b      	ldrb	r3, [r5, #0]
            if (pow_mode != BME68X_SLEEP_MODE)
    1ea8:	079a      	lsls	r2, r3, #30
    1eaa:	d1e5      	bne.n	1e78 <bme68x_set_op_mode+0x20>
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
    1eac:	464b      	mov	r3, r9
    1eae:	2b00      	cmp	r3, #0
    1eb0:	d00f      	beq.n	1ed2 <bme68x_set_op_mode+0x7a>
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
    1eb2:	466b      	mov	r3, sp
    1eb4:	1dd9      	adds	r1, r3, #7
    1eb6:	780b      	ldrb	r3, [r1, #0]
    1eb8:	2203      	movs	r2, #3
    1eba:	4393      	bics	r3, r2
    1ebc:	4648      	mov	r0, r9
    1ebe:	4002      	ands	r2, r0
    1ec0:	4313      	orrs	r3, r2
    1ec2:	700b      	strb	r3, [r1, #0]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
    1ec4:	0033      	movs	r3, r6
    1ec6:	2201      	movs	r2, #1
    1ec8:	4668      	mov	r0, sp
    1eca:	3006      	adds	r0, #6
    1ecc:	4c05      	ldr	r4, [pc, #20]	; (1ee4 <bme68x_set_op_mode+0x8c>)
    1ece:	47a0      	blx	r4
    1ed0:	0004      	movs	r4, r0
}
    1ed2:	0020      	movs	r0, r4
    1ed4:	b003      	add	sp, #12
    1ed6:	bc0c      	pop	{r2, r3}
    1ed8:	4690      	mov	r8, r2
    1eda:	4699      	mov	r9, r3
    1edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ede:	46c0      	nop			; (mov r8, r8)
    1ee0:	00001c2d 	.word	0x00001c2d
    1ee4:	00001b49 	.word	0x00001b49
    1ee8:	00002710 	.word	0x00002710

00001eec <bme68x_get_op_mode>:
{
    1eec:	b570      	push	{r4, r5, r6, lr}
    1eee:	b082      	sub	sp, #8
    1ef0:	1e04      	subs	r4, r0, #0
    if (op_mode)
    1ef2:	d00d      	beq.n	1f10 <bme68x_get_op_mode+0x24>
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
    1ef4:	466b      	mov	r3, sp
    1ef6:	1ddd      	adds	r5, r3, #7
    1ef8:	000b      	movs	r3, r1
    1efa:	2201      	movs	r2, #1
    1efc:	0029      	movs	r1, r5
    1efe:	2074      	movs	r0, #116	; 0x74
    1f00:	4e05      	ldr	r6, [pc, #20]	; (1f18 <bme68x_get_op_mode+0x2c>)
    1f02:	47b0      	blx	r6
        *op_mode = mode & BME68X_MODE_MSK;
    1f04:	782a      	ldrb	r2, [r5, #0]
    1f06:	2303      	movs	r3, #3
    1f08:	4013      	ands	r3, r2
    1f0a:	7023      	strb	r3, [r4, #0]
}
    1f0c:	b002      	add	sp, #8
    1f0e:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BME68X_E_NULL_PTR;
    1f10:	2001      	movs	r0, #1
    1f12:	4240      	negs	r0, r0
    1f14:	e7fa      	b.n	1f0c <bme68x_get_op_mode+0x20>
    1f16:	46c0      	nop			; (mov r8, r8)
    1f18:	00001c2d 	.word	0x00001c2d

00001f1c <bme68x_set_conf>:
{
    1f1c:	b570      	push	{r4, r5, r6, lr}
    1f1e:	b084      	sub	sp, #16
    1f20:	0005      	movs	r5, r0
    1f22:	000c      	movs	r4, r1
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
    1f24:	4b4b      	ldr	r3, [pc, #300]	; (2054 <STACK_SIZE+0x54>)
    1f26:	681a      	ldr	r2, [r3, #0]
    1f28:	9202      	str	r2, [sp, #8]
    1f2a:	791a      	ldrb	r2, [r3, #4]
    1f2c:	ab02      	add	r3, sp, #8
    1f2e:	711a      	strb	r2, [r3, #4]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
    1f30:	2205      	movs	r2, #5
    1f32:	2100      	movs	r1, #0
    1f34:	4668      	mov	r0, sp
    1f36:	4b48      	ldr	r3, [pc, #288]	; (2058 <STACK_SIZE+0x58>)
    1f38:	4798      	blx	r3
    rslt = bme68x_get_op_mode(&current_op_mode, dev);
    1f3a:	0021      	movs	r1, r4
    1f3c:	200f      	movs	r0, #15
    1f3e:	4468      	add	r0, sp
    1f40:	4b46      	ldr	r3, [pc, #280]	; (205c <STACK_SIZE+0x5c>)
    1f42:	4798      	blx	r3
    if (rslt == BME68X_OK)
    1f44:	2800      	cmp	r0, #0
    1f46:	d00e      	beq.n	1f66 <bme68x_set_conf+0x4a>
    if (conf == NULL)
    1f48:	2d00      	cmp	r5, #0
    1f4a:	d100      	bne.n	1f4e <bme68x_set_conf+0x32>
    1f4c:	e07f      	b.n	204e <STACK_SIZE+0x4e>
    else if (rslt == BME68X_OK)
    1f4e:	2800      	cmp	r0, #0
    1f50:	d00d      	beq.n	1f6e <bme68x_set_conf+0x52>
    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
    1f52:	230f      	movs	r3, #15
    1f54:	446b      	add	r3, sp
    1f56:	781b      	ldrb	r3, [r3, #0]
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d002      	beq.n	1f62 <bme68x_set_conf+0x46>
    1f5c:	2800      	cmp	r0, #0
    1f5e:	d100      	bne.n	1f62 <bme68x_set_conf+0x46>
    1f60:	e070      	b.n	2044 <STACK_SIZE+0x44>
}
    1f62:	b004      	add	sp, #16
    1f64:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
    1f66:	0021      	movs	r1, r4
    1f68:	4b3d      	ldr	r3, [pc, #244]	; (2060 <STACK_SIZE+0x60>)
    1f6a:	4798      	blx	r3
    1f6c:	e7ec      	b.n	1f48 <bme68x_set_conf+0x2c>
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
    1f6e:	ab02      	add	r3, sp, #8
    1f70:	7818      	ldrb	r0, [r3, #0]
    1f72:	0023      	movs	r3, r4
    1f74:	2205      	movs	r2, #5
    1f76:	4669      	mov	r1, sp
    1f78:	4e3a      	ldr	r6, [pc, #232]	; (2064 <STACK_SIZE+0x64>)
    1f7a:	47b0      	blx	r6
        dev->info_msg = BME68X_OK;
    1f7c:	2200      	movs	r2, #0
    1f7e:	234d      	movs	r3, #77	; 0x4d
    1f80:	54e2      	strb	r2, [r4, r3]
        if (rslt == BME68X_OK)
    1f82:	2800      	cmp	r0, #0
    1f84:	d03f      	beq.n	2006 <STACK_SIZE+0x6>
        if (rslt == BME68X_OK)
    1f86:	2800      	cmp	r0, #0
    1f88:	d1eb      	bne.n	1f62 <bme68x_set_conf+0x46>
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
    1f8a:	1d28      	adds	r0, r5, #4
    1f8c:	0022      	movs	r2, r4
    1f8e:	2108      	movs	r1, #8
    1f90:	4b35      	ldr	r3, [pc, #212]	; (2068 <STACK_SIZE+0x68>)
    1f92:	4798      	blx	r3
        if (rslt == BME68X_OK)
    1f94:	2800      	cmp	r0, #0
    1f96:	d1dc      	bne.n	1f52 <bme68x_set_conf+0x36>
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
    1f98:	78ea      	ldrb	r2, [r5, #3]
    1f9a:	0092      	lsls	r2, r2, #2
    1f9c:	261c      	movs	r6, #28
    1f9e:	301c      	adds	r0, #28
    1fa0:	4002      	ands	r2, r0
    1fa2:	466b      	mov	r3, sp
    1fa4:	7919      	ldrb	r1, [r3, #4]
    1fa6:	43b1      	bics	r1, r6
    1fa8:	4311      	orrs	r1, r2
    1faa:	b249      	sxtb	r1, r1
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
    1fac:	78da      	ldrb	r2, [r3, #3]
    1fae:	231f      	movs	r3, #31
    1fb0:	4013      	ands	r3, r2
    1fb2:	786a      	ldrb	r2, [r5, #1]
    1fb4:	0152      	lsls	r2, r2, #5
    1fb6:	4313      	orrs	r3, r2
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
    1fb8:	43b3      	bics	r3, r6
    1fba:	78aa      	ldrb	r2, [r5, #2]
    1fbc:	0092      	lsls	r2, r2, #2
    1fbe:	4010      	ands	r0, r2
    1fc0:	4303      	orrs	r3, r0
    1fc2:	466a      	mov	r2, sp
    1fc4:	70d3      	strb	r3, [r2, #3]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
    1fc6:	7853      	ldrb	r3, [r2, #1]
    1fc8:	2207      	movs	r2, #7
    1fca:	4393      	bics	r3, r2
    1fcc:	7828      	ldrb	r0, [r5, #0]
    1fce:	4002      	ands	r2, r0
    1fd0:	4313      	orrs	r3, r2
    1fd2:	466a      	mov	r2, sp
    1fd4:	7053      	strb	r3, [r2, #1]
            if (conf->odr != BME68X_ODR_NONE)
    1fd6:	7928      	ldrb	r0, [r5, #4]
    1fd8:	2808      	cmp	r0, #8
    1fda:	d030      	beq.n	203e <STACK_SIZE+0x3e>
                odr3 = 0;
    1fdc:	2500      	movs	r5, #0
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
    1fde:	221f      	movs	r2, #31
    1fe0:	400a      	ands	r2, r1
    1fe2:	0140      	lsls	r0, r0, #5
    1fe4:	4302      	orrs	r2, r0
    1fe6:	466b      	mov	r3, sp
    1fe8:	711a      	strb	r2, [r3, #4]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
    1fea:	781a      	ldrb	r2, [r3, #0]
    1fec:	237f      	movs	r3, #127	; 0x7f
    1fee:	4013      	ands	r3, r2
    1ff0:	01ed      	lsls	r5, r5, #7
    1ff2:	432b      	orrs	r3, r5
    1ff4:	466a      	mov	r2, sp
    1ff6:	7013      	strb	r3, [r2, #0]
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
    1ff8:	0023      	movs	r3, r4
    1ffa:	2205      	movs	r2, #5
    1ffc:	4669      	mov	r1, sp
    1ffe:	a802      	add	r0, sp, #8
    2000:	4d1a      	ldr	r5, [pc, #104]	; (206c <STACK_SIZE+0x6c>)
    2002:	47a8      	blx	r5
    2004:	e7a5      	b.n	1f52 <bme68x_set_conf+0x36>
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
    2006:	1ce8      	adds	r0, r5, #3
    2008:	0022      	movs	r2, r4
    200a:	2107      	movs	r1, #7
    200c:	4b16      	ldr	r3, [pc, #88]	; (2068 <STACK_SIZE+0x68>)
    200e:	4798      	blx	r3
        if (rslt == BME68X_OK)
    2010:	2800      	cmp	r0, #0
    2012:	d1bf      	bne.n	1f94 <bme68x_set_conf+0x78>
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
    2014:	1c68      	adds	r0, r5, #1
    2016:	0022      	movs	r2, r4
    2018:	2105      	movs	r1, #5
    201a:	4b13      	ldr	r3, [pc, #76]	; (2068 <STACK_SIZE+0x68>)
    201c:	4798      	blx	r3
        if (rslt == BME68X_OK)
    201e:	2800      	cmp	r0, #0
    2020:	d1b1      	bne.n	1f86 <bme68x_set_conf+0x6a>
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
    2022:	1ca8      	adds	r0, r5, #2
    2024:	0022      	movs	r2, r4
    2026:	2105      	movs	r1, #5
    2028:	4b0f      	ldr	r3, [pc, #60]	; (2068 <STACK_SIZE+0x68>)
    202a:	4798      	blx	r3
        if (rslt == BME68X_OK)
    202c:	2800      	cmp	r0, #0
    202e:	d000      	beq.n	2032 <STACK_SIZE+0x32>
    2030:	e78f      	b.n	1f52 <bme68x_set_conf+0x36>
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
    2032:	0022      	movs	r2, r4
    2034:	2105      	movs	r1, #5
    2036:	0028      	movs	r0, r5
    2038:	4b0b      	ldr	r3, [pc, #44]	; (2068 <STACK_SIZE+0x68>)
    203a:	4798      	blx	r3
    203c:	e7a3      	b.n	1f86 <bme68x_set_conf+0x6a>
    uint8_t odr20 = 0, odr3 = 1;
    203e:	2501      	movs	r5, #1
    2040:	2000      	movs	r0, #0
    2042:	e7cc      	b.n	1fde <bme68x_set_conf+0xc2>
        rslt = bme68x_set_op_mode(current_op_mode, dev);
    2044:	0021      	movs	r1, r4
    2046:	0018      	movs	r0, r3
    2048:	4b05      	ldr	r3, [pc, #20]	; (2060 <STACK_SIZE+0x60>)
    204a:	4798      	blx	r3
    return rslt;
    204c:	e789      	b.n	1f62 <bme68x_set_conf+0x46>
        rslt = BME68X_E_NULL_PTR;
    204e:	2001      	movs	r0, #1
    2050:	4240      	negs	r0, r0
    2052:	e77e      	b.n	1f52 <bme68x_set_conf+0x36>
    2054:	000192c0 	.word	0x000192c0
    2058:	00012b83 	.word	0x00012b83
    205c:	00001eed 	.word	0x00001eed
    2060:	00001e59 	.word	0x00001e59
    2064:	00001c2d 	.word	0x00001c2d
    2068:	00001a4d 	.word	0x00001a4d
    206c:	00001b49 	.word	0x00001b49

00002070 <bme68x_get_data>:
{
    2070:	b5f0      	push	{r4, r5, r6, r7, lr}
    2072:	46de      	mov	lr, fp
    2074:	4657      	mov	r7, sl
    2076:	464e      	mov	r6, r9
    2078:	4645      	mov	r5, r8
    207a:	b5e0      	push	{r5, r6, r7, lr}
    207c:	b0af      	sub	sp, #188	; 0xbc
    207e:	0005      	movs	r5, r0
    2080:	4689      	mov	r9, r1
    2082:	4692      	mov	sl, r2
    2084:	4698      	mov	r8, r3
    struct bme68x_data *field_ptr[3] = { 0 };
    2086:	220c      	movs	r2, #12
    2088:	2100      	movs	r1, #0
    208a:	a82b      	add	r0, sp, #172	; 0xac
    208c:	4ed5      	ldr	r6, [pc, #852]	; (23e4 <bme68x_get_data+0x374>)
    208e:	47b0      	blx	r6
    struct bme68x_data field_data[3] = { { 0 } };
    2090:	ac1c      	add	r4, sp, #112	; 0x70
    2092:	223c      	movs	r2, #60	; 0x3c
    2094:	2100      	movs	r1, #0
    2096:	0020      	movs	r0, r4
    2098:	47b0      	blx	r6
    field_ptr[0] = &field_data[0];
    209a:	942b      	str	r4, [sp, #172]	; 0xac
    field_ptr[1] = &field_data[1];
    209c:	ab21      	add	r3, sp, #132	; 0x84
    209e:	932c      	str	r3, [sp, #176]	; 0xb0
    field_ptr[2] = &field_data[2];
    20a0:	ab26      	add	r3, sp, #152	; 0x98
    20a2:	932d      	str	r3, [sp, #180]	; 0xb4
    rslt = null_ptr_check(dev);
    20a4:	4640      	mov	r0, r8
    20a6:	4bd0      	ldr	r3, [pc, #832]	; (23e8 <bme68x_get_data+0x378>)
    20a8:	4798      	blx	r3
    if ((rslt == BME68X_OK) && (data != NULL))
    20aa:	2800      	cmp	r0, #0
    20ac:	d000      	beq.n	20b0 <bme68x_get_data+0x40>
    20ae:	e1d2      	b.n	2456 <bme68x_get_data+0x3e6>
    20b0:	464b      	mov	r3, r9
    20b2:	2b00      	cmp	r3, #0
    20b4:	d100      	bne.n	20b8 <bme68x_get_data+0x48>
    20b6:	e1d2      	b.n	245e <bme68x_get_data+0x3ee>
        if (op_mode == BME68X_FORCED_MODE)
    20b8:	2d01      	cmp	r5, #1
    20ba:	d013      	beq.n	20e4 <bme68x_get_data+0x74>
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
    20bc:	3d02      	subs	r5, #2
    20be:	2d01      	cmp	r5, #1
    20c0:	d800      	bhi.n	20c4 <bme68x_get_data+0x54>
    20c2:	e0a5      	b.n	2210 <bme68x_get_data+0x1a0>
    uint8_t i = 0, j = 0, new_fields = 0;
    20c4:	2500      	movs	r5, #0
            rslt = BME68X_W_DEFINE_OP_MODE;
    20c6:	2301      	movs	r3, #1
    20c8:	9300      	str	r3, [sp, #0]
        if (n_data == NULL)
    20ca:	4653      	mov	r3, sl
    20cc:	2b00      	cmp	r3, #0
    20ce:	d100      	bne.n	20d2 <bme68x_get_data+0x62>
    20d0:	e1c9      	b.n	2466 <bme68x_get_data+0x3f6>
            *n_data = new_fields;
    20d2:	701d      	strb	r5, [r3, #0]
}
    20d4:	9800      	ldr	r0, [sp, #0]
    20d6:	b02f      	add	sp, #188	; 0xbc
    20d8:	bc3c      	pop	{r2, r3, r4, r5}
    20da:	4690      	mov	r8, r2
    20dc:	4699      	mov	r9, r3
    20de:	46a2      	mov	sl, r4
    20e0:	46ab      	mov	fp, r5
    20e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
    20e4:	ac0f      	add	r4, sp, #60	; 0x3c
    20e6:	2211      	movs	r2, #17
    20e8:	2100      	movs	r1, #0
    20ea:	0020      	movs	r0, r4
    20ec:	4bbd      	ldr	r3, [pc, #756]	; (23e4 <bme68x_get_data+0x374>)
    20ee:	4798      	blx	r3
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
    20f0:	4643      	mov	r3, r8
    20f2:	2211      	movs	r2, #17
    20f4:	0021      	movs	r1, r4
    20f6:	201d      	movs	r0, #29
    20f8:	4ebc      	ldr	r6, [pc, #752]	; (23ec <bme68x_get_data+0x37c>)
    20fa:	47b0      	blx	r6
    20fc:	9000      	str	r0, [sp, #0]
        data->status = buff[0] & BME68X_NEW_DATA_MSK;
    20fe:	7823      	ldrb	r3, [r4, #0]
    2100:	227f      	movs	r2, #127	; 0x7f
    2102:	001f      	movs	r7, r3
    2104:	4397      	bics	r7, r2
    2106:	464a      	mov	r2, r9
    2108:	7017      	strb	r7, [r2, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
    210a:	210f      	movs	r1, #15
    210c:	400b      	ands	r3, r1
    210e:	7053      	strb	r3, [r2, #1]
        data->meas_index = buff[1];
    2110:	7863      	ldrb	r3, [r4, #1]
    2112:	7093      	strb	r3, [r2, #2]
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
    2114:	78a6      	ldrb	r6, [r4, #2]
    2116:	0336      	lsls	r6, r6, #12
    2118:	78e3      	ldrb	r3, [r4, #3]
    211a:	011b      	lsls	r3, r3, #4
    211c:	431e      	orrs	r6, r3
    211e:	7923      	ldrb	r3, [r4, #4]
    2120:	091b      	lsrs	r3, r3, #4
    2122:	431e      	orrs	r6, r3
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
    2124:	7960      	ldrb	r0, [r4, #5]
    2126:	0300      	lsls	r0, r0, #12
    2128:	79a3      	ldrb	r3, [r4, #6]
    212a:	011b      	lsls	r3, r3, #4
    212c:	4318      	orrs	r0, r3
    212e:	79e3      	ldrb	r3, [r4, #7]
    2130:	091b      	lsrs	r3, r3, #4
    2132:	4318      	orrs	r0, r3
    2134:	9001      	str	r0, [sp, #4]
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
    2136:	7a23      	ldrb	r3, [r4, #8]
    2138:	021b      	lsls	r3, r3, #8
    213a:	7a62      	ldrb	r2, [r4, #9]
    213c:	431a      	orrs	r2, r3
    213e:	9202      	str	r2, [sp, #8]
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
    2140:	7ba3      	ldrb	r3, [r4, #14]
    2142:	7b62      	ldrb	r2, [r4, #13]
    2144:	0092      	lsls	r2, r2, #2
    2146:	0998      	lsrs	r0, r3, #6
    2148:	4310      	orrs	r0, r2
    214a:	9003      	str	r0, [sp, #12]
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
    214c:	7be2      	ldrb	r2, [r4, #15]
    214e:	4693      	mov	fp, r2
    2150:	7c24      	ldrb	r4, [r4, #16]
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
    2152:	4019      	ands	r1, r3
    2154:	9104      	str	r1, [sp, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
    2156:	4642      	mov	r2, r8
    2158:	6892      	ldr	r2, [r2, #8]
    215a:	2a01      	cmp	r2, #1
    215c:	d032      	beq.n	21c4 <bme68x_get_data+0x154>
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
    215e:	b25b      	sxtb	r3, r3
    2160:	2220      	movs	r2, #32
    2162:	401a      	ands	r2, r3
    2164:	4317      	orrs	r7, r2
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
    2166:	2210      	movs	r2, #16
    2168:	4013      	ands	r3, r2
    216a:	431f      	orrs	r7, r3
    216c:	464b      	mov	r3, r9
    216e:	701f      	strb	r7, [r3, #0]
                data->temperature = calc_temperature(adc_temp, dev);
    2170:	4641      	mov	r1, r8
    2172:	9801      	ldr	r0, [sp, #4]
    2174:	4b9e      	ldr	r3, [pc, #632]	; (23f0 <bme68x_get_data+0x380>)
    2176:	4798      	blx	r3
    2178:	464b      	mov	r3, r9
    217a:	80d8      	strh	r0, [r3, #6]
                data->pressure = calc_pressure(adc_pres, dev);
    217c:	4641      	mov	r1, r8
    217e:	0030      	movs	r0, r6
    2180:	4b9c      	ldr	r3, [pc, #624]	; (23f4 <bme68x_get_data+0x384>)
    2182:	4798      	blx	r3
    2184:	464b      	mov	r3, r9
    2186:	6098      	str	r0, [r3, #8]
                data->humidity = calc_humidity(adc_hum, dev);
    2188:	4641      	mov	r1, r8
    218a:	9802      	ldr	r0, [sp, #8]
    218c:	4b9a      	ldr	r3, [pc, #616]	; (23f8 <bme68x_get_data+0x388>)
    218e:	4798      	blx	r3
    2190:	464b      	mov	r3, r9
    2192:	60d8      	str	r0, [r3, #12]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
    2194:	4643      	mov	r3, r8
    2196:	689b      	ldr	r3, [r3, #8]
    2198:	2b01      	cmp	r3, #1
    219a:	d01d      	beq.n	21d8 <bme68x_get_data+0x168>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
    219c:	4642      	mov	r2, r8
    219e:	9904      	ldr	r1, [sp, #16]
    21a0:	9803      	ldr	r0, [sp, #12]
    21a2:	4b96      	ldr	r3, [pc, #600]	; (23fc <bme68x_get_data+0x38c>)
    21a4:	4798      	blx	r3
    21a6:	464b      	mov	r3, r9
    21a8:	6118      	str	r0, [r3, #16]
            if (rslt == BME68X_OK)
    21aa:	9b00      	ldr	r3, [sp, #0]
    21ac:	2b00      	cmp	r3, #0
    21ae:	d000      	beq.n	21b2 <bme68x_get_data+0x142>
    21b0:	e14f      	b.n	2452 <bme68x_get_data+0x3e2>
                if (data->status & BME68X_NEW_DATA_MSK)
    21b2:	464b      	mov	r3, r9
    21b4:	781b      	ldrb	r3, [r3, #0]
    21b6:	2b7f      	cmp	r3, #127	; 0x7f
    21b8:	d900      	bls.n	21bc <bme68x_get_data+0x14c>
    21ba:	e786      	b.n	20ca <bme68x_get_data+0x5a>
                    new_fields = 0;
    21bc:	2500      	movs	r5, #0
                    rslt = BME68X_W_NO_NEW_DATA;
    21be:	2302      	movs	r3, #2
    21c0:	9300      	str	r3, [sp, #0]
    21c2:	e782      	b.n	20ca <bme68x_get_data+0x5a>
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
    21c4:	b262      	sxtb	r2, r4
    21c6:	2320      	movs	r3, #32
    21c8:	4013      	ands	r3, r2
    21ca:	431f      	orrs	r7, r3
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
    21cc:	2310      	movs	r3, #16
    21ce:	401a      	ands	r2, r3
    21d0:	4317      	orrs	r7, r2
    21d2:	464b      	mov	r3, r9
    21d4:	701f      	strb	r7, [r3, #0]
    21d6:	e7cb      	b.n	2170 <bme68x_get_data+0x100>
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
    21d8:	465b      	mov	r3, fp
    21da:	009b      	lsls	r3, r3, #2
    21dc:	09a2      	lsrs	r2, r4, #6
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
    21de:	4313      	orrs	r3, r2
    21e0:	4a87      	ldr	r2, [pc, #540]	; (2400 <bme68x_get_data+0x390>)
    21e2:	4694      	mov	ip, r2
    21e4:	4463      	add	r3, ip
    var2 *= INT32_C(3);
    21e6:	0059      	lsls	r1, r3, #1
    21e8:	18c9      	adds	r1, r1, r3
    uint32_t var1 = UINT32_C(262144) >> gas_range;
    21ea:	220f      	movs	r2, #15
    21ec:	4022      	ands	r2, r4
    21ee:	2080      	movs	r0, #128	; 0x80
    21f0:	02c0      	lsls	r0, r0, #11
    21f2:	40d0      	lsrs	r0, r2
    21f4:	0002      	movs	r2, r0
    calc_gas_res = (UINT32_C(10000) * var1) / (uint32_t)var2;
    21f6:	4883      	ldr	r0, [pc, #524]	; (2404 <bme68x_get_data+0x394>)
    21f8:	4350      	muls	r0, r2
    var2 = INT32_C(4096) + var2;
    21fa:	2380      	movs	r3, #128	; 0x80
    21fc:	015b      	lsls	r3, r3, #5
    21fe:	469c      	mov	ip, r3
    2200:	4461      	add	r1, ip
    calc_gas_res = (UINT32_C(10000) * var1) / (uint32_t)var2;
    2202:	4b81      	ldr	r3, [pc, #516]	; (2408 <bme68x_get_data+0x398>)
    2204:	4798      	blx	r3
    calc_gas_res = calc_gas_res * 100;
    2206:	2364      	movs	r3, #100	; 0x64
    2208:	4358      	muls	r0, r3
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
    220a:	464b      	mov	r3, r9
    220c:	6118      	str	r0, [r3, #16]
    220e:	e7cc      	b.n	21aa <bme68x_get_data+0x13a>
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
    2210:	2233      	movs	r2, #51	; 0x33
    2212:	2100      	movs	r1, #0
    2214:	a80f      	add	r0, sp, #60	; 0x3c
    2216:	4c73      	ldr	r4, [pc, #460]	; (23e4 <bme68x_get_data+0x374>)
    2218:	47a0      	blx	r4
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
    221a:	221e      	movs	r2, #30
    221c:	2100      	movs	r1, #0
    221e:	a807      	add	r0, sp, #28
    2220:	47a0      	blx	r4
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
    2222:	4643      	mov	r3, r8
    2224:	2233      	movs	r2, #51	; 0x33
    2226:	a90f      	add	r1, sp, #60	; 0x3c
    2228:	201d      	movs	r0, #29
    222a:	4c70      	ldr	r4, [pc, #448]	; (23ec <bme68x_get_data+0x37c>)
    222c:	47a0      	blx	r4
    222e:	9000      	str	r0, [sp, #0]
    if (rslt == BME68X_OK)
    2230:	2800      	cmp	r0, #0
    2232:	d00a      	beq.n	224a <bme68x_get_data+0x1da>
            new_fields = 0;
    2234:	2500      	movs	r5, #0
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
    2236:	9b00      	ldr	r3, [sp, #0]
    2238:	2b00      	cmp	r3, #0
    223a:	d000      	beq.n	223e <bme68x_get_data+0x1ce>
    223c:	e103      	b.n	2446 <bme68x_get_data+0x3d6>
    223e:	ae2b      	add	r6, sp, #172	; 0xac
    2240:	2300      	movs	r3, #0
    2242:	469c      	mov	ip, r3
    2244:	46e3      	mov	fp, ip
    2246:	46ac      	mov	ip, r5
    2248:	e0e4      	b.n	2414 <bme68x_get_data+0x3a4>
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
    224a:	4643      	mov	r3, r8
    224c:	221e      	movs	r2, #30
    224e:	a907      	add	r1, sp, #28
    2250:	2050      	movs	r0, #80	; 0x50
    2252:	4c66      	ldr	r4, [pc, #408]	; (23ec <bme68x_get_data+0x37c>)
    2254:	47a0      	blx	r4
    2256:	9000      	str	r0, [sp, #0]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
    2258:	2800      	cmp	r0, #0
    225a:	d000      	beq.n	225e <bme68x_get_data+0x1ee>
    225c:	e107      	b.n	246e <bme68x_get_data+0x3fe>
    225e:	ac0f      	add	r4, sp, #60	; 0x3c
    2260:	4683      	mov	fp, r0
        data[i]->humidity = calc_humidity(adc_hum, dev);
    2262:	4653      	mov	r3, sl
    2264:	9305      	str	r3, [sp, #20]
    2266:	e02c      	b.n	22c2 <bme68x_get_data+0x252>
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
    2268:	466b      	mov	r3, sp
    226a:	7b1b      	ldrb	r3, [r3, #12]
    226c:	b25b      	sxtb	r3, r3
    226e:	2620      	movs	r6, #32
    2270:	401e      	ands	r6, r3
    2272:	4331      	orrs	r1, r6
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
    2274:	2610      	movs	r6, #16
    2276:	4033      	ands	r3, r6
    2278:	4319      	orrs	r1, r3
    227a:	7029      	strb	r1, [r5, #0]
    227c:	e057      	b.n	232e <bme68x_get_data+0x2be>
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
    227e:	9b04      	ldr	r3, [sp, #16]
    2280:	009b      	lsls	r3, r3, #2
    2282:	9a03      	ldr	r2, [sp, #12]
    2284:	0991      	lsrs	r1, r2, #6
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
    2286:	4319      	orrs	r1, r3
    2288:	4b5d      	ldr	r3, [pc, #372]	; (2400 <bme68x_get_data+0x390>)
    228a:	469c      	mov	ip, r3
    228c:	4461      	add	r1, ip
    var2 *= INT32_C(3);
    228e:	004b      	lsls	r3, r1, #1
    2290:	1859      	adds	r1, r3, r1
    uint32_t var1 = UINT32_C(262144) >> gas_range;
    2292:	230f      	movs	r3, #15
    2294:	4013      	ands	r3, r2
    2296:	2080      	movs	r0, #128	; 0x80
    2298:	02c0      	lsls	r0, r0, #11
    229a:	40d8      	lsrs	r0, r3
    229c:	0003      	movs	r3, r0
    calc_gas_res = (UINT32_C(10000) * var1) / (uint32_t)var2;
    229e:	4859      	ldr	r0, [pc, #356]	; (2404 <bme68x_get_data+0x394>)
    22a0:	4358      	muls	r0, r3
    var2 = INT32_C(4096) + var2;
    22a2:	2380      	movs	r3, #128	; 0x80
    22a4:	015b      	lsls	r3, r3, #5
    22a6:	469c      	mov	ip, r3
    22a8:	4461      	add	r1, ip
    calc_gas_res = (UINT32_C(10000) * var1) / (uint32_t)var2;
    22aa:	4b57      	ldr	r3, [pc, #348]	; (2408 <bme68x_get_data+0x398>)
    22ac:	4798      	blx	r3
    calc_gas_res = calc_gas_res * 100;
    22ae:	2364      	movs	r3, #100	; 0x64
    22b0:	4358      	muls	r0, r3
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
    22b2:	6128      	str	r0, [r5, #16]
    22b4:	3411      	adds	r4, #17
    22b6:	2304      	movs	r3, #4
    22b8:	469c      	mov	ip, r3
    22ba:	44e3      	add	fp, ip
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
    22bc:	465b      	mov	r3, fp
    22be:	2b0c      	cmp	r3, #12
    22c0:	d05a      	beq.n	2378 <bme68x_get_data+0x308>
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
    22c2:	ab2b      	add	r3, sp, #172	; 0xac
    22c4:	465a      	mov	r2, fp
    22c6:	58d5      	ldr	r5, [r2, r3]
    22c8:	7823      	ldrb	r3, [r4, #0]
    22ca:	227f      	movs	r2, #127	; 0x7f
    22cc:	0019      	movs	r1, r3
    22ce:	4391      	bics	r1, r2
    22d0:	7029      	strb	r1, [r5, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
    22d2:	3a70      	subs	r2, #112	; 0x70
    22d4:	401a      	ands	r2, r3
    22d6:	706a      	strb	r2, [r5, #1]
        data[i]->meas_index = buff[off + 1];
    22d8:	7863      	ldrb	r3, [r4, #1]
    22da:	70ab      	strb	r3, [r5, #2]
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
    22dc:	78a6      	ldrb	r6, [r4, #2]
    22de:	0336      	lsls	r6, r6, #12
    22e0:	78e3      	ldrb	r3, [r4, #3]
    22e2:	011b      	lsls	r3, r3, #4
    22e4:	431e      	orrs	r6, r3
                        ((uint32_t) buff[off + 4] / 16));
    22e6:	7923      	ldrb	r3, [r4, #4]
    22e8:	091b      	lsrs	r3, r3, #4
        adc_pres =
    22ea:	431e      	orrs	r6, r3
    22ec:	9601      	str	r6, [sp, #4]
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
    22ee:	7960      	ldrb	r0, [r4, #5]
    22f0:	0300      	lsls	r0, r0, #12
    22f2:	79a3      	ldrb	r3, [r4, #6]
    22f4:	011b      	lsls	r3, r3, #4
    22f6:	4318      	orrs	r0, r3
                        ((uint32_t) buff[off + 7] / 16));
    22f8:	79e3      	ldrb	r3, [r4, #7]
    22fa:	091b      	lsrs	r3, r3, #4
        adc_temp =
    22fc:	4318      	orrs	r0, r3
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
    22fe:	7a23      	ldrb	r3, [r4, #8]
    2300:	021b      	lsls	r3, r3, #8
    2302:	7a67      	ldrb	r7, [r4, #9]
    2304:	431f      	orrs	r7, r3
    2306:	9702      	str	r7, [sp, #8]
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
    2308:	7b63      	ldrb	r3, [r4, #13]
    230a:	469a      	mov	sl, r3
    230c:	7ba7      	ldrb	r7, [r4, #14]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
    230e:	7be3      	ldrb	r3, [r4, #15]
    2310:	9304      	str	r3, [sp, #16]
    2312:	7c23      	ldrb	r3, [r4, #16]
    2314:	9303      	str	r3, [sp, #12]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
    2316:	4643      	mov	r3, r8
    2318:	689b      	ldr	r3, [r3, #8]
    231a:	2b01      	cmp	r3, #1
    231c:	d0a4      	beq.n	2268 <bme68x_get_data+0x1f8>
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
    231e:	b27b      	sxtb	r3, r7
    2320:	2620      	movs	r6, #32
    2322:	401e      	ands	r6, r3
    2324:	4331      	orrs	r1, r6
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
    2326:	2610      	movs	r6, #16
    2328:	4033      	ands	r3, r6
    232a:	4319      	orrs	r1, r3
    232c:	7029      	strb	r1, [r5, #0]
        data[i]->idac = set_val[data[i]->gas_index];
    232e:	ab07      	add	r3, sp, #28
    2330:	5c99      	ldrb	r1, [r3, r2]
    2332:	7129      	strb	r1, [r5, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
    2334:	189b      	adds	r3, r3, r2
    2336:	7a9a      	ldrb	r2, [r3, #10]
    2338:	70ea      	strb	r2, [r5, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
    233a:	7d1b      	ldrb	r3, [r3, #20]
    233c:	716b      	strb	r3, [r5, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
    233e:	4641      	mov	r1, r8
    2340:	4b2b      	ldr	r3, [pc, #172]	; (23f0 <bme68x_get_data+0x380>)
    2342:	4798      	blx	r3
    2344:	80e8      	strh	r0, [r5, #6]
        data[i]->pressure = calc_pressure(adc_pres, dev);
    2346:	4641      	mov	r1, r8
    2348:	9801      	ldr	r0, [sp, #4]
    234a:	4b2a      	ldr	r3, [pc, #168]	; (23f4 <bme68x_get_data+0x384>)
    234c:	4798      	blx	r3
    234e:	60a8      	str	r0, [r5, #8]
        data[i]->humidity = calc_humidity(adc_hum, dev);
    2350:	4641      	mov	r1, r8
    2352:	9802      	ldr	r0, [sp, #8]
    2354:	4b28      	ldr	r3, [pc, #160]	; (23f8 <bme68x_get_data+0x388>)
    2356:	4798      	blx	r3
    2358:	60e8      	str	r0, [r5, #12]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
    235a:	4643      	mov	r3, r8
    235c:	689b      	ldr	r3, [r3, #8]
    235e:	2b01      	cmp	r3, #1
    2360:	d08d      	beq.n	227e <bme68x_get_data+0x20e>
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
    2362:	210f      	movs	r1, #15
    2364:	4039      	ands	r1, r7
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
    2366:	4653      	mov	r3, sl
    2368:	0098      	lsls	r0, r3, #2
    236a:	09bf      	lsrs	r7, r7, #6
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
    236c:	4338      	orrs	r0, r7
    236e:	4642      	mov	r2, r8
    2370:	4b22      	ldr	r3, [pc, #136]	; (23fc <bme68x_get_data+0x38c>)
    2372:	4798      	blx	r3
    2374:	6128      	str	r0, [r5, #16]
    2376:	e79d      	b.n	22b4 <bme68x_get_data+0x244>
    2378:	9b05      	ldr	r3, [sp, #20]
    237a:	469a      	mov	sl, r3
    237c:	2300      	movs	r3, #0
    237e:	2500      	movs	r5, #0
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
    2380:	a92b      	add	r1, sp, #172	; 0xac
    2382:	e003      	b.n	238c <bme68x_get_data+0x31c>
    2384:	3304      	adds	r3, #4
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
    2386:	2b0c      	cmp	r3, #12
    2388:	d100      	bne.n	238c <bme68x_get_data+0x31c>
    238a:	e758      	b.n	223e <bme68x_get_data+0x1ce>
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
    238c:	585a      	ldr	r2, [r3, r1]
    238e:	7812      	ldrb	r2, [r2, #0]
    2390:	2a7f      	cmp	r2, #127	; 0x7f
    2392:	d9f7      	bls.n	2384 <bme68x_get_data+0x314>
                    new_fields++;
    2394:	3501      	adds	r5, #1
    2396:	b2ed      	uxtb	r5, r5
    2398:	e7f4      	b.n	2384 <bme68x_get_data+0x314>
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
    239a:	7821      	ldrb	r1, [r4, #0]
    239c:	297f      	cmp	r1, #127	; 0x7f
    239e:	d813      	bhi.n	23c8 <bme68x_get_data+0x358>
                for (j = i + 1; j < 3; j++)
    23a0:	3301      	adds	r3, #1
    23a2:	b2db      	uxtb	r3, r3
    23a4:	2b03      	cmp	r3, #3
    23a6:	d031      	beq.n	240c <bme68x_get_data+0x39c>
    23a8:	0037      	movs	r7, r6
    meas_index1 = (int16_t)field[low_index]->meas_index;
    23aa:	6830      	ldr	r0, [r6, #0]
    meas_index2 = (int16_t)field[high_index]->meas_index;
    23ac:	009a      	lsls	r2, r3, #2
    23ae:	a92b      	add	r1, sp, #172	; 0xac
    23b0:	4688      	mov	r8, r1
    23b2:	4442      	add	r2, r8
    23b4:	6814      	ldr	r4, [r2, #0]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
    23b6:	7801      	ldrb	r1, [r0, #0]
    23b8:	297f      	cmp	r1, #127	; 0x7f
    23ba:	d8ee      	bhi.n	239a <bme68x_get_data+0x32a>
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
    23bc:	7821      	ldrb	r1, [r4, #0]
    23be:	297f      	cmp	r1, #127	; 0x7f
    23c0:	d9ee      	bls.n	23a0 <bme68x_get_data+0x330>
    field[index1] = field[index2];
    23c2:	6034      	str	r4, [r6, #0]
    field[index2] = temp;
    23c4:	6010      	str	r0, [r2, #0]
    23c6:	e7eb      	b.n	23a0 <bme68x_get_data+0x330>
        int16_t diff = meas_index2 - meas_index1;
    23c8:	78a5      	ldrb	r5, [r4, #2]
    23ca:	7881      	ldrb	r1, [r0, #2]
    23cc:	1a69      	subs	r1, r5, r1
    23ce:	b289      	uxth	r1, r1
    23d0:	b20d      	sxth	r5, r1
        if (((diff > -3) && (diff < 0)) || (diff > 2))
    23d2:	3102      	adds	r1, #2
    23d4:	b289      	uxth	r1, r1
    23d6:	2901      	cmp	r1, #1
    23d8:	d901      	bls.n	23de <bme68x_get_data+0x36e>
    23da:	2d02      	cmp	r5, #2
    23dc:	dde0      	ble.n	23a0 <bme68x_get_data+0x330>
    field[index1] = field[index2];
    23de:	603c      	str	r4, [r7, #0]
    field[index2] = temp;
    23e0:	6010      	str	r0, [r2, #0]
    23e2:	e7dd      	b.n	23a0 <bme68x_get_data+0x330>
    23e4:	00012b83 	.word	0x00012b83
    23e8:	00001971 	.word	0x00001971
    23ec:	00001c2d 	.word	0x00001c2d
    23f0:	0000164d 	.word	0x0000164d
    23f4:	000016bd 	.word	0x000016bd
    23f8:	00001781 	.word	0x00001781
    23fc:	00001821 	.word	0x00001821
    2400:	fffffe00 	.word	0xfffffe00
    2404:	00002710 	.word	0x00002710
    2408:	00015815 	.word	0x00015815
    240c:	3604      	adds	r6, #4
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
    240e:	465b      	mov	r3, fp
    2410:	2b02      	cmp	r3, #2
    2412:	d007      	beq.n	2424 <bme68x_get_data+0x3b4>
                for (j = i + 1; j < 3; j++)
    2414:	465d      	mov	r5, fp
    2416:	3501      	adds	r5, #1
    2418:	b2eb      	uxtb	r3, r5
    241a:	469b      	mov	fp, r3
    241c:	2b02      	cmp	r3, #2
    241e:	d9c3      	bls.n	23a8 <bme68x_get_data+0x338>
    2420:	3604      	adds	r6, #4
    2422:	e7f7      	b.n	2414 <bme68x_get_data+0x3a4>
    2424:	4665      	mov	r5, ip
            new_fields = 0;
    2426:	2000      	movs	r0, #0
                data[i] = *field_ptr[i];
    2428:	aa2b      	add	r2, sp, #172	; 0xac
    242a:	46ac      	mov	ip, r5
    242c:	464c      	mov	r4, r9
    242e:	0083      	lsls	r3, r0, #2
    2430:	181b      	adds	r3, r3, r0
    2432:	18e3      	adds	r3, r4, r3
    2434:	5881      	ldr	r1, [r0, r2]
    2436:	c9e0      	ldmia	r1!, {r5, r6, r7}
    2438:	c3e0      	stmia	r3!, {r5, r6, r7}
    243a:	c960      	ldmia	r1!, {r5, r6}
    243c:	c360      	stmia	r3!, {r5, r6}
    243e:	3004      	adds	r0, #4
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
    2440:	280c      	cmp	r0, #12
    2442:	d1f4      	bne.n	242e <bme68x_get_data+0x3be>
    2444:	4665      	mov	r5, ip
            if (new_fields == 0)
    2446:	2d00      	cmp	r5, #0
    2448:	d000      	beq.n	244c <bme68x_get_data+0x3dc>
    244a:	e63e      	b.n	20ca <bme68x_get_data+0x5a>
                rslt = BME68X_W_NO_NEW_DATA;
    244c:	2302      	movs	r3, #2
    244e:	9300      	str	r3, [sp, #0]
    2450:	e63b      	b.n	20ca <bme68x_get_data+0x5a>
    uint8_t i = 0, j = 0, new_fields = 0;
    2452:	2500      	movs	r5, #0
    2454:	e639      	b.n	20ca <bme68x_get_data+0x5a>
        rslt = BME68X_E_NULL_PTR;
    2456:	2301      	movs	r3, #1
    2458:	425b      	negs	r3, r3
    245a:	9300      	str	r3, [sp, #0]
    245c:	e63a      	b.n	20d4 <bme68x_get_data+0x64>
    245e:	2301      	movs	r3, #1
    2460:	425b      	negs	r3, r3
    2462:	9300      	str	r3, [sp, #0]
    2464:	e636      	b.n	20d4 <bme68x_get_data+0x64>
            rslt = BME68X_E_NULL_PTR;
    2466:	2301      	movs	r3, #1
    2468:	425b      	negs	r3, r3
    246a:	9300      	str	r3, [sp, #0]
    return rslt;
    246c:	e632      	b.n	20d4 <bme68x_get_data+0x64>
            new_fields = 0;
    246e:	2500      	movs	r5, #0
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
    2470:	9b00      	ldr	r3, [sp, #0]
    2472:	2b00      	cmp	r3, #0
    2474:	d0d7      	beq.n	2426 <bme68x_get_data+0x3b6>
    2476:	e7e6      	b.n	2446 <bme68x_get_data+0x3d6>

00002478 <bme68x_set_heatr_conf>:
{
    2478:	b5f0      	push	{r4, r5, r6, r7, lr}
    247a:	46de      	mov	lr, fp
    247c:	4657      	mov	r7, sl
    247e:	464e      	mov	r6, r9
    2480:	4645      	mov	r5, r8
    2482:	b5e0      	push	{r5, r6, r7, lr}
    2484:	b095      	sub	sp, #84	; 0x54
    2486:	9001      	str	r0, [sp, #4]
    2488:	9102      	str	r1, [sp, #8]
    248a:	0010      	movs	r0, r2
    248c:	9200      	str	r2, [sp, #0]
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
    248e:	4bbc      	ldr	r3, [pc, #752]	; (2780 <bme68x_set_heatr_conf+0x308>)
    2490:	891a      	ldrh	r2, [r3, #8]
    2492:	ab12      	add	r3, sp, #72	; 0x48
    2494:	801a      	strh	r2, [r3, #0]
    if (conf != NULL)
    2496:	2900      	cmp	r1, #0
    2498:	d100      	bne.n	249c <bme68x_set_heatr_conf+0x24>
    249a:	e136      	b.n	270a <bme68x_set_heatr_conf+0x292>
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
    249c:	0001      	movs	r1, r0
    249e:	2000      	movs	r0, #0
    24a0:	4bb8      	ldr	r3, [pc, #736]	; (2784 <bme68x_set_heatr_conf+0x30c>)
    24a2:	4798      	blx	r3
    24a4:	1e05      	subs	r5, r0, #0
        if (rslt == BME68X_OK)
    24a6:	d007      	beq.n	24b8 <bme68x_set_heatr_conf+0x40>
}
    24a8:	0028      	movs	r0, r5
    24aa:	b015      	add	sp, #84	; 0x54
    24ac:	bc3c      	pop	{r2, r3, r4, r5}
    24ae:	4690      	mov	r8, r2
    24b0:	4699      	mov	r9, r3
    24b2:	46a2      	mov	sl, r4
    24b4:	46ab      	mov	fp, r5
    24b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
    24b8:	226e      	movs	r2, #110	; 0x6e
    24ba:	ab04      	add	r3, sp, #16
    24bc:	71da      	strb	r2, [r3, #7]
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    24be:	3a64      	subs	r2, #100	; 0x64
    24c0:	2100      	movs	r1, #0
    24c2:	a806      	add	r0, sp, #24
    24c4:	4cb0      	ldr	r4, [pc, #704]	; (2788 <bme68x_set_heatr_conf+0x310>)
    24c6:	47a0      	blx	r4
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    24c8:	220a      	movs	r2, #10
    24ca:	2100      	movs	r1, #0
    24cc:	a809      	add	r0, sp, #36	; 0x24
    24ce:	47a0      	blx	r4
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    24d0:	220a      	movs	r2, #10
    24d2:	2100      	movs	r1, #0
    24d4:	a80c      	add	r0, sp, #48	; 0x30
    24d6:	47a0      	blx	r4
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    24d8:	220a      	movs	r2, #10
    24da:	2100      	movs	r1, #0
    24dc:	a80f      	add	r0, sp, #60	; 0x3c
    24de:	47a0      	blx	r4
    switch (op_mode)
    24e0:	9b01      	ldr	r3, [sp, #4]
    24e2:	2b02      	cmp	r3, #2
    24e4:	d100      	bne.n	24e8 <bme68x_set_heatr_conf+0x70>
    24e6:	e0ad      	b.n	2644 <bme68x_set_heatr_conf+0x1cc>
    24e8:	2b03      	cmp	r3, #3
    24ea:	d064      	beq.n	25b6 <bme68x_set_heatr_conf+0x13e>
    24ec:	2b01      	cmp	r3, #1
    24ee:	d006      	beq.n	24fe <bme68x_set_heatr_conf+0x86>
    uint8_t write_len = 0;
    24f0:	2300      	movs	r3, #0
    24f2:	9301      	str	r3, [sp, #4]
            rslt = BME68X_W_DEFINE_OP_MODE;
    24f4:	2501      	movs	r5, #1
    if (rslt == BME68X_OK)
    24f6:	2d00      	cmp	r5, #0
    24f8:	d1d6      	bne.n	24a8 <bme68x_set_heatr_conf+0x30>
    24fa:	9c01      	ldr	r4, [sp, #4]
    24fc:	e014      	b.n	2528 <bme68x_set_heatr_conf+0xb0>
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
    24fe:	225a      	movs	r2, #90	; 0x5a
    2500:	ab06      	add	r3, sp, #24
    2502:	701a      	strb	r2, [r3, #0]
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
    2504:	9c02      	ldr	r4, [sp, #8]
    2506:	8860      	ldrh	r0, [r4, #2]
    2508:	9900      	ldr	r1, [sp, #0]
    250a:	4ba0      	ldr	r3, [pc, #640]	; (278c <bme68x_set_heatr_conf+0x314>)
    250c:	4798      	blx	r3
    250e:	ab09      	add	r3, sp, #36	; 0x24
    2510:	7018      	strb	r0, [r3, #0]
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
    2512:	2264      	movs	r2, #100	; 0x64
    2514:	ab0c      	add	r3, sp, #48	; 0x30
    2516:	701a      	strb	r2, [r3, #0]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
    2518:	88a1      	ldrh	r1, [r4, #4]
    if (dur >= 0xfc0)
    251a:	4b9d      	ldr	r3, [pc, #628]	; (2790 <bme68x_set_heatr_conf+0x318>)
        durval = 0xff; /* Max duration*/
    251c:	329b      	adds	r2, #155	; 0x9b
    if (dur >= 0xfc0)
    251e:	4299      	cmp	r1, r3
    2520:	d93b      	bls.n	259a <bme68x_set_heatr_conf+0x122>
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
    2522:	ab0f      	add	r3, sp, #60	; 0x3c
    2524:	701a      	strb	r2, [r3, #0]
            (*nb_conv) = 0;
    2526:	2400      	movs	r4, #0
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
    2528:	9b00      	ldr	r3, [sp, #0]
    252a:	9a01      	ldr	r2, [sp, #4]
    252c:	a909      	add	r1, sp, #36	; 0x24
    252e:	a806      	add	r0, sp, #24
    2530:	4d98      	ldr	r5, [pc, #608]	; (2794 <bme68x_set_heatr_conf+0x31c>)
    2532:	47a8      	blx	r5
    2534:	0005      	movs	r5, r0
    if (rslt == BME68X_OK)
    2536:	2d00      	cmp	r5, #0
    2538:	d1b6      	bne.n	24a8 <bme68x_set_heatr_conf+0x30>
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
    253a:	9e00      	ldr	r6, [sp, #0]
    253c:	0033      	movs	r3, r6
    253e:	9a01      	ldr	r2, [sp, #4]
    2540:	a90f      	add	r1, sp, #60	; 0x3c
    2542:	a80c      	add	r0, sp, #48	; 0x30
    2544:	4d93      	ldr	r5, [pc, #588]	; (2794 <bme68x_set_heatr_conf+0x31c>)
    2546:	47a8      	blx	r5
    2548:	1e05      	subs	r5, r0, #0
        if (rslt == BME68X_OK)
    254a:	d1ad      	bne.n	24a8 <bme68x_set_heatr_conf+0x30>
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
    254c:	0033      	movs	r3, r6
    254e:	2202      	movs	r2, #2
    2550:	a913      	add	r1, sp, #76	; 0x4c
    2552:	2070      	movs	r0, #112	; 0x70
    2554:	4d90      	ldr	r5, [pc, #576]	; (2798 <bme68x_set_heatr_conf+0x320>)
    2556:	47a8      	blx	r5
    2558:	1e05      	subs	r5, r0, #0
            if (rslt == BME68X_OK)
    255a:	d1a5      	bne.n	24a8 <bme68x_set_heatr_conf+0x30>
                if (conf->enable == BME68X_ENABLE)
    255c:	9b02      	ldr	r3, [sp, #8]
    255e:	781b      	ldrb	r3, [r3, #0]
    2560:	2b01      	cmp	r3, #1
    2562:	d100      	bne.n	2566 <bme68x_set_heatr_conf+0xee>
    2564:	e0c6      	b.n	26f4 <bme68x_set_heatr_conf+0x27c>
                    run_gas = BME68X_DISABLE_GAS_MEAS;
    2566:	2000      	movs	r0, #0
                    hctrl = BME68X_DISABLE_HEATER;
    2568:	2301      	movs	r3, #1
                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
    256a:	a913      	add	r1, sp, #76	; 0x4c
    256c:	780a      	ldrb	r2, [r1, #0]
    256e:	2508      	movs	r5, #8
    2570:	43aa      	bics	r2, r5
    2572:	00db      	lsls	r3, r3, #3
    2574:	431a      	orrs	r2, r3
    2576:	700a      	strb	r2, [r1, #0]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
    2578:	784b      	ldrb	r3, [r1, #1]
    257a:	220f      	movs	r2, #15
    257c:	4393      	bics	r3, r2
    257e:	4014      	ands	r4, r2
    2580:	4323      	orrs	r3, r4
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
    2582:	3221      	adds	r2, #33	; 0x21
    2584:	4393      	bics	r3, r2
    2586:	0100      	lsls	r0, r0, #4
    2588:	4303      	orrs	r3, r0
    258a:	704b      	strb	r3, [r1, #1]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
    258c:	9b00      	ldr	r3, [sp, #0]
    258e:	3a2e      	subs	r2, #46	; 0x2e
    2590:	a812      	add	r0, sp, #72	; 0x48
    2592:	4c80      	ldr	r4, [pc, #512]	; (2794 <bme68x_set_heatr_conf+0x31c>)
    2594:	47a0      	blx	r4
    2596:	0005      	movs	r5, r0
    2598:	e786      	b.n	24a8 <bme68x_set_heatr_conf+0x30>
        while (dur > 0x3F)
    259a:	293f      	cmp	r1, #63	; 0x3f
    259c:	d909      	bls.n	25b2 <bme68x_set_heatr_conf+0x13a>
    259e:	2300      	movs	r3, #0
            dur = dur / 4;
    25a0:	0889      	lsrs	r1, r1, #2
            factor += 1;
    25a2:	3301      	adds	r3, #1
    25a4:	b2db      	uxtb	r3, r3
        while (dur > 0x3F)
    25a6:	293f      	cmp	r1, #63	; 0x3f
    25a8:	d8fa      	bhi.n	25a0 <bme68x_set_heatr_conf+0x128>
        durval = (uint8_t)(dur + (factor * 64));
    25aa:	019b      	lsls	r3, r3, #6
    25ac:	185b      	adds	r3, r3, r1
    25ae:	b2da      	uxtb	r2, r3
    25b0:	e7b7      	b.n	2522 <bme68x_set_heatr_conf+0xaa>
        while (dur > 0x3F)
    25b2:	2300      	movs	r3, #0
    25b4:	e7f9      	b.n	25aa <bme68x_set_heatr_conf+0x132>
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
    25b6:	9b02      	ldr	r3, [sp, #8]
    25b8:	68df      	ldr	r7, [r3, #12]
    25ba:	2f00      	cmp	r7, #0
    25bc:	d100      	bne.n	25c0 <bme68x_set_heatr_conf+0x148>
    25be:	e0bb      	b.n	2738 <bme68x_set_heatr_conf+0x2c0>
    25c0:	689c      	ldr	r4, [r3, #8]
    25c2:	2c00      	cmp	r4, #0
    25c4:	d100      	bne.n	25c8 <bme68x_set_heatr_conf+0x150>
    25c6:	e0bc      	b.n	2742 <bme68x_set_heatr_conf+0x2ca>
            for (i = 0; i < conf->profile_len; i++)
    25c8:	7c1b      	ldrb	r3, [r3, #16]
    25ca:	9301      	str	r3, [sp, #4]
    25cc:	2b00      	cmp	r3, #0
    25ce:	d100      	bne.n	25d2 <bme68x_set_heatr_conf+0x15a>
    25d0:	e0b0      	b.n	2734 <bme68x_set_heatr_conf+0x2bc>
    25d2:	335a      	adds	r3, #90	; 0x5a
    25d4:	b2db      	uxtb	r3, r3
    25d6:	4699      	mov	r9, r3
    25d8:	255a      	movs	r5, #90	; 0x5a
    25da:	2600      	movs	r6, #0
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
    25dc:	4b6b      	ldr	r3, [pc, #428]	; (278c <bme68x_set_heatr_conf+0x314>)
    25de:	469a      	mov	sl, r3
    if (dur >= 0xfc0)
    25e0:	4b6b      	ldr	r3, [pc, #428]	; (2790 <bme68x_set_heatr_conf+0x318>)
    25e2:	469b      	mov	fp, r3
    25e4:	e00e      	b.n	2604 <bme68x_set_heatr_conf+0x18c>
        while (dur > 0x3F)
    25e6:	2300      	movs	r3, #0
        durval = (uint8_t)(dur + (factor * 64));
    25e8:	019b      	lsls	r3, r3, #6
    25ea:	185b      	adds	r3, r3, r1
    25ec:	b2db      	uxtb	r3, r3
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
    25ee:	aa04      	add	r2, sp, #16
    25f0:	212c      	movs	r1, #44	; 0x2c
    25f2:	1852      	adds	r2, r2, r1
    25f4:	5593      	strb	r3, [r2, r6]
    25f6:	3601      	adds	r6, #1
    25f8:	3501      	adds	r5, #1
    25fa:	b2ed      	uxtb	r5, r5
    25fc:	3402      	adds	r4, #2
    25fe:	3702      	adds	r7, #2
            for (i = 0; i < conf->profile_len; i++)
    2600:	454d      	cmp	r5, r9
    2602:	d01d      	beq.n	2640 <bme68x_set_heatr_conf+0x1c8>
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
    2604:	ab04      	add	r3, sp, #16
    2606:	2208      	movs	r2, #8
    2608:	189b      	adds	r3, r3, r2
    260a:	559d      	strb	r5, [r3, r6]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
    260c:	8820      	ldrh	r0, [r4, #0]
    260e:	9900      	ldr	r1, [sp, #0]
    2610:	47d0      	blx	sl
    2612:	ab04      	add	r3, sp, #16
    2614:	2214      	movs	r2, #20
    2616:	189b      	adds	r3, r3, r2
    2618:	5598      	strb	r0, [r3, r6]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
    261a:	002b      	movs	r3, r5
    261c:	330a      	adds	r3, #10
    261e:	aa04      	add	r2, sp, #16
    2620:	2120      	movs	r1, #32
    2622:	1852      	adds	r2, r2, r1
    2624:	5593      	strb	r3, [r2, r6]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
    2626:	8839      	ldrh	r1, [r7, #0]
        durval = 0xff; /* Max duration*/
    2628:	23ff      	movs	r3, #255	; 0xff
    if (dur >= 0xfc0)
    262a:	4559      	cmp	r1, fp
    262c:	d8df      	bhi.n	25ee <bme68x_set_heatr_conf+0x176>
        while (dur > 0x3F)
    262e:	293f      	cmp	r1, #63	; 0x3f
    2630:	d9d9      	bls.n	25e6 <bme68x_set_heatr_conf+0x16e>
    2632:	2300      	movs	r3, #0
            dur = dur / 4;
    2634:	0889      	lsrs	r1, r1, #2
            factor += 1;
    2636:	3301      	adds	r3, #1
    2638:	b2db      	uxtb	r3, r3
        while (dur > 0x3F)
    263a:	293f      	cmp	r1, #63	; 0x3f
    263c:	d8fa      	bhi.n	2634 <bme68x_set_heatr_conf+0x1bc>
    263e:	e7d3      	b.n	25e8 <bme68x_set_heatr_conf+0x170>
            for (i = 0; i < conf->profile_len; i++)
    2640:	9c01      	ldr	r4, [sp, #4]
    2642:	e771      	b.n	2528 <bme68x_set_heatr_conf+0xb0>
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
    2644:	9902      	ldr	r1, [sp, #8]
    2646:	68cb      	ldr	r3, [r1, #12]
    2648:	2b00      	cmp	r3, #0
    264a:	d100      	bne.n	264e <bme68x_set_heatr_conf+0x1d6>
    264c:	e07e      	b.n	274c <bme68x_set_heatr_conf+0x2d4>
    264e:	688a      	ldr	r2, [r1, #8]
    2650:	2a00      	cmp	r2, #0
    2652:	d100      	bne.n	2656 <bme68x_set_heatr_conf+0x1de>
    2654:	e07f      	b.n	2756 <bme68x_set_heatr_conf+0x2de>
            if (conf->shared_heatr_dur == 0)
    2656:	8a48      	ldrh	r0, [r1, #18]
    2658:	4681      	mov	r9, r0
    265a:	2800      	cmp	r0, #0
    265c:	d058      	beq.n	2710 <bme68x_set_heatr_conf+0x298>
            for (i = 0; i < conf->profile_len; i++)
    265e:	7c09      	ldrb	r1, [r1, #16]
    2660:	9101      	str	r1, [sp, #4]
    2662:	2900      	cmp	r1, #0
    2664:	d07c      	beq.n	2760 <bme68x_set_heatr_conf+0x2e8>
    2666:	001f      	movs	r7, r3
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
    2668:	2664      	movs	r6, #100	; 0x64
    266a:	2400      	movs	r4, #0
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
    266c:	9503      	str	r5, [sp, #12]
    266e:	0015      	movs	r5, r2
    2670:	9b01      	ldr	r3, [sp, #4]
    2672:	4698      	mov	r8, r3
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
    2674:	0033      	movs	r3, r6
    2676:	3b0a      	subs	r3, #10
    2678:	aa04      	add	r2, sp, #16
    267a:	2108      	movs	r1, #8
    267c:	1852      	adds	r2, r2, r1
    267e:	5513      	strb	r3, [r2, r4]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
    2680:	8828      	ldrh	r0, [r5, #0]
    2682:	9900      	ldr	r1, [sp, #0]
    2684:	4b41      	ldr	r3, [pc, #260]	; (278c <bme68x_set_heatr_conf+0x314>)
    2686:	4798      	blx	r3
    2688:	ab04      	add	r3, sp, #16
    268a:	2214      	movs	r2, #20
    268c:	189b      	adds	r3, r3, r2
    268e:	5518      	strb	r0, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
    2690:	ab04      	add	r3, sp, #16
    2692:	320c      	adds	r2, #12
    2694:	189b      	adds	r3, r3, r2
    2696:	551e      	strb	r6, [r3, r4]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
    2698:	883b      	ldrh	r3, [r7, #0]
    269a:	aa04      	add	r2, sp, #16
    269c:	212c      	movs	r1, #44	; 0x2c
    269e:	1852      	adds	r2, r2, r1
    26a0:	5513      	strb	r3, [r2, r4]
    26a2:	3401      	adds	r4, #1
    26a4:	3502      	adds	r5, #2
    26a6:	3601      	adds	r6, #1
    26a8:	b2f6      	uxtb	r6, r6
    26aa:	3702      	adds	r7, #2
            for (i = 0; i < conf->profile_len; i++)
    26ac:	b2e3      	uxtb	r3, r4
    26ae:	4543      	cmp	r3, r8
    26b0:	d3e0      	bcc.n	2674 <bme68x_set_heatr_conf+0x1fc>
    26b2:	9d03      	ldr	r5, [sp, #12]
    if (dur >= 0x783)
    26b4:	4a39      	ldr	r2, [pc, #228]	; (279c <bme68x_set_heatr_conf+0x324>)
        heatdurval = 0xff; /* Max duration */
    26b6:	23ff      	movs	r3, #255	; 0xff
    if (dur >= 0x783)
    26b8:	4649      	mov	r1, r9
    26ba:	4291      	cmp	r1, r2
    26bc:	d905      	bls.n	26ca <bme68x_set_heatr_conf+0x252>
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
    26be:	aa04      	add	r2, sp, #16
    26c0:	7193      	strb	r3, [r2, #6]
            if (rslt == BME68X_OK)
    26c2:	2d00      	cmp	r5, #0
    26c4:	d052      	beq.n	276c <bme68x_set_heatr_conf+0x2f4>
    if (rslt == BME68X_OK)
    26c6:	9c01      	ldr	r4, [sp, #4]
    26c8:	e735      	b.n	2536 <bme68x_set_heatr_conf+0xbe>
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
    26ca:	20fa      	movs	r0, #250	; 0xfa
    26cc:	0080      	lsls	r0, r0, #2
    26ce:	464b      	mov	r3, r9
    26d0:	4358      	muls	r0, r3
    26d2:	21de      	movs	r1, #222	; 0xde
    26d4:	31ff      	adds	r1, #255	; 0xff
    26d6:	4b32      	ldr	r3, [pc, #200]	; (27a0 <bme68x_set_heatr_conf+0x328>)
    26d8:	4798      	blx	r3
    26da:	b280      	uxth	r0, r0
    uint8_t factor = 0;
    26dc:	2300      	movs	r3, #0
        while (dur > 0x3F)
    26de:	283f      	cmp	r0, #63	; 0x3f
    26e0:	d904      	bls.n	26ec <bme68x_set_heatr_conf+0x274>
            dur = dur >> 2;
    26e2:	0880      	lsrs	r0, r0, #2
            factor += 1;
    26e4:	3301      	adds	r3, #1
    26e6:	b2db      	uxtb	r3, r3
        while (dur > 0x3F)
    26e8:	283f      	cmp	r0, #63	; 0x3f
    26ea:	d8fa      	bhi.n	26e2 <bme68x_set_heatr_conf+0x26a>
        heatdurval = (uint8_t)(dur + (factor * 64));
    26ec:	019b      	lsls	r3, r3, #6
    26ee:	181b      	adds	r3, r3, r0
    26f0:	b2db      	uxtb	r3, r3
    26f2:	e7e4      	b.n	26be <bme68x_set_heatr_conf+0x246>
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
    26f4:	9b00      	ldr	r3, [sp, #0]
    26f6:	689b      	ldr	r3, [r3, #8]
    26f8:	9301      	str	r3, [sp, #4]
    26fa:	2b01      	cmp	r3, #1
    26fc:	d002      	beq.n	2704 <bme68x_set_heatr_conf+0x28c>
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
    26fe:	2001      	movs	r0, #1
                    hctrl = BME68X_ENABLE_HEATER;
    2700:	2300      	movs	r3, #0
    2702:	e732      	b.n	256a <bme68x_set_heatr_conf+0xf2>
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
    2704:	2002      	movs	r0, #2
                    hctrl = BME68X_ENABLE_HEATER;
    2706:	2300      	movs	r3, #0
    2708:	e72f      	b.n	256a <bme68x_set_heatr_conf+0xf2>
        rslt = BME68X_E_NULL_PTR;
    270a:	2501      	movs	r5, #1
    270c:	426d      	negs	r5, r5
    return rslt;
    270e:	e6cb      	b.n	24a8 <bme68x_set_heatr_conf+0x30>
            for (i = 0; i < conf->profile_len; i++)
    2710:	9902      	ldr	r1, [sp, #8]
    2712:	7c09      	ldrb	r1, [r1, #16]
    2714:	9101      	str	r1, [sp, #4]
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
    2716:	2503      	movs	r5, #3
            for (i = 0; i < conf->profile_len; i++)
    2718:	2900      	cmp	r1, #0
    271a:	d1a4      	bne.n	2666 <bme68x_set_heatr_conf+0x1ee>
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
    271c:	20fa      	movs	r0, #250	; 0xfa
    271e:	0080      	lsls	r0, r0, #2
    2720:	464b      	mov	r3, r9
    2722:	4358      	muls	r0, r3
    2724:	21de      	movs	r1, #222	; 0xde
    2726:	31ff      	adds	r1, #255	; 0xff
    2728:	4b1d      	ldr	r3, [pc, #116]	; (27a0 <bme68x_set_heatr_conf+0x328>)
    272a:	4798      	blx	r3
    272c:	b280      	uxth	r0, r0
    uint8_t factor = 0;
    272e:	9b01      	ldr	r3, [sp, #4]
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
    2730:	2503      	movs	r5, #3
    2732:	e7db      	b.n	26ec <bme68x_set_heatr_conf+0x274>
            for (i = 0; i < conf->profile_len; i++)
    2734:	9c01      	ldr	r4, [sp, #4]
    2736:	e6f7      	b.n	2528 <bme68x_set_heatr_conf+0xb0>
    uint8_t write_len = 0;
    2738:	2300      	movs	r3, #0
    273a:	9301      	str	r3, [sp, #4]
                rslt = BME68X_E_NULL_PTR;
    273c:	2501      	movs	r5, #1
    273e:	426d      	negs	r5, r5
    2740:	e7c1      	b.n	26c6 <bme68x_set_heatr_conf+0x24e>
    uint8_t write_len = 0;
    2742:	2300      	movs	r3, #0
    2744:	9301      	str	r3, [sp, #4]
                rslt = BME68X_E_NULL_PTR;
    2746:	2501      	movs	r5, #1
    2748:	426d      	negs	r5, r5
    274a:	e7bc      	b.n	26c6 <bme68x_set_heatr_conf+0x24e>
    uint8_t write_len = 0;
    274c:	2300      	movs	r3, #0
    274e:	9301      	str	r3, [sp, #4]
                rslt = BME68X_E_NULL_PTR;
    2750:	2501      	movs	r5, #1
    2752:	426d      	negs	r5, r5
    2754:	e7b7      	b.n	26c6 <bme68x_set_heatr_conf+0x24e>
    uint8_t write_len = 0;
    2756:	2300      	movs	r3, #0
    2758:	9301      	str	r3, [sp, #4]
                rslt = BME68X_E_NULL_PTR;
    275a:	2501      	movs	r5, #1
    275c:	426d      	negs	r5, r5
    275e:	e7b2      	b.n	26c6 <bme68x_set_heatr_conf+0x24e>
    if (dur >= 0x783)
    2760:	4b0e      	ldr	r3, [pc, #56]	; (279c <bme68x_set_heatr_conf+0x324>)
    2762:	4298      	cmp	r0, r3
    2764:	d9b1      	bls.n	26ca <bme68x_set_heatr_conf+0x252>
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
    2766:	22ff      	movs	r2, #255	; 0xff
    2768:	ab04      	add	r3, sp, #16
    276a:	719a      	strb	r2, [r3, #6]
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
    276c:	9b00      	ldr	r3, [sp, #0]
    276e:	2201      	movs	r2, #1
    2770:	a904      	add	r1, sp, #16
    2772:	3106      	adds	r1, #6
    2774:	a804      	add	r0, sp, #16
    2776:	3007      	adds	r0, #7
    2778:	4c06      	ldr	r4, [pc, #24]	; (2794 <bme68x_set_heatr_conf+0x31c>)
    277a:	47a0      	blx	r4
    277c:	0005      	movs	r5, r0
    277e:	e6ba      	b.n	24f6 <bme68x_set_heatr_conf+0x7e>
    2780:	000192c0 	.word	0x000192c0
    2784:	00001e59 	.word	0x00001e59
    2788:	00012b83 	.word	0x00012b83
    278c:	000018d5 	.word	0x000018d5
    2790:	00000fbf 	.word	0x00000fbf
    2794:	00001b49 	.word	0x00001b49
    2798:	00001c2d 	.word	0x00001c2d
    279c:	00000782 	.word	0x00000782
    27a0:	00015815 	.word	0x00015815

000027a4 <bme68x_default_config>:
int8_t bme68x_default_config(struct bme68x_dev *dev) {
    27a4:	b530      	push	{r4, r5, lr}
    27a6:	b089      	sub	sp, #36	; 0x24
    27a8:	0004      	movs	r4, r0
	conf.os_hum = BME68X_OS_1X;
    27aa:	a806      	add	r0, sp, #24
    27ac:	2501      	movs	r5, #1
    27ae:	7005      	strb	r5, [r0, #0]
	conf.os_pres = BME68X_OS_16X;
    27b0:	2305      	movs	r3, #5
    27b2:	7083      	strb	r3, [r0, #2]
	conf.os_temp = BME68X_OS_2X;
    27b4:	3b03      	subs	r3, #3
    27b6:	7043      	strb	r3, [r0, #1]
	rslt = bme68x_set_conf(&conf, dev);
    27b8:	0021      	movs	r1, r4
    27ba:	4b08      	ldr	r3, [pc, #32]	; (27dc <bme68x_default_config+0x38>)
    27bc:	4798      	blx	r3
	heatr_conf.enable = BME68X_ENABLE;
    27be:	a901      	add	r1, sp, #4
    27c0:	700d      	strb	r5, [r1, #0]
	heatr_conf.heatr_dur = BME68X_HEATR_DUR1;
    27c2:	23fa      	movs	r3, #250	; 0xfa
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	808b      	strh	r3, [r1, #4]
	heatr_conf.heatr_temp = BME68X_HIGH_TEMP;
    27c8:	23af      	movs	r3, #175	; 0xaf
    27ca:	005b      	lsls	r3, r3, #1
    27cc:	804b      	strh	r3, [r1, #2]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, dev);
    27ce:	0022      	movs	r2, r4
    27d0:	2001      	movs	r0, #1
    27d2:	4b03      	ldr	r3, [pc, #12]	; (27e0 <bme68x_default_config+0x3c>)
    27d4:	4798      	blx	r3
}
    27d6:	b009      	add	sp, #36	; 0x24
    27d8:	bd30      	pop	{r4, r5, pc}
    27da:	46c0      	nop			; (mov r8, r8)
    27dc:	00001f1d 	.word	0x00001f1d
    27e0:	00002479 	.word	0x00002479

000027e4 <bme68x_interface_init>:
/*!
 * BME680 interface init function. Maps platform specific functions to 
 * device descriptor.
 */
int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf)
{
    27e4:	b510      	push	{r4, lr}
    27e6:	b082      	sub	sp, #8
    27e8:	1e04      	subs	r4, r0, #0
	// Assuming the I2C has been initialized before. 
    int8_t rslt = BME68X_OK;
	uint8_t dev_addr;

    if (bme != NULL)
    27ea:	d018      	beq.n	281e <bme68x_interface_init+0x3a>

#if defined(PC)
        setbuf(stdout, NULL);
#endif
        /* Bus configuration : I2C */
        if (intf == BME68X_I2C_INTF)
    27ec:	2901      	cmp	r1, #1
    27ee:	d00c      	beq.n	280a <bme68x_interface_init+0x26>
        else if (intf == BME68X_SPI_INTF)
        {
			/* Not required for our application */
        }

        delay_ms(100);
    27f0:	2064      	movs	r0, #100	; 0x64
    27f2:	4b0c      	ldr	r3, [pc, #48]	; (2824 <bme68x_interface_init+0x40>)
    27f4:	4798      	blx	r3

        bme->delay__us = bme68x_delay__us;
    27f6:	4b0c      	ldr	r3, [pc, #48]	; (2828 <bme68x_interface_init+0x44>)
    27f8:	64a3      	str	r3, [r4, #72]	; 0x48
        bme->intf_ptr = &dev_addr;
    27fa:	466b      	mov	r3, sp
    27fc:	3307      	adds	r3, #7
    27fe:	6063      	str	r3, [r4, #4]
        bme->amb_temp = 25; /* The ambient temperature in deg C is used for defining the heater temperature */
    2800:	2319      	movs	r3, #25
    2802:	73a3      	strb	r3, [r4, #14]
    int8_t rslt = BME68X_OK;
    2804:	2000      	movs	r0, #0
    {
        rslt = BME68X_E_NULL_PTR;
    }

    return rslt;
}
    2806:	b002      	add	sp, #8
    2808:	bd10      	pop	{r4, pc}
            dev_addr = BME68X_I2C_ADDR_HIGH;
    280a:	2277      	movs	r2, #119	; 0x77
    280c:	466b      	mov	r3, sp
    280e:	71da      	strb	r2, [r3, #7]
            bme->read = bme68x_i2c_read;
    2810:	4b06      	ldr	r3, [pc, #24]	; (282c <bme68x_interface_init+0x48>)
    2812:	6403      	str	r3, [r0, #64]	; 0x40
            bme->write = bme68x_i2c_write;
    2814:	4b06      	ldr	r3, [pc, #24]	; (2830 <bme68x_interface_init+0x4c>)
    2816:	6443      	str	r3, [r0, #68]	; 0x44
            bme->intf = BME68X_I2C_INTF;
    2818:	2301      	movs	r3, #1
    281a:	7303      	strb	r3, [r0, #12]
    281c:	e7e8      	b.n	27f0 <bme68x_interface_init+0xc>
        rslt = BME68X_E_NULL_PTR;
    281e:	2001      	movs	r0, #1
    2820:	4240      	negs	r0, r0
    2822:	e7f0      	b.n	2806 <bme68x_interface_init+0x22>
    2824:	00009cd5 	.word	0x00009cd5
    2828:	00001b11 	.word	0x00001b11
    282c:	00001a89 	.word	0x00001a89
    2830:	00001ad5 	.word	0x00001ad5

00002834 <CLI_ResetDevice>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    2834:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    2838:	4a02      	ldr	r2, [pc, #8]	; (2844 <CLI_ResetDevice+0x10>)
    283a:	4b03      	ldr	r3, [pc, #12]	; (2848 <CLI_ResetDevice+0x14>)
    283c:	60da      	str	r2, [r3, #12]
    283e:	f3bf 8f4f 	dsb	sy
    2842:	e7fe      	b.n	2842 <CLI_ResetDevice+0xe>
    2844:	05fa0004 	.word	0x05fa0004
    2848:	e000ed00 	.word	0xe000ed00

0000284c <CLI_GetTempData>:
/******************************************************************************
* CLI Functions - Define here
******************************************************************************/
//Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetTempData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
    284c:	b570      	push	{r4, r5, r6, lr}
    284e:	b0a2      	sub	sp, #136	; 0x88
    2850:	0006      	movs	r6, r0
	int8_t rslt;
	uint8_t n_fields;
	uint8_t i = 0;
	struct bme68x_data data[BME68X_N_MEAS] = { { 0 } };
    2852:	ac03      	add	r4, sp, #12
    2854:	2278      	movs	r2, #120	; 0x78
    2856:	2100      	movs	r1, #0
    2858:	0020      	movs	r0, r4
    285a:	4b0f      	ldr	r3, [pc, #60]	; (2898 <CLI_GetTempData+0x4c>)
    285c:	4798      	blx	r3
	//struct bme68x_dev t_dev;

	rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &bme); /* Trigger a measurement */
    285e:	4d0f      	ldr	r5, [pc, #60]	; (289c <CLI_GetTempData+0x50>)
    2860:	0029      	movs	r1, r5
    2862:	2001      	movs	r0, #1
    2864:	4b0e      	ldr	r3, [pc, #56]	; (28a0 <CLI_GetTempData+0x54>)
    2866:	4798      	blx	r3

	/* Wait for the measurement to complete */
	//t_dev.delay__us(BME68X_HEATR_DUR1_DELAY, t_dev.intf_ptr);
	vTaskDelay(pdMS_TO_TICKS((uint32_t) 1000));
    2868:	20fa      	movs	r0, #250	; 0xfa
    286a:	0080      	lsls	r0, r0, #2
    286c:	4b0d      	ldr	r3, [pc, #52]	; (28a4 <CLI_GetTempData+0x58>)
    286e:	4798      	blx	r3
	rslt = bme68x_get_data(BME68X_FORCED_MODE, &data[0], &n_fields, &bme);
    2870:	002b      	movs	r3, r5
    2872:	2287      	movs	r2, #135	; 0x87
    2874:	446a      	add	r2, sp
    2876:	0021      	movs	r1, r4
    2878:	2001      	movs	r0, #1
    287a:	4d0b      	ldr	r5, [pc, #44]	; (28a8 <CLI_GetTempData+0x5c>)
    287c:	47a8      	blx	r5
		    
	sprintf(pcWriteBuffer, "T: %d H: %d P: %d \n", data[0].temperature, data[0].humidity, data[0].pressure);
    287e:	68e3      	ldr	r3, [r4, #12]
    2880:	2106      	movs	r1, #6
    2882:	5e62      	ldrsh	r2, [r4, r1]
    2884:	68a1      	ldr	r1, [r4, #8]
    2886:	9100      	str	r1, [sp, #0]
    2888:	4908      	ldr	r1, [pc, #32]	; (28ac <CLI_GetTempData+0x60>)
    288a:	0030      	movs	r0, r6
    288c:	4c08      	ldr	r4, [pc, #32]	; (28b0 <CLI_GetTempData+0x64>)
    288e:	47a0      	blx	r4
	
	return pdFALSE;
}
    2890:	2000      	movs	r0, #0
    2892:	b022      	add	sp, #136	; 0x88
    2894:	bd70      	pop	{r4, r5, r6, pc}
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	00012b83 	.word	0x00012b83
    289c:	20005d70 	.word	0x20005d70
    28a0:	00001e59 	.word	0x00001e59
    28a4:	00007cc9 	.word	0x00007cc9
    28a8:	00002071 	.word	0x00002071
    28ac:	00019308 	.word	0x00019308
    28b0:	00013721 	.word	0x00013721

000028b4 <CLI_GetImuData>:

//Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
    28b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28b6:	b085      	sub	sp, #20
    28b8:	9002      	str	r0, [sp, #8]
    28ba:	9103      	str	r1, [sp, #12]
	static int16_t  data_raw_acceleration[3];
	static int16_t  data_raw_angular_rate;
	static float acceleration_mg[3];
	uint8_t reg  = 1;
	stmdev_ctx_t *dev_ctx = GetImuStruct();
    28bc:	4b17      	ldr	r3, [pc, #92]	; (291c <CLI_GetImuData+0x68>)
    28be:	4798      	blx	r3
    28c0:	0007      	movs	r7, r0

	/* Read output only if new xl value is available */
	//lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);

	if (reg) {
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
    28c2:	4c17      	ldr	r4, [pc, #92]	; (2920 <CLI_GetImuData+0x6c>)
    28c4:	2206      	movs	r2, #6
    28c6:	2100      	movs	r1, #0
    28c8:	0020      	movs	r0, r4
    28ca:	4b16      	ldr	r3, [pc, #88]	; (2924 <CLI_GetImuData+0x70>)
    28cc:	4798      	blx	r3
		lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
    28ce:	0021      	movs	r1, r4
    28d0:	0038      	movs	r0, r7
    28d2:	4b15      	ldr	r3, [pc, #84]	; (2928 <CLI_GetImuData+0x74>)
    28d4:	4798      	blx	r3
		acceleration_mg[0] =
		lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
    28d6:	2300      	movs	r3, #0
    28d8:	5ee0      	ldrsh	r0, [r4, r3]
    28da:	4f14      	ldr	r7, [pc, #80]	; (292c <CLI_GetImuData+0x78>)
    28dc:	47b8      	blx	r7
		acceleration_mg[0] =
    28de:	4e14      	ldr	r6, [pc, #80]	; (2930 <CLI_GetImuData+0x7c>)
    28e0:	6030      	str	r0, [r6, #0]
		acceleration_mg[1] =
		lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
    28e2:	2302      	movs	r3, #2
    28e4:	5ee0      	ldrsh	r0, [r4, r3]
    28e6:	47b8      	blx	r7
		acceleration_mg[1] =
    28e8:	6070      	str	r0, [r6, #4]
		acceleration_mg[2] =
		lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
    28ea:	2304      	movs	r3, #4
    28ec:	5ee0      	ldrsh	r0, [r4, r3]
    28ee:	47b8      	blx	r7
    28f0:	1c04      	adds	r4, r0, #0
		acceleration_mg[2] =
    28f2:	60b0      	str	r0, [r6, #8]

		snprintf(pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n",
    28f4:	4d0f      	ldr	r5, [pc, #60]	; (2934 <CLI_GetImuData+0x80>)
    28f6:	6830      	ldr	r0, [r6, #0]
    28f8:	47a8      	blx	r5
    28fa:	0007      	movs	r7, r0
    28fc:	1c20      	adds	r0, r4, #0
    28fe:	47a8      	blx	r5
    2900:	9001      	str	r0, [sp, #4]
    2902:	6870      	ldr	r0, [r6, #4]
    2904:	47a8      	blx	r5
    2906:	9000      	str	r0, [sp, #0]
    2908:	003b      	movs	r3, r7
    290a:	4a0b      	ldr	r2, [pc, #44]	; (2938 <CLI_GetImuData+0x84>)
    290c:	9903      	ldr	r1, [sp, #12]
    290e:	9802      	ldr	r0, [sp, #8]
    2910:	4c0a      	ldr	r4, [pc, #40]	; (293c <CLI_GetImuData+0x88>)
    2912:	47a0      	blx	r4
	} else {
		snprintf(pcWriteBuffer,xWriteBufferLen, "No data ready! \r\n");
	}

	return pdFALSE;
}
    2914:	2000      	movs	r0, #0
    2916:	b005      	add	sp, #20
    2918:	bdf0      	pop	{r4, r5, r6, r7, pc}
    291a:	46c0      	nop			; (mov r8, r8)
    291c:	00003689 	.word	0x00003689
    2920:	20000ae4 	.word	0x20000ae4
    2924:	00012b83 	.word	0x00012b83
    2928:	00003259 	.word	0x00003259
    292c:	0000313d 	.word	0x0000313d
    2930:	20000ac8 	.word	0x20000ac8
    2934:	000167ad 	.word	0x000167ad
    2938:	000192e4 	.word	0x000192e4
    293c:	000136bd 	.word	0x000136bd

00002940 <xCliClearTerminalScreen>:
//THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
//SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
//CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen( char *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
    2940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2942:	0006      	movs	r6, r0
    2944:	000f      	movs	r7, r1
	char clearScreen = ASCII_ESC;
	snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
    2946:	4d06      	ldr	r5, [pc, #24]	; (2960 <xCliClearTerminalScreen+0x20>)
    2948:	231b      	movs	r3, #27
    294a:	4a06      	ldr	r2, [pc, #24]	; (2964 <xCliClearTerminalScreen+0x24>)
    294c:	210f      	movs	r1, #15
    294e:	0028      	movs	r0, r5
    2950:	4c05      	ldr	r4, [pc, #20]	; (2968 <xCliClearTerminalScreen+0x28>)
    2952:	47a0      	blx	r4
	snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
    2954:	002a      	movs	r2, r5
    2956:	0039      	movs	r1, r7
    2958:	0030      	movs	r0, r6
    295a:	47a0      	blx	r4
	return pdFALSE;
}
    295c:	2000      	movs	r0, #0
    295e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2960:	20000ad4 	.word	0x20000ad4
    2964:	000194f0 	.word	0x000194f0
    2968:	000136bd 	.word	0x000136bd

0000296c <CLI_AirFlow>:
/**************************************************************************/ /**
 * @brief    Air Flow Command
 * @param    p_cli 
 ******************************************************************************/
BaseType_t CLI_AirFlow(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    296c:	b510      	push	{r4, lr}
    296e:	0004      	movs	r4, r0
	float air_speed = FS3000_readMetersPerSecond();
    2970:	4b05      	ldr	r3, [pc, #20]	; (2988 <CLI_AirFlow+0x1c>)
    2972:	4798      	blx	r3
	
    sprintf(pcWriteBuffer, "Airflow: %0.2f m/s ", air_speed);
    2974:	4b05      	ldr	r3, [pc, #20]	; (298c <CLI_AirFlow+0x20>)
    2976:	4798      	blx	r3
    2978:	0002      	movs	r2, r0
    297a:	000b      	movs	r3, r1
    297c:	4904      	ldr	r1, [pc, #16]	; (2990 <CLI_AirFlow+0x24>)
    297e:	0020      	movs	r0, r4
    2980:	4c04      	ldr	r4, [pc, #16]	; (2994 <CLI_AirFlow+0x28>)
    2982:	47a0      	blx	r4
	
    //SerialConsoleWriteString(bufCli);
	return pdFALSE;
}
    2984:	2000      	movs	r0, #0
    2986:	bd10      	pop	{r4, pc}
    2988:	00000195 	.word	0x00000195
    298c:	00018469 	.word	0x00018469
    2990:	000192d0 	.word	0x000192d0
    2994:	00013721 	.word	0x00013721

00002998 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    2998:	b530      	push	{r4, r5, lr}
    299a:	b08f      	sub	sp, #60	; 0x3c
	char bootloader_flag[] = "0:boot_flag.txt";
    299c:	ac0a      	add	r4, sp, #40	; 0x28
    299e:	4b12      	ldr	r3, [pc, #72]	; (29e8 <CLI_OTAU+0x50>)
    29a0:	0022      	movs	r2, r4
    29a2:	cb23      	ldmia	r3!, {r0, r1, r5}
    29a4:	c223      	stmia	r2!, {r0, r1, r5}
    29a6:	681b      	ldr	r3, [r3, #0]
    29a8:	6013      	str	r3, [r2, #0]
	f_unlink(bootloader_flag);
    29aa:	0020      	movs	r0, r4
    29ac:	4b0f      	ldr	r3, [pc, #60]	; (29ec <CLI_OTAU+0x54>)
    29ae:	4798      	blx	r3
	
	FIL file_object;
	
	bootloader_flag[0] = LUN_ID_SD_MMC_0_MEM + '0';
    29b0:	2330      	movs	r3, #48	; 0x30
    29b2:	7023      	strb	r3, [r4, #0]
	FRESULT res = f_open(&file_object, (char const *)bootloader_flag, FA_CREATE_ALWAYS | FA_WRITE);
    29b4:	220a      	movs	r2, #10
    29b6:	0021      	movs	r1, r4
    29b8:	a801      	add	r0, sp, #4
    29ba:	4b0d      	ldr	r3, [pc, #52]	; (29f0 <CLI_OTAU+0x58>)
    29bc:	4798      	blx	r3

	if (res != FR_OK) {
    29be:	2800      	cmp	r0, #0
    29c0:	d10c      	bne.n	29dc <CLI_OTAU+0x44>
		LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
		} else {
		SerialConsoleWriteString("boot_flag.txt added!\r\n");
    29c2:	480c      	ldr	r0, [pc, #48]	; (29f4 <CLI_OTAU+0x5c>)
    29c4:	4b0c      	ldr	r3, [pc, #48]	; (29f8 <CLI_OTAU+0x60>)
    29c6:	4798      	blx	r3
	}
	
	WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
    29c8:	2002      	movs	r0, #2
    29ca:	4b0c      	ldr	r3, [pc, #48]	; (29fc <CLI_OTAU+0x64>)
    29cc:	4798      	blx	r3

	vTaskDelay(1000);
    29ce:	20fa      	movs	r0, #250	; 0xfa
    29d0:	0080      	lsls	r0, r0, #2
    29d2:	4b0b      	ldr	r3, [pc, #44]	; (2a00 <CLI_OTAU+0x68>)
    29d4:	4798      	blx	r3
	
	return pdFALSE;
}
    29d6:	2000      	movs	r0, #0
    29d8:	b00f      	add	sp, #60	; 0x3c
    29da:	bd30      	pop	{r4, r5, pc}
		LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    29dc:	0002      	movs	r2, r0
    29de:	4909      	ldr	r1, [pc, #36]	; (2a04 <CLI_OTAU+0x6c>)
    29e0:	2000      	movs	r0, #0
    29e2:	4b09      	ldr	r3, [pc, #36]	; (2a08 <CLI_OTAU+0x70>)
    29e4:	4798      	blx	r3
    29e6:	e7ef      	b.n	29c8 <CLI_OTAU+0x30>
    29e8:	00019334 	.word	0x00019334
    29ec:	000111c5 	.word	0x000111c5
    29f0:	00010d61 	.word	0x00010d61
    29f4:	0001931c 	.word	0x0001931c
    29f8:	00008aed 	.word	0x00008aed
    29fc:	000011d5 	.word	0x000011d5
    2a00:	00007cc9 	.word	0x00007cc9
    2a04:	0001912c 	.word	0x0001912c
    2a08:	00008b9d 	.word	0x00008b9d

00002a0c <vCommandConsoleTask>:
{
    2a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a0e:	46d6      	mov	lr, sl
    2a10:	464f      	mov	r7, r9
    2a12:	b580      	push	{r7, lr}
    2a14:	b083      	sub	sp, #12
FreeRTOS_CLIRegisterCommand( &xTempGetCommand );
    2a16:	4868      	ldr	r0, [pc, #416]	; (2bb8 <vCommandConsoleTask+0x1ac>)
    2a18:	4c68      	ldr	r4, [pc, #416]	; (2bbc <vCommandConsoleTask+0x1b0>)
    2a1a:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xImuGetCommand );
    2a1c:	4868      	ldr	r0, [pc, #416]	; (2bc0 <vCommandConsoleTask+0x1b4>)
    2a1e:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xClearScreen );
    2a20:	4868      	ldr	r0, [pc, #416]	; (2bc4 <vCommandConsoleTask+0x1b8>)
    2a22:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xResetCommand );
    2a24:	4868      	ldr	r0, [pc, #416]	; (2bc8 <vCommandConsoleTask+0x1bc>)
    2a26:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand (&xAirFlow);
    2a28:	4868      	ldr	r0, [pc, #416]	; (2bcc <vCommandConsoleTask+0x1c0>)
    2a2a:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand (&xOTAUCommand);
    2a2c:	4868      	ldr	r0, [pc, #416]	; (2bd0 <vCommandConsoleTask+0x1c4>)
    2a2e:	47a0      	blx	r4
    SerialConsoleWriteString( pcWelcomeMessage);
    2a30:	4868      	ldr	r0, [pc, #416]	; (2bd4 <vCommandConsoleTask+0x1c8>)
    2a32:	4b69      	ldr	r3, [pc, #420]	; (2bd8 <vCommandConsoleTask+0x1cc>)
    2a34:	4798      	blx	r3
	cliCharReadySemaphore = xSemaphoreCreateBinary();
    2a36:	2203      	movs	r2, #3
    2a38:	2100      	movs	r1, #0
    2a3a:	2001      	movs	r0, #1
    2a3c:	4b67      	ldr	r3, [pc, #412]	; (2bdc <vCommandConsoleTask+0x1d0>)
    2a3e:	4798      	blx	r3
    2a40:	4b67      	ldr	r3, [pc, #412]	; (2be0 <vCommandConsoleTask+0x1d4>)
    2a42:	6018      	str	r0, [r3, #0]
	if(cliCharReadySemaphore == NULL)
    2a44:	2800      	cmp	r0, #0
    2a46:	d106      	bne.n	2a56 <vCommandConsoleTask+0x4a>
		LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
    2a48:	4966      	ldr	r1, [pc, #408]	; (2be4 <vCommandConsoleTask+0x1d8>)
    2a4a:	3003      	adds	r0, #3
    2a4c:	4b66      	ldr	r3, [pc, #408]	; (2be8 <vCommandConsoleTask+0x1dc>)
    2a4e:	4798      	blx	r3
		vTaskSuspend( NULL );
    2a50:	2000      	movs	r0, #0
    2a52:	4b66      	ldr	r3, [pc, #408]	; (2bec <vCommandConsoleTask+0x1e0>)
    2a54:	4798      	blx	r3
            cInputIndex = 0;
    2a56:	2400      	movs	r4, #0
int ret = SerialConsoleReadCharacter(character);
    2a58:	4b65      	ldr	r3, [pc, #404]	; (2bf0 <vCommandConsoleTask+0x1e4>)
    2a5a:	4699      	mov	r9, r3
	xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
    2a5c:	4b60      	ldr	r3, [pc, #384]	; (2be0 <vCommandConsoleTask+0x1d4>)
    2a5e:	469a      	mov	sl, r3
    2a60:	e033      	b.n	2aca <vCommandConsoleTask+0xbe>
    2a62:	2101      	movs	r1, #1
    2a64:	4249      	negs	r1, r1
    2a66:	4653      	mov	r3, sl
    2a68:	6818      	ldr	r0, [r3, #0]
    2a6a:	4b62      	ldr	r3, [pc, #392]	; (2bf4 <vCommandConsoleTask+0x1e8>)
    2a6c:	4798      	blx	r3
	SerialConsoleReadCharacter(character);
    2a6e:	a801      	add	r0, sp, #4
    2a70:	4b5f      	ldr	r3, [pc, #380]	; (2bf0 <vCommandConsoleTask+0x1e4>)
    2a72:	4798      	blx	r3
    2a74:	e02d      	b.n	2ad2 <vCommandConsoleTask+0xc6>
            SerialConsoleWriteString("\r\n");
    2a76:	4860      	ldr	r0, [pc, #384]	; (2bf8 <vCommandConsoleTask+0x1ec>)
    2a78:	4b57      	ldr	r3, [pc, #348]	; (2bd8 <vCommandConsoleTask+0x1cc>)
    2a7a:	4798      	blx	r3
			isEscapeCode = false; pcEscapeCodePos = 0;
    2a7c:	2400      	movs	r4, #0
    2a7e:	4b5f      	ldr	r3, [pc, #380]	; (2bfc <vCommandConsoleTask+0x1f0>)
    2a80:	701c      	strb	r4, [r3, #0]
    2a82:	4b5f      	ldr	r3, [pc, #380]	; (2c00 <vCommandConsoleTask+0x1f4>)
    2a84:	701c      	strb	r4, [r3, #0]
			strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI-1);
    2a86:	4d5f      	ldr	r5, [pc, #380]	; (2c04 <vCommandConsoleTask+0x1f8>)
    2a88:	2231      	movs	r2, #49	; 0x31
    2a8a:	495f      	ldr	r1, [pc, #380]	; (2c08 <vCommandConsoleTask+0x1fc>)
    2a8c:	0028      	movs	r0, r5
    2a8e:	4b5f      	ldr	r3, [pc, #380]	; (2c0c <vCommandConsoleTask+0x200>)
    2a90:	4798      	blx	r3
			pcLastCommand[MAX_INPUT_LENGTH_CLI-1] = 0;	//Ensure null termination
    2a92:	2331      	movs	r3, #49	; 0x31
    2a94:	54ec      	strb	r4, [r5, r3]
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
    2a96:	4c5e      	ldr	r4, [pc, #376]	; (2c10 <vCommandConsoleTask+0x204>)
    2a98:	4e5b      	ldr	r6, [pc, #364]	; (2c08 <vCommandConsoleTask+0x1fc>)
    2a9a:	4f5e      	ldr	r7, [pc, #376]	; (2c14 <vCommandConsoleTask+0x208>)
    2a9c:	2264      	movs	r2, #100	; 0x64
    2a9e:	0021      	movs	r1, r4
    2aa0:	0030      	movs	r0, r6
    2aa2:	47b8      	blx	r7
    2aa4:	0005      	movs	r5, r0
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
    2aa6:	2200      	movs	r2, #0
    2aa8:	2363      	movs	r3, #99	; 0x63
    2aaa:	54e2      	strb	r2, [r4, r3]
                SerialConsoleWriteString(pcOutputString);
    2aac:	0020      	movs	r0, r4
    2aae:	4b4a      	ldr	r3, [pc, #296]	; (2bd8 <vCommandConsoleTask+0x1cc>)
    2ab0:	4798      	blx	r3
            } while( xMoreDataToFollow != pdFALSE );
    2ab2:	2d00      	cmp	r5, #0
    2ab4:	d1f2      	bne.n	2a9c <vCommandConsoleTask+0x90>
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
    2ab6:	2232      	movs	r2, #50	; 0x32
    2ab8:	2100      	movs	r1, #0
    2aba:	4853      	ldr	r0, [pc, #332]	; (2c08 <vCommandConsoleTask+0x1fc>)
    2abc:	4c56      	ldr	r4, [pc, #344]	; (2c18 <vCommandConsoleTask+0x20c>)
    2abe:	47a0      	blx	r4
			memset( pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
    2ac0:	2264      	movs	r2, #100	; 0x64
    2ac2:	2100      	movs	r1, #0
    2ac4:	4852      	ldr	r0, [pc, #328]	; (2c10 <vCommandConsoleTask+0x204>)
    2ac6:	47a0      	blx	r4
            cInputIndex = 0;
    2ac8:	2400      	movs	r4, #0
int ret = SerialConsoleReadCharacter(character);
    2aca:	a801      	add	r0, sp, #4
    2acc:	47c8      	blx	r9
if(ret == -1)
    2ace:	1c43      	adds	r3, r0, #1
    2ad0:	d0c7      	beq.n	2a62 <vCommandConsoleTask+0x56>
	if( cRxedChar[0] == '\n' || cRxedChar[0] == '\r'  )
    2ad2:	466b      	mov	r3, sp
    2ad4:	791b      	ldrb	r3, [r3, #4]
    2ad6:	2b0a      	cmp	r3, #10
    2ad8:	d0cd      	beq.n	2a76 <vCommandConsoleTask+0x6a>
    2ada:	2b0d      	cmp	r3, #13
    2adc:	d0cb      	beq.n	2a76 <vCommandConsoleTask+0x6a>
			if (true == isEscapeCode) {
    2ade:	4a47      	ldr	r2, [pc, #284]	; (2bfc <vCommandConsoleTask+0x1f0>)
    2ae0:	7812      	ldrb	r2, [r2, #0]
    2ae2:	2a00      	cmp	r2, #0
    2ae4:	d03f      	beq.n	2b66 <vCommandConsoleTask+0x15a>
				if(pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
    2ae6:	4a46      	ldr	r2, [pc, #280]	; (2c00 <vCommandConsoleTask+0x1f4>)
    2ae8:	7812      	ldrb	r2, [r2, #0]
    2aea:	2a03      	cmp	r2, #3
    2aec:	d813      	bhi.n	2b16 <vCommandConsoleTask+0x10a>
					pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
    2aee:	1c51      	adds	r1, r2, #1
    2af0:	b2c9      	uxtb	r1, r1
    2af2:	4843      	ldr	r0, [pc, #268]	; (2c00 <vCommandConsoleTask+0x1f4>)
    2af4:	7001      	strb	r1, [r0, #0]
    2af6:	4849      	ldr	r0, [pc, #292]	; (2c1c <vCommandConsoleTask+0x210>)
    2af8:	5483      	strb	r3, [r0, r2]
				if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
    2afa:	2901      	cmp	r1, #1
    2afc:	d9e5      	bls.n	2aca <vCommandConsoleTask+0xbe>
					if(strcasecmp(pcEscapeCodes, "oa"))	{
    2afe:	4948      	ldr	r1, [pc, #288]	; (2c20 <vCommandConsoleTask+0x214>)
    2b00:	4846      	ldr	r0, [pc, #280]	; (2c1c <vCommandConsoleTask+0x210>)
    2b02:	4b48      	ldr	r3, [pc, #288]	; (2c24 <vCommandConsoleTask+0x218>)
    2b04:	4798      	blx	r3
    2b06:	2800      	cmp	r0, #0
    2b08:	d10b      	bne.n	2b22 <vCommandConsoleTask+0x116>
					isEscapeCode = false; pcEscapeCodePos = 0;
    2b0a:	2300      	movs	r3, #0
    2b0c:	4a3b      	ldr	r2, [pc, #236]	; (2bfc <vCommandConsoleTask+0x1f0>)
    2b0e:	7013      	strb	r3, [r2, #0]
    2b10:	4a3b      	ldr	r2, [pc, #236]	; (2c00 <vCommandConsoleTask+0x1f4>)
    2b12:	7013      	strb	r3, [r2, #0]
    2b14:	e7d9      	b.n	2aca <vCommandConsoleTask+0xbe>
					isEscapeCode = false; pcEscapeCodePos = 0;
    2b16:	2300      	movs	r3, #0
    2b18:	4a38      	ldr	r2, [pc, #224]	; (2bfc <vCommandConsoleTask+0x1f0>)
    2b1a:	7013      	strb	r3, [r2, #0]
    2b1c:	4a38      	ldr	r2, [pc, #224]	; (2c00 <vCommandConsoleTask+0x1f4>)
    2b1e:	7013      	strb	r3, [r2, #0]
    2b20:	e7d3      	b.n	2aca <vCommandConsoleTask+0xbe>
                            sprintf(pcInputString, "%c[2K\r>", 27);
    2b22:	4c39      	ldr	r4, [pc, #228]	; (2c08 <vCommandConsoleTask+0x1fc>)
    2b24:	221b      	movs	r2, #27
    2b26:	4940      	ldr	r1, [pc, #256]	; (2c28 <vCommandConsoleTask+0x21c>)
    2b28:	0020      	movs	r0, r4
    2b2a:	4b40      	ldr	r3, [pc, #256]	; (2c2c <vCommandConsoleTask+0x220>)
    2b2c:	4798      	blx	r3
				            SerialConsoleWriteString((char*)pcInputString);
    2b2e:	0020      	movs	r0, r4
    2b30:	4b29      	ldr	r3, [pc, #164]	; (2bd8 <vCommandConsoleTask+0x1cc>)
    2b32:	4798      	blx	r3
                            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
    2b34:	2232      	movs	r2, #50	; 0x32
    2b36:	2100      	movs	r1, #0
    2b38:	0020      	movs	r0, r4
    2b3a:	4b37      	ldr	r3, [pc, #220]	; (2c18 <vCommandConsoleTask+0x20c>)
    2b3c:	4798      	blx	r3
						strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1); 	
    2b3e:	2231      	movs	r2, #49	; 0x31
    2b40:	4930      	ldr	r1, [pc, #192]	; (2c04 <vCommandConsoleTask+0x1f8>)
    2b42:	0020      	movs	r0, r4
    2b44:	4b31      	ldr	r3, [pc, #196]	; (2c0c <vCommandConsoleTask+0x200>)
    2b46:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
    2b48:	0020      	movs	r0, r4
    2b4a:	4b39      	ldr	r3, [pc, #228]	; (2c30 <vCommandConsoleTask+0x224>)
    2b4c:	4798      	blx	r3
    2b4e:	2431      	movs	r4, #49	; 0x31
    2b50:	2830      	cmp	r0, #48	; 0x30
    2b52:	d803      	bhi.n	2b5c <vCommandConsoleTask+0x150>
    2b54:	482b      	ldr	r0, [pc, #172]	; (2c04 <vCommandConsoleTask+0x1f8>)
    2b56:	4b36      	ldr	r3, [pc, #216]	; (2c30 <vCommandConsoleTask+0x224>)
    2b58:	4798      	blx	r3
    2b5a:	0004      	movs	r4, r0
    2b5c:	b2e4      	uxtb	r4, r4
						SerialConsoleWriteString(pcInputString);
    2b5e:	482a      	ldr	r0, [pc, #168]	; (2c08 <vCommandConsoleTask+0x1fc>)
    2b60:	4b1d      	ldr	r3, [pc, #116]	; (2bd8 <vCommandConsoleTask+0x1cc>)
    2b62:	4798      	blx	r3
    2b64:	e7d1      	b.n	2b0a <vCommandConsoleTask+0xfe>
            else if( cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE )
    2b66:	2b08      	cmp	r3, #8
    2b68:	d010      	beq.n	2b8c <vCommandConsoleTask+0x180>
    2b6a:	2b7f      	cmp	r3, #127	; 0x7f
    2b6c:	d00e      	beq.n	2b8c <vCommandConsoleTask+0x180>
			else if( cRxedChar[0] == ASCII_ESC) {
    2b6e:	2b1b      	cmp	r3, #27
    2b70:	d01a      	beq.n	2ba8 <vCommandConsoleTask+0x19c>
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
    2b72:	2c31      	cmp	r4, #49	; 0x31
    2b74:	d803      	bhi.n	2b7e <vCommandConsoleTask+0x172>
                    pcInputString[ cInputIndex ] = cRxedChar[0];
    2b76:	4a24      	ldr	r2, [pc, #144]	; (2c08 <vCommandConsoleTask+0x1fc>)
    2b78:	5513      	strb	r3, [r2, r4]
                    cInputIndex++;
    2b7a:	3401      	adds	r4, #1
    2b7c:	b2e4      	uxtb	r4, r4
					cRxedChar[1] = 0;
    2b7e:	2300      	movs	r3, #0
    2b80:	466a      	mov	r2, sp
    2b82:	7153      	strb	r3, [r2, #5]
					SerialConsoleWriteString(&cRxedChar[0]);
    2b84:	a801      	add	r0, sp, #4
    2b86:	4b14      	ldr	r3, [pc, #80]	; (2bd8 <vCommandConsoleTask+0x1cc>)
    2b88:	4798      	blx	r3
    2b8a:	e79e      	b.n	2aca <vCommandConsoleTask+0xbe>
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
    2b8c:	4b29      	ldr	r3, [pc, #164]	; (2c34 <vCommandConsoleTask+0x228>)
    2b8e:	681b      	ldr	r3, [r3, #0]
    2b90:	9300      	str	r3, [sp, #0]
				SerialConsoleWriteString(erase);
    2b92:	4668      	mov	r0, sp
    2b94:	4b10      	ldr	r3, [pc, #64]	; (2bd8 <vCommandConsoleTask+0x1cc>)
    2b96:	4798      	blx	r3
                if( cInputIndex > 0 )
    2b98:	2c00      	cmp	r4, #0
    2b9a:	d096      	beq.n	2aca <vCommandConsoleTask+0xbe>
                    cInputIndex--;
    2b9c:	3c01      	subs	r4, #1
    2b9e:	b2e4      	uxtb	r4, r4
                    pcInputString[ cInputIndex ] = 0;
    2ba0:	2200      	movs	r2, #0
    2ba2:	4b19      	ldr	r3, [pc, #100]	; (2c08 <vCommandConsoleTask+0x1fc>)
    2ba4:	551a      	strb	r2, [r3, r4]
            {
    2ba6:	e790      	b.n	2aca <vCommandConsoleTask+0xbe>
				isEscapeCode = true; //Next characters will be code arguments
    2ba8:	2201      	movs	r2, #1
    2baa:	4b14      	ldr	r3, [pc, #80]	; (2bfc <vCommandConsoleTask+0x1f0>)
    2bac:	701a      	strb	r2, [r3, #0]
				pcEscapeCodePos = 0;
    2bae:	2200      	movs	r2, #0
    2bb0:	4b13      	ldr	r3, [pc, #76]	; (2c00 <vCommandConsoleTask+0x1f4>)
    2bb2:	701a      	strb	r2, [r3, #0]
    2bb4:	e789      	b.n	2aca <vCommandConsoleTask+0xbe>
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	00019528 	.word	0x00019528
    2bbc:	00004ead 	.word	0x00004ead
    2bc0:	000194f8 	.word	0x000194f8
    2bc4:	000194e0 	.word	0x000194e0
    2bc8:	00019518 	.word	0x00019518
    2bcc:	000194d0 	.word	0x000194d0
    2bd0:	00019508 	.word	0x00019508
    2bd4:	00019460 	.word	0x00019460
    2bd8:	00008aed 	.word	0x00008aed
    2bdc:	00006709 	.word	0x00006709
    2be0:	20004708 	.word	0x20004708
    2be4:	000194a4 	.word	0x000194a4
    2be8:	00008b9d 	.word	0x00008b9d
    2bec:	00007e69 	.word	0x00007e69
    2bf0:	00008b71 	.word	0x00008b71
    2bf4:	000071ed 	.word	0x000071ed
    2bf8:	0001bc7c 	.word	0x0001bc7c
    2bfc:	20000aea 	.word	0x20000aea
    2c00:	20000aeb 	.word	0x20000aeb
    2c04:	20000b24 	.word	0x20000b24
    2c08:	20000af0 	.word	0x20000af0
    2c0c:	0001384b 	.word	0x0001384b
    2c10:	20000b58 	.word	0x20000b58
    2c14:	00004ef1 	.word	0x00004ef1
    2c18:	00012b83 	.word	0x00012b83
    2c1c:	20000aec 	.word	0x20000aec
    2c20:	000194c4 	.word	0x000194c4
    2c24:	00013765 	.word	0x00013765
    2c28:	000194c8 	.word	0x000194c8
    2c2c:	00013721 	.word	0x00013721
    2c30:	0001381b 	.word	0x0001381b
    2c34:	000192cc 	.word	0x000192cc

00002c38 <CliCharReadySemaphoreGiveFromISR>:
{
    2c38:	b510      	push	{r4, lr}
	xHigherPriorityTaskWoken = pdFALSE;
    2c3a:	4c08      	ldr	r4, [pc, #32]	; (2c5c <CliCharReadySemaphoreGiveFromISR+0x24>)
    2c3c:	2300      	movs	r3, #0
    2c3e:	6023      	str	r3, [r4, #0]
	xSemaphoreGiveFromISR( cliCharReadySemaphore, &xHigherPriorityTaskWoken );
    2c40:	4b07      	ldr	r3, [pc, #28]	; (2c60 <CliCharReadySemaphoreGiveFromISR+0x28>)
    2c42:	6818      	ldr	r0, [r3, #0]
    2c44:	0021      	movs	r1, r4
    2c46:	4b07      	ldr	r3, [pc, #28]	; (2c64 <CliCharReadySemaphoreGiveFromISR+0x2c>)
    2c48:	4798      	blx	r3
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    2c4a:	6823      	ldr	r3, [r4, #0]
    2c4c:	2b00      	cmp	r3, #0
    2c4e:	d003      	beq.n	2c58 <CliCharReadySemaphoreGiveFromISR+0x20>
    2c50:	2280      	movs	r2, #128	; 0x80
    2c52:	0552      	lsls	r2, r2, #21
    2c54:	4b04      	ldr	r3, [pc, #16]	; (2c68 <CliCharReadySemaphoreGiveFromISR+0x30>)
    2c56:	601a      	str	r2, [r3, #0]
}
    2c58:	bd10      	pop	{r4, pc}
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	20000bbc 	.word	0x20000bbc
    2c60:	20004708 	.word	0x20004708
    2c64:	00006ed1 	.word	0x00006ed1
    2c68:	e000ed04 	.word	0xe000ed04

00002c6c <I2cSensorsTxComplete>:
				and is currently waiting for a notification that it has finished.
 * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsTxComplete(struct i2c_master_module *const module){
    2c6c:	b510      	push	{r4, lr}
    2c6e:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;			
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    2c70:	2400      	movs	r4, #0
    2c72:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    2c74:	4b07      	ldr	r3, [pc, #28]	; (2c94 <I2cSensorsTxComplete+0x28>)
    2c76:	6818      	ldr	r0, [r3, #0]
    2c78:	a901      	add	r1, sp, #4
    2c7a:	4b07      	ldr	r3, [pc, #28]	; (2c98 <I2cSensorsTxComplete+0x2c>)
    2c7c:	4798      	blx	r3
	sensorTransmitError = false;
    2c7e:	4b07      	ldr	r3, [pc, #28]	; (2c9c <I2cSensorsTxComplete+0x30>)
    2c80:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    2c82:	9b01      	ldr	r3, [sp, #4]
    2c84:	2b00      	cmp	r3, #0
    2c86:	d003      	beq.n	2c90 <I2cSensorsTxComplete+0x24>
    2c88:	2280      	movs	r2, #128	; 0x80
    2c8a:	0552      	lsls	r2, r2, #21
    2c8c:	4b04      	ldr	r3, [pc, #16]	; (2ca0 <I2cSensorsTxComplete+0x34>)
    2c8e:	601a      	str	r2, [r3, #0]
}
    2c90:	b002      	add	sp, #8
    2c92:	bd10      	pop	{r4, pc}
    2c94:	20004738 	.word	0x20004738
    2c98:	00006ed1 	.word	0x00006ed1
    2c9c:	20000bc0 	.word	0x20000bc0
    2ca0:	e000ed04 	.word	0xe000ed04

00002ca4 <I2cSensorsRxComplete>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsRxComplete(struct i2c_master_module *const module){
    2ca4:	b510      	push	{r4, lr}
    2ca6:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    2ca8:	2400      	movs	r4, #0
    2caa:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    2cac:	4b07      	ldr	r3, [pc, #28]	; (2ccc <I2cSensorsRxComplete+0x28>)
    2cae:	6818      	ldr	r0, [r3, #0]
    2cb0:	a901      	add	r1, sp, #4
    2cb2:	4b07      	ldr	r3, [pc, #28]	; (2cd0 <I2cSensorsRxComplete+0x2c>)
    2cb4:	4798      	blx	r3
	sensorTransmitError = false;
    2cb6:	4b07      	ldr	r3, [pc, #28]	; (2cd4 <I2cSensorsRxComplete+0x30>)
    2cb8:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    2cba:	9b01      	ldr	r3, [sp, #4]
    2cbc:	2b00      	cmp	r3, #0
    2cbe:	d003      	beq.n	2cc8 <I2cSensorsRxComplete+0x24>
    2cc0:	2280      	movs	r2, #128	; 0x80
    2cc2:	0552      	lsls	r2, r2, #21
    2cc4:	4b04      	ldr	r3, [pc, #16]	; (2cd8 <I2cSensorsRxComplete+0x34>)
    2cc6:	601a      	str	r2, [r3, #0]
}
    2cc8:	b002      	add	sp, #8
    2cca:	bd10      	pop	{r4, pc}
    2ccc:	20004738 	.word	0x20004738
    2cd0:	00006ed1 	.word	0x00006ed1
    2cd4:	20000bc0 	.word	0x20000bc0
    2cd8:	e000ed04 	.word	0xe000ed04

00002cdc <I2cSensorsError>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsError(struct i2c_master_module *const module){
    2cdc:	b510      	push	{r4, lr}
    2cde:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.txDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    2ce0:	2400      	movs	r4, #0
    2ce2:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    2ce4:	4b07      	ldr	r3, [pc, #28]	; (2d04 <I2cSensorsError+0x28>)
    2ce6:	6818      	ldr	r0, [r3, #0]
    2ce8:	a901      	add	r1, sp, #4
    2cea:	4b07      	ldr	r3, [pc, #28]	; (2d08 <I2cSensorsError+0x2c>)
    2cec:	4798      	blx	r3
	sensorTransmitError = false;
    2cee:	4b07      	ldr	r3, [pc, #28]	; (2d0c <I2cSensorsError+0x30>)
    2cf0:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    2cf2:	9b01      	ldr	r3, [sp, #4]
    2cf4:	2b00      	cmp	r3, #0
    2cf6:	d003      	beq.n	2d00 <I2cSensorsError+0x24>
    2cf8:	2280      	movs	r2, #128	; 0x80
    2cfa:	0552      	lsls	r2, r2, #21
    2cfc:	4b04      	ldr	r3, [pc, #16]	; (2d10 <I2cSensorsError+0x34>)
    2cfe:	601a      	str	r2, [r3, #0]
}
    2d00:	b002      	add	sp, #8
    2d02:	bd10      	pop	{r4, pc}
    2d04:	20004738 	.word	0x20004738
    2d08:	00006ed1 	.word	0x00006ed1
    2d0c:	20000bc0 	.word	0x20000bc0
    2d10:	e000ed04 	.word	0xe000ed04

00002d14 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
    2d14:	b570      	push	{r4, r5, r6, lr}
	/* Register callback function. */
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    2d16:	4c0c      	ldr	r4, [pc, #48]	; (2d48 <I2cDriverRegisterSensorBusCallbacks+0x34>)
    2d18:	2200      	movs	r2, #0
    2d1a:	490c      	ldr	r1, [pc, #48]	; (2d4c <I2cDriverRegisterSensorBusCallbacks+0x38>)
    2d1c:	0020      	movs	r0, r4
    2d1e:	4d0c      	ldr	r5, [pc, #48]	; (2d50 <I2cDriverRegisterSensorBusCallbacks+0x3c>)
    2d20:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    2d22:	7e63      	ldrb	r3, [r4, #25]
    2d24:	2201      	movs	r2, #1
    2d26:	4313      	orrs	r3, r2
    2d28:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
    2d2a:	490a      	ldr	r1, [pc, #40]	; (2d54 <I2cDriverRegisterSensorBusCallbacks+0x40>)
    2d2c:	0020      	movs	r0, r4
    2d2e:	47a8      	blx	r5
    2d30:	7e63      	ldrb	r3, [r4, #25]
    2d32:	2202      	movs	r2, #2
    2d34:	4313      	orrs	r3, r2
    2d36:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_READ_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError,I2C_MASTER_CALLBACK_ERROR);
    2d38:	4907      	ldr	r1, [pc, #28]	; (2d58 <I2cDriverRegisterSensorBusCallbacks+0x44>)
    2d3a:	0020      	movs	r0, r4
    2d3c:	47a8      	blx	r5
    2d3e:	7e63      	ldrb	r3, [r4, #25]
    2d40:	2204      	movs	r2, #4
    2d42:	4313      	orrs	r3, r2
    2d44:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_ERROR);
}
    2d46:	bd70      	pop	{r4, r5, r6, pc}
    2d48:	20004710 	.word	0x20004710
    2d4c:	00002c6d 	.word	0x00002c6d
    2d50:	00001401 	.word	0x00001401
    2d54:	00002ca5 	.word	0x00002ca5
    2d58:	00002cdd 	.word	0x00002cdd

00002d5c <I2cInitializeDriver>:
 * @fn			int32_t I2cInitializeDriver(void)
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note        
 *****************************************************************************/
 int32_t I2cInitializeDriver(void){
    2d5c:	b570      	push	{r4, r5, r6, lr}
    2d5e:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2d60:	ab01      	add	r3, sp, #4
    2d62:	2264      	movs	r2, #100	; 0x64
    2d64:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2d66:	4a33      	ldr	r2, [pc, #204]	; (2e34 <I2cInitializeDriver+0xd8>)
    2d68:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2d6a:	2200      	movs	r2, #0
    2d6c:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2d6e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    2d70:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2d72:	2180      	movs	r1, #128	; 0x80
    2d74:	0389      	lsls	r1, r1, #14
    2d76:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    2d78:	2101      	movs	r1, #1
    2d7a:	4249      	negs	r1, r1
    2d7c:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    2d7e:	3125      	adds	r1, #37	; 0x25
    2d80:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2d82:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2d84:	3108      	adds	r1, #8
    2d86:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2d88:	3101      	adds	r1, #1
    2d8a:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    2d8c:	3101      	adds	r1, #1
    2d8e:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2d90:	32d7      	adds	r2, #215	; 0xd7
    2d92:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    2d94:	4a28      	ldr	r2, [pc, #160]	; (2e38 <I2cInitializeDriver+0xdc>)
    2d96:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    2d98:	4a28      	ldr	r2, [pc, #160]	; (2e3c <I2cInitializeDriver+0xe0>)
    2d9a:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.buffer_timeout = 10000;
    2d9c:	4a28      	ldr	r2, [pc, #160]	; (2e40 <I2cInitializeDriver+0xe4>)
    2d9e:	82da      	strh	r2, [r3, #22]
    2da0:	2403      	movs	r4, #3
		errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
    2da2:	4d28      	ldr	r5, [pc, #160]	; (2e44 <I2cInitializeDriver+0xe8>)
    2da4:	4e28      	ldr	r6, [pc, #160]	; (2e48 <I2cInitializeDriver+0xec>)
    2da6:	aa01      	add	r2, sp, #4
    2da8:	4928      	ldr	r1, [pc, #160]	; (2e4c <I2cInitializeDriver+0xf0>)
    2daa:	0028      	movs	r0, r5
    2dac:	47b0      	blx	r6
		if(STATUS_OK == errCodeAsf){
    2dae:	2800      	cmp	r0, #0
    2db0:	d006      	beq.n	2dc0 <I2cInitializeDriver+0x64>
			i2c_master_reset(&i2cSensorBusInstance);
    2db2:	4824      	ldr	r0, [pc, #144]	; (2e44 <I2cInitializeDriver+0xe8>)
    2db4:	4b26      	ldr	r3, [pc, #152]	; (2e50 <I2cInitializeDriver+0xf4>)
    2db6:	4798      	blx	r3
    2db8:	3c01      	subs	r4, #1
    2dba:	b2e4      	uxtb	r4, r4
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
    2dbc:	2c00      	cmp	r4, #0
    2dbe:	d1f2      	bne.n	2da6 <I2cInitializeDriver+0x4a>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2dc0:	4b20      	ldr	r3, [pc, #128]	; (2e44 <I2cInitializeDriver+0xe8>)
    2dc2:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2dc4:	2207      	movs	r2, #7
    2dc6:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    2dc8:	421a      	tst	r2, r3
    2dca:	d1fc      	bne.n	2dc6 <I2cInitializeDriver+0x6a>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2dcc:	6823      	ldr	r3, [r4, #0]
    2dce:	2202      	movs	r2, #2
    2dd0:	4313      	orrs	r3, r2
    2dd2:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2dd4:	4d1b      	ldr	r5, [pc, #108]	; (2e44 <I2cInitializeDriver+0xe8>)
    2dd6:	6828      	ldr	r0, [r5, #0]
    2dd8:	4b1e      	ldr	r3, [pc, #120]	; (2e54 <I2cInitializeDriver+0xf8>)
    2dda:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2ddc:	231f      	movs	r3, #31
    2dde:	4018      	ands	r0, r3
    2de0:	3b1e      	subs	r3, #30
    2de2:	4083      	lsls	r3, r0
    2de4:	4a1c      	ldr	r2, [pc, #112]	; (2e58 <I2cInitializeDriver+0xfc>)
    2de6:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2de8:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    2dea:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2dec:	2110      	movs	r1, #16
    2dee:	8b62      	ldrh	r2, [r4, #26]
    2df0:	420a      	tst	r2, r1
    2df2:	d104      	bne.n	2dfe <I2cInitializeDriver+0xa2>
		timeout_counter++;
    2df4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2df6:	4283      	cmp	r3, r0
    2df8:	d3f9      	bcc.n	2dee <I2cInitializeDriver+0x92>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2dfa:	2310      	movs	r3, #16
    2dfc:	8363      	strh	r3, [r4, #26]


	error = I2cDriverConfigureSensorBus();
	if(STATUS_OK != error) goto exit;
	
	I2cDriverRegisterSensorBusCallbacks();
    2dfe:	4b17      	ldr	r3, [pc, #92]	; (2e5c <I2cInitializeDriver+0x100>)
    2e00:	4798      	blx	r3
	
		
	sensorI2cMutexHandle = xSemaphoreCreateMutex();
    2e02:	2001      	movs	r0, #1
    2e04:	4b16      	ldr	r3, [pc, #88]	; (2e60 <I2cInitializeDriver+0x104>)
    2e06:	4798      	blx	r3
    2e08:	4c16      	ldr	r4, [pc, #88]	; (2e64 <I2cInitializeDriver+0x108>)
    2e0a:	6020      	str	r0, [r4, #0]
	
	sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
    2e0c:	2203      	movs	r2, #3
    2e0e:	2100      	movs	r1, #0
    2e10:	2001      	movs	r0, #1
    2e12:	4b15      	ldr	r3, [pc, #84]	; (2e68 <I2cInitializeDriver+0x10c>)
    2e14:	4798      	blx	r3
    2e16:	4b15      	ldr	r3, [pc, #84]	; (2e6c <I2cInitializeDriver+0x110>)
    2e18:	6018      	str	r0, [r3, #0]
	//xSemaphoreGive(sensorI2cSemaphoreHandle);

	
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
    2e1a:	6823      	ldr	r3, [r4, #0]
    2e1c:	2b00      	cmp	r3, #0
    2e1e:	d004      	beq.n	2e2a <I2cInitializeDriver+0xce>
	error = I2cDriverConfigureSensorBus();
    2e20:	2300      	movs	r3, #0
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
    2e22:	2800      	cmp	r0, #0
    2e24:	d102      	bne.n	2e2c <I2cInitializeDriver+0xd0>
		error = STATUS_SUSPEND;	//Could not initialize mutex!
    2e26:	3306      	adds	r3, #6
    2e28:	e000      	b.n	2e2c <I2cInitializeDriver+0xd0>
    2e2a:	2306      	movs	r3, #6
		goto exit;
	}

	exit:
	return error;		
}
    2e2c:	0018      	movs	r0, r3
    2e2e:	b00e      	add	sp, #56	; 0x38
    2e30:	bd70      	pop	{r4, r5, r6, pc}
    2e32:	46c0      	nop			; (mov r8, r8)
    2e34:	00000d48 	.word	0x00000d48
    2e38:	00080002 	.word	0x00080002
    2e3c:	00090002 	.word	0x00090002
    2e40:	00002710 	.word	0x00002710
    2e44:	20004710 	.word	0x20004710
    2e48:	000049f5 	.word	0x000049f5
    2e4c:	42000800 	.word	0x42000800
    2e50:	00004ced 	.word	0x00004ced
    2e54:	0000d989 	.word	0x0000d989
    2e58:	e000e100 	.word	0xe000e100
    2e5c:	00002d15 	.word	0x00002d15
    2e60:	00006b6d 	.word	0x00006b6d
    2e64:	2000470c 	.word	0x2000470c
    2e68:	00006709 	.word	0x00006709
    2e6c:	20004738 	.word	0x20004738

00002e70 <I2cWriteData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData(I2C_Data *data){
    2e70:	b510      	push	{r4, lr}
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
    2e72:	2800      	cmp	r0, #0
    2e74:	d012      	beq.n	2e9c <I2cWriteData+0x2c>
    2e76:	6843      	ldr	r3, [r0, #4]
    2e78:	2b00      	cmp	r3, #0
    2e7a:	d012      	beq.n	2ea2 <I2cWriteData+0x32>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
    2e7c:	490a      	ldr	r1, [pc, #40]	; (2ea8 <I2cWriteData+0x38>)
    2e7e:	7802      	ldrb	r2, [r0, #0]
    2e80:	800a      	strh	r2, [r1, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
    2e82:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenOut;
    2e84:	89c3      	ldrh	r3, [r0, #14]
    2e86:	804b      	strh	r3, [r1, #2]
	
	//Write

	 hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    2e88:	4808      	ldr	r0, [pc, #32]	; (2eac <I2cWriteData+0x3c>)
    2e8a:	4b09      	ldr	r3, [pc, #36]	; (2eb0 <I2cWriteData+0x40>)
    2e8c:	4798      	blx	r3
	int32_t error = ERROR_NONE;
    2e8e:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
    2e90:	2800      	cmp	r0, #0
    2e92:	d101      	bne.n	2e98 <I2cWriteData+0x28>
		goto exit;
	}
	
	exit:
	return error;
}
    2e94:	0018      	movs	r0, r3
    2e96:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
    2e98:	3b06      	subs	r3, #6
    2e9a:	e7fb      	b.n	2e94 <I2cWriteData+0x24>
		error = ERR_INVALID_ARG;
    2e9c:	2308      	movs	r3, #8
    2e9e:	425b      	negs	r3, r3
    2ea0:	e7f8      	b.n	2e94 <I2cWriteData+0x24>
    2ea2:	2308      	movs	r3, #8
    2ea4:	425b      	negs	r3, r3
    2ea6:	e7f5      	b.n	2e94 <I2cWriteData+0x24>
    2ea8:	2000473c 	.word	0x2000473c
    2eac:	20004710 	.word	0x20004710
    2eb0:	0000143d 	.word	0x0000143d

00002eb4 <I2cReadData>:
 * @details     
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
int32_t I2cReadData(I2C_Data *data){
    2eb4:	b510      	push	{r4, lr}
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
    2eb6:	2800      	cmp	r0, #0
    2eb8:	d013      	beq.n	2ee2 <I2cReadData+0x2e>
    2eba:	6843      	ldr	r3, [r0, #4]
    2ebc:	2b00      	cmp	r3, #0
    2ebe:	d013      	beq.n	2ee8 <I2cReadData+0x34>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to read
	sensorPacketWrite.address = data->address;
    2ec0:	490b      	ldr	r1, [pc, #44]	; (2ef0 <I2cReadData+0x3c>)
    2ec2:	7803      	ldrb	r3, [r0, #0]
    2ec4:	800b      	strh	r3, [r1, #0]
	sensorPacketWrite.data = data->msgIn;
    2ec6:	6883      	ldr	r3, [r0, #8]
    2ec8:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenIn;
    2eca:	8983      	ldrh	r3, [r0, #12]
    2ecc:	804b      	strh	r3, [r1, #2]
	
	//Read
	hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    2ece:	4809      	ldr	r0, [pc, #36]	; (2ef4 <I2cReadData+0x40>)
    2ed0:	4b09      	ldr	r3, [pc, #36]	; (2ef8 <I2cReadData+0x44>)
    2ed2:	4798      	blx	r3
	int32_t error = ERROR_NONE;
    2ed4:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
    2ed6:	2800      	cmp	r0, #0
    2ed8:	d101      	bne.n	2ede <I2cReadData+0x2a>
		goto exit;
	}
	
	exit:
	return error;
}
    2eda:	0018      	movs	r0, r3
    2edc:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
    2ede:	3b06      	subs	r3, #6
    2ee0:	e7fb      	b.n	2eda <I2cReadData+0x26>
		error = ERR_INVALID_ARG;
    2ee2:	2308      	movs	r3, #8
    2ee4:	425b      	negs	r3, r3
    2ee6:	e7f8      	b.n	2eda <I2cReadData+0x26>
    2ee8:	2308      	movs	r3, #8
    2eea:	425b      	negs	r3, r3
    2eec:	e7f5      	b.n	2eda <I2cReadData+0x26>
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	2000473c 	.word	0x2000473c
    2ef4:	20004710 	.word	0x20004710
    2ef8:	00001419 	.word	0x00001419

00002efc <I2cFreeMutex>:
 * @details     
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (ERROR_NONE) if the bus is ready, (ERROR_NOT_INITIALIZED) if it is busy.
 * @note        STUDENTS TO FILL OUT!
 *****************************************************************************/
int32_t I2cFreeMutex(void){
    2efc:	b510      	push	{r4, lr}
	
	int32_t error = ERROR_NONE;
	
	//students to fill out. Check what the function has to return
	if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE)
    2efe:	4b07      	ldr	r3, [pc, #28]	; (2f1c <I2cFreeMutex+0x20>)
    2f00:	6818      	ldr	r0, [r3, #0]
    2f02:	2300      	movs	r3, #0
    2f04:	2200      	movs	r2, #0
    2f06:	2100      	movs	r1, #0
    2f08:	4c05      	ldr	r4, [pc, #20]	; (2f20 <I2cFreeMutex+0x24>)
    2f0a:	47a0      	blx	r4
	int32_t error = ERROR_NONE;
    2f0c:	2300      	movs	r3, #0
	if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE)
    2f0e:	2801      	cmp	r0, #1
    2f10:	d101      	bne.n	2f16 <I2cFreeMutex+0x1a>
		error = ERROR_NOT_INITIALIZED;
	
	return error;
}
    2f12:	0018      	movs	r0, r3
    2f14:	bd10      	pop	{r4, pc}
		error = ERROR_NOT_INITIALIZED;
    2f16:	3b14      	subs	r3, #20
    2f18:	e7fb      	b.n	2f12 <I2cFreeMutex+0x16>
    2f1a:	46c0      	nop			; (mov r8, r8)
    2f1c:	2000470c 	.word	0x2000470c
    2f20:	00006845 	.word	0x00006845

00002f24 <I2cGetMutex>:
 * @details     
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (ERROR_NONE) if we got the mutex, (ERROR_NOT_READY) if we time out before we got it
 * @note        
 *****************************************************************************/
int32_t I2cGetMutex(TickType_t waitTime){
    2f24:	b510      	push	{r4, lr}
    2f26:	0001      	movs	r1, r0
	
	int32_t error = ERROR_NONE;
	//students to fill out. Check what the function has to return
	
	if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE)
    2f28:	4b05      	ldr	r3, [pc, #20]	; (2f40 <I2cGetMutex+0x1c>)
    2f2a:	6818      	ldr	r0, [r3, #0]
    2f2c:	4b05      	ldr	r3, [pc, #20]	; (2f44 <I2cGetMutex+0x20>)
    2f2e:	4798      	blx	r3
	int32_t error = ERROR_NONE;
    2f30:	2300      	movs	r3, #0
	if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE)
    2f32:	2801      	cmp	r0, #1
    2f34:	d101      	bne.n	2f3a <I2cGetMutex+0x16>
		error = ERROR_NOT_READY;
		
	return error;
}
    2f36:	0018      	movs	r0, r3
    2f38:	bd10      	pop	{r4, pc}
		error = ERROR_NOT_READY;
    2f3a:	3b1d      	subs	r3, #29
    2f3c:	e7fb      	b.n	2f36 <I2cGetMutex+0x12>
    2f3e:	46c0      	nop			; (mov r8, r8)
    2f40:	2000470c 	.word	0x2000470c
    2f44:	000071ed 	.word	0x000071ed

00002f48 <I2cOnlyReadWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cOnlyReadWait(I2C_Data *data, const TickType_t xMaxBlockTime){
    2f48:	b570      	push	{r4, r5, r6, lr}
    2f4a:	0005      	movs	r5, r0
    2f4c:	000c      	movs	r4, r1

	int32_t error = ERROR_NONE;
	SemaphoreHandle_t semHandle = NULL;

	//---0. Get Mutex
	error = I2cGetMutex(xMaxBlockTime);
    2f4e:	0008      	movs	r0, r1
    2f50:	4b0f      	ldr	r3, [pc, #60]	; (2f90 <I2cOnlyReadWait+0x48>)
    2f52:	4798      	blx	r3
	//error=0;
	if(ERROR_NONE != error) goto exit;
    2f54:	2800      	cmp	r0, #0
    2f56:	d000      	beq.n	2f5a <I2cOnlyReadWait+0x12>
exitError0:
error = I2cFreeMutex();

return error;

}
    2f58:	bd70      	pop	{r4, r5, r6, pc}
	*handle = sensorI2cSemaphoreHandle;
    2f5a:	4b0e      	ldr	r3, [pc, #56]	; (2f94 <I2cOnlyReadWait+0x4c>)
    2f5c:	681e      	ldr	r6, [r3, #0]
	error = I2cReadData(data);
    2f5e:	0028      	movs	r0, r5
    2f60:	4b0d      	ldr	r3, [pc, #52]	; (2f98 <I2cOnlyReadWait+0x50>)
    2f62:	4798      	blx	r3
	if (ERROR_NONE != error){
    2f64:	2800      	cmp	r0, #0
    2f66:	d105      	bne.n	2f74 <I2cOnlyReadWait+0x2c>
	if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE ) {
    2f68:	0021      	movs	r1, r4
    2f6a:	0030      	movs	r0, r6
    2f6c:	4b0b      	ldr	r3, [pc, #44]	; (2f9c <I2cOnlyReadWait+0x54>)
    2f6e:	4798      	blx	r3
    2f70:	2801      	cmp	r0, #1
    2f72:	d002      	beq.n	2f7a <I2cOnlyReadWait+0x32>
error = I2cFreeMutex();
    2f74:	4b0a      	ldr	r3, [pc, #40]	; (2fa0 <I2cOnlyReadWait+0x58>)
    2f76:	4798      	blx	r3
return error;
    2f78:	e7ee      	b.n	2f58 <I2cOnlyReadWait+0x10>
	 return sensorTransmitError;
    2f7a:	4b0a      	ldr	r3, [pc, #40]	; (2fa4 <I2cOnlyReadWait+0x5c>)
		if (I2cGetTaskErrorStatus()) {
    2f7c:	781b      	ldrb	r3, [r3, #0]
    2f7e:	2b00      	cmp	r3, #0
    2f80:	d003      	beq.n	2f8a <I2cOnlyReadWait+0x42>
	sensorTransmitError = value;
    2f82:	2200      	movs	r2, #0
    2f84:	4b07      	ldr	r3, [pc, #28]	; (2fa4 <I2cOnlyReadWait+0x5c>)
    2f86:	701a      	strb	r2, [r3, #0]
    2f88:	e7f4      	b.n	2f74 <I2cOnlyReadWait+0x2c>
	error |= I2cFreeMutex();
    2f8a:	4b05      	ldr	r3, [pc, #20]	; (2fa0 <I2cOnlyReadWait+0x58>)
    2f8c:	4798      	blx	r3
    2f8e:	e7e3      	b.n	2f58 <I2cOnlyReadWait+0x10>
    2f90:	00002f25 	.word	0x00002f25
    2f94:	20004738 	.word	0x20004738
    2f98:	00002eb5 	.word	0x00002eb5
    2f9c:	000071ed 	.word	0x000071ed
    2fa0:	00002efd 	.word	0x00002efd
    2fa4:	20000bc0 	.word	0x20000bc0

00002fa8 <I2cWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime){
    2fa8:	b570      	push	{r4, r5, r6, lr}
    2faa:	0005      	movs	r5, r0
    2fac:	000c      	movs	r4, r1

	int32_t error = ERROR_NONE;
	SemaphoreHandle_t semHandle = NULL;

	//---0. Get Mutex
	error = I2cGetMutex(xMaxBlockTime);
    2fae:	0008      	movs	r0, r1
    2fb0:	4b0f      	ldr	r3, [pc, #60]	; (2ff0 <I2cWriteDataWait+0x48>)
    2fb2:	4798      	blx	r3
	//error=0;
	if(ERROR_NONE != error) goto exit;
    2fb4:	2800      	cmp	r0, #0
    2fb6:	d000      	beq.n	2fba <I2cWriteDataWait+0x12>
exitError0:
error = I2cFreeMutex();

return error;

}
    2fb8:	bd70      	pop	{r4, r5, r6, pc}
	*handle = sensorI2cSemaphoreHandle;
    2fba:	4b0e      	ldr	r3, [pc, #56]	; (2ff4 <I2cWriteDataWait+0x4c>)
    2fbc:	681e      	ldr	r6, [r3, #0]
	error = I2cWriteData(data);
    2fbe:	0028      	movs	r0, r5
    2fc0:	4b0d      	ldr	r3, [pc, #52]	; (2ff8 <I2cWriteDataWait+0x50>)
    2fc2:	4798      	blx	r3
	if (ERROR_NONE != error){
    2fc4:	2800      	cmp	r0, #0
    2fc6:	d105      	bne.n	2fd4 <I2cWriteDataWait+0x2c>
	if( xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE ){
    2fc8:	0021      	movs	r1, r4
    2fca:	0030      	movs	r0, r6
    2fcc:	4b0b      	ldr	r3, [pc, #44]	; (2ffc <I2cWriteDataWait+0x54>)
    2fce:	4798      	blx	r3
    2fd0:	2801      	cmp	r0, #1
    2fd2:	d002      	beq.n	2fda <I2cWriteDataWait+0x32>
error = I2cFreeMutex();
    2fd4:	4b0a      	ldr	r3, [pc, #40]	; (3000 <I2cWriteDataWait+0x58>)
    2fd6:	4798      	blx	r3
return error;
    2fd8:	e7ee      	b.n	2fb8 <I2cWriteDataWait+0x10>
	 return sensorTransmitError;
    2fda:	4b0a      	ldr	r3, [pc, #40]	; (3004 <I2cWriteDataWait+0x5c>)
		if(I2cGetTaskErrorStatus()){
    2fdc:	781b      	ldrb	r3, [r3, #0]
    2fde:	2b00      	cmp	r3, #0
    2fe0:	d003      	beq.n	2fea <I2cWriteDataWait+0x42>
	sensorTransmitError = value;
    2fe2:	2200      	movs	r2, #0
    2fe4:	4b07      	ldr	r3, [pc, #28]	; (3004 <I2cWriteDataWait+0x5c>)
    2fe6:	701a      	strb	r2, [r3, #0]
    2fe8:	e7f4      	b.n	2fd4 <I2cWriteDataWait+0x2c>
	error |= I2cFreeMutex();
    2fea:	4b05      	ldr	r3, [pc, #20]	; (3000 <I2cWriteDataWait+0x58>)
    2fec:	4798      	blx	r3
    2fee:	e7e3      	b.n	2fb8 <I2cWriteDataWait+0x10>
    2ff0:	00002f25 	.word	0x00002f25
    2ff4:	20004738 	.word	0x20004738
    2ff8:	00002e71 	.word	0x00002e71
    2ffc:	000071ed 	.word	0x000071ed
    3000:	00002efd 	.word	0x00002efd
    3004:	20000bc0 	.word	0x20000bc0

00003008 <I2cReadDataWait>:
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
				students to fill!
 *****************************************************************************/
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime) {
    3008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    300a:	0005      	movs	r5, r0
    300c:	000e      	movs	r6, r1
    300e:	0014      	movs	r4, r2
	
	int32_t error = ERROR_NONE;
	SemaphoreHandle_t semHandle = NULL;
	
	//---0. Get Mutex
	error = I2cGetMutex(xMaxBlockTime);
    3010:	0010      	movs	r0, r2
    3012:	4b1b      	ldr	r3, [pc, #108]	; (3080 <I2cReadDataWait+0x78>)
    3014:	4798      	blx	r3
	if(ERROR_NONE != error) goto exit;
    3016:	2800      	cmp	r0, #0
    3018:	d000      	beq.n	301c <I2cReadDataWait+0x14>

	exitError0:
	error = I2cFreeMutex();

	return error;
    301a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*handle = sensorI2cSemaphoreHandle;
    301c:	4b19      	ldr	r3, [pc, #100]	; (3084 <I2cReadDataWait+0x7c>)
    301e:	681f      	ldr	r7, [r3, #0]
	error = I2cWriteData(data);
    3020:	0028      	movs	r0, r5
    3022:	4b19      	ldr	r3, [pc, #100]	; (3088 <I2cReadDataWait+0x80>)
    3024:	4798      	blx	r3
	if (ERROR_NONE != error){
    3026:	2800      	cmp	r0, #0
    3028:	d105      	bne.n	3036 <I2cReadDataWait+0x2e>
	if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    302a:	0021      	movs	r1, r4
    302c:	0038      	movs	r0, r7
    302e:	4b17      	ldr	r3, [pc, #92]	; (308c <I2cReadDataWait+0x84>)
    3030:	4798      	blx	r3
    3032:	2801      	cmp	r0, #1
    3034:	d002      	beq.n	303c <I2cReadDataWait+0x34>
	error = I2cFreeMutex();
    3036:	4b16      	ldr	r3, [pc, #88]	; (3090 <I2cReadDataWait+0x88>)
    3038:	4798      	blx	r3
	return error;
    303a:	e7ee      	b.n	301a <I2cReadDataWait+0x12>
	 return sensorTransmitError;
    303c:	4b15      	ldr	r3, [pc, #84]	; (3094 <I2cReadDataWait+0x8c>)
		if (I2cGetTaskErrorStatus()) {
    303e:	781b      	ldrb	r3, [r3, #0]
    3040:	2b00      	cmp	r3, #0
    3042:	d003      	beq.n	304c <I2cReadDataWait+0x44>
	sensorTransmitError = value;
    3044:	2200      	movs	r2, #0
    3046:	4b13      	ldr	r3, [pc, #76]	; (3094 <I2cReadDataWait+0x8c>)
    3048:	701a      	strb	r2, [r3, #0]
    304a:	e7f4      	b.n	3036 <I2cReadDataWait+0x2e>
		vTaskDelay(delay);
    304c:	0030      	movs	r0, r6
    304e:	4b12      	ldr	r3, [pc, #72]	; (3098 <I2cReadDataWait+0x90>)
    3050:	4798      	blx	r3
	error = I2cReadData(data);
    3052:	0028      	movs	r0, r5
    3054:	4b11      	ldr	r3, [pc, #68]	; (309c <I2cReadDataWait+0x94>)
    3056:	4798      	blx	r3
	if (ERROR_NONE != error){
    3058:	2800      	cmp	r0, #0
    305a:	d1ec      	bne.n	3036 <I2cReadDataWait+0x2e>
	if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE ) {
    305c:	0021      	movs	r1, r4
    305e:	0038      	movs	r0, r7
    3060:	4b0a      	ldr	r3, [pc, #40]	; (308c <I2cReadDataWait+0x84>)
    3062:	4798      	blx	r3
    3064:	2801      	cmp	r0, #1
    3066:	d1e6      	bne.n	3036 <I2cReadDataWait+0x2e>
	 return sensorTransmitError;
    3068:	4b0a      	ldr	r3, [pc, #40]	; (3094 <I2cReadDataWait+0x8c>)
		if (I2cGetTaskErrorStatus()) {
    306a:	781b      	ldrb	r3, [r3, #0]
    306c:	2b00      	cmp	r3, #0
    306e:	d003      	beq.n	3078 <I2cReadDataWait+0x70>
	sensorTransmitError = value;
    3070:	2200      	movs	r2, #0
    3072:	4b08      	ldr	r3, [pc, #32]	; (3094 <I2cReadDataWait+0x8c>)
    3074:	701a      	strb	r2, [r3, #0]
    3076:	e7de      	b.n	3036 <I2cReadDataWait+0x2e>
	error |= I2cFreeMutex();
    3078:	4b05      	ldr	r3, [pc, #20]	; (3090 <I2cReadDataWait+0x88>)
    307a:	4798      	blx	r3
    307c:	e7cd      	b.n	301a <I2cReadDataWait+0x12>
    307e:	46c0      	nop			; (mov r8, r8)
    3080:	00002f25 	.word	0x00002f25
    3084:	20004738 	.word	0x20004738
    3088:	00002e71 	.word	0x00002e71
    308c:	000071ed 	.word	0x000071ed
    3090:	00002efd 	.word	0x00002efd
    3094:	20000bc0 	.word	0x20000bc0
    3098:	00007cc9 	.word	0x00007cc9
    309c:	00002eb5 	.word	0x00002eb5

000030a0 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    30a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30a2:	b085      	sub	sp, #20
    30a4:	0005      	movs	r5, r0
    30a6:	9200      	str	r2, [sp, #0]
    30a8:	9301      	str	r3, [sp, #4]
	//imuData.msgIn =  msgOutImu;
	//imuData.msgOut = msgOutImu;
	//imuData.address = 0x6B;
	//msgOutImu[0] = reg;
	
	uint8_t reg_data = reg;
    30aa:	a802      	add	r0, sp, #8
    30ac:	1dc3      	adds	r3, r0, #7
    30ae:	71c1      	strb	r1, [r0, #7]
    30b0:	4c08      	ldr	r4, [pc, #32]	; (30d4 <platform_write+0x34>)
    30b2:	2680      	movs	r6, #128	; 0x80
    30b4:	02b6      	lsls	r6, r6, #10
    30b6:	6166      	str	r6, [r4, #20]
	
	//spi_select_slave((struct spi_module*) handle, &slave, true);
	port_pin_set_output_level(SLAVE_SELECT_PIN, false);
	spi_write_buffer_wait((struct spi_module*) handle, &reg_data, 1);
    30b8:	2201      	movs	r2, #1
    30ba:	0019      	movs	r1, r3
    30bc:	0028      	movs	r0, r5
    30be:	4f06      	ldr	r7, [pc, #24]	; (30d8 <platform_write+0x38>)
    30c0:	47b8      	blx	r7
	spi_write_buffer_wait((struct spi_module*) handle, bufp, len);
    30c2:	9a01      	ldr	r2, [sp, #4]
    30c4:	9900      	ldr	r1, [sp, #0]
    30c6:	0028      	movs	r0, r5
    30c8:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    30ca:	61a6      	str	r6, [r4, #24]
	//spi_select_slave((struct spi_module*) handle, &slave, false);
	
	return 0;
	//memcpy(&msgOutImu[1], bufp, len);
	//return I2cWriteDataWait(&imuData, 100);
}
    30cc:	2000      	movs	r0, #0
    30ce:	b005      	add	sp, #20
    30d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30d2:	46c0      	nop			; (mov r8, r8)
    30d4:	41004400 	.word	0x41004400
    30d8:	0000df19 	.word	0x0000df19

000030dc <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    30dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    30de:	b085      	sub	sp, #20
    30e0:	0004      	movs	r4, r0
    30e2:	9201      	str	r2, [sp, #4]
    30e4:	001e      	movs	r6, r3
	//imuData.address = 0x6B;
	//
	//error = I2cReadDataWait(&imuData, 0, 100);
	//memcpy(bufp, msgOutImu, len);
	
	uint8_t reg_data = reg | SPI_READ_COMMAND;
    30e6:	ab02      	add	r3, sp, #8
    30e8:	1dd8      	adds	r0, r3, #7
    30ea:	2380      	movs	r3, #128	; 0x80
    30ec:	425b      	negs	r3, r3
    30ee:	430b      	orrs	r3, r1
    30f0:	7003      	strb	r3, [r0, #0]
		port_base->OUTCLR.reg = pin_mask;
    30f2:	4f09      	ldr	r7, [pc, #36]	; (3118 <platform_read+0x3c>)
    30f4:	2580      	movs	r5, #128	; 0x80
    30f6:	02ad      	lsls	r5, r5, #10
    30f8:	617d      	str	r5, [r7, #20]
	uint16_t dummy_data = 0;
	
	//spi_select_slave((struct spi_module*) handle, &slave, true);
	port_pin_set_output_level(SLAVE_SELECT_PIN, false);
	spi_write_buffer_wait((struct spi_module*) handle, &reg_data, 1);
    30fa:	2201      	movs	r2, #1
    30fc:	0001      	movs	r1, r0
    30fe:	0020      	movs	r0, r4
    3100:	4b06      	ldr	r3, [pc, #24]	; (311c <platform_read+0x40>)
    3102:	4798      	blx	r3
	spi_read_buffer_wait((struct spi_module*) handle, bufp, len, dummy_data);
    3104:	2300      	movs	r3, #0
    3106:	0032      	movs	r2, r6
    3108:	9901      	ldr	r1, [sp, #4]
    310a:	0020      	movs	r0, r4
    310c:	4c04      	ldr	r4, [pc, #16]	; (3120 <platform_read+0x44>)
    310e:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
    3110:	61bd      	str	r5, [r7, #24]
	port_pin_set_output_level(SLAVE_SELECT_PIN, true);
	//spi_select_slave((struct spi_module*) handle, &slave, false);
	
	return 0;
}
    3112:	2000      	movs	r0, #0
    3114:	b005      	add	sp, #20
    3116:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3118:	41004400 	.word	0x41004400
    311c:	0000df19 	.word	0x0000df19
    3120:	0000dd61 	.word	0x0000dd61

00003124 <lsm6dso_read_reg>:
{
    3124:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    3126:	6885      	ldr	r5, [r0, #8]
    3128:	6844      	ldr	r4, [r0, #4]
    312a:	0028      	movs	r0, r5
    312c:	47a0      	blx	r4
}
    312e:	bd70      	pop	{r4, r5, r6, pc}

00003130 <lsm6dso_write_reg>:
{
    3130:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    3132:	6885      	ldr	r5, [r0, #8]
    3134:	6804      	ldr	r4, [r0, #0]
    3136:	0028      	movs	r0, r5
    3138:	47a0      	blx	r4
}
    313a:	bd70      	pop	{r4, r5, r6, pc}

0000313c <lsm6dso_from_fs2_to_mg>:
{
    313c:	b510      	push	{r4, lr}
  return ((float_t)lsb) * 0.061f;
    313e:	4b03      	ldr	r3, [pc, #12]	; (314c <lsm6dso_from_fs2_to_mg+0x10>)
    3140:	4798      	blx	r3
    3142:	4903      	ldr	r1, [pc, #12]	; (3150 <lsm6dso_from_fs2_to_mg+0x14>)
    3144:	4b03      	ldr	r3, [pc, #12]	; (3154 <lsm6dso_from_fs2_to_mg+0x18>)
    3146:	4798      	blx	r3
}
    3148:	bd10      	pop	{r4, pc}
    314a:	46c0      	nop			; (mov r8, r8)
    314c:	000167ed 	.word	0x000167ed
    3150:	3d79db23 	.word	0x3d79db23
    3154:	00016235 	.word	0x00016235

00003158 <lsm6dso_xl_full_scale_set>:
{
    3158:	b570      	push	{r4, r5, r6, lr}
    315a:	b082      	sub	sp, #8
    315c:	0004      	movs	r4, r0
    315e:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    3160:	2301      	movs	r3, #1
    3162:	aa01      	add	r2, sp, #4
    3164:	2110      	movs	r1, #16
    3166:	4e0a      	ldr	r6, [pc, #40]	; (3190 <lsm6dso_xl_full_scale_set+0x38>)
    3168:	47b0      	blx	r6
  if (ret == 0)
    316a:	2800      	cmp	r0, #0
    316c:	d001      	beq.n	3172 <lsm6dso_xl_full_scale_set+0x1a>
}
    316e:	b002      	add	sp, #8
    3170:	bd70      	pop	{r4, r5, r6, pc}
    reg.fs_xl = (uint8_t) val;
    3172:	aa01      	add	r2, sp, #4
    3174:	2103      	movs	r1, #3
    3176:	4029      	ands	r1, r5
    3178:	008b      	lsls	r3, r1, #2
    317a:	7811      	ldrb	r1, [r2, #0]
    317c:	300c      	adds	r0, #12
    317e:	4381      	bics	r1, r0
    3180:	4319      	orrs	r1, r3
    3182:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    3184:	2301      	movs	r3, #1
    3186:	2110      	movs	r1, #16
    3188:	0020      	movs	r0, r4
    318a:	4c02      	ldr	r4, [pc, #8]	; (3194 <lsm6dso_xl_full_scale_set+0x3c>)
    318c:	47a0      	blx	r4
  return ret;
    318e:	e7ee      	b.n	316e <lsm6dso_xl_full_scale_set+0x16>
    3190:	00003125 	.word	0x00003125
    3194:	00003131 	.word	0x00003131

00003198 <lsm6dso_gy_full_scale_set>:
{
    3198:	b570      	push	{r4, r5, r6, lr}
    319a:	b082      	sub	sp, #8
    319c:	0004      	movs	r4, r0
    319e:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    31a0:	2301      	movs	r3, #1
    31a2:	aa01      	add	r2, sp, #4
    31a4:	2111      	movs	r1, #17
    31a6:	4e0a      	ldr	r6, [pc, #40]	; (31d0 <lsm6dso_gy_full_scale_set+0x38>)
    31a8:	47b0      	blx	r6
  if (ret == 0)
    31aa:	2800      	cmp	r0, #0
    31ac:	d001      	beq.n	31b2 <lsm6dso_gy_full_scale_set+0x1a>
}
    31ae:	b002      	add	sp, #8
    31b0:	bd70      	pop	{r4, r5, r6, pc}
    reg.fs_g = (uint8_t) val;
    31b2:	aa01      	add	r2, sp, #4
    31b4:	2107      	movs	r1, #7
    31b6:	4029      	ands	r1, r5
    31b8:	004b      	lsls	r3, r1, #1
    31ba:	7811      	ldrb	r1, [r2, #0]
    31bc:	300e      	adds	r0, #14
    31be:	4381      	bics	r1, r0
    31c0:	4319      	orrs	r1, r3
    31c2:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    31c4:	2301      	movs	r3, #1
    31c6:	2111      	movs	r1, #17
    31c8:	0020      	movs	r0, r4
    31ca:	4c02      	ldr	r4, [pc, #8]	; (31d4 <lsm6dso_gy_full_scale_set+0x3c>)
    31cc:	47a0      	blx	r4
  return ret;
    31ce:	e7ee      	b.n	31ae <lsm6dso_gy_full_scale_set+0x16>
    31d0:	00003125 	.word	0x00003125
    31d4:	00003131 	.word	0x00003131

000031d8 <lsm6dso_block_data_update_set>:
{
    31d8:	b570      	push	{r4, r5, r6, lr}
    31da:	b082      	sub	sp, #8
    31dc:	0004      	movs	r4, r0
    31de:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    31e0:	2301      	movs	r3, #1
    31e2:	aa01      	add	r2, sp, #4
    31e4:	2112      	movs	r1, #18
    31e6:	4e0a      	ldr	r6, [pc, #40]	; (3210 <lsm6dso_block_data_update_set+0x38>)
    31e8:	47b0      	blx	r6
  if (ret == 0)
    31ea:	2800      	cmp	r0, #0
    31ec:	d001      	beq.n	31f2 <lsm6dso_block_data_update_set+0x1a>
}
    31ee:	b002      	add	sp, #8
    31f0:	bd70      	pop	{r4, r5, r6, pc}
    reg.bdu = val;
    31f2:	aa01      	add	r2, sp, #4
    31f4:	2101      	movs	r1, #1
    31f6:	4029      	ands	r1, r5
    31f8:	018b      	lsls	r3, r1, #6
    31fa:	7811      	ldrb	r1, [r2, #0]
    31fc:	3040      	adds	r0, #64	; 0x40
    31fe:	4381      	bics	r1, r0
    3200:	4319      	orrs	r1, r3
    3202:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    3204:	2301      	movs	r3, #1
    3206:	2112      	movs	r1, #18
    3208:	0020      	movs	r0, r4
    320a:	4c02      	ldr	r4, [pc, #8]	; (3214 <lsm6dso_block_data_update_set+0x3c>)
    320c:	47a0      	blx	r4
  return ret;
    320e:	e7ee      	b.n	31ee <lsm6dso_block_data_update_set+0x16>
    3210:	00003125 	.word	0x00003125
    3214:	00003131 	.word	0x00003131

00003218 <lsm6dso_xl_offset_weight_set>:
{
    3218:	b570      	push	{r4, r5, r6, lr}
    321a:	b082      	sub	sp, #8
    321c:	0004      	movs	r4, r0
    321e:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
    3220:	2301      	movs	r3, #1
    3222:	aa01      	add	r2, sp, #4
    3224:	2115      	movs	r1, #21
    3226:	4e0a      	ldr	r6, [pc, #40]	; (3250 <lsm6dso_xl_offset_weight_set+0x38>)
    3228:	47b0      	blx	r6
  if (ret == 0)
    322a:	2800      	cmp	r0, #0
    322c:	d001      	beq.n	3232 <lsm6dso_xl_offset_weight_set+0x1a>
}
    322e:	b002      	add	sp, #8
    3230:	bd70      	pop	{r4, r5, r6, pc}
    reg.usr_off_w = (uint8_t)val;
    3232:	aa01      	add	r2, sp, #4
    3234:	2101      	movs	r1, #1
    3236:	4029      	ands	r1, r5
    3238:	00cb      	lsls	r3, r1, #3
    323a:	7811      	ldrb	r1, [r2, #0]
    323c:	3008      	adds	r0, #8
    323e:	4381      	bics	r1, r0
    3240:	4319      	orrs	r1, r3
    3242:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
    3244:	2301      	movs	r3, #1
    3246:	2115      	movs	r1, #21
    3248:	0020      	movs	r0, r4
    324a:	4c02      	ldr	r4, [pc, #8]	; (3254 <lsm6dso_xl_offset_weight_set+0x3c>)
    324c:	47a0      	blx	r4
  return ret;
    324e:	e7ee      	b.n	322e <lsm6dso_xl_offset_weight_set+0x16>
    3250:	00003125 	.word	0x00003125
    3254:	00003131 	.word	0x00003131

00003258 <lsm6dso_acceleration_raw_get>:
{
    3258:	b530      	push	{r4, r5, lr}
    325a:	b083      	sub	sp, #12
    325c:	000c      	movs	r4, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
    325e:	2306      	movs	r3, #6
    3260:	466a      	mov	r2, sp
    3262:	2128      	movs	r1, #40	; 0x28
    3264:	4d0a      	ldr	r5, [pc, #40]	; (3290 <lsm6dso_acceleration_raw_get+0x38>)
    3266:	47a8      	blx	r5
  val[0] = (val[0] * 256) + (int16_t)buff[0];
    3268:	466b      	mov	r3, sp
    326a:	785a      	ldrb	r2, [r3, #1]
    326c:	0212      	lsls	r2, r2, #8
    326e:	781b      	ldrb	r3, [r3, #0]
    3270:	189b      	adds	r3, r3, r2
    3272:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
    3274:	466b      	mov	r3, sp
    3276:	78da      	ldrb	r2, [r3, #3]
    3278:	0212      	lsls	r2, r2, #8
    327a:	789b      	ldrb	r3, [r3, #2]
    327c:	189b      	adds	r3, r3, r2
    327e:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
    3280:	466b      	mov	r3, sp
    3282:	795a      	ldrb	r2, [r3, #5]
    3284:	0212      	lsls	r2, r2, #8
    3286:	791b      	ldrb	r3, [r3, #4]
    3288:	189b      	adds	r3, r3, r2
    328a:	80a3      	strh	r3, [r4, #4]
}
    328c:	b003      	add	sp, #12
    328e:	bd30      	pop	{r4, r5, pc}
    3290:	00003125 	.word	0x00003125

00003294 <lsm6dso_mem_bank_set>:
{
    3294:	b570      	push	{r4, r5, r6, lr}
    3296:	b082      	sub	sp, #8
    3298:	0004      	movs	r4, r0
    329a:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
    329c:	2301      	movs	r3, #1
    329e:	aa01      	add	r2, sp, #4
    32a0:	2101      	movs	r1, #1
    32a2:	4e09      	ldr	r6, [pc, #36]	; (32c8 <lsm6dso_mem_bank_set+0x34>)
    32a4:	47b0      	blx	r6
  if (ret == 0)
    32a6:	2800      	cmp	r0, #0
    32a8:	d001      	beq.n	32ae <lsm6dso_mem_bank_set+0x1a>
}
    32aa:	b002      	add	sp, #8
    32ac:	bd70      	pop	{r4, r5, r6, pc}
    reg.reg_access = (uint8_t)val;
    32ae:	aa01      	add	r2, sp, #4
    32b0:	01ad      	lsls	r5, r5, #6
    32b2:	7813      	ldrb	r3, [r2, #0]
    32b4:	213f      	movs	r1, #63	; 0x3f
    32b6:	4019      	ands	r1, r3
    32b8:	4329      	orrs	r1, r5
    32ba:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
    32bc:	2301      	movs	r3, #1
    32be:	2101      	movs	r1, #1
    32c0:	0020      	movs	r0, r4
    32c2:	4c02      	ldr	r4, [pc, #8]	; (32cc <lsm6dso_mem_bank_set+0x38>)
    32c4:	47a0      	blx	r4
  return ret;
    32c6:	e7f0      	b.n	32aa <lsm6dso_mem_bank_set+0x16>
    32c8:	00003125 	.word	0x00003125
    32cc:	00003131 	.word	0x00003131

000032d0 <lsm6dso_device_id_get>:
{
    32d0:	b510      	push	{r4, lr}
    32d2:	000a      	movs	r2, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
    32d4:	2301      	movs	r3, #1
    32d6:	210f      	movs	r1, #15
    32d8:	4c01      	ldr	r4, [pc, #4]	; (32e0 <lsm6dso_device_id_get+0x10>)
    32da:	47a0      	blx	r4
}
    32dc:	bd10      	pop	{r4, pc}
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	00003125 	.word	0x00003125

000032e4 <lsm6dso_xl_filter_lp2_set>:
{
    32e4:	b570      	push	{r4, r5, r6, lr}
    32e6:	b082      	sub	sp, #8
    32e8:	0004      	movs	r4, r0
    32ea:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    32ec:	2301      	movs	r3, #1
    32ee:	aa01      	add	r2, sp, #4
    32f0:	2110      	movs	r1, #16
    32f2:	4e0a      	ldr	r6, [pc, #40]	; (331c <lsm6dso_xl_filter_lp2_set+0x38>)
    32f4:	47b0      	blx	r6
  if (ret == 0)
    32f6:	2800      	cmp	r0, #0
    32f8:	d001      	beq.n	32fe <lsm6dso_xl_filter_lp2_set+0x1a>
}
    32fa:	b002      	add	sp, #8
    32fc:	bd70      	pop	{r4, r5, r6, pc}
    reg.lpf2_xl_en = val;
    32fe:	aa01      	add	r2, sp, #4
    3300:	2101      	movs	r1, #1
    3302:	4029      	ands	r1, r5
    3304:	004b      	lsls	r3, r1, #1
    3306:	7811      	ldrb	r1, [r2, #0]
    3308:	3002      	adds	r0, #2
    330a:	4381      	bics	r1, r0
    330c:	4319      	orrs	r1, r3
    330e:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    3310:	2301      	movs	r3, #1
    3312:	2110      	movs	r1, #16
    3314:	0020      	movs	r0, r4
    3316:	4c02      	ldr	r4, [pc, #8]	; (3320 <lsm6dso_xl_filter_lp2_set+0x3c>)
    3318:	47a0      	blx	r4
  return ret;
    331a:	e7ee      	b.n	32fa <lsm6dso_xl_filter_lp2_set+0x16>
    331c:	00003125 	.word	0x00003125
    3320:	00003131 	.word	0x00003131

00003324 <lsm6dso_xl_hp_path_on_out_set>:
{
    3324:	b570      	push	{r4, r5, r6, lr}
    3326:	b082      	sub	sp, #8
    3328:	0004      	movs	r4, r0
    332a:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
    332c:	2301      	movs	r3, #1
    332e:	aa01      	add	r2, sp, #4
    3330:	2117      	movs	r1, #23
    3332:	4e10      	ldr	r6, [pc, #64]	; (3374 <lsm6dso_xl_hp_path_on_out_set+0x50>)
    3334:	47b0      	blx	r6
  if (ret == 0)
    3336:	2800      	cmp	r0, #0
    3338:	d001      	beq.n	333e <lsm6dso_xl_hp_path_on_out_set+0x1a>
}
    333a:	b002      	add	sp, #8
    333c:	bd70      	pop	{r4, r5, r6, pc}
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
    333e:	aa01      	add	r2, sp, #4
    3340:	092b      	lsrs	r3, r5, #4
    3342:	2101      	movs	r1, #1
    3344:	400b      	ands	r3, r1
    3346:	0098      	lsls	r0, r3, #2
    3348:	7813      	ldrb	r3, [r2, #0]
    334a:	2604      	movs	r6, #4
    334c:	43b3      	bics	r3, r6
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
    334e:	096e      	lsrs	r6, r5, #5
    3350:	4031      	ands	r1, r6
    3352:	0109      	lsls	r1, r1, #4
    3354:	4303      	orrs	r3, r0
    3356:	2010      	movs	r0, #16
    3358:	4383      	bics	r3, r0
    reg.hpcf_xl = (uint8_t)val & 0x07U;
    335a:	016d      	lsls	r5, r5, #5
    335c:	430b      	orrs	r3, r1
    335e:	211f      	movs	r1, #31
    3360:	400b      	ands	r3, r1
    3362:	431d      	orrs	r5, r3
    3364:	7015      	strb	r5, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
    3366:	2301      	movs	r3, #1
    3368:	3908      	subs	r1, #8
    336a:	0020      	movs	r0, r4
    336c:	4c02      	ldr	r4, [pc, #8]	; (3378 <lsm6dso_xl_hp_path_on_out_set+0x54>)
    336e:	47a0      	blx	r4
  return ret;
    3370:	e7e3      	b.n	333a <lsm6dso_xl_hp_path_on_out_set+0x16>
    3372:	46c0      	nop			; (mov r8, r8)
    3374:	00003125 	.word	0x00003125
    3378:	00003131 	.word	0x00003131

0000337c <lsm6dso_i3c_disable_set>:
{
    337c:	b570      	push	{r4, r5, r6, lr}
    337e:	b082      	sub	sp, #8
    3380:	0004      	movs	r4, r0
    3382:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    3384:	2301      	movs	r3, #1
    3386:	466a      	mov	r2, sp
    3388:	2118      	movs	r1, #24
    338a:	4e16      	ldr	r6, [pc, #88]	; (33e4 <lsm6dso_i3c_disable_set+0x68>)
    338c:	47b0      	blx	r6
  if (ret == 0)
    338e:	2800      	cmp	r0, #0
    3390:	d001      	beq.n	3396 <lsm6dso_i3c_disable_set+0x1a>
}
    3392:	b002      	add	sp, #8
    3394:	bd70      	pop	{r4, r5, r6, pc}
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
    3396:	09ea      	lsrs	r2, r5, #7
    3398:	0052      	lsls	r2, r2, #1
    339a:	466b      	mov	r3, sp
    339c:	781b      	ldrb	r3, [r3, #0]
    339e:	2102      	movs	r1, #2
    33a0:	438b      	bics	r3, r1
    33a2:	4313      	orrs	r3, r2
    33a4:	466a      	mov	r2, sp
    33a6:	7013      	strb	r3, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    33a8:	2301      	movs	r3, #1
    33aa:	3116      	adds	r1, #22
    33ac:	0020      	movs	r0, r4
    33ae:	4e0e      	ldr	r6, [pc, #56]	; (33e8 <lsm6dso_i3c_disable_set+0x6c>)
    33b0:	47b0      	blx	r6
  if (ret == 0)
    33b2:	2800      	cmp	r0, #0
    33b4:	d1ed      	bne.n	3392 <lsm6dso_i3c_disable_set+0x16>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    33b6:	2301      	movs	r3, #1
    33b8:	aa01      	add	r2, sp, #4
    33ba:	2162      	movs	r1, #98	; 0x62
    33bc:	0020      	movs	r0, r4
    33be:	4e09      	ldr	r6, [pc, #36]	; (33e4 <lsm6dso_i3c_disable_set+0x68>)
    33c0:	47b0      	blx	r6
  if (ret == 0)
    33c2:	2800      	cmp	r0, #0
    33c4:	d1e5      	bne.n	3392 <lsm6dso_i3c_disable_set+0x16>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
    33c6:	aa01      	add	r2, sp, #4
    33c8:	2103      	movs	r1, #3
    33ca:	4029      	ands	r1, r5
    33cc:	00cb      	lsls	r3, r1, #3
    33ce:	7811      	ldrb	r1, [r2, #0]
    33d0:	3018      	adds	r0, #24
    33d2:	4381      	bics	r1, r0
    33d4:	4319      	orrs	r1, r3
    33d6:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    33d8:	2301      	movs	r3, #1
    33da:	2162      	movs	r1, #98	; 0x62
    33dc:	0020      	movs	r0, r4
    33de:	4c02      	ldr	r4, [pc, #8]	; (33e8 <lsm6dso_i3c_disable_set+0x6c>)
    33e0:	47a0      	blx	r4
  return ret;
    33e2:	e7d6      	b.n	3392 <lsm6dso_i3c_disable_set+0x16>
    33e4:	00003125 	.word	0x00003125
    33e8:	00003131 	.word	0x00003131

000033ec <lsm6dso_fsm_enable_get>:
{
    33ec:	b570      	push	{r4, r5, r6, lr}
    33ee:	0004      	movs	r4, r0
    33f0:	000d      	movs	r5, r1
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    33f2:	2102      	movs	r1, #2
    33f4:	4b08      	ldr	r3, [pc, #32]	; (3418 <lsm6dso_fsm_enable_get+0x2c>)
    33f6:	4798      	blx	r3
  if (ret == 0)
    33f8:	2800      	cmp	r0, #0
    33fa:	d000      	beq.n	33fe <lsm6dso_fsm_enable_get+0x12>
}
    33fc:	bd70      	pop	{r4, r5, r6, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
    33fe:	2302      	movs	r3, #2
    3400:	002a      	movs	r2, r5
    3402:	2146      	movs	r1, #70	; 0x46
    3404:	0020      	movs	r0, r4
    3406:	4d05      	ldr	r5, [pc, #20]	; (341c <lsm6dso_fsm_enable_get+0x30>)
    3408:	47a8      	blx	r5
  if (ret == 0)
    340a:	2800      	cmp	r0, #0
    340c:	d1f6      	bne.n	33fc <lsm6dso_fsm_enable_get+0x10>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    340e:	2100      	movs	r1, #0
    3410:	0020      	movs	r0, r4
    3412:	4b01      	ldr	r3, [pc, #4]	; (3418 <lsm6dso_fsm_enable_get+0x2c>)
    3414:	4798      	blx	r3
  return ret;
    3416:	e7f1      	b.n	33fc <lsm6dso_fsm_enable_get+0x10>
    3418:	00003295 	.word	0x00003295
    341c:	00003125 	.word	0x00003125

00003420 <lsm6dso_fsm_data_rate_get>:
{
    3420:	b570      	push	{r4, r5, r6, lr}
    3422:	b082      	sub	sp, #8
    3424:	0004      	movs	r4, r0
    3426:	000d      	movs	r5, r1
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    3428:	2102      	movs	r1, #2
    342a:	4b17      	ldr	r3, [pc, #92]	; (3488 <lsm6dso_fsm_data_rate_get+0x68>)
    342c:	4798      	blx	r3
  if (ret == 0)
    342e:	2800      	cmp	r0, #0
    3430:	d001      	beq.n	3436 <lsm6dso_fsm_data_rate_get+0x16>
}
    3432:	b002      	add	sp, #8
    3434:	bd70      	pop	{r4, r5, r6, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
    3436:	2301      	movs	r3, #1
    3438:	aa01      	add	r2, sp, #4
    343a:	215f      	movs	r1, #95	; 0x5f
    343c:	0020      	movs	r0, r4
    343e:	4e13      	ldr	r6, [pc, #76]	; (348c <lsm6dso_fsm_data_rate_get+0x6c>)
    3440:	47b0      	blx	r6
  if (ret == 0)
    3442:	2800      	cmp	r0, #0
    3444:	d1f5      	bne.n	3432 <lsm6dso_fsm_data_rate_get+0x12>
    switch (reg.fsm_odr)
    3446:	ab01      	add	r3, sp, #4
    3448:	781b      	ldrb	r3, [r3, #0]
    344a:	06db      	lsls	r3, r3, #27
    344c:	0f9b      	lsrs	r3, r3, #30
    344e:	b2da      	uxtb	r2, r3
    3450:	2a01      	cmp	r2, #1
    3452:	d00f      	beq.n	3474 <lsm6dso_fsm_data_rate_get+0x54>
    3454:	2a00      	cmp	r2, #0
    3456:	d006      	beq.n	3466 <lsm6dso_fsm_data_rate_get+0x46>
    3458:	2a02      	cmp	r2, #2
    345a:	d00e      	beq.n	347a <lsm6dso_fsm_data_rate_get+0x5a>
    345c:	2a03      	cmp	r2, #3
    345e:	d00f      	beq.n	3480 <lsm6dso_fsm_data_rate_get+0x60>
        *val = LSM6DSO_ODR_FSM_12Hz5;
    3460:	2300      	movs	r3, #0
    3462:	702b      	strb	r3, [r5, #0]
        break;
    3464:	e001      	b.n	346a <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_12Hz5;
    3466:	2300      	movs	r3, #0
    3468:	702b      	strb	r3, [r5, #0]
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    346a:	2100      	movs	r1, #0
    346c:	0020      	movs	r0, r4
    346e:	4b06      	ldr	r3, [pc, #24]	; (3488 <lsm6dso_fsm_data_rate_get+0x68>)
    3470:	4798      	blx	r3
  return ret;
    3472:	e7de      	b.n	3432 <lsm6dso_fsm_data_rate_get+0x12>
        *val = LSM6DSO_ODR_FSM_26Hz;
    3474:	2301      	movs	r3, #1
    3476:	702b      	strb	r3, [r5, #0]
        break;
    3478:	e7f7      	b.n	346a <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_52Hz;
    347a:	2302      	movs	r3, #2
    347c:	702b      	strb	r3, [r5, #0]
        break;
    347e:	e7f4      	b.n	346a <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_104Hz;
    3480:	2303      	movs	r3, #3
    3482:	702b      	strb	r3, [r5, #0]
        break;
    3484:	e7f1      	b.n	346a <lsm6dso_fsm_data_rate_get+0x4a>
    3486:	46c0      	nop			; (mov r8, r8)
    3488:	00003295 	.word	0x00003295
    348c:	00003125 	.word	0x00003125

00003490 <lsm6dso_xl_data_rate_set>:
{
    3490:	b570      	push	{r4, r5, r6, lr}
    3492:	b082      	sub	sp, #8
    3494:	0004      	movs	r4, r0
    3496:	000d      	movs	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    3498:	a901      	add	r1, sp, #4
    349a:	4b38      	ldr	r3, [pc, #224]	; (357c <lsm6dso_xl_data_rate_set+0xec>)
    349c:	4798      	blx	r3
  if (ret == 0)
    349e:	2800      	cmp	r0, #0
    34a0:	d142      	bne.n	3528 <lsm6dso_xl_data_rate_set+0x98>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    34a2:	a901      	add	r1, sp, #4
    34a4:	780a      	ldrb	r2, [r1, #0]
    34a6:	07d0      	lsls	r0, r2, #31
         fsm_enable.fsm_enable_a.fsm2_en  |
    34a8:	0793      	lsls	r3, r2, #30
    34aa:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    34ac:	0753      	lsls	r3, r2, #29
    34ae:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
    34b0:	0710      	lsls	r0, r2, #28
    34b2:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
    34b4:	06d0      	lsls	r0, r2, #27
    34b6:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    34b8:	0693      	lsls	r3, r2, #26
    34ba:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    34bc:	0653      	lsls	r3, r2, #25
    34be:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
    34c0:	0fdb      	lsrs	r3, r3, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    34c2:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_a.fsm7_en  |
    34c4:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_b.fsm9_en  |
    34c6:	784a      	ldrb	r2, [r1, #1]
    34c8:	07d1      	lsls	r1, r2, #31
    34ca:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    34cc:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
    34ce:	0791      	lsls	r1, r2, #30
    34d0:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm9_en  |
    34d2:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
    34d4:	0751      	lsls	r1, r2, #29
    34d6:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm10_en |
    34d8:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
    34da:	0711      	lsls	r1, r2, #28
    34dc:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm11_en |
    34de:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
    34e0:	06d1      	lsls	r1, r2, #27
    34e2:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm12_en |
    34e4:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
    34e6:	0691      	lsls	r1, r2, #26
    34e8:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm13_en |
    34ea:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
    34ec:	0651      	lsls	r1, r2, #25
    34ee:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm14_en |
    34f0:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    34f2:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_b.fsm15_en |
    34f4:	4313      	orrs	r3, r2
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    34f6:	b2db      	uxtb	r3, r3
    34f8:	2b01      	cmp	r3, #1
    34fa:	d017      	beq.n	352c <lsm6dso_xl_data_rate_set+0x9c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    34fc:	2301      	movs	r3, #1
    34fe:	466a      	mov	r2, sp
    3500:	2110      	movs	r1, #16
    3502:	0020      	movs	r0, r4
    3504:	4e1e      	ldr	r6, [pc, #120]	; (3580 <lsm6dso_xl_data_rate_set+0xf0>)
    3506:	47b0      	blx	r6
  if (ret == 0)
    3508:	2800      	cmp	r0, #0
    350a:	d10d      	bne.n	3528 <lsm6dso_xl_data_rate_set+0x98>
    reg.odr_xl = (uint8_t) odr_xl;
    350c:	012b      	lsls	r3, r5, #4
    350e:	466a      	mov	r2, sp
    3510:	7812      	ldrb	r2, [r2, #0]
    3512:	250f      	movs	r5, #15
    3514:	4015      	ands	r5, r2
    3516:	431d      	orrs	r5, r3
    3518:	466b      	mov	r3, sp
    351a:	701d      	strb	r5, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    351c:	2301      	movs	r3, #1
    351e:	466a      	mov	r2, sp
    3520:	2110      	movs	r1, #16
    3522:	0020      	movs	r0, r4
    3524:	4c17      	ldr	r4, [pc, #92]	; (3584 <lsm6dso_xl_data_rate_set+0xf4>)
    3526:	47a0      	blx	r4
}
    3528:	b002      	add	sp, #8
    352a:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    352c:	466b      	mov	r3, sp
    352e:	1cd9      	adds	r1, r3, #3
    3530:	0020      	movs	r0, r4
    3532:	4b15      	ldr	r3, [pc, #84]	; (3588 <lsm6dso_xl_data_rate_set+0xf8>)
    3534:	4798      	blx	r3
      if (ret == 0)
    3536:	2800      	cmp	r0, #0
    3538:	d1f6      	bne.n	3528 <lsm6dso_xl_data_rate_set+0x98>
        switch (fsm_odr)
    353a:	466b      	mov	r3, sp
    353c:	3303      	adds	r3, #3
    353e:	781b      	ldrb	r3, [r3, #0]
    3540:	2b01      	cmp	r3, #1
    3542:	d00f      	beq.n	3564 <lsm6dso_xl_data_rate_set+0xd4>
    3544:	2b00      	cmp	r3, #0
    3546:	d009      	beq.n	355c <lsm6dso_xl_data_rate_set+0xcc>
    3548:	2b02      	cmp	r3, #2
    354a:	d011      	beq.n	3570 <lsm6dso_xl_data_rate_set+0xe0>
    354c:	2b03      	cmp	r3, #3
    354e:	d1d5      	bne.n	34fc <lsm6dso_xl_data_rate_set+0x6c>
    3550:	1c2b      	adds	r3, r5, #0
    3552:	2d03      	cmp	r5, #3
    3554:	d800      	bhi.n	3558 <lsm6dso_xl_data_rate_set+0xc8>
    3556:	2304      	movs	r3, #4
    3558:	b2dd      	uxtb	r5, r3
    355a:	e7cf      	b.n	34fc <lsm6dso_xl_data_rate_set+0x6c>
            if (val == LSM6DSO_XL_ODR_OFF)
    355c:	2d00      	cmp	r5, #0
    355e:	d1cd      	bne.n	34fc <lsm6dso_xl_data_rate_set+0x6c>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
    3560:	2501      	movs	r5, #1
    3562:	e7cb      	b.n	34fc <lsm6dso_xl_data_rate_set+0x6c>
    3564:	1c2b      	adds	r3, r5, #0
    3566:	2d01      	cmp	r5, #1
    3568:	d800      	bhi.n	356c <lsm6dso_xl_data_rate_set+0xdc>
    356a:	2302      	movs	r3, #2
    356c:	b2dd      	uxtb	r5, r3
    356e:	e7c5      	b.n	34fc <lsm6dso_xl_data_rate_set+0x6c>
    3570:	1c2b      	adds	r3, r5, #0
    3572:	2d02      	cmp	r5, #2
    3574:	d800      	bhi.n	3578 <lsm6dso_xl_data_rate_set+0xe8>
    3576:	2303      	movs	r3, #3
    3578:	b2dd      	uxtb	r5, r3
    357a:	e7bf      	b.n	34fc <lsm6dso_xl_data_rate_set+0x6c>
    357c:	000033ed 	.word	0x000033ed
    3580:	00003125 	.word	0x00003125
    3584:	00003131 	.word	0x00003131
    3588:	00003421 	.word	0x00003421

0000358c <lsm6dso_gy_data_rate_set>:
{
    358c:	b570      	push	{r4, r5, r6, lr}
    358e:	b082      	sub	sp, #8
    3590:	0004      	movs	r4, r0
    3592:	000d      	movs	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    3594:	a901      	add	r1, sp, #4
    3596:	4b38      	ldr	r3, [pc, #224]	; (3678 <lsm6dso_gy_data_rate_set+0xec>)
    3598:	4798      	blx	r3
  if (ret == 0)
    359a:	2800      	cmp	r0, #0
    359c:	d142      	bne.n	3624 <lsm6dso_gy_data_rate_set+0x98>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    359e:	a901      	add	r1, sp, #4
    35a0:	780a      	ldrb	r2, [r1, #0]
    35a2:	07d0      	lsls	r0, r2, #31
         fsm_enable.fsm_enable_a.fsm2_en  |
    35a4:	0793      	lsls	r3, r2, #30
    35a6:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    35a8:	0753      	lsls	r3, r2, #29
    35aa:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
    35ac:	0710      	lsls	r0, r2, #28
    35ae:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
    35b0:	06d0      	lsls	r0, r2, #27
    35b2:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    35b4:	0693      	lsls	r3, r2, #26
    35b6:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    35b8:	0653      	lsls	r3, r2, #25
    35ba:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
    35bc:	0fdb      	lsrs	r3, r3, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    35be:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_a.fsm7_en  |
    35c0:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_b.fsm9_en  |
    35c2:	784a      	ldrb	r2, [r1, #1]
    35c4:	07d1      	lsls	r1, r2, #31
    35c6:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    35c8:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
    35ca:	0791      	lsls	r1, r2, #30
    35cc:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm9_en  |
    35ce:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
    35d0:	0751      	lsls	r1, r2, #29
    35d2:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm10_en |
    35d4:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
    35d6:	0711      	lsls	r1, r2, #28
    35d8:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm11_en |
    35da:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
    35dc:	06d1      	lsls	r1, r2, #27
    35de:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm12_en |
    35e0:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
    35e2:	0691      	lsls	r1, r2, #26
    35e4:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm13_en |
    35e6:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
    35e8:	0651      	lsls	r1, r2, #25
    35ea:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm14_en |
    35ec:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    35ee:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_b.fsm15_en |
    35f0:	4313      	orrs	r3, r2
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    35f2:	b2db      	uxtb	r3, r3
    35f4:	2b01      	cmp	r3, #1
    35f6:	d017      	beq.n	3628 <lsm6dso_gy_data_rate_set+0x9c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    35f8:	2301      	movs	r3, #1
    35fa:	466a      	mov	r2, sp
    35fc:	2111      	movs	r1, #17
    35fe:	0020      	movs	r0, r4
    3600:	4e1e      	ldr	r6, [pc, #120]	; (367c <lsm6dso_gy_data_rate_set+0xf0>)
    3602:	47b0      	blx	r6
  if (ret == 0)
    3604:	2800      	cmp	r0, #0
    3606:	d10d      	bne.n	3624 <lsm6dso_gy_data_rate_set+0x98>
    reg.odr_g = (uint8_t) odr_gy;
    3608:	012b      	lsls	r3, r5, #4
    360a:	466a      	mov	r2, sp
    360c:	7812      	ldrb	r2, [r2, #0]
    360e:	250f      	movs	r5, #15
    3610:	4015      	ands	r5, r2
    3612:	431d      	orrs	r5, r3
    3614:	466b      	mov	r3, sp
    3616:	701d      	strb	r5, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    3618:	2301      	movs	r3, #1
    361a:	466a      	mov	r2, sp
    361c:	2111      	movs	r1, #17
    361e:	0020      	movs	r0, r4
    3620:	4c17      	ldr	r4, [pc, #92]	; (3680 <lsm6dso_gy_data_rate_set+0xf4>)
    3622:	47a0      	blx	r4
}
    3624:	b002      	add	sp, #8
    3626:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    3628:	466b      	mov	r3, sp
    362a:	1cd9      	adds	r1, r3, #3
    362c:	0020      	movs	r0, r4
    362e:	4b15      	ldr	r3, [pc, #84]	; (3684 <lsm6dso_gy_data_rate_set+0xf8>)
    3630:	4798      	blx	r3
      if (ret == 0)
    3632:	2800      	cmp	r0, #0
    3634:	d1f6      	bne.n	3624 <lsm6dso_gy_data_rate_set+0x98>
        switch (fsm_odr)
    3636:	466b      	mov	r3, sp
    3638:	3303      	adds	r3, #3
    363a:	781b      	ldrb	r3, [r3, #0]
    363c:	2b01      	cmp	r3, #1
    363e:	d00f      	beq.n	3660 <lsm6dso_gy_data_rate_set+0xd4>
    3640:	2b00      	cmp	r3, #0
    3642:	d009      	beq.n	3658 <lsm6dso_gy_data_rate_set+0xcc>
    3644:	2b02      	cmp	r3, #2
    3646:	d011      	beq.n	366c <lsm6dso_gy_data_rate_set+0xe0>
    3648:	2b03      	cmp	r3, #3
    364a:	d1d5      	bne.n	35f8 <lsm6dso_gy_data_rate_set+0x6c>
    364c:	1c2b      	adds	r3, r5, #0
    364e:	2d03      	cmp	r5, #3
    3650:	d800      	bhi.n	3654 <lsm6dso_gy_data_rate_set+0xc8>
    3652:	2304      	movs	r3, #4
    3654:	b2dd      	uxtb	r5, r3
    3656:	e7cf      	b.n	35f8 <lsm6dso_gy_data_rate_set+0x6c>
            if (val == LSM6DSO_GY_ODR_OFF)
    3658:	2d00      	cmp	r5, #0
    365a:	d1cd      	bne.n	35f8 <lsm6dso_gy_data_rate_set+0x6c>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
    365c:	2501      	movs	r5, #1
    365e:	e7cb      	b.n	35f8 <lsm6dso_gy_data_rate_set+0x6c>
    3660:	1c2b      	adds	r3, r5, #0
    3662:	2d01      	cmp	r5, #1
    3664:	d800      	bhi.n	3668 <lsm6dso_gy_data_rate_set+0xdc>
    3666:	2302      	movs	r3, #2
    3668:	b2dd      	uxtb	r5, r3
    366a:	e7c5      	b.n	35f8 <lsm6dso_gy_data_rate_set+0x6c>
    366c:	1c2b      	adds	r3, r5, #0
    366e:	2d02      	cmp	r5, #2
    3670:	d800      	bhi.n	3674 <lsm6dso_gy_data_rate_set+0xe8>
    3672:	2303      	movs	r3, #3
    3674:	b2dd      	uxtb	r5, r3
    3676:	e7bf      	b.n	35f8 <lsm6dso_gy_data_rate_set+0x6c>
    3678:	000033ed 	.word	0x000033ed
    367c:	00003125 	.word	0x00003125
    3680:	00003131 	.word	0x00003131
    3684:	00003421 	.word	0x00003421

00003688 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
 return &dev_ctx;
}
    3688:	4800      	ldr	r0, [pc, #0]	; (368c <GetImuStruct+0x4>)
    368a:	4770      	bx	lr
    368c:	200001e8 	.word	0x200001e8

00003690 <InitImu>:



int32_t InitImu(void)
{
    3690:	b510      	push	{r4, lr}
    3692:	b082      	sub	sp, #8
	uint8_t rst;
	int32_t error = 0;
	uint8_t whoamI = 0;
    3694:	466b      	mov	r3, sp
    3696:	1ddc      	adds	r4, r3, #7
    3698:	2300      	movs	r3, #0
    369a:	7023      	strb	r3, [r4, #0]

  /* Check device ID */
  lsm6dso_device_id_get(&dev_ctx, &whoamI);
    369c:	0021      	movs	r1, r4
    369e:	4818      	ldr	r0, [pc, #96]	; (3700 <InitImu+0x70>)
    36a0:	4b18      	ldr	r3, [pc, #96]	; (3704 <InitImu+0x74>)
    36a2:	4798      	blx	r3
  
   if (whoamI != LSM6DSO_ID)
    36a4:	7823      	ldrb	r3, [r4, #0]
    36a6:	2b6c      	cmp	r3, #108	; 0x6c
    36a8:	d127      	bne.n	36fa <InitImu+0x6a>
  //do {
    //error |= lsm6dso_reset_get(&dev_ctx, &rst);
  //} while (rst);   // edited reset not working on the PCB

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
    36aa:	4c15      	ldr	r4, [pc, #84]	; (3700 <InitImu+0x70>)
    36ac:	2180      	movs	r1, #128	; 0x80
    36ae:	0020      	movs	r0, r4
    36b0:	4b15      	ldr	r3, [pc, #84]	; (3708 <InitImu+0x78>)
    36b2:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    36b4:	2101      	movs	r1, #1
    36b6:	0020      	movs	r0, r4
    36b8:	4b14      	ldr	r3, [pc, #80]	; (370c <InitImu+0x7c>)
    36ba:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
    36bc:	2100      	movs	r1, #0
    36be:	0020      	movs	r0, r4
    36c0:	4b13      	ldr	r3, [pc, #76]	; (3710 <InitImu+0x80>)
    36c2:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_833Hz);  // edited change speed here
    36c4:	2107      	movs	r1, #7
    36c6:	0020      	movs	r0, r4
    36c8:	4b12      	ldr	r3, [pc, #72]	; (3714 <InitImu+0x84>)
    36ca:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx,  LSM6DSO_GY_ODR_833Hz);
    36cc:	2107      	movs	r1, #7
    36ce:	0020      	movs	r0, r4
    36d0:	4b11      	ldr	r3, [pc, #68]	; (3718 <InitImu+0x88>)
    36d2:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
    36d4:	2100      	movs	r1, #0
    36d6:	0020      	movs	r0, r4
    36d8:	4b10      	ldr	r3, [pc, #64]	; (371c <InitImu+0x8c>)
    36da:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
    36dc:	2106      	movs	r1, #6
    36de:	0020      	movs	r0, r4
    36e0:	4b0f      	ldr	r3, [pc, #60]	; (3720 <InitImu+0x90>)
    36e2:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
    36e4:	2104      	movs	r1, #4
    36e6:	0020      	movs	r0, r4
    36e8:	4b0e      	ldr	r3, [pc, #56]	; (3724 <InitImu+0x94>)
    36ea:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
    36ec:	2101      	movs	r1, #1
    36ee:	0020      	movs	r0, r4
    36f0:	4b0d      	ldr	r3, [pc, #52]	; (3728 <InitImu+0x98>)
    36f2:	4798      	blx	r3

  return error;
    36f4:	2000      	movs	r0, #0
}
    36f6:	b002      	add	sp, #8
    36f8:	bd10      	pop	{r4, pc}
		return -1;
    36fa:	2001      	movs	r0, #1
    36fc:	4240      	negs	r0, r0
    36fe:	e7fa      	b.n	36f6 <InitImu+0x66>
    3700:	200001e8 	.word	0x200001e8
    3704:	000032d1 	.word	0x000032d1
    3708:	0000337d 	.word	0x0000337d
    370c:	000031d9 	.word	0x000031d9
    3710:	00003219 	.word	0x00003219
    3714:	00003491 	.word	0x00003491
    3718:	0000358d 	.word	0x0000358d
    371c:	00003159 	.word	0x00003159
    3720:	00003199 	.word	0x00003199
    3724:	00003325 	.word	0x00003325
    3728:	000032e5 	.word	0x000032e5

0000372c <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    372e:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    3730:	2041      	movs	r0, #65	; 0x41
    3732:	5c23      	ldrb	r3, [r4, r0]
    3734:	2501      	movs	r5, #1
    3736:	432b      	orrs	r3, r5
    3738:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    373a:	b292      	uxth	r2, r2
    373c:	2000      	movs	r0, #0
    373e:	5620      	ldrsb	r0, [r4, r0]
    3740:	2300      	movs	r3, #0
    3742:	4d12      	ldr	r5, [pc, #72]	; (378c <_http_client_send_wait+0x60>)
    3744:	47a8      	blx	r5
    3746:	2800      	cmp	r0, #0
    3748:	db16      	blt.n	3778 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    374a:	2341      	movs	r3, #65	; 0x41
    374c:	5ce3      	ldrb	r3, [r4, r3]
    374e:	07db      	lsls	r3, r3, #31
    3750:	d518      	bpl.n	3784 <_http_client_send_wait+0x58>
    3752:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    3754:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    3756:	2b02      	cmp	r3, #2
    3758:	d917      	bls.n	378a <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
    375a:	4f0d      	ldr	r7, [pc, #52]	; (3790 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
    375c:	4e0d      	ldr	r6, [pc, #52]	; (3794 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    375e:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    3760:	2000      	movs	r0, #0
    3762:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    3764:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3766:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    3768:	5d63      	ldrb	r3, [r4, r5]
    376a:	07db      	lsls	r3, r3, #31
    376c:	d50c      	bpl.n	3788 <_http_client_send_wait+0x5c>
    376e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    3770:	2b02      	cmp	r3, #2
    3772:	d8f5      	bhi.n	3760 <_http_client_send_wait+0x34>
	return 0;
    3774:	2000      	movs	r0, #0
    3776:	e008      	b.n	378a <_http_client_send_wait+0x5e>
		module->sending = 0;
    3778:	2241      	movs	r2, #65	; 0x41
    377a:	5ca3      	ldrb	r3, [r4, r2]
    377c:	2101      	movs	r1, #1
    377e:	438b      	bics	r3, r1
    3780:	54a3      	strb	r3, [r4, r2]
		return result;
    3782:	e002      	b.n	378a <_http_client_send_wait+0x5e>
	return 0;
    3784:	2000      	movs	r0, #0
    3786:	e000      	b.n	378a <_http_client_send_wait+0x5e>
    3788:	2000      	movs	r0, #0
}
    378a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    378c:	0000cd15 	.word	0x0000cd15
    3790:	0000ad2d 	.word	0x0000ad2d
    3794:	000048c1 	.word	0x000048c1

00003798 <http_client_get_config_defaults>:
	config->port = 80;
    3798:	2350      	movs	r3, #80	; 0x50
    379a:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    379c:	2300      	movs	r3, #0
    379e:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    37a0:	4a05      	ldr	r2, [pc, #20]	; (37b8 <http_client_get_config_defaults+0x20>)
    37a2:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    37a4:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    37a6:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    37a8:	3301      	adds	r3, #1
    37aa:	33ff      	adds	r3, #255	; 0xff
    37ac:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    37ae:	3bae      	subs	r3, #174	; 0xae
    37b0:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    37b2:	4b02      	ldr	r3, [pc, #8]	; (37bc <http_client_get_config_defaults+0x24>)
    37b4:	6183      	str	r3, [r0, #24]
}
    37b6:	4770      	bx	lr
    37b8:	00004e20 	.word	0x00004e20
    37bc:	00019700 	.word	0x00019700

000037c0 <http_client_init>:
{
    37c0:	b570      	push	{r4, r5, r6, lr}
    37c2:	0004      	movs	r4, r0
    37c4:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    37c6:	2800      	cmp	r0, #0
    37c8:	d038      	beq.n	383c <http_client_init+0x7c>
    37ca:	2900      	cmp	r1, #0
    37cc:	d039      	beq.n	3842 <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
    37ce:	690b      	ldr	r3, [r1, #16]
    37d0:	2b00      	cmp	r3, #0
    37d2:	d039      	beq.n	3848 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
    37d4:	684b      	ldr	r3, [r1, #4]
    37d6:	2b00      	cmp	r3, #0
    37d8:	d039      	beq.n	384e <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    37da:	694b      	ldr	r3, [r1, #20]
    37dc:	2b51      	cmp	r3, #81	; 0x51
    37de:	d939      	bls.n	3854 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
    37e0:	22e8      	movs	r2, #232	; 0xe8
    37e2:	2100      	movs	r1, #0
    37e4:	4b1e      	ldr	r3, [pc, #120]	; (3860 <http_client_init+0xa0>)
    37e6:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    37e8:	0020      	movs	r0, r4
    37ea:	3050      	adds	r0, #80	; 0x50
    37ec:	221c      	movs	r2, #28
    37ee:	0029      	movs	r1, r5
    37f0:	4b1c      	ldr	r3, [pc, #112]	; (3864 <http_client_init+0xa4>)
    37f2:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    37f4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    37f6:	2b00      	cmp	r3, #0
    37f8:	d008      	beq.n	380c <http_client_init+0x4c>
	if (config->timeout > 0) {
    37fa:	892b      	ldrh	r3, [r5, #8]
    37fc:	2b00      	cmp	r3, #0
    37fe:	d111      	bne.n	3824 <http_client_init+0x64>
	module->req.state = STATE_INIT;
    3800:	2300      	movs	r3, #0
    3802:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    3804:	22d8      	movs	r2, #216	; 0xd8
    3806:	50a3      	str	r3, [r4, r2]
	return 0;
    3808:	2000      	movs	r0, #0
}
    380a:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    380c:	6928      	ldr	r0, [r5, #16]
    380e:	4b16      	ldr	r3, [pc, #88]	; (3868 <http_client_init+0xa8>)
    3810:	4798      	blx	r3
    3812:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    3814:	2800      	cmp	r0, #0
    3816:	d020      	beq.n	385a <http_client_init+0x9a>
		module->alloc_buffer = 1;
    3818:	2241      	movs	r2, #65	; 0x41
    381a:	5ca3      	ldrb	r3, [r4, r2]
    381c:	2104      	movs	r1, #4
    381e:	430b      	orrs	r3, r1
    3820:	54a3      	strb	r3, [r4, r2]
    3822:	e7ea      	b.n	37fa <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    3824:	6868      	ldr	r0, [r5, #4]
    3826:	2300      	movs	r3, #0
    3828:	0022      	movs	r2, r4
    382a:	4910      	ldr	r1, [pc, #64]	; (386c <http_client_init+0xac>)
    382c:	4d10      	ldr	r5, [pc, #64]	; (3870 <http_client_init+0xb0>)
    382e:	47a8      	blx	r5
    3830:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    3832:	2800      	cmp	r0, #0
    3834:	dae4      	bge.n	3800 <http_client_init+0x40>
			return -ENOSPC;
    3836:	201c      	movs	r0, #28
    3838:	4240      	negs	r0, r0
    383a:	e7e6      	b.n	380a <http_client_init+0x4a>
		return -EINVAL;
    383c:	2016      	movs	r0, #22
    383e:	4240      	negs	r0, r0
    3840:	e7e3      	b.n	380a <http_client_init+0x4a>
    3842:	2016      	movs	r0, #22
    3844:	4240      	negs	r0, r0
    3846:	e7e0      	b.n	380a <http_client_init+0x4a>
		return -EINVAL;
    3848:	2016      	movs	r0, #22
    384a:	4240      	negs	r0, r0
    384c:	e7dd      	b.n	380a <http_client_init+0x4a>
		return -EINVAL;
    384e:	2016      	movs	r0, #22
    3850:	4240      	negs	r0, r0
    3852:	e7da      	b.n	380a <http_client_init+0x4a>
		return -EINVAL;
    3854:	2016      	movs	r0, #22
    3856:	4240      	negs	r0, r0
    3858:	e7d7      	b.n	380a <http_client_init+0x4a>
			return -ENOMEM;
    385a:	200c      	movs	r0, #12
    385c:	4240      	negs	r0, r0
    385e:	e7d4      	b.n	380a <http_client_init+0x4a>
    3860:	00012b83 	.word	0x00012b83
    3864:	00012b4d 	.word	0x00012b4d
    3868:	00012b25 	.word	0x00012b25
    386c:	00003985 	.word	0x00003985
    3870:	0000484d 	.word	0x0000484d

00003874 <http_client_register_callback>:
	if (module == NULL) {
    3874:	2800      	cmp	r0, #0
    3876:	d002      	beq.n	387e <http_client_register_callback+0xa>
	module->cb = callback;
    3878:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    387a:	2000      	movs	r0, #0
}
    387c:	4770      	bx	lr
		return -EINVAL;
    387e:	2016      	movs	r0, #22
    3880:	4240      	negs	r0, r0
    3882:	e7fb      	b.n	387c <http_client_register_callback+0x8>

00003884 <_http_client_clear_conn>:
{
    3884:	b5f0      	push	{r4, r5, r6, r7, lr}
    3886:	b085      	sub	sp, #20
    3888:	0004      	movs	r4, r0
    388a:	000e      	movs	r6, r1
	if (module->req.entity.close) {
    388c:	23c0      	movs	r3, #192	; 0xc0
    388e:	58c3      	ldr	r3, [r0, r3]
    3890:	2b00      	cmp	r3, #0
    3892:	d002      	beq.n	389a <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    3894:	22c4      	movs	r2, #196	; 0xc4
    3896:	5880      	ldr	r0, [r0, r2]
    3898:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    389a:	0020      	movs	r0, r4
    389c:	30b0      	adds	r0, #176	; 0xb0
    389e:	2218      	movs	r2, #24
    38a0:	2100      	movs	r1, #0
    38a2:	4b17      	ldr	r3, [pc, #92]	; (3900 <_http_client_clear_conn+0x7c>)
    38a4:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    38a6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    38a8:	2b00      	cmp	r3, #0
    38aa:	d124      	bne.n	38f6 <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
    38ac:	2300      	movs	r3, #0
    38ae:	56e3      	ldrsb	r3, [r4, r3]
    38b0:	009b      	lsls	r3, r3, #2
    38b2:	2500      	movs	r5, #0
    38b4:	4a13      	ldr	r2, [pc, #76]	; (3904 <_http_client_clear_conn+0x80>)
    38b6:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    38b8:	0020      	movs	r0, r4
    38ba:	306c      	adds	r0, #108	; 0x6c
    38bc:	226c      	movs	r2, #108	; 0x6c
    38be:	2100      	movs	r1, #0
    38c0:	4f0f      	ldr	r7, [pc, #60]	; (3900 <_http_client_clear_conn+0x7c>)
    38c2:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    38c4:	0020      	movs	r0, r4
    38c6:	30d8      	adds	r0, #216	; 0xd8
    38c8:	2210      	movs	r2, #16
    38ca:	2100      	movs	r1, #0
    38cc:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    38ce:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    38d0:	23d8      	movs	r3, #216	; 0xd8
    38d2:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    38d4:	2241      	movs	r2, #65	; 0x41
    38d6:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    38d8:	2101      	movs	r1, #1
    38da:	438b      	bics	r3, r1
    38dc:	3101      	adds	r1, #1
    38de:	438b      	bics	r3, r1
    38e0:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    38e2:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    38e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    38e6:	2b00      	cmp	r3, #0
    38e8:	d003      	beq.n	38f2 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    38ea:	aa01      	add	r2, sp, #4
    38ec:	3102      	adds	r1, #2
    38ee:	0020      	movs	r0, r4
    38f0:	4798      	blx	r3
}
    38f2:	b005      	add	sp, #20
    38f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    38f6:	2000      	movs	r0, #0
    38f8:	5620      	ldrsb	r0, [r4, r0]
    38fa:	4b03      	ldr	r3, [pc, #12]	; (3908 <_http_client_clear_conn+0x84>)
    38fc:	4798      	blx	r3
    38fe:	e7d5      	b.n	38ac <_http_client_clear_conn+0x28>
    3900:	00012b83 	.word	0x00012b83
    3904:	20000bc4 	.word	0x20000bc4
    3908:	0000ce41 	.word	0x0000ce41

0000390c <http_client_socket_resolve_handler>:
{
    390c:	b5f0      	push	{r4, r5, r6, r7, lr}
    390e:	b087      	sub	sp, #28
    3910:	9000      	str	r0, [sp, #0]
    3912:	9101      	str	r1, [sp, #4]
    3914:	4c17      	ldr	r4, [pc, #92]	; (3974 <http_client_socket_resolve_handler+0x68>)
    3916:	0026      	movs	r6, r4
    3918:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    391a:	4f17      	ldr	r7, [pc, #92]	; (3978 <http_client_socket_resolve_handler+0x6c>)
    391c:	e015      	b.n	394a <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
    391e:	2302      	movs	r3, #2
    3920:	aa02      	add	r2, sp, #8
    3922:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    3924:	334e      	adds	r3, #78	; 0x4e
    3926:	5aeb      	ldrh	r3, [r5, r3]
    3928:	021a      	lsls	r2, r3, #8
    392a:	0a1b      	lsrs	r3, r3, #8
    392c:	4313      	orrs	r3, r2
    392e:	aa02      	add	r2, sp, #8
    3930:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
    3932:	9b01      	ldr	r3, [sp, #4]
    3934:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    3936:	2000      	movs	r0, #0
    3938:	5628      	ldrsb	r0, [r5, r0]
    393a:	2210      	movs	r2, #16
    393c:	a902      	add	r1, sp, #8
    393e:	4b0f      	ldr	r3, [pc, #60]	; (397c <http_client_socket_resolve_handler+0x70>)
    3940:	4798      	blx	r3
				return;
    3942:	e015      	b.n	3970 <http_client_socket_resolve_handler+0x64>
    3944:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    3946:	42b4      	cmp	r4, r6
    3948:	d012      	beq.n	3970 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
    394a:	6825      	ldr	r5, [r4, #0]
    394c:	2d00      	cmp	r5, #0
    394e:	d0f9      	beq.n	3944 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    3950:	1c69      	adds	r1, r5, #1
    3952:	9800      	ldr	r0, [sp, #0]
    3954:	47b8      	blx	r7
    3956:	2800      	cmp	r0, #0
    3958:	d1f4      	bne.n	3944 <http_client_socket_resolve_handler+0x38>
    395a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    395c:	2b01      	cmp	r3, #1
    395e:	d1f1      	bne.n	3944 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    3960:	9b01      	ldr	r3, [sp, #4]
    3962:	2b00      	cmp	r3, #0
    3964:	d1db      	bne.n	391e <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    3966:	2176      	movs	r1, #118	; 0x76
    3968:	4249      	negs	r1, r1
    396a:	0028      	movs	r0, r5
    396c:	4b04      	ldr	r3, [pc, #16]	; (3980 <http_client_socket_resolve_handler+0x74>)
    396e:	4798      	blx	r3
}
    3970:	b007      	add	sp, #28
    3972:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3974:	20000bc4 	.word	0x20000bc4
    3978:	000137bb 	.word	0x000137bb
    397c:	0000cc85 	.word	0x0000cc85
    3980:	00003885 	.word	0x00003885

00003984 <http_client_timer_callback>:
{
    3984:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    3986:	2a00      	cmp	r2, #0
    3988:	d004      	beq.n	3994 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    398a:	213e      	movs	r1, #62	; 0x3e
    398c:	4249      	negs	r1, r1
    398e:	0010      	movs	r0, r2
    3990:	4b01      	ldr	r3, [pc, #4]	; (3998 <http_client_timer_callback+0x14>)
    3992:	4798      	blx	r3
}
    3994:	bd10      	pop	{r4, pc}
    3996:	46c0      	nop			; (mov r8, r8)
    3998:	00003885 	.word	0x00003885

0000399c <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    399c:	b5f0      	push	{r4, r5, r6, r7, lr}
    399e:	46de      	mov	lr, fp
    39a0:	4657      	mov	r7, sl
    39a2:	b580      	push	{r7, lr}
    39a4:	b095      	sub	sp, #84	; 0x54
    39a6:	af02      	add	r7, sp, #8
    39a8:	0004      	movs	r4, r0
    39aa:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    39ac:	2310      	movs	r3, #16
    39ae:	2208      	movs	r2, #8
    39b0:	18ba      	adds	r2, r7, r2
    39b2:	18d2      	adds	r2, r2, r3
    39b4:	4bb1      	ldr	r3, [pc, #708]	; (3c7c <_http_client_request+0x2e0>)
    39b6:	cb23      	ldmia	r3!, {r0, r1, r5}
    39b8:	c223      	stmia	r2!, {r0, r1, r5}
    39ba:	681b      	ldr	r3, [r3, #0]
    39bc:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    39be:	6e62      	ldr	r2, [r4, #100]	; 0x64
    39c0:	1dd3      	adds	r3, r2, #7
    39c2:	08db      	lsrs	r3, r3, #3
    39c4:	00db      	lsls	r3, r3, #3
    39c6:	4669      	mov	r1, sp
    39c8:	1acb      	subs	r3, r1, r3
    39ca:	469d      	mov	sp, r3
    39cc:	ae02      	add	r6, sp, #8

	if (module == NULL) {
    39ce:	2c00      	cmp	r4, #0
    39d0:	d100      	bne.n	39d4 <_http_client_request+0x38>
    39d2:	e1f0      	b.n	3db6 <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
    39d4:	2341      	movs	r3, #65	; 0x41
    39d6:	5ce3      	ldrb	r3, [r4, r3]
    39d8:	07db      	lsls	r3, r3, #31
    39da:	d500      	bpl.n	39de <_http_client_request+0x42>
    39dc:	e1eb      	b.n	3db6 <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    39de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    39e0:	2b03      	cmp	r3, #3
    39e2:	d004      	beq.n	39ee <_http_client_request+0x52>
    39e4:	2b04      	cmp	r3, #4
    39e6:	d100      	bne.n	39ea <_http_client_request+0x4e>
    39e8:	e120      	b.n	3c2c <_http_client_request+0x290>
    39ea:	46dd      	mov	sp, fp
    39ec:	e1e4      	b.n	3db8 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    39ee:	2300      	movs	r3, #0
    39f0:	21cc      	movs	r1, #204	; 0xcc
    39f2:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    39f4:	3104      	adds	r1, #4
    39f6:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    39f8:	9400      	str	r4, [sp, #0]
    39fa:	4ba1      	ldr	r3, [pc, #644]	; (3c80 <_http_client_request+0x2e4>)
    39fc:	0031      	movs	r1, r6
    39fe:	202c      	movs	r0, #44	; 0x2c
    3a00:	2508      	movs	r5, #8
    3a02:	46ac      	mov	ip, r5
    3a04:	44bc      	add	ip, r7
    3a06:	4460      	add	r0, ip
    3a08:	4d9e      	ldr	r5, [pc, #632]	; (3c84 <_http_client_request+0x2e8>)
    3a0a:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    3a0c:	23c8      	movs	r3, #200	; 0xc8
    3a0e:	5ce3      	ldrb	r3, [r4, r3]
    3a10:	2b01      	cmp	r3, #1
    3a12:	d100      	bne.n	3a16 <_http_client_request+0x7a>
    3a14:	e0a9      	b.n	3b6a <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
    3a16:	2b02      	cmp	r3, #2
    3a18:	d100      	bne.n	3a1c <_http_client_request+0x80>
    3a1a:	e0af      	b.n	3b7c <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    3a1c:	2b03      	cmp	r3, #3
    3a1e:	d100      	bne.n	3a22 <_http_client_request+0x86>
    3a20:	e0b5      	b.n	3b8e <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
    3a22:	2b04      	cmp	r3, #4
    3a24:	d100      	bne.n	3a28 <_http_client_request+0x8c>
    3a26:	e0bb      	b.n	3ba0 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    3a28:	2b05      	cmp	r3, #5
    3a2a:	d100      	bne.n	3a2e <_http_client_request+0x92>
    3a2c:	e0c1      	b.n	3bb2 <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    3a2e:	2b06      	cmp	r3, #6
    3a30:	d100      	bne.n	3a34 <_http_client_request+0x98>
    3a32:	e0c7      	b.n	3bc4 <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    3a34:	0025      	movs	r5, r4
    3a36:	3570      	adds	r5, #112	; 0x70
    3a38:	0028      	movs	r0, r5
    3a3a:	4b93      	ldr	r3, [pc, #588]	; (3c88 <_http_client_request+0x2ec>)
    3a3c:	469a      	mov	sl, r3
    3a3e:	4798      	blx	r3
    3a40:	0002      	movs	r2, r0
    3a42:	0029      	movs	r1, r5
    3a44:	232c      	movs	r3, #44	; 0x2c
    3a46:	2008      	movs	r0, #8
    3a48:	1838      	adds	r0, r7, r0
    3a4a:	18c0      	adds	r0, r0, r3
    3a4c:	4d8f      	ldr	r5, [pc, #572]	; (3c8c <_http_client_request+0x2f0>)
    3a4e:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    3a50:	220b      	movs	r2, #11
    3a52:	498f      	ldr	r1, [pc, #572]	; (3c90 <_http_client_request+0x2f4>)
    3a54:	232c      	movs	r3, #44	; 0x2c
    3a56:	2008      	movs	r0, #8
    3a58:	1838      	adds	r0, r7, r0
    3a5a:	18c0      	adds	r0, r0, r3
    3a5c:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    3a5e:	220c      	movs	r2, #12
    3a60:	498c      	ldr	r1, [pc, #560]	; (3c94 <_http_client_request+0x2f8>)
    3a62:	232c      	movs	r3, #44	; 0x2c
    3a64:	2008      	movs	r0, #8
    3a66:	1838      	adds	r0, r7, r0
    3a68:	18c0      	adds	r0, r0, r3
    3a6a:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    3a6c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    3a6e:	607b      	str	r3, [r7, #4]
    3a70:	0018      	movs	r0, r3
    3a72:	47d0      	blx	sl
    3a74:	0002      	movs	r2, r0
    3a76:	6879      	ldr	r1, [r7, #4]
    3a78:	232c      	movs	r3, #44	; 0x2c
    3a7a:	2008      	movs	r0, #8
    3a7c:	1838      	adds	r0, r7, r0
    3a7e:	18c0      	adds	r0, r0, r3
    3a80:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    3a82:	2202      	movs	r2, #2
    3a84:	4984      	ldr	r1, [pc, #528]	; (3c98 <_http_client_request+0x2fc>)
    3a86:	232c      	movs	r3, #44	; 0x2c
    3a88:	2008      	movs	r0, #8
    3a8a:	1838      	adds	r0, r7, r0
    3a8c:	18c0      	adds	r0, r0, r3
    3a8e:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    3a90:	2206      	movs	r2, #6
    3a92:	4982      	ldr	r1, [pc, #520]	; (3c9c <_http_client_request+0x300>)
    3a94:	232c      	movs	r3, #44	; 0x2c
    3a96:	2008      	movs	r0, #8
    3a98:	1838      	adds	r0, r7, r0
    3a9a:	18c0      	adds	r0, r0, r3
    3a9c:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    3a9e:	1c63      	adds	r3, r4, #1
    3aa0:	607b      	str	r3, [r7, #4]
    3aa2:	0018      	movs	r0, r3
    3aa4:	47d0      	blx	sl
    3aa6:	0002      	movs	r2, r0
    3aa8:	6879      	ldr	r1, [r7, #4]
    3aaa:	232c      	movs	r3, #44	; 0x2c
    3aac:	2008      	movs	r0, #8
    3aae:	1838      	adds	r0, r7, r0
    3ab0:	18c0      	adds	r0, r0, r3
    3ab2:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    3ab4:	2202      	movs	r2, #2
    3ab6:	4978      	ldr	r1, [pc, #480]	; (3c98 <_http_client_request+0x2fc>)
    3ab8:	232c      	movs	r3, #44	; 0x2c
    3aba:	2008      	movs	r0, #8
    3abc:	1838      	adds	r0, r7, r0
    3abe:	18c0      	adds	r0, r0, r3
    3ac0:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    3ac2:	2218      	movs	r2, #24
    3ac4:	4976      	ldr	r1, [pc, #472]	; (3ca0 <_http_client_request+0x304>)
    3ac6:	232c      	movs	r3, #44	; 0x2c
    3ac8:	2008      	movs	r0, #8
    3aca:	1838      	adds	r0, r7, r0
    3acc:	18c0      	adds	r0, r0, r3
    3ace:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    3ad0:	2213      	movs	r2, #19
    3ad2:	4974      	ldr	r1, [pc, #464]	; (3ca4 <_http_client_request+0x308>)
    3ad4:	232c      	movs	r3, #44	; 0x2c
    3ad6:	2008      	movs	r0, #8
    3ad8:	1838      	adds	r0, r7, r0
    3ada:	18c0      	adds	r0, r0, r3
    3adc:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    3ade:	2217      	movs	r2, #23
    3ae0:	4971      	ldr	r1, [pc, #452]	; (3ca8 <_http_client_request+0x30c>)
    3ae2:	232c      	movs	r3, #44	; 0x2c
    3ae4:	2008      	movs	r0, #8
    3ae6:	1838      	adds	r0, r7, r0
    3ae8:	18c0      	adds	r0, r0, r3
    3aea:	47a8      	blx	r5

		if (entity->read != NULL) {
    3aec:	0023      	movs	r3, r4
    3aee:	33b0      	adds	r3, #176	; 0xb0
    3af0:	68db      	ldr	r3, [r3, #12]
    3af2:	2b00      	cmp	r3, #0
    3af4:	d07b      	beq.n	3bee <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    3af6:	23b0      	movs	r3, #176	; 0xb0
    3af8:	5ce3      	ldrb	r3, [r4, r3]
    3afa:	2b00      	cmp	r3, #0
    3afc:	d16b      	bne.n	3bd6 <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
    3afe:	0023      	movs	r3, r4
    3b00:	33b0      	adds	r3, #176	; 0xb0
    3b02:	689b      	ldr	r3, [r3, #8]
    3b04:	2b00      	cmp	r3, #0
    3b06:	d072      	beq.n	3bee <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    3b08:	0022      	movs	r2, r4
    3b0a:	32b0      	adds	r2, #176	; 0xb0
    3b0c:	6950      	ldr	r0, [r2, #20]
    3b0e:	4798      	blx	r3
    3b10:	23cc      	movs	r3, #204	; 0xcc
    3b12:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    3b14:	2800      	cmp	r0, #0
    3b16:	da00      	bge.n	3b1a <_http_client_request+0x17e>
    3b18:	e0ac      	b.n	3c74 <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    3b1a:	0002      	movs	r2, r0
    3b1c:	4963      	ldr	r1, [pc, #396]	; (3cac <_http_client_request+0x310>)
    3b1e:	2320      	movs	r3, #32
    3b20:	2008      	movs	r0, #8
    3b22:	1838      	adds	r0, r7, r0
    3b24:	18c0      	adds	r0, r0, r3
    3b26:	4b62      	ldr	r3, [pc, #392]	; (3cb0 <_http_client_request+0x314>)
    3b28:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    3b2a:	2210      	movs	r2, #16
    3b2c:	4961      	ldr	r1, [pc, #388]	; (3cb4 <_http_client_request+0x318>)
    3b2e:	232c      	movs	r3, #44	; 0x2c
    3b30:	2008      	movs	r0, #8
    3b32:	1838      	adds	r0, r7, r0
    3b34:	18c0      	adds	r0, r0, r3
    3b36:	4d55      	ldr	r5, [pc, #340]	; (3c8c <_http_client_request+0x2f0>)
    3b38:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    3b3a:	2320      	movs	r3, #32
    3b3c:	2208      	movs	r2, #8
    3b3e:	18ba      	adds	r2, r7, r2
    3b40:	18d0      	adds	r0, r2, r3
    3b42:	4b51      	ldr	r3, [pc, #324]	; (3c88 <_http_client_request+0x2ec>)
    3b44:	4798      	blx	r3
    3b46:	0002      	movs	r2, r0
    3b48:	2320      	movs	r3, #32
    3b4a:	2108      	movs	r1, #8
    3b4c:	1879      	adds	r1, r7, r1
    3b4e:	18c9      	adds	r1, r1, r3
    3b50:	330c      	adds	r3, #12
    3b52:	2008      	movs	r0, #8
    3b54:	1838      	adds	r0, r7, r0
    3b56:	18c0      	adds	r0, r0, r3
    3b58:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    3b5a:	2202      	movs	r2, #2
    3b5c:	494e      	ldr	r1, [pc, #312]	; (3c98 <_http_client_request+0x2fc>)
    3b5e:	232c      	movs	r3, #44	; 0x2c
    3b60:	2008      	movs	r0, #8
    3b62:	1838      	adds	r0, r7, r0
    3b64:	18c0      	adds	r0, r0, r3
    3b66:	47a8      	blx	r5
    3b68:	e041      	b.n	3bee <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
    3b6a:	2204      	movs	r2, #4
    3b6c:	4952      	ldr	r1, [pc, #328]	; (3cb8 <_http_client_request+0x31c>)
    3b6e:	332b      	adds	r3, #43	; 0x2b
    3b70:	2008      	movs	r0, #8
    3b72:	1838      	adds	r0, r7, r0
    3b74:	18c0      	adds	r0, r0, r3
    3b76:	4b45      	ldr	r3, [pc, #276]	; (3c8c <_http_client_request+0x2f0>)
    3b78:	4798      	blx	r3
    3b7a:	e75b      	b.n	3a34 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
    3b7c:	2205      	movs	r2, #5
    3b7e:	494f      	ldr	r1, [pc, #316]	; (3cbc <_http_client_request+0x320>)
    3b80:	332a      	adds	r3, #42	; 0x2a
    3b82:	2008      	movs	r0, #8
    3b84:	1838      	adds	r0, r7, r0
    3b86:	18c0      	adds	r0, r0, r3
    3b88:	4b40      	ldr	r3, [pc, #256]	; (3c8c <_http_client_request+0x2f0>)
    3b8a:	4798      	blx	r3
    3b8c:	e752      	b.n	3a34 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    3b8e:	2207      	movs	r2, #7
    3b90:	494b      	ldr	r1, [pc, #300]	; (3cc0 <_http_client_request+0x324>)
    3b92:	3329      	adds	r3, #41	; 0x29
    3b94:	2008      	movs	r0, #8
    3b96:	1838      	adds	r0, r7, r0
    3b98:	18c0      	adds	r0, r0, r3
    3b9a:	4b3c      	ldr	r3, [pc, #240]	; (3c8c <_http_client_request+0x2f0>)
    3b9c:	4798      	blx	r3
    3b9e:	e749      	b.n	3a34 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    3ba0:	2204      	movs	r2, #4
    3ba2:	4948      	ldr	r1, [pc, #288]	; (3cc4 <_http_client_request+0x328>)
    3ba4:	3328      	adds	r3, #40	; 0x28
    3ba6:	2008      	movs	r0, #8
    3ba8:	1838      	adds	r0, r7, r0
    3baa:	18c0      	adds	r0, r0, r3
    3bac:	4b37      	ldr	r3, [pc, #220]	; (3c8c <_http_client_request+0x2f0>)
    3bae:	4798      	blx	r3
    3bb0:	e740      	b.n	3a34 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    3bb2:	2208      	movs	r2, #8
    3bb4:	4944      	ldr	r1, [pc, #272]	; (3cc8 <_http_client_request+0x32c>)
    3bb6:	3327      	adds	r3, #39	; 0x27
    3bb8:	2008      	movs	r0, #8
    3bba:	1838      	adds	r0, r7, r0
    3bbc:	18c0      	adds	r0, r0, r3
    3bbe:	4b33      	ldr	r3, [pc, #204]	; (3c8c <_http_client_request+0x2f0>)
    3bc0:	4798      	blx	r3
    3bc2:	e737      	b.n	3a34 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    3bc4:	2205      	movs	r2, #5
    3bc6:	4941      	ldr	r1, [pc, #260]	; (3ccc <_http_client_request+0x330>)
    3bc8:	3326      	adds	r3, #38	; 0x26
    3bca:	2008      	movs	r0, #8
    3bcc:	1838      	adds	r0, r7, r0
    3bce:	18c0      	adds	r0, r0, r3
    3bd0:	4b2e      	ldr	r3, [pc, #184]	; (3c8c <_http_client_request+0x2f0>)
    3bd2:	4798      	blx	r3
    3bd4:	e72e      	b.n	3a34 <_http_client_request+0x98>
				module->req.content_length = -1;
    3bd6:	2201      	movs	r2, #1
    3bd8:	4252      	negs	r2, r2
    3bda:	23cc      	movs	r3, #204	; 0xcc
    3bdc:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    3bde:	321d      	adds	r2, #29
    3be0:	493b      	ldr	r1, [pc, #236]	; (3cd0 <_http_client_request+0x334>)
    3be2:	3ba0      	subs	r3, #160	; 0xa0
    3be4:	2008      	movs	r0, #8
    3be6:	1838      	adds	r0, r7, r0
    3be8:	18c0      	adds	r0, r0, r3
    3bea:	4b28      	ldr	r3, [pc, #160]	; (3c8c <_http_client_request+0x2f0>)
    3bec:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    3bee:	23d4      	movs	r3, #212	; 0xd4
    3bf0:	58e5      	ldr	r5, [r4, r3]
    3bf2:	2d00      	cmp	r5, #0
    3bf4:	d00a      	beq.n	3c0c <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
    3bf6:	0028      	movs	r0, r5
    3bf8:	4b23      	ldr	r3, [pc, #140]	; (3c88 <_http_client_request+0x2ec>)
    3bfa:	4798      	blx	r3
    3bfc:	0002      	movs	r2, r0
    3bfe:	0029      	movs	r1, r5
    3c00:	232c      	movs	r3, #44	; 0x2c
    3c02:	2008      	movs	r0, #8
    3c04:	1838      	adds	r0, r7, r0
    3c06:	18c0      	adds	r0, r0, r3
    3c08:	4b20      	ldr	r3, [pc, #128]	; (3c8c <_http_client_request+0x2f0>)
    3c0a:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    3c0c:	2202      	movs	r2, #2
    3c0e:	4922      	ldr	r1, [pc, #136]	; (3c98 <_http_client_request+0x2fc>)
    3c10:	232c      	movs	r3, #44	; 0x2c
    3c12:	2008      	movs	r0, #8
    3c14:	1838      	adds	r0, r7, r0
    3c16:	18c0      	adds	r0, r0, r3
    3c18:	4b1c      	ldr	r3, [pc, #112]	; (3c8c <_http_client_request+0x2f0>)
    3c1a:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    3c1c:	232c      	movs	r3, #44	; 0x2c
    3c1e:	2208      	movs	r2, #8
    3c20:	18ba      	adds	r2, r7, r2
    3c22:	18d0      	adds	r0, r2, r3
    3c24:	4b2b      	ldr	r3, [pc, #172]	; (3cd4 <_http_client_request+0x338>)
    3c26:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    3c28:	2304      	movs	r3, #4
    3c2a:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    3c2c:	23cc      	movs	r3, #204	; 0xcc
    3c2e:	58e2      	ldr	r2, [r4, r3]
    3c30:	2a00      	cmp	r2, #0
    3c32:	db51      	blt.n	3cd8 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    3c34:	dc00      	bgt.n	3c38 <_http_client_request+0x29c>
    3c36:	e0f0      	b.n	3e1a <_http_client_request+0x47e>
    3c38:	0023      	movs	r3, r4
    3c3a:	33b0      	adds	r3, #176	; 0xb0
    3c3c:	68dd      	ldr	r5, [r3, #12]
    3c3e:	2d00      	cmp	r5, #0
    3c40:	d100      	bne.n	3c44 <_http_client_request+0x2a8>
    3c42:	e0ea      	b.n	3e1a <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    3c44:	23d0      	movs	r3, #208	; 0xd0
    3c46:	58e3      	ldr	r3, [r4, r3]
    3c48:	429a      	cmp	r2, r3
    3c4a:	dd00      	ble.n	3c4e <_http_client_request+0x2b2>
    3c4c:	e0ba      	b.n	3dc4 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    3c4e:	23c0      	movs	r3, #192	; 0xc0
    3c50:	58e3      	ldr	r3, [r4, r3]
    3c52:	2b00      	cmp	r3, #0
    3c54:	d002      	beq.n	3c5c <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
    3c56:	22c4      	movs	r2, #196	; 0xc4
    3c58:	58a0      	ldr	r0, [r4, r2]
    3c5a:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    3c5c:	2302      	movs	r3, #2
    3c5e:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    3c60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    3c62:	2b00      	cmp	r3, #0
    3c64:	d100      	bne.n	3c68 <_http_client_request+0x2cc>
    3c66:	e6c0      	b.n	39ea <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    3c68:	220c      	movs	r2, #12
    3c6a:	18ba      	adds	r2, r7, r2
    3c6c:	2101      	movs	r1, #1
    3c6e:	0020      	movs	r0, r4
    3c70:	4798      	blx	r3
    3c72:	e6ba      	b.n	39ea <_http_client_request+0x4e>
					module->req.content_length = 0;
    3c74:	2200      	movs	r2, #0
    3c76:	50e2      	str	r2, [r4, r3]
    3c78:	e7b9      	b.n	3bee <_http_client_request+0x252>
    3c7a:	46c0      	nop			; (mov r8, r8)
    3c7c:	000195e8 	.word	0x000195e8
    3c80:	0000372d 	.word	0x0000372d
    3c84:	000046f9 	.word	0x000046f9
    3c88:	0001381b 	.word	0x0001381b
    3c8c:	0000474d 	.word	0x0000474d
    3c90:	0001965c 	.word	0x0001965c
    3c94:	00019668 	.word	0x00019668
    3c98:	0001bc7c 	.word	0x0001bc7c
    3c9c:	00019678 	.word	0x00019678
    3ca0:	00019680 	.word	0x00019680
    3ca4:	0001969c 	.word	0x0001969c
    3ca8:	000196b0 	.word	0x000196b0
    3cac:	000196e8 	.word	0x000196e8
    3cb0:	00013721 	.word	0x00013721
    3cb4:	000196ec 	.word	0x000196ec
    3cb8:	00019628 	.word	0x00019628
    3cbc:	00019630 	.word	0x00019630
    3cc0:	00019638 	.word	0x00019638
    3cc4:	00019640 	.word	0x00019640
    3cc8:	00019648 	.word	0x00019648
    3ccc:	00019654 	.word	0x00019654
    3cd0:	000196c8 	.word	0x000196c8
    3cd4:	00004709 	.word	0x00004709
		if (module->req.content_length < 0 && entity->read) {
    3cd8:	0023      	movs	r3, r4
    3cda:	33b0      	adds	r3, #176	; 0xb0
    3cdc:	68dd      	ldr	r5, [r3, #12]
    3cde:	2d00      	cmp	r5, #0
    3ce0:	d100      	bne.n	3ce4 <_http_client_request+0x348>
    3ce2:	e09a      	b.n	3e1a <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    3ce4:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    3ce6:	58e3      	ldr	r3, [r4, r3]
    3ce8:	6e62      	ldr	r2, [r4, #100]	; 0x64
    3cea:	3a07      	subs	r2, #7
    3cec:	1d71      	adds	r1, r6, #5
    3cee:	0020      	movs	r0, r4
    3cf0:	30b0      	adds	r0, #176	; 0xb0
    3cf2:	6940      	ldr	r0, [r0, #20]
    3cf4:	47a8      	blx	r5
    3cf6:	0005      	movs	r5, r0
    3cf8:	43c3      	mvns	r3, r0
    3cfa:	17db      	asrs	r3, r3, #31
    3cfc:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    3cfe:	220a      	movs	r2, #10
    3d00:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    3d02:	210d      	movs	r1, #13
    3d04:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    3d06:	1973      	adds	r3, r6, r5
    3d08:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    3d0a:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    3d0c:	230f      	movs	r3, #15
    3d0e:	402b      	ands	r3, r5
    3d10:	3206      	adds	r2, #6
    3d12:	3905      	subs	r1, #5
    3d14:	468c      	mov	ip, r1
    3d16:	44bc      	add	ip, r7
    3d18:	4462      	add	r2, ip
    3d1a:	5cd3      	ldrb	r3, [r2, r3]
    3d1c:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
    3d1e:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
    3d20:	2d0f      	cmp	r5, #15
    3d22:	dd0d      	ble.n	3d40 <_http_client_request+0x3a4>
				ptr = buffer + 1;
    3d24:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    3d26:	17eb      	asrs	r3, r5, #31
    3d28:	220f      	movs	r2, #15
    3d2a:	4013      	ands	r3, r2
    3d2c:	195b      	adds	r3, r3, r5
    3d2e:	111b      	asrs	r3, r3, #4
    3d30:	4013      	ands	r3, r2
    3d32:	3201      	adds	r2, #1
    3d34:	2008      	movs	r0, #8
    3d36:	4684      	mov	ip, r0
    3d38:	44bc      	add	ip, r7
    3d3a:	4462      	add	r2, ip
    3d3c:	5cd3      	ldrb	r3, [r2, r3]
    3d3e:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
    3d40:	2dff      	cmp	r5, #255	; 0xff
    3d42:	dd0d      	ble.n	3d60 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
    3d44:	17ea      	asrs	r2, r5, #31
    3d46:	23ff      	movs	r3, #255	; 0xff
    3d48:	4013      	ands	r3, r2
    3d4a:	195b      	adds	r3, r3, r5
    3d4c:	051b      	lsls	r3, r3, #20
    3d4e:	0f1b      	lsrs	r3, r3, #28
    3d50:	2210      	movs	r2, #16
    3d52:	2108      	movs	r1, #8
    3d54:	468c      	mov	ip, r1
    3d56:	44bc      	add	ip, r7
    3d58:	4462      	add	r2, ip
    3d5a:	5cd3      	ldrb	r3, [r2, r3]
    3d5c:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
    3d5e:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    3d60:	1cca      	adds	r2, r1, #3
    3d62:	1b92      	subs	r2, r2, r6
    3d64:	1d2b      	adds	r3, r5, #4
    3d66:	18d2      	adds	r2, r2, r3
    3d68:	b292      	uxth	r2, r2
    3d6a:	2000      	movs	r0, #0
    3d6c:	5620      	ldrsb	r0, [r4, r0]
    3d6e:	2300      	movs	r3, #0
    3d70:	4e30      	ldr	r6, [pc, #192]	; (3e34 <_http_client_request+0x498>)
    3d72:	47b0      	blx	r6
    3d74:	2800      	cmp	r0, #0
    3d76:	db19      	blt.n	3dac <_http_client_request+0x410>
			module->req.sent_length += size;
    3d78:	22d0      	movs	r2, #208	; 0xd0
    3d7a:	58a3      	ldr	r3, [r4, r2]
    3d7c:	195b      	adds	r3, r3, r5
    3d7e:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    3d80:	2d00      	cmp	r5, #0
    3d82:	d000      	beq.n	3d86 <_http_client_request+0x3ea>
    3d84:	e631      	b.n	39ea <_http_client_request+0x4e>
				if (module->req.entity.close) {
    3d86:	23c0      	movs	r3, #192	; 0xc0
    3d88:	58e3      	ldr	r3, [r4, r3]
    3d8a:	2b00      	cmp	r3, #0
    3d8c:	d002      	beq.n	3d94 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
    3d8e:	3a0c      	subs	r2, #12
    3d90:	58a0      	ldr	r0, [r4, r2]
    3d92:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    3d94:	2302      	movs	r3, #2
    3d96:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    3d98:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    3d9a:	2b00      	cmp	r3, #0
    3d9c:	d100      	bne.n	3da0 <_http_client_request+0x404>
    3d9e:	e624      	b.n	39ea <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    3da0:	220c      	movs	r2, #12
    3da2:	18ba      	adds	r2, r7, r2
    3da4:	2101      	movs	r1, #1
    3da6:	0020      	movs	r0, r4
    3da8:	4798      	blx	r3
    3daa:	e61e      	b.n	39ea <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
    3dac:	2105      	movs	r1, #5
    3dae:	4249      	negs	r1, r1
    3db0:	0020      	movs	r0, r4
    3db2:	4b21      	ldr	r3, [pc, #132]	; (3e38 <_http_client_request+0x49c>)
    3db4:	4798      	blx	r3
    3db6:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    3db8:	46bd      	mov	sp, r7
    3dba:	b013      	add	sp, #76	; 0x4c
    3dbc:	bc0c      	pop	{r2, r3}
    3dbe:	4692      	mov	sl, r2
    3dc0:	469b      	mov	fp, r3
    3dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    3dc4:	0022      	movs	r2, r4
    3dc6:	32b0      	adds	r2, #176	; 0xb0
    3dc8:	6950      	ldr	r0, [r2, #20]
    3dca:	6e62      	ldr	r2, [r4, #100]	; 0x64
    3dcc:	0031      	movs	r1, r6
    3dce:	47a8      	blx	r5
			if (size < 0) {
    3dd0:	2800      	cmp	r0, #0
    3dd2:	db16      	blt.n	3e02 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
    3dd4:	23cc      	movs	r3, #204	; 0xcc
    3dd6:	58e5      	ldr	r5, [r4, r3]
    3dd8:	3304      	adds	r3, #4
    3dda:	58e3      	ldr	r3, [r4, r3]
    3ddc:	1aed      	subs	r5, r5, r3
    3dde:	4285      	cmp	r5, r0
    3de0:	dd00      	ble.n	3de4 <_http_client_request+0x448>
    3de2:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    3de4:	b2aa      	uxth	r2, r5
    3de6:	2000      	movs	r0, #0
    3de8:	5620      	ldrsb	r0, [r4, r0]
    3dea:	2300      	movs	r3, #0
    3dec:	0031      	movs	r1, r6
    3dee:	4e11      	ldr	r6, [pc, #68]	; (3e34 <_http_client_request+0x498>)
    3df0:	47b0      	blx	r6
    3df2:	2800      	cmp	r0, #0
    3df4:	db0b      	blt.n	3e0e <_http_client_request+0x472>
				module->req.sent_length += size;
    3df6:	23d0      	movs	r3, #208	; 0xd0
    3df8:	58e2      	ldr	r2, [r4, r3]
    3dfa:	4694      	mov	ip, r2
    3dfc:	4465      	add	r5, ip
    3dfe:	50e5      	str	r5, [r4, r3]
    3e00:	e5f3      	b.n	39ea <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    3e02:	2105      	movs	r1, #5
    3e04:	4249      	negs	r1, r1
    3e06:	0020      	movs	r0, r4
    3e08:	4b0b      	ldr	r3, [pc, #44]	; (3e38 <_http_client_request+0x49c>)
    3e0a:	4798      	blx	r3
    3e0c:	e5ed      	b.n	39ea <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
    3e0e:	2105      	movs	r1, #5
    3e10:	4249      	negs	r1, r1
    3e12:	0020      	movs	r0, r4
    3e14:	4b08      	ldr	r3, [pc, #32]	; (3e38 <_http_client_request+0x49c>)
    3e16:	4798      	blx	r3
					return;
    3e18:	e7cd      	b.n	3db6 <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
    3e1a:	2302      	movs	r3, #2
    3e1c:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    3e1e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    3e20:	2b00      	cmp	r3, #0
    3e22:	d100      	bne.n	3e26 <_http_client_request+0x48a>
    3e24:	e5e1      	b.n	39ea <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    3e26:	220c      	movs	r2, #12
    3e28:	18ba      	adds	r2, r7, r2
    3e2a:	2101      	movs	r1, #1
    3e2c:	0020      	movs	r0, r4
    3e2e:	4798      	blx	r3
    3e30:	e5db      	b.n	39ea <_http_client_request+0x4e>
    3e32:	46c0      	nop			; (mov r8, r8)
    3e34:	0000cd15 	.word	0x0000cd15
    3e38:	00003885 	.word	0x00003885

00003e3c <http_client_send_request>:
{
    3e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e3e:	46d6      	mov	lr, sl
    3e40:	b500      	push	{lr}
    3e42:	b088      	sub	sp, #32
    3e44:	0004      	movs	r4, r0
    3e46:	000f      	movs	r7, r1
    3e48:	4692      	mov	sl, r2
    3e4a:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
    3e4c:	2800      	cmp	r0, #0
    3e4e:	d100      	bne.n	3e52 <http_client_send_request+0x16>
    3e50:	e0d3      	b.n	3ffa <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    3e52:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    3e54:	2b02      	cmp	r3, #2
    3e56:	d900      	bls.n	3e5a <http_client_send_request+0x1e>
    3e58:	e0d3      	b.n	4002 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
    3e5a:	2207      	movs	r2, #7
    3e5c:	4981      	ldr	r1, [pc, #516]	; (4064 <http_client_send_request+0x228>)
    3e5e:	0038      	movs	r0, r7
    3e60:	4b81      	ldr	r3, [pc, #516]	; (4068 <http_client_send_request+0x22c>)
    3e62:	4798      	blx	r3
		i = 7;
    3e64:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
    3e66:	2800      	cmp	r0, #0
    3e68:	d007      	beq.n	3e7a <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
    3e6a:	2208      	movs	r2, #8
    3e6c:	497f      	ldr	r1, [pc, #508]	; (406c <http_client_send_request+0x230>)
    3e6e:	0038      	movs	r0, r7
    3e70:	4b7d      	ldr	r3, [pc, #500]	; (4068 <http_client_send_request+0x22c>)
    3e72:	4798      	blx	r3
		i = 8;
    3e74:	4246      	negs	r6, r0
    3e76:	4146      	adcs	r6, r0
    3e78:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    3e7a:	1c63      	adds	r3, r4, #1
    3e7c:	19bd      	adds	r5, r7, r6
    3e7e:	9302      	str	r3, [sp, #8]
    3e80:	0018      	movs	r0, r3
    3e82:	4b7b      	ldr	r3, [pc, #492]	; (4070 <http_client_send_request+0x234>)
    3e84:	4798      	blx	r3
    3e86:	0002      	movs	r2, r0
    3e88:	0029      	movs	r1, r5
    3e8a:	9802      	ldr	r0, [sp, #8]
    3e8c:	4b76      	ldr	r3, [pc, #472]	; (4068 <http_client_send_request+0x22c>)
    3e8e:	4798      	blx	r3
    3e90:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    3e92:	782b      	ldrb	r3, [r5, #0]
    3e94:	2b00      	cmp	r3, #0
    3e96:	d052      	beq.n	3f3e <http_client_send_request+0x102>
    3e98:	2b2f      	cmp	r3, #47	; 0x2f
    3e9a:	d052      	beq.n	3f42 <http_client_send_request+0x106>
    3e9c:	1c71      	adds	r1, r6, #1
    3e9e:	1879      	adds	r1, r7, r1
    3ea0:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    3ea2:	3201      	adds	r2, #1
    3ea4:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    3ea6:	000d      	movs	r5, r1
    3ea8:	780b      	ldrb	r3, [r1, #0]
    3eaa:	2b00      	cmp	r3, #0
    3eac:	d002      	beq.n	3eb4 <http_client_send_request+0x78>
    3eae:	3101      	adds	r1, #1
    3eb0:	2b2f      	cmp	r3, #47	; 0x2f
    3eb2:	d1f6      	bne.n	3ea2 <http_client_send_request+0x66>
	module->host[j] = '\0';
    3eb4:	18a2      	adds	r2, r4, r2
    3eb6:	2300      	movs	r3, #0
    3eb8:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    3eba:	7863      	ldrb	r3, [r4, #1]
    3ebc:	2b00      	cmp	r3, #0
    3ebe:	d100      	bne.n	3ec2 <http_client_send_request+0x86>
    3ec0:	e0a3      	b.n	400a <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    3ec2:	0028      	movs	r0, r5
    3ec4:	4b6a      	ldr	r3, [pc, #424]	; (4070 <http_client_send_request+0x234>)
    3ec6:	4798      	blx	r3
    3ec8:	283f      	cmp	r0, #63	; 0x3f
    3eca:	d900      	bls.n	3ece <http_client_send_request+0x92>
    3ecc:	e0a1      	b.n	4012 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
    3ece:	23d4      	movs	r3, #212	; 0xd4
    3ed0:	58e0      	ldr	r0, [r4, r3]
    3ed2:	2800      	cmp	r0, #0
    3ed4:	d001      	beq.n	3eda <http_client_send_request+0x9e>
		free(module->req.ext_header);
    3ed6:	4b67      	ldr	r3, [pc, #412]	; (4074 <http_client_send_request+0x238>)
    3ed8:	4798      	blx	r3
	if (ext_header != NULL) {
    3eda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3edc:	2b00      	cmp	r3, #0
    3ede:	d032      	beq.n	3f46 <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
    3ee0:	0018      	movs	r0, r3
    3ee2:	4b65      	ldr	r3, [pc, #404]	; (4078 <http_client_send_request+0x23c>)
    3ee4:	4798      	blx	r3
    3ee6:	23d4      	movs	r3, #212	; 0xd4
    3ee8:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    3eea:	2800      	cmp	r0, #0
    3eec:	d100      	bne.n	3ef0 <http_client_send_request+0xb4>
    3eee:	e094      	b.n	401a <http_client_send_request+0x1de>
	module->sending = 0;
    3ef0:	2241      	movs	r2, #65	; 0x41
    3ef2:	5ca3      	ldrb	r3, [r4, r2]
    3ef4:	2101      	movs	r1, #1
    3ef6:	438b      	bics	r3, r1
    3ef8:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    3efa:	2300      	movs	r3, #0
    3efc:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    3efe:	782b      	ldrb	r3, [r5, #0]
    3f00:	2b2f      	cmp	r3, #47	; 0x2f
    3f02:	d024      	beq.n	3f4e <http_client_send_request+0x112>
		module->req.uri[0] = '/';
    3f04:	222f      	movs	r2, #47	; 0x2f
    3f06:	2370      	movs	r3, #112	; 0x70
    3f08:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    3f0a:	782b      	ldrb	r3, [r5, #0]
    3f0c:	2b00      	cmp	r3, #0
    3f0e:	d124      	bne.n	3f5a <http_client_send_request+0x11e>
	if (entity != NULL) {
    3f10:	9b03      	ldr	r3, [sp, #12]
    3f12:	2b00      	cmp	r3, #0
    3f14:	d027      	beq.n	3f66 <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    3f16:	0020      	movs	r0, r4
    3f18:	30b0      	adds	r0, #176	; 0xb0
    3f1a:	2218      	movs	r2, #24
    3f1c:	0019      	movs	r1, r3
    3f1e:	4b57      	ldr	r3, [pc, #348]	; (407c <http_client_send_request+0x240>)
    3f20:	4798      	blx	r3
	module->req.method = method;
    3f22:	23c8      	movs	r3, #200	; 0xc8
    3f24:	4652      	mov	r2, sl
    3f26:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
    3f28:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    3f2a:	2b01      	cmp	r3, #1
    3f2c:	d022      	beq.n	3f74 <http_client_send_request+0x138>
    3f2e:	2b00      	cmp	r3, #0
    3f30:	d027      	beq.n	3f82 <http_client_send_request+0x146>
    3f32:	2b02      	cmp	r3, #2
    3f34:	d03a      	beq.n	3fac <http_client_send_request+0x170>
		return -EAGAIN;
    3f36:	230b      	movs	r3, #11
    3f38:	425b      	negs	r3, r3
    3f3a:	9301      	str	r3, [sp, #4]
    3f3c:	e08d      	b.n	405a <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
    3f3e:	2200      	movs	r2, #0
    3f40:	e7b8      	b.n	3eb4 <http_client_send_request+0x78>
    3f42:	2200      	movs	r2, #0
    3f44:	e7b6      	b.n	3eb4 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
    3f46:	2200      	movs	r2, #0
    3f48:	23d4      	movs	r3, #212	; 0xd4
    3f4a:	50e2      	str	r2, [r4, r3]
    3f4c:	e7d0      	b.n	3ef0 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
    3f4e:	0020      	movs	r0, r4
    3f50:	3070      	adds	r0, #112	; 0x70
    3f52:	0029      	movs	r1, r5
    3f54:	4b4a      	ldr	r3, [pc, #296]	; (4080 <http_client_send_request+0x244>)
    3f56:	4798      	blx	r3
    3f58:	e7da      	b.n	3f10 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
    3f5a:	0029      	movs	r1, r5
    3f5c:	0020      	movs	r0, r4
    3f5e:	3071      	adds	r0, #113	; 0x71
    3f60:	4b47      	ldr	r3, [pc, #284]	; (4080 <http_client_send_request+0x244>)
    3f62:	4798      	blx	r3
    3f64:	e7d4      	b.n	3f10 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    3f66:	0020      	movs	r0, r4
    3f68:	30b0      	adds	r0, #176	; 0xb0
    3f6a:	2218      	movs	r2, #24
    3f6c:	2100      	movs	r1, #0
    3f6e:	4b45      	ldr	r3, [pc, #276]	; (4084 <http_client_send_request+0x248>)
    3f70:	4798      	blx	r3
    3f72:	e7d6      	b.n	3f22 <http_client_send_request+0xe6>
		if (!reconnect) {
    3f74:	9b01      	ldr	r3, [sp, #4]
    3f76:	2b00      	cmp	r3, #0
    3f78:	d06f      	beq.n	405a <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
    3f7a:	2100      	movs	r1, #0
    3f7c:	0020      	movs	r0, r4
    3f7e:	4b42      	ldr	r3, [pc, #264]	; (4088 <http_client_send_request+0x24c>)
    3f80:	4798      	blx	r3
		if (module->config.tls) {
    3f82:	2352      	movs	r3, #82	; 0x52
    3f84:	5ce2      	ldrb	r2, [r4, r3]
    3f86:	1e53      	subs	r3, r2, #1
    3f88:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    3f8a:	b2d2      	uxtb	r2, r2
    3f8c:	2101      	movs	r1, #1
    3f8e:	2002      	movs	r0, #2
    3f90:	4b3e      	ldr	r3, [pc, #248]	; (408c <http_client_send_request+0x250>)
    3f92:	4798      	blx	r3
    3f94:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    3f96:	2800      	cmp	r0, #0
    3f98:	db43      	blt.n	4022 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
    3f9a:	0080      	lsls	r0, r0, #2
    3f9c:	4b3c      	ldr	r3, [pc, #240]	; (4090 <http_client_send_request+0x254>)
    3f9e:	50c4      	str	r4, [r0, r3]
    3fa0:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
    3fa2:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    3fa4:	2620      	movs	r6, #32
			isv6 = 1;
    3fa6:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
    3fa8:	2730      	movs	r7, #48	; 0x30
    3faa:	e00c      	b.n	3fc6 <http_client_send_request+0x18a>
		if (!reconnect) {
    3fac:	9b01      	ldr	r3, [sp, #4]
    3fae:	2b00      	cmp	r3, #0
    3fb0:	d1e3      	bne.n	3f7a <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
    3fb2:	3303      	adds	r3, #3
    3fb4:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
    3fb6:	0020      	movs	r0, r4
    3fb8:	4b36      	ldr	r3, [pc, #216]	; (4094 <http_client_send_request+0x258>)
    3fba:	4798      	blx	r3
			break;
    3fbc:	e04d      	b.n	405a <http_client_send_request+0x21e>
			if (isv6) {
    3fbe:	2900      	cmp	r1, #0
    3fc0:	d001      	beq.n	3fc6 <http_client_send_request+0x18a>
    3fc2:	e012      	b.n	3fea <http_client_send_request+0x1ae>
			isv6 = 1;
    3fc4:	0001      	movs	r1, r0
	while (*host != '\0') {
    3fc6:	782a      	ldrb	r2, [r5, #0]
    3fc8:	2a00      	cmp	r2, #0
    3fca:	d02e      	beq.n	402a <http_client_send_request+0x1ee>
		ch = *host++;
    3fcc:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    3fce:	0013      	movs	r3, r2
    3fd0:	43b3      	bics	r3, r6
    3fd2:	3b41      	subs	r3, #65	; 0x41
    3fd4:	2b05      	cmp	r3, #5
    3fd6:	d9f5      	bls.n	3fc4 <http_client_send_request+0x188>
    3fd8:	2a3a      	cmp	r2, #58	; 0x3a
    3fda:	d00a      	beq.n	3ff2 <http_client_send_request+0x1b6>
    3fdc:	2a2f      	cmp	r2, #47	; 0x2f
    3fde:	d00a      	beq.n	3ff6 <http_client_send_request+0x1ba>
		} else if (ch == '.') {
    3fe0:	2a2e      	cmp	r2, #46	; 0x2e
    3fe2:	d0ec      	beq.n	3fbe <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
    3fe4:	403a      	ands	r2, r7
    3fe6:	2a30      	cmp	r2, #48	; 0x30
    3fe8:	d0ed      	beq.n	3fc6 <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
    3fea:	9802      	ldr	r0, [sp, #8]
    3fec:	4b2a      	ldr	r3, [pc, #168]	; (4098 <http_client_send_request+0x25c>)
    3fee:	4798      	blx	r3
    3ff0:	e02f      	b.n	4052 <http_client_send_request+0x216>
			isv6 = 1;
    3ff2:	0001      	movs	r1, r0
    3ff4:	e7e7      	b.n	3fc6 <http_client_send_request+0x18a>
    3ff6:	0001      	movs	r1, r0
    3ff8:	e7e5      	b.n	3fc6 <http_client_send_request+0x18a>
		return -EINVAL;
    3ffa:	2316      	movs	r3, #22
    3ffc:	425b      	negs	r3, r3
    3ffe:	9301      	str	r3, [sp, #4]
    4000:	e02b      	b.n	405a <http_client_send_request+0x21e>
		return -EBUSY;
    4002:	2310      	movs	r3, #16
    4004:	425b      	negs	r3, r3
    4006:	9301      	str	r3, [sp, #4]
    4008:	e027      	b.n	405a <http_client_send_request+0x21e>
		return -EINVAL;
    400a:	2316      	movs	r3, #22
    400c:	425b      	negs	r3, r3
    400e:	9301      	str	r3, [sp, #4]
    4010:	e023      	b.n	405a <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
    4012:	235b      	movs	r3, #91	; 0x5b
    4014:	425b      	negs	r3, r3
    4016:	9301      	str	r3, [sp, #4]
    4018:	e01f      	b.n	405a <http_client_send_request+0x21e>
			return -ENOMEM;
    401a:	230c      	movs	r3, #12
    401c:	425b      	negs	r3, r3
    401e:	9301      	str	r3, [sp, #4]
    4020:	e01b      	b.n	405a <http_client_send_request+0x21e>
			return -ENOSPC;
    4022:	231c      	movs	r3, #28
    4024:	425b      	negs	r3, r3
    4026:	9301      	str	r3, [sp, #4]
    4028:	e017      	b.n	405a <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
    402a:	2302      	movs	r3, #2
    402c:	aa04      	add	r2, sp, #16
    402e:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    4030:	334e      	adds	r3, #78	; 0x4e
    4032:	5ae3      	ldrh	r3, [r4, r3]
    4034:	021a      	lsls	r2, r3, #8
    4036:	0a1b      	lsrs	r3, r3, #8
    4038:	4313      	orrs	r3, r2
    403a:	aa04      	add	r2, sp, #16
    403c:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    403e:	9802      	ldr	r0, [sp, #8]
    4040:	4b16      	ldr	r3, [pc, #88]	; (409c <http_client_send_request+0x260>)
    4042:	4798      	blx	r3
    4044:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    4046:	2000      	movs	r0, #0
    4048:	5620      	ldrsb	r0, [r4, r0]
    404a:	2210      	movs	r2, #16
    404c:	a904      	add	r1, sp, #16
    404e:	4b14      	ldr	r3, [pc, #80]	; (40a0 <http_client_send_request+0x264>)
    4050:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    4052:	2301      	movs	r3, #1
    4054:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
    4056:	2300      	movs	r3, #0
    4058:	9301      	str	r3, [sp, #4]
}
    405a:	9801      	ldr	r0, [sp, #4]
    405c:	b008      	add	sp, #32
    405e:	bc04      	pop	{r2}
    4060:	4692      	mov	sl, r2
    4062:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4064:	0001970c 	.word	0x0001970c
    4068:	00013829 	.word	0x00013829
    406c:	00019714 	.word	0x00019714
    4070:	0001381b 	.word	0x0001381b
    4074:	00012b39 	.word	0x00012b39
    4078:	000137e1 	.word	0x000137e1
    407c:	00012b4d 	.word	0x00012b4d
    4080:	000137cf 	.word	0x000137cf
    4084:	00012b83 	.word	0x00012b83
    4088:	00003885 	.word	0x00003885
    408c:	0000cb05 	.word	0x0000cb05
    4090:	20000bc4 	.word	0x20000bc4
    4094:	0000399d 	.word	0x0000399d
    4098:	0000cf45 	.word	0x0000cf45
    409c:	0000ced9 	.word	0x0000ced9
    40a0:	0000cc85 	.word	0x0000cc85

000040a4 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    40a4:	b510      	push	{r4, lr}
	if (module == NULL) {
    40a6:	2800      	cmp	r0, #0
    40a8:	d00d      	beq.n	40c6 <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    40aa:	6c41      	ldr	r1, [r0, #68]	; 0x44
    40ac:	6e02      	ldr	r2, [r0, #96]	; 0x60
    40ae:	4291      	cmp	r1, r2
    40b0:	d20a      	bcs.n	40c8 <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    40b2:	1a52      	subs	r2, r2, r1
    40b4:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
    40b6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    40b8:	469c      	mov	ip, r3
    40ba:	4461      	add	r1, ip
	recv(module->sock,
    40bc:	7800      	ldrb	r0, [r0, #0]
    40be:	b240      	sxtb	r0, r0
    40c0:	2300      	movs	r3, #0
    40c2:	4c04      	ldr	r4, [pc, #16]	; (40d4 <_http_client_recv_packet+0x30>)
    40c4:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
    40c6:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
    40c8:	218b      	movs	r1, #139	; 0x8b
    40ca:	4249      	negs	r1, r1
    40cc:	4b02      	ldr	r3, [pc, #8]	; (40d8 <_http_client_recv_packet+0x34>)
    40ce:	4798      	blx	r3
		return;
    40d0:	e7f9      	b.n	40c6 <_http_client_recv_packet+0x22>
    40d2:	46c0      	nop			; (mov r8, r8)
    40d4:	0000cdad 	.word	0x0000cdad
    40d8:	00003885 	.word	0x00003885

000040dc <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    40dc:	b570      	push	{r4, r5, r6, lr}
    40de:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
    40e0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    40e2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    40e4:	1a5c      	subs	r4, r3, r1
    40e6:	1904      	adds	r4, r0, r4

	if (remain > 0) {
    40e8:	2c00      	cmp	r4, #0
    40ea:	dc02      	bgt.n	40f2 <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
    40ec:	2300      	movs	r3, #0
    40ee:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
    40f0:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
    40f2:	0022      	movs	r2, r4
    40f4:	4b01      	ldr	r3, [pc, #4]	; (40fc <_http_client_move_buffer+0x20>)
    40f6:	4798      	blx	r3
		module->recved_size = remain;
    40f8:	646c      	str	r4, [r5, #68]	; 0x44
    40fa:	e7f9      	b.n	40f0 <_http_client_move_buffer+0x14>
    40fc:	00012b5f 	.word	0x00012b5f

00004100 <_http_client_handle_header>:
{
    4100:	b5f0      	push	{r4, r5, r6, r7, lr}
    4102:	46ce      	mov	lr, r9
    4104:	b500      	push	{lr}
    4106:	b084      	sub	sp, #16
    4108:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
    410a:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
    410c:	4b62      	ldr	r3, [pc, #392]	; (4298 <_http_client_handle_header+0x198>)
    410e:	4699      	mov	r9, r3
    4110:	e049      	b.n	41a6 <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
    4112:	0021      	movs	r1, r4
    4114:	0038      	movs	r0, r7
    4116:	4b61      	ldr	r3, [pc, #388]	; (429c <_http_client_handle_header+0x19c>)
    4118:	4798      	blx	r3
			return 0;
    411a:	2600      	movs	r6, #0
}
    411c:	0030      	movs	r0, r6
    411e:	b004      	add	sp, #16
    4120:	bc04      	pop	{r2}
    4122:	4691      	mov	r9, r2
    4124:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
    4126:	1ca1      	adds	r1, r4, #2
    4128:	0038      	movs	r0, r7
    412a:	4b5c      	ldr	r3, [pc, #368]	; (429c <_http_client_handle_header+0x19c>)
    412c:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
    412e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4130:	2b00      	cmp	r3, #0
    4132:	d00a      	beq.n	414a <_http_client_handle_header+0x4a>
    4134:	22e4      	movs	r2, #228	; 0xe4
    4136:	5ab9      	ldrh	r1, [r7, r2]
    4138:	2900      	cmp	r1, #0
    413a:	d006      	beq.n	414a <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
    413c:	3a08      	subs	r2, #8
    413e:	58b8      	ldr	r0, [r7, r2]
    4140:	2800      	cmp	r0, #0
    4142:	db07      	blt.n	4154 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    4144:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4146:	4290      	cmp	r0, r2
    4148:	dc10      	bgt.n	416c <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
    414a:	2201      	movs	r2, #1
    414c:	23d8      	movs	r3, #216	; 0xd8
    414e:	50fa      	str	r2, [r7, r3]
			return 1;
    4150:	2601      	movs	r6, #1
    4152:	e7e3      	b.n	411c <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
    4154:	aa01      	add	r2, sp, #4
    4156:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    4158:	2101      	movs	r1, #1
    415a:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    415c:	2100      	movs	r1, #0
    415e:	20e0      	movs	r0, #224	; 0xe0
    4160:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    4162:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    4164:	3102      	adds	r1, #2
    4166:	0038      	movs	r0, r7
    4168:	4798      	blx	r3
    416a:	e7ee      	b.n	414a <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
    416c:	aa01      	add	r2, sp, #4
    416e:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    4170:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    4172:	2100      	movs	r1, #0
    4174:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    4176:	20e0      	movs	r0, #224	; 0xe0
    4178:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    417a:	3102      	adds	r1, #2
    417c:	0038      	movs	r0, r7
    417e:	4798      	blx	r3
    4180:	e7e3      	b.n	414a <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    4182:	0020      	movs	r0, r4
    4184:	3010      	adds	r0, #16
    4186:	4b46      	ldr	r3, [pc, #280]	; (42a0 <_http_client_handle_header+0x1a0>)
    4188:	4798      	blx	r3
    418a:	23dc      	movs	r3, #220	; 0xdc
    418c:	50f8      	str	r0, [r7, r3]
    418e:	e009      	b.n	41a4 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    4190:	3201      	adds	r2, #1
    4192:	4295      	cmp	r5, r2
    4194:	d006      	beq.n	41a4 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    4196:	7813      	ldrb	r3, [r2, #0]
    4198:	2b20      	cmp	r3, #32
    419a:	d12b      	bne.n	41f4 <_http_client_handle_header+0xf4>
    419c:	e7f8      	b.n	4190 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
    419e:	3a21      	subs	r2, #33	; 0x21
    41a0:	3389      	adds	r3, #137	; 0x89
    41a2:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
    41a4:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
    41a6:	493f      	ldr	r1, [pc, #252]	; (42a4 <_http_client_handle_header+0x1a4>)
    41a8:	0020      	movs	r0, r4
    41aa:	47c8      	blx	r9
    41ac:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    41ae:	d0b0      	beq.n	4112 <_http_client_handle_header+0x12>
    41b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    41b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    41b4:	4694      	mov	ip, r2
    41b6:	4463      	add	r3, ip
    41b8:	4298      	cmp	r0, r3
    41ba:	d2aa      	bcs.n	4112 <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
    41bc:	2202      	movs	r2, #2
    41be:	4939      	ldr	r1, [pc, #228]	; (42a4 <_http_client_handle_header+0x1a4>)
    41c0:	0020      	movs	r0, r4
    41c2:	4b39      	ldr	r3, [pc, #228]	; (42a8 <_http_client_handle_header+0x1a8>)
    41c4:	4798      	blx	r3
    41c6:	2800      	cmp	r0, #0
    41c8:	d0ad      	beq.n	4126 <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    41ca:	2210      	movs	r2, #16
    41cc:	4937      	ldr	r1, [pc, #220]	; (42ac <_http_client_handle_header+0x1ac>)
    41ce:	0020      	movs	r0, r4
    41d0:	4b35      	ldr	r3, [pc, #212]	; (42a8 <_http_client_handle_header+0x1a8>)
    41d2:	4798      	blx	r3
    41d4:	2800      	cmp	r0, #0
    41d6:	d0d4      	beq.n	4182 <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    41d8:	2213      	movs	r2, #19
    41da:	4935      	ldr	r1, [pc, #212]	; (42b0 <_http_client_handle_header+0x1b0>)
    41dc:	0020      	movs	r0, r4
    41de:	4b32      	ldr	r3, [pc, #200]	; (42a8 <_http_client_handle_header+0x1a8>)
    41e0:	4798      	blx	r3
    41e2:	1e06      	subs	r6, r0, #0
    41e4:	d110      	bne.n	4208 <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    41e6:	0022      	movs	r2, r4
    41e8:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    41ea:	4295      	cmp	r5, r2
    41ec:	d9da      	bls.n	41a4 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    41ee:	7ce3      	ldrb	r3, [r4, #19]
    41f0:	2b20      	cmp	r3, #32
    41f2:	d0cd      	beq.n	4190 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    41f4:	2220      	movs	r2, #32
    41f6:	4393      	bics	r3, r2
    41f8:	2b43      	cmp	r3, #67	; 0x43
    41fa:	d0d0      	beq.n	419e <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
    41fc:	2186      	movs	r1, #134	; 0x86
    41fe:	4249      	negs	r1, r1
    4200:	0038      	movs	r0, r7
    4202:	4b2c      	ldr	r3, [pc, #176]	; (42b4 <_http_client_handle_header+0x1b4>)
    4204:	4798      	blx	r3
					return 0;
    4206:	e789      	b.n	411c <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    4208:	220c      	movs	r2, #12
    420a:	492b      	ldr	r1, [pc, #172]	; (42b8 <_http_client_handle_header+0x1b8>)
    420c:	0020      	movs	r0, r4
    420e:	4b26      	ldr	r3, [pc, #152]	; (42a8 <_http_client_handle_header+0x1a8>)
    4210:	4798      	blx	r3
    4212:	2800      	cmp	r0, #0
    4214:	d11d      	bne.n	4252 <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
    4216:	0022      	movs	r2, r4
    4218:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    421a:	4295      	cmp	r5, r2
    421c:	d9c2      	bls.n	41a4 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    421e:	7b23      	ldrb	r3, [r4, #12]
    4220:	2b20      	cmp	r3, #32
    4222:	d009      	beq.n	4238 <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    4224:	2220      	movs	r2, #32
    4226:	4393      	bics	r3, r2
    4228:	2b4b      	cmp	r3, #75	; 0x4b
    422a:	d00c      	beq.n	4246 <_http_client_handle_header+0x146>
					module->permanent = 0;
    422c:	2241      	movs	r2, #65	; 0x41
    422e:	5cbb      	ldrb	r3, [r7, r2]
    4230:	2102      	movs	r1, #2
    4232:	438b      	bics	r3, r1
    4234:	54bb      	strb	r3, [r7, r2]
    4236:	e7b5      	b.n	41a4 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    4238:	3201      	adds	r2, #1
    423a:	4295      	cmp	r5, r2
    423c:	d0b2      	beq.n	41a4 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    423e:	7813      	ldrb	r3, [r2, #0]
    4240:	2b20      	cmp	r3, #32
    4242:	d1ef      	bne.n	4224 <_http_client_handle_header+0x124>
    4244:	e7f8      	b.n	4238 <_http_client_handle_header+0x138>
					module->permanent = 1;
    4246:	3221      	adds	r2, #33	; 0x21
    4248:	5cbb      	ldrb	r3, [r7, r2]
    424a:	2102      	movs	r1, #2
    424c:	430b      	orrs	r3, r1
    424e:	54bb      	strb	r3, [r7, r2]
    4250:	e7a8      	b.n	41a4 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    4252:	2205      	movs	r2, #5
    4254:	4919      	ldr	r1, [pc, #100]	; (42bc <_http_client_handle_header+0x1bc>)
    4256:	0020      	movs	r0, r4
    4258:	4b13      	ldr	r3, [pc, #76]	; (42a8 <_http_client_handle_header+0x1a8>)
    425a:	4798      	blx	r3
    425c:	2800      	cmp	r0, #0
    425e:	d1a1      	bne.n	41a4 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    4260:	0020      	movs	r0, r4
    4262:	3009      	adds	r0, #9
    4264:	4b0e      	ldr	r3, [pc, #56]	; (42a0 <_http_client_handle_header+0x1a0>)
    4266:	4798      	blx	r3
    4268:	23e4      	movs	r3, #228	; 0xe4
    426a:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
    426c:	2200      	movs	r2, #0
    426e:	3b08      	subs	r3, #8
    4270:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
    4272:	7963      	ldrb	r3, [r4, #5]
    4274:	2b31      	cmp	r3, #49	; 0x31
    4276:	d802      	bhi.n	427e <_http_client_handle_header+0x17e>
    4278:	79e3      	ldrb	r3, [r4, #7]
    427a:	2b30      	cmp	r3, #48	; 0x30
    427c:	d905      	bls.n	428a <_http_client_handle_header+0x18a>
				module->permanent = 1;
    427e:	2241      	movs	r2, #65	; 0x41
    4280:	5cbb      	ldrb	r3, [r7, r2]
    4282:	2102      	movs	r1, #2
    4284:	430b      	orrs	r3, r1
    4286:	54bb      	strb	r3, [r7, r2]
    4288:	e78c      	b.n	41a4 <_http_client_handle_header+0xa4>
				module->permanent = 0;
    428a:	2241      	movs	r2, #65	; 0x41
    428c:	5cbb      	ldrb	r3, [r7, r2]
    428e:	2102      	movs	r1, #2
    4290:	438b      	bics	r3, r1
    4292:	54bb      	strb	r3, [r7, r2]
    4294:	e786      	b.n	41a4 <_http_client_handle_header+0xa4>
    4296:	46c0      	nop			; (mov r8, r8)
    4298:	00013899 	.word	0x00013899
    429c:	000040dd 	.word	0x000040dd
    42a0:	00012ad1 	.word	0x00012ad1
    42a4:	0001bc7c 	.word	0x0001bc7c
    42a8:	00013829 	.word	0x00013829
    42ac:	000196ec 	.word	0x000196ec
    42b0:	000195fc 	.word	0x000195fc
    42b4:	00003885 	.word	0x00003885
    42b8:	00019610 	.word	0x00019610
    42bc:	00019620 	.word	0x00019620

000042c0 <_http_client_handle_entity>:
{
    42c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    42c2:	46ce      	mov	lr, r9
    42c4:	b500      	push	{lr}
    42c6:	b086      	sub	sp, #24
    42c8:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
    42ca:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    42cc:	23dc      	movs	r3, #220	; 0xdc
    42ce:	58c3      	ldr	r3, [r0, r3]
    42d0:	2b00      	cmp	r3, #0
    42d2:	db69      	blt.n	43a8 <_http_client_handle_entity+0xe8>
    42d4:	6e02      	ldr	r2, [r0, #96]	; 0x60
    42d6:	4293      	cmp	r3, r2
    42d8:	dc2b      	bgt.n	4332 <_http_client_handle_entity+0x72>
	return 0;
    42da:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
    42dc:	6c62      	ldr	r2, [r4, #68]	; 0x44
    42de:	4293      	cmp	r3, r2
    42e0:	dc4e      	bgt.n	4380 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
    42e2:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    42e4:	2e00      	cmp	r6, #0
    42e6:	d003      	beq.n	42f0 <_http_client_handle_entity+0x30>
    42e8:	22e4      	movs	r2, #228	; 0xe4
    42ea:	5aa1      	ldrh	r1, [r4, r2]
    42ec:	2900      	cmp	r1, #0
    42ee:	d10e      	bne.n	430e <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
    42f0:	2300      	movs	r3, #0
    42f2:	22d8      	movs	r2, #216	; 0xd8
    42f4:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    42f6:	320c      	adds	r2, #12
    42f8:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
    42fa:	3341      	adds	r3, #65	; 0x41
    42fc:	5ce3      	ldrb	r3, [r4, r3]
    42fe:	079b      	lsls	r3, r3, #30
    4300:	d40f      	bmi.n	4322 <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
    4302:	2100      	movs	r1, #0
    4304:	0020      	movs	r0, r4
    4306:	4b71      	ldr	r3, [pc, #452]	; (44cc <_http_client_handle_entity+0x20c>)
    4308:	4798      	blx	r3
	return 0;
    430a:	2000      	movs	r0, #0
    430c:	e038      	b.n	4380 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
    430e:	aa03      	add	r2, sp, #12
    4310:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    4312:	2100      	movs	r1, #0
    4314:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    4316:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    4318:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    431a:	3102      	adds	r1, #2
    431c:	0020      	movs	r0, r4
    431e:	47b0      	blx	r6
    4320:	e7e6      	b.n	42f0 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    4322:	23dc      	movs	r3, #220	; 0xdc
    4324:	58e1      	ldr	r1, [r4, r3]
    4326:	1869      	adds	r1, r5, r1
    4328:	0020      	movs	r0, r4
    432a:	4b69      	ldr	r3, [pc, #420]	; (44d0 <_http_client_handle_entity+0x210>)
    432c:	4798      	blx	r3
				return module->recved_size;
    432e:	6c60      	ldr	r0, [r4, #68]	; 0x44
    4330:	e026      	b.n	4380 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
    4332:	6c42      	ldr	r2, [r0, #68]	; 0x44
    4334:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
    4336:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
    4338:	21e0      	movs	r1, #224	; 0xe0
    433a:	5840      	ldr	r0, [r0, r1]
    433c:	4684      	mov	ip, r0
    433e:	4462      	add	r2, ip
    4340:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    4342:	4293      	cmp	r3, r2
    4344:	dc20      	bgt.n	4388 <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
    4346:	2300      	movs	r3, #0
    4348:	22d8      	movs	r2, #216	; 0xd8
    434a:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    434c:	320c      	adds	r2, #12
    434e:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    4350:	3ae3      	subs	r2, #227	; 0xe3
    4352:	ab03      	add	r3, sp, #12
    4354:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    4356:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    4358:	2b00      	cmp	r3, #0
    435a:	d007      	beq.n	436c <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    435c:	ae03      	add	r6, sp, #12
    435e:	0032      	movs	r2, r6
    4360:	2103      	movs	r1, #3
    4362:	0020      	movs	r0, r4
    4364:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
    4366:	7a33      	ldrb	r3, [r6, #8]
    4368:	2b01      	cmp	r3, #1
    436a:	d103      	bne.n	4374 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
    436c:	2341      	movs	r3, #65	; 0x41
    436e:	5ce3      	ldrb	r3, [r4, r3]
    4370:	079b      	lsls	r3, r3, #30
    4372:	d510      	bpl.n	4396 <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
    4374:	6c63      	ldr	r3, [r4, #68]	; 0x44
    4376:	18e9      	adds	r1, r5, r3
    4378:	0020      	movs	r0, r4
    437a:	4b55      	ldr	r3, [pc, #340]	; (44d0 <_http_client_handle_entity+0x210>)
    437c:	4798      	blx	r3
	return 0;
    437e:	2000      	movs	r0, #0
}
    4380:	b006      	add	sp, #24
    4382:	bc04      	pop	{r2}
    4384:	4691      	mov	r9, r2
    4386:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
    4388:	2200      	movs	r2, #0
    438a:	ab03      	add	r3, sp, #12
    438c:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    438e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    4390:	2b00      	cmp	r3, #0
    4392:	d0ef      	beq.n	4374 <_http_client_handle_entity+0xb4>
    4394:	e7e2      	b.n	435c <_http_client_handle_entity+0x9c>
					printf("1\r\n");
    4396:	484f      	ldr	r0, [pc, #316]	; (44d4 <_http_client_handle_entity+0x214>)
    4398:	4b4f      	ldr	r3, [pc, #316]	; (44d8 <_http_client_handle_entity+0x218>)
    439a:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    439c:	2100      	movs	r1, #0
    439e:	0020      	movs	r0, r4
    43a0:	4b4a      	ldr	r3, [pc, #296]	; (44cc <_http_client_handle_entity+0x20c>)
    43a2:	4798      	blx	r3
					return 0;
    43a4:	2000      	movs	r0, #0
    43a6:	e7eb      	b.n	4380 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
    43a8:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
    43aa:	2300      	movs	r3, #0
    43ac:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
    43ae:	26e0      	movs	r6, #224	; 0xe0
    43b0:	e00a      	b.n	43c8 <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
    43b2:	2341      	movs	r3, #65	; 0x41
    43b4:	5ce3      	ldrb	r3, [r4, r3]
    43b6:	079b      	lsls	r3, r3, #30
    43b8:	d51b      	bpl.n	43f2 <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
    43ba:	1ca9      	adds	r1, r5, #2
    43bc:	0020      	movs	r0, r4
    43be:	4b44      	ldr	r3, [pc, #272]	; (44d0 <_http_client_handle_entity+0x210>)
    43c0:	4798      	blx	r3
	} while(module->recved_size > 0);
    43c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    43c4:	2b00      	cmp	r3, #0
    43c6:	d073      	beq.n	44b0 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
    43c8:	59a3      	ldr	r3, [r4, r6]
    43ca:	2b00      	cmp	r3, #0
    43cc:	db30      	blt.n	4430 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
    43ce:	d116      	bne.n	43fe <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
    43d0:	22d8      	movs	r2, #216	; 0xd8
    43d2:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    43d4:	320c      	adds	r2, #12
    43d6:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    43d8:	3ae3      	subs	r2, #227	; 0xe3
    43da:	4669      	mov	r1, sp
    43dc:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
    43de:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
    43e0:	9301      	str	r3, [sp, #4]
				if (module->cb) {
    43e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    43e4:	2b00      	cmp	r3, #0
    43e6:	d0e4      	beq.n	43b2 <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    43e8:	466a      	mov	r2, sp
    43ea:	2103      	movs	r1, #3
    43ec:	0020      	movs	r0, r4
    43ee:	4798      	blx	r3
    43f0:	e7df      	b.n	43b2 <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
    43f2:	2100      	movs	r1, #0
    43f4:	0020      	movs	r0, r4
    43f6:	4b35      	ldr	r3, [pc, #212]	; (44cc <_http_client_handle_entity+0x20c>)
    43f8:	4798      	blx	r3
	return 0;
    43fa:	2000      	movs	r0, #0
    43fc:	e7c0      	b.n	4380 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
    43fe:	42bb      	cmp	r3, r7
    4400:	dcdf      	bgt.n	43c2 <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
    4402:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
    4404:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
    4406:	2300      	movs	r3, #0
    4408:	466a      	mov	r2, sp
    440a:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    440c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    440e:	2b00      	cmp	r3, #0
    4410:	d002      	beq.n	4418 <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    4412:	2103      	movs	r1, #3
    4414:	0020      	movs	r0, r4
    4416:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    4418:	59a3      	ldr	r3, [r4, r6]
    441a:	1c99      	adds	r1, r3, #2
    441c:	1869      	adds	r1, r5, r1
    441e:	0020      	movs	r0, r4
    4420:	4b2b      	ldr	r3, [pc, #172]	; (44d0 <_http_client_handle_entity+0x210>)
    4422:	4798      	blx	r3
				length = (int)module->recved_size;
    4424:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
    4426:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
    4428:	2301      	movs	r3, #1
    442a:	425b      	negs	r3, r3
    442c:	51a3      	str	r3, [r4, r6]
    442e:	e7c8      	b.n	43c2 <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
    4430:	2300      	movs	r3, #0
    4432:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    4434:	2f00      	cmp	r7, #0
    4436:	dd04      	ble.n	4442 <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
    4438:	782b      	ldrb	r3, [r5, #0]
    443a:	2b0a      	cmp	r3, #10
    443c:	d11c      	bne.n	4478 <_http_client_handle_entity+0x1b8>
					buffer++;
    443e:	3501      	adds	r5, #1
					length--;
    4440:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    4442:	59a3      	ldr	r3, [r4, r6]
    4444:	6e22      	ldr	r2, [r4, #96]	; 0x60
    4446:	4293      	cmp	r3, r2
    4448:	dc39      	bgt.n	44be <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
    444a:	2f00      	cmp	r7, #0
    444c:	d1b9      	bne.n	43c2 <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
    444e:	2201      	movs	r2, #1
    4450:	4252      	negs	r2, r2
    4452:	23e0      	movs	r3, #224	; 0xe0
    4454:	50e2      	str	r2, [r4, r3]
    4456:	e7d0      	b.n	43fa <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    4458:	001a      	movs	r2, r3
    445a:	3a61      	subs	r2, #97	; 0x61
    445c:	2a05      	cmp	r2, #5
    445e:	d818      	bhi.n	4492 <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    4460:	59a2      	ldr	r2, [r4, r6]
    4462:	0112      	lsls	r2, r2, #4
    4464:	18d3      	adds	r3, r2, r3
    4466:	3b61      	subs	r3, #97	; 0x61
    4468:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    446a:	3501      	adds	r5, #1
    446c:	3f01      	subs	r7, #1
    446e:	2f00      	cmp	r7, #0
    4470:	d020      	beq.n	44b4 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
    4472:	782b      	ldrb	r3, [r5, #0]
    4474:	2b0a      	cmp	r3, #10
    4476:	d0e2      	beq.n	443e <_http_client_handle_entity+0x17e>
				if (extension != 0) {
    4478:	464a      	mov	r2, r9
    447a:	2a00      	cmp	r2, #0
    447c:	d1f5      	bne.n	446a <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
    447e:	001a      	movs	r2, r3
    4480:	3a30      	subs	r2, #48	; 0x30
    4482:	2a09      	cmp	r2, #9
    4484:	d8e8      	bhi.n	4458 <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    4486:	59a2      	ldr	r2, [r4, r6]
    4488:	0112      	lsls	r2, r2, #4
    448a:	18d3      	adds	r3, r2, r3
    448c:	3b30      	subs	r3, #48	; 0x30
    448e:	51a3      	str	r3, [r4, r6]
    4490:	e7eb      	b.n	446a <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    4492:	001a      	movs	r2, r3
    4494:	3a41      	subs	r2, #65	; 0x41
    4496:	2a05      	cmp	r2, #5
    4498:	d805      	bhi.n	44a6 <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    449a:	59a2      	ldr	r2, [r4, r6]
    449c:	0112      	lsls	r2, r2, #4
    449e:	18d3      	adds	r3, r2, r3
    44a0:	3b41      	subs	r3, #65	; 0x41
    44a2:	51a3      	str	r3, [r4, r6]
    44a4:	e7e1      	b.n	446a <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
    44a6:	3b3b      	subs	r3, #59	; 0x3b
    44a8:	425a      	negs	r2, r3
    44aa:	415a      	adcs	r2, r3
    44ac:	4691      	mov	r9, r2
    44ae:	e7dc      	b.n	446a <_http_client_handle_entity+0x1aa>
	return 0;
    44b0:	2000      	movs	r0, #0
    44b2:	e765      	b.n	4380 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    44b4:	23e0      	movs	r3, #224	; 0xe0
    44b6:	58e3      	ldr	r3, [r4, r3]
    44b8:	6e22      	ldr	r2, [r4, #96]	; 0x60
    44ba:	4293      	cmp	r3, r2
    44bc:	ddc7      	ble.n	444e <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
    44be:	218b      	movs	r1, #139	; 0x8b
    44c0:	4249      	negs	r1, r1
    44c2:	0020      	movs	r0, r4
    44c4:	4b01      	ldr	r3, [pc, #4]	; (44cc <_http_client_handle_entity+0x20c>)
    44c6:	4798      	blx	r3
    44c8:	e797      	b.n	43fa <_http_client_handle_entity+0x13a>
    44ca:	46c0      	nop			; (mov r8, r8)
    44cc:	00003885 	.word	0x00003885
    44d0:	000040dd 	.word	0x000040dd
    44d4:	000195f8 	.word	0x000195f8
    44d8:	00013685 	.word	0x00013685

000044dc <_http_client_handle_response>:
{
    44dc:	b510      	push	{r4, lr}
	switch(module->resp.state) {
    44de:	23d8      	movs	r3, #216	; 0xd8
    44e0:	58c3      	ldr	r3, [r0, r3]
    44e2:	2b00      	cmp	r3, #0
    44e4:	d003      	beq.n	44ee <_http_client_handle_response+0x12>
    44e6:	2b01      	cmp	r3, #1
    44e8:	d004      	beq.n	44f4 <_http_client_handle_response+0x18>
	return 0;
    44ea:	2000      	movs	r0, #0
    44ec:	e001      	b.n	44f2 <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
    44ee:	4b03      	ldr	r3, [pc, #12]	; (44fc <_http_client_handle_response+0x20>)
    44f0:	4798      	blx	r3
}
    44f2:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
    44f4:	4b02      	ldr	r3, [pc, #8]	; (4500 <_http_client_handle_response+0x24>)
    44f6:	4798      	blx	r3
    44f8:	e7fb      	b.n	44f2 <_http_client_handle_response+0x16>
    44fa:	46c0      	nop			; (mov r8, r8)
    44fc:	00004101 	.word	0x00004101
    4500:	000042c1 	.word	0x000042c1

00004504 <_http_client_recved_packet>:
{
    4504:	b570      	push	{r4, r5, r6, lr}
    4506:	0004      	movs	r4, r0
	module->recved_size += read_len;
    4508:	6c43      	ldr	r3, [r0, #68]	; 0x44
    450a:	469c      	mov	ip, r3
    450c:	4461      	add	r1, ip
    450e:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    4510:	2358      	movs	r3, #88	; 0x58
    4512:	5ac3      	ldrh	r3, [r0, r3]
    4514:	2b00      	cmp	r3, #0
    4516:	d105      	bne.n	4524 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
    4518:	4d05      	ldr	r5, [pc, #20]	; (4530 <_http_client_recved_packet+0x2c>)
    451a:	0020      	movs	r0, r4
    451c:	47a8      	blx	r5
    451e:	2800      	cmp	r0, #0
    4520:	d1fb      	bne.n	451a <_http_client_recved_packet+0x16>
}
    4522:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    4524:	6c81      	ldr	r1, [r0, #72]	; 0x48
    4526:	6d40      	ldr	r0, [r0, #84]	; 0x54
    4528:	4b02      	ldr	r3, [pc, #8]	; (4534 <_http_client_recved_packet+0x30>)
    452a:	4798      	blx	r3
    452c:	e7f4      	b.n	4518 <_http_client_recved_packet+0x14>
    452e:	46c0      	nop			; (mov r8, r8)
    4530:	000044dd 	.word	0x000044dd
    4534:	000048b1 	.word	0x000048b1

00004538 <http_client_socket_event_handler>:
{
    4538:	b510      	push	{r4, lr}
    453a:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
    453c:	0080      	lsls	r0, r0, #2
    453e:	4b65      	ldr	r3, [pc, #404]	; (46d4 <http_client_socket_event_handler+0x19c>)
    4540:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
    4542:	2c00      	cmp	r4, #0
    4544:	d006      	beq.n	4554 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
    4546:	2906      	cmp	r1, #6
    4548:	d051      	beq.n	45ee <http_client_socket_event_handler+0xb6>
    454a:	2907      	cmp	r1, #7
    454c:	d100      	bne.n	4550 <http_client_socket_event_handler+0x18>
    454e:	e08a      	b.n	4666 <http_client_socket_event_handler+0x12e>
    4550:	2905      	cmp	r1, #5
    4552:	d001      	beq.n	4558 <http_client_socket_event_handler+0x20>
}
    4554:	b004      	add	sp, #16
    4556:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
    4558:	2301      	movs	r3, #1
    455a:	56d3      	ldrsb	r3, [r2, r3]
    455c:	1e1a      	subs	r2, r3, #0
    455e:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
    4560:	db15      	blt.n	458e <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
    4562:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    4564:	2b00      	cmp	r3, #0
    4566:	d003      	beq.n	4570 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    4568:	aa01      	add	r2, sp, #4
    456a:	2100      	movs	r1, #0
    456c:	0020      	movs	r0, r4
    456e:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    4570:	2303      	movs	r3, #3
    4572:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    4574:	3355      	adds	r3, #85	; 0x55
    4576:	5ae2      	ldrh	r2, [r4, r3]
    4578:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    457a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    457c:	4b56      	ldr	r3, [pc, #344]	; (46d8 <http_client_socket_event_handler+0x1a0>)
    457e:	4798      	blx	r3
    		_http_client_recv_packet(module);
    4580:	0020      	movs	r0, r4
    4582:	4b56      	ldr	r3, [pc, #344]	; (46dc <http_client_socket_event_handler+0x1a4>)
    4584:	4798      	blx	r3
			_http_client_request(module);
    4586:	0020      	movs	r0, r4
    4588:	4b55      	ldr	r3, [pc, #340]	; (46e0 <http_client_socket_event_handler+0x1a8>)
    458a:	4798      	blx	r3
    458c:	e7e2      	b.n	4554 <http_client_socket_event_handler+0x1c>
	switch (err) {
    458e:	330e      	adds	r3, #14
    4590:	b2d9      	uxtb	r1, r3
    4592:	290e      	cmp	r1, #14
    4594:	d81e      	bhi.n	45d4 <http_client_socket_event_handler+0x9c>
    4596:	008b      	lsls	r3, r1, #2
    4598:	4952      	ldr	r1, [pc, #328]	; (46e4 <http_client_socket_event_handler+0x1ac>)
    459a:	58cb      	ldr	r3, [r1, r3]
    459c:	469f      	mov	pc, r3
			return -ENOENT;
    459e:	2102      	movs	r1, #2
    45a0:	4249      	negs	r1, r1
    45a2:	e01d      	b.n	45e0 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
    45a4:	2170      	movs	r1, #112	; 0x70
    45a6:	4249      	negs	r1, r1
    45a8:	e01a      	b.n	45e0 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    45aa:	210c      	movs	r1, #12
    45ac:	4249      	negs	r1, r1
    45ae:	e017      	b.n	45e0 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
    45b0:	2116      	movs	r1, #22
    45b2:	4249      	negs	r1, r1
    45b4:	e014      	b.n	45e0 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    45b6:	210c      	movs	r1, #12
    45b8:	4249      	negs	r1, r1
    45ba:	e011      	b.n	45e0 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
    45bc:	2179      	movs	r1, #121	; 0x79
    45be:	4249      	negs	r1, r1
    45c0:	e00e      	b.n	45e0 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
    45c2:	2168      	movs	r1, #104	; 0x68
    45c4:	4249      	negs	r1, r1
    45c6:	e00b      	b.n	45e0 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
    45c8:	210b      	movs	r1, #11
    45ca:	4249      	negs	r1, r1
    45cc:	e008      	b.n	45e0 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
    45ce:	2110      	movs	r1, #16
    45d0:	4249      	negs	r1, r1
    45d2:	e005      	b.n	45e0 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
    45d4:	2a00      	cmp	r2, #0
    45d6:	db07      	blt.n	45e8 <http_client_socket_event_handler+0xb0>
			return 0;
    45d8:	2100      	movs	r1, #0
    45da:	e001      	b.n	45e0 <http_client_socket_event_handler+0xa8>
			return -EIO;
    45dc:	2105      	movs	r1, #5
    45de:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    45e0:	0020      	movs	r0, r4
    45e2:	4b41      	ldr	r3, [pc, #260]	; (46e8 <http_client_socket_event_handler+0x1b0>)
    45e4:	4798      	blx	r3
    45e6:	e7b5      	b.n	4554 <http_client_socket_event_handler+0x1c>
				return -EIO;
    45e8:	2105      	movs	r1, #5
    45ea:	4249      	negs	r1, r1
    45ec:	e7f8      	b.n	45e0 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
    45ee:	2304      	movs	r3, #4
    45f0:	5ed1      	ldrsh	r1, [r2, r3]
    45f2:	2900      	cmp	r1, #0
    45f4:	dd06      	ble.n	4604 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    45f6:	0020      	movs	r0, r4
    45f8:	4b3c      	ldr	r3, [pc, #240]	; (46ec <http_client_socket_event_handler+0x1b4>)
    45fa:	4798      	blx	r3
		_http_client_recv_packet(module);
    45fc:	0020      	movs	r0, r4
    45fe:	4b37      	ldr	r3, [pc, #220]	; (46dc <http_client_socket_event_handler+0x1a4>)
    4600:	4798      	blx	r3
		break;
    4602:	e7a7      	b.n	4554 <http_client_socket_event_handler+0x1c>
	switch (err) {
    4604:	000b      	movs	r3, r1
    4606:	330e      	adds	r3, #14
    4608:	b29a      	uxth	r2, r3
    460a:	2a0e      	cmp	r2, #14
    460c:	d81e      	bhi.n	464c <http_client_socket_event_handler+0x114>
    460e:	0093      	lsls	r3, r2, #2
    4610:	4a37      	ldr	r2, [pc, #220]	; (46f0 <http_client_socket_event_handler+0x1b8>)
    4612:	58d3      	ldr	r3, [r2, r3]
    4614:	469f      	mov	pc, r3
			return -ENOENT;
    4616:	2102      	movs	r1, #2
    4618:	4249      	negs	r1, r1
    461a:	e01d      	b.n	4658 <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
    461c:	2170      	movs	r1, #112	; 0x70
    461e:	4249      	negs	r1, r1
    4620:	e01a      	b.n	4658 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    4622:	210c      	movs	r1, #12
    4624:	4249      	negs	r1, r1
    4626:	e017      	b.n	4658 <http_client_socket_event_handler+0x120>
			return -EINVAL;
    4628:	2116      	movs	r1, #22
    462a:	4249      	negs	r1, r1
    462c:	e014      	b.n	4658 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    462e:	210c      	movs	r1, #12
    4630:	4249      	negs	r1, r1
    4632:	e011      	b.n	4658 <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
    4634:	2179      	movs	r1, #121	; 0x79
    4636:	4249      	negs	r1, r1
    4638:	e00e      	b.n	4658 <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
    463a:	2168      	movs	r1, #104	; 0x68
    463c:	4249      	negs	r1, r1
    463e:	e00b      	b.n	4658 <http_client_socket_event_handler+0x120>
			return -EAGAIN;
    4640:	210b      	movs	r1, #11
    4642:	4249      	negs	r1, r1
    4644:	e008      	b.n	4658 <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
    4646:	2110      	movs	r1, #16
    4648:	4249      	negs	r1, r1
    464a:	e005      	b.n	4658 <http_client_socket_event_handler+0x120>
			if (err < 0) {
    464c:	2900      	cmp	r1, #0
    464e:	db07      	blt.n	4660 <http_client_socket_event_handler+0x128>
			return 0;
    4650:	2100      	movs	r1, #0
    4652:	e001      	b.n	4658 <http_client_socket_event_handler+0x120>
			return -EIO;
    4654:	2105      	movs	r1, #5
    4656:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    4658:	0020      	movs	r0, r4
    465a:	4b23      	ldr	r3, [pc, #140]	; (46e8 <http_client_socket_event_handler+0x1b0>)
    465c:	4798      	blx	r3
    465e:	e7cd      	b.n	45fc <http_client_socket_event_handler+0xc4>
				return -EIO;
    4660:	2105      	movs	r1, #5
    4662:	4249      	negs	r1, r1
    4664:	e7f8      	b.n	4658 <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
    4666:	2300      	movs	r3, #0
    4668:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    466a:	2b00      	cmp	r3, #0
    466c:	db08      	blt.n	4680 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
    466e:	0020      	movs	r0, r4
    4670:	4b1b      	ldr	r3, [pc, #108]	; (46e0 <http_client_socket_event_handler+0x1a8>)
    4672:	4798      	blx	r3
		module->sending = 0;
    4674:	2241      	movs	r2, #65	; 0x41
    4676:	5ca3      	ldrb	r3, [r4, r2]
    4678:	2101      	movs	r1, #1
    467a:	438b      	bics	r3, r1
    467c:	54a3      	strb	r3, [r4, r2]
    	break;
    467e:	e769      	b.n	4554 <http_client_socket_event_handler+0x1c>
	switch (err) {
    4680:	330e      	adds	r3, #14
    4682:	b29a      	uxth	r2, r3
    4684:	2a0d      	cmp	r2, #13
    4686:	d81e      	bhi.n	46c6 <http_client_socket_event_handler+0x18e>
    4688:	0093      	lsls	r3, r2, #2
    468a:	4a1a      	ldr	r2, [pc, #104]	; (46f4 <http_client_socket_event_handler+0x1bc>)
    468c:	58d3      	ldr	r3, [r2, r3]
    468e:	469f      	mov	pc, r3
			return -ENOENT;
    4690:	2102      	movs	r1, #2
    4692:	4249      	negs	r1, r1
    4694:	e019      	b.n	46ca <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
    4696:	2170      	movs	r1, #112	; 0x70
    4698:	4249      	negs	r1, r1
    469a:	e016      	b.n	46ca <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    469c:	210c      	movs	r1, #12
    469e:	4249      	negs	r1, r1
    46a0:	e013      	b.n	46ca <http_client_socket_event_handler+0x192>
			return -EINVAL;
    46a2:	2116      	movs	r1, #22
    46a4:	4249      	negs	r1, r1
    46a6:	e010      	b.n	46ca <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    46a8:	210c      	movs	r1, #12
    46aa:	4249      	negs	r1, r1
    46ac:	e00d      	b.n	46ca <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
    46ae:	2179      	movs	r1, #121	; 0x79
    46b0:	4249      	negs	r1, r1
    46b2:	e00a      	b.n	46ca <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
    46b4:	2168      	movs	r1, #104	; 0x68
    46b6:	4249      	negs	r1, r1
    46b8:	e007      	b.n	46ca <http_client_socket_event_handler+0x192>
			return -EAGAIN;
    46ba:	210b      	movs	r1, #11
    46bc:	4249      	negs	r1, r1
    46be:	e004      	b.n	46ca <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
    46c0:	2110      	movs	r1, #16
    46c2:	4249      	negs	r1, r1
    46c4:	e001      	b.n	46ca <http_client_socket_event_handler+0x192>
			return -EIO;
    46c6:	2105      	movs	r1, #5
    46c8:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    46ca:	0020      	movs	r0, r4
    46cc:	4b06      	ldr	r3, [pc, #24]	; (46e8 <http_client_socket_event_handler+0x1b0>)
    46ce:	4798      	blx	r3
    46d0:	e7d0      	b.n	4674 <http_client_socket_event_handler+0x13c>
    46d2:	46c0      	nop			; (mov r8, r8)
    46d4:	20000bc4 	.word	0x20000bc4
    46d8:	00004885 	.word	0x00004885
    46dc:	000040a5 	.word	0x000040a5
    46e0:	0000399d 	.word	0x0000399d
    46e4:	00019538 	.word	0x00019538
    46e8:	00003885 	.word	0x00003885
    46ec:	00004505 	.word	0x00004505
    46f0:	00019574 	.word	0x00019574
    46f4:	000195b0 	.word	0x000195b0

000046f8 <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    46f8:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    46fa:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    46fc:	2200      	movs	r2, #0
    46fe:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    4700:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    4702:	9b00      	ldr	r3, [sp, #0]
    4704:	60c3      	str	r3, [r0, #12]
}
    4706:	4770      	bx	lr

00004708 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    4708:	b510      	push	{r4, lr}
    470a:	0004      	movs	r4, r0
	if(writer->written > 0) {
    470c:	6842      	ldr	r2, [r0, #4]
    470e:	2a00      	cmp	r2, #0
    4710:	d100      	bne.n	4714 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    4712:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    4714:	6901      	ldr	r1, [r0, #16]
    4716:	68c0      	ldr	r0, [r0, #12]
    4718:	68a3      	ldr	r3, [r4, #8]
    471a:	4798      	blx	r3
		writer->written = 0;
    471c:	2300      	movs	r3, #0
    471e:	6063      	str	r3, [r4, #4]
}
    4720:	e7f7      	b.n	4712 <stream_writer_send_remain+0xa>
	...

00004724 <stream_writer_send_8>:
{
    4724:	b570      	push	{r4, r5, r6, lr}
    4726:	0004      	movs	r4, r0
    4728:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    472a:	6803      	ldr	r3, [r0, #0]
    472c:	6842      	ldr	r2, [r0, #4]
    472e:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    4730:	2b00      	cmp	r3, #0
    4732:	dd05      	ble.n	4740 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    4734:	6922      	ldr	r2, [r4, #16]
    4736:	6863      	ldr	r3, [r4, #4]
    4738:	1c59      	adds	r1, r3, #1
    473a:	6061      	str	r1, [r4, #4]
    473c:	54d5      	strb	r5, [r2, r3]
}
    473e:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    4740:	4b01      	ldr	r3, [pc, #4]	; (4748 <stream_writer_send_8+0x24>)
    4742:	4798      	blx	r3
    4744:	e7f6      	b.n	4734 <stream_writer_send_8+0x10>
    4746:	46c0      	nop			; (mov r8, r8)
    4748:	00004709 	.word	0x00004709

0000474c <stream_writer_send_buffer>:
{
    474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    474e:	0006      	movs	r6, r0
    4750:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    4752:	2a00      	cmp	r2, #0
    4754:	d008      	beq.n	4768 <stream_writer_send_buffer+0x1c>
    4756:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    4758:	4f04      	ldr	r7, [pc, #16]	; (476c <stream_writer_send_buffer+0x20>)
    475a:	2100      	movs	r1, #0
    475c:	5661      	ldrsb	r1, [r4, r1]
    475e:	0030      	movs	r0, r6
    4760:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    4762:	3401      	adds	r4, #1
    4764:	42a5      	cmp	r5, r4
    4766:	d1f8      	bne.n	475a <stream_writer_send_buffer+0xe>
}
    4768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    476a:	46c0      	nop			; (mov r8, r8)
    476c:	00004725 	.word	0x00004725

00004770 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    4770:	4a02      	ldr	r2, [pc, #8]	; (477c <sw_timer_tcc_callback+0xc>)
    4772:	6813      	ldr	r3, [r2, #0]
    4774:	3301      	adds	r3, #1
    4776:	6013      	str	r3, [r2, #0]
}
    4778:	4770      	bx	lr
    477a:	46c0      	nop			; (mov r8, r8)
    477c:	20000be0 	.word	0x20000be0

00004780 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    4780:	2364      	movs	r3, #100	; 0x64
    4782:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    4784:	2300      	movs	r3, #0
    4786:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    4788:	7043      	strb	r3, [r0, #1]
}
    478a:	4770      	bx	lr

0000478c <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    478c:	b5f0      	push	{r4, r5, r6, r7, lr}
    478e:	46c6      	mov	lr, r8
    4790:	b500      	push	{lr}
    4792:	b0ac      	sub	sp, #176	; 0xb0
    4794:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    4796:	466e      	mov	r6, sp
    4798:	4b1d      	ldr	r3, [pc, #116]	; (4810 <sw_timer_init+0x84>)
    479a:	466a      	mov	r2, sp
    479c:	cb92      	ldmia	r3!, {r1, r4, r7}
    479e:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    47a0:	886b      	ldrh	r3, [r5, #2]
    47a2:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    47a4:	3014      	adds	r0, #20
    47a6:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    47a8:	782b      	ldrb	r3, [r5, #0]
    47aa:	009b      	lsls	r3, r3, #2
    47ac:	5999      	ldr	r1, [r3, r6]
    47ae:	0017      	movs	r7, r2
    47b0:	0010      	movs	r0, r2
    47b2:	4b18      	ldr	r3, [pc, #96]	; (4814 <sw_timer_init+0x88>)
    47b4:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    47b6:	2000      	movs	r0, #0
    47b8:	4b17      	ldr	r3, [pc, #92]	; (4818 <sw_timer_init+0x8c>)
    47ba:	4798      	blx	r3
    47bc:	4b17      	ldr	r3, [pc, #92]	; (481c <sw_timer_init+0x90>)
    47be:	7a1b      	ldrb	r3, [r3, #8]
    47c0:	b2db      	uxtb	r3, r3
    47c2:	40d8      	lsrs	r0, r3
    47c4:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    47c6:	8869      	ldrh	r1, [r5, #2]
    47c8:	20fa      	movs	r0, #250	; 0xfa
    47ca:	0200      	lsls	r0, r0, #8
    47cc:	4b14      	ldr	r3, [pc, #80]	; (4820 <sw_timer_init+0x94>)
    47ce:	4798      	blx	r3
    47d0:	0001      	movs	r1, r0
    47d2:	4640      	mov	r0, r8
    47d4:	4b13      	ldr	r3, [pc, #76]	; (4824 <sw_timer_init+0x98>)
    47d6:	4798      	blx	r3
    47d8:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    47da:	2305      	movs	r3, #5
    47dc:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    47de:	782b      	ldrb	r3, [r5, #0]
    47e0:	009b      	lsls	r3, r3, #2
    47e2:	5999      	ldr	r1, [r3, r6]
    47e4:	003a      	movs	r2, r7
    47e6:	0020      	movs	r0, r4
    47e8:	4b0f      	ldr	r3, [pc, #60]	; (4828 <sw_timer_init+0x9c>)
    47ea:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    47ec:	786a      	ldrb	r2, [r5, #1]
    47ee:	3208      	adds	r2, #8
    47f0:	b2d2      	uxtb	r2, r2
    47f2:	490e      	ldr	r1, [pc, #56]	; (482c <sw_timer_init+0xa0>)
    47f4:	0020      	movs	r0, r4
    47f6:	4b0e      	ldr	r3, [pc, #56]	; (4830 <sw_timer_init+0xa4>)
    47f8:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    47fa:	7869      	ldrb	r1, [r5, #1]
    47fc:	3108      	adds	r1, #8
    47fe:	b2c9      	uxtb	r1, r1
    4800:	0020      	movs	r0, r4
    4802:	4b0c      	ldr	r3, [pc, #48]	; (4834 <sw_timer_init+0xa8>)
    4804:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    4806:	b02c      	add	sp, #176	; 0xb0
    4808:	bc04      	pop	{r2}
    480a:	4690      	mov	r8, r2
    480c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    480e:	46c0      	nop			; (mov r8, r8)
    4810:	00019720 	.word	0x00019720
    4814:	0000ed3d 	.word	0x0000ed3d
    4818:	0000ea69 	.word	0x0000ea69
    481c:	40000400 	.word	0x40000400
    4820:	00015929 	.word	0x00015929
    4824:	00015815 	.word	0x00015815
    4828:	0000ee89 	.word	0x0000ee89
    482c:	00004771 	.word	0x00004771
    4830:	0000f295 	.word	0x0000f295
    4834:	0000f2ad 	.word	0x0000f2ad

00004838 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    4838:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    483a:	2102      	movs	r1, #2
    483c:	6893      	ldr	r3, [r2, #8]
    483e:	4219      	tst	r1, r3
    4840:	d1fc      	bne.n	483c <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    4842:	6813      	ldr	r3, [r2, #0]
    4844:	2102      	movs	r1, #2
    4846:	430b      	orrs	r3, r1
    4848:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    484a:	4770      	bx	lr

0000484c <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    484c:	b570      	push	{r4, r5, r6, lr}
    484e:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    4850:	7805      	ldrb	r5, [r0, #0]
    4852:	07e8      	lsls	r0, r5, #31
    4854:	d502      	bpl.n	485c <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
    4856:	2001      	movs	r0, #1
    4858:	4240      	negs	r0, r0
}
    485a:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    485c:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    485e:	0029      	movs	r1, r5
    4860:	2002      	movs	r0, #2
    4862:	4381      	bics	r1, r0
    4864:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    4866:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    4868:	6d61      	ldr	r1, [r4, #84]	; 0x54
    486a:	0018      	movs	r0, r3
    486c:	4b04      	ldr	r3, [pc, #16]	; (4880 <sw_timer_register_callback+0x34>)
    486e:	4798      	blx	r3
    4870:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    4872:	7823      	ldrb	r3, [r4, #0]
    4874:	2201      	movs	r2, #1
    4876:	4313      	orrs	r3, r2
    4878:	7023      	strb	r3, [r4, #0]
			return index;
    487a:	2000      	movs	r0, #0
    487c:	e7ed      	b.n	485a <sw_timer_register_callback+0xe>
    487e:	46c0      	nop			; (mov r8, r8)
    4880:	00015815 	.word	0x00015815

00004884 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    4884:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    4886:	008b      	lsls	r3, r1, #2
    4888:	185d      	adds	r5, r3, r1
    488a:	00ad      	lsls	r5, r5, #2
    488c:	5c29      	ldrb	r1, [r5, r0]
    488e:	2602      	movs	r6, #2
    4890:	4331      	orrs	r1, r6
    4892:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    4894:	1944      	adds	r4, r0, r5
    4896:	6d41      	ldr	r1, [r0, #84]	; 0x54
    4898:	0010      	movs	r0, r2
    489a:	4b03      	ldr	r3, [pc, #12]	; (48a8 <sw_timer_enable_callback+0x24>)
    489c:	4798      	blx	r3
    489e:	4b03      	ldr	r3, [pc, #12]	; (48ac <sw_timer_enable_callback+0x28>)
    48a0:	681b      	ldr	r3, [r3, #0]
    48a2:	18c0      	adds	r0, r0, r3
    48a4:	6120      	str	r0, [r4, #16]
}
    48a6:	bd70      	pop	{r4, r5, r6, pc}
    48a8:	00015815 	.word	0x00015815
    48ac:	20000be0 	.word	0x20000be0

000048b0 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    48b0:	008b      	lsls	r3, r1, #2
    48b2:	1859      	adds	r1, r3, r1
    48b4:	0089      	lsls	r1, r1, #2
    48b6:	5c0b      	ldrb	r3, [r1, r0]
    48b8:	2202      	movs	r2, #2
    48ba:	4393      	bics	r3, r2
    48bc:	540b      	strb	r3, [r1, r0]
}
    48be:	4770      	bx	lr

000048c0 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    48c0:	b570      	push	{r4, r5, r6, lr}
    48c2:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    48c4:	7803      	ldrb	r3, [r0, #0]
    48c6:	07db      	lsls	r3, r3, #31
    48c8:	d507      	bpl.n	48da <sw_timer_task+0x1a>
    48ca:	7803      	ldrb	r3, [r0, #0]
    48cc:	079b      	lsls	r3, r3, #30
    48ce:	d504      	bpl.n	48da <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    48d0:	4b10      	ldr	r3, [pc, #64]	; (4914 <sw_timer_task+0x54>)
    48d2:	681a      	ldr	r2, [r3, #0]
    48d4:	6903      	ldr	r3, [r0, #16]
    48d6:	1a9b      	subs	r3, r3, r2
    48d8:	d400      	bmi.n	48dc <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
    48da:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    48dc:	7803      	ldrb	r3, [r0, #0]
    48de:	075b      	lsls	r3, r3, #29
    48e0:	d4fb      	bmi.n	48da <sw_timer_task+0x1a>
				handler->busy = 1;
    48e2:	7803      	ldrb	r3, [r0, #0]
    48e4:	2104      	movs	r1, #4
    48e6:	430b      	orrs	r3, r1
    48e8:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
    48ea:	68c3      	ldr	r3, [r0, #12]
    48ec:	2b00      	cmp	r3, #0
    48ee:	d00b      	beq.n	4908 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
    48f0:	18d2      	adds	r2, r2, r3
    48f2:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
    48f4:	68a2      	ldr	r2, [r4, #8]
    48f6:	2100      	movs	r1, #0
    48f8:	0020      	movs	r0, r4
    48fa:	6865      	ldr	r5, [r4, #4]
    48fc:	47a8      	blx	r5
				handler->busy = 0;
    48fe:	7823      	ldrb	r3, [r4, #0]
    4900:	2204      	movs	r2, #4
    4902:	4393      	bics	r3, r2
    4904:	7023      	strb	r3, [r4, #0]
}
    4906:	e7e8      	b.n	48da <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    4908:	7802      	ldrb	r2, [r0, #0]
    490a:	2102      	movs	r1, #2
    490c:	438a      	bics	r2, r1
    490e:	7002      	strb	r2, [r0, #0]
    4910:	e7f0      	b.n	48f4 <sw_timer_task+0x34>
    4912:	46c0      	nop			; (mov r8, r8)
    4914:	20000be0 	.word	0x20000be0

00004918 <configure_spi_master>:
* @param[out]	
* @return		
* @note         
*****************************************************************************/
void configure_spi_master(void)
{
    4918:	b530      	push	{r4, r5, lr}
    491a:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    491c:	4c27      	ldr	r4, [pc, #156]	; (49bc <configure_spi_master+0xa4>)
    491e:	2311      	movs	r3, #17
    4920:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    4922:	2300      	movs	r3, #0
    4924:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    4926:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    4928:	a901      	add	r1, sp, #4
    492a:	2201      	movs	r2, #1
    492c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    492e:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    4930:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    4932:	2011      	movs	r0, #17
    4934:	4b22      	ldr	r3, [pc, #136]	; (49c0 <configure_spi_master+0xa8>)
    4936:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    4938:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    493a:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    493c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    493e:	2900      	cmp	r1, #0
    4940:	d104      	bne.n	494c <configure_spi_master+0x34>
		return &(ports[port_index]->Group[group_index]);
    4942:	0953      	lsrs	r3, r2, #5
    4944:	01db      	lsls	r3, r3, #7
    4946:	491f      	ldr	r1, [pc, #124]	; (49c4 <configure_spi_master+0xac>)
    4948:	468c      	mov	ip, r1
    494a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    494c:	211f      	movs	r1, #31
    494e:	4011      	ands	r1, r2
    4950:	2201      	movs	r2, #1
    4952:	0010      	movs	r0, r2
    4954:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    4956:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    4958:	ac02      	add	r4, sp, #8
    495a:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    495c:	2500      	movs	r5, #0
    495e:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    4960:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    4962:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    4964:	74a2      	strb	r2, [r4, #18]
	config->master_slave_select_enable= false;
    4966:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    4968:	2324      	movs	r3, #36	; 0x24
    496a:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    496c:	320b      	adds	r2, #11
    496e:	2100      	movs	r1, #0
    4970:	a808      	add	r0, sp, #32
    4972:	4b15      	ldr	r3, [pc, #84]	; (49c8 <configure_spi_master+0xb0>)
    4974:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
	spi_attach_slave(&slave, &slave_dev_config);
	
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
    4976:	2398      	movs	r3, #152	; 0x98
    4978:	035b      	lsls	r3, r3, #13
    497a:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
    497c:	4b13      	ldr	r3, [pc, #76]	; (49cc <configure_spi_master+0xb4>)
    497e:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
    4980:	4b13      	ldr	r3, [pc, #76]	; (49d0 <configure_spi_master+0xb8>)
    4982:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
    4984:	2301      	movs	r3, #1
    4986:	425b      	negs	r3, r3
    4988:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
    498a:	4b12      	ldr	r3, [pc, #72]	; (49d4 <configure_spi_master+0xbc>)
    498c:	6363      	str	r3, [r4, #52]	; 0x34
	
	/* Works upto 1 MHZ with small jumpers. Doesn't work with long jumper wires. 	*/
	config_spi_master.mode_specific.master.baudrate = 1000000;  // 1 MHZ clock.
    498e:	4b12      	ldr	r3, [pc, #72]	; (49d8 <configure_spi_master+0xc0>)
    4990:	61a3      	str	r3, [r4, #24]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;  // works with both mode 0 and mode 1
    4992:	2380      	movs	r3, #128	; 0x80
    4994:	055b      	lsls	r3, r3, #21
    4996:	60a3      	str	r3, [r4, #8]
	config_spi_master.select_slave_low_detect_enable = false;
    4998:	74e5      	strb	r5, [r4, #19]

	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
    499a:	4d10      	ldr	r5, [pc, #64]	; (49dc <configure_spi_master+0xc4>)
    499c:	0022      	movs	r2, r4
    499e:	4910      	ldr	r1, [pc, #64]	; (49e0 <configure_spi_master+0xc8>)
    49a0:	0028      	movs	r0, r5
    49a2:	4b10      	ldr	r3, [pc, #64]	; (49e4 <configure_spi_master+0xcc>)
    49a4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    49a6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    49a8:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    49aa:	2b00      	cmp	r3, #0
    49ac:	d1fc      	bne.n	49a8 <configure_spi_master+0x90>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    49ae:	6813      	ldr	r3, [r2, #0]
    49b0:	2102      	movs	r1, #2
    49b2:	430b      	orrs	r3, r1
    49b4:	6013      	str	r3, [r2, #0]
	spi_enable(&spi_master_instance);
    49b6:	b011      	add	sp, #68	; 0x44
    49b8:	bd30      	pop	{r4, r5, pc}
    49ba:	46c0      	nop			; (mov r8, r8)
    49bc:	200001f4 	.word	0x200001f4
    49c0:	0000d375 	.word	0x0000d375
    49c4:	41004400 	.word	0x41004400
    49c8:	00012b83 	.word	0x00012b83
    49cc:	00220003 	.word	0x00220003
    49d0:	00230003 	.word	0x00230003
    49d4:	00150002 	.word	0x00150002
    49d8:	000f4240 	.word	0x000f4240
    49dc:	20004748 	.word	0x20004748
    49e0:	42001c00 	.word	0x42001c00
    49e4:	0000da9d 	.word	0x0000da9d

000049e8 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    49e8:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    49ea:	2207      	movs	r2, #7
    49ec:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    49ee:	421a      	tst	r2, r3
    49f0:	d1fc      	bne.n	49ec <_i2c_master_wait_for_sync+0x4>
}
    49f2:	4770      	bx	lr

000049f4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    49f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49f6:	46d6      	mov	lr, sl
    49f8:	464f      	mov	r7, r9
    49fa:	4646      	mov	r6, r8
    49fc:	b5c0      	push	{r6, r7, lr}
    49fe:	b08a      	sub	sp, #40	; 0x28
    4a00:	0006      	movs	r6, r0
    4a02:	000f      	movs	r7, r1
    4a04:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    4a06:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4a08:	0008      	movs	r0, r1
    4a0a:	4ba0      	ldr	r3, [pc, #640]	; (4c8c <i2c_master_init+0x298>)
    4a0c:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4a0e:	4aa0      	ldr	r2, [pc, #640]	; (4c90 <i2c_master_init+0x29c>)
    4a10:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4a12:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4a14:	2301      	movs	r3, #1
    4a16:	40ab      	lsls	r3, r5
    4a18:	430b      	orrs	r3, r1
    4a1a:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    4a1c:	a909      	add	r1, sp, #36	; 0x24
    4a1e:	7b23      	ldrb	r3, [r4, #12]
    4a20:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4a22:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4a24:	b2c5      	uxtb	r5, r0
    4a26:	0028      	movs	r0, r5
    4a28:	4b9a      	ldr	r3, [pc, #616]	; (4c94 <i2c_master_init+0x2a0>)
    4a2a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4a2c:	0028      	movs	r0, r5
    4a2e:	4b9a      	ldr	r3, [pc, #616]	; (4c98 <i2c_master_init+0x2a4>)
    4a30:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4a32:	7b20      	ldrb	r0, [r4, #12]
    4a34:	2100      	movs	r1, #0
    4a36:	4b99      	ldr	r3, [pc, #612]	; (4c9c <i2c_master_init+0x2a8>)
    4a38:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    4a3a:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    4a3c:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    4a3e:	079b      	lsls	r3, r3, #30
    4a40:	d505      	bpl.n	4a4e <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    4a42:	b00a      	add	sp, #40	; 0x28
    4a44:	bc1c      	pop	{r2, r3, r4}
    4a46:	4690      	mov	r8, r2
    4a48:	4699      	mov	r9, r3
    4a4a:	46a2      	mov	sl, r4
    4a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    4a4e:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    4a50:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    4a52:	07db      	lsls	r3, r3, #31
    4a54:	d4f5      	bmi.n	4a42 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4a56:	6830      	ldr	r0, [r6, #0]
    4a58:	4b8c      	ldr	r3, [pc, #560]	; (4c8c <i2c_master_init+0x298>)
    4a5a:	4699      	mov	r9, r3
    4a5c:	4798      	blx	r3
    4a5e:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    4a60:	498f      	ldr	r1, [pc, #572]	; (4ca0 <i2c_master_init+0x2ac>)
    4a62:	4b90      	ldr	r3, [pc, #576]	; (4ca4 <i2c_master_init+0x2b0>)
    4a64:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4a66:	00ad      	lsls	r5, r5, #2
    4a68:	4b8f      	ldr	r3, [pc, #572]	; (4ca8 <i2c_master_init+0x2b4>)
    4a6a:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
    4a6c:	2300      	movs	r3, #0
    4a6e:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
    4a70:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
    4a72:	2500      	movs	r5, #0
    4a74:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
    4a76:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
    4a78:	2225      	movs	r2, #37	; 0x25
    4a7a:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
    4a7c:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    4a7e:	3314      	adds	r3, #20
    4a80:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4a82:	6833      	ldr	r3, [r6, #0]
    4a84:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    4a86:	0018      	movs	r0, r3
    4a88:	47c8      	blx	r9
    4a8a:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4a8c:	2380      	movs	r3, #128	; 0x80
    4a8e:	aa08      	add	r2, sp, #32
    4a90:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4a92:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4a94:	2301      	movs	r3, #1
    4a96:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    4a98:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    4a9a:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    4a9c:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    4a9e:	2800      	cmp	r0, #0
    4aa0:	d100      	bne.n	4aa4 <i2c_master_init+0xb0>
    4aa2:	e0af      	b.n	4c04 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
    4aa4:	ab08      	add	r3, sp, #32
    4aa6:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    4aa8:	2302      	movs	r3, #2
    4aaa:	aa08      	add	r2, sp, #32
    4aac:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    4aae:	0c00      	lsrs	r0, r0, #16
    4ab0:	b2c0      	uxtb	r0, r0
    4ab2:	0011      	movs	r1, r2
    4ab4:	4b7d      	ldr	r3, [pc, #500]	; (4cac <i2c_master_init+0x2b8>)
    4ab6:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    4ab8:	2f00      	cmp	r7, #0
    4aba:	d100      	bne.n	4abe <i2c_master_init+0xca>
    4abc:	e0a7      	b.n	4c0e <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
    4abe:	ab08      	add	r3, sp, #32
    4ac0:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    4ac2:	2302      	movs	r3, #2
    4ac4:	aa08      	add	r2, sp, #32
    4ac6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    4ac8:	0c3f      	lsrs	r7, r7, #16
    4aca:	b2f8      	uxtb	r0, r7
    4acc:	0011      	movs	r1, r2
    4ace:	4b77      	ldr	r3, [pc, #476]	; (4cac <i2c_master_init+0x2b8>)
    4ad0:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    4ad2:	8aa3      	ldrh	r3, [r4, #20]
    4ad4:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    4ad6:	8ae3      	ldrh	r3, [r4, #22]
    4ad8:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    4ada:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    4adc:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    4ade:	2b00      	cmp	r3, #0
    4ae0:	d104      	bne.n	4aec <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4ae2:	4b73      	ldr	r3, [pc, #460]	; (4cb0 <i2c_master_init+0x2bc>)
    4ae4:	789b      	ldrb	r3, [r3, #2]
    4ae6:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    4ae8:	0fdb      	lsrs	r3, r3, #31
    4aea:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    4aec:	68a1      	ldr	r1, [r4, #8]
    4aee:	6923      	ldr	r3, [r4, #16]
    4af0:	430b      	orrs	r3, r1
    4af2:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    4af4:	2224      	movs	r2, #36	; 0x24
    4af6:	5ca2      	ldrb	r2, [r4, r2]
    4af8:	2a00      	cmp	r2, #0
    4afa:	d002      	beq.n	4b02 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    4afc:	2280      	movs	r2, #128	; 0x80
    4afe:	05d2      	lsls	r2, r2, #23
    4b00:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    4b02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4b04:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    4b06:	222c      	movs	r2, #44	; 0x2c
    4b08:	5ca2      	ldrb	r2, [r4, r2]
    4b0a:	2a00      	cmp	r2, #0
    4b0c:	d103      	bne.n	4b16 <i2c_master_init+0x122>
    4b0e:	2280      	movs	r2, #128	; 0x80
    4b10:	0492      	lsls	r2, r2, #18
    4b12:	4291      	cmp	r1, r2
    4b14:	d102      	bne.n	4b1c <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    4b16:	2280      	movs	r2, #128	; 0x80
    4b18:	0512      	lsls	r2, r2, #20
    4b1a:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    4b1c:	222d      	movs	r2, #45	; 0x2d
    4b1e:	5ca2      	ldrb	r2, [r4, r2]
    4b20:	2a00      	cmp	r2, #0
    4b22:	d002      	beq.n	4b2a <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    4b24:	2280      	movs	r2, #128	; 0x80
    4b26:	0412      	lsls	r2, r2, #16
    4b28:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    4b2a:	222e      	movs	r2, #46	; 0x2e
    4b2c:	5ca2      	ldrb	r2, [r4, r2]
    4b2e:	2a00      	cmp	r2, #0
    4b30:	d002      	beq.n	4b38 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    4b32:	2280      	movs	r2, #128	; 0x80
    4b34:	03d2      	lsls	r2, r2, #15
    4b36:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    4b38:	4642      	mov	r2, r8
    4b3a:	6812      	ldr	r2, [r2, #0]
    4b3c:	4313      	orrs	r3, r2
    4b3e:	4642      	mov	r2, r8
    4b40:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    4b42:	2380      	movs	r3, #128	; 0x80
    4b44:	005b      	lsls	r3, r3, #1
    4b46:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    4b48:	4648      	mov	r0, r9
    4b4a:	3014      	adds	r0, #20
    4b4c:	b2c0      	uxtb	r0, r0
    4b4e:	4b59      	ldr	r3, [pc, #356]	; (4cb4 <i2c_master_init+0x2c0>)
    4b50:	4798      	blx	r3
    4b52:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    4b54:	23fa      	movs	r3, #250	; 0xfa
    4b56:	009b      	lsls	r3, r3, #2
    4b58:	6822      	ldr	r2, [r4, #0]
    4b5a:	435a      	muls	r2, r3
    4b5c:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    4b5e:	6863      	ldr	r3, [r4, #4]
    4b60:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    4b62:	4d55      	ldr	r5, [pc, #340]	; (4cb8 <i2c_master_init+0x2c4>)
    4b64:	47a8      	blx	r5
    4b66:	9000      	str	r0, [sp, #0]
    4b68:	9101      	str	r1, [sp, #4]
    4b6a:	464b      	mov	r3, r9
    4b6c:	0058      	lsls	r0, r3, #1
    4b6e:	47a8      	blx	r5
    4b70:	9002      	str	r0, [sp, #8]
    4b72:	9103      	str	r1, [sp, #12]
    4b74:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    4b76:	47a8      	blx	r5
    4b78:	9004      	str	r0, [sp, #16]
    4b7a:	9105      	str	r1, [sp, #20]
    4b7c:	4f4f      	ldr	r7, [pc, #316]	; (4cbc <i2c_master_init+0x2c8>)
    4b7e:	4a50      	ldr	r2, [pc, #320]	; (4cc0 <i2c_master_init+0x2cc>)
    4b80:	4b50      	ldr	r3, [pc, #320]	; (4cc4 <i2c_master_init+0x2d0>)
    4b82:	9800      	ldr	r0, [sp, #0]
    4b84:	9901      	ldr	r1, [sp, #4]
    4b86:	47b8      	blx	r7
    4b88:	0002      	movs	r2, r0
    4b8a:	000b      	movs	r3, r1
    4b8c:	9804      	ldr	r0, [sp, #16]
    4b8e:	9905      	ldr	r1, [sp, #20]
    4b90:	47b8      	blx	r7
    4b92:	4e4d      	ldr	r6, [pc, #308]	; (4cc8 <i2c_master_init+0x2d4>)
    4b94:	2200      	movs	r2, #0
    4b96:	4b4d      	ldr	r3, [pc, #308]	; (4ccc <i2c_master_init+0x2d8>)
    4b98:	47b0      	blx	r6
    4b9a:	9004      	str	r0, [sp, #16]
    4b9c:	9105      	str	r1, [sp, #20]
    4b9e:	4648      	mov	r0, r9
    4ba0:	47a8      	blx	r5
    4ba2:	0002      	movs	r2, r0
    4ba4:	000b      	movs	r3, r1
    4ba6:	9804      	ldr	r0, [sp, #16]
    4ba8:	9905      	ldr	r1, [sp, #20]
    4baa:	47b8      	blx	r7
    4bac:	0002      	movs	r2, r0
    4bae:	000b      	movs	r3, r1
    4bb0:	4d47      	ldr	r5, [pc, #284]	; (4cd0 <i2c_master_init+0x2dc>)
    4bb2:	9800      	ldr	r0, [sp, #0]
    4bb4:	9901      	ldr	r1, [sp, #4]
    4bb6:	47a8      	blx	r5
    4bb8:	9a02      	ldr	r2, [sp, #8]
    4bba:	9b03      	ldr	r3, [sp, #12]
    4bbc:	47b0      	blx	r6
    4bbe:	2200      	movs	r2, #0
    4bc0:	4b44      	ldr	r3, [pc, #272]	; (4cd4 <i2c_master_init+0x2e0>)
    4bc2:	47a8      	blx	r5
    4bc4:	9a02      	ldr	r2, [sp, #8]
    4bc6:	9b03      	ldr	r3, [sp, #12]
    4bc8:	4d43      	ldr	r5, [pc, #268]	; (4cd8 <i2c_master_init+0x2e4>)
    4bca:	47a8      	blx	r5
    4bcc:	4b43      	ldr	r3, [pc, #268]	; (4cdc <i2c_master_init+0x2e8>)
    4bce:	4798      	blx	r3
    4bd0:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    4bd2:	2380      	movs	r3, #128	; 0x80
    4bd4:	049b      	lsls	r3, r3, #18
    4bd6:	68a2      	ldr	r2, [r4, #8]
    4bd8:	429a      	cmp	r2, r3
    4bda:	d01e      	beq.n	4c1a <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    4bdc:	0003      	movs	r3, r0
    4bde:	2040      	movs	r0, #64	; 0x40
    4be0:	2dff      	cmp	r5, #255	; 0xff
    4be2:	d900      	bls.n	4be6 <i2c_master_init+0x1f2>
    4be4:	e72d      	b.n	4a42 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    4be6:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    4be8:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    4bea:	25ff      	movs	r5, #255	; 0xff
    4bec:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    4bee:	0624      	lsls	r4, r4, #24
    4bf0:	4325      	orrs	r5, r4
    4bf2:	0400      	lsls	r0, r0, #16
    4bf4:	23ff      	movs	r3, #255	; 0xff
    4bf6:	041b      	lsls	r3, r3, #16
    4bf8:	4018      	ands	r0, r3
    4bfa:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    4bfc:	4643      	mov	r3, r8
    4bfe:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    4c00:	2000      	movs	r0, #0
    4c02:	e71e      	b.n	4a42 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    4c04:	2100      	movs	r1, #0
    4c06:	4640      	mov	r0, r8
    4c08:	4b35      	ldr	r3, [pc, #212]	; (4ce0 <i2c_master_init+0x2ec>)
    4c0a:	4798      	blx	r3
    4c0c:	e74a      	b.n	4aa4 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    4c0e:	2101      	movs	r1, #1
    4c10:	4640      	mov	r0, r8
    4c12:	4b33      	ldr	r3, [pc, #204]	; (4ce0 <i2c_master_init+0x2ec>)
    4c14:	4798      	blx	r3
    4c16:	0007      	movs	r7, r0
    4c18:	e751      	b.n	4abe <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    4c1a:	26fa      	movs	r6, #250	; 0xfa
    4c1c:	00b6      	lsls	r6, r6, #2
    4c1e:	4653      	mov	r3, sl
    4c20:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    4c22:	9800      	ldr	r0, [sp, #0]
    4c24:	9901      	ldr	r1, [sp, #4]
    4c26:	0002      	movs	r2, r0
    4c28:	000b      	movs	r3, r1
    4c2a:	4c27      	ldr	r4, [pc, #156]	; (4cc8 <i2c_master_init+0x2d4>)
    4c2c:	47a0      	blx	r4
    4c2e:	9000      	str	r0, [sp, #0]
    4c30:	9101      	str	r1, [sp, #4]
    4c32:	0030      	movs	r0, r6
    4c34:	4b20      	ldr	r3, [pc, #128]	; (4cb8 <i2c_master_init+0x2c4>)
    4c36:	4798      	blx	r3
    4c38:	2200      	movs	r2, #0
    4c3a:	4b2a      	ldr	r3, [pc, #168]	; (4ce4 <i2c_master_init+0x2f0>)
    4c3c:	47b8      	blx	r7
    4c3e:	0002      	movs	r2, r0
    4c40:	000b      	movs	r3, r1
    4c42:	9800      	ldr	r0, [sp, #0]
    4c44:	9901      	ldr	r1, [sp, #4]
    4c46:	4c24      	ldr	r4, [pc, #144]	; (4cd8 <i2c_master_init+0x2e4>)
    4c48:	47a0      	blx	r4
    4c4a:	2200      	movs	r2, #0
    4c4c:	4b21      	ldr	r3, [pc, #132]	; (4cd4 <i2c_master_init+0x2e0>)
    4c4e:	4c20      	ldr	r4, [pc, #128]	; (4cd0 <i2c_master_init+0x2dc>)
    4c50:	47a0      	blx	r4
    4c52:	4b22      	ldr	r3, [pc, #136]	; (4cdc <i2c_master_init+0x2e8>)
    4c54:	4798      	blx	r3
    4c56:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    4c58:	d00c      	beq.n	4c74 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    4c5a:	0031      	movs	r1, r6
    4c5c:	9807      	ldr	r0, [sp, #28]
    4c5e:	4b22      	ldr	r3, [pc, #136]	; (4ce8 <i2c_master_init+0x2f4>)
    4c60:	4798      	blx	r3
    4c62:	3802      	subs	r0, #2
    4c64:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    4c66:	002b      	movs	r3, r5
    4c68:	2dff      	cmp	r5, #255	; 0xff
    4c6a:	d80c      	bhi.n	4c86 <i2c_master_init+0x292>
    4c6c:	28ff      	cmp	r0, #255	; 0xff
    4c6e:	d9bc      	bls.n	4bea <i2c_master_init+0x1f6>
    4c70:	2040      	movs	r0, #64	; 0x40
    4c72:	e6e6      	b.n	4a42 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    4c74:	0071      	lsls	r1, r6, #1
    4c76:	1e48      	subs	r0, r1, #1
    4c78:	9b07      	ldr	r3, [sp, #28]
    4c7a:	469c      	mov	ip, r3
    4c7c:	4460      	add	r0, ip
    4c7e:	4b1a      	ldr	r3, [pc, #104]	; (4ce8 <i2c_master_init+0x2f4>)
    4c80:	4798      	blx	r3
    4c82:	3801      	subs	r0, #1
    4c84:	e7ef      	b.n	4c66 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    4c86:	2040      	movs	r0, #64	; 0x40
    4c88:	e6db      	b.n	4a42 <i2c_master_init+0x4e>
    4c8a:	46c0      	nop			; (mov r8, r8)
    4c8c:	0000d911 	.word	0x0000d911
    4c90:	40000400 	.word	0x40000400
    4c94:	0000eb81 	.word	0x0000eb81
    4c98:	0000eaf5 	.word	0x0000eaf5
    4c9c:	0000d74d 	.word	0x0000d74d
    4ca0:	00001461 	.word	0x00001461
    4ca4:	0000d94d 	.word	0x0000d94d
    4ca8:	20005d24 	.word	0x20005d24
    4cac:	0000eca9 	.word	0x0000eca9
    4cb0:	41002000 	.word	0x41002000
    4cb4:	0000eb9d 	.word	0x0000eb9d
    4cb8:	000183f9 	.word	0x000183f9
    4cbc:	000177a1 	.word	0x000177a1
    4cc0:	e826d695 	.word	0xe826d695
    4cc4:	3e112e0b 	.word	0x3e112e0b
    4cc8:	00016919 	.word	0x00016919
    4ccc:	40240000 	.word	0x40240000
    4cd0:	00017ca1 	.word	0x00017ca1
    4cd4:	3ff00000 	.word	0x3ff00000
    4cd8:	00016f39 	.word	0x00016f39
    4cdc:	0001830d 	.word	0x0001830d
    4ce0:	0000d799 	.word	0x0000d799
    4ce4:	40080000 	.word	0x40080000
    4ce8:	00015815 	.word	0x00015815

00004cec <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    4cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cee:	46ce      	mov	lr, r9
    4cf0:	4647      	mov	r7, r8
    4cf2:	b580      	push	{r7, lr}
    4cf4:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4cf6:	6803      	ldr	r3, [r0, #0]
    4cf8:	4699      	mov	r9, r3

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    4cfa:	4e14      	ldr	r6, [pc, #80]	; (4d4c <i2c_master_reset+0x60>)
    4cfc:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4cfe:	6825      	ldr	r5, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    4d00:	0028      	movs	r0, r5
    4d02:	4b13      	ldr	r3, [pc, #76]	; (4d50 <i2c_master_reset+0x64>)
    4d04:	4698      	mov	r8, r3
    4d06:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4d08:	231f      	movs	r3, #31
    4d0a:	4018      	ands	r0, r3
    4d0c:	2701      	movs	r7, #1
    4d0e:	0039      	movs	r1, r7
    4d10:	4081      	lsls	r1, r0
    4d12:	3361      	adds	r3, #97	; 0x61
    4d14:	4a0f      	ldr	r2, [pc, #60]	; (4d54 <i2c_master_reset+0x68>)
    4d16:	50d1      	str	r1, [r2, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    4d18:	0020      	movs	r0, r4
    4d1a:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    4d1c:	2383      	movs	r3, #131	; 0x83
    4d1e:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    4d20:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    4d22:	682b      	ldr	r3, [r5, #0]
    4d24:	2202      	movs	r2, #2
    4d26:	4393      	bics	r3, r2
    4d28:	602b      	str	r3, [r5, #0]
	cpu_irq_enter_critical();
    4d2a:	4b0b      	ldr	r3, [pc, #44]	; (4d58 <i2c_master_reset+0x6c>)
    4d2c:	4798      	blx	r3
	i2c_master_disable(module);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    4d2e:	6820      	ldr	r0, [r4, #0]
    4d30:	47c0      	blx	r8
    4d32:	4b0a      	ldr	r3, [pc, #40]	; (4d5c <i2c_master_reset+0x70>)
    4d34:	4798      	blx	r3
	cpu_irq_leave_critical();
    4d36:	4b0a      	ldr	r3, [pc, #40]	; (4d60 <i2c_master_reset+0x74>)
    4d38:	4798      	blx	r3
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    4d3a:	0020      	movs	r0, r4
    4d3c:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    4d3e:	464b      	mov	r3, r9
    4d40:	601f      	str	r7, [r3, #0]
}
    4d42:	bc0c      	pop	{r2, r3}
    4d44:	4690      	mov	r8, r2
    4d46:	4699      	mov	r9, r3
    4d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d4a:	46c0      	nop			; (mov r8, r8)
    4d4c:	000049e9 	.word	0x000049e9
    4d50:	0000d989 	.word	0x0000d989
    4d54:	e000e100 	.word	0xe000e100
    4d58:	0000d0fd 	.word	0x0000d0fd
    4d5c:	0000ebd1 	.word	0x0000ebd1
    4d60:	0000d13d 	.word	0x0000d13d

00004d64 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4d64:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    4d66:	7e1a      	ldrb	r2, [r3, #24]
    4d68:	0792      	lsls	r2, r2, #30
    4d6a:	d507      	bpl.n	4d7c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    4d6c:	2202      	movs	r2, #2
    4d6e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    4d70:	8b5b      	ldrh	r3, [r3, #26]
    4d72:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    4d74:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    4d76:	17db      	asrs	r3, r3, #31
    4d78:	4018      	ands	r0, r3
}
    4d7a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    4d7c:	8b5a      	ldrh	r2, [r3, #26]
    4d7e:	0752      	lsls	r2, r2, #29
    4d80:	d506      	bpl.n	4d90 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4d82:	6859      	ldr	r1, [r3, #4]
    4d84:	22c0      	movs	r2, #192	; 0xc0
    4d86:	0292      	lsls	r2, r2, #10
    4d88:	430a      	orrs	r2, r1
    4d8a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    4d8c:	2018      	movs	r0, #24
    4d8e:	e7f4      	b.n	4d7a <_i2c_master_address_response+0x16>
	return STATUS_OK;
    4d90:	2000      	movs	r0, #0
    4d92:	e7f2      	b.n	4d7a <_i2c_master_address_response+0x16>

00004d94 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    4d94:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4d96:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    4d98:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    4d9a:	2401      	movs	r4, #1
    4d9c:	2502      	movs	r5, #2
    4d9e:	7e11      	ldrb	r1, [r2, #24]
    4da0:	4221      	tst	r1, r4
    4da2:	d10b      	bne.n	4dbc <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    4da4:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    4da6:	4229      	tst	r1, r5
    4da8:	d106      	bne.n	4db8 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    4daa:	3301      	adds	r3, #1
    4dac:	b29b      	uxth	r3, r3
    4dae:	8901      	ldrh	r1, [r0, #8]
    4db0:	4299      	cmp	r1, r3
    4db2:	d8f4      	bhi.n	4d9e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    4db4:	2012      	movs	r0, #18
    4db6:	e002      	b.n	4dbe <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    4db8:	2000      	movs	r0, #0
    4dba:	e000      	b.n	4dbe <_i2c_master_wait_for_bus+0x2a>
    4dbc:	2000      	movs	r0, #0
}
    4dbe:	bd30      	pop	{r4, r5, pc}

00004dc0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    4dc0:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4dc2:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    4dc4:	6862      	ldr	r2, [r4, #4]
    4dc6:	2380      	movs	r3, #128	; 0x80
    4dc8:	02db      	lsls	r3, r3, #11
    4dca:	4313      	orrs	r3, r2
    4dcc:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    4dce:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    4dd0:	4b02      	ldr	r3, [pc, #8]	; (4ddc <_i2c_master_send_hs_master_code+0x1c>)
    4dd2:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    4dd4:	2301      	movs	r3, #1
    4dd6:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    4dd8:	bd10      	pop	{r4, pc}
    4dda:	46c0      	nop			; (mov r8, r8)
    4ddc:	00004d95 	.word	0x00004d95

00004de0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    4de0:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    4de2:	0080      	lsls	r0, r0, #2
    4de4:	4b16      	ldr	r3, [pc, #88]	; (4e40 <_tc_interrupt_handler+0x60>)
    4de6:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    4de8:	6823      	ldr	r3, [r4, #0]
    4dea:	7b9d      	ldrb	r5, [r3, #14]
    4dec:	7e22      	ldrb	r2, [r4, #24]
    4dee:	7e63      	ldrb	r3, [r4, #25]
    4df0:	4013      	ands	r3, r2
    4df2:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    4df4:	07eb      	lsls	r3, r5, #31
    4df6:	d406      	bmi.n	4e06 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    4df8:	07ab      	lsls	r3, r5, #30
    4dfa:	d40b      	bmi.n	4e14 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    4dfc:	06eb      	lsls	r3, r5, #27
    4dfe:	d410      	bmi.n	4e22 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    4e00:	06ab      	lsls	r3, r5, #26
    4e02:	d415      	bmi.n	4e30 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    4e04:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    4e06:	0020      	movs	r0, r4
    4e08:	68a3      	ldr	r3, [r4, #8]
    4e0a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    4e0c:	2301      	movs	r3, #1
    4e0e:	6822      	ldr	r2, [r4, #0]
    4e10:	7393      	strb	r3, [r2, #14]
    4e12:	e7f1      	b.n	4df8 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    4e14:	0020      	movs	r0, r4
    4e16:	68e3      	ldr	r3, [r4, #12]
    4e18:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    4e1a:	2302      	movs	r3, #2
    4e1c:	6822      	ldr	r2, [r4, #0]
    4e1e:	7393      	strb	r3, [r2, #14]
    4e20:	e7ec      	b.n	4dfc <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    4e22:	0020      	movs	r0, r4
    4e24:	6923      	ldr	r3, [r4, #16]
    4e26:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    4e28:	2310      	movs	r3, #16
    4e2a:	6822      	ldr	r2, [r4, #0]
    4e2c:	7393      	strb	r3, [r2, #14]
    4e2e:	e7e7      	b.n	4e00 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    4e30:	0020      	movs	r0, r4
    4e32:	6963      	ldr	r3, [r4, #20]
    4e34:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    4e36:	6823      	ldr	r3, [r4, #0]
    4e38:	2220      	movs	r2, #32
    4e3a:	739a      	strb	r2, [r3, #14]
}
    4e3c:	e7e2      	b.n	4e04 <_tc_interrupt_handler+0x24>
    4e3e:	46c0      	nop			; (mov r8, r8)
    4e40:	20004754 	.word	0x20004754

00004e44 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    4e44:	b510      	push	{r4, lr}
    4e46:	2000      	movs	r0, #0
    4e48:	4b01      	ldr	r3, [pc, #4]	; (4e50 <TC3_Handler+0xc>)
    4e4a:	4798      	blx	r3
    4e4c:	bd10      	pop	{r4, pc}
    4e4e:	46c0      	nop			; (mov r8, r8)
    4e50:	00004de1 	.word	0x00004de1

00004e54 <TC4_Handler>:
    4e54:	b510      	push	{r4, lr}
    4e56:	2001      	movs	r0, #1
    4e58:	4b01      	ldr	r3, [pc, #4]	; (4e60 <TC4_Handler+0xc>)
    4e5a:	4798      	blx	r3
    4e5c:	bd10      	pop	{r4, pc}
    4e5e:	46c0      	nop			; (mov r8, r8)
    4e60:	00004de1 	.word	0x00004de1

00004e64 <TC5_Handler>:
    4e64:	b510      	push	{r4, lr}
    4e66:	2002      	movs	r0, #2
    4e68:	4b01      	ldr	r3, [pc, #4]	; (4e70 <TC5_Handler+0xc>)
    4e6a:	4798      	blx	r3
    4e6c:	bd10      	pop	{r4, pc}
    4e6e:	46c0      	nop			; (mov r8, r8)
    4e70:	00004de1 	.word	0x00004de1

00004e74 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
    4e74:	b570      	push	{r4, r5, r6, lr}
    4e76:	000a      	movs	r2, r1
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
    4e78:	4b09      	ldr	r3, [pc, #36]	; (4ea0 <prvHelpCommand+0x2c>)
    4e7a:	681b      	ldr	r3, [r3, #0]
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	d00a      	beq.n	4e96 <prvHelpCommand+0x22>
		pxCommand = &xRegisteredCommands;
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
    4e80:	4c07      	ldr	r4, [pc, #28]	; (4ea0 <prvHelpCommand+0x2c>)
    4e82:	6825      	ldr	r5, [r4, #0]
    4e84:	682b      	ldr	r3, [r5, #0]
    4e86:	6859      	ldr	r1, [r3, #4]
    4e88:	4b06      	ldr	r3, [pc, #24]	; (4ea4 <prvHelpCommand+0x30>)
    4e8a:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
    4e8c:	6868      	ldr	r0, [r5, #4]
    4e8e:	6020      	str	r0, [r4, #0]

	if( pxCommand == NULL )
    4e90:	1e43      	subs	r3, r0, #1
    4e92:	4198      	sbcs	r0, r3
	{
		xReturn = pdTRUE;
	}

	return xReturn;
}
    4e94:	bd70      	pop	{r4, r5, r6, pc}
		pxCommand = &xRegisteredCommands;
    4e96:	4904      	ldr	r1, [pc, #16]	; (4ea8 <prvHelpCommand+0x34>)
    4e98:	4b01      	ldr	r3, [pc, #4]	; (4ea0 <prvHelpCommand+0x2c>)
    4e9a:	6019      	str	r1, [r3, #0]
    4e9c:	e7f0      	b.n	4e80 <prvHelpCommand+0xc>
    4e9e:	46c0      	nop			; (mov r8, r8)
    4ea0:	20000be8 	.word	0x20000be8
    4ea4:	0001384b 	.word	0x0001384b
    4ea8:	200001fc 	.word	0x200001fc

00004eac <FreeRTOS_CLIRegisterCommand>:
{
    4eac:	b570      	push	{r4, r5, r6, lr}
    4eae:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
    4eb0:	d006      	beq.n	4ec0 <FreeRTOS_CLIRegisterCommand+0x14>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
    4eb2:	2008      	movs	r0, #8
    4eb4:	4b0a      	ldr	r3, [pc, #40]	; (4ee0 <FreeRTOS_CLIRegisterCommand+0x34>)
    4eb6:	4798      	blx	r3
    4eb8:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
    4eba:	d103      	bne.n	4ec4 <FreeRTOS_CLIRegisterCommand+0x18>
    4ebc:	b672      	cpsid	i
    4ebe:	e7fe      	b.n	4ebe <FreeRTOS_CLIRegisterCommand+0x12>
	configASSERT( pxCommandToRegister );
    4ec0:	b672      	cpsid	i
    4ec2:	e7fe      	b.n	4ec2 <FreeRTOS_CLIRegisterCommand+0x16>
		taskENTER_CRITICAL();
    4ec4:	4b07      	ldr	r3, [pc, #28]	; (4ee4 <FreeRTOS_CLIRegisterCommand+0x38>)
    4ec6:	4798      	blx	r3
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
    4ec8:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
    4eca:	2300      	movs	r3, #0
    4ecc:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
    4ece:	4b06      	ldr	r3, [pc, #24]	; (4ee8 <FreeRTOS_CLIRegisterCommand+0x3c>)
    4ed0:	681a      	ldr	r2, [r3, #0]
    4ed2:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
    4ed4:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
    4ed6:	4b05      	ldr	r3, [pc, #20]	; (4eec <FreeRTOS_CLIRegisterCommand+0x40>)
    4ed8:	4798      	blx	r3
}
    4eda:	2001      	movs	r0, #1
    4edc:	bd70      	pop	{r4, r5, r6, pc}
    4ede:	46c0      	nop			; (mov r8, r8)
    4ee0:	00006355 	.word	0x00006355
    4ee4:	00006291 	.word	0x00006291
    4ee8:	200001f8 	.word	0x200001f8
    4eec:	000062a9 	.word	0x000062a9

00004ef0 <FreeRTOS_CLIProcessCommand>:
{
    4ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ef2:	46de      	mov	lr, fp
    4ef4:	4657      	mov	r7, sl
    4ef6:	464e      	mov	r6, r9
    4ef8:	4645      	mov	r5, r8
    4efa:	b5e0      	push	{r5, r6, r7, lr}
    4efc:	b083      	sub	sp, #12
    4efe:	0006      	movs	r6, r0
    4f00:	9100      	str	r1, [sp, #0]
    4f02:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
    4f04:	4b39      	ldr	r3, [pc, #228]	; (4fec <FreeRTOS_CLIProcessCommand+0xfc>)
    4f06:	681b      	ldr	r3, [r3, #0]
    4f08:	2b00      	cmp	r3, #0
    4f0a:	d011      	beq.n	4f30 <FreeRTOS_CLIProcessCommand+0x40>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
    4f0c:	681b      	ldr	r3, [r3, #0]
    4f0e:	689b      	ldr	r3, [r3, #8]
    4f10:	0032      	movs	r2, r6
    4f12:	9901      	ldr	r1, [sp, #4]
    4f14:	9800      	ldr	r0, [sp, #0]
    4f16:	4798      	blx	r3
		if( xReturn == pdFALSE )
    4f18:	2800      	cmp	r0, #0
    4f1a:	d102      	bne.n	4f22 <FreeRTOS_CLIProcessCommand+0x32>
			pxCommand = NULL;
    4f1c:	2200      	movs	r2, #0
    4f1e:	4b33      	ldr	r3, [pc, #204]	; (4fec <FreeRTOS_CLIProcessCommand+0xfc>)
    4f20:	601a      	str	r2, [r3, #0]
}
    4f22:	b003      	add	sp, #12
    4f24:	bc3c      	pop	{r2, r3, r4, r5}
    4f26:	4690      	mov	r8, r2
    4f28:	4699      	mov	r9, r3
    4f2a:	46a2      	mov	sl, r4
    4f2c:	46ab      	mov	fp, r5
    4f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    4f30:	4c2f      	ldr	r4, [pc, #188]	; (4ff0 <FreeRTOS_CLIProcessCommand+0x100>)
    4f32:	4b2e      	ldr	r3, [pc, #184]	; (4fec <FreeRTOS_CLIProcessCommand+0xfc>)
    4f34:	601c      	str	r4, [r3, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    4f36:	4b2f      	ldr	r3, [pc, #188]	; (4ff4 <FreeRTOS_CLIProcessCommand+0x104>)
    4f38:	4699      	mov	r9, r3
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    4f3a:	2320      	movs	r3, #32
    4f3c:	4698      	mov	r8, r3
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    4f3e:	4b2e      	ldr	r3, [pc, #184]	; (4ff8 <FreeRTOS_CLIProcessCommand+0x108>)
    4f40:	469b      	mov	fp, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    4f42:	4b2a      	ldr	r3, [pc, #168]	; (4fec <FreeRTOS_CLIProcessCommand+0xfc>)
    4f44:	469a      	mov	sl, r3
    4f46:	e00a      	b.n	4f5e <FreeRTOS_CLIProcessCommand+0x6e>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    4f48:	0002      	movs	r2, r0
    4f4a:	0029      	movs	r1, r5
    4f4c:	0030      	movs	r0, r6
    4f4e:	47d8      	blx	fp
    4f50:	2800      	cmp	r0, #0
    4f52:	d00d      	beq.n	4f70 <FreeRTOS_CLIProcessCommand+0x80>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    4f54:	6864      	ldr	r4, [r4, #4]
    4f56:	4653      	mov	r3, sl
    4f58:	601c      	str	r4, [r3, #0]
    4f5a:	2c00      	cmp	r4, #0
    4f5c:	d03e      	beq.n	4fdc <FreeRTOS_CLIProcessCommand+0xec>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
    4f5e:	6827      	ldr	r7, [r4, #0]
    4f60:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    4f62:	0028      	movs	r0, r5
    4f64:	47c8      	blx	r9
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    4f66:	5c33      	ldrb	r3, [r6, r0]
    4f68:	4642      	mov	r2, r8
    4f6a:	4393      	bics	r3, r2
    4f6c:	d1f2      	bne.n	4f54 <FreeRTOS_CLIProcessCommand+0x64>
    4f6e:	e7eb      	b.n	4f48 <FreeRTOS_CLIProcessCommand+0x58>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
    4f70:	7b3f      	ldrb	r7, [r7, #12]
    4f72:	b27f      	sxtb	r7, r7
    4f74:	2f00      	cmp	r7, #0
    4f76:	db2d      	blt.n	4fd4 <FreeRTOS_CLIProcessCommand+0xe4>
{
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
    4f78:	7833      	ldrb	r3, [r6, #0]
    4f7a:	2b00      	cmp	r3, #0
    4f7c:	d028      	beq.n	4fd0 <FreeRTOS_CLIProcessCommand+0xe0>
    4f7e:	0032      	movs	r2, r6
    4f80:	2500      	movs	r5, #0
    4f82:	2100      	movs	r1, #0
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
    4f84:	2401      	movs	r4, #1
    4f86:	e008      	b.n	4f9a <FreeRTOS_CLIProcessCommand+0xaa>
    4f88:	2901      	cmp	r1, #1
    4f8a:	d00a      	beq.n	4fa2 <FreeRTOS_CLIProcessCommand+0xb2>
			{
				cParameters++;
    4f8c:	3501      	adds	r5, #1
    4f8e:	b26d      	sxtb	r5, r5
				xLastCharacterWasSpace = pdTRUE;
    4f90:	0021      	movs	r1, r4
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
    4f92:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
    4f94:	7813      	ldrb	r3, [r2, #0]
    4f96:	2b00      	cmp	r3, #0
    4f98:	d005      	beq.n	4fa6 <FreeRTOS_CLIProcessCommand+0xb6>
		if( ( *pcCommandString ) == ' ' )
    4f9a:	2b20      	cmp	r3, #32
    4f9c:	d0f4      	beq.n	4f88 <FreeRTOS_CLIProcessCommand+0x98>
			xLastCharacterWasSpace = pdFALSE;
    4f9e:	0001      	movs	r1, r0
    4fa0:	e7f7      	b.n	4f92 <FreeRTOS_CLIProcessCommand+0xa2>
			if( xLastCharacterWasSpace != pdTRUE )
    4fa2:	0021      	movs	r1, r4
    4fa4:	e7f5      	b.n	4f92 <FreeRTOS_CLIProcessCommand+0xa2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
    4fa6:	2901      	cmp	r1, #1
    4fa8:	d00f      	beq.n	4fca <FreeRTOS_CLIProcessCommand+0xda>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    4faa:	4b10      	ldr	r3, [pc, #64]	; (4fec <FreeRTOS_CLIProcessCommand+0xfc>)
    4fac:	681b      	ldr	r3, [r3, #0]
    4fae:	2b00      	cmp	r3, #0
    4fb0:	d014      	beq.n	4fdc <FreeRTOS_CLIProcessCommand+0xec>
    4fb2:	42af      	cmp	r7, r5
    4fb4:	d0aa      	beq.n	4f0c <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    4fb6:	9a01      	ldr	r2, [sp, #4]
    4fb8:	4910      	ldr	r1, [pc, #64]	; (4ffc <FreeRTOS_CLIProcessCommand+0x10c>)
    4fba:	9800      	ldr	r0, [sp, #0]
    4fbc:	4b10      	ldr	r3, [pc, #64]	; (5000 <FreeRTOS_CLIProcessCommand+0x110>)
    4fbe:	4798      	blx	r3
		pxCommand = NULL;
    4fc0:	2200      	movs	r2, #0
    4fc2:	4b0a      	ldr	r3, [pc, #40]	; (4fec <FreeRTOS_CLIProcessCommand+0xfc>)
    4fc4:	601a      	str	r2, [r3, #0]
    4fc6:	2000      	movs	r0, #0
    4fc8:	e7ab      	b.n	4f22 <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
    4fca:	3d01      	subs	r5, #1
    4fcc:	b26d      	sxtb	r5, r5
    4fce:	e7ec      	b.n	4faa <FreeRTOS_CLIProcessCommand+0xba>
	while( *pcCommandString != 0x00 )
    4fd0:	2500      	movs	r5, #0
    4fd2:	e7ea      	b.n	4faa <FreeRTOS_CLIProcessCommand+0xba>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    4fd4:	4b05      	ldr	r3, [pc, #20]	; (4fec <FreeRTOS_CLIProcessCommand+0xfc>)
    4fd6:	681b      	ldr	r3, [r3, #0]
    4fd8:	2b00      	cmp	r3, #0
    4fda:	d197      	bne.n	4f0c <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    4fdc:	9a01      	ldr	r2, [sp, #4]
    4fde:	4909      	ldr	r1, [pc, #36]	; (5004 <FreeRTOS_CLIProcessCommand+0x114>)
    4fe0:	9800      	ldr	r0, [sp, #0]
    4fe2:	4b07      	ldr	r3, [pc, #28]	; (5000 <FreeRTOS_CLIProcessCommand+0x110>)
    4fe4:	4798      	blx	r3
		xReturn = pdFALSE;
    4fe6:	2000      	movs	r0, #0
	return xReturn;
    4fe8:	e79b      	b.n	4f22 <FreeRTOS_CLIProcessCommand+0x32>
    4fea:	46c0      	nop			; (mov r8, r8)
    4fec:	20000be4 	.word	0x20000be4
    4ff0:	200001fc 	.word	0x200001fc
    4ff4:	0001381b 	.word	0x0001381b
    4ff8:	00013829 	.word	0x00013829
    4ffc:	0001972c 	.word	0x0001972c
    5000:	0001384b 	.word	0x0001384b
    5004:	00019784 	.word	0x00019784

00005008 <prvTraceGetQueueType>:
	return (uint32_t)uxQueueGetQueueNumber(handle);
}
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
    5008:	b510      	push	{r4, lr}
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
    500a:	4b01      	ldr	r3, [pc, #4]	; (5010 <prvTraceGetQueueType+0x8>)
    500c:	4798      	blx	r3
}
    500e:	bd10      	pop	{r4, pc}
    5010:	00007545 	.word	0x00007545

00005014 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
    5014:	b510      	push	{r4, lr}
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
    5016:	4b02      	ldr	r3, [pc, #8]	; (5020 <prvTraceGetTaskNumberLow16+0xc>)
    5018:	4798      	blx	r3
    501a:	b280      	uxth	r0, r0
}
    501c:	bd10      	pop	{r4, pc}
    501e:	46c0      	nop			; (mov r8, r8)
    5020:	00008195 	.word	0x00008195

00005024 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
    5024:	b510      	push	{r4, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
    5026:	4b02      	ldr	r3, [pc, #8]	; (5030 <prvTraceGetTaskNumberHigh16+0xc>)
    5028:	4798      	blx	r3
    502a:	0c00      	lsrs	r0, r0, #16
}
    502c:	bd10      	pop	{r4, pc}
    502e:	46c0      	nop			; (mov r8, r8)
    5030:	00008195 	.word	0x00008195

00005034 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
    5034:	b570      	push	{r4, r5, r6, lr}
    5036:	0004      	movs	r4, r0
    5038:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
    503a:	4b04      	ldr	r3, [pc, #16]	; (504c <prvTraceSetTaskNumberLow16+0x18>)
    503c:	4798      	blx	r3
    503e:	0c01      	lsrs	r1, r0, #16
    5040:	0409      	lsls	r1, r1, #16
    5042:	4329      	orrs	r1, r5
    5044:	0020      	movs	r0, r4
    5046:	4b02      	ldr	r3, [pc, #8]	; (5050 <prvTraceSetTaskNumberLow16+0x1c>)
    5048:	4798      	blx	r3
}
    504a:	bd70      	pop	{r4, r5, r6, pc}
    504c:	00008195 	.word	0x00008195
    5050:	000081a1 	.word	0x000081a1

00005054 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
    5054:	b570      	push	{r4, r5, r6, lr}
    5056:	0004      	movs	r4, r0
    5058:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
    505a:	4b05      	ldr	r3, [pc, #20]	; (5070 <prvTraceSetTaskNumberHigh16+0x1c>)
    505c:	4798      	blx	r3
    505e:	0401      	lsls	r1, r0, #16
    5060:	0c09      	lsrs	r1, r1, #16
    5062:	042d      	lsls	r5, r5, #16
    5064:	4329      	orrs	r1, r5
    5066:	0020      	movs	r0, r4
    5068:	4b02      	ldr	r3, [pc, #8]	; (5074 <prvTraceSetTaskNumberHigh16+0x20>)
    506a:	4798      	blx	r3
}
    506c:	bd70      	pop	{r4, r5, r6, pc}
    506e:	46c0      	nop			; (mov r8, r8)
    5070:	00008195 	.word	0x00008195
    5074:	000081a1 	.word	0x000081a1

00005078 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
    5078:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
    507a:	4b02      	ldr	r3, [pc, #8]	; (5084 <prvTraceGetQueueNumberLow16+0xc>)
    507c:	4798      	blx	r3
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
    507e:	b280      	uxth	r0, r0
}
    5080:	bd10      	pop	{r4, pc}
    5082:	46c0      	nop			; (mov r8, r8)
    5084:	0000753d 	.word	0x0000753d

00005088 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
    5088:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
    508a:	4b02      	ldr	r3, [pc, #8]	; (5094 <prvTraceGetQueueNumberHigh16+0xc>)
    508c:	4798      	blx	r3
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
    508e:	0c00      	lsrs	r0, r0, #16
}
    5090:	bd10      	pop	{r4, pc}
    5092:	46c0      	nop			; (mov r8, r8)
    5094:	0000753d 	.word	0x0000753d

00005098 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
    5098:	b570      	push	{r4, r5, r6, lr}
    509a:	0004      	movs	r4, r0
    509c:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
    509e:	4b04      	ldr	r3, [pc, #16]	; (50b0 <prvTraceSetQueueNumberLow16+0x18>)
    50a0:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
    50a2:	0c01      	lsrs	r1, r0, #16
    50a4:	0409      	lsls	r1, r1, #16
    50a6:	4329      	orrs	r1, r5
    50a8:	0020      	movs	r0, r4
    50aa:	4b02      	ldr	r3, [pc, #8]	; (50b4 <prvTraceSetQueueNumberLow16+0x1c>)
    50ac:	4798      	blx	r3
}
    50ae:	bd70      	pop	{r4, r5, r6, pc}
    50b0:	0000753d 	.word	0x0000753d
    50b4:	00007541 	.word	0x00007541

000050b8 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
    50b8:	b570      	push	{r4, r5, r6, lr}
    50ba:	0004      	movs	r4, r0
    50bc:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
    50be:	4b05      	ldr	r3, [pc, #20]	; (50d4 <prvTraceSetQueueNumberHigh16+0x1c>)
    50c0:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
    50c2:	0401      	lsls	r1, r0, #16
    50c4:	0c09      	lsrs	r1, r1, #16
    50c6:	042d      	lsls	r5, r5, #16
    50c8:	4329      	orrs	r1, r5
    50ca:	0020      	movs	r0, r4
    50cc:	4b02      	ldr	r3, [pc, #8]	; (50d8 <prvTraceSetQueueNumberHigh16+0x20>)
    50ce:	4798      	blx	r3
}
    50d0:	bd70      	pop	{r4, r5, r6, pc}
    50d2:	46c0      	nop			; (mov r8, r8)
    50d4:	0000753d 	.word	0x0000753d
    50d8:	00007541 	.word	0x00007541

000050dc <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
    50dc:	b510      	push	{r4, lr}
	return xTaskGetCurrentTaskHandle();
    50de:	4b01      	ldr	r3, [pc, #4]	; (50e4 <prvTraceGetCurrentTaskHandle+0x8>)
    50e0:	4798      	blx	r3
}
    50e2:	bd10      	pop	{r4, pc}
    50e4:	000081a9 	.word	0x000081a9

000050e8 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
    50e8:	b510      	push	{r4, lr}
    50ea:	0004      	movs	r4, r0
	prvTraceInitTraceData();
    50ec:	4b09      	ldr	r3, [pc, #36]	; (5114 <vTraceEnable+0x2c>)
    50ee:	4798      	blx	r3

	if (startOption == TRC_START)
    50f0:	2c01      	cmp	r4, #1
    50f2:	d004      	beq.n	50fe <vTraceEnable+0x16>
	{
		vTraceStart();
	}
	else if (startOption == TRC_START_AWAIT_HOST)
    50f4:	2c02      	cmp	r4, #2
    50f6:	d005      	beq.n	5104 <vTraceEnable+0x1c>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
	}
	else if (startOption != TRC_INIT)
    50f8:	2c00      	cmp	r4, #0
    50fa:	d107      	bne.n	510c <vTraceEnable+0x24>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
    50fc:	bd10      	pop	{r4, pc}
		vTraceStart();
    50fe:	4b06      	ldr	r3, [pc, #24]	; (5118 <vTraceEnable+0x30>)
    5100:	4798      	blx	r3
    5102:	e7fb      	b.n	50fc <vTraceEnable+0x14>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
    5104:	4805      	ldr	r0, [pc, #20]	; (511c <vTraceEnable+0x34>)
    5106:	4b06      	ldr	r3, [pc, #24]	; (5120 <vTraceEnable+0x38>)
    5108:	4798      	blx	r3
    510a:	e7f7      	b.n	50fc <vTraceEnable+0x14>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
    510c:	4805      	ldr	r0, [pc, #20]	; (5124 <vTraceEnable+0x3c>)
    510e:	4b04      	ldr	r3, [pc, #16]	; (5120 <vTraceEnable+0x38>)
    5110:	4798      	blx	r3
}
    5112:	e7f3      	b.n	50fc <vTraceEnable+0x14>
    5114:	0000530d 	.word	0x0000530d
    5118:	000060ed 	.word	0x000060ed
    511c:	00019b40 	.word	0x00019b40
    5120:	000054e5 	.word	0x000054e5
    5124:	00019b80 	.word	0x00019b80

00005128 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
    5128:	b510      	push	{r4, lr}
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
    512a:	4b2f      	ldr	r3, [pc, #188]	; (51e8 <vTraceInitObjectPropertyTable+0xc0>)
    512c:	681b      	ldr	r3, [r3, #0]
    512e:	2209      	movs	r2, #9
    5130:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
    5132:	3201      	adds	r2, #1
    5134:	2164      	movs	r1, #100	; 0x64
    5136:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
    5138:	3101      	adds	r1, #1
    513a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
    513c:	3101      	adds	r1, #1
    513e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
    5140:	3205      	adds	r2, #5
    5142:	3101      	adds	r1, #1
    5144:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
    5146:	3962      	subs	r1, #98	; 0x62
    5148:	2068      	movs	r0, #104	; 0x68
    514a:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
    514c:	3001      	adds	r0, #1
    514e:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
    5150:	3001      	adds	r0, #1
    5152:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
    5154:	3001      	adds	r0, #1
    5156:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
    5158:	3001      	adds	r0, #1
    515a:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
    515c:	316b      	adds	r1, #107	; 0x6b
    515e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
    5160:	3101      	adds	r1, #1
    5162:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
    5164:	3101      	adds	r1, #1
    5166:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
    5168:	3101      	adds	r1, #1
    516a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
    516c:	3101      	adds	r1, #1
    516e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
    5170:	3101      	adds	r1, #1
    5172:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
    5174:	3101      	adds	r1, #1
    5176:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
    5178:	3101      	adds	r1, #1
    517a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
    517c:	3101      	adds	r1, #1
    517e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
    5180:	3968      	subs	r1, #104	; 0x68
    5182:	326d      	adds	r2, #109	; 0x6d
    5184:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
    5186:	3201      	adds	r2, #1
    5188:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
    518a:	3201      	adds	r2, #1
    518c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
    518e:	3a6b      	subs	r2, #107	; 0x6b
    5190:	3013      	adds	r0, #19
    5192:	541a      	strb	r2, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
    5194:	2411      	movs	r4, #17
    5196:	3001      	adds	r0, #1
    5198:	541c      	strb	r4, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
    519a:	3001      	adds	r0, #1
    519c:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
    519e:	3172      	adds	r1, #114	; 0x72
    51a0:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
    51a2:	3101      	adds	r1, #1
    51a4:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
    51a6:	3101      	adds	r1, #1
    51a8:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
    51aa:	2100      	movs	r1, #0
    51ac:	3275      	adds	r2, #117	; 0x75
    51ae:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
    51b0:	31a0      	adds	r1, #160	; 0xa0
    51b2:	3202      	adds	r2, #2
    51b4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
    51b6:	31a0      	adds	r1, #160	; 0xa0
    51b8:	3202      	adds	r2, #2
    51ba:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
    51bc:	31a0      	adds	r1, #160	; 0xa0
    51be:	3202      	adds	r2, #2
    51c0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
    51c2:	490a      	ldr	r1, [pc, #40]	; (51ec <vTraceInitObjectPropertyTable+0xc4>)
    51c4:	3202      	adds	r2, #2
    51c6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
    51c8:	4909      	ldr	r1, [pc, #36]	; (51f0 <vTraceInitObjectPropertyTable+0xc8>)
    51ca:	3202      	adds	r2, #2
    51cc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
    51ce:	4909      	ldr	r1, [pc, #36]	; (51f4 <vTraceInitObjectPropertyTable+0xcc>)
    51d0:	3202      	adds	r2, #2
    51d2:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
    51d4:	4908      	ldr	r1, [pc, #32]	; (51f8 <vTraceInitObjectPropertyTable+0xd0>)
    51d6:	3202      	adds	r2, #2
    51d8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
    51da:	315f      	adds	r1, #95	; 0x5f
    51dc:	3202      	adds	r2, #2
    51de:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
    51e0:	4a06      	ldr	r2, [pc, #24]	; (51fc <vTraceInitObjectPropertyTable+0xd4>)
    51e2:	661a      	str	r2, [r3, #96]	; 0x60
}
    51e4:	bd10      	pop	{r4, pc}
    51e6:	46c0      	nop			; (mov r8, r8)
    51e8:	20000bec 	.word	0x20000bec
    51ec:	000002fd 	.word	0x000002fd
    51f0:	00000352 	.word	0x00000352
    51f4:	000003a2 	.word	0x000003a2
    51f8:	00000401 	.word	0x00000401
    51fc:	000004bf 	.word	0x000004bf

00005200 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
    5200:	4b17      	ldr	r3, [pc, #92]	; (5260 <vTraceInitObjectHandleStack+0x60>)
    5202:	2200      	movs	r2, #0
    5204:	825a      	strh	r2, [r3, #18]
    5206:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
    5208:	320a      	adds	r2, #10
    520a:	829a      	strh	r2, [r3, #20]
    520c:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
    520e:	320a      	adds	r2, #10
    5210:	82da      	strh	r2, [r3, #22]
    5212:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
    5214:	320a      	adds	r2, #10
    5216:	831a      	strh	r2, [r3, #24]
    5218:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
    521a:	320f      	adds	r2, #15
    521c:	835a      	strh	r2, [r3, #26]
    521e:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
    5220:	3205      	adds	r2, #5
    5222:	839a      	strh	r2, [r3, #28]
    5224:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
    5226:	3205      	adds	r2, #5
    5228:	83da      	strh	r2, [r3, #30]
    522a:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
    522c:	3205      	adds	r2, #5
    522e:	841a      	strh	r2, [r3, #32]
    5230:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
    5232:	3205      	adds	r2, #5
    5234:	845a      	strh	r2, [r3, #34]	; 0x22
    5236:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
    5238:	3a38      	subs	r2, #56	; 0x38
    523a:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
    523c:	320a      	adds	r2, #10
    523e:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
    5240:	320a      	adds	r2, #10
    5242:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
    5244:	320f      	adds	r2, #15
    5246:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
    5248:	3205      	adds	r2, #5
    524a:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
    524c:	3205      	adds	r2, #5
    524e:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
    5250:	3205      	adds	r2, #5
    5252:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
    5254:	3205      	adds	r2, #5
    5256:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
    5258:	3205      	adds	r2, #5
    525a:	869a      	strh	r2, [r3, #52]	; 0x34
}
    525c:	4770      	bx	lr
    525e:	46c0      	nop			; (mov r8, r8)
    5260:	20000c08 	.word	0x20000c08

00005264 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
	switch(objectclass)
    5264:	2808      	cmp	r0, #8
    5266:	d813      	bhi.n	5290 <pszTraceGetErrorNotEnoughHandles+0x2c>
    5268:	0080      	lsls	r0, r0, #2
    526a:	4b0b      	ldr	r3, [pc, #44]	; (5298 <pszTraceGetErrorNotEnoughHandles+0x34>)
    526c:	581b      	ldr	r3, [r3, r0]
    526e:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
    5270:	480a      	ldr	r0, [pc, #40]	; (529c <pszTraceGetErrorNotEnoughHandles+0x38>)
    5272:	e010      	b.n	5296 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
    5274:	480a      	ldr	r0, [pc, #40]	; (52a0 <pszTraceGetErrorNotEnoughHandles+0x3c>)
    5276:	e00e      	b.n	5296 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
    5278:	480a      	ldr	r0, [pc, #40]	; (52a4 <pszTraceGetErrorNotEnoughHandles+0x40>)
    527a:	e00c      	b.n	5296 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
    527c:	480a      	ldr	r0, [pc, #40]	; (52a8 <pszTraceGetErrorNotEnoughHandles+0x44>)
    527e:	e00a      	b.n	5296 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
    5280:	480a      	ldr	r0, [pc, #40]	; (52ac <pszTraceGetErrorNotEnoughHandles+0x48>)
    5282:	e008      	b.n	5296 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
    5284:	480a      	ldr	r0, [pc, #40]	; (52b0 <pszTraceGetErrorNotEnoughHandles+0x4c>)
    5286:	e006      	b.n	5296 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
    5288:	480a      	ldr	r0, [pc, #40]	; (52b4 <pszTraceGetErrorNotEnoughHandles+0x50>)
    528a:	e004      	b.n	5296 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
    528c:	480a      	ldr	r0, [pc, #40]	; (52b8 <pszTraceGetErrorNotEnoughHandles+0x54>)
    528e:	e002      	b.n	5296 <pszTraceGetErrorNotEnoughHandles+0x32>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
    5290:	480a      	ldr	r0, [pc, #40]	; (52bc <pszTraceGetErrorNotEnoughHandles+0x58>)
    5292:	e000      	b.n	5296 <pszTraceGetErrorNotEnoughHandles+0x32>
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
    5294:	480a      	ldr	r0, [pc, #40]	; (52c0 <pszTraceGetErrorNotEnoughHandles+0x5c>)
	}
}
    5296:	4770      	bx	lr
    5298:	0001981c 	.word	0x0001981c
    529c:	00019888 	.word	0x00019888
    52a0:	000198d0 	.word	0x000198d0
    52a4:	00019924 	.word	0x00019924
    52a8:	00019970 	.word	0x00019970
    52ac:	000199bc 	.word	0x000199bc
    52b0:	00019a08 	.word	0x00019a08
    52b4:	00019a5c 	.word	0x00019a5c
    52b8:	00019ab4 	.word	0x00019ab4
    52bc:	00019b10 	.word	0x00019b10
    52c0:	00019840 	.word	0x00019840

000052c4 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
    52c4:	b510      	push	{r4, lr}
	uint32_t i;
	for (i = 0; i < maxLength; i++)
    52c6:	2a00      	cmp	r2, #0
    52c8:	d00d      	beq.n	52e6 <prvStrncpy+0x22>
	{
		dst[i] = src[i];
    52ca:	780b      	ldrb	r3, [r1, #0]
    52cc:	7003      	strb	r3, [r0, #0]
		if (src[i] == 0)
    52ce:	780b      	ldrb	r3, [r1, #0]
    52d0:	2b00      	cmp	r3, #0
    52d2:	d008      	beq.n	52e6 <prvStrncpy+0x22>
    52d4:	2300      	movs	r3, #0
	for (i = 0; i < maxLength; i++)
    52d6:	3301      	adds	r3, #1
    52d8:	429a      	cmp	r2, r3
    52da:	d004      	beq.n	52e6 <prvStrncpy+0x22>
		dst[i] = src[i];
    52dc:	5ccc      	ldrb	r4, [r1, r3]
    52de:	54c4      	strb	r4, [r0, r3]
		if (src[i] == 0)
    52e0:	5ccc      	ldrb	r4, [r1, r3]
    52e2:	2c00      	cmp	r4, #0
    52e4:	d1f7      	bne.n	52d6 <prvStrncpy+0x12>
			break;
	}
}
    52e6:	bd10      	pop	{r4, pc}

000052e8 <vTraceStop>:
{
    52e8:	b510      	push	{r4, lr}
	if (RecorderDataPtr != NULL)
    52ea:	4b06      	ldr	r3, [pc, #24]	; (5304 <vTraceStop+0x1c>)
    52ec:	681b      	ldr	r3, [r3, #0]
    52ee:	2b00      	cmp	r3, #0
    52f0:	d001      	beq.n	52f6 <vTraceStop+0xe>
		RecorderDataPtr->recorderActive = 0;
    52f2:	2200      	movs	r2, #0
    52f4:	631a      	str	r2, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
    52f6:	4b04      	ldr	r3, [pc, #16]	; (5308 <vTraceStop+0x20>)
    52f8:	681b      	ldr	r3, [r3, #0]
    52fa:	2b00      	cmp	r3, #0
    52fc:	d000      	beq.n	5300 <vTraceStop+0x18>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
    52fe:	4798      	blx	r3
}
    5300:	bd10      	pop	{r4, pc}
    5302:	46c0      	nop			; (mov r8, r8)
    5304:	20000bec 	.word	0x20000bec
    5308:	20000cb4 	.word	0x20000cb4

0000530c <prvTraceInitTraceData>:
{	
    530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    530e:	46de      	mov	lr, fp
    5310:	4657      	mov	r7, sl
    5312:	464e      	mov	r6, r9
    5314:	4645      	mov	r5, r8
    5316:	b5e0      	push	{r5, r6, r7, lr}
	if (RecorderDataPtr == NULL)
    5318:	4b51      	ldr	r3, [pc, #324]	; (5460 <prvTraceInitTraceData+0x154>)
    531a:	681b      	ldr	r3, [r3, #0]
    531c:	2b00      	cmp	r3, #0
    531e:	d100      	bne.n	5322 <prvTraceInitTraceData+0x16>
    5320:	e099      	b.n	5456 <prvTraceInitTraceData+0x14a>
		if (RecorderDataPtr->startmarker0 == 1)
    5322:	781b      	ldrb	r3, [r3, #0]
    5324:	2b01      	cmp	r3, #1
    5326:	d100      	bne.n	532a <prvTraceInitTraceData+0x1e>
    5328:	e08f      	b.n	544a <prvTraceInitTraceData+0x13e>
	init_hwtc_count = TRC_HWTC_COUNT;
    532a:	4b4e      	ldr	r3, [pc, #312]	; (5464 <prvTraceInitTraceData+0x158>)
    532c:	681a      	ldr	r2, [r3, #0]
    532e:	4b4e      	ldr	r3, [pc, #312]	; (5468 <prvTraceInitTraceData+0x15c>)
    5330:	601a      	str	r2, [r3, #0]
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
    5332:	4c4b      	ldr	r4, [pc, #300]	; (5460 <prvTraceInitTraceData+0x154>)
    5334:	4d4d      	ldr	r5, [pc, #308]	; (546c <prvTraceInitTraceData+0x160>)
    5336:	002a      	movs	r2, r5
    5338:	2100      	movs	r1, #0
    533a:	6820      	ldr	r0, [r4, #0]
    533c:	4b4c      	ldr	r3, [pc, #304]	; (5470 <prvTraceInitTraceData+0x164>)
    533e:	4798      	blx	r3
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
    5340:	6823      	ldr	r3, [r4, #0]
    5342:	4a4c      	ldr	r2, [pc, #304]	; (5474 <prvTraceInitTraceData+0x168>)
    5344:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
    5346:	2205      	movs	r2, #5
    5348:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
    534a:	2200      	movs	r2, #0
    534c:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
    534e:	611d      	str	r5, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
    5350:	21c8      	movs	r1, #200	; 0xc8
    5352:	0049      	lsls	r1, r1, #1
    5354:	6199      	str	r1, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
    5356:	4948      	ldr	r1, [pc, #288]	; (5478 <prvTraceInitTraceData+0x16c>)
    5358:	6559      	str	r1, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
    535a:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
    535c:	635a      	str	r2, [r3, #52]	; 0x34
	vTraceInitObjectPropertyTable();
    535e:	4b47      	ldr	r3, [pc, #284]	; (547c <prvTraceInitTraceData+0x170>)
    5360:	4798      	blx	r3
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
    5362:	6820      	ldr	r0, [r4, #0]
    5364:	4a46      	ldr	r2, [pc, #280]	; (5480 <prvTraceInitTraceData+0x174>)
    5366:	4b47      	ldr	r3, [pc, #284]	; (5484 <prvTraceInitTraceData+0x178>)
    5368:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
    536a:	22c8      	movs	r2, #200	; 0xc8
    536c:	0092      	lsls	r2, r2, #2
    536e:	3304      	adds	r3, #4
    5370:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
    5372:	4b45      	ldr	r3, [pc, #276]	; (5488 <prvTraceInitTraceData+0x17c>)
    5374:	2201      	movs	r2, #1
    5376:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
    5378:	4a44      	ldr	r2, [pc, #272]	; (548c <prvTraceInitTraceData+0x180>)
    537a:	2391      	movs	r3, #145	; 0x91
    537c:	011b      	lsls	r3, r3, #4
    537e:	50c2      	str	r2, [r0, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
    5380:	4b43      	ldr	r3, [pc, #268]	; (5490 <prvTraceInitTraceData+0x184>)
    5382:	469c      	mov	ip, r3
    5384:	4460      	add	r0, ip
    5386:	2250      	movs	r2, #80	; 0x50
    5388:	4942      	ldr	r1, [pc, #264]	; (5494 <prvTraceInitTraceData+0x188>)
    538a:	4b43      	ldr	r3, [pc, #268]	; (5498 <prvTraceInitTraceData+0x18c>)
    538c:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
    538e:	6823      	ldr	r3, [r4, #0]
    5390:	4942      	ldr	r1, [pc, #264]	; (549c <prvTraceInitTraceData+0x190>)
    5392:	4a43      	ldr	r2, [pc, #268]	; (54a0 <prvTraceInitTraceData+0x194>)
    5394:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
    5396:	210a      	movs	r1, #10
    5398:	4a42      	ldr	r2, [pc, #264]	; (54a4 <prvTraceInitTraceData+0x198>)
    539a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
    539c:	3101      	adds	r1, #1
    539e:	4a42      	ldr	r2, [pc, #264]	; (54a8 <prvTraceInitTraceData+0x19c>)
    53a0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
    53a2:	3101      	adds	r1, #1
    53a4:	4a41      	ldr	r2, [pc, #260]	; (54ac <prvTraceInitTraceData+0x1a0>)
    53a6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
    53a8:	3101      	adds	r1, #1
    53aa:	4a41      	ldr	r2, [pc, #260]	; (54b0 <prvTraceInitTraceData+0x1a4>)
    53ac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
    53ae:	3201      	adds	r2, #1
    53b0:	3164      	adds	r1, #100	; 0x64
    53b2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
    53b4:	2572      	movs	r5, #114	; 0x72
    53b6:	4a3f      	ldr	r2, [pc, #252]	; (54b4 <prvTraceInitTraceData+0x1a8>)
    53b8:	549d      	strb	r5, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
    53ba:	2673      	movs	r6, #115	; 0x73
    53bc:	4a3e      	ldr	r2, [pc, #248]	; (54b8 <prvTraceInitTraceData+0x1ac>)
    53be:	549e      	strb	r6, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
    53c0:	2774      	movs	r7, #116	; 0x74
    53c2:	4a3e      	ldr	r2, [pc, #248]	; (54bc <prvTraceInitTraceData+0x1b0>)
    53c4:	549f      	strb	r7, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
    53c6:	22f1      	movs	r2, #241	; 0xf1
    53c8:	4690      	mov	r8, r2
    53ca:	4a3d      	ldr	r2, [pc, #244]	; (54c0 <prvTraceInitTraceData+0x1b4>)
    53cc:	4641      	mov	r1, r8
    53ce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
    53d0:	22f2      	movs	r2, #242	; 0xf2
    53d2:	4691      	mov	r9, r2
    53d4:	4a3b      	ldr	r2, [pc, #236]	; (54c4 <prvTraceInitTraceData+0x1b8>)
    53d6:	4649      	mov	r1, r9
    53d8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
    53da:	22f3      	movs	r2, #243	; 0xf3
    53dc:	4692      	mov	sl, r2
    53de:	4a3a      	ldr	r2, [pc, #232]	; (54c8 <prvTraceInitTraceData+0x1bc>)
    53e0:	4651      	mov	r1, sl
    53e2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
    53e4:	22f4      	movs	r2, #244	; 0xf4
    53e6:	4693      	mov	fp, r2
    53e8:	4a38      	ldr	r2, [pc, #224]	; (54cc <prvTraceInitTraceData+0x1c0>)
    53ea:	4659      	mov	r1, fp
    53ec:	5499      	strb	r1, [r3, r2]
	vTraceInitObjectHandleStack();
    53ee:	4b38      	ldr	r3, [pc, #224]	; (54d0 <prvTraceInitTraceData+0x1c4>)
    53f0:	4798      	blx	r3
	RecorderDataPtr->startmarker11 = 0xF4;
    53f2:	6823      	ldr	r3, [r4, #0]
    53f4:	465a      	mov	r2, fp
    53f6:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
    53f8:	4652      	mov	r2, sl
    53fa:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
    53fc:	464a      	mov	r2, r9
    53fe:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
    5400:	4642      	mov	r2, r8
    5402:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
    5404:	71df      	strb	r7, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
    5406:	719e      	strb	r6, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
    5408:	715d      	strb	r5, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
    540a:	2271      	movs	r2, #113	; 0x71
    540c:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
    540e:	2204      	movs	r2, #4
    5410:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
    5412:	2303      	movs	r3, #3
    5414:	6822      	ldr	r2, [r4, #0]
    5416:	7093      	strb	r3, [r2, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
    5418:	3b01      	subs	r3, #1
    541a:	6822      	ldr	r2, [r4, #0]
    541c:	7053      	strb	r3, [r2, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
    541e:	6823      	ldr	r3, [r4, #0]
    5420:	2201      	movs	r2, #1
    5422:	701a      	strb	r2, [r3, #0]
	if (traceErrorMessage != NULL)
    5424:	4b2b      	ldr	r3, [pc, #172]	; (54d4 <prvTraceInitTraceData+0x1c8>)
    5426:	6819      	ldr	r1, [r3, #0]
    5428:	2900      	cmp	r1, #0
    542a:	d00e      	beq.n	544a <prvTraceInitTraceData+0x13e>
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    542c:	4c0c      	ldr	r4, [pc, #48]	; (5460 <prvTraceInitTraceData+0x154>)
    542e:	6823      	ldr	r3, [r4, #0]
    5430:	4a17      	ldr	r2, [pc, #92]	; (5490 <prvTraceInitTraceData+0x184>)
    5432:	4694      	mov	ip, r2
    5434:	4463      	add	r3, ip
    5436:	0018      	movs	r0, r3
    5438:	2250      	movs	r2, #80	; 0x50
    543a:	4b17      	ldr	r3, [pc, #92]	; (5498 <prvTraceInitTraceData+0x18c>)
    543c:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
    543e:	6822      	ldr	r2, [r4, #0]
    5440:	2101      	movs	r1, #1
    5442:	4b25      	ldr	r3, [pc, #148]	; (54d8 <prvTraceInitTraceData+0x1cc>)
    5444:	50d1      	str	r1, [r2, r3]
		vTraceStop();
    5446:	4b25      	ldr	r3, [pc, #148]	; (54dc <prvTraceInitTraceData+0x1d0>)
    5448:	4798      	blx	r3
}
    544a:	bc3c      	pop	{r2, r3, r4, r5}
    544c:	4690      	mov	r8, r2
    544e:	4699      	mov	r9, r3
    5450:	46a2      	mov	sl, r4
    5452:	46ab      	mov	fp, r5
    5454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	RecorderDataPtr = &RecorderData;
    5456:	4a22      	ldr	r2, [pc, #136]	; (54e0 <prvTraceInitTraceData+0x1d4>)
    5458:	4b01      	ldr	r3, [pc, #4]	; (5460 <prvTraceInitTraceData+0x154>)
    545a:	601a      	str	r2, [r3, #0]
    545c:	e765      	b.n	532a <prvTraceInitTraceData+0x1e>
    545e:	46c0      	nop			; (mov r8, r8)
    5460:	20000bec 	.word	0x20000bec
    5464:	e000e018 	.word	0xe000e018
    5468:	20005718 	.word	0x20005718
    546c:	00000fb8 	.word	0x00000fb8
    5470:	00012b83 	.word	0x00012b83
    5474:	00001aa1 	.word	0x00001aa1
    5478:	f0f0f0f0 	.word	0xf0f0f0f0
    547c:	00005129 	.word	0x00005129
    5480:	f1f1f1f1 	.word	0xf1f1f1f1
    5484:	0000055c 	.word	0x0000055c
    5488:	00000564 	.word	0x00000564
    548c:	f2f2f2f2 	.word	0xf2f2f2f2
    5490:	00000914 	.word	0x00000914
    5494:	00019d80 	.word	0x00019d80
    5498:	000052c5 	.word	0x000052c5
    549c:	f3f3f3f3 	.word	0xf3f3f3f3
    54a0:	00000964 	.word	0x00000964
    54a4:	00000fac 	.word	0x00000fac
    54a8:	00000fad 	.word	0x00000fad
    54ac:	00000fae 	.word	0x00000fae
    54b0:	00000faf 	.word	0x00000faf
    54b4:	00000fb1 	.word	0x00000fb1
    54b8:	00000fb2 	.word	0x00000fb2
    54bc:	00000fb3 	.word	0x00000fb3
    54c0:	00000fb4 	.word	0x00000fb4
    54c4:	00000fb5 	.word	0x00000fb5
    54c8:	00000fb6 	.word	0x00000fb6
    54cc:	00000fb7 	.word	0x00000fb7
    54d0:	00005201 	.word	0x00005201
    54d4:	20000ca4 	.word	0x20000ca4
    54d8:	0000090c 	.word	0x0000090c
    54dc:	000052e9 	.word	0x000052e9
    54e0:	20004760 	.word	0x20004760

000054e4 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
    54e4:	b510      	push	{r4, lr}
    54e6:	0004      	movs	r4, r0
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
    54e8:	4b0e      	ldr	r3, [pc, #56]	; (5524 <prvTraceError+0x40>)
    54ea:	681b      	ldr	r3, [r3, #0]
    54ec:	2b00      	cmp	r3, #0
    54ee:	d001      	beq.n	54f4 <prvTraceError+0x10>
	{
		vTraceStop();
    54f0:	4b0d      	ldr	r3, [pc, #52]	; (5528 <prvTraceError+0x44>)
    54f2:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
    54f4:	4b0d      	ldr	r3, [pc, #52]	; (552c <prvTraceError+0x48>)
    54f6:	681b      	ldr	r3, [r3, #0]
    54f8:	2b00      	cmp	r3, #0
    54fa:	d000      	beq.n	54fe <prvTraceError+0x1a>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
			RecorderDataPtr->internalErrorOccured = 1;
		}
	}
}
    54fc:	bd10      	pop	{r4, pc}
		traceErrorMessage = (char*)(intptr_t) msg;
    54fe:	4b0b      	ldr	r3, [pc, #44]	; (552c <prvTraceError+0x48>)
    5500:	601c      	str	r4, [r3, #0]
		if (RecorderDataPtr != NULL)
    5502:	4b08      	ldr	r3, [pc, #32]	; (5524 <prvTraceError+0x40>)
    5504:	6818      	ldr	r0, [r3, #0]
    5506:	2800      	cmp	r0, #0
    5508:	d0f8      	beq.n	54fc <prvTraceError+0x18>
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    550a:	4b09      	ldr	r3, [pc, #36]	; (5530 <prvTraceError+0x4c>)
    550c:	469c      	mov	ip, r3
    550e:	4460      	add	r0, ip
    5510:	2250      	movs	r2, #80	; 0x50
    5512:	0021      	movs	r1, r4
    5514:	4b07      	ldr	r3, [pc, #28]	; (5534 <prvTraceError+0x50>)
    5516:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
    5518:	4b02      	ldr	r3, [pc, #8]	; (5524 <prvTraceError+0x40>)
    551a:	681a      	ldr	r2, [r3, #0]
    551c:	2101      	movs	r1, #1
    551e:	4b06      	ldr	r3, [pc, #24]	; (5538 <prvTraceError+0x54>)
    5520:	50d1      	str	r1, [r2, r3]
}
    5522:	e7eb      	b.n	54fc <prvTraceError+0x18>
    5524:	20000bec 	.word	0x20000bec
    5528:	000052e9 	.word	0x000052e9
    552c:	20000ca4 	.word	0x20000ca4
    5530:	00000914 	.word	0x00000914
    5534:	000052c5 	.word	0x000052c5
    5538:	0000090c 	.word	0x0000090c

0000553c <prvTraceNextFreeEventBufferSlot>:
{
    553c:	b510      	push	{r4, lr}
	if (! RecorderDataPtr->recorderActive)
    553e:	4b0b      	ldr	r3, [pc, #44]	; (556c <prvTraceNextFreeEventBufferSlot+0x30>)
    5540:	6818      	ldr	r0, [r3, #0]
    5542:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5544:	2b00      	cmp	r3, #0
    5546:	d00f      	beq.n	5568 <prvTraceNextFreeEventBufferSlot+0x2c>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    5548:	69c3      	ldr	r3, [r0, #28]
    554a:	2290      	movs	r2, #144	; 0x90
    554c:	32ff      	adds	r2, #255	; 0xff
    554e:	4293      	cmp	r3, r2
    5550:	d805      	bhi.n	555e <prvTraceNextFreeEventBufferSlot+0x22>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
    5552:	009b      	lsls	r3, r3, #2
    5554:	4a06      	ldr	r2, [pc, #24]	; (5570 <prvTraceNextFreeEventBufferSlot+0x34>)
    5556:	4694      	mov	ip, r2
    5558:	4463      	add	r3, ip
    555a:	18c0      	adds	r0, r0, r3
}
    555c:	bd10      	pop	{r4, pc}
		prvTraceError("Attempt to index outside event buffer!");
    555e:	4805      	ldr	r0, [pc, #20]	; (5574 <prvTraceNextFreeEventBufferSlot+0x38>)
    5560:	4b05      	ldr	r3, [pc, #20]	; (5578 <prvTraceNextFreeEventBufferSlot+0x3c>)
    5562:	4798      	blx	r3
		return NULL;
    5564:	2000      	movs	r0, #0
    5566:	e7f9      	b.n	555c <prvTraceNextFreeEventBufferSlot+0x20>
		return NULL;
    5568:	2000      	movs	r0, #0
    556a:	e7f7      	b.n	555c <prvTraceNextFreeEventBufferSlot+0x20>
    556c:	20000bec 	.word	0x20000bec
    5570:	00000968 	.word	0x00000968
    5574:	00019d94 	.word	0x00019d94
    5578:	000054e5 	.word	0x000054e5

0000557c <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
    557c:	b5f0      	push	{r4, r5, r6, r7, lr}
    557e:	46c6      	mov	lr, r8
    5580:	b500      	push	{lr}
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    5582:	2800      	cmp	r0, #0
    5584:	d006      	beq.n	5594 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x18>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
    5586:	0007      	movs	r7, r0
    5588:	2500      	movs	r5, #0
    558a:	2800      	cmp	r0, #0
    558c:	d005      	beq.n	559a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
    558e:	4b23      	ldr	r3, [pc, #140]	; (561c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa0>)
    5590:	4698      	mov	r8, r3
    5592:	e00a      	b.n	55aa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x2e>
	TRACE_ASSERT(nofEntriesToCheck != 0, 
    5594:	4822      	ldr	r0, [pc, #136]	; (5620 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa4>)
    5596:	4b23      	ldr	r3, [pc, #140]	; (5624 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa8>)
    5598:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
    559a:	bc04      	pop	{r2}
    559c:	4690      	mov	r8, r2
    559e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
    55a0:	2a01      	cmp	r2, #1
    55a2:	d020      	beq.n	55e6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x6a>
		i++;
    55a4:	3501      	adds	r5, #1
	while (i < nofEntriesToCheck)
    55a6:	42bd      	cmp	r5, r7
    55a8:	d2f7      	bcs.n	559a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
		e = RecorderDataPtr->nextFreeIndex + i;
    55aa:	4643      	mov	r3, r8
    55ac:	681c      	ldr	r4, [r3, #0]
    55ae:	69e3      	ldr	r3, [r4, #28]
    55b0:	18eb      	adds	r3, r5, r3
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    55b2:	009e      	lsls	r6, r3, #2
    55b4:	19a2      	adds	r2, r4, r6
    55b6:	491c      	ldr	r1, [pc, #112]	; (5628 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    55b8:	468c      	mov	ip, r1
    55ba:	4462      	add	r2, ip
    55bc:	7812      	ldrb	r2, [r2, #0]
    55be:	0011      	movs	r1, r2
    55c0:	3167      	adds	r1, #103	; 0x67
    55c2:	b2c9      	uxtb	r1, r1
    55c4:	290e      	cmp	r1, #14
    55c6:	d8eb      	bhi.n	55a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x24>
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
    55c8:	3268      	adds	r2, #104	; 0x68
    55ca:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
    55cc:	18d3      	adds	r3, r2, r3
    55ce:	69a1      	ldr	r1, [r4, #24]
    55d0:	428b      	cmp	r3, r1
    55d2:	d2e7      	bcs.n	55a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
    55d4:	3201      	adds	r2, #1
    55d6:	0092      	lsls	r2, r2, #2
    55d8:	4663      	mov	r3, ip
    55da:	18f0      	adds	r0, r6, r3
    55dc:	1820      	adds	r0, r4, r0
    55de:	2100      	movs	r1, #0
    55e0:	4b12      	ldr	r3, [pc, #72]	; (562c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    55e2:	4798      	blx	r3
    55e4:	e7de      	b.n	55a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
			if ((e + 1) < RecorderDataPtr->maxEvents)
    55e6:	3301      	adds	r3, #1
    55e8:	69a2      	ldr	r2, [r4, #24]
    55ea:	4293      	cmp	r3, r2
    55ec:	d207      	bcs.n	55fe <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x82>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
    55ee:	4b0e      	ldr	r3, [pc, #56]	; (5628 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    55f0:	18f0      	adds	r0, r6, r3
    55f2:	1820      	adds	r0, r4, r0
    55f4:	2208      	movs	r2, #8
    55f6:	2100      	movs	r1, #0
    55f8:	4b0c      	ldr	r3, [pc, #48]	; (562c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    55fa:	4798      	blx	r3
    55fc:	e7d2      	b.n	55a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
    55fe:	4b0a      	ldr	r3, [pc, #40]	; (5628 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    5600:	18e0      	adds	r0, r4, r3
    5602:	2204      	movs	r2, #4
    5604:	2100      	movs	r1, #0
    5606:	4b09      	ldr	r3, [pc, #36]	; (562c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    5608:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
    560a:	4b07      	ldr	r3, [pc, #28]	; (5628 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    560c:	18f0      	adds	r0, r6, r3
    560e:	1820      	adds	r0, r4, r0
    5610:	2204      	movs	r2, #4
    5612:	2100      	movs	r1, #0
    5614:	4b05      	ldr	r3, [pc, #20]	; (562c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    5616:	4798      	blx	r3
    5618:	e7c4      	b.n	55a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
    561a:	46c0      	nop			; (mov r8, r8)
    561c:	20000bec 	.word	0x20000bec
    5620:	00019bb4 	.word	0x00019bb4
    5624:	000054e5 	.word	0x000054e5
    5628:	00000968 	.word	0x00000968
    562c:	00012b83 	.word	0x00012b83

00005630 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
    5630:	b510      	push	{r4, lr}
	if (RecorderDataPtr->recorderActive == 0)
    5632:	4b0b      	ldr	r3, [pc, #44]	; (5660 <prvTraceUpdateCounters+0x30>)
    5634:	681b      	ldr	r3, [r3, #0]
    5636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5638:	2a00      	cmp	r2, #0
    563a:	d010      	beq.n	565e <prvTraceUpdateCounters+0x2e>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
    563c:	695a      	ldr	r2, [r3, #20]
    563e:	3201      	adds	r2, #1
    5640:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
    5642:	69da      	ldr	r2, [r3, #28]
    5644:	3201      	adds	r2, #1
    5646:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    5648:	2190      	movs	r1, #144	; 0x90
    564a:	31ff      	adds	r1, #255	; 0xff
    564c:	428a      	cmp	r2, r1
    564e:	d903      	bls.n	5658 <prvTraceUpdateCounters+0x28>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
    5650:	2201      	movs	r2, #1
    5652:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
    5654:	2200      	movs	r2, #0
    5656:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    5658:	2001      	movs	r0, #1
    565a:	4b02      	ldr	r3, [pc, #8]	; (5664 <prvTraceUpdateCounters+0x34>)
    565c:	4798      	blx	r3
#endif
}
    565e:	bd10      	pop	{r4, pc}
    5660:	20000bec 	.word	0x20000bec
    5664:	0000557d 	.word	0x0000557d

00005668 <prvTraceGetParam>:
{
    5668:	b570      	push	{r4, r5, r6, lr}
    566a:	0004      	movs	r4, r0
    566c:	000d      	movs	r5, r1
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    566e:	28ff      	cmp	r0, #255	; 0xff
    5670:	d002      	beq.n	5678 <prvTraceGetParam+0x10>
    5672:	4b0d      	ldr	r3, [pc, #52]	; (56a8 <prvTraceGetParam+0x40>)
    5674:	4298      	cmp	r0, r3
    5676:	d103      	bne.n	5680 <prvTraceGetParam+0x18>
	if (param <= param_max)
    5678:	42ac      	cmp	r4, r5
    567a:	d305      	bcc.n	5688 <prvTraceGetParam+0x20>
}
    567c:	0028      	movs	r0, r5
    567e:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    5680:	480a      	ldr	r0, [pc, #40]	; (56ac <prvTraceGetParam+0x44>)
    5682:	4b0b      	ldr	r3, [pc, #44]	; (56b0 <prvTraceGetParam+0x48>)
    5684:	4798      	blx	r3
    5686:	e7f9      	b.n	567c <prvTraceGetParam+0x14>
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
    5688:	4b0a      	ldr	r3, [pc, #40]	; (56b4 <prvTraceGetParam+0x4c>)
    568a:	4798      	blx	r3
		if (xps != NULL)
    568c:	2800      	cmp	r0, #0
    568e:	d009      	beq.n	56a4 <prvTraceGetParam+0x3c>
			xps->type = DIV_XPS;
    5690:	2301      	movs	r3, #1
    5692:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
    5694:	002b      	movs	r3, r5
    5696:	43a3      	bics	r3, r4
    5698:	0a1a      	lsrs	r2, r3, #8
    569a:	7042      	strb	r2, [r0, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
    569c:	0c1b      	lsrs	r3, r3, #16
    569e:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
    56a0:	4b05      	ldr	r3, [pc, #20]	; (56b8 <prvTraceGetParam+0x50>)
    56a2:	4798      	blx	r3
		return param & param_max;
    56a4:	4025      	ands	r5, r4
    56a6:	e7e9      	b.n	567c <prvTraceGetParam+0x14>
    56a8:	0000ffff 	.word	0x0000ffff
    56ac:	00019cb8 	.word	0x00019cb8
    56b0:	000054e5 	.word	0x000054e5
    56b4:	0000553d 	.word	0x0000553d
    56b8:	00005631 	.word	0x00005631

000056bc <uiIndexOfObject>:
{
    56bc:	b510      	push	{r4, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    56be:	2908      	cmp	r1, #8
    56c0:	d814      	bhi.n	56ec <uiIndexOfObject+0x30>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    56c2:	2800      	cmp	r0, #0
    56c4:	d017      	beq.n	56f6 <uiIndexOfObject+0x3a>
    56c6:	4b0e      	ldr	r3, [pc, #56]	; (5700 <uiIndexOfObject+0x44>)
    56c8:	681a      	ldr	r2, [r3, #0]
    56ca:	1853      	adds	r3, r2, r1
    56cc:	3364      	adds	r3, #100	; 0x64
    56ce:	781b      	ldrb	r3, [r3, #0]
    56d0:	4283      	cmp	r3, r0
    56d2:	d310      	bcc.n	56f6 <uiIndexOfObject+0x3a>
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    56d4:	1853      	adds	r3, r2, r1
    56d6:	337c      	adds	r3, #124	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    56d8:	781b      	ldrb	r3, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    56da:	3801      	subs	r0, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    56dc:	4358      	muls	r0, r3
    56de:	3140      	adds	r1, #64	; 0x40
    56e0:	0049      	lsls	r1, r1, #1
    56e2:	1851      	adds	r1, r2, r1
    56e4:	890b      	ldrh	r3, [r1, #8]
    56e6:	18c0      	adds	r0, r0, r3
    56e8:	b280      	uxth	r0, r0
    56ea:	e008      	b.n	56fe <uiIndexOfObject+0x42>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    56ec:	4805      	ldr	r0, [pc, #20]	; (5704 <uiIndexOfObject+0x48>)
    56ee:	4b06      	ldr	r3, [pc, #24]	; (5708 <uiIndexOfObject+0x4c>)
    56f0:	4798      	blx	r3
    56f2:	2000      	movs	r0, #0
    56f4:	e003      	b.n	56fe <uiIndexOfObject+0x42>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    56f6:	4805      	ldr	r0, [pc, #20]	; (570c <uiIndexOfObject+0x50>)
    56f8:	4b03      	ldr	r3, [pc, #12]	; (5708 <uiIndexOfObject+0x4c>)
    56fa:	4798      	blx	r3
    56fc:	2000      	movs	r0, #0
}
    56fe:	bd10      	pop	{r4, pc}
    5700:	20000bec 	.word	0x20000bec
    5704:	0001a348 	.word	0x0001a348
    5708:	000054e5 	.word	0x000054e5
    570c:	0001a388 	.word	0x0001a388

00005710 <prvMarkObjectAsUsed>:
{
    5710:	b510      	push	{r4, lr}
    5712:	000b      	movs	r3, r1
	uint16_t idx = uiIndexOfObject(handle, objectclass);
    5714:	0001      	movs	r1, r0
    5716:	0018      	movs	r0, r3
    5718:	4b04      	ldr	r3, [pc, #16]	; (572c <prvMarkObjectAsUsed+0x1c>)
    571a:	4798      	blx	r3
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
    571c:	4b04      	ldr	r3, [pc, #16]	; (5730 <prvMarkObjectAsUsed+0x20>)
    571e:	681b      	ldr	r3, [r3, #0]
    5720:	1818      	adds	r0, r3, r0
    5722:	309c      	adds	r0, #156	; 0x9c
    5724:	2301      	movs	r3, #1
    5726:	7003      	strb	r3, [r0, #0]
}
    5728:	bd10      	pop	{r4, pc}
    572a:	46c0      	nop			; (mov r8, r8)
    572c:	000056bd 	.word	0x000056bd
    5730:	20000bec 	.word	0x20000bec

00005734 <prvTraceSetPriorityProperty>:
{
    5734:	b570      	push	{r4, r5, r6, lr}
    5736:	0004      	movs	r4, r0
    5738:	0008      	movs	r0, r1
    573a:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    573c:	2c08      	cmp	r4, #8
    573e:	d813      	bhi.n	5768 <prvTraceSetPriorityProperty+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    5740:	4b0d      	ldr	r3, [pc, #52]	; (5778 <prvTraceSetPriorityProperty+0x44>)
    5742:	681b      	ldr	r3, [r3, #0]
    5744:	191b      	adds	r3, r3, r4
    5746:	3364      	adds	r3, #100	; 0x64
    5748:	781b      	ldrb	r3, [r3, #0]
    574a:	428b      	cmp	r3, r1
    574c:	d310      	bcc.n	5770 <prvTraceSetPriorityProperty+0x3c>
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
    574e:	0021      	movs	r1, r4
    5750:	4b0a      	ldr	r3, [pc, #40]	; (577c <prvTraceSetPriorityProperty+0x48>)
    5752:	4798      	blx	r3
    5754:	4b08      	ldr	r3, [pc, #32]	; (5778 <prvTraceSetPriorityProperty+0x44>)
    5756:	681b      	ldr	r3, [r3, #0]
    5758:	191c      	adds	r4, r3, r4
    575a:	3470      	adds	r4, #112	; 0x70
    575c:	7822      	ldrb	r2, [r4, #0]
    575e:	181b      	adds	r3, r3, r0
    5760:	189b      	adds	r3, r3, r2
    5762:	339d      	adds	r3, #157	; 0x9d
    5764:	701d      	strb	r5, [r3, #0]
}
    5766:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    5768:	4805      	ldr	r0, [pc, #20]	; (5780 <prvTraceSetPriorityProperty+0x4c>)
    576a:	4b06      	ldr	r3, [pc, #24]	; (5784 <prvTraceSetPriorityProperty+0x50>)
    576c:	4798      	blx	r3
    576e:	e7fa      	b.n	5766 <prvTraceSetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    5770:	4805      	ldr	r0, [pc, #20]	; (5788 <prvTraceSetPriorityProperty+0x54>)
    5772:	4b04      	ldr	r3, [pc, #16]	; (5784 <prvTraceSetPriorityProperty+0x50>)
    5774:	4798      	blx	r3
    5776:	e7f6      	b.n	5766 <prvTraceSetPriorityProperty+0x32>
    5778:	20000bec 	.word	0x20000bec
    577c:	000056bd 	.word	0x000056bd
    5780:	00019ed0 	.word	0x00019ed0
    5784:	000054e5 	.word	0x000054e5
    5788:	00019f1c 	.word	0x00019f1c

0000578c <prvTraceGetPriorityProperty>:
{
    578c:	b510      	push	{r4, lr}
    578e:	0004      	movs	r4, r0
    5790:	0008      	movs	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    5792:	2c08      	cmp	r4, #8
    5794:	d813      	bhi.n	57be <prvTraceGetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    5796:	4b0f      	ldr	r3, [pc, #60]	; (57d4 <prvTraceGetPriorityProperty+0x48>)
    5798:	681b      	ldr	r3, [r3, #0]
    579a:	191b      	adds	r3, r3, r4
    579c:	3364      	adds	r3, #100	; 0x64
    579e:	781b      	ldrb	r3, [r3, #0]
    57a0:	428b      	cmp	r3, r1
    57a2:	d311      	bcc.n	57c8 <prvTraceGetPriorityProperty+0x3c>
	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
    57a4:	0021      	movs	r1, r4
    57a6:	4b0c      	ldr	r3, [pc, #48]	; (57d8 <prvTraceGetPriorityProperty+0x4c>)
    57a8:	4798      	blx	r3
    57aa:	4b0a      	ldr	r3, [pc, #40]	; (57d4 <prvTraceGetPriorityProperty+0x48>)
    57ac:	681b      	ldr	r3, [r3, #0]
    57ae:	191c      	adds	r4, r3, r4
    57b0:	3470      	adds	r4, #112	; 0x70
    57b2:	7822      	ldrb	r2, [r4, #0]
    57b4:	181b      	adds	r3, r3, r0
    57b6:	189b      	adds	r3, r3, r2
    57b8:	339d      	adds	r3, #157	; 0x9d
    57ba:	7818      	ldrb	r0, [r3, #0]
}
    57bc:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    57be:	4807      	ldr	r0, [pc, #28]	; (57dc <prvTraceGetPriorityProperty+0x50>)
    57c0:	4b07      	ldr	r3, [pc, #28]	; (57e0 <prvTraceGetPriorityProperty+0x54>)
    57c2:	4798      	blx	r3
    57c4:	2000      	movs	r0, #0
    57c6:	e7f9      	b.n	57bc <prvTraceGetPriorityProperty+0x30>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    57c8:	4806      	ldr	r0, [pc, #24]	; (57e4 <prvTraceGetPriorityProperty+0x58>)
    57ca:	4b05      	ldr	r3, [pc, #20]	; (57e0 <prvTraceGetPriorityProperty+0x54>)
    57cc:	4798      	blx	r3
    57ce:	2000      	movs	r0, #0
    57d0:	e7f4      	b.n	57bc <prvTraceGetPriorityProperty+0x30>
    57d2:	46c0      	nop			; (mov r8, r8)
    57d4:	20000bec 	.word	0x20000bec
    57d8:	000056bd 	.word	0x000056bd
    57dc:	00019cf4 	.word	0x00019cf4
    57e0:	000054e5 	.word	0x000054e5
    57e4:	00019d40 	.word	0x00019d40

000057e8 <prvTraceSetObjectState>:
{
    57e8:	b570      	push	{r4, r5, r6, lr}
    57ea:	0004      	movs	r4, r0
    57ec:	0008      	movs	r0, r1
    57ee:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    57f0:	2c08      	cmp	r4, #8
    57f2:	d813      	bhi.n	581c <prvTraceSetObjectState+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    57f4:	4b0d      	ldr	r3, [pc, #52]	; (582c <prvTraceSetObjectState+0x44>)
    57f6:	681b      	ldr	r3, [r3, #0]
    57f8:	191b      	adds	r3, r3, r4
    57fa:	3364      	adds	r3, #100	; 0x64
    57fc:	781b      	ldrb	r3, [r3, #0]
    57fe:	428b      	cmp	r3, r1
    5800:	d310      	bcc.n	5824 <prvTraceSetObjectState+0x3c>
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
    5802:	0021      	movs	r1, r4
    5804:	4b0a      	ldr	r3, [pc, #40]	; (5830 <prvTraceSetObjectState+0x48>)
    5806:	4798      	blx	r3
    5808:	4b08      	ldr	r3, [pc, #32]	; (582c <prvTraceSetObjectState+0x44>)
    580a:	681b      	ldr	r3, [r3, #0]
    580c:	191c      	adds	r4, r3, r4
    580e:	3470      	adds	r4, #112	; 0x70
    5810:	7822      	ldrb	r2, [r4, #0]
    5812:	181b      	adds	r3, r3, r0
    5814:	189b      	adds	r3, r3, r2
    5816:	339c      	adds	r3, #156	; 0x9c
    5818:	701d      	strb	r5, [r3, #0]
}
    581a:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    581c:	4805      	ldr	r0, [pc, #20]	; (5834 <prvTraceSetObjectState+0x4c>)
    581e:	4b06      	ldr	r3, [pc, #24]	; (5838 <prvTraceSetObjectState+0x50>)
    5820:	4798      	blx	r3
    5822:	e7fa      	b.n	581a <prvTraceSetObjectState+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    5824:	4805      	ldr	r0, [pc, #20]	; (583c <prvTraceSetObjectState+0x54>)
    5826:	4b04      	ldr	r3, [pc, #16]	; (5838 <prvTraceSetObjectState+0x50>)
    5828:	4798      	blx	r3
    582a:	e7f6      	b.n	581a <prvTraceSetObjectState+0x32>
    582c:	20000bec 	.word	0x20000bec
    5830:	000056bd 	.word	0x000056bd
    5834:	00019e50 	.word	0x00019e50
    5838:	000054e5 	.word	0x000054e5
    583c:	00019e94 	.word	0x00019e94

00005840 <prvTraceSetTaskInstanceFinished>:
{
    5840:	b510      	push	{r4, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    5842:	4b0b      	ldr	r3, [pc, #44]	; (5870 <prvTraceSetTaskInstanceFinished+0x30>)
    5844:	681a      	ldr	r2, [r3, #0]
    5846:	2367      	movs	r3, #103	; 0x67
    5848:	5cd3      	ldrb	r3, [r2, r3]
    584a:	4283      	cmp	r3, r0
    584c:	d30c      	bcc.n	5868 <prvTraceSetTaskInstanceFinished+0x28>
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
    584e:	2103      	movs	r1, #3
    5850:	4b08      	ldr	r3, [pc, #32]	; (5874 <prvTraceSetTaskInstanceFinished+0x34>)
    5852:	4798      	blx	r3
    5854:	4b06      	ldr	r3, [pc, #24]	; (5870 <prvTraceSetTaskInstanceFinished+0x30>)
    5856:	681b      	ldr	r3, [r3, #0]
    5858:	2273      	movs	r2, #115	; 0x73
    585a:	5c9a      	ldrb	r2, [r3, r2]
    585c:	181b      	adds	r3, r3, r0
    585e:	189b      	adds	r3, r3, r2
    5860:	339c      	adds	r3, #156	; 0x9c
    5862:	2200      	movs	r2, #0
    5864:	701a      	strb	r2, [r3, #0]
}
    5866:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    5868:	4803      	ldr	r0, [pc, #12]	; (5878 <prvTraceSetTaskInstanceFinished+0x38>)
    586a:	4b04      	ldr	r3, [pc, #16]	; (587c <prvTraceSetTaskInstanceFinished+0x3c>)
    586c:	4798      	blx	r3
    586e:	e7fa      	b.n	5866 <prvTraceSetTaskInstanceFinished+0x26>
    5870:	20000bec 	.word	0x20000bec
    5874:	000056bd 	.word	0x000056bd
    5878:	00019f5c 	.word	0x00019f5c
    587c:	000054e5 	.word	0x000054e5

00005880 <prvTraceGetObjectHandle>:
{
    5880:	b570      	push	{r4, r5, r6, lr}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    5882:	4b2d      	ldr	r3, [pc, #180]	; (5938 <prvTraceGetObjectHandle+0xb8>)
    5884:	681b      	ldr	r3, [r3, #0]
    5886:	2b00      	cmp	r3, #0
    5888:	d046      	beq.n	5918 <prvTraceGetObjectHandle+0x98>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    588a:	2808      	cmp	r0, #8
    588c:	d849      	bhi.n	5922 <prvTraceGetObjectHandle+0xa2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    588e:	f3ef 8410 	mrs	r4, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5892:	2301      	movs	r3, #1
    5894:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    5898:	4a28      	ldr	r2, [pc, #160]	; (593c <prvTraceGetObjectHandle+0xbc>)
    589a:	6813      	ldr	r3, [r2, #0]
    589c:	3301      	adds	r3, #1
    589e:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
    58a0:	4a27      	ldr	r2, [pc, #156]	; (5940 <prvTraceGetObjectHandle+0xc0>)
    58a2:	0043      	lsls	r3, r0, #1
    58a4:	5a9b      	ldrh	r3, [r3, r2]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
    58a6:	18d2      	adds	r2, r2, r3
    58a8:	3248      	adds	r2, #72	; 0x48
    58aa:	7812      	ldrb	r2, [r2, #0]
    58ac:	2a00      	cmp	r2, #0
    58ae:	d10a      	bne.n	58c6 <prvTraceGetObjectHandle+0x46>
		objectHandleStacks.objectHandles[indexOfHandle] =
    58b0:	4923      	ldr	r1, [pc, #140]	; (5940 <prvTraceGetObjectHandle+0xc0>)
    58b2:	18cd      	adds	r5, r1, r3
    58b4:	3548      	adds	r5, #72	; 0x48
			(traceHandle)(1 + indexOfHandle -
    58b6:	1c5a      	adds	r2, r3, #1
			objectHandleStacks.lowestIndexOfClass[objectclass]);
    58b8:	0006      	movs	r6, r0
    58ba:	3608      	adds	r6, #8
    58bc:	0076      	lsls	r6, r6, #1
    58be:	1989      	adds	r1, r1, r6
			(traceHandle)(1 + indexOfHandle -
    58c0:	8849      	ldrh	r1, [r1, #2]
    58c2:	1a52      	subs	r2, r2, r1
		objectHandleStacks.objectHandles[indexOfHandle] =
    58c4:	702a      	strb	r2, [r5, #0]
		> objectHandleStacks.highestIndexOfClass[objectclass])
    58c6:	0001      	movs	r1, r0
    58c8:	3110      	adds	r1, #16
    58ca:	0049      	lsls	r1, r1, #1
    58cc:	4a1c      	ldr	r2, [pc, #112]	; (5940 <prvTraceGetObjectHandle+0xc0>)
    58ce:	1852      	adds	r2, r2, r1
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    58d0:	8892      	ldrh	r2, [r2, #4]
    58d2:	429a      	cmp	r2, r3
    58d4:	d32a      	bcc.n	592c <prvTraceGetObjectHandle+0xac>
	handle = objectHandleStacks.objectHandles[indexOfHandle];
    58d6:	491a      	ldr	r1, [pc, #104]	; (5940 <prvTraceGetObjectHandle+0xc0>)
    58d8:	18ca      	adds	r2, r1, r3
    58da:	3248      	adds	r2, #72	; 0x48
    58dc:	7812      	ldrb	r2, [r2, #0]
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
    58de:	3301      	adds	r3, #1
    58e0:	b29b      	uxth	r3, r3
    58e2:	0045      	lsls	r5, r0, #1
    58e4:	526b      	strh	r3, [r5, r1]
			objectHandleStacks.lowestIndexOfClass[objectclass];
    58e6:	0005      	movs	r5, r0
    58e8:	3508      	adds	r5, #8
    58ea:	006d      	lsls	r5, r5, #1
    58ec:	194d      	adds	r5, r1, r5
    58ee:	886d      	ldrh	r5, [r5, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    58f0:	1b5b      	subs	r3, r3, r5
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
    58f2:	0005      	movs	r5, r0
    58f4:	3518      	adds	r5, #24
    58f6:	006d      	lsls	r5, r5, #1
    58f8:	1949      	adds	r1, r1, r5
    58fa:	88c9      	ldrh	r1, [r1, #6]
		if (hndCount >
    58fc:	428b      	cmp	r3, r1
    58fe:	dd03      	ble.n	5908 <prvTraceGetObjectHandle+0x88>
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    5900:	490f      	ldr	r1, [pc, #60]	; (5940 <prvTraceGetObjectHandle+0xc0>)
    5902:	1948      	adds	r0, r1, r5
				(traceHandle)hndCount;
    5904:	b2db      	uxtb	r3, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    5906:	80c3      	strh	r3, [r0, #6]
	trcCRITICAL_SECTION_END();
    5908:	490c      	ldr	r1, [pc, #48]	; (593c <prvTraceGetObjectHandle+0xbc>)
    590a:	680b      	ldr	r3, [r1, #0]
    590c:	3b01      	subs	r3, #1
    590e:	600b      	str	r3, [r1, #0]
    5910:	f384 8810 	msr	PRIMASK, r4
}
    5914:	0010      	movs	r0, r2
    5916:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    5918:	480a      	ldr	r0, [pc, #40]	; (5944 <prvTraceGetObjectHandle+0xc4>)
    591a:	4b0b      	ldr	r3, [pc, #44]	; (5948 <prvTraceGetObjectHandle+0xc8>)
    591c:	4798      	blx	r3
    591e:	2200      	movs	r2, #0
    5920:	e7f8      	b.n	5914 <prvTraceGetObjectHandle+0x94>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    5922:	480a      	ldr	r0, [pc, #40]	; (594c <prvTraceGetObjectHandle+0xcc>)
    5924:	4b08      	ldr	r3, [pc, #32]	; (5948 <prvTraceGetObjectHandle+0xc8>)
    5926:	4798      	blx	r3
    5928:	2200      	movs	r2, #0
    592a:	e7f3      	b.n	5914 <prvTraceGetObjectHandle+0x94>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    592c:	4b08      	ldr	r3, [pc, #32]	; (5950 <prvTraceGetObjectHandle+0xd0>)
    592e:	4798      	blx	r3
    5930:	4b05      	ldr	r3, [pc, #20]	; (5948 <prvTraceGetObjectHandle+0xc8>)
    5932:	4798      	blx	r3
		handle = 0;
    5934:	2200      	movs	r2, #0
    5936:	e7e7      	b.n	5908 <prvTraceGetObjectHandle+0x88>
    5938:	20000bec 	.word	0x20000bec
    593c:	20000c9c 	.word	0x20000c9c
    5940:	20000c08 	.word	0x20000c08
    5944:	0001a44c 	.word	0x0001a44c
    5948:	000054e5 	.word	0x000054e5
    594c:	00019c70 	.word	0x00019c70
    5950:	00005265 	.word	0x00005265

00005954 <prvTraceSetObjectName>:
{
    5954:	b570      	push	{r4, r5, r6, lr}
    5956:	0004      	movs	r4, r0
    5958:	0008      	movs	r0, r1
    595a:	1e15      	subs	r5, r2, #0
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    595c:	d012      	beq.n	5984 <prvTraceSetObjectName+0x30>
	if (objectclass >= TRACE_NCLASSES)
    595e:	2c08      	cmp	r4, #8
    5960:	d814      	bhi.n	598c <prvTraceSetObjectName+0x38>
	if (handle == 0)
    5962:	2900      	cmp	r1, #0
    5964:	d016      	beq.n	5994 <prvTraceSetObjectName+0x40>
	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
    5966:	4b16      	ldr	r3, [pc, #88]	; (59c0 <prvTraceSetObjectName+0x6c>)
    5968:	681b      	ldr	r3, [r3, #0]
    596a:	191b      	adds	r3, r3, r4
    596c:	3364      	adds	r3, #100	; 0x64
    596e:	781b      	ldrb	r3, [r3, #0]
    5970:	428b      	cmp	r3, r1
    5972:	d313      	bcc.n	599c <prvTraceSetObjectName+0x48>
		idx = uiIndexOfObject(handle, objectclass);
    5974:	0021      	movs	r1, r4
    5976:	4b13      	ldr	r3, [pc, #76]	; (59c4 <prvTraceSetObjectName+0x70>)
    5978:	4798      	blx	r3
		if (traceErrorMessage == NULL)
    597a:	4b13      	ldr	r3, [pc, #76]	; (59c8 <prvTraceSetObjectName+0x74>)
    597c:	681b      	ldr	r3, [r3, #0]
    597e:	2b00      	cmp	r3, #0
    5980:	d012      	beq.n	59a8 <prvTraceSetObjectName+0x54>
}
    5982:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    5984:	4811      	ldr	r0, [pc, #68]	; (59cc <prvTraceSetObjectName+0x78>)
    5986:	4b12      	ldr	r3, [pc, #72]	; (59d0 <prvTraceSetObjectName+0x7c>)
    5988:	4798      	blx	r3
    598a:	e7fa      	b.n	5982 <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal object class in prvTraceSetObjectName");
    598c:	4811      	ldr	r0, [pc, #68]	; (59d4 <prvTraceSetObjectName+0x80>)
    598e:	4b10      	ldr	r3, [pc, #64]	; (59d0 <prvTraceSetObjectName+0x7c>)
    5990:	4798      	blx	r3
		return;
    5992:	e7f6      	b.n	5982 <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
    5994:	4810      	ldr	r0, [pc, #64]	; (59d8 <prvTraceSetObjectName+0x84>)
    5996:	4b0e      	ldr	r3, [pc, #56]	; (59d0 <prvTraceSetObjectName+0x7c>)
    5998:	4798      	blx	r3
		return;
    599a:	e7f2      	b.n	5982 <prvTraceSetObjectName+0x2e>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    599c:	0020      	movs	r0, r4
    599e:	4b0f      	ldr	r3, [pc, #60]	; (59dc <prvTraceSetObjectName+0x88>)
    59a0:	4798      	blx	r3
    59a2:	4b0b      	ldr	r3, [pc, #44]	; (59d0 <prvTraceSetObjectName+0x7c>)
    59a4:	4798      	blx	r3
    59a6:	e7ec      	b.n	5982 <prvTraceSetObjectName+0x2e>
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    59a8:	4b05      	ldr	r3, [pc, #20]	; (59c0 <prvTraceSetObjectName+0x6c>)
    59aa:	681b      	ldr	r3, [r3, #0]
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
    59ac:	191c      	adds	r4, r3, r4
    59ae:	3470      	adds	r4, #112	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    59b0:	7822      	ldrb	r2, [r4, #0]
    59b2:	309c      	adds	r0, #156	; 0x9c
    59b4:	1818      	adds	r0, r3, r0
    59b6:	0029      	movs	r1, r5
    59b8:	4b09      	ldr	r3, [pc, #36]	; (59e0 <prvTraceSetObjectName+0x8c>)
    59ba:	4798      	blx	r3
    59bc:	e7e1      	b.n	5982 <prvTraceSetObjectName+0x2e>
    59be:	46c0      	nop			; (mov r8, r8)
    59c0:	20000bec 	.word	0x20000bec
    59c4:	000056bd 	.word	0x000056bd
    59c8:	20000ca4 	.word	0x20000ca4
    59cc:	00019dbc 	.word	0x00019dbc
    59d0:	000054e5 	.word	0x000054e5
    59d4:	00019df0 	.word	0x00019df0
    59d8:	00019e20 	.word	0x00019e20
    59dc:	00005265 	.word	0x00005265
    59e0:	000052c5 	.word	0x000052c5

000059e4 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
    59e4:	b570      	push	{r4, r5, r6, lr}
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
    59e6:	4b1e      	ldr	r3, [pc, #120]	; (5a60 <prvTracePortGetTimeStamp+0x7c>)
    59e8:	681b      	ldr	r3, [r3, #0]
    59ea:	2b01      	cmp	r3, #1
    59ec:	d02b      	beq.n	5a46 <prvTracePortGetTimeStamp+0x62>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
    59ee:	4b1d      	ldr	r3, [pc, #116]	; (5a64 <prvTracePortGetTimeStamp+0x80>)
    59f0:	6819      	ldr	r1, [r3, #0]
    59f2:	4b1d      	ldr	r3, [pc, #116]	; (5a68 <prvTracePortGetTimeStamp+0x84>)
    59f4:	681b      	ldr	r3, [r3, #0]
    59f6:	3101      	adds	r1, #1
    59f8:	1ac9      	subs	r1, r1, r3
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
    59fa:	4b1c      	ldr	r3, [pc, #112]	; (5a6c <prvTracePortGetTimeStamp+0x88>)
    59fc:	681b      	ldr	r3, [r3, #0]
    59fe:	4a1c      	ldr	r2, [pc, #112]	; (5a70 <prvTracePortGetTimeStamp+0x8c>)
    5a00:	6814      	ldr	r4, [r2, #0]
    5a02:	43e2      	mvns	r2, r4
    5a04:	42da      	cmn	r2, r3
    5a06:	d424      	bmi.n	5a52 <prvTracePortGetTimeStamp+0x6e>
		traceTickCount = uiTraceTickCount;
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    5a08:	4a1a      	ldr	r2, [pc, #104]	; (5a74 <prvTracePortGetTimeStamp+0x90>)
    5a0a:	6814      	ldr	r4, [r2, #0]
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
    5a0c:	42a1      	cmp	r1, r4
    5a0e:	41a4      	sbcs	r4, r4
    5a10:	4264      	negs	r4, r4
    5a12:	191c      	adds	r4, r3, r4
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
    5a14:	2800      	cmp	r0, #0
    5a16:	d01f      	beq.n	5a58 <prvTracePortGetTimeStamp+0x74>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
    5a18:	4d12      	ldr	r5, [pc, #72]	; (5a64 <prvTracePortGetTimeStamp+0x80>)
    5a1a:	682b      	ldr	r3, [r5, #0]
    5a1c:	3301      	adds	r3, #1
    5a1e:	089b      	lsrs	r3, r3, #2
    5a20:	4363      	muls	r3, r4
    5a22:	001a      	movs	r2, r3
    5a24:	4e14      	ldr	r6, [pc, #80]	; (5a78 <prvTracePortGetTimeStamp+0x94>)
    5a26:	6033      	str	r3, [r6, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
    5a28:	682d      	ldr	r5, [r5, #0]
    5a2a:	3501      	adds	r5, #1
    5a2c:	2303      	movs	r3, #3
    5a2e:	402b      	ands	r3, r5
    5a30:	4363      	muls	r3, r4
    5a32:	185b      	adds	r3, r3, r1
    5a34:	089b      	lsrs	r3, r3, #2
    5a36:	189b      	adds	r3, r3, r2
    5a38:	6033      	str	r3, [r6, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
    5a3a:	4a0c      	ldr	r2, [pc, #48]	; (5a6c <prvTracePortGetTimeStamp+0x88>)
    5a3c:	6014      	str	r4, [r2, #0]
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
		*pTimestamp = last_timestamp;
    5a3e:	6003      	str	r3, [r0, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
    5a40:	4b0c      	ldr	r3, [pc, #48]	; (5a74 <prvTracePortGetTimeStamp+0x90>)
    5a42:	6019      	str	r1, [r3, #0]
}
    5a44:	bd70      	pop	{r4, r5, r6, pc}
		if (pTimestamp)
    5a46:	2800      	cmp	r0, #0
    5a48:	d0fc      	beq.n	5a44 <prvTracePortGetTimeStamp+0x60>
			*pTimestamp = last_timestamp;
    5a4a:	4b0b      	ldr	r3, [pc, #44]	; (5a78 <prvTracePortGetTimeStamp+0x94>)
    5a4c:	681b      	ldr	r3, [r3, #0]
    5a4e:	6003      	str	r3, [r0, #0]
    5a50:	e7f8      	b.n	5a44 <prvTracePortGetTimeStamp+0x60>
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    5a52:	42a3      	cmp	r3, r4
    5a54:	d1de      	bne.n	5a14 <prvTracePortGetTimeStamp+0x30>
    5a56:	e7d7      	b.n	5a08 <prvTracePortGetTimeStamp+0x24>
	last_traceTickCount = traceTickCount;
    5a58:	4b04      	ldr	r3, [pc, #16]	; (5a6c <prvTracePortGetTimeStamp+0x88>)
    5a5a:	601c      	str	r4, [r3, #0]
    5a5c:	e7f0      	b.n	5a40 <prvTracePortGetTimeStamp+0x5c>
    5a5e:	46c0      	nop			; (mov r8, r8)
    5a60:	20000ca8 	.word	0x20000ca8
    5a64:	e000e014 	.word	0xe000e014
    5a68:	e000e018 	.word	0xe000e018
    5a6c:	20000c04 	.word	0x20000c04
    5a70:	20000cb0 	.word	0x20000cb0
    5a74:	20000bfc 	.word	0x20000bfc
    5a78:	20000c00 	.word	0x20000c00

00005a7c <prvTraceGetDTS>:
{
    5a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a7e:	b083      	sub	sp, #12
    5a80:	0005      	movs	r5, r0
	uint32_t timestamp = 0;
    5a82:	2300      	movs	r3, #0
    5a84:	9301      	str	r3, [sp, #4]
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    5a86:	28ff      	cmp	r0, #255	; 0xff
    5a88:	d002      	beq.n	5a90 <prvTraceGetDTS+0x14>
    5a8a:	4b39      	ldr	r3, [pc, #228]	; (5b70 <prvTraceGetDTS+0xf4>)
    5a8c:	4298      	cmp	r0, r3
    5a8e:	d135      	bne.n	5afc <prvTraceGetDTS+0x80>
	if (RecorderDataPtr->frequency == 0)
    5a90:	4b38      	ldr	r3, [pc, #224]	; (5b74 <prvTraceGetDTS+0xf8>)
    5a92:	681c      	ldr	r4, [r3, #0]
    5a94:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5a96:	2b00      	cmp	r3, #0
    5a98:	d105      	bne.n	5aa6 <prvTraceGetDTS+0x2a>
		if (timestampFrequency != 0)
    5a9a:	4b37      	ldr	r3, [pc, #220]	; (5b78 <prvTraceGetDTS+0xfc>)
    5a9c:	681b      	ldr	r3, [r3, #0]
    5a9e:	2b00      	cmp	r3, #0
    5aa0:	d031      	beq.n	5b06 <prvTraceGetDTS+0x8a>
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
    5aa2:	089b      	lsrs	r3, r3, #2
    5aa4:	6263      	str	r3, [r4, #36]	; 0x24
	prvTracePortGetTimeStamp(&timestamp);	
    5aa6:	a801      	add	r0, sp, #4
    5aa8:	4b34      	ldr	r3, [pc, #208]	; (5b7c <prvTraceGetDTS+0x100>)
    5aaa:	4798      	blx	r3
	dts = timestamp - old_timestamp;
    5aac:	9b01      	ldr	r3, [sp, #4]
    5aae:	4a34      	ldr	r2, [pc, #208]	; (5b80 <prvTraceGetDTS+0x104>)
    5ab0:	6811      	ldr	r1, [r2, #0]
    5ab2:	1a5c      	subs	r4, r3, r1
	old_timestamp = timestamp;
    5ab4:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->frequency > 0)
    5ab6:	4a2f      	ldr	r2, [pc, #188]	; (5b74 <prvTraceGetDTS+0xf8>)
    5ab8:	6816      	ldr	r6, [r2, #0]
    5aba:	6a77      	ldr	r7, [r6, #36]	; 0x24
    5abc:	2f00      	cmp	r7, #0
    5abe:	d032      	beq.n	5b26 <prvTraceGetDTS+0xaa>
		if (dts > RecorderDataPtr->frequency)
    5ac0:	42bc      	cmp	r4, r7
    5ac2:	d92c      	bls.n	5b1e <prvTraceGetDTS+0xa2>
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
    5ac4:	0039      	movs	r1, r7
    5ac6:	0020      	movs	r0, r4
    5ac8:	4b2e      	ldr	r3, [pc, #184]	; (5b84 <prvTraceGetDTS+0x108>)
    5aca:	4798      	blx	r3
    5acc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    5ace:	469c      	mov	ip, r3
    5ad0:	4460      	add	r0, ip
    5ad2:	62f0      	str	r0, [r6, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
    5ad4:	0039      	movs	r1, r7
    5ad6:	0020      	movs	r0, r4
    5ad8:	4b2b      	ldr	r3, [pc, #172]	; (5b88 <prvTraceGetDTS+0x10c>)
    5ada:	4798      	blx	r3
    5adc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    5ade:	469c      	mov	ip, r3
    5ae0:	4461      	add	r1, ip
    5ae2:	62b1      	str	r1, [r6, #40]	; 0x28
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
    5ae4:	4b23      	ldr	r3, [pc, #140]	; (5b74 <prvTraceGetDTS+0xf8>)
    5ae6:	681b      	ldr	r3, [r3, #0]
    5ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5aea:	6a59      	ldr	r1, [r3, #36]	; 0x24
    5aec:	428a      	cmp	r2, r1
    5aee:	d31b      	bcc.n	5b28 <prvTraceGetDTS+0xac>
			RecorderDataPtr->absTimeLastEventSecond++;
    5af0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    5af2:	3001      	adds	r0, #1
    5af4:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
    5af6:	1a52      	subs	r2, r2, r1
    5af8:	629a      	str	r2, [r3, #40]	; 0x28
    5afa:	e015      	b.n	5b28 <prvTraceGetDTS+0xac>
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    5afc:	4823      	ldr	r0, [pc, #140]	; (5b8c <prvTraceGetDTS+0x110>)
    5afe:	4b24      	ldr	r3, [pc, #144]	; (5b90 <prvTraceGetDTS+0x114>)
    5b00:	4798      	blx	r3
    5b02:	2000      	movs	r0, #0
    5b04:	e014      	b.n	5b30 <prvTraceGetDTS+0xb4>
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
    5b06:	4b23      	ldr	r3, [pc, #140]	; (5b94 <prvTraceGetDTS+0x118>)
    5b08:	681a      	ldr	r2, [r3, #0]
    5b0a:	4b23      	ldr	r3, [pc, #140]	; (5b98 <prvTraceGetDTS+0x11c>)
    5b0c:	681b      	ldr	r3, [r3, #0]
    5b0e:	429a      	cmp	r2, r3
    5b10:	d0c9      	beq.n	5aa6 <prvTraceGetDTS+0x2a>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
    5b12:	2000      	movs	r0, #0
    5b14:	4b21      	ldr	r3, [pc, #132]	; (5b9c <prvTraceGetDTS+0x120>)
    5b16:	4798      	blx	r3
    5b18:	0880      	lsrs	r0, r0, #2
    5b1a:	6260      	str	r0, [r4, #36]	; 0x24
    5b1c:	e7c3      	b.n	5aa6 <prvTraceGetDTS+0x2a>
			RecorderDataPtr->absTimeLastEvent += dts;
    5b1e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    5b20:	191b      	adds	r3, r3, r4
    5b22:	62b3      	str	r3, [r6, #40]	; 0x28
    5b24:	e7de      	b.n	5ae4 <prvTraceGetDTS+0x68>
		RecorderDataPtr->absTimeLastEvent = timestamp;
    5b26:	62b3      	str	r3, [r6, #40]	; 0x28
	if (dts > param_maxDTS)
    5b28:	42ac      	cmp	r4, r5
    5b2a:	d803      	bhi.n	5b34 <prvTraceGetDTS+0xb8>
	return (uint16_t)dts & param_maxDTS;
    5b2c:	0020      	movs	r0, r4
    5b2e:	4028      	ands	r0, r5
}
    5b30:	b003      	add	sp, #12
    5b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
    5b34:	4b1a      	ldr	r3, [pc, #104]	; (5ba0 <prvTraceGetDTS+0x124>)
    5b36:	4798      	blx	r3
		if (xts != NULL)
    5b38:	2800      	cmp	r0, #0
    5b3a:	d0f7      	beq.n	5b2c <prvTraceGetDTS+0xb0>
			if (param_maxDTS == 0xFFFF)
    5b3c:	4b0c      	ldr	r3, [pc, #48]	; (5b70 <prvTraceGetDTS+0xf4>)
    5b3e:	429d      	cmp	r5, r3
    5b40:	d007      	beq.n	5b52 <prvTraceGetDTS+0xd6>
			else if (param_maxDTS == 0xFF)
    5b42:	2dff      	cmp	r5, #255	; 0xff
    5b44:	d00c      	beq.n	5b60 <prvTraceGetDTS+0xe4>
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
    5b46:	4817      	ldr	r0, [pc, #92]	; (5ba4 <prvTraceGetDTS+0x128>)
    5b48:	4b11      	ldr	r3, [pc, #68]	; (5b90 <prvTraceGetDTS+0x114>)
    5b4a:	4798      	blx	r3
			prvTraceUpdateCounters();
    5b4c:	4b16      	ldr	r3, [pc, #88]	; (5ba8 <prvTraceGetDTS+0x12c>)
    5b4e:	4798      	blx	r3
    5b50:	e7ec      	b.n	5b2c <prvTraceGetDTS+0xb0>
				xts->type = XTS16;
    5b52:	23a9      	movs	r3, #169	; 0xa9
    5b54:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
    5b56:	0c23      	lsrs	r3, r4, #16
    5b58:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = 0;
    5b5a:	2300      	movs	r3, #0
    5b5c:	7043      	strb	r3, [r0, #1]
    5b5e:	e7f5      	b.n	5b4c <prvTraceGetDTS+0xd0>
				xts->type = XTS8;
    5b60:	23a8      	movs	r3, #168	; 0xa8
    5b62:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
    5b64:	0a23      	lsrs	r3, r4, #8
    5b66:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
    5b68:	0e23      	lsrs	r3, r4, #24
    5b6a:	7043      	strb	r3, [r0, #1]
    5b6c:	e7ee      	b.n	5b4c <prvTraceGetDTS+0xd0>
    5b6e:	46c0      	nop			; (mov r8, r8)
    5b70:	0000ffff 	.word	0x0000ffff
    5b74:	20000bec 	.word	0x20000bec
    5b78:	20000ca0 	.word	0x20000ca0
    5b7c:	000059e5 	.word	0x000059e5
    5b80:	20000c98 	.word	0x20000c98
    5b84:	00015815 	.word	0x00015815
    5b88:	00015921 	.word	0x00015921
    5b8c:	00019c0c 	.word	0x00019c0c
    5b90:	000054e5 	.word	0x000054e5
    5b94:	e000e018 	.word	0xe000e018
    5b98:	20005718 	.word	0x20005718
    5b9c:	0000ea69 	.word	0x0000ea69
    5ba0:	0000553d 	.word	0x0000553d
    5ba4:	00019c4c 	.word	0x00019c4c
    5ba8:	00005631 	.word	0x00005631

00005bac <prvTraceStoreTaskReady>:
{
    5bac:	b570      	push	{r4, r5, r6, lr}
    5bae:	1e04      	subs	r4, r0, #0
	if (handle == 0)
    5bb0:	d01d      	beq.n	5bee <prvTraceStoreTaskReady+0x42>
	if (! readyEventsEnabled)
    5bb2:	4b1b      	ldr	r3, [pc, #108]	; (5c20 <prvTraceStoreTaskReady+0x74>)
    5bb4:	681b      	ldr	r3, [r3, #0]
    5bb6:	2b00      	cmp	r3, #0
    5bb8:	d019      	beq.n	5bee <prvTraceStoreTaskReady+0x42>
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    5bba:	280f      	cmp	r0, #15
    5bbc:	d818      	bhi.n	5bf0 <prvTraceStoreTaskReady+0x44>
	if (recorder_busy)
    5bbe:	4b19      	ldr	r3, [pc, #100]	; (5c24 <prvTraceStoreTaskReady+0x78>)
    5bc0:	681b      	ldr	r3, [r3, #0]
    5bc2:	2b00      	cmp	r3, #0
    5bc4:	d118      	bne.n	5bf8 <prvTraceStoreTaskReady+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5bc6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5bca:	2301      	movs	r3, #1
    5bcc:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    5bd0:	4a14      	ldr	r2, [pc, #80]	; (5c24 <prvTraceStoreTaskReady+0x78>)
    5bd2:	6813      	ldr	r3, [r2, #0]
    5bd4:	3301      	adds	r3, #1
    5bd6:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
    5bd8:	4b13      	ldr	r3, [pc, #76]	; (5c28 <prvTraceStoreTaskReady+0x7c>)
    5bda:	681b      	ldr	r3, [r3, #0]
    5bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5bde:	2b00      	cmp	r3, #0
    5be0:	d10e      	bne.n	5c00 <prvTraceStoreTaskReady+0x54>
	trcCRITICAL_SECTION_END();
    5be2:	4a10      	ldr	r2, [pc, #64]	; (5c24 <prvTraceStoreTaskReady+0x78>)
    5be4:	6813      	ldr	r3, [r2, #0]
    5be6:	3b01      	subs	r3, #1
    5be8:	6013      	str	r3, [r2, #0]
    5bea:	f385 8810 	msr	PRIMASK, r5
}
    5bee:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    5bf0:	480e      	ldr	r0, [pc, #56]	; (5c2c <prvTraceStoreTaskReady+0x80>)
    5bf2:	4b0f      	ldr	r3, [pc, #60]	; (5c30 <prvTraceStoreTaskReady+0x84>)
    5bf4:	4798      	blx	r3
    5bf6:	e7fa      	b.n	5bee <prvTraceStoreTaskReady+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
    5bf8:	480e      	ldr	r0, [pc, #56]	; (5c34 <prvTraceStoreTaskReady+0x88>)
    5bfa:	4b0d      	ldr	r3, [pc, #52]	; (5c30 <prvTraceStoreTaskReady+0x84>)
    5bfc:	4798      	blx	r3
		return;
    5bfe:	e7f6      	b.n	5bee <prvTraceStoreTaskReady+0x42>
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    5c00:	480d      	ldr	r0, [pc, #52]	; (5c38 <prvTraceStoreTaskReady+0x8c>)
    5c02:	4b0e      	ldr	r3, [pc, #56]	; (5c3c <prvTraceStoreTaskReady+0x90>)
    5c04:	4798      	blx	r3
    5c06:	0006      	movs	r6, r0
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
    5c08:	4b0d      	ldr	r3, [pc, #52]	; (5c40 <prvTraceStoreTaskReady+0x94>)
    5c0a:	4798      	blx	r3
		if (tr != NULL)
    5c0c:	2800      	cmp	r0, #0
    5c0e:	d0e8      	beq.n	5be2 <prvTraceStoreTaskReady+0x36>
			tr->type = DIV_TASK_READY;
    5c10:	2302      	movs	r3, #2
    5c12:	7003      	strb	r3, [r0, #0]
			tr->dts = dts3;
    5c14:	8046      	strh	r6, [r0, #2]
			tr->objHandle = hnd8;
    5c16:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
    5c18:	4b0a      	ldr	r3, [pc, #40]	; (5c44 <prvTraceStoreTaskReady+0x98>)
    5c1a:	4798      	blx	r3
    5c1c:	e7e1      	b.n	5be2 <prvTraceStoreTaskReady+0x36>
    5c1e:	46c0      	nop			; (mov r8, r8)
    5c20:	20000210 	.word	0x20000210
    5c24:	20000c9c 	.word	0x20000c9c
    5c28:	20000bec 	.word	0x20000bec
    5c2c:	0001a24c 	.word	0x0001a24c
    5c30:	000054e5 	.word	0x000054e5
    5c34:	0001a28c 	.word	0x0001a28c
    5c38:	0000ffff 	.word	0x0000ffff
    5c3c:	00005a7d 	.word	0x00005a7d
    5c40:	0000553d 	.word	0x0000553d
    5c44:	00005631 	.word	0x00005631

00005c48 <vTraceStoreMemMangEvent>:
{
    5c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c4a:	b083      	sub	sp, #12
    5c4c:	9000      	str	r0, [sp, #0]
    5c4e:	000c      	movs	r4, r1
	if (RecorderDataPtr == NULL)
    5c50:	4b28      	ldr	r3, [pc, #160]	; (5cf4 <vTraceStoreMemMangEvent+0xac>)
    5c52:	681b      	ldr	r3, [r3, #0]
    5c54:	2b00      	cmp	r3, #0
    5c56:	d01d      	beq.n	5c94 <vTraceStoreMemMangEvent+0x4c>
		size = (uint32_t)(- signed_size);
    5c58:	17d3      	asrs	r3, r2, #31
    5c5a:	18d6      	adds	r6, r2, r3
    5c5c:	405e      	eors	r6, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5c5e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5c62:	2301      	movs	r3, #1
    5c64:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    5c68:	4923      	ldr	r1, [pc, #140]	; (5cf8 <vTraceStoreMemMangEvent+0xb0>)
    5c6a:	680b      	ldr	r3, [r1, #0]
    5c6c:	3301      	adds	r3, #1
    5c6e:	600b      	str	r3, [r1, #0]
	if (address != 0)
    5c70:	2c00      	cmp	r4, #0
    5c72:	d004      	beq.n	5c7e <vTraceStoreMemMangEvent+0x36>
		heapMemUsage += (uint32_t)signed_size;
    5c74:	4b21      	ldr	r3, [pc, #132]	; (5cfc <vTraceStoreMemMangEvent+0xb4>)
    5c76:	6819      	ldr	r1, [r3, #0]
    5c78:	468c      	mov	ip, r1
    5c7a:	4462      	add	r2, ip
    5c7c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
    5c7e:	4b1d      	ldr	r3, [pc, #116]	; (5cf4 <vTraceStoreMemMangEvent+0xac>)
    5c80:	681b      	ldr	r3, [r3, #0]
    5c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5c84:	2b00      	cmp	r3, #0
    5c86:	d107      	bne.n	5c98 <vTraceStoreMemMangEvent+0x50>
	trcCRITICAL_SECTION_END();
    5c88:	4a1b      	ldr	r2, [pc, #108]	; (5cf8 <vTraceStoreMemMangEvent+0xb0>)
    5c8a:	6813      	ldr	r3, [r2, #0]
    5c8c:	3b01      	subs	r3, #1
    5c8e:	6013      	str	r3, [r2, #0]
    5c90:	f385 8810 	msr	PRIMASK, r5
}
    5c94:	b003      	add	sp, #12
    5c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
    5c98:	20ff      	movs	r0, #255	; 0xff
    5c9a:	4b19      	ldr	r3, [pc, #100]	; (5d00 <vTraceStoreMemMangEvent+0xb8>)
    5c9c:	4798      	blx	r3
    5c9e:	9001      	str	r0, [sp, #4]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
    5ca0:	0031      	movs	r1, r6
    5ca2:	4818      	ldr	r0, [pc, #96]	; (5d04 <vTraceStoreMemMangEvent+0xbc>)
    5ca4:	4b18      	ldr	r3, [pc, #96]	; (5d08 <vTraceStoreMemMangEvent+0xc0>)
    5ca6:	4798      	blx	r3
    5ca8:	0006      	movs	r6, r0
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
    5caa:	4b18      	ldr	r3, [pc, #96]	; (5d0c <vTraceStoreMemMangEvent+0xc4>)
    5cac:	4798      	blx	r3
    5cae:	1e07      	subs	r7, r0, #0
		if (ms != NULL)
    5cb0:	d0ea      	beq.n	5c88 <vTraceStoreMemMangEvent+0x40>
			ms->dts = dts1;
    5cb2:	466b      	mov	r3, sp
    5cb4:	791b      	ldrb	r3, [r3, #4]
    5cb6:	7043      	strb	r3, [r0, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
    5cb8:	2300      	movs	r3, #0
    5cba:	7003      	strb	r3, [r0, #0]
			ms->size = size_low;
    5cbc:	8046      	strh	r6, [r0, #2]
			prvTraceUpdateCounters();
    5cbe:	4b14      	ldr	r3, [pc, #80]	; (5d10 <vTraceStoreMemMangEvent+0xc8>)
    5cc0:	4798      	blx	r3
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
    5cc2:	0021      	movs	r1, r4
    5cc4:	480f      	ldr	r0, [pc, #60]	; (5d04 <vTraceStoreMemMangEvent+0xbc>)
    5cc6:	4b10      	ldr	r3, [pc, #64]	; (5d08 <vTraceStoreMemMangEvent+0xc0>)
    5cc8:	4798      	blx	r3
    5cca:	0006      	movs	r6, r0
			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
    5ccc:	4b0f      	ldr	r3, [pc, #60]	; (5d0c <vTraceStoreMemMangEvent+0xc4>)
    5cce:	4798      	blx	r3
			if (ma != NULL)
    5cd0:	2800      	cmp	r0, #0
    5cd2:	d0d9      	beq.n	5c88 <vTraceStoreMemMangEvent+0x40>
				ma->addr_low = addr_low;
    5cd4:	8046      	strh	r6, [r0, #2]
				ma->addr_high = addr_high;
    5cd6:	2300      	movs	r3, #0
    5cd8:	7043      	strb	r3, [r0, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
    5cda:	466b      	mov	r3, sp
    5cdc:	781c      	ldrb	r4, [r3, #0]
    5cde:	1c63      	adds	r3, r4, #1
    5ce0:	7003      	strb	r3, [r0, #0]
				ms->type = (uint8_t) ecode;
    5ce2:	703c      	strb	r4, [r7, #0]
				prvTraceUpdateCounters();					
    5ce4:	4b0a      	ldr	r3, [pc, #40]	; (5d10 <vTraceStoreMemMangEvent+0xc8>)
    5ce6:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
    5ce8:	4b02      	ldr	r3, [pc, #8]	; (5cf4 <vTraceStoreMemMangEvent+0xac>)
    5cea:	681b      	ldr	r3, [r3, #0]
    5cec:	4a03      	ldr	r2, [pc, #12]	; (5cfc <vTraceStoreMemMangEvent+0xb4>)
    5cee:	6812      	ldr	r2, [r2, #0]
    5cf0:	651a      	str	r2, [r3, #80]	; 0x50
    5cf2:	e7c9      	b.n	5c88 <vTraceStoreMemMangEvent+0x40>
    5cf4:	20000bec 	.word	0x20000bec
    5cf8:	20000c9c 	.word	0x20000c9c
    5cfc:	20000bf4 	.word	0x20000bf4
    5d00:	00005a7d 	.word	0x00005a7d
    5d04:	0000ffff 	.word	0x0000ffff
    5d08:	00005669 	.word	0x00005669
    5d0c:	0000553d 	.word	0x0000553d
    5d10:	00005631 	.word	0x00005631

00005d14 <prvTraceStoreKernelCall>:
{
    5d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d16:	0005      	movs	r5, r0
    5d18:	0014      	movs	r4, r2
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    5d1a:	28fe      	cmp	r0, #254	; 0xfe
    5d1c:	d825      	bhi.n	5d6a <prvTraceStoreKernelCall+0x56>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    5d1e:	2908      	cmp	r1, #8
    5d20:	d827      	bhi.n	5d72 <prvTraceStoreKernelCall+0x5e>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    5d22:	4b21      	ldr	r3, [pc, #132]	; (5da8 <prvTraceStoreKernelCall+0x94>)
    5d24:	681b      	ldr	r3, [r3, #0]
    5d26:	1859      	adds	r1, r3, r1
    5d28:	3164      	adds	r1, #100	; 0x64
    5d2a:	780b      	ldrb	r3, [r1, #0]
    5d2c:	4293      	cmp	r3, r2
    5d2e:	d324      	bcc.n	5d7a <prvTraceStoreKernelCall+0x66>
	if (recorder_busy)
    5d30:	4b1e      	ldr	r3, [pc, #120]	; (5dac <prvTraceStoreKernelCall+0x98>)
    5d32:	681b      	ldr	r3, [r3, #0]
    5d34:	2b00      	cmp	r3, #0
    5d36:	d124      	bne.n	5d82 <prvTraceStoreKernelCall+0x6e>
	if (handle_of_last_logged_task == 0)
    5d38:	4b1d      	ldr	r3, [pc, #116]	; (5db0 <prvTraceStoreKernelCall+0x9c>)
    5d3a:	781b      	ldrb	r3, [r3, #0]
    5d3c:	2b00      	cmp	r3, #0
    5d3e:	d013      	beq.n	5d68 <prvTraceStoreKernelCall+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5d40:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5d44:	2301      	movs	r3, #1
    5d46:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    5d4a:	4a18      	ldr	r2, [pc, #96]	; (5dac <prvTraceStoreKernelCall+0x98>)
    5d4c:	6813      	ldr	r3, [r2, #0]
    5d4e:	3301      	adds	r3, #1
    5d50:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
    5d52:	4b15      	ldr	r3, [pc, #84]	; (5da8 <prvTraceStoreKernelCall+0x94>)
    5d54:	681b      	ldr	r3, [r3, #0]
    5d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5d58:	2b00      	cmp	r3, #0
    5d5a:	d116      	bne.n	5d8a <prvTraceStoreKernelCall+0x76>
	trcCRITICAL_SECTION_END();
    5d5c:	4a13      	ldr	r2, [pc, #76]	; (5dac <prvTraceStoreKernelCall+0x98>)
    5d5e:	6813      	ldr	r3, [r2, #0]
    5d60:	3b01      	subs	r3, #1
    5d62:	6013      	str	r3, [r2, #0]
    5d64:	f386 8810 	msr	PRIMASK, r6
}
    5d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    5d6a:	4812      	ldr	r0, [pc, #72]	; (5db4 <prvTraceStoreKernelCall+0xa0>)
    5d6c:	4b12      	ldr	r3, [pc, #72]	; (5db8 <prvTraceStoreKernelCall+0xa4>)
    5d6e:	4798      	blx	r3
    5d70:	e7fa      	b.n	5d68 <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    5d72:	4812      	ldr	r0, [pc, #72]	; (5dbc <prvTraceStoreKernelCall+0xa8>)
    5d74:	4b10      	ldr	r3, [pc, #64]	; (5db8 <prvTraceStoreKernelCall+0xa4>)
    5d76:	4798      	blx	r3
    5d78:	e7f6      	b.n	5d68 <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    5d7a:	4811      	ldr	r0, [pc, #68]	; (5dc0 <prvTraceStoreKernelCall+0xac>)
    5d7c:	4b0e      	ldr	r3, [pc, #56]	; (5db8 <prvTraceStoreKernelCall+0xa4>)
    5d7e:	4798      	blx	r3
    5d80:	e7f2      	b.n	5d68 <prvTraceStoreKernelCall+0x54>
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
    5d82:	4810      	ldr	r0, [pc, #64]	; (5dc4 <prvTraceStoreKernelCall+0xb0>)
    5d84:	4b0c      	ldr	r3, [pc, #48]	; (5db8 <prvTraceStoreKernelCall+0xa4>)
    5d86:	4798      	blx	r3
		return;
    5d88:	e7ee      	b.n	5d68 <prvTraceStoreKernelCall+0x54>
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
    5d8a:	480f      	ldr	r0, [pc, #60]	; (5dc8 <prvTraceStoreKernelCall+0xb4>)
    5d8c:	4b0f      	ldr	r3, [pc, #60]	; (5dcc <prvTraceStoreKernelCall+0xb8>)
    5d8e:	4798      	blx	r3
    5d90:	0007      	movs	r7, r0
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
    5d92:	4b0f      	ldr	r3, [pc, #60]	; (5dd0 <prvTraceStoreKernelCall+0xbc>)
    5d94:	4798      	blx	r3
		if (kse != NULL)
    5d96:	2800      	cmp	r0, #0
    5d98:	d0e0      	beq.n	5d5c <prvTraceStoreKernelCall+0x48>
			kse->dts = dts1;
    5d9a:	8047      	strh	r7, [r0, #2]
			kse->type = (uint8_t)ecode;
    5d9c:	7005      	strb	r5, [r0, #0]
			kse->objHandle = hnd8;
    5d9e:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
    5da0:	4b0c      	ldr	r3, [pc, #48]	; (5dd4 <prvTraceStoreKernelCall+0xc0>)
    5da2:	4798      	blx	r3
    5da4:	e7da      	b.n	5d5c <prvTraceStoreKernelCall+0x48>
    5da6:	46c0      	nop			; (mov r8, r8)
    5da8:	20000bec 	.word	0x20000bec
    5dac:	20000c9c 	.word	0x20000c9c
    5db0:	20000bf0 	.word	0x20000bf0
    5db4:	00019fa4 	.word	0x00019fa4
    5db8:	000054e5 	.word	0x000054e5
    5dbc:	00019fdc 	.word	0x00019fdc
    5dc0:	0001a024 	.word	0x0001a024
    5dc4:	0001a06c 	.word	0x0001a06c
    5dc8:	0000ffff 	.word	0x0000ffff
    5dcc:	00005a7d 	.word	0x00005a7d
    5dd0:	0000553d 	.word	0x0000553d
    5dd4:	00005631 	.word	0x00005631

00005dd8 <prvTraceStoreKernelCallWithParam>:
{
    5dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dda:	46c6      	mov	lr, r8
    5ddc:	b500      	push	{lr}
    5dde:	0006      	movs	r6, r0
    5de0:	0014      	movs	r4, r2
    5de2:	001d      	movs	r5, r3
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    5de4:	28fe      	cmp	r0, #254	; 0xfe
    5de6:	d827      	bhi.n	5e38 <prvTraceStoreKernelCallWithParam+0x60>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    5de8:	2908      	cmp	r1, #8
    5dea:	d829      	bhi.n	5e40 <prvTraceStoreKernelCallWithParam+0x68>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    5dec:	4b24      	ldr	r3, [pc, #144]	; (5e80 <prvTraceStoreKernelCallWithParam+0xa8>)
    5dee:	681b      	ldr	r3, [r3, #0]
    5df0:	1859      	adds	r1, r3, r1
    5df2:	3164      	adds	r1, #100	; 0x64
    5df4:	780b      	ldrb	r3, [r1, #0]
    5df6:	4293      	cmp	r3, r2
    5df8:	d326      	bcc.n	5e48 <prvTraceStoreKernelCallWithParam+0x70>
	if (recorder_busy)
    5dfa:	4b22      	ldr	r3, [pc, #136]	; (5e84 <prvTraceStoreKernelCallWithParam+0xac>)
    5dfc:	681b      	ldr	r3, [r3, #0]
    5dfe:	2b00      	cmp	r3, #0
    5e00:	d126      	bne.n	5e50 <prvTraceStoreKernelCallWithParam+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5e02:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5e06:	2301      	movs	r3, #1
    5e08:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    5e0c:	4a1d      	ldr	r2, [pc, #116]	; (5e84 <prvTraceStoreKernelCallWithParam+0xac>)
    5e0e:	6813      	ldr	r3, [r2, #0]
    5e10:	3301      	adds	r3, #1
    5e12:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    5e14:	4b1a      	ldr	r3, [pc, #104]	; (5e80 <prvTraceStoreKernelCallWithParam+0xa8>)
    5e16:	681b      	ldr	r3, [r3, #0]
    5e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5e1a:	2b00      	cmp	r3, #0
    5e1c:	d003      	beq.n	5e26 <prvTraceStoreKernelCallWithParam+0x4e>
    5e1e:	4b1a      	ldr	r3, [pc, #104]	; (5e88 <prvTraceStoreKernelCallWithParam+0xb0>)
    5e20:	781b      	ldrb	r3, [r3, #0]
    5e22:	2b00      	cmp	r3, #0
    5e24:	d118      	bne.n	5e58 <prvTraceStoreKernelCallWithParam+0x80>
	trcCRITICAL_SECTION_END();
    5e26:	4a17      	ldr	r2, [pc, #92]	; (5e84 <prvTraceStoreKernelCallWithParam+0xac>)
    5e28:	6813      	ldr	r3, [r2, #0]
    5e2a:	3b01      	subs	r3, #1
    5e2c:	6013      	str	r3, [r2, #0]
    5e2e:	f388 8810 	msr	PRIMASK, r8
}
    5e32:	bc04      	pop	{r2}
    5e34:	4690      	mov	r8, r2
    5e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    5e38:	4814      	ldr	r0, [pc, #80]	; (5e8c <prvTraceStoreKernelCallWithParam+0xb4>)
    5e3a:	4b15      	ldr	r3, [pc, #84]	; (5e90 <prvTraceStoreKernelCallWithParam+0xb8>)
    5e3c:	4798      	blx	r3
    5e3e:	e7f8      	b.n	5e32 <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    5e40:	4814      	ldr	r0, [pc, #80]	; (5e94 <prvTraceStoreKernelCallWithParam+0xbc>)
    5e42:	4b13      	ldr	r3, [pc, #76]	; (5e90 <prvTraceStoreKernelCallWithParam+0xb8>)
    5e44:	4798      	blx	r3
    5e46:	e7f4      	b.n	5e32 <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    5e48:	4813      	ldr	r0, [pc, #76]	; (5e98 <prvTraceStoreKernelCallWithParam+0xc0>)
    5e4a:	4b11      	ldr	r3, [pc, #68]	; (5e90 <prvTraceStoreKernelCallWithParam+0xb8>)
    5e4c:	4798      	blx	r3
    5e4e:	e7f0      	b.n	5e32 <prvTraceStoreKernelCallWithParam+0x5a>
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
    5e50:	4812      	ldr	r0, [pc, #72]	; (5e9c <prvTraceStoreKernelCallWithParam+0xc4>)
    5e52:	4b0f      	ldr	r3, [pc, #60]	; (5e90 <prvTraceStoreKernelCallWithParam+0xb8>)
    5e54:	4798      	blx	r3
		return;
    5e56:	e7ec      	b.n	5e32 <prvTraceStoreKernelCallWithParam+0x5a>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
    5e58:	20ff      	movs	r0, #255	; 0xff
    5e5a:	4b11      	ldr	r3, [pc, #68]	; (5ea0 <prvTraceStoreKernelCallWithParam+0xc8>)
    5e5c:	4798      	blx	r3
    5e5e:	0007      	movs	r7, r0
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
    5e60:	0029      	movs	r1, r5
    5e62:	20ff      	movs	r0, #255	; 0xff
    5e64:	4b0f      	ldr	r3, [pc, #60]	; (5ea4 <prvTraceStoreKernelCallWithParam+0xcc>)
    5e66:	4798      	blx	r3
    5e68:	0005      	movs	r5, r0
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
    5e6a:	4b0f      	ldr	r3, [pc, #60]	; (5ea8 <prvTraceStoreKernelCallWithParam+0xd0>)
    5e6c:	4798      	blx	r3
		if (kse != NULL)
    5e6e:	2800      	cmp	r0, #0
    5e70:	d0d9      	beq.n	5e26 <prvTraceStoreKernelCallWithParam+0x4e>
			kse->dts = dts2;
    5e72:	70c7      	strb	r7, [r0, #3]
			kse->type = (uint8_t)evtcode;
    5e74:	7006      	strb	r6, [r0, #0]
			kse->objHandle = hnd8;
    5e76:	7044      	strb	r4, [r0, #1]
			kse->param = p8;
    5e78:	7085      	strb	r5, [r0, #2]
			prvTraceUpdateCounters();
    5e7a:	4b0c      	ldr	r3, [pc, #48]	; (5eac <prvTraceStoreKernelCallWithParam+0xd4>)
    5e7c:	4798      	blx	r3
    5e7e:	e7d2      	b.n	5e26 <prvTraceStoreKernelCallWithParam+0x4e>
    5e80:	20000bec 	.word	0x20000bec
    5e84:	20000c9c 	.word	0x20000c9c
    5e88:	20000bf0 	.word	0x20000bf0
    5e8c:	0001a134 	.word	0x0001a134
    5e90:	000054e5 	.word	0x000054e5
    5e94:	0001a174 	.word	0x0001a174
    5e98:	0001a1c4 	.word	0x0001a1c4
    5e9c:	0001a214 	.word	0x0001a214
    5ea0:	00005a7d 	.word	0x00005a7d
    5ea4:	00005669 	.word	0x00005669
    5ea8:	0000553d 	.word	0x0000553d
    5eac:	00005631 	.word	0x00005631

00005eb0 <prvTraceStoreKernelCallWithNumericParamOnly>:
{
    5eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5eb2:	0004      	movs	r4, r0
    5eb4:	000d      	movs	r5, r1
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    5eb6:	28fe      	cmp	r0, #254	; 0xfe
    5eb8:	d81c      	bhi.n	5ef4 <prvTraceStoreKernelCallWithNumericParamOnly+0x44>
	if (recorder_busy)
    5eba:	4b1c      	ldr	r3, [pc, #112]	; (5f2c <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    5ebc:	681b      	ldr	r3, [r3, #0]
    5ebe:	2b00      	cmp	r3, #0
    5ec0:	d11c      	bne.n	5efc <prvTraceStoreKernelCallWithNumericParamOnly+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5ec2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5ec6:	2301      	movs	r3, #1
    5ec8:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    5ecc:	4a17      	ldr	r2, [pc, #92]	; (5f2c <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    5ece:	6813      	ldr	r3, [r2, #0]
    5ed0:	3301      	adds	r3, #1
    5ed2:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    5ed4:	4b16      	ldr	r3, [pc, #88]	; (5f30 <prvTraceStoreKernelCallWithNumericParamOnly+0x80>)
    5ed6:	681b      	ldr	r3, [r3, #0]
    5ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5eda:	2b00      	cmp	r3, #0
    5edc:	d003      	beq.n	5ee6 <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
    5ede:	4b15      	ldr	r3, [pc, #84]	; (5f34 <prvTraceStoreKernelCallWithNumericParamOnly+0x84>)
    5ee0:	781b      	ldrb	r3, [r3, #0]
    5ee2:	2b00      	cmp	r3, #0
    5ee4:	d10e      	bne.n	5f04 <prvTraceStoreKernelCallWithNumericParamOnly+0x54>
	trcCRITICAL_SECTION_END();
    5ee6:	4a11      	ldr	r2, [pc, #68]	; (5f2c <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    5ee8:	6813      	ldr	r3, [r2, #0]
    5eea:	3b01      	subs	r3, #1
    5eec:	6013      	str	r3, [r2, #0]
    5eee:	f386 8810 	msr	PRIMASK, r6
}
    5ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    5ef4:	4810      	ldr	r0, [pc, #64]	; (5f38 <prvTraceStoreKernelCallWithNumericParamOnly+0x88>)
    5ef6:	4b11      	ldr	r3, [pc, #68]	; (5f3c <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
    5ef8:	4798      	blx	r3
    5efa:	e7fa      	b.n	5ef2 <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
    5efc:	4810      	ldr	r0, [pc, #64]	; (5f40 <prvTraceStoreKernelCallWithNumericParamOnly+0x90>)
    5efe:	4b0f      	ldr	r3, [pc, #60]	; (5f3c <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
    5f00:	4798      	blx	r3
		return;
    5f02:	e7f6      	b.n	5ef2 <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
    5f04:	20ff      	movs	r0, #255	; 0xff
    5f06:	4b0f      	ldr	r3, [pc, #60]	; (5f44 <prvTraceStoreKernelCallWithNumericParamOnly+0x94>)
    5f08:	4798      	blx	r3
    5f0a:	0007      	movs	r7, r0
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
    5f0c:	0029      	movs	r1, r5
    5f0e:	480e      	ldr	r0, [pc, #56]	; (5f48 <prvTraceStoreKernelCallWithNumericParamOnly+0x98>)
    5f10:	4b0e      	ldr	r3, [pc, #56]	; (5f4c <prvTraceStoreKernelCallWithNumericParamOnly+0x9c>)
    5f12:	4798      	blx	r3
    5f14:	0005      	movs	r5, r0
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
    5f16:	4b0e      	ldr	r3, [pc, #56]	; (5f50 <prvTraceStoreKernelCallWithNumericParamOnly+0xa0>)
    5f18:	4798      	blx	r3
		if (kse != NULL)
    5f1a:	2800      	cmp	r0, #0
    5f1c:	d0e3      	beq.n	5ee6 <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
			kse->dts = dts6;
    5f1e:	7047      	strb	r7, [r0, #1]
			kse->type = (uint8_t)evtcode;
    5f20:	7004      	strb	r4, [r0, #0]
			kse->param = restParam;
    5f22:	8045      	strh	r5, [r0, #2]
			prvTraceUpdateCounters();
    5f24:	4b0b      	ldr	r3, [pc, #44]	; (5f54 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>)
    5f26:	4798      	blx	r3
    5f28:	e7dd      	b.n	5ee6 <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
    5f2a:	46c0      	nop			; (mov r8, r8)
    5f2c:	20000c9c 	.word	0x20000c9c
    5f30:	20000bec 	.word	0x20000bec
    5f34:	20000bf0 	.word	0x20000bf0
    5f38:	0001a0a4 	.word	0x0001a0a4
    5f3c:	000054e5 	.word	0x000054e5
    5f40:	0001a0fc 	.word	0x0001a0fc
    5f44:	00005a7d 	.word	0x00005a7d
    5f48:	0000ffff 	.word	0x0000ffff
    5f4c:	00005669 	.word	0x00005669
    5f50:	0000553d 	.word	0x0000553d
    5f54:	00005631 	.word	0x00005631

00005f58 <prvTraceStoreTaskswitch>:
{
    5f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f5a:	0004      	movs	r4, r0
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    5f5c:	280f      	cmp	r0, #15
    5f5e:	d818      	bhi.n	5f92 <prvTraceStoreTaskswitch+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5f60:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5f64:	2301      	movs	r3, #1
    5f66:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
    5f6a:	4a26      	ldr	r2, [pc, #152]	; (6004 <prvTraceStoreTaskswitch+0xac>)
    5f6c:	6813      	ldr	r3, [r2, #0]
    5f6e:	3301      	adds	r3, #1
    5f70:	6013      	str	r3, [r2, #0]
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
    5f72:	4b25      	ldr	r3, [pc, #148]	; (6008 <prvTraceStoreTaskswitch+0xb0>)
    5f74:	781b      	ldrb	r3, [r3, #0]
    5f76:	4283      	cmp	r3, r0
    5f78:	d004      	beq.n	5f84 <prvTraceStoreTaskswitch+0x2c>
    5f7a:	4b24      	ldr	r3, [pc, #144]	; (600c <prvTraceStoreTaskswitch+0xb4>)
    5f7c:	681b      	ldr	r3, [r3, #0]
    5f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5f80:	2b00      	cmp	r3, #0
    5f82:	d10a      	bne.n	5f9a <prvTraceStoreTaskswitch+0x42>
	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
    5f84:	4a1f      	ldr	r2, [pc, #124]	; (6004 <prvTraceStoreTaskswitch+0xac>)
    5f86:	6813      	ldr	r3, [r2, #0]
    5f88:	3b01      	subs	r3, #1
    5f8a:	6013      	str	r3, [r2, #0]
    5f8c:	f385 8810 	msr	PRIMASK, r5
}
    5f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    5f92:	481f      	ldr	r0, [pc, #124]	; (6010 <prvTraceStoreTaskswitch+0xb8>)
    5f94:	4b1f      	ldr	r3, [pc, #124]	; (6014 <prvTraceStoreTaskswitch+0xbc>)
    5f96:	4798      	blx	r3
    5f98:	e7fa      	b.n	5f90 <prvTraceStoreTaskswitch+0x38>
		isPendingContextSwitch = 0;
    5f9a:	2200      	movs	r2, #0
    5f9c:	4b1e      	ldr	r3, [pc, #120]	; (6018 <prvTraceStoreTaskswitch+0xc0>)
    5f9e:	601a      	str	r2, [r3, #0]
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    5fa0:	481e      	ldr	r0, [pc, #120]	; (601c <prvTraceStoreTaskswitch+0xc4>)
    5fa2:	4b1f      	ldr	r3, [pc, #124]	; (6020 <prvTraceStoreTaskswitch+0xc8>)
    5fa4:	4798      	blx	r3
    5fa6:	0007      	movs	r7, r0
		handle_of_last_logged_task = task_handle;
    5fa8:	4b17      	ldr	r3, [pc, #92]	; (6008 <prvTraceStoreTaskswitch+0xb0>)
    5faa:	701c      	strb	r4, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
    5fac:	4b1d      	ldr	r3, [pc, #116]	; (6024 <prvTraceStoreTaskswitch+0xcc>)
    5fae:	4798      	blx	r3
    5fb0:	1e06      	subs	r6, r0, #0
		if (ts != NULL)
    5fb2:	d0e7      	beq.n	5f84 <prvTraceStoreTaskswitch+0x2c>
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    5fb4:	4b14      	ldr	r3, [pc, #80]	; (6008 <prvTraceStoreTaskswitch+0xb0>)
    5fb6:	7818      	ldrb	r0, [r3, #0]
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    5fb8:	4b14      	ldr	r3, [pc, #80]	; (600c <prvTraceStoreTaskswitch+0xb4>)
    5fba:	681a      	ldr	r2, [r3, #0]
    5fbc:	2367      	movs	r3, #103	; 0x67
    5fbe:	5cd3      	ldrb	r3, [r2, r3]
    5fc0:	4283      	cmp	r3, r0
    5fc2:	d30f      	bcc.n	5fe4 <prvTraceStoreTaskswitch+0x8c>
	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
    5fc4:	2103      	movs	r1, #3
    5fc6:	4b18      	ldr	r3, [pc, #96]	; (6028 <prvTraceStoreTaskswitch+0xd0>)
    5fc8:	4798      	blx	r3
    5fca:	4b10      	ldr	r3, [pc, #64]	; (600c <prvTraceStoreTaskswitch+0xb4>)
    5fcc:	681b      	ldr	r3, [r3, #0]
    5fce:	2273      	movs	r2, #115	; 0x73
    5fd0:	5c9a      	ldrb	r2, [r3, r2]
    5fd2:	181b      	adds	r3, r3, r0
    5fd4:	189b      	adds	r3, r3, r2
    5fd6:	339c      	adds	r3, #156	; 0x9c
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    5fd8:	781b      	ldrb	r3, [r3, #0]
    5fda:	2b01      	cmp	r3, #1
    5fdc:	d105      	bne.n	5fea <prvTraceStoreTaskswitch+0x92>
				ts->type = TS_TASK_RESUME;
    5fde:	3306      	adds	r3, #6
    5fe0:	7033      	strb	r3, [r6, #0]
    5fe2:	e004      	b.n	5fee <prvTraceStoreTaskswitch+0x96>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    5fe4:	4811      	ldr	r0, [pc, #68]	; (602c <prvTraceStoreTaskswitch+0xd4>)
    5fe6:	4b0b      	ldr	r3, [pc, #44]	; (6014 <prvTraceStoreTaskswitch+0xbc>)
    5fe8:	4798      	blx	r3
				ts->type = TS_TASK_BEGIN;
    5fea:	2306      	movs	r3, #6
    5fec:	7033      	strb	r3, [r6, #0]
			ts->dts = dts3;
    5fee:	8077      	strh	r7, [r6, #2]
			ts->objHandle = hnd8;
    5ff0:	7074      	strb	r4, [r6, #1]
			prvTraceSetObjectState(TRACE_CLASS_TASK,
    5ff2:	4b05      	ldr	r3, [pc, #20]	; (6008 <prvTraceStoreTaskswitch+0xb0>)
    5ff4:	7819      	ldrb	r1, [r3, #0]
    5ff6:	2201      	movs	r2, #1
    5ff8:	2003      	movs	r0, #3
    5ffa:	4b0d      	ldr	r3, [pc, #52]	; (6030 <prvTraceStoreTaskswitch+0xd8>)
    5ffc:	4798      	blx	r3
			prvTraceUpdateCounters();
    5ffe:	4b0d      	ldr	r3, [pc, #52]	; (6034 <prvTraceStoreTaskswitch+0xdc>)
    6000:	4798      	blx	r3
    6002:	e7bf      	b.n	5f84 <prvTraceStoreTaskswitch+0x2c>
    6004:	20000c9c 	.word	0x20000c9c
    6008:	20000bf0 	.word	0x20000bf0
    600c:	20000bec 	.word	0x20000bec
    6010:	0001a2c4 	.word	0x0001a2c4
    6014:	000054e5 	.word	0x000054e5
    6018:	20000bf8 	.word	0x20000bf8
    601c:	0000ffff 	.word	0x0000ffff
    6020:	00005a7d 	.word	0x00005a7d
    6024:	0000553d 	.word	0x0000553d
    6028:	000056bd 	.word	0x000056bd
    602c:	0001a30c 	.word	0x0001a30c
    6030:	000057e9 	.word	0x000057e9
    6034:	00005631 	.word	0x00005631

00006038 <uiTraceStart>:
{
    6038:	b570      	push	{r4, r5, r6, lr}
	if (RecorderDataPtr == NULL)
    603a:	4b20      	ldr	r3, [pc, #128]	; (60bc <uiTraceStart+0x84>)
    603c:	681b      	ldr	r3, [r3, #0]
    603e:	2b00      	cmp	r3, #0
    6040:	d00a      	beq.n	6058 <uiTraceStart+0x20>
	if (RecorderDataPtr->recorderActive == 1)
    6042:	6b18      	ldr	r0, [r3, #48]	; 0x30
    6044:	2801      	cmp	r0, #1
    6046:	d006      	beq.n	6056 <uiTraceStart+0x1e>
	if (traceErrorMessage == NULL)
    6048:	4b1d      	ldr	r3, [pc, #116]	; (60c0 <uiTraceStart+0x88>)
    604a:	681b      	ldr	r3, [r3, #0]
    604c:	2b00      	cmp	r3, #0
    604e:	d008      	beq.n	6062 <uiTraceStart+0x2a>
	return RecorderDataPtr->recorderActive;
    6050:	4b1a      	ldr	r3, [pc, #104]	; (60bc <uiTraceStart+0x84>)
    6052:	681b      	ldr	r3, [r3, #0]
    6054:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
    6056:	bd70      	pop	{r4, r5, r6, pc}
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
    6058:	481a      	ldr	r0, [pc, #104]	; (60c4 <uiTraceStart+0x8c>)
    605a:	4b1b      	ldr	r3, [pc, #108]	; (60c8 <uiTraceStart+0x90>)
    605c:	4798      	blx	r3
    605e:	2000      	movs	r0, #0
    6060:	e7f9      	b.n	6056 <uiTraceStart+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6062:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    6066:	2201      	movs	r2, #1
    6068:	f382 8810 	msr	PRIMASK, r2
		trcCRITICAL_SECTION_BEGIN();
    606c:	4917      	ldr	r1, [pc, #92]	; (60cc <uiTraceStart+0x94>)
    606e:	680b      	ldr	r3, [r1, #0]
    6070:	3301      	adds	r3, #1
    6072:	600b      	str	r3, [r1, #0]
		RecorderDataPtr->recorderActive = 1;
    6074:	4b11      	ldr	r3, [pc, #68]	; (60bc <uiTraceStart+0x84>)
    6076:	681b      	ldr	r3, [r3, #0]
    6078:	631a      	str	r2, [r3, #48]	; 0x30
		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
    607a:	4b15      	ldr	r3, [pc, #84]	; (60d0 <uiTraceStart+0x98>)
    607c:	4798      	blx	r3
    607e:	4b15      	ldr	r3, [pc, #84]	; (60d4 <uiTraceStart+0x9c>)
    6080:	4798      	blx	r3
    6082:	b2c4      	uxtb	r4, r0
		if (handle == 0)
    6084:	2c00      	cmp	r4, #0
    6086:	d009      	beq.n	609c <uiTraceStart+0x64>
		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
    6088:	0020      	movs	r0, r4
    608a:	4b13      	ldr	r3, [pc, #76]	; (60d8 <uiTraceStart+0xa0>)
    608c:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
    608e:	4a0f      	ldr	r2, [pc, #60]	; (60cc <uiTraceStart+0x94>)
    6090:	6813      	ldr	r3, [r2, #0]
    6092:	3b01      	subs	r3, #1
    6094:	6013      	str	r3, [r2, #0]
    6096:	f385 8810 	msr	PRIMASK, r5
    609a:	e7d9      	b.n	6050 <uiTraceStart+0x18>
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
    609c:	2003      	movs	r0, #3
    609e:	4b0f      	ldr	r3, [pc, #60]	; (60dc <uiTraceStart+0xa4>)
    60a0:	4798      	blx	r3
    60a2:	0006      	movs	r6, r0
    60a4:	0004      	movs	r4, r0
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
    60a6:	4a0e      	ldr	r2, [pc, #56]	; (60e0 <uiTraceStart+0xa8>)
    60a8:	0001      	movs	r1, r0
    60aa:	2003      	movs	r0, #3
    60ac:	4b0d      	ldr	r3, [pc, #52]	; (60e4 <uiTraceStart+0xac>)
    60ae:	4798      	blx	r3
			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
    60b0:	2200      	movs	r2, #0
    60b2:	0031      	movs	r1, r6
    60b4:	2003      	movs	r0, #3
    60b6:	4b0c      	ldr	r3, [pc, #48]	; (60e8 <uiTraceStart+0xb0>)
    60b8:	4798      	blx	r3
    60ba:	e7e5      	b.n	6088 <uiTraceStart+0x50>
    60bc:	20000bec 	.word	0x20000bec
    60c0:	20000ca4 	.word	0x20000ca4
    60c4:	0001a3c8 	.word	0x0001a3c8
    60c8:	000054e5 	.word	0x000054e5
    60cc:	20000c9c 	.word	0x20000c9c
    60d0:	000050dd 	.word	0x000050dd
    60d4:	00005015 	.word	0x00005015
    60d8:	00005f59 	.word	0x00005f59
    60dc:	00005881 	.word	0x00005881
    60e0:	0001a40c 	.word	0x0001a40c
    60e4:	00005955 	.word	0x00005955
    60e8:	00005735 	.word	0x00005735

000060ec <vTraceStart>:
{
    60ec:	b510      	push	{r4, lr}
	(void)uiTraceStart();
    60ee:	4b01      	ldr	r3, [pc, #4]	; (60f4 <vTraceStart+0x8>)
    60f0:	4798      	blx	r3
}
    60f2:	bd10      	pop	{r4, pc}
    60f4:	00006039 	.word	0x00006039

000060f8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    60f8:	0003      	movs	r3, r0
    60fa:	3308      	adds	r3, #8
    60fc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    60fe:	2201      	movs	r2, #1
    6100:	4252      	negs	r2, r2
    6102:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    6104:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    6106:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    6108:	2300      	movs	r3, #0
    610a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    610c:	4770      	bx	lr

0000610e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    610e:	2300      	movs	r3, #0
    6110:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    6112:	4770      	bx	lr

00006114 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    6114:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    6116:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    6118:	689a      	ldr	r2, [r3, #8]
    611a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    611c:	689a      	ldr	r2, [r3, #8]
    611e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    6120:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    6122:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    6124:	6803      	ldr	r3, [r0, #0]
    6126:	3301      	adds	r3, #1
    6128:	6003      	str	r3, [r0, #0]
}
    612a:	4770      	bx	lr

0000612c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    612c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    612e:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    6130:	0002      	movs	r2, r0
    6132:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
    6134:	1c63      	adds	r3, r4, #1
    6136:	d102      	bne.n	613e <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
    6138:	6902      	ldr	r2, [r0, #16]
    613a:	e004      	b.n	6146 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    613c:	001a      	movs	r2, r3
    613e:	6853      	ldr	r3, [r2, #4]
    6140:	681d      	ldr	r5, [r3, #0]
    6142:	42ac      	cmp	r4, r5
    6144:	d2fa      	bcs.n	613c <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    6146:	6853      	ldr	r3, [r2, #4]
    6148:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    614a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    614c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    614e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    6150:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    6152:	6803      	ldr	r3, [r0, #0]
    6154:	3301      	adds	r3, #1
    6156:	6003      	str	r3, [r0, #0]
}
    6158:	bd30      	pop	{r4, r5, pc}

0000615a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    615a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    615c:	6842      	ldr	r2, [r0, #4]
    615e:	6881      	ldr	r1, [r0, #8]
    6160:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    6162:	6882      	ldr	r2, [r0, #8]
    6164:	6841      	ldr	r1, [r0, #4]
    6166:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    6168:	685a      	ldr	r2, [r3, #4]
    616a:	4290      	cmp	r0, r2
    616c:	d006      	beq.n	617c <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    616e:	2200      	movs	r2, #0
    6170:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    6172:	681a      	ldr	r2, [r3, #0]
    6174:	3a01      	subs	r2, #1
    6176:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    6178:	6818      	ldr	r0, [r3, #0]
}
    617a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    617c:	6882      	ldr	r2, [r0, #8]
    617e:	605a      	str	r2, [r3, #4]
    6180:	e7f5      	b.n	616e <uxListRemove+0x14>
	...

00006184 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    6184:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
    6186:	2300      	movs	r3, #0
    6188:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    618a:	4b06      	ldr	r3, [pc, #24]	; (61a4 <prvTaskExitError+0x20>)
    618c:	681b      	ldr	r3, [r3, #0]
    618e:	3301      	adds	r3, #1
    6190:	d001      	beq.n	6196 <prvTaskExitError+0x12>
    6192:	b672      	cpsid	i
    6194:	e7fe      	b.n	6194 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
    6196:	b672      	cpsid	i
	while( ulDummy == 0 )
    6198:	9b01      	ldr	r3, [sp, #4]
    619a:	2b00      	cmp	r3, #0
    619c:	d0fc      	beq.n	6198 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    619e:	b002      	add	sp, #8
    61a0:	4770      	bx	lr
    61a2:	46c0      	nop			; (mov r8, r8)
    61a4:	20000214 	.word	0x20000214
	...

000061b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    61b0:	4a0b      	ldr	r2, [pc, #44]	; (61e0 <pxCurrentTCBConst2>)
    61b2:	6813      	ldr	r3, [r2, #0]
    61b4:	6818      	ldr	r0, [r3, #0]
    61b6:	3020      	adds	r0, #32
    61b8:	f380 8809 	msr	PSP, r0
    61bc:	2002      	movs	r0, #2
    61be:	f380 8814 	msr	CONTROL, r0
    61c2:	f3bf 8f6f 	isb	sy
    61c6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    61c8:	46ae      	mov	lr, r5
    61ca:	bc08      	pop	{r3}
    61cc:	bc04      	pop	{r2}
    61ce:	b662      	cpsie	i
    61d0:	4718      	bx	r3
    61d2:	46c0      	nop			; (mov r8, r8)
    61d4:	46c0      	nop			; (mov r8, r8)
    61d6:	46c0      	nop			; (mov r8, r8)
    61d8:	46c0      	nop			; (mov r8, r8)
    61da:	46c0      	nop			; (mov r8, r8)
    61dc:	46c0      	nop			; (mov r8, r8)
    61de:	46c0      	nop			; (mov r8, r8)

000061e0 <pxCurrentTCBConst2>:
    61e0:	20003f88 	.word	0x20003f88

000061e4 <pxPortInitialiseStack>:
{
    61e4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    61e6:	1f03      	subs	r3, r0, #4
    61e8:	2480      	movs	r4, #128	; 0x80
    61ea:	0464      	lsls	r4, r4, #17
    61ec:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    61ee:	3b04      	subs	r3, #4
    61f0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    61f2:	3b04      	subs	r3, #4
    61f4:	4902      	ldr	r1, [pc, #8]	; (6200 <pxPortInitialiseStack+0x1c>)
    61f6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    61f8:	3b14      	subs	r3, #20
    61fa:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    61fc:	3840      	subs	r0, #64	; 0x40
}
    61fe:	bd10      	pop	{r4, pc}
    6200:	00006185 	.word	0x00006185

00006204 <SVC_Handler>:
}
    6204:	4770      	bx	lr
	...

00006208 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    6208:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    620a:	4b13      	ldr	r3, [pc, #76]	; (6258 <xPortStartScheduler+0x50>)
    620c:	6819      	ldr	r1, [r3, #0]
    620e:	22ff      	movs	r2, #255	; 0xff
    6210:	0412      	lsls	r2, r2, #16
    6212:	430a      	orrs	r2, r1
    6214:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    6216:	6819      	ldr	r1, [r3, #0]
    6218:	22ff      	movs	r2, #255	; 0xff
    621a:	0612      	lsls	r2, r2, #24
    621c:	430a      	orrs	r2, r1
    621e:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    6220:	4d0e      	ldr	r5, [pc, #56]	; (625c <xPortStartScheduler+0x54>)
    6222:	2400      	movs	r4, #0
    6224:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    6226:	4b0e      	ldr	r3, [pc, #56]	; (6260 <xPortStartScheduler+0x58>)
    6228:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    622a:	2000      	movs	r0, #0
    622c:	4b0d      	ldr	r3, [pc, #52]	; (6264 <xPortStartScheduler+0x5c>)
    622e:	4798      	blx	r3
    6230:	21fa      	movs	r1, #250	; 0xfa
    6232:	0089      	lsls	r1, r1, #2
    6234:	4b0c      	ldr	r3, [pc, #48]	; (6268 <xPortStartScheduler+0x60>)
    6236:	4798      	blx	r3
    6238:	3801      	subs	r0, #1
    623a:	4b0c      	ldr	r3, [pc, #48]	; (626c <xPortStartScheduler+0x64>)
    623c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    623e:	2307      	movs	r3, #7
    6240:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
    6242:	4b0b      	ldr	r3, [pc, #44]	; (6270 <xPortStartScheduler+0x68>)
    6244:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
    6246:	4b0b      	ldr	r3, [pc, #44]	; (6274 <xPortStartScheduler+0x6c>)
    6248:	4798      	blx	r3
	vTaskSwitchContext();
    624a:	4b0b      	ldr	r3, [pc, #44]	; (6278 <xPortStartScheduler+0x70>)
    624c:	4798      	blx	r3
	prvTaskExitError();
    624e:	4b0b      	ldr	r3, [pc, #44]	; (627c <xPortStartScheduler+0x74>)
    6250:	4798      	blx	r3
}
    6252:	2000      	movs	r0, #0
    6254:	bd70      	pop	{r4, r5, r6, pc}
    6256:	46c0      	nop			; (mov r8, r8)
    6258:	e000ed20 	.word	0xe000ed20
    625c:	e000e010 	.word	0xe000e010
    6260:	e000e018 	.word	0xe000e018
    6264:	0000ea69 	.word	0x0000ea69
    6268:	00015815 	.word	0x00015815
    626c:	e000e014 	.word	0xe000e014
    6270:	20000214 	.word	0x20000214
    6274:	000061b1 	.word	0x000061b1
    6278:	00007d69 	.word	0x00007d69
    627c:	00006185 	.word	0x00006185

00006280 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    6280:	2280      	movs	r2, #128	; 0x80
    6282:	0552      	lsls	r2, r2, #21
    6284:	4b01      	ldr	r3, [pc, #4]	; (628c <vPortYield+0xc>)
    6286:	601a      	str	r2, [r3, #0]
}
    6288:	4770      	bx	lr
    628a:	46c0      	nop			; (mov r8, r8)
    628c:	e000ed04 	.word	0xe000ed04

00006290 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
    6290:	b672      	cpsid	i
    uxCriticalNesting++;
    6292:	4a04      	ldr	r2, [pc, #16]	; (62a4 <vPortEnterCritical+0x14>)
    6294:	6813      	ldr	r3, [r2, #0]
    6296:	3301      	adds	r3, #1
    6298:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
    629a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    629e:	f3bf 8f6f 	isb	sy
}
    62a2:	4770      	bx	lr
    62a4:	20000214 	.word	0x20000214

000062a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    62a8:	4b06      	ldr	r3, [pc, #24]	; (62c4 <vPortExitCritical+0x1c>)
    62aa:	681b      	ldr	r3, [r3, #0]
    62ac:	2b00      	cmp	r3, #0
    62ae:	d101      	bne.n	62b4 <vPortExitCritical+0xc>
    62b0:	b672      	cpsid	i
    62b2:	e7fe      	b.n	62b2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    62b4:	3b01      	subs	r3, #1
    62b6:	4a03      	ldr	r2, [pc, #12]	; (62c4 <vPortExitCritical+0x1c>)
    62b8:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    62ba:	2b00      	cmp	r3, #0
    62bc:	d100      	bne.n	62c0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
    62be:	b662      	cpsie	i
}
    62c0:	4770      	bx	lr
    62c2:	46c0      	nop			; (mov r8, r8)
    62c4:	20000214 	.word	0x20000214

000062c8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
    62c8:	f3ef 8010 	mrs	r0, PRIMASK
    62cc:	b672      	cpsid	i
    62ce:	4770      	bx	lr

000062d0 <vClearInterruptMaskFromISR>:
	__asm volatile(
    62d0:	f380 8810 	msr	PRIMASK, r0
    62d4:	4770      	bx	lr
	...

000062e0 <PendSV_Handler>:
	__asm volatile
    62e0:	f3ef 8009 	mrs	r0, PSP
    62e4:	4b0e      	ldr	r3, [pc, #56]	; (6320 <pxCurrentTCBConst>)
    62e6:	681a      	ldr	r2, [r3, #0]
    62e8:	3820      	subs	r0, #32
    62ea:	6010      	str	r0, [r2, #0]
    62ec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    62ee:	4644      	mov	r4, r8
    62f0:	464d      	mov	r5, r9
    62f2:	4656      	mov	r6, sl
    62f4:	465f      	mov	r7, fp
    62f6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    62f8:	b508      	push	{r3, lr}
    62fa:	b672      	cpsid	i
    62fc:	f001 fd34 	bl	7d68 <vTaskSwitchContext>
    6300:	b662      	cpsie	i
    6302:	bc0c      	pop	{r2, r3}
    6304:	6811      	ldr	r1, [r2, #0]
    6306:	6808      	ldr	r0, [r1, #0]
    6308:	3010      	adds	r0, #16
    630a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    630c:	46a0      	mov	r8, r4
    630e:	46a9      	mov	r9, r5
    6310:	46b2      	mov	sl, r6
    6312:	46bb      	mov	fp, r7
    6314:	f380 8809 	msr	PSP, r0
    6318:	3820      	subs	r0, #32
    631a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    631c:	4718      	bx	r3
    631e:	46c0      	nop			; (mov r8, r8)

00006320 <pxCurrentTCBConst>:
    6320:	20003f88 	.word	0x20003f88

00006324 <SysTick_Handler>:
{
    6324:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    6326:	4b07      	ldr	r3, [pc, #28]	; (6344 <SysTick_Handler+0x20>)
    6328:	4798      	blx	r3
    632a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
    632c:	4b06      	ldr	r3, [pc, #24]	; (6348 <SysTick_Handler+0x24>)
    632e:	4798      	blx	r3
    6330:	2800      	cmp	r0, #0
    6332:	d003      	beq.n	633c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    6334:	2280      	movs	r2, #128	; 0x80
    6336:	0552      	lsls	r2, r2, #21
    6338:	4b04      	ldr	r3, [pc, #16]	; (634c <SysTick_Handler+0x28>)
    633a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    633c:	0020      	movs	r0, r4
    633e:	4b04      	ldr	r3, [pc, #16]	; (6350 <SysTick_Handler+0x2c>)
    6340:	4798      	blx	r3
}
    6342:	bd10      	pop	{r4, pc}
    6344:	000062c9 	.word	0x000062c9
    6348:	00007a11 	.word	0x00007a11
    634c:	e000ed04 	.word	0xe000ed04
    6350:	000062d1 	.word	0x000062d1

00006354 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    6354:	b570      	push	{r4, r5, r6, lr}
    6356:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    6358:	0743      	lsls	r3, r0, #29
    635a:	d002      	beq.n	6362 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    635c:	2307      	movs	r3, #7
    635e:	439c      	bics	r4, r3
    6360:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
    6362:	4b18      	ldr	r3, [pc, #96]	; (63c4 <pvPortMalloc+0x70>)
    6364:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    6366:	4b18      	ldr	r3, [pc, #96]	; (63c8 <pvPortMalloc+0x74>)
    6368:	681b      	ldr	r3, [r3, #0]
    636a:	2b00      	cmp	r3, #0
    636c:	d017      	beq.n	639e <pvPortMalloc+0x4a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    636e:	4b17      	ldr	r3, [pc, #92]	; (63cc <pvPortMalloc+0x78>)
    6370:	681a      	ldr	r2, [r3, #0]
    6372:	18a3      	adds	r3, r4, r2
    6374:	4916      	ldr	r1, [pc, #88]	; (63d0 <pvPortMalloc+0x7c>)
    6376:	428b      	cmp	r3, r1
    6378:	d818      	bhi.n	63ac <pvPortMalloc+0x58>
    637a:	429a      	cmp	r2, r3
    637c:	d216      	bcs.n	63ac <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    637e:	4912      	ldr	r1, [pc, #72]	; (63c8 <pvPortMalloc+0x74>)
    6380:	680d      	ldr	r5, [r1, #0]
    6382:	18ad      	adds	r5, r5, r2
			xNextFreeByte += xWantedSize;
    6384:	4a11      	ldr	r2, [pc, #68]	; (63cc <pvPortMalloc+0x78>)
    6386:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
    6388:	2d00      	cmp	r5, #0
    638a:	d00f      	beq.n	63ac <pvPortMalloc+0x58>
    638c:	0022      	movs	r2, r4
    638e:	0029      	movs	r1, r5
    6390:	2094      	movs	r0, #148	; 0x94
    6392:	4b10      	ldr	r3, [pc, #64]	; (63d4 <pvPortMalloc+0x80>)
    6394:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
    6396:	4b10      	ldr	r3, [pc, #64]	; (63d8 <pvPortMalloc+0x84>)
    6398:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    639a:	0028      	movs	r0, r5
    639c:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    639e:	2207      	movs	r2, #7
    63a0:	4b0e      	ldr	r3, [pc, #56]	; (63dc <pvPortMalloc+0x88>)
    63a2:	3308      	adds	r3, #8
    63a4:	4393      	bics	r3, r2
    63a6:	4a08      	ldr	r2, [pc, #32]	; (63c8 <pvPortMalloc+0x74>)
    63a8:	6013      	str	r3, [r2, #0]
    63aa:	e7e0      	b.n	636e <pvPortMalloc+0x1a>
		traceMALLOC( pvReturn, xWantedSize );
    63ac:	0022      	movs	r2, r4
    63ae:	2100      	movs	r1, #0
    63b0:	20e8      	movs	r0, #232	; 0xe8
    63b2:	4b08      	ldr	r3, [pc, #32]	; (63d4 <pvPortMalloc+0x80>)
    63b4:	4798      	blx	r3
	( void ) xTaskResumeAll();
    63b6:	4b08      	ldr	r3, [pc, #32]	; (63d8 <pvPortMalloc+0x84>)
    63b8:	4798      	blx	r3
			vApplicationMallocFailedHook();
    63ba:	4b09      	ldr	r3, [pc, #36]	; (63e0 <pvPortMalloc+0x8c>)
    63bc:	4798      	blx	r3
    63be:	2500      	movs	r5, #0
	return pvReturn;
    63c0:	e7eb      	b.n	639a <pvPortMalloc+0x46>
    63c2:	46c0      	nop			; (mov r8, r8)
    63c4:	000079f5 	.word	0x000079f5
    63c8:	20000cb8 	.word	0x20000cb8
    63cc:	20003f84 	.word	0x20003f84
    63d0:	000032bf 	.word	0x000032bf
    63d4:	00005c49 	.word	0x00005c49
    63d8:	00007b9d 	.word	0x00007b9d
    63dc:	20000cbc 	.word	0x20000cbc
    63e0:	00012aa9 	.word	0x00012aa9

000063e4 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    63e4:	2800      	cmp	r0, #0
    63e6:	d001      	beq.n	63ec <vPortFree+0x8>
    63e8:	b672      	cpsid	i
    63ea:	e7fe      	b.n	63ea <vPortFree+0x6>
}
    63ec:	4770      	bx	lr
	...

000063f0 <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    63f0:	4b02      	ldr	r3, [pc, #8]	; (63fc <xPortGetFreeHeapSize+0xc>)
    63f2:	681b      	ldr	r3, [r3, #0]
    63f4:	20cb      	movs	r0, #203	; 0xcb
    63f6:	0180      	lsls	r0, r0, #6
    63f8:	1ac0      	subs	r0, r0, r3
}
    63fa:	4770      	bx	lr
    63fc:	20003f84 	.word	0x20003f84

00006400 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    6400:	b510      	push	{r4, lr}
    6402:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    6404:	4b03      	ldr	r3, [pc, #12]	; (6414 <prvIsQueueEmpty+0x14>)
    6406:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    6408:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    640a:	4b03      	ldr	r3, [pc, #12]	; (6418 <prvIsQueueEmpty+0x18>)
    640c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    640e:	4260      	negs	r0, r4
    6410:	4160      	adcs	r0, r4

	return xReturn;
}
    6412:	bd10      	pop	{r4, pc}
    6414:	00006291 	.word	0x00006291
    6418:	000062a9 	.word	0x000062a9

0000641c <prvCopyDataToQueue>:
{
    641c:	b570      	push	{r4, r5, r6, lr}
    641e:	0004      	movs	r4, r0
    6420:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    6422:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    6424:	6c02      	ldr	r2, [r0, #64]	; 0x40
    6426:	2a00      	cmp	r2, #0
    6428:	d10b      	bne.n	6442 <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
    642a:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    642c:	6823      	ldr	r3, [r4, #0]
    642e:	4283      	cmp	r3, r0
    6430:	d104      	bne.n	643c <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    6432:	6860      	ldr	r0, [r4, #4]
    6434:	4b16      	ldr	r3, [pc, #88]	; (6490 <prvCopyDataToQueue+0x74>)
    6436:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    6438:	2300      	movs	r3, #0
    643a:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    643c:	3501      	adds	r5, #1
    643e:	63a5      	str	r5, [r4, #56]	; 0x38
}
    6440:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    6442:	2e00      	cmp	r6, #0
    6444:	d10e      	bne.n	6464 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    6446:	6880      	ldr	r0, [r0, #8]
    6448:	4b12      	ldr	r3, [pc, #72]	; (6494 <prvCopyDataToQueue+0x78>)
    644a:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    644c:	68a3      	ldr	r3, [r4, #8]
    644e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    6450:	4694      	mov	ip, r2
    6452:	4463      	add	r3, ip
    6454:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
    6456:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    6458:	6862      	ldr	r2, [r4, #4]
    645a:	4293      	cmp	r3, r2
    645c:	d3ee      	bcc.n	643c <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    645e:	6823      	ldr	r3, [r4, #0]
    6460:	60a3      	str	r3, [r4, #8]
    6462:	e7eb      	b.n	643c <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6464:	68c0      	ldr	r0, [r0, #12]
    6466:	4b0b      	ldr	r3, [pc, #44]	; (6494 <prvCopyDataToQueue+0x78>)
    6468:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    646a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    646c:	425b      	negs	r3, r3
    646e:	68e2      	ldr	r2, [r4, #12]
    6470:	18d2      	adds	r2, r2, r3
    6472:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    6474:	6821      	ldr	r1, [r4, #0]
    6476:	428a      	cmp	r2, r1
    6478:	d203      	bcs.n	6482 <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    647a:	6862      	ldr	r2, [r4, #4]
    647c:	4694      	mov	ip, r2
    647e:	4463      	add	r3, ip
    6480:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    6482:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    6484:	2e02      	cmp	r6, #2
    6486:	d1d9      	bne.n	643c <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    6488:	4285      	cmp	r5, r0
    648a:	d0d7      	beq.n	643c <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
    648c:	3d01      	subs	r5, #1
    648e:	e7d5      	b.n	643c <prvCopyDataToQueue+0x20>
    6490:	000082ed 	.word	0x000082ed
    6494:	00012b4d 	.word	0x00012b4d

00006498 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    6498:	b5f0      	push	{r4, r5, r6, r7, lr}
    649a:	46ce      	mov	lr, r9
    649c:	4647      	mov	r7, r8
    649e:	b580      	push	{r7, lr}
    64a0:	b083      	sub	sp, #12
    64a2:	9001      	str	r0, [sp, #4]
    64a4:	9100      	str	r1, [sp, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    64a6:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    64a8:	2c00      	cmp	r4, #0
    64aa:	d005      	beq.n	64b8 <prvNotifyQueueSetContainer+0x20>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    64ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    64ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    64b0:	429a      	cmp	r2, r3
    64b2:	d303      	bcc.n	64bc <prvNotifyQueueSetContainer+0x24>
    64b4:	b672      	cpsid	i
    64b6:	e7fe      	b.n	64b6 <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer );
    64b8:	b672      	cpsid	i
    64ba:	e7fe      	b.n	64ba <prvNotifyQueueSetContainer+0x22>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    64bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    64be:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    64c0:	4293      	cmp	r3, r2
    64c2:	d805      	bhi.n	64d0 <prvNotifyQueueSetContainer+0x38>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    64c4:	0030      	movs	r0, r6
    64c6:	b003      	add	sp, #12
    64c8:	bc0c      	pop	{r2, r3}
    64ca:	4690      	mov	r8, r2
    64cc:	4699      	mov	r9, r3
    64ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    64d0:	2345      	movs	r3, #69	; 0x45
    64d2:	5ce5      	ldrb	r5, [r4, r3]
    64d4:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND( pxQueueSetContainer );
    64d6:	4b2c      	ldr	r3, [pc, #176]	; (6588 <prvNotifyQueueSetContainer+0xf0>)
    64d8:	4798      	blx	r3
    64da:	4b2c      	ldr	r3, [pc, #176]	; (658c <prvNotifyQueueSetContainer+0xf4>)
    64dc:	4798      	blx	r3
    64de:	4b2c      	ldr	r3, [pc, #176]	; (6590 <prvNotifyQueueSetContainer+0xf8>)
    64e0:	881b      	ldrh	r3, [r3, #0]
    64e2:	4203      	tst	r3, r0
    64e4:	d01e      	beq.n	6524 <prvNotifyQueueSetContainer+0x8c>
    64e6:	0020      	movs	r0, r4
    64e8:	4b2a      	ldr	r3, [pc, #168]	; (6594 <prvNotifyQueueSetContainer+0xfc>)
    64ea:	4798      	blx	r3
    64ec:	4b28      	ldr	r3, [pc, #160]	; (6590 <prvNotifyQueueSetContainer+0xf8>)
    64ee:	881b      	ldrh	r3, [r3, #0]
    64f0:	4203      	tst	r3, r0
    64f2:	d017      	beq.n	6524 <prvNotifyQueueSetContainer+0x8c>
    64f4:	3625      	adds	r6, #37	; 0x25
    64f6:	9b00      	ldr	r3, [sp, #0]
    64f8:	2b00      	cmp	r3, #0
    64fa:	d106      	bne.n	650a <prvNotifyQueueSetContainer+0x72>
    64fc:	0020      	movs	r0, r4
    64fe:	4b26      	ldr	r3, [pc, #152]	; (6598 <prvNotifyQueueSetContainer+0x100>)
    6500:	4798      	blx	r3
    6502:	4b26      	ldr	r3, [pc, #152]	; (659c <prvNotifyQueueSetContainer+0x104>)
    6504:	5c1e      	ldrb	r6, [r3, r0]
    6506:	3620      	adds	r6, #32
    6508:	b2f6      	uxtb	r6, r6
    650a:	0020      	movs	r0, r4
    650c:	4b22      	ldr	r3, [pc, #136]	; (6598 <prvNotifyQueueSetContainer+0x100>)
    650e:	4798      	blx	r3
    6510:	4b22      	ldr	r3, [pc, #136]	; (659c <prvNotifyQueueSetContainer+0x104>)
    6512:	5c1f      	ldrb	r7, [r3, r0]
    6514:	0020      	movs	r0, r4
    6516:	4b22      	ldr	r3, [pc, #136]	; (65a0 <prvNotifyQueueSetContainer+0x108>)
    6518:	4798      	blx	r3
    651a:	b2c2      	uxtb	r2, r0
    651c:	0039      	movs	r1, r7
    651e:	0030      	movs	r0, r6
    6520:	4b20      	ldr	r3, [pc, #128]	; (65a4 <prvNotifyQueueSetContainer+0x10c>)
    6522:	4798      	blx	r3
    6524:	0020      	movs	r0, r4
    6526:	4f1c      	ldr	r7, [pc, #112]	; (6598 <prvNotifyQueueSetContainer+0x100>)
    6528:	47b8      	blx	r7
    652a:	4e1c      	ldr	r6, [pc, #112]	; (659c <prvNotifyQueueSetContainer+0x104>)
    652c:	5c33      	ldrb	r3, [r6, r0]
    652e:	4698      	mov	r8, r3
    6530:	0020      	movs	r0, r4
    6532:	4b1b      	ldr	r3, [pc, #108]	; (65a0 <prvNotifyQueueSetContainer+0x108>)
    6534:	4798      	blx	r3
    6536:	b2c3      	uxtb	r3, r0
    6538:	4699      	mov	r9, r3
    653a:	0020      	movs	r0, r4
    653c:	47b8      	blx	r7
    653e:	5c33      	ldrb	r3, [r6, r0]
    6540:	2b02      	cmp	r3, #2
    6542:	d019      	beq.n	6578 <prvNotifyQueueSetContainer+0xe0>
    6544:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    6546:	3201      	adds	r2, #1
    6548:	b2d2      	uxtb	r2, r2
    654a:	4649      	mov	r1, r9
    654c:	4640      	mov	r0, r8
    654e:	4b16      	ldr	r3, [pc, #88]	; (65a8 <prvNotifyQueueSetContainer+0x110>)
    6550:	4798      	blx	r3
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    6552:	9a00      	ldr	r2, [sp, #0]
    6554:	a901      	add	r1, sp, #4
    6556:	0020      	movs	r0, r4
    6558:	4b14      	ldr	r3, [pc, #80]	; (65ac <prvNotifyQueueSetContainer+0x114>)
    655a:	4798      	blx	r3
    655c:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
    655e:	1c6b      	adds	r3, r5, #1
    6560:	d10c      	bne.n	657c <prvNotifyQueueSetContainer+0xe4>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    6562:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6564:	2b00      	cmp	r3, #0
    6566:	d0ad      	beq.n	64c4 <prvNotifyQueueSetContainer+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    6568:	0020      	movs	r0, r4
    656a:	3024      	adds	r0, #36	; 0x24
    656c:	4b10      	ldr	r3, [pc, #64]	; (65b0 <prvNotifyQueueSetContainer+0x118>)
    656e:	4798      	blx	r3
    6570:	2800      	cmp	r0, #0
    6572:	d0a7      	beq.n	64c4 <prvNotifyQueueSetContainer+0x2c>
						xReturn = pdTRUE;
    6574:	2601      	movs	r6, #1
    6576:	e7a5      	b.n	64c4 <prvNotifyQueueSetContainer+0x2c>
			traceQUEUE_SEND( pxQueueSetContainer );
    6578:	2200      	movs	r2, #0
    657a:	e7e6      	b.n	654a <prvNotifyQueueSetContainer+0xb2>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    657c:	3501      	adds	r5, #1
    657e:	b26d      	sxtb	r5, r5
    6580:	2345      	movs	r3, #69	; 0x45
    6582:	54e5      	strb	r5, [r4, r3]
    6584:	e79e      	b.n	64c4 <prvNotifyQueueSetContainer+0x2c>
    6586:	46c0      	nop			; (mov r8, r8)
    6588:	000050dd 	.word	0x000050dd
    658c:	00005025 	.word	0x00005025
    6590:	2000020c 	.word	0x2000020c
    6594:	00005089 	.word	0x00005089
    6598:	00005009 	.word	0x00005009
    659c:	20000204 	.word	0x20000204
    65a0:	00005079 	.word	0x00005079
    65a4:	00005d15 	.word	0x00005d15
    65a8:	000057e9 	.word	0x000057e9
    65ac:	0000641d 	.word	0x0000641d
    65b0:	0000804d 	.word	0x0000804d

000065b4 <prvCopyDataFromQueue>:
{
    65b4:	b510      	push	{r4, lr}
    65b6:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    65b8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    65ba:	2a00      	cmp	r2, #0
    65bc:	d00b      	beq.n	65d6 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    65be:	68c3      	ldr	r3, [r0, #12]
    65c0:	189b      	adds	r3, r3, r2
    65c2:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    65c4:	6841      	ldr	r1, [r0, #4]
    65c6:	428b      	cmp	r3, r1
    65c8:	d301      	bcc.n	65ce <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    65ca:	6803      	ldr	r3, [r0, #0]
    65cc:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    65ce:	68c1      	ldr	r1, [r0, #12]
    65d0:	0020      	movs	r0, r4
    65d2:	4b01      	ldr	r3, [pc, #4]	; (65d8 <prvCopyDataFromQueue+0x24>)
    65d4:	4798      	blx	r3
}
    65d6:	bd10      	pop	{r4, pc}
    65d8:	00012b4d 	.word	0x00012b4d

000065dc <prvUnlockQueue>:
{
    65dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65de:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
    65e0:	4b25      	ldr	r3, [pc, #148]	; (6678 <prvUnlockQueue+0x9c>)
    65e2:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    65e4:	2345      	movs	r3, #69	; 0x45
    65e6:	5cfc      	ldrb	r4, [r7, r3]
    65e8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    65ea:	2c00      	cmp	r4, #0
    65ec:	dd1c      	ble.n	6628 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    65ee:	4e23      	ldr	r6, [pc, #140]	; (667c <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    65f0:	4d23      	ldr	r5, [pc, #140]	; (6680 <prvUnlockQueue+0xa4>)
    65f2:	e00b      	b.n	660c <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    65f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    65f6:	2b00      	cmp	r3, #0
    65f8:	d016      	beq.n	6628 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    65fa:	0038      	movs	r0, r7
    65fc:	3024      	adds	r0, #36	; 0x24
    65fe:	47a8      	blx	r5
    6600:	2800      	cmp	r0, #0
    6602:	d10e      	bne.n	6622 <prvUnlockQueue+0x46>
    6604:	3c01      	subs	r4, #1
    6606:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    6608:	2c00      	cmp	r4, #0
    660a:	d00d      	beq.n	6628 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    660c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    660e:	2b00      	cmp	r3, #0
    6610:	d0f0      	beq.n	65f4 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    6612:	2100      	movs	r1, #0
    6614:	0038      	movs	r0, r7
    6616:	47b0      	blx	r6
    6618:	2800      	cmp	r0, #0
    661a:	d0f3      	beq.n	6604 <prvUnlockQueue+0x28>
						vTaskMissedYield();
    661c:	4b19      	ldr	r3, [pc, #100]	; (6684 <prvUnlockQueue+0xa8>)
    661e:	4798      	blx	r3
    6620:	e7f0      	b.n	6604 <prvUnlockQueue+0x28>
							vTaskMissedYield();
    6622:	4b18      	ldr	r3, [pc, #96]	; (6684 <prvUnlockQueue+0xa8>)
    6624:	4798      	blx	r3
    6626:	e7ed      	b.n	6604 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
    6628:	22ff      	movs	r2, #255	; 0xff
    662a:	2345      	movs	r3, #69	; 0x45
    662c:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    662e:	4b16      	ldr	r3, [pc, #88]	; (6688 <prvUnlockQueue+0xac>)
    6630:	4798      	blx	r3
	taskENTER_CRITICAL();
    6632:	4b11      	ldr	r3, [pc, #68]	; (6678 <prvUnlockQueue+0x9c>)
    6634:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    6636:	2344      	movs	r3, #68	; 0x44
    6638:	5cfc      	ldrb	r4, [r7, r3]
    663a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    663c:	2c00      	cmp	r4, #0
    663e:	dd14      	ble.n	666a <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    6640:	693b      	ldr	r3, [r7, #16]
    6642:	2b00      	cmp	r3, #0
    6644:	d011      	beq.n	666a <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    6646:	003d      	movs	r5, r7
    6648:	3510      	adds	r5, #16
    664a:	4e0d      	ldr	r6, [pc, #52]	; (6680 <prvUnlockQueue+0xa4>)
    664c:	e006      	b.n	665c <prvUnlockQueue+0x80>
    664e:	3c01      	subs	r4, #1
    6650:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    6652:	2c00      	cmp	r4, #0
    6654:	d009      	beq.n	666a <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    6656:	693b      	ldr	r3, [r7, #16]
    6658:	2b00      	cmp	r3, #0
    665a:	d006      	beq.n	666a <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    665c:	0028      	movs	r0, r5
    665e:	47b0      	blx	r6
    6660:	2800      	cmp	r0, #0
    6662:	d0f4      	beq.n	664e <prvUnlockQueue+0x72>
					vTaskMissedYield();
    6664:	4b07      	ldr	r3, [pc, #28]	; (6684 <prvUnlockQueue+0xa8>)
    6666:	4798      	blx	r3
    6668:	e7f1      	b.n	664e <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
    666a:	22ff      	movs	r2, #255	; 0xff
    666c:	2344      	movs	r3, #68	; 0x44
    666e:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    6670:	4b05      	ldr	r3, [pc, #20]	; (6688 <prvUnlockQueue+0xac>)
    6672:	4798      	blx	r3
}
    6674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6676:	46c0      	nop			; (mov r8, r8)
    6678:	00006291 	.word	0x00006291
    667c:	00006499 	.word	0x00006499
    6680:	0000804d 	.word	0x0000804d
    6684:	00008189 	.word	0x00008189
    6688:	000062a9 	.word	0x000062a9

0000668c <xQueueGenericReset>:
{
    668c:	b570      	push	{r4, r5, r6, lr}
    668e:	0004      	movs	r4, r0
    6690:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    6692:	2800      	cmp	r0, #0
    6694:	d021      	beq.n	66da <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
    6696:	4b17      	ldr	r3, [pc, #92]	; (66f4 <xQueueGenericReset+0x68>)
    6698:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    669a:	6822      	ldr	r2, [r4, #0]
    669c:	6c21      	ldr	r1, [r4, #64]	; 0x40
    669e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    66a0:	434b      	muls	r3, r1
    66a2:	18d0      	adds	r0, r2, r3
    66a4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    66a6:	2000      	movs	r0, #0
    66a8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    66aa:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    66ac:	1a5b      	subs	r3, r3, r1
    66ae:	18d3      	adds	r3, r2, r3
    66b0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    66b2:	23ff      	movs	r3, #255	; 0xff
    66b4:	2244      	movs	r2, #68	; 0x44
    66b6:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    66b8:	3201      	adds	r2, #1
    66ba:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
    66bc:	2d00      	cmp	r5, #0
    66be:	d111      	bne.n	66e4 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    66c0:	6923      	ldr	r3, [r4, #16]
    66c2:	2b00      	cmp	r3, #0
    66c4:	d005      	beq.n	66d2 <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    66c6:	0020      	movs	r0, r4
    66c8:	3010      	adds	r0, #16
    66ca:	4b0b      	ldr	r3, [pc, #44]	; (66f8 <xQueueGenericReset+0x6c>)
    66cc:	4798      	blx	r3
    66ce:	2800      	cmp	r0, #0
    66d0:	d105      	bne.n	66de <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
    66d2:	4b0a      	ldr	r3, [pc, #40]	; (66fc <xQueueGenericReset+0x70>)
    66d4:	4798      	blx	r3
}
    66d6:	2001      	movs	r0, #1
    66d8:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    66da:	b672      	cpsid	i
    66dc:	e7fe      	b.n	66dc <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
    66de:	4b08      	ldr	r3, [pc, #32]	; (6700 <xQueueGenericReset+0x74>)
    66e0:	4798      	blx	r3
    66e2:	e7f6      	b.n	66d2 <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    66e4:	0020      	movs	r0, r4
    66e6:	3010      	adds	r0, #16
    66e8:	4d06      	ldr	r5, [pc, #24]	; (6704 <xQueueGenericReset+0x78>)
    66ea:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    66ec:	0020      	movs	r0, r4
    66ee:	3024      	adds	r0, #36	; 0x24
    66f0:	47a8      	blx	r5
    66f2:	e7ee      	b.n	66d2 <xQueueGenericReset+0x46>
    66f4:	00006291 	.word	0x00006291
    66f8:	0000804d 	.word	0x0000804d
    66fc:	000062a9 	.word	0x000062a9
    6700:	00006281 	.word	0x00006281
    6704:	000060f9 	.word	0x000060f9

00006708 <xQueueGenericCreate>:
	{
    6708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    670a:	0006      	movs	r6, r0
    670c:	000d      	movs	r5, r1
    670e:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    6710:	2800      	cmp	r0, #0
    6712:	d101      	bne.n	6718 <xQueueGenericCreate+0x10>
    6714:	b672      	cpsid	i
    6716:	e7fe      	b.n	6716 <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6718:	0008      	movs	r0, r1
    671a:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    671c:	3054      	adds	r0, #84	; 0x54
    671e:	4b38      	ldr	r3, [pc, #224]	; (6800 <xQueueGenericCreate+0xf8>)
    6720:	4798      	blx	r3
    6722:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    6724:	d05b      	beq.n	67de <xQueueGenericCreate+0xd6>
	if( uxItemSize == ( UBaseType_t ) 0 )
    6726:	2d00      	cmp	r5, #0
    6728:	d13b      	bne.n	67a2 <xQueueGenericCreate+0x9a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    672a:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    672c:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    672e:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    6730:	2101      	movs	r1, #1
    6732:	0020      	movs	r0, r4
    6734:	4b33      	ldr	r3, [pc, #204]	; (6804 <xQueueGenericCreate+0xfc>)
    6736:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    6738:	2350      	movs	r3, #80	; 0x50
    673a:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
    673c:	2300      	movs	r3, #0
    673e:	64a3      	str	r3, [r4, #72]	; 0x48
	traceQUEUE_CREATE( pxNewQueue );
    6740:	0020      	movs	r0, r4
    6742:	4e31      	ldr	r6, [pc, #196]	; (6808 <xQueueGenericCreate+0x100>)
    6744:	47b0      	blx	r6
    6746:	4d31      	ldr	r5, [pc, #196]	; (680c <xQueueGenericCreate+0x104>)
    6748:	5c28      	ldrb	r0, [r5, r0]
    674a:	4b31      	ldr	r3, [pc, #196]	; (6810 <xQueueGenericCreate+0x108>)
    674c:	4798      	blx	r3
    674e:	b281      	uxth	r1, r0
    6750:	0020      	movs	r0, r4
    6752:	4b30      	ldr	r3, [pc, #192]	; (6814 <xQueueGenericCreate+0x10c>)
    6754:	4798      	blx	r3
    6756:	4b30      	ldr	r3, [pc, #192]	; (6818 <xQueueGenericCreate+0x110>)
    6758:	8819      	ldrh	r1, [r3, #0]
    675a:	0020      	movs	r0, r4
    675c:	4b2f      	ldr	r3, [pc, #188]	; (681c <xQueueGenericCreate+0x114>)
    675e:	4798      	blx	r3
    6760:	0020      	movs	r0, r4
    6762:	47b0      	blx	r6
    6764:	5c2d      	ldrb	r5, [r5, r0]
    6766:	0020      	movs	r0, r4
    6768:	4b2d      	ldr	r3, [pc, #180]	; (6820 <xQueueGenericCreate+0x118>)
    676a:	4798      	blx	r3
    676c:	b2c1      	uxtb	r1, r0
    676e:	0028      	movs	r0, r5
    6770:	4b2c      	ldr	r3, [pc, #176]	; (6824 <xQueueGenericCreate+0x11c>)
    6772:	4798      	blx	r3
    6774:	4b2c      	ldr	r3, [pc, #176]	; (6828 <xQueueGenericCreate+0x120>)
    6776:	4798      	blx	r3
    6778:	4b2c      	ldr	r3, [pc, #176]	; (682c <xQueueGenericCreate+0x124>)
    677a:	4798      	blx	r3
    677c:	4b2c      	ldr	r3, [pc, #176]	; (6830 <xQueueGenericCreate+0x128>)
    677e:	881b      	ldrh	r3, [r3, #0]
    6780:	4203      	tst	r3, r0
    6782:	d112      	bne.n	67aa <xQueueGenericCreate+0xa2>
    6784:	0020      	movs	r0, r4
    6786:	4b20      	ldr	r3, [pc, #128]	; (6808 <xQueueGenericCreate+0x100>)
    6788:	4798      	blx	r3
    678a:	4b20      	ldr	r3, [pc, #128]	; (680c <xQueueGenericCreate+0x104>)
    678c:	5c1d      	ldrb	r5, [r3, r0]
    678e:	0020      	movs	r0, r4
    6790:	4b23      	ldr	r3, [pc, #140]	; (6820 <xQueueGenericCreate+0x118>)
    6792:	4798      	blx	r3
    6794:	b2c1      	uxtb	r1, r0
    6796:	2200      	movs	r2, #0
    6798:	0028      	movs	r0, r5
    679a:	4b26      	ldr	r3, [pc, #152]	; (6834 <xQueueGenericCreate+0x12c>)
    679c:	4798      	blx	r3
	}
    679e:	0020      	movs	r0, r4
    67a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    67a2:	0003      	movs	r3, r0
    67a4:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    67a6:	6003      	str	r3, [r0, #0]
    67a8:	e7c0      	b.n	672c <xQueueGenericCreate+0x24>
	traceQUEUE_CREATE( pxNewQueue );
    67aa:	0020      	movs	r0, r4
    67ac:	4b22      	ldr	r3, [pc, #136]	; (6838 <xQueueGenericCreate+0x130>)
    67ae:	4798      	blx	r3
    67b0:	4b1f      	ldr	r3, [pc, #124]	; (6830 <xQueueGenericCreate+0x128>)
    67b2:	881b      	ldrh	r3, [r3, #0]
    67b4:	4203      	tst	r3, r0
    67b6:	d0e5      	beq.n	6784 <xQueueGenericCreate+0x7c>
    67b8:	0020      	movs	r0, r4
    67ba:	4f13      	ldr	r7, [pc, #76]	; (6808 <xQueueGenericCreate+0x100>)
    67bc:	47b8      	blx	r7
    67be:	4e13      	ldr	r6, [pc, #76]	; (680c <xQueueGenericCreate+0x104>)
    67c0:	5c35      	ldrb	r5, [r6, r0]
    67c2:	3518      	adds	r5, #24
    67c4:	b2ed      	uxtb	r5, r5
    67c6:	0020      	movs	r0, r4
    67c8:	47b8      	blx	r7
    67ca:	5c36      	ldrb	r6, [r6, r0]
    67cc:	0020      	movs	r0, r4
    67ce:	4b14      	ldr	r3, [pc, #80]	; (6820 <xQueueGenericCreate+0x118>)
    67d0:	4798      	blx	r3
    67d2:	b2c2      	uxtb	r2, r0
    67d4:	0031      	movs	r1, r6
    67d6:	0028      	movs	r0, r5
    67d8:	4b18      	ldr	r3, [pc, #96]	; (683c <xQueueGenericCreate+0x134>)
    67da:	4798      	blx	r3
    67dc:	e7d2      	b.n	6784 <xQueueGenericCreate+0x7c>
			traceQUEUE_CREATE_FAILED( ucQueueType );
    67de:	4b12      	ldr	r3, [pc, #72]	; (6828 <xQueueGenericCreate+0x120>)
    67e0:	4798      	blx	r3
    67e2:	4b12      	ldr	r3, [pc, #72]	; (682c <xQueueGenericCreate+0x124>)
    67e4:	4798      	blx	r3
    67e6:	4b12      	ldr	r3, [pc, #72]	; (6830 <xQueueGenericCreate+0x128>)
    67e8:	881b      	ldrh	r3, [r3, #0]
    67ea:	4203      	tst	r3, r0
    67ec:	d0d7      	beq.n	679e <xQueueGenericCreate+0x96>
    67ee:	4b07      	ldr	r3, [pc, #28]	; (680c <xQueueGenericCreate+0x104>)
    67f0:	5dd8      	ldrb	r0, [r3, r7]
    67f2:	3040      	adds	r0, #64	; 0x40
    67f4:	b2c0      	uxtb	r0, r0
    67f6:	2100      	movs	r1, #0
    67f8:	4b11      	ldr	r3, [pc, #68]	; (6840 <xQueueGenericCreate+0x138>)
    67fa:	4798      	blx	r3
    67fc:	e7cf      	b.n	679e <xQueueGenericCreate+0x96>
    67fe:	46c0      	nop			; (mov r8, r8)
    6800:	00006355 	.word	0x00006355
    6804:	0000668d 	.word	0x0000668d
    6808:	00005009 	.word	0x00005009
    680c:	20000204 	.word	0x20000204
    6810:	00005881 	.word	0x00005881
    6814:	00005099 	.word	0x00005099
    6818:	2000020a 	.word	0x2000020a
    681c:	000050b9 	.word	0x000050b9
    6820:	00005079 	.word	0x00005079
    6824:	00005711 	.word	0x00005711
    6828:	000050dd 	.word	0x000050dd
    682c:	00005025 	.word	0x00005025
    6830:	2000020c 	.word	0x2000020c
    6834:	000057e9 	.word	0x000057e9
    6838:	00005089 	.word	0x00005089
    683c:	00005d15 	.word	0x00005d15
    6840:	00005eb1 	.word	0x00005eb1

00006844 <xQueueGenericSend>:
{
    6844:	b5f0      	push	{r4, r5, r6, r7, lr}
    6846:	46ce      	mov	lr, r9
    6848:	4647      	mov	r7, r8
    684a:	b580      	push	{r7, lr}
    684c:	b085      	sub	sp, #20
    684e:	0004      	movs	r4, r0
    6850:	9100      	str	r1, [sp, #0]
    6852:	9201      	str	r2, [sp, #4]
    6854:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    6856:	2800      	cmp	r0, #0
    6858:	d00d      	beq.n	6876 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    685a:	9b00      	ldr	r3, [sp, #0]
    685c:	2b00      	cmp	r3, #0
    685e:	d00c      	beq.n	687a <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    6860:	2d02      	cmp	r5, #2
    6862:	d00f      	beq.n	6884 <xQueueGenericSend+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    6864:	4bab      	ldr	r3, [pc, #684]	; (6b14 <xQueueGenericSend+0x2d0>)
    6866:	4798      	blx	r3
    6868:	2800      	cmp	r0, #0
    686a:	d110      	bne.n	688e <xQueueGenericSend+0x4a>
    686c:	9b01      	ldr	r3, [sp, #4]
    686e:	2b00      	cmp	r3, #0
    6870:	d010      	beq.n	6894 <xQueueGenericSend+0x50>
    6872:	b672      	cpsid	i
    6874:	e7fe      	b.n	6874 <xQueueGenericSend+0x30>
	configASSERT( pxQueue );
    6876:	b672      	cpsid	i
    6878:	e7fe      	b.n	6878 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    687a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    687c:	2b00      	cmp	r3, #0
    687e:	d0ef      	beq.n	6860 <xQueueGenericSend+0x1c>
    6880:	b672      	cpsid	i
    6882:	e7fe      	b.n	6882 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    6884:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6886:	2b01      	cmp	r3, #1
    6888:	d0ec      	beq.n	6864 <xQueueGenericSend+0x20>
    688a:	b672      	cpsid	i
    688c:	e7fe      	b.n	688c <xQueueGenericSend+0x48>
    688e:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    6890:	4ea1      	ldr	r6, [pc, #644]	; (6b18 <xQueueGenericSend+0x2d4>)
    6892:	e0bc      	b.n	6a0e <xQueueGenericSend+0x1ca>
    6894:	2700      	movs	r7, #0
    6896:	e7fb      	b.n	6890 <xQueueGenericSend+0x4c>
				traceQUEUE_SEND( pxQueue );
    6898:	4ba0      	ldr	r3, [pc, #640]	; (6b1c <xQueueGenericSend+0x2d8>)
    689a:	4798      	blx	r3
    689c:	4ba0      	ldr	r3, [pc, #640]	; (6b20 <xQueueGenericSend+0x2dc>)
    689e:	4798      	blx	r3
    68a0:	4ba0      	ldr	r3, [pc, #640]	; (6b24 <xQueueGenericSend+0x2e0>)
    68a2:	881b      	ldrh	r3, [r3, #0]
    68a4:	4203      	tst	r3, r0
    68a6:	d01d      	beq.n	68e4 <xQueueGenericSend+0xa0>
    68a8:	0020      	movs	r0, r4
    68aa:	4b9f      	ldr	r3, [pc, #636]	; (6b28 <xQueueGenericSend+0x2e4>)
    68ac:	4798      	blx	r3
    68ae:	4b9d      	ldr	r3, [pc, #628]	; (6b24 <xQueueGenericSend+0x2e0>)
    68b0:	881b      	ldrh	r3, [r3, #0]
    68b2:	4203      	tst	r3, r0
    68b4:	d016      	beq.n	68e4 <xQueueGenericSend+0xa0>
    68b6:	2725      	movs	r7, #37	; 0x25
    68b8:	2d00      	cmp	r5, #0
    68ba:	d106      	bne.n	68ca <xQueueGenericSend+0x86>
    68bc:	0020      	movs	r0, r4
    68be:	4b9b      	ldr	r3, [pc, #620]	; (6b2c <xQueueGenericSend+0x2e8>)
    68c0:	4798      	blx	r3
    68c2:	4b9b      	ldr	r3, [pc, #620]	; (6b30 <xQueueGenericSend+0x2ec>)
    68c4:	5c1f      	ldrb	r7, [r3, r0]
    68c6:	3720      	adds	r7, #32
    68c8:	b2ff      	uxtb	r7, r7
    68ca:	0020      	movs	r0, r4
    68cc:	4b97      	ldr	r3, [pc, #604]	; (6b2c <xQueueGenericSend+0x2e8>)
    68ce:	4798      	blx	r3
    68d0:	4b97      	ldr	r3, [pc, #604]	; (6b30 <xQueueGenericSend+0x2ec>)
    68d2:	5c1e      	ldrb	r6, [r3, r0]
    68d4:	0020      	movs	r0, r4
    68d6:	4b97      	ldr	r3, [pc, #604]	; (6b34 <xQueueGenericSend+0x2f0>)
    68d8:	4798      	blx	r3
    68da:	b2c2      	uxtb	r2, r0
    68dc:	0031      	movs	r1, r6
    68de:	0038      	movs	r0, r7
    68e0:	4b95      	ldr	r3, [pc, #596]	; (6b38 <xQueueGenericSend+0x2f4>)
    68e2:	4798      	blx	r3
    68e4:	0020      	movs	r0, r4
    68e6:	4e91      	ldr	r6, [pc, #580]	; (6b2c <xQueueGenericSend+0x2e8>)
    68e8:	47b0      	blx	r6
    68ea:	4f91      	ldr	r7, [pc, #580]	; (6b30 <xQueueGenericSend+0x2ec>)
    68ec:	5c3b      	ldrb	r3, [r7, r0]
    68ee:	4698      	mov	r8, r3
    68f0:	0020      	movs	r0, r4
    68f2:	4b90      	ldr	r3, [pc, #576]	; (6b34 <xQueueGenericSend+0x2f0>)
    68f4:	4798      	blx	r3
    68f6:	b2c3      	uxtb	r3, r0
    68f8:	4699      	mov	r9, r3
    68fa:	0020      	movs	r0, r4
    68fc:	47b0      	blx	r6
    68fe:	5c3b      	ldrb	r3, [r7, r0]
    6900:	2b02      	cmp	r3, #2
    6902:	d01f      	beq.n	6944 <xQueueGenericSend+0x100>
    6904:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    6906:	3201      	adds	r2, #1
    6908:	b2d2      	uxtb	r2, r2
    690a:	4649      	mov	r1, r9
    690c:	4640      	mov	r0, r8
    690e:	4b8b      	ldr	r3, [pc, #556]	; (6b3c <xQueueGenericSend+0x2f8>)
    6910:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    6912:	002a      	movs	r2, r5
    6914:	9900      	ldr	r1, [sp, #0]
    6916:	0020      	movs	r0, r4
    6918:	4b89      	ldr	r3, [pc, #548]	; (6b40 <xQueueGenericSend+0x2fc>)
    691a:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    691c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    691e:	2b00      	cmp	r3, #0
    6920:	d012      	beq.n	6948 <xQueueGenericSend+0x104>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    6922:	0029      	movs	r1, r5
    6924:	0020      	movs	r0, r4
    6926:	4b87      	ldr	r3, [pc, #540]	; (6b44 <xQueueGenericSend+0x300>)
    6928:	4798      	blx	r3
    692a:	2800      	cmp	r0, #0
    692c:	d001      	beq.n	6932 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
    692e:	4b86      	ldr	r3, [pc, #536]	; (6b48 <xQueueGenericSend+0x304>)
    6930:	4798      	blx	r3
				taskEXIT_CRITICAL();
    6932:	4b86      	ldr	r3, [pc, #536]	; (6b4c <xQueueGenericSend+0x308>)
    6934:	4798      	blx	r3
				return pdPASS;
    6936:	2301      	movs	r3, #1
}
    6938:	0018      	movs	r0, r3
    693a:	b005      	add	sp, #20
    693c:	bc0c      	pop	{r2, r3}
    693e:	4690      	mov	r8, r2
    6940:	4699      	mov	r9, r3
    6942:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_SEND( pxQueue );
    6944:	2200      	movs	r2, #0
    6946:	e7e0      	b.n	690a <xQueueGenericSend+0xc6>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6948:	6a63      	ldr	r3, [r4, #36]	; 0x24
    694a:	2b00      	cmp	r3, #0
    694c:	d008      	beq.n	6960 <xQueueGenericSend+0x11c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    694e:	0020      	movs	r0, r4
    6950:	3024      	adds	r0, #36	; 0x24
    6952:	4b7f      	ldr	r3, [pc, #508]	; (6b50 <xQueueGenericSend+0x30c>)
    6954:	4798      	blx	r3
    6956:	2800      	cmp	r0, #0
    6958:	d0eb      	beq.n	6932 <xQueueGenericSend+0xee>
								queueYIELD_IF_USING_PREEMPTION();
    695a:	4b7b      	ldr	r3, [pc, #492]	; (6b48 <xQueueGenericSend+0x304>)
    695c:	4798      	blx	r3
    695e:	e7e8      	b.n	6932 <xQueueGenericSend+0xee>
						else if( xYieldRequired != pdFALSE )
    6960:	2800      	cmp	r0, #0
    6962:	d0e6      	beq.n	6932 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
    6964:	4b78      	ldr	r3, [pc, #480]	; (6b48 <xQueueGenericSend+0x304>)
    6966:	4798      	blx	r3
    6968:	e7e3      	b.n	6932 <xQueueGenericSend+0xee>
					taskEXIT_CRITICAL();
    696a:	4b78      	ldr	r3, [pc, #480]	; (6b4c <xQueueGenericSend+0x308>)
    696c:	4798      	blx	r3
					traceQUEUE_SEND_FAILED( pxQueue );
    696e:	4b6b      	ldr	r3, [pc, #428]	; (6b1c <xQueueGenericSend+0x2d8>)
    6970:	4798      	blx	r3
    6972:	4b6b      	ldr	r3, [pc, #428]	; (6b20 <xQueueGenericSend+0x2dc>)
    6974:	4798      	blx	r3
    6976:	4b6b      	ldr	r3, [pc, #428]	; (6b24 <xQueueGenericSend+0x2e0>)
    6978:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
    697a:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
    697c:	4202      	tst	r2, r0
    697e:	d0db      	beq.n	6938 <xQueueGenericSend+0xf4>
    6980:	0020      	movs	r0, r4
    6982:	4b69      	ldr	r3, [pc, #420]	; (6b28 <xQueueGenericSend+0x2e4>)
    6984:	4798      	blx	r3
    6986:	4b67      	ldr	r3, [pc, #412]	; (6b24 <xQueueGenericSend+0x2e0>)
    6988:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
    698a:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
    698c:	4202      	tst	r2, r0
    698e:	d0d3      	beq.n	6938 <xQueueGenericSend+0xf4>
    6990:	264d      	movs	r6, #77	; 0x4d
    6992:	2d00      	cmp	r5, #0
    6994:	d106      	bne.n	69a4 <xQueueGenericSend+0x160>
    6996:	0020      	movs	r0, r4
    6998:	4b64      	ldr	r3, [pc, #400]	; (6b2c <xQueueGenericSend+0x2e8>)
    699a:	4798      	blx	r3
    699c:	4b64      	ldr	r3, [pc, #400]	; (6b30 <xQueueGenericSend+0x2ec>)
    699e:	5c1e      	ldrb	r6, [r3, r0]
    69a0:	3648      	adds	r6, #72	; 0x48
    69a2:	b2f6      	uxtb	r6, r6
    69a4:	0020      	movs	r0, r4
    69a6:	4b61      	ldr	r3, [pc, #388]	; (6b2c <xQueueGenericSend+0x2e8>)
    69a8:	4798      	blx	r3
    69aa:	4b61      	ldr	r3, [pc, #388]	; (6b30 <xQueueGenericSend+0x2ec>)
    69ac:	5c1d      	ldrb	r5, [r3, r0]
    69ae:	0020      	movs	r0, r4
    69b0:	4b60      	ldr	r3, [pc, #384]	; (6b34 <xQueueGenericSend+0x2f0>)
    69b2:	4798      	blx	r3
    69b4:	b2c2      	uxtb	r2, r0
    69b6:	0029      	movs	r1, r5
    69b8:	0030      	movs	r0, r6
    69ba:	4b5f      	ldr	r3, [pc, #380]	; (6b38 <xQueueGenericSend+0x2f4>)
    69bc:	4798      	blx	r3
					return errQUEUE_FULL;
    69be:	2300      	movs	r3, #0
    69c0:	e7ba      	b.n	6938 <xQueueGenericSend+0xf4>
		prvLockQueue( pxQueue );
    69c2:	4b62      	ldr	r3, [pc, #392]	; (6b4c <xQueueGenericSend+0x308>)
    69c4:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    69c6:	a901      	add	r1, sp, #4
    69c8:	a802      	add	r0, sp, #8
    69ca:	4b62      	ldr	r3, [pc, #392]	; (6b54 <xQueueGenericSend+0x310>)
    69cc:	4798      	blx	r3
    69ce:	2800      	cmp	r0, #0
    69d0:	d16e      	bne.n	6ab0 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
    69d2:	4b51      	ldr	r3, [pc, #324]	; (6b18 <xQueueGenericSend+0x2d4>)
    69d4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    69d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    69d8:	4699      	mov	r9, r3
    69da:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    69dc:	4b5b      	ldr	r3, [pc, #364]	; (6b4c <xQueueGenericSend+0x308>)
    69de:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    69e0:	45b9      	cmp	r9, r7
    69e2:	d15f      	bne.n	6aa4 <xQueueGenericSend+0x260>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    69e4:	4b4d      	ldr	r3, [pc, #308]	; (6b1c <xQueueGenericSend+0x2d8>)
    69e6:	4798      	blx	r3
    69e8:	4b4d      	ldr	r3, [pc, #308]	; (6b20 <xQueueGenericSend+0x2dc>)
    69ea:	4798      	blx	r3
    69ec:	4b4d      	ldr	r3, [pc, #308]	; (6b24 <xQueueGenericSend+0x2e0>)
    69ee:	881b      	ldrh	r3, [r3, #0]
    69f0:	4203      	tst	r3, r0
    69f2:	d134      	bne.n	6a5e <xQueueGenericSend+0x21a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    69f4:	0020      	movs	r0, r4
    69f6:	3010      	adds	r0, #16
    69f8:	9901      	ldr	r1, [sp, #4]
    69fa:	4b57      	ldr	r3, [pc, #348]	; (6b58 <xQueueGenericSend+0x314>)
    69fc:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    69fe:	0020      	movs	r0, r4
    6a00:	4b56      	ldr	r3, [pc, #344]	; (6b5c <xQueueGenericSend+0x318>)
    6a02:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    6a04:	4b56      	ldr	r3, [pc, #344]	; (6b60 <xQueueGenericSend+0x31c>)
    6a06:	4798      	blx	r3
    6a08:	2800      	cmp	r0, #0
    6a0a:	d048      	beq.n	6a9e <xQueueGenericSend+0x25a>
    6a0c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    6a0e:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    6a10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6a12:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    6a14:	4293      	cmp	r3, r2
    6a16:	d200      	bcs.n	6a1a <xQueueGenericSend+0x1d6>
    6a18:	e73e      	b.n	6898 <xQueueGenericSend+0x54>
    6a1a:	2d02      	cmp	r5, #2
    6a1c:	d100      	bne.n	6a20 <xQueueGenericSend+0x1dc>
    6a1e:	e73b      	b.n	6898 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
    6a20:	9b01      	ldr	r3, [sp, #4]
    6a22:	2b00      	cmp	r3, #0
    6a24:	d0a1      	beq.n	696a <xQueueGenericSend+0x126>
				else if( xEntryTimeSet == pdFALSE )
    6a26:	2f00      	cmp	r7, #0
    6a28:	d102      	bne.n	6a30 <xQueueGenericSend+0x1ec>
					vTaskInternalSetTimeOutState( &xTimeOut );
    6a2a:	a802      	add	r0, sp, #8
    6a2c:	4b4d      	ldr	r3, [pc, #308]	; (6b64 <xQueueGenericSend+0x320>)
    6a2e:	4798      	blx	r3
		taskEXIT_CRITICAL();
    6a30:	4b46      	ldr	r3, [pc, #280]	; (6b4c <xQueueGenericSend+0x308>)
    6a32:	4798      	blx	r3
		vTaskSuspendAll();
    6a34:	4b4c      	ldr	r3, [pc, #304]	; (6b68 <xQueueGenericSend+0x324>)
    6a36:	4798      	blx	r3
		prvLockQueue( pxQueue );
    6a38:	4b37      	ldr	r3, [pc, #220]	; (6b18 <xQueueGenericSend+0x2d4>)
    6a3a:	4798      	blx	r3
    6a3c:	2344      	movs	r3, #68	; 0x44
    6a3e:	5ce3      	ldrb	r3, [r4, r3]
    6a40:	b25b      	sxtb	r3, r3
    6a42:	3301      	adds	r3, #1
    6a44:	d102      	bne.n	6a4c <xQueueGenericSend+0x208>
    6a46:	2200      	movs	r2, #0
    6a48:	2344      	movs	r3, #68	; 0x44
    6a4a:	54e2      	strb	r2, [r4, r3]
    6a4c:	2345      	movs	r3, #69	; 0x45
    6a4e:	5ce3      	ldrb	r3, [r4, r3]
    6a50:	b25b      	sxtb	r3, r3
    6a52:	3301      	adds	r3, #1
    6a54:	d1b5      	bne.n	69c2 <xQueueGenericSend+0x17e>
    6a56:	2200      	movs	r2, #0
    6a58:	2345      	movs	r3, #69	; 0x45
    6a5a:	54e2      	strb	r2, [r4, r3]
    6a5c:	e7b1      	b.n	69c2 <xQueueGenericSend+0x17e>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    6a5e:	0020      	movs	r0, r4
    6a60:	4b31      	ldr	r3, [pc, #196]	; (6b28 <xQueueGenericSend+0x2e4>)
    6a62:	4798      	blx	r3
    6a64:	4b2f      	ldr	r3, [pc, #188]	; (6b24 <xQueueGenericSend+0x2e0>)
    6a66:	881b      	ldrh	r3, [r3, #0]
    6a68:	4203      	tst	r3, r0
    6a6a:	d0c3      	beq.n	69f4 <xQueueGenericSend+0x1b0>
    6a6c:	2775      	movs	r7, #117	; 0x75
    6a6e:	2d00      	cmp	r5, #0
    6a70:	d106      	bne.n	6a80 <xQueueGenericSend+0x23c>
    6a72:	0020      	movs	r0, r4
    6a74:	4b2d      	ldr	r3, [pc, #180]	; (6b2c <xQueueGenericSend+0x2e8>)
    6a76:	4798      	blx	r3
    6a78:	4b2d      	ldr	r3, [pc, #180]	; (6b30 <xQueueGenericSend+0x2ec>)
    6a7a:	5c1f      	ldrb	r7, [r3, r0]
    6a7c:	3770      	adds	r7, #112	; 0x70
    6a7e:	b2ff      	uxtb	r7, r7
    6a80:	0020      	movs	r0, r4
    6a82:	4b2a      	ldr	r3, [pc, #168]	; (6b2c <xQueueGenericSend+0x2e8>)
    6a84:	4798      	blx	r3
    6a86:	4b2a      	ldr	r3, [pc, #168]	; (6b30 <xQueueGenericSend+0x2ec>)
    6a88:	5c1b      	ldrb	r3, [r3, r0]
    6a8a:	4699      	mov	r9, r3
    6a8c:	0020      	movs	r0, r4
    6a8e:	4b29      	ldr	r3, [pc, #164]	; (6b34 <xQueueGenericSend+0x2f0>)
    6a90:	4798      	blx	r3
    6a92:	b2c2      	uxtb	r2, r0
    6a94:	4649      	mov	r1, r9
    6a96:	0038      	movs	r0, r7
    6a98:	4b27      	ldr	r3, [pc, #156]	; (6b38 <xQueueGenericSend+0x2f4>)
    6a9a:	4798      	blx	r3
    6a9c:	e7aa      	b.n	69f4 <xQueueGenericSend+0x1b0>
					portYIELD_WITHIN_API();
    6a9e:	4b2a      	ldr	r3, [pc, #168]	; (6b48 <xQueueGenericSend+0x304>)
    6aa0:	4798      	blx	r3
    6aa2:	e7b3      	b.n	6a0c <xQueueGenericSend+0x1c8>
				prvUnlockQueue( pxQueue );
    6aa4:	0020      	movs	r0, r4
    6aa6:	4b2d      	ldr	r3, [pc, #180]	; (6b5c <xQueueGenericSend+0x318>)
    6aa8:	4798      	blx	r3
				( void ) xTaskResumeAll();
    6aaa:	4b2d      	ldr	r3, [pc, #180]	; (6b60 <xQueueGenericSend+0x31c>)
    6aac:	4798      	blx	r3
    6aae:	e7ad      	b.n	6a0c <xQueueGenericSend+0x1c8>
			prvUnlockQueue( pxQueue );
    6ab0:	0020      	movs	r0, r4
    6ab2:	4b2a      	ldr	r3, [pc, #168]	; (6b5c <xQueueGenericSend+0x318>)
    6ab4:	4798      	blx	r3
			( void ) xTaskResumeAll();
    6ab6:	4b2a      	ldr	r3, [pc, #168]	; (6b60 <xQueueGenericSend+0x31c>)
    6ab8:	4798      	blx	r3
			traceQUEUE_SEND_FAILED( pxQueue );
    6aba:	4b18      	ldr	r3, [pc, #96]	; (6b1c <xQueueGenericSend+0x2d8>)
    6abc:	4798      	blx	r3
    6abe:	4b18      	ldr	r3, [pc, #96]	; (6b20 <xQueueGenericSend+0x2dc>)
    6ac0:	4798      	blx	r3
    6ac2:	4b18      	ldr	r3, [pc, #96]	; (6b24 <xQueueGenericSend+0x2e0>)
    6ac4:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
    6ac6:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
    6ac8:	4202      	tst	r2, r0
    6aca:	d100      	bne.n	6ace <xQueueGenericSend+0x28a>
    6acc:	e734      	b.n	6938 <xQueueGenericSend+0xf4>
    6ace:	0020      	movs	r0, r4
    6ad0:	4b15      	ldr	r3, [pc, #84]	; (6b28 <xQueueGenericSend+0x2e4>)
    6ad2:	4798      	blx	r3
    6ad4:	4b13      	ldr	r3, [pc, #76]	; (6b24 <xQueueGenericSend+0x2e0>)
    6ad6:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
    6ad8:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
    6ada:	4202      	tst	r2, r0
    6adc:	d100      	bne.n	6ae0 <xQueueGenericSend+0x29c>
    6ade:	e72b      	b.n	6938 <xQueueGenericSend+0xf4>
    6ae0:	264d      	movs	r6, #77	; 0x4d
    6ae2:	2d00      	cmp	r5, #0
    6ae4:	d106      	bne.n	6af4 <xQueueGenericSend+0x2b0>
    6ae6:	0020      	movs	r0, r4
    6ae8:	4b10      	ldr	r3, [pc, #64]	; (6b2c <xQueueGenericSend+0x2e8>)
    6aea:	4798      	blx	r3
    6aec:	4b10      	ldr	r3, [pc, #64]	; (6b30 <xQueueGenericSend+0x2ec>)
    6aee:	5c1e      	ldrb	r6, [r3, r0]
    6af0:	3648      	adds	r6, #72	; 0x48
    6af2:	b2f6      	uxtb	r6, r6
    6af4:	0020      	movs	r0, r4
    6af6:	4b0d      	ldr	r3, [pc, #52]	; (6b2c <xQueueGenericSend+0x2e8>)
    6af8:	4798      	blx	r3
    6afa:	4b0d      	ldr	r3, [pc, #52]	; (6b30 <xQueueGenericSend+0x2ec>)
    6afc:	5c1d      	ldrb	r5, [r3, r0]
    6afe:	0020      	movs	r0, r4
    6b00:	4b0c      	ldr	r3, [pc, #48]	; (6b34 <xQueueGenericSend+0x2f0>)
    6b02:	4798      	blx	r3
    6b04:	b2c2      	uxtb	r2, r0
    6b06:	0029      	movs	r1, r5
    6b08:	0030      	movs	r0, r6
    6b0a:	4b0b      	ldr	r3, [pc, #44]	; (6b38 <xQueueGenericSend+0x2f4>)
    6b0c:	4798      	blx	r3
			return errQUEUE_FULL;
    6b0e:	2300      	movs	r3, #0
    6b10:	e712      	b.n	6938 <xQueueGenericSend+0xf4>
    6b12:	46c0      	nop			; (mov r8, r8)
    6b14:	000081b5 	.word	0x000081b5
    6b18:	00006291 	.word	0x00006291
    6b1c:	000050dd 	.word	0x000050dd
    6b20:	00005025 	.word	0x00005025
    6b24:	2000020c 	.word	0x2000020c
    6b28:	00005089 	.word	0x00005089
    6b2c:	00005009 	.word	0x00005009
    6b30:	20000204 	.word	0x20000204
    6b34:	00005079 	.word	0x00005079
    6b38:	00005d15 	.word	0x00005d15
    6b3c:	000057e9 	.word	0x000057e9
    6b40:	0000641d 	.word	0x0000641d
    6b44:	00006499 	.word	0x00006499
    6b48:	00006281 	.word	0x00006281
    6b4c:	000062a9 	.word	0x000062a9
    6b50:	0000804d 	.word	0x0000804d
    6b54:	00008119 	.word	0x00008119
    6b58:	00007f85 	.word	0x00007f85
    6b5c:	000065dd 	.word	0x000065dd
    6b60:	00007b9d 	.word	0x00007b9d
    6b64:	00008101 	.word	0x00008101
    6b68:	000079f5 	.word	0x000079f5

00006b6c <xQueueCreateMutex>:
	{
    6b6c:	b570      	push	{r4, r5, r6, lr}
    6b6e:	0002      	movs	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    6b70:	2100      	movs	r1, #0
    6b72:	2001      	movs	r0, #1
    6b74:	4b06      	ldr	r3, [pc, #24]	; (6b90 <xQueueCreateMutex+0x24>)
    6b76:	4798      	blx	r3
    6b78:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    6b7a:	d007      	beq.n	6b8c <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
    6b7c:	2300      	movs	r3, #0
    6b7e:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    6b80:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
    6b82:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    6b84:	2200      	movs	r2, #0
    6b86:	2100      	movs	r1, #0
    6b88:	4d02      	ldr	r5, [pc, #8]	; (6b94 <xQueueCreateMutex+0x28>)
    6b8a:	47a8      	blx	r5
	}
    6b8c:	0020      	movs	r0, r4
    6b8e:	bd70      	pop	{r4, r5, r6, pc}
    6b90:	00006709 	.word	0x00006709
    6b94:	00006845 	.word	0x00006845

00006b98 <xQueueGenericSendFromISR>:
{
    6b98:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b9a:	46de      	mov	lr, fp
    6b9c:	4647      	mov	r7, r8
    6b9e:	b580      	push	{r7, lr}
    6ba0:	b083      	sub	sp, #12
    6ba2:	0004      	movs	r4, r0
    6ba4:	9101      	str	r1, [sp, #4]
    6ba6:	0016      	movs	r6, r2
    6ba8:	001f      	movs	r7, r3
	configASSERT( pxQueue );
    6baa:	2800      	cmp	r0, #0
    6bac:	d02d      	beq.n	6c0a <xQueueGenericSendFromISR+0x72>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    6bae:	9b01      	ldr	r3, [sp, #4]
    6bb0:	2b00      	cmp	r3, #0
    6bb2:	d02c      	beq.n	6c0e <xQueueGenericSendFromISR+0x76>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    6bb4:	2f02      	cmp	r7, #2
    6bb6:	d02f      	beq.n	6c18 <xQueueGenericSendFromISR+0x80>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    6bb8:	4b59      	ldr	r3, [pc, #356]	; (6d20 <xQueueGenericSendFromISR+0x188>)
    6bba:	4798      	blx	r3
    6bbc:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    6bbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6bc0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    6bc2:	429a      	cmp	r2, r3
    6bc4:	d85a      	bhi.n	6c7c <xQueueGenericSendFromISR+0xe4>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    6bc6:	0020      	movs	r0, r4
    6bc8:	4b56      	ldr	r3, [pc, #344]	; (6d24 <xQueueGenericSendFromISR+0x18c>)
    6bca:	4798      	blx	r3
    6bcc:	4b56      	ldr	r3, [pc, #344]	; (6d28 <xQueueGenericSendFromISR+0x190>)
    6bce:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
    6bd0:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    6bd2:	4203      	tst	r3, r0
    6bd4:	d100      	bne.n	6bd8 <xQueueGenericSendFromISR+0x40>
    6bd6:	e09a      	b.n	6d0e <xQueueGenericSendFromISR+0x176>
    6bd8:	355d      	adds	r5, #93	; 0x5d
    6bda:	2f00      	cmp	r7, #0
    6bdc:	d106      	bne.n	6bec <xQueueGenericSendFromISR+0x54>
    6bde:	0020      	movs	r0, r4
    6be0:	4b52      	ldr	r3, [pc, #328]	; (6d2c <xQueueGenericSendFromISR+0x194>)
    6be2:	4798      	blx	r3
    6be4:	4b52      	ldr	r3, [pc, #328]	; (6d30 <xQueueGenericSendFromISR+0x198>)
    6be6:	5c1d      	ldrb	r5, [r3, r0]
    6be8:	3558      	adds	r5, #88	; 0x58
    6bea:	b2ed      	uxtb	r5, r5
    6bec:	0020      	movs	r0, r4
    6bee:	4b4f      	ldr	r3, [pc, #316]	; (6d2c <xQueueGenericSendFromISR+0x194>)
    6bf0:	4798      	blx	r3
    6bf2:	4b4f      	ldr	r3, [pc, #316]	; (6d30 <xQueueGenericSendFromISR+0x198>)
    6bf4:	5c1f      	ldrb	r7, [r3, r0]
    6bf6:	0020      	movs	r0, r4
    6bf8:	4b4e      	ldr	r3, [pc, #312]	; (6d34 <xQueueGenericSendFromISR+0x19c>)
    6bfa:	4798      	blx	r3
    6bfc:	b2c2      	uxtb	r2, r0
    6bfe:	0039      	movs	r1, r7
    6c00:	0028      	movs	r0, r5
    6c02:	4b4d      	ldr	r3, [pc, #308]	; (6d38 <xQueueGenericSendFromISR+0x1a0>)
    6c04:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    6c06:	2500      	movs	r5, #0
    6c08:	e081      	b.n	6d0e <xQueueGenericSendFromISR+0x176>
	configASSERT( pxQueue );
    6c0a:	b672      	cpsid	i
    6c0c:	e7fe      	b.n	6c0c <xQueueGenericSendFromISR+0x74>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    6c0e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    6c10:	2b00      	cmp	r3, #0
    6c12:	d0cf      	beq.n	6bb4 <xQueueGenericSendFromISR+0x1c>
    6c14:	b672      	cpsid	i
    6c16:	e7fe      	b.n	6c16 <xQueueGenericSendFromISR+0x7e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    6c18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6c1a:	2b01      	cmp	r3, #1
    6c1c:	d027      	beq.n	6c6e <xQueueGenericSendFromISR+0xd6>
    6c1e:	b672      	cpsid	i
    6c20:	e7fe      	b.n	6c20 <xQueueGenericSendFromISR+0x88>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    6c24:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6c26:	2b00      	cmp	r3, #0
    6c28:	d071      	beq.n	6d0e <xQueueGenericSendFromISR+0x176>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    6c2a:	0020      	movs	r0, r4
    6c2c:	3024      	adds	r0, #36	; 0x24
    6c2e:	4b43      	ldr	r3, [pc, #268]	; (6d3c <xQueueGenericSendFromISR+0x1a4>)
    6c30:	4798      	blx	r3
    6c32:	2800      	cmp	r0, #0
    6c34:	d06b      	beq.n	6d0e <xQueueGenericSendFromISR+0x176>
								if( pxHigherPriorityTaskWoken != NULL )
    6c36:	2e00      	cmp	r6, #0
    6c38:	d00a      	beq.n	6c50 <xQueueGenericSendFromISR+0xb8>
									*pxHigherPriorityTaskWoken = pdTRUE;
    6c3a:	2301      	movs	r3, #1
    6c3c:	6033      	str	r3, [r6, #0]
    6c3e:	e066      	b.n	6d0e <xQueueGenericSendFromISR+0x176>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    6c40:	3501      	adds	r5, #1
    6c42:	b26d      	sxtb	r5, r5
    6c44:	2345      	movs	r3, #69	; 0x45
    6c46:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
    6c48:	2501      	movs	r5, #1
    6c4a:	e060      	b.n	6d0e <xQueueGenericSendFromISR+0x176>
    6c4c:	2501      	movs	r5, #1
    6c4e:	e05e      	b.n	6d0e <xQueueGenericSendFromISR+0x176>
    6c50:	2501      	movs	r5, #1
    6c52:	e05c      	b.n	6d0e <xQueueGenericSendFromISR+0x176>
			const int8_t cTxLock = pxQueue->cTxLock;
    6c54:	2345      	movs	r3, #69	; 0x45
    6c56:	5ce5      	ldrb	r5, [r4, r3]
    6c58:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    6c5a:	0020      	movs	r0, r4
    6c5c:	4b31      	ldr	r3, [pc, #196]	; (6d24 <xQueueGenericSendFromISR+0x18c>)
    6c5e:	4798      	blx	r3
    6c60:	4b31      	ldr	r3, [pc, #196]	; (6d28 <xQueueGenericSendFromISR+0x190>)
    6c62:	881b      	ldrh	r3, [r3, #0]
    6c64:	4203      	tst	r3, r0
    6c66:	d02d      	beq.n	6cc4 <xQueueGenericSendFromISR+0x12c>
    6c68:	2335      	movs	r3, #53	; 0x35
    6c6a:	4698      	mov	r8, r3
    6c6c:	e01c      	b.n	6ca8 <xQueueGenericSendFromISR+0x110>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    6c6e:	4b2c      	ldr	r3, [pc, #176]	; (6d20 <xQueueGenericSendFromISR+0x188>)
    6c70:	4798      	blx	r3
    6c72:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    6c74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6c76:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    6c78:	429a      	cmp	r2, r3
    6c7a:	d9eb      	bls.n	6c54 <xQueueGenericSendFromISR+0xbc>
			const int8_t cTxLock = pxQueue->cTxLock;
    6c7c:	2345      	movs	r3, #69	; 0x45
    6c7e:	5ce5      	ldrb	r5, [r4, r3]
    6c80:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    6c82:	0020      	movs	r0, r4
    6c84:	4b27      	ldr	r3, [pc, #156]	; (6d24 <xQueueGenericSendFromISR+0x18c>)
    6c86:	4798      	blx	r3
    6c88:	4b27      	ldr	r3, [pc, #156]	; (6d28 <xQueueGenericSendFromISR+0x190>)
    6c8a:	881b      	ldrh	r3, [r3, #0]
    6c8c:	4203      	tst	r3, r0
    6c8e:	d019      	beq.n	6cc4 <xQueueGenericSendFromISR+0x12c>
    6c90:	2335      	movs	r3, #53	; 0x35
    6c92:	4698      	mov	r8, r3
    6c94:	2f00      	cmp	r7, #0
    6c96:	d107      	bne.n	6ca8 <xQueueGenericSendFromISR+0x110>
    6c98:	0020      	movs	r0, r4
    6c9a:	4b24      	ldr	r3, [pc, #144]	; (6d2c <xQueueGenericSendFromISR+0x194>)
    6c9c:	4798      	blx	r3
    6c9e:	4b24      	ldr	r3, [pc, #144]	; (6d30 <xQueueGenericSendFromISR+0x198>)
    6ca0:	5c1b      	ldrb	r3, [r3, r0]
    6ca2:	3330      	adds	r3, #48	; 0x30
    6ca4:	b2db      	uxtb	r3, r3
    6ca6:	4698      	mov	r8, r3
    6ca8:	0020      	movs	r0, r4
    6caa:	4b20      	ldr	r3, [pc, #128]	; (6d2c <xQueueGenericSendFromISR+0x194>)
    6cac:	4798      	blx	r3
    6cae:	4b20      	ldr	r3, [pc, #128]	; (6d30 <xQueueGenericSendFromISR+0x198>)
    6cb0:	5c1b      	ldrb	r3, [r3, r0]
    6cb2:	469b      	mov	fp, r3
    6cb4:	0020      	movs	r0, r4
    6cb6:	4b1f      	ldr	r3, [pc, #124]	; (6d34 <xQueueGenericSendFromISR+0x19c>)
    6cb8:	4798      	blx	r3
    6cba:	b2c2      	uxtb	r2, r0
    6cbc:	4659      	mov	r1, fp
    6cbe:	4640      	mov	r0, r8
    6cc0:	4b1d      	ldr	r3, [pc, #116]	; (6d38 <xQueueGenericSendFromISR+0x1a0>)
    6cc2:	4798      	blx	r3
    6cc4:	0020      	movs	r0, r4
    6cc6:	4b19      	ldr	r3, [pc, #100]	; (6d2c <xQueueGenericSendFromISR+0x194>)
    6cc8:	4798      	blx	r3
    6cca:	4b19      	ldr	r3, [pc, #100]	; (6d30 <xQueueGenericSendFromISR+0x198>)
    6ccc:	5c1b      	ldrb	r3, [r3, r0]
    6cce:	4698      	mov	r8, r3
    6cd0:	0020      	movs	r0, r4
    6cd2:	4b18      	ldr	r3, [pc, #96]	; (6d34 <xQueueGenericSendFromISR+0x19c>)
    6cd4:	4798      	blx	r3
    6cd6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    6cd8:	3201      	adds	r2, #1
    6cda:	b2d2      	uxtb	r2, r2
    6cdc:	b2c1      	uxtb	r1, r0
    6cde:	4640      	mov	r0, r8
    6ce0:	4b17      	ldr	r3, [pc, #92]	; (6d40 <xQueueGenericSendFromISR+0x1a8>)
    6ce2:	4798      	blx	r3
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    6ce4:	003a      	movs	r2, r7
    6ce6:	9901      	ldr	r1, [sp, #4]
    6ce8:	0020      	movs	r0, r4
    6cea:	4b16      	ldr	r3, [pc, #88]	; (6d44 <xQueueGenericSendFromISR+0x1ac>)
    6cec:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    6cee:	1c6b      	adds	r3, r5, #1
    6cf0:	d1a6      	bne.n	6c40 <xQueueGenericSendFromISR+0xa8>
					if( pxQueue->pxQueueSetContainer != NULL )
    6cf2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6cf4:	2b00      	cmp	r3, #0
    6cf6:	d094      	beq.n	6c22 <xQueueGenericSendFromISR+0x8a>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    6cf8:	0039      	movs	r1, r7
    6cfa:	0020      	movs	r0, r4
    6cfc:	4b12      	ldr	r3, [pc, #72]	; (6d48 <xQueueGenericSendFromISR+0x1b0>)
    6cfe:	4798      	blx	r3
			xReturn = pdPASS;
    6d00:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    6d02:	2800      	cmp	r0, #0
    6d04:	d003      	beq.n	6d0e <xQueueGenericSendFromISR+0x176>
							if( pxHigherPriorityTaskWoken != NULL )
    6d06:	2e00      	cmp	r6, #0
    6d08:	d0a0      	beq.n	6c4c <xQueueGenericSendFromISR+0xb4>
								*pxHigherPriorityTaskWoken = pdTRUE;
    6d0a:	2301      	movs	r3, #1
    6d0c:	6033      	str	r3, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    6d0e:	9800      	ldr	r0, [sp, #0]
    6d10:	4b0e      	ldr	r3, [pc, #56]	; (6d4c <xQueueGenericSendFromISR+0x1b4>)
    6d12:	4798      	blx	r3
}
    6d14:	0028      	movs	r0, r5
    6d16:	b003      	add	sp, #12
    6d18:	bc0c      	pop	{r2, r3}
    6d1a:	4690      	mov	r8, r2
    6d1c:	469b      	mov	fp, r3
    6d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d20:	000062c9 	.word	0x000062c9
    6d24:	00005089 	.word	0x00005089
    6d28:	2000020c 	.word	0x2000020c
    6d2c:	00005009 	.word	0x00005009
    6d30:	20000204 	.word	0x20000204
    6d34:	00005079 	.word	0x00005079
    6d38:	00005d15 	.word	0x00005d15
    6d3c:	0000804d 	.word	0x0000804d
    6d40:	000057e9 	.word	0x000057e9
    6d44:	0000641d 	.word	0x0000641d
    6d48:	00006499 	.word	0x00006499
    6d4c:	000062d1 	.word	0x000062d1

00006d50 <MyWrapper>:
{
    6d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d52:	46d6      	mov	lr, sl
    6d54:	4647      	mov	r7, r8
    6d56:	b580      	push	{r7, lr}
    6d58:	b083      	sub	sp, #12
    6d5a:	0004      	movs	r4, r0
    6d5c:	000f      	movs	r7, r1
    6d5e:	0016      	movs	r6, r2
	configASSERT( pxQueue );
    6d60:	2800      	cmp	r0, #0
    6d62:	d004      	beq.n	6d6e <MyWrapper+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
    6d64:	6c03      	ldr	r3, [r0, #64]	; 0x40
    6d66:	2b00      	cmp	r3, #0
    6d68:	d003      	beq.n	6d72 <MyWrapper+0x22>
    6d6a:	b672      	cpsid	i
    6d6c:	e7fe      	b.n	6d6c <MyWrapper+0x1c>
	configASSERT( pxQueue );
    6d6e:	b672      	cpsid	i
    6d70:	e7fe      	b.n	6d70 <MyWrapper+0x20>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    6d72:	6803      	ldr	r3, [r0, #0]
    6d74:	2b00      	cmp	r3, #0
    6d76:	d055      	beq.n	6e24 <MyWrapper+0xd4>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    6d78:	4b4a      	ldr	r3, [pc, #296]	; (6ea4 <MyWrapper+0x154>)
    6d7a:	4798      	blx	r3
    6d7c:	9001      	str	r0, [sp, #4]
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    6d7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6d80:	4698      	mov	r8, r3
		if( uxMessagesWaiting < pxQueue->uxLength )
    6d82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6d84:	4598      	cmp	r8, r3
    6d86:	d267      	bcs.n	6e58 <MyWrapper+0x108>
			const int8_t cTxLock = pxQueue->cTxLock;
    6d88:	2345      	movs	r3, #69	; 0x45
    6d8a:	5ce5      	ldrb	r5, [r4, r3]
    6d8c:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    6d8e:	0020      	movs	r0, r4
    6d90:	4b45      	ldr	r3, [pc, #276]	; (6ea8 <MyWrapper+0x158>)
    6d92:	4798      	blx	r3
    6d94:	4b45      	ldr	r3, [pc, #276]	; (6eac <MyWrapper+0x15c>)
    6d96:	881b      	ldrh	r3, [r3, #0]
    6d98:	4203      	tst	r3, r0
    6d9a:	d018      	beq.n	6dce <MyWrapper+0x7e>
    6d9c:	2335      	movs	r3, #53	; 0x35
    6d9e:	469a      	mov	sl, r3
    6da0:	2e00      	cmp	r6, #0
    6da2:	d107      	bne.n	6db4 <MyWrapper+0x64>
    6da4:	0020      	movs	r0, r4
    6da6:	4b42      	ldr	r3, [pc, #264]	; (6eb0 <MyWrapper+0x160>)
    6da8:	4798      	blx	r3
    6daa:	4b42      	ldr	r3, [pc, #264]	; (6eb4 <MyWrapper+0x164>)
    6dac:	5c1b      	ldrb	r3, [r3, r0]
    6dae:	3330      	adds	r3, #48	; 0x30
    6db0:	b2db      	uxtb	r3, r3
    6db2:	469a      	mov	sl, r3
    6db4:	0020      	movs	r0, r4
    6db6:	4b3e      	ldr	r3, [pc, #248]	; (6eb0 <MyWrapper+0x160>)
    6db8:	4798      	blx	r3
    6dba:	4b3e      	ldr	r3, [pc, #248]	; (6eb4 <MyWrapper+0x164>)
    6dbc:	5c1e      	ldrb	r6, [r3, r0]
    6dbe:	0020      	movs	r0, r4
    6dc0:	4b3d      	ldr	r3, [pc, #244]	; (6eb8 <MyWrapper+0x168>)
    6dc2:	4798      	blx	r3
    6dc4:	b2c2      	uxtb	r2, r0
    6dc6:	0031      	movs	r1, r6
    6dc8:	4650      	mov	r0, sl
    6dca:	4b3c      	ldr	r3, [pc, #240]	; (6ebc <MyWrapper+0x16c>)
    6dcc:	4798      	blx	r3
    6dce:	0020      	movs	r0, r4
    6dd0:	4b37      	ldr	r3, [pc, #220]	; (6eb0 <MyWrapper+0x160>)
    6dd2:	4798      	blx	r3
    6dd4:	4b37      	ldr	r3, [pc, #220]	; (6eb4 <MyWrapper+0x164>)
    6dd6:	5c1e      	ldrb	r6, [r3, r0]
    6dd8:	0020      	movs	r0, r4
    6dda:	4b37      	ldr	r3, [pc, #220]	; (6eb8 <MyWrapper+0x168>)
    6ddc:	4798      	blx	r3
    6dde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    6de0:	3201      	adds	r2, #1
    6de2:	b2d2      	uxtb	r2, r2
    6de4:	b2c1      	uxtb	r1, r0
    6de6:	0030      	movs	r0, r6
    6de8:	4b35      	ldr	r3, [pc, #212]	; (6ec0 <MyWrapper+0x170>)
    6dea:	4798      	blx	r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    6dec:	4643      	mov	r3, r8
    6dee:	3301      	adds	r3, #1
    6df0:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
    6df2:	1c6b      	adds	r3, r5, #1
    6df4:	d12a      	bne.n	6e4c <MyWrapper+0xfc>
					if( pxQueue->pxQueueSetContainer != NULL )
    6df6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6df8:	2b00      	cmp	r3, #0
    6dfa:	d018      	beq.n	6e2e <MyWrapper+0xde>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    6dfc:	2100      	movs	r1, #0
    6dfe:	0020      	movs	r0, r4
    6e00:	4b30      	ldr	r3, [pc, #192]	; (6ec4 <MyWrapper+0x174>)
    6e02:	4798      	blx	r3
			xReturn = pdPASS;
    6e04:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    6e06:	2800      	cmp	r0, #0
    6e08:	d003      	beq.n	6e12 <MyWrapper+0xc2>
							if( pxHigherPriorityTaskWoken != NULL )
    6e0a:	2f00      	cmp	r7, #0
    6e0c:	d045      	beq.n	6e9a <MyWrapper+0x14a>
								*pxHigherPriorityTaskWoken = pdTRUE;
    6e0e:	2301      	movs	r3, #1
    6e10:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    6e12:	9801      	ldr	r0, [sp, #4]
    6e14:	4b2c      	ldr	r3, [pc, #176]	; (6ec8 <MyWrapper+0x178>)
    6e16:	4798      	blx	r3
}
    6e18:	0028      	movs	r0, r5
    6e1a:	b003      	add	sp, #12
    6e1c:	bc0c      	pop	{r2, r3}
    6e1e:	4690      	mov	r8, r2
    6e20:	469a      	mov	sl, r3
    6e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    6e24:	6843      	ldr	r3, [r0, #4]
    6e26:	2b00      	cmp	r3, #0
    6e28:	d0a6      	beq.n	6d78 <MyWrapper+0x28>
    6e2a:	b672      	cpsid	i
    6e2c:	e7fe      	b.n	6e2c <MyWrapper+0xdc>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    6e30:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6e32:	2b00      	cmp	r3, #0
    6e34:	d0ed      	beq.n	6e12 <MyWrapper+0xc2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    6e36:	0020      	movs	r0, r4
    6e38:	3024      	adds	r0, #36	; 0x24
    6e3a:	4b24      	ldr	r3, [pc, #144]	; (6ecc <MyWrapper+0x17c>)
    6e3c:	4798      	blx	r3
    6e3e:	2800      	cmp	r0, #0
    6e40:	d0e7      	beq.n	6e12 <MyWrapper+0xc2>
								if( pxHigherPriorityTaskWoken != NULL )
    6e42:	2f00      	cmp	r7, #0
    6e44:	d02b      	beq.n	6e9e <MyWrapper+0x14e>
									*pxHigherPriorityTaskWoken = pdTRUE;
    6e46:	2301      	movs	r3, #1
    6e48:	603b      	str	r3, [r7, #0]
    6e4a:	e7e2      	b.n	6e12 <MyWrapper+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    6e4c:	3501      	adds	r5, #1
    6e4e:	b26d      	sxtb	r5, r5
    6e50:	2345      	movs	r3, #69	; 0x45
    6e52:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
    6e54:	2501      	movs	r5, #1
    6e56:	e7dc      	b.n	6e12 <MyWrapper+0xc2>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    6e58:	0020      	movs	r0, r4
    6e5a:	4b13      	ldr	r3, [pc, #76]	; (6ea8 <MyWrapper+0x158>)
    6e5c:	4798      	blx	r3
    6e5e:	4b13      	ldr	r3, [pc, #76]	; (6eac <MyWrapper+0x15c>)
    6e60:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
    6e62:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    6e64:	4203      	tst	r3, r0
    6e66:	d0d4      	beq.n	6e12 <MyWrapper+0xc2>
    6e68:	355d      	adds	r5, #93	; 0x5d
    6e6a:	2e00      	cmp	r6, #0
    6e6c:	d106      	bne.n	6e7c <MyWrapper+0x12c>
    6e6e:	0020      	movs	r0, r4
    6e70:	4b0f      	ldr	r3, [pc, #60]	; (6eb0 <MyWrapper+0x160>)
    6e72:	4798      	blx	r3
    6e74:	4b0f      	ldr	r3, [pc, #60]	; (6eb4 <MyWrapper+0x164>)
    6e76:	5c1d      	ldrb	r5, [r3, r0]
    6e78:	3558      	adds	r5, #88	; 0x58
    6e7a:	b2ed      	uxtb	r5, r5
    6e7c:	0020      	movs	r0, r4
    6e7e:	4b0c      	ldr	r3, [pc, #48]	; (6eb0 <MyWrapper+0x160>)
    6e80:	4798      	blx	r3
    6e82:	4b0c      	ldr	r3, [pc, #48]	; (6eb4 <MyWrapper+0x164>)
    6e84:	5c1f      	ldrb	r7, [r3, r0]
    6e86:	0020      	movs	r0, r4
    6e88:	4b0b      	ldr	r3, [pc, #44]	; (6eb8 <MyWrapper+0x168>)
    6e8a:	4798      	blx	r3
    6e8c:	b2c2      	uxtb	r2, r0
    6e8e:	0039      	movs	r1, r7
    6e90:	0028      	movs	r0, r5
    6e92:	4b0a      	ldr	r3, [pc, #40]	; (6ebc <MyWrapper+0x16c>)
    6e94:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    6e96:	2500      	movs	r5, #0
    6e98:	e7bb      	b.n	6e12 <MyWrapper+0xc2>
			xReturn = pdPASS;
    6e9a:	2501      	movs	r5, #1
    6e9c:	e7b9      	b.n	6e12 <MyWrapper+0xc2>
    6e9e:	2501      	movs	r5, #1
    6ea0:	e7b7      	b.n	6e12 <MyWrapper+0xc2>
    6ea2:	46c0      	nop			; (mov r8, r8)
    6ea4:	000062c9 	.word	0x000062c9
    6ea8:	00005089 	.word	0x00005089
    6eac:	2000020c 	.word	0x2000020c
    6eb0:	00005009 	.word	0x00005009
    6eb4:	20000204 	.word	0x20000204
    6eb8:	00005079 	.word	0x00005079
    6ebc:	00005d15 	.word	0x00005d15
    6ec0:	000057e9 	.word	0x000057e9
    6ec4:	00006499 	.word	0x00006499
    6ec8:	000062d1 	.word	0x000062d1
    6ecc:	0000804d 	.word	0x0000804d

00006ed0 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
    6ed0:	b510      	push	{r4, lr}
    6ed2:	2200      	movs	r2, #0
    6ed4:	4b01      	ldr	r3, [pc, #4]	; (6edc <xQueueGiveFromISR+0xc>)
    6ed6:	4798      	blx	r3
    6ed8:	bd10      	pop	{r4, pc}
    6eda:	46c0      	nop			; (mov r8, r8)
    6edc:	00006d51 	.word	0x00006d51

00006ee0 <xQueueReceive>:
{
    6ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ee2:	46ce      	mov	lr, r9
    6ee4:	4647      	mov	r7, r8
    6ee6:	b580      	push	{r7, lr}
    6ee8:	b085      	sub	sp, #20
    6eea:	1e04      	subs	r4, r0, #0
    6eec:	9100      	str	r1, [sp, #0]
    6eee:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    6ef0:	d00b      	beq.n	6f0a <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    6ef2:	9b00      	ldr	r3, [sp, #0]
    6ef4:	2b00      	cmp	r3, #0
    6ef6:	d00a      	beq.n	6f0e <xQueueReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    6ef8:	4ba4      	ldr	r3, [pc, #656]	; (718c <xQueueReceive+0x2ac>)
    6efa:	4798      	blx	r3
    6efc:	2800      	cmp	r0, #0
    6efe:	d10b      	bne.n	6f18 <xQueueReceive+0x38>
    6f00:	9b01      	ldr	r3, [sp, #4]
    6f02:	2b00      	cmp	r3, #0
    6f04:	d00c      	beq.n	6f20 <xQueueReceive+0x40>
    6f06:	b672      	cpsid	i
    6f08:	e7fe      	b.n	6f08 <xQueueReceive+0x28>
	configASSERT( ( pxQueue ) );
    6f0a:	b672      	cpsid	i
    6f0c:	e7fe      	b.n	6f0c <xQueueReceive+0x2c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    6f0e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    6f10:	2b00      	cmp	r3, #0
    6f12:	d0f1      	beq.n	6ef8 <xQueueReceive+0x18>
    6f14:	b672      	cpsid	i
    6f16:	e7fe      	b.n	6f16 <xQueueReceive+0x36>
    6f18:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    6f1a:	4b9d      	ldr	r3, [pc, #628]	; (7190 <xQueueReceive+0x2b0>)
    6f1c:	4698      	mov	r8, r3
    6f1e:	e0b4      	b.n	708a <xQueueReceive+0x1aa>
    6f20:	2500      	movs	r5, #0
    6f22:	e7fa      	b.n	6f1a <xQueueReceive+0x3a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    6f24:	9900      	ldr	r1, [sp, #0]
    6f26:	0020      	movs	r0, r4
    6f28:	4b9a      	ldr	r3, [pc, #616]	; (7194 <xQueueReceive+0x2b4>)
    6f2a:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
    6f2c:	4b9a      	ldr	r3, [pc, #616]	; (7198 <xQueueReceive+0x2b8>)
    6f2e:	4798      	blx	r3
    6f30:	4b9a      	ldr	r3, [pc, #616]	; (719c <xQueueReceive+0x2bc>)
    6f32:	4798      	blx	r3
    6f34:	4b9a      	ldr	r3, [pc, #616]	; (71a0 <xQueueReceive+0x2c0>)
    6f36:	881b      	ldrh	r3, [r3, #0]
    6f38:	4203      	tst	r3, r0
    6f3a:	d019      	beq.n	6f70 <xQueueReceive+0x90>
    6f3c:	0020      	movs	r0, r4
    6f3e:	4b99      	ldr	r3, [pc, #612]	; (71a4 <xQueueReceive+0x2c4>)
    6f40:	4798      	blx	r3
    6f42:	4b97      	ldr	r3, [pc, #604]	; (71a0 <xQueueReceive+0x2c0>)
    6f44:	881b      	ldrh	r3, [r3, #0]
    6f46:	4203      	tst	r3, r0
    6f48:	d012      	beq.n	6f70 <xQueueReceive+0x90>
    6f4a:	0020      	movs	r0, r4
    6f4c:	4b96      	ldr	r3, [pc, #600]	; (71a8 <xQueueReceive+0x2c8>)
    6f4e:	4698      	mov	r8, r3
    6f50:	4798      	blx	r3
    6f52:	4f96      	ldr	r7, [pc, #600]	; (71ac <xQueueReceive+0x2cc>)
    6f54:	5c3d      	ldrb	r5, [r7, r0]
    6f56:	3528      	adds	r5, #40	; 0x28
    6f58:	b2ed      	uxtb	r5, r5
    6f5a:	0020      	movs	r0, r4
    6f5c:	47c0      	blx	r8
    6f5e:	5c3f      	ldrb	r7, [r7, r0]
    6f60:	0020      	movs	r0, r4
    6f62:	4b93      	ldr	r3, [pc, #588]	; (71b0 <xQueueReceive+0x2d0>)
    6f64:	4798      	blx	r3
    6f66:	b2c2      	uxtb	r2, r0
    6f68:	0039      	movs	r1, r7
    6f6a:	0028      	movs	r0, r5
    6f6c:	4b91      	ldr	r3, [pc, #580]	; (71b4 <xQueueReceive+0x2d4>)
    6f6e:	4798      	blx	r3
    6f70:	0020      	movs	r0, r4
    6f72:	4f8d      	ldr	r7, [pc, #564]	; (71a8 <xQueueReceive+0x2c8>)
    6f74:	47b8      	blx	r7
    6f76:	4d8d      	ldr	r5, [pc, #564]	; (71ac <xQueueReceive+0x2cc>)
    6f78:	5c2b      	ldrb	r3, [r5, r0]
    6f7a:	4699      	mov	r9, r3
    6f7c:	0020      	movs	r0, r4
    6f7e:	4b8c      	ldr	r3, [pc, #560]	; (71b0 <xQueueReceive+0x2d0>)
    6f80:	4798      	blx	r3
    6f82:	b2c3      	uxtb	r3, r0
    6f84:	4698      	mov	r8, r3
    6f86:	0020      	movs	r0, r4
    6f88:	47b8      	blx	r7
    6f8a:	5c2b      	ldrb	r3, [r5, r0]
    6f8c:	2b02      	cmp	r3, #2
    6f8e:	d11e      	bne.n	6fce <xQueueReceive+0xee>
    6f90:	4b81      	ldr	r3, [pc, #516]	; (7198 <xQueueReceive+0x2b8>)
    6f92:	4798      	blx	r3
    6f94:	4b88      	ldr	r3, [pc, #544]	; (71b8 <xQueueReceive+0x2d8>)
    6f96:	4798      	blx	r3
    6f98:	b2c2      	uxtb	r2, r0
    6f9a:	4641      	mov	r1, r8
    6f9c:	4648      	mov	r0, r9
    6f9e:	4b87      	ldr	r3, [pc, #540]	; (71bc <xQueueReceive+0x2dc>)
    6fa0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    6fa2:	3e01      	subs	r6, #1
    6fa4:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    6fa6:	6923      	ldr	r3, [r4, #16]
    6fa8:	2b00      	cmp	r3, #0
    6faa:	d007      	beq.n	6fbc <xQueueReceive+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    6fac:	0020      	movs	r0, r4
    6fae:	3010      	adds	r0, #16
    6fb0:	4b83      	ldr	r3, [pc, #524]	; (71c0 <xQueueReceive+0x2e0>)
    6fb2:	4798      	blx	r3
    6fb4:	2800      	cmp	r0, #0
    6fb6:	d001      	beq.n	6fbc <xQueueReceive+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
    6fb8:	4b82      	ldr	r3, [pc, #520]	; (71c4 <xQueueReceive+0x2e4>)
    6fba:	4798      	blx	r3
				taskEXIT_CRITICAL();
    6fbc:	4b82      	ldr	r3, [pc, #520]	; (71c8 <xQueueReceive+0x2e8>)
    6fbe:	4798      	blx	r3
				return pdPASS;
    6fc0:	2301      	movs	r3, #1
}
    6fc2:	0018      	movs	r0, r3
    6fc4:	b005      	add	sp, #20
    6fc6:	bc0c      	pop	{r2, r3}
    6fc8:	4690      	mov	r8, r2
    6fca:	4699      	mov	r9, r3
    6fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
    6fce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    6fd0:	3a01      	subs	r2, #1
    6fd2:	b2d2      	uxtb	r2, r2
    6fd4:	e7e1      	b.n	6f9a <xQueueReceive+0xba>
					taskEXIT_CRITICAL();
    6fd6:	4b7c      	ldr	r3, [pc, #496]	; (71c8 <xQueueReceive+0x2e8>)
    6fd8:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    6fda:	4b6f      	ldr	r3, [pc, #444]	; (7198 <xQueueReceive+0x2b8>)
    6fdc:	4798      	blx	r3
    6fde:	4b6f      	ldr	r3, [pc, #444]	; (719c <xQueueReceive+0x2bc>)
    6fe0:	4798      	blx	r3
    6fe2:	4b6f      	ldr	r3, [pc, #444]	; (71a0 <xQueueReceive+0x2c0>)
    6fe4:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
    6fe6:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    6fe8:	4202      	tst	r2, r0
    6fea:	d0ea      	beq.n	6fc2 <xQueueReceive+0xe2>
    6fec:	0020      	movs	r0, r4
    6fee:	4b6d      	ldr	r3, [pc, #436]	; (71a4 <xQueueReceive+0x2c4>)
    6ff0:	4798      	blx	r3
    6ff2:	4b6b      	ldr	r3, [pc, #428]	; (71a0 <xQueueReceive+0x2c0>)
    6ff4:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
    6ff6:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    6ff8:	4202      	tst	r2, r0
    6ffa:	d0e2      	beq.n	6fc2 <xQueueReceive+0xe2>
    6ffc:	0020      	movs	r0, r4
    6ffe:	4f6a      	ldr	r7, [pc, #424]	; (71a8 <xQueueReceive+0x2c8>)
    7000:	47b8      	blx	r7
    7002:	4e6a      	ldr	r6, [pc, #424]	; (71ac <xQueueReceive+0x2cc>)
    7004:	5c35      	ldrb	r5, [r6, r0]
    7006:	3550      	adds	r5, #80	; 0x50
    7008:	b2ed      	uxtb	r5, r5
    700a:	0020      	movs	r0, r4
    700c:	47b8      	blx	r7
    700e:	5c36      	ldrb	r6, [r6, r0]
    7010:	0020      	movs	r0, r4
    7012:	4b67      	ldr	r3, [pc, #412]	; (71b0 <xQueueReceive+0x2d0>)
    7014:	4798      	blx	r3
    7016:	b2c2      	uxtb	r2, r0
    7018:	0031      	movs	r1, r6
    701a:	0028      	movs	r0, r5
    701c:	4b65      	ldr	r3, [pc, #404]	; (71b4 <xQueueReceive+0x2d4>)
    701e:	4798      	blx	r3
					return errQUEUE_EMPTY;
    7020:	2300      	movs	r3, #0
    7022:	e7ce      	b.n	6fc2 <xQueueReceive+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
    7024:	a802      	add	r0, sp, #8
    7026:	4b69      	ldr	r3, [pc, #420]	; (71cc <xQueueReceive+0x2ec>)
    7028:	4798      	blx	r3
    702a:	e038      	b.n	709e <xQueueReceive+0x1be>
		prvLockQueue( pxQueue );
    702c:	2200      	movs	r2, #0
    702e:	2344      	movs	r3, #68	; 0x44
    7030:	54e2      	strb	r2, [r4, r3]
    7032:	e03f      	b.n	70b4 <xQueueReceive+0x1d4>
    7034:	2200      	movs	r2, #0
    7036:	2345      	movs	r3, #69	; 0x45
    7038:	54e2      	strb	r2, [r4, r3]
    703a:	e040      	b.n	70be <xQueueReceive+0x1de>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    703c:	0020      	movs	r0, r4
    703e:	4b59      	ldr	r3, [pc, #356]	; (71a4 <xQueueReceive+0x2c4>)
    7040:	4798      	blx	r3
    7042:	4b57      	ldr	r3, [pc, #348]	; (71a0 <xQueueReceive+0x2c0>)
    7044:	881b      	ldrh	r3, [r3, #0]
    7046:	4203      	tst	r3, r0
    7048:	d04e      	beq.n	70e8 <xQueueReceive+0x208>
    704a:	0020      	movs	r0, r4
    704c:	4f56      	ldr	r7, [pc, #344]	; (71a8 <xQueueReceive+0x2c8>)
    704e:	47b8      	blx	r7
    7050:	4e56      	ldr	r6, [pc, #344]	; (71ac <xQueueReceive+0x2cc>)
    7052:	5c35      	ldrb	r5, [r6, r0]
    7054:	3568      	adds	r5, #104	; 0x68
    7056:	b2ed      	uxtb	r5, r5
    7058:	0020      	movs	r0, r4
    705a:	47b8      	blx	r7
    705c:	5c36      	ldrb	r6, [r6, r0]
    705e:	0020      	movs	r0, r4
    7060:	4b53      	ldr	r3, [pc, #332]	; (71b0 <xQueueReceive+0x2d0>)
    7062:	4798      	blx	r3
    7064:	b2c2      	uxtb	r2, r0
    7066:	0031      	movs	r1, r6
    7068:	0028      	movs	r0, r5
    706a:	4b52      	ldr	r3, [pc, #328]	; (71b4 <xQueueReceive+0x2d4>)
    706c:	4798      	blx	r3
    706e:	e03b      	b.n	70e8 <xQueueReceive+0x208>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    7070:	0020      	movs	r0, r4
    7072:	3024      	adds	r0, #36	; 0x24
    7074:	9901      	ldr	r1, [sp, #4]
    7076:	4b56      	ldr	r3, [pc, #344]	; (71d0 <xQueueReceive+0x2f0>)
    7078:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    707a:	0020      	movs	r0, r4
    707c:	4b55      	ldr	r3, [pc, #340]	; (71d4 <xQueueReceive+0x2f4>)
    707e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    7080:	4b55      	ldr	r3, [pc, #340]	; (71d8 <xQueueReceive+0x2f8>)
    7082:	4798      	blx	r3
    7084:	2800      	cmp	r0, #0
    7086:	d046      	beq.n	7116 <xQueueReceive+0x236>
    7088:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    708a:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    708c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    708e:	2e00      	cmp	r6, #0
    7090:	d000      	beq.n	7094 <xQueueReceive+0x1b4>
    7092:	e747      	b.n	6f24 <xQueueReceive+0x44>
				if( xTicksToWait == ( TickType_t ) 0 )
    7094:	9b01      	ldr	r3, [sp, #4]
    7096:	2b00      	cmp	r3, #0
    7098:	d09d      	beq.n	6fd6 <xQueueReceive+0xf6>
				else if( xEntryTimeSet == pdFALSE )
    709a:	2d00      	cmp	r5, #0
    709c:	d0c2      	beq.n	7024 <xQueueReceive+0x144>
		taskEXIT_CRITICAL();
    709e:	4b4a      	ldr	r3, [pc, #296]	; (71c8 <xQueueReceive+0x2e8>)
    70a0:	4798      	blx	r3
		vTaskSuspendAll();
    70a2:	4b4e      	ldr	r3, [pc, #312]	; (71dc <xQueueReceive+0x2fc>)
    70a4:	4798      	blx	r3
		prvLockQueue( pxQueue );
    70a6:	4b3a      	ldr	r3, [pc, #232]	; (7190 <xQueueReceive+0x2b0>)
    70a8:	4798      	blx	r3
    70aa:	2344      	movs	r3, #68	; 0x44
    70ac:	5ce3      	ldrb	r3, [r4, r3]
    70ae:	b25b      	sxtb	r3, r3
    70b0:	3301      	adds	r3, #1
    70b2:	d0bb      	beq.n	702c <xQueueReceive+0x14c>
    70b4:	2345      	movs	r3, #69	; 0x45
    70b6:	5ce3      	ldrb	r3, [r4, r3]
    70b8:	b25b      	sxtb	r3, r3
    70ba:	3301      	adds	r3, #1
    70bc:	d0ba      	beq.n	7034 <xQueueReceive+0x154>
    70be:	4b42      	ldr	r3, [pc, #264]	; (71c8 <xQueueReceive+0x2e8>)
    70c0:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    70c2:	a901      	add	r1, sp, #4
    70c4:	a802      	add	r0, sp, #8
    70c6:	4b46      	ldr	r3, [pc, #280]	; (71e0 <xQueueReceive+0x300>)
    70c8:	4798      	blx	r3
    70ca:	2800      	cmp	r0, #0
    70cc:	d12c      	bne.n	7128 <xQueueReceive+0x248>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    70ce:	0020      	movs	r0, r4
    70d0:	4b44      	ldr	r3, [pc, #272]	; (71e4 <xQueueReceive+0x304>)
    70d2:	4798      	blx	r3
    70d4:	2800      	cmp	r0, #0
    70d6:	d021      	beq.n	711c <xQueueReceive+0x23c>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    70d8:	4b2f      	ldr	r3, [pc, #188]	; (7198 <xQueueReceive+0x2b8>)
    70da:	4798      	blx	r3
    70dc:	4b2f      	ldr	r3, [pc, #188]	; (719c <xQueueReceive+0x2bc>)
    70de:	4798      	blx	r3
    70e0:	4b2f      	ldr	r3, [pc, #188]	; (71a0 <xQueueReceive+0x2c0>)
    70e2:	881b      	ldrh	r3, [r3, #0]
    70e4:	4203      	tst	r3, r0
    70e6:	d1a9      	bne.n	703c <xQueueReceive+0x15c>
    70e8:	0020      	movs	r0, r4
    70ea:	4b2f      	ldr	r3, [pc, #188]	; (71a8 <xQueueReceive+0x2c8>)
    70ec:	4798      	blx	r3
    70ee:	4b2f      	ldr	r3, [pc, #188]	; (71ac <xQueueReceive+0x2cc>)
    70f0:	5c1b      	ldrb	r3, [r3, r0]
    70f2:	2b02      	cmp	r3, #2
    70f4:	d0bc      	beq.n	7070 <xQueueReceive+0x190>
    70f6:	4b28      	ldr	r3, [pc, #160]	; (7198 <xQueueReceive+0x2b8>)
    70f8:	4798      	blx	r3
    70fa:	4b28      	ldr	r3, [pc, #160]	; (719c <xQueueReceive+0x2bc>)
    70fc:	4798      	blx	r3
    70fe:	4b28      	ldr	r3, [pc, #160]	; (71a0 <xQueueReceive+0x2c0>)
    7100:	881b      	ldrh	r3, [r3, #0]
    7102:	4203      	tst	r3, r0
    7104:	d0b4      	beq.n	7070 <xQueueReceive+0x190>
    7106:	4b24      	ldr	r3, [pc, #144]	; (7198 <xQueueReceive+0x2b8>)
    7108:	4798      	blx	r3
    710a:	4b2b      	ldr	r3, [pc, #172]	; (71b8 <xQueueReceive+0x2d8>)
    710c:	4798      	blx	r3
    710e:	b2c0      	uxtb	r0, r0
    7110:	4b35      	ldr	r3, [pc, #212]	; (71e8 <xQueueReceive+0x308>)
    7112:	4798      	blx	r3
    7114:	e7ac      	b.n	7070 <xQueueReceive+0x190>
					portYIELD_WITHIN_API();
    7116:	4b2b      	ldr	r3, [pc, #172]	; (71c4 <xQueueReceive+0x2e4>)
    7118:	4798      	blx	r3
    711a:	e7b5      	b.n	7088 <xQueueReceive+0x1a8>
				prvUnlockQueue( pxQueue );
    711c:	0020      	movs	r0, r4
    711e:	4b2d      	ldr	r3, [pc, #180]	; (71d4 <xQueueReceive+0x2f4>)
    7120:	4798      	blx	r3
				( void ) xTaskResumeAll();
    7122:	4b2d      	ldr	r3, [pc, #180]	; (71d8 <xQueueReceive+0x2f8>)
    7124:	4798      	blx	r3
    7126:	e7af      	b.n	7088 <xQueueReceive+0x1a8>
			prvUnlockQueue( pxQueue );
    7128:	0020      	movs	r0, r4
    712a:	4b2a      	ldr	r3, [pc, #168]	; (71d4 <xQueueReceive+0x2f4>)
    712c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    712e:	4b2a      	ldr	r3, [pc, #168]	; (71d8 <xQueueReceive+0x2f8>)
    7130:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    7132:	0020      	movs	r0, r4
    7134:	4b2b      	ldr	r3, [pc, #172]	; (71e4 <xQueueReceive+0x304>)
    7136:	4798      	blx	r3
    7138:	2800      	cmp	r0, #0
    713a:	d0a5      	beq.n	7088 <xQueueReceive+0x1a8>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    713c:	4b16      	ldr	r3, [pc, #88]	; (7198 <xQueueReceive+0x2b8>)
    713e:	4798      	blx	r3
    7140:	4b16      	ldr	r3, [pc, #88]	; (719c <xQueueReceive+0x2bc>)
    7142:	4798      	blx	r3
    7144:	4b16      	ldr	r3, [pc, #88]	; (71a0 <xQueueReceive+0x2c0>)
    7146:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
    7148:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    714a:	4202      	tst	r2, r0
    714c:	d100      	bne.n	7150 <xQueueReceive+0x270>
    714e:	e738      	b.n	6fc2 <xQueueReceive+0xe2>
    7150:	0020      	movs	r0, r4
    7152:	4b14      	ldr	r3, [pc, #80]	; (71a4 <xQueueReceive+0x2c4>)
    7154:	4798      	blx	r3
    7156:	4b12      	ldr	r3, [pc, #72]	; (71a0 <xQueueReceive+0x2c0>)
    7158:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
    715a:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    715c:	4202      	tst	r2, r0
    715e:	d100      	bne.n	7162 <xQueueReceive+0x282>
    7160:	e72f      	b.n	6fc2 <xQueueReceive+0xe2>
    7162:	0020      	movs	r0, r4
    7164:	4f10      	ldr	r7, [pc, #64]	; (71a8 <xQueueReceive+0x2c8>)
    7166:	47b8      	blx	r7
    7168:	4e10      	ldr	r6, [pc, #64]	; (71ac <xQueueReceive+0x2cc>)
    716a:	5c35      	ldrb	r5, [r6, r0]
    716c:	3550      	adds	r5, #80	; 0x50
    716e:	b2ed      	uxtb	r5, r5
    7170:	0020      	movs	r0, r4
    7172:	47b8      	blx	r7
    7174:	5c36      	ldrb	r6, [r6, r0]
    7176:	0020      	movs	r0, r4
    7178:	4b0d      	ldr	r3, [pc, #52]	; (71b0 <xQueueReceive+0x2d0>)
    717a:	4798      	blx	r3
    717c:	b2c2      	uxtb	r2, r0
    717e:	0031      	movs	r1, r6
    7180:	0028      	movs	r0, r5
    7182:	4b0c      	ldr	r3, [pc, #48]	; (71b4 <xQueueReceive+0x2d4>)
    7184:	4798      	blx	r3
				return errQUEUE_EMPTY;
    7186:	2300      	movs	r3, #0
    7188:	e71b      	b.n	6fc2 <xQueueReceive+0xe2>
    718a:	46c0      	nop			; (mov r8, r8)
    718c:	000081b5 	.word	0x000081b5
    7190:	00006291 	.word	0x00006291
    7194:	000065b5 	.word	0x000065b5
    7198:	000050dd 	.word	0x000050dd
    719c:	00005025 	.word	0x00005025
    71a0:	2000020c 	.word	0x2000020c
    71a4:	00005089 	.word	0x00005089
    71a8:	00005009 	.word	0x00005009
    71ac:	20000204 	.word	0x20000204
    71b0:	00005079 	.word	0x00005079
    71b4:	00005d15 	.word	0x00005d15
    71b8:	00005015 	.word	0x00005015
    71bc:	000057e9 	.word	0x000057e9
    71c0:	0000804d 	.word	0x0000804d
    71c4:	00006281 	.word	0x00006281
    71c8:	000062a9 	.word	0x000062a9
    71cc:	00008101 	.word	0x00008101
    71d0:	00007f85 	.word	0x00007f85
    71d4:	000065dd 	.word	0x000065dd
    71d8:	00007b9d 	.word	0x00007b9d
    71dc:	000079f5 	.word	0x000079f5
    71e0:	00008119 	.word	0x00008119
    71e4:	00006401 	.word	0x00006401
    71e8:	00005841 	.word	0x00005841

000071ec <xQueueSemaphoreTake>:
{
    71ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    71ee:	46ce      	mov	lr, r9
    71f0:	4647      	mov	r7, r8
    71f2:	b580      	push	{r7, lr}
    71f4:	b085      	sub	sp, #20
    71f6:	1e04      	subs	r4, r0, #0
    71f8:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
    71fa:	d004      	beq.n	7206 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
    71fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
    71fe:	2b00      	cmp	r3, #0
    7200:	d003      	beq.n	720a <xQueueSemaphoreTake+0x1e>
    7202:	b672      	cpsid	i
    7204:	e7fe      	b.n	7204 <xQueueSemaphoreTake+0x18>
	configASSERT( ( pxQueue ) );
    7206:	b672      	cpsid	i
    7208:	e7fe      	b.n	7208 <xQueueSemaphoreTake+0x1c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    720a:	4bb2      	ldr	r3, [pc, #712]	; (74d4 <xQueueSemaphoreTake+0x2e8>)
    720c:	4798      	blx	r3
    720e:	2800      	cmp	r0, #0
    7210:	d104      	bne.n	721c <xQueueSemaphoreTake+0x30>
    7212:	9b01      	ldr	r3, [sp, #4]
    7214:	2b00      	cmp	r3, #0
    7216:	d006      	beq.n	7226 <xQueueSemaphoreTake+0x3a>
    7218:	b672      	cpsid	i
    721a:	e7fe      	b.n	721a <xQueueSemaphoreTake+0x2e>
    721c:	2500      	movs	r5, #0
    721e:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    7220:	4bad      	ldr	r3, [pc, #692]	; (74d8 <xQueueSemaphoreTake+0x2ec>)
    7222:	4698      	mov	r8, r3
    7224:	e0bd      	b.n	73a2 <xQueueSemaphoreTake+0x1b6>
    7226:	2500      	movs	r5, #0
    7228:	2700      	movs	r7, #0
    722a:	e7f9      	b.n	7220 <xQueueSemaphoreTake+0x34>
				traceQUEUE_RECEIVE( pxQueue );
    722c:	4bab      	ldr	r3, [pc, #684]	; (74dc <xQueueSemaphoreTake+0x2f0>)
    722e:	4798      	blx	r3
    7230:	4bab      	ldr	r3, [pc, #684]	; (74e0 <xQueueSemaphoreTake+0x2f4>)
    7232:	4798      	blx	r3
    7234:	4bab      	ldr	r3, [pc, #684]	; (74e4 <xQueueSemaphoreTake+0x2f8>)
    7236:	881b      	ldrh	r3, [r3, #0]
    7238:	4203      	tst	r3, r0
    723a:	d019      	beq.n	7270 <xQueueSemaphoreTake+0x84>
    723c:	0020      	movs	r0, r4
    723e:	4baa      	ldr	r3, [pc, #680]	; (74e8 <xQueueSemaphoreTake+0x2fc>)
    7240:	4798      	blx	r3
    7242:	4ba8      	ldr	r3, [pc, #672]	; (74e4 <xQueueSemaphoreTake+0x2f8>)
    7244:	881b      	ldrh	r3, [r3, #0]
    7246:	4203      	tst	r3, r0
    7248:	d012      	beq.n	7270 <xQueueSemaphoreTake+0x84>
    724a:	0020      	movs	r0, r4
    724c:	4ba7      	ldr	r3, [pc, #668]	; (74ec <xQueueSemaphoreTake+0x300>)
    724e:	4698      	mov	r8, r3
    7250:	4798      	blx	r3
    7252:	4fa7      	ldr	r7, [pc, #668]	; (74f0 <xQueueSemaphoreTake+0x304>)
    7254:	5c3d      	ldrb	r5, [r7, r0]
    7256:	3528      	adds	r5, #40	; 0x28
    7258:	b2ed      	uxtb	r5, r5
    725a:	0020      	movs	r0, r4
    725c:	47c0      	blx	r8
    725e:	5c3f      	ldrb	r7, [r7, r0]
    7260:	0020      	movs	r0, r4
    7262:	4ba4      	ldr	r3, [pc, #656]	; (74f4 <xQueueSemaphoreTake+0x308>)
    7264:	4798      	blx	r3
    7266:	b2c2      	uxtb	r2, r0
    7268:	0039      	movs	r1, r7
    726a:	0028      	movs	r0, r5
    726c:	4ba2      	ldr	r3, [pc, #648]	; (74f8 <xQueueSemaphoreTake+0x30c>)
    726e:	4798      	blx	r3
    7270:	0020      	movs	r0, r4
    7272:	4f9e      	ldr	r7, [pc, #632]	; (74ec <xQueueSemaphoreTake+0x300>)
    7274:	47b8      	blx	r7
    7276:	4d9e      	ldr	r5, [pc, #632]	; (74f0 <xQueueSemaphoreTake+0x304>)
    7278:	5c2b      	ldrb	r3, [r5, r0]
    727a:	4699      	mov	r9, r3
    727c:	0020      	movs	r0, r4
    727e:	4b9d      	ldr	r3, [pc, #628]	; (74f4 <xQueueSemaphoreTake+0x308>)
    7280:	4798      	blx	r3
    7282:	b2c3      	uxtb	r3, r0
    7284:	4698      	mov	r8, r3
    7286:	0020      	movs	r0, r4
    7288:	47b8      	blx	r7
    728a:	5c2b      	ldrb	r3, [r5, r0]
    728c:	2b02      	cmp	r3, #2
    728e:	d124      	bne.n	72da <xQueueSemaphoreTake+0xee>
    7290:	4b92      	ldr	r3, [pc, #584]	; (74dc <xQueueSemaphoreTake+0x2f0>)
    7292:	4798      	blx	r3
    7294:	4b99      	ldr	r3, [pc, #612]	; (74fc <xQueueSemaphoreTake+0x310>)
    7296:	4798      	blx	r3
    7298:	b2c2      	uxtb	r2, r0
    729a:	4641      	mov	r1, r8
    729c:	4648      	mov	r0, r9
    729e:	4b98      	ldr	r3, [pc, #608]	; (7500 <xQueueSemaphoreTake+0x314>)
    72a0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    72a2:	3e01      	subs	r6, #1
    72a4:	63a6      	str	r6, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    72a6:	6823      	ldr	r3, [r4, #0]
    72a8:	2b00      	cmp	r3, #0
    72aa:	d102      	bne.n	72b2 <xQueueSemaphoreTake+0xc6>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    72ac:	4b95      	ldr	r3, [pc, #596]	; (7504 <xQueueSemaphoreTake+0x318>)
    72ae:	4798      	blx	r3
    72b0:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    72b2:	6923      	ldr	r3, [r4, #16]
    72b4:	2b00      	cmp	r3, #0
    72b6:	d007      	beq.n	72c8 <xQueueSemaphoreTake+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    72b8:	0020      	movs	r0, r4
    72ba:	3010      	adds	r0, #16
    72bc:	4b92      	ldr	r3, [pc, #584]	; (7508 <xQueueSemaphoreTake+0x31c>)
    72be:	4798      	blx	r3
    72c0:	2800      	cmp	r0, #0
    72c2:	d001      	beq.n	72c8 <xQueueSemaphoreTake+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
    72c4:	4b91      	ldr	r3, [pc, #580]	; (750c <xQueueSemaphoreTake+0x320>)
    72c6:	4798      	blx	r3
				taskEXIT_CRITICAL();
    72c8:	4b91      	ldr	r3, [pc, #580]	; (7510 <xQueueSemaphoreTake+0x324>)
    72ca:	4798      	blx	r3
				return pdPASS;
    72cc:	2501      	movs	r5, #1
}
    72ce:	0028      	movs	r0, r5
    72d0:	b005      	add	sp, #20
    72d2:	bc0c      	pop	{r2, r3}
    72d4:	4690      	mov	r8, r2
    72d6:	4699      	mov	r9, r3
    72d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
    72da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    72dc:	3a01      	subs	r2, #1
    72de:	b2d2      	uxtb	r2, r2
    72e0:	e7db      	b.n	729a <xQueueSemaphoreTake+0xae>
						configASSERT( xInheritanceOccurred == pdFALSE );
    72e2:	2d00      	cmp	r5, #0
    72e4:	d001      	beq.n	72ea <xQueueSemaphoreTake+0xfe>
    72e6:	b672      	cpsid	i
    72e8:	e7fe      	b.n	72e8 <xQueueSemaphoreTake+0xfc>
					taskEXIT_CRITICAL();
    72ea:	4b89      	ldr	r3, [pc, #548]	; (7510 <xQueueSemaphoreTake+0x324>)
    72ec:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    72ee:	4b7b      	ldr	r3, [pc, #492]	; (74dc <xQueueSemaphoreTake+0x2f0>)
    72f0:	4798      	blx	r3
    72f2:	4b7b      	ldr	r3, [pc, #492]	; (74e0 <xQueueSemaphoreTake+0x2f4>)
    72f4:	4798      	blx	r3
    72f6:	4b7b      	ldr	r3, [pc, #492]	; (74e4 <xQueueSemaphoreTake+0x2f8>)
    72f8:	881b      	ldrh	r3, [r3, #0]
    72fa:	4203      	tst	r3, r0
    72fc:	d0e7      	beq.n	72ce <xQueueSemaphoreTake+0xe2>
    72fe:	0020      	movs	r0, r4
    7300:	4b79      	ldr	r3, [pc, #484]	; (74e8 <xQueueSemaphoreTake+0x2fc>)
    7302:	4798      	blx	r3
    7304:	4b77      	ldr	r3, [pc, #476]	; (74e4 <xQueueSemaphoreTake+0x2f8>)
    7306:	881b      	ldrh	r3, [r3, #0]
    7308:	4203      	tst	r3, r0
    730a:	d0e0      	beq.n	72ce <xQueueSemaphoreTake+0xe2>
    730c:	0020      	movs	r0, r4
    730e:	4b77      	ldr	r3, [pc, #476]	; (74ec <xQueueSemaphoreTake+0x300>)
    7310:	4698      	mov	r8, r3
    7312:	4798      	blx	r3
    7314:	4f76      	ldr	r7, [pc, #472]	; (74f0 <xQueueSemaphoreTake+0x304>)
    7316:	5c3e      	ldrb	r6, [r7, r0]
    7318:	3650      	adds	r6, #80	; 0x50
    731a:	b2f6      	uxtb	r6, r6
    731c:	0020      	movs	r0, r4
    731e:	47c0      	blx	r8
    7320:	5c3f      	ldrb	r7, [r7, r0]
    7322:	0020      	movs	r0, r4
    7324:	4b73      	ldr	r3, [pc, #460]	; (74f4 <xQueueSemaphoreTake+0x308>)
    7326:	4798      	blx	r3
    7328:	b2c2      	uxtb	r2, r0
    732a:	0039      	movs	r1, r7
    732c:	0030      	movs	r0, r6
    732e:	4b72      	ldr	r3, [pc, #456]	; (74f8 <xQueueSemaphoreTake+0x30c>)
    7330:	4798      	blx	r3
    7332:	e7cc      	b.n	72ce <xQueueSemaphoreTake+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
    7334:	a802      	add	r0, sp, #8
    7336:	4b77      	ldr	r3, [pc, #476]	; (7514 <xQueueSemaphoreTake+0x328>)
    7338:	4798      	blx	r3
    733a:	e03c      	b.n	73b6 <xQueueSemaphoreTake+0x1ca>
		prvLockQueue( pxQueue );
    733c:	2200      	movs	r2, #0
    733e:	2344      	movs	r3, #68	; 0x44
    7340:	54e2      	strb	r2, [r4, r3]
    7342:	e043      	b.n	73cc <xQueueSemaphoreTake+0x1e0>
    7344:	2200      	movs	r2, #0
    7346:	2345      	movs	r3, #69	; 0x45
    7348:	54e2      	strb	r2, [r4, r3]
    734a:	e044      	b.n	73d6 <xQueueSemaphoreTake+0x1ea>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    734c:	0020      	movs	r0, r4
    734e:	4b66      	ldr	r3, [pc, #408]	; (74e8 <xQueueSemaphoreTake+0x2fc>)
    7350:	4798      	blx	r3
    7352:	4b64      	ldr	r3, [pc, #400]	; (74e4 <xQueueSemaphoreTake+0x2f8>)
    7354:	881b      	ldrh	r3, [r3, #0]
    7356:	4203      	tst	r3, r0
    7358:	d052      	beq.n	7400 <xQueueSemaphoreTake+0x214>
    735a:	0020      	movs	r0, r4
    735c:	4b63      	ldr	r3, [pc, #396]	; (74ec <xQueueSemaphoreTake+0x300>)
    735e:	4699      	mov	r9, r3
    7360:	4798      	blx	r3
    7362:	4f63      	ldr	r7, [pc, #396]	; (74f0 <xQueueSemaphoreTake+0x304>)
    7364:	5c3e      	ldrb	r6, [r7, r0]
    7366:	3668      	adds	r6, #104	; 0x68
    7368:	b2f6      	uxtb	r6, r6
    736a:	0020      	movs	r0, r4
    736c:	47c8      	blx	r9
    736e:	5c3f      	ldrb	r7, [r7, r0]
    7370:	0020      	movs	r0, r4
    7372:	4b60      	ldr	r3, [pc, #384]	; (74f4 <xQueueSemaphoreTake+0x308>)
    7374:	4798      	blx	r3
    7376:	b2c2      	uxtb	r2, r0
    7378:	0039      	movs	r1, r7
    737a:	0030      	movs	r0, r6
    737c:	4b5e      	ldr	r3, [pc, #376]	; (74f8 <xQueueSemaphoreTake+0x30c>)
    737e:	4798      	blx	r3
    7380:	e03e      	b.n	7400 <xQueueSemaphoreTake+0x214>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    7382:	6823      	ldr	r3, [r4, #0]
    7384:	2b00      	cmp	r3, #0
    7386:	d052      	beq.n	742e <xQueueSemaphoreTake+0x242>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    7388:	0020      	movs	r0, r4
    738a:	3024      	adds	r0, #36	; 0x24
    738c:	9901      	ldr	r1, [sp, #4]
    738e:	4b62      	ldr	r3, [pc, #392]	; (7518 <xQueueSemaphoreTake+0x32c>)
    7390:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    7392:	0020      	movs	r0, r4
    7394:	4b61      	ldr	r3, [pc, #388]	; (751c <xQueueSemaphoreTake+0x330>)
    7396:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    7398:	4b61      	ldr	r3, [pc, #388]	; (7520 <xQueueSemaphoreTake+0x334>)
    739a:	4798      	blx	r3
    739c:	2800      	cmp	r0, #0
    739e:	d04f      	beq.n	7440 <xQueueSemaphoreTake+0x254>
    73a0:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    73a2:	47c0      	blx	r8
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    73a4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    73a6:	2e00      	cmp	r6, #0
    73a8:	d000      	beq.n	73ac <xQueueSemaphoreTake+0x1c0>
    73aa:	e73f      	b.n	722c <xQueueSemaphoreTake+0x40>
				if( xTicksToWait == ( TickType_t ) 0 )
    73ac:	9b01      	ldr	r3, [sp, #4]
    73ae:	2b00      	cmp	r3, #0
    73b0:	d097      	beq.n	72e2 <xQueueSemaphoreTake+0xf6>
				else if( xEntryTimeSet == pdFALSE )
    73b2:	2f00      	cmp	r7, #0
    73b4:	d0be      	beq.n	7334 <xQueueSemaphoreTake+0x148>
		taskEXIT_CRITICAL();
    73b6:	4b56      	ldr	r3, [pc, #344]	; (7510 <xQueueSemaphoreTake+0x324>)
    73b8:	4798      	blx	r3
		vTaskSuspendAll();
    73ba:	4b5a      	ldr	r3, [pc, #360]	; (7524 <xQueueSemaphoreTake+0x338>)
    73bc:	4798      	blx	r3
		prvLockQueue( pxQueue );
    73be:	4b46      	ldr	r3, [pc, #280]	; (74d8 <xQueueSemaphoreTake+0x2ec>)
    73c0:	4798      	blx	r3
    73c2:	2344      	movs	r3, #68	; 0x44
    73c4:	5ce3      	ldrb	r3, [r4, r3]
    73c6:	b25b      	sxtb	r3, r3
    73c8:	3301      	adds	r3, #1
    73ca:	d0b7      	beq.n	733c <xQueueSemaphoreTake+0x150>
    73cc:	2345      	movs	r3, #69	; 0x45
    73ce:	5ce3      	ldrb	r3, [r4, r3]
    73d0:	b25b      	sxtb	r3, r3
    73d2:	3301      	adds	r3, #1
    73d4:	d0b6      	beq.n	7344 <xQueueSemaphoreTake+0x158>
    73d6:	4b4e      	ldr	r3, [pc, #312]	; (7510 <xQueueSemaphoreTake+0x324>)
    73d8:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    73da:	a901      	add	r1, sp, #4
    73dc:	a802      	add	r0, sp, #8
    73de:	4b52      	ldr	r3, [pc, #328]	; (7528 <xQueueSemaphoreTake+0x33c>)
    73e0:	4798      	blx	r3
    73e2:	2800      	cmp	r0, #0
    73e4:	d135      	bne.n	7452 <xQueueSemaphoreTake+0x266>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    73e6:	0020      	movs	r0, r4
    73e8:	4b50      	ldr	r3, [pc, #320]	; (752c <xQueueSemaphoreTake+0x340>)
    73ea:	4798      	blx	r3
    73ec:	2800      	cmp	r0, #0
    73ee:	d02a      	beq.n	7446 <xQueueSemaphoreTake+0x25a>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    73f0:	4b3a      	ldr	r3, [pc, #232]	; (74dc <xQueueSemaphoreTake+0x2f0>)
    73f2:	4798      	blx	r3
    73f4:	4b3a      	ldr	r3, [pc, #232]	; (74e0 <xQueueSemaphoreTake+0x2f4>)
    73f6:	4798      	blx	r3
    73f8:	4b3a      	ldr	r3, [pc, #232]	; (74e4 <xQueueSemaphoreTake+0x2f8>)
    73fa:	881b      	ldrh	r3, [r3, #0]
    73fc:	4203      	tst	r3, r0
    73fe:	d1a5      	bne.n	734c <xQueueSemaphoreTake+0x160>
    7400:	0020      	movs	r0, r4
    7402:	4b3a      	ldr	r3, [pc, #232]	; (74ec <xQueueSemaphoreTake+0x300>)
    7404:	4798      	blx	r3
    7406:	4b3a      	ldr	r3, [pc, #232]	; (74f0 <xQueueSemaphoreTake+0x304>)
    7408:	5c1b      	ldrb	r3, [r3, r0]
    740a:	2b02      	cmp	r3, #2
    740c:	d0b9      	beq.n	7382 <xQueueSemaphoreTake+0x196>
    740e:	4b33      	ldr	r3, [pc, #204]	; (74dc <xQueueSemaphoreTake+0x2f0>)
    7410:	4798      	blx	r3
    7412:	4b33      	ldr	r3, [pc, #204]	; (74e0 <xQueueSemaphoreTake+0x2f4>)
    7414:	4798      	blx	r3
    7416:	4b33      	ldr	r3, [pc, #204]	; (74e4 <xQueueSemaphoreTake+0x2f8>)
    7418:	881b      	ldrh	r3, [r3, #0]
    741a:	4203      	tst	r3, r0
    741c:	d0b1      	beq.n	7382 <xQueueSemaphoreTake+0x196>
    741e:	4b2f      	ldr	r3, [pc, #188]	; (74dc <xQueueSemaphoreTake+0x2f0>)
    7420:	4798      	blx	r3
    7422:	4b36      	ldr	r3, [pc, #216]	; (74fc <xQueueSemaphoreTake+0x310>)
    7424:	4798      	blx	r3
    7426:	b2c0      	uxtb	r0, r0
    7428:	4b41      	ldr	r3, [pc, #260]	; (7530 <xQueueSemaphoreTake+0x344>)
    742a:	4798      	blx	r3
    742c:	e7a9      	b.n	7382 <xQueueSemaphoreTake+0x196>
						taskENTER_CRITICAL();
    742e:	4b2a      	ldr	r3, [pc, #168]	; (74d8 <xQueueSemaphoreTake+0x2ec>)
    7430:	4798      	blx	r3
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    7432:	6860      	ldr	r0, [r4, #4]
    7434:	4b3f      	ldr	r3, [pc, #252]	; (7534 <xQueueSemaphoreTake+0x348>)
    7436:	4798      	blx	r3
    7438:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
    743a:	4b35      	ldr	r3, [pc, #212]	; (7510 <xQueueSemaphoreTake+0x324>)
    743c:	4798      	blx	r3
    743e:	e7a3      	b.n	7388 <xQueueSemaphoreTake+0x19c>
					portYIELD_WITHIN_API();
    7440:	4b32      	ldr	r3, [pc, #200]	; (750c <xQueueSemaphoreTake+0x320>)
    7442:	4798      	blx	r3
    7444:	e7ac      	b.n	73a0 <xQueueSemaphoreTake+0x1b4>
				prvUnlockQueue( pxQueue );
    7446:	0020      	movs	r0, r4
    7448:	4b34      	ldr	r3, [pc, #208]	; (751c <xQueueSemaphoreTake+0x330>)
    744a:	4798      	blx	r3
				( void ) xTaskResumeAll();
    744c:	4b34      	ldr	r3, [pc, #208]	; (7520 <xQueueSemaphoreTake+0x334>)
    744e:	4798      	blx	r3
    7450:	e7a6      	b.n	73a0 <xQueueSemaphoreTake+0x1b4>
			prvUnlockQueue( pxQueue );
    7452:	0020      	movs	r0, r4
    7454:	4b31      	ldr	r3, [pc, #196]	; (751c <xQueueSemaphoreTake+0x330>)
    7456:	4798      	blx	r3
			( void ) xTaskResumeAll();
    7458:	4b31      	ldr	r3, [pc, #196]	; (7520 <xQueueSemaphoreTake+0x334>)
    745a:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    745c:	0020      	movs	r0, r4
    745e:	4b33      	ldr	r3, [pc, #204]	; (752c <xQueueSemaphoreTake+0x340>)
    7460:	4798      	blx	r3
    7462:	2800      	cmp	r0, #0
    7464:	d09c      	beq.n	73a0 <xQueueSemaphoreTake+0x1b4>
					if( xInheritanceOccurred != pdFALSE )
    7466:	2d00      	cmp	r5, #0
    7468:	d00e      	beq.n	7488 <xQueueSemaphoreTake+0x29c>
						taskENTER_CRITICAL();
    746a:	4b1b      	ldr	r3, [pc, #108]	; (74d8 <xQueueSemaphoreTake+0x2ec>)
    746c:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    746e:	6a63      	ldr	r3, [r4, #36]	; 0x24
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    7470:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    7472:	2b00      	cmp	r3, #0
    7474:	d003      	beq.n	747e <xQueueSemaphoreTake+0x292>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    7476:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7478:	681b      	ldr	r3, [r3, #0]
    747a:	3105      	adds	r1, #5
    747c:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    747e:	6860      	ldr	r0, [r4, #4]
    7480:	4b2d      	ldr	r3, [pc, #180]	; (7538 <xQueueSemaphoreTake+0x34c>)
    7482:	4798      	blx	r3
						taskEXIT_CRITICAL();
    7484:	4b22      	ldr	r3, [pc, #136]	; (7510 <xQueueSemaphoreTake+0x324>)
    7486:	4798      	blx	r3
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    7488:	4b14      	ldr	r3, [pc, #80]	; (74dc <xQueueSemaphoreTake+0x2f0>)
    748a:	4798      	blx	r3
    748c:	4b14      	ldr	r3, [pc, #80]	; (74e0 <xQueueSemaphoreTake+0x2f4>)
    748e:	4798      	blx	r3
    7490:	4b14      	ldr	r3, [pc, #80]	; (74e4 <xQueueSemaphoreTake+0x2f8>)
    7492:	881b      	ldrh	r3, [r3, #0]
				return errQUEUE_EMPTY;
    7494:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    7496:	4203      	tst	r3, r0
    7498:	d100      	bne.n	749c <xQueueSemaphoreTake+0x2b0>
    749a:	e718      	b.n	72ce <xQueueSemaphoreTake+0xe2>
    749c:	0020      	movs	r0, r4
    749e:	4b12      	ldr	r3, [pc, #72]	; (74e8 <xQueueSemaphoreTake+0x2fc>)
    74a0:	4798      	blx	r3
    74a2:	4b10      	ldr	r3, [pc, #64]	; (74e4 <xQueueSemaphoreTake+0x2f8>)
    74a4:	881b      	ldrh	r3, [r3, #0]
    74a6:	4203      	tst	r3, r0
    74a8:	d100      	bne.n	74ac <xQueueSemaphoreTake+0x2c0>
    74aa:	e710      	b.n	72ce <xQueueSemaphoreTake+0xe2>
    74ac:	0020      	movs	r0, r4
    74ae:	4f0f      	ldr	r7, [pc, #60]	; (74ec <xQueueSemaphoreTake+0x300>)
    74b0:	47b8      	blx	r7
    74b2:	4e0f      	ldr	r6, [pc, #60]	; (74f0 <xQueueSemaphoreTake+0x304>)
    74b4:	5c35      	ldrb	r5, [r6, r0]
    74b6:	3550      	adds	r5, #80	; 0x50
    74b8:	b2ed      	uxtb	r5, r5
    74ba:	0020      	movs	r0, r4
    74bc:	47b8      	blx	r7
    74be:	5c36      	ldrb	r6, [r6, r0]
    74c0:	0020      	movs	r0, r4
    74c2:	4b0c      	ldr	r3, [pc, #48]	; (74f4 <xQueueSemaphoreTake+0x308>)
    74c4:	4798      	blx	r3
    74c6:	b2c2      	uxtb	r2, r0
    74c8:	0031      	movs	r1, r6
    74ca:	0028      	movs	r0, r5
    74cc:	4b0a      	ldr	r3, [pc, #40]	; (74f8 <xQueueSemaphoreTake+0x30c>)
    74ce:	4798      	blx	r3
				return errQUEUE_EMPTY;
    74d0:	2500      	movs	r5, #0
    74d2:	e6fc      	b.n	72ce <xQueueSemaphoreTake+0xe2>
    74d4:	000081b5 	.word	0x000081b5
    74d8:	00006291 	.word	0x00006291
    74dc:	000050dd 	.word	0x000050dd
    74e0:	00005025 	.word	0x00005025
    74e4:	2000020c 	.word	0x2000020c
    74e8:	00005089 	.word	0x00005089
    74ec:	00005009 	.word	0x00005009
    74f0:	20000204 	.word	0x20000204
    74f4:	00005079 	.word	0x00005079
    74f8:	00005d15 	.word	0x00005d15
    74fc:	00005015 	.word	0x00005015
    7500:	000057e9 	.word	0x000057e9
    7504:	000084e5 	.word	0x000084e5
    7508:	0000804d 	.word	0x0000804d
    750c:	00006281 	.word	0x00006281
    7510:	000062a9 	.word	0x000062a9
    7514:	00008101 	.word	0x00008101
    7518:	00007f85 	.word	0x00007f85
    751c:	000065dd 	.word	0x000065dd
    7520:	00007b9d 	.word	0x00007b9d
    7524:	000079f5 	.word	0x000079f5
    7528:	00008119 	.word	0x00008119
    752c:	00006401 	.word	0x00006401
    7530:	00005841 	.word	0x00005841
    7534:	000081d5 	.word	0x000081d5
    7538:	000083e1 	.word	0x000083e1

0000753c <uxQueueGetQueueNumber>:
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    753c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
    753e:	4770      	bx	lr

00007540 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
    7540:	64c1      	str	r1, [r0, #76]	; 0x4c
	}
    7542:	4770      	bx	lr

00007544 <ucQueueGetQueueType>:
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    7544:	2350      	movs	r3, #80	; 0x50
    7546:	5cc0      	ldrb	r0, [r0, r3]
	}
    7548:	4770      	bx	lr
	...

0000754c <vQueueWaitForMessageRestricted>:
	{
    754c:	b570      	push	{r4, r5, r6, lr}
    754e:	0004      	movs	r4, r0
    7550:	000d      	movs	r5, r1
    7552:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
    7554:	4b11      	ldr	r3, [pc, #68]	; (759c <vQueueWaitForMessageRestricted+0x50>)
    7556:	4798      	blx	r3
    7558:	2344      	movs	r3, #68	; 0x44
    755a:	5ce3      	ldrb	r3, [r4, r3]
    755c:	b25b      	sxtb	r3, r3
    755e:	3301      	adds	r3, #1
    7560:	d00d      	beq.n	757e <vQueueWaitForMessageRestricted+0x32>
    7562:	2345      	movs	r3, #69	; 0x45
    7564:	5ce3      	ldrb	r3, [r4, r3]
    7566:	b25b      	sxtb	r3, r3
    7568:	3301      	adds	r3, #1
    756a:	d00c      	beq.n	7586 <vQueueWaitForMessageRestricted+0x3a>
    756c:	4b0c      	ldr	r3, [pc, #48]	; (75a0 <vQueueWaitForMessageRestricted+0x54>)
    756e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    7570:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7572:	2b00      	cmp	r3, #0
    7574:	d00b      	beq.n	758e <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
    7576:	0020      	movs	r0, r4
    7578:	4b0a      	ldr	r3, [pc, #40]	; (75a4 <vQueueWaitForMessageRestricted+0x58>)
    757a:	4798      	blx	r3
	}
    757c:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    757e:	2200      	movs	r2, #0
    7580:	2344      	movs	r3, #68	; 0x44
    7582:	54e2      	strb	r2, [r4, r3]
    7584:	e7ed      	b.n	7562 <vQueueWaitForMessageRestricted+0x16>
    7586:	2200      	movs	r2, #0
    7588:	2345      	movs	r3, #69	; 0x45
    758a:	54e2      	strb	r2, [r4, r3]
    758c:	e7ee      	b.n	756c <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    758e:	0020      	movs	r0, r4
    7590:	3024      	adds	r0, #36	; 0x24
    7592:	0032      	movs	r2, r6
    7594:	0029      	movs	r1, r5
    7596:	4b04      	ldr	r3, [pc, #16]	; (75a8 <vQueueWaitForMessageRestricted+0x5c>)
    7598:	4798      	blx	r3
    759a:	e7ec      	b.n	7576 <vQueueWaitForMessageRestricted+0x2a>
    759c:	00006291 	.word	0x00006291
    75a0:	000062a9 	.word	0x000062a9
    75a4:	000065dd 	.word	0x000065dd
    75a8:	00007fb1 	.word	0x00007fb1

000075ac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    75ac:	4b08      	ldr	r3, [pc, #32]	; (75d0 <prvResetNextTaskUnblockTime+0x24>)
    75ae:	681b      	ldr	r3, [r3, #0]
    75b0:	681b      	ldr	r3, [r3, #0]
    75b2:	2b00      	cmp	r3, #0
    75b4:	d007      	beq.n	75c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    75b6:	4b06      	ldr	r3, [pc, #24]	; (75d0 <prvResetNextTaskUnblockTime+0x24>)
    75b8:	681b      	ldr	r3, [r3, #0]
    75ba:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    75bc:	68db      	ldr	r3, [r3, #12]
    75be:	685a      	ldr	r2, [r3, #4]
    75c0:	4b04      	ldr	r3, [pc, #16]	; (75d4 <prvResetNextTaskUnblockTime+0x28>)
    75c2:	601a      	str	r2, [r3, #0]
	}
}
    75c4:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    75c6:	2201      	movs	r2, #1
    75c8:	4252      	negs	r2, r2
    75ca:	4b02      	ldr	r3, [pc, #8]	; (75d4 <prvResetNextTaskUnblockTime+0x28>)
    75cc:	601a      	str	r2, [r3, #0]
    75ce:	e7f9      	b.n	75c4 <prvResetNextTaskUnblockTime+0x18>
    75d0:	20003f8c 	.word	0x20003f8c
    75d4:	2000403c 	.word	0x2000403c

000075d8 <prvIdleTask>:
{
    75d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    75da:	46d6      	mov	lr, sl
    75dc:	464f      	mov	r7, r9
    75de:	4646      	mov	r6, r8
    75e0:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    75e2:	4b14      	ldr	r3, [pc, #80]	; (7634 <prvIdleTask+0x5c>)
    75e4:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
    75e6:	4b14      	ldr	r3, [pc, #80]	; (7638 <prvIdleTask+0x60>)
    75e8:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    75ea:	4f14      	ldr	r7, [pc, #80]	; (763c <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    75ec:	4b14      	ldr	r3, [pc, #80]	; (7640 <prvIdleTask+0x68>)
    75ee:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    75f0:	464b      	mov	r3, r9
    75f2:	681b      	ldr	r3, [r3, #0]
    75f4:	2b00      	cmp	r3, #0
    75f6:	d016      	beq.n	7626 <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
    75f8:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    75fa:	68fb      	ldr	r3, [r7, #12]
    75fc:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    75fe:	1d28      	adds	r0, r5, #4
    7600:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
    7602:	4a10      	ldr	r2, [pc, #64]	; (7644 <prvIdleTask+0x6c>)
    7604:	6813      	ldr	r3, [r2, #0]
    7606:	3b01      	subs	r3, #1
    7608:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    760a:	4c0a      	ldr	r4, [pc, #40]	; (7634 <prvIdleTask+0x5c>)
    760c:	6823      	ldr	r3, [r4, #0]
    760e:	3b01      	subs	r3, #1
    7610:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    7612:	4b0d      	ldr	r3, [pc, #52]	; (7648 <prvIdleTask+0x70>)
    7614:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    7616:	6b28      	ldr	r0, [r5, #48]	; 0x30
    7618:	4e0c      	ldr	r6, [pc, #48]	; (764c <prvIdleTask+0x74>)
    761a:	47b0      	blx	r6
			vPortFree( pxTCB );
    761c:	0028      	movs	r0, r5
    761e:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    7620:	6823      	ldr	r3, [r4, #0]
    7622:	2b00      	cmp	r3, #0
    7624:	d1e8      	bne.n	75f8 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    7626:	4b0a      	ldr	r3, [pc, #40]	; (7650 <prvIdleTask+0x78>)
    7628:	681b      	ldr	r3, [r3, #0]
    762a:	2b01      	cmp	r3, #1
    762c:	d9e0      	bls.n	75f0 <prvIdleTask+0x18>
				taskYIELD();
    762e:	4b09      	ldr	r3, [pc, #36]	; (7654 <prvIdleTask+0x7c>)
    7630:	4798      	blx	r3
    7632:	e7dd      	b.n	75f0 <prvIdleTask+0x18>
    7634:	20003ffc 	.word	0x20003ffc
    7638:	00006291 	.word	0x00006291
    763c:	20004070 	.word	0x20004070
    7640:	0000615b 	.word	0x0000615b
    7644:	20003ff8 	.word	0x20003ff8
    7648:	000062a9 	.word	0x000062a9
    764c:	000063e5 	.word	0x000063e5
    7650:	20003f94 	.word	0x20003f94
    7654:	00006281 	.word	0x00006281

00007658 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    7658:	b570      	push	{r4, r5, r6, lr}
    765a:	0004      	movs	r4, r0
    765c:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    765e:	4b17      	ldr	r3, [pc, #92]	; (76bc <prvAddCurrentTaskToDelayedList+0x64>)
    7660:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    7662:	4b17      	ldr	r3, [pc, #92]	; (76c0 <prvAddCurrentTaskToDelayedList+0x68>)
    7664:	6818      	ldr	r0, [r3, #0]
    7666:	3004      	adds	r0, #4
    7668:	4b16      	ldr	r3, [pc, #88]	; (76c4 <prvAddCurrentTaskToDelayedList+0x6c>)
    766a:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    766c:	1c63      	adds	r3, r4, #1
    766e:	d013      	beq.n	7698 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    7670:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    7672:	4b13      	ldr	r3, [pc, #76]	; (76c0 <prvAddCurrentTaskToDelayedList+0x68>)
    7674:	681b      	ldr	r3, [r3, #0]
    7676:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    7678:	42a6      	cmp	r6, r4
    767a:	d816      	bhi.n	76aa <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    767c:	4b12      	ldr	r3, [pc, #72]	; (76c8 <prvAddCurrentTaskToDelayedList+0x70>)
    767e:	6818      	ldr	r0, [r3, #0]
    7680:	4b0f      	ldr	r3, [pc, #60]	; (76c0 <prvAddCurrentTaskToDelayedList+0x68>)
    7682:	6819      	ldr	r1, [r3, #0]
    7684:	3104      	adds	r1, #4
    7686:	4b11      	ldr	r3, [pc, #68]	; (76cc <prvAddCurrentTaskToDelayedList+0x74>)
    7688:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    768a:	4b11      	ldr	r3, [pc, #68]	; (76d0 <prvAddCurrentTaskToDelayedList+0x78>)
    768c:	681b      	ldr	r3, [r3, #0]
    768e:	429c      	cmp	r4, r3
    7690:	d212      	bcs.n	76b8 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
    7692:	4b0f      	ldr	r3, [pc, #60]	; (76d0 <prvAddCurrentTaskToDelayedList+0x78>)
    7694:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    7696:	e00f      	b.n	76b8 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    7698:	2d00      	cmp	r5, #0
    769a:	d0e9      	beq.n	7670 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    769c:	4b08      	ldr	r3, [pc, #32]	; (76c0 <prvAddCurrentTaskToDelayedList+0x68>)
    769e:	6819      	ldr	r1, [r3, #0]
    76a0:	3104      	adds	r1, #4
    76a2:	480c      	ldr	r0, [pc, #48]	; (76d4 <prvAddCurrentTaskToDelayedList+0x7c>)
    76a4:	4b0c      	ldr	r3, [pc, #48]	; (76d8 <prvAddCurrentTaskToDelayedList+0x80>)
    76a6:	4798      	blx	r3
    76a8:	e006      	b.n	76b8 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    76aa:	4b0c      	ldr	r3, [pc, #48]	; (76dc <prvAddCurrentTaskToDelayedList+0x84>)
    76ac:	6818      	ldr	r0, [r3, #0]
    76ae:	4b04      	ldr	r3, [pc, #16]	; (76c0 <prvAddCurrentTaskToDelayedList+0x68>)
    76b0:	6819      	ldr	r1, [r3, #0]
    76b2:	3104      	adds	r1, #4
    76b4:	4b05      	ldr	r3, [pc, #20]	; (76cc <prvAddCurrentTaskToDelayedList+0x74>)
    76b6:	4798      	blx	r3
}
    76b8:	bd70      	pop	{r4, r5, r6, pc}
    76ba:	46c0      	nop			; (mov r8, r8)
    76bc:	20004084 	.word	0x20004084
    76c0:	20003f88 	.word	0x20003f88
    76c4:	0000615b 	.word	0x0000615b
    76c8:	20003f8c 	.word	0x20003f8c
    76cc:	0000612d 	.word	0x0000612d
    76d0:	2000403c 	.word	0x2000403c
    76d4:	2000405c 	.word	0x2000405c
    76d8:	00006115 	.word	0x00006115
    76dc:	20003f90 	.word	0x20003f90

000076e0 <xTaskCreate>:
	{
    76e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    76e2:	46c6      	mov	lr, r8
    76e4:	b500      	push	{lr}
    76e6:	b084      	sub	sp, #16
    76e8:	9001      	str	r0, [sp, #4]
    76ea:	000d      	movs	r5, r1
    76ec:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    76ee:	0097      	lsls	r7, r2, #2
    76f0:	0038      	movs	r0, r7
    76f2:	4b81      	ldr	r3, [pc, #516]	; (78f8 <xTaskCreate+0x218>)
    76f4:	4798      	blx	r3
    76f6:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    76f8:	d100      	bne.n	76fc <xTaskCreate+0x1c>
    76fa:	e0b6      	b.n	786a <xTaskCreate+0x18a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    76fc:	2054      	movs	r0, #84	; 0x54
    76fe:	4b7e      	ldr	r3, [pc, #504]	; (78f8 <xTaskCreate+0x218>)
    7700:	4798      	blx	r3
    7702:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    7704:	d100      	bne.n	7708 <xTaskCreate+0x28>
    7706:	e0ad      	b.n	7864 <xTaskCreate+0x184>
					pxNewTCB->pxStack = pxStack;
    7708:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    770a:	003a      	movs	r2, r7
    770c:	21a5      	movs	r1, #165	; 0xa5
    770e:	0030      	movs	r0, r6
    7710:	4b7a      	ldr	r3, [pc, #488]	; (78fc <xTaskCreate+0x21c>)
    7712:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    7714:	1f3a      	subs	r2, r7, #4
    7716:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7718:	469c      	mov	ip, r3
    771a:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    771c:	2307      	movs	r3, #7
    771e:	439a      	bics	r2, r3
    7720:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    7722:	782a      	ldrb	r2, [r5, #0]
    7724:	332d      	adds	r3, #45	; 0x2d
    7726:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    7728:	782b      	ldrb	r3, [r5, #0]
    772a:	2b00      	cmp	r3, #0
    772c:	d00d      	beq.n	774a <xTaskCreate+0x6a>
    772e:	3501      	adds	r5, #1
    7730:	0023      	movs	r3, r4
    7732:	3335      	adds	r3, #53	; 0x35
    7734:	0020      	movs	r0, r4
    7736:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    7738:	782a      	ldrb	r2, [r5, #0]
    773a:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
    773c:	782a      	ldrb	r2, [r5, #0]
    773e:	2a00      	cmp	r2, #0
    7740:	d003      	beq.n	774a <xTaskCreate+0x6a>
    7742:	3501      	adds	r5, #1
    7744:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    7746:	4283      	cmp	r3, r0
    7748:	d1f6      	bne.n	7738 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    774a:	2200      	movs	r2, #0
    774c:	233b      	movs	r3, #59	; 0x3b
    774e:	54e2      	strb	r2, [r4, r3]
    7750:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    7752:	2f04      	cmp	r7, #4
    7754:	d900      	bls.n	7758 <xTaskCreate+0x78>
    7756:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
    7758:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    775a:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    775c:	2600      	movs	r6, #0
    775e:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    7760:	1d23      	adds	r3, r4, #4
    7762:	9303      	str	r3, [sp, #12]
    7764:	0018      	movs	r0, r3
    7766:	4d66      	ldr	r5, [pc, #408]	; (7900 <xTaskCreate+0x220>)
    7768:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    776a:	0020      	movs	r0, r4
    776c:	3018      	adds	r0, #24
    776e:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    7770:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7772:	2305      	movs	r3, #5
    7774:	1bdb      	subs	r3, r3, r7
    7776:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    7778:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    777a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    777c:	2350      	movs	r3, #80	; 0x50
    777e:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    7780:	9a02      	ldr	r2, [sp, #8]
    7782:	9901      	ldr	r1, [sp, #4]
    7784:	4640      	mov	r0, r8
    7786:	4b5f      	ldr	r3, [pc, #380]	; (7904 <xTaskCreate+0x224>)
    7788:	4798      	blx	r3
    778a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    778c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    778e:	2b00      	cmp	r3, #0
    7790:	d000      	beq.n	7794 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    7792:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    7794:	4b5c      	ldr	r3, [pc, #368]	; (7908 <xTaskCreate+0x228>)
    7796:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    7798:	4a5c      	ldr	r2, [pc, #368]	; (790c <xTaskCreate+0x22c>)
    779a:	6813      	ldr	r3, [r2, #0]
    779c:	3301      	adds	r3, #1
    779e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    77a0:	4b5b      	ldr	r3, [pc, #364]	; (7910 <xTaskCreate+0x230>)
    77a2:	681b      	ldr	r3, [r3, #0]
    77a4:	2b00      	cmp	r3, #0
    77a6:	d063      	beq.n	7870 <xTaskCreate+0x190>
			if( xSchedulerRunning == pdFALSE )
    77a8:	4b5a      	ldr	r3, [pc, #360]	; (7914 <xTaskCreate+0x234>)
    77aa:	681b      	ldr	r3, [r3, #0]
    77ac:	2b00      	cmp	r3, #0
    77ae:	d107      	bne.n	77c0 <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    77b0:	4b57      	ldr	r3, [pc, #348]	; (7910 <xTaskCreate+0x230>)
    77b2:	681b      	ldr	r3, [r3, #0]
    77b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    77b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    77b8:	4293      	cmp	r3, r2
    77ba:	d801      	bhi.n	77c0 <xTaskCreate+0xe0>
					pxCurrentTCB = pxNewTCB;
    77bc:	4b54      	ldr	r3, [pc, #336]	; (7910 <xTaskCreate+0x230>)
    77be:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
    77c0:	4a55      	ldr	r2, [pc, #340]	; (7918 <xTaskCreate+0x238>)
    77c2:	6813      	ldr	r3, [r2, #0]
    77c4:	3301      	adds	r3, #1
    77c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    77c8:	63e3      	str	r3, [r4, #60]	; 0x3c
		traceTASK_CREATE( pxNewTCB );
    77ca:	2003      	movs	r0, #3
    77cc:	4b53      	ldr	r3, [pc, #332]	; (791c <xTaskCreate+0x23c>)
    77ce:	4798      	blx	r3
    77d0:	b281      	uxth	r1, r0
    77d2:	0020      	movs	r0, r4
    77d4:	4b52      	ldr	r3, [pc, #328]	; (7920 <xTaskCreate+0x240>)
    77d6:	4798      	blx	r3
    77d8:	4b52      	ldr	r3, [pc, #328]	; (7924 <xTaskCreate+0x244>)
    77da:	8819      	ldrh	r1, [r3, #0]
    77dc:	0020      	movs	r0, r4
    77de:	4b52      	ldr	r3, [pc, #328]	; (7928 <xTaskCreate+0x248>)
    77e0:	4798      	blx	r3
    77e2:	0020      	movs	r0, r4
    77e4:	4e51      	ldr	r6, [pc, #324]	; (792c <xTaskCreate+0x24c>)
    77e6:	47b0      	blx	r6
    77e8:	0022      	movs	r2, r4
    77ea:	3234      	adds	r2, #52	; 0x34
    77ec:	b2c1      	uxtb	r1, r0
    77ee:	2003      	movs	r0, #3
    77f0:	4b4f      	ldr	r3, [pc, #316]	; (7930 <xTaskCreate+0x250>)
    77f2:	4798      	blx	r3
    77f4:	0020      	movs	r0, r4
    77f6:	47b0      	blx	r6
    77f8:	232c      	movs	r3, #44	; 0x2c
    77fa:	18e3      	adds	r3, r4, r3
    77fc:	781a      	ldrb	r2, [r3, #0]
    77fe:	b2c1      	uxtb	r1, r0
    7800:	2003      	movs	r0, #3
    7802:	4b4c      	ldr	r3, [pc, #304]	; (7934 <xTaskCreate+0x254>)
    7804:	4798      	blx	r3
    7806:	4b4c      	ldr	r3, [pc, #304]	; (7938 <xTaskCreate+0x258>)
    7808:	4798      	blx	r3
    780a:	4b4c      	ldr	r3, [pc, #304]	; (793c <xTaskCreate+0x25c>)
    780c:	4798      	blx	r3
    780e:	4b4c      	ldr	r3, [pc, #304]	; (7940 <xTaskCreate+0x260>)
    7810:	881b      	ldrh	r3, [r3, #0]
    7812:	4203      	tst	r3, r0
    7814:	d154      	bne.n	78c0 <xTaskCreate+0x1e0>
		prvAddTaskToReadyList( pxNewTCB );
    7816:	0020      	movs	r0, r4
    7818:	4b48      	ldr	r3, [pc, #288]	; (793c <xTaskCreate+0x25c>)
    781a:	4798      	blx	r3
    781c:	4b48      	ldr	r3, [pc, #288]	; (7940 <xTaskCreate+0x260>)
    781e:	881b      	ldrh	r3, [r3, #0]
    7820:	4203      	tst	r3, r0
    7822:	d15d      	bne.n	78e0 <xTaskCreate+0x200>
    7824:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7826:	4a47      	ldr	r2, [pc, #284]	; (7944 <xTaskCreate+0x264>)
    7828:	6812      	ldr	r2, [r2, #0]
    782a:	4293      	cmp	r3, r2
    782c:	d901      	bls.n	7832 <xTaskCreate+0x152>
    782e:	4a45      	ldr	r2, [pc, #276]	; (7944 <xTaskCreate+0x264>)
    7830:	6013      	str	r3, [r2, #0]
    7832:	0098      	lsls	r0, r3, #2
    7834:	18c0      	adds	r0, r0, r3
    7836:	0080      	lsls	r0, r0, #2
    7838:	4b43      	ldr	r3, [pc, #268]	; (7948 <xTaskCreate+0x268>)
    783a:	1818      	adds	r0, r3, r0
    783c:	9903      	ldr	r1, [sp, #12]
    783e:	4b43      	ldr	r3, [pc, #268]	; (794c <xTaskCreate+0x26c>)
    7840:	4798      	blx	r3
	taskEXIT_CRITICAL();
    7842:	4b43      	ldr	r3, [pc, #268]	; (7950 <xTaskCreate+0x270>)
    7844:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    7846:	4b33      	ldr	r3, [pc, #204]	; (7914 <xTaskCreate+0x234>)
    7848:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
    784a:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    784c:	2b00      	cmp	r3, #0
    784e:	d005      	beq.n	785c <xTaskCreate+0x17c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    7850:	4b2f      	ldr	r3, [pc, #188]	; (7910 <xTaskCreate+0x230>)
    7852:	681b      	ldr	r3, [r3, #0]
    7854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7856:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7858:	429a      	cmp	r2, r3
    785a:	d348      	bcc.n	78ee <xTaskCreate+0x20e>
	}
    785c:	b004      	add	sp, #16
    785e:	bc04      	pop	{r2}
    7860:	4690      	mov	r8, r2
    7862:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    7864:	0030      	movs	r0, r6
    7866:	4b3b      	ldr	r3, [pc, #236]	; (7954 <xTaskCreate+0x274>)
    7868:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    786a:	2001      	movs	r0, #1
    786c:	4240      	negs	r0, r0
    786e:	e7f5      	b.n	785c <xTaskCreate+0x17c>
			pxCurrentTCB = pxNewTCB;
    7870:	4b27      	ldr	r3, [pc, #156]	; (7910 <xTaskCreate+0x230>)
    7872:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    7874:	6813      	ldr	r3, [r2, #0]
    7876:	2b01      	cmp	r3, #1
    7878:	d1a2      	bne.n	77c0 <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    787a:	4f33      	ldr	r7, [pc, #204]	; (7948 <xTaskCreate+0x268>)
    787c:	0038      	movs	r0, r7
    787e:	4e36      	ldr	r6, [pc, #216]	; (7958 <xTaskCreate+0x278>)
    7880:	47b0      	blx	r6
    7882:	0038      	movs	r0, r7
    7884:	3014      	adds	r0, #20
    7886:	47b0      	blx	r6
    7888:	0038      	movs	r0, r7
    788a:	3028      	adds	r0, #40	; 0x28
    788c:	47b0      	blx	r6
    788e:	0038      	movs	r0, r7
    7890:	303c      	adds	r0, #60	; 0x3c
    7892:	47b0      	blx	r6
    7894:	0038      	movs	r0, r7
    7896:	3050      	adds	r0, #80	; 0x50
    7898:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    789a:	4b30      	ldr	r3, [pc, #192]	; (795c <xTaskCreate+0x27c>)
    789c:	4698      	mov	r8, r3
    789e:	0018      	movs	r0, r3
    78a0:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    78a2:	4f2f      	ldr	r7, [pc, #188]	; (7960 <xTaskCreate+0x280>)
    78a4:	0038      	movs	r0, r7
    78a6:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    78a8:	482e      	ldr	r0, [pc, #184]	; (7964 <xTaskCreate+0x284>)
    78aa:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    78ac:	482e      	ldr	r0, [pc, #184]	; (7968 <xTaskCreate+0x288>)
    78ae:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    78b0:	482e      	ldr	r0, [pc, #184]	; (796c <xTaskCreate+0x28c>)
    78b2:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    78b4:	4b2e      	ldr	r3, [pc, #184]	; (7970 <xTaskCreate+0x290>)
    78b6:	4642      	mov	r2, r8
    78b8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    78ba:	4b2e      	ldr	r3, [pc, #184]	; (7974 <xTaskCreate+0x294>)
    78bc:	601f      	str	r7, [r3, #0]
    78be:	e77f      	b.n	77c0 <xTaskCreate+0xe0>
		traceTASK_CREATE( pxNewTCB );
    78c0:	0020      	movs	r0, r4
    78c2:	4b1e      	ldr	r3, [pc, #120]	; (793c <xTaskCreate+0x25c>)
    78c4:	4798      	blx	r3
    78c6:	4b1e      	ldr	r3, [pc, #120]	; (7940 <xTaskCreate+0x260>)
    78c8:	881b      	ldrh	r3, [r3, #0]
    78ca:	4203      	tst	r3, r0
    78cc:	d0a3      	beq.n	7816 <xTaskCreate+0x136>
    78ce:	0020      	movs	r0, r4
    78d0:	4b16      	ldr	r3, [pc, #88]	; (792c <xTaskCreate+0x24c>)
    78d2:	4798      	blx	r3
    78d4:	b2c2      	uxtb	r2, r0
    78d6:	2103      	movs	r1, #3
    78d8:	201b      	movs	r0, #27
    78da:	4b27      	ldr	r3, [pc, #156]	; (7978 <xTaskCreate+0x298>)
    78dc:	4798      	blx	r3
    78de:	e79a      	b.n	7816 <xTaskCreate+0x136>
		prvAddTaskToReadyList( pxNewTCB );
    78e0:	0020      	movs	r0, r4
    78e2:	4b12      	ldr	r3, [pc, #72]	; (792c <xTaskCreate+0x24c>)
    78e4:	4798      	blx	r3
    78e6:	b2c0      	uxtb	r0, r0
    78e8:	4b24      	ldr	r3, [pc, #144]	; (797c <xTaskCreate+0x29c>)
    78ea:	4798      	blx	r3
    78ec:	e79a      	b.n	7824 <xTaskCreate+0x144>
			taskYIELD_IF_USING_PREEMPTION();
    78ee:	4b24      	ldr	r3, [pc, #144]	; (7980 <xTaskCreate+0x2a0>)
    78f0:	4798      	blx	r3
			xReturn = pdPASS;
    78f2:	2001      	movs	r0, #1
    78f4:	e7b2      	b.n	785c <xTaskCreate+0x17c>
    78f6:	46c0      	nop			; (mov r8, r8)
    78f8:	00006355 	.word	0x00006355
    78fc:	00012b83 	.word	0x00012b83
    7900:	0000610f 	.word	0x0000610f
    7904:	000061e5 	.word	0x000061e5
    7908:	00006291 	.word	0x00006291
    790c:	20003ff8 	.word	0x20003ff8
    7910:	20003f88 	.word	0x20003f88
    7914:	20004058 	.word	0x20004058
    7918:	20004008 	.word	0x20004008
    791c:	00005881 	.word	0x00005881
    7920:	00005035 	.word	0x00005035
    7924:	2000020a 	.word	0x2000020a
    7928:	00005055 	.word	0x00005055
    792c:	00005015 	.word	0x00005015
    7930:	00005955 	.word	0x00005955
    7934:	00005735 	.word	0x00005735
    7938:	000050dd 	.word	0x000050dd
    793c:	00005025 	.word	0x00005025
    7940:	2000020c 	.word	0x2000020c
    7944:	2000400c 	.word	0x2000400c
    7948:	20003f94 	.word	0x20003f94
    794c:	00006115 	.word	0x00006115
    7950:	000062a9 	.word	0x000062a9
    7954:	000063e5 	.word	0x000063e5
    7958:	000060f9 	.word	0x000060f9
    795c:	20004010 	.word	0x20004010
    7960:	20004024 	.word	0x20004024
    7964:	20004044 	.word	0x20004044
    7968:	20004070 	.word	0x20004070
    796c:	2000405c 	.word	0x2000405c
    7970:	20003f8c 	.word	0x20003f8c
    7974:	20003f90 	.word	0x20003f90
    7978:	00005d15 	.word	0x00005d15
    797c:	00005bad 	.word	0x00005bad
    7980:	00006281 	.word	0x00006281

00007984 <vTaskStartScheduler>:
{
    7984:	b510      	push	{r4, lr}
    7986:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    7988:	4b11      	ldr	r3, [pc, #68]	; (79d0 <vTaskStartScheduler+0x4c>)
    798a:	9301      	str	r3, [sp, #4]
    798c:	2300      	movs	r3, #0
    798e:	9300      	str	r3, [sp, #0]
    7990:	2296      	movs	r2, #150	; 0x96
    7992:	4910      	ldr	r1, [pc, #64]	; (79d4 <vTaskStartScheduler+0x50>)
    7994:	4810      	ldr	r0, [pc, #64]	; (79d8 <vTaskStartScheduler+0x54>)
    7996:	4c11      	ldr	r4, [pc, #68]	; (79dc <vTaskStartScheduler+0x58>)
    7998:	47a0      	blx	r4
		if( xReturn == pdPASS )
    799a:	2801      	cmp	r0, #1
    799c:	d003      	beq.n	79a6 <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    799e:	1c43      	adds	r3, r0, #1
    79a0:	d013      	beq.n	79ca <vTaskStartScheduler+0x46>
}
    79a2:	b002      	add	sp, #8
    79a4:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    79a6:	4b0e      	ldr	r3, [pc, #56]	; (79e0 <vTaskStartScheduler+0x5c>)
    79a8:	4798      	blx	r3
	if( xReturn == pdPASS )
    79aa:	2801      	cmp	r0, #1
    79ac:	d1f7      	bne.n	799e <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
    79ae:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    79b0:	2201      	movs	r2, #1
    79b2:	4252      	negs	r2, r2
    79b4:	4b0b      	ldr	r3, [pc, #44]	; (79e4 <vTaskStartScheduler+0x60>)
    79b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    79b8:	3202      	adds	r2, #2
    79ba:	4b0b      	ldr	r3, [pc, #44]	; (79e8 <vTaskStartScheduler+0x64>)
    79bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    79be:	2200      	movs	r2, #0
    79c0:	4b0a      	ldr	r3, [pc, #40]	; (79ec <vTaskStartScheduler+0x68>)
    79c2:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    79c4:	4b0a      	ldr	r3, [pc, #40]	; (79f0 <vTaskStartScheduler+0x6c>)
    79c6:	4798      	blx	r3
    79c8:	e7eb      	b.n	79a2 <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    79ca:	b672      	cpsid	i
    79cc:	e7fe      	b.n	79cc <vTaskStartScheduler+0x48>
    79ce:	46c0      	nop			; (mov r8, r8)
    79d0:	20004038 	.word	0x20004038
    79d4:	0001a490 	.word	0x0001a490
    79d8:	000075d9 	.word	0x000075d9
    79dc:	000076e1 	.word	0x000076e1
    79e0:	000085a9 	.word	0x000085a9
    79e4:	2000403c 	.word	0x2000403c
    79e8:	20004058 	.word	0x20004058
    79ec:	20004084 	.word	0x20004084
    79f0:	00006209 	.word	0x00006209

000079f4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    79f4:	4a02      	ldr	r2, [pc, #8]	; (7a00 <vTaskSuspendAll+0xc>)
    79f6:	6813      	ldr	r3, [r2, #0]
    79f8:	3301      	adds	r3, #1
    79fa:	6013      	str	r3, [r2, #0]
}
    79fc:	4770      	bx	lr
    79fe:	46c0      	nop			; (mov r8, r8)
    7a00:	20004004 	.word	0x20004004

00007a04 <xTaskGetTickCount>:
		xTicks = xTickCount;
    7a04:	4b01      	ldr	r3, [pc, #4]	; (7a0c <xTaskGetTickCount+0x8>)
    7a06:	6818      	ldr	r0, [r3, #0]
}
    7a08:	4770      	bx	lr
    7a0a:	46c0      	nop			; (mov r8, r8)
    7a0c:	20004084 	.word	0x20004084

00007a10 <xTaskIncrementTick>:
{
    7a10:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a12:	b083      	sub	sp, #12
	traceTASK_INCREMENT_TICK( xTickCount );
    7a14:	4b4c      	ldr	r3, [pc, #304]	; (7b48 <xTaskIncrementTick+0x138>)
    7a16:	681b      	ldr	r3, [r3, #0]
    7a18:	2b01      	cmp	r3, #1
    7a1a:	d003      	beq.n	7a24 <xTaskIncrementTick+0x14>
    7a1c:	4b4b      	ldr	r3, [pc, #300]	; (7b4c <xTaskIncrementTick+0x13c>)
    7a1e:	681b      	ldr	r3, [r3, #0]
    7a20:	2b00      	cmp	r3, #0
    7a22:	d106      	bne.n	7a32 <xTaskIncrementTick+0x22>
    7a24:	4a4a      	ldr	r2, [pc, #296]	; (7b50 <xTaskIncrementTick+0x140>)
    7a26:	6813      	ldr	r3, [r2, #0]
    7a28:	3301      	adds	r3, #1
    7a2a:	6013      	str	r3, [r2, #0]
    7a2c:	2000      	movs	r0, #0
    7a2e:	4b49      	ldr	r3, [pc, #292]	; (7b54 <xTaskIncrementTick+0x144>)
    7a30:	4798      	blx	r3
    7a32:	4b45      	ldr	r3, [pc, #276]	; (7b48 <xTaskIncrementTick+0x138>)
    7a34:	681b      	ldr	r3, [r3, #0]
    7a36:	2b00      	cmp	r3, #0
    7a38:	d010      	beq.n	7a5c <xTaskIncrementTick+0x4c>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    7a3a:	4b43      	ldr	r3, [pc, #268]	; (7b48 <xTaskIncrementTick+0x138>)
    7a3c:	681b      	ldr	r3, [r3, #0]
    7a3e:	2b00      	cmp	r3, #0
    7a40:	d175      	bne.n	7b2e <xTaskIncrementTick+0x11e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    7a42:	4b45      	ldr	r3, [pc, #276]	; (7b58 <xTaskIncrementTick+0x148>)
    7a44:	681e      	ldr	r6, [r3, #0]
    7a46:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    7a48:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    7a4a:	2e00      	cmp	r6, #0
    7a4c:	d119      	bne.n	7a82 <xTaskIncrementTick+0x72>
			taskSWITCH_DELAYED_LISTS();
    7a4e:	4b43      	ldr	r3, [pc, #268]	; (7b5c <xTaskIncrementTick+0x14c>)
    7a50:	681b      	ldr	r3, [r3, #0]
    7a52:	681b      	ldr	r3, [r3, #0]
    7a54:	2b00      	cmp	r3, #0
    7a56:	d008      	beq.n	7a6a <xTaskIncrementTick+0x5a>
    7a58:	b672      	cpsid	i
    7a5a:	e7fe      	b.n	7a5a <xTaskIncrementTick+0x4a>
	traceTASK_INCREMENT_TICK( xTickCount );
    7a5c:	4b3e      	ldr	r3, [pc, #248]	; (7b58 <xTaskIncrementTick+0x148>)
    7a5e:	6819      	ldr	r1, [r3, #0]
    7a60:	3101      	adds	r1, #1
    7a62:	2003      	movs	r0, #3
    7a64:	4b3e      	ldr	r3, [pc, #248]	; (7b60 <xTaskIncrementTick+0x150>)
    7a66:	4798      	blx	r3
    7a68:	e7e7      	b.n	7a3a <xTaskIncrementTick+0x2a>
			taskSWITCH_DELAYED_LISTS();
    7a6a:	4a3c      	ldr	r2, [pc, #240]	; (7b5c <xTaskIncrementTick+0x14c>)
    7a6c:	6811      	ldr	r1, [r2, #0]
    7a6e:	4b3d      	ldr	r3, [pc, #244]	; (7b64 <xTaskIncrementTick+0x154>)
    7a70:	6818      	ldr	r0, [r3, #0]
    7a72:	6010      	str	r0, [r2, #0]
    7a74:	6019      	str	r1, [r3, #0]
    7a76:	4a3c      	ldr	r2, [pc, #240]	; (7b68 <xTaskIncrementTick+0x158>)
    7a78:	6813      	ldr	r3, [r2, #0]
    7a7a:	3301      	adds	r3, #1
    7a7c:	6013      	str	r3, [r2, #0]
    7a7e:	4b3b      	ldr	r3, [pc, #236]	; (7b6c <xTaskIncrementTick+0x15c>)
    7a80:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    7a82:	4b3b      	ldr	r3, [pc, #236]	; (7b70 <xTaskIncrementTick+0x160>)
    7a84:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    7a86:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    7a88:	429e      	cmp	r6, r3
    7a8a:	d33a      	bcc.n	7b02 <xTaskIncrementTick+0xf2>
    7a8c:	2500      	movs	r5, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    7a8e:	4f33      	ldr	r7, [pc, #204]	; (7b5c <xTaskIncrementTick+0x14c>)
    7a90:	683b      	ldr	r3, [r7, #0]
    7a92:	681b      	ldr	r3, [r3, #0]
    7a94:	2b00      	cmp	r3, #0
    7a96:	d030      	beq.n	7afa <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    7a98:	4b30      	ldr	r3, [pc, #192]	; (7b5c <xTaskIncrementTick+0x14c>)
    7a9a:	681b      	ldr	r3, [r3, #0]
    7a9c:	68db      	ldr	r3, [r3, #12]
    7a9e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    7aa0:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
    7aa2:	429e      	cmp	r6, r3
    7aa4:	d339      	bcc.n	7b1a <xTaskIncrementTick+0x10a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    7aa6:	1d23      	adds	r3, r4, #4
    7aa8:	9301      	str	r3, [sp, #4]
    7aaa:	0018      	movs	r0, r3
    7aac:	4b31      	ldr	r3, [pc, #196]	; (7b74 <xTaskIncrementTick+0x164>)
    7aae:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    7ab0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7ab2:	2b00      	cmp	r3, #0
    7ab4:	d003      	beq.n	7abe <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    7ab6:	0020      	movs	r0, r4
    7ab8:	3018      	adds	r0, #24
    7aba:	4b2e      	ldr	r3, [pc, #184]	; (7b74 <xTaskIncrementTick+0x164>)
    7abc:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    7abe:	0020      	movs	r0, r4
    7ac0:	4b2d      	ldr	r3, [pc, #180]	; (7b78 <xTaskIncrementTick+0x168>)
    7ac2:	4798      	blx	r3
    7ac4:	4b2d      	ldr	r3, [pc, #180]	; (7b7c <xTaskIncrementTick+0x16c>)
    7ac6:	881b      	ldrh	r3, [r3, #0]
    7ac8:	4203      	tst	r3, r0
    7aca:	d129      	bne.n	7b20 <xTaskIncrementTick+0x110>
    7acc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7ace:	4a2c      	ldr	r2, [pc, #176]	; (7b80 <xTaskIncrementTick+0x170>)
    7ad0:	6812      	ldr	r2, [r2, #0]
    7ad2:	4293      	cmp	r3, r2
    7ad4:	d901      	bls.n	7ada <xTaskIncrementTick+0xca>
    7ad6:	4a2a      	ldr	r2, [pc, #168]	; (7b80 <xTaskIncrementTick+0x170>)
    7ad8:	6013      	str	r3, [r2, #0]
    7ada:	0098      	lsls	r0, r3, #2
    7adc:	18c0      	adds	r0, r0, r3
    7ade:	0080      	lsls	r0, r0, #2
    7ae0:	4b28      	ldr	r3, [pc, #160]	; (7b84 <xTaskIncrementTick+0x174>)
    7ae2:	1818      	adds	r0, r3, r0
    7ae4:	9901      	ldr	r1, [sp, #4]
    7ae6:	4b28      	ldr	r3, [pc, #160]	; (7b88 <xTaskIncrementTick+0x178>)
    7ae8:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    7aea:	4b28      	ldr	r3, [pc, #160]	; (7b8c <xTaskIncrementTick+0x17c>)
    7aec:	681b      	ldr	r3, [r3, #0]
    7aee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7af2:	429a      	cmp	r2, r3
    7af4:	d3cc      	bcc.n	7a90 <xTaskIncrementTick+0x80>
							xSwitchRequired = pdTRUE;
    7af6:	2501      	movs	r5, #1
    7af8:	e7ca      	b.n	7a90 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7afa:	2201      	movs	r2, #1
    7afc:	4252      	negs	r2, r2
    7afe:	4b1c      	ldr	r3, [pc, #112]	; (7b70 <xTaskIncrementTick+0x160>)
    7b00:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    7b02:	4b22      	ldr	r3, [pc, #136]	; (7b8c <xTaskIncrementTick+0x17c>)
    7b04:	681b      	ldr	r3, [r3, #0]
    7b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7b08:	0093      	lsls	r3, r2, #2
    7b0a:	189b      	adds	r3, r3, r2
    7b0c:	009b      	lsls	r3, r3, #2
    7b0e:	4a1d      	ldr	r2, [pc, #116]	; (7b84 <xTaskIncrementTick+0x174>)
    7b10:	589b      	ldr	r3, [r3, r2]
    7b12:	2b01      	cmp	r3, #1
    7b14:	d910      	bls.n	7b38 <xTaskIncrementTick+0x128>
				xSwitchRequired = pdTRUE;
    7b16:	2501      	movs	r5, #1
    7b18:	e00e      	b.n	7b38 <xTaskIncrementTick+0x128>
						xNextTaskUnblockTime = xItemValue;
    7b1a:	4a15      	ldr	r2, [pc, #84]	; (7b70 <xTaskIncrementTick+0x160>)
    7b1c:	6013      	str	r3, [r2, #0]
						break;
    7b1e:	e7f0      	b.n	7b02 <xTaskIncrementTick+0xf2>
					prvAddTaskToReadyList( pxTCB );
    7b20:	0020      	movs	r0, r4
    7b22:	4b1b      	ldr	r3, [pc, #108]	; (7b90 <xTaskIncrementTick+0x180>)
    7b24:	4798      	blx	r3
    7b26:	b2c0      	uxtb	r0, r0
    7b28:	4b1a      	ldr	r3, [pc, #104]	; (7b94 <xTaskIncrementTick+0x184>)
    7b2a:	4798      	blx	r3
    7b2c:	e7ce      	b.n	7acc <xTaskIncrementTick+0xbc>
		++uxPendedTicks;
    7b2e:	4a07      	ldr	r2, [pc, #28]	; (7b4c <xTaskIncrementTick+0x13c>)
    7b30:	6813      	ldr	r3, [r2, #0]
    7b32:	3301      	adds	r3, #1
    7b34:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
    7b36:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
    7b38:	4b17      	ldr	r3, [pc, #92]	; (7b98 <xTaskIncrementTick+0x188>)
    7b3a:	681b      	ldr	r3, [r3, #0]
    7b3c:	2b00      	cmp	r3, #0
    7b3e:	d000      	beq.n	7b42 <xTaskIncrementTick+0x132>
			xSwitchRequired = pdTRUE;
    7b40:	2501      	movs	r5, #1
}
    7b42:	0028      	movs	r0, r5
    7b44:	b003      	add	sp, #12
    7b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b48:	20004004 	.word	0x20004004
    7b4c:	20004000 	.word	0x20004000
    7b50:	20000cb0 	.word	0x20000cb0
    7b54:	000059e5 	.word	0x000059e5
    7b58:	20004084 	.word	0x20004084
    7b5c:	20003f8c 	.word	0x20003f8c
    7b60:	00005eb1 	.word	0x00005eb1
    7b64:	20003f90 	.word	0x20003f90
    7b68:	20004040 	.word	0x20004040
    7b6c:	000075ad 	.word	0x000075ad
    7b70:	2000403c 	.word	0x2000403c
    7b74:	0000615b 	.word	0x0000615b
    7b78:	00005025 	.word	0x00005025
    7b7c:	2000020c 	.word	0x2000020c
    7b80:	2000400c 	.word	0x2000400c
    7b84:	20003f94 	.word	0x20003f94
    7b88:	00006115 	.word	0x00006115
    7b8c:	20003f88 	.word	0x20003f88
    7b90:	00005015 	.word	0x00005015
    7b94:	00005bad 	.word	0x00005bad
    7b98:	20004088 	.word	0x20004088

00007b9c <xTaskResumeAll>:
{
    7b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    7b9e:	4b37      	ldr	r3, [pc, #220]	; (7c7c <xTaskResumeAll+0xe0>)
    7ba0:	681b      	ldr	r3, [r3, #0]
    7ba2:	2b00      	cmp	r3, #0
    7ba4:	d101      	bne.n	7baa <xTaskResumeAll+0xe>
    7ba6:	b672      	cpsid	i
    7ba8:	e7fe      	b.n	7ba8 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    7baa:	4b35      	ldr	r3, [pc, #212]	; (7c80 <xTaskResumeAll+0xe4>)
    7bac:	4798      	blx	r3
		--uxSchedulerSuspended;
    7bae:	4b33      	ldr	r3, [pc, #204]	; (7c7c <xTaskResumeAll+0xe0>)
    7bb0:	681a      	ldr	r2, [r3, #0]
    7bb2:	3a01      	subs	r2, #1
    7bb4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    7bb6:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    7bb8:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    7bba:	2b00      	cmp	r3, #0
    7bbc:	d103      	bne.n	7bc6 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    7bbe:	4b31      	ldr	r3, [pc, #196]	; (7c84 <xTaskResumeAll+0xe8>)
    7bc0:	681b      	ldr	r3, [r3, #0]
    7bc2:	2b00      	cmp	r3, #0
    7bc4:	d136      	bne.n	7c34 <xTaskResumeAll+0x98>
	taskEXIT_CRITICAL();
    7bc6:	4b30      	ldr	r3, [pc, #192]	; (7c88 <xTaskResumeAll+0xec>)
    7bc8:	4798      	blx	r3
}
    7bca:	0020      	movs	r0, r4
    7bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
    7bce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7bd0:	4a2e      	ldr	r2, [pc, #184]	; (7c8c <xTaskResumeAll+0xf0>)
    7bd2:	6812      	ldr	r2, [r2, #0]
    7bd4:	4293      	cmp	r3, r2
    7bd6:	d901      	bls.n	7bdc <xTaskResumeAll+0x40>
    7bd8:	4a2c      	ldr	r2, [pc, #176]	; (7c8c <xTaskResumeAll+0xf0>)
    7bda:	6013      	str	r3, [r2, #0]
    7bdc:	0098      	lsls	r0, r3, #2
    7bde:	18c0      	adds	r0, r0, r3
    7be0:	0080      	lsls	r0, r0, #2
    7be2:	4b2b      	ldr	r3, [pc, #172]	; (7c90 <xTaskResumeAll+0xf4>)
    7be4:	1818      	adds	r0, r3, r0
    7be6:	0031      	movs	r1, r6
    7be8:	4b2a      	ldr	r3, [pc, #168]	; (7c94 <xTaskResumeAll+0xf8>)
    7bea:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    7bec:	4b2a      	ldr	r3, [pc, #168]	; (7c98 <xTaskResumeAll+0xfc>)
    7bee:	681b      	ldr	r3, [r3, #0]
    7bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7bf2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7bf4:	429a      	cmp	r2, r3
    7bf6:	d302      	bcc.n	7bfe <xTaskResumeAll+0x62>
						xYieldPending = pdTRUE;
    7bf8:	2201      	movs	r2, #1
    7bfa:	4b28      	ldr	r3, [pc, #160]	; (7c9c <xTaskResumeAll+0x100>)
    7bfc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    7bfe:	682b      	ldr	r3, [r5, #0]
    7c00:	2b00      	cmp	r3, #0
    7c02:	d01a      	beq.n	7c3a <xTaskResumeAll+0x9e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    7c04:	68fb      	ldr	r3, [r7, #12]
    7c06:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    7c08:	0020      	movs	r0, r4
    7c0a:	3018      	adds	r0, #24
    7c0c:	4b24      	ldr	r3, [pc, #144]	; (7ca0 <xTaskResumeAll+0x104>)
    7c0e:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    7c10:	1d26      	adds	r6, r4, #4
    7c12:	0030      	movs	r0, r6
    7c14:	4b22      	ldr	r3, [pc, #136]	; (7ca0 <xTaskResumeAll+0x104>)
    7c16:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    7c18:	0020      	movs	r0, r4
    7c1a:	4b22      	ldr	r3, [pc, #136]	; (7ca4 <xTaskResumeAll+0x108>)
    7c1c:	4798      	blx	r3
    7c1e:	4b22      	ldr	r3, [pc, #136]	; (7ca8 <xTaskResumeAll+0x10c>)
    7c20:	881b      	ldrh	r3, [r3, #0]
    7c22:	4203      	tst	r3, r0
    7c24:	d0d3      	beq.n	7bce <xTaskResumeAll+0x32>
    7c26:	0020      	movs	r0, r4
    7c28:	4b20      	ldr	r3, [pc, #128]	; (7cac <xTaskResumeAll+0x110>)
    7c2a:	4798      	blx	r3
    7c2c:	b2c0      	uxtb	r0, r0
    7c2e:	4b20      	ldr	r3, [pc, #128]	; (7cb0 <xTaskResumeAll+0x114>)
    7c30:	4798      	blx	r3
    7c32:	e7cc      	b.n	7bce <xTaskResumeAll+0x32>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    7c34:	4d1f      	ldr	r5, [pc, #124]	; (7cb4 <xTaskResumeAll+0x118>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    7c36:	002f      	movs	r7, r5
    7c38:	e7e1      	b.n	7bfe <xTaskResumeAll+0x62>
				if( pxTCB != NULL )
    7c3a:	2c00      	cmp	r4, #0
    7c3c:	d001      	beq.n	7c42 <xTaskResumeAll+0xa6>
					prvResetNextTaskUnblockTime();
    7c3e:	4b1e      	ldr	r3, [pc, #120]	; (7cb8 <xTaskResumeAll+0x11c>)
    7c40:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    7c42:	4b1e      	ldr	r3, [pc, #120]	; (7cbc <xTaskResumeAll+0x120>)
    7c44:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    7c46:	2c00      	cmp	r4, #0
    7c48:	d00e      	beq.n	7c68 <xTaskResumeAll+0xcc>
							if( xTaskIncrementTick() != pdFALSE )
    7c4a:	4f1d      	ldr	r7, [pc, #116]	; (7cc0 <xTaskResumeAll+0x124>)
								xYieldPending = pdTRUE;
    7c4c:	4e13      	ldr	r6, [pc, #76]	; (7c9c <xTaskResumeAll+0x100>)
    7c4e:	2501      	movs	r5, #1
    7c50:	e002      	b.n	7c58 <xTaskResumeAll+0xbc>
							--uxPendedCounts;
    7c52:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    7c54:	2c00      	cmp	r4, #0
    7c56:	d004      	beq.n	7c62 <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
    7c58:	47b8      	blx	r7
    7c5a:	2800      	cmp	r0, #0
    7c5c:	d0f9      	beq.n	7c52 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
    7c5e:	6035      	str	r5, [r6, #0]
    7c60:	e7f7      	b.n	7c52 <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
    7c62:	2200      	movs	r2, #0
    7c64:	4b15      	ldr	r3, [pc, #84]	; (7cbc <xTaskResumeAll+0x120>)
    7c66:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    7c68:	4b0c      	ldr	r3, [pc, #48]	; (7c9c <xTaskResumeAll+0x100>)
    7c6a:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    7c6c:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    7c6e:	2b00      	cmp	r3, #0
    7c70:	d0a9      	beq.n	7bc6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    7c72:	4b14      	ldr	r3, [pc, #80]	; (7cc4 <xTaskResumeAll+0x128>)
    7c74:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    7c76:	3401      	adds	r4, #1
    7c78:	e7a5      	b.n	7bc6 <xTaskResumeAll+0x2a>
    7c7a:	46c0      	nop			; (mov r8, r8)
    7c7c:	20004004 	.word	0x20004004
    7c80:	00006291 	.word	0x00006291
    7c84:	20003ff8 	.word	0x20003ff8
    7c88:	000062a9 	.word	0x000062a9
    7c8c:	2000400c 	.word	0x2000400c
    7c90:	20003f94 	.word	0x20003f94
    7c94:	00006115 	.word	0x00006115
    7c98:	20003f88 	.word	0x20003f88
    7c9c:	20004088 	.word	0x20004088
    7ca0:	0000615b 	.word	0x0000615b
    7ca4:	00005025 	.word	0x00005025
    7ca8:	2000020c 	.word	0x2000020c
    7cac:	00005015 	.word	0x00005015
    7cb0:	00005bad 	.word	0x00005bad
    7cb4:	20004044 	.word	0x20004044
    7cb8:	000075ad 	.word	0x000075ad
    7cbc:	20004000 	.word	0x20004000
    7cc0:	00007a11 	.word	0x00007a11
    7cc4:	00006281 	.word	0x00006281

00007cc8 <vTaskDelay>:
	{
    7cc8:	b510      	push	{r4, lr}
    7cca:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    7ccc:	d031      	beq.n	7d32 <vTaskDelay+0x6a>
			configASSERT( uxSchedulerSuspended == 0 );
    7cce:	4b1a      	ldr	r3, [pc, #104]	; (7d38 <vTaskDelay+0x70>)
    7cd0:	681b      	ldr	r3, [r3, #0]
    7cd2:	2b00      	cmp	r3, #0
    7cd4:	d001      	beq.n	7cda <vTaskDelay+0x12>
    7cd6:	b672      	cpsid	i
    7cd8:	e7fe      	b.n	7cd8 <vTaskDelay+0x10>
			vTaskSuspendAll();
    7cda:	4b18      	ldr	r3, [pc, #96]	; (7d3c <vTaskDelay+0x74>)
    7cdc:	4798      	blx	r3
				traceTASK_DELAY();
    7cde:	4b18      	ldr	r3, [pc, #96]	; (7d40 <vTaskDelay+0x78>)
    7ce0:	6818      	ldr	r0, [r3, #0]
    7ce2:	4b18      	ldr	r3, [pc, #96]	; (7d44 <vTaskDelay+0x7c>)
    7ce4:	4798      	blx	r3
    7ce6:	4b18      	ldr	r3, [pc, #96]	; (7d48 <vTaskDelay+0x80>)
    7ce8:	881b      	ldrh	r3, [r3, #0]
    7cea:	4203      	tst	r3, r0
    7cec:	d00a      	beq.n	7d04 <vTaskDelay+0x3c>
    7cee:	0021      	movs	r1, r4
    7cf0:	2089      	movs	r0, #137	; 0x89
    7cf2:	4b16      	ldr	r3, [pc, #88]	; (7d4c <vTaskDelay+0x84>)
    7cf4:	4798      	blx	r3
    7cf6:	4b12      	ldr	r3, [pc, #72]	; (7d40 <vTaskDelay+0x78>)
    7cf8:	6818      	ldr	r0, [r3, #0]
    7cfa:	4b15      	ldr	r3, [pc, #84]	; (7d50 <vTaskDelay+0x88>)
    7cfc:	4798      	blx	r3
    7cfe:	b2c0      	uxtb	r0, r0
    7d00:	4b14      	ldr	r3, [pc, #80]	; (7d54 <vTaskDelay+0x8c>)
    7d02:	4798      	blx	r3
    7d04:	4b14      	ldr	r3, [pc, #80]	; (7d58 <vTaskDelay+0x90>)
    7d06:	4798      	blx	r3
    7d08:	4b0e      	ldr	r3, [pc, #56]	; (7d44 <vTaskDelay+0x7c>)
    7d0a:	4798      	blx	r3
    7d0c:	4b0e      	ldr	r3, [pc, #56]	; (7d48 <vTaskDelay+0x80>)
    7d0e:	881b      	ldrh	r3, [r3, #0]
    7d10:	4203      	tst	r3, r0
    7d12:	d006      	beq.n	7d22 <vTaskDelay+0x5a>
    7d14:	4b10      	ldr	r3, [pc, #64]	; (7d58 <vTaskDelay+0x90>)
    7d16:	4798      	blx	r3
    7d18:	4b0d      	ldr	r3, [pc, #52]	; (7d50 <vTaskDelay+0x88>)
    7d1a:	4798      	blx	r3
    7d1c:	b2c0      	uxtb	r0, r0
    7d1e:	4b0d      	ldr	r3, [pc, #52]	; (7d54 <vTaskDelay+0x8c>)
    7d20:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    7d22:	2100      	movs	r1, #0
    7d24:	0020      	movs	r0, r4
    7d26:	4b0d      	ldr	r3, [pc, #52]	; (7d5c <vTaskDelay+0x94>)
    7d28:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    7d2a:	4b0d      	ldr	r3, [pc, #52]	; (7d60 <vTaskDelay+0x98>)
    7d2c:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    7d2e:	2800      	cmp	r0, #0
    7d30:	d101      	bne.n	7d36 <vTaskDelay+0x6e>
			portYIELD_WITHIN_API();
    7d32:	4b0c      	ldr	r3, [pc, #48]	; (7d64 <vTaskDelay+0x9c>)
    7d34:	4798      	blx	r3
	}
    7d36:	bd10      	pop	{r4, pc}
    7d38:	20004004 	.word	0x20004004
    7d3c:	000079f5 	.word	0x000079f5
    7d40:	20003f88 	.word	0x20003f88
    7d44:	00005025 	.word	0x00005025
    7d48:	2000020c 	.word	0x2000020c
    7d4c:	00005eb1 	.word	0x00005eb1
    7d50:	00005015 	.word	0x00005015
    7d54:	00005841 	.word	0x00005841
    7d58:	000050dd 	.word	0x000050dd
    7d5c:	00007659 	.word	0x00007659
    7d60:	00007b9d 	.word	0x00007b9d
    7d64:	00006281 	.word	0x00006281

00007d68 <vTaskSwitchContext>:
{
    7d68:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    7d6a:	4b33      	ldr	r3, [pc, #204]	; (7e38 <vTaskSwitchContext+0xd0>)
    7d6c:	681b      	ldr	r3, [r3, #0]
    7d6e:	2b00      	cmp	r3, #0
    7d70:	d125      	bne.n	7dbe <vTaskSwitchContext+0x56>
		xYieldPending = pdFALSE;
    7d72:	2200      	movs	r2, #0
    7d74:	4b31      	ldr	r3, [pc, #196]	; (7e3c <vTaskSwitchContext+0xd4>)
    7d76:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    7d78:	4b31      	ldr	r3, [pc, #196]	; (7e40 <vTaskSwitchContext+0xd8>)
    7d7a:	681a      	ldr	r2, [r3, #0]
    7d7c:	681b      	ldr	r3, [r3, #0]
    7d7e:	6812      	ldr	r2, [r2, #0]
    7d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7d82:	429a      	cmp	r2, r3
    7d84:	d805      	bhi.n	7d92 <vTaskSwitchContext+0x2a>
    7d86:	4b2e      	ldr	r3, [pc, #184]	; (7e40 <vTaskSwitchContext+0xd8>)
    7d88:	6818      	ldr	r0, [r3, #0]
    7d8a:	6819      	ldr	r1, [r3, #0]
    7d8c:	3134      	adds	r1, #52	; 0x34
    7d8e:	4b2d      	ldr	r3, [pc, #180]	; (7e44 <vTaskSwitchContext+0xdc>)
    7d90:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    7d92:	4b2d      	ldr	r3, [pc, #180]	; (7e48 <vTaskSwitchContext+0xe0>)
    7d94:	681b      	ldr	r3, [r3, #0]
    7d96:	009a      	lsls	r2, r3, #2
    7d98:	18d2      	adds	r2, r2, r3
    7d9a:	0092      	lsls	r2, r2, #2
    7d9c:	492b      	ldr	r1, [pc, #172]	; (7e4c <vTaskSwitchContext+0xe4>)
    7d9e:	5852      	ldr	r2, [r2, r1]
    7da0:	2a00      	cmp	r2, #0
    7da2:	d110      	bne.n	7dc6 <vTaskSwitchContext+0x5e>
    7da4:	2b00      	cmp	r3, #0
    7da6:	d008      	beq.n	7dba <vTaskSwitchContext+0x52>
    7da8:	3b01      	subs	r3, #1
    7daa:	009a      	lsls	r2, r3, #2
    7dac:	18d2      	adds	r2, r2, r3
    7dae:	0092      	lsls	r2, r2, #2
    7db0:	5852      	ldr	r2, [r2, r1]
    7db2:	2a00      	cmp	r2, #0
    7db4:	d107      	bne.n	7dc6 <vTaskSwitchContext+0x5e>
    7db6:	2b00      	cmp	r3, #0
    7db8:	d1f6      	bne.n	7da8 <vTaskSwitchContext+0x40>
    7dba:	b672      	cpsid	i
    7dbc:	e7fe      	b.n	7dbc <vTaskSwitchContext+0x54>
		xYieldPending = pdTRUE;
    7dbe:	2201      	movs	r2, #1
    7dc0:	4b1e      	ldr	r3, [pc, #120]	; (7e3c <vTaskSwitchContext+0xd4>)
    7dc2:	601a      	str	r2, [r3, #0]
}
    7dc4:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    7dc6:	4821      	ldr	r0, [pc, #132]	; (7e4c <vTaskSwitchContext+0xe4>)
    7dc8:	009a      	lsls	r2, r3, #2
    7dca:	18d1      	adds	r1, r2, r3
    7dcc:	0089      	lsls	r1, r1, #2
    7dce:	1841      	adds	r1, r0, r1
    7dd0:	684c      	ldr	r4, [r1, #4]
    7dd2:	6864      	ldr	r4, [r4, #4]
    7dd4:	604c      	str	r4, [r1, #4]
    7dd6:	18d2      	adds	r2, r2, r3
    7dd8:	0092      	lsls	r2, r2, #2
    7dda:	3208      	adds	r2, #8
    7ddc:	1882      	adds	r2, r0, r2
    7dde:	4294      	cmp	r4, r2
    7de0:	d019      	beq.n	7e16 <vTaskSwitchContext+0xae>
    7de2:	009a      	lsls	r2, r3, #2
    7de4:	18d2      	adds	r2, r2, r3
    7de6:	0092      	lsls	r2, r2, #2
    7de8:	4918      	ldr	r1, [pc, #96]	; (7e4c <vTaskSwitchContext+0xe4>)
    7dea:	188a      	adds	r2, r1, r2
    7dec:	6852      	ldr	r2, [r2, #4]
    7dee:	68d1      	ldr	r1, [r2, #12]
    7df0:	4a13      	ldr	r2, [pc, #76]	; (7e40 <vTaskSwitchContext+0xd8>)
    7df2:	6011      	str	r1, [r2, #0]
    7df4:	4a14      	ldr	r2, [pc, #80]	; (7e48 <vTaskSwitchContext+0xe0>)
    7df6:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
    7df8:	2201      	movs	r2, #1
    7dfa:	4b15      	ldr	r3, [pc, #84]	; (7e50 <vTaskSwitchContext+0xe8>)
    7dfc:	601a      	str	r2, [r3, #0]
    7dfe:	4b15      	ldr	r3, [pc, #84]	; (7e54 <vTaskSwitchContext+0xec>)
    7e00:	4798      	blx	r3
    7e02:	4b15      	ldr	r3, [pc, #84]	; (7e58 <vTaskSwitchContext+0xf0>)
    7e04:	4798      	blx	r3
    7e06:	4b15      	ldr	r3, [pc, #84]	; (7e5c <vTaskSwitchContext+0xf4>)
    7e08:	881b      	ldrh	r3, [r3, #0]
    7e0a:	4203      	tst	r3, r0
    7e0c:	d10b      	bne.n	7e26 <vTaskSwitchContext+0xbe>
    7e0e:	2202      	movs	r2, #2
    7e10:	4b0f      	ldr	r3, [pc, #60]	; (7e50 <vTaskSwitchContext+0xe8>)
    7e12:	601a      	str	r2, [r3, #0]
}
    7e14:	e7d6      	b.n	7dc4 <vTaskSwitchContext+0x5c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    7e16:	6860      	ldr	r0, [r4, #4]
    7e18:	009a      	lsls	r2, r3, #2
    7e1a:	18d2      	adds	r2, r2, r3
    7e1c:	0092      	lsls	r2, r2, #2
    7e1e:	490b      	ldr	r1, [pc, #44]	; (7e4c <vTaskSwitchContext+0xe4>)
    7e20:	188a      	adds	r2, r1, r2
    7e22:	6050      	str	r0, [r2, #4]
    7e24:	e7dd      	b.n	7de2 <vTaskSwitchContext+0x7a>
		traceTASK_SWITCHED_IN();
    7e26:	4b0b      	ldr	r3, [pc, #44]	; (7e54 <vTaskSwitchContext+0xec>)
    7e28:	4798      	blx	r3
    7e2a:	4b0d      	ldr	r3, [pc, #52]	; (7e60 <vTaskSwitchContext+0xf8>)
    7e2c:	4798      	blx	r3
    7e2e:	b2c0      	uxtb	r0, r0
    7e30:	4b0c      	ldr	r3, [pc, #48]	; (7e64 <vTaskSwitchContext+0xfc>)
    7e32:	4798      	blx	r3
    7e34:	e7eb      	b.n	7e0e <vTaskSwitchContext+0xa6>
    7e36:	46c0      	nop			; (mov r8, r8)
    7e38:	20004004 	.word	0x20004004
    7e3c:	20004088 	.word	0x20004088
    7e40:	20003f88 	.word	0x20003f88
    7e44:	00012abd 	.word	0x00012abd
    7e48:	2000400c 	.word	0x2000400c
    7e4c:	20003f94 	.word	0x20003f94
    7e50:	20000cac 	.word	0x20000cac
    7e54:	000050dd 	.word	0x000050dd
    7e58:	00005025 	.word	0x00005025
    7e5c:	2000020c 	.word	0x2000020c
    7e60:	00005015 	.word	0x00005015
    7e64:	00005f59 	.word	0x00005f59

00007e68 <vTaskSuspend>:
	{
    7e68:	b570      	push	{r4, r5, r6, lr}
    7e6a:	0005      	movs	r5, r0
		taskENTER_CRITICAL();
    7e6c:	4b33      	ldr	r3, [pc, #204]	; (7f3c <vTaskSuspend+0xd4>)
    7e6e:	4798      	blx	r3
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    7e70:	1e2c      	subs	r4, r5, #0
    7e72:	d02b      	beq.n	7ecc <vTaskSuspend+0x64>
			traceTASK_SUSPEND( pxTCB );
    7e74:	4b32      	ldr	r3, [pc, #200]	; (7f40 <vTaskSuspend+0xd8>)
    7e76:	4798      	blx	r3
    7e78:	4b32      	ldr	r3, [pc, #200]	; (7f44 <vTaskSuspend+0xdc>)
    7e7a:	4798      	blx	r3
    7e7c:	4b32      	ldr	r3, [pc, #200]	; (7f48 <vTaskSuspend+0xe0>)
    7e7e:	881b      	ldrh	r3, [r3, #0]
    7e80:	4203      	tst	r3, r0
    7e82:	d126      	bne.n	7ed2 <vTaskSuspend+0x6a>
    7e84:	0020      	movs	r0, r4
    7e86:	4b31      	ldr	r3, [pc, #196]	; (7f4c <vTaskSuspend+0xe4>)
    7e88:	4798      	blx	r3
    7e8a:	b2c0      	uxtb	r0, r0
    7e8c:	4b30      	ldr	r3, [pc, #192]	; (7f50 <vTaskSuspend+0xe8>)
    7e8e:	4798      	blx	r3
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    7e90:	1d25      	adds	r5, r4, #4
    7e92:	0028      	movs	r0, r5
    7e94:	4b2f      	ldr	r3, [pc, #188]	; (7f54 <vTaskSuspend+0xec>)
    7e96:	4798      	blx	r3
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    7e98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7e9a:	2b00      	cmp	r3, #0
    7e9c:	d003      	beq.n	7ea6 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    7e9e:	0020      	movs	r0, r4
    7ea0:	3018      	adds	r0, #24
    7ea2:	4b2c      	ldr	r3, [pc, #176]	; (7f54 <vTaskSuspend+0xec>)
    7ea4:	4798      	blx	r3
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    7ea6:	0029      	movs	r1, r5
    7ea8:	482b      	ldr	r0, [pc, #172]	; (7f58 <vTaskSuspend+0xf0>)
    7eaa:	4b2c      	ldr	r3, [pc, #176]	; (7f5c <vTaskSuspend+0xf4>)
    7eac:	4798      	blx	r3
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    7eae:	2350      	movs	r3, #80	; 0x50
    7eb0:	5ce3      	ldrb	r3, [r4, r3]
    7eb2:	2b01      	cmp	r3, #1
    7eb4:	d01d      	beq.n	7ef2 <vTaskSuspend+0x8a>
		taskEXIT_CRITICAL();
    7eb6:	4b2a      	ldr	r3, [pc, #168]	; (7f60 <vTaskSuspend+0xf8>)
    7eb8:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
    7eba:	4b2a      	ldr	r3, [pc, #168]	; (7f64 <vTaskSuspend+0xfc>)
    7ebc:	681b      	ldr	r3, [r3, #0]
    7ebe:	2b00      	cmp	r3, #0
    7ec0:	d11b      	bne.n	7efa <vTaskSuspend+0x92>
		if( pxTCB == pxCurrentTCB )
    7ec2:	4b29      	ldr	r3, [pc, #164]	; (7f68 <vTaskSuspend+0x100>)
    7ec4:	681b      	ldr	r3, [r3, #0]
    7ec6:	429c      	cmp	r4, r3
    7ec8:	d01e      	beq.n	7f08 <vTaskSuspend+0xa0>
	}
    7eca:	bd70      	pop	{r4, r5, r6, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    7ecc:	4b26      	ldr	r3, [pc, #152]	; (7f68 <vTaskSuspend+0x100>)
    7ece:	681c      	ldr	r4, [r3, #0]
    7ed0:	e7d0      	b.n	7e74 <vTaskSuspend+0xc>
			traceTASK_SUSPEND( pxTCB );
    7ed2:	0020      	movs	r0, r4
    7ed4:	4b1b      	ldr	r3, [pc, #108]	; (7f44 <vTaskSuspend+0xdc>)
    7ed6:	4798      	blx	r3
    7ed8:	4b1b      	ldr	r3, [pc, #108]	; (7f48 <vTaskSuspend+0xe0>)
    7eda:	881b      	ldrh	r3, [r3, #0]
    7edc:	4203      	tst	r3, r0
    7ede:	d0d1      	beq.n	7e84 <vTaskSuspend+0x1c>
    7ee0:	0020      	movs	r0, r4
    7ee2:	4b1a      	ldr	r3, [pc, #104]	; (7f4c <vTaskSuspend+0xe4>)
    7ee4:	4798      	blx	r3
    7ee6:	b2c2      	uxtb	r2, r0
    7ee8:	2103      	movs	r1, #3
    7eea:	208a      	movs	r0, #138	; 0x8a
    7eec:	4b1f      	ldr	r3, [pc, #124]	; (7f6c <vTaskSuspend+0x104>)
    7eee:	4798      	blx	r3
    7ef0:	e7c8      	b.n	7e84 <vTaskSuspend+0x1c>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    7ef2:	2200      	movs	r2, #0
    7ef4:	334f      	adds	r3, #79	; 0x4f
    7ef6:	54e2      	strb	r2, [r4, r3]
    7ef8:	e7dd      	b.n	7eb6 <vTaskSuspend+0x4e>
			taskENTER_CRITICAL();
    7efa:	4b10      	ldr	r3, [pc, #64]	; (7f3c <vTaskSuspend+0xd4>)
    7efc:	4798      	blx	r3
				prvResetNextTaskUnblockTime();
    7efe:	4b1c      	ldr	r3, [pc, #112]	; (7f70 <vTaskSuspend+0x108>)
    7f00:	4798      	blx	r3
			taskEXIT_CRITICAL();
    7f02:	4b17      	ldr	r3, [pc, #92]	; (7f60 <vTaskSuspend+0xf8>)
    7f04:	4798      	blx	r3
    7f06:	e7dc      	b.n	7ec2 <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
    7f08:	4b16      	ldr	r3, [pc, #88]	; (7f64 <vTaskSuspend+0xfc>)
    7f0a:	681b      	ldr	r3, [r3, #0]
    7f0c:	2b00      	cmp	r3, #0
    7f0e:	d008      	beq.n	7f22 <vTaskSuspend+0xba>
				configASSERT( uxSchedulerSuspended == 0 );
    7f10:	4b18      	ldr	r3, [pc, #96]	; (7f74 <vTaskSuspend+0x10c>)
    7f12:	681b      	ldr	r3, [r3, #0]
    7f14:	2b00      	cmp	r3, #0
    7f16:	d001      	beq.n	7f1c <vTaskSuspend+0xb4>
    7f18:	b672      	cpsid	i
    7f1a:	e7fe      	b.n	7f1a <vTaskSuspend+0xb2>
				portYIELD_WITHIN_API();
    7f1c:	4b16      	ldr	r3, [pc, #88]	; (7f78 <vTaskSuspend+0x110>)
    7f1e:	4798      	blx	r3
    7f20:	e7d3      	b.n	7eca <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    7f22:	4b0d      	ldr	r3, [pc, #52]	; (7f58 <vTaskSuspend+0xf0>)
    7f24:	681a      	ldr	r2, [r3, #0]
    7f26:	4b15      	ldr	r3, [pc, #84]	; (7f7c <vTaskSuspend+0x114>)
    7f28:	681b      	ldr	r3, [r3, #0]
    7f2a:	429a      	cmp	r2, r3
    7f2c:	d002      	beq.n	7f34 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
    7f2e:	4b14      	ldr	r3, [pc, #80]	; (7f80 <vTaskSuspend+0x118>)
    7f30:	4798      	blx	r3
	}
    7f32:	e7ca      	b.n	7eca <vTaskSuspend+0x62>
					pxCurrentTCB = NULL;
    7f34:	2200      	movs	r2, #0
    7f36:	4b0c      	ldr	r3, [pc, #48]	; (7f68 <vTaskSuspend+0x100>)
    7f38:	601a      	str	r2, [r3, #0]
    7f3a:	e7c6      	b.n	7eca <vTaskSuspend+0x62>
    7f3c:	00006291 	.word	0x00006291
    7f40:	000050dd 	.word	0x000050dd
    7f44:	00005025 	.word	0x00005025
    7f48:	2000020c 	.word	0x2000020c
    7f4c:	00005015 	.word	0x00005015
    7f50:	00005841 	.word	0x00005841
    7f54:	0000615b 	.word	0x0000615b
    7f58:	2000405c 	.word	0x2000405c
    7f5c:	00006115 	.word	0x00006115
    7f60:	000062a9 	.word	0x000062a9
    7f64:	20004058 	.word	0x20004058
    7f68:	20003f88 	.word	0x20003f88
    7f6c:	00005d15 	.word	0x00005d15
    7f70:	000075ad 	.word	0x000075ad
    7f74:	20004004 	.word	0x20004004
    7f78:	00006281 	.word	0x00006281
    7f7c:	20003ff8 	.word	0x20003ff8
    7f80:	00007d69 	.word	0x00007d69

00007f84 <vTaskPlaceOnEventList>:
{
    7f84:	b510      	push	{r4, lr}
    7f86:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    7f88:	2800      	cmp	r0, #0
    7f8a:	d101      	bne.n	7f90 <vTaskPlaceOnEventList+0xc>
    7f8c:	b672      	cpsid	i
    7f8e:	e7fe      	b.n	7f8e <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    7f90:	4b04      	ldr	r3, [pc, #16]	; (7fa4 <vTaskPlaceOnEventList+0x20>)
    7f92:	6819      	ldr	r1, [r3, #0]
    7f94:	3118      	adds	r1, #24
    7f96:	4b04      	ldr	r3, [pc, #16]	; (7fa8 <vTaskPlaceOnEventList+0x24>)
    7f98:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    7f9a:	2101      	movs	r1, #1
    7f9c:	0020      	movs	r0, r4
    7f9e:	4b03      	ldr	r3, [pc, #12]	; (7fac <vTaskPlaceOnEventList+0x28>)
    7fa0:	4798      	blx	r3
}
    7fa2:	bd10      	pop	{r4, pc}
    7fa4:	20003f88 	.word	0x20003f88
    7fa8:	0000612d 	.word	0x0000612d
    7fac:	00007659 	.word	0x00007659

00007fb0 <vTaskPlaceOnEventListRestricted>:
	{
    7fb0:	b570      	push	{r4, r5, r6, lr}
    7fb2:	000c      	movs	r4, r1
    7fb4:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    7fb6:	2800      	cmp	r0, #0
    7fb8:	d031      	beq.n	801e <vTaskPlaceOnEventListRestricted+0x6e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    7fba:	4b1a      	ldr	r3, [pc, #104]	; (8024 <vTaskPlaceOnEventListRestricted+0x74>)
    7fbc:	6819      	ldr	r1, [r3, #0]
    7fbe:	3118      	adds	r1, #24
    7fc0:	4b19      	ldr	r3, [pc, #100]	; (8028 <vTaskPlaceOnEventListRestricted+0x78>)
    7fc2:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    7fc4:	2d00      	cmp	r5, #0
    7fc6:	d001      	beq.n	7fcc <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    7fc8:	2401      	movs	r4, #1
    7fca:	4264      	negs	r4, r4
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
    7fcc:	4b15      	ldr	r3, [pc, #84]	; (8024 <vTaskPlaceOnEventListRestricted+0x74>)
    7fce:	6818      	ldr	r0, [r3, #0]
    7fd0:	4b16      	ldr	r3, [pc, #88]	; (802c <vTaskPlaceOnEventListRestricted+0x7c>)
    7fd2:	4798      	blx	r3
    7fd4:	4b16      	ldr	r3, [pc, #88]	; (8030 <vTaskPlaceOnEventListRestricted+0x80>)
    7fd6:	881b      	ldrh	r3, [r3, #0]
    7fd8:	4203      	tst	r3, r0
    7fda:	d00c      	beq.n	7ff6 <vTaskPlaceOnEventListRestricted+0x46>
    7fdc:	4b15      	ldr	r3, [pc, #84]	; (8034 <vTaskPlaceOnEventListRestricted+0x84>)
    7fde:	6819      	ldr	r1, [r3, #0]
    7fe0:	1861      	adds	r1, r4, r1
    7fe2:	2088      	movs	r0, #136	; 0x88
    7fe4:	4b14      	ldr	r3, [pc, #80]	; (8038 <vTaskPlaceOnEventListRestricted+0x88>)
    7fe6:	4798      	blx	r3
    7fe8:	4b0e      	ldr	r3, [pc, #56]	; (8024 <vTaskPlaceOnEventListRestricted+0x74>)
    7fea:	6818      	ldr	r0, [r3, #0]
    7fec:	4b13      	ldr	r3, [pc, #76]	; (803c <vTaskPlaceOnEventListRestricted+0x8c>)
    7fee:	4798      	blx	r3
    7ff0:	b2c0      	uxtb	r0, r0
    7ff2:	4b13      	ldr	r3, [pc, #76]	; (8040 <vTaskPlaceOnEventListRestricted+0x90>)
    7ff4:	4798      	blx	r3
    7ff6:	4b13      	ldr	r3, [pc, #76]	; (8044 <vTaskPlaceOnEventListRestricted+0x94>)
    7ff8:	4798      	blx	r3
    7ffa:	4b0c      	ldr	r3, [pc, #48]	; (802c <vTaskPlaceOnEventListRestricted+0x7c>)
    7ffc:	4798      	blx	r3
    7ffe:	4b0c      	ldr	r3, [pc, #48]	; (8030 <vTaskPlaceOnEventListRestricted+0x80>)
    8000:	881b      	ldrh	r3, [r3, #0]
    8002:	4203      	tst	r3, r0
    8004:	d006      	beq.n	8014 <vTaskPlaceOnEventListRestricted+0x64>
    8006:	4b0f      	ldr	r3, [pc, #60]	; (8044 <vTaskPlaceOnEventListRestricted+0x94>)
    8008:	4798      	blx	r3
    800a:	4b0c      	ldr	r3, [pc, #48]	; (803c <vTaskPlaceOnEventListRestricted+0x8c>)
    800c:	4798      	blx	r3
    800e:	b2c0      	uxtb	r0, r0
    8010:	4b0b      	ldr	r3, [pc, #44]	; (8040 <vTaskPlaceOnEventListRestricted+0x90>)
    8012:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    8014:	0029      	movs	r1, r5
    8016:	0020      	movs	r0, r4
    8018:	4b0b      	ldr	r3, [pc, #44]	; (8048 <vTaskPlaceOnEventListRestricted+0x98>)
    801a:	4798      	blx	r3
	}
    801c:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    801e:	b672      	cpsid	i
    8020:	e7fe      	b.n	8020 <vTaskPlaceOnEventListRestricted+0x70>
    8022:	46c0      	nop			; (mov r8, r8)
    8024:	20003f88 	.word	0x20003f88
    8028:	00006115 	.word	0x00006115
    802c:	00005025 	.word	0x00005025
    8030:	2000020c 	.word	0x2000020c
    8034:	20004084 	.word	0x20004084
    8038:	00005eb1 	.word	0x00005eb1
    803c:	00005015 	.word	0x00005015
    8040:	00005841 	.word	0x00005841
    8044:	000050dd 	.word	0x000050dd
    8048:	00007659 	.word	0x00007659

0000804c <xTaskRemoveFromEventList>:
{
    804c:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    804e:	68c3      	ldr	r3, [r0, #12]
    8050:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    8052:	2c00      	cmp	r4, #0
    8054:	d02e      	beq.n	80b4 <xTaskRemoveFromEventList+0x68>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    8056:	0025      	movs	r5, r4
    8058:	3518      	adds	r5, #24
    805a:	0028      	movs	r0, r5
    805c:	4b1c      	ldr	r3, [pc, #112]	; (80d0 <xTaskRemoveFromEventList+0x84>)
    805e:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    8060:	4b1c      	ldr	r3, [pc, #112]	; (80d4 <xTaskRemoveFromEventList+0x88>)
    8062:	681b      	ldr	r3, [r3, #0]
    8064:	2b00      	cmp	r3, #0
    8066:	d12e      	bne.n	80c6 <xTaskRemoveFromEventList+0x7a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    8068:	1d25      	adds	r5, r4, #4
    806a:	0028      	movs	r0, r5
    806c:	4b18      	ldr	r3, [pc, #96]	; (80d0 <xTaskRemoveFromEventList+0x84>)
    806e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    8070:	0020      	movs	r0, r4
    8072:	4b19      	ldr	r3, [pc, #100]	; (80d8 <xTaskRemoveFromEventList+0x8c>)
    8074:	4798      	blx	r3
    8076:	4b19      	ldr	r3, [pc, #100]	; (80dc <xTaskRemoveFromEventList+0x90>)
    8078:	881b      	ldrh	r3, [r3, #0]
    807a:	4203      	tst	r3, r0
    807c:	d11c      	bne.n	80b8 <xTaskRemoveFromEventList+0x6c>
    807e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8080:	4a17      	ldr	r2, [pc, #92]	; (80e0 <xTaskRemoveFromEventList+0x94>)
    8082:	6812      	ldr	r2, [r2, #0]
    8084:	4293      	cmp	r3, r2
    8086:	d901      	bls.n	808c <xTaskRemoveFromEventList+0x40>
    8088:	4a15      	ldr	r2, [pc, #84]	; (80e0 <xTaskRemoveFromEventList+0x94>)
    808a:	6013      	str	r3, [r2, #0]
    808c:	0098      	lsls	r0, r3, #2
    808e:	18c0      	adds	r0, r0, r3
    8090:	0080      	lsls	r0, r0, #2
    8092:	4b14      	ldr	r3, [pc, #80]	; (80e4 <xTaskRemoveFromEventList+0x98>)
    8094:	1818      	adds	r0, r3, r0
    8096:	0029      	movs	r1, r5
    8098:	4b13      	ldr	r3, [pc, #76]	; (80e8 <xTaskRemoveFromEventList+0x9c>)
    809a:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    809c:	4b13      	ldr	r3, [pc, #76]	; (80ec <xTaskRemoveFromEventList+0xa0>)
    809e:	681b      	ldr	r3, [r3, #0]
    80a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    80a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    80a4:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    80a6:	429a      	cmp	r2, r3
    80a8:	d903      	bls.n	80b2 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
    80aa:	2201      	movs	r2, #1
    80ac:	4b10      	ldr	r3, [pc, #64]	; (80f0 <xTaskRemoveFromEventList+0xa4>)
    80ae:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    80b0:	3001      	adds	r0, #1
}
    80b2:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    80b4:	b672      	cpsid	i
    80b6:	e7fe      	b.n	80b6 <xTaskRemoveFromEventList+0x6a>
		prvAddTaskToReadyList( pxUnblockedTCB );
    80b8:	0020      	movs	r0, r4
    80ba:	4b0e      	ldr	r3, [pc, #56]	; (80f4 <xTaskRemoveFromEventList+0xa8>)
    80bc:	4798      	blx	r3
    80be:	b2c0      	uxtb	r0, r0
    80c0:	4b0d      	ldr	r3, [pc, #52]	; (80f8 <xTaskRemoveFromEventList+0xac>)
    80c2:	4798      	blx	r3
    80c4:	e7db      	b.n	807e <xTaskRemoveFromEventList+0x32>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    80c6:	0029      	movs	r1, r5
    80c8:	480c      	ldr	r0, [pc, #48]	; (80fc <xTaskRemoveFromEventList+0xb0>)
    80ca:	4b07      	ldr	r3, [pc, #28]	; (80e8 <xTaskRemoveFromEventList+0x9c>)
    80cc:	4798      	blx	r3
    80ce:	e7e5      	b.n	809c <xTaskRemoveFromEventList+0x50>
    80d0:	0000615b 	.word	0x0000615b
    80d4:	20004004 	.word	0x20004004
    80d8:	00005025 	.word	0x00005025
    80dc:	2000020c 	.word	0x2000020c
    80e0:	2000400c 	.word	0x2000400c
    80e4:	20003f94 	.word	0x20003f94
    80e8:	00006115 	.word	0x00006115
    80ec:	20003f88 	.word	0x20003f88
    80f0:	20004088 	.word	0x20004088
    80f4:	00005015 	.word	0x00005015
    80f8:	00005bad 	.word	0x00005bad
    80fc:	20004044 	.word	0x20004044

00008100 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    8100:	4b03      	ldr	r3, [pc, #12]	; (8110 <vTaskInternalSetTimeOutState+0x10>)
    8102:	681b      	ldr	r3, [r3, #0]
    8104:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    8106:	4b03      	ldr	r3, [pc, #12]	; (8114 <vTaskInternalSetTimeOutState+0x14>)
    8108:	681b      	ldr	r3, [r3, #0]
    810a:	6043      	str	r3, [r0, #4]
}
    810c:	4770      	bx	lr
    810e:	46c0      	nop			; (mov r8, r8)
    8110:	20004040 	.word	0x20004040
    8114:	20004084 	.word	0x20004084

00008118 <xTaskCheckForTimeOut>:
{
    8118:	b570      	push	{r4, r5, r6, lr}
    811a:	0006      	movs	r6, r0
    811c:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    811e:	2800      	cmp	r0, #0
    8120:	d01b      	beq.n	815a <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    8122:	2900      	cmp	r1, #0
    8124:	d01b      	beq.n	815e <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    8126:	4b13      	ldr	r3, [pc, #76]	; (8174 <xTaskCheckForTimeOut+0x5c>)
    8128:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    812a:	4b13      	ldr	r3, [pc, #76]	; (8178 <xTaskCheckForTimeOut+0x60>)
    812c:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    812e:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    8130:	682b      	ldr	r3, [r5, #0]
    8132:	1c58      	adds	r0, r3, #1
    8134:	d01c      	beq.n	8170 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    8136:	4811      	ldr	r0, [pc, #68]	; (817c <xTaskCheckForTimeOut+0x64>)
    8138:	6800      	ldr	r0, [r0, #0]
    813a:	6834      	ldr	r4, [r6, #0]
    813c:	4284      	cmp	r4, r0
    813e:	d002      	beq.n	8146 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    8140:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    8142:	428a      	cmp	r2, r1
    8144:	d205      	bcs.n	8152 <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    8146:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    8148:	429a      	cmp	r2, r3
    814a:	d30a      	bcc.n	8162 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    814c:	2300      	movs	r3, #0
    814e:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    8150:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    8152:	4b0b      	ldr	r3, [pc, #44]	; (8180 <xTaskCheckForTimeOut+0x68>)
    8154:	4798      	blx	r3
}
    8156:	0020      	movs	r0, r4
    8158:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    815a:	b672      	cpsid	i
    815c:	e7fe      	b.n	815c <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    815e:	b672      	cpsid	i
    8160:	e7fe      	b.n	8160 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    8162:	1a9b      	subs	r3, r3, r2
    8164:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    8166:	0030      	movs	r0, r6
    8168:	4b06      	ldr	r3, [pc, #24]	; (8184 <xTaskCheckForTimeOut+0x6c>)
    816a:	4798      	blx	r3
			xReturn = pdFALSE;
    816c:	2400      	movs	r4, #0
    816e:	e7f0      	b.n	8152 <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    8170:	2400      	movs	r4, #0
    8172:	e7ee      	b.n	8152 <xTaskCheckForTimeOut+0x3a>
    8174:	00006291 	.word	0x00006291
    8178:	20004084 	.word	0x20004084
    817c:	20004040 	.word	0x20004040
    8180:	000062a9 	.word	0x000062a9
    8184:	00008101 	.word	0x00008101

00008188 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    8188:	2201      	movs	r2, #1
    818a:	4b01      	ldr	r3, [pc, #4]	; (8190 <vTaskMissedYield+0x8>)
    818c:	601a      	str	r2, [r3, #0]
}
    818e:	4770      	bx	lr
    8190:	20004088 	.word	0x20004088

00008194 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
    8194:	2800      	cmp	r0, #0
    8196:	d001      	beq.n	819c <uxTaskGetTaskNumber+0x8>
			uxReturn = pxTCB->uxTaskNumber;
    8198:	6c00      	ldr	r0, [r0, #64]	; 0x40
	}
    819a:	4770      	bx	lr
			uxReturn = 0U;
    819c:	2000      	movs	r0, #0
		return uxReturn;
    819e:	e7fc      	b.n	819a <uxTaskGetTaskNumber+0x6>

000081a0 <vTaskSetTaskNumber>:
		if( xTask != NULL )
    81a0:	2800      	cmp	r0, #0
    81a2:	d000      	beq.n	81a6 <vTaskSetTaskNumber+0x6>
			pxTCB->uxTaskNumber = uxHandle;
    81a4:	6401      	str	r1, [r0, #64]	; 0x40
	}
    81a6:	4770      	bx	lr

000081a8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
    81a8:	4b01      	ldr	r3, [pc, #4]	; (81b0 <xTaskGetCurrentTaskHandle+0x8>)
    81aa:	6818      	ldr	r0, [r3, #0]
	}
    81ac:	4770      	bx	lr
    81ae:	46c0      	nop			; (mov r8, r8)
    81b0:	20003f88 	.word	0x20003f88

000081b4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    81b4:	4b05      	ldr	r3, [pc, #20]	; (81cc <xTaskGetSchedulerState+0x18>)
    81b6:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    81b8:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    81ba:	2b00      	cmp	r3, #0
    81bc:	d004      	beq.n	81c8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    81be:	4b04      	ldr	r3, [pc, #16]	; (81d0 <xTaskGetSchedulerState+0x1c>)
    81c0:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    81c2:	4243      	negs	r3, r0
    81c4:	4158      	adcs	r0, r3
    81c6:	0040      	lsls	r0, r0, #1
	}
    81c8:	4770      	bx	lr
    81ca:	46c0      	nop			; (mov r8, r8)
    81cc:	20004058 	.word	0x20004058
    81d0:	20004004 	.word	0x20004004

000081d4 <xTaskPriorityInherit>:
	{
    81d4:	b570      	push	{r4, r5, r6, lr}
    81d6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    81d8:	d100      	bne.n	81dc <xTaskPriorityInherit+0x8>
    81da:	e06d      	b.n	82b8 <xTaskPriorityInherit+0xe4>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    81dc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    81de:	4b37      	ldr	r3, [pc, #220]	; (82bc <xTaskPriorityInherit+0xe8>)
    81e0:	681b      	ldr	r3, [r3, #0]
    81e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    81e4:	429a      	cmp	r2, r3
    81e6:	d25f      	bcs.n	82a8 <xTaskPriorityInherit+0xd4>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    81e8:	6983      	ldr	r3, [r0, #24]
    81ea:	2b00      	cmp	r3, #0
    81ec:	db05      	blt.n	81fa <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    81ee:	4b33      	ldr	r3, [pc, #204]	; (82bc <xTaskPriorityInherit+0xe8>)
    81f0:	681b      	ldr	r3, [r3, #0]
    81f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    81f4:	2305      	movs	r3, #5
    81f6:	1a5b      	subs	r3, r3, r1
    81f8:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    81fa:	0093      	lsls	r3, r2, #2
    81fc:	189b      	adds	r3, r3, r2
    81fe:	009b      	lsls	r3, r3, #2
    8200:	4a2f      	ldr	r2, [pc, #188]	; (82c0 <xTaskPriorityInherit+0xec>)
    8202:	18d3      	adds	r3, r2, r3
    8204:	6962      	ldr	r2, [r4, #20]
    8206:	429a      	cmp	r2, r3
    8208:	d028      	beq.n	825c <xTaskPriorityInherit+0x88>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    820a:	4b2c      	ldr	r3, [pc, #176]	; (82bc <xTaskPriorityInherit+0xe8>)
    820c:	681b      	ldr	r3, [r3, #0]
    820e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8210:	62e3      	str	r3, [r4, #44]	; 0x2c
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    8212:	0020      	movs	r0, r4
    8214:	4b2b      	ldr	r3, [pc, #172]	; (82c4 <xTaskPriorityInherit+0xf0>)
    8216:	4798      	blx	r3
    8218:	0003      	movs	r3, r0
    821a:	4a2b      	ldr	r2, [pc, #172]	; (82c8 <xTaskPriorityInherit+0xf4>)
    821c:	8812      	ldrh	r2, [r2, #0]
				xReturn = pdTRUE;
    821e:	2001      	movs	r0, #1
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    8220:	421a      	tst	r2, r3
    8222:	d048      	beq.n	82b6 <xTaskPriorityInherit+0xe2>
    8224:	0020      	movs	r0, r4
    8226:	4d29      	ldr	r5, [pc, #164]	; (82cc <xTaskPriorityInherit+0xf8>)
    8228:	47a8      	blx	r5
    822a:	0006      	movs	r6, r0
    822c:	0020      	movs	r0, r4
    822e:	47a8      	blx	r5
    8230:	b2c1      	uxtb	r1, r0
    8232:	2003      	movs	r0, #3
    8234:	4b26      	ldr	r3, [pc, #152]	; (82d0 <xTaskPriorityInherit+0xfc>)
    8236:	4798      	blx	r3
    8238:	0003      	movs	r3, r0
    823a:	b2f2      	uxtb	r2, r6
    823c:	2103      	movs	r1, #3
    823e:	208e      	movs	r0, #142	; 0x8e
    8240:	4e24      	ldr	r6, [pc, #144]	; (82d4 <xTaskPriorityInherit+0x100>)
    8242:	47b0      	blx	r6
    8244:	0020      	movs	r0, r4
    8246:	47a8      	blx	r5
    8248:	4b1c      	ldr	r3, [pc, #112]	; (82bc <xTaskPriorityInherit+0xe8>)
    824a:	681b      	ldr	r3, [r3, #0]
    824c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    824e:	b2d2      	uxtb	r2, r2
    8250:	b2c1      	uxtb	r1, r0
    8252:	2003      	movs	r0, #3
    8254:	4b20      	ldr	r3, [pc, #128]	; (82d8 <xTaskPriorityInherit+0x104>)
    8256:	4798      	blx	r3
				xReturn = pdTRUE;
    8258:	2001      	movs	r0, #1
    825a:	e02c      	b.n	82b6 <xTaskPriorityInherit+0xe2>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    825c:	1d25      	adds	r5, r4, #4
    825e:	0028      	movs	r0, r5
    8260:	4b1e      	ldr	r3, [pc, #120]	; (82dc <xTaskPriorityInherit+0x108>)
    8262:	4798      	blx	r3
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    8264:	4b15      	ldr	r3, [pc, #84]	; (82bc <xTaskPriorityInherit+0xe8>)
    8266:	681b      	ldr	r3, [r3, #0]
    8268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    826a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    826c:	0020      	movs	r0, r4
    826e:	4b15      	ldr	r3, [pc, #84]	; (82c4 <xTaskPriorityInherit+0xf0>)
    8270:	4798      	blx	r3
    8272:	4b15      	ldr	r3, [pc, #84]	; (82c8 <xTaskPriorityInherit+0xf4>)
    8274:	881b      	ldrh	r3, [r3, #0]
    8276:	4203      	tst	r3, r0
    8278:	d10f      	bne.n	829a <xTaskPriorityInherit+0xc6>
    827a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    827c:	4a18      	ldr	r2, [pc, #96]	; (82e0 <xTaskPriorityInherit+0x10c>)
    827e:	6812      	ldr	r2, [r2, #0]
    8280:	4293      	cmp	r3, r2
    8282:	d901      	bls.n	8288 <xTaskPriorityInherit+0xb4>
    8284:	4a16      	ldr	r2, [pc, #88]	; (82e0 <xTaskPriorityInherit+0x10c>)
    8286:	6013      	str	r3, [r2, #0]
    8288:	0098      	lsls	r0, r3, #2
    828a:	18c0      	adds	r0, r0, r3
    828c:	0080      	lsls	r0, r0, #2
    828e:	4b0c      	ldr	r3, [pc, #48]	; (82c0 <xTaskPriorityInherit+0xec>)
    8290:	1818      	adds	r0, r3, r0
    8292:	0029      	movs	r1, r5
    8294:	4b13      	ldr	r3, [pc, #76]	; (82e4 <xTaskPriorityInherit+0x110>)
    8296:	4798      	blx	r3
    8298:	e7bb      	b.n	8212 <xTaskPriorityInherit+0x3e>
    829a:	0020      	movs	r0, r4
    829c:	4b0b      	ldr	r3, [pc, #44]	; (82cc <xTaskPriorityInherit+0xf8>)
    829e:	4798      	blx	r3
    82a0:	b2c0      	uxtb	r0, r0
    82a2:	4b11      	ldr	r3, [pc, #68]	; (82e8 <xTaskPriorityInherit+0x114>)
    82a4:	4798      	blx	r3
    82a6:	e7e8      	b.n	827a <xTaskPriorityInherit+0xa6>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    82a8:	4b04      	ldr	r3, [pc, #16]	; (82bc <xTaskPriorityInherit+0xe8>)
    82aa:	681b      	ldr	r3, [r3, #0]
    82ac:	6c40      	ldr	r0, [r0, #68]	; 0x44
    82ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    82b0:	4298      	cmp	r0, r3
    82b2:	4180      	sbcs	r0, r0
    82b4:	4240      	negs	r0, r0
	}
    82b6:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    82b8:	2000      	movs	r0, #0
    82ba:	e7fc      	b.n	82b6 <xTaskPriorityInherit+0xe2>
    82bc:	20003f88 	.word	0x20003f88
    82c0:	20003f94 	.word	0x20003f94
    82c4:	00005025 	.word	0x00005025
    82c8:	2000020c 	.word	0x2000020c
    82cc:	00005015 	.word	0x00005015
    82d0:	0000578d 	.word	0x0000578d
    82d4:	00005dd9 	.word	0x00005dd9
    82d8:	00005735 	.word	0x00005735
    82dc:	0000615b 	.word	0x0000615b
    82e0:	2000400c 	.word	0x2000400c
    82e4:	00006115 	.word	0x00006115
    82e8:	00005bad 	.word	0x00005bad

000082ec <xTaskPriorityDisinherit>:
	{
    82ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82ee:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    82f0:	d05a      	beq.n	83a8 <xTaskPriorityDisinherit+0xbc>
			configASSERT( pxTCB == pxCurrentTCB );
    82f2:	4b2f      	ldr	r3, [pc, #188]	; (83b0 <xTaskPriorityDisinherit+0xc4>)
    82f4:	681b      	ldr	r3, [r3, #0]
    82f6:	4298      	cmp	r0, r3
    82f8:	d001      	beq.n	82fe <xTaskPriorityDisinherit+0x12>
    82fa:	b672      	cpsid	i
    82fc:	e7fe      	b.n	82fc <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    82fe:	6c83      	ldr	r3, [r0, #72]	; 0x48
    8300:	2b00      	cmp	r3, #0
    8302:	d101      	bne.n	8308 <xTaskPriorityDisinherit+0x1c>
    8304:	b672      	cpsid	i
    8306:	e7fe      	b.n	8306 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    8308:	3b01      	subs	r3, #1
    830a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    830c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    830e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    8310:	428a      	cmp	r2, r1
    8312:	d04b      	beq.n	83ac <xTaskPriorityDisinherit+0xc0>
	BaseType_t xReturn = pdFALSE;
    8314:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    8316:	2b00      	cmp	r3, #0
    8318:	d145      	bne.n	83a6 <xTaskPriorityDisinherit+0xba>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    831a:	1d25      	adds	r5, r4, #4
    831c:	0028      	movs	r0, r5
    831e:	4b25      	ldr	r3, [pc, #148]	; (83b4 <xTaskPriorityDisinherit+0xc8>)
    8320:	4798      	blx	r3
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    8322:	0020      	movs	r0, r4
    8324:	4b24      	ldr	r3, [pc, #144]	; (83b8 <xTaskPriorityDisinherit+0xcc>)
    8326:	4798      	blx	r3
    8328:	4b24      	ldr	r3, [pc, #144]	; (83bc <xTaskPriorityDisinherit+0xd0>)
    832a:	881b      	ldrh	r3, [r3, #0]
    832c:	4203      	tst	r3, r0
    832e:	d018      	beq.n	8362 <xTaskPriorityDisinherit+0x76>
    8330:	0020      	movs	r0, r4
    8332:	4e23      	ldr	r6, [pc, #140]	; (83c0 <xTaskPriorityDisinherit+0xd4>)
    8334:	47b0      	blx	r6
    8336:	0007      	movs	r7, r0
    8338:	0020      	movs	r0, r4
    833a:	47b0      	blx	r6
    833c:	b2c1      	uxtb	r1, r0
    833e:	2003      	movs	r0, #3
    8340:	4b20      	ldr	r3, [pc, #128]	; (83c4 <xTaskPriorityDisinherit+0xd8>)
    8342:	4798      	blx	r3
    8344:	0003      	movs	r3, r0
    8346:	b2fa      	uxtb	r2, r7
    8348:	2103      	movs	r1, #3
    834a:	208f      	movs	r0, #143	; 0x8f
    834c:	4f1e      	ldr	r7, [pc, #120]	; (83c8 <xTaskPriorityDisinherit+0xdc>)
    834e:	47b8      	blx	r7
    8350:	0020      	movs	r0, r4
    8352:	47b0      	blx	r6
    8354:	2344      	movs	r3, #68	; 0x44
    8356:	18e3      	adds	r3, r4, r3
    8358:	781a      	ldrb	r2, [r3, #0]
    835a:	b2c1      	uxtb	r1, r0
    835c:	2003      	movs	r0, #3
    835e:	4b1b      	ldr	r3, [pc, #108]	; (83cc <xTaskPriorityDisinherit+0xe0>)
    8360:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    8362:	6c62      	ldr	r2, [r4, #68]	; 0x44
    8364:	62e2      	str	r2, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8366:	2305      	movs	r3, #5
    8368:	1a9b      	subs	r3, r3, r2
    836a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    836c:	0020      	movs	r0, r4
    836e:	4b12      	ldr	r3, [pc, #72]	; (83b8 <xTaskPriorityDisinherit+0xcc>)
    8370:	4798      	blx	r3
    8372:	4b12      	ldr	r3, [pc, #72]	; (83bc <xTaskPriorityDisinherit+0xd0>)
    8374:	881b      	ldrh	r3, [r3, #0]
    8376:	4203      	tst	r3, r0
    8378:	d005      	beq.n	8386 <xTaskPriorityDisinherit+0x9a>
    837a:	0020      	movs	r0, r4
    837c:	4b10      	ldr	r3, [pc, #64]	; (83c0 <xTaskPriorityDisinherit+0xd4>)
    837e:	4798      	blx	r3
    8380:	b2c0      	uxtb	r0, r0
    8382:	4b13      	ldr	r3, [pc, #76]	; (83d0 <xTaskPriorityDisinherit+0xe4>)
    8384:	4798      	blx	r3
    8386:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8388:	4a12      	ldr	r2, [pc, #72]	; (83d4 <xTaskPriorityDisinherit+0xe8>)
    838a:	6812      	ldr	r2, [r2, #0]
    838c:	4293      	cmp	r3, r2
    838e:	d901      	bls.n	8394 <xTaskPriorityDisinherit+0xa8>
    8390:	4a10      	ldr	r2, [pc, #64]	; (83d4 <xTaskPriorityDisinherit+0xe8>)
    8392:	6013      	str	r3, [r2, #0]
    8394:	0098      	lsls	r0, r3, #2
    8396:	18c0      	adds	r0, r0, r3
    8398:	0080      	lsls	r0, r0, #2
    839a:	4b0f      	ldr	r3, [pc, #60]	; (83d8 <xTaskPriorityDisinherit+0xec>)
    839c:	1818      	adds	r0, r3, r0
    839e:	0029      	movs	r1, r5
    83a0:	4b0e      	ldr	r3, [pc, #56]	; (83dc <xTaskPriorityDisinherit+0xf0>)
    83a2:	4798      	blx	r3
					xReturn = pdTRUE;
    83a4:	2001      	movs	r0, #1
	}
    83a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
    83a8:	2000      	movs	r0, #0
    83aa:	e7fc      	b.n	83a6 <xTaskPriorityDisinherit+0xba>
    83ac:	2000      	movs	r0, #0
    83ae:	e7fa      	b.n	83a6 <xTaskPriorityDisinherit+0xba>
    83b0:	20003f88 	.word	0x20003f88
    83b4:	0000615b 	.word	0x0000615b
    83b8:	00005025 	.word	0x00005025
    83bc:	2000020c 	.word	0x2000020c
    83c0:	00005015 	.word	0x00005015
    83c4:	0000578d 	.word	0x0000578d
    83c8:	00005dd9 	.word	0x00005dd9
    83cc:	00005735 	.word	0x00005735
    83d0:	00005bad 	.word	0x00005bad
    83d4:	2000400c 	.word	0x2000400c
    83d8:	20003f94 	.word	0x20003f94
    83dc:	00006115 	.word	0x00006115

000083e0 <vTaskPriorityDisinheritAfterTimeout>:
	{
    83e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83e2:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    83e4:	d00d      	beq.n	8402 <vTaskPriorityDisinheritAfterTimeout+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    83e6:	6c83      	ldr	r3, [r0, #72]	; 0x48
    83e8:	2b00      	cmp	r3, #0
    83ea:	d101      	bne.n	83f0 <vTaskPriorityDisinheritAfterTimeout+0x10>
    83ec:	b672      	cpsid	i
    83ee:	e7fe      	b.n	83ee <vTaskPriorityDisinheritAfterTimeout+0xe>
    83f0:	6c45      	ldr	r5, [r0, #68]	; 0x44
    83f2:	428d      	cmp	r5, r1
    83f4:	d200      	bcs.n	83f8 <vTaskPriorityDisinheritAfterTimeout+0x18>
    83f6:	000d      	movs	r5, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
    83f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    83fa:	42aa      	cmp	r2, r5
    83fc:	d001      	beq.n	8402 <vTaskPriorityDisinheritAfterTimeout+0x22>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    83fe:	2b01      	cmp	r3, #1
    8400:	d000      	beq.n	8404 <vTaskPriorityDisinheritAfterTimeout+0x24>
	}
    8402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					configASSERT( pxTCB != pxCurrentTCB );
    8404:	4b2b      	ldr	r3, [pc, #172]	; (84b4 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
    8406:	681b      	ldr	r3, [r3, #0]
    8408:	429c      	cmp	r4, r3
    840a:	d101      	bne.n	8410 <vTaskPriorityDisinheritAfterTimeout+0x30>
    840c:	b672      	cpsid	i
    840e:	e7fe      	b.n	840e <vTaskPriorityDisinheritAfterTimeout+0x2e>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    8410:	0020      	movs	r0, r4
    8412:	4b29      	ldr	r3, [pc, #164]	; (84b8 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
    8414:	4798      	blx	r3
    8416:	4b29      	ldr	r3, [pc, #164]	; (84bc <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    8418:	881b      	ldrh	r3, [r3, #0]
    841a:	4203      	tst	r3, r0
    841c:	d018      	beq.n	8450 <vTaskPriorityDisinheritAfterTimeout+0x70>
    841e:	0020      	movs	r0, r4
    8420:	4e27      	ldr	r6, [pc, #156]	; (84c0 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    8422:	47b0      	blx	r6
    8424:	0007      	movs	r7, r0
    8426:	0020      	movs	r0, r4
    8428:	47b0      	blx	r6
    842a:	b2c1      	uxtb	r1, r0
    842c:	2003      	movs	r0, #3
    842e:	4b25      	ldr	r3, [pc, #148]	; (84c4 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
    8430:	4798      	blx	r3
    8432:	0003      	movs	r3, r0
    8434:	b2fa      	uxtb	r2, r7
    8436:	2103      	movs	r1, #3
    8438:	208f      	movs	r0, #143	; 0x8f
    843a:	4f23      	ldr	r7, [pc, #140]	; (84c8 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
    843c:	47b8      	blx	r7
    843e:	0020      	movs	r0, r4
    8440:	47b0      	blx	r6
    8442:	2344      	movs	r3, #68	; 0x44
    8444:	18e3      	adds	r3, r4, r3
    8446:	781a      	ldrb	r2, [r3, #0]
    8448:	b2c1      	uxtb	r1, r0
    844a:	2003      	movs	r0, #3
    844c:	4b1f      	ldr	r3, [pc, #124]	; (84cc <vTaskPriorityDisinheritAfterTimeout+0xec>)
    844e:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    8450:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					pxTCB->uxPriority = uxPriorityToUse;
    8452:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    8454:	69a3      	ldr	r3, [r4, #24]
    8456:	2b00      	cmp	r3, #0
    8458:	db02      	blt.n	8460 <vTaskPriorityDisinheritAfterTimeout+0x80>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    845a:	2205      	movs	r2, #5
    845c:	1b55      	subs	r5, r2, r5
    845e:	61a5      	str	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    8460:	008b      	lsls	r3, r1, #2
    8462:	185b      	adds	r3, r3, r1
    8464:	009b      	lsls	r3, r3, #2
    8466:	4a1a      	ldr	r2, [pc, #104]	; (84d0 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
    8468:	18d3      	adds	r3, r2, r3
    846a:	6962      	ldr	r2, [r4, #20]
    846c:	429a      	cmp	r2, r3
    846e:	d1c8      	bne.n	8402 <vTaskPriorityDisinheritAfterTimeout+0x22>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    8470:	1d25      	adds	r5, r4, #4
    8472:	0028      	movs	r0, r5
    8474:	4b17      	ldr	r3, [pc, #92]	; (84d4 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
    8476:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
    8478:	0020      	movs	r0, r4
    847a:	4b0f      	ldr	r3, [pc, #60]	; (84b8 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
    847c:	4798      	blx	r3
    847e:	4b0f      	ldr	r3, [pc, #60]	; (84bc <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    8480:	881b      	ldrh	r3, [r3, #0]
    8482:	4203      	tst	r3, r0
    8484:	d005      	beq.n	8492 <vTaskPriorityDisinheritAfterTimeout+0xb2>
    8486:	0020      	movs	r0, r4
    8488:	4b0d      	ldr	r3, [pc, #52]	; (84c0 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    848a:	4798      	blx	r3
    848c:	b2c0      	uxtb	r0, r0
    848e:	4b12      	ldr	r3, [pc, #72]	; (84d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
    8490:	4798      	blx	r3
    8492:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8494:	4a11      	ldr	r2, [pc, #68]	; (84dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
    8496:	6812      	ldr	r2, [r2, #0]
    8498:	4293      	cmp	r3, r2
    849a:	d901      	bls.n	84a0 <vTaskPriorityDisinheritAfterTimeout+0xc0>
    849c:	4a0f      	ldr	r2, [pc, #60]	; (84dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
    849e:	6013      	str	r3, [r2, #0]
    84a0:	0098      	lsls	r0, r3, #2
    84a2:	18c0      	adds	r0, r0, r3
    84a4:	0080      	lsls	r0, r0, #2
    84a6:	4b0a      	ldr	r3, [pc, #40]	; (84d0 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
    84a8:	1818      	adds	r0, r3, r0
    84aa:	0029      	movs	r1, r5
    84ac:	4b0c      	ldr	r3, [pc, #48]	; (84e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
    84ae:	4798      	blx	r3
	}
    84b0:	e7a7      	b.n	8402 <vTaskPriorityDisinheritAfterTimeout+0x22>
    84b2:	46c0      	nop			; (mov r8, r8)
    84b4:	20003f88 	.word	0x20003f88
    84b8:	00005025 	.word	0x00005025
    84bc:	2000020c 	.word	0x2000020c
    84c0:	00005015 	.word	0x00005015
    84c4:	0000578d 	.word	0x0000578d
    84c8:	00005dd9 	.word	0x00005dd9
    84cc:	00005735 	.word	0x00005735
    84d0:	20003f94 	.word	0x20003f94
    84d4:	0000615b 	.word	0x0000615b
    84d8:	00005bad 	.word	0x00005bad
    84dc:	2000400c 	.word	0x2000400c
    84e0:	00006115 	.word	0x00006115

000084e4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
    84e4:	4b05      	ldr	r3, [pc, #20]	; (84fc <pvTaskIncrementMutexHeldCount+0x18>)
    84e6:	681b      	ldr	r3, [r3, #0]
    84e8:	2b00      	cmp	r3, #0
    84ea:	d004      	beq.n	84f6 <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
    84ec:	4b03      	ldr	r3, [pc, #12]	; (84fc <pvTaskIncrementMutexHeldCount+0x18>)
    84ee:	681a      	ldr	r2, [r3, #0]
    84f0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    84f2:	3301      	adds	r3, #1
    84f4:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
    84f6:	4b01      	ldr	r3, [pc, #4]	; (84fc <pvTaskIncrementMutexHeldCount+0x18>)
    84f8:	6818      	ldr	r0, [r3, #0]
	}
    84fa:	4770      	bx	lr
    84fc:	20003f88 	.word	0x20003f88

00008500 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    8500:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    8502:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    8504:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    8506:	4291      	cmp	r1, r2
    8508:	d80b      	bhi.n	8522 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    850a:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    850c:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    850e:	6983      	ldr	r3, [r0, #24]
    8510:	429a      	cmp	r2, r3
    8512:	d211      	bcs.n	8538 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    8514:	1d01      	adds	r1, r0, #4
    8516:	4b09      	ldr	r3, [pc, #36]	; (853c <prvInsertTimerInActiveList+0x3c>)
    8518:	6818      	ldr	r0, [r3, #0]
    851a:	4b09      	ldr	r3, [pc, #36]	; (8540 <prvInsertTimerInActiveList+0x40>)
    851c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    851e:	2400      	movs	r4, #0
    8520:	e00a      	b.n	8538 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    8522:	429a      	cmp	r2, r3
    8524:	d202      	bcs.n	852c <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    8526:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    8528:	4299      	cmp	r1, r3
    852a:	d205      	bcs.n	8538 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    852c:	1d01      	adds	r1, r0, #4
    852e:	4b05      	ldr	r3, [pc, #20]	; (8544 <prvInsertTimerInActiveList+0x44>)
    8530:	6818      	ldr	r0, [r3, #0]
    8532:	4b03      	ldr	r3, [pc, #12]	; (8540 <prvInsertTimerInActiveList+0x40>)
    8534:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    8536:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    8538:	0020      	movs	r0, r4
    853a:	bd10      	pop	{r4, pc}
    853c:	20004090 	.word	0x20004090
    8540:	0000612d 	.word	0x0000612d
    8544:	2000408c 	.word	0x2000408c

00008548 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    8548:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    854a:	4b0e      	ldr	r3, [pc, #56]	; (8584 <prvCheckForValidListAndQueue+0x3c>)
    854c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    854e:	4b0e      	ldr	r3, [pc, #56]	; (8588 <prvCheckForValidListAndQueue+0x40>)
    8550:	681b      	ldr	r3, [r3, #0]
    8552:	2b00      	cmp	r3, #0
    8554:	d002      	beq.n	855c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    8556:	4b0d      	ldr	r3, [pc, #52]	; (858c <prvCheckForValidListAndQueue+0x44>)
    8558:	4798      	blx	r3
}
    855a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    855c:	4d0c      	ldr	r5, [pc, #48]	; (8590 <prvCheckForValidListAndQueue+0x48>)
    855e:	0028      	movs	r0, r5
    8560:	4e0c      	ldr	r6, [pc, #48]	; (8594 <prvCheckForValidListAndQueue+0x4c>)
    8562:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    8564:	4c0c      	ldr	r4, [pc, #48]	; (8598 <prvCheckForValidListAndQueue+0x50>)
    8566:	0020      	movs	r0, r4
    8568:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    856a:	4b0c      	ldr	r3, [pc, #48]	; (859c <prvCheckForValidListAndQueue+0x54>)
    856c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    856e:	4b0c      	ldr	r3, [pc, #48]	; (85a0 <prvCheckForValidListAndQueue+0x58>)
    8570:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    8572:	2200      	movs	r2, #0
    8574:	210c      	movs	r1, #12
    8576:	2002      	movs	r0, #2
    8578:	4b0a      	ldr	r3, [pc, #40]	; (85a4 <prvCheckForValidListAndQueue+0x5c>)
    857a:	4798      	blx	r3
    857c:	4b02      	ldr	r3, [pc, #8]	; (8588 <prvCheckForValidListAndQueue+0x40>)
    857e:	6018      	str	r0, [r3, #0]
    8580:	e7e9      	b.n	8556 <prvCheckForValidListAndQueue+0xe>
    8582:	46c0      	nop			; (mov r8, r8)
    8584:	00006291 	.word	0x00006291
    8588:	200040c0 	.word	0x200040c0
    858c:	000062a9 	.word	0x000062a9
    8590:	20004094 	.word	0x20004094
    8594:	000060f9 	.word	0x000060f9
    8598:	200040a8 	.word	0x200040a8
    859c:	2000408c 	.word	0x2000408c
    85a0:	20004090 	.word	0x20004090
    85a4:	00006709 	.word	0x00006709

000085a8 <xTimerCreateTimerTask>:
{
    85a8:	b510      	push	{r4, lr}
    85aa:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    85ac:	4b0a      	ldr	r3, [pc, #40]	; (85d8 <xTimerCreateTimerTask+0x30>)
    85ae:	4798      	blx	r3
	if( xTimerQueue != NULL )
    85b0:	4b0a      	ldr	r3, [pc, #40]	; (85dc <xTimerCreateTimerTask+0x34>)
    85b2:	681b      	ldr	r3, [r3, #0]
    85b4:	2b00      	cmp	r3, #0
    85b6:	d00d      	beq.n	85d4 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
    85b8:	4b09      	ldr	r3, [pc, #36]	; (85e0 <xTimerCreateTimerTask+0x38>)
    85ba:	9301      	str	r3, [sp, #4]
    85bc:	2302      	movs	r3, #2
    85be:	9300      	str	r3, [sp, #0]
    85c0:	2300      	movs	r3, #0
    85c2:	2280      	movs	r2, #128	; 0x80
    85c4:	4907      	ldr	r1, [pc, #28]	; (85e4 <xTimerCreateTimerTask+0x3c>)
    85c6:	4808      	ldr	r0, [pc, #32]	; (85e8 <xTimerCreateTimerTask+0x40>)
    85c8:	4c08      	ldr	r4, [pc, #32]	; (85ec <xTimerCreateTimerTask+0x44>)
    85ca:	47a0      	blx	r4
	configASSERT( xReturn );
    85cc:	2800      	cmp	r0, #0
    85ce:	d001      	beq.n	85d4 <xTimerCreateTimerTask+0x2c>
}
    85d0:	b002      	add	sp, #8
    85d2:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    85d4:	b672      	cpsid	i
    85d6:	e7fe      	b.n	85d6 <xTimerCreateTimerTask+0x2e>
    85d8:	00008549 	.word	0x00008549
    85dc:	200040c0 	.word	0x200040c0
    85e0:	200040c4 	.word	0x200040c4
    85e4:	0001a4c0 	.word	0x0001a4c0
    85e8:	00008715 	.word	0x00008715
    85ec:	000076e1 	.word	0x000076e1

000085f0 <xTimerGenericCommand>:
{
    85f0:	b530      	push	{r4, r5, lr}
    85f2:	b085      	sub	sp, #20
    85f4:	0004      	movs	r4, r0
    85f6:	001d      	movs	r5, r3
	configASSERT( xTimer );
    85f8:	2800      	cmp	r0, #0
    85fa:	d014      	beq.n	8626 <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    85fc:	4b13      	ldr	r3, [pc, #76]	; (864c <xTimerGenericCommand+0x5c>)
    85fe:	6818      	ldr	r0, [r3, #0]
    8600:	2800      	cmp	r0, #0
    8602:	d021      	beq.n	8648 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    8604:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    8606:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    8608:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    860a:	2905      	cmp	r1, #5
    860c:	dc15      	bgt.n	863a <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    860e:	4b10      	ldr	r3, [pc, #64]	; (8650 <xTimerGenericCommand+0x60>)
    8610:	4798      	blx	r3
    8612:	2802      	cmp	r0, #2
    8614:	d009      	beq.n	862a <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    8616:	4b0d      	ldr	r3, [pc, #52]	; (864c <xTimerGenericCommand+0x5c>)
    8618:	6818      	ldr	r0, [r3, #0]
    861a:	2300      	movs	r3, #0
    861c:	2200      	movs	r2, #0
    861e:	a901      	add	r1, sp, #4
    8620:	4c0c      	ldr	r4, [pc, #48]	; (8654 <xTimerGenericCommand+0x64>)
    8622:	47a0      	blx	r4
    8624:	e00e      	b.n	8644 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    8626:	b672      	cpsid	i
    8628:	e7fe      	b.n	8628 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    862a:	4b08      	ldr	r3, [pc, #32]	; (864c <xTimerGenericCommand+0x5c>)
    862c:	6818      	ldr	r0, [r3, #0]
    862e:	2300      	movs	r3, #0
    8630:	9a08      	ldr	r2, [sp, #32]
    8632:	a901      	add	r1, sp, #4
    8634:	4c07      	ldr	r4, [pc, #28]	; (8654 <xTimerGenericCommand+0x64>)
    8636:	47a0      	blx	r4
    8638:	e004      	b.n	8644 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    863a:	2300      	movs	r3, #0
    863c:	002a      	movs	r2, r5
    863e:	a901      	add	r1, sp, #4
    8640:	4c05      	ldr	r4, [pc, #20]	; (8658 <xTimerGenericCommand+0x68>)
    8642:	47a0      	blx	r4
}
    8644:	b005      	add	sp, #20
    8646:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    8648:	2000      	movs	r0, #0
	return xReturn;
    864a:	e7fb      	b.n	8644 <xTimerGenericCommand+0x54>
    864c:	200040c0 	.word	0x200040c0
    8650:	000081b5 	.word	0x000081b5
    8654:	00006845 	.word	0x00006845
    8658:	00006b99 	.word	0x00006b99

0000865c <prvSampleTimeNow>:
{
    865c:	b5f0      	push	{r4, r5, r6, r7, lr}
    865e:	46d6      	mov	lr, sl
    8660:	464f      	mov	r7, r9
    8662:	4646      	mov	r6, r8
    8664:	b5c0      	push	{r6, r7, lr}
    8666:	b082      	sub	sp, #8
    8668:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    866a:	4b23      	ldr	r3, [pc, #140]	; (86f8 <prvSampleTimeNow+0x9c>)
    866c:	4798      	blx	r3
    866e:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    8670:	4b22      	ldr	r3, [pc, #136]	; (86fc <prvSampleTimeNow+0xa0>)
    8672:	681b      	ldr	r3, [r3, #0]
    8674:	4298      	cmp	r0, r3
    8676:	d317      	bcc.n	86a8 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    8678:	2300      	movs	r3, #0
    867a:	4642      	mov	r2, r8
    867c:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    867e:	4b1f      	ldr	r3, [pc, #124]	; (86fc <prvSampleTimeNow+0xa0>)
    8680:	4652      	mov	r2, sl
    8682:	601a      	str	r2, [r3, #0]
}
    8684:	4650      	mov	r0, sl
    8686:	b002      	add	sp, #8
    8688:	bc1c      	pop	{r2, r3, r4}
    868a:	4690      	mov	r8, r2
    868c:	4699      	mov	r9, r3
    868e:	46a2      	mov	sl, r4
    8690:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    8692:	2300      	movs	r3, #0
    8694:	9300      	str	r3, [sp, #0]
    8696:	003a      	movs	r2, r7
    8698:	2100      	movs	r1, #0
    869a:	0020      	movs	r0, r4
    869c:	4c18      	ldr	r4, [pc, #96]	; (8700 <prvSampleTimeNow+0xa4>)
    869e:	47a0      	blx	r4
				configASSERT( xResult );
    86a0:	2800      	cmp	r0, #0
    86a2:	d104      	bne.n	86ae <prvSampleTimeNow+0x52>
    86a4:	b672      	cpsid	i
    86a6:	e7fe      	b.n	86a6 <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    86a8:	4d16      	ldr	r5, [pc, #88]	; (8704 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    86aa:	4b17      	ldr	r3, [pc, #92]	; (8708 <prvSampleTimeNow+0xac>)
    86ac:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    86ae:	682b      	ldr	r3, [r5, #0]
    86b0:	681a      	ldr	r2, [r3, #0]
    86b2:	2a00      	cmp	r2, #0
    86b4:	d017      	beq.n	86e6 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    86b6:	68db      	ldr	r3, [r3, #12]
    86b8:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    86ba:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    86bc:	1d26      	adds	r6, r4, #4
    86be:	0030      	movs	r0, r6
    86c0:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    86c2:	0020      	movs	r0, r4
    86c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    86c6:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    86c8:	69e3      	ldr	r3, [r4, #28]
    86ca:	2b01      	cmp	r3, #1
    86cc:	d1ef      	bne.n	86ae <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    86ce:	69a3      	ldr	r3, [r4, #24]
    86d0:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    86d2:	429f      	cmp	r7, r3
    86d4:	d2dd      	bcs.n	8692 <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    86d6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    86d8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    86da:	4b0a      	ldr	r3, [pc, #40]	; (8704 <prvSampleTimeNow+0xa8>)
    86dc:	6818      	ldr	r0, [r3, #0]
    86de:	0031      	movs	r1, r6
    86e0:	4b0a      	ldr	r3, [pc, #40]	; (870c <prvSampleTimeNow+0xb0>)
    86e2:	4798      	blx	r3
    86e4:	e7e3      	b.n	86ae <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    86e6:	4a0a      	ldr	r2, [pc, #40]	; (8710 <prvSampleTimeNow+0xb4>)
    86e8:	4906      	ldr	r1, [pc, #24]	; (8704 <prvSampleTimeNow+0xa8>)
    86ea:	6810      	ldr	r0, [r2, #0]
    86ec:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    86ee:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    86f0:	2301      	movs	r3, #1
    86f2:	4642      	mov	r2, r8
    86f4:	6013      	str	r3, [r2, #0]
    86f6:	e7c2      	b.n	867e <prvSampleTimeNow+0x22>
    86f8:	00007a05 	.word	0x00007a05
    86fc:	200040bc 	.word	0x200040bc
    8700:	000085f1 	.word	0x000085f1
    8704:	2000408c 	.word	0x2000408c
    8708:	0000615b 	.word	0x0000615b
    870c:	0000612d 	.word	0x0000612d
    8710:	20004090 	.word	0x20004090

00008714 <prvTimerTask>:
{
    8714:	b5f0      	push	{r4, r5, r6, r7, lr}
    8716:	b089      	sub	sp, #36	; 0x24
		vApplicationDaemonTaskStartupHook();
    8718:	4b53      	ldr	r3, [pc, #332]	; (8868 <prvTimerTask+0x154>)
    871a:	4798      	blx	r3
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    871c:	4f53      	ldr	r7, [pc, #332]	; (886c <prvTimerTask+0x158>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    871e:	4b54      	ldr	r3, [pc, #336]	; (8870 <prvTimerTask+0x15c>)
    8720:	681b      	ldr	r3, [r3, #0]
    8722:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    8724:	2a00      	cmp	r2, #0
    8726:	d00e      	beq.n	8746 <prvTimerTask+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    8728:	68db      	ldr	r3, [r3, #12]
    872a:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    872c:	4b51      	ldr	r3, [pc, #324]	; (8874 <prvTimerTask+0x160>)
    872e:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    8730:	a805      	add	r0, sp, #20
    8732:	4b51      	ldr	r3, [pc, #324]	; (8878 <prvTimerTask+0x164>)
    8734:	4798      	blx	r3
    8736:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    8738:	9b05      	ldr	r3, [sp, #20]
    873a:	2b00      	cmp	r3, #0
    873c:	d15f      	bne.n	87fe <prvTimerTask+0xea>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    873e:	4284      	cmp	r4, r0
    8740:	d936      	bls.n	87b0 <prvTimerTask+0x9c>
    8742:	2200      	movs	r2, #0
    8744:	e00f      	b.n	8766 <prvTimerTask+0x52>
	vTaskSuspendAll();
    8746:	4b4b      	ldr	r3, [pc, #300]	; (8874 <prvTimerTask+0x160>)
    8748:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    874a:	a805      	add	r0, sp, #20
    874c:	4b4a      	ldr	r3, [pc, #296]	; (8878 <prvTimerTask+0x164>)
    874e:	4798      	blx	r3
    8750:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    8752:	9b05      	ldr	r3, [sp, #20]
    8754:	2b00      	cmp	r3, #0
    8756:	d152      	bne.n	87fe <prvTimerTask+0xea>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    8758:	4b48      	ldr	r3, [pc, #288]	; (887c <prvTimerTask+0x168>)
    875a:	681b      	ldr	r3, [r3, #0]
    875c:	681b      	ldr	r3, [r3, #0]
    875e:	425a      	negs	r2, r3
    8760:	415a      	adcs	r2, r3
    8762:	b2d2      	uxtb	r2, r2
    8764:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    8766:	1b61      	subs	r1, r4, r5
    8768:	4b45      	ldr	r3, [pc, #276]	; (8880 <prvTimerTask+0x16c>)
    876a:	6818      	ldr	r0, [r3, #0]
    876c:	4b45      	ldr	r3, [pc, #276]	; (8884 <prvTimerTask+0x170>)
    876e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    8770:	4b45      	ldr	r3, [pc, #276]	; (8888 <prvTimerTask+0x174>)
    8772:	4798      	blx	r3
    8774:	2800      	cmp	r0, #0
    8776:	d03f      	beq.n	87f8 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    8778:	4d41      	ldr	r5, [pc, #260]	; (8880 <prvTimerTask+0x16c>)
    877a:	4c44      	ldr	r4, [pc, #272]	; (888c <prvTimerTask+0x178>)
    877c:	2200      	movs	r2, #0
    877e:	a905      	add	r1, sp, #20
    8780:	6828      	ldr	r0, [r5, #0]
    8782:	47a0      	blx	r4
    8784:	2800      	cmp	r0, #0
    8786:	d0ca      	beq.n	871e <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    8788:	9b05      	ldr	r3, [sp, #20]
    878a:	9303      	str	r3, [sp, #12]
    878c:	2b00      	cmp	r3, #0
    878e:	dbf5      	blt.n	877c <prvTimerTask+0x68>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    8790:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    8792:	6973      	ldr	r3, [r6, #20]
    8794:	2b00      	cmp	r3, #0
    8796:	d001      	beq.n	879c <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    8798:	1d30      	adds	r0, r6, #4
    879a:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    879c:	a804      	add	r0, sp, #16
    879e:	4b36      	ldr	r3, [pc, #216]	; (8878 <prvTimerTask+0x164>)
    87a0:	4798      	blx	r3
			switch( xMessage.xMessageID )
    87a2:	9b05      	ldr	r3, [sp, #20]
    87a4:	2b09      	cmp	r3, #9
    87a6:	d8e9      	bhi.n	877c <prvTimerTask+0x68>
    87a8:	009b      	lsls	r3, r3, #2
    87aa:	4a39      	ldr	r2, [pc, #228]	; (8890 <prvTimerTask+0x17c>)
    87ac:	58d3      	ldr	r3, [r2, r3]
    87ae:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
    87b0:	4b35      	ldr	r3, [pc, #212]	; (8888 <prvTimerTask+0x174>)
    87b2:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    87b4:	4b2e      	ldr	r3, [pc, #184]	; (8870 <prvTimerTask+0x15c>)
    87b6:	681b      	ldr	r3, [r3, #0]
    87b8:	68db      	ldr	r3, [r3, #12]
    87ba:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    87bc:	1d30      	adds	r0, r6, #4
    87be:	4b2b      	ldr	r3, [pc, #172]	; (886c <prvTimerTask+0x158>)
    87c0:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    87c2:	69f3      	ldr	r3, [r6, #28]
    87c4:	2b01      	cmp	r3, #1
    87c6:	d003      	beq.n	87d0 <prvTimerTask+0xbc>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    87c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
    87ca:	0030      	movs	r0, r6
    87cc:	4798      	blx	r3
    87ce:	e7d3      	b.n	8778 <prvTimerTask+0x64>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    87d0:	69b3      	ldr	r3, [r6, #24]
    87d2:	18e1      	adds	r1, r4, r3
    87d4:	0023      	movs	r3, r4
    87d6:	002a      	movs	r2, r5
    87d8:	0030      	movs	r0, r6
    87da:	4d2e      	ldr	r5, [pc, #184]	; (8894 <prvTimerTask+0x180>)
    87dc:	47a8      	blx	r5
    87de:	2800      	cmp	r0, #0
    87e0:	d0f2      	beq.n	87c8 <prvTimerTask+0xb4>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    87e2:	2300      	movs	r3, #0
    87e4:	9300      	str	r3, [sp, #0]
    87e6:	0022      	movs	r2, r4
    87e8:	2100      	movs	r1, #0
    87ea:	0030      	movs	r0, r6
    87ec:	4c2a      	ldr	r4, [pc, #168]	; (8898 <prvTimerTask+0x184>)
    87ee:	47a0      	blx	r4
			configASSERT( xResult );
    87f0:	2800      	cmp	r0, #0
    87f2:	d1e9      	bne.n	87c8 <prvTimerTask+0xb4>
    87f4:	b672      	cpsid	i
    87f6:	e7fe      	b.n	87f6 <prvTimerTask+0xe2>
					portYIELD_WITHIN_API();
    87f8:	4b28      	ldr	r3, [pc, #160]	; (889c <prvTimerTask+0x188>)
    87fa:	4798      	blx	r3
    87fc:	e7bc      	b.n	8778 <prvTimerTask+0x64>
			( void ) xTaskResumeAll();
    87fe:	4b22      	ldr	r3, [pc, #136]	; (8888 <prvTimerTask+0x174>)
    8800:	4798      	blx	r3
    8802:	e7b9      	b.n	8778 <prvTimerTask+0x64>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    8804:	9b06      	ldr	r3, [sp, #24]
    8806:	69b2      	ldr	r2, [r6, #24]
    8808:	4694      	mov	ip, r2
    880a:	4463      	add	r3, ip
    880c:	0019      	movs	r1, r3
    880e:	9b06      	ldr	r3, [sp, #24]
    8810:	0002      	movs	r2, r0
    8812:	0030      	movs	r0, r6
    8814:	4c1f      	ldr	r4, [pc, #124]	; (8894 <prvTimerTask+0x180>)
    8816:	47a0      	blx	r4
    8818:	2800      	cmp	r0, #0
    881a:	d0ae      	beq.n	877a <prvTimerTask+0x66>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    881c:	0030      	movs	r0, r6
    881e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    8820:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    8822:	69f3      	ldr	r3, [r6, #28]
    8824:	2b01      	cmp	r3, #1
    8826:	d1a8      	bne.n	877a <prvTimerTask+0x66>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    8828:	9b06      	ldr	r3, [sp, #24]
    882a:	69b1      	ldr	r1, [r6, #24]
    882c:	468c      	mov	ip, r1
    882e:	4463      	add	r3, ip
    8830:	001a      	movs	r2, r3
    8832:	2300      	movs	r3, #0
    8834:	9300      	str	r3, [sp, #0]
    8836:	2100      	movs	r1, #0
    8838:	0030      	movs	r0, r6
    883a:	4c17      	ldr	r4, [pc, #92]	; (8898 <prvTimerTask+0x184>)
    883c:	47a0      	blx	r4
							configASSERT( xResult );
    883e:	2800      	cmp	r0, #0
    8840:	d19b      	bne.n	877a <prvTimerTask+0x66>
    8842:	b672      	cpsid	i
    8844:	e7fe      	b.n	8844 <prvTimerTask+0x130>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    8846:	9906      	ldr	r1, [sp, #24]
    8848:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    884a:	2900      	cmp	r1, #0
    884c:	d006      	beq.n	885c <prvTimerTask+0x148>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    884e:	1841      	adds	r1, r0, r1
    8850:	0003      	movs	r3, r0
    8852:	0002      	movs	r2, r0
    8854:	0030      	movs	r0, r6
    8856:	4c0f      	ldr	r4, [pc, #60]	; (8894 <prvTimerTask+0x180>)
    8858:	47a0      	blx	r4
    885a:	e78e      	b.n	877a <prvTimerTask+0x66>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    885c:	b672      	cpsid	i
    885e:	e7fe      	b.n	885e <prvTimerTask+0x14a>
						vPortFree( pxTimer );
    8860:	0030      	movs	r0, r6
    8862:	4b0f      	ldr	r3, [pc, #60]	; (88a0 <prvTimerTask+0x18c>)
    8864:	4798      	blx	r3
    8866:	e788      	b.n	877a <prvTimerTask+0x66>
    8868:	000128f9 	.word	0x000128f9
    886c:	0000615b 	.word	0x0000615b
    8870:	2000408c 	.word	0x2000408c
    8874:	000079f5 	.word	0x000079f5
    8878:	0000865d 	.word	0x0000865d
    887c:	20004090 	.word	0x20004090
    8880:	200040c0 	.word	0x200040c0
    8884:	0000754d 	.word	0x0000754d
    8888:	00007b9d 	.word	0x00007b9d
    888c:	00006ee1 	.word	0x00006ee1
    8890:	0001a498 	.word	0x0001a498
    8894:	00008501 	.word	0x00008501
    8898:	000085f1 	.word	0x000085f1
    889c:	00006281 	.word	0x00006281
    88a0:	000063e5 	.word	0x000063e5

000088a4 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    88a4:	b510      	push	{r4, lr}
    88a6:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
    88a8:	7c03      	ldrb	r3, [r0, #16]
    88aa:	2b00      	cmp	r3, #0
    88ac:	d005      	beq.n	88ba <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    88ae:	6883      	ldr	r3, [r0, #8]
    88b0:	1c58      	adds	r0, r3, #1
    88b2:	68e1      	ldr	r1, [r4, #12]
    88b4:	4b07      	ldr	r3, [pc, #28]	; (88d4 <advance_pointer+0x30>)
    88b6:	4798      	blx	r3
    88b8:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    88ba:	6863      	ldr	r3, [r4, #4]
    88bc:	1c58      	adds	r0, r3, #1
    88be:	68e1      	ldr	r1, [r4, #12]
    88c0:	4b04      	ldr	r3, [pc, #16]	; (88d4 <advance_pointer+0x30>)
    88c2:	4798      	blx	r3
    88c4:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    88c6:	68a3      	ldr	r3, [r4, #8]
    88c8:	1a59      	subs	r1, r3, r1
    88ca:	424a      	negs	r2, r1
    88cc:	414a      	adcs	r2, r1
    88ce:	7422      	strb	r2, [r4, #16]
 }
    88d0:	bd10      	pop	{r4, pc}
    88d2:	46c0      	nop			; (mov r8, r8)
    88d4:	00015921 	.word	0x00015921

000088d8 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    88d8:	b570      	push	{r4, r5, r6, lr}
    88da:	0005      	movs	r5, r0
    88dc:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    88de:	2014      	movs	r0, #20
    88e0:	4b04      	ldr	r3, [pc, #16]	; (88f4 <circular_buf_init+0x1c>)
    88e2:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    88e4:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
    88e6:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
    88e8:	2300      	movs	r3, #0
    88ea:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
    88ec:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
    88ee:	7403      	strb	r3, [r0, #16]
 }
    88f0:	bd70      	pop	{r4, r5, r6, pc}
    88f2:	46c0      	nop			; (mov r8, r8)
    88f4:	00012b25 	.word	0x00012b25

000088f8 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    88f8:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    88fa:	6803      	ldr	r3, [r0, #0]
    88fc:	6842      	ldr	r2, [r0, #4]
    88fe:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
    8900:	4b01      	ldr	r3, [pc, #4]	; (8908 <circular_buf_put+0x10>)
    8902:	4798      	blx	r3
 }
    8904:	bd10      	pop	{r4, pc}
    8906:	46c0      	nop			; (mov r8, r8)
    8908:	000088a5 	.word	0x000088a5

0000890c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    890c:	7c02      	ldrb	r2, [r0, #16]
    890e:	2300      	movs	r3, #0
    8910:	2a00      	cmp	r2, #0
    8912:	d105      	bne.n	8920 <circular_buf_empty+0x14>
    8914:	6843      	ldr	r3, [r0, #4]
    8916:	6880      	ldr	r0, [r0, #8]
    8918:	1a1b      	subs	r3, r3, r0
    891a:	4258      	negs	r0, r3
    891c:	4143      	adcs	r3, r0
    891e:	b2db      	uxtb	r3, r3
    8920:	0018      	movs	r0, r3
 }
    8922:	4770      	bx	lr

00008924 <circular_buf_get>:
 {
    8924:	b570      	push	{r4, r5, r6, lr}
    8926:	0004      	movs	r4, r0
    8928:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
    892a:	4b0a      	ldr	r3, [pc, #40]	; (8954 <circular_buf_get+0x30>)
    892c:	4798      	blx	r3
    892e:	2800      	cmp	r0, #0
    8930:	d10d      	bne.n	894e <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
    8932:	6823      	ldr	r3, [r4, #0]
    8934:	68a2      	ldr	r2, [r4, #8]
    8936:	5c9b      	ldrb	r3, [r3, r2]
    8938:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
    893a:	2300      	movs	r3, #0
    893c:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    893e:	68a3      	ldr	r3, [r4, #8]
    8940:	1c58      	adds	r0, r3, #1
    8942:	68e1      	ldr	r1, [r4, #12]
    8944:	4b04      	ldr	r3, [pc, #16]	; (8958 <circular_buf_get+0x34>)
    8946:	4798      	blx	r3
    8948:	60a1      	str	r1, [r4, #8]
		 r = 0;
    894a:	2000      	movs	r0, #0
 }
    894c:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
    894e:	2001      	movs	r0, #1
    8950:	4240      	negs	r0, r0
	 return r;
    8952:	e7fb      	b.n	894c <circular_buf_get+0x28>
    8954:	0000890d 	.word	0x0000890d
    8958:	00015921 	.word	0x00015921

0000895c <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    895c:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    895e:	4b06      	ldr	r3, [pc, #24]	; (8978 <usart_write_callback+0x1c>)
    8960:	6818      	ldr	r0, [r3, #0]
    8962:	4906      	ldr	r1, [pc, #24]	; (897c <usart_write_callback+0x20>)
    8964:	4b06      	ldr	r3, [pc, #24]	; (8980 <usart_write_callback+0x24>)
    8966:	4798      	blx	r3
    8968:	1c43      	adds	r3, r0, #1
    896a:	d004      	beq.n	8976 <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    896c:	2201      	movs	r2, #1
    896e:	4903      	ldr	r1, [pc, #12]	; (897c <usart_write_callback+0x20>)
    8970:	4804      	ldr	r0, [pc, #16]	; (8984 <usart_write_callback+0x28>)
    8972:	4b05      	ldr	r3, [pc, #20]	; (8988 <usart_write_callback+0x2c>)
    8974:	4798      	blx	r3
	}
	
}
    8976:	bd10      	pop	{r4, pc}
    8978:	20005bdc 	.word	0x20005bdc
    897c:	20005bd8 	.word	0x20005bd8
    8980:	00008925 	.word	0x00008925
    8984:	2000579c 	.word	0x2000579c
    8988:	0000e3c5 	.word	0x0000e3c5

0000898c <usart_read_callback>:
{
    898c:	b510      	push	{r4, lr}
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
    898e:	4c07      	ldr	r4, [pc, #28]	; (89ac <usart_read_callback+0x20>)
    8990:	7821      	ldrb	r1, [r4, #0]
    8992:	4b07      	ldr	r3, [pc, #28]	; (89b0 <usart_read_callback+0x24>)
    8994:	6818      	ldr	r0, [r3, #0]
    8996:	4b07      	ldr	r3, [pc, #28]	; (89b4 <usart_read_callback+0x28>)
    8998:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
    899a:	2201      	movs	r2, #1
    899c:	0021      	movs	r1, r4
    899e:	4806      	ldr	r0, [pc, #24]	; (89b8 <usart_read_callback+0x2c>)
    89a0:	4b06      	ldr	r3, [pc, #24]	; (89bc <usart_read_callback+0x30>)
    89a2:	4798      	blx	r3
	CliCharReadySemaphoreGiveFromISR(); //Give binary semaphore
    89a4:	4b06      	ldr	r3, [pc, #24]	; (89c0 <usart_read_callback+0x34>)
    89a6:	4798      	blx	r3
}
    89a8:	bd10      	pop	{r4, pc}
    89aa:	46c0      	nop			; (mov r8, r8)
    89ac:	200057d4 	.word	0x200057d4
    89b0:	200057d0 	.word	0x200057d0
    89b4:	000088f9 	.word	0x000088f9
    89b8:	2000579c 	.word	0x2000579c
    89bc:	0000e3e5 	.word	0x0000e3e5
    89c0:	00002c39 	.word	0x00002c39

000089c4 <InitializeSerialConsole>:
{
    89c4:	b530      	push	{r4, r5, lr}
    89c6:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
    89c8:	2580      	movs	r5, #128	; 0x80
    89ca:	00ad      	lsls	r5, r5, #2
    89cc:	0029      	movs	r1, r5
    89ce:	4836      	ldr	r0, [pc, #216]	; (8aa8 <InitializeSerialConsole+0xe4>)
    89d0:	4c36      	ldr	r4, [pc, #216]	; (8aac <InitializeSerialConsole+0xe8>)
    89d2:	47a0      	blx	r4
    89d4:	4b36      	ldr	r3, [pc, #216]	; (8ab0 <InitializeSerialConsole+0xec>)
    89d6:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
    89d8:	0029      	movs	r1, r5
    89da:	4836      	ldr	r0, [pc, #216]	; (8ab4 <InitializeSerialConsole+0xf0>)
    89dc:	47a0      	blx	r4
    89de:	4b36      	ldr	r3, [pc, #216]	; (8ab8 <InitializeSerialConsole+0xf4>)
    89e0:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    89e2:	2380      	movs	r3, #128	; 0x80
    89e4:	05db      	lsls	r3, r3, #23
    89e6:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    89e8:	2300      	movs	r3, #0
    89ea:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    89ec:	22ff      	movs	r2, #255	; 0xff
    89ee:	4669      	mov	r1, sp
    89f0:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    89f2:	2200      	movs	r2, #0
    89f4:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    89f6:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    89f8:	2101      	movs	r1, #1
    89fa:	2024      	movs	r0, #36	; 0x24
    89fc:	466c      	mov	r4, sp
    89fe:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    8a00:	3001      	adds	r0, #1
    8a02:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    8a04:	3125      	adds	r1, #37	; 0x25
    8a06:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    8a08:	3101      	adds	r1, #1
    8a0a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    8a0c:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    8a0e:	3105      	adds	r1, #5
    8a10:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    8a12:	3101      	adds	r1, #1
    8a14:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    8a16:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    8a18:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    8a1a:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    8a1c:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    8a1e:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    8a20:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    8a22:	2313      	movs	r3, #19
    8a24:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    8a26:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
    8a28:	23e1      	movs	r3, #225	; 0xe1
    8a2a:	025b      	lsls	r3, r3, #9
    8a2c:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    8a2e:	23c4      	movs	r3, #196	; 0xc4
    8a30:	039b      	lsls	r3, r3, #14
    8a32:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    8a34:	2301      	movs	r3, #1
    8a36:	425b      	negs	r3, r3
    8a38:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    8a3a:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    8a3c:	4b1f      	ldr	r3, [pc, #124]	; (8abc <InitializeSerialConsole+0xf8>)
    8a3e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    8a40:	4b1f      	ldr	r3, [pc, #124]	; (8ac0 <InitializeSerialConsole+0xfc>)
    8a42:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
    8a44:	4d1f      	ldr	r5, [pc, #124]	; (8ac4 <InitializeSerialConsole+0x100>)
    8a46:	4c20      	ldr	r4, [pc, #128]	; (8ac8 <InitializeSerialConsole+0x104>)
    8a48:	466a      	mov	r2, sp
    8a4a:	4920      	ldr	r1, [pc, #128]	; (8acc <InitializeSerialConsole+0x108>)
    8a4c:	0028      	movs	r0, r5
    8a4e:	47a0      	blx	r4
    8a50:	2800      	cmp	r0, #0
    8a52:	d1f9      	bne.n	8a48 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8a54:	4d1b      	ldr	r5, [pc, #108]	; (8ac4 <InitializeSerialConsole+0x100>)
    8a56:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    8a58:	0020      	movs	r0, r4
    8a5a:	4b1d      	ldr	r3, [pc, #116]	; (8ad0 <InitializeSerialConsole+0x10c>)
    8a5c:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8a5e:	231f      	movs	r3, #31
    8a60:	4018      	ands	r0, r3
    8a62:	3b1e      	subs	r3, #30
    8a64:	4083      	lsls	r3, r0
    8a66:	4a1b      	ldr	r2, [pc, #108]	; (8ad4 <InitializeSerialConsole+0x110>)
    8a68:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    8a6a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    8a6c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    8a6e:	2b00      	cmp	r3, #0
    8a70:	d1fc      	bne.n	8a6c <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    8a72:	6823      	ldr	r3, [r4, #0]
    8a74:	2202      	movs	r2, #2
    8a76:	4313      	orrs	r3, r2
    8a78:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
    8a7a:	4c12      	ldr	r4, [pc, #72]	; (8ac4 <InitializeSerialConsole+0x100>)
    8a7c:	2200      	movs	r2, #0
    8a7e:	4916      	ldr	r1, [pc, #88]	; (8ad8 <InitializeSerialConsole+0x114>)
    8a80:	0020      	movs	r0, r4
    8a82:	4d16      	ldr	r5, [pc, #88]	; (8adc <InitializeSerialConsole+0x118>)
    8a84:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
    8a86:	2201      	movs	r2, #1
    8a88:	4915      	ldr	r1, [pc, #84]	; (8ae0 <InitializeSerialConsole+0x11c>)
    8a8a:	0020      	movs	r0, r4
    8a8c:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    8a8e:	2231      	movs	r2, #49	; 0x31
    8a90:	5ca3      	ldrb	r3, [r4, r2]
    8a92:	2103      	movs	r1, #3
    8a94:	430b      	orrs	r3, r1
    8a96:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
    8a98:	3a30      	subs	r2, #48	; 0x30
    8a9a:	4912      	ldr	r1, [pc, #72]	; (8ae4 <InitializeSerialConsole+0x120>)
    8a9c:	0020      	movs	r0, r4
    8a9e:	4b12      	ldr	r3, [pc, #72]	; (8ae8 <InitializeSerialConsole+0x124>)
    8aa0:	4798      	blx	r3
}
    8aa2:	b011      	add	sp, #68	; 0x44
    8aa4:	bd30      	pop	{r4, r5, pc}
    8aa6:	46c0      	nop			; (mov r8, r8)
    8aa8:	200059d8 	.word	0x200059d8
    8aac:	000088d9 	.word	0x000088d9
    8ab0:	200057d0 	.word	0x200057d0
    8ab4:	200057d8 	.word	0x200057d8
    8ab8:	20005bdc 	.word	0x20005bdc
    8abc:	002a0003 	.word	0x002a0003
    8ac0:	002b0003 	.word	0x002b0003
    8ac4:	2000579c 	.word	0x2000579c
    8ac8:	0000dfdd 	.word	0x0000dfdd
    8acc:	42001800 	.word	0x42001800
    8ad0:	0000d989 	.word	0x0000d989
    8ad4:	e000e100 	.word	0xe000e100
    8ad8:	0000895d 	.word	0x0000895d
    8adc:	0000e3ad 	.word	0x0000e3ad
    8ae0:	0000898d 	.word	0x0000898d
    8ae4:	200057d4 	.word	0x200057d4
    8ae8:	0000e3e5 	.word	0x0000e3e5

00008aec <SerialConsoleWriteString>:
{
    8aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    8aee:	46c6      	mov	lr, r8
    8af0:	b500      	push	{lr}
    8af2:	0005      	movs	r5, r0
vTaskSuspendAll();
    8af4:	4b14      	ldr	r3, [pc, #80]	; (8b48 <SerialConsoleWriteString+0x5c>)
    8af6:	4798      	blx	r3
    8af8:	2400      	movs	r4, #0
	if(string != NULL)
    8afa:	2d00      	cmp	r5, #0
    8afc:	d012      	beq.n	8b24 <SerialConsoleWriteString+0x38>
		for (size_t iter = 0; iter < strlen(string); iter++)
    8afe:	4e13      	ldr	r6, [pc, #76]	; (8b4c <SerialConsoleWriteString+0x60>)
			circular_buf_put(cbufTx, string[iter]);
    8b00:	4f13      	ldr	r7, [pc, #76]	; (8b50 <SerialConsoleWriteString+0x64>)
    8b02:	4b14      	ldr	r3, [pc, #80]	; (8b54 <SerialConsoleWriteString+0x68>)
    8b04:	4698      	mov	r8, r3
    8b06:	e003      	b.n	8b10 <SerialConsoleWriteString+0x24>
    8b08:	5d29      	ldrb	r1, [r5, r4]
    8b0a:	6838      	ldr	r0, [r7, #0]
    8b0c:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
    8b0e:	3401      	adds	r4, #1
    8b10:	0028      	movs	r0, r5
    8b12:	47b0      	blx	r6
    8b14:	4284      	cmp	r4, r0
    8b16:	d3f7      	bcc.n	8b08 <SerialConsoleWriteString+0x1c>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
    8b18:	2101      	movs	r1, #1
    8b1a:	480f      	ldr	r0, [pc, #60]	; (8b58 <SerialConsoleWriteString+0x6c>)
    8b1c:	4b0f      	ldr	r3, [pc, #60]	; (8b5c <SerialConsoleWriteString+0x70>)
    8b1e:	4798      	blx	r3
    8b20:	2800      	cmp	r0, #0
    8b22:	d004      	beq.n	8b2e <SerialConsoleWriteString+0x42>
xTaskResumeAll();
    8b24:	4b0e      	ldr	r3, [pc, #56]	; (8b60 <SerialConsoleWriteString+0x74>)
    8b26:	4798      	blx	r3
}
    8b28:	bc04      	pop	{r2}
    8b2a:	4690      	mov	r8, r2
    8b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
    8b2e:	4c0d      	ldr	r4, [pc, #52]	; (8b64 <SerialConsoleWriteString+0x78>)
    8b30:	4b07      	ldr	r3, [pc, #28]	; (8b50 <SerialConsoleWriteString+0x64>)
    8b32:	6818      	ldr	r0, [r3, #0]
    8b34:	0021      	movs	r1, r4
    8b36:	4b0c      	ldr	r3, [pc, #48]	; (8b68 <SerialConsoleWriteString+0x7c>)
    8b38:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    8b3a:	2201      	movs	r2, #1
    8b3c:	0021      	movs	r1, r4
    8b3e:	4806      	ldr	r0, [pc, #24]	; (8b58 <SerialConsoleWriteString+0x6c>)
    8b40:	4b0a      	ldr	r3, [pc, #40]	; (8b6c <SerialConsoleWriteString+0x80>)
    8b42:	4798      	blx	r3
    8b44:	e7ee      	b.n	8b24 <SerialConsoleWriteString+0x38>
    8b46:	46c0      	nop			; (mov r8, r8)
    8b48:	000079f5 	.word	0x000079f5
    8b4c:	0001381b 	.word	0x0001381b
    8b50:	20005bdc 	.word	0x20005bdc
    8b54:	000088f9 	.word	0x000088f9
    8b58:	2000579c 	.word	0x2000579c
    8b5c:	0000e405 	.word	0x0000e405
    8b60:	00007b9d 	.word	0x00007b9d
    8b64:	20005bd8 	.word	0x20005bd8
    8b68:	00008925 	.word	0x00008925
    8b6c:	0000e3c5 	.word	0x0000e3c5

00008b70 <SerialConsoleReadCharacter>:
{
    8b70:	b510      	push	{r4, lr}
    8b72:	0004      	movs	r4, r0
	vTaskSuspendAll();
    8b74:	4b05      	ldr	r3, [pc, #20]	; (8b8c <SerialConsoleReadCharacter+0x1c>)
    8b76:	4798      	blx	r3
	int a = circular_buf_get(cbufRx, (uint8_t*) rxChar);
    8b78:	4b05      	ldr	r3, [pc, #20]	; (8b90 <SerialConsoleReadCharacter+0x20>)
    8b7a:	6818      	ldr	r0, [r3, #0]
    8b7c:	0021      	movs	r1, r4
    8b7e:	4b05      	ldr	r3, [pc, #20]	; (8b94 <SerialConsoleReadCharacter+0x24>)
    8b80:	4798      	blx	r3
    8b82:	0004      	movs	r4, r0
	xTaskResumeAll();
    8b84:	4b04      	ldr	r3, [pc, #16]	; (8b98 <SerialConsoleReadCharacter+0x28>)
    8b86:	4798      	blx	r3
}
    8b88:	0020      	movs	r0, r4
    8b8a:	bd10      	pop	{r4, pc}
    8b8c:	000079f5 	.word	0x000079f5
    8b90:	200057d0 	.word	0x200057d0
    8b94:	00008925 	.word	0x00008925
    8b98:	00007b9d 	.word	0x00007b9d

00008b9c <LogMessage>:
{
    8b9c:	b40e      	push	{r1, r2, r3}
    8b9e:	b530      	push	{r4, r5, lr}
    8ba0:	b082      	sub	sp, #8
return currentDebugLevel;
    8ba2:	4b0a      	ldr	r3, [pc, #40]	; (8bcc <LogMessage+0x30>)
if(getLogLevel() <= level){
    8ba4:	781b      	ldrb	r3, [r3, #0]
    8ba6:	4283      	cmp	r3, r0
    8ba8:	d904      	bls.n	8bb4 <LogMessage+0x18>
};
    8baa:	b002      	add	sp, #8
    8bac:	bc30      	pop	{r4, r5}
    8bae:	bc08      	pop	{r3}
    8bb0:	b003      	add	sp, #12
    8bb2:	4718      	bx	r3
	va_start(ap, format);
    8bb4:	ab06      	add	r3, sp, #24
    8bb6:	9301      	str	r3, [sp, #4]
	vsnprintf(debugBuffer, 127, format, ap);
    8bb8:	4c05      	ldr	r4, [pc, #20]	; (8bd0 <LogMessage+0x34>)
    8bba:	9a05      	ldr	r2, [sp, #20]
    8bbc:	217f      	movs	r1, #127	; 0x7f
    8bbe:	0020      	movs	r0, r4
    8bc0:	4d04      	ldr	r5, [pc, #16]	; (8bd4 <LogMessage+0x38>)
    8bc2:	47a8      	blx	r5
	SerialConsoleWriteString(debugBuffer);
    8bc4:	0020      	movs	r0, r4
    8bc6:	4b04      	ldr	r3, [pc, #16]	; (8bd8 <LogMessage+0x3c>)
    8bc8:	4798      	blx	r3
};
    8bca:	e7ee      	b.n	8baa <LogMessage+0xe>
    8bcc:	200040c8 	.word	0x200040c8
    8bd0:	2000571c 	.word	0x2000571c
    8bd4:	00013a55 	.word	0x00013a55
    8bd8:	00008aed 	.word	0x00008aed

00008bdc <LogMessageDebug>:
{
    8bdc:	b40f      	push	{r0, r1, r2, r3}
    8bde:	b510      	push	{r4, lr}
LogMessage(LOG_DEBUG_LVL, format);
    8be0:	9902      	ldr	r1, [sp, #8]
    8be2:	2001      	movs	r0, #1
    8be4:	4b02      	ldr	r3, [pc, #8]	; (8bf0 <LogMessageDebug+0x14>)
    8be6:	4798      	blx	r3
};
    8be8:	bc10      	pop	{r4}
    8bea:	bc08      	pop	{r3}
    8bec:	b004      	add	sp, #16
    8bee:	4718      	bx	r3
    8bf0:	00008b9d 	.word	0x00008b9d

00008bf4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    8bf4:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    8bf6:	4b06      	ldr	r3, [pc, #24]	; (8c10 <sd_mmc_configure_slot+0x1c>)
    8bf8:	6819      	ldr	r1, [r3, #0]
    8bfa:	7f8b      	ldrb	r3, [r1, #30]
    8bfc:	1e5a      	subs	r2, r3, #1
    8bfe:	4193      	sbcs	r3, r2
    8c00:	b2db      	uxtb	r3, r3
    8c02:	7b4a      	ldrb	r2, [r1, #13]
    8c04:	6809      	ldr	r1, [r1, #0]
    8c06:	4803      	ldr	r0, [pc, #12]	; (8c14 <sd_mmc_configure_slot+0x20>)
    8c08:	7800      	ldrb	r0, [r0, #0]
    8c0a:	4c03      	ldr	r4, [pc, #12]	; (8c18 <sd_mmc_configure_slot+0x24>)
    8c0c:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
    8c0e:	bd10      	pop	{r4, pc}
    8c10:	200040cc 	.word	0x200040cc
    8c14:	200040f4 	.word	0x200040f4
    8c18:	00009881 	.word	0x00009881

00008c1c <sd_mmc_select_slot>:
{
    8c1c:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
    8c1e:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
    8c20:	2800      	cmp	r0, #0
    8c22:	d001      	beq.n	8c28 <sd_mmc_select_slot+0xc>
}
    8c24:	0018      	movs	r0, r3
    8c26:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    8c28:	4b0e      	ldr	r3, [pc, #56]	; (8c64 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    8c2a:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    8c2c:	3b03      	subs	r3, #3
    8c2e:	2b01      	cmp	r3, #1
    8c30:	d90d      	bls.n	8c4e <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
    8c32:	2200      	movs	r2, #0
    8c34:	4b0c      	ldr	r3, [pc, #48]	; (8c68 <sd_mmc_select_slot+0x4c>)
    8c36:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    8c38:	4c0a      	ldr	r4, [pc, #40]	; (8c64 <sd_mmc_select_slot+0x48>)
    8c3a:	4b0c      	ldr	r3, [pc, #48]	; (8c6c <sd_mmc_select_slot+0x50>)
    8c3c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
    8c3e:	4b0c      	ldr	r3, [pc, #48]	; (8c70 <sd_mmc_select_slot+0x54>)
    8c40:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    8c42:	7aa3      	ldrb	r3, [r4, #10]
    8c44:	3b02      	subs	r3, #2
    8c46:	4258      	negs	r0, r3
    8c48:	4143      	adcs	r3, r0
    8c4a:	b2db      	uxtb	r3, r3
    8c4c:	e7ea      	b.n	8c24 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    8c4e:	4b05      	ldr	r3, [pc, #20]	; (8c64 <sd_mmc_select_slot+0x48>)
    8c50:	2202      	movs	r2, #2
    8c52:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    8c54:	4a07      	ldr	r2, [pc, #28]	; (8c74 <sd_mmc_select_slot+0x58>)
    8c56:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
    8c58:	2201      	movs	r2, #1
    8c5a:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
    8c5c:	2200      	movs	r2, #0
    8c5e:	779a      	strb	r2, [r3, #30]
    8c60:	e7e7      	b.n	8c32 <sd_mmc_select_slot+0x16>
    8c62:	46c0      	nop			; (mov r8, r8)
    8c64:	200040d0 	.word	0x200040d0
    8c68:	200040f4 	.word	0x200040f4
    8c6c:	200040cc 	.word	0x200040cc
    8c70:	00008bf5 	.word	0x00008bf5
    8c74:	00061a80 	.word	0x00061a80

00008c78 <sd_mmc_cmd13>:
{
    8c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c7a:	4d09      	ldr	r5, [pc, #36]	; (8ca0 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    8c7c:	4f09      	ldr	r7, [pc, #36]	; (8ca4 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
    8c7e:	4e0a      	ldr	r6, [pc, #40]	; (8ca8 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    8c80:	2100      	movs	r1, #0
    8c82:	480a      	ldr	r0, [pc, #40]	; (8cac <sd_mmc_cmd13+0x34>)
    8c84:	47b8      	blx	r7
    8c86:	1e04      	subs	r4, r0, #0
    8c88:	d007      	beq.n	8c9a <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
    8c8a:	47b0      	blx	r6
    8c8c:	23ff      	movs	r3, #255	; 0xff
    8c8e:	4203      	tst	r3, r0
    8c90:	d003      	beq.n	8c9a <sd_mmc_cmd13+0x22>
    8c92:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
    8c94:	2d00      	cmp	r5, #0
    8c96:	d1f3      	bne.n	8c80 <sd_mmc_cmd13+0x8>
			return false;
    8c98:	2400      	movs	r4, #0
}
    8c9a:	0020      	movs	r0, r4
    8c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c9e:	46c0      	nop			; (mov r8, r8)
    8ca0:	00030d41 	.word	0x00030d41
    8ca4:	00009ac5 	.word	0x00009ac5
    8ca8:	00009add 	.word	0x00009add
    8cac:	00001b0d 	.word	0x00001b0d

00008cb0 <sd_mmc_cmd9_spi>:
{
    8cb0:	b510      	push	{r4, lr}
    8cb2:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    8cb4:	4b0c      	ldr	r3, [pc, #48]	; (8ce8 <sd_mmc_cmd9_spi+0x38>)
    8cb6:	681b      	ldr	r3, [r3, #0]
    8cb8:	8919      	ldrh	r1, [r3, #8]
    8cba:	0409      	lsls	r1, r1, #16
    8cbc:	2301      	movs	r3, #1
    8cbe:	9300      	str	r3, [sp, #0]
    8cc0:	2210      	movs	r2, #16
    8cc2:	480a      	ldr	r0, [pc, #40]	; (8cec <sd_mmc_cmd9_spi+0x3c>)
    8cc4:	4c0a      	ldr	r4, [pc, #40]	; (8cf0 <sd_mmc_cmd9_spi+0x40>)
    8cc6:	47a0      	blx	r4
    8cc8:	2800      	cmp	r0, #0
    8cca:	d101      	bne.n	8cd0 <sd_mmc_cmd9_spi+0x20>
}
    8ccc:	b002      	add	sp, #8
    8cce:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    8cd0:	4b05      	ldr	r3, [pc, #20]	; (8ce8 <sd_mmc_cmd9_spi+0x38>)
    8cd2:	6818      	ldr	r0, [r3, #0]
    8cd4:	300e      	adds	r0, #14
    8cd6:	2101      	movs	r1, #1
    8cd8:	4b06      	ldr	r3, [pc, #24]	; (8cf4 <sd_mmc_cmd9_spi+0x44>)
    8cda:	4798      	blx	r3
    8cdc:	2800      	cmp	r0, #0
    8cde:	d0f5      	beq.n	8ccc <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
    8ce0:	4b05      	ldr	r3, [pc, #20]	; (8cf8 <sd_mmc_cmd9_spi+0x48>)
    8ce2:	4798      	blx	r3
    8ce4:	e7f2      	b.n	8ccc <sd_mmc_cmd9_spi+0x1c>
    8ce6:	46c0      	nop			; (mov r8, r8)
    8ce8:	200040cc 	.word	0x200040cc
    8cec:	00081109 	.word	0x00081109
    8cf0:	00009935 	.word	0x00009935
    8cf4:	00009b61 	.word	0x00009b61
    8cf8:	00009bed 	.word	0x00009bed

00008cfc <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    8cfc:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    8cfe:	4b04      	ldr	r3, [pc, #16]	; (8d10 <sd_mmc_deselect_slot+0x14>)
    8d00:	781b      	ldrb	r3, [r3, #0]
    8d02:	2b00      	cmp	r3, #0
    8d04:	d000      	beq.n	8d08 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
    8d06:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
    8d08:	2000      	movs	r0, #0
    8d0a:	4b02      	ldr	r3, [pc, #8]	; (8d14 <sd_mmc_deselect_slot+0x18>)
    8d0c:	4798      	blx	r3
}
    8d0e:	e7fa      	b.n	8d06 <sd_mmc_deselect_slot+0xa>
    8d10:	200040f4 	.word	0x200040f4
    8d14:	000098d5 	.word	0x000098d5

00008d18 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    8d18:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    8d1a:	2204      	movs	r2, #4
    8d1c:	4b03      	ldr	r3, [pc, #12]	; (8d2c <sd_mmc_init+0x14>)
    8d1e:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    8d20:	32fb      	adds	r2, #251	; 0xfb
    8d22:	4b03      	ldr	r3, [pc, #12]	; (8d30 <sd_mmc_init+0x18>)
    8d24:	701a      	strb	r2, [r3, #0]
	driver_init();
    8d26:	4b03      	ldr	r3, [pc, #12]	; (8d34 <sd_mmc_init+0x1c>)
    8d28:	4798      	blx	r3
}
    8d2a:	bd10      	pop	{r4, pc}
    8d2c:	200040d0 	.word	0x200040d0
    8d30:	200040f4 	.word	0x200040f4
    8d34:	0000979d 	.word	0x0000979d

00008d38 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    8d38:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d3a:	46c6      	mov	lr, r8
    8d3c:	b500      	push	{lr}
    8d3e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    8d40:	4bcb      	ldr	r3, [pc, #812]	; (9070 <sd_mmc_check+0x338>)
    8d42:	4798      	blx	r3
    8d44:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    8d46:	2801      	cmp	r0, #1
    8d48:	d006      	beq.n	8d58 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
    8d4a:	4bca      	ldr	r3, [pc, #808]	; (9074 <sd_mmc_check+0x33c>)
    8d4c:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    8d4e:	0020      	movs	r0, r4
    8d50:	b008      	add	sp, #32
    8d52:	bc04      	pop	{r2}
    8d54:	4690      	mov	r8, r2
    8d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
    8d58:	4bc7      	ldr	r3, [pc, #796]	; (9078 <sd_mmc_check+0x340>)
    8d5a:	681b      	ldr	r3, [r3, #0]
    8d5c:	2201      	movs	r2, #1
    8d5e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    8d60:	2200      	movs	r2, #0
    8d62:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    8d64:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
    8d66:	4bc5      	ldr	r3, [pc, #788]	; (907c <sd_mmc_check+0x344>)
    8d68:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    8d6a:	2100      	movs	r1, #0
    8d6c:	2088      	movs	r0, #136	; 0x88
    8d6e:	0140      	lsls	r0, r0, #5
    8d70:	4bc3      	ldr	r3, [pc, #780]	; (9080 <sd_mmc_check+0x348>)
    8d72:	4798      	blx	r3
    8d74:	2800      	cmp	r0, #0
    8d76:	d107      	bne.n	8d88 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    8d78:	4bbf      	ldr	r3, [pc, #764]	; (9078 <sd_mmc_check+0x340>)
    8d7a:	681b      	ldr	r3, [r3, #0]
    8d7c:	2203      	movs	r2, #3
    8d7e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    8d80:	4bbc      	ldr	r3, [pc, #752]	; (9074 <sd_mmc_check+0x33c>)
    8d82:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    8d84:	2403      	movs	r4, #3
    8d86:	e7e2      	b.n	8d4e <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    8d88:	21d5      	movs	r1, #213	; 0xd5
    8d8a:	0049      	lsls	r1, r1, #1
    8d8c:	48bd      	ldr	r0, [pc, #756]	; (9084 <sd_mmc_check+0x34c>)
    8d8e:	4bbc      	ldr	r3, [pc, #752]	; (9080 <sd_mmc_check+0x348>)
    8d90:	4798      	blx	r3
	*v2 = 0;
    8d92:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    8d94:	2800      	cmp	r0, #0
    8d96:	d125      	bne.n	8de4 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    8d98:	4bb7      	ldr	r3, [pc, #732]	; (9078 <sd_mmc_check+0x340>)
    8d9a:	681b      	ldr	r3, [r3, #0]
    8d9c:	7adb      	ldrb	r3, [r3, #11]
    8d9e:	07db      	lsls	r3, r3, #31
    8da0:	d500      	bpl.n	8da4 <sd_mmc_check+0x6c>
    8da2:	e1eb      	b.n	917c <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    8da4:	4bb4      	ldr	r3, [pc, #720]	; (9078 <sd_mmc_check+0x340>)
    8da6:	681b      	ldr	r3, [r3, #0]
    8da8:	7ada      	ldrb	r2, [r3, #11]
    8daa:	2309      	movs	r3, #9
    8dac:	4013      	ands	r3, r2
    8dae:	2b01      	cmp	r3, #1
    8db0:	d10f      	bne.n	8dd2 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    8db2:	2180      	movs	r1, #128	; 0x80
    8db4:	0089      	lsls	r1, r1, #2
    8db6:	48b4      	ldr	r0, [pc, #720]	; (9088 <sd_mmc_check+0x350>)
    8db8:	4bb1      	ldr	r3, [pc, #708]	; (9080 <sd_mmc_check+0x348>)
    8dba:	4798      	blx	r3
    8dbc:	2800      	cmp	r0, #0
    8dbe:	d0db      	beq.n	8d78 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    8dc0:	4bad      	ldr	r3, [pc, #692]	; (9078 <sd_mmc_check+0x340>)
    8dc2:	681b      	ldr	r3, [r3, #0]
    8dc4:	7adb      	ldrb	r3, [r3, #11]
    8dc6:	07db      	lsls	r3, r3, #31
    8dc8:	d503      	bpl.n	8dd2 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
    8dca:	4bb0      	ldr	r3, [pc, #704]	; (908c <sd_mmc_check+0x354>)
    8dcc:	4798      	blx	r3
    8dce:	2800      	cmp	r0, #0
    8dd0:	d0d2      	beq.n	8d78 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    8dd2:	4baf      	ldr	r3, [pc, #700]	; (9090 <sd_mmc_check+0x358>)
    8dd4:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    8dd6:	4ba8      	ldr	r3, [pc, #672]	; (9078 <sd_mmc_check+0x340>)
    8dd8:	681b      	ldr	r3, [r3, #0]
    8dda:	2200      	movs	r2, #0
    8ddc:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    8dde:	4ba5      	ldr	r3, [pc, #660]	; (9074 <sd_mmc_check+0x33c>)
    8de0:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    8de2:	e7b4      	b.n	8d4e <sd_mmc_check+0x16>
	resp = driver_get_response();
    8de4:	4bab      	ldr	r3, [pc, #684]	; (9094 <sd_mmc_check+0x35c>)
    8de6:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    8de8:	1c43      	adds	r3, r0, #1
    8dea:	d100      	bne.n	8dee <sd_mmc_check+0xb6>
    8dec:	e1c4      	b.n	9178 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    8dee:	0500      	lsls	r0, r0, #20
    8df0:	0d00      	lsrs	r0, r0, #20
    8df2:	23d5      	movs	r3, #213	; 0xd5
    8df4:	005b      	lsls	r3, r3, #1
	*v2 = 1;
    8df6:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    8df8:	4298      	cmp	r0, r3
    8dfa:	d1bd      	bne.n	8d78 <sd_mmc_check+0x40>
    8dfc:	e7cc      	b.n	8d98 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    8dfe:	2100      	movs	r1, #0
    8e00:	48a5      	ldr	r0, [pc, #660]	; (9098 <sd_mmc_check+0x360>)
    8e02:	4b9f      	ldr	r3, [pc, #636]	; (9080 <sd_mmc_check+0x348>)
    8e04:	4798      	blx	r3
    8e06:	2800      	cmp	r0, #0
    8e08:	d119      	bne.n	8e3e <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
    8e0a:	4b9b      	ldr	r3, [pc, #620]	; (9078 <sd_mmc_check+0x340>)
    8e0c:	681b      	ldr	r3, [r3, #0]
    8e0e:	2202      	movs	r2, #2
    8e10:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    8e12:	2100      	movs	r1, #0
    8e14:	2088      	movs	r0, #136	; 0x88
    8e16:	0140      	lsls	r0, r0, #5
    8e18:	4b99      	ldr	r3, [pc, #612]	; (9080 <sd_mmc_check+0x348>)
    8e1a:	4798      	blx	r3
    8e1c:	2800      	cmp	r0, #0
    8e1e:	d0ab      	beq.n	8d78 <sd_mmc_check+0x40>
    8e20:	4d9e      	ldr	r5, [pc, #632]	; (909c <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    8e22:	4f97      	ldr	r7, [pc, #604]	; (9080 <sd_mmc_check+0x348>)
		resp = driver_get_response();
    8e24:	4e9b      	ldr	r6, [pc, #620]	; (9094 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    8e26:	2100      	movs	r1, #0
    8e28:	489d      	ldr	r0, [pc, #628]	; (90a0 <sd_mmc_check+0x368>)
    8e2a:	47b8      	blx	r7
    8e2c:	2800      	cmp	r0, #0
    8e2e:	d0a3      	beq.n	8d78 <sd_mmc_check+0x40>
		resp = driver_get_response();
    8e30:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    8e32:	07c3      	lsls	r3, r0, #31
    8e34:	d57d      	bpl.n	8f32 <sd_mmc_check+0x1fa>
    8e36:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    8e38:	2d00      	cmp	r5, #0
    8e3a:	d1f4      	bne.n	8e26 <sd_mmc_check+0xee>
    8e3c:	e79c      	b.n	8d78 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
    8e3e:	4b95      	ldr	r3, [pc, #596]	; (9094 <sd_mmc_check+0x35c>)
    8e40:	4798      	blx	r3
    8e42:	0043      	lsls	r3, r0, #1
    8e44:	d505      	bpl.n	8e52 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
    8e46:	4b8c      	ldr	r3, [pc, #560]	; (9078 <sd_mmc_check+0x340>)
    8e48:	681a      	ldr	r2, [r3, #0]
    8e4a:	7ad3      	ldrb	r3, [r2, #11]
    8e4c:	2108      	movs	r1, #8
    8e4e:	430b      	orrs	r3, r1
    8e50:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    8e52:	2100      	movs	r1, #0
    8e54:	4893      	ldr	r0, [pc, #588]	; (90a4 <sd_mmc_check+0x36c>)
    8e56:	4b8a      	ldr	r3, [pc, #552]	; (9080 <sd_mmc_check+0x348>)
    8e58:	4798      	blx	r3
    8e5a:	2800      	cmp	r0, #0
    8e5c:	d08c      	beq.n	8d78 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    8e5e:	4b86      	ldr	r3, [pc, #536]	; (9078 <sd_mmc_check+0x340>)
    8e60:	681b      	ldr	r3, [r3, #0]
    8e62:	7adb      	ldrb	r3, [r3, #11]
    8e64:	07da      	lsls	r2, r3, #31
    8e66:	d400      	bmi.n	8e6a <sd_mmc_check+0x132>
    8e68:	e1a4      	b.n	91b4 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
    8e6a:	4b8f      	ldr	r3, [pc, #572]	; (90a8 <sd_mmc_check+0x370>)
    8e6c:	4798      	blx	r3
    8e6e:	2800      	cmp	r0, #0
    8e70:	d082      	beq.n	8d78 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    8e72:	4b81      	ldr	r3, [pc, #516]	; (9078 <sd_mmc_check+0x340>)
    8e74:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    8e76:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    8e78:	2107      	movs	r1, #7
    8e7a:	4019      	ands	r1, r3
    8e7c:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
    8e7e:	488b      	ldr	r0, [pc, #556]	; (90ac <sd_mmc_check+0x374>)
    8e80:	5808      	ldr	r0, [r1, r0]
    8e82:	21fa      	movs	r1, #250	; 0xfa
    8e84:	0089      	lsls	r1, r1, #2
    8e86:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    8e88:	065b      	lsls	r3, r3, #25
    8e8a:	0f1b      	lsrs	r3, r3, #28
    8e8c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    8e8e:	4888      	ldr	r0, [pc, #544]	; (90b0 <sd_mmc_check+0x378>)
    8e90:	581b      	ldr	r3, [r3, r0]
    8e92:	434b      	muls	r3, r1
    8e94:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    8e96:	7b93      	ldrb	r3, [r2, #14]
    8e98:	099b      	lsrs	r3, r3, #6
    8e9a:	d000      	beq.n	8e9e <sd_mmc_check+0x166>
    8e9c:	e13c      	b.n	9118 <sd_mmc_check+0x3e0>
    8e9e:	7d91      	ldrb	r1, [r2, #22]
    8ea0:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    8ea2:	7d53      	ldrb	r3, [r2, #21]
    8ea4:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    8ea6:	7d10      	ldrb	r0, [r2, #20]
    8ea8:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    8eaa:	4303      	orrs	r3, r0
    8eac:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    8eae:	7e10      	ldrb	r0, [r2, #24]
    8eb0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    8eb2:	7dd1      	ldrb	r1, [r2, #23]
    8eb4:	0049      	lsls	r1, r1, #1
    8eb6:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
    8eb8:	051b      	lsls	r3, r3, #20
    8eba:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    8ebc:	3301      	adds	r3, #1
    8ebe:	2107      	movs	r1, #7
    8ec0:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    8ec2:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    8ec4:	408b      	lsls	r3, r1
    8ec6:	7cd0      	ldrb	r0, [r2, #19]
    8ec8:	210f      	movs	r1, #15
    8eca:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    8ecc:	408b      	lsls	r3, r1
				/ 1024;
    8ece:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    8ed0:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    8ed2:	8911      	ldrh	r1, [r2, #8]
    8ed4:	0409      	lsls	r1, r1, #16
    8ed6:	4877      	ldr	r0, [pc, #476]	; (90b4 <sd_mmc_check+0x37c>)
    8ed8:	4b69      	ldr	r3, [pc, #420]	; (9080 <sd_mmc_check+0x348>)
    8eda:	4798      	blx	r3
    8edc:	2800      	cmp	r0, #0
    8ede:	d100      	bne.n	8ee2 <sd_mmc_check+0x1aa>
    8ee0:	e74a      	b.n	8d78 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    8ee2:	2301      	movs	r3, #1
    8ee4:	9300      	str	r3, [sp, #0]
    8ee6:	2208      	movs	r2, #8
    8ee8:	2100      	movs	r1, #0
    8eea:	4873      	ldr	r0, [pc, #460]	; (90b8 <sd_mmc_check+0x380>)
    8eec:	4d73      	ldr	r5, [pc, #460]	; (90bc <sd_mmc_check+0x384>)
    8eee:	47a8      	blx	r5
    8ef0:	2800      	cmp	r0, #0
    8ef2:	d100      	bne.n	8ef6 <sd_mmc_check+0x1be>
    8ef4:	e740      	b.n	8d78 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
    8ef6:	2101      	movs	r1, #1
    8ef8:	a806      	add	r0, sp, #24
    8efa:	4b71      	ldr	r3, [pc, #452]	; (90c0 <sd_mmc_check+0x388>)
    8efc:	4798      	blx	r3
    8efe:	2800      	cmp	r0, #0
    8f00:	d100      	bne.n	8f04 <sd_mmc_check+0x1cc>
    8f02:	e739      	b.n	8d78 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
    8f04:	4b6f      	ldr	r3, [pc, #444]	; (90c4 <sd_mmc_check+0x38c>)
    8f06:	4798      	blx	r3
    8f08:	2800      	cmp	r0, #0
    8f0a:	d100      	bne.n	8f0e <sd_mmc_check+0x1d6>
    8f0c:	e734      	b.n	8d78 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    8f0e:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
    8f10:	781b      	ldrb	r3, [r3, #0]
    8f12:	220f      	movs	r2, #15
    8f14:	4013      	ands	r3, r2
    8f16:	2b01      	cmp	r3, #1
    8f18:	d100      	bne.n	8f1c <sd_mmc_check+0x1e4>
    8f1a:	e119      	b.n	9150 <sd_mmc_check+0x418>
    8f1c:	2b00      	cmp	r3, #0
    8f1e:	d100      	bne.n	8f22 <sd_mmc_check+0x1ea>
    8f20:	e109      	b.n	9136 <sd_mmc_check+0x3fe>
    8f22:	2b02      	cmp	r3, #2
    8f24:	d100      	bne.n	8f28 <sd_mmc_check+0x1f0>
    8f26:	e118      	b.n	915a <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    8f28:	4b53      	ldr	r3, [pc, #332]	; (9078 <sd_mmc_check+0x340>)
    8f2a:	681b      	ldr	r3, [r3, #0]
    8f2c:	2210      	movs	r2, #16
    8f2e:	731a      	strb	r2, [r3, #12]
    8f30:	e105      	b.n	913e <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    8f32:	2100      	movs	r1, #0
    8f34:	4858      	ldr	r0, [pc, #352]	; (9098 <sd_mmc_check+0x360>)
    8f36:	4b52      	ldr	r3, [pc, #328]	; (9080 <sd_mmc_check+0x348>)
    8f38:	4798      	blx	r3
    8f3a:	2800      	cmp	r0, #0
    8f3c:	d100      	bne.n	8f40 <sd_mmc_check+0x208>
    8f3e:	e71b      	b.n	8d78 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    8f40:	4b54      	ldr	r3, [pc, #336]	; (9094 <sd_mmc_check+0x35c>)
    8f42:	4798      	blx	r3
    8f44:	23c0      	movs	r3, #192	; 0xc0
    8f46:	05db      	lsls	r3, r3, #23
    8f48:	4018      	ands	r0, r3
    8f4a:	2380      	movs	r3, #128	; 0x80
    8f4c:	05db      	lsls	r3, r3, #23
    8f4e:	4298      	cmp	r0, r3
    8f50:	d105      	bne.n	8f5e <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
    8f52:	4b49      	ldr	r3, [pc, #292]	; (9078 <sd_mmc_check+0x340>)
    8f54:	681a      	ldr	r2, [r3, #0]
    8f56:	7ad1      	ldrb	r1, [r2, #11]
    8f58:	2308      	movs	r3, #8
    8f5a:	430b      	orrs	r3, r1
    8f5c:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    8f5e:	2100      	movs	r1, #0
    8f60:	4850      	ldr	r0, [pc, #320]	; (90a4 <sd_mmc_check+0x36c>)
    8f62:	4b47      	ldr	r3, [pc, #284]	; (9080 <sd_mmc_check+0x348>)
    8f64:	4798      	blx	r3
    8f66:	2800      	cmp	r0, #0
    8f68:	d100      	bne.n	8f6c <sd_mmc_check+0x234>
    8f6a:	e705      	b.n	8d78 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
    8f6c:	4b4e      	ldr	r3, [pc, #312]	; (90a8 <sd_mmc_check+0x370>)
    8f6e:	4798      	blx	r3
    8f70:	2800      	cmp	r0, #0
    8f72:	d100      	bne.n	8f76 <sd_mmc_check+0x23e>
    8f74:	e700      	b.n	8d78 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    8f76:	4b40      	ldr	r3, [pc, #256]	; (9078 <sd_mmc_check+0x340>)
    8f78:	681a      	ldr	r2, [r3, #0]
    8f7a:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
    8f7c:	069b      	lsls	r3, r3, #26
    8f7e:	0f1b      	lsrs	r3, r3, #28
    8f80:	2b02      	cmp	r3, #2
    8f82:	d100      	bne.n	8f86 <sd_mmc_check+0x24e>
    8f84:	e0a8      	b.n	90d8 <sd_mmc_check+0x3a0>
    8f86:	d907      	bls.n	8f98 <sd_mmc_check+0x260>
    8f88:	2b03      	cmp	r3, #3
    8f8a:	d100      	bne.n	8f8e <sd_mmc_check+0x256>
    8f8c:	e0a7      	b.n	90de <sd_mmc_check+0x3a6>
    8f8e:	2b04      	cmp	r3, #4
    8f90:	d104      	bne.n	8f9c <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
    8f92:	2340      	movs	r3, #64	; 0x40
    8f94:	7313      	strb	r3, [r2, #12]
    8f96:	e003      	b.n	8fa0 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    8f98:	2b01      	cmp	r3, #1
    8f9a:	d066      	beq.n	906a <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    8f9c:	2312      	movs	r3, #18
    8f9e:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    8fa0:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    8fa2:	0659      	lsls	r1, r3, #25
    8fa4:	0f09      	lsrs	r1, r1, #28
    8fa6:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    8fa8:	2007      	movs	r0, #7
    8faa:	4003      	ands	r3, r0
    8fac:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    8fae:	483f      	ldr	r0, [pc, #252]	; (90ac <sd_mmc_check+0x374>)
    8fb0:	5818      	ldr	r0, [r3, r0]
    8fb2:	23fa      	movs	r3, #250	; 0xfa
    8fb4:	009b      	lsls	r3, r3, #2
    8fb6:	4343      	muls	r3, r0
    8fb8:	4843      	ldr	r0, [pc, #268]	; (90c8 <sd_mmc_check+0x390>)
    8fba:	5809      	ldr	r1, [r1, r0]
    8fbc:	434b      	muls	r3, r1
    8fbe:	6013      	str	r3, [r2, #0]
    8fc0:	7d91      	ldrb	r1, [r2, #22]
    8fc2:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    8fc4:	7d53      	ldrb	r3, [r2, #21]
    8fc6:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    8fc8:	7d10      	ldrb	r0, [r2, #20]
    8fca:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    8fcc:	4303      	orrs	r3, r0
    8fce:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
    8fd0:	051b      	lsls	r3, r3, #20
    8fd2:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    8fd4:	493d      	ldr	r1, [pc, #244]	; (90cc <sd_mmc_check+0x394>)
    8fd6:	428b      	cmp	r3, r1
    8fd8:	d00f      	beq.n	8ffa <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    8fda:	7e10      	ldrb	r0, [r2, #24]
    8fdc:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    8fde:	7dd1      	ldrb	r1, [r2, #23]
    8fe0:	0049      	lsls	r1, r1, #1
    8fe2:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    8fe4:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
    8fe6:	2007      	movs	r0, #7
    8fe8:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    8fea:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    8fec:	408b      	lsls	r3, r1
    8fee:	7cd1      	ldrb	r1, [r2, #19]
    8ff0:	3008      	adds	r0, #8
    8ff2:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    8ff4:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    8ff6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    8ff8:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    8ffa:	7b13      	ldrb	r3, [r2, #12]
    8ffc:	2b3f      	cmp	r3, #63	; 0x3f
    8ffe:	d97b      	bls.n	90f8 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    9000:	2100      	movs	r1, #0
    9002:	9100      	str	r1, [sp, #0]
    9004:	2301      	movs	r3, #1
    9006:	2280      	movs	r2, #128	; 0x80
    9008:	0092      	lsls	r2, r2, #2
    900a:	4831      	ldr	r0, [pc, #196]	; (90d0 <sd_mmc_check+0x398>)
    900c:	4d2b      	ldr	r5, [pc, #172]	; (90bc <sd_mmc_check+0x384>)
    900e:	47a8      	blx	r5
    9010:	2800      	cmp	r0, #0
    9012:	d100      	bne.n	9016 <sd_mmc_check+0x2de>
    9014:	e6b0      	b.n	8d78 <sd_mmc_check+0x40>
    9016:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
    9018:	4e2e      	ldr	r6, [pc, #184]	; (90d4 <sd_mmc_check+0x39c>)
    901a:	a805      	add	r0, sp, #20
    901c:	47b0      	blx	r6
    901e:	2800      	cmp	r0, #0
    9020:	d100      	bne.n	9024 <sd_mmc_check+0x2ec>
    9022:	e6a9      	b.n	8d78 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    9024:	3501      	adds	r5, #1
    9026:	b2ad      	uxth	r5, r5
    9028:	2d32      	cmp	r5, #50	; 0x32
    902a:	d1f6      	bne.n	901a <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    902c:	4b12      	ldr	r3, [pc, #72]	; (9078 <sd_mmc_check+0x340>)
    902e:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9030:	7d8a      	ldrb	r2, [r1, #22]
    9032:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9034:	7d4b      	ldrb	r3, [r1, #21]
    9036:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9038:	7d09      	ldrb	r1, [r1, #20]
    903a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    903c:	430b      	orrs	r3, r1
    903e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
    9040:	051b      	lsls	r3, r3, #20
    9042:	0d1b      	lsrs	r3, r3, #20
    9044:	4a21      	ldr	r2, [pc, #132]	; (90cc <sd_mmc_check+0x394>)
    9046:	4293      	cmp	r3, r2
    9048:	d154      	bne.n	90f4 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
    904a:	4e22      	ldr	r6, [pc, #136]	; (90d4 <sd_mmc_check+0x39c>)
    904c:	a806      	add	r0, sp, #24
    904e:	47b0      	blx	r6
    9050:	2800      	cmp	r0, #0
    9052:	d100      	bne.n	9056 <sd_mmc_check+0x31e>
    9054:	e690      	b.n	8d78 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    9056:	3501      	adds	r5, #1
    9058:	b2ad      	uxth	r5, r5
    905a:	2d35      	cmp	r5, #53	; 0x35
    905c:	d9f6      	bls.n	904c <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
    905e:	4b06      	ldr	r3, [pc, #24]	; (9078 <sd_mmc_check+0x340>)
    9060:	681a      	ldr	r2, [r3, #0]
    9062:	9b06      	ldr	r3, [sp, #24]
    9064:	085b      	lsrs	r3, r3, #1
    9066:	6053      	str	r3, [r2, #4]
    9068:	e044      	b.n	90f4 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    906a:	2314      	movs	r3, #20
    906c:	7313      	strb	r3, [r2, #12]
    906e:	e797      	b.n	8fa0 <sd_mmc_check+0x268>
    9070:	00008c1d 	.word	0x00008c1d
    9074:	00008cfd 	.word	0x00008cfd
    9078:	200040cc 	.word	0x200040cc
    907c:	000098fd 	.word	0x000098fd
    9080:	00009ac5 	.word	0x00009ac5
    9084:	00005508 	.word	0x00005508
    9088:	00001110 	.word	0x00001110
    908c:	00008c79 	.word	0x00008c79
    9090:	00008bf5 	.word	0x00008bf5
    9094:	00009add 	.word	0x00009add
    9098:	0000053a 	.word	0x0000053a
    909c:	00001bef 	.word	0x00001bef
    90a0:	00001101 	.word	0x00001101
    90a4:	0000113b 	.word	0x0000113b
    90a8:	00008cb1 	.word	0x00008cb1
    90ac:	0001a508 	.word	0x0001a508
    90b0:	0001a524 	.word	0x0001a524
    90b4:	00001137 	.word	0x00001137
    90b8:	00081133 	.word	0x00081133
    90bc:	00009935 	.word	0x00009935
    90c0:	00009b61 	.word	0x00009b61
    90c4:	00009bed 	.word	0x00009bed
    90c8:	0001a4c8 	.word	0x0001a4c8
    90cc:	00000fff 	.word	0x00000fff
    90d0:	00081108 	.word	0x00081108
    90d4:	00009ae9 	.word	0x00009ae9
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    90d8:	2322      	movs	r3, #34	; 0x22
    90da:	7313      	strb	r3, [r2, #12]
    90dc:	e760      	b.n	8fa0 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
    90de:	2330      	movs	r3, #48	; 0x30
    90e0:	7313      	strb	r3, [r2, #12]
    90e2:	e75d      	b.n	8fa0 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
    90e4:	a806      	add	r0, sp, #24
    90e6:	4b36      	ldr	r3, [pc, #216]	; (91c0 <sd_mmc_check+0x488>)
    90e8:	4798      	blx	r3
    90ea:	2800      	cmp	r0, #0
    90ec:	d100      	bne.n	90f0 <sd_mmc_check+0x3b8>
    90ee:	e643      	b.n	8d78 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    90f0:	3501      	adds	r5, #1
    90f2:	b2ad      	uxth	r5, r5
    90f4:	2d7f      	cmp	r5, #127	; 0x7f
    90f6:	d9f5      	bls.n	90e4 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    90f8:	2180      	movs	r1, #128	; 0x80
    90fa:	0089      	lsls	r1, r1, #2
    90fc:	4831      	ldr	r0, [pc, #196]	; (91c4 <sd_mmc_check+0x48c>)
    90fe:	4b32      	ldr	r3, [pc, #200]	; (91c8 <sd_mmc_check+0x490>)
    9100:	4798      	blx	r3
    9102:	2800      	cmp	r0, #0
    9104:	d100      	bne.n	9108 <sd_mmc_check+0x3d0>
    9106:	e637      	b.n	8d78 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
    9108:	4b30      	ldr	r3, [pc, #192]	; (91cc <sd_mmc_check+0x494>)
    910a:	4798      	blx	r3
    910c:	2800      	cmp	r0, #0
    910e:	d100      	bne.n	9112 <sd_mmc_check+0x3da>
    9110:	e632      	b.n	8d78 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    9112:	4b2f      	ldr	r3, [pc, #188]	; (91d0 <sd_mmc_check+0x498>)
    9114:	4798      	blx	r3
    9116:	e65e      	b.n	8dd6 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9118:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    911a:	7d93      	ldrb	r3, [r2, #22]
    911c:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    911e:	7d51      	ldrb	r1, [r2, #21]
    9120:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9122:	430b      	orrs	r3, r1
    9124:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
    9126:	029b      	lsls	r3, r3, #10
				* 512;
    9128:	085b      	lsrs	r3, r3, #1
    912a:	2180      	movs	r1, #128	; 0x80
    912c:	0089      	lsls	r1, r1, #2
    912e:	468c      	mov	ip, r1
    9130:	4463      	add	r3, ip
		sd_mmc_card->capacity =
    9132:	6053      	str	r3, [r2, #4]
    9134:	e6cd      	b.n	8ed2 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    9136:	4b27      	ldr	r3, [pc, #156]	; (91d4 <sd_mmc_check+0x49c>)
    9138:	681b      	ldr	r3, [r3, #0]
    913a:	2210      	movs	r2, #16
    913c:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    913e:	4b25      	ldr	r3, [pc, #148]	; (91d4 <sd_mmc_check+0x49c>)
    9140:	681b      	ldr	r3, [r3, #0]
    9142:	7adb      	ldrb	r3, [r3, #11]
    9144:	2209      	movs	r2, #9
    9146:	4013      	ands	r3, r2
    9148:	2b01      	cmp	r3, #1
    914a:	d000      	beq.n	914e <sd_mmc_check+0x416>
    914c:	e638      	b.n	8dc0 <sd_mmc_check+0x88>
    914e:	e630      	b.n	8db2 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    9150:	4b20      	ldr	r3, [pc, #128]	; (91d4 <sd_mmc_check+0x49c>)
    9152:	681b      	ldr	r3, [r3, #0]
    9154:	221a      	movs	r2, #26
    9156:	731a      	strb	r2, [r3, #12]
    9158:	e7f1      	b.n	913e <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    915a:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    915c:	789b      	ldrb	r3, [r3, #2]
    915e:	09db      	lsrs	r3, r3, #7
    9160:	2b01      	cmp	r3, #1
    9162:	d104      	bne.n	916e <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    9164:	4b1b      	ldr	r3, [pc, #108]	; (91d4 <sd_mmc_check+0x49c>)
    9166:	681b      	ldr	r3, [r3, #0]
    9168:	2230      	movs	r2, #48	; 0x30
    916a:	731a      	strb	r2, [r3, #12]
    916c:	e7e7      	b.n	913e <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    916e:	4b19      	ldr	r3, [pc, #100]	; (91d4 <sd_mmc_check+0x49c>)
    9170:	681b      	ldr	r3, [r3, #0]
    9172:	2220      	movs	r2, #32
    9174:	731a      	strb	r2, [r3, #12]
    9176:	e7e2      	b.n	913e <sd_mmc_check+0x406>
	*v2 = 0;
    9178:	2600      	movs	r6, #0
    917a:	e60d      	b.n	8d98 <sd_mmc_check+0x60>
    917c:	1e73      	subs	r3, r6, #1
    917e:	419e      	sbcs	r6, r3
    9180:	07b3      	lsls	r3, r6, #30
    9182:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    9184:	4d14      	ldr	r5, [pc, #80]	; (91d8 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    9186:	4f10      	ldr	r7, [pc, #64]	; (91c8 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    9188:	46b8      	mov	r8, r7
		resp = driver_get_response();
    918a:	4e14      	ldr	r6, [pc, #80]	; (91dc <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    918c:	2100      	movs	r1, #0
    918e:	4814      	ldr	r0, [pc, #80]	; (91e0 <sd_mmc_check+0x4a8>)
    9190:	47b8      	blx	r7
    9192:	2800      	cmp	r0, #0
    9194:	d100      	bne.n	9198 <sd_mmc_check+0x460>
    9196:	e638      	b.n	8e0a <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    9198:	9903      	ldr	r1, [sp, #12]
    919a:	4812      	ldr	r0, [pc, #72]	; (91e4 <sd_mmc_check+0x4ac>)
    919c:	47c0      	blx	r8
    919e:	2800      	cmp	r0, #0
    91a0:	d100      	bne.n	91a4 <sd_mmc_check+0x46c>
    91a2:	e632      	b.n	8e0a <sd_mmc_check+0xd2>
		resp = driver_get_response();
    91a4:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    91a6:	07c3      	lsls	r3, r0, #31
    91a8:	d400      	bmi.n	91ac <sd_mmc_check+0x474>
    91aa:	e628      	b.n	8dfe <sd_mmc_check+0xc6>
    91ac:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    91ae:	2d00      	cmp	r5, #0
    91b0:	d1ec      	bne.n	918c <sd_mmc_check+0x454>
    91b2:	e62a      	b.n	8e0a <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    91b4:	2209      	movs	r2, #9
    91b6:	4013      	ands	r3, r2
    91b8:	2b01      	cmp	r3, #1
    91ba:	d000      	beq.n	91be <sd_mmc_check+0x486>
    91bc:	e609      	b.n	8dd2 <sd_mmc_check+0x9a>
    91be:	e5f8      	b.n	8db2 <sd_mmc_check+0x7a>
    91c0:	00009ae9 	.word	0x00009ae9
    91c4:	00001110 	.word	0x00001110
    91c8:	00009ac5 	.word	0x00009ac5
    91cc:	00008c79 	.word	0x00008c79
    91d0:	00008bf5 	.word	0x00008bf5
    91d4:	200040cc 	.word	0x200040cc
    91d8:	00001bef 	.word	0x00001bef
    91dc:	00009add 	.word	0x00009add
    91e0:	00001137 	.word	0x00001137
    91e4:	00001129 	.word	0x00001129

000091e8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    91e8:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    91ea:	4b06      	ldr	r3, [pc, #24]	; (9204 <sd_mmc_get_type+0x1c>)
    91ec:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
    91ee:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    91f0:	2800      	cmp	r0, #0
    91f2:	d001      	beq.n	91f8 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    91f4:	0018      	movs	r0, r3
    91f6:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    91f8:	4b03      	ldr	r3, [pc, #12]	; (9208 <sd_mmc_get_type+0x20>)
    91fa:	4798      	blx	r3
	return sd_mmc_card->type;
    91fc:	4b03      	ldr	r3, [pc, #12]	; (920c <sd_mmc_get_type+0x24>)
    91fe:	681b      	ldr	r3, [r3, #0]
    9200:	7adb      	ldrb	r3, [r3, #11]
    9202:	e7f7      	b.n	91f4 <sd_mmc_get_type+0xc>
    9204:	00008c1d 	.word	0x00008c1d
    9208:	00008cfd 	.word	0x00008cfd
    920c:	200040cc 	.word	0x200040cc

00009210 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    9210:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    9212:	4b06      	ldr	r3, [pc, #24]	; (922c <sd_mmc_get_capacity+0x1c>)
    9214:	4798      	blx	r3
		return 0;
    9216:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    9218:	2800      	cmp	r0, #0
    921a:	d001      	beq.n	9220 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    921c:	0018      	movs	r0, r3
    921e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    9220:	4b03      	ldr	r3, [pc, #12]	; (9230 <sd_mmc_get_capacity+0x20>)
    9222:	4798      	blx	r3
	return sd_mmc_card->capacity;
    9224:	4b03      	ldr	r3, [pc, #12]	; (9234 <sd_mmc_get_capacity+0x24>)
    9226:	681b      	ldr	r3, [r3, #0]
    9228:	685b      	ldr	r3, [r3, #4]
    922a:	e7f7      	b.n	921c <sd_mmc_get_capacity+0xc>
    922c:	00008c1d 	.word	0x00008c1d
    9230:	00008cfd 	.word	0x00008cfd
    9234:	200040cc 	.word	0x200040cc

00009238 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    9238:	2000      	movs	r0, #0
    923a:	4770      	bx	lr

0000923c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    923c:	b570      	push	{r4, r5, r6, lr}
    923e:	b082      	sub	sp, #8
    9240:	000e      	movs	r6, r1
    9242:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    9244:	4b16      	ldr	r3, [pc, #88]	; (92a0 <sd_mmc_init_read_blocks+0x64>)
    9246:	4798      	blx	r3
    9248:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    924a:	d002      	beq.n	9252 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    924c:	0020      	movs	r0, r4
    924e:	b002      	add	sp, #8
    9250:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    9252:	4b14      	ldr	r3, [pc, #80]	; (92a4 <sd_mmc_init_read_blocks+0x68>)
    9254:	4798      	blx	r3
    9256:	2800      	cmp	r0, #0
    9258:	d017      	beq.n	928a <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    925a:	2d01      	cmp	r5, #1
    925c:	d919      	bls.n	9292 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    925e:	4812      	ldr	r0, [pc, #72]	; (92a8 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    9260:	4b12      	ldr	r3, [pc, #72]	; (92ac <sd_mmc_init_read_blocks+0x70>)
    9262:	681b      	ldr	r3, [r3, #0]
    9264:	7adb      	ldrb	r3, [r3, #11]
    9266:	071b      	lsls	r3, r3, #28
    9268:	d400      	bmi.n	926c <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    926a:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    926c:	2301      	movs	r3, #1
    926e:	9300      	str	r3, [sp, #0]
    9270:	002b      	movs	r3, r5
    9272:	2280      	movs	r2, #128	; 0x80
    9274:	0092      	lsls	r2, r2, #2
    9276:	0031      	movs	r1, r6
    9278:	4e0d      	ldr	r6, [pc, #52]	; (92b0 <sd_mmc_init_read_blocks+0x74>)
    927a:	47b0      	blx	r6
    927c:	2800      	cmp	r0, #0
    927e:	d00a      	beq.n	9296 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    9280:	4b0c      	ldr	r3, [pc, #48]	; (92b4 <sd_mmc_init_read_blocks+0x78>)
    9282:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    9284:	4b0c      	ldr	r3, [pc, #48]	; (92b8 <sd_mmc_init_read_blocks+0x7c>)
    9286:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    9288:	e7e0      	b.n	924c <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    928a:	4b0c      	ldr	r3, [pc, #48]	; (92bc <sd_mmc_init_read_blocks+0x80>)
    928c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    928e:	3405      	adds	r4, #5
    9290:	e7dc      	b.n	924c <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    9292:	480b      	ldr	r0, [pc, #44]	; (92c0 <sd_mmc_init_read_blocks+0x84>)
    9294:	e7e4      	b.n	9260 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    9296:	4b09      	ldr	r3, [pc, #36]	; (92bc <sd_mmc_init_read_blocks+0x80>)
    9298:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    929a:	2405      	movs	r4, #5
    929c:	e7d6      	b.n	924c <sd_mmc_init_read_blocks+0x10>
    929e:	46c0      	nop			; (mov r8, r8)
    92a0:	00008c1d 	.word	0x00008c1d
    92a4:	00008c79 	.word	0x00008c79
    92a8:	00101112 	.word	0x00101112
    92ac:	200040cc 	.word	0x200040cc
    92b0:	00009935 	.word	0x00009935
    92b4:	200040f0 	.word	0x200040f0
    92b8:	200040f2 	.word	0x200040f2
    92bc:	00008cfd 	.word	0x00008cfd
    92c0:	00081111 	.word	0x00081111

000092c4 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    92c4:	b510      	push	{r4, lr}
    92c6:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    92c8:	4b07      	ldr	r3, [pc, #28]	; (92e8 <sd_mmc_start_read_blocks+0x24>)
    92ca:	4798      	blx	r3
    92cc:	2800      	cmp	r0, #0
    92ce:	d104      	bne.n	92da <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    92d0:	2200      	movs	r2, #0
    92d2:	4b06      	ldr	r3, [pc, #24]	; (92ec <sd_mmc_start_read_blocks+0x28>)
    92d4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    92d6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    92d8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    92da:	4a04      	ldr	r2, [pc, #16]	; (92ec <sd_mmc_start_read_blocks+0x28>)
    92dc:	8813      	ldrh	r3, [r2, #0]
    92de:	1b1c      	subs	r4, r3, r4
    92e0:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    92e2:	2000      	movs	r0, #0
    92e4:	e7f8      	b.n	92d8 <sd_mmc_start_read_blocks+0x14>
    92e6:	46c0      	nop			; (mov r8, r8)
    92e8:	00009b61 	.word	0x00009b61
    92ec:	200040f0 	.word	0x200040f0

000092f0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    92f0:	b510      	push	{r4, lr}
    92f2:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    92f4:	4b14      	ldr	r3, [pc, #80]	; (9348 <sd_mmc_wait_end_of_read_blocks+0x58>)
    92f6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    92f8:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    92fa:	2800      	cmp	r0, #0
    92fc:	d101      	bne.n	9302 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    92fe:	0018      	movs	r0, r3
    9300:	bd10      	pop	{r4, pc}
	if (abort) {
    9302:	2c00      	cmp	r4, #0
    9304:	d010      	beq.n	9328 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    9306:	2200      	movs	r2, #0
    9308:	4b10      	ldr	r3, [pc, #64]	; (934c <sd_mmc_wait_end_of_read_blocks+0x5c>)
    930a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    930c:	4b10      	ldr	r3, [pc, #64]	; (9350 <sd_mmc_wait_end_of_read_blocks+0x60>)
    930e:	881b      	ldrh	r3, [r3, #0]
    9310:	2b01      	cmp	r3, #1
    9312:	d00f      	beq.n	9334 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    9314:	2100      	movs	r1, #0
    9316:	480f      	ldr	r0, [pc, #60]	; (9354 <sd_mmc_wait_end_of_read_blocks+0x64>)
    9318:	4b0f      	ldr	r3, [pc, #60]	; (9358 <sd_mmc_wait_end_of_read_blocks+0x68>)
    931a:	4798      	blx	r3
    931c:	2800      	cmp	r0, #0
    931e:	d00d      	beq.n	933c <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    9320:	4b0e      	ldr	r3, [pc, #56]	; (935c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    9322:	4798      	blx	r3
	return SD_MMC_OK;
    9324:	2300      	movs	r3, #0
    9326:	e7ea      	b.n	92fe <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    9328:	4b08      	ldr	r3, [pc, #32]	; (934c <sd_mmc_wait_end_of_read_blocks+0x5c>)
    932a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    932c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    932e:	2a00      	cmp	r2, #0
    9330:	d0ec      	beq.n	930c <sd_mmc_wait_end_of_read_blocks+0x1c>
    9332:	e7e4      	b.n	92fe <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    9334:	4b09      	ldr	r3, [pc, #36]	; (935c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    9336:	4798      	blx	r3
		return SD_MMC_OK;
    9338:	2300      	movs	r3, #0
    933a:	e7e0      	b.n	92fe <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    933c:	2100      	movs	r1, #0
    933e:	4805      	ldr	r0, [pc, #20]	; (9354 <sd_mmc_wait_end_of_read_blocks+0x64>)
    9340:	4b05      	ldr	r3, [pc, #20]	; (9358 <sd_mmc_wait_end_of_read_blocks+0x68>)
    9342:	4798      	blx	r3
    9344:	e7ec      	b.n	9320 <sd_mmc_wait_end_of_read_blocks+0x30>
    9346:	46c0      	nop			; (mov r8, r8)
    9348:	00009bed 	.word	0x00009bed
    934c:	200040f0 	.word	0x200040f0
    9350:	200040f2 	.word	0x200040f2
    9354:	0000310c 	.word	0x0000310c
    9358:	00009ac5 	.word	0x00009ac5
    935c:	00008cfd 	.word	0x00008cfd

00009360 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    9360:	b570      	push	{r4, r5, r6, lr}
    9362:	b082      	sub	sp, #8
    9364:	000e      	movs	r6, r1
    9366:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    9368:	4b11      	ldr	r3, [pc, #68]	; (93b0 <sd_mmc_init_write_blocks+0x50>)
    936a:	4798      	blx	r3
    936c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    936e:	d116      	bne.n	939e <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    9370:	2d01      	cmp	r5, #1
    9372:	d917      	bls.n	93a4 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    9374:	480f      	ldr	r0, [pc, #60]	; (93b4 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    9376:	4b10      	ldr	r3, [pc, #64]	; (93b8 <sd_mmc_init_write_blocks+0x58>)
    9378:	681b      	ldr	r3, [r3, #0]
    937a:	7adb      	ldrb	r3, [r3, #11]
    937c:	071b      	lsls	r3, r3, #28
    937e:	d400      	bmi.n	9382 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    9380:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    9382:	2301      	movs	r3, #1
    9384:	9300      	str	r3, [sp, #0]
    9386:	002b      	movs	r3, r5
    9388:	2280      	movs	r2, #128	; 0x80
    938a:	0092      	lsls	r2, r2, #2
    938c:	0031      	movs	r1, r6
    938e:	4e0b      	ldr	r6, [pc, #44]	; (93bc <sd_mmc_init_write_blocks+0x5c>)
    9390:	47b0      	blx	r6
    9392:	2800      	cmp	r0, #0
    9394:	d008      	beq.n	93a8 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    9396:	4b0a      	ldr	r3, [pc, #40]	; (93c0 <sd_mmc_init_write_blocks+0x60>)
    9398:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    939a:	4b0a      	ldr	r3, [pc, #40]	; (93c4 <sd_mmc_init_write_blocks+0x64>)
    939c:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    939e:	0020      	movs	r0, r4
    93a0:	b002      	add	sp, #8
    93a2:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    93a4:	4808      	ldr	r0, [pc, #32]	; (93c8 <sd_mmc_init_write_blocks+0x68>)
    93a6:	e7e6      	b.n	9376 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    93a8:	4b08      	ldr	r3, [pc, #32]	; (93cc <sd_mmc_init_write_blocks+0x6c>)
    93aa:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    93ac:	2405      	movs	r4, #5
    93ae:	e7f6      	b.n	939e <sd_mmc_init_write_blocks+0x3e>
    93b0:	00008c1d 	.word	0x00008c1d
    93b4:	00109119 	.word	0x00109119
    93b8:	200040cc 	.word	0x200040cc
    93bc:	00009935 	.word	0x00009935
    93c0:	200040f0 	.word	0x200040f0
    93c4:	200040f2 	.word	0x200040f2
    93c8:	00089118 	.word	0x00089118
    93cc:	00008cfd 	.word	0x00008cfd

000093d0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    93d0:	b510      	push	{r4, lr}
    93d2:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    93d4:	4b07      	ldr	r3, [pc, #28]	; (93f4 <sd_mmc_start_write_blocks+0x24>)
    93d6:	4798      	blx	r3
    93d8:	2800      	cmp	r0, #0
    93da:	d104      	bne.n	93e6 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    93dc:	2200      	movs	r2, #0
    93de:	4b06      	ldr	r3, [pc, #24]	; (93f8 <sd_mmc_start_write_blocks+0x28>)
    93e0:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    93e2:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    93e4:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    93e6:	4a04      	ldr	r2, [pc, #16]	; (93f8 <sd_mmc_start_write_blocks+0x28>)
    93e8:	8813      	ldrh	r3, [r2, #0]
    93ea:	1b1c      	subs	r4, r3, r4
    93ec:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    93ee:	2000      	movs	r0, #0
    93f0:	e7f8      	b.n	93e4 <sd_mmc_start_write_blocks+0x14>
    93f2:	46c0      	nop			; (mov r8, r8)
    93f4:	00009bf1 	.word	0x00009bf1
    93f8:	200040f0 	.word	0x200040f0

000093fc <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    93fc:	b510      	push	{r4, lr}
    93fe:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    9400:	4b0e      	ldr	r3, [pc, #56]	; (943c <sd_mmc_wait_end_of_write_blocks+0x40>)
    9402:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    9404:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    9406:	2800      	cmp	r0, #0
    9408:	d101      	bne.n	940e <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    940a:	0018      	movs	r0, r3
    940c:	bd10      	pop	{r4, pc}
	if (abort) {
    940e:	2c00      	cmp	r4, #0
    9410:	d00a      	beq.n	9428 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    9412:	2200      	movs	r2, #0
    9414:	4b0a      	ldr	r3, [pc, #40]	; (9440 <sd_mmc_wait_end_of_write_blocks+0x44>)
    9416:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    9418:	4b0a      	ldr	r3, [pc, #40]	; (9444 <sd_mmc_wait_end_of_write_blocks+0x48>)
    941a:	881b      	ldrh	r3, [r3, #0]
    941c:	2b01      	cmp	r3, #1
    941e:	d009      	beq.n	9434 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    9420:	4b09      	ldr	r3, [pc, #36]	; (9448 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    9422:	4798      	blx	r3
	return SD_MMC_OK;
    9424:	2300      	movs	r3, #0
    9426:	e7f0      	b.n	940a <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    9428:	4b05      	ldr	r3, [pc, #20]	; (9440 <sd_mmc_wait_end_of_write_blocks+0x44>)
    942a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    942c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    942e:	2a00      	cmp	r2, #0
    9430:	d0f2      	beq.n	9418 <sd_mmc_wait_end_of_write_blocks+0x1c>
    9432:	e7ea      	b.n	940a <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    9434:	4b04      	ldr	r3, [pc, #16]	; (9448 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    9436:	4798      	blx	r3
		return SD_MMC_OK;
    9438:	2300      	movs	r3, #0
    943a:	e7e6      	b.n	940a <sd_mmc_wait_end_of_write_blocks+0xe>
    943c:	00009c71 	.word	0x00009c71
    9440:	200040f0 	.word	0x200040f0
    9444:	200040f2 	.word	0x200040f2
    9448:	00008cfd 	.word	0x00008cfd

0000944c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    944c:	b510      	push	{r4, lr}
    944e:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    9450:	4b0f      	ldr	r3, [pc, #60]	; (9490 <sd_mmc_test_unit_ready+0x44>)
    9452:	4798      	blx	r3
    9454:	2801      	cmp	r0, #1
    9456:	d019      	beq.n	948c <sd_mmc_test_unit_ready+0x40>
    9458:	2800      	cmp	r0, #0
    945a:	d003      	beq.n	9464 <sd_mmc_test_unit_ready+0x18>
    945c:	2802      	cmp	r0, #2
    945e:	d010      	beq.n	9482 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    9460:	2001      	movs	r0, #1
	}
}
    9462:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    9464:	4b0b      	ldr	r3, [pc, #44]	; (9494 <sd_mmc_test_unit_ready+0x48>)
    9466:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    9468:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    946a:	2b00      	cmp	r3, #0
    946c:	d1f9      	bne.n	9462 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    946e:	0020      	movs	r0, r4
    9470:	4b09      	ldr	r3, [pc, #36]	; (9498 <sd_mmc_test_unit_ready+0x4c>)
    9472:	4798      	blx	r3
    9474:	0003      	movs	r3, r0
    9476:	2003      	movs	r0, #3
    9478:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    947a:	4243      	negs	r3, r0
    947c:	4158      	adcs	r0, r3
    947e:	0040      	lsls	r0, r0, #1
    9480:	e7ef      	b.n	9462 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    9482:	2200      	movs	r2, #0
    9484:	4b03      	ldr	r3, [pc, #12]	; (9494 <sd_mmc_test_unit_ready+0x48>)
    9486:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    9488:	2002      	movs	r0, #2
    948a:	e7ea      	b.n	9462 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    948c:	2003      	movs	r0, #3
    948e:	e7e8      	b.n	9462 <sd_mmc_test_unit_ready+0x16>
    9490:	00008d39 	.word	0x00008d39
    9494:	200040f8 	.word	0x200040f8
    9498:	000091e9 	.word	0x000091e9

0000949c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    949c:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    949e:	2000      	movs	r0, #0
    94a0:	4b01      	ldr	r3, [pc, #4]	; (94a8 <sd_mmc_test_unit_ready_0+0xc>)
    94a2:	4798      	blx	r3
}
    94a4:	bd10      	pop	{r4, pc}
    94a6:	46c0      	nop			; (mov r8, r8)
    94a8:	0000944d 	.word	0x0000944d

000094ac <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    94ac:	b570      	push	{r4, r5, r6, lr}
    94ae:	0004      	movs	r4, r0
    94b0:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    94b2:	4b04      	ldr	r3, [pc, #16]	; (94c4 <sd_mmc_read_capacity+0x18>)
    94b4:	4798      	blx	r3
    94b6:	0040      	lsls	r0, r0, #1
    94b8:	3801      	subs	r0, #1
    94ba:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    94bc:	0020      	movs	r0, r4
    94be:	4b02      	ldr	r3, [pc, #8]	; (94c8 <sd_mmc_read_capacity+0x1c>)
    94c0:	4798      	blx	r3
}
    94c2:	bd70      	pop	{r4, r5, r6, pc}
    94c4:	00009211 	.word	0x00009211
    94c8:	0000944d 	.word	0x0000944d

000094cc <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    94cc:	b510      	push	{r4, lr}
    94ce:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    94d0:	2000      	movs	r0, #0
    94d2:	4b01      	ldr	r3, [pc, #4]	; (94d8 <sd_mmc_read_capacity_0+0xc>)
    94d4:	4798      	blx	r3
}
    94d6:	bd10      	pop	{r4, pc}
    94d8:	000094ad 	.word	0x000094ad

000094dc <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    94dc:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    94de:	2000      	movs	r0, #0
    94e0:	4b01      	ldr	r3, [pc, #4]	; (94e8 <sd_mmc_wr_protect_0+0xc>)
    94e2:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    94e4:	bd10      	pop	{r4, pc}
    94e6:	46c0      	nop			; (mov r8, r8)
    94e8:	00009239 	.word	0x00009239

000094ec <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    94ec:	b510      	push	{r4, lr}
    94ee:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    94f0:	2201      	movs	r2, #1
    94f2:	4b0c      	ldr	r3, [pc, #48]	; (9524 <sd_mmc_mem_2_ram+0x38>)
    94f4:	4798      	blx	r3
    94f6:	2800      	cmp	r0, #0
    94f8:	d004      	beq.n	9504 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    94fa:	3802      	subs	r0, #2
    94fc:	4243      	negs	r3, r0
    94fe:	4158      	adcs	r0, r3
    9500:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    9502:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    9504:	2101      	movs	r1, #1
    9506:	0020      	movs	r0, r4
    9508:	4b07      	ldr	r3, [pc, #28]	; (9528 <sd_mmc_mem_2_ram+0x3c>)
    950a:	4798      	blx	r3
    950c:	0003      	movs	r3, r0
		return CTRL_FAIL;
    950e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    9510:	2b00      	cmp	r3, #0
    9512:	d1f6      	bne.n	9502 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    9514:	2000      	movs	r0, #0
    9516:	4b05      	ldr	r3, [pc, #20]	; (952c <sd_mmc_mem_2_ram+0x40>)
    9518:	4798      	blx	r3
    951a:	1e43      	subs	r3, r0, #1
    951c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    951e:	b2c0      	uxtb	r0, r0
    9520:	e7ef      	b.n	9502 <sd_mmc_mem_2_ram+0x16>
    9522:	46c0      	nop			; (mov r8, r8)
    9524:	0000923d 	.word	0x0000923d
    9528:	000092c5 	.word	0x000092c5
    952c:	000092f1 	.word	0x000092f1

00009530 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    9530:	b510      	push	{r4, lr}
    9532:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    9534:	0001      	movs	r1, r0
    9536:	2000      	movs	r0, #0
    9538:	4b01      	ldr	r3, [pc, #4]	; (9540 <sd_mmc_mem_2_ram_0+0x10>)
    953a:	4798      	blx	r3
}
    953c:	bd10      	pop	{r4, pc}
    953e:	46c0      	nop			; (mov r8, r8)
    9540:	000094ed 	.word	0x000094ed

00009544 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    9544:	b510      	push	{r4, lr}
    9546:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    9548:	2201      	movs	r2, #1
    954a:	4b0c      	ldr	r3, [pc, #48]	; (957c <sd_mmc_ram_2_mem+0x38>)
    954c:	4798      	blx	r3
    954e:	2800      	cmp	r0, #0
    9550:	d004      	beq.n	955c <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    9552:	3802      	subs	r0, #2
    9554:	4243      	negs	r3, r0
    9556:	4158      	adcs	r0, r3
    9558:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    955a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    955c:	2101      	movs	r1, #1
    955e:	0020      	movs	r0, r4
    9560:	4b07      	ldr	r3, [pc, #28]	; (9580 <sd_mmc_ram_2_mem+0x3c>)
    9562:	4798      	blx	r3
    9564:	0003      	movs	r3, r0
		return CTRL_FAIL;
    9566:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    9568:	2b00      	cmp	r3, #0
    956a:	d1f6      	bne.n	955a <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    956c:	2000      	movs	r0, #0
    956e:	4b05      	ldr	r3, [pc, #20]	; (9584 <sd_mmc_ram_2_mem+0x40>)
    9570:	4798      	blx	r3
    9572:	1e43      	subs	r3, r0, #1
    9574:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    9576:	b2c0      	uxtb	r0, r0
    9578:	e7ef      	b.n	955a <sd_mmc_ram_2_mem+0x16>
    957a:	46c0      	nop			; (mov r8, r8)
    957c:	00009361 	.word	0x00009361
    9580:	000093d1 	.word	0x000093d1
    9584:	000093fd 	.word	0x000093fd

00009588 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    9588:	b510      	push	{r4, lr}
    958a:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    958c:	0001      	movs	r1, r0
    958e:	2000      	movs	r0, #0
    9590:	4b01      	ldr	r3, [pc, #4]	; (9598 <sd_mmc_ram_2_mem_0+0x10>)
    9592:	4798      	blx	r3
}
    9594:	bd10      	pop	{r4, pc}
    9596:	46c0      	nop			; (mov r8, r8)
    9598:	00009545 	.word	0x00009545

0000959c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    959c:	b500      	push	{lr}
    959e:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    95a0:	466b      	mov	r3, sp
    95a2:	1dd9      	adds	r1, r3, #7
    95a4:	23ff      	movs	r3, #255	; 0xff
    95a6:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    95a8:	2201      	movs	r2, #1
    95aa:	480b      	ldr	r0, [pc, #44]	; (95d8 <sd_mmc_spi_start_write_block+0x3c>)
    95ac:	4b0b      	ldr	r3, [pc, #44]	; (95dc <sd_mmc_spi_start_write_block+0x40>)
    95ae:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    95b0:	4b0b      	ldr	r3, [pc, #44]	; (95e0 <sd_mmc_spi_start_write_block+0x44>)
    95b2:	881b      	ldrh	r3, [r3, #0]
    95b4:	2b01      	cmp	r3, #1
    95b6:	d00a      	beq.n	95ce <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    95b8:	22fc      	movs	r2, #252	; 0xfc
    95ba:	466b      	mov	r3, sp
    95bc:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    95be:	2201      	movs	r2, #1
    95c0:	466b      	mov	r3, sp
    95c2:	1d99      	adds	r1, r3, #6
    95c4:	4804      	ldr	r0, [pc, #16]	; (95d8 <sd_mmc_spi_start_write_block+0x3c>)
    95c6:	4b05      	ldr	r3, [pc, #20]	; (95dc <sd_mmc_spi_start_write_block+0x40>)
    95c8:	4798      	blx	r3
}
    95ca:	b003      	add	sp, #12
    95cc:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    95ce:	22fe      	movs	r2, #254	; 0xfe
    95d0:	466b      	mov	r3, sp
    95d2:	719a      	strb	r2, [r3, #6]
    95d4:	e7f3      	b.n	95be <sd_mmc_spi_start_write_block+0x22>
    95d6:	46c0      	nop			; (mov r8, r8)
    95d8:	200040fc 	.word	0x200040fc
    95dc:	0000df19 	.word	0x0000df19
    95e0:	20004110 	.word	0x20004110

000095e4 <sd_mmc_spi_wait_busy>:
{
    95e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    95e6:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    95e8:	466b      	mov	r3, sp
    95ea:	1ddc      	adds	r4, r3, #7
    95ec:	23ff      	movs	r3, #255	; 0xff
    95ee:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    95f0:	4e12      	ldr	r6, [pc, #72]	; (963c <sd_mmc_spi_wait_busy+0x58>)
    95f2:	2201      	movs	r2, #1
    95f4:	0021      	movs	r1, r4
    95f6:	0030      	movs	r0, r6
    95f8:	4d11      	ldr	r5, [pc, #68]	; (9640 <sd_mmc_spi_wait_busy+0x5c>)
    95fa:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    95fc:	23ff      	movs	r3, #255	; 0xff
    95fe:	2201      	movs	r2, #1
    9600:	0021      	movs	r1, r4
    9602:	0030      	movs	r0, r6
    9604:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    9606:	23ff      	movs	r3, #255	; 0xff
    9608:	2201      	movs	r2, #1
    960a:	0021      	movs	r1, r4
    960c:	0030      	movs	r0, r6
    960e:	47a8      	blx	r5
    9610:	4c0c      	ldr	r4, [pc, #48]	; (9644 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    9612:	466b      	mov	r3, sp
    9614:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    9616:	4e09      	ldr	r6, [pc, #36]	; (963c <sd_mmc_spi_wait_busy+0x58>)
    9618:	4f09      	ldr	r7, [pc, #36]	; (9640 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    961a:	782b      	ldrb	r3, [r5, #0]
    961c:	2bff      	cmp	r3, #255	; 0xff
    961e:	d009      	beq.n	9634 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    9620:	23ff      	movs	r3, #255	; 0xff
    9622:	2201      	movs	r2, #1
    9624:	0029      	movs	r1, r5
    9626:	0030      	movs	r0, r6
    9628:	47b8      	blx	r7
    962a:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    962c:	2c00      	cmp	r4, #0
    962e:	d1f4      	bne.n	961a <sd_mmc_spi_wait_busy+0x36>
			return false;
    9630:	2000      	movs	r0, #0
    9632:	e000      	b.n	9636 <sd_mmc_spi_wait_busy+0x52>
	return true;
    9634:	2001      	movs	r0, #1
}
    9636:	b003      	add	sp, #12
    9638:	bdf0      	pop	{r4, r5, r6, r7, pc}
    963a:	46c0      	nop			; (mov r8, r8)
    963c:	200040fc 	.word	0x200040fc
    9640:	0000dd61 	.word	0x0000dd61
    9644:	00030d40 	.word	0x00030d40

00009648 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    9648:	b570      	push	{r4, r5, r6, lr}
    964a:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    964c:	4b14      	ldr	r3, [pc, #80]	; (96a0 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    964e:	881c      	ldrh	r4, [r3, #0]
    9650:	2c01      	cmp	r4, #1
    9652:	d023      	beq.n	969c <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    9654:	4b13      	ldr	r3, [pc, #76]	; (96a4 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    9656:	8819      	ldrh	r1, [r3, #0]
    9658:	4b13      	ldr	r3, [pc, #76]	; (96a8 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    965a:	6818      	ldr	r0, [r3, #0]
    965c:	4b13      	ldr	r3, [pc, #76]	; (96ac <sd_mmc_spi_stop_multiwrite_block+0x64>)
    965e:	4798      	blx	r3
		return true; // It is not the End of multi write
    9660:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    9662:	4284      	cmp	r4, r0
    9664:	d902      	bls.n	966c <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    9666:	0018      	movs	r0, r3
    9668:	b002      	add	sp, #8
    966a:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    966c:	466b      	mov	r3, sp
    966e:	1ddc      	adds	r4, r3, #7
    9670:	23ff      	movs	r3, #255	; 0xff
    9672:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    9674:	4e0e      	ldr	r6, [pc, #56]	; (96b0 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    9676:	2201      	movs	r2, #1
    9678:	0021      	movs	r1, r4
    967a:	0030      	movs	r0, r6
    967c:	4d0d      	ldr	r5, [pc, #52]	; (96b4 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    967e:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    9680:	23fd      	movs	r3, #253	; 0xfd
    9682:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    9684:	2201      	movs	r2, #1
    9686:	0021      	movs	r1, r4
    9688:	0030      	movs	r0, r6
    968a:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    968c:	4b0a      	ldr	r3, [pc, #40]	; (96b8 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    968e:	4798      	blx	r3
    9690:	1e03      	subs	r3, r0, #0
    9692:	d1e8      	bne.n	9666 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    9694:	2105      	movs	r1, #5
    9696:	4a09      	ldr	r2, [pc, #36]	; (96bc <sd_mmc_spi_stop_multiwrite_block+0x74>)
    9698:	7011      	strb	r1, [r2, #0]
		return false;
    969a:	e7e4      	b.n	9666 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    969c:	2301      	movs	r3, #1
    969e:	e7e2      	b.n	9666 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    96a0:	20004110 	.word	0x20004110
    96a4:	20004108 	.word	0x20004108
    96a8:	20004118 	.word	0x20004118
    96ac:	00015815 	.word	0x00015815
    96b0:	200040fc 	.word	0x200040fc
    96b4:	0000df19 	.word	0x0000df19
    96b8:	000095e5 	.word	0x000095e5
    96bc:	2000410f 	.word	0x2000410f

000096c0 <sd_mmc_spi_start_read_block>:
{
    96c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    96c2:	b083      	sub	sp, #12
	token = 0;
    96c4:	2200      	movs	r2, #0
    96c6:	466b      	mov	r3, sp
    96c8:	71da      	strb	r2, [r3, #7]
    96ca:	4c14      	ldr	r4, [pc, #80]	; (971c <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    96cc:	466b      	mov	r3, sp
    96ce:	1ddd      	adds	r5, r3, #7
    96d0:	4e13      	ldr	r6, [pc, #76]	; (9720 <sd_mmc_spi_start_read_block+0x60>)
    96d2:	4f14      	ldr	r7, [pc, #80]	; (9724 <sd_mmc_spi_start_read_block+0x64>)
    96d4:	23ff      	movs	r3, #255	; 0xff
    96d6:	2201      	movs	r2, #1
    96d8:	0029      	movs	r1, r5
    96da:	0030      	movs	r0, r6
    96dc:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    96de:	782b      	ldrb	r3, [r5, #0]
    96e0:	220f      	movs	r2, #15
    96e2:	0019      	movs	r1, r3
    96e4:	4391      	bics	r1, r2
    96e6:	1e0a      	subs	r2, r1, #0
    96e8:	d009      	beq.n	96fe <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    96ea:	2bfe      	cmp	r3, #254	; 0xfe
    96ec:	d013      	beq.n	9716 <sd_mmc_spi_start_read_block+0x56>
    96ee:	3c01      	subs	r4, #1
		if (i-- == 0) {
    96f0:	2c00      	cmp	r4, #0
    96f2:	d1ef      	bne.n	96d4 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    96f4:	2204      	movs	r2, #4
    96f6:	4b0c      	ldr	r3, [pc, #48]	; (9728 <sd_mmc_spi_start_read_block+0x68>)
    96f8:	701a      	strb	r2, [r3, #0]
			return false;
    96fa:	2000      	movs	r0, #0
    96fc:	e00c      	b.n	9718 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    96fe:	075b      	lsls	r3, r3, #29
    9700:	d004      	beq.n	970c <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    9702:	3207      	adds	r2, #7
    9704:	4b08      	ldr	r3, [pc, #32]	; (9728 <sd_mmc_spi_start_read_block+0x68>)
    9706:	701a      	strb	r2, [r3, #0]
			return false;
    9708:	2000      	movs	r0, #0
    970a:	e005      	b.n	9718 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    970c:	220b      	movs	r2, #11
    970e:	4b06      	ldr	r3, [pc, #24]	; (9728 <sd_mmc_spi_start_read_block+0x68>)
    9710:	701a      	strb	r2, [r3, #0]
			return false;
    9712:	2000      	movs	r0, #0
    9714:	e000      	b.n	9718 <sd_mmc_spi_start_read_block+0x58>
	return true;
    9716:	2001      	movs	r0, #1
}
    9718:	b003      	add	sp, #12
    971a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    971c:	0007a120 	.word	0x0007a120
    9720:	200040fc 	.word	0x200040fc
    9724:	0000dd61 	.word	0x0000dd61
    9728:	2000410f 	.word	0x2000410f

0000972c <sd_mmc_spi_stop_write_block>:
{
    972c:	b530      	push	{r4, r5, lr}
    972e:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    9730:	a901      	add	r1, sp, #4
    9732:	2301      	movs	r3, #1
    9734:	425b      	negs	r3, r3
    9736:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    9738:	4d14      	ldr	r5, [pc, #80]	; (978c <sd_mmc_spi_stop_write_block+0x60>)
    973a:	2202      	movs	r2, #2
    973c:	0028      	movs	r0, r5
    973e:	4b14      	ldr	r3, [pc, #80]	; (9790 <sd_mmc_spi_stop_write_block+0x64>)
    9740:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    9742:	466b      	mov	r3, sp
    9744:	1ddc      	adds	r4, r3, #7
    9746:	23ff      	movs	r3, #255	; 0xff
    9748:	2201      	movs	r2, #1
    974a:	0021      	movs	r1, r4
    974c:	0028      	movs	r0, r5
    974e:	4d11      	ldr	r5, [pc, #68]	; (9794 <sd_mmc_spi_stop_write_block+0x68>)
    9750:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    9752:	7822      	ldrb	r2, [r4, #0]
    9754:	2311      	movs	r3, #17
    9756:	4013      	ands	r3, r2
    9758:	2b01      	cmp	r3, #1
    975a:	d005      	beq.n	9768 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    975c:	2201      	movs	r2, #1
    975e:	4b0e      	ldr	r3, [pc, #56]	; (9798 <sd_mmc_spi_stop_write_block+0x6c>)
    9760:	701a      	strb	r2, [r3, #0]
		return false;
    9762:	2000      	movs	r0, #0
}
    9764:	b003      	add	sp, #12
    9766:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    9768:	231e      	movs	r3, #30
    976a:	401a      	ands	r2, r3
    976c:	2a04      	cmp	r2, #4
    976e:	d00b      	beq.n	9788 <sd_mmc_spi_stop_write_block+0x5c>
    9770:	2a0a      	cmp	r2, #10
    9772:	d104      	bne.n	977e <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    9774:	3a02      	subs	r2, #2
    9776:	4b08      	ldr	r3, [pc, #32]	; (9798 <sd_mmc_spi_stop_write_block+0x6c>)
    9778:	701a      	strb	r2, [r3, #0]
		return false;
    977a:	2000      	movs	r0, #0
    977c:	e7f2      	b.n	9764 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    977e:	220a      	movs	r2, #10
    9780:	4b05      	ldr	r3, [pc, #20]	; (9798 <sd_mmc_spi_stop_write_block+0x6c>)
    9782:	701a      	strb	r2, [r3, #0]
		return false;
    9784:	2000      	movs	r0, #0
    9786:	e7ed      	b.n	9764 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    9788:	2001      	movs	r0, #1
    978a:	e7eb      	b.n	9764 <sd_mmc_spi_stop_write_block+0x38>
    978c:	200040fc 	.word	0x200040fc
    9790:	0000df19 	.word	0x0000df19
    9794:	0000dd61 	.word	0x0000dd61
    9798:	2000410f 	.word	0x2000410f

0000979c <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    979c:	b530      	push	{r4, r5, lr}
    979e:	b091      	sub	sp, #68	; 0x44
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    97a0:	2300      	movs	r3, #0
    97a2:	4a28      	ldr	r2, [pc, #160]	; (9844 <sd_mmc_spi_init+0xa8>)
    97a4:	7013      	strb	r3, [r2, #0]
	config->mode             = SPI_MODE_MASTER;
    97a6:	ac02      	add	r4, sp, #8
    97a8:	2201      	movs	r2, #1
    97aa:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    97ac:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    97ae:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    97b0:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    97b2:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    97b4:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    97b6:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    97b8:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    97ba:	3223      	adds	r2, #35	; 0x23
    97bc:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    97be:	3a18      	subs	r2, #24
    97c0:	2100      	movs	r1, #0
    97c2:	a808      	add	r0, sp, #32
    97c4:	4b20      	ldr	r3, [pc, #128]	; (9848 <sd_mmc_spi_init+0xac>)
    97c6:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    97c8:	2380      	movs	r3, #128	; 0x80
    97ca:	025b      	lsls	r3, r3, #9
    97cc:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    97ce:	4b1f      	ldr	r3, [pc, #124]	; (984c <sd_mmc_spi_init+0xb0>)
    97d0:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    97d2:	4b1f      	ldr	r3, [pc, #124]	; (9850 <sd_mmc_spi_init+0xb4>)
    97d4:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    97d6:	4b1f      	ldr	r3, [pc, #124]	; (9854 <sd_mmc_spi_init+0xb8>)
    97d8:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    97da:	4b1f      	ldr	r3, [pc, #124]	; (9858 <sd_mmc_spi_init+0xbc>)
    97dc:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    97de:	4b1f      	ldr	r3, [pc, #124]	; (985c <sd_mmc_spi_init+0xc0>)
    97e0:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    97e2:	4d1f      	ldr	r5, [pc, #124]	; (9860 <sd_mmc_spi_init+0xc4>)
    97e4:	0022      	movs	r2, r4
    97e6:	491f      	ldr	r1, [pc, #124]	; (9864 <sd_mmc_spi_init+0xc8>)
    97e8:	0028      	movs	r0, r5
    97ea:	4b1f      	ldr	r3, [pc, #124]	; (9868 <sd_mmc_spi_init+0xcc>)
    97ec:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    97ee:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    97f0:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    97f2:	2b00      	cmp	r3, #0
    97f4:	d1fc      	bne.n	97f0 <sd_mmc_spi_init+0x54>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    97f6:	6813      	ldr	r3, [r2, #0]
    97f8:	2102      	movs	r1, #2
    97fa:	430b      	orrs	r3, r1
    97fc:	6013      	str	r3, [r2, #0]
	config->address_enabled = false;
    97fe:	4a1b      	ldr	r2, [pc, #108]	; (986c <sd_mmc_spi_init+0xd0>)
    9800:	2300      	movs	r3, #0
    9802:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    9804:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    9806:	491a      	ldr	r1, [pc, #104]	; (9870 <sd_mmc_spi_init+0xd4>)
    9808:	7808      	ldrb	r0, [r1, #0]
    980a:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    980c:	4c19      	ldr	r4, [pc, #100]	; (9874 <sd_mmc_spi_init+0xd8>)
    980e:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    9810:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    9812:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    9814:	a901      	add	r1, sp, #4
    9816:	2201      	movs	r2, #1
    9818:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    981a:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    981c:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    981e:	4b16      	ldr	r3, [pc, #88]	; (9878 <sd_mmc_spi_init+0xdc>)
    9820:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    9822:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    9824:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9826:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9828:	2900      	cmp	r1, #0
    982a:	d104      	bne.n	9836 <sd_mmc_spi_init+0x9a>
		return &(ports[port_index]->Group[group_index]);
    982c:	0953      	lsrs	r3, r2, #5
    982e:	01db      	lsls	r3, r3, #7
    9830:	4912      	ldr	r1, [pc, #72]	; (987c <sd_mmc_spi_init+0xe0>)
    9832:	468c      	mov	ip, r1
    9834:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9836:	211f      	movs	r1, #31
    9838:	4011      	ands	r1, r2
    983a:	2201      	movs	r2, #1
    983c:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    983e:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    9840:	b011      	add	sp, #68	; 0x44
    9842:	bd30      	pop	{r4, r5, pc}
    9844:	2000410f 	.word	0x2000410f
    9848:	00012b83 	.word	0x00012b83
    984c:	00100002 	.word	0x00100002
    9850:	00110002 	.word	0x00110002
    9854:	00120002 	.word	0x00120002
    9858:	00130002 	.word	0x00130002
    985c:	00061a80 	.word	0x00061a80
    9860:	200040fc 	.word	0x200040fc
    9864:	42000c00 	.word	0x42000c00
    9868:	0000da9d 	.word	0x0000da9d
    986c:	2000411c 	.word	0x2000411c
    9870:	20000218 	.word	0x20000218
    9874:	2000410c 	.word	0x2000410c
    9878:	0000d375 	.word	0x0000d375
    987c:	41004400 	.word	0x41004400

00009880 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    9880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9882:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    9884:	2200      	movs	r2, #0
    9886:	4b0d      	ldr	r3, [pc, #52]	; (98bc <sd_mmc_spi_select_device+0x3c>)
    9888:	701a      	strb	r2, [r3, #0]
    988a:	000c      	movs	r4, r1
    988c:	4b0c      	ldr	r3, [pc, #48]	; (98c0 <sd_mmc_spi_select_device+0x40>)
    988e:	4299      	cmp	r1, r3
    9890:	d900      	bls.n	9894 <sd_mmc_spi_select_device+0x14>
    9892:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    9894:	4d0b      	ldr	r5, [pc, #44]	; (98c4 <sd_mmc_spi_select_device+0x44>)
    9896:	4e0c      	ldr	r6, [pc, #48]	; (98c8 <sd_mmc_spi_select_device+0x48>)
    9898:	e001      	b.n	989e <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    989a:	08e3      	lsrs	r3, r4, #3
    989c:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    989e:	0021      	movs	r1, r4
    98a0:	0028      	movs	r0, r5
    98a2:	47b0      	blx	r6
    98a4:	2817      	cmp	r0, #23
    98a6:	d0f8      	beq.n	989a <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    98a8:	0079      	lsls	r1, r7, #1
    98aa:	19cf      	adds	r7, r1, r7
    98ac:	4907      	ldr	r1, [pc, #28]	; (98cc <sd_mmc_spi_select_device+0x4c>)
    98ae:	19c9      	adds	r1, r1, r7
    98b0:	2201      	movs	r2, #1
    98b2:	4804      	ldr	r0, [pc, #16]	; (98c4 <sd_mmc_spi_select_device+0x44>)
    98b4:	4b06      	ldr	r3, [pc, #24]	; (98d0 <sd_mmc_spi_select_device+0x50>)
    98b6:	4798      	blx	r3
}
    98b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    98ba:	46c0      	nop			; (mov r8, r8)
    98bc:	2000410f 	.word	0x2000410f
    98c0:	00989680 	.word	0x00989680
    98c4:	200040fc 	.word	0x200040fc
    98c8:	0000da19 	.word	0x0000da19
    98cc:	2000410c 	.word	0x2000410c
    98d0:	0000de25 	.word	0x0000de25

000098d4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    98d4:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    98d6:	2200      	movs	r2, #0
    98d8:	4b04      	ldr	r3, [pc, #16]	; (98ec <sd_mmc_spi_deselect_device+0x18>)
    98da:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    98dc:	0041      	lsls	r1, r0, #1
    98de:	1808      	adds	r0, r1, r0
    98e0:	4903      	ldr	r1, [pc, #12]	; (98f0 <sd_mmc_spi_deselect_device+0x1c>)
    98e2:	1809      	adds	r1, r1, r0
    98e4:	4803      	ldr	r0, [pc, #12]	; (98f4 <sd_mmc_spi_deselect_device+0x20>)
    98e6:	4b04      	ldr	r3, [pc, #16]	; (98f8 <sd_mmc_spi_deselect_device+0x24>)
    98e8:	4798      	blx	r3
}
    98ea:	bd10      	pop	{r4, pc}
    98ec:	2000410f 	.word	0x2000410f
    98f0:	2000410c 	.word	0x2000410c
    98f4:	200040fc 	.word	0x200040fc
    98f8:	0000de25 	.word	0x0000de25

000098fc <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    98fc:	b570      	push	{r4, r5, r6, lr}
    98fe:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    9900:	22ff      	movs	r2, #255	; 0xff
    9902:	466b      	mov	r3, sp
    9904:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    9906:	2200      	movs	r2, #0
    9908:	4b07      	ldr	r3, [pc, #28]	; (9928 <sd_mmc_spi_send_clock+0x2c>)
    990a:	701a      	strb	r2, [r3, #0]
    990c:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    990e:	4e07      	ldr	r6, [pc, #28]	; (992c <sd_mmc_spi_send_clock+0x30>)
    9910:	4d07      	ldr	r5, [pc, #28]	; (9930 <sd_mmc_spi_send_clock+0x34>)
    9912:	2201      	movs	r2, #1
    9914:	466b      	mov	r3, sp
    9916:	1dd9      	adds	r1, r3, #7
    9918:	0030      	movs	r0, r6
    991a:	47a8      	blx	r5
    991c:	3c01      	subs	r4, #1
    991e:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    9920:	2c00      	cmp	r4, #0
    9922:	d1f6      	bne.n	9912 <sd_mmc_spi_send_clock+0x16>
	}
}
    9924:	b002      	add	sp, #8
    9926:	bd70      	pop	{r4, r5, r6, pc}
    9928:	2000410f 	.word	0x2000410f
    992c:	200040fc 	.word	0x200040fc
    9930:	0000df19 	.word	0x0000df19

00009934 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    9934:	b5f0      	push	{r4, r5, r6, r7, lr}
    9936:	46c6      	mov	lr, r8
    9938:	b500      	push	{lr}
    993a:	b086      	sub	sp, #24
    993c:	4680      	mov	r8, r0
    993e:	9200      	str	r2, [sp, #0]
    9940:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    9942:	22ff      	movs	r2, #255	; 0xff
    9944:	230f      	movs	r3, #15
    9946:	a802      	add	r0, sp, #8
    9948:	4684      	mov	ip, r0
    994a:	4463      	add	r3, ip
    994c:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    994e:	2200      	movs	r2, #0
    9950:	4b53      	ldr	r3, [pc, #332]	; (9aa0 <sd_mmc_spi_adtc_start+0x16c>)
    9952:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    9954:	ab04      	add	r3, sp, #16
    9956:	323f      	adds	r2, #63	; 0x3f
    9958:	4640      	mov	r0, r8
    995a:	4002      	ands	r2, r0
    995c:	2040      	movs	r0, #64	; 0x40
    995e:	4302      	orrs	r2, r0
    9960:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    9962:	0e0a      	lsrs	r2, r1, #24
    9964:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    9966:	0c0a      	lsrs	r2, r1, #16
    9968:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    996a:	0a0a      	lsrs	r2, r1, #8
    996c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    996e:	7119      	strb	r1, [r3, #4]
    9970:	2700      	movs	r7, #0
	crc = 0;
    9972:	2300      	movs	r3, #0
		value = *buf++;
    9974:	a904      	add	r1, sp, #16
    9976:	2208      	movs	r2, #8
				crc ^= 0x09;
    9978:	2409      	movs	r4, #9
    997a:	e011      	b.n	99a0 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    997c:	0076      	lsls	r6, r6, #1
    997e:	b2f6      	uxtb	r6, r6
    9980:	3801      	subs	r0, #1
    9982:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    9984:	2800      	cmp	r0, #0
    9986:	d008      	beq.n	999a <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    9988:	005b      	lsls	r3, r3, #1
    998a:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    998c:	001d      	movs	r5, r3
    998e:	4075      	eors	r5, r6
    9990:	062d      	lsls	r5, r5, #24
    9992:	d5f3      	bpl.n	997c <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    9994:	4063      	eors	r3, r4
    9996:	b2db      	uxtb	r3, r3
    9998:	e7f0      	b.n	997c <sd_mmc_spi_adtc_start+0x48>
    999a:	3701      	adds	r7, #1
	while (size--) {
    999c:	2f05      	cmp	r7, #5
    999e:	d002      	beq.n	99a6 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    99a0:	5c7e      	ldrb	r6, [r7, r1]
    99a2:	0010      	movs	r0, r2
    99a4:	e7f0      	b.n	9988 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    99a6:	005b      	lsls	r3, r3, #1
    99a8:	2201      	movs	r2, #1
    99aa:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    99ac:	ac04      	add	r4, sp, #16
    99ae:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    99b0:	4e3c      	ldr	r6, [pc, #240]	; (9aa4 <sd_mmc_spi_adtc_start+0x170>)
    99b2:	2201      	movs	r2, #1
    99b4:	210f      	movs	r1, #15
    99b6:	ab02      	add	r3, sp, #8
    99b8:	469c      	mov	ip, r3
    99ba:	4461      	add	r1, ip
    99bc:	0030      	movs	r0, r6
    99be:	4f3a      	ldr	r7, [pc, #232]	; (9aa8 <sd_mmc_spi_adtc_start+0x174>)
    99c0:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    99c2:	2206      	movs	r2, #6
    99c4:	0021      	movs	r1, r4
    99c6:	0030      	movs	r0, r6
    99c8:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    99ca:	ab02      	add	r3, sp, #8
    99cc:	1dd9      	adds	r1, r3, #7
    99ce:	23ff      	movs	r3, #255	; 0xff
    99d0:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    99d2:	2201      	movs	r2, #1
    99d4:	0030      	movs	r0, r6
    99d6:	4e35      	ldr	r6, [pc, #212]	; (9aac <sd_mmc_spi_adtc_start+0x178>)
    99d8:	47b0      	blx	r6
    99da:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    99dc:	ab02      	add	r3, sp, #8
    99de:	1dde      	adds	r6, r3, #7
    99e0:	4f30      	ldr	r7, [pc, #192]	; (9aa4 <sd_mmc_spi_adtc_start+0x170>)
    99e2:	4d32      	ldr	r5, [pc, #200]	; (9aac <sd_mmc_spi_adtc_start+0x178>)
    99e4:	23ff      	movs	r3, #255	; 0xff
    99e6:	2201      	movs	r2, #1
    99e8:	0031      	movs	r1, r6
    99ea:	0038      	movs	r0, r7
    99ec:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    99ee:	7833      	ldrb	r3, [r6, #0]
    99f0:	b25a      	sxtb	r2, r3
    99f2:	2a00      	cmp	r2, #0
    99f4:	da0b      	bge.n	9a0e <sd_mmc_spi_adtc_start+0xda>
    99f6:	3c01      	subs	r4, #1
    99f8:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    99fa:	2c00      	cmp	r4, #0
    99fc:	d1f2      	bne.n	99e4 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    99fe:	2202      	movs	r2, #2
    9a00:	4b27      	ldr	r3, [pc, #156]	; (9aa0 <sd_mmc_spi_adtc_start+0x16c>)
    9a02:	701a      	strb	r2, [r3, #0]
			return false;
    9a04:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    9a06:	b006      	add	sp, #24
    9a08:	bc04      	pop	{r2}
    9a0a:	4690      	mov	r8, r2
    9a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    9a0e:	4a28      	ldr	r2, [pc, #160]	; (9ab0 <sd_mmc_spi_adtc_start+0x17c>)
    9a10:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    9a12:	071a      	lsls	r2, r3, #28
    9a14:	d41a      	bmi.n	9a4c <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    9a16:	075a      	lsls	r2, r3, #29
    9a18:	d41d      	bmi.n	9a56 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    9a1a:	2201      	movs	r2, #1
    9a1c:	4393      	bics	r3, r2
    9a1e:	d11f      	bne.n	9a60 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    9a20:	4643      	mov	r3, r8
    9a22:	049b      	lsls	r3, r3, #18
    9a24:	d420      	bmi.n	9a68 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    9a26:	4643      	mov	r3, r8
    9a28:	059b      	lsls	r3, r3, #22
    9a2a:	d425      	bmi.n	9a78 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    9a2c:	4643      	mov	r3, r8
    9a2e:	055b      	lsls	r3, r3, #21
    9a30:	d42b      	bmi.n	9a8a <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    9a32:	4b20      	ldr	r3, [pc, #128]	; (9ab4 <sd_mmc_spi_adtc_start+0x180>)
    9a34:	466a      	mov	r2, sp
    9a36:	8812      	ldrh	r2, [r2, #0]
    9a38:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    9a3a:	4b1f      	ldr	r3, [pc, #124]	; (9ab8 <sd_mmc_spi_adtc_start+0x184>)
    9a3c:	466a      	mov	r2, sp
    9a3e:	8892      	ldrh	r2, [r2, #4]
    9a40:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    9a42:	2200      	movs	r2, #0
    9a44:	4b1d      	ldr	r3, [pc, #116]	; (9abc <sd_mmc_spi_adtc_start+0x188>)
    9a46:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    9a48:	2001      	movs	r0, #1
    9a4a:	e7dc      	b.n	9a06 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    9a4c:	2206      	movs	r2, #6
    9a4e:	4b14      	ldr	r3, [pc, #80]	; (9aa0 <sd_mmc_spi_adtc_start+0x16c>)
    9a50:	701a      	strb	r2, [r3, #0]
		return false;
    9a52:	2000      	movs	r0, #0
    9a54:	e7d7      	b.n	9a06 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    9a56:	2209      	movs	r2, #9
    9a58:	4b11      	ldr	r3, [pc, #68]	; (9aa0 <sd_mmc_spi_adtc_start+0x16c>)
    9a5a:	701a      	strb	r2, [r3, #0]
		return false;
    9a5c:	2000      	movs	r0, #0
    9a5e:	e7d2      	b.n	9a06 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    9a60:	4b0f      	ldr	r3, [pc, #60]	; (9aa0 <sd_mmc_spi_adtc_start+0x16c>)
    9a62:	701a      	strb	r2, [r3, #0]
		return false;
    9a64:	2000      	movs	r0, #0
    9a66:	e7ce      	b.n	9a06 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    9a68:	4b15      	ldr	r3, [pc, #84]	; (9ac0 <sd_mmc_spi_adtc_start+0x18c>)
    9a6a:	4798      	blx	r3
    9a6c:	2800      	cmp	r0, #0
    9a6e:	d1da      	bne.n	9a26 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    9a70:	2203      	movs	r2, #3
    9a72:	4b0b      	ldr	r3, [pc, #44]	; (9aa0 <sd_mmc_spi_adtc_start+0x16c>)
    9a74:	701a      	strb	r2, [r3, #0]
			return false;
    9a76:	e7c6      	b.n	9a06 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    9a78:	490d      	ldr	r1, [pc, #52]	; (9ab0 <sd_mmc_spi_adtc_start+0x17c>)
    9a7a:	2300      	movs	r3, #0
    9a7c:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    9a7e:	33ff      	adds	r3, #255	; 0xff
    9a80:	2201      	movs	r2, #1
    9a82:	4808      	ldr	r0, [pc, #32]	; (9aa4 <sd_mmc_spi_adtc_start+0x170>)
    9a84:	4e09      	ldr	r6, [pc, #36]	; (9aac <sd_mmc_spi_adtc_start+0x178>)
    9a86:	47b0      	blx	r6
    9a88:	e7d0      	b.n	9a2c <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    9a8a:	4e09      	ldr	r6, [pc, #36]	; (9ab0 <sd_mmc_spi_adtc_start+0x17c>)
    9a8c:	23ff      	movs	r3, #255	; 0xff
    9a8e:	2204      	movs	r2, #4
    9a90:	0031      	movs	r1, r6
    9a92:	4804      	ldr	r0, [pc, #16]	; (9aa4 <sd_mmc_spi_adtc_start+0x170>)
    9a94:	4f05      	ldr	r7, [pc, #20]	; (9aac <sd_mmc_spi_adtc_start+0x178>)
    9a96:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    9a98:	6833      	ldr	r3, [r6, #0]
    9a9a:	ba1b      	rev	r3, r3
    9a9c:	6033      	str	r3, [r6, #0]
    9a9e:	e7c8      	b.n	9a32 <sd_mmc_spi_adtc_start+0xfe>
    9aa0:	2000410f 	.word	0x2000410f
    9aa4:	200040fc 	.word	0x200040fc
    9aa8:	0000df19 	.word	0x0000df19
    9aac:	0000dd61 	.word	0x0000dd61
    9ab0:	20004114 	.word	0x20004114
    9ab4:	20004108 	.word	0x20004108
    9ab8:	20004110 	.word	0x20004110
    9abc:	20004118 	.word	0x20004118
    9ac0:	000095e5 	.word	0x000095e5

00009ac4 <sd_mmc_spi_send_cmd>:
{
    9ac4:	b510      	push	{r4, lr}
    9ac6:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    9ac8:	2300      	movs	r3, #0
    9aca:	9300      	str	r3, [sp, #0]
    9acc:	2200      	movs	r2, #0
    9ace:	4c02      	ldr	r4, [pc, #8]	; (9ad8 <sd_mmc_spi_send_cmd+0x14>)
    9ad0:	47a0      	blx	r4
}
    9ad2:	b002      	add	sp, #8
    9ad4:	bd10      	pop	{r4, pc}
    9ad6:	46c0      	nop			; (mov r8, r8)
    9ad8:	00009935 	.word	0x00009935

00009adc <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    9adc:	4b01      	ldr	r3, [pc, #4]	; (9ae4 <sd_mmc_spi_get_response+0x8>)
    9ade:	6818      	ldr	r0, [r3, #0]
}
    9ae0:	4770      	bx	lr
    9ae2:	46c0      	nop			; (mov r8, r8)
    9ae4:	20004114 	.word	0x20004114

00009ae8 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    9ae8:	b510      	push	{r4, lr}
    9aea:	b084      	sub	sp, #16
    9aec:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    9aee:	2200      	movs	r2, #0
    9af0:	4b14      	ldr	r3, [pc, #80]	; (9b44 <sd_mmc_spi_read_word+0x5c>)
    9af2:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    9af4:	4b14      	ldr	r3, [pc, #80]	; (9b48 <sd_mmc_spi_read_word+0x60>)
    9af6:	8819      	ldrh	r1, [r3, #0]
    9af8:	4b14      	ldr	r3, [pc, #80]	; (9b4c <sd_mmc_spi_read_word+0x64>)
    9afa:	6818      	ldr	r0, [r3, #0]
    9afc:	4b14      	ldr	r3, [pc, #80]	; (9b50 <sd_mmc_spi_read_word+0x68>)
    9afe:	4798      	blx	r3
    9b00:	2900      	cmp	r1, #0
    9b02:	d103      	bne.n	9b0c <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    9b04:	4b13      	ldr	r3, [pc, #76]	; (9b54 <sd_mmc_spi_read_word+0x6c>)
    9b06:	4798      	blx	r3
    9b08:	2800      	cmp	r0, #0
    9b0a:	d010      	beq.n	9b2e <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    9b0c:	23ff      	movs	r3, #255	; 0xff
    9b0e:	2204      	movs	r2, #4
    9b10:	a901      	add	r1, sp, #4
    9b12:	4811      	ldr	r0, [pc, #68]	; (9b58 <sd_mmc_spi_read_word+0x70>)
    9b14:	4c11      	ldr	r4, [pc, #68]	; (9b5c <sd_mmc_spi_read_word+0x74>)
    9b16:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    9b18:	4b0c      	ldr	r3, [pc, #48]	; (9b4c <sd_mmc_spi_read_word+0x64>)
    9b1a:	681a      	ldr	r2, [r3, #0]
    9b1c:	1d10      	adds	r0, r2, #4
    9b1e:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    9b20:	4b09      	ldr	r3, [pc, #36]	; (9b48 <sd_mmc_spi_read_word+0x60>)
    9b22:	8819      	ldrh	r1, [r3, #0]
    9b24:	4b0a      	ldr	r3, [pc, #40]	; (9b50 <sd_mmc_spi_read_word+0x68>)
    9b26:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    9b28:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    9b2a:	2900      	cmp	r1, #0
    9b2c:	d001      	beq.n	9b32 <sd_mmc_spi_read_word+0x4a>
}
    9b2e:	b004      	add	sp, #16
    9b30:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    9b32:	23ff      	movs	r3, #255	; 0xff
    9b34:	2202      	movs	r2, #2
    9b36:	a903      	add	r1, sp, #12
    9b38:	4807      	ldr	r0, [pc, #28]	; (9b58 <sd_mmc_spi_read_word+0x70>)
    9b3a:	4c08      	ldr	r4, [pc, #32]	; (9b5c <sd_mmc_spi_read_word+0x74>)
    9b3c:	47a0      	blx	r4
	return true;
    9b3e:	2001      	movs	r0, #1
    9b40:	e7f5      	b.n	9b2e <sd_mmc_spi_read_word+0x46>
    9b42:	46c0      	nop			; (mov r8, r8)
    9b44:	2000410f 	.word	0x2000410f
    9b48:	20004108 	.word	0x20004108
    9b4c:	20004118 	.word	0x20004118
    9b50:	00015921 	.word	0x00015921
    9b54:	000096c1 	.word	0x000096c1
    9b58:	200040fc 	.word	0x200040fc
    9b5c:	0000dd61 	.word	0x0000dd61

00009b60 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    9b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b62:	46de      	mov	lr, fp
    9b64:	4657      	mov	r7, sl
    9b66:	4646      	mov	r6, r8
    9b68:	b5c0      	push	{r6, r7, lr}
    9b6a:	b082      	sub	sp, #8
    9b6c:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    9b6e:	2200      	movs	r2, #0
    9b70:	4b17      	ldr	r3, [pc, #92]	; (9bd0 <sd_mmc_spi_start_read_blocks+0x70>)
    9b72:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    9b74:	1e4c      	subs	r4, r1, #1
    9b76:	b2a4      	uxth	r4, r4
    9b78:	2900      	cmp	r1, #0
    9b7a:	d026      	beq.n	9bca <sd_mmc_spi_start_read_blocks+0x6a>
    9b7c:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    9b7e:	4b15      	ldr	r3, [pc, #84]	; (9bd4 <sd_mmc_spi_start_read_blocks+0x74>)
    9b80:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    9b82:	4f15      	ldr	r7, [pc, #84]	; (9bd8 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    9b84:	47d0      	blx	sl
    9b86:	4680      	mov	r8, r0
    9b88:	2800      	cmp	r0, #0
    9b8a:	d017      	beq.n	9bbc <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    9b8c:	883a      	ldrh	r2, [r7, #0]
    9b8e:	465b      	mov	r3, fp
    9b90:	1999      	adds	r1, r3, r6
    9b92:	23ff      	movs	r3, #255	; 0xff
    9b94:	4811      	ldr	r0, [pc, #68]	; (9bdc <sd_mmc_spi_start_read_blocks+0x7c>)
    9b96:	4d12      	ldr	r5, [pc, #72]	; (9be0 <sd_mmc_spi_start_read_blocks+0x80>)
    9b98:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    9b9a:	883b      	ldrh	r3, [r7, #0]
    9b9c:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    9b9e:	4a11      	ldr	r2, [pc, #68]	; (9be4 <sd_mmc_spi_start_read_blocks+0x84>)
    9ba0:	6811      	ldr	r1, [r2, #0]
    9ba2:	468c      	mov	ip, r1
    9ba4:	4463      	add	r3, ip
    9ba6:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    9ba8:	23ff      	movs	r3, #255	; 0xff
    9baa:	2202      	movs	r2, #2
    9bac:	a901      	add	r1, sp, #4
    9bae:	480b      	ldr	r0, [pc, #44]	; (9bdc <sd_mmc_spi_start_read_blocks+0x7c>)
    9bb0:	47a8      	blx	r5
	while (nb_block--) {
    9bb2:	3c01      	subs	r4, #1
    9bb4:	b2a4      	uxth	r4, r4
    9bb6:	4b0c      	ldr	r3, [pc, #48]	; (9be8 <sd_mmc_spi_start_read_blocks+0x88>)
    9bb8:	429c      	cmp	r4, r3
    9bba:	d1e3      	bne.n	9b84 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    9bbc:	4640      	mov	r0, r8
    9bbe:	b002      	add	sp, #8
    9bc0:	bc1c      	pop	{r2, r3, r4}
    9bc2:	4690      	mov	r8, r2
    9bc4:	469a      	mov	sl, r3
    9bc6:	46a3      	mov	fp, r4
    9bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    9bca:	2301      	movs	r3, #1
    9bcc:	4698      	mov	r8, r3
    9bce:	e7f5      	b.n	9bbc <sd_mmc_spi_start_read_blocks+0x5c>
    9bd0:	2000410f 	.word	0x2000410f
    9bd4:	000096c1 	.word	0x000096c1
    9bd8:	20004108 	.word	0x20004108
    9bdc:	200040fc 	.word	0x200040fc
    9be0:	0000dd61 	.word	0x0000dd61
    9be4:	20004118 	.word	0x20004118
    9be8:	0000ffff 	.word	0x0000ffff

00009bec <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    9bec:	2001      	movs	r0, #1
    9bee:	4770      	bx	lr

00009bf0 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    9bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9bf2:	46c6      	mov	lr, r8
    9bf4:	b500      	push	{lr}
    9bf6:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    9bf8:	2200      	movs	r2, #0
    9bfa:	4b15      	ldr	r3, [pc, #84]	; (9c50 <sd_mmc_spi_start_write_blocks+0x60>)
    9bfc:	701a      	strb	r2, [r3, #0]
	pos = 0;
    9bfe:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    9c00:	4f14      	ldr	r7, [pc, #80]	; (9c54 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    9c02:	4e15      	ldr	r6, [pc, #84]	; (9c58 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    9c04:	e000      	b.n	9c08 <sd_mmc_spi_start_write_blocks+0x18>
{
    9c06:	0021      	movs	r1, r4
	while (nb_block--) {
    9c08:	1e4c      	subs	r4, r1, #1
    9c0a:	b2a4      	uxth	r4, r4
    9c0c:	2900      	cmp	r1, #0
    9c0e:	d01b      	beq.n	9c48 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    9c10:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    9c12:	8832      	ldrh	r2, [r6, #0]
    9c14:	4643      	mov	r3, r8
    9c16:	1959      	adds	r1, r3, r5
    9c18:	4810      	ldr	r0, [pc, #64]	; (9c5c <sd_mmc_spi_start_write_blocks+0x6c>)
    9c1a:	4b11      	ldr	r3, [pc, #68]	; (9c60 <sd_mmc_spi_start_write_blocks+0x70>)
    9c1c:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    9c1e:	8833      	ldrh	r3, [r6, #0]
    9c20:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    9c22:	4a10      	ldr	r2, [pc, #64]	; (9c64 <sd_mmc_spi_start_write_blocks+0x74>)
    9c24:	6811      	ldr	r1, [r2, #0]
    9c26:	468c      	mov	ip, r1
    9c28:	4463      	add	r3, ip
    9c2a:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    9c2c:	4b0e      	ldr	r3, [pc, #56]	; (9c68 <sd_mmc_spi_start_write_blocks+0x78>)
    9c2e:	4798      	blx	r3
    9c30:	2800      	cmp	r0, #0
    9c32:	d00a      	beq.n	9c4a <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    9c34:	2c00      	cmp	r4, #0
    9c36:	d0e6      	beq.n	9c06 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    9c38:	4b0c      	ldr	r3, [pc, #48]	; (9c6c <sd_mmc_spi_start_write_blocks+0x7c>)
    9c3a:	4798      	blx	r3
    9c3c:	2800      	cmp	r0, #0
    9c3e:	d1e2      	bne.n	9c06 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    9c40:	2205      	movs	r2, #5
    9c42:	4b03      	ldr	r3, [pc, #12]	; (9c50 <sd_mmc_spi_start_write_blocks+0x60>)
    9c44:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    9c46:	e000      	b.n	9c4a <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    9c48:	2001      	movs	r0, #1
}
    9c4a:	bc04      	pop	{r2}
    9c4c:	4690      	mov	r8, r2
    9c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c50:	2000410f 	.word	0x2000410f
    9c54:	0000959d 	.word	0x0000959d
    9c58:	20004108 	.word	0x20004108
    9c5c:	200040fc 	.word	0x200040fc
    9c60:	0000df19 	.word	0x0000df19
    9c64:	20004118 	.word	0x20004118
    9c68:	0000972d 	.word	0x0000972d
    9c6c:	000095e5 	.word	0x000095e5

00009c70 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    9c70:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    9c72:	4b05      	ldr	r3, [pc, #20]	; (9c88 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    9c74:	4798      	blx	r3
    9c76:	2800      	cmp	r0, #0
    9c78:	d103      	bne.n	9c82 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    9c7a:	2205      	movs	r2, #5
    9c7c:	4b03      	ldr	r3, [pc, #12]	; (9c8c <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    9c7e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    9c80:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    9c82:	4b03      	ldr	r3, [pc, #12]	; (9c90 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    9c84:	4798      	blx	r3
    9c86:	e7fb      	b.n	9c80 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    9c88:	000095e5 	.word	0x000095e5
    9c8c:	2000410f 	.word	0x2000410f
    9c90:	00009649 	.word	0x00009649

00009c94 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    9c94:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    9c96:	2000      	movs	r0, #0
    9c98:	4b08      	ldr	r3, [pc, #32]	; (9cbc <delay_init+0x28>)
    9c9a:	4798      	blx	r3
    9c9c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    9c9e:	4c08      	ldr	r4, [pc, #32]	; (9cc0 <delay_init+0x2c>)
    9ca0:	21fa      	movs	r1, #250	; 0xfa
    9ca2:	0089      	lsls	r1, r1, #2
    9ca4:	47a0      	blx	r4
    9ca6:	4b07      	ldr	r3, [pc, #28]	; (9cc4 <delay_init+0x30>)
    9ca8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    9caa:	4907      	ldr	r1, [pc, #28]	; (9cc8 <delay_init+0x34>)
    9cac:	0028      	movs	r0, r5
    9cae:	47a0      	blx	r4
    9cb0:	4b06      	ldr	r3, [pc, #24]	; (9ccc <delay_init+0x38>)
    9cb2:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    9cb4:	2205      	movs	r2, #5
    9cb6:	4b06      	ldr	r3, [pc, #24]	; (9cd0 <delay_init+0x3c>)
    9cb8:	601a      	str	r2, [r3, #0]
}
    9cba:	bd70      	pop	{r4, r5, r6, pc}
    9cbc:	0000ea69 	.word	0x0000ea69
    9cc0:	00015815 	.word	0x00015815
    9cc4:	2000021c 	.word	0x2000021c
    9cc8:	000f4240 	.word	0x000f4240
    9ccc:	20000220 	.word	0x20000220
    9cd0:	e000e010 	.word	0xe000e010

00009cd4 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    9cd4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    9cd6:	4b08      	ldr	r3, [pc, #32]	; (9cf8 <delay_cycles_ms+0x24>)
    9cd8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    9cda:	4a08      	ldr	r2, [pc, #32]	; (9cfc <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    9cdc:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    9cde:	2180      	movs	r1, #128	; 0x80
    9ce0:	0249      	lsls	r1, r1, #9
	while (n--) {
    9ce2:	3801      	subs	r0, #1
    9ce4:	d307      	bcc.n	9cf6 <delay_cycles_ms+0x22>
	if (n > 0) {
    9ce6:	2c00      	cmp	r4, #0
    9ce8:	d0fb      	beq.n	9ce2 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    9cea:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    9cec:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    9cee:	6813      	ldr	r3, [r2, #0]
    9cf0:	420b      	tst	r3, r1
    9cf2:	d0fc      	beq.n	9cee <delay_cycles_ms+0x1a>
    9cf4:	e7f5      	b.n	9ce2 <delay_cycles_ms+0xe>
	}
}
    9cf6:	bd30      	pop	{r4, r5, pc}
    9cf8:	2000021c 	.word	0x2000021c
    9cfc:	e000e010 	.word	0xe000e010

00009d00 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    9d00:	b510      	push	{r4, lr}
	if (gpfIsr) {
    9d02:	4b03      	ldr	r3, [pc, #12]	; (9d10 <chip_isr+0x10>)
    9d04:	681b      	ldr	r3, [r3, #0]
    9d06:	2b00      	cmp	r3, #0
    9d08:	d000      	beq.n	9d0c <chip_isr+0xc>
		gpfIsr();
    9d0a:	4798      	blx	r3
	}
}
    9d0c:	bd10      	pop	{r4, pc}
    9d0e:	46c0      	nop			; (mov r8, r8)
    9d10:	20004120 	.word	0x20004120

00009d14 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    9d14:	b570      	push	{r4, r5, r6, lr}
    9d16:	b082      	sub	sp, #8
	gpfIsr = NULL;
    9d18:	2300      	movs	r3, #0
    9d1a:	4a15      	ldr	r2, [pc, #84]	; (9d70 <nm_bsp_init+0x5c>)
    9d1c:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    9d1e:	ac01      	add	r4, sp, #4
    9d20:	2501      	movs	r5, #1
    9d22:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    9d24:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    9d26:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    9d28:	0021      	movs	r1, r4
    9d2a:	201b      	movs	r0, #27
    9d2c:	4e11      	ldr	r6, [pc, #68]	; (9d74 <nm_bsp_init+0x60>)
    9d2e:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    9d30:	0021      	movs	r1, r4
    9d32:	201c      	movs	r0, #28
    9d34:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    9d36:	0021      	movs	r1, r4
    9d38:	2028      	movs	r0, #40	; 0x28
    9d3a:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    9d3c:	4b0e      	ldr	r3, [pc, #56]	; (9d78 <nm_bsp_init+0x64>)
    9d3e:	2280      	movs	r2, #128	; 0x80
    9d40:	0552      	lsls	r2, r2, #21
    9d42:	615a      	str	r2, [r3, #20]
    9d44:	2280      	movs	r2, #128	; 0x80
    9d46:	0512      	lsls	r2, r2, #20
    9d48:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    9d4a:	4b0c      	ldr	r3, [pc, #48]	; (9d7c <nm_bsp_init+0x68>)
    9d4c:	681b      	ldr	r3, [r3, #0]
    9d4e:	421d      	tst	r5, r3
    9d50:	d003      	beq.n	9d5a <nm_bsp_init+0x46>
    9d52:	4b0a      	ldr	r3, [pc, #40]	; (9d7c <nm_bsp_init+0x68>)
    9d54:	681b      	ldr	r3, [r3, #0]
    9d56:	079b      	lsls	r3, r3, #30
    9d58:	d401      	bmi.n	9d5e <nm_bsp_init+0x4a>
	    delay_init();
    9d5a:	4b09      	ldr	r3, [pc, #36]	; (9d80 <nm_bsp_init+0x6c>)
    9d5c:	4798      	blx	r3
	cpu_irq_enable();
    9d5e:	2201      	movs	r2, #1
    9d60:	4b08      	ldr	r3, [pc, #32]	; (9d84 <nm_bsp_init+0x70>)
    9d62:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    9d64:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9d68:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
    9d6a:	2000      	movs	r0, #0
    9d6c:	b002      	add	sp, #8
    9d6e:	bd70      	pop	{r4, r5, r6, pc}
    9d70:	20004120 	.word	0x20004120
    9d74:	0000d375 	.word	0x0000d375
    9d78:	41004400 	.word	0x41004400
    9d7c:	e000e010 	.word	0xe000e010
    9d80:	00009c95 	.word	0x00009c95
    9d84:	20000226 	.word	0x20000226

00009d88 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    9d88:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    9d8a:	1e44      	subs	r4, r0, #1
    9d8c:	2800      	cmp	r0, #0
    9d8e:	d004      	beq.n	9d9a <nm_bsp_sleep+0x12>
		delay_ms(1);
    9d90:	4d02      	ldr	r5, [pc, #8]	; (9d9c <nm_bsp_sleep+0x14>)
    9d92:	2001      	movs	r0, #1
    9d94:	47a8      	blx	r5
	while (u32TimeMsec--) {
    9d96:	3c01      	subs	r4, #1
    9d98:	d2fb      	bcs.n	9d92 <nm_bsp_sleep+0xa>
	}
}
    9d9a:	bd70      	pop	{r4, r5, r6, pc}
    9d9c:	00009cd5 	.word	0x00009cd5

00009da0 <nm_bsp_reset>:
{
    9da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9da2:	4c07      	ldr	r4, [pc, #28]	; (9dc0 <nm_bsp_reset+0x20>)
    9da4:	2780      	movs	r7, #128	; 0x80
    9da6:	057f      	lsls	r7, r7, #21
    9da8:	6167      	str	r7, [r4, #20]
    9daa:	2580      	movs	r5, #128	; 0x80
    9dac:	052d      	lsls	r5, r5, #20
    9dae:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    9db0:	2001      	movs	r0, #1
    9db2:	4e04      	ldr	r6, [pc, #16]	; (9dc4 <nm_bsp_reset+0x24>)
    9db4:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    9db6:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    9db8:	200a      	movs	r0, #10
    9dba:	47b0      	blx	r6
    9dbc:	61a5      	str	r5, [r4, #24]
}
    9dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9dc0:	41004400 	.word	0x41004400
    9dc4:	00009d89 	.word	0x00009d89

00009dc8 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    9dc8:	b510      	push	{r4, lr}
    9dca:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    9dcc:	4b0e      	ldr	r3, [pc, #56]	; (9e08 <nm_bsp_register_isr+0x40>)
    9dce:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    9dd0:	ac01      	add	r4, sp, #4
    9dd2:	0020      	movs	r0, r4
    9dd4:	4b0d      	ldr	r3, [pc, #52]	; (9e0c <nm_bsp_register_isr+0x44>)
    9dd6:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    9dd8:	2329      	movs	r3, #41	; 0x29
    9dda:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    9ddc:	2300      	movs	r3, #0
    9dde:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    9de0:	3301      	adds	r3, #1
    9de2:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    9de4:	3301      	adds	r3, #1
    9de6:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    9de8:	0021      	movs	r1, r4
    9dea:	2009      	movs	r0, #9
    9dec:	4b08      	ldr	r3, [pc, #32]	; (9e10 <nm_bsp_register_isr+0x48>)
    9dee:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    9df0:	2200      	movs	r2, #0
    9df2:	2109      	movs	r1, #9
    9df4:	4807      	ldr	r0, [pc, #28]	; (9e14 <nm_bsp_register_isr+0x4c>)
    9df6:	4b08      	ldr	r3, [pc, #32]	; (9e18 <nm_bsp_register_isr+0x50>)
    9df8:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    9dfa:	2100      	movs	r1, #0
    9dfc:	2009      	movs	r0, #9
    9dfe:	4b07      	ldr	r3, [pc, #28]	; (9e1c <nm_bsp_register_isr+0x54>)
    9e00:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    9e02:	b004      	add	sp, #16
    9e04:	bd10      	pop	{r4, pc}
    9e06:	46c0      	nop			; (mov r8, r8)
    9e08:	20004120 	.word	0x20004120
    9e0c:	0000d2e9 	.word	0x0000d2e9
    9e10:	0000d2fd 	.word	0x0000d2fd
    9e14:	00009d01 	.word	0x00009d01
    9e18:	0000d1a5 	.word	0x0000d1a5
    9e1c:	0000d1d1 	.word	0x0000d1d1

00009e20 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    9e20:	b510      	push	{r4, lr}
	if (u8Enable) {
    9e22:	2800      	cmp	r0, #0
    9e24:	d104      	bne.n	9e30 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    9e26:	2100      	movs	r1, #0
    9e28:	2009      	movs	r0, #9
    9e2a:	4b04      	ldr	r3, [pc, #16]	; (9e3c <nm_bsp_interrupt_ctrl+0x1c>)
    9e2c:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    9e2e:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    9e30:	2100      	movs	r1, #0
    9e32:	2009      	movs	r0, #9
    9e34:	4b02      	ldr	r3, [pc, #8]	; (9e40 <nm_bsp_interrupt_ctrl+0x20>)
    9e36:	4798      	blx	r3
    9e38:	e7f9      	b.n	9e2e <nm_bsp_interrupt_ctrl+0xe>
    9e3a:	46c0      	nop			; (mov r8, r8)
    9e3c:	0000d1f1 	.word	0x0000d1f1
    9e40:	0000d1d1 	.word	0x0000d1d1

00009e44 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    9e44:	b510      	push	{r4, lr}
    9e46:	b090      	sub	sp, #64	; 0x40
	slave->ss_pin          = config->ss_pin;
    9e48:	4c2b      	ldr	r4, [pc, #172]	; (9ef8 <nm_bus_init+0xb4>)
    9e4a:	230e      	movs	r3, #14
    9e4c:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    9e4e:	2300      	movs	r3, #0
    9e50:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    9e52:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    9e54:	a901      	add	r1, sp, #4
    9e56:	2201      	movs	r2, #1
    9e58:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    9e5a:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    9e5c:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    9e5e:	200e      	movs	r0, #14
    9e60:	4b26      	ldr	r3, [pc, #152]	; (9efc <nm_bus_init+0xb8>)
    9e62:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    9e64:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    9e66:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9e68:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9e6a:	2900      	cmp	r1, #0
    9e6c:	d104      	bne.n	9e78 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    9e6e:	0953      	lsrs	r3, r2, #5
    9e70:	01db      	lsls	r3, r3, #7
    9e72:	4923      	ldr	r1, [pc, #140]	; (9f00 <nm_bus_init+0xbc>)
    9e74:	468c      	mov	ip, r1
    9e76:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9e78:	211f      	movs	r1, #31
    9e7a:	4011      	ands	r1, r2
    9e7c:	2201      	movs	r2, #1
    9e7e:	0010      	movs	r0, r2
    9e80:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    9e82:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    9e84:	ac02      	add	r4, sp, #8
    9e86:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    9e88:	2300      	movs	r3, #0
    9e8a:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    9e8c:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    9e8e:	21c0      	movs	r1, #192	; 0xc0
    9e90:	0389      	lsls	r1, r1, #14
    9e92:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    9e94:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    9e96:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    9e98:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    9e9a:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    9e9c:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    9e9e:	3223      	adds	r2, #35	; 0x23
    9ea0:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    9ea2:	3a18      	subs	r2, #24
    9ea4:	2100      	movs	r1, #0
    9ea6:	a808      	add	r0, sp, #32
    9ea8:	4b16      	ldr	r3, [pc, #88]	; (9f04 <nm_bus_init+0xc0>)
    9eaa:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    9eac:	4b16      	ldr	r3, [pc, #88]	; (9f08 <nm_bus_init+0xc4>)
    9eae:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    9eb0:	4b16      	ldr	r3, [pc, #88]	; (9f0c <nm_bus_init+0xc8>)
    9eb2:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    9eb4:	2301      	movs	r3, #1
    9eb6:	425b      	negs	r3, r3
    9eb8:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    9eba:	4b15      	ldr	r3, [pc, #84]	; (9f10 <nm_bus_init+0xcc>)
    9ebc:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    9ebe:	4b15      	ldr	r3, [pc, #84]	; (9f14 <nm_bus_init+0xd0>)
    9ec0:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    9ec2:	0022      	movs	r2, r4
    9ec4:	4914      	ldr	r1, [pc, #80]	; (9f18 <nm_bus_init+0xd4>)
    9ec6:	4815      	ldr	r0, [pc, #84]	; (9f1c <nm_bus_init+0xd8>)
    9ec8:	4b15      	ldr	r3, [pc, #84]	; (9f20 <nm_bus_init+0xdc>)
    9eca:	4798      	blx	r3
    9ecc:	2800      	cmp	r0, #0
    9ece:	d110      	bne.n	9ef2 <nm_bus_init+0xae>
	SercomSpi *const spi_module = &(module->hw->SPI);
    9ed0:	4b12      	ldr	r3, [pc, #72]	; (9f1c <nm_bus_init+0xd8>)
    9ed2:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    9ed4:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    9ed6:	2b00      	cmp	r3, #0
    9ed8:	d1fc      	bne.n	9ed4 <nm_bus_init+0x90>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    9eda:	6813      	ldr	r3, [r2, #0]
    9edc:	2102      	movs	r1, #2
    9ede:	430b      	orrs	r3, r1
    9ee0:	6013      	str	r3, [r2, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    9ee2:	4b10      	ldr	r3, [pc, #64]	; (9f24 <nm_bus_init+0xe0>)
    9ee4:	4798      	blx	r3
	nm_bsp_sleep(1);
    9ee6:	2001      	movs	r0, #1
    9ee8:	4b0f      	ldr	r3, [pc, #60]	; (9f28 <nm_bus_init+0xe4>)
    9eea:	4798      	blx	r3
#endif
	return result;
    9eec:	2000      	movs	r0, #0
}
    9eee:	b010      	add	sp, #64	; 0x40
    9ef0:	bd10      	pop	{r4, pc}
		return M2M_ERR_BUS_FAIL;
    9ef2:	2006      	movs	r0, #6
    9ef4:	4240      	negs	r0, r0
    9ef6:	e7fa      	b.n	9eee <nm_bus_init+0xaa>
    9ef8:	20005be0 	.word	0x20005be0
    9efc:	0000d375 	.word	0x0000d375
    9f00:	41004400 	.word	0x41004400
    9f04:	00012b83 	.word	0x00012b83
    9f08:	000c0002 	.word	0x000c0002
    9f0c:	000d0002 	.word	0x000d0002
    9f10:	000f0002 	.word	0x000f0002
    9f14:	00124f80 	.word	0x00124f80
    9f18:	42001000 	.word	0x42001000
    9f1c:	20005be4 	.word	0x20005be4
    9f20:	0000da9d 	.word	0x0000da9d
    9f24:	00009da1 	.word	0x00009da1
    9f28:	00009d89 	.word	0x00009d89

00009f2c <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    9f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f2e:	46de      	mov	lr, fp
    9f30:	4657      	mov	r7, sl
    9f32:	464e      	mov	r6, r9
    9f34:	4645      	mov	r5, r8
    9f36:	b5e0      	push	{r5, r6, r7, lr}
    9f38:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    9f3a:	2803      	cmp	r0, #3
    9f3c:	d000      	beq.n	9f40 <nm_bus_ioctl+0x14>
    9f3e:	e075      	b.n	a02c <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    9f40:	680e      	ldr	r6, [r1, #0]
    9f42:	684d      	ldr	r5, [r1, #4]
    9f44:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0xFF;
    9f46:	22ff      	movs	r2, #255	; 0xff
    9f48:	466b      	mov	r3, sp
    9f4a:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    9f4c:	2d00      	cmp	r5, #0
    9f4e:	d027      	beq.n	9fa0 <nm_bus_ioctl+0x74>
    9f50:	2c00      	cmp	r4, #0
    9f52:	d065      	beq.n	a020 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    9f54:	2e00      	cmp	r6, #0
    9f56:	d100      	bne.n	9f5a <nm_bus_ioctl+0x2e>
    9f58:	e075      	b.n	a046 <nm_bus_ioctl+0x11a>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    9f5a:	2300      	movs	r3, #0
    9f5c:	4698      	mov	r8, r3
    9f5e:	2300      	movs	r3, #0
    9f60:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    9f62:	2201      	movs	r2, #1
    9f64:	493a      	ldr	r1, [pc, #232]	; (a050 <nm_bus_ioctl+0x124>)
    9f66:	483b      	ldr	r0, [pc, #236]	; (a054 <nm_bus_ioctl+0x128>)
    9f68:	4b3b      	ldr	r3, [pc, #236]	; (a058 <nm_bus_ioctl+0x12c>)
    9f6a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9f6c:	4b39      	ldr	r3, [pc, #228]	; (a054 <nm_bus_ioctl+0x128>)
    9f6e:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    9f70:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    9f72:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9f74:	4699      	mov	r9, r3
			pu8Miso++;
    9f76:	4659      	mov	r1, fp
    9f78:	424b      	negs	r3, r1
    9f7a:	4159      	adcs	r1, r3
    9f7c:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    9f7e:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    9f80:	4653      	mov	r3, sl
    9f82:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    9f84:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    9f86:	4239      	tst	r1, r7
    9f88:	d0fc      	beq.n	9f84 <nm_bus_ioctl+0x58>
    9f8a:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    9f8c:	4239      	tst	r1, r7
    9f8e:	d0fc      	beq.n	9f8a <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    9f90:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    9f92:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    9f94:	4211      	tst	r1, r2
    9f96:	d0fc      	beq.n	9f92 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9f98:	4649      	mov	r1, r9
    9f9a:	7989      	ldrb	r1, [r1, #6]
    9f9c:	468c      	mov	ip, r1
    9f9e:	e011      	b.n	9fc4 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    9fa0:	2e00      	cmp	r6, #0
    9fa2:	d03a      	beq.n	a01a <nm_bus_ioctl+0xee>
    9fa4:	2c00      	cmp	r4, #0
    9fa6:	d03e      	beq.n	a026 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    9fa8:	2300      	movs	r3, #0
    9faa:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    9fac:	3301      	adds	r3, #1
    9fae:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    9fb0:	466b      	mov	r3, sp
    9fb2:	1ddd      	adds	r5, r3, #7
    9fb4:	e7d5      	b.n	9f62 <nm_bus_ioctl+0x36>
    9fb6:	4660      	mov	r0, ip
    9fb8:	2801      	cmp	r0, #1
    9fba:	d00d      	beq.n	9fd8 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    9fbc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9fbe:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    9fc0:	2900      	cmp	r1, #0
    9fc2:	d00d      	beq.n	9fe0 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    9fc4:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    9fc6:	4211      	tst	r1, r2
    9fc8:	d0fc      	beq.n	9fc4 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    9fca:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    9fcc:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    9fce:	4210      	tst	r0, r2
    9fd0:	d0f1      	beq.n	9fb6 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    9fd2:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    9fd4:	311e      	adds	r1, #30
    9fd6:	e7ee      	b.n	9fb6 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    9fd8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9fda:	05c0      	lsls	r0, r0, #23
    9fdc:	0dc0      	lsrs	r0, r0, #23
    9fde:	e7ef      	b.n	9fc0 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    9fe0:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    9fe2:	3c01      	subs	r4, #1
    9fe4:	b2a4      	uxth	r4, r4
			pu8Miso++;
    9fe6:	445d      	add	r5, fp
			pu8Mosi++;
    9fe8:	4643      	mov	r3, r8
    9fea:	4259      	negs	r1, r3
    9fec:	414b      	adcs	r3, r1
    9fee:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    9ff0:	2c00      	cmp	r4, #0
    9ff2:	d1c4      	bne.n	9f7e <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    9ff4:	4b17      	ldr	r3, [pc, #92]	; (a054 <nm_bus_ioctl+0x128>)
    9ff6:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    9ff8:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    9ffa:	7e0b      	ldrb	r3, [r1, #24]
    9ffc:	4213      	tst	r3, r2
    9ffe:	d0fc      	beq.n	9ffa <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    a000:	2200      	movs	r2, #0
    a002:	4913      	ldr	r1, [pc, #76]	; (a050 <nm_bus_ioctl+0x124>)
    a004:	4813      	ldr	r0, [pc, #76]	; (a054 <nm_bus_ioctl+0x128>)
    a006:	4b14      	ldr	r3, [pc, #80]	; (a058 <nm_bus_ioctl+0x12c>)
    a008:	4798      	blx	r3
	return M2M_SUCCESS;
    a00a:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    a00c:	b003      	add	sp, #12
    a00e:	bc3c      	pop	{r2, r3, r4, r5}
    a010:	4690      	mov	r8, r2
    a012:	4699      	mov	r9, r3
    a014:	46a2      	mov	sl, r4
    a016:	46ab      	mov	fp, r5
    a018:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    a01a:	200f      	movs	r0, #15
    a01c:	4240      	negs	r0, r0
    a01e:	e7f5      	b.n	a00c <nm_bus_ioctl+0xe0>
    a020:	200f      	movs	r0, #15
    a022:	4240      	negs	r0, r0
    a024:	e7f2      	b.n	a00c <nm_bus_ioctl+0xe0>
    a026:	200f      	movs	r0, #15
    a028:	4240      	negs	r0, r0
		break;
    a02a:	e7ef      	b.n	a00c <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    a02c:	2283      	movs	r2, #131	; 0x83
    a02e:	0052      	lsls	r2, r2, #1
    a030:	490a      	ldr	r1, [pc, #40]	; (a05c <nm_bus_ioctl+0x130>)
    a032:	480b      	ldr	r0, [pc, #44]	; (a060 <nm_bus_ioctl+0x134>)
    a034:	4c0b      	ldr	r4, [pc, #44]	; (a064 <nm_bus_ioctl+0x138>)
    a036:	47a0      	blx	r4
    a038:	480b      	ldr	r0, [pc, #44]	; (a068 <nm_bus_ioctl+0x13c>)
    a03a:	47a0      	blx	r4
    a03c:	480b      	ldr	r0, [pc, #44]	; (a06c <nm_bus_ioctl+0x140>)
    a03e:	47a0      	blx	r4
			s8Ret = -1;
    a040:	2001      	movs	r0, #1
    a042:	4240      	negs	r0, r0
	return s8Ret;
    a044:	e7e2      	b.n	a00c <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    a046:	2301      	movs	r3, #1
    a048:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    a04a:	466b      	mov	r3, sp
    a04c:	1dde      	adds	r6, r3, #7
    a04e:	e786      	b.n	9f5e <nm_bus_ioctl+0x32>
    a050:	20005be0 	.word	0x20005be0
    a054:	20005be4 	.word	0x20005be4
    a058:	0000de25 	.word	0x0000de25
    a05c:	0001a564 	.word	0x0001a564
    a060:	0001a574 	.word	0x0001a574
    a064:	00008bdd 	.word	0x00008bdd
    a068:	0001a588 	.word	0x0001a588
    a06c:	0001a59c 	.word	0x0001a59c

0000a070 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    a070:	b510      	push	{r4, lr}
    a072:	b082      	sub	sp, #8
	config->direction  = PORT_PIN_DIR_INPUT;
    a074:	ab01      	add	r3, sp, #4
    a076:	2200      	movs	r2, #0
    a078:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    a07a:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    a07c:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a07e:	4b0e      	ldr	r3, [pc, #56]	; (a0b8 <nm_bus_deinit+0x48>)
    a080:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    a082:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    a084:	2b00      	cmp	r3, #0
    a086:	d1fc      	bne.n	a082 <nm_bus_deinit+0x12>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    a088:	338f      	adds	r3, #143	; 0x8f
    a08a:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    a08c:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    a08e:	6813      	ldr	r3, [r2, #0]
    a090:	2102      	movs	r1, #2
    a092:	438b      	bics	r3, r1
    a094:	6013      	str	r3, [r2, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    a096:	a901      	add	r1, sp, #4
    a098:	200c      	movs	r0, #12
    a09a:	4c08      	ldr	r4, [pc, #32]	; (a0bc <nm_bus_deinit+0x4c>)
    a09c:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    a09e:	a901      	add	r1, sp, #4
    a0a0:	200f      	movs	r0, #15
    a0a2:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    a0a4:	a901      	add	r1, sp, #4
    a0a6:	200d      	movs	r0, #13
    a0a8:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    a0aa:	a901      	add	r1, sp, #4
    a0ac:	200e      	movs	r0, #14
    a0ae:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    a0b0:	2000      	movs	r0, #0
    a0b2:	b002      	add	sp, #8
    a0b4:	bd10      	pop	{r4, pc}
    a0b6:	46c0      	nop			; (mov r8, r8)
    a0b8:	20005be4 	.word	0x20005be4
    a0bc:	0000d375 	.word	0x0000d375

0000a0c0 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    a0c0:	2a00      	cmp	r2, #0
    a0c2:	d006      	beq.n	a0d2 <m2m_memcpy+0x12>
    a0c4:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    a0c6:	780b      	ldrb	r3, [r1, #0]
    a0c8:	7003      	strb	r3, [r0, #0]
		pDst++;
    a0ca:	3001      	adds	r0, #1
		pSrc++;
    a0cc:	3101      	adds	r1, #1
	}while(--sz);
    a0ce:	4290      	cmp	r0, r2
    a0d0:	d1f9      	bne.n	a0c6 <m2m_memcpy+0x6>
}
    a0d2:	4770      	bx	lr

0000a0d4 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    a0d4:	2a00      	cmp	r2, #0
    a0d6:	d004      	beq.n	a0e2 <m2m_memset+0xe>
    a0d8:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    a0da:	7001      	strb	r1, [r0, #0]
		pBuf++;
    a0dc:	3001      	adds	r0, #1
	}while(--sz);
    a0de:	4290      	cmp	r0, r2
    a0e0:	d1fb      	bne.n	a0da <m2m_memset+0x6>
}
    a0e2:	4770      	bx	lr

0000a0e4 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    a0e4:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    a0e6:	7802      	ldrb	r2, [r0, #0]
    a0e8:	2a00      	cmp	r2, #0
    a0ea:	d007      	beq.n	a0fc <m2m_strlen+0x18>
    a0ec:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    a0ee:	3001      	adds	r0, #1
    a0f0:	b280      	uxth	r0, r0
		pcStr++;
    a0f2:	3301      	adds	r3, #1
	while(*pcStr)
    a0f4:	781a      	ldrb	r2, [r3, #0]
    a0f6:	2a00      	cmp	r2, #0
    a0f8:	d1f9      	bne.n	a0ee <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    a0fa:	4770      	bx	lr
	uint16	u16StrLen = 0;
    a0fc:	2000      	movs	r0, #0
    a0fe:	e7fc      	b.n	a0fa <m2m_strlen+0x16>

0000a100 <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    a100:	4a02      	ldr	r2, [pc, #8]	; (a10c <isr+0xc>)
    a102:	78d3      	ldrb	r3, [r2, #3]
    a104:	3301      	adds	r3, #1
    a106:	b2db      	uxtb	r3, r3
    a108:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    a10a:	4770      	bx	lr
    a10c:	20005bf0 	.word	0x20005bf0

0000a110 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    a110:	4770      	bx	lr
	...

0000a114 <hif_set_rx_done>:
{
    a114:	b500      	push	{lr}
    a116:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    a118:	2200      	movs	r2, #0
    a11a:	4b0a      	ldr	r3, [pc, #40]	; (a144 <hif_set_rx_done+0x30>)
    a11c:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    a11e:	2001      	movs	r0, #1
    a120:	4b09      	ldr	r3, [pc, #36]	; (a148 <hif_set_rx_done+0x34>)
    a122:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    a124:	a901      	add	r1, sp, #4
    a126:	4809      	ldr	r0, [pc, #36]	; (a14c <hif_set_rx_done+0x38>)
    a128:	4b09      	ldr	r3, [pc, #36]	; (a150 <hif_set_rx_done+0x3c>)
    a12a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    a12c:	2800      	cmp	r0, #0
    a12e:	d001      	beq.n	a134 <hif_set_rx_done+0x20>
}
    a130:	b003      	add	sp, #12
    a132:	bd00      	pop	{pc}
	reg |= NBIT1;
    a134:	2102      	movs	r1, #2
    a136:	9b01      	ldr	r3, [sp, #4]
    a138:	4319      	orrs	r1, r3
    a13a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    a13c:	4803      	ldr	r0, [pc, #12]	; (a14c <hif_set_rx_done+0x38>)
    a13e:	4b05      	ldr	r3, [pc, #20]	; (a154 <hif_set_rx_done+0x40>)
    a140:	4798      	blx	r3
    a142:	e7f5      	b.n	a130 <hif_set_rx_done+0x1c>
    a144:	20005bf0 	.word	0x20005bf0
    a148:	00009e21 	.word	0x00009e21
    a14c:	00001070 	.word	0x00001070
    a150:	0000b491 	.word	0x0000b491
    a154:	0000b49d 	.word	0x0000b49d

0000a158 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    a158:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    a15a:	4b0c      	ldr	r3, [pc, #48]	; (a18c <hif_chip_wake+0x34>)
    a15c:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    a15e:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    a160:	2b00      	cmp	r3, #0
    a162:	d10d      	bne.n	a180 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    a164:	4b09      	ldr	r3, [pc, #36]	; (a18c <hif_chip_wake+0x34>)
    a166:	785b      	ldrb	r3, [r3, #1]
    a168:	2b00      	cmp	r3, #0
    a16a:	d103      	bne.n	a174 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    a16c:	4b07      	ldr	r3, [pc, #28]	; (a18c <hif_chip_wake+0x34>)
    a16e:	781b      	ldrb	r3, [r3, #0]
    a170:	2b00      	cmp	r3, #0
    a172:	d106      	bne.n	a182 <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    a174:	4a05      	ldr	r2, [pc, #20]	; (a18c <hif_chip_wake+0x34>)
    a176:	7853      	ldrb	r3, [r2, #1]
    a178:	3301      	adds	r3, #1
    a17a:	b2db      	uxtb	r3, r3
    a17c:	7053      	strb	r3, [r2, #1]
    a17e:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    a180:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    a182:	4b03      	ldr	r3, [pc, #12]	; (a190 <hif_chip_wake+0x38>)
    a184:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    a186:	2800      	cmp	r0, #0
    a188:	d0f4      	beq.n	a174 <hif_chip_wake+0x1c>
    a18a:	e7f9      	b.n	a180 <hif_chip_wake+0x28>
    a18c:	20005bf0 	.word	0x20005bf0
    a190:	0000b191 	.word	0x0000b191

0000a194 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    a194:	4b05      	ldr	r3, [pc, #20]	; (a1ac <hif_chip_sleep_sc+0x18>)
    a196:	785b      	ldrb	r3, [r3, #1]
    a198:	2b00      	cmp	r3, #0
    a19a:	d004      	beq.n	a1a6 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    a19c:	4a03      	ldr	r2, [pc, #12]	; (a1ac <hif_chip_sleep_sc+0x18>)
    a19e:	7853      	ldrb	r3, [r2, #1]
    a1a0:	3b01      	subs	r3, #1
    a1a2:	b2db      	uxtb	r3, r3
    a1a4:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    a1a6:	2000      	movs	r0, #0
    a1a8:	4770      	bx	lr
    a1aa:	46c0      	nop			; (mov r8, r8)
    a1ac:	20005bf0 	.word	0x20005bf0

0000a1b0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    a1b0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    a1b2:	4b0b      	ldr	r3, [pc, #44]	; (a1e0 <hif_chip_sleep+0x30>)
    a1b4:	785b      	ldrb	r3, [r3, #1]
    a1b6:	2b00      	cmp	r3, #0
    a1b8:	d004      	beq.n	a1c4 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    a1ba:	4a09      	ldr	r2, [pc, #36]	; (a1e0 <hif_chip_sleep+0x30>)
    a1bc:	7853      	ldrb	r3, [r2, #1]
    a1be:	3b01      	subs	r3, #1
    a1c0:	b2db      	uxtb	r3, r3
    a1c2:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    a1c4:	4b06      	ldr	r3, [pc, #24]	; (a1e0 <hif_chip_sleep+0x30>)
    a1c6:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    a1c8:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    a1ca:	2b00      	cmp	r3, #0
    a1cc:	d103      	bne.n	a1d6 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    a1ce:	4b04      	ldr	r3, [pc, #16]	; (a1e0 <hif_chip_sleep+0x30>)
    a1d0:	781b      	ldrb	r3, [r3, #0]
    a1d2:	2b00      	cmp	r3, #0
    a1d4:	d100      	bne.n	a1d8 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    a1d6:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    a1d8:	4b02      	ldr	r3, [pc, #8]	; (a1e4 <hif_chip_sleep+0x34>)
    a1da:	4798      	blx	r3
    a1dc:	e7fb      	b.n	a1d6 <hif_chip_sleep+0x26>
    a1de:	46c0      	nop			; (mov r8, r8)
    a1e0:	20005bf0 	.word	0x20005bf0
    a1e4:	0000b129 	.word	0x0000b129

0000a1e8 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    a1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1ea:	46de      	mov	lr, fp
    a1ec:	4657      	mov	r7, sl
    a1ee:	b580      	push	{r7, lr}
    a1f0:	b089      	sub	sp, #36	; 0x24
    a1f2:	4683      	mov	fp, r0
    a1f4:	468a      	mov	sl, r1
    a1f6:	9201      	str	r2, [sp, #4]
    a1f8:	9300      	str	r3, [sp, #0]
    a1fa:	ab10      	add	r3, sp, #64	; 0x40
    a1fc:	cb80      	ldmia	r3!, {r7}
    a1fe:	881e      	ldrh	r6, [r3, #0]
    a200:	ab12      	add	r3, sp, #72	; 0x48
    a202:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    a204:	227f      	movs	r2, #127	; 0x7f
    a206:	400a      	ands	r2, r1
    a208:	ab07      	add	r3, sp, #28
    a20a:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    a20c:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    a20e:	2208      	movs	r2, #8
    a210:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    a212:	2f00      	cmp	r7, #0
    a214:	d03d      	beq.n	a292 <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    a216:	885a      	ldrh	r2, [r3, #2]
    a218:	1992      	adds	r2, r2, r6
    a21a:	18aa      	adds	r2, r5, r2
    a21c:	b292      	uxth	r2, r2
    a21e:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    a220:	4b68      	ldr	r3, [pc, #416]	; (a3c4 <hif_send+0x1dc>)
    a222:	4798      	blx	r3
    a224:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    a226:	d000      	beq.n	a22a <hif_send+0x42>
    a228:	e0c0      	b.n	a3ac <hif_send+0x1c4>
	{
		volatile uint32 reg, dma_addr = 0;
    a22a:	2300      	movs	r3, #0
    a22c:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    a22e:	aa02      	add	r2, sp, #8
    a230:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    a232:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    a234:	9b04      	ldr	r3, [sp, #16]
    a236:	465a      	mov	r2, fp
    a238:	431a      	orrs	r2, r3
    a23a:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    a23c:	9a04      	ldr	r2, [sp, #16]
    a23e:	4653      	mov	r3, sl
    a240:	021b      	lsls	r3, r3, #8
    a242:	4313      	orrs	r3, r2
    a244:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    a246:	ab07      	add	r3, sp, #28
    a248:	885b      	ldrh	r3, [r3, #2]
    a24a:	9a04      	ldr	r2, [sp, #16]
    a24c:	041b      	lsls	r3, r3, #16
    a24e:	4313      	orrs	r3, r2
    a250:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    a252:	9904      	ldr	r1, [sp, #16]
    a254:	485c      	ldr	r0, [pc, #368]	; (a3c8 <hif_send+0x1e0>)
    a256:	4b5d      	ldr	r3, [pc, #372]	; (a3cc <hif_send+0x1e4>)
    a258:	4798      	blx	r3
    a25a:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    a25c:	d156      	bne.n	a30c <hif_send+0x124>

		reg = 0UL;
    a25e:	2300      	movs	r3, #0
    a260:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    a262:	9b04      	ldr	r3, [sp, #16]
    a264:	2202      	movs	r2, #2
    a266:	4313      	orrs	r3, r2
    a268:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    a26a:	9904      	ldr	r1, [sp, #16]
    a26c:	4858      	ldr	r0, [pc, #352]	; (a3d0 <hif_send+0x1e8>)
    a26e:	4b57      	ldr	r3, [pc, #348]	; (a3cc <hif_send+0x1e4>)
    a270:	4798      	blx	r3
    a272:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    a274:	d14a      	bne.n	a30c <hif_send+0x124>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    a276:	2200      	movs	r2, #0
    a278:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    a27a:	ab02      	add	r3, sp, #8
    a27c:	80da      	strh	r2, [r3, #6]
    a27e:	3306      	adds	r3, #6
    a280:	881b      	ldrh	r3, [r3, #0]
    a282:	b29b      	uxth	r3, r3
    a284:	4a53      	ldr	r2, [pc, #332]	; (a3d4 <hif_send+0x1ec>)
    a286:	4293      	cmp	r3, r2
    a288:	d848      	bhi.n	a31c <hif_send+0x134>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    a28a:	4c53      	ldr	r4, [pc, #332]	; (a3d8 <hif_send+0x1f0>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    a28c:	4b53      	ldr	r3, [pc, #332]	; (a3dc <hif_send+0x1f4>)
    a28e:	469a      	mov	sl, r3
    a290:	e017      	b.n	a2c2 <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    a292:	ab07      	add	r3, sp, #28
    a294:	885a      	ldrh	r2, [r3, #2]
    a296:	9900      	ldr	r1, [sp, #0]
    a298:	468c      	mov	ip, r1
    a29a:	4462      	add	r2, ip
    a29c:	b292      	uxth	r2, r2
    a29e:	805a      	strh	r2, [r3, #2]
    a2a0:	e7be      	b.n	a220 <hif_send+0x38>
				nm_bsp_sleep(1);
    a2a2:	2001      	movs	r0, #1
    a2a4:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    a2a6:	9b04      	ldr	r3, [sp, #16]
    a2a8:	079b      	lsls	r3, r3, #30
    a2aa:	d527      	bpl.n	a2fc <hif_send+0x114>
		for(cnt = 0; cnt < 1000; cnt ++)
    a2ac:	ab02      	add	r3, sp, #8
    a2ae:	88da      	ldrh	r2, [r3, #6]
    a2b0:	3201      	adds	r2, #1
    a2b2:	b292      	uxth	r2, r2
    a2b4:	80da      	strh	r2, [r3, #6]
    a2b6:	3306      	adds	r3, #6
    a2b8:	881b      	ldrh	r3, [r3, #0]
    a2ba:	b29b      	uxth	r3, r3
    a2bc:	4a45      	ldr	r2, [pc, #276]	; (a3d4 <hif_send+0x1ec>)
    a2be:	4293      	cmp	r3, r2
    a2c0:	d82c      	bhi.n	a31c <hif_send+0x134>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    a2c2:	a904      	add	r1, sp, #16
    a2c4:	4842      	ldr	r0, [pc, #264]	; (a3d0 <hif_send+0x1e8>)
    a2c6:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    a2c8:	2800      	cmp	r0, #0
    a2ca:	d127      	bne.n	a31c <hif_send+0x134>
			if(cnt >= 500) {
    a2cc:	ab02      	add	r3, sp, #8
    a2ce:	3306      	adds	r3, #6
    a2d0:	881b      	ldrh	r3, [r3, #0]
    a2d2:	b29b      	uxth	r3, r3
    a2d4:	22f4      	movs	r2, #244	; 0xf4
    a2d6:	32ff      	adds	r2, #255	; 0xff
    a2d8:	4293      	cmp	r3, r2
    a2da:	d9e4      	bls.n	a2a6 <hif_send+0xbe>
				if(cnt < 501) {
    a2dc:	ab02      	add	r3, sp, #8
    a2de:	3306      	adds	r3, #6
    a2e0:	881b      	ldrh	r3, [r3, #0]
    a2e2:	b29b      	uxth	r3, r3
    a2e4:	3201      	adds	r2, #1
    a2e6:	4293      	cmp	r3, r2
    a2e8:	d8db      	bhi.n	a2a2 <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    a2ea:	483d      	ldr	r0, [pc, #244]	; (a3e0 <hif_send+0x1f8>)
    a2ec:	4b3d      	ldr	r3, [pc, #244]	; (a3e4 <hif_send+0x1fc>)
    a2ee:	469b      	mov	fp, r3
    a2f0:	4798      	blx	r3
    a2f2:	483d      	ldr	r0, [pc, #244]	; (a3e8 <hif_send+0x200>)
    a2f4:	47d8      	blx	fp
    a2f6:	483d      	ldr	r0, [pc, #244]	; (a3ec <hif_send+0x204>)
    a2f8:	47d8      	blx	fp
    a2fa:	e7d2      	b.n	a2a2 <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    a2fc:	a905      	add	r1, sp, #20
    a2fe:	483c      	ldr	r0, [pc, #240]	; (a3f0 <hif_send+0x208>)
    a300:	4b35      	ldr	r3, [pc, #212]	; (a3d8 <hif_send+0x1f0>)
    a302:	4798      	blx	r3
    a304:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    a306:	d009      	beq.n	a31c <hif_send+0x134>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    a308:	2300      	movs	r3, #0
    a30a:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    a30c:	4b39      	ldr	r3, [pc, #228]	; (a3f4 <hif_send+0x20c>)
    a30e:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    a310:	0020      	movs	r0, r4
    a312:	b009      	add	sp, #36	; 0x24
    a314:	bc0c      	pop	{r2, r3}
    a316:	4692      	mov	sl, r2
    a318:	469b      	mov	fp, r3
    a31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    a31c:	9b05      	ldr	r3, [sp, #20]
    a31e:	2b00      	cmp	r3, #0
    a320:	d03f      	beq.n	a3a2 <hif_send+0x1ba>
			u32CurrAddr = dma_addr;
    a322:	9b05      	ldr	r3, [sp, #20]
    a324:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    a326:	a907      	add	r1, sp, #28
    a328:	884b      	ldrh	r3, [r1, #2]
    a32a:	b29b      	uxth	r3, r3
    a32c:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    a32e:	9806      	ldr	r0, [sp, #24]
    a330:	2208      	movs	r2, #8
    a332:	4b31      	ldr	r3, [pc, #196]	; (a3f8 <hif_send+0x210>)
    a334:	4798      	blx	r3
    a336:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    a338:	d1e8      	bne.n	a30c <hif_send+0x124>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    a33a:	9b06      	ldr	r3, [sp, #24]
    a33c:	3308      	adds	r3, #8
    a33e:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    a340:	9b01      	ldr	r3, [sp, #4]
    a342:	2b00      	cmp	r3, #0
    a344:	d00b      	beq.n	a35e <hif_send+0x176>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    a346:	9806      	ldr	r0, [sp, #24]
    a348:	9a00      	ldr	r2, [sp, #0]
    a34a:	0019      	movs	r1, r3
    a34c:	4b2a      	ldr	r3, [pc, #168]	; (a3f8 <hif_send+0x210>)
    a34e:	4798      	blx	r3
    a350:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    a352:	d1db      	bne.n	a30c <hif_send+0x124>
				u32CurrAddr += u16CtrlBufSize;
    a354:	9b06      	ldr	r3, [sp, #24]
    a356:	9a00      	ldr	r2, [sp, #0]
    a358:	4694      	mov	ip, r2
    a35a:	4463      	add	r3, ip
    a35c:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    a35e:	2f00      	cmp	r7, #0
    a360:	d00e      	beq.n	a380 <hif_send+0x198>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    a362:	9b06      	ldr	r3, [sp, #24]
    a364:	9a00      	ldr	r2, [sp, #0]
    a366:	1aad      	subs	r5, r5, r2
    a368:	18ed      	adds	r5, r5, r3
    a36a:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    a36c:	9806      	ldr	r0, [sp, #24]
    a36e:	0032      	movs	r2, r6
    a370:	0039      	movs	r1, r7
    a372:	4b21      	ldr	r3, [pc, #132]	; (a3f8 <hif_send+0x210>)
    a374:	4798      	blx	r3
    a376:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    a378:	d1c8      	bne.n	a30c <hif_send+0x124>
				u32CurrAddr += u16DataSize;
    a37a:	9b06      	ldr	r3, [sp, #24]
    a37c:	18f3      	adds	r3, r6, r3
    a37e:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    a380:	9b05      	ldr	r3, [sp, #20]
    a382:	009b      	lsls	r3, r3, #2
    a384:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    a386:	9b04      	ldr	r3, [sp, #16]
    a388:	2202      	movs	r2, #2
    a38a:	4313      	orrs	r3, r2
    a38c:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    a38e:	9904      	ldr	r1, [sp, #16]
    a390:	481a      	ldr	r0, [pc, #104]	; (a3fc <hif_send+0x214>)
    a392:	4b0e      	ldr	r3, [pc, #56]	; (a3cc <hif_send+0x1e4>)
    a394:	4798      	blx	r3
    a396:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    a398:	d1b8      	bne.n	a30c <hif_send+0x124>
 	ret = hif_chip_sleep();
    a39a:	4b19      	ldr	r3, [pc, #100]	; (a400 <hif_send+0x218>)
    a39c:	4798      	blx	r3
    a39e:	0004      	movs	r4, r0
	return ret;
    a3a0:	e7b6      	b.n	a310 <hif_send+0x128>
			ret = hif_chip_sleep();
    a3a2:	4b17      	ldr	r3, [pc, #92]	; (a400 <hif_send+0x218>)
    a3a4:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    a3a6:	2403      	movs	r4, #3
    a3a8:	4264      	negs	r4, r4
			goto ERR2;
    a3aa:	e7b1      	b.n	a310 <hif_send+0x128>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    a3ac:	2298      	movs	r2, #152	; 0x98
    a3ae:	32ff      	adds	r2, #255	; 0xff
    a3b0:	4914      	ldr	r1, [pc, #80]	; (a404 <hif_send+0x21c>)
    a3b2:	4815      	ldr	r0, [pc, #84]	; (a408 <hif_send+0x220>)
    a3b4:	4d0b      	ldr	r5, [pc, #44]	; (a3e4 <hif_send+0x1fc>)
    a3b6:	47a8      	blx	r5
    a3b8:	4814      	ldr	r0, [pc, #80]	; (a40c <hif_send+0x224>)
    a3ba:	47a8      	blx	r5
    a3bc:	480b      	ldr	r0, [pc, #44]	; (a3ec <hif_send+0x204>)
    a3be:	47a8      	blx	r5
		goto ERR2;
    a3c0:	e7a6      	b.n	a310 <hif_send+0x128>
    a3c2:	46c0      	nop			; (mov r8, r8)
    a3c4:	0000a159 	.word	0x0000a159
    a3c8:	0000108c 	.word	0x0000108c
    a3cc:	0000b49d 	.word	0x0000b49d
    a3d0:	00001078 	.word	0x00001078
    a3d4:	000003e7 	.word	0x000003e7
    a3d8:	0000b491 	.word	0x0000b491
    a3dc:	00009d89 	.word	0x00009d89
    a3e0:	0001a8b0 	.word	0x0001a8b0
    a3e4:	00008bdd 	.word	0x00008bdd
    a3e8:	0001a8bc 	.word	0x0001a8bc
    a3ec:	0001a59c 	.word	0x0001a59c
    a3f0:	00150400 	.word	0x00150400
    a3f4:	0000a195 	.word	0x0000a195
    a3f8:	0000b511 	.word	0x0000b511
    a3fc:	0000106c 	.word	0x0000106c
    a400:	0000a1b1 	.word	0x0000a1b1
    a404:	0001a5c0 	.word	0x0001a5c0
    a408:	0001a574 	.word	0x0001a574
    a40c:	0001a8d0 	.word	0x0001a8d0

0000a410 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    a410:	b5f0      	push	{r4, r5, r6, r7, lr}
    a412:	46ce      	mov	lr, r9
    a414:	4647      	mov	r7, r8
    a416:	b580      	push	{r7, lr}
    a418:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
    a41a:	2200      	movs	r2, #0
    a41c:	4bc8      	ldr	r3, [pc, #800]	; (a740 <hif_handle_isr+0x330>)
    a41e:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    a420:	4699      	mov	r9, r3
    a422:	4698      	mov	r8, r3
    a424:	e07c      	b.n	a520 <hif_handle_isr+0x110>
				gstrHifCxt.u32RxAddr = address;
    a426:	4bc6      	ldr	r3, [pc, #792]	; (a740 <hif_handle_isr+0x330>)
    a428:	9a05      	ldr	r2, [sp, #20]
    a42a:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    a42c:	60df      	str	r7, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    a42e:	ad04      	add	r5, sp, #16
    a430:	2204      	movs	r2, #4
    a432:	0029      	movs	r1, r5
    a434:	9805      	ldr	r0, [sp, #20]
    a436:	4bc3      	ldr	r3, [pc, #780]	; (a744 <hif_handle_isr+0x334>)
    a438:	4798      	blx	r3
    a43a:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    a43c:	886b      	ldrh	r3, [r5, #2]
    a43e:	b29b      	uxth	r3, r3
    a440:	806b      	strh	r3, [r5, #2]
				if(M2M_SUCCESS != ret)
    a442:	2800      	cmp	r0, #0
    a444:	d132      	bne.n	a4ac <hif_handle_isr+0x9c>
				if(strHif.u16Length != size)
    a446:	ab04      	add	r3, sp, #16
    a448:	885b      	ldrh	r3, [r3, #2]
    a44a:	b29b      	uxth	r3, r3
    a44c:	429f      	cmp	r7, r3
    a44e:	d004      	beq.n	a45a <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
    a450:	ab04      	add	r3, sp, #16
    a452:	885b      	ldrh	r3, [r3, #2]
    a454:	1afb      	subs	r3, r7, r3
    a456:	2b04      	cmp	r3, #4
    a458:	dc36      	bgt.n	a4c8 <hif_handle_isr+0xb8>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    a45a:	ab04      	add	r3, sp, #16
    a45c:	781b      	ldrb	r3, [r3, #0]
    a45e:	2b01      	cmp	r3, #1
    a460:	d04a      	beq.n	a4f8 <hif_handle_isr+0xe8>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    a462:	ab04      	add	r3, sp, #16
    a464:	781b      	ldrb	r3, [r3, #0]
    a466:	2b02      	cmp	r3, #2
    a468:	d076      	beq.n	a558 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    a46a:	ab04      	add	r3, sp, #16
    a46c:	781b      	ldrb	r3, [r3, #0]
    a46e:	2b04      	cmp	r3, #4
    a470:	d100      	bne.n	a474 <hif_handle_isr+0x64>
    a472:	e08c      	b.n	a58e <hif_handle_isr+0x17e>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    a474:	ab04      	add	r3, sp, #16
    a476:	781b      	ldrb	r3, [r3, #0]
    a478:	2b06      	cmp	r3, #6
    a47a:	d100      	bne.n	a47e <hif_handle_isr+0x6e>
    a47c:	e0a2      	b.n	a5c4 <hif_handle_isr+0x1b4>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    a47e:	ab04      	add	r3, sp, #16
    a480:	781b      	ldrb	r3, [r3, #0]
    a482:	2b07      	cmp	r3, #7
    a484:	d100      	bne.n	a488 <hif_handle_isr+0x78>
    a486:	e0b8      	b.n	a5fa <hif_handle_isr+0x1ea>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    a488:	ab04      	add	r3, sp, #16
    a48a:	781b      	ldrb	r3, [r3, #0]
    a48c:	2b05      	cmp	r3, #5
    a48e:	d100      	bne.n	a492 <hif_handle_isr+0x82>
    a490:	e0cd      	b.n	a62e <hif_handle_isr+0x21e>
					M2M_ERR("(hif) invalid group ID\n");
    a492:	2284      	movs	r2, #132	; 0x84
    a494:	0092      	lsls	r2, r2, #2
    a496:	49ac      	ldr	r1, [pc, #688]	; (a748 <hif_handle_isr+0x338>)
    a498:	48ac      	ldr	r0, [pc, #688]	; (a74c <hif_handle_isr+0x33c>)
    a49a:	4cad      	ldr	r4, [pc, #692]	; (a750 <hif_handle_isr+0x340>)
    a49c:	47a0      	blx	r4
    a49e:	48ad      	ldr	r0, [pc, #692]	; (a754 <hif_handle_isr+0x344>)
    a4a0:	47a0      	blx	r4
    a4a2:	48ad      	ldr	r0, [pc, #692]	; (a758 <hif_handle_isr+0x348>)
    a4a4:	47a0      	blx	r4
					ret = M2M_ERR_BUS_FAIL;
    a4a6:	2406      	movs	r4, #6
    a4a8:	4264      	negs	r4, r4
    a4aa:	e106      	b.n	a6ba <hif_handle_isr+0x2aa>
					M2M_ERR("(hif) address bus fail\n");
    a4ac:	22e9      	movs	r2, #233	; 0xe9
    a4ae:	0052      	lsls	r2, r2, #1
    a4b0:	49a5      	ldr	r1, [pc, #660]	; (a748 <hif_handle_isr+0x338>)
    a4b2:	48a6      	ldr	r0, [pc, #664]	; (a74c <hif_handle_isr+0x33c>)
    a4b4:	4da6      	ldr	r5, [pc, #664]	; (a750 <hif_handle_isr+0x340>)
    a4b6:	47a8      	blx	r5
    a4b8:	48a8      	ldr	r0, [pc, #672]	; (a75c <hif_handle_isr+0x34c>)
    a4ba:	47a8      	blx	r5
    a4bc:	48a6      	ldr	r0, [pc, #664]	; (a758 <hif_handle_isr+0x348>)
    a4be:	47a8      	blx	r5
					nm_bsp_interrupt_ctrl(1);
    a4c0:	2001      	movs	r0, #1
    a4c2:	4ba7      	ldr	r3, [pc, #668]	; (a760 <hif_handle_isr+0x350>)
    a4c4:	4798      	blx	r3
    a4c6:	e0f8      	b.n	a6ba <hif_handle_isr+0x2aa>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    a4c8:	22dc      	movs	r2, #220	; 0xdc
    a4ca:	32ff      	adds	r2, #255	; 0xff
    a4cc:	499e      	ldr	r1, [pc, #632]	; (a748 <hif_handle_isr+0x338>)
    a4ce:	489f      	ldr	r0, [pc, #636]	; (a74c <hif_handle_isr+0x33c>)
    a4d0:	4c9f      	ldr	r4, [pc, #636]	; (a750 <hif_handle_isr+0x340>)
    a4d2:	47a0      	blx	r4
    a4d4:	a904      	add	r1, sp, #16
    a4d6:	884a      	ldrh	r2, [r1, #2]
    a4d8:	b292      	uxth	r2, r2
    a4da:	780b      	ldrb	r3, [r1, #0]
    a4dc:	b2db      	uxtb	r3, r3
    a4de:	7849      	ldrb	r1, [r1, #1]
    a4e0:	9100      	str	r1, [sp, #0]
    a4e2:	0039      	movs	r1, r7
    a4e4:	489f      	ldr	r0, [pc, #636]	; (a764 <hif_handle_isr+0x354>)
    a4e6:	47a0      	blx	r4
    a4e8:	489b      	ldr	r0, [pc, #620]	; (a758 <hif_handle_isr+0x348>)
    a4ea:	47a0      	blx	r4
						nm_bsp_interrupt_ctrl(1);
    a4ec:	2001      	movs	r0, #1
    a4ee:	4b9c      	ldr	r3, [pc, #624]	; (a760 <hif_handle_isr+0x350>)
    a4f0:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    a4f2:	2406      	movs	r4, #6
    a4f4:	4264      	negs	r4, r4
    a4f6:	e0e0      	b.n	a6ba <hif_handle_isr+0x2aa>
					if(gstrHifCxt.pfWifiCb)
    a4f8:	4b91      	ldr	r3, [pc, #580]	; (a740 <hif_handle_isr+0x330>)
    a4fa:	691b      	ldr	r3, [r3, #16]
    a4fc:	2b00      	cmp	r3, #0
    a4fe:	d020      	beq.n	a542 <hif_handle_isr+0x132>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    a500:	4b8f      	ldr	r3, [pc, #572]	; (a740 <hif_handle_isr+0x330>)
    a502:	691b      	ldr	r3, [r3, #16]
    a504:	aa04      	add	r2, sp, #16
    a506:	7850      	ldrb	r0, [r2, #1]
    a508:	b2c0      	uxtb	r0, r0
    a50a:	8851      	ldrh	r1, [r2, #2]
    a50c:	9a05      	ldr	r2, [sp, #20]
    a50e:	3208      	adds	r2, #8
    a510:	3908      	subs	r1, #8
    a512:	b289      	uxth	r1, r1
    a514:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    a516:	4b8a      	ldr	r3, [pc, #552]	; (a740 <hif_handle_isr+0x330>)
    a518:	789b      	ldrb	r3, [r3, #2]
    a51a:	2b00      	cmp	r3, #0
    a51c:	d000      	beq.n	a520 <hif_handle_isr+0x110>
    a51e:	e097      	b.n	a650 <hif_handle_isr+0x240>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    a520:	464b      	mov	r3, r9
    a522:	78db      	ldrb	r3, [r3, #3]
    a524:	2b00      	cmp	r3, #0
    a526:	d100      	bne.n	a52a <hif_handle_isr+0x11a>
    a528:	e103      	b.n	a732 <hif_handle_isr+0x322>
    a52a:	4643      	mov	r3, r8
    a52c:	791b      	ldrb	r3, [r3, #4]
    a52e:	2b00      	cmp	r3, #0
    a530:	d000      	beq.n	a534 <hif_handle_isr+0x124>
    a532:	e0fe      	b.n	a732 <hif_handle_isr+0x322>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    a534:	4a82      	ldr	r2, [pc, #520]	; (a740 <hif_handle_isr+0x330>)
    a536:	78d3      	ldrb	r3, [r2, #3]
    a538:	3b01      	subs	r3, #1
    a53a:	b2db      	uxtb	r3, r3
    a53c:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    a53e:	4e8a      	ldr	r6, [pc, #552]	; (a768 <hif_handle_isr+0x358>)
    a540:	e0c5      	b.n	a6ce <hif_handle_isr+0x2be>
						M2M_ERR("WIFI callback is not registered\n");
    a542:	22e8      	movs	r2, #232	; 0xe8
    a544:	32ff      	adds	r2, #255	; 0xff
    a546:	4980      	ldr	r1, [pc, #512]	; (a748 <hif_handle_isr+0x338>)
    a548:	4880      	ldr	r0, [pc, #512]	; (a74c <hif_handle_isr+0x33c>)
    a54a:	4c81      	ldr	r4, [pc, #516]	; (a750 <hif_handle_isr+0x340>)
    a54c:	47a0      	blx	r4
    a54e:	4887      	ldr	r0, [pc, #540]	; (a76c <hif_handle_isr+0x35c>)
    a550:	47a0      	blx	r4
    a552:	4881      	ldr	r0, [pc, #516]	; (a758 <hif_handle_isr+0x348>)
    a554:	47a0      	blx	r4
    a556:	e7de      	b.n	a516 <hif_handle_isr+0x106>
					if(gstrHifCxt.pfIpCb)
    a558:	4b79      	ldr	r3, [pc, #484]	; (a740 <hif_handle_isr+0x330>)
    a55a:	695b      	ldr	r3, [r3, #20]
    a55c:	2b00      	cmp	r3, #0
    a55e:	d00b      	beq.n	a578 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    a560:	4b77      	ldr	r3, [pc, #476]	; (a740 <hif_handle_isr+0x330>)
    a562:	695b      	ldr	r3, [r3, #20]
    a564:	aa04      	add	r2, sp, #16
    a566:	7850      	ldrb	r0, [r2, #1]
    a568:	b2c0      	uxtb	r0, r0
    a56a:	8851      	ldrh	r1, [r2, #2]
    a56c:	9a05      	ldr	r2, [sp, #20]
    a56e:	3208      	adds	r2, #8
    a570:	3908      	subs	r1, #8
    a572:	b289      	uxth	r1, r1
    a574:	4798      	blx	r3
    a576:	e7ce      	b.n	a516 <hif_handle_isr+0x106>
						M2M_ERR("Scoket callback is not registered\n");
    a578:	22f0      	movs	r2, #240	; 0xf0
    a57a:	32ff      	adds	r2, #255	; 0xff
    a57c:	4972      	ldr	r1, [pc, #456]	; (a748 <hif_handle_isr+0x338>)
    a57e:	4873      	ldr	r0, [pc, #460]	; (a74c <hif_handle_isr+0x33c>)
    a580:	4c73      	ldr	r4, [pc, #460]	; (a750 <hif_handle_isr+0x340>)
    a582:	47a0      	blx	r4
    a584:	487a      	ldr	r0, [pc, #488]	; (a770 <hif_handle_isr+0x360>)
    a586:	47a0      	blx	r4
    a588:	4873      	ldr	r0, [pc, #460]	; (a758 <hif_handle_isr+0x348>)
    a58a:	47a0      	blx	r4
    a58c:	e7c3      	b.n	a516 <hif_handle_isr+0x106>
					if(gstrHifCxt.pfOtaCb)
    a58e:	4b6c      	ldr	r3, [pc, #432]	; (a740 <hif_handle_isr+0x330>)
    a590:	699b      	ldr	r3, [r3, #24]
    a592:	2b00      	cmp	r3, #0
    a594:	d00b      	beq.n	a5ae <hif_handle_isr+0x19e>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    a596:	4b6a      	ldr	r3, [pc, #424]	; (a740 <hif_handle_isr+0x330>)
    a598:	699b      	ldr	r3, [r3, #24]
    a59a:	aa04      	add	r2, sp, #16
    a59c:	7850      	ldrb	r0, [r2, #1]
    a59e:	b2c0      	uxtb	r0, r0
    a5a0:	8851      	ldrh	r1, [r2, #2]
    a5a2:	9a05      	ldr	r2, [sp, #20]
    a5a4:	3208      	adds	r2, #8
    a5a6:	3908      	subs	r1, #8
    a5a8:	b289      	uxth	r1, r1
    a5aa:	4798      	blx	r3
    a5ac:	e7b3      	b.n	a516 <hif_handle_isr+0x106>
						M2M_ERR("Ota callback is not registered\n");
    a5ae:	22f8      	movs	r2, #248	; 0xf8
    a5b0:	32ff      	adds	r2, #255	; 0xff
    a5b2:	4965      	ldr	r1, [pc, #404]	; (a748 <hif_handle_isr+0x338>)
    a5b4:	4865      	ldr	r0, [pc, #404]	; (a74c <hif_handle_isr+0x33c>)
    a5b6:	4c66      	ldr	r4, [pc, #408]	; (a750 <hif_handle_isr+0x340>)
    a5b8:	47a0      	blx	r4
    a5ba:	486e      	ldr	r0, [pc, #440]	; (a774 <hif_handle_isr+0x364>)
    a5bc:	47a0      	blx	r4
    a5be:	4866      	ldr	r0, [pc, #408]	; (a758 <hif_handle_isr+0x348>)
    a5c0:	47a0      	blx	r4
    a5c2:	e7a8      	b.n	a516 <hif_handle_isr+0x106>
					if(gstrHifCxt.pfCryptoCb)
    a5c4:	4b5e      	ldr	r3, [pc, #376]	; (a740 <hif_handle_isr+0x330>)
    a5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a5c8:	2b00      	cmp	r3, #0
    a5ca:	d00b      	beq.n	a5e4 <hif_handle_isr+0x1d4>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    a5cc:	4b5c      	ldr	r3, [pc, #368]	; (a740 <hif_handle_isr+0x330>)
    a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a5d0:	aa04      	add	r2, sp, #16
    a5d2:	7850      	ldrb	r0, [r2, #1]
    a5d4:	b2c0      	uxtb	r0, r0
    a5d6:	8851      	ldrh	r1, [r2, #2]
    a5d8:	9a05      	ldr	r2, [sp, #20]
    a5da:	3208      	adds	r2, #8
    a5dc:	3908      	subs	r1, #8
    a5de:	b289      	uxth	r1, r1
    a5e0:	4798      	blx	r3
    a5e2:	e798      	b.n	a516 <hif_handle_isr+0x106>
						M2M_ERR("Crypto callback is not registered\n");
    a5e4:	2280      	movs	r2, #128	; 0x80
    a5e6:	0092      	lsls	r2, r2, #2
    a5e8:	4957      	ldr	r1, [pc, #348]	; (a748 <hif_handle_isr+0x338>)
    a5ea:	4858      	ldr	r0, [pc, #352]	; (a74c <hif_handle_isr+0x33c>)
    a5ec:	4c58      	ldr	r4, [pc, #352]	; (a750 <hif_handle_isr+0x340>)
    a5ee:	47a0      	blx	r4
    a5f0:	4861      	ldr	r0, [pc, #388]	; (a778 <hif_handle_isr+0x368>)
    a5f2:	47a0      	blx	r4
    a5f4:	4858      	ldr	r0, [pc, #352]	; (a758 <hif_handle_isr+0x348>)
    a5f6:	47a0      	blx	r4
    a5f8:	e78d      	b.n	a516 <hif_handle_isr+0x106>
					if(gstrHifCxt.pfSigmaCb)
    a5fa:	4b51      	ldr	r3, [pc, #324]	; (a740 <hif_handle_isr+0x330>)
    a5fc:	69db      	ldr	r3, [r3, #28]
    a5fe:	2b00      	cmp	r3, #0
    a600:	d00b      	beq.n	a61a <hif_handle_isr+0x20a>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    a602:	4b4f      	ldr	r3, [pc, #316]	; (a740 <hif_handle_isr+0x330>)
    a604:	69db      	ldr	r3, [r3, #28]
    a606:	aa04      	add	r2, sp, #16
    a608:	7850      	ldrb	r0, [r2, #1]
    a60a:	b2c0      	uxtb	r0, r0
    a60c:	8851      	ldrh	r1, [r2, #2]
    a60e:	9a05      	ldr	r2, [sp, #20]
    a610:	3208      	adds	r2, #8
    a612:	3908      	subs	r1, #8
    a614:	b289      	uxth	r1, r1
    a616:	4798      	blx	r3
    a618:	e77d      	b.n	a516 <hif_handle_isr+0x106>
						M2M_ERR("Sigma callback is not registered\n");
    a61a:	4a58      	ldr	r2, [pc, #352]	; (a77c <hif_handle_isr+0x36c>)
    a61c:	494a      	ldr	r1, [pc, #296]	; (a748 <hif_handle_isr+0x338>)
    a61e:	484b      	ldr	r0, [pc, #300]	; (a74c <hif_handle_isr+0x33c>)
    a620:	4c4b      	ldr	r4, [pc, #300]	; (a750 <hif_handle_isr+0x340>)
    a622:	47a0      	blx	r4
    a624:	4856      	ldr	r0, [pc, #344]	; (a780 <hif_handle_isr+0x370>)
    a626:	47a0      	blx	r4
    a628:	484b      	ldr	r0, [pc, #300]	; (a758 <hif_handle_isr+0x348>)
    a62a:	47a0      	blx	r4
    a62c:	e773      	b.n	a516 <hif_handle_isr+0x106>
				    if(gstrHifCxt.pfSslCb)
    a62e:	4b44      	ldr	r3, [pc, #272]	; (a740 <hif_handle_isr+0x330>)
    a630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a632:	2b00      	cmp	r3, #0
    a634:	d100      	bne.n	a638 <hif_handle_isr+0x228>
    a636:	e76e      	b.n	a516 <hif_handle_isr+0x106>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    a638:	4b41      	ldr	r3, [pc, #260]	; (a740 <hif_handle_isr+0x330>)
    a63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a63c:	aa04      	add	r2, sp, #16
    a63e:	7850      	ldrb	r0, [r2, #1]
    a640:	b2c0      	uxtb	r0, r0
    a642:	8851      	ldrh	r1, [r2, #2]
    a644:	9a05      	ldr	r2, [sp, #20]
    a646:	3208      	adds	r2, #8
    a648:	3908      	subs	r1, #8
    a64a:	b289      	uxth	r1, r1
    a64c:	4798      	blx	r3
    a64e:	e762      	b.n	a516 <hif_handle_isr+0x106>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    a650:	4a4c      	ldr	r2, [pc, #304]	; (a784 <hif_handle_isr+0x374>)
    a652:	493d      	ldr	r1, [pc, #244]	; (a748 <hif_handle_isr+0x338>)
    a654:	483d      	ldr	r0, [pc, #244]	; (a74c <hif_handle_isr+0x33c>)
    a656:	4c3e      	ldr	r4, [pc, #248]	; (a750 <hif_handle_isr+0x340>)
    a658:	47a0      	blx	r4
    a65a:	ab04      	add	r3, sp, #16
    a65c:	7819      	ldrb	r1, [r3, #0]
    a65e:	b2c9      	uxtb	r1, r1
    a660:	785a      	ldrb	r2, [r3, #1]
    a662:	b2d2      	uxtb	r2, r2
    a664:	4848      	ldr	r0, [pc, #288]	; (a788 <hif_handle_isr+0x378>)
    a666:	47a0      	blx	r4
    a668:	483b      	ldr	r0, [pc, #236]	; (a758 <hif_handle_isr+0x348>)
    a66a:	47a0      	blx	r4
					ret = hif_set_rx_done();
    a66c:	4b47      	ldr	r3, [pc, #284]	; (a78c <hif_handle_isr+0x37c>)
    a66e:	4798      	blx	r3
    a670:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    a672:	d122      	bne.n	a6ba <hif_handle_isr+0x2aa>
    a674:	e754      	b.n	a520 <hif_handle_isr+0x110>
				M2M_ERR("(hif) Wrong Size\n");
    a676:	4a46      	ldr	r2, [pc, #280]	; (a790 <hif_handle_isr+0x380>)
    a678:	4933      	ldr	r1, [pc, #204]	; (a748 <hif_handle_isr+0x338>)
    a67a:	4834      	ldr	r0, [pc, #208]	; (a74c <hif_handle_isr+0x33c>)
    a67c:	4c34      	ldr	r4, [pc, #208]	; (a750 <hif_handle_isr+0x340>)
    a67e:	47a0      	blx	r4
    a680:	4844      	ldr	r0, [pc, #272]	; (a794 <hif_handle_isr+0x384>)
    a682:	47a0      	blx	r4
    a684:	4834      	ldr	r0, [pc, #208]	; (a758 <hif_handle_isr+0x348>)
    a686:	47a0      	blx	r4
				ret = M2M_ERR_RCV;
    a688:	2402      	movs	r4, #2
    a68a:	4264      	negs	r4, r4
    a68c:	e015      	b.n	a6ba <hif_handle_isr+0x2aa>
			M2M_ERR("(hif) False interrupt %lx",reg);
    a68e:	4a42      	ldr	r2, [pc, #264]	; (a798 <hif_handle_isr+0x388>)
    a690:	492d      	ldr	r1, [pc, #180]	; (a748 <hif_handle_isr+0x338>)
    a692:	482e      	ldr	r0, [pc, #184]	; (a74c <hif_handle_isr+0x33c>)
    a694:	4c2e      	ldr	r4, [pc, #184]	; (a750 <hif_handle_isr+0x340>)
    a696:	47a0      	blx	r4
    a698:	9903      	ldr	r1, [sp, #12]
    a69a:	4840      	ldr	r0, [pc, #256]	; (a79c <hif_handle_isr+0x38c>)
    a69c:	47a0      	blx	r4
    a69e:	482e      	ldr	r0, [pc, #184]	; (a758 <hif_handle_isr+0x348>)
    a6a0:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
    a6a2:	240c      	movs	r4, #12
    a6a4:	4264      	negs	r4, r4
    a6a6:	e008      	b.n	a6ba <hif_handle_isr+0x2aa>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    a6a8:	4a3d      	ldr	r2, [pc, #244]	; (a7a0 <hif_handle_isr+0x390>)
    a6aa:	4927      	ldr	r1, [pc, #156]	; (a748 <hif_handle_isr+0x338>)
    a6ac:	4827      	ldr	r0, [pc, #156]	; (a74c <hif_handle_isr+0x33c>)
    a6ae:	4d28      	ldr	r5, [pc, #160]	; (a750 <hif_handle_isr+0x340>)
    a6b0:	47a8      	blx	r5
    a6b2:	483c      	ldr	r0, [pc, #240]	; (a7a4 <hif_handle_isr+0x394>)
    a6b4:	47a8      	blx	r5
    a6b6:	4828      	ldr	r0, [pc, #160]	; (a758 <hif_handle_isr+0x348>)
    a6b8:	47a8      	blx	r5
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    a6ba:	4a3b      	ldr	r2, [pc, #236]	; (a7a8 <hif_handle_isr+0x398>)
    a6bc:	493b      	ldr	r1, [pc, #236]	; (a7ac <hif_handle_isr+0x39c>)
    a6be:	4823      	ldr	r0, [pc, #140]	; (a74c <hif_handle_isr+0x33c>)
    a6c0:	4d23      	ldr	r5, [pc, #140]	; (a750 <hif_handle_isr+0x340>)
    a6c2:	47a8      	blx	r5
    a6c4:	0021      	movs	r1, r4
    a6c6:	483a      	ldr	r0, [pc, #232]	; (a7b0 <hif_handle_isr+0x3a0>)
    a6c8:	47a8      	blx	r5
    a6ca:	4823      	ldr	r0, [pc, #140]	; (a758 <hif_handle_isr+0x348>)
    a6cc:	47a8      	blx	r5
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    a6ce:	a903      	add	r1, sp, #12
    a6d0:	4838      	ldr	r0, [pc, #224]	; (a7b4 <hif_handle_isr+0x3a4>)
    a6d2:	47b0      	blx	r6
    a6d4:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    a6d6:	d1e7      	bne.n	a6a8 <hif_handle_isr+0x298>
		if(reg & 0x1)	/* New interrupt has been received */
    a6d8:	9b03      	ldr	r3, [sp, #12]
    a6da:	07db      	lsls	r3, r3, #31
    a6dc:	d5d7      	bpl.n	a68e <hif_handle_isr+0x27e>
			nm_bsp_interrupt_ctrl(0);
    a6de:	2000      	movs	r0, #0
    a6e0:	4b1f      	ldr	r3, [pc, #124]	; (a760 <hif_handle_isr+0x350>)
    a6e2:	4798      	blx	r3
			reg &= ~NBIT0;
    a6e4:	2301      	movs	r3, #1
    a6e6:	9903      	ldr	r1, [sp, #12]
    a6e8:	4399      	bics	r1, r3
    a6ea:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    a6ec:	4831      	ldr	r0, [pc, #196]	; (a7b4 <hif_handle_isr+0x3a4>)
    a6ee:	4b32      	ldr	r3, [pc, #200]	; (a7b8 <hif_handle_isr+0x3a8>)
    a6f0:	4798      	blx	r3
    a6f2:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    a6f4:	d1e1      	bne.n	a6ba <hif_handle_isr+0x2aa>
			gstrHifCxt.u8HifRXDone = 1;
    a6f6:	2201      	movs	r2, #1
    a6f8:	4b11      	ldr	r3, [pc, #68]	; (a740 <hif_handle_isr+0x330>)
    a6fa:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    a6fc:	9b03      	ldr	r3, [sp, #12]
    a6fe:	049f      	lsls	r7, r3, #18
    a700:	0d3f      	lsrs	r7, r7, #20
			if (size > 0) {
    a702:	d0b8      	beq.n	a676 <hif_handle_isr+0x266>
				uint32 address = 0;
    a704:	2300      	movs	r3, #0
    a706:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    a708:	a905      	add	r1, sp, #20
    a70a:	482c      	ldr	r0, [pc, #176]	; (a7bc <hif_handle_isr+0x3ac>)
    a70c:	4b16      	ldr	r3, [pc, #88]	; (a768 <hif_handle_isr+0x358>)
    a70e:	4798      	blx	r3
    a710:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    a712:	d100      	bne.n	a716 <hif_handle_isr+0x306>
    a714:	e687      	b.n	a426 <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    a716:	22e4      	movs	r2, #228	; 0xe4
    a718:	0052      	lsls	r2, r2, #1
    a71a:	490b      	ldr	r1, [pc, #44]	; (a748 <hif_handle_isr+0x338>)
    a71c:	480b      	ldr	r0, [pc, #44]	; (a74c <hif_handle_isr+0x33c>)
    a71e:	4d0c      	ldr	r5, [pc, #48]	; (a750 <hif_handle_isr+0x340>)
    a720:	47a8      	blx	r5
    a722:	4827      	ldr	r0, [pc, #156]	; (a7c0 <hif_handle_isr+0x3b0>)
    a724:	47a8      	blx	r5
    a726:	480c      	ldr	r0, [pc, #48]	; (a758 <hif_handle_isr+0x348>)
    a728:	47a8      	blx	r5
					nm_bsp_interrupt_ctrl(1);
    a72a:	2001      	movs	r0, #1
    a72c:	4b0c      	ldr	r3, [pc, #48]	; (a760 <hif_handle_isr+0x350>)
    a72e:	4798      	blx	r3
    a730:	e7c3      	b.n	a6ba <hif_handle_isr+0x2aa>
			}
		}
	}

	return ret;
}
    a732:	2000      	movs	r0, #0
    a734:	b007      	add	sp, #28
    a736:	bc0c      	pop	{r2, r3}
    a738:	4690      	mov	r8, r2
    a73a:	4699      	mov	r9, r3
    a73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a73e:	46c0      	nop			; (mov r8, r8)
    a740:	20005bf0 	.word	0x20005bf0
    a744:	0000b4a9 	.word	0x0000b4a9
    a748:	0001a5cc 	.word	0x0001a5cc
    a74c:	0001a574 	.word	0x0001a574
    a750:	00008bdd 	.word	0x00008bdd
    a754:	0001a730 	.word	0x0001a730
    a758:	0001a59c 	.word	0x0001a59c
    a75c:	0001a628 	.word	0x0001a628
    a760:	00009e21 	.word	0x00009e21
    a764:	0001a640 	.word	0x0001a640
    a768:	0000b491 	.word	0x0000b491
    a76c:	0001a680 	.word	0x0001a680
    a770:	0001a6a4 	.word	0x0001a6a4
    a774:	0001a6c8 	.word	0x0001a6c8
    a778:	0001a6e8 	.word	0x0001a6e8
    a77c:	00000207 	.word	0x00000207
    a780:	0001a70c 	.word	0x0001a70c
    a784:	00000216 	.word	0x00000216
    a788:	0001a748 	.word	0x0001a748
    a78c:	0000a115 	.word	0x0000a115
    a790:	0000021d 	.word	0x0000021d
    a794:	0001a774 	.word	0x0001a774
    a798:	00000225 	.word	0x00000225
    a79c:	0001a788 	.word	0x0001a788
    a7a0:	0000022e 	.word	0x0000022e
    a7a4:	0001a7a4 	.word	0x0001a7a4
    a7a8:	00000257 	.word	0x00000257
    a7ac:	0001a5d4 	.word	0x0001a5d4
    a7b0:	0001a7c8 	.word	0x0001a7c8
    a7b4:	00001070 	.word	0x00001070
    a7b8:	0000b49d 	.word	0x0000b49d
    a7bc:	00001084 	.word	0x00001084
    a7c0:	0001a600 	.word	0x0001a600

0000a7c4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    a7c4:	b570      	push	{r4, r5, r6, lr}
    a7c6:	0014      	movs	r4, r2
    a7c8:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    a7ca:	2800      	cmp	r0, #0
    a7cc:	d003      	beq.n	a7d6 <hif_receive+0x12>
    a7ce:	2900      	cmp	r1, #0
    a7d0:	d001      	beq.n	a7d6 <hif_receive+0x12>
    a7d2:	2a00      	cmp	r2, #0
    a7d4:	d111      	bne.n	a7fa <hif_receive+0x36>
	{
		if(isDone)
    a7d6:	2d00      	cmp	r5, #0
    a7d8:	d002      	beq.n	a7e0 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    a7da:	4b25      	ldr	r3, [pc, #148]	; (a870 <hif_receive+0xac>)
    a7dc:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    a7de:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    a7e0:	229e      	movs	r2, #158	; 0x9e
    a7e2:	0092      	lsls	r2, r2, #2
    a7e4:	4923      	ldr	r1, [pc, #140]	; (a874 <hif_receive+0xb0>)
    a7e6:	4824      	ldr	r0, [pc, #144]	; (a878 <hif_receive+0xb4>)
    a7e8:	4c24      	ldr	r4, [pc, #144]	; (a87c <hif_receive+0xb8>)
    a7ea:	47a0      	blx	r4
    a7ec:	4824      	ldr	r0, [pc, #144]	; (a880 <hif_receive+0xbc>)
    a7ee:	47a0      	blx	r4
    a7f0:	4824      	ldr	r0, [pc, #144]	; (a884 <hif_receive+0xc0>)
    a7f2:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
    a7f4:	200c      	movs	r0, #12
    a7f6:	4240      	negs	r0, r0
    a7f8:	e7f1      	b.n	a7de <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    a7fa:	4b23      	ldr	r3, [pc, #140]	; (a888 <hif_receive+0xc4>)
    a7fc:	68db      	ldr	r3, [r3, #12]
    a7fe:	429a      	cmp	r2, r3
    a800:	d81a      	bhi.n	a838 <hif_receive+0x74>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    a802:	4b21      	ldr	r3, [pc, #132]	; (a888 <hif_receive+0xc4>)
    a804:	689b      	ldr	r3, [r3, #8]
    a806:	4298      	cmp	r0, r3
    a808:	d326      	bcc.n	a858 <hif_receive+0x94>
    a80a:	1886      	adds	r6, r0, r2
    a80c:	4a1e      	ldr	r2, [pc, #120]	; (a888 <hif_receive+0xc4>)
    a80e:	6893      	ldr	r3, [r2, #8]
    a810:	68d2      	ldr	r2, [r2, #12]
    a812:	189b      	adds	r3, r3, r2
    a814:	429e      	cmp	r6, r3
    a816:	d81f      	bhi.n	a858 <hif_receive+0x94>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    a818:	0022      	movs	r2, r4
    a81a:	4b1c      	ldr	r3, [pc, #112]	; (a88c <hif_receive+0xc8>)
    a81c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    a81e:	2800      	cmp	r0, #0
    a820:	d1dd      	bne.n	a7de <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    a822:	4a19      	ldr	r2, [pc, #100]	; (a888 <hif_receive+0xc4>)
    a824:	6893      	ldr	r3, [r2, #8]
    a826:	68d2      	ldr	r2, [r2, #12]
    a828:	189b      	adds	r3, r3, r2
    a82a:	429e      	cmp	r6, r3
    a82c:	d001      	beq.n	a832 <hif_receive+0x6e>
    a82e:	2d00      	cmp	r5, #0
    a830:	d0d5      	beq.n	a7de <hif_receive+0x1a>
		ret = hif_set_rx_done();
    a832:	4b0f      	ldr	r3, [pc, #60]	; (a870 <hif_receive+0xac>)
    a834:	4798      	blx	r3
    a836:	e7d2      	b.n	a7de <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    a838:	22a0      	movs	r2, #160	; 0xa0
    a83a:	0092      	lsls	r2, r2, #2
    a83c:	490d      	ldr	r1, [pc, #52]	; (a874 <hif_receive+0xb0>)
    a83e:	480e      	ldr	r0, [pc, #56]	; (a878 <hif_receive+0xb4>)
    a840:	4d0e      	ldr	r5, [pc, #56]	; (a87c <hif_receive+0xb8>)
    a842:	47a8      	blx	r5
    a844:	4b10      	ldr	r3, [pc, #64]	; (a888 <hif_receive+0xc4>)
    a846:	68da      	ldr	r2, [r3, #12]
    a848:	0021      	movs	r1, r4
    a84a:	4811      	ldr	r0, [pc, #68]	; (a890 <hif_receive+0xcc>)
    a84c:	47a8      	blx	r5
    a84e:	480d      	ldr	r0, [pc, #52]	; (a884 <hif_receive+0xc0>)
    a850:	47a8      	blx	r5
		ret = M2M_ERR_FAIL;
    a852:	200c      	movs	r0, #12
    a854:	4240      	negs	r0, r0
		goto ERR1;
    a856:	e7c2      	b.n	a7de <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    a858:	4a0e      	ldr	r2, [pc, #56]	; (a894 <hif_receive+0xd0>)
    a85a:	4906      	ldr	r1, [pc, #24]	; (a874 <hif_receive+0xb0>)
    a85c:	4806      	ldr	r0, [pc, #24]	; (a878 <hif_receive+0xb4>)
    a85e:	4c07      	ldr	r4, [pc, #28]	; (a87c <hif_receive+0xb8>)
    a860:	47a0      	blx	r4
    a862:	480d      	ldr	r0, [pc, #52]	; (a898 <hif_receive+0xd4>)
    a864:	47a0      	blx	r4
    a866:	4807      	ldr	r0, [pc, #28]	; (a884 <hif_receive+0xc0>)
    a868:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
    a86a:	200c      	movs	r0, #12
    a86c:	4240      	negs	r0, r0
		goto ERR1;
    a86e:	e7b6      	b.n	a7de <hif_receive+0x1a>
    a870:	0000a115 	.word	0x0000a115
    a874:	0001a5e4 	.word	0x0001a5e4
    a878:	0001a574 	.word	0x0001a574
    a87c:	00008bdd 	.word	0x00008bdd
    a880:	0001a7f8 	.word	0x0001a7f8
    a884:	0001a59c 	.word	0x0001a59c
    a888:	20005bf0 	.word	0x20005bf0
    a88c:	0000b4a9 	.word	0x0000b4a9
    a890:	0001a818 	.word	0x0001a818
    a894:	00000286 	.word	0x00000286
    a898:	0001a860 	.word	0x0001a860

0000a89c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    a89c:	b570      	push	{r4, r5, r6, lr}
    a89e:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    a8a0:	2807      	cmp	r0, #7
    a8a2:	d81f      	bhi.n	a8e4 <hif_register_cb+0x48>
    a8a4:	0083      	lsls	r3, r0, #2
    a8a6:	4a16      	ldr	r2, [pc, #88]	; (a900 <hif_register_cb+0x64>)
    a8a8:	58d3      	ldr	r3, [r2, r3]
    a8aa:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    a8ac:	4b15      	ldr	r3, [pc, #84]	; (a904 <hif_register_cb+0x68>)
    a8ae:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    a8b0:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    a8b2:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    a8b4:	4b13      	ldr	r3, [pc, #76]	; (a904 <hif_register_cb+0x68>)
    a8b6:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    a8b8:	2000      	movs	r0, #0
			break;
    a8ba:	e7fa      	b.n	a8b2 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    a8bc:	4b11      	ldr	r3, [pc, #68]	; (a904 <hif_register_cb+0x68>)
    a8be:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    a8c0:	2000      	movs	r0, #0
			break;
    a8c2:	e7f6      	b.n	a8b2 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    a8c4:	4b0f      	ldr	r3, [pc, #60]	; (a904 <hif_register_cb+0x68>)
    a8c6:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    a8c8:	2000      	movs	r0, #0
			break;
    a8ca:	e7f2      	b.n	a8b2 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    a8cc:	4b0d      	ldr	r3, [pc, #52]	; (a904 <hif_register_cb+0x68>)
    a8ce:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    a8d0:	2000      	movs	r0, #0
			break;
    a8d2:	e7ee      	b.n	a8b2 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    a8d4:	4b0b      	ldr	r3, [pc, #44]	; (a904 <hif_register_cb+0x68>)
    a8d6:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    a8d8:	2000      	movs	r0, #0
			break;
    a8da:	e7ea      	b.n	a8b2 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    a8dc:	4b09      	ldr	r3, [pc, #36]	; (a904 <hif_register_cb+0x68>)
    a8de:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
    a8e0:	2000      	movs	r0, #0
			break;
    a8e2:	e7e6      	b.n	a8b2 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    a8e4:	4a08      	ldr	r2, [pc, #32]	; (a908 <hif_register_cb+0x6c>)
    a8e6:	4909      	ldr	r1, [pc, #36]	; (a90c <hif_register_cb+0x70>)
    a8e8:	4809      	ldr	r0, [pc, #36]	; (a910 <hif_register_cb+0x74>)
    a8ea:	4d0a      	ldr	r5, [pc, #40]	; (a914 <hif_register_cb+0x78>)
    a8ec:	47a8      	blx	r5
    a8ee:	0021      	movs	r1, r4
    a8f0:	4809      	ldr	r0, [pc, #36]	; (a918 <hif_register_cb+0x7c>)
    a8f2:	47a8      	blx	r5
    a8f4:	4809      	ldr	r0, [pc, #36]	; (a91c <hif_register_cb+0x80>)
    a8f6:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
    a8f8:	200c      	movs	r0, #12
    a8fa:	4240      	negs	r0, r0
			break;
    a8fc:	e7d9      	b.n	a8b2 <hif_register_cb+0x16>
    a8fe:	46c0      	nop			; (mov r8, r8)
    a900:	0001a5a0 	.word	0x0001a5a0
    a904:	20005bf0 	.word	0x20005bf0
    a908:	000002be 	.word	0x000002be
    a90c:	0001a5f0 	.word	0x0001a5f0
    a910:	0001a574 	.word	0x0001a574
    a914:	00008bdd 	.word	0x00008bdd
    a918:	0001a8a4 	.word	0x0001a8a4
    a91c:	0001a59c 	.word	0x0001a59c

0000a920 <hif_init>:
{
    a920:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    a922:	222c      	movs	r2, #44	; 0x2c
    a924:	2100      	movs	r1, #0
    a926:	4806      	ldr	r0, [pc, #24]	; (a940 <hif_init+0x20>)
    a928:	4b06      	ldr	r3, [pc, #24]	; (a944 <hif_init+0x24>)
    a92a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    a92c:	4806      	ldr	r0, [pc, #24]	; (a948 <hif_init+0x28>)
    a92e:	4b07      	ldr	r3, [pc, #28]	; (a94c <hif_init+0x2c>)
    a930:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    a932:	4907      	ldr	r1, [pc, #28]	; (a950 <hif_init+0x30>)
    a934:	2003      	movs	r0, #3
    a936:	4b07      	ldr	r3, [pc, #28]	; (a954 <hif_init+0x34>)
    a938:	4798      	blx	r3
}
    a93a:	2000      	movs	r0, #0
    a93c:	bd10      	pop	{r4, pc}
    a93e:	46c0      	nop			; (mov r8, r8)
    a940:	20005bf0 	.word	0x20005bf0
    a944:	0000a0d5 	.word	0x0000a0d5
    a948:	0000a101 	.word	0x0000a101
    a94c:	00009dc9 	.word	0x00009dc9
    a950:	0000a111 	.word	0x0000a111
    a954:	0000a89d 	.word	0x0000a89d

0000a958 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    a958:	b530      	push	{r4, r5, lr}
    a95a:	b09f      	sub	sp, #124	; 0x7c
    a95c:	0004      	movs	r4, r0
    a95e:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    a960:	282c      	cmp	r0, #44	; 0x2c
    a962:	d02e      	beq.n	a9c2 <m2m_wifi_cb+0x6a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    a964:	281b      	cmp	r0, #27
    a966:	d03c      	beq.n	a9e2 <m2m_wifi_cb+0x8a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    a968:	2806      	cmp	r0, #6
    a96a:	d04a      	beq.n	aa02 <m2m_wifi_cb+0xaa>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    a96c:	280e      	cmp	r0, #14
    a96e:	d026      	beq.n	a9be <m2m_wifi_cb+0x66>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    a970:	2832      	cmp	r0, #50	; 0x32
    a972:	d056      	beq.n	aa22 <m2m_wifi_cb+0xca>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    a974:	282f      	cmp	r0, #47	; 0x2f
    a976:	d064      	beq.n	aa42 <m2m_wifi_cb+0xea>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    a978:	2834      	cmp	r0, #52	; 0x34
    a97a:	d100      	bne.n	a97e <m2m_wifi_cb+0x26>
    a97c:	e076      	b.n	aa6c <m2m_wifi_cb+0x114>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    a97e:	2811      	cmp	r0, #17
    a980:	d100      	bne.n	a984 <m2m_wifi_cb+0x2c>
    a982:	e094      	b.n	aaae <m2m_wifi_cb+0x156>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    a984:	2813      	cmp	r0, #19
    a986:	d100      	bne.n	a98a <m2m_wifi_cb+0x32>
    a988:	e0aa      	b.n	aae0 <m2m_wifi_cb+0x188>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    a98a:	2804      	cmp	r0, #4
    a98c:	d100      	bne.n	a990 <m2m_wifi_cb+0x38>
    a98e:	e0b9      	b.n	ab04 <m2m_wifi_cb+0x1ac>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    a990:	2865      	cmp	r0, #101	; 0x65
    a992:	d100      	bne.n	a996 <m2m_wifi_cb+0x3e>
    a994:	e0c8      	b.n	ab28 <m2m_wifi_cb+0x1d0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    a996:	2809      	cmp	r0, #9
    a998:	d100      	bne.n	a99c <m2m_wifi_cb+0x44>
    a99a:	e0d7      	b.n	ab4c <m2m_wifi_cb+0x1f4>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    a99c:	282a      	cmp	r0, #42	; 0x2a
    a99e:	d100      	bne.n	a9a2 <m2m_wifi_cb+0x4a>
    a9a0:	e0e6      	b.n	ab70 <m2m_wifi_cb+0x218>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    a9a2:	2820      	cmp	r0, #32
    a9a4:	d100      	bne.n	a9a8 <m2m_wifi_cb+0x50>
    a9a6:	e0f5      	b.n	ab94 <m2m_wifi_cb+0x23c>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    a9a8:	2224      	movs	r2, #36	; 0x24
    a9aa:	32ff      	adds	r2, #255	; 0xff
    a9ac:	4988      	ldr	r1, [pc, #544]	; (abd0 <m2m_wifi_cb+0x278>)
    a9ae:	4889      	ldr	r0, [pc, #548]	; (abd4 <m2m_wifi_cb+0x27c>)
    a9b0:	4d89      	ldr	r5, [pc, #548]	; (abd8 <m2m_wifi_cb+0x280>)
    a9b2:	47a8      	blx	r5
    a9b4:	0021      	movs	r1, r4
    a9b6:	4889      	ldr	r0, [pc, #548]	; (abdc <m2m_wifi_cb+0x284>)
    a9b8:	47a8      	blx	r5
    a9ba:	4889      	ldr	r0, [pc, #548]	; (abe0 <m2m_wifi_cb+0x288>)
    a9bc:	47a8      	blx	r5
	}
}
    a9be:	b01f      	add	sp, #124	; 0x7c
    a9c0:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    a9c2:	2300      	movs	r3, #0
    a9c4:	2204      	movs	r2, #4
    a9c6:	a903      	add	r1, sp, #12
    a9c8:	0028      	movs	r0, r5
    a9ca:	4c86      	ldr	r4, [pc, #536]	; (abe4 <m2m_wifi_cb+0x28c>)
    a9cc:	47a0      	blx	r4
    a9ce:	2800      	cmp	r0, #0
    a9d0:	d1f5      	bne.n	a9be <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
    a9d2:	4b85      	ldr	r3, [pc, #532]	; (abe8 <m2m_wifi_cb+0x290>)
    a9d4:	681b      	ldr	r3, [r3, #0]
    a9d6:	2b00      	cmp	r3, #0
    a9d8:	d0f1      	beq.n	a9be <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    a9da:	a903      	add	r1, sp, #12
    a9dc:	302c      	adds	r0, #44	; 0x2c
    a9de:	4798      	blx	r3
    a9e0:	e7ed      	b.n	a9be <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    a9e2:	2300      	movs	r3, #0
    a9e4:	2208      	movs	r2, #8
    a9e6:	a903      	add	r1, sp, #12
    a9e8:	0028      	movs	r0, r5
    a9ea:	4c7e      	ldr	r4, [pc, #504]	; (abe4 <m2m_wifi_cb+0x28c>)
    a9ec:	47a0      	blx	r4
    a9ee:	2800      	cmp	r0, #0
    a9f0:	d1e5      	bne.n	a9be <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
    a9f2:	4b7d      	ldr	r3, [pc, #500]	; (abe8 <m2m_wifi_cb+0x290>)
    a9f4:	681b      	ldr	r3, [r3, #0]
    a9f6:	2b00      	cmp	r3, #0
    a9f8:	d0e1      	beq.n	a9be <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    a9fa:	a903      	add	r1, sp, #12
    a9fc:	301b      	adds	r0, #27
    a9fe:	4798      	blx	r3
    aa00:	e7dd      	b.n	a9be <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    aa02:	2301      	movs	r3, #1
    aa04:	2230      	movs	r2, #48	; 0x30
    aa06:	a903      	add	r1, sp, #12
    aa08:	0028      	movs	r0, r5
    aa0a:	4c76      	ldr	r4, [pc, #472]	; (abe4 <m2m_wifi_cb+0x28c>)
    aa0c:	47a0      	blx	r4
    aa0e:	2800      	cmp	r0, #0
    aa10:	d1d5      	bne.n	a9be <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
    aa12:	4b75      	ldr	r3, [pc, #468]	; (abe8 <m2m_wifi_cb+0x290>)
    aa14:	681b      	ldr	r3, [r3, #0]
    aa16:	2b00      	cmp	r3, #0
    aa18:	d0d1      	beq.n	a9be <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    aa1a:	a903      	add	r1, sp, #12
    aa1c:	3006      	adds	r0, #6
    aa1e:	4798      	blx	r3
    aa20:	e7cd      	b.n	a9be <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    aa22:	2300      	movs	r3, #0
    aa24:	2218      	movs	r2, #24
    aa26:	a903      	add	r1, sp, #12
    aa28:	0028      	movs	r0, r5
    aa2a:	4c6e      	ldr	r4, [pc, #440]	; (abe4 <m2m_wifi_cb+0x28c>)
    aa2c:	47a0      	blx	r4
    aa2e:	2800      	cmp	r0, #0
    aa30:	d1c5      	bne.n	a9be <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
    aa32:	4b6d      	ldr	r3, [pc, #436]	; (abe8 <m2m_wifi_cb+0x290>)
    aa34:	681b      	ldr	r3, [r3, #0]
    aa36:	2b00      	cmp	r3, #0
    aa38:	d0c1      	beq.n	a9be <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    aa3a:	a903      	add	r1, sp, #12
    aa3c:	3032      	adds	r0, #50	; 0x32
    aa3e:	4798      	blx	r3
    aa40:	e7bd      	b.n	a9be <m2m_wifi_cb+0x66>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    aa42:	2264      	movs	r2, #100	; 0x64
    aa44:	2100      	movs	r1, #0
    aa46:	a803      	add	r0, sp, #12
    aa48:	4b68      	ldr	r3, [pc, #416]	; (abec <m2m_wifi_cb+0x294>)
    aa4a:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    aa4c:	2300      	movs	r3, #0
    aa4e:	2264      	movs	r2, #100	; 0x64
    aa50:	a903      	add	r1, sp, #12
    aa52:	0028      	movs	r0, r5
    aa54:	4c63      	ldr	r4, [pc, #396]	; (abe4 <m2m_wifi_cb+0x28c>)
    aa56:	47a0      	blx	r4
    aa58:	2800      	cmp	r0, #0
    aa5a:	d1b0      	bne.n	a9be <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
    aa5c:	4b62      	ldr	r3, [pc, #392]	; (abe8 <m2m_wifi_cb+0x290>)
    aa5e:	681b      	ldr	r3, [r3, #0]
    aa60:	2b00      	cmp	r3, #0
    aa62:	d0ac      	beq.n	a9be <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    aa64:	a903      	add	r1, sp, #12
    aa66:	302f      	adds	r0, #47	; 0x2f
    aa68:	4798      	blx	r3
    aa6a:	e7a8      	b.n	a9be <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    aa6c:	2300      	movs	r3, #0
    aa6e:	2204      	movs	r2, #4
    aa70:	a903      	add	r1, sp, #12
    aa72:	0028      	movs	r0, r5
    aa74:	4c5b      	ldr	r4, [pc, #364]	; (abe4 <m2m_wifi_cb+0x28c>)
    aa76:	47a0      	blx	r4
    aa78:	2800      	cmp	r0, #0
    aa7a:	d1a0      	bne.n	a9be <m2m_wifi_cb+0x66>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    aa7c:	485c      	ldr	r0, [pc, #368]	; (abf0 <m2m_wifi_cb+0x298>)
    aa7e:	4d56      	ldr	r5, [pc, #344]	; (abd8 <m2m_wifi_cb+0x280>)
    aa80:	47a8      	blx	r5
    aa82:	9c03      	ldr	r4, [sp, #12]
    aa84:	0a23      	lsrs	r3, r4, #8
    aa86:	20ff      	movs	r0, #255	; 0xff
    aa88:	4003      	ands	r3, r0
    aa8a:	0c22      	lsrs	r2, r4, #16
    aa8c:	4002      	ands	r2, r0
    aa8e:	0e21      	lsrs	r1, r4, #24
    aa90:	4020      	ands	r0, r4
    aa92:	9000      	str	r0, [sp, #0]
    aa94:	4857      	ldr	r0, [pc, #348]	; (abf4 <m2m_wifi_cb+0x29c>)
    aa96:	47a8      	blx	r5
    aa98:	4851      	ldr	r0, [pc, #324]	; (abe0 <m2m_wifi_cb+0x288>)
    aa9a:	47a8      	blx	r5
			if (gpfAppWifiCb)
    aa9c:	4b52      	ldr	r3, [pc, #328]	; (abe8 <m2m_wifi_cb+0x290>)
    aa9e:	681b      	ldr	r3, [r3, #0]
    aaa0:	2b00      	cmp	r3, #0
    aaa2:	d100      	bne.n	aaa6 <m2m_wifi_cb+0x14e>
    aaa4:	e78b      	b.n	a9be <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    aaa6:	2100      	movs	r1, #0
    aaa8:	2034      	movs	r0, #52	; 0x34
    aaaa:	4798      	blx	r3
    aaac:	e787      	b.n	a9be <m2m_wifi_cb+0x66>
		gu8scanInProgress = 0;
    aaae:	2200      	movs	r2, #0
    aab0:	4b51      	ldr	r3, [pc, #324]	; (abf8 <m2m_wifi_cb+0x2a0>)
    aab2:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    aab4:	2300      	movs	r3, #0
    aab6:	3204      	adds	r2, #4
    aab8:	a903      	add	r1, sp, #12
    aaba:	0028      	movs	r0, r5
    aabc:	4c49      	ldr	r4, [pc, #292]	; (abe4 <m2m_wifi_cb+0x28c>)
    aabe:	47a0      	blx	r4
    aac0:	2800      	cmp	r0, #0
    aac2:	d000      	beq.n	aac6 <m2m_wifi_cb+0x16e>
    aac4:	e77b      	b.n	a9be <m2m_wifi_cb+0x66>
			gu8ChNum = strState.u8NumofCh;
    aac6:	ab03      	add	r3, sp, #12
    aac8:	781a      	ldrb	r2, [r3, #0]
    aaca:	4b4c      	ldr	r3, [pc, #304]	; (abfc <m2m_wifi_cb+0x2a4>)
    aacc:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    aace:	4b46      	ldr	r3, [pc, #280]	; (abe8 <m2m_wifi_cb+0x290>)
    aad0:	681b      	ldr	r3, [r3, #0]
    aad2:	2b00      	cmp	r3, #0
    aad4:	d100      	bne.n	aad8 <m2m_wifi_cb+0x180>
    aad6:	e772      	b.n	a9be <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    aad8:	a903      	add	r1, sp, #12
    aada:	3011      	adds	r0, #17
    aadc:	4798      	blx	r3
    aade:	e76e      	b.n	a9be <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    aae0:	2300      	movs	r3, #0
    aae2:	222c      	movs	r2, #44	; 0x2c
    aae4:	a903      	add	r1, sp, #12
    aae6:	0028      	movs	r0, r5
    aae8:	4c3e      	ldr	r4, [pc, #248]	; (abe4 <m2m_wifi_cb+0x28c>)
    aaea:	47a0      	blx	r4
    aaec:	2800      	cmp	r0, #0
    aaee:	d000      	beq.n	aaf2 <m2m_wifi_cb+0x19a>
    aaf0:	e765      	b.n	a9be <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
    aaf2:	4b3d      	ldr	r3, [pc, #244]	; (abe8 <m2m_wifi_cb+0x290>)
    aaf4:	681b      	ldr	r3, [r3, #0]
    aaf6:	2b00      	cmp	r3, #0
    aaf8:	d100      	bne.n	aafc <m2m_wifi_cb+0x1a4>
    aafa:	e760      	b.n	a9be <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    aafc:	a903      	add	r1, sp, #12
    aafe:	3013      	adds	r0, #19
    ab00:	4798      	blx	r3
    ab02:	e75c      	b.n	a9be <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    ab04:	2300      	movs	r3, #0
    ab06:	2204      	movs	r2, #4
    ab08:	a91c      	add	r1, sp, #112	; 0x70
    ab0a:	0028      	movs	r0, r5
    ab0c:	4c35      	ldr	r4, [pc, #212]	; (abe4 <m2m_wifi_cb+0x28c>)
    ab0e:	47a0      	blx	r4
    ab10:	2800      	cmp	r0, #0
    ab12:	d000      	beq.n	ab16 <m2m_wifi_cb+0x1be>
    ab14:	e753      	b.n	a9be <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
    ab16:	4b34      	ldr	r3, [pc, #208]	; (abe8 <m2m_wifi_cb+0x290>)
    ab18:	681b      	ldr	r3, [r3, #0]
    ab1a:	2b00      	cmp	r3, #0
    ab1c:	d100      	bne.n	ab20 <m2m_wifi_cb+0x1c8>
    ab1e:	e74e      	b.n	a9be <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    ab20:	a91c      	add	r1, sp, #112	; 0x70
    ab22:	3004      	adds	r0, #4
    ab24:	4798      	blx	r3
    ab26:	e74a      	b.n	a9be <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    ab28:	2300      	movs	r3, #0
    ab2a:	2204      	movs	r2, #4
    ab2c:	a91c      	add	r1, sp, #112	; 0x70
    ab2e:	0028      	movs	r0, r5
    ab30:	4c2c      	ldr	r4, [pc, #176]	; (abe4 <m2m_wifi_cb+0x28c>)
    ab32:	47a0      	blx	r4
    ab34:	2800      	cmp	r0, #0
    ab36:	d000      	beq.n	ab3a <m2m_wifi_cb+0x1e2>
    ab38:	e741      	b.n	a9be <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
    ab3a:	4b2b      	ldr	r3, [pc, #172]	; (abe8 <m2m_wifi_cb+0x290>)
    ab3c:	681b      	ldr	r3, [r3, #0]
    ab3e:	2b00      	cmp	r3, #0
    ab40:	d100      	bne.n	ab44 <m2m_wifi_cb+0x1ec>
    ab42:	e73c      	b.n	a9be <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    ab44:	a91c      	add	r1, sp, #112	; 0x70
    ab46:	3065      	adds	r0, #101	; 0x65
    ab48:	4798      	blx	r3
    ab4a:	e738      	b.n	a9be <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    ab4c:	2301      	movs	r3, #1
    ab4e:	2264      	movs	r2, #100	; 0x64
    ab50:	a903      	add	r1, sp, #12
    ab52:	0028      	movs	r0, r5
    ab54:	4c23      	ldr	r4, [pc, #140]	; (abe4 <m2m_wifi_cb+0x28c>)
    ab56:	47a0      	blx	r4
    ab58:	2800      	cmp	r0, #0
    ab5a:	d000      	beq.n	ab5e <m2m_wifi_cb+0x206>
    ab5c:	e72f      	b.n	a9be <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
    ab5e:	4b22      	ldr	r3, [pc, #136]	; (abe8 <m2m_wifi_cb+0x290>)
    ab60:	681b      	ldr	r3, [r3, #0]
    ab62:	2b00      	cmp	r3, #0
    ab64:	d100      	bne.n	ab68 <m2m_wifi_cb+0x210>
    ab66:	e72a      	b.n	a9be <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    ab68:	a903      	add	r1, sp, #12
    ab6a:	3009      	adds	r0, #9
    ab6c:	4798      	blx	r3
    ab6e:	e726      	b.n	a9be <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    ab70:	2301      	movs	r3, #1
    ab72:	2204      	movs	r2, #4
    ab74:	a903      	add	r1, sp, #12
    ab76:	0028      	movs	r0, r5
    ab78:	4c1a      	ldr	r4, [pc, #104]	; (abe4 <m2m_wifi_cb+0x28c>)
    ab7a:	47a0      	blx	r4
    ab7c:	2800      	cmp	r0, #0
    ab7e:	d000      	beq.n	ab82 <m2m_wifi_cb+0x22a>
    ab80:	e71d      	b.n	a9be <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
    ab82:	4b19      	ldr	r3, [pc, #100]	; (abe8 <m2m_wifi_cb+0x290>)
    ab84:	681b      	ldr	r3, [r3, #0]
    ab86:	2b00      	cmp	r3, #0
    ab88:	d100      	bne.n	ab8c <m2m_wifi_cb+0x234>
    ab8a:	e718      	b.n	a9be <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    ab8c:	a903      	add	r1, sp, #12
    ab8e:	302a      	adds	r0, #42	; 0x2a
    ab90:	4798      	blx	r3
    ab92:	e714      	b.n	a9be <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    ab94:	2300      	movs	r3, #0
    ab96:	2208      	movs	r2, #8
    ab98:	a903      	add	r1, sp, #12
    ab9a:	0028      	movs	r0, r5
    ab9c:	4c11      	ldr	r4, [pc, #68]	; (abe4 <m2m_wifi_cb+0x28c>)
    ab9e:	47a0      	blx	r4
    aba0:	2800      	cmp	r0, #0
    aba2:	d000      	beq.n	aba6 <m2m_wifi_cb+0x24e>
    aba4:	e70b      	b.n	a9be <m2m_wifi_cb+0x66>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    aba6:	ab03      	add	r3, sp, #12
    aba8:	889a      	ldrh	r2, [r3, #4]
    abaa:	0028      	movs	r0, r5
    abac:	3008      	adds	r0, #8
    abae:	2301      	movs	r3, #1
    abb0:	9903      	ldr	r1, [sp, #12]
    abb2:	4c0c      	ldr	r4, [pc, #48]	; (abe4 <m2m_wifi_cb+0x28c>)
    abb4:	47a0      	blx	r4
    abb6:	2800      	cmp	r0, #0
    abb8:	d000      	beq.n	abbc <m2m_wifi_cb+0x264>
    abba:	e700      	b.n	a9be <m2m_wifi_cb+0x66>
				if(gpfAppWifiCb)
    abbc:	4b0a      	ldr	r3, [pc, #40]	; (abe8 <m2m_wifi_cb+0x290>)
    abbe:	681b      	ldr	r3, [r3, #0]
    abc0:	2b00      	cmp	r3, #0
    abc2:	d100      	bne.n	abc6 <m2m_wifi_cb+0x26e>
    abc4:	e6fb      	b.n	a9be <m2m_wifi_cb+0x66>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    abc6:	a903      	add	r1, sp, #12
    abc8:	3020      	adds	r0, #32
    abca:	4798      	blx	r3
    abcc:	e6f7      	b.n	a9be <m2m_wifi_cb+0x66>
    abce:	46c0      	nop			; (mov r8, r8)
    abd0:	0001a8f0 	.word	0x0001a8f0
    abd4:	0001a574 	.word	0x0001a574
    abd8:	00008bdd 	.word	0x00008bdd
    abdc:	0001a940 	.word	0x0001a940
    abe0:	0001a59c 	.word	0x0001a59c
    abe4:	0000a7c5 	.word	0x0000a7c5
    abe8:	20004124 	.word	0x20004124
    abec:	0000a0d5 	.word	0x0000a0d5
    abf0:	0001a8b0 	.word	0x0001a8b0
    abf4:	0001a920 	.word	0x0001a920
    abf8:	20004129 	.word	0x20004129
    abfc:	20004128 	.word	0x20004128

0000ac00 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    ac00:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac02:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    ac04:	2201      	movs	r2, #1
    ac06:	230f      	movs	r3, #15
    ac08:	446b      	add	r3, sp
    ac0a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    ac0c:	2800      	cmp	r0, #0
    ac0e:	d05f      	beq.n	acd0 <m2m_wifi_init+0xd0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    ac10:	6802      	ldr	r2, [r0, #0]
    ac12:	4b31      	ldr	r3, [pc, #196]	; (acd8 <m2m_wifi_init+0xd8>)
    ac14:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    ac16:	2200      	movs	r2, #0
    ac18:	4b30      	ldr	r3, [pc, #192]	; (acdc <m2m_wifi_init+0xdc>)
    ac1a:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    ac1c:	200f      	movs	r0, #15
    ac1e:	4468      	add	r0, sp
    ac20:	4b2f      	ldr	r3, [pc, #188]	; (ace0 <m2m_wifi_init+0xe0>)
    ac22:	4798      	blx	r3
    ac24:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    ac26:	d002      	beq.n	ac2e <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    ac28:	0020      	movs	r0, r4
    ac2a:	b00f      	add	sp, #60	; 0x3c
    ac2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    ac2e:	2000      	movs	r0, #0
    ac30:	4b2c      	ldr	r3, [pc, #176]	; (ace4 <m2m_wifi_init+0xe4>)
    ac32:	4798      	blx	r3
    ac34:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    ac36:	d147      	bne.n	acc8 <m2m_wifi_init+0xc8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    ac38:	492b      	ldr	r1, [pc, #172]	; (ace8 <m2m_wifi_init+0xe8>)
    ac3a:	2001      	movs	r0, #1
    ac3c:	4b2b      	ldr	r3, [pc, #172]	; (acec <m2m_wifi_init+0xec>)
    ac3e:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    ac40:	ad04      	add	r5, sp, #16
    ac42:	0028      	movs	r0, r5
    ac44:	4b2a      	ldr	r3, [pc, #168]	; (acf0 <m2m_wifi_init+0xf0>)
    ac46:	4798      	blx	r3
    ac48:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    ac4a:	4f2a      	ldr	r7, [pc, #168]	; (acf4 <m2m_wifi_init+0xf4>)
    ac4c:	0038      	movs	r0, r7
    ac4e:	4e2a      	ldr	r6, [pc, #168]	; (acf8 <m2m_wifi_init+0xf8>)
    ac50:	47b0      	blx	r6
    ac52:	79ab      	ldrb	r3, [r5, #6]
    ac54:	796a      	ldrb	r2, [r5, #5]
    ac56:	7929      	ldrb	r1, [r5, #4]
    ac58:	8c28      	ldrh	r0, [r5, #32]
    ac5a:	9000      	str	r0, [sp, #0]
    ac5c:	4827      	ldr	r0, [pc, #156]	; (acfc <m2m_wifi_init+0xfc>)
    ac5e:	47b0      	blx	r6
    ac60:	4827      	ldr	r0, [pc, #156]	; (ad00 <m2m_wifi_init+0x100>)
    ac62:	47b0      	blx	r6
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    ac64:	0038      	movs	r0, r7
    ac66:	47b0      	blx	r6
    ac68:	2226      	movs	r2, #38	; 0x26
    ac6a:	446a      	add	r2, sp
    ac6c:	211a      	movs	r1, #26
    ac6e:	4469      	add	r1, sp
    ac70:	4824      	ldr	r0, [pc, #144]	; (ad04 <m2m_wifi_init+0x104>)
    ac72:	47b0      	blx	r6
    ac74:	4822      	ldr	r0, [pc, #136]	; (ad00 <m2m_wifi_init+0x100>)
    ac76:	47b0      	blx	r6
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    ac78:	0038      	movs	r0, r7
    ac7a:	47b0      	blx	r6
    ac7c:	7a6b      	ldrb	r3, [r5, #9]
    ac7e:	7a2a      	ldrb	r2, [r5, #8]
    ac80:	79e9      	ldrb	r1, [r5, #7]
    ac82:	4821      	ldr	r0, [pc, #132]	; (ad08 <m2m_wifi_init+0x108>)
    ac84:	47b0      	blx	r6
    ac86:	481e      	ldr	r0, [pc, #120]	; (ad00 <m2m_wifi_init+0x100>)
    ac88:	47b0      	blx	r6
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    ac8a:	0038      	movs	r0, r7
    ac8c:	47b0      	blx	r6
    ac8e:	2304      	movs	r3, #4
    ac90:	2205      	movs	r2, #5
    ac92:	2113      	movs	r1, #19
    ac94:	481d      	ldr	r0, [pc, #116]	; (ad0c <m2m_wifi_init+0x10c>)
    ac96:	47b0      	blx	r6
    ac98:	4819      	ldr	r0, [pc, #100]	; (ad00 <m2m_wifi_init+0x100>)
    ac9a:	47b0      	blx	r6
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    ac9c:	0038      	movs	r0, r7
    ac9e:	47b0      	blx	r6
    aca0:	4a1b      	ldr	r2, [pc, #108]	; (ad10 <m2m_wifi_init+0x110>)
    aca2:	491c      	ldr	r1, [pc, #112]	; (ad14 <m2m_wifi_init+0x114>)
    aca4:	481c      	ldr	r0, [pc, #112]	; (ad18 <m2m_wifi_init+0x118>)
    aca6:	47b0      	blx	r6
    aca8:	4815      	ldr	r0, [pc, #84]	; (ad00 <m2m_wifi_init+0x100>)
    acaa:	47b0      	blx	r6
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    acac:	0023      	movs	r3, r4
    acae:	330d      	adds	r3, #13
    acb0:	d1ba      	bne.n	ac28 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    acb2:	22e8      	movs	r2, #232	; 0xe8
    acb4:	32ff      	adds	r2, #255	; 0xff
    acb6:	4919      	ldr	r1, [pc, #100]	; (ad1c <m2m_wifi_init+0x11c>)
    acb8:	4819      	ldr	r0, [pc, #100]	; (ad20 <m2m_wifi_init+0x120>)
    acba:	4d0f      	ldr	r5, [pc, #60]	; (acf8 <m2m_wifi_init+0xf8>)
    acbc:	47a8      	blx	r5
    acbe:	4819      	ldr	r0, [pc, #100]	; (ad24 <m2m_wifi_init+0x124>)
    acc0:	47a8      	blx	r5
    acc2:	480f      	ldr	r0, [pc, #60]	; (ad00 <m2m_wifi_init+0x100>)
    acc4:	47a8      	blx	r5
    acc6:	e7af      	b.n	ac28 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    acc8:	2000      	movs	r0, #0
    acca:	4b17      	ldr	r3, [pc, #92]	; (ad28 <m2m_wifi_init+0x128>)
    accc:	4798      	blx	r3
    acce:	e7ab      	b.n	ac28 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    acd0:	240c      	movs	r4, #12
    acd2:	4264      	negs	r4, r4
    acd4:	e7a8      	b.n	ac28 <m2m_wifi_init+0x28>
    acd6:	46c0      	nop			; (mov r8, r8)
    acd8:	20004124 	.word	0x20004124
    acdc:	20004129 	.word	0x20004129
    ace0:	0000b65d 	.word	0x0000b65d
    ace4:	0000a921 	.word	0x0000a921
    ace8:	0000a959 	.word	0x0000a959
    acec:	0000a89d 	.word	0x0000a89d
    acf0:	0000b579 	.word	0x0000b579
    acf4:	0001a8b0 	.word	0x0001a8b0
    acf8:	00008bdd 	.word	0x00008bdd
    acfc:	0001aa00 	.word	0x0001aa00
    ad00:	0001a59c 	.word	0x0001a59c
    ad04:	0001aa28 	.word	0x0001aa28
    ad08:	0001aa44 	.word	0x0001aa44
    ad0c:	0001aa68 	.word	0x0001aa68
    ad10:	0001aa80 	.word	0x0001aa80
    ad14:	0001aa8c 	.word	0x0001aa8c
    ad18:	0001aa98 	.word	0x0001aa98
    ad1c:	0001a8fc 	.word	0x0001a8fc
    ad20:	0001a574 	.word	0x0001a574
    ad24:	0001aab0 	.word	0x0001aab0
    ad28:	0000b725 	.word	0x0000b725

0000ad2c <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    ad2c:	b510      	push	{r4, lr}
	return hif_handle_isr();
    ad2e:	4b01      	ldr	r3, [pc, #4]	; (ad34 <m2m_wifi_handle_events+0x8>)
    ad30:	4798      	blx	r3
}
    ad32:	bd10      	pop	{r4, pc}
    ad34:	0000a411 	.word	0x0000a411

0000ad38 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    ad38:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad3a:	46ce      	mov	lr, r9
    ad3c:	4647      	mov	r7, r8
    ad3e:	b580      	push	{r7, lr}
    ad40:	b0a3      	sub	sp, #140	; 0x8c
    ad42:	9005      	str	r0, [sp, #20]
    ad44:	000c      	movs	r4, r1
    ad46:	0015      	movs	r5, r2
    ad48:	001f      	movs	r7, r3
    ad4a:	ab2a      	add	r3, sp, #168	; 0xa8
    ad4c:	881b      	ldrh	r3, [r3, #0]
    ad4e:	4699      	mov	r9, r3
    ad50:	ab2b      	add	r3, sp, #172	; 0xac
    ad52:	781b      	ldrb	r3, [r3, #0]
    ad54:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    ad56:	2a01      	cmp	r2, #1
    ad58:	d003      	beq.n	ad62 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    ad5a:	2f00      	cmp	r7, #0
    ad5c:	d03f      	beq.n	adde <m2m_wifi_connect_sc+0xa6>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    ad5e:	2a02      	cmp	r2, #2
    ad60:	d049      	beq.n	adf6 <m2m_wifi_connect_sc+0xbe>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    ad62:	1e63      	subs	r3, r4, #1
    ad64:	2b1f      	cmp	r3, #31
    ad66:	d900      	bls.n	ad6a <m2m_wifi_connect_sc+0x32>
    ad68:	e073      	b.n	ae52 <m2m_wifi_connect_sc+0x11a>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    ad6a:	464b      	mov	r3, r9
    ad6c:	3b01      	subs	r3, #1
    ad6e:	b29b      	uxth	r3, r3
    ad70:	2b0d      	cmp	r3, #13
    ad72:	d903      	bls.n	ad7c <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    ad74:	464b      	mov	r3, r9
    ad76:	2bff      	cmp	r3, #255	; 0xff
    ad78:	d000      	beq.n	ad7c <m2m_wifi_connect_sc+0x44>
    ad7a:	e077      	b.n	ae6c <m2m_wifi_connect_sc+0x134>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    ad7c:	ae07      	add	r6, sp, #28
    ad7e:	0022      	movs	r2, r4
    ad80:	9905      	ldr	r1, [sp, #20]
    ad82:	205a      	movs	r0, #90	; 0x5a
    ad84:	ab02      	add	r3, sp, #8
    ad86:	469c      	mov	ip, r3
    ad88:	4460      	add	r0, ip
    ad8a:	4b71      	ldr	r3, [pc, #452]	; (af50 <m2m_wifi_connect_sc+0x218>)
    ad8c:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    ad8e:	1934      	adds	r4, r6, r4
    ad90:	3446      	adds	r4, #70	; 0x46
    ad92:	2300      	movs	r3, #0
    ad94:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    ad96:	3344      	adds	r3, #68	; 0x44
    ad98:	464a      	mov	r2, r9
    ad9a:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    ad9c:	4643      	mov	r3, r8
    ad9e:	1e5a      	subs	r2, r3, #1
    ada0:	4193      	sbcs	r3, r2
    ada2:	2267      	movs	r2, #103	; 0x67
    ada4:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    ada6:	2341      	movs	r3, #65	; 0x41
    ada8:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    adaa:	2d03      	cmp	r5, #3
    adac:	d06a      	beq.n	ae84 <m2m_wifi_connect_sc+0x14c>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    adae:	2d02      	cmp	r5, #2
    adb0:	d100      	bne.n	adb4 <m2m_wifi_connect_sc+0x7c>
    adb2:	e0a2      	b.n	aefa <m2m_wifi_connect_sc+0x1c2>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    adb4:	2d04      	cmp	r5, #4
    adb6:	d100      	bne.n	adba <m2m_wifi_connect_sc+0x82>
    adb8:	e0b8      	b.n	af2c <m2m_wifi_connect_sc+0x1f4>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    adba:	2d01      	cmp	r5, #1
    adbc:	d000      	beq.n	adc0 <m2m_wifi_connect_sc+0x88>
    adbe:	e0bb      	b.n	af38 <m2m_wifi_connect_sc+0x200>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    adc0:	2300      	movs	r3, #0
    adc2:	9302      	str	r3, [sp, #8]
    adc4:	9301      	str	r3, [sp, #4]
    adc6:	9300      	str	r3, [sp, #0]
    adc8:	336c      	adds	r3, #108	; 0x6c
    adca:	aa07      	add	r2, sp, #28
    adcc:	2128      	movs	r1, #40	; 0x28
    adce:	2001      	movs	r0, #1
    add0:	4c60      	ldr	r4, [pc, #384]	; (af54 <m2m_wifi_connect_sc+0x21c>)
    add2:	47a0      	blx	r4

ERR1:
	return ret;
}
    add4:	b023      	add	sp, #140	; 0x8c
    add6:	bc0c      	pop	{r2, r3}
    add8:	4690      	mov	r8, r2
    adda:	4699      	mov	r9, r3
    addc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    adde:	4a5e      	ldr	r2, [pc, #376]	; (af58 <m2m_wifi_connect_sc+0x220>)
    ade0:	495e      	ldr	r1, [pc, #376]	; (af5c <m2m_wifi_connect_sc+0x224>)
    ade2:	485f      	ldr	r0, [pc, #380]	; (af60 <m2m_wifi_connect_sc+0x228>)
    ade4:	4c5f      	ldr	r4, [pc, #380]	; (af64 <m2m_wifi_connect_sc+0x22c>)
    ade6:	47a0      	blx	r4
    ade8:	485f      	ldr	r0, [pc, #380]	; (af68 <m2m_wifi_connect_sc+0x230>)
    adea:	47a0      	blx	r4
    adec:	485f      	ldr	r0, [pc, #380]	; (af6c <m2m_wifi_connect_sc+0x234>)
    adee:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
    adf0:	200c      	movs	r0, #12
    adf2:	4240      	negs	r0, r0
			goto ERR1;
    adf4:	e7ee      	b.n	add4 <m2m_wifi_connect_sc+0x9c>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    adf6:	0038      	movs	r0, r7
    adf8:	4b5d      	ldr	r3, [pc, #372]	; (af70 <m2m_wifi_connect_sc+0x238>)
    adfa:	4798      	blx	r3
    adfc:	2840      	cmp	r0, #64	; 0x40
    adfe:	d1b0      	bne.n	ad62 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    ae00:	783b      	ldrb	r3, [r7, #0]
    ae02:	001a      	movs	r2, r3
    ae04:	3a30      	subs	r2, #48	; 0x30
    ae06:	2a36      	cmp	r2, #54	; 0x36
    ae08:	d817      	bhi.n	ae3a <m2m_wifi_connect_sc+0x102>
    ae0a:	3a0a      	subs	r2, #10
    ae0c:	2a06      	cmp	r2, #6
    ae0e:	d914      	bls.n	ae3a <m2m_wifi_connect_sc+0x102>
    ae10:	3b47      	subs	r3, #71	; 0x47
    ae12:	2b19      	cmp	r3, #25
    ae14:	d911      	bls.n	ae3a <m2m_wifi_connect_sc+0x102>
    ae16:	1c7a      	adds	r2, r7, #1
    ae18:	0038      	movs	r0, r7
    ae1a:	3040      	adds	r0, #64	; 0x40
    ae1c:	7813      	ldrb	r3, [r2, #0]
    ae1e:	0019      	movs	r1, r3
    ae20:	3930      	subs	r1, #48	; 0x30
    ae22:	2936      	cmp	r1, #54	; 0x36
    ae24:	d809      	bhi.n	ae3a <m2m_wifi_connect_sc+0x102>
    ae26:	390a      	subs	r1, #10
    ae28:	2906      	cmp	r1, #6
    ae2a:	d906      	bls.n	ae3a <m2m_wifi_connect_sc+0x102>
    ae2c:	3b47      	subs	r3, #71	; 0x47
    ae2e:	2b19      	cmp	r3, #25
    ae30:	d903      	bls.n	ae3a <m2m_wifi_connect_sc+0x102>
    ae32:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    ae34:	4282      	cmp	r2, r0
    ae36:	d1f1      	bne.n	ae1c <m2m_wifi_connect_sc+0xe4>
    ae38:	e793      	b.n	ad62 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    ae3a:	4a4e      	ldr	r2, [pc, #312]	; (af74 <m2m_wifi_connect_sc+0x23c>)
    ae3c:	4947      	ldr	r1, [pc, #284]	; (af5c <m2m_wifi_connect_sc+0x224>)
    ae3e:	4848      	ldr	r0, [pc, #288]	; (af60 <m2m_wifi_connect_sc+0x228>)
    ae40:	4c48      	ldr	r4, [pc, #288]	; (af64 <m2m_wifi_connect_sc+0x22c>)
    ae42:	47a0      	blx	r4
    ae44:	484c      	ldr	r0, [pc, #304]	; (af78 <m2m_wifi_connect_sc+0x240>)
    ae46:	47a0      	blx	r4
    ae48:	4848      	ldr	r0, [pc, #288]	; (af6c <m2m_wifi_connect_sc+0x234>)
    ae4a:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
    ae4c:	200c      	movs	r0, #12
    ae4e:	4240      	negs	r0, r0
					goto ERR1;
    ae50:	e7c0      	b.n	add4 <m2m_wifi_connect_sc+0x9c>
		M2M_ERR("SSID LEN INVALID\n");
    ae52:	228c      	movs	r2, #140	; 0x8c
    ae54:	0092      	lsls	r2, r2, #2
    ae56:	4941      	ldr	r1, [pc, #260]	; (af5c <m2m_wifi_connect_sc+0x224>)
    ae58:	4841      	ldr	r0, [pc, #260]	; (af60 <m2m_wifi_connect_sc+0x228>)
    ae5a:	4c42      	ldr	r4, [pc, #264]	; (af64 <m2m_wifi_connect_sc+0x22c>)
    ae5c:	47a0      	blx	r4
    ae5e:	4847      	ldr	r0, [pc, #284]	; (af7c <m2m_wifi_connect_sc+0x244>)
    ae60:	47a0      	blx	r4
    ae62:	4842      	ldr	r0, [pc, #264]	; (af6c <m2m_wifi_connect_sc+0x234>)
    ae64:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
    ae66:	200c      	movs	r0, #12
    ae68:	4240      	negs	r0, r0
		goto ERR1;
    ae6a:	e7b3      	b.n	add4 <m2m_wifi_connect_sc+0x9c>
			M2M_ERR("CH INVALID\n");
    ae6c:	4a44      	ldr	r2, [pc, #272]	; (af80 <m2m_wifi_connect_sc+0x248>)
    ae6e:	493b      	ldr	r1, [pc, #236]	; (af5c <m2m_wifi_connect_sc+0x224>)
    ae70:	483b      	ldr	r0, [pc, #236]	; (af60 <m2m_wifi_connect_sc+0x228>)
    ae72:	4c3c      	ldr	r4, [pc, #240]	; (af64 <m2m_wifi_connect_sc+0x22c>)
    ae74:	47a0      	blx	r4
    ae76:	4843      	ldr	r0, [pc, #268]	; (af84 <m2m_wifi_connect_sc+0x24c>)
    ae78:	47a0      	blx	r4
    ae7a:	483c      	ldr	r0, [pc, #240]	; (af6c <m2m_wifi_connect_sc+0x234>)
    ae7c:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
    ae7e:	200c      	movs	r0, #12
    ae80:	4240      	negs	r0, r0
			goto ERR1;
    ae82:	e7a7      	b.n	add4 <m2m_wifi_connect_sc+0x9c>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    ae84:	783b      	ldrb	r3, [r7, #0]
    ae86:	3b01      	subs	r3, #1
    ae88:	b2db      	uxtb	r3, r3
    ae8a:	aa07      	add	r2, sp, #28
    ae8c:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    ae8e:	2b03      	cmp	r3, #3
    ae90:	d816      	bhi.n	aec0 <m2m_wifi_connect_sc+0x188>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    ae92:	787a      	ldrb	r2, [r7, #1]
    ae94:	1e51      	subs	r1, r2, #1
    ae96:	ab07      	add	r3, sp, #28
    ae98:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    ae9a:	2310      	movs	r3, #16
    ae9c:	0011      	movs	r1, r2
    ae9e:	4399      	bics	r1, r3
    aea0:	290b      	cmp	r1, #11
    aea2:	d01c      	beq.n	aede <m2m_wifi_connect_sc+0x1a6>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    aea4:	4a38      	ldr	r2, [pc, #224]	; (af88 <m2m_wifi_connect_sc+0x250>)
    aea6:	492d      	ldr	r1, [pc, #180]	; (af5c <m2m_wifi_connect_sc+0x224>)
    aea8:	482d      	ldr	r0, [pc, #180]	; (af60 <m2m_wifi_connect_sc+0x228>)
    aeaa:	4c2e      	ldr	r4, [pc, #184]	; (af64 <m2m_wifi_connect_sc+0x22c>)
    aeac:	47a0      	blx	r4
    aeae:	ab07      	add	r3, sp, #28
    aeb0:	7859      	ldrb	r1, [r3, #1]
    aeb2:	4836      	ldr	r0, [pc, #216]	; (af8c <m2m_wifi_connect_sc+0x254>)
    aeb4:	47a0      	blx	r4
    aeb6:	482d      	ldr	r0, [pc, #180]	; (af6c <m2m_wifi_connect_sc+0x234>)
    aeb8:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
    aeba:	200c      	movs	r0, #12
    aebc:	4240      	negs	r0, r0
			goto ERR1;
    aebe:	e789      	b.n	add4 <m2m_wifi_connect_sc+0x9c>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    aec0:	2294      	movs	r2, #148	; 0x94
    aec2:	0092      	lsls	r2, r2, #2
    aec4:	4925      	ldr	r1, [pc, #148]	; (af5c <m2m_wifi_connect_sc+0x224>)
    aec6:	4826      	ldr	r0, [pc, #152]	; (af60 <m2m_wifi_connect_sc+0x228>)
    aec8:	4c26      	ldr	r4, [pc, #152]	; (af64 <m2m_wifi_connect_sc+0x22c>)
    aeca:	47a0      	blx	r4
    aecc:	ab07      	add	r3, sp, #28
    aece:	7819      	ldrb	r1, [r3, #0]
    aed0:	482f      	ldr	r0, [pc, #188]	; (af90 <m2m_wifi_connect_sc+0x258>)
    aed2:	47a0      	blx	r4
    aed4:	4825      	ldr	r0, [pc, #148]	; (af6c <m2m_wifi_connect_sc+0x234>)
    aed6:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
    aed8:	200c      	movs	r0, #12
    aeda:	4240      	negs	r0, r0
			goto ERR1;
    aedc:	e77a      	b.n	add4 <m2m_wifi_connect_sc+0x9c>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    aede:	1cb9      	adds	r1, r7, #2
    aee0:	2016      	movs	r0, #22
    aee2:	ab02      	add	r3, sp, #8
    aee4:	469c      	mov	ip, r3
    aee6:	4460      	add	r0, ip
    aee8:	4b19      	ldr	r3, [pc, #100]	; (af50 <m2m_wifi_connect_sc+0x218>)
    aeea:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    aeec:	787b      	ldrb	r3, [r7, #1]
    aeee:	aa07      	add	r2, sp, #28
    aef0:	4694      	mov	ip, r2
    aef2:	4463      	add	r3, ip
    aef4:	2200      	movs	r2, #0
    aef6:	709a      	strb	r2, [r3, #2]
    aef8:	e762      	b.n	adc0 <m2m_wifi_connect_sc+0x88>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    aefa:	0038      	movs	r0, r7
    aefc:	4b1c      	ldr	r3, [pc, #112]	; (af70 <m2m_wifi_connect_sc+0x238>)
    aefe:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    af00:	1e43      	subs	r3, r0, #1
    af02:	b29b      	uxth	r3, r3
    af04:	2b3f      	cmp	r3, #63	; 0x3f
    af06:	d805      	bhi.n	af14 <m2m_wifi_connect_sc+0x1dc>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    af08:	1c42      	adds	r2, r0, #1
    af0a:	0039      	movs	r1, r7
    af0c:	a807      	add	r0, sp, #28
    af0e:	4b10      	ldr	r3, [pc, #64]	; (af50 <m2m_wifi_connect_sc+0x218>)
    af10:	4798      	blx	r3
    af12:	e755      	b.n	adc0 <m2m_wifi_connect_sc+0x88>
			M2M_ERR("Incorrect PSK key length\n");
    af14:	4a1f      	ldr	r2, [pc, #124]	; (af94 <m2m_wifi_connect_sc+0x25c>)
    af16:	4911      	ldr	r1, [pc, #68]	; (af5c <m2m_wifi_connect_sc+0x224>)
    af18:	4811      	ldr	r0, [pc, #68]	; (af60 <m2m_wifi_connect_sc+0x228>)
    af1a:	4c12      	ldr	r4, [pc, #72]	; (af64 <m2m_wifi_connect_sc+0x22c>)
    af1c:	47a0      	blx	r4
    af1e:	481e      	ldr	r0, [pc, #120]	; (af98 <m2m_wifi_connect_sc+0x260>)
    af20:	47a0      	blx	r4
    af22:	4812      	ldr	r0, [pc, #72]	; (af6c <m2m_wifi_connect_sc+0x234>)
    af24:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
    af26:	200c      	movs	r0, #12
    af28:	4240      	negs	r0, r0
			goto ERR1;
    af2a:	e753      	b.n	add4 <m2m_wifi_connect_sc+0x9c>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    af2c:	223e      	movs	r2, #62	; 0x3e
    af2e:	0039      	movs	r1, r7
    af30:	a807      	add	r0, sp, #28
    af32:	4b07      	ldr	r3, [pc, #28]	; (af50 <m2m_wifi_connect_sc+0x218>)
    af34:	4798      	blx	r3
    af36:	e743      	b.n	adc0 <m2m_wifi_connect_sc+0x88>
		M2M_ERR("undefined sec type\n");
    af38:	4a18      	ldr	r2, [pc, #96]	; (af9c <m2m_wifi_connect_sc+0x264>)
    af3a:	4908      	ldr	r1, [pc, #32]	; (af5c <m2m_wifi_connect_sc+0x224>)
    af3c:	4808      	ldr	r0, [pc, #32]	; (af60 <m2m_wifi_connect_sc+0x228>)
    af3e:	4c09      	ldr	r4, [pc, #36]	; (af64 <m2m_wifi_connect_sc+0x22c>)
    af40:	47a0      	blx	r4
    af42:	4817      	ldr	r0, [pc, #92]	; (afa0 <m2m_wifi_connect_sc+0x268>)
    af44:	47a0      	blx	r4
    af46:	4809      	ldr	r0, [pc, #36]	; (af6c <m2m_wifi_connect_sc+0x234>)
    af48:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
    af4a:	200c      	movs	r0, #12
    af4c:	4240      	negs	r0, r0
		goto ERR1;
    af4e:	e741      	b.n	add4 <m2m_wifi_connect_sc+0x9c>
    af50:	0000a0c1 	.word	0x0000a0c1
    af54:	0000a1e9 	.word	0x0000a1e9
    af58:	0000021a 	.word	0x0000021a
    af5c:	0001a90c 	.word	0x0001a90c
    af60:	0001a574 	.word	0x0001a574
    af64:	00008bdd 	.word	0x00008bdd
    af68:	0001a954 	.word	0x0001a954
    af6c:	0001a59c 	.word	0x0001a59c
    af70:	0000a0e5 	.word	0x0000a0e5
    af74:	00000226 	.word	0x00000226
    af78:	0001a968 	.word	0x0001a968
    af7c:	0001a978 	.word	0x0001a978
    af80:	00000239 	.word	0x00000239
    af84:	0001a98c 	.word	0x0001a98c
    af88:	00000257 	.word	0x00000257
    af8c:	0001a9b4 	.word	0x0001a9b4
    af90:	0001a998 	.word	0x0001a998
    af94:	00000266 	.word	0x00000266
    af98:	0001a9d0 	.word	0x0001a9d0
    af9c:	00000276 	.word	0x00000276
    afa0:	0001a9ec 	.word	0x0001a9ec

0000afa4 <m2m_wifi_connect>:
{
    afa4:	b530      	push	{r4, r5, lr}
    afa6:	b083      	sub	sp, #12
    afa8:	ac06      	add	r4, sp, #24
    afaa:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    afac:	2500      	movs	r5, #0
    afae:	9501      	str	r5, [sp, #4]
    afb0:	9400      	str	r4, [sp, #0]
    afb2:	4c02      	ldr	r4, [pc, #8]	; (afbc <m2m_wifi_connect+0x18>)
    afb4:	47a0      	blx	r4
}
    afb6:	b003      	add	sp, #12
    afb8:	bd30      	pop	{r4, r5, pc}
    afba:	46c0      	nop			; (mov r8, r8)
    afbc:	0000ad39 	.word	0x0000ad39

0000afc0 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    afc0:	2000      	movs	r0, #0
    afc2:	4770      	bx	lr

0000afc4 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    afc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    afc6:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    afc8:	2580      	movs	r5, #128	; 0x80
    afca:	006d      	lsls	r5, r5, #1
    afcc:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    afce:	24a5      	movs	r4, #165	; 0xa5
    afd0:	0164      	lsls	r4, r4, #5
    afd2:	4f08      	ldr	r7, [pc, #32]	; (aff4 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    afd4:	4e08      	ldr	r6, [pc, #32]	; (aff8 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    afd6:	0029      	movs	r1, r5
    afd8:	0020      	movs	r0, r4
    afda:	47b8      	blx	r7
			uint32 reg = 0;
    afdc:	2300      	movs	r3, #0
    afde:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    afe0:	a901      	add	r1, sp, #4
    afe2:	0020      	movs	r0, r4
    afe4:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    afe6:	2800      	cmp	r0, #0
    afe8:	d1f5      	bne.n	afd6 <chip_apply_conf+0x12>
				if(reg == val32)
    afea:	9b01      	ldr	r3, [sp, #4]
    afec:	429d      	cmp	r5, r3
    afee:	d1f2      	bne.n	afd6 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    aff0:	b003      	add	sp, #12
    aff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aff4:	0000b49d 	.word	0x0000b49d
    aff8:	0000b491 	.word	0x0000b491

0000affc <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    affc:	b500      	push	{lr}
    affe:	b083      	sub	sp, #12
	uint32 reg = 0;
    b000:	2300      	movs	r3, #0
    b002:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    b004:	a901      	add	r1, sp, #4
    b006:	4811      	ldr	r0, [pc, #68]	; (b04c <enable_interrupts+0x50>)
    b008:	4b11      	ldr	r3, [pc, #68]	; (b050 <enable_interrupts+0x54>)
    b00a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    b00c:	2800      	cmp	r0, #0
    b00e:	d001      	beq.n	b014 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    b010:	b003      	add	sp, #12
    b012:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    b014:	2180      	movs	r1, #128	; 0x80
    b016:	0049      	lsls	r1, r1, #1
    b018:	9b01      	ldr	r3, [sp, #4]
    b01a:	4319      	orrs	r1, r3
    b01c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    b01e:	480b      	ldr	r0, [pc, #44]	; (b04c <enable_interrupts+0x50>)
    b020:	4b0c      	ldr	r3, [pc, #48]	; (b054 <enable_interrupts+0x58>)
    b022:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    b024:	2800      	cmp	r0, #0
    b026:	d1f3      	bne.n	b010 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    b028:	a901      	add	r1, sp, #4
    b02a:	20d0      	movs	r0, #208	; 0xd0
    b02c:	0140      	lsls	r0, r0, #5
    b02e:	4b08      	ldr	r3, [pc, #32]	; (b050 <enable_interrupts+0x54>)
    b030:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    b032:	2800      	cmp	r0, #0
    b034:	d1ec      	bne.n	b010 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    b036:	2180      	movs	r1, #128	; 0x80
    b038:	0249      	lsls	r1, r1, #9
    b03a:	9b01      	ldr	r3, [sp, #4]
    b03c:	4319      	orrs	r1, r3
    b03e:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    b040:	20d0      	movs	r0, #208	; 0xd0
    b042:	0140      	lsls	r0, r0, #5
    b044:	4b03      	ldr	r3, [pc, #12]	; (b054 <enable_interrupts+0x58>)
    b046:	4798      	blx	r3
    b048:	e7e2      	b.n	b010 <enable_interrupts+0x14>
    b04a:	46c0      	nop			; (mov r8, r8)
    b04c:	00001408 	.word	0x00001408
    b050:	0000b491 	.word	0x0000b491
    b054:	0000b49d 	.word	0x0000b49d

0000b058 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    b058:	b510      	push	{r4, lr}
    b05a:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    b05c:	4b28      	ldr	r3, [pc, #160]	; (b100 <nmi_get_chipid+0xa8>)
    b05e:	681c      	ldr	r4, [r3, #0]
    b060:	2c00      	cmp	r4, #0
    b062:	d004      	beq.n	b06e <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    b064:	4b26      	ldr	r3, [pc, #152]	; (b100 <nmi_get_chipid+0xa8>)
    b066:	681c      	ldr	r4, [r3, #0]
}
    b068:	0020      	movs	r0, r4
    b06a:	b002      	add	sp, #8
    b06c:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    b06e:	0019      	movs	r1, r3
    b070:	2080      	movs	r0, #128	; 0x80
    b072:	0140      	lsls	r0, r0, #5
    b074:	4b23      	ldr	r3, [pc, #140]	; (b104 <nmi_get_chipid+0xac>)
    b076:	4798      	blx	r3
    b078:	2800      	cmp	r0, #0
    b07a:	d003      	beq.n	b084 <nmi_get_chipid+0x2c>
			chipid = 0;
    b07c:	2200      	movs	r2, #0
    b07e:	4b20      	ldr	r3, [pc, #128]	; (b100 <nmi_get_chipid+0xa8>)
    b080:	601a      	str	r2, [r3, #0]
			return 0;
    b082:	e7f1      	b.n	b068 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    b084:	a901      	add	r1, sp, #4
    b086:	4820      	ldr	r0, [pc, #128]	; (b108 <nmi_get_chipid+0xb0>)
    b088:	4b1e      	ldr	r3, [pc, #120]	; (b104 <nmi_get_chipid+0xac>)
    b08a:	4798      	blx	r3
    b08c:	2800      	cmp	r0, #0
    b08e:	d003      	beq.n	b098 <nmi_get_chipid+0x40>
			chipid = 0;
    b090:	2200      	movs	r2, #0
    b092:	4b1b      	ldr	r3, [pc, #108]	; (b100 <nmi_get_chipid+0xa8>)
    b094:	601a      	str	r2, [r3, #0]
			return 0;
    b096:	e7e7      	b.n	b068 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    b098:	4b19      	ldr	r3, [pc, #100]	; (b100 <nmi_get_chipid+0xa8>)
    b09a:	681b      	ldr	r3, [r3, #0]
    b09c:	4a1b      	ldr	r2, [pc, #108]	; (b10c <nmi_get_chipid+0xb4>)
    b09e:	4293      	cmp	r3, r2
    b0a0:	d00e      	beq.n	b0c0 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    b0a2:	4a1b      	ldr	r2, [pc, #108]	; (b110 <nmi_get_chipid+0xb8>)
    b0a4:	4293      	cmp	r3, r2
    b0a6:	d012      	beq.n	b0ce <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    b0a8:	4a1a      	ldr	r2, [pc, #104]	; (b114 <nmi_get_chipid+0xbc>)
    b0aa:	4293      	cmp	r3, r2
    b0ac:	d01c      	beq.n	b0e8 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    b0ae:	4914      	ldr	r1, [pc, #80]	; (b100 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    b0b0:	4a19      	ldr	r2, [pc, #100]	; (b118 <nmi_get_chipid+0xc0>)
    b0b2:	680b      	ldr	r3, [r1, #0]
    b0b4:	401a      	ands	r2, r3
		chipid |= 0x050000;
    b0b6:	23a0      	movs	r3, #160	; 0xa0
    b0b8:	02db      	lsls	r3, r3, #11
    b0ba:	4313      	orrs	r3, r2
    b0bc:	600b      	str	r3, [r1, #0]
    b0be:	e7d1      	b.n	b064 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    b0c0:	9b01      	ldr	r3, [sp, #4]
    b0c2:	2b01      	cmp	r3, #1
    b0c4:	d0f3      	beq.n	b0ae <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    b0c6:	4a15      	ldr	r2, [pc, #84]	; (b11c <nmi_get_chipid+0xc4>)
    b0c8:	4b0d      	ldr	r3, [pc, #52]	; (b100 <nmi_get_chipid+0xa8>)
    b0ca:	601a      	str	r2, [r3, #0]
    b0cc:	e7ef      	b.n	b0ae <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    b0ce:	9b01      	ldr	r3, [sp, #4]
    b0d0:	2b03      	cmp	r3, #3
    b0d2:	d0ec      	beq.n	b0ae <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    b0d4:	2b04      	cmp	r3, #4
    b0d6:	d003      	beq.n	b0e0 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    b0d8:	4a11      	ldr	r2, [pc, #68]	; (b120 <nmi_get_chipid+0xc8>)
    b0da:	4b09      	ldr	r3, [pc, #36]	; (b100 <nmi_get_chipid+0xa8>)
    b0dc:	601a      	str	r2, [r3, #0]
    b0de:	e7e6      	b.n	b0ae <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    b0e0:	4a10      	ldr	r2, [pc, #64]	; (b124 <nmi_get_chipid+0xcc>)
    b0e2:	4b07      	ldr	r3, [pc, #28]	; (b100 <nmi_get_chipid+0xa8>)
    b0e4:	601a      	str	r2, [r3, #0]
    b0e6:	e7e2      	b.n	b0ae <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    b0e8:	4905      	ldr	r1, [pc, #20]	; (b100 <nmi_get_chipid+0xa8>)
    b0ea:	20ec      	movs	r0, #236	; 0xec
    b0ec:	0380      	lsls	r0, r0, #14
    b0ee:	4b05      	ldr	r3, [pc, #20]	; (b104 <nmi_get_chipid+0xac>)
    b0f0:	4798      	blx	r3
    b0f2:	2800      	cmp	r0, #0
    b0f4:	d0db      	beq.n	b0ae <nmi_get_chipid+0x56>
			chipid = 0;
    b0f6:	2200      	movs	r2, #0
    b0f8:	4b01      	ldr	r3, [pc, #4]	; (b100 <nmi_get_chipid+0xa8>)
    b0fa:	601a      	str	r2, [r3, #0]
			return 0;
    b0fc:	e7b4      	b.n	b068 <nmi_get_chipid+0x10>
    b0fe:	46c0      	nop			; (mov r8, r8)
    b100:	2000412c 	.word	0x2000412c
    b104:	0000b491 	.word	0x0000b491
    b108:	000013f4 	.word	0x000013f4
    b10c:	001002a0 	.word	0x001002a0
    b110:	001002b0 	.word	0x001002b0
    b114:	001000f0 	.word	0x001000f0
    b118:	fff0ffff 	.word	0xfff0ffff
    b11c:	001002a1 	.word	0x001002a1
    b120:	001002b2 	.word	0x001002b2
    b124:	001002b1 	.word	0x001002b1

0000b128 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    b128:	b530      	push	{r4, r5, lr}
    b12a:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    b12c:	4c16      	ldr	r4, [pc, #88]	; (b188 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    b12e:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    b130:	a901      	add	r1, sp, #4
    b132:	2010      	movs	r0, #16
    b134:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    b136:	2800      	cmp	r0, #0
    b138:	d11c      	bne.n	b174 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    b13a:	9b01      	ldr	r3, [sp, #4]
    b13c:	422b      	tst	r3, r5
    b13e:	d1f7      	bne.n	b130 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    b140:	a901      	add	r1, sp, #4
    b142:	3001      	adds	r0, #1
    b144:	4b10      	ldr	r3, [pc, #64]	; (b188 <chip_sleep+0x60>)
    b146:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    b148:	2800      	cmp	r0, #0
    b14a:	d113      	bne.n	b174 <chip_sleep+0x4c>
	if(reg & NBIT1)
    b14c:	9901      	ldr	r1, [sp, #4]
    b14e:	078b      	lsls	r3, r1, #30
    b150:	d507      	bpl.n	b162 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    b152:	2302      	movs	r3, #2
    b154:	4399      	bics	r1, r3
    b156:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    b158:	3001      	adds	r0, #1
    b15a:	4b0c      	ldr	r3, [pc, #48]	; (b18c <chip_sleep+0x64>)
    b15c:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    b15e:	2800      	cmp	r0, #0
    b160:	d108      	bne.n	b174 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    b162:	a901      	add	r1, sp, #4
    b164:	200b      	movs	r0, #11
    b166:	4b08      	ldr	r3, [pc, #32]	; (b188 <chip_sleep+0x60>)
    b168:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    b16a:	2800      	cmp	r0, #0
    b16c:	d102      	bne.n	b174 <chip_sleep+0x4c>
	if(reg & NBIT0)
    b16e:	9901      	ldr	r1, [sp, #4]
    b170:	07cb      	lsls	r3, r1, #31
    b172:	d401      	bmi.n	b178 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    b174:	b003      	add	sp, #12
    b176:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    b178:	2301      	movs	r3, #1
    b17a:	4399      	bics	r1, r3
    b17c:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    b17e:	300b      	adds	r0, #11
    b180:	4b02      	ldr	r3, [pc, #8]	; (b18c <chip_sleep+0x64>)
    b182:	4798      	blx	r3
    b184:	e7f6      	b.n	b174 <chip_sleep+0x4c>
    b186:	46c0      	nop			; (mov r8, r8)
    b188:	0000b491 	.word	0x0000b491
    b18c:	0000b49d 	.word	0x0000b49d

0000b190 <chip_wake>:
sint8 chip_wake(void)
{
    b190:	b5f0      	push	{r4, r5, r6, r7, lr}
    b192:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    b194:	2300      	movs	r3, #0
    b196:	9301      	str	r3, [sp, #4]
    b198:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    b19a:	a901      	add	r1, sp, #4
    b19c:	200b      	movs	r0, #11
    b19e:	4b27      	ldr	r3, [pc, #156]	; (b23c <chip_wake+0xac>)
    b1a0:	4798      	blx	r3
    b1a2:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    b1a4:	d12e      	bne.n	b204 <chip_wake+0x74>
	
	if(!(reg & NBIT0))
    b1a6:	9901      	ldr	r1, [sp, #4]
    b1a8:	07cb      	lsls	r3, r1, #31
    b1aa:	d406      	bmi.n	b1ba <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    b1ac:	2301      	movs	r3, #1
    b1ae:	4319      	orrs	r1, r3
    b1b0:	200b      	movs	r0, #11
    b1b2:	4b23      	ldr	r3, [pc, #140]	; (b240 <chip_wake+0xb0>)
    b1b4:	4798      	blx	r3
    b1b6:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    b1b8:	d124      	bne.n	b204 <chip_wake+0x74>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    b1ba:	a901      	add	r1, sp, #4
    b1bc:	2001      	movs	r0, #1
    b1be:	4b1f      	ldr	r3, [pc, #124]	; (b23c <chip_wake+0xac>)
    b1c0:	4798      	blx	r3
    b1c2:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    b1c4:	d11e      	bne.n	b204 <chip_wake+0x74>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    b1c6:	9901      	ldr	r1, [sp, #4]
    b1c8:	078b      	lsls	r3, r1, #30
    b1ca:	d51e      	bpl.n	b20a <chip_wake+0x7a>
{
    b1cc:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    b1ce:	4f1b      	ldr	r7, [pc, #108]	; (b23c <chip_wake+0xac>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    b1d0:	4e1c      	ldr	r6, [pc, #112]	; (b244 <chip_wake+0xb4>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    b1d2:	4669      	mov	r1, sp
    b1d4:	200f      	movs	r0, #15
    b1d6:	47b8      	blx	r7
    b1d8:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    b1da:	d11e      	bne.n	b21a <chip_wake+0x8a>
		if(clk_status_reg & NBIT2) {
    b1dc:	9b00      	ldr	r3, [sp, #0]
    b1de:	075b      	lsls	r3, r3, #29
    b1e0:	d428      	bmi.n	b234 <chip_wake+0xa4>
		nm_bsp_sleep(2);
    b1e2:	2002      	movs	r0, #2
    b1e4:	47b0      	blx	r6
    b1e6:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    b1e8:	2d00      	cmp	r5, #0
    b1ea:	d1f2      	bne.n	b1d2 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    b1ec:	22ad      	movs	r2, #173	; 0xad
    b1ee:	0052      	lsls	r2, r2, #1
    b1f0:	4915      	ldr	r1, [pc, #84]	; (b248 <chip_wake+0xb8>)
    b1f2:	4816      	ldr	r0, [pc, #88]	; (b24c <chip_wake+0xbc>)
    b1f4:	4c16      	ldr	r4, [pc, #88]	; (b250 <chip_wake+0xc0>)
    b1f6:	47a0      	blx	r4
    b1f8:	4816      	ldr	r0, [pc, #88]	; (b254 <chip_wake+0xc4>)
    b1fa:	47a0      	blx	r4
    b1fc:	4816      	ldr	r0, [pc, #88]	; (b258 <chip_wake+0xc8>)
    b1fe:	47a0      	blx	r4
			ret = M2M_ERR_TIME_OUT;
    b200:	2404      	movs	r4, #4
    b202:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    b204:	0020      	movs	r0, r4
    b206:	b003      	add	sp, #12
    b208:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    b20a:	2302      	movs	r3, #2
    b20c:	4319      	orrs	r1, r3
    b20e:	2001      	movs	r0, #1
    b210:	4b0b      	ldr	r3, [pc, #44]	; (b240 <chip_wake+0xb0>)
    b212:	4798      	blx	r3
    b214:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    b216:	d0d9      	beq.n	b1cc <chip_wake+0x3c>
    b218:	e7f4      	b.n	b204 <chip_wake+0x74>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    b21a:	22a8      	movs	r2, #168	; 0xa8
    b21c:	0052      	lsls	r2, r2, #1
    b21e:	490a      	ldr	r1, [pc, #40]	; (b248 <chip_wake+0xb8>)
    b220:	480a      	ldr	r0, [pc, #40]	; (b24c <chip_wake+0xbc>)
    b222:	4d0b      	ldr	r5, [pc, #44]	; (b250 <chip_wake+0xc0>)
    b224:	47a8      	blx	r5
    b226:	9a00      	ldr	r2, [sp, #0]
    b228:	0021      	movs	r1, r4
    b22a:	480c      	ldr	r0, [pc, #48]	; (b25c <chip_wake+0xcc>)
    b22c:	47a8      	blx	r5
    b22e:	480a      	ldr	r0, [pc, #40]	; (b258 <chip_wake+0xc8>)
    b230:	47a8      	blx	r5
			goto _WAKE_EXIT;
    b232:	e7e7      	b.n	b204 <chip_wake+0x74>
	nm_bus_reset();
    b234:	4b0a      	ldr	r3, [pc, #40]	; (b260 <chip_wake+0xd0>)
    b236:	4798      	blx	r3
    b238:	e7e4      	b.n	b204 <chip_wake+0x74>
    b23a:	46c0      	nop			; (mov r8, r8)
    b23c:	0000b491 	.word	0x0000b491
    b240:	0000b49d 	.word	0x0000b49d
    b244:	00009d89 	.word	0x00009d89
    b248:	0001aacc 	.word	0x0001aacc
    b24c:	0001a574 	.word	0x0001a574
    b250:	00008bdd 	.word	0x00008bdd
    b254:	0001ab18 	.word	0x0001ab18
    b258:	0001a59c 	.word	0x0001a59c
    b25c:	0001ab00 	.word	0x0001ab00
    b260:	0000b479 	.word	0x0000b479

0000b264 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    b264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b266:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    b268:	4d2c      	ldr	r5, [pc, #176]	; (b31c <wait_for_bootrom+0xb8>)
    b26a:	4c2d      	ldr	r4, [pc, #180]	; (b320 <wait_for_bootrom+0xbc>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    b26c:	4e2d      	ldr	r6, [pc, #180]	; (b324 <wait_for_bootrom+0xc0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    b26e:	0028      	movs	r0, r5
    b270:	47a0      	blx	r4
		if (reg & 0x80000000) {
    b272:	2800      	cmp	r0, #0
    b274:	db02      	blt.n	b27c <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    b276:	2001      	movs	r0, #1
    b278:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    b27a:	e7f8      	b.n	b26e <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    b27c:	482a      	ldr	r0, [pc, #168]	; (b328 <wait_for_bootrom+0xc4>)
    b27e:	4b28      	ldr	r3, [pc, #160]	; (b320 <wait_for_bootrom+0xbc>)
    b280:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    b282:	07c3      	lsls	r3, r0, #31
    b284:	d409      	bmi.n	b29a <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    b286:	4e27      	ldr	r6, [pc, #156]	; (b324 <wait_for_bootrom+0xc0>)
			reg = nm_read_reg(BOOTROM_REG);
    b288:	4c28      	ldr	r4, [pc, #160]	; (b32c <wait_for_bootrom+0xc8>)
    b28a:	4d25      	ldr	r5, [pc, #148]	; (b320 <wait_for_bootrom+0xbc>)
			nm_bsp_sleep(1);
    b28c:	2001      	movs	r0, #1
    b28e:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    b290:	0020      	movs	r0, r4
    b292:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    b294:	4b26      	ldr	r3, [pc, #152]	; (b330 <wait_for_bootrom+0xcc>)
    b296:	4298      	cmp	r0, r3
    b298:	d1f8      	bne.n	b28c <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    b29a:	2f02      	cmp	r7, #2
    b29c:	d020      	beq.n	b2e0 <wait_for_bootrom+0x7c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    b29e:	2f03      	cmp	r7, #3
    b2a0:	d028      	beq.n	b2f4 <wait_for_bootrom+0x90>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    b2a2:	2f04      	cmp	r7, #4
    b2a4:	d02f      	beq.n	b306 <wait_for_bootrom+0xa2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    b2a6:	4923      	ldr	r1, [pc, #140]	; (b334 <wait_for_bootrom+0xd0>)
    b2a8:	4823      	ldr	r0, [pc, #140]	; (b338 <wait_for_bootrom+0xd4>)
    b2aa:	4b24      	ldr	r3, [pc, #144]	; (b33c <wait_for_bootrom+0xd8>)
    b2ac:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    b2ae:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    b2b0:	4b23      	ldr	r3, [pc, #140]	; (b340 <wait_for_bootrom+0xdc>)
    b2b2:	4798      	blx	r3
    b2b4:	0500      	lsls	r0, r0, #20
    b2b6:	0d00      	lsrs	r0, r0, #20
    b2b8:	4b22      	ldr	r3, [pc, #136]	; (b344 <wait_for_bootrom+0xe0>)
    b2ba:	4298      	cmp	r0, r3
    b2bc:	d829      	bhi.n	b312 <wait_for_bootrom+0xae>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    b2be:	0020      	movs	r0, r4
    b2c0:	4b21      	ldr	r3, [pc, #132]	; (b348 <wait_for_bootrom+0xe4>)
    b2c2:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    b2c4:	4821      	ldr	r0, [pc, #132]	; (b34c <wait_for_bootrom+0xe8>)
    b2c6:	4c22      	ldr	r4, [pc, #136]	; (b350 <wait_for_bootrom+0xec>)
    b2c8:	47a0      	blx	r4
    b2ca:	491a      	ldr	r1, [pc, #104]	; (b334 <wait_for_bootrom+0xd0>)
    b2cc:	4821      	ldr	r0, [pc, #132]	; (b354 <wait_for_bootrom+0xf0>)
    b2ce:	47a0      	blx	r4
    b2d0:	4821      	ldr	r0, [pc, #132]	; (b358 <wait_for_bootrom+0xf4>)
    b2d2:	47a0      	blx	r4

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    b2d4:	4921      	ldr	r1, [pc, #132]	; (b35c <wait_for_bootrom+0xf8>)
    b2d6:	4815      	ldr	r0, [pc, #84]	; (b32c <wait_for_bootrom+0xc8>)
    b2d8:	4b18      	ldr	r3, [pc, #96]	; (b33c <wait_for_bootrom+0xd8>)
    b2da:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    b2dc:	2000      	movs	r0, #0
    b2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    b2e0:	491f      	ldr	r1, [pc, #124]	; (b360 <wait_for_bootrom+0xfc>)
    b2e2:	4820      	ldr	r0, [pc, #128]	; (b364 <wait_for_bootrom+0x100>)
    b2e4:	4c15      	ldr	r4, [pc, #84]	; (b33c <wait_for_bootrom+0xd8>)
    b2e6:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    b2e8:	2180      	movs	r1, #128	; 0x80
    b2ea:	0349      	lsls	r1, r1, #13
    b2ec:	4812      	ldr	r0, [pc, #72]	; (b338 <wait_for_bootrom+0xd4>)
    b2ee:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    b2f0:	2400      	movs	r4, #0
    b2f2:	e7dd      	b.n	b2b0 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    b2f4:	491a      	ldr	r1, [pc, #104]	; (b360 <wait_for_bootrom+0xfc>)
    b2f6:	481b      	ldr	r0, [pc, #108]	; (b364 <wait_for_bootrom+0x100>)
    b2f8:	4c10      	ldr	r4, [pc, #64]	; (b33c <wait_for_bootrom+0xd8>)
    b2fa:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    b2fc:	2100      	movs	r1, #0
    b2fe:	480e      	ldr	r0, [pc, #56]	; (b338 <wait_for_bootrom+0xd4>)
    b300:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    b302:	2400      	movs	r4, #0
    b304:	e7d4      	b.n	b2b0 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    b306:	490b      	ldr	r1, [pc, #44]	; (b334 <wait_for_bootrom+0xd0>)
    b308:	480b      	ldr	r0, [pc, #44]	; (b338 <wait_for_bootrom+0xd4>)
    b30a:	4b0c      	ldr	r3, [pc, #48]	; (b33c <wait_for_bootrom+0xd8>)
    b30c:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    b30e:	2480      	movs	r4, #128	; 0x80
    b310:	e7ce      	b.n	b2b0 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    b312:	2002      	movs	r0, #2
    b314:	4320      	orrs	r0, r4
    b316:	4b0c      	ldr	r3, [pc, #48]	; (b348 <wait_for_bootrom+0xe4>)
    b318:	4798      	blx	r3
    b31a:	e7d3      	b.n	b2c4 <wait_for_bootrom+0x60>
    b31c:	00001014 	.word	0x00001014
    b320:	0000b485 	.word	0x0000b485
    b324:	00009d89 	.word	0x00009d89
    b328:	000207bc 	.word	0x000207bc
    b32c:	000c000c 	.word	0x000c000c
    b330:	10add09e 	.word	0x10add09e
    b334:	13301354 	.word	0x13301354
    b338:	0000108c 	.word	0x0000108c
    b33c:	0000b49d 	.word	0x0000b49d
    b340:	0000b059 	.word	0x0000b059
    b344:	0000039f 	.word	0x0000039f
    b348:	0000afc5 	.word	0x0000afc5
    b34c:	0001a8b0 	.word	0x0001a8b0
    b350:	00008bdd 	.word	0x00008bdd
    b354:	0001ab34 	.word	0x0001ab34
    b358:	0001a59c 	.word	0x0001a59c
    b35c:	ef522f61 	.word	0xef522f61
    b360:	3c1cd57d 	.word	0x3c1cd57d
    b364:	000207ac 	.word	0x000207ac

0000b368 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    b368:	b570      	push	{r4, r5, r6, lr}
    b36a:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    b36c:	4b15      	ldr	r3, [pc, #84]	; (b3c4 <wait_for_firmware_start+0x5c>)
    b36e:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    b370:	4b15      	ldr	r3, [pc, #84]	; (b3c8 <wait_for_firmware_start+0x60>)
    b372:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    b374:	3802      	subs	r0, #2
    b376:	2801      	cmp	r0, #1
    b378:	d911      	bls.n	b39e <wait_for_firmware_start+0x36>
{
    b37a:	2401      	movs	r4, #1
    b37c:	4264      	negs	r4, r4
    b37e:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    b380:	4e12      	ldr	r6, [pc, #72]	; (b3cc <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    b382:	4d13      	ldr	r5, [pc, #76]	; (b3d0 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    b384:	9b00      	ldr	r3, [sp, #0]
    b386:	4298      	cmp	r0, r3
    b388:	d00e      	beq.n	b3a8 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    b38a:	2002      	movs	r0, #2
    b38c:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    b38e:	9801      	ldr	r0, [sp, #4]
    b390:	47a8      	blx	r5
    b392:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    b394:	2c00      	cmp	r4, #0
    b396:	d1f5      	bne.n	b384 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    b398:	2005      	movs	r0, #5
    b39a:	4240      	negs	r0, r0
    b39c:	e009      	b.n	b3b2 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    b39e:	4b0d      	ldr	r3, [pc, #52]	; (b3d4 <wait_for_firmware_start+0x6c>)
    b3a0:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    b3a2:	4b0d      	ldr	r3, [pc, #52]	; (b3d8 <wait_for_firmware_start+0x70>)
    b3a4:	9300      	str	r3, [sp, #0]
    b3a6:	e7e8      	b.n	b37a <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    b3a8:	9a00      	ldr	r2, [sp, #0]
    b3aa:	4b07      	ldr	r3, [pc, #28]	; (b3c8 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    b3ac:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    b3ae:	429a      	cmp	r2, r3
    b3b0:	d001      	beq.n	b3b6 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    b3b2:	b002      	add	sp, #8
    b3b4:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    b3b6:	2100      	movs	r1, #0
    b3b8:	4802      	ldr	r0, [pc, #8]	; (b3c4 <wait_for_firmware_start+0x5c>)
    b3ba:	4b08      	ldr	r3, [pc, #32]	; (b3dc <wait_for_firmware_start+0x74>)
    b3bc:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    b3be:	2000      	movs	r0, #0
    b3c0:	e7f7      	b.n	b3b2 <wait_for_firmware_start+0x4a>
    b3c2:	46c0      	nop			; (mov r8, r8)
    b3c4:	0000108c 	.word	0x0000108c
    b3c8:	02532636 	.word	0x02532636
    b3cc:	00009d89 	.word	0x00009d89
    b3d0:	0000b485 	.word	0x0000b485
    b3d4:	000207ac 	.word	0x000207ac
    b3d8:	d75dc1c3 	.word	0xd75dc1c3
    b3dc:	0000b49d 	.word	0x0000b49d

0000b3e0 <chip_deinit>:

sint8 chip_deinit(void)
{
    b3e0:	b530      	push	{r4, r5, lr}
    b3e2:	b083      	sub	sp, #12
	uint32 reg = 0;
    b3e4:	2300      	movs	r3, #0
    b3e6:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    b3e8:	a901      	add	r1, sp, #4
    b3ea:	20a0      	movs	r0, #160	; 0xa0
    b3ec:	0140      	lsls	r0, r0, #5
    b3ee:	4b12      	ldr	r3, [pc, #72]	; (b438 <chip_deinit+0x58>)
    b3f0:	4798      	blx	r3
    b3f2:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    b3f4:	d113      	bne.n	b41e <chip_deinit+0x3e>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    b3f6:	4911      	ldr	r1, [pc, #68]	; (b43c <chip_deinit+0x5c>)
    b3f8:	9b01      	ldr	r3, [sp, #4]
    b3fa:	4019      	ands	r1, r3
    b3fc:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    b3fe:	20a0      	movs	r0, #160	; 0xa0
    b400:	0140      	lsls	r0, r0, #5
    b402:	4b0f      	ldr	r3, [pc, #60]	; (b440 <chip_deinit+0x60>)
    b404:	4798      	blx	r3
    b406:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    b408:	d012      	beq.n	b430 <chip_deinit+0x50>
		M2M_ERR("failed to de-initialize\n");
    b40a:	4a0e      	ldr	r2, [pc, #56]	; (b444 <chip_deinit+0x64>)
    b40c:	490e      	ldr	r1, [pc, #56]	; (b448 <chip_deinit+0x68>)
    b40e:	480f      	ldr	r0, [pc, #60]	; (b44c <chip_deinit+0x6c>)
    b410:	4d0f      	ldr	r5, [pc, #60]	; (b450 <chip_deinit+0x70>)
    b412:	47a8      	blx	r5
    b414:	480f      	ldr	r0, [pc, #60]	; (b454 <chip_deinit+0x74>)
    b416:	47a8      	blx	r5
    b418:	480f      	ldr	r0, [pc, #60]	; (b458 <chip_deinit+0x78>)
    b41a:	47a8      	blx	r5
		goto ERR1;
    b41c:	e008      	b.n	b430 <chip_deinit+0x50>
		M2M_ERR("failed to de-initialize\n");
    b41e:	4a0f      	ldr	r2, [pc, #60]	; (b45c <chip_deinit+0x7c>)
    b420:	4909      	ldr	r1, [pc, #36]	; (b448 <chip_deinit+0x68>)
    b422:	480a      	ldr	r0, [pc, #40]	; (b44c <chip_deinit+0x6c>)
    b424:	4d0a      	ldr	r5, [pc, #40]	; (b450 <chip_deinit+0x70>)
    b426:	47a8      	blx	r5
    b428:	480a      	ldr	r0, [pc, #40]	; (b454 <chip_deinit+0x74>)
    b42a:	47a8      	blx	r5
    b42c:	480a      	ldr	r0, [pc, #40]	; (b458 <chip_deinit+0x78>)
    b42e:	47a8      	blx	r5
	}

ERR1:
	return ret;
}
    b430:	0020      	movs	r0, r4
    b432:	b003      	add	sp, #12
    b434:	bd30      	pop	{r4, r5, pc}
    b436:	46c0      	nop			; (mov r8, r8)
    b438:	0000b491 	.word	0x0000b491
    b43c:	fffffbff 	.word	0xfffffbff
    b440:	0000b49d 	.word	0x0000b49d
    b444:	00000207 	.word	0x00000207
    b448:	0001aad8 	.word	0x0001aad8
    b44c:	0001a574 	.word	0x0001a574
    b450:	00008bdd 	.word	0x00008bdd
    b454:	0001aae4 	.word	0x0001aae4
    b458:	0001a59c 	.word	0x0001a59c
    b45c:	00000201 	.word	0x00000201

0000b460 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    b460:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    b462:	4b01      	ldr	r3, [pc, #4]	; (b468 <nm_bus_iface_init+0x8>)
    b464:	4798      	blx	r3
	return ret;
}
    b466:	bd10      	pop	{r4, pc}
    b468:	00009e45 	.word	0x00009e45

0000b46c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    b46c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    b46e:	4b01      	ldr	r3, [pc, #4]	; (b474 <nm_bus_iface_deinit+0x8>)
    b470:	4798      	blx	r3

	return ret;
}
    b472:	bd10      	pop	{r4, pc}
    b474:	0000a071 	.word	0x0000a071

0000b478 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    b478:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    b47a:	4b01      	ldr	r3, [pc, #4]	; (b480 <nm_bus_reset+0x8>)
    b47c:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    b47e:	bd10      	pop	{r4, pc}
    b480:	0000c1b1 	.word	0x0000c1b1

0000b484 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    b484:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    b486:	4b01      	ldr	r3, [pc, #4]	; (b48c <nm_read_reg+0x8>)
    b488:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    b48a:	bd10      	pop	{r4, pc}
    b48c:	0000c1e9 	.word	0x0000c1e9

0000b490 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    b490:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    b492:	4b01      	ldr	r3, [pc, #4]	; (b498 <nm_read_reg_with_ret+0x8>)
    b494:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    b496:	bd10      	pop	{r4, pc}
    b498:	0000c1fd 	.word	0x0000c1fd

0000b49c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    b49c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    b49e:	4b01      	ldr	r3, [pc, #4]	; (b4a4 <nm_write_reg+0x8>)
    b4a0:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    b4a2:	bd10      	pop	{r4, pc}
    b4a4:	0000c215 	.word	0x0000c215

0000b4a8 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    b4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4aa:	46d6      	mov	lr, sl
    b4ac:	464f      	mov	r7, r9
    b4ae:	4646      	mov	r6, r8
    b4b0:	b5c0      	push	{r6, r7, lr}
    b4b2:	b082      	sub	sp, #8
    b4b4:	4680      	mov	r8, r0
    b4b6:	4689      	mov	r9, r1
    b4b8:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    b4ba:	4b13      	ldr	r3, [pc, #76]	; (b508 <nm_read_block+0x60>)
    b4bc:	881f      	ldrh	r7, [r3, #0]
    b4be:	3f08      	subs	r7, #8
    b4c0:	b2bb      	uxth	r3, r7
    b4c2:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    b4c4:	001e      	movs	r6, r3
    b4c6:	0004      	movs	r4, r0
    b4c8:	429a      	cmp	r2, r3
    b4ca:	d91a      	bls.n	b502 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    b4cc:	4b0f      	ldr	r3, [pc, #60]	; (b50c <nm_read_block+0x64>)
    b4ce:	469a      	mov	sl, r3
    b4d0:	1a37      	subs	r7, r6, r0
    b4d2:	4643      	mov	r3, r8
    b4d4:	1ae1      	subs	r1, r4, r3
    b4d6:	4449      	add	r1, r9
    b4d8:	9a01      	ldr	r2, [sp, #4]
    b4da:	0020      	movs	r0, r4
    b4dc:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    b4de:	2800      	cmp	r0, #0
    b4e0:	d109      	bne.n	b4f6 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    b4e2:	1bad      	subs	r5, r5, r6
    b4e4:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    b4e6:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    b4e8:	42b5      	cmp	r5, r6
    b4ea:	d8f2      	bhi.n	b4d2 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    b4ec:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    b4ee:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    b4f0:	0020      	movs	r0, r4
    b4f2:	4b06      	ldr	r3, [pc, #24]	; (b50c <nm_read_block+0x64>)
    b4f4:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    b4f6:	b002      	add	sp, #8
    b4f8:	bc1c      	pop	{r2, r3, r4}
    b4fa:	4690      	mov	r8, r2
    b4fc:	4699      	mov	r9, r3
    b4fe:	46a2      	mov	sl, r4
    b500:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    b502:	2100      	movs	r1, #0
    b504:	e7f2      	b.n	b4ec <nm_read_block+0x44>
    b506:	46c0      	nop			; (mov r8, r8)
    b508:	20000224 	.word	0x20000224
    b50c:	0000c341 	.word	0x0000c341

0000b510 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    b510:	b5f0      	push	{r4, r5, r6, r7, lr}
    b512:	46d6      	mov	lr, sl
    b514:	464f      	mov	r7, r9
    b516:	4646      	mov	r6, r8
    b518:	b5c0      	push	{r6, r7, lr}
    b51a:	b082      	sub	sp, #8
    b51c:	4680      	mov	r8, r0
    b51e:	4689      	mov	r9, r1
    b520:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    b522:	4b13      	ldr	r3, [pc, #76]	; (b570 <nm_write_block+0x60>)
    b524:	881f      	ldrh	r7, [r3, #0]
    b526:	3f08      	subs	r7, #8
    b528:	b2bb      	uxth	r3, r7
    b52a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    b52c:	001e      	movs	r6, r3
    b52e:	0004      	movs	r4, r0
    b530:	429a      	cmp	r2, r3
    b532:	d91a      	bls.n	b56a <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    b534:	4b0f      	ldr	r3, [pc, #60]	; (b574 <nm_write_block+0x64>)
    b536:	469a      	mov	sl, r3
    b538:	1a37      	subs	r7, r6, r0
    b53a:	4643      	mov	r3, r8
    b53c:	1ae1      	subs	r1, r4, r3
    b53e:	4449      	add	r1, r9
    b540:	9a01      	ldr	r2, [sp, #4]
    b542:	0020      	movs	r0, r4
    b544:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    b546:	2800      	cmp	r0, #0
    b548:	d109      	bne.n	b55e <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    b54a:	1bad      	subs	r5, r5, r6
    b54c:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    b54e:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    b550:	42b5      	cmp	r5, r6
    b552:	d8f2      	bhi.n	b53a <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    b554:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    b556:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    b558:	0020      	movs	r0, r4
    b55a:	4b06      	ldr	r3, [pc, #24]	; (b574 <nm_write_block+0x64>)
    b55c:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    b55e:	b002      	add	sp, #8
    b560:	bc1c      	pop	{r2, r3, r4}
    b562:	4690      	mov	r8, r2
    b564:	4699      	mov	r9, r3
    b566:	46a2      	mov	sl, r4
    b568:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    b56a:	2100      	movs	r1, #0
    b56c:	e7f2      	b.n	b554 <nm_write_block+0x44>
    b56e:	46c0      	nop			; (mov r8, r8)
    b570:	20000224 	.word	0x20000224
    b574:	0000c40d 	.word	0x0000c40d

0000b578 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    b578:	b570      	push	{r4, r5, r6, lr}
    b57a:	b084      	sub	sp, #16
    b57c:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    b57e:	2300      	movs	r3, #0
    b580:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    b582:	2208      	movs	r2, #8
    b584:	2100      	movs	r1, #0
    b586:	a801      	add	r0, sp, #4
    b588:	4b2d      	ldr	r3, [pc, #180]	; (b640 <nm_get_firmware_full_info+0xc8>)
    b58a:	4798      	blx	r3
	if (pstrRev != NULL)
    b58c:	2c00      	cmp	r4, #0
    b58e:	d044      	beq.n	b61a <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    b590:	2228      	movs	r2, #40	; 0x28
    b592:	2100      	movs	r1, #0
    b594:	0020      	movs	r0, r4
    b596:	4b2b      	ldr	r3, [pc, #172]	; (b644 <nm_get_firmware_full_info+0xcc>)
    b598:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    b59a:	a903      	add	r1, sp, #12
    b59c:	482a      	ldr	r0, [pc, #168]	; (b648 <nm_get_firmware_full_info+0xd0>)
    b59e:	4b2b      	ldr	r3, [pc, #172]	; (b64c <nm_get_firmware_full_info+0xd4>)
    b5a0:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    b5a2:	2800      	cmp	r0, #0
    b5a4:	d13a      	bne.n	b61c <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    b5a6:	9b03      	ldr	r3, [sp, #12]
    b5a8:	2b00      	cmp	r3, #0
    b5aa:	d039      	beq.n	b620 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    b5ac:	20c0      	movs	r0, #192	; 0xc0
    b5ae:	0280      	lsls	r0, r0, #10
    b5b0:	4318      	orrs	r0, r3
    b5b2:	2208      	movs	r2, #8
    b5b4:	a901      	add	r1, sp, #4
    b5b6:	4b26      	ldr	r3, [pc, #152]	; (b650 <nm_get_firmware_full_info+0xd8>)
    b5b8:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    b5ba:	2800      	cmp	r0, #0
    b5bc:	d12e      	bne.n	b61c <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    b5be:	9b02      	ldr	r3, [sp, #8]
    b5c0:	0418      	lsls	r0, r3, #16
    b5c2:	0c00      	lsrs	r0, r0, #16
    b5c4:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    b5c6:	d02e      	beq.n	b626 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    b5c8:	23c0      	movs	r3, #192	; 0xc0
    b5ca:	029b      	lsls	r3, r3, #10
    b5cc:	4318      	orrs	r0, r3
    b5ce:	2228      	movs	r2, #40	; 0x28
    b5d0:	0021      	movs	r1, r4
    b5d2:	4b1f      	ldr	r3, [pc, #124]	; (b650 <nm_get_firmware_full_info+0xd8>)
    b5d4:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    b5d6:	2800      	cmp	r0, #0
    b5d8:	d120      	bne.n	b61c <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    b5da:	7921      	ldrb	r1, [r4, #4]
    b5dc:	0209      	lsls	r1, r1, #8
    b5de:	79a2      	ldrb	r2, [r4, #6]
    b5e0:	230f      	movs	r3, #15
    b5e2:	401a      	ands	r2, r3
    b5e4:	430a      	orrs	r2, r1
    b5e6:	7961      	ldrb	r1, [r4, #5]
    b5e8:	0109      	lsls	r1, r1, #4
    b5ea:	25ff      	movs	r5, #255	; 0xff
    b5ec:	4029      	ands	r1, r5
    b5ee:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    b5f0:	79e1      	ldrb	r1, [r4, #7]
    b5f2:	0209      	lsls	r1, r1, #8
    b5f4:	7a66      	ldrb	r6, [r4, #9]
    b5f6:	4033      	ands	r3, r6
    b5f8:	430b      	orrs	r3, r1
    b5fa:	7a21      	ldrb	r1, [r4, #8]
    b5fc:	0109      	lsls	r1, r1, #4
    b5fe:	400d      	ands	r5, r1
    b600:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    b602:	2a00      	cmp	r2, #0
    b604:	d012      	beq.n	b62c <nm_get_firmware_full_info+0xb4>
    b606:	2b00      	cmp	r3, #0
    b608:	d013      	beq.n	b632 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    b60a:	4912      	ldr	r1, [pc, #72]	; (b654 <nm_get_firmware_full_info+0xdc>)
    b60c:	428b      	cmp	r3, r1
    b60e:	d813      	bhi.n	b638 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    b610:	4b11      	ldr	r3, [pc, #68]	; (b658 <nm_get_firmware_full_info+0xe0>)
    b612:	429a      	cmp	r2, r3
    b614:	d802      	bhi.n	b61c <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    b616:	380d      	subs	r0, #13
    b618:	e000      	b.n	b61c <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    b61a:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    b61c:	b004      	add	sp, #16
    b61e:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    b620:	200c      	movs	r0, #12
    b622:	4240      	negs	r0, r0
    b624:	e7fa      	b.n	b61c <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    b626:	200c      	movs	r0, #12
    b628:	4240      	negs	r0, r0
    b62a:	e7f7      	b.n	b61c <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    b62c:	200c      	movs	r0, #12
    b62e:	4240      	negs	r0, r0
    b630:	e7f4      	b.n	b61c <nm_get_firmware_full_info+0xa4>
    b632:	200c      	movs	r0, #12
    b634:	4240      	negs	r0, r0
    b636:	e7f1      	b.n	b61c <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    b638:	200d      	movs	r0, #13
    b63a:	4240      	negs	r0, r0
    b63c:	e7ee      	b.n	b61c <nm_get_firmware_full_info+0xa4>
    b63e:	46c0      	nop			; (mov r8, r8)
    b640:	00012b83 	.word	0x00012b83
    b644:	0000a0d5 	.word	0x0000a0d5
    b648:	000c0008 	.word	0x000c0008
    b64c:	0000b491 	.word	0x0000b491
    b650:	0000b4a9 	.word	0x0000b4a9
    b654:	00001354 	.word	0x00001354
    b658:	00001353 	.word	0x00001353

0000b65c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    b65c:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    b65e:	2800      	cmp	r0, #0
    b660:	d034      	beq.n	b6cc <nm_drv_init+0x70>
		u8Mode = *((uint8 *)arg);
    b662:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    b664:	1e6b      	subs	r3, r5, #1
    b666:	2b03      	cmp	r3, #3
    b668:	d900      	bls.n	b66c <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    b66a:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    b66c:	2000      	movs	r0, #0
    b66e:	4b1e      	ldr	r3, [pc, #120]	; (b6e8 <nm_drv_init+0x8c>)
    b670:	4798      	blx	r3
    b672:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b674:	d12c      	bne.n	b6d0 <nm_drv_init+0x74>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    b676:	481d      	ldr	r0, [pc, #116]	; (b6ec <nm_drv_init+0x90>)
    b678:	4c1d      	ldr	r4, [pc, #116]	; (b6f0 <nm_drv_init+0x94>)
    b67a:	47a0      	blx	r4
    b67c:	4b1d      	ldr	r3, [pc, #116]	; (b6f4 <nm_drv_init+0x98>)
    b67e:	4798      	blx	r3
    b680:	0001      	movs	r1, r0
    b682:	481d      	ldr	r0, [pc, #116]	; (b6f8 <nm_drv_init+0x9c>)
    b684:	47a0      	blx	r4
    b686:	481d      	ldr	r0, [pc, #116]	; (b6fc <nm_drv_init+0xa0>)
    b688:	47a0      	blx	r4
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    b68a:	4b1d      	ldr	r3, [pc, #116]	; (b700 <nm_drv_init+0xa4>)
    b68c:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    b68e:	0028      	movs	r0, r5
    b690:	4b1c      	ldr	r3, [pc, #112]	; (b704 <nm_drv_init+0xa8>)
    b692:	4798      	blx	r3
    b694:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b696:	d115      	bne.n	b6c4 <nm_drv_init+0x68>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    b698:	0028      	movs	r0, r5
    b69a:	4b1b      	ldr	r3, [pc, #108]	; (b708 <nm_drv_init+0xac>)
    b69c:	4798      	blx	r3
    b69e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b6a0:	d110      	bne.n	b6c4 <nm_drv_init+0x68>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    b6a2:	3d02      	subs	r5, #2
    b6a4:	2d01      	cmp	r5, #1
    b6a6:	d90f      	bls.n	b6c8 <nm_drv_init+0x6c>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    b6a8:	4b18      	ldr	r3, [pc, #96]	; (b70c <nm_drv_init+0xb0>)
    b6aa:	4798      	blx	r3
    b6ac:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b6ae:	d00b      	beq.n	b6c8 <nm_drv_init+0x6c>
		M2M_ERR("failed to enable interrupts..\n");
    b6b0:	22a7      	movs	r2, #167	; 0xa7
    b6b2:	0052      	lsls	r2, r2, #1
    b6b4:	4916      	ldr	r1, [pc, #88]	; (b710 <nm_drv_init+0xb4>)
    b6b6:	4817      	ldr	r0, [pc, #92]	; (b714 <nm_drv_init+0xb8>)
    b6b8:	4d0d      	ldr	r5, [pc, #52]	; (b6f0 <nm_drv_init+0x94>)
    b6ba:	47a8      	blx	r5
    b6bc:	4816      	ldr	r0, [pc, #88]	; (b718 <nm_drv_init+0xbc>)
    b6be:	47a8      	blx	r5
    b6c0:	480e      	ldr	r0, [pc, #56]	; (b6fc <nm_drv_init+0xa0>)
    b6c2:	47a8      	blx	r5
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    b6c4:	4b15      	ldr	r3, [pc, #84]	; (b71c <nm_drv_init+0xc0>)
    b6c6:	4798      	blx	r3
ERR1:
	return ret;
}
    b6c8:	0020      	movs	r0, r4
    b6ca:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    b6cc:	2501      	movs	r5, #1
    b6ce:	e7cd      	b.n	b66c <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    b6d0:	2290      	movs	r2, #144	; 0x90
    b6d2:	0052      	lsls	r2, r2, #1
    b6d4:	490e      	ldr	r1, [pc, #56]	; (b710 <nm_drv_init+0xb4>)
    b6d6:	480f      	ldr	r0, [pc, #60]	; (b714 <nm_drv_init+0xb8>)
    b6d8:	4d05      	ldr	r5, [pc, #20]	; (b6f0 <nm_drv_init+0x94>)
    b6da:	47a8      	blx	r5
    b6dc:	4810      	ldr	r0, [pc, #64]	; (b720 <nm_drv_init+0xc4>)
    b6de:	47a8      	blx	r5
    b6e0:	4806      	ldr	r0, [pc, #24]	; (b6fc <nm_drv_init+0xa0>)
    b6e2:	47a8      	blx	r5
		goto ERR1;
    b6e4:	e7f0      	b.n	b6c8 <nm_drv_init+0x6c>
    b6e6:	46c0      	nop			; (mov r8, r8)
    b6e8:	0000b461 	.word	0x0000b461
    b6ec:	0001a8b0 	.word	0x0001a8b0
    b6f0:	00008bdd 	.word	0x00008bdd
    b6f4:	0000b059 	.word	0x0000b059
    b6f8:	0001ac04 	.word	0x0001ac04
    b6fc:	0001a59c 	.word	0x0001a59c
    b700:	0000c22d 	.word	0x0000c22d
    b704:	0000b265 	.word	0x0000b265
    b708:	0000b369 	.word	0x0000b369
    b70c:	0000affd 	.word	0x0000affd
    b710:	0001ab4c 	.word	0x0001ab4c
    b714:	0001a574 	.word	0x0001a574
    b718:	0001abc8 	.word	0x0001abc8
    b71c:	0000b46d 	.word	0x0000b46d
    b720:	0001abe8 	.word	0x0001abe8

0000b724 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    b724:	b570      	push	{r4, r5, r6, lr}
	sint8 ret;

	ret = chip_deinit();
    b726:	4b19      	ldr	r3, [pc, #100]	; (b78c <nm_drv_deinit+0x68>)
    b728:	4798      	blx	r3
    b72a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b72c:	d10b      	bne.n	b746 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    b72e:	2000      	movs	r0, #0
    b730:	4b17      	ldr	r3, [pc, #92]	; (b790 <nm_drv_deinit+0x6c>)
    b732:	4798      	blx	r3
    b734:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b736:	d112      	bne.n	b75e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    b738:	4b16      	ldr	r3, [pc, #88]	; (b794 <nm_drv_deinit+0x70>)
    b73a:	4798      	blx	r3
    b73c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b73e:	d119      	bne.n	b774 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    b740:	4b15      	ldr	r3, [pc, #84]	; (b798 <nm_drv_deinit+0x74>)
    b742:	4798      	blx	r3
    b744:	e009      	b.n	b75a <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    b746:	2266      	movs	r2, #102	; 0x66
    b748:	32ff      	adds	r2, #255	; 0xff
    b74a:	4914      	ldr	r1, [pc, #80]	; (b79c <nm_drv_deinit+0x78>)
    b74c:	4814      	ldr	r0, [pc, #80]	; (b7a0 <nm_drv_deinit+0x7c>)
    b74e:	4d15      	ldr	r5, [pc, #84]	; (b7a4 <nm_drv_deinit+0x80>)
    b750:	47a8      	blx	r5
    b752:	4815      	ldr	r0, [pc, #84]	; (b7a8 <nm_drv_deinit+0x84>)
    b754:	47a8      	blx	r5
    b756:	4815      	ldr	r0, [pc, #84]	; (b7ac <nm_drv_deinit+0x88>)
    b758:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
    b75a:	0020      	movs	r0, r4
    b75c:	bd70      	pop	{r4, r5, r6, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    b75e:	22b6      	movs	r2, #182	; 0xb6
    b760:	0052      	lsls	r2, r2, #1
    b762:	490e      	ldr	r1, [pc, #56]	; (b79c <nm_drv_deinit+0x78>)
    b764:	480e      	ldr	r0, [pc, #56]	; (b7a0 <nm_drv_deinit+0x7c>)
    b766:	4d0f      	ldr	r5, [pc, #60]	; (b7a4 <nm_drv_deinit+0x80>)
    b768:	47a8      	blx	r5
    b76a:	4811      	ldr	r0, [pc, #68]	; (b7b0 <nm_drv_deinit+0x8c>)
    b76c:	47a8      	blx	r5
    b76e:	480f      	ldr	r0, [pc, #60]	; (b7ac <nm_drv_deinit+0x88>)
    b770:	47a8      	blx	r5
		goto ERR1;
    b772:	e7f2      	b.n	b75a <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
    b774:	22b9      	movs	r2, #185	; 0xb9
    b776:	0052      	lsls	r2, r2, #1
    b778:	4908      	ldr	r1, [pc, #32]	; (b79c <nm_drv_deinit+0x78>)
    b77a:	4809      	ldr	r0, [pc, #36]	; (b7a0 <nm_drv_deinit+0x7c>)
    b77c:	4d09      	ldr	r5, [pc, #36]	; (b7a4 <nm_drv_deinit+0x80>)
    b77e:	47a8      	blx	r5
    b780:	480c      	ldr	r0, [pc, #48]	; (b7b4 <nm_drv_deinit+0x90>)
    b782:	47a8      	blx	r5
    b784:	4809      	ldr	r0, [pc, #36]	; (b7ac <nm_drv_deinit+0x88>)
    b786:	47a8      	blx	r5
		goto ERR1;
    b788:	e7e7      	b.n	b75a <nm_drv_deinit+0x36>
    b78a:	46c0      	nop			; (mov r8, r8)
    b78c:	0000b3e1 	.word	0x0000b3e1
    b790:	0000cf81 	.word	0x0000cf81
    b794:	0000b46d 	.word	0x0000b46d
    b798:	0000c1d9 	.word	0x0000c1d9
    b79c:	0001ab58 	.word	0x0001ab58
    b7a0:	0001a574 	.word	0x0001a574
    b7a4:	00008bdd 	.word	0x00008bdd
    b7a8:	0001ab68 	.word	0x0001ab68
    b7ac:	0001a59c 	.word	0x0001a59c
    b7b0:	0001ab88 	.word	0x0001ab88
    b7b4:	0001abac 	.word	0x0001abac

0000b7b8 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    b7b8:	b500      	push	{lr}
    b7ba:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    b7bc:	ab01      	add	r3, sp, #4
    b7be:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    b7c0:	2200      	movs	r2, #0
    b7c2:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    b7c4:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    b7c6:	0019      	movs	r1, r3
    b7c8:	2003      	movs	r0, #3
    b7ca:	4b02      	ldr	r3, [pc, #8]	; (b7d4 <nmi_spi_write+0x1c>)
    b7cc:	4798      	blx	r3
}
    b7ce:	b005      	add	sp, #20
    b7d0:	bd00      	pop	{pc}
    b7d2:	46c0      	nop			; (mov r8, r8)
    b7d4:	00009f2d 	.word	0x00009f2d

0000b7d8 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    b7d8:	b570      	push	{r4, r5, r6, lr}
    b7da:	b084      	sub	sp, #16
    b7dc:	ac08      	add	r4, sp, #32
    b7de:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    b7e0:	ac01      	add	r4, sp, #4
    b7e2:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    b7e4:	303f      	adds	r0, #63	; 0x3f
    b7e6:	b2c4      	uxtb	r4, r0
    b7e8:	2c0e      	cmp	r4, #14
    b7ea:	d900      	bls.n	b7ee <spi_cmd+0x16>
    b7ec:	e082      	b.n	b8f4 <spi_cmd+0x11c>
    b7ee:	00a0      	lsls	r0, r4, #2
    b7f0:	4c4e      	ldr	r4, [pc, #312]	; (b92c <spi_cmd+0x154>)
    b7f2:	5820      	ldr	r0, [r4, r0]
    b7f4:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    b7f6:	ab01      	add	r3, sp, #4
    b7f8:	0c0a      	lsrs	r2, r1, #16
    b7fa:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b7fc:	0a0a      	lsrs	r2, r1, #8
    b7fe:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    b800:	70d9      	strb	r1, [r3, #3]
		len = 5;
    b802:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    b804:	4b4a      	ldr	r3, [pc, #296]	; (b930 <spi_cmd+0x158>)
    b806:	781b      	ldrb	r3, [r3, #0]
    b808:	2b00      	cmp	r3, #0
    b80a:	d075      	beq.n	b8f8 <spi_cmd+0x120>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    b80c:	3901      	subs	r1, #1
    b80e:	b2c9      	uxtb	r1, r1
    b810:	e081      	b.n	b916 <spi_cmd+0x13e>
		bc[1] = (uint8)(adr >> 8);
    b812:	0a0b      	lsrs	r3, r1, #8
    b814:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    b816:	2d00      	cmp	r5, #0
    b818:	d107      	bne.n	b82a <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    b81a:	aa01      	add	r2, sp, #4
    b81c:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    b81e:	ab01      	add	r3, sp, #4
    b820:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    b822:	2200      	movs	r2, #0
    b824:	70da      	strb	r2, [r3, #3]
		len = 5;
    b826:	2105      	movs	r1, #5
		break;
    b828:	e7ec      	b.n	b804 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    b82a:	2280      	movs	r2, #128	; 0x80
    b82c:	4252      	negs	r2, r2
    b82e:	4313      	orrs	r3, r2
    b830:	aa01      	add	r2, sp, #4
    b832:	7053      	strb	r3, [r2, #1]
    b834:	e7f3      	b.n	b81e <spi_cmd+0x46>
		bc[1] = 0x00;
    b836:	ab01      	add	r3, sp, #4
    b838:	2200      	movs	r2, #0
    b83a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    b83c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    b83e:	70da      	strb	r2, [r3, #3]
		len = 5;
    b840:	2105      	movs	r1, #5
		break;
    b842:	e7df      	b.n	b804 <spi_cmd+0x2c>
		bc[1] = 0x00;
    b844:	ab01      	add	r3, sp, #4
    b846:	2200      	movs	r2, #0
    b848:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    b84a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    b84c:	70da      	strb	r2, [r3, #3]
		len = 5;
    b84e:	2105      	movs	r1, #5
		break;
    b850:	e7d8      	b.n	b804 <spi_cmd+0x2c>
		bc[1] = 0xff;
    b852:	ab01      	add	r3, sp, #4
    b854:	22ff      	movs	r2, #255	; 0xff
    b856:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    b858:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    b85a:	70da      	strb	r2, [r3, #3]
		len = 5;
    b85c:	2105      	movs	r1, #5
		break;
    b85e:	e7d1      	b.n	b804 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    b860:	aa01      	add	r2, sp, #4
    b862:	0c08      	lsrs	r0, r1, #16
    b864:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    b866:	0a08      	lsrs	r0, r1, #8
    b868:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    b86a:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    b86c:	0a19      	lsrs	r1, r3, #8
    b86e:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    b870:	7153      	strb	r3, [r2, #5]
		len = 7;
    b872:	2107      	movs	r1, #7
		break;
    b874:	e7c6      	b.n	b804 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    b876:	aa01      	add	r2, sp, #4
    b878:	0c08      	lsrs	r0, r1, #16
    b87a:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    b87c:	0a08      	lsrs	r0, r1, #8
    b87e:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    b880:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    b882:	0c19      	lsrs	r1, r3, #16
    b884:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    b886:	0a19      	lsrs	r1, r3, #8
    b888:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    b88a:	7193      	strb	r3, [r2, #6]
		len = 8;
    b88c:	2108      	movs	r1, #8
		break;
    b88e:	e7b9      	b.n	b804 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    b890:	0a0b      	lsrs	r3, r1, #8
    b892:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    b894:	2d00      	cmp	r5, #0
    b896:	d10c      	bne.n	b8b2 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    b898:	a801      	add	r0, sp, #4
    b89a:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    b89c:	ab01      	add	r3, sp, #4
    b89e:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    b8a0:	0e11      	lsrs	r1, r2, #24
    b8a2:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    b8a4:	0c11      	lsrs	r1, r2, #16
    b8a6:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    b8a8:	0a11      	lsrs	r1, r2, #8
    b8aa:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    b8ac:	719a      	strb	r2, [r3, #6]
		len = 8;
    b8ae:	2108      	movs	r1, #8
		break;
    b8b0:	e7a8      	b.n	b804 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    b8b2:	2080      	movs	r0, #128	; 0x80
    b8b4:	4240      	negs	r0, r0
    b8b6:	4303      	orrs	r3, r0
    b8b8:	a801      	add	r0, sp, #4
    b8ba:	7043      	strb	r3, [r0, #1]
    b8bc:	e7ee      	b.n	b89c <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    b8be:	ab01      	add	r3, sp, #4
    b8c0:	0c08      	lsrs	r0, r1, #16
    b8c2:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b8c4:	0a08      	lsrs	r0, r1, #8
    b8c6:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    b8c8:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    b8ca:	0e11      	lsrs	r1, r2, #24
    b8cc:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    b8ce:	0c11      	lsrs	r1, r2, #16
    b8d0:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    b8d2:	0a11      	lsrs	r1, r2, #8
    b8d4:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    b8d6:	71da      	strb	r2, [r3, #7]
		len = 9;
    b8d8:	2109      	movs	r1, #9
		break;
    b8da:	e793      	b.n	b804 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    b8dc:	2290      	movs	r2, #144	; 0x90
    b8de:	0052      	lsls	r2, r2, #1
    b8e0:	4914      	ldr	r1, [pc, #80]	; (b934 <spi_cmd+0x15c>)
    b8e2:	4815      	ldr	r0, [pc, #84]	; (b938 <spi_cmd+0x160>)
    b8e4:	4c15      	ldr	r4, [pc, #84]	; (b93c <spi_cmd+0x164>)
    b8e6:	47a0      	blx	r4
    b8e8:	4815      	ldr	r0, [pc, #84]	; (b940 <spi_cmd+0x168>)
    b8ea:	47a0      	blx	r4
    b8ec:	4815      	ldr	r0, [pc, #84]	; (b944 <spi_cmd+0x16c>)
    b8ee:	47a0      	blx	r4
			result = N_FAIL;
    b8f0:	2300      	movs	r3, #0
    b8f2:	e017      	b.n	b924 <spi_cmd+0x14c>
	switch (cmd) {
    b8f4:	2300      	movs	r3, #0
    b8f6:	e015      	b.n	b924 <spi_cmd+0x14c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    b8f8:	1e4e      	subs	r6, r1, #1
    b8fa:	aa01      	add	r2, sp, #4
    b8fc:	1995      	adds	r5, r2, r6
    b8fe:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    b900:	4c11      	ldr	r4, [pc, #68]	; (b948 <spi_cmd+0x170>)
    b902:	005b      	lsls	r3, r3, #1
    b904:	7810      	ldrb	r0, [r2, #0]
    b906:	4043      	eors	r3, r0
    b908:	5ce3      	ldrb	r3, [r4, r3]
    b90a:	3201      	adds	r2, #1
	while (len--)
    b90c:	42aa      	cmp	r2, r5
    b90e:	d1f8      	bne.n	b902 <spi_cmd+0x12a>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    b910:	005b      	lsls	r3, r3, #1
    b912:	aa01      	add	r2, sp, #4
    b914:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    b916:	b289      	uxth	r1, r1
    b918:	a801      	add	r0, sp, #4
    b91a:	4b0c      	ldr	r3, [pc, #48]	; (b94c <spi_cmd+0x174>)
    b91c:	4798      	blx	r3
    b91e:	2301      	movs	r3, #1
    b920:	2800      	cmp	r0, #0
    b922:	d1db      	bne.n	b8dc <spi_cmd+0x104>
		}
	}

	return result;
}
    b924:	0018      	movs	r0, r3
    b926:	b004      	add	sp, #16
    b928:	bd70      	pop	{r4, r5, r6, pc}
    b92a:	46c0      	nop			; (mov r8, r8)
    b92c:	0001ac14 	.word	0x0001ac14
    b930:	20004130 	.word	0x20004130
    b934:	0001ac90 	.word	0x0001ac90
    b938:	0001a574 	.word	0x0001a574
    b93c:	00008bdd 	.word	0x00008bdd
    b940:	0001b094 	.word	0x0001b094
    b944:	0001a59c 	.word	0x0001a59c
    b948:	0001ad20 	.word	0x0001ad20
    b94c:	0000b7b9 	.word	0x0000b7b9

0000b950 <nmi_spi_read>:
{
    b950:	b500      	push	{lr}
    b952:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    b954:	ab01      	add	r3, sp, #4
    b956:	2200      	movs	r2, #0
    b958:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    b95a:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    b95c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    b95e:	0019      	movs	r1, r3
    b960:	2003      	movs	r0, #3
    b962:	4b02      	ldr	r3, [pc, #8]	; (b96c <nmi_spi_read+0x1c>)
    b964:	4798      	blx	r3
}
    b966:	b005      	add	sp, #20
    b968:	bd00      	pop	{pc}
    b96a:	46c0      	nop			; (mov r8, r8)
    b96c:	00009f2d 	.word	0x00009f2d

0000b970 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    b970:	b5f0      	push	{r4, r5, r6, r7, lr}
    b972:	46c6      	mov	lr, r8
    b974:	b500      	push	{lr}
    b976:	b082      	sub	sp, #8
    b978:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    b97a:	28cf      	cmp	r0, #207	; 0xcf
    b97c:	d02b      	beq.n	b9d6 <spi_cmd_rsp+0x66>
    b97e:	0003      	movs	r3, r0
    b980:	333b      	adds	r3, #59	; 0x3b
    b982:	b2db      	uxtb	r3, r3
    b984:	2b01      	cmp	r3, #1
    b986:	d926      	bls.n	b9d6 <spi_cmd_rsp+0x66>
{
    b988:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b98a:	466b      	mov	r3, sp
    b98c:	1dde      	adds	r6, r3, #7
    b98e:	4b24      	ldr	r3, [pc, #144]	; (ba20 <spi_cmd_rsp+0xb0>)
    b990:	4698      	mov	r8, r3
    b992:	2101      	movs	r1, #1
    b994:	0030      	movs	r0, r6
    b996:	47c0      	blx	r8
    b998:	1e05      	subs	r5, r0, #0
    b99a:	d125      	bne.n	b9e8 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    b99c:	7833      	ldrb	r3, [r6, #0]
    b99e:	42bb      	cmp	r3, r7
    b9a0:	d02e      	beq.n	ba00 <spi_cmd_rsp+0x90>
    b9a2:	3c01      	subs	r4, #1
    b9a4:	b2e4      	uxtb	r4, r4
    b9a6:	2c00      	cmp	r4, #0
    b9a8:	d1f3      	bne.n	b992 <spi_cmd_rsp+0x22>
    b9aa:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b9ac:	466b      	mov	r3, sp
    b9ae:	1dde      	adds	r6, r3, #7
    b9b0:	4f1b      	ldr	r7, [pc, #108]	; (ba20 <spi_cmd_rsp+0xb0>)
    b9b2:	2101      	movs	r1, #1
    b9b4:	0030      	movs	r0, r6
    b9b6:	47b8      	blx	r7
    b9b8:	2800      	cmp	r0, #0
    b9ba:	d123      	bne.n	ba04 <spi_cmd_rsp+0x94>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    b9bc:	7833      	ldrb	r3, [r6, #0]
    b9be:	2b00      	cmp	r3, #0
    b9c0:	d02b      	beq.n	ba1a <spi_cmd_rsp+0xaa>
    b9c2:	3c01      	subs	r4, #1
    b9c4:	b2e4      	uxtb	r4, r4
    b9c6:	2c00      	cmp	r4, #0
    b9c8:	d1f3      	bne.n	b9b2 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    b9ca:	2501      	movs	r5, #1

_fail_:

	return result;
}
    b9cc:	0028      	movs	r0, r5
    b9ce:	b002      	add	sp, #8
    b9d0:	bc04      	pop	{r2}
    b9d2:	4690      	mov	r8, r2
    b9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b9d6:	2101      	movs	r1, #1
    b9d8:	466b      	mov	r3, sp
    b9da:	1dd8      	adds	r0, r3, #7
    b9dc:	4b10      	ldr	r3, [pc, #64]	; (ba20 <spi_cmd_rsp+0xb0>)
    b9de:	4798      	blx	r3
			result = N_FAIL;
    b9e0:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b9e2:	2800      	cmp	r0, #0
    b9e4:	d0d0      	beq.n	b988 <spi_cmd_rsp+0x18>
    b9e6:	e7f1      	b.n	b9cc <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    b9e8:	225c      	movs	r2, #92	; 0x5c
    b9ea:	32ff      	adds	r2, #255	; 0xff
    b9ec:	490d      	ldr	r1, [pc, #52]	; (ba24 <spi_cmd_rsp+0xb4>)
    b9ee:	480e      	ldr	r0, [pc, #56]	; (ba28 <spi_cmd_rsp+0xb8>)
    b9f0:	4c0e      	ldr	r4, [pc, #56]	; (ba2c <spi_cmd_rsp+0xbc>)
    b9f2:	47a0      	blx	r4
    b9f4:	480e      	ldr	r0, [pc, #56]	; (ba30 <spi_cmd_rsp+0xc0>)
    b9f6:	47a0      	blx	r4
    b9f8:	480e      	ldr	r0, [pc, #56]	; (ba34 <spi_cmd_rsp+0xc4>)
    b9fa:	47a0      	blx	r4
			result = N_FAIL;
    b9fc:	2500      	movs	r5, #0
			goto _fail_;
    b9fe:	e7e5      	b.n	b9cc <spi_cmd_rsp+0x5c>
    ba00:	240b      	movs	r4, #11
    ba02:	e7d3      	b.n	b9ac <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    ba04:	226a      	movs	r2, #106	; 0x6a
    ba06:	32ff      	adds	r2, #255	; 0xff
    ba08:	4906      	ldr	r1, [pc, #24]	; (ba24 <spi_cmd_rsp+0xb4>)
    ba0a:	4807      	ldr	r0, [pc, #28]	; (ba28 <spi_cmd_rsp+0xb8>)
    ba0c:	4c07      	ldr	r4, [pc, #28]	; (ba2c <spi_cmd_rsp+0xbc>)
    ba0e:	47a0      	blx	r4
    ba10:	4807      	ldr	r0, [pc, #28]	; (ba30 <spi_cmd_rsp+0xc0>)
    ba12:	47a0      	blx	r4
    ba14:	4807      	ldr	r0, [pc, #28]	; (ba34 <spi_cmd_rsp+0xc4>)
    ba16:	47a0      	blx	r4
			goto _fail_;
    ba18:	e7d8      	b.n	b9cc <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    ba1a:	2501      	movs	r5, #1
    ba1c:	e7d6      	b.n	b9cc <spi_cmd_rsp+0x5c>
    ba1e:	46c0      	nop			; (mov r8, r8)
    ba20:	0000b951 	.word	0x0000b951
    ba24:	0001aca8 	.word	0x0001aca8
    ba28:	0001a574 	.word	0x0001a574
    ba2c:	00008bdd 	.word	0x00008bdd
    ba30:	0001b290 	.word	0x0001b290
    ba34:	0001a59c 	.word	0x0001a59c

0000ba38 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
    ba38:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba3a:	46de      	mov	lr, fp
    ba3c:	4657      	mov	r7, sl
    ba3e:	464e      	mov	r6, r9
    ba40:	4645      	mov	r5, r8
    ba42:	b5e0      	push	{r5, r6, r7, lr}
    ba44:	b097      	sub	sp, #92	; 0x5c
    ba46:	0005      	movs	r5, r0
    ba48:	4690      	mov	r8, r2
    ba4a:	9300      	str	r3, [sp, #0]
    ba4c:	ab20      	add	r3, sp, #128	; 0x80
    ba4e:	7818      	ldrb	r0, [r3, #0]
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
	int result = N_OK;

	wb[0] = cmd;
    ba50:	ab0e      	add	r3, sp, #56	; 0x38
    ba52:	701d      	strb	r5, [r3, #0]
	switch (cmd) {
    ba54:	002b      	movs	r3, r5
    ba56:	333f      	adds	r3, #63	; 0x3f
    ba58:	b2da      	uxtb	r2, r3
    ba5a:	2a0e      	cmp	r2, #14
    ba5c:	d900      	bls.n	ba60 <spi_cmd_complete+0x28>
    ba5e:	e263      	b.n	bf28 <spi_cmd_complete+0x4f0>
    ba60:	0093      	lsls	r3, r2, #2
    ba62:	4acc      	ldr	r2, [pc, #816]	; (bd94 <spi_cmd_complete+0x35c>)
    ba64:	58d3      	ldr	r3, [r2, r3]
    ba66:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
    ba68:	ab0e      	add	r3, sp, #56	; 0x38
    ba6a:	0c0a      	lsrs	r2, r1, #16
    ba6c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
    ba6e:	0a0a      	lsrs	r2, r1, #8
    ba70:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
    ba72:	70d9      	strb	r1, [r3, #3]
		len = 5;
    ba74:	2305      	movs	r3, #5
    ba76:	4699      	mov	r9, r3

	if (result != N_OK) {
		return result;
	}

	if (!gu8Crc_off) {
    ba78:	4bc7      	ldr	r3, [pc, #796]	; (bd98 <spi_cmd_complete+0x360>)
    ba7a:	781f      	ldrb	r7, [r3, #0]
    ba7c:	2f00      	cmp	r7, #0
    ba7e:	d100      	bne.n	ba82 <spi_cmd_complete+0x4a>
    ba80:	e254      	b.n	bf2c <spi_cmd_complete+0x4f4>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
	} else {
		len -=1;
    ba82:	2301      	movs	r3, #1
    ba84:	425b      	negs	r3, r3
    ba86:	469c      	mov	ip, r3
    ba88:	44e1      	add	r9, ip
    ba8a:	e263      	b.n	bf54 <spi_cmd_complete+0x51c>
		wb[1] = (uint8_t)(adr >> 8);
    ba8c:	0a0b      	lsrs	r3, r1, #8
    ba8e:	b2db      	uxtb	r3, r3
		if(clockless == 1)  wb[1] |= (1 << 7);
    ba90:	2801      	cmp	r0, #1
    ba92:	d008      	beq.n	baa6 <spi_cmd_complete+0x6e>
		wb[1] = (uint8_t)(adr >> 8);
    ba94:	aa0e      	add	r2, sp, #56	; 0x38
    ba96:	7053      	strb	r3, [r2, #1]
		wb[2] = (uint8_t)adr;
    ba98:	ab0e      	add	r3, sp, #56	; 0x38
    ba9a:	7099      	strb	r1, [r3, #2]
		wb[3] = 0x00;
    ba9c:	2200      	movs	r2, #0
    ba9e:	70da      	strb	r2, [r3, #3]
		len = 5;
    baa0:	2305      	movs	r3, #5
    baa2:	4699      	mov	r9, r3
		break;
    baa4:	e7e8      	b.n	ba78 <spi_cmd_complete+0x40>
		if(clockless == 1)  wb[1] |= (1 << 7);
    baa6:	2280      	movs	r2, #128	; 0x80
    baa8:	4252      	negs	r2, r2
    baaa:	4313      	orrs	r3, r2
    baac:	aa0e      	add	r2, sp, #56	; 0x38
    baae:	7053      	strb	r3, [r2, #1]
    bab0:	e7f2      	b.n	ba98 <spi_cmd_complete+0x60>
		wb[1] = 0x00;
    bab2:	ab0e      	add	r3, sp, #56	; 0x38
    bab4:	2200      	movs	r2, #0
    bab6:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
    bab8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
    baba:	70da      	strb	r2, [r3, #3]
		len = 5;
    babc:	2305      	movs	r3, #5
    babe:	4699      	mov	r9, r3
		break;
    bac0:	e7da      	b.n	ba78 <spi_cmd_complete+0x40>
		wb[1] = 0x00;
    bac2:	ab0e      	add	r3, sp, #56	; 0x38
    bac4:	2200      	movs	r2, #0
    bac6:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
    bac8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
    baca:	70da      	strb	r2, [r3, #3]
		len = 5;
    bacc:	2305      	movs	r3, #5
    bace:	4699      	mov	r9, r3
		break;
    bad0:	e7d2      	b.n	ba78 <spi_cmd_complete+0x40>
		wb[1] = 0xff;
    bad2:	ab0e      	add	r3, sp, #56	; 0x38
    bad4:	22ff      	movs	r2, #255	; 0xff
    bad6:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
    bad8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
    bada:	70da      	strb	r2, [r3, #3]
		len = 5;
    badc:	2305      	movs	r3, #5
    bade:	4699      	mov	r9, r3
		break;
    bae0:	e7ca      	b.n	ba78 <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 16);
    bae2:	ab0e      	add	r3, sp, #56	; 0x38
    bae4:	0c0a      	lsrs	r2, r1, #16
    bae6:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
    bae8:	0a0a      	lsrs	r2, r1, #8
    baea:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
    baec:	70d9      	strb	r1, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
    baee:	9900      	ldr	r1, [sp, #0]
    baf0:	0a0a      	lsrs	r2, r1, #8
    baf2:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
    baf4:	7159      	strb	r1, [r3, #5]
		len = 7;
    baf6:	2307      	movs	r3, #7
    baf8:	4699      	mov	r9, r3
		break;
    bafa:	e7bd      	b.n	ba78 <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 16);
    bafc:	ab0e      	add	r3, sp, #56	; 0x38
    bafe:	0c0a      	lsrs	r2, r1, #16
    bb00:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
    bb02:	0a0a      	lsrs	r2, r1, #8
    bb04:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
    bb06:	70d9      	strb	r1, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
    bb08:	9900      	ldr	r1, [sp, #0]
    bb0a:	0c0a      	lsrs	r2, r1, #16
    bb0c:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
    bb0e:	0a0a      	lsrs	r2, r1, #8
    bb10:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
    bb12:	7199      	strb	r1, [r3, #6]
		len = 8;
    bb14:	2308      	movs	r3, #8
    bb16:	4699      	mov	r9, r3
		break;
    bb18:	e7ae      	b.n	ba78 <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 8);
    bb1a:	0a0b      	lsrs	r3, r1, #8
    bb1c:	b2db      	uxtb	r3, r3
		if(clockless == 1)  wb[1] |= (1 << 7);
    bb1e:	2801      	cmp	r0, #1
    bb20:	d012      	beq.n	bb48 <spi_cmd_complete+0x110>
		wb[1] = (uint8_t)(adr >> 8);
    bb22:	aa0e      	add	r2, sp, #56	; 0x38
    bb24:	7053      	strb	r3, [r2, #1]
		wb[2] = (uint8_t)(adr);
    bb26:	ab0e      	add	r3, sp, #56	; 0x38
    bb28:	7099      	strb	r1, [r3, #2]
		wb[3] = b[3];
    bb2a:	4642      	mov	r2, r8
    bb2c:	78d2      	ldrb	r2, [r2, #3]
    bb2e:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
    bb30:	4642      	mov	r2, r8
    bb32:	7892      	ldrb	r2, [r2, #2]
    bb34:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
    bb36:	4642      	mov	r2, r8
    bb38:	7852      	ldrb	r2, [r2, #1]
    bb3a:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
    bb3c:	4642      	mov	r2, r8
    bb3e:	7812      	ldrb	r2, [r2, #0]
    bb40:	719a      	strb	r2, [r3, #6]
		len = 8;
    bb42:	2308      	movs	r3, #8
    bb44:	4699      	mov	r9, r3
		break;
    bb46:	e797      	b.n	ba78 <spi_cmd_complete+0x40>
		if(clockless == 1)  wb[1] |= (1 << 7);
    bb48:	2280      	movs	r2, #128	; 0x80
    bb4a:	4252      	negs	r2, r2
    bb4c:	4313      	orrs	r3, r2
    bb4e:	aa0e      	add	r2, sp, #56	; 0x38
    bb50:	7053      	strb	r3, [r2, #1]
    bb52:	e7e8      	b.n	bb26 <spi_cmd_complete+0xee>
		wb[1] = (uint8_t)(adr >> 16);
    bb54:	ab0e      	add	r3, sp, #56	; 0x38
    bb56:	0c0a      	lsrs	r2, r1, #16
    bb58:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
    bb5a:	0a0a      	lsrs	r2, r1, #8
    bb5c:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
    bb5e:	70d9      	strb	r1, [r3, #3]
		wb[4] = b[3];
    bb60:	4642      	mov	r2, r8
    bb62:	78d2      	ldrb	r2, [r2, #3]
    bb64:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
    bb66:	4642      	mov	r2, r8
    bb68:	7892      	ldrb	r2, [r2, #2]
    bb6a:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
    bb6c:	4642      	mov	r2, r8
    bb6e:	7852      	ldrb	r2, [r2, #1]
    bb70:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
    bb72:	4642      	mov	r2, r8
    bb74:	7812      	ldrb	r2, [r2, #0]
    bb76:	71da      	strb	r2, [r3, #7]
		len = 9;
    bb78:	2309      	movs	r3, #9
    bb7a:	4699      	mov	r9, r3
		break;
    bb7c:	e77c      	b.n	ba78 <spi_cmd_complete+0x40>
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
		(cmd == CMD_TERMINATE) ||
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
    bb7e:	464b      	mov	r3, r9
    bb80:	1d9e      	adds	r6, r3, #6
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
    bb82:	2e20      	cmp	r6, #32
    bb84:	d844      	bhi.n	bc10 <spi_cmd_complete+0x1d8>
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
		return result;
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
    bb86:	464b      	mov	r3, r9
    bb88:	466a      	mov	r2, sp
    bb8a:	71d3      	strb	r3, [r2, #7]
    bb8c:	79d7      	ldrb	r7, [r2, #7]
    bb8e:	42b7      	cmp	r7, r6
    bb90:	d207      	bcs.n	bba2 <spi_cmd_complete+0x16a>
    bb92:	003b      	movs	r3, r7
		wb[wix] = 0;
    bb94:	a90e      	add	r1, sp, #56	; 0x38
    bb96:	2200      	movs	r2, #0
    bb98:	54ca      	strb	r2, [r1, r3]
	for(wix = len; wix< len2; wix++) {
    bb9a:	3301      	adds	r3, #1
    bb9c:	b2db      	uxtb	r3, r3
    bb9e:	429e      	cmp	r6, r3
    bba0:	d8fa      	bhi.n	bb98 <spi_cmd_complete+0x160>
	spi.pu8InBuf = bin;
    bba2:	ab0e      	add	r3, sp, #56	; 0x38
    bba4:	9302      	str	r3, [sp, #8]
	spi.pu8OutBuf = bout;
    bba6:	ab06      	add	r3, sp, #24
    bba8:	9303      	str	r3, [sp, #12]
	spi.u16Sz = sz;
    bbaa:	ab02      	add	r3, sp, #8
    bbac:	811e      	strh	r6, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
    bbae:	0019      	movs	r1, r3
    bbb0:	2003      	movs	r0, #3
    bbb2:	4b7a      	ldr	r3, [pc, #488]	; (bd9c <spi_cmd_complete+0x364>)
    bbb4:	4798      	blx	r3
	}
	rix = len;

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
    bbb6:	2800      	cmp	r0, #0
    bbb8:	d138      	bne.n	bc2c <spi_cmd_complete+0x1f4>
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    bbba:	2dcf      	cmp	r5, #207	; 0xcf
    bbbc:	d004      	beq.n	bbc8 <spi_cmd_complete+0x190>
    bbbe:	002b      	movs	r3, r5
    bbc0:	333b      	adds	r3, #59	; 0x3b
    bbc2:	b2db      	uxtb	r3, r3
    bbc4:	2b01      	cmp	r3, #1
    bbc6:	d801      	bhi.n	bbcc <spi_cmd_complete+0x194>
		(cmd == CMD_TERMINATE) ||
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
    bbc8:	3701      	adds	r7, #1
    bbca:	b2ff      	uxtb	r7, r7
	}

	rsp = rb[rix++];
    bbcc:	ab06      	add	r3, sp, #24
    bbce:	5ddb      	ldrb	r3, [r3, r7]
    bbd0:	220f      	movs	r2, #15
    bbd2:	a902      	add	r1, sp, #8
    bbd4:	468c      	mov	ip, r1
    bbd6:	4462      	add	r2, ip
    bbd8:	7013      	strb	r3, [r2, #0]


	if (rsp != cmd) {
    bbda:	429d      	cmp	r5, r3
    bbdc:	d132      	bne.n	bc44 <spi_cmd_complete+0x20c>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
    bbde:	1cbc      	adds	r4, r7, #2
    bbe0:	b2e4      	uxtb	r4, r4
	rsp = rb[rix++];
    bbe2:	1c7b      	adds	r3, r7, #1
	rsp = rb[rix++];
    bbe4:	b2db      	uxtb	r3, r3
    bbe6:	aa06      	add	r2, sp, #24
    bbe8:	5cd0      	ldrb	r0, [r2, r3]
    bbea:	230f      	movs	r3, #15
    bbec:	aa02      	add	r2, sp, #8
    bbee:	4694      	mov	ip, r2
    bbf0:	4463      	add	r3, ip
    bbf2:	7018      	strb	r0, [r3, #0]
	if (rsp != 0x00) {
    bbf4:	2800      	cmp	r0, #0
    bbf6:	d13c      	bne.n	bc72 <spi_cmd_complete+0x23a>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
		result = N_FAIL;
		return result;
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
    bbf8:	002b      	movs	r3, r5
    bbfa:	333c      	adds	r3, #60	; 0x3c
    bbfc:	22fb      	movs	r2, #251	; 0xfb
    bbfe:	4213      	tst	r3, r2
    bc00:	d047      	beq.n	bc92 <spi_cmd_complete+0x25a>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
    bc02:	2308      	movs	r3, #8
    bc04:	002a      	movs	r2, r5
    bc06:	439a      	bics	r2, r3
    bc08:	2ac2      	cmp	r2, #194	; 0xc2
    bc0a:	d042      	beq.n	bc92 <spi_cmd_complete+0x25a>
    bc0c:	2001      	movs	r0, #1
    bc0e:	e029      	b.n	bc64 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
    bc10:	22f7      	movs	r2, #247	; 0xf7
    bc12:	0052      	lsls	r2, r2, #1
    bc14:	4962      	ldr	r1, [pc, #392]	; (bda0 <spi_cmd_complete+0x368>)
    bc16:	4863      	ldr	r0, [pc, #396]	; (bda4 <spi_cmd_complete+0x36c>)
    bc18:	4c63      	ldr	r4, [pc, #396]	; (bda8 <spi_cmd_complete+0x370>)
    bc1a:	47a0      	blx	r4
    bc1c:	2220      	movs	r2, #32
    bc1e:	0031      	movs	r1, r6
    bc20:	4862      	ldr	r0, [pc, #392]	; (bdac <spi_cmd_complete+0x374>)
    bc22:	47a0      	blx	r4
    bc24:	4862      	ldr	r0, [pc, #392]	; (bdb0 <spi_cmd_complete+0x378>)
    bc26:	47a0      	blx	r4
		return result;
    bc28:	2000      	movs	r0, #0
    bc2a:	e01b      	b.n	bc64 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    bc2c:	22fa      	movs	r2, #250	; 0xfa
    bc2e:	32ff      	adds	r2, #255	; 0xff
    bc30:	495b      	ldr	r1, [pc, #364]	; (bda0 <spi_cmd_complete+0x368>)
    bc32:	485c      	ldr	r0, [pc, #368]	; (bda4 <spi_cmd_complete+0x36c>)
    bc34:	4c5c      	ldr	r4, [pc, #368]	; (bda8 <spi_cmd_complete+0x370>)
    bc36:	47a0      	blx	r4
    bc38:	485e      	ldr	r0, [pc, #376]	; (bdb4 <spi_cmd_complete+0x37c>)
    bc3a:	47a0      	blx	r4
    bc3c:	485c      	ldr	r0, [pc, #368]	; (bdb0 <spi_cmd_complete+0x378>)
    bc3e:	47a0      	blx	r4
		return result;
    bc40:	2000      	movs	r0, #0
    bc42:	e00f      	b.n	bc64 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
    bc44:	4a5c      	ldr	r2, [pc, #368]	; (bdb8 <spi_cmd_complete+0x380>)
    bc46:	4956      	ldr	r1, [pc, #344]	; (bda0 <spi_cmd_complete+0x368>)
    bc48:	4856      	ldr	r0, [pc, #344]	; (bda4 <spi_cmd_complete+0x36c>)
    bc4a:	4c57      	ldr	r4, [pc, #348]	; (bda8 <spi_cmd_complete+0x370>)
    bc4c:	47a0      	blx	r4
    bc4e:	230f      	movs	r3, #15
    bc50:	aa02      	add	r2, sp, #8
    bc52:	4694      	mov	ip, r2
    bc54:	4463      	add	r3, ip
    bc56:	781a      	ldrb	r2, [r3, #0]
    bc58:	0029      	movs	r1, r5
    bc5a:	4858      	ldr	r0, [pc, #352]	; (bdbc <spi_cmd_complete+0x384>)
    bc5c:	47a0      	blx	r4
    bc5e:	4854      	ldr	r0, [pc, #336]	; (bdb0 <spi_cmd_complete+0x378>)
    bc60:	47a0      	blx	r4
		return result;
    bc62:	2000      	movs	r0, #0
				}
			}
	}
_error_:
	return result;
}
    bc64:	b017      	add	sp, #92	; 0x5c
    bc66:	bc3c      	pop	{r2, r3, r4, r5}
    bc68:	4690      	mov	r8, r2
    bc6a:	4699      	mov	r9, r3
    bc6c:	46a2      	mov	sl, r4
    bc6e:	46ab      	mov	fp, r5
    bc70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
    bc72:	4a53      	ldr	r2, [pc, #332]	; (bdc0 <spi_cmd_complete+0x388>)
    bc74:	494a      	ldr	r1, [pc, #296]	; (bda0 <spi_cmd_complete+0x368>)
    bc76:	484b      	ldr	r0, [pc, #300]	; (bda4 <spi_cmd_complete+0x36c>)
    bc78:	4c4b      	ldr	r4, [pc, #300]	; (bda8 <spi_cmd_complete+0x370>)
    bc7a:	47a0      	blx	r4
    bc7c:	230f      	movs	r3, #15
    bc7e:	aa02      	add	r2, sp, #8
    bc80:	4694      	mov	ip, r2
    bc82:	4463      	add	r3, ip
    bc84:	7819      	ldrb	r1, [r3, #0]
    bc86:	484f      	ldr	r0, [pc, #316]	; (bdc4 <spi_cmd_complete+0x38c>)
    bc88:	47a0      	blx	r4
    bc8a:	4849      	ldr	r0, [pc, #292]	; (bdb0 <spi_cmd_complete+0x378>)
    bc8c:	47a0      	blx	r4
		return result;
    bc8e:	2000      	movs	r0, #0
    bc90:	e7e8      	b.n	bc64 <spi_cmd_complete+0x22c>
    bc92:	370d      	adds	r7, #13
    bc94:	b2fb      	uxtb	r3, r7
    bc96:	469a      	mov	sl, r3
	for(wix = len; wix< len2; wix++) {
    bc98:	2200      	movs	r2, #0
    bc9a:	270a      	movs	r7, #10
					rsp = rb[rix++];
    bc9c:	a906      	add	r1, sp, #24
    bc9e:	e000      	b.n	bca2 <spi_cmd_complete+0x26a>
    bca0:	001c      	movs	r4, r3
				if(rix < len2) { 
    bca2:	42a6      	cmp	r6, r4
    bca4:	d956      	bls.n	bd54 <spi_cmd_complete+0x31c>
					rsp = rb[rix++];
    bca6:	1c63      	adds	r3, r4, #1
    bca8:	b2db      	uxtb	r3, r3
    bcaa:	5d08      	ldrb	r0, [r1, r4]
				if (((rsp >> 4) & 0xf) == 0xf)
    bcac:	0902      	lsrs	r2, r0, #4
    bcae:	2a0f      	cmp	r2, #15
    bcb0:	d06a      	beq.n	bd88 <spi_cmd_complete+0x350>
			} while (retry--);
    bcb2:	3f01      	subs	r7, #1
    bcb4:	2201      	movs	r2, #1
    bcb6:	4553      	cmp	r3, sl
    bcb8:	d1f2      	bne.n	bca0 <spi_cmd_complete+0x268>
    bcba:	320e      	adds	r2, #14
    bcbc:	a902      	add	r1, sp, #8
    bcbe:	468c      	mov	ip, r1
    bcc0:	4462      	add	r2, ip
    bcc2:	7010      	strb	r0, [r2, #0]
			if (retry <= 0) {
    bcc4:	2f00      	cmp	r7, #0
    bcc6:	dd47      	ble.n	bd58 <spi_cmd_complete+0x320>
			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
    bcc8:	2dc4      	cmp	r5, #196	; 0xc4
    bcca:	d100      	bne.n	bcce <spi_cmd_complete+0x296>
    bccc:	e080      	b.n	bdd0 <spi_cmd_complete+0x398>
    bcce:	2dca      	cmp	r5, #202	; 0xca
    bcd0:	d100      	bne.n	bcd4 <spi_cmd_complete+0x29c>
    bcd2:	e07d      	b.n	bdd0 <spi_cmd_complete+0x398>
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
    bcd4:	2dc2      	cmp	r5, #194	; 0xc2
    bcd6:	d002      	beq.n	bcde <spi_cmd_complete+0x2a6>
    bcd8:	2001      	movs	r0, #1
    bcda:	2dc8      	cmp	r5, #200	; 0xc8
    bcdc:	d1c2      	bne.n	bc64 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
    bcde:	429e      	cmp	r6, r3
    bce0:	d800      	bhi.n	bce4 <spi_cmd_complete+0x2ac>
    bce2:	e0ac      	b.n	be3e <spi_cmd_complete+0x406>
    bce4:	9a00      	ldr	r2, [sp, #0]
    bce6:	2a00      	cmp	r2, #0
    bce8:	d100      	bne.n	bcec <spi_cmd_complete+0x2b4>
    bcea:	e11b      	b.n	bf24 <spi_cmd_complete+0x4ec>
    bcec:	4442      	add	r2, r8
    bcee:	0014      	movs	r4, r2
    bcf0:	4640      	mov	r0, r8
    bcf2:	2701      	movs	r7, #1
    bcf4:	1a3f      	subs	r7, r7, r0
					b[ix++] = rb[rix++];				
    bcf6:	a906      	add	r1, sp, #24
    bcf8:	183d      	adds	r5, r7, r0
    bcfa:	1c5a      	adds	r2, r3, #1
    bcfc:	b2d2      	uxtb	r2, r2
    bcfe:	5ccb      	ldrb	r3, [r1, r3]
    bd00:	7003      	strb	r3, [r0, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
    bd02:	4296      	cmp	r6, r2
    bd04:	d903      	bls.n	bd0e <spi_cmd_complete+0x2d6>
    bd06:	3001      	adds	r0, #1
					b[ix++] = rb[rix++];				
    bd08:	0013      	movs	r3, r2
				for(ix=0; (rix < len2) && (ix < sz);) {
    bd0a:	42a0      	cmp	r0, r4
    bd0c:	d1f4      	bne.n	bcf8 <spi_cmd_complete+0x2c0>
				sz -= ix;
    bd0e:	002b      	movs	r3, r5
    bd10:	9a00      	ldr	r2, [sp, #0]
    bd12:	1b54      	subs	r4, r2, r5
    bd14:	2001      	movs	r0, #1
				if(sz > 0) {
    bd16:	2c00      	cmp	r4, #0
    bd18:	d0a4      	beq.n	bc64 <spi_cmd_complete+0x22c>
					if (sz <= (DATA_PKT_SZ-ix)) {
    bd1a:	2680      	movs	r6, #128	; 0x80
    bd1c:	01b6      	lsls	r6, r6, #6
    bd1e:	1b76      	subs	r6, r6, r5
    bd20:	42b4      	cmp	r4, r6
    bd22:	d800      	bhi.n	bd26 <spi_cmd_complete+0x2ee>
						nbytes = sz;
    bd24:	0026      	movs	r6, r4
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
    bd26:	b2b1      	uxth	r1, r6
    bd28:	4443      	add	r3, r8
    bd2a:	0018      	movs	r0, r3
    bd2c:	4b26      	ldr	r3, [pc, #152]	; (bdc8 <spi_cmd_complete+0x390>)
    bd2e:	4798      	blx	r3
    bd30:	2800      	cmp	r0, #0
    bd32:	d000      	beq.n	bd36 <spi_cmd_complete+0x2fe>
    bd34:	e085      	b.n	be42 <spi_cmd_complete+0x40a>
					if (!gu8Crc_off) {
    bd36:	4b18      	ldr	r3, [pc, #96]	; (bd98 <spi_cmd_complete+0x360>)
    bd38:	781b      	ldrb	r3, [r3, #0]
    bd3a:	2b00      	cmp	r3, #0
    bd3c:	d100      	bne.n	bd40 <spi_cmd_complete+0x308>
    bd3e:	e08b      	b.n	be58 <spi_cmd_complete+0x420>
					ix += nbytes;
    bd40:	46aa      	mov	sl, r5
    bd42:	44b2      	add	sl, r6
					sz -= nbytes;
    bd44:	1ba6      	subs	r6, r4, r6
				while(sz > 0) {
    bd46:	2001      	movs	r0, #1
    bd48:	2e00      	cmp	r6, #0
    bd4a:	d100      	bne.n	bd4e <spi_cmd_complete+0x316>
    bd4c:	e78a      	b.n	bc64 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
    bd4e:	4f1e      	ldr	r7, [pc, #120]	; (bdc8 <spi_cmd_complete+0x390>)
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
    bd50:	46bb      	mov	fp, r7
    bd52:	e0b5      	b.n	bec0 <spi_cmd_complete+0x488>
    bd54:	2a00      	cmp	r2, #0
    bd56:	d111      	bne.n	bd7c <spi_cmd_complete+0x344>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
    bd58:	2295      	movs	r2, #149	; 0x95
    bd5a:	0092      	lsls	r2, r2, #2
    bd5c:	4910      	ldr	r1, [pc, #64]	; (bda0 <spi_cmd_complete+0x368>)
    bd5e:	4811      	ldr	r0, [pc, #68]	; (bda4 <spi_cmd_complete+0x36c>)
    bd60:	4c11      	ldr	r4, [pc, #68]	; (bda8 <spi_cmd_complete+0x370>)
    bd62:	47a0      	blx	r4
    bd64:	230f      	movs	r3, #15
    bd66:	aa02      	add	r2, sp, #8
    bd68:	4694      	mov	ip, r2
    bd6a:	4463      	add	r3, ip
    bd6c:	7819      	ldrb	r1, [r3, #0]
    bd6e:	4817      	ldr	r0, [pc, #92]	; (bdcc <spi_cmd_complete+0x394>)
    bd70:	47a0      	blx	r4
    bd72:	480f      	ldr	r0, [pc, #60]	; (bdb0 <spi_cmd_complete+0x378>)
    bd74:	47a0      	blx	r4
				return result;
    bd76:	2001      	movs	r0, #1
    bd78:	4240      	negs	r0, r0
    bd7a:	e773      	b.n	bc64 <spi_cmd_complete+0x22c>
    bd7c:	230f      	movs	r3, #15
    bd7e:	aa02      	add	r2, sp, #8
    bd80:	4694      	mov	ip, r2
    bd82:	4463      	add	r3, ip
    bd84:	7018      	strb	r0, [r3, #0]
    bd86:	e7e7      	b.n	bd58 <spi_cmd_complete+0x320>
    bd88:	a902      	add	r1, sp, #8
    bd8a:	468c      	mov	ip, r1
    bd8c:	4462      	add	r2, ip
    bd8e:	7010      	strb	r0, [r2, #0]
    bd90:	e798      	b.n	bcc4 <spi_cmd_complete+0x28c>
    bd92:	46c0      	nop			; (mov r8, r8)
    bd94:	0001ac50 	.word	0x0001ac50
    bd98:	20004130 	.word	0x20004130
    bd9c:	00009f2d 	.word	0x00009f2d
    bda0:	0001acb4 	.word	0x0001acb4
    bda4:	0001a574 	.word	0x0001a574
    bda8:	00008bdd 	.word	0x00008bdd
    bdac:	0001b0c0 	.word	0x0001b0c0
    bdb0:	0001a59c 	.word	0x0001a59c
    bdb4:	0001b094 	.word	0x0001b094
    bdb8:	0000022f 	.word	0x0000022f
    bdbc:	0001b0f0 	.word	0x0001b0f0
    bdc0:	00000239 	.word	0x00000239
    bdc4:	0001b12c 	.word	0x0001b12c
    bdc8:	0000b951 	.word	0x0000b951
    bdcc:	0001b160 	.word	0x0001b160
				if((rix+3) < len2) { 
    bdd0:	1cda      	adds	r2, r3, #3
    bdd2:	4296      	cmp	r6, r2
    bdd4:	d928      	bls.n	be28 <spi_cmd_complete+0x3f0>
					b[0] = rb[rix++];
    bdd6:	aa06      	add	r2, sp, #24
    bdd8:	5cd3      	ldrb	r3, [r2, r3]
    bdda:	4641      	mov	r1, r8
    bddc:	700b      	strb	r3, [r1, #0]
    bdde:	1ca3      	adds	r3, r4, #2
					b[1] = rb[rix++];
    bde0:	b2db      	uxtb	r3, r3
    bde2:	5cd3      	ldrb	r3, [r2, r3]
    bde4:	704b      	strb	r3, [r1, #1]
    bde6:	1ce3      	adds	r3, r4, #3
					b[2] = rb[rix++];
    bde8:	b2db      	uxtb	r3, r3
    bdea:	5cd3      	ldrb	r3, [r2, r3]
    bdec:	708b      	strb	r3, [r1, #2]
    bdee:	1d23      	adds	r3, r4, #4
					b[3] = rb[rix++];
    bdf0:	b2db      	uxtb	r3, r3
    bdf2:	5cd3      	ldrb	r3, [r2, r3]
    bdf4:	70cb      	strb	r3, [r1, #3]
				if (!gu8Crc_off) {						
    bdf6:	4b63      	ldr	r3, [pc, #396]	; (bf84 <spi_cmd_complete+0x54c>)
    bdf8:	781b      	ldrb	r3, [r3, #0]
    bdfa:	2001      	movs	r0, #1
    bdfc:	2b00      	cmp	r3, #0
    bdfe:	d000      	beq.n	be02 <spi_cmd_complete+0x3ca>
    be00:	e730      	b.n	bc64 <spi_cmd_complete+0x22c>
					b[3] = rb[rix++];
    be02:	1d63      	adds	r3, r4, #5
					if((rix+1) < len2) { 
    be04:	b2db      	uxtb	r3, r3
    be06:	3301      	adds	r3, #1
    be08:	2001      	movs	r0, #1
    be0a:	429e      	cmp	r6, r3
    be0c:	d900      	bls.n	be10 <spi_cmd_complete+0x3d8>
    be0e:	e729      	b.n	bc64 <spi_cmd_complete+0x22c>
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
    be10:	229c      	movs	r2, #156	; 0x9c
    be12:	0092      	lsls	r2, r2, #2
    be14:	495c      	ldr	r1, [pc, #368]	; (bf88 <spi_cmd_complete+0x550>)
    be16:	485d      	ldr	r0, [pc, #372]	; (bf8c <spi_cmd_complete+0x554>)
    be18:	4c5d      	ldr	r4, [pc, #372]	; (bf90 <spi_cmd_complete+0x558>)
    be1a:	47a0      	blx	r4
    be1c:	485d      	ldr	r0, [pc, #372]	; (bf94 <spi_cmd_complete+0x55c>)
    be1e:	47a0      	blx	r4
    be20:	485d      	ldr	r0, [pc, #372]	; (bf98 <spi_cmd_complete+0x560>)
    be22:	47a0      	blx	r4
						return result;
    be24:	2000      	movs	r0, #0
    be26:	e71d      	b.n	bc64 <spi_cmd_complete+0x22c>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
    be28:	4a5c      	ldr	r2, [pc, #368]	; (bf9c <spi_cmd_complete+0x564>)
    be2a:	4957      	ldr	r1, [pc, #348]	; (bf88 <spi_cmd_complete+0x550>)
    be2c:	4857      	ldr	r0, [pc, #348]	; (bf8c <spi_cmd_complete+0x554>)
    be2e:	4c58      	ldr	r4, [pc, #352]	; (bf90 <spi_cmd_complete+0x558>)
    be30:	47a0      	blx	r4
    be32:	485b      	ldr	r0, [pc, #364]	; (bfa0 <spi_cmd_complete+0x568>)
    be34:	47a0      	blx	r4
    be36:	4858      	ldr	r0, [pc, #352]	; (bf98 <spi_cmd_complete+0x560>)
    be38:	47a0      	blx	r4
					return result;
    be3a:	2000      	movs	r0, #0
    be3c:	e712      	b.n	bc64 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
    be3e:	2500      	movs	r5, #0
    be40:	e765      	b.n	bd0e <spi_cmd_complete+0x2d6>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    be42:	4a58      	ldr	r2, [pc, #352]	; (bfa4 <spi_cmd_complete+0x56c>)
    be44:	4950      	ldr	r1, [pc, #320]	; (bf88 <spi_cmd_complete+0x550>)
    be46:	4851      	ldr	r0, [pc, #324]	; (bf8c <spi_cmd_complete+0x554>)
    be48:	4c51      	ldr	r4, [pc, #324]	; (bf90 <spi_cmd_complete+0x558>)
    be4a:	47a0      	blx	r4
    be4c:	4856      	ldr	r0, [pc, #344]	; (bfa8 <spi_cmd_complete+0x570>)
    be4e:	47a0      	blx	r4
    be50:	4851      	ldr	r0, [pc, #324]	; (bf98 <spi_cmd_complete+0x560>)
    be52:	47a0      	blx	r4
						goto _error_;
    be54:	2000      	movs	r0, #0
    be56:	e705      	b.n	bc64 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
    be58:	2102      	movs	r1, #2
    be5a:	a802      	add	r0, sp, #8
    be5c:	4b53      	ldr	r3, [pc, #332]	; (bfac <spi_cmd_complete+0x574>)
    be5e:	4798      	blx	r3
    be60:	2800      	cmp	r0, #0
    be62:	d100      	bne.n	be66 <spi_cmd_complete+0x42e>
    be64:	e76c      	b.n	bd40 <spi_cmd_complete+0x308>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    be66:	22a6      	movs	r2, #166	; 0xa6
    be68:	0092      	lsls	r2, r2, #2
    be6a:	4947      	ldr	r1, [pc, #284]	; (bf88 <spi_cmd_complete+0x550>)
    be6c:	4847      	ldr	r0, [pc, #284]	; (bf8c <spi_cmd_complete+0x554>)
    be6e:	4c48      	ldr	r4, [pc, #288]	; (bf90 <spi_cmd_complete+0x558>)
    be70:	47a0      	blx	r4
    be72:	484f      	ldr	r0, [pc, #316]	; (bfb0 <spi_cmd_complete+0x578>)
    be74:	47a0      	blx	r4
    be76:	4848      	ldr	r0, [pc, #288]	; (bf98 <spi_cmd_complete+0x560>)
    be78:	47a0      	blx	r4
							goto _error_;
    be7a:	e7eb      	b.n	be54 <spi_cmd_complete+0x41c>
    be7c:	9b00      	ldr	r3, [sp, #0]
    be7e:	4699      	mov	r9, r3
				for(ix=0; (rix < len2) && (ix < sz);) {
    be80:	240b      	movs	r4, #11
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
    be82:	250f      	movs	r5, #15
    be84:	ab02      	add	r3, sp, #8
    be86:	469c      	mov	ip, r3
    be88:	4465      	add	r5, ip
    be8a:	2101      	movs	r1, #1
    be8c:	0028      	movs	r0, r5
    be8e:	47b8      	blx	r7
    be90:	2800      	cmp	r0, #0
    be92:	d11c      	bne.n	bece <spi_cmd_complete+0x496>
						if (((rsp >> 4) & 0xf) == 0xf)
    be94:	782b      	ldrb	r3, [r5, #0]
    be96:	091b      	lsrs	r3, r3, #4
    be98:	2b0f      	cmp	r3, #15
    be9a:	d002      	beq.n	bea2 <spi_cmd_complete+0x46a>
    be9c:	3c01      	subs	r4, #1
					} while (retry--);
    be9e:	2c00      	cmp	r4, #0
    bea0:	d1f3      	bne.n	be8a <spi_cmd_complete+0x452>
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
    bea2:	466b      	mov	r3, sp
    bea4:	8819      	ldrh	r1, [r3, #0]
    bea6:	4640      	mov	r0, r8
    bea8:	4450      	add	r0, sl
    beaa:	47d8      	blx	fp
    beac:	2800      	cmp	r0, #0
    beae:	d11a      	bne.n	bee6 <spi_cmd_complete+0x4ae>
					if (!gu8Crc_off) {
    beb0:	4b34      	ldr	r3, [pc, #208]	; (bf84 <spi_cmd_complete+0x54c>)
    beb2:	781b      	ldrb	r3, [r3, #0]
    beb4:	2b00      	cmp	r3, #0
    beb6:	d022      	beq.n	befe <spi_cmd_complete+0x4c6>
					ix += nbytes;
    beb8:	44ca      	add	sl, r9
					sz -= nbytes;
    beba:	9b00      	ldr	r3, [sp, #0]
    bebc:	1af6      	subs	r6, r6, r3
				while(sz > 0) {
    bebe:	d02f      	beq.n	bf20 <spi_cmd_complete+0x4e8>
    bec0:	9600      	str	r6, [sp, #0]
    bec2:	2380      	movs	r3, #128	; 0x80
    bec4:	019b      	lsls	r3, r3, #6
    bec6:	429e      	cmp	r6, r3
    bec8:	d9d8      	bls.n	be7c <spi_cmd_complete+0x444>
    beca:	9300      	str	r3, [sp, #0]
    becc:	e7d6      	b.n	be7c <spi_cmd_complete+0x444>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    bece:	22ae      	movs	r2, #174	; 0xae
    bed0:	0092      	lsls	r2, r2, #2
    bed2:	492d      	ldr	r1, [pc, #180]	; (bf88 <spi_cmd_complete+0x550>)
    bed4:	482d      	ldr	r0, [pc, #180]	; (bf8c <spi_cmd_complete+0x554>)
    bed6:	4c2e      	ldr	r4, [pc, #184]	; (bf90 <spi_cmd_complete+0x558>)
    bed8:	47a0      	blx	r4
    beda:	4836      	ldr	r0, [pc, #216]	; (bfb4 <spi_cmd_complete+0x57c>)
    bedc:	47a0      	blx	r4
    bede:	482e      	ldr	r0, [pc, #184]	; (bf98 <spi_cmd_complete+0x560>)
    bee0:	47a0      	blx	r4
    bee2:	2000      	movs	r0, #0
    bee4:	e6be      	b.n	bc64 <spi_cmd_complete+0x22c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    bee6:	22b2      	movs	r2, #178	; 0xb2
    bee8:	0092      	lsls	r2, r2, #2
    beea:	4927      	ldr	r1, [pc, #156]	; (bf88 <spi_cmd_complete+0x550>)
    beec:	4827      	ldr	r0, [pc, #156]	; (bf8c <spi_cmd_complete+0x554>)
    beee:	4c28      	ldr	r4, [pc, #160]	; (bf90 <spi_cmd_complete+0x558>)
    bef0:	47a0      	blx	r4
    bef2:	482d      	ldr	r0, [pc, #180]	; (bfa8 <spi_cmd_complete+0x570>)
    bef4:	47a0      	blx	r4
    bef6:	4828      	ldr	r0, [pc, #160]	; (bf98 <spi_cmd_complete+0x560>)
    bef8:	47a0      	blx	r4
						result = N_FAIL;
    befa:	2000      	movs	r0, #0
						break;
    befc:	e6b2      	b.n	bc64 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
    befe:	2102      	movs	r1, #2
    bf00:	a802      	add	r0, sp, #8
    bf02:	4b2a      	ldr	r3, [pc, #168]	; (bfac <spi_cmd_complete+0x574>)
    bf04:	4798      	blx	r3
    bf06:	2800      	cmp	r0, #0
    bf08:	d0d6      	beq.n	beb8 <spi_cmd_complete+0x480>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    bf0a:	4a2b      	ldr	r2, [pc, #172]	; (bfb8 <spi_cmd_complete+0x580>)
    bf0c:	491e      	ldr	r1, [pc, #120]	; (bf88 <spi_cmd_complete+0x550>)
    bf0e:	481f      	ldr	r0, [pc, #124]	; (bf8c <spi_cmd_complete+0x554>)
    bf10:	4c1f      	ldr	r4, [pc, #124]	; (bf90 <spi_cmd_complete+0x558>)
    bf12:	47a0      	blx	r4
    bf14:	4826      	ldr	r0, [pc, #152]	; (bfb0 <spi_cmd_complete+0x578>)
    bf16:	47a0      	blx	r4
    bf18:	481f      	ldr	r0, [pc, #124]	; (bf98 <spi_cmd_complete+0x560>)
    bf1a:	47a0      	blx	r4
							result = N_FAIL;
    bf1c:	2000      	movs	r0, #0
							break;
    bf1e:	e6a1      	b.n	bc64 <spi_cmd_complete+0x22c>
    bf20:	2001      	movs	r0, #1
    bf22:	e69f      	b.n	bc64 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
    bf24:	2001      	movs	r0, #1
    bf26:	e69d      	b.n	bc64 <spi_cmd_complete+0x22c>
		return result;
    bf28:	2000      	movs	r0, #0
    bf2a:	e69b      	b.n	bc64 <spi_cmd_complete+0x22c>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
    bf2c:	2301      	movs	r3, #1
    bf2e:	425b      	negs	r3, r3
    bf30:	444b      	add	r3, r9
    bf32:	469c      	mov	ip, r3
    bf34:	001c      	movs	r4, r3
    bf36:	2200      	movs	r2, #0
    bf38:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    bf3a:	4e20      	ldr	r6, [pc, #128]	; (bfbc <spi_cmd_complete+0x584>)
		crc = crc7_byte(crc, *buffer++);
    bf3c:	a90e      	add	r1, sp, #56	; 0x38
	return crc7_syndrome_table[(crc << 1) ^ data];
    bf3e:	005b      	lsls	r3, r3, #1
    bf40:	5c50      	ldrb	r0, [r2, r1]
    bf42:	4043      	eors	r3, r0
    bf44:	5cf3      	ldrb	r3, [r6, r3]
    bf46:	3201      	adds	r2, #1
	while (len--)
    bf48:	42a2      	cmp	r2, r4
    bf4a:	d1f8      	bne.n	bf3e <spi_cmd_complete+0x506>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
    bf4c:	005b      	lsls	r3, r3, #1
    bf4e:	aa0e      	add	r2, sp, #56	; 0x38
    bf50:	4661      	mov	r1, ip
    bf52:	5453      	strb	r3, [r2, r1]
	if ((cmd == CMD_RESET) ||
    bf54:	2dcf      	cmp	r5, #207	; 0xcf
    bf56:	d100      	bne.n	bf5a <spi_cmd_complete+0x522>
    bf58:	e611      	b.n	bb7e <spi_cmd_complete+0x146>
    bf5a:	002b      	movs	r3, r5
    bf5c:	333b      	adds	r3, #59	; 0x3b
    bf5e:	b2db      	uxtb	r3, r3
    bf60:	2b01      	cmp	r3, #1
    bf62:	d800      	bhi.n	bf66 <spi_cmd_complete+0x52e>
    bf64:	e60b      	b.n	bb7e <spi_cmd_complete+0x146>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
    bf66:	2dc4      	cmp	r5, #196	; 0xc4
    bf68:	d004      	beq.n	bf74 <spi_cmd_complete+0x53c>
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
    bf6a:	464b      	mov	r3, r9
    bf6c:	1d5e      	adds	r6, r3, #5
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
    bf6e:	2dca      	cmp	r5, #202	; 0xca
    bf70:	d000      	beq.n	bf74 <spi_cmd_complete+0x53c>
    bf72:	e606      	b.n	bb82 <spi_cmd_complete+0x14a>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
    bf74:	464e      	mov	r6, r9
    bf76:	360a      	adds	r6, #10
		if (!gu8Crc_off) {
    bf78:	2f00      	cmp	r7, #0
    bf7a:	d000      	beq.n	bf7e <spi_cmd_complete+0x546>
    bf7c:	e601      	b.n	bb82 <spi_cmd_complete+0x14a>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
    bf7e:	3602      	adds	r6, #2
    bf80:	e5ff      	b.n	bb82 <spi_cmd_complete+0x14a>
    bf82:	46c0      	nop			; (mov r8, r8)
    bf84:	20004130 	.word	0x20004130
    bf88:	0001acb4 	.word	0x0001acb4
    bf8c:	0001a574 	.word	0x0001a574
    bf90:	00008bdd 	.word	0x00008bdd
    bf94:	0001b1c0 	.word	0x0001b1c0
    bf98:	0001a59c 	.word	0x0001a59c
    bf9c:	00000263 	.word	0x00000263
    bfa0:	0001b190 	.word	0x0001b190
    bfa4:	0000028e 	.word	0x0000028e
    bfa8:	0001b1f0 	.word	0x0001b1f0
    bfac:	0000b951 	.word	0x0000b951
    bfb0:	0001b224 	.word	0x0001b224
    bfb4:	0001b25c 	.word	0x0001b25c
    bfb8:	000002d2 	.word	0x000002d2
    bfbc:	0001ad20 	.word	0x0001ad20

0000bfc0 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    bfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfc2:	46de      	mov	lr, fp
    bfc4:	4657      	mov	r7, sl
    bfc6:	464e      	mov	r6, r9
    bfc8:	4645      	mov	r5, r8
    bfca:	b5e0      	push	{r5, r6, r7, lr}
    bfcc:	b087      	sub	sp, #28
    bfce:	9003      	str	r0, [sp, #12]
    bfd0:	9105      	str	r1, [sp, #20]
    bfd2:	2830      	cmp	r0, #48	; 0x30
    bfd4:	d80e      	bhi.n	bff4 <spi_write_reg+0x34>
    bfd6:	4b27      	ldr	r3, [pc, #156]	; (c074 <spi_write_reg+0xb4>)
    bfd8:	781b      	ldrb	r3, [r3, #0]
    bfda:	b2db      	uxtb	r3, r3
    bfdc:	9304      	str	r3, [sp, #16]
    bfde:	2300      	movs	r3, #0
    bfe0:	2230      	movs	r2, #48	; 0x30
    bfe2:	9903      	ldr	r1, [sp, #12]
    bfe4:	428a      	cmp	r2, r1
    bfe6:	415b      	adcs	r3, r3
    bfe8:	b2db      	uxtb	r3, r3
    bfea:	469a      	mov	sl, r3
    bfec:	260a      	movs	r6, #10
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
    bfee:	4b22      	ldr	r3, [pc, #136]	; (c078 <spi_write_reg+0xb8>)
    bff0:	469b      	mov	fp, r3
    bff2:	e02b      	b.n	c04c <spi_write_reg+0x8c>
    bff4:	4b21      	ldr	r3, [pc, #132]	; (c07c <spi_write_reg+0xbc>)
    bff6:	781b      	ldrb	r3, [r3, #0]
    bff8:	e7ef      	b.n	bfda <spi_write_reg+0x1a>
	if (result != N_OK) {
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
    bffa:	4a21      	ldr	r2, [pc, #132]	; (c080 <spi_write_reg+0xc0>)
    bffc:	4921      	ldr	r1, [pc, #132]	; (c084 <spi_write_reg+0xc4>)
    bffe:	4822      	ldr	r0, [pc, #136]	; (c088 <spi_write_reg+0xc8>)
    c000:	4c22      	ldr	r4, [pc, #136]	; (c08c <spi_write_reg+0xcc>)
    c002:	47a0      	blx	r4
    c004:	9703      	str	r7, [sp, #12]
    c006:	0039      	movs	r1, r7
    c008:	4821      	ldr	r0, [pc, #132]	; (c090 <spi_write_reg+0xd0>)
    c00a:	47a0      	blx	r4
    c00c:	4821      	ldr	r0, [pc, #132]	; (c094 <spi_write_reg+0xd4>)
    c00e:	47a0      	blx	r4

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    c010:	2001      	movs	r0, #1
    c012:	4f21      	ldr	r7, [pc, #132]	; (c098 <spi_write_reg+0xd8>)
    c014:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c016:	2300      	movs	r3, #0
    c018:	9300      	str	r3, [sp, #0]
    c01a:	2200      	movs	r2, #0
    c01c:	2100      	movs	r1, #0
    c01e:	20cf      	movs	r0, #207	; 0xcf
    c020:	4d1e      	ldr	r5, [pc, #120]	; (c09c <spi_write_reg+0xdc>)
    c022:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    c024:	20cf      	movs	r0, #207	; 0xcf
    c026:	4b1e      	ldr	r3, [pc, #120]	; (c0a0 <spi_write_reg+0xe0>)
    c028:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    c02a:	22ea      	movs	r2, #234	; 0xea
    c02c:	0092      	lsls	r2, r2, #2
    c02e:	4915      	ldr	r1, [pc, #84]	; (c084 <spi_write_reg+0xc4>)
    c030:	4815      	ldr	r0, [pc, #84]	; (c088 <spi_write_reg+0xc8>)
    c032:	47a0      	blx	r4
    c034:	9b05      	ldr	r3, [sp, #20]
    c036:	9a03      	ldr	r2, [sp, #12]
    c038:	0031      	movs	r1, r6
    c03a:	481a      	ldr	r0, [pc, #104]	; (c0a4 <spi_write_reg+0xe4>)
    c03c:	47a0      	blx	r4
    c03e:	4815      	ldr	r0, [pc, #84]	; (c094 <spi_write_reg+0xd4>)
    c040:	47a0      	blx	r4
		nm_bsp_sleep(1);
    c042:	2001      	movs	r0, #1
    c044:	47b8      	blx	r7
    c046:	3e01      	subs	r6, #1
		retry--;
		if(retry) goto _RETRY_;
    c048:	2e00      	cmp	r6, #0
    c04a:	d00b      	beq.n	c064 <spi_write_reg+0xa4>
	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
    c04c:	4653      	mov	r3, sl
    c04e:	9300      	str	r3, [sp, #0]
    c050:	2304      	movs	r3, #4
    c052:	aa05      	add	r2, sp, #20
    c054:	9f03      	ldr	r7, [sp, #12]
    c056:	0039      	movs	r1, r7
    c058:	9804      	ldr	r0, [sp, #16]
    c05a:	47d8      	blx	fp
    c05c:	b243      	sxtb	r3, r0
    c05e:	4698      	mov	r8, r3
	if (result != N_OK) {
    c060:	2b01      	cmp	r3, #1
    c062:	d1ca      	bne.n	bffa <spi_write_reg+0x3a>
	}

	return result;
}
    c064:	4640      	mov	r0, r8
    c066:	b007      	add	sp, #28
    c068:	bc3c      	pop	{r2, r3, r4, r5}
    c06a:	4690      	mov	r8, r2
    c06c:	4699      	mov	r9, r3
    c06e:	46a2      	mov	sl, r4
    c070:	46ab      	mov	fp, r5
    c072:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c074:	0001ac8c 	.word	0x0001ac8c
    c078:	0000ba39 	.word	0x0000ba39
    c07c:	0001ac8d 	.word	0x0001ac8d
    c080:	0000039d 	.word	0x0000039d
    c084:	0001acd8 	.word	0x0001acd8
    c088:	0001a574 	.word	0x0001a574
    c08c:	00008bdd 	.word	0x00008bdd
    c090:	0001b308 	.word	0x0001b308
    c094:	0001a59c 	.word	0x0001a59c
    c098:	00009d89 	.word	0x00009d89
    c09c:	0000b7d9 	.word	0x0000b7d9
    c0a0:	0000b971 	.word	0x0000b971
    c0a4:	0001b334 	.word	0x0001b334

0000c0a8 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    c0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c0aa:	46de      	mov	lr, fp
    c0ac:	4657      	mov	r7, sl
    c0ae:	464e      	mov	r6, r9
    c0b0:	4645      	mov	r5, r8
    c0b2:	b5e0      	push	{r5, r6, r7, lr}
    c0b4:	b089      	sub	sp, #36	; 0x24
    c0b6:	9003      	str	r0, [sp, #12]
    c0b8:	468a      	mov	sl, r1
    c0ba:	28ff      	cmp	r0, #255	; 0xff
    c0bc:	d80e      	bhi.n	c0dc <spi_read_reg+0x34>
    c0be:	4b2e      	ldr	r3, [pc, #184]	; (c178 <spi_read_reg+0xd0>)
    c0c0:	781b      	ldrb	r3, [r3, #0]
    c0c2:	b2db      	uxtb	r3, r3
    c0c4:	9305      	str	r3, [sp, #20]
    c0c6:	2300      	movs	r3, #0
    c0c8:	22ff      	movs	r2, #255	; 0xff
    c0ca:	9903      	ldr	r1, [sp, #12]
    c0cc:	428a      	cmp	r2, r1
    c0ce:	415b      	adcs	r3, r3
    c0d0:	b2db      	uxtb	r3, r3
    c0d2:	4698      	mov	r8, r3
    c0d4:	260a      	movs	r6, #10
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
    c0d6:	4b29      	ldr	r3, [pc, #164]	; (c17c <spi_read_reg+0xd4>)
    c0d8:	469b      	mov	fp, r3
    c0da:	e029      	b.n	c130 <spi_read_reg+0x88>
    c0dc:	4b28      	ldr	r3, [pc, #160]	; (c180 <spi_read_reg+0xd8>)
    c0de:	781b      	ldrb	r3, [r3, #0]
    c0e0:	e7ef      	b.n	c0c2 <spi_read_reg+0x1a>
	if (result != N_OK) {
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
    c0e2:	4a28      	ldr	r2, [pc, #160]	; (c184 <spi_read_reg+0xdc>)
    c0e4:	4928      	ldr	r1, [pc, #160]	; (c188 <spi_read_reg+0xe0>)
    c0e6:	4829      	ldr	r0, [pc, #164]	; (c18c <spi_read_reg+0xe4>)
    c0e8:	4c29      	ldr	r4, [pc, #164]	; (c190 <spi_read_reg+0xe8>)
    c0ea:	47a0      	blx	r4
    c0ec:	9703      	str	r7, [sp, #12]
    c0ee:	0039      	movs	r1, r7
    c0f0:	4828      	ldr	r0, [pc, #160]	; (c194 <spi_read_reg+0xec>)
    c0f2:	47a0      	blx	r4
    c0f4:	4828      	ldr	r0, [pc, #160]	; (c198 <spi_read_reg+0xf0>)
    c0f6:	47a0      	blx	r4
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    c0f8:	2001      	movs	r0, #1
    c0fa:	4f28      	ldr	r7, [pc, #160]	; (c19c <spi_read_reg+0xf4>)
    c0fc:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c0fe:	2300      	movs	r3, #0
    c100:	9300      	str	r3, [sp, #0]
    c102:	2200      	movs	r2, #0
    c104:	2100      	movs	r1, #0
    c106:	20cf      	movs	r0, #207	; 0xcf
    c108:	4d25      	ldr	r5, [pc, #148]	; (c1a0 <spi_read_reg+0xf8>)
    c10a:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    c10c:	20cf      	movs	r0, #207	; 0xcf
    c10e:	4b25      	ldr	r3, [pc, #148]	; (c1a4 <spi_read_reg+0xfc>)
    c110:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    c112:	4a25      	ldr	r2, [pc, #148]	; (c1a8 <spi_read_reg+0x100>)
    c114:	491c      	ldr	r1, [pc, #112]	; (c188 <spi_read_reg+0xe0>)
    c116:	481d      	ldr	r0, [pc, #116]	; (c18c <spi_read_reg+0xe4>)
    c118:	47a0      	blx	r4
    c11a:	9a03      	ldr	r2, [sp, #12]
    c11c:	0031      	movs	r1, r6
    c11e:	4823      	ldr	r0, [pc, #140]	; (c1ac <spi_read_reg+0x104>)
    c120:	47a0      	blx	r4
    c122:	481d      	ldr	r0, [pc, #116]	; (c198 <spi_read_reg+0xf0>)
    c124:	47a0      	blx	r4
		nm_bsp_sleep(1);
    c126:	2001      	movs	r0, #1
    c128:	47b8      	blx	r7
    c12a:	3e01      	subs	r6, #1
		retry--;
		if(retry) goto _RETRY_;
    c12c:	2e00      	cmp	r6, #0
    c12e:	d021      	beq.n	c174 <spi_read_reg+0xcc>
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
    c130:	4643      	mov	r3, r8
    c132:	9300      	str	r3, [sp, #0]
    c134:	2304      	movs	r3, #4
    c136:	aa07      	add	r2, sp, #28
    c138:	9f03      	ldr	r7, [sp, #12]
    c13a:	0039      	movs	r1, r7
    c13c:	9805      	ldr	r0, [sp, #20]
    c13e:	47d8      	blx	fp
    c140:	b243      	sxtb	r3, r0
    c142:	9304      	str	r3, [sp, #16]
	if (result != N_OK) {
    c144:	2b01      	cmp	r3, #1
    c146:	d1cc      	bne.n	c0e2 <spi_read_reg+0x3a>
    c148:	9d04      	ldr	r5, [sp, #16]
		((uint32)tmp[1] << 8) |
    c14a:	aa07      	add	r2, sp, #28
    c14c:	7853      	ldrb	r3, [r2, #1]
    c14e:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    c150:	7891      	ldrb	r1, [r2, #2]
    c152:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    c154:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    c156:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    c158:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    c15a:	78d2      	ldrb	r2, [r2, #3]
    c15c:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    c15e:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    c160:	4652      	mov	r2, sl
    c162:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    c164:	0028      	movs	r0, r5
    c166:	b009      	add	sp, #36	; 0x24
    c168:	bc3c      	pop	{r2, r3, r4, r5}
    c16a:	4690      	mov	r8, r2
    c16c:	4699      	mov	r9, r3
    c16e:	46a2      	mov	sl, r4
    c170:	46ab      	mov	fp, r5
    c172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c174:	9d04      	ldr	r5, [sp, #16]
    c176:	e7f5      	b.n	c164 <spi_read_reg+0xbc>
    c178:	0001ac8e 	.word	0x0001ac8e
    c17c:	0000ba39 	.word	0x0000ba39
    c180:	0001ac8f 	.word	0x0001ac8f
    c184:	00000423 	.word	0x00000423
    c188:	0001acf8 	.word	0x0001acf8
    c18c:	0001a574 	.word	0x0001a574
    c190:	00008bdd 	.word	0x00008bdd
    c194:	0001b2c4 	.word	0x0001b2c4
    c198:	0001a59c 	.word	0x0001a59c
    c19c:	00009d89 	.word	0x00009d89
    c1a0:	0000b7d9 	.word	0x0000b7d9
    c1a4:	0000b971 	.word	0x0000b971
    c1a8:	00000435 	.word	0x00000435
    c1ac:	0001b2f0 	.word	0x0001b2f0

0000c1b0 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    c1b0:	b510      	push	{r4, lr}
    c1b2:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c1b4:	2300      	movs	r3, #0
    c1b6:	9300      	str	r3, [sp, #0]
    c1b8:	2200      	movs	r2, #0
    c1ba:	2100      	movs	r1, #0
    c1bc:	20cf      	movs	r0, #207	; 0xcf
    c1be:	4c04      	ldr	r4, [pc, #16]	; (c1d0 <nm_spi_reset+0x20>)
    c1c0:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    c1c2:	20cf      	movs	r0, #207	; 0xcf
    c1c4:	4b03      	ldr	r3, [pc, #12]	; (c1d4 <nm_spi_reset+0x24>)
    c1c6:	4798      	blx	r3
	return M2M_SUCCESS;
}
    c1c8:	2000      	movs	r0, #0
    c1ca:	b002      	add	sp, #8
    c1cc:	bd10      	pop	{r4, pc}
    c1ce:	46c0      	nop			; (mov r8, r8)
    c1d0:	0000b7d9 	.word	0x0000b7d9
    c1d4:	0000b971 	.word	0x0000b971

0000c1d8 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    c1d8:	2200      	movs	r2, #0
    c1da:	4b02      	ldr	r3, [pc, #8]	; (c1e4 <nm_spi_deinit+0xc>)
    c1dc:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    c1de:	2000      	movs	r0, #0
    c1e0:	4770      	bx	lr
    c1e2:	46c0      	nop			; (mov r8, r8)
    c1e4:	20004130 	.word	0x20004130

0000c1e8 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    c1e8:	b500      	push	{lr}
    c1ea:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    c1ec:	a901      	add	r1, sp, #4
    c1ee:	4b02      	ldr	r3, [pc, #8]	; (c1f8 <nm_spi_read_reg+0x10>)
    c1f0:	4798      	blx	r3

	return u32Val;
}
    c1f2:	9801      	ldr	r0, [sp, #4]
    c1f4:	b003      	add	sp, #12
    c1f6:	bd00      	pop	{pc}
    c1f8:	0000c0a9 	.word	0x0000c0a9

0000c1fc <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    c1fc:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    c1fe:	4b04      	ldr	r3, [pc, #16]	; (c210 <nm_spi_read_reg_with_ret+0x14>)
    c200:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c202:	2300      	movs	r3, #0
    c204:	2801      	cmp	r0, #1
    c206:	d101      	bne.n	c20c <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    c208:	0018      	movs	r0, r3
    c20a:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    c20c:	3b06      	subs	r3, #6
    c20e:	e7fb      	b.n	c208 <nm_spi_read_reg_with_ret+0xc>
    c210:	0000c0a9 	.word	0x0000c0a9

0000c214 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    c214:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    c216:	4b04      	ldr	r3, [pc, #16]	; (c228 <nm_spi_write_reg+0x14>)
    c218:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c21a:	2300      	movs	r3, #0
    c21c:	2801      	cmp	r0, #1
    c21e:	d101      	bne.n	c224 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    c220:	0018      	movs	r0, r3
    c222:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    c224:	3b06      	subs	r3, #6
    c226:	e7fb      	b.n	c220 <nm_spi_write_reg+0xc>
    c228:	0000bfc1 	.word	0x0000bfc1

0000c22c <nm_spi_init>:
{
    c22c:	b530      	push	{r4, r5, lr}
    c22e:	b083      	sub	sp, #12
	uint32 reg = 0;
    c230:	2300      	movs	r3, #0
    c232:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    c234:	4a31      	ldr	r2, [pc, #196]	; (c2fc <nm_spi_init+0xd0>)
    c236:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    c238:	4669      	mov	r1, sp
    c23a:	4831      	ldr	r0, [pc, #196]	; (c300 <nm_spi_init+0xd4>)
    c23c:	4b31      	ldr	r3, [pc, #196]	; (c304 <nm_spi_init+0xd8>)
    c23e:	4798      	blx	r3
    c240:	2800      	cmp	r0, #0
    c242:	d028      	beq.n	c296 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    c244:	4b2d      	ldr	r3, [pc, #180]	; (c2fc <nm_spi_init+0xd0>)
    c246:	781b      	ldrb	r3, [r3, #0]
    c248:	2b00      	cmp	r3, #0
    c24a:	d10d      	bne.n	c268 <nm_spi_init+0x3c>
		reg &= ~0x70;
    c24c:	337c      	adds	r3, #124	; 0x7c
    c24e:	9900      	ldr	r1, [sp, #0]
    c250:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    c252:	3b2c      	subs	r3, #44	; 0x2c
    c254:	4319      	orrs	r1, r3
    c256:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    c258:	4829      	ldr	r0, [pc, #164]	; (c300 <nm_spi_init+0xd4>)
    c25a:	4b2b      	ldr	r3, [pc, #172]	; (c308 <nm_spi_init+0xdc>)
    c25c:	4798      	blx	r3
    c25e:	1e04      	subs	r4, r0, #0
    c260:	d036      	beq.n	c2d0 <nm_spi_init+0xa4>
		gu8Crc_off = 1;
    c262:	2201      	movs	r2, #1
    c264:	4b25      	ldr	r3, [pc, #148]	; (c2fc <nm_spi_init+0xd0>)
    c266:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    c268:	a901      	add	r1, sp, #4
    c26a:	2080      	movs	r0, #128	; 0x80
    c26c:	0140      	lsls	r0, r0, #5
    c26e:	4b25      	ldr	r3, [pc, #148]	; (c304 <nm_spi_init+0xd8>)
    c270:	4798      	blx	r3
    c272:	2800      	cmp	r0, #0
    c274:	d036      	beq.n	c2e4 <nm_spi_init+0xb8>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    c276:	4c22      	ldr	r4, [pc, #136]	; (c300 <nm_spi_init+0xd4>)
    c278:	0020      	movs	r0, r4
    c27a:	4b24      	ldr	r3, [pc, #144]	; (c30c <nm_spi_init+0xe0>)
    c27c:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    c27e:	2370      	movs	r3, #112	; 0x70
    c280:	0001      	movs	r1, r0
    c282:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    c284:	2050      	movs	r0, #80	; 0x50
    c286:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    c288:	0020      	movs	r0, r4
    c28a:	4b21      	ldr	r3, [pc, #132]	; (c310 <nm_spi_init+0xe4>)
    c28c:	4798      	blx	r3
	return M2M_SUCCESS;
    c28e:	2400      	movs	r4, #0
}
    c290:	0020      	movs	r0, r4
    c292:	b003      	add	sp, #12
    c294:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
    c296:	2201      	movs	r2, #1
    c298:	4b18      	ldr	r3, [pc, #96]	; (c2fc <nm_spi_init+0xd0>)
    c29a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    c29c:	2298      	movs	r2, #152	; 0x98
    c29e:	00d2      	lsls	r2, r2, #3
    c2a0:	491c      	ldr	r1, [pc, #112]	; (c314 <nm_spi_init+0xe8>)
    c2a2:	481d      	ldr	r0, [pc, #116]	; (c318 <nm_spi_init+0xec>)
    c2a4:	4c1d      	ldr	r4, [pc, #116]	; (c31c <nm_spi_init+0xf0>)
    c2a6:	47a0      	blx	r4
    c2a8:	481d      	ldr	r0, [pc, #116]	; (c320 <nm_spi_init+0xf4>)
    c2aa:	47a0      	blx	r4
    c2ac:	481d      	ldr	r0, [pc, #116]	; (c324 <nm_spi_init+0xf8>)
    c2ae:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    c2b0:	4669      	mov	r1, sp
    c2b2:	4813      	ldr	r0, [pc, #76]	; (c300 <nm_spi_init+0xd4>)
    c2b4:	4b13      	ldr	r3, [pc, #76]	; (c304 <nm_spi_init+0xd8>)
    c2b6:	4798      	blx	r3
    c2b8:	1e04      	subs	r4, r0, #0
    c2ba:	d1c3      	bne.n	c244 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    c2bc:	4a1a      	ldr	r2, [pc, #104]	; (c328 <nm_spi_init+0xfc>)
    c2be:	4915      	ldr	r1, [pc, #84]	; (c314 <nm_spi_init+0xe8>)
    c2c0:	4815      	ldr	r0, [pc, #84]	; (c318 <nm_spi_init+0xec>)
    c2c2:	4d16      	ldr	r5, [pc, #88]	; (c31c <nm_spi_init+0xf0>)
    c2c4:	47a8      	blx	r5
    c2c6:	4819      	ldr	r0, [pc, #100]	; (c32c <nm_spi_init+0x100>)
    c2c8:	47a8      	blx	r5
    c2ca:	4816      	ldr	r0, [pc, #88]	; (c324 <nm_spi_init+0xf8>)
    c2cc:	47a8      	blx	r5
			return 0;
    c2ce:	e7df      	b.n	c290 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    c2d0:	4a17      	ldr	r2, [pc, #92]	; (c330 <nm_spi_init+0x104>)
    c2d2:	4910      	ldr	r1, [pc, #64]	; (c314 <nm_spi_init+0xe8>)
    c2d4:	4810      	ldr	r0, [pc, #64]	; (c318 <nm_spi_init+0xec>)
    c2d6:	4d11      	ldr	r5, [pc, #68]	; (c31c <nm_spi_init+0xf0>)
    c2d8:	47a8      	blx	r5
    c2da:	4816      	ldr	r0, [pc, #88]	; (c334 <nm_spi_init+0x108>)
    c2dc:	47a8      	blx	r5
    c2de:	4811      	ldr	r0, [pc, #68]	; (c324 <nm_spi_init+0xf8>)
    c2e0:	47a8      	blx	r5
			return 0;
    c2e2:	e7d5      	b.n	c290 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    c2e4:	4a14      	ldr	r2, [pc, #80]	; (c338 <nm_spi_init+0x10c>)
    c2e6:	490b      	ldr	r1, [pc, #44]	; (c314 <nm_spi_init+0xe8>)
    c2e8:	480b      	ldr	r0, [pc, #44]	; (c318 <nm_spi_init+0xec>)
    c2ea:	4c0c      	ldr	r4, [pc, #48]	; (c31c <nm_spi_init+0xf0>)
    c2ec:	47a0      	blx	r4
    c2ee:	4813      	ldr	r0, [pc, #76]	; (c33c <nm_spi_init+0x110>)
    c2f0:	47a0      	blx	r4
    c2f2:	480c      	ldr	r0, [pc, #48]	; (c324 <nm_spi_init+0xf8>)
    c2f4:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
    c2f6:	2406      	movs	r4, #6
    c2f8:	4264      	negs	r4, r4
    c2fa:	e7c9      	b.n	c290 <nm_spi_init+0x64>
    c2fc:	20004130 	.word	0x20004130
    c300:	0000e824 	.word	0x0000e824
    c304:	0000c0a9 	.word	0x0000c0a9
    c308:	0000bfc1 	.word	0x0000bfc1
    c30c:	0000c1e9 	.word	0x0000c1e9
    c310:	0000c215 	.word	0x0000c215
    c314:	0001ad14 	.word	0x0001ad14
    c318:	0001a574 	.word	0x0001a574
    c31c:	00008bdd 	.word	0x00008bdd
    c320:	0001ae20 	.word	0x0001ae20
    c324:	0001a59c 	.word	0x0001a59c
    c328:	000004c3 	.word	0x000004c3
    c32c:	0001ae70 	.word	0x0001ae70
    c330:	000004cd 	.word	0x000004cd
    c334:	0001aea0 	.word	0x0001aea0
    c338:	000004d7 	.word	0x000004d7
    c33c:	0001aed4 	.word	0x0001aed4

0000c340 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    c340:	b5f0      	push	{r4, r5, r6, r7, lr}
    c342:	46de      	mov	lr, fp
    c344:	464f      	mov	r7, r9
    c346:	4646      	mov	r6, r8
    c348:	b5c0      	push	{r6, r7, lr}
    c34a:	b086      	sub	sp, #24
    c34c:	9003      	str	r0, [sp, #12]
    c34e:	9105      	str	r1, [sp, #20]
    c350:	9204      	str	r2, [sp, #16]
    c352:	250a      	movs	r5, #10
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
    c354:	4b21      	ldr	r3, [pc, #132]	; (c3dc <nm_spi_read_block+0x9c>)
    c356:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
    c358:	002f      	movs	r7, r5
    c35a:	e029      	b.n	c3b0 <nm_spi_read_block+0x70>
    c35c:	4a20      	ldr	r2, [pc, #128]	; (c3e0 <nm_spi_read_block+0xa0>)
    c35e:	4921      	ldr	r1, [pc, #132]	; (c3e4 <nm_spi_read_block+0xa4>)
    c360:	4821      	ldr	r0, [pc, #132]	; (c3e8 <nm_spi_read_block+0xa8>)
    c362:	4c22      	ldr	r4, [pc, #136]	; (c3ec <nm_spi_read_block+0xac>)
    c364:	47a0      	blx	r4
    c366:	9503      	str	r5, [sp, #12]
    c368:	0029      	movs	r1, r5
    c36a:	4821      	ldr	r0, [pc, #132]	; (c3f0 <nm_spi_read_block+0xb0>)
    c36c:	47a0      	blx	r4
    c36e:	4d21      	ldr	r5, [pc, #132]	; (c3f4 <nm_spi_read_block+0xb4>)
    c370:	0028      	movs	r0, r5
    c372:	47a0      	blx	r4
		nm_bsp_sleep(1);
    c374:	2001      	movs	r0, #1
    c376:	4920      	ldr	r1, [pc, #128]	; (c3f8 <nm_spi_read_block+0xb8>)
    c378:	4689      	mov	r9, r1
    c37a:	4788      	blx	r1
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c37c:	2300      	movs	r3, #0
    c37e:	9300      	str	r3, [sp, #0]
    c380:	2200      	movs	r2, #0
    c382:	2100      	movs	r1, #0
    c384:	20cf      	movs	r0, #207	; 0xcf
    c386:	4e1d      	ldr	r6, [pc, #116]	; (c3fc <nm_spi_read_block+0xbc>)
    c388:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    c38a:	20cf      	movs	r0, #207	; 0xcf
    c38c:	4b1c      	ldr	r3, [pc, #112]	; (c400 <nm_spi_read_block+0xc0>)
    c38e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    c390:	4a1c      	ldr	r2, [pc, #112]	; (c404 <nm_spi_read_block+0xc4>)
    c392:	4914      	ldr	r1, [pc, #80]	; (c3e4 <nm_spi_read_block+0xa4>)
    c394:	4814      	ldr	r0, [pc, #80]	; (c3e8 <nm_spi_read_block+0xa8>)
    c396:	47a0      	blx	r4
    c398:	9b04      	ldr	r3, [sp, #16]
    c39a:	9a03      	ldr	r2, [sp, #12]
    c39c:	0039      	movs	r1, r7
    c39e:	481a      	ldr	r0, [pc, #104]	; (c408 <nm_spi_read_block+0xc8>)
    c3a0:	47a0      	blx	r4
    c3a2:	0028      	movs	r0, r5
    c3a4:	47a0      	blx	r4
		nm_bsp_sleep(1);
    c3a6:	2001      	movs	r0, #1
    c3a8:	47c8      	blx	r9
    c3aa:	3f01      	subs	r7, #1
		if(retry) goto _RETRY_;
    c3ac:	2f00      	cmp	r7, #0
    c3ae:	d011      	beq.n	c3d4 <nm_spi_read_block+0x94>
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
    c3b0:	2300      	movs	r3, #0
    c3b2:	9300      	str	r3, [sp, #0]
    c3b4:	9b04      	ldr	r3, [sp, #16]
    c3b6:	9a05      	ldr	r2, [sp, #20]
    c3b8:	9d03      	ldr	r5, [sp, #12]
    c3ba:	0029      	movs	r1, r5
    c3bc:	20c8      	movs	r0, #200	; 0xc8
    c3be:	47c0      	blx	r8
	if (result != N_OK) {
    c3c0:	b240      	sxtb	r0, r0
    c3c2:	2801      	cmp	r0, #1
    c3c4:	d1ca      	bne.n	c35c <nm_spi_read_block+0x1c>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c3c6:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    c3c8:	b006      	add	sp, #24
    c3ca:	bc1c      	pop	{r2, r3, r4}
    c3cc:	4690      	mov	r8, r2
    c3ce:	4699      	mov	r9, r3
    c3d0:	46a3      	mov	fp, r4
    c3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    c3d4:	2006      	movs	r0, #6
    c3d6:	4240      	negs	r0, r0
    c3d8:	e7f6      	b.n	c3c8 <nm_spi_read_block+0x88>
    c3da:	46c0      	nop			; (mov r8, r8)
    c3dc:	0000ba39 	.word	0x0000ba39
    c3e0:	00000472 	.word	0x00000472
    c3e4:	0001ad08 	.word	0x0001ad08
    c3e8:	0001a574 	.word	0x0001a574
    c3ec:	00008bdd 	.word	0x00008bdd
    c3f0:	0001aefc 	.word	0x0001aefc
    c3f4:	0001a59c 	.word	0x0001a59c
    c3f8:	00009d89 	.word	0x00009d89
    c3fc:	0000b7d9 	.word	0x0000b7d9
    c400:	0000b971 	.word	0x0000b971
    c404:	0000047d 	.word	0x0000047d
    c408:	0001af2c 	.word	0x0001af2c

0000c40c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    c40c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c40e:	46de      	mov	lr, fp
    c410:	4647      	mov	r7, r8
    c412:	b580      	push	{r7, lr}
    c414:	b089      	sub	sp, #36	; 0x24
    c416:	9004      	str	r0, [sp, #16]
    c418:	468b      	mov	fp, r1
    c41a:	9203      	str	r2, [sp, #12]
    c41c:	230a      	movs	r3, #10
    c41e:	4698      	mov	r8, r3
    c420:	2780      	movs	r7, #128	; 0x80
    c422:	01bf      	lsls	r7, r7, #6
    c424:	466b      	mov	r3, sp
    c426:	82df      	strh	r7, [r3, #22]
    c428:	e068      	b.n	c4fc <nm_spi_write_block+0xf0>
	uint8 cmd, order, crc[2] = {0};
    c42a:	2200      	movs	r2, #0
    c42c:	ab07      	add	r3, sp, #28
    c42e:	801a      	strh	r2, [r3, #0]
    c430:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    c432:	2500      	movs	r5, #0
    c434:	e021      	b.n	c47a <nm_spi_write_block+0x6e>
				order = 0x2;
    c436:	2300      	movs	r3, #0
    c438:	42a7      	cmp	r7, r4
    c43a:	415b      	adcs	r3, r3
    c43c:	3302      	adds	r3, #2
		cmd |= order;
    c43e:	200b      	movs	r0, #11
    c440:	aa04      	add	r2, sp, #16
    c442:	4694      	mov	ip, r2
    c444:	4460      	add	r0, ip
    c446:	2210      	movs	r2, #16
    c448:	4252      	negs	r2, r2
    c44a:	4313      	orrs	r3, r2
    c44c:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    c44e:	2101      	movs	r1, #1
    c450:	4b65      	ldr	r3, [pc, #404]	; (c5e8 <nm_spi_write_block+0x1dc>)
    c452:	4798      	blx	r3
    c454:	2800      	cmp	r0, #0
    c456:	d11d      	bne.n	c494 <nm_spi_write_block+0x88>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    c458:	465b      	mov	r3, fp
    c45a:	1958      	adds	r0, r3, r5
    c45c:	0031      	movs	r1, r6
    c45e:	4b62      	ldr	r3, [pc, #392]	; (c5e8 <nm_spi_write_block+0x1dc>)
    c460:	4798      	blx	r3
    c462:	2800      	cmp	r0, #0
    c464:	d161      	bne.n	c52a <nm_spi_write_block+0x11e>
		if (!gu8Crc_off) {
    c466:	4b61      	ldr	r3, [pc, #388]	; (c5ec <nm_spi_write_block+0x1e0>)
    c468:	781b      	ldrb	r3, [r3, #0]
    c46a:	2b00      	cmp	r3, #0
    c46c:	d067      	beq.n	c53e <nm_spi_write_block+0x132>
		ix += nbytes;
    c46e:	1975      	adds	r5, r6, r5
    c470:	b22d      	sxth	r5, r5
		sz -= nbytes;
    c472:	1ba4      	subs	r4, r4, r6
    c474:	b2a4      	uxth	r4, r4
	} while (sz);
    c476:	2c00      	cmp	r4, #0
    c478:	d07d      	beq.n	c576 <nm_spi_write_block+0x16a>
    c47a:	1c26      	adds	r6, r4, #0
    c47c:	42bc      	cmp	r4, r7
    c47e:	d901      	bls.n	c484 <nm_spi_write_block+0x78>
    c480:	466b      	mov	r3, sp
    c482:	8ade      	ldrh	r6, [r3, #22]
    c484:	b2b6      	uxth	r6, r6
		if (ix == 0)  {
    c486:	2d00      	cmp	r5, #0
    c488:	d1d5      	bne.n	c436 <nm_spi_write_block+0x2a>
				order = 0x3;
    c48a:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    c48c:	42bc      	cmp	r4, r7
    c48e:	d9d6      	bls.n	c43e <nm_spi_write_block+0x32>
				order = 0x1;
    c490:	3b02      	subs	r3, #2
    c492:	e7d4      	b.n	c43e <nm_spi_write_block+0x32>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    c494:	4a56      	ldr	r2, [pc, #344]	; (c5f0 <nm_spi_write_block+0x1e4>)
    c496:	4957      	ldr	r1, [pc, #348]	; (c5f4 <nm_spi_write_block+0x1e8>)
    c498:	4857      	ldr	r0, [pc, #348]	; (c5f8 <nm_spi_write_block+0x1ec>)
    c49a:	4c58      	ldr	r4, [pc, #352]	; (c5fc <nm_spi_write_block+0x1f0>)
    c49c:	47a0      	blx	r4
    c49e:	4858      	ldr	r0, [pc, #352]	; (c600 <nm_spi_write_block+0x1f4>)
    c4a0:	47a0      	blx	r4
    c4a2:	4858      	ldr	r0, [pc, #352]	; (c604 <nm_spi_write_block+0x1f8>)
    c4a4:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    c4a6:	4a58      	ldr	r2, [pc, #352]	; (c608 <nm_spi_write_block+0x1fc>)
    c4a8:	4958      	ldr	r1, [pc, #352]	; (c60c <nm_spi_write_block+0x200>)
    c4aa:	4853      	ldr	r0, [pc, #332]	; (c5f8 <nm_spi_write_block+0x1ec>)
    c4ac:	4c53      	ldr	r4, [pc, #332]	; (c5fc <nm_spi_write_block+0x1f0>)
    c4ae:	47a0      	blx	r4
    c4b0:	4857      	ldr	r0, [pc, #348]	; (c610 <nm_spi_write_block+0x204>)
    c4b2:	47a0      	blx	r4
    c4b4:	4853      	ldr	r0, [pc, #332]	; (c604 <nm_spi_write_block+0x1f8>)
    c4b6:	47a0      	blx	r4
		nm_bsp_sleep(1);
    c4b8:	2001      	movs	r0, #1
    c4ba:	4d56      	ldr	r5, [pc, #344]	; (c614 <nm_spi_write_block+0x208>)
    c4bc:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c4be:	2300      	movs	r3, #0
    c4c0:	9300      	str	r3, [sp, #0]
    c4c2:	2200      	movs	r2, #0
    c4c4:	2100      	movs	r1, #0
    c4c6:	20cf      	movs	r0, #207	; 0xcf
    c4c8:	4c53      	ldr	r4, [pc, #332]	; (c618 <nm_spi_write_block+0x20c>)
    c4ca:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    c4cc:	20cf      	movs	r0, #207	; 0xcf
    c4ce:	4b53      	ldr	r3, [pc, #332]	; (c61c <nm_spi_write_block+0x210>)
    c4d0:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    c4d2:	4a53      	ldr	r2, [pc, #332]	; (c620 <nm_spi_write_block+0x214>)
    c4d4:	494d      	ldr	r1, [pc, #308]	; (c60c <nm_spi_write_block+0x200>)
    c4d6:	4848      	ldr	r0, [pc, #288]	; (c5f8 <nm_spi_write_block+0x1ec>)
    c4d8:	4c48      	ldr	r4, [pc, #288]	; (c5fc <nm_spi_write_block+0x1f0>)
    c4da:	47a0      	blx	r4
    c4dc:	9b03      	ldr	r3, [sp, #12]
    c4de:	9a04      	ldr	r2, [sp, #16]
    c4e0:	4641      	mov	r1, r8
    c4e2:	4850      	ldr	r0, [pc, #320]	; (c624 <nm_spi_write_block+0x218>)
    c4e4:	47a0      	blx	r4
    c4e6:	4847      	ldr	r0, [pc, #284]	; (c604 <nm_spi_write_block+0x1f8>)
    c4e8:	47a0      	blx	r4
		nm_bsp_sleep(1);
    c4ea:	2001      	movs	r0, #1
    c4ec:	47a8      	blx	r5
    c4ee:	2301      	movs	r3, #1
    c4f0:	425b      	negs	r3, r3
    c4f2:	469c      	mov	ip, r3
    c4f4:	44e0      	add	r8, ip
		if(retry) goto _RETRY_;
    c4f6:	4643      	mov	r3, r8
    c4f8:	2b00      	cmp	r3, #0
    c4fa:	d06e      	beq.n	c5da <nm_spi_write_block+0x1ce>
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
    c4fc:	2300      	movs	r3, #0
    c4fe:	9300      	str	r3, [sp, #0]
    c500:	9b03      	ldr	r3, [sp, #12]
    c502:	2200      	movs	r2, #0
    c504:	9d04      	ldr	r5, [sp, #16]
    c506:	0029      	movs	r1, r5
    c508:	20c7      	movs	r0, #199	; 0xc7
    c50a:	4c47      	ldr	r4, [pc, #284]	; (c628 <nm_spi_write_block+0x21c>)
    c50c:	47a0      	blx	r4
	if (result != N_OK) {
    c50e:	b240      	sxtb	r0, r0
    c510:	2801      	cmp	r0, #1
    c512:	d08a      	beq.n	c42a <nm_spi_write_block+0x1e>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
    c514:	4a45      	ldr	r2, [pc, #276]	; (c62c <nm_spi_write_block+0x220>)
    c516:	493d      	ldr	r1, [pc, #244]	; (c60c <nm_spi_write_block+0x200>)
    c518:	4837      	ldr	r0, [pc, #220]	; (c5f8 <nm_spi_write_block+0x1ec>)
    c51a:	4c38      	ldr	r4, [pc, #224]	; (c5fc <nm_spi_write_block+0x1f0>)
    c51c:	47a0      	blx	r4
    c51e:	0029      	movs	r1, r5
    c520:	4843      	ldr	r0, [pc, #268]	; (c630 <nm_spi_write_block+0x224>)
    c522:	47a0      	blx	r4
    c524:	4837      	ldr	r0, [pc, #220]	; (c604 <nm_spi_write_block+0x1f8>)
    c526:	47a0      	blx	r4
    c528:	e7c6      	b.n	c4b8 <nm_spi_write_block+0xac>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    c52a:	4a42      	ldr	r2, [pc, #264]	; (c634 <nm_spi_write_block+0x228>)
    c52c:	4931      	ldr	r1, [pc, #196]	; (c5f4 <nm_spi_write_block+0x1e8>)
    c52e:	4832      	ldr	r0, [pc, #200]	; (c5f8 <nm_spi_write_block+0x1ec>)
    c530:	4c32      	ldr	r4, [pc, #200]	; (c5fc <nm_spi_write_block+0x1f0>)
    c532:	47a0      	blx	r4
    c534:	4840      	ldr	r0, [pc, #256]	; (c638 <nm_spi_write_block+0x22c>)
    c536:	47a0      	blx	r4
    c538:	4832      	ldr	r0, [pc, #200]	; (c604 <nm_spi_write_block+0x1f8>)
    c53a:	47a0      	blx	r4
    c53c:	e7b3      	b.n	c4a6 <nm_spi_write_block+0x9a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    c53e:	2102      	movs	r1, #2
    c540:	a807      	add	r0, sp, #28
    c542:	4b29      	ldr	r3, [pc, #164]	; (c5e8 <nm_spi_write_block+0x1dc>)
    c544:	4798      	blx	r3
    c546:	2800      	cmp	r0, #0
    c548:	d091      	beq.n	c46e <nm_spi_write_block+0x62>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    c54a:	22d7      	movs	r2, #215	; 0xd7
    c54c:	0092      	lsls	r2, r2, #2
    c54e:	4929      	ldr	r1, [pc, #164]	; (c5f4 <nm_spi_write_block+0x1e8>)
    c550:	4829      	ldr	r0, [pc, #164]	; (c5f8 <nm_spi_write_block+0x1ec>)
    c552:	4c2a      	ldr	r4, [pc, #168]	; (c5fc <nm_spi_write_block+0x1f0>)
    c554:	47a0      	blx	r4
    c556:	4839      	ldr	r0, [pc, #228]	; (c63c <nm_spi_write_block+0x230>)
    c558:	47a0      	blx	r4
    c55a:	482a      	ldr	r0, [pc, #168]	; (c604 <nm_spi_write_block+0x1f8>)
    c55c:	47a0      	blx	r4
    c55e:	e7a2      	b.n	c4a6 <nm_spi_write_block+0x9a>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    c560:	229a      	movs	r2, #154	; 0x9a
    c562:	0052      	lsls	r2, r2, #1
    c564:	4936      	ldr	r1, [pc, #216]	; (c640 <nm_spi_write_block+0x234>)
    c566:	4824      	ldr	r0, [pc, #144]	; (c5f8 <nm_spi_write_block+0x1ec>)
    c568:	4c24      	ldr	r4, [pc, #144]	; (c5fc <nm_spi_write_block+0x1f0>)
    c56a:	47a0      	blx	r4
    c56c:	4835      	ldr	r0, [pc, #212]	; (c644 <nm_spi_write_block+0x238>)
    c56e:	47a0      	blx	r4
    c570:	4824      	ldr	r0, [pc, #144]	; (c604 <nm_spi_write_block+0x1f8>)
    c572:	47a0      	blx	r4
    c574:	e025      	b.n	c5c2 <nm_spi_write_block+0x1b6>
    if (!gu8Crc_off)
    c576:	4b1d      	ldr	r3, [pc, #116]	; (c5ec <nm_spi_write_block+0x1e0>)
    c578:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    c57a:	1e63      	subs	r3, r4, #1
    c57c:	419c      	sbcs	r4, r3
    c57e:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    c580:	b2a1      	uxth	r1, r4
    c582:	a807      	add	r0, sp, #28
    c584:	4b30      	ldr	r3, [pc, #192]	; (c648 <nm_spi_write_block+0x23c>)
    c586:	4798      	blx	r3
    c588:	2800      	cmp	r0, #0
    c58a:	d1e9      	bne.n	c560 <nm_spi_write_block+0x154>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    c58c:	ab08      	add	r3, sp, #32
    c58e:	191b      	adds	r3, r3, r4
    c590:	3b05      	subs	r3, #5
    c592:	781b      	ldrb	r3, [r3, #0]
    c594:	2b00      	cmp	r3, #0
    c596:	d106      	bne.n	c5a6 <nm_spi_write_block+0x19a>
    c598:	ab08      	add	r3, sp, #32
    c59a:	469c      	mov	ip, r3
    c59c:	4464      	add	r4, ip
    c59e:	3c06      	subs	r4, #6
    c5a0:	7823      	ldrb	r3, [r4, #0]
    c5a2:	2bc3      	cmp	r3, #195	; 0xc3
    c5a4:	d017      	beq.n	c5d6 <nm_spi_write_block+0x1ca>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    c5a6:	223c      	movs	r2, #60	; 0x3c
    c5a8:	32ff      	adds	r2, #255	; 0xff
    c5aa:	4925      	ldr	r1, [pc, #148]	; (c640 <nm_spi_write_block+0x234>)
    c5ac:	4812      	ldr	r0, [pc, #72]	; (c5f8 <nm_spi_write_block+0x1ec>)
    c5ae:	4c13      	ldr	r4, [pc, #76]	; (c5fc <nm_spi_write_block+0x1f0>)
    c5b0:	47a0      	blx	r4
    c5b2:	a907      	add	r1, sp, #28
    c5b4:	788b      	ldrb	r3, [r1, #2]
    c5b6:	784a      	ldrb	r2, [r1, #1]
    c5b8:	7809      	ldrb	r1, [r1, #0]
    c5ba:	4824      	ldr	r0, [pc, #144]	; (c64c <nm_spi_write_block+0x240>)
    c5bc:	47a0      	blx	r4
    c5be:	4811      	ldr	r0, [pc, #68]	; (c604 <nm_spi_write_block+0x1f8>)
    c5c0:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    c5c2:	4a23      	ldr	r2, [pc, #140]	; (c650 <nm_spi_write_block+0x244>)
    c5c4:	4911      	ldr	r1, [pc, #68]	; (c60c <nm_spi_write_block+0x200>)
    c5c6:	480c      	ldr	r0, [pc, #48]	; (c5f8 <nm_spi_write_block+0x1ec>)
    c5c8:	4c0c      	ldr	r4, [pc, #48]	; (c5fc <nm_spi_write_block+0x1f0>)
    c5ca:	47a0      	blx	r4
    c5cc:	4810      	ldr	r0, [pc, #64]	; (c610 <nm_spi_write_block+0x204>)
    c5ce:	47a0      	blx	r4
    c5d0:	480c      	ldr	r0, [pc, #48]	; (c604 <nm_spi_write_block+0x1f8>)
    c5d2:	47a0      	blx	r4
    c5d4:	e770      	b.n	c4b8 <nm_spi_write_block+0xac>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c5d6:	2000      	movs	r0, #0
    c5d8:	e001      	b.n	c5de <nm_spi_write_block+0x1d2>
	else s8Ret = M2M_ERR_BUS_FAIL;
    c5da:	2006      	movs	r0, #6
    c5dc:	4240      	negs	r0, r0

	return s8Ret;
}
    c5de:	b009      	add	sp, #36	; 0x24
    c5e0:	bc0c      	pop	{r2, r3}
    c5e2:	4690      	mov	r8, r2
    c5e4:	469b      	mov	fp, r3
    c5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c5e8:	0000b7b9 	.word	0x0000b7b9
    c5ec:	20004130 	.word	0x20004130
    c5f0:	00000349 	.word	0x00000349
    c5f4:	0001acc8 	.word	0x0001acc8
    c5f8:	0001a574 	.word	0x0001a574
    c5fc:	00008bdd 	.word	0x00008bdd
    c600:	0001af78 	.word	0x0001af78
    c604:	0001a59c 	.word	0x0001a59c
    c608:	000003d9 	.word	0x000003d9
    c60c:	0001ace8 	.word	0x0001ace8
    c610:	0001b06c 	.word	0x0001b06c
    c614:	00009d89 	.word	0x00009d89
    c618:	0000b7d9 	.word	0x0000b7d9
    c61c:	0000b971 	.word	0x0000b971
    c620:	000003eb 	.word	0x000003eb
    c624:	0001af2c 	.word	0x0001af2c
    c628:	0000ba39 	.word	0x0000ba39
    c62c:	000003cf 	.word	0x000003cf
    c630:	0001af48 	.word	0x0001af48
    c634:	00000352 	.word	0x00000352
    c638:	0001afb0 	.word	0x0001afb0
    c63c:	0001afe4 	.word	0x0001afe4
    c640:	0001ac98 	.word	0x0001ac98
    c644:	0001b01c 	.word	0x0001b01c
    c648:	0000b951 	.word	0x0000b951
    c64c:	0001b03c 	.word	0x0001b03c
    c650:	000003e1 	.word	0x000003e1

0000c654 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    c654:	b5f0      	push	{r4, r5, r6, r7, lr}
    c656:	46de      	mov	lr, fp
    c658:	4657      	mov	r7, sl
    c65a:	464e      	mov	r6, r9
    c65c:	4645      	mov	r5, r8
    c65e:	b5e0      	push	{r5, r6, r7, lr}
    c660:	b085      	sub	sp, #20
    c662:	9001      	str	r0, [sp, #4]
    c664:	000e      	movs	r6, r1
    c666:	9202      	str	r2, [sp, #8]
    c668:	001d      	movs	r5, r3
    c66a:	ab0e      	add	r3, sp, #56	; 0x38
    c66c:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    c66e:	2c00      	cmp	r4, #0
    c670:	d063      	beq.n	c73a <Socket_ReadSocketData+0xe6>
    c672:	0103      	lsls	r3, r0, #4
    c674:	4934      	ldr	r1, [pc, #208]	; (c748 <Socket_ReadSocketData+0xf4>)
    c676:	585b      	ldr	r3, [r3, r1]
    c678:	2b00      	cmp	r3, #0
    c67a:	d05e      	beq.n	c73a <Socket_ReadSocketData+0xe6>
    c67c:	0101      	lsls	r1, r0, #4
    c67e:	4b32      	ldr	r3, [pc, #200]	; (c748 <Socket_ReadSocketData+0xf4>)
    c680:	185b      	adds	r3, r3, r1
    c682:	889b      	ldrh	r3, [r3, #4]
    c684:	b29b      	uxth	r3, r3
    c686:	2b00      	cmp	r3, #0
    c688:	d057      	beq.n	c73a <Socket_ReadSocketData+0xe6>
    c68a:	4b2f      	ldr	r3, [pc, #188]	; (c748 <Socket_ReadSocketData+0xf4>)
    c68c:	185b      	adds	r3, r3, r1
    c68e:	7a9b      	ldrb	r3, [r3, #10]
    c690:	2b01      	cmp	r3, #1
    c692:	d152      	bne.n	c73a <Socket_ReadSocketData+0xe6>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    c694:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    c696:	4b2c      	ldr	r3, [pc, #176]	; (c748 <Socket_ReadSocketData+0xf4>)
    c698:	469b      	mov	fp, r3
    c69a:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    c69c:	465b      	mov	r3, fp
    c69e:	220a      	movs	r2, #10
    c6a0:	4690      	mov	r8, r2
    c6a2:	44d8      	add	r8, fp
    c6a4:	468a      	mov	sl, r1
    c6a6:	9500      	str	r5, [sp, #0]
    c6a8:	9303      	str	r3, [sp, #12]
    c6aa:	e014      	b.n	c6d6 <Socket_ReadSocketData+0x82>
    c6ac:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    c6ae:	2301      	movs	r3, #1
    c6b0:	e01b      	b.n	c6ea <Socket_ReadSocketData+0x96>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    c6b2:	3301      	adds	r3, #1
    c6b4:	2200      	movs	r2, #0
    c6b6:	2100      	movs	r1, #0
    c6b8:	2000      	movs	r0, #0
    c6ba:	4c24      	ldr	r4, [pc, #144]	; (c74c <Socket_ReadSocketData+0xf8>)
    c6bc:	47a0      	blx	r4
    c6be:	e03c      	b.n	c73a <Socket_ReadSocketData+0xe6>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    c6c0:	4823      	ldr	r0, [pc, #140]	; (c750 <Socket_ReadSocketData+0xfc>)
    c6c2:	4d24      	ldr	r5, [pc, #144]	; (c754 <Socket_ReadSocketData+0x100>)
    c6c4:	47a8      	blx	r5
    c6c6:	0021      	movs	r1, r4
    c6c8:	4823      	ldr	r0, [pc, #140]	; (c758 <Socket_ReadSocketData+0x104>)
    c6ca:	47a8      	blx	r5
    c6cc:	4823      	ldr	r0, [pc, #140]	; (c75c <Socket_ReadSocketData+0x108>)
    c6ce:	47a8      	blx	r5
				break;
    c6d0:	e033      	b.n	c73a <Socket_ReadSocketData+0xe6>
			}
		}while(u16ReadCount != 0);
    c6d2:	2c00      	cmp	r4, #0
    c6d4:	d031      	beq.n	c73a <Socket_ReadSocketData+0xe6>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    c6d6:	465b      	mov	r3, fp
    c6d8:	889b      	ldrh	r3, [r3, #4]
    c6da:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    c6dc:	b21b      	sxth	r3, r3
    c6de:	2b00      	cmp	r3, #0
    c6e0:	dde4      	ble.n	c6ac <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    c6e2:	9b03      	ldr	r3, [sp, #12]
    c6e4:	889d      	ldrh	r5, [r3, #4]
    c6e6:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    c6e8:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    c6ea:	4a17      	ldr	r2, [pc, #92]	; (c748 <Socket_ReadSocketData+0xf4>)
    c6ec:	4651      	mov	r1, sl
    c6ee:	5889      	ldr	r1, [r1, r2]
    c6f0:	002a      	movs	r2, r5
    c6f2:	9800      	ldr	r0, [sp, #0]
    c6f4:	4f15      	ldr	r7, [pc, #84]	; (c74c <Socket_ReadSocketData+0xf8>)
    c6f6:	47b8      	blx	r7
    c6f8:	2800      	cmp	r0, #0
    c6fa:	d1e1      	bne.n	c6c0 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    c6fc:	4b12      	ldr	r3, [pc, #72]	; (c748 <Socket_ReadSocketData+0xf4>)
    c6fe:	4652      	mov	r2, sl
    c700:	58d3      	ldr	r3, [r2, r3]
    c702:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    c704:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    c706:	88f3      	ldrh	r3, [r6, #6]
    c708:	1b5b      	subs	r3, r3, r5
    c70a:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    c70c:	4b14      	ldr	r3, [pc, #80]	; (c760 <Socket_ReadSocketData+0x10c>)
    c70e:	681b      	ldr	r3, [r3, #0]
    c710:	2b00      	cmp	r3, #0
    c712:	d005      	beq.n	c720 <Socket_ReadSocketData+0xcc>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    c714:	4b12      	ldr	r3, [pc, #72]	; (c760 <Socket_ReadSocketData+0x10c>)
    c716:	681b      	ldr	r3, [r3, #0]
    c718:	0032      	movs	r2, r6
    c71a:	9902      	ldr	r1, [sp, #8]
    c71c:	9801      	ldr	r0, [sp, #4]
    c71e:	4798      	blx	r3
				u16ReadCount -= u16Read;
    c720:	1b64      	subs	r4, r4, r5
    c722:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    c724:	9b00      	ldr	r3, [sp, #0]
    c726:	469c      	mov	ip, r3
    c728:	44ac      	add	ip, r5
    c72a:	4663      	mov	r3, ip
    c72c:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    c72e:	4643      	mov	r3, r8
    c730:	781b      	ldrb	r3, [r3, #0]
    c732:	2b00      	cmp	r3, #0
    c734:	d1cd      	bne.n	c6d2 <Socket_ReadSocketData+0x7e>
    c736:	2c00      	cmp	r4, #0
    c738:	d1bb      	bne.n	c6b2 <Socket_ReadSocketData+0x5e>
	}
}
    c73a:	b005      	add	sp, #20
    c73c:	bc3c      	pop	{r2, r3, r4, r5}
    c73e:	4690      	mov	r8, r2
    c740:	4699      	mov	r9, r3
    c742:	46a2      	mov	sl, r4
    c744:	46ab      	mov	fp, r5
    c746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c748:	20005c20 	.word	0x20005c20
    c74c:	0000a7c5 	.word	0x0000a7c5
    c750:	0001a8b0 	.word	0x0001a8b0
    c754:	00008bdd 	.word	0x00008bdd
    c758:	0001b350 	.word	0x0001b350
    c75c:	0001a59c 	.word	0x0001a59c
    c760:	20005cd0 	.word	0x20005cd0

0000c764 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    c764:	b5f0      	push	{r4, r5, r6, r7, lr}
    c766:	46d6      	mov	lr, sl
    c768:	464f      	mov	r7, r9
    c76a:	4646      	mov	r6, r8
    c76c:	b5c0      	push	{r6, r7, lr}
    c76e:	b09a      	sub	sp, #104	; 0x68
    c770:	000d      	movs	r5, r1
    c772:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    c774:	2841      	cmp	r0, #65	; 0x41
    c776:	d039      	beq.n	c7ec <m2m_ip_cb+0x88>
    c778:	2854      	cmp	r0, #84	; 0x54
    c77a:	d037      	beq.n	c7ec <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    c77c:	2842      	cmp	r0, #66	; 0x42
    c77e:	d053      	beq.n	c828 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    c780:	2843      	cmp	r0, #67	; 0x43
    c782:	d06a      	beq.n	c85a <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    c784:	2844      	cmp	r0, #68	; 0x44
    c786:	d100      	bne.n	c78a <m2m_ip_cb+0x26>
    c788:	e0af      	b.n	c8ea <m2m_ip_cb+0x186>
    c78a:	284b      	cmp	r0, #75	; 0x4b
    c78c:	d100      	bne.n	c790 <m2m_ip_cb+0x2c>
    c78e:	e0ac      	b.n	c8ea <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    c790:	284a      	cmp	r0, #74	; 0x4a
    c792:	d100      	bne.n	c796 <m2m_ip_cb+0x32>
    c794:	e0cf      	b.n	c936 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    c796:	2846      	cmp	r0, #70	; 0x46
    c798:	d100      	bne.n	c79c <m2m_ip_cb+0x38>
    c79a:	e0e5      	b.n	c968 <m2m_ip_cb+0x204>
    c79c:	2848      	cmp	r0, #72	; 0x48
    c79e:	d100      	bne.n	c7a2 <m2m_ip_cb+0x3e>
    c7a0:	e10e      	b.n	c9c0 <m2m_ip_cb+0x25c>
    c7a2:	284d      	cmp	r0, #77	; 0x4d
    c7a4:	d100      	bne.n	c7a8 <m2m_ip_cb+0x44>
    c7a6:	e0dc      	b.n	c962 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    c7a8:	2845      	cmp	r0, #69	; 0x45
    c7aa:	d100      	bne.n	c7ae <m2m_ip_cb+0x4a>
    c7ac:	e12c      	b.n	ca08 <m2m_ip_cb+0x2a4>
    c7ae:	2847      	cmp	r0, #71	; 0x47
    c7b0:	d100      	bne.n	c7b4 <m2m_ip_cb+0x50>
    c7b2:	e14d      	b.n	ca50 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    c7b4:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    c7b6:	284c      	cmp	r0, #76	; 0x4c
    c7b8:	d100      	bne.n	c7bc <m2m_ip_cb+0x58>
    c7ba:	e126      	b.n	ca0a <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    c7bc:	2852      	cmp	r0, #82	; 0x52
    c7be:	d12d      	bne.n	c81c <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    c7c0:	2301      	movs	r3, #1
    c7c2:	2214      	movs	r2, #20
    c7c4:	a909      	add	r1, sp, #36	; 0x24
    c7c6:	0020      	movs	r0, r4
    c7c8:	4ca2      	ldr	r4, [pc, #648]	; (ca54 <m2m_ip_cb+0x2f0>)
    c7ca:	47a0      	blx	r4
    c7cc:	2800      	cmp	r0, #0
    c7ce:	d125      	bne.n	c81c <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    c7d0:	4ba1      	ldr	r3, [pc, #644]	; (ca58 <m2m_ip_cb+0x2f4>)
    c7d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c7d4:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    c7d6:	681b      	ldr	r3, [r3, #0]
    c7d8:	2b00      	cmp	r3, #0
    c7da:	d01f      	beq.n	c81c <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    c7dc:	4b9e      	ldr	r3, [pc, #632]	; (ca58 <m2m_ip_cb+0x2f4>)
    c7de:	681c      	ldr	r4, [r3, #0]
    c7e0:	ab09      	add	r3, sp, #36	; 0x24
    c7e2:	7c1a      	ldrb	r2, [r3, #16]
    c7e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c7e6:	9809      	ldr	r0, [sp, #36]	; 0x24
    c7e8:	47a0      	blx	r4
			}
		}
	}
}
    c7ea:	e017      	b.n	c81c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    c7ec:	2300      	movs	r3, #0
    c7ee:	2204      	movs	r2, #4
    c7f0:	a909      	add	r1, sp, #36	; 0x24
    c7f2:	0020      	movs	r0, r4
    c7f4:	4c97      	ldr	r4, [pc, #604]	; (ca54 <m2m_ip_cb+0x2f0>)
    c7f6:	47a0      	blx	r4
    c7f8:	2800      	cmp	r0, #0
    c7fa:	d10f      	bne.n	c81c <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    c7fc:	ab09      	add	r3, sp, #36	; 0x24
    c7fe:	785a      	ldrb	r2, [r3, #1]
    c800:	ab05      	add	r3, sp, #20
    c802:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    c804:	4b95      	ldr	r3, [pc, #596]	; (ca5c <m2m_ip_cb+0x2f8>)
    c806:	681b      	ldr	r3, [r3, #0]
    c808:	2b00      	cmp	r3, #0
    c80a:	d007      	beq.n	c81c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    c80c:	4b93      	ldr	r3, [pc, #588]	; (ca5c <m2m_ip_cb+0x2f8>)
    c80e:	681b      	ldr	r3, [r3, #0]
    c810:	aa09      	add	r2, sp, #36	; 0x24
    c812:	2000      	movs	r0, #0
    c814:	5610      	ldrsb	r0, [r2, r0]
    c816:	aa05      	add	r2, sp, #20
    c818:	2101      	movs	r1, #1
    c81a:	4798      	blx	r3
}
    c81c:	b01a      	add	sp, #104	; 0x68
    c81e:	bc1c      	pop	{r2, r3, r4}
    c820:	4690      	mov	r8, r2
    c822:	4699      	mov	r9, r3
    c824:	46a2      	mov	sl, r4
    c826:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    c828:	2300      	movs	r3, #0
    c82a:	2204      	movs	r2, #4
    c82c:	a909      	add	r1, sp, #36	; 0x24
    c82e:	0020      	movs	r0, r4
    c830:	4c88      	ldr	r4, [pc, #544]	; (ca54 <m2m_ip_cb+0x2f0>)
    c832:	47a0      	blx	r4
    c834:	2800      	cmp	r0, #0
    c836:	d1f1      	bne.n	c81c <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    c838:	ab09      	add	r3, sp, #36	; 0x24
    c83a:	785a      	ldrb	r2, [r3, #1]
    c83c:	ab05      	add	r3, sp, #20
    c83e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    c840:	4b86      	ldr	r3, [pc, #536]	; (ca5c <m2m_ip_cb+0x2f8>)
    c842:	681b      	ldr	r3, [r3, #0]
    c844:	2b00      	cmp	r3, #0
    c846:	d0e9      	beq.n	c81c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    c848:	4b84      	ldr	r3, [pc, #528]	; (ca5c <m2m_ip_cb+0x2f8>)
    c84a:	681b      	ldr	r3, [r3, #0]
    c84c:	aa09      	add	r2, sp, #36	; 0x24
    c84e:	2000      	movs	r0, #0
    c850:	5610      	ldrsb	r0, [r2, r0]
    c852:	aa05      	add	r2, sp, #20
    c854:	2102      	movs	r1, #2
    c856:	4798      	blx	r3
    c858:	e7e0      	b.n	c81c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    c85a:	2300      	movs	r3, #0
    c85c:	220c      	movs	r2, #12
    c85e:	a905      	add	r1, sp, #20
    c860:	0020      	movs	r0, r4
    c862:	4c7c      	ldr	r4, [pc, #496]	; (ca54 <m2m_ip_cb+0x2f0>)
    c864:	47a0      	blx	r4
    c866:	2800      	cmp	r0, #0
    c868:	d1d8      	bne.n	c81c <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    c86a:	ab05      	add	r3, sp, #20
    c86c:	2209      	movs	r2, #9
    c86e:	569a      	ldrsb	r2, [r3, r2]
    c870:	2a00      	cmp	r2, #0
    c872:	db24      	blt.n	c8be <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    c874:	0018      	movs	r0, r3
    c876:	2108      	movs	r1, #8
    c878:	5659      	ldrsb	r1, [r3, r1]
    c87a:	4b79      	ldr	r3, [pc, #484]	; (ca60 <m2m_ip_cb+0x2fc>)
    c87c:	0109      	lsls	r1, r1, #4
    c87e:	1859      	adds	r1, r3, r1
    c880:	7ac9      	ldrb	r1, [r1, #11]
    c882:	b2c9      	uxtb	r1, r1
    c884:	0114      	lsls	r4, r2, #4
    c886:	191b      	adds	r3, r3, r4
    c888:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    c88a:	2101      	movs	r1, #1
    c88c:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    c88e:	8941      	ldrh	r1, [r0, #10]
    c890:	3908      	subs	r1, #8
    c892:	b289      	uxth	r1, r1
    c894:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    c896:	4973      	ldr	r1, [pc, #460]	; (ca64 <m2m_ip_cb+0x300>)
    c898:	880b      	ldrh	r3, [r1, #0]
    c89a:	3301      	adds	r3, #1
    c89c:	b29b      	uxth	r3, r3
    c89e:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    c8a0:	880b      	ldrh	r3, [r1, #0]
    c8a2:	b29b      	uxth	r3, r3
    c8a4:	2b00      	cmp	r3, #0
    c8a6:	d103      	bne.n	c8b0 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    c8a8:	880b      	ldrh	r3, [r1, #0]
    c8aa:	3301      	adds	r3, #1
    c8ac:	b29b      	uxth	r3, r3
    c8ae:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    c8b0:	4b6c      	ldr	r3, [pc, #432]	; (ca64 <m2m_ip_cb+0x300>)
    c8b2:	8819      	ldrh	r1, [r3, #0]
    c8b4:	b289      	uxth	r1, r1
    c8b6:	0110      	lsls	r0, r2, #4
    c8b8:	4b69      	ldr	r3, [pc, #420]	; (ca60 <m2m_ip_cb+0x2fc>)
    c8ba:	181b      	adds	r3, r3, r0
    c8bc:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    c8be:	ab09      	add	r3, sp, #36	; 0x24
    c8c0:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    c8c2:	2202      	movs	r2, #2
    c8c4:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    c8c6:	aa05      	add	r2, sp, #20
    c8c8:	8851      	ldrh	r1, [r2, #2]
    c8ca:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    c8cc:	9a06      	ldr	r2, [sp, #24]
    c8ce:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    c8d0:	4b62      	ldr	r3, [pc, #392]	; (ca5c <m2m_ip_cb+0x2f8>)
    c8d2:	681b      	ldr	r3, [r3, #0]
    c8d4:	2b00      	cmp	r3, #0
    c8d6:	d0a1      	beq.n	c81c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    c8d8:	4b60      	ldr	r3, [pc, #384]	; (ca5c <m2m_ip_cb+0x2f8>)
    c8da:	681b      	ldr	r3, [r3, #0]
    c8dc:	aa05      	add	r2, sp, #20
    c8de:	2008      	movs	r0, #8
    c8e0:	5610      	ldrsb	r0, [r2, r0]
    c8e2:	aa09      	add	r2, sp, #36	; 0x24
    c8e4:	2104      	movs	r1, #4
    c8e6:	4798      	blx	r3
    c8e8:	e798      	b.n	c81c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    c8ea:	2300      	movs	r3, #0
    c8ec:	2204      	movs	r2, #4
    c8ee:	a909      	add	r1, sp, #36	; 0x24
    c8f0:	0020      	movs	r0, r4
    c8f2:	4c58      	ldr	r4, [pc, #352]	; (ca54 <m2m_ip_cb+0x2f0>)
    c8f4:	47a0      	blx	r4
    c8f6:	2800      	cmp	r0, #0
    c8f8:	d000      	beq.n	c8fc <m2m_ip_cb+0x198>
    c8fa:	e78f      	b.n	c81c <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    c8fc:	ab09      	add	r3, sp, #36	; 0x24
    c8fe:	2000      	movs	r0, #0
    c900:	5618      	ldrsb	r0, [r3, r0]
    c902:	aa05      	add	r2, sp, #20
    c904:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    c906:	785b      	ldrb	r3, [r3, #1]
    c908:	b25b      	sxtb	r3, r3
    c90a:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    c90c:	2b00      	cmp	r3, #0
    c90e:	d107      	bne.n	c920 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    c910:	ab09      	add	r3, sp, #36	; 0x24
    c912:	885b      	ldrh	r3, [r3, #2]
    c914:	3b08      	subs	r3, #8
    c916:	b29b      	uxth	r3, r3
    c918:	0101      	lsls	r1, r0, #4
    c91a:	4a51      	ldr	r2, [pc, #324]	; (ca60 <m2m_ip_cb+0x2fc>)
    c91c:	1852      	adds	r2, r2, r1
    c91e:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    c920:	4b4e      	ldr	r3, [pc, #312]	; (ca5c <m2m_ip_cb+0x2f8>)
    c922:	681b      	ldr	r3, [r3, #0]
    c924:	2b00      	cmp	r3, #0
    c926:	d100      	bne.n	c92a <m2m_ip_cb+0x1c6>
    c928:	e778      	b.n	c81c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    c92a:	4b4c      	ldr	r3, [pc, #304]	; (ca5c <m2m_ip_cb+0x2f8>)
    c92c:	681b      	ldr	r3, [r3, #0]
    c92e:	aa05      	add	r2, sp, #20
    c930:	2105      	movs	r1, #5
    c932:	4798      	blx	r3
	{
    c934:	e772      	b.n	c81c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    c936:	2300      	movs	r3, #0
    c938:	2244      	movs	r2, #68	; 0x44
    c93a:	a909      	add	r1, sp, #36	; 0x24
    c93c:	0020      	movs	r0, r4
    c93e:	4c45      	ldr	r4, [pc, #276]	; (ca54 <m2m_ip_cb+0x2f0>)
    c940:	47a0      	blx	r4
    c942:	2800      	cmp	r0, #0
    c944:	d000      	beq.n	c948 <m2m_ip_cb+0x1e4>
    c946:	e769      	b.n	c81c <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    c948:	4b47      	ldr	r3, [pc, #284]	; (ca68 <m2m_ip_cb+0x304>)
    c94a:	681b      	ldr	r3, [r3, #0]
    c94c:	2b00      	cmp	r3, #0
    c94e:	d100      	bne.n	c952 <m2m_ip_cb+0x1ee>
    c950:	e764      	b.n	c81c <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    c952:	4b45      	ldr	r3, [pc, #276]	; (ca68 <m2m_ip_cb+0x304>)
    c954:	681b      	ldr	r3, [r3, #0]
    c956:	9a19      	ldr	r2, [sp, #100]	; 0x64
    c958:	9203      	str	r2, [sp, #12]
    c95a:	0011      	movs	r1, r2
    c95c:	a809      	add	r0, sp, #36	; 0x24
    c95e:	4798      	blx	r3
    c960:	e75c      	b.n	c81c <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    c962:	2306      	movs	r3, #6
    c964:	469a      	mov	sl, r3
    c966:	e001      	b.n	c96c <m2m_ip_cb+0x208>
    c968:	2306      	movs	r3, #6
    c96a:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    c96c:	2300      	movs	r3, #0
    c96e:	2210      	movs	r2, #16
    c970:	a905      	add	r1, sp, #20
    c972:	0020      	movs	r0, r4
    c974:	4f37      	ldr	r7, [pc, #220]	; (ca54 <m2m_ip_cb+0x2f0>)
    c976:	47b8      	blx	r7
    c978:	2800      	cmp	r0, #0
    c97a:	d000      	beq.n	c97e <m2m_ip_cb+0x21a>
    c97c:	e74e      	b.n	c81c <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    c97e:	aa05      	add	r2, sp, #20
    c980:	200c      	movs	r0, #12
    c982:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    c984:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    c986:	0107      	lsls	r7, r0, #4
    c988:	4935      	ldr	r1, [pc, #212]	; (ca60 <m2m_ip_cb+0x2fc>)
    c98a:	19c9      	adds	r1, r1, r7
    c98c:	2700      	movs	r7, #0
    c98e:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    c990:	2608      	movs	r6, #8
    c992:	5f97      	ldrsh	r7, [r2, r6]
    c994:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    c996:	8957      	ldrh	r7, [r2, #10]
    c998:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    c99a:	af09      	add	r7, sp, #36	; 0x24
    c99c:	8856      	ldrh	r6, [r2, #2]
    c99e:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    c9a0:	9a06      	ldr	r2, [sp, #24]
    c9a2:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    c9a4:	88ca      	ldrh	r2, [r1, #6]
    c9a6:	b292      	uxth	r2, r2
    c9a8:	4293      	cmp	r3, r2
    c9aa:	d00c      	beq.n	c9c6 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    c9ac:	2d10      	cmp	r5, #16
    c9ae:	d800      	bhi.n	c9b2 <m2m_ip_cb+0x24e>
    c9b0:	e734      	b.n	c81c <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    c9b2:	2301      	movs	r3, #1
    c9b4:	2200      	movs	r2, #0
    c9b6:	2100      	movs	r1, #0
    c9b8:	2000      	movs	r0, #0
    c9ba:	4c26      	ldr	r4, [pc, #152]	; (ca54 <m2m_ip_cb+0x2f0>)
    c9bc:	47a0      	blx	r4
	{
    c9be:	e72d      	b.n	c81c <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    c9c0:	2309      	movs	r3, #9
    c9c2:	469a      	mov	sl, r3
    c9c4:	e7d2      	b.n	c96c <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    c9c6:	4643      	mov	r3, r8
    c9c8:	2b00      	cmp	r3, #0
    c9ca:	dd01      	ble.n	c9d0 <m2m_ip_cb+0x26c>
    c9cc:	45a8      	cmp	r8, r5
    c9ce:	db0f      	blt.n	c9f0 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    c9d0:	ab09      	add	r3, sp, #36	; 0x24
    c9d2:	4642      	mov	r2, r8
    c9d4:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    c9d6:	2300      	movs	r3, #0
    c9d8:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    c9da:	4b20      	ldr	r3, [pc, #128]	; (ca5c <m2m_ip_cb+0x2f8>)
    c9dc:	681b      	ldr	r3, [r3, #0]
    c9de:	2b00      	cmp	r3, #0
    c9e0:	d100      	bne.n	c9e4 <m2m_ip_cb+0x280>
    c9e2:	e71b      	b.n	c81c <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    c9e4:	4b1d      	ldr	r3, [pc, #116]	; (ca5c <m2m_ip_cb+0x2f8>)
    c9e6:	681b      	ldr	r3, [r3, #0]
    c9e8:	aa09      	add	r2, sp, #36	; 0x24
    c9ea:	4651      	mov	r1, sl
    c9ec:	4798      	blx	r3
    c9ee:	e715      	b.n	c81c <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    c9f0:	0023      	movs	r3, r4
    c9f2:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    c9f4:	4642      	mov	r2, r8
    c9f6:	4669      	mov	r1, sp
    c9f8:	818a      	strh	r2, [r1, #12]
    c9fa:	898a      	ldrh	r2, [r1, #12]
    c9fc:	9200      	str	r2, [sp, #0]
    c9fe:	4652      	mov	r2, sl
    ca00:	0039      	movs	r1, r7
    ca02:	4c1a      	ldr	r4, [pc, #104]	; (ca6c <m2m_ip_cb+0x308>)
    ca04:	47a0      	blx	r4
    ca06:	e709      	b.n	c81c <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    ca08:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    ca0a:	2300      	movs	r3, #0
    ca0c:	2208      	movs	r2, #8
    ca0e:	a909      	add	r1, sp, #36	; 0x24
    ca10:	0020      	movs	r0, r4
    ca12:	4c10      	ldr	r4, [pc, #64]	; (ca54 <m2m_ip_cb+0x2f0>)
    ca14:	47a0      	blx	r4
    ca16:	2800      	cmp	r0, #0
    ca18:	d000      	beq.n	ca1c <m2m_ip_cb+0x2b8>
    ca1a:	e6ff      	b.n	c81c <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    ca1c:	ab09      	add	r3, sp, #36	; 0x24
    ca1e:	2000      	movs	r0, #0
    ca20:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    ca22:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    ca24:	8859      	ldrh	r1, [r3, #2]
    ca26:	ab05      	add	r3, sp, #20
    ca28:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    ca2a:	0101      	lsls	r1, r0, #4
    ca2c:	4b0c      	ldr	r3, [pc, #48]	; (ca60 <m2m_ip_cb+0x2fc>)
    ca2e:	185b      	adds	r3, r3, r1
    ca30:	88db      	ldrh	r3, [r3, #6]
    ca32:	b29b      	uxth	r3, r3
    ca34:	429a      	cmp	r2, r3
    ca36:	d000      	beq.n	ca3a <m2m_ip_cb+0x2d6>
    ca38:	e6f0      	b.n	c81c <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    ca3a:	4b08      	ldr	r3, [pc, #32]	; (ca5c <m2m_ip_cb+0x2f8>)
    ca3c:	681b      	ldr	r3, [r3, #0]
    ca3e:	2b00      	cmp	r3, #0
    ca40:	d100      	bne.n	ca44 <m2m_ip_cb+0x2e0>
    ca42:	e6eb      	b.n	c81c <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    ca44:	4b05      	ldr	r3, [pc, #20]	; (ca5c <m2m_ip_cb+0x2f8>)
    ca46:	681b      	ldr	r3, [r3, #0]
    ca48:	aa05      	add	r2, sp, #20
    ca4a:	0029      	movs	r1, r5
    ca4c:	4798      	blx	r3
	{
    ca4e:	e6e5      	b.n	c81c <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    ca50:	2508      	movs	r5, #8
    ca52:	e7da      	b.n	ca0a <m2m_ip_cb+0x2a6>
    ca54:	0000a7c5 	.word	0x0000a7c5
    ca58:	20005cd4 	.word	0x20005cd4
    ca5c:	20005cd0 	.word	0x20005cd0
    ca60:	20005c20 	.word	0x20005c20
    ca64:	20004132 	.word	0x20004132
    ca68:	20005cd8 	.word	0x20005cd8
    ca6c:	0000c655 	.word	0x0000c655

0000ca70 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    ca70:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    ca72:	4b0a      	ldr	r3, [pc, #40]	; (ca9c <socketInit+0x2c>)
    ca74:	781b      	ldrb	r3, [r3, #0]
    ca76:	2b00      	cmp	r3, #0
    ca78:	d000      	beq.n	ca7c <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    ca7a:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    ca7c:	22b0      	movs	r2, #176	; 0xb0
    ca7e:	2100      	movs	r1, #0
    ca80:	4807      	ldr	r0, [pc, #28]	; (caa0 <socketInit+0x30>)
    ca82:	4b08      	ldr	r3, [pc, #32]	; (caa4 <socketInit+0x34>)
    ca84:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    ca86:	4908      	ldr	r1, [pc, #32]	; (caa8 <socketInit+0x38>)
    ca88:	2002      	movs	r0, #2
    ca8a:	4b08      	ldr	r3, [pc, #32]	; (caac <socketInit+0x3c>)
    ca8c:	4798      	blx	r3
		gbSocketInit	= 1;
    ca8e:	2201      	movs	r2, #1
    ca90:	4b02      	ldr	r3, [pc, #8]	; (ca9c <socketInit+0x2c>)
    ca92:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    ca94:	2200      	movs	r2, #0
    ca96:	4b06      	ldr	r3, [pc, #24]	; (cab0 <socketInit+0x40>)
    ca98:	801a      	strh	r2, [r3, #0]
}
    ca9a:	e7ee      	b.n	ca7a <socketInit+0xa>
    ca9c:	20004131 	.word	0x20004131
    caa0:	20005c20 	.word	0x20005c20
    caa4:	0000a0d5 	.word	0x0000a0d5
    caa8:	0000c765 	.word	0x0000c765
    caac:	0000a89d 	.word	0x0000a89d
    cab0:	20004132 	.word	0x20004132

0000cab4 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    cab4:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    cab6:	22b0      	movs	r2, #176	; 0xb0
    cab8:	2100      	movs	r1, #0
    caba:	4807      	ldr	r0, [pc, #28]	; (cad8 <socketDeinit+0x24>)
    cabc:	4b07      	ldr	r3, [pc, #28]	; (cadc <socketDeinit+0x28>)
    cabe:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    cac0:	2100      	movs	r1, #0
    cac2:	2002      	movs	r0, #2
    cac4:	4b06      	ldr	r3, [pc, #24]	; (cae0 <socketDeinit+0x2c>)
    cac6:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    cac8:	2300      	movs	r3, #0
    caca:	4a06      	ldr	r2, [pc, #24]	; (cae4 <socketDeinit+0x30>)
    cacc:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
    cace:	4a06      	ldr	r2, [pc, #24]	; (cae8 <socketDeinit+0x34>)
    cad0:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
    cad2:	4a06      	ldr	r2, [pc, #24]	; (caec <socketDeinit+0x38>)
    cad4:	7013      	strb	r3, [r2, #0]
}
    cad6:	bd10      	pop	{r4, pc}
    cad8:	20005c20 	.word	0x20005c20
    cadc:	0000a0d5 	.word	0x0000a0d5
    cae0:	0000a89d 	.word	0x0000a89d
    cae4:	20005cd0 	.word	0x20005cd0
    cae8:	20005cd8 	.word	0x20005cd8
    caec:	20004131 	.word	0x20004131

0000caf0 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    caf0:	4b02      	ldr	r3, [pc, #8]	; (cafc <registerSocketCallback+0xc>)
    caf2:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    caf4:	4b02      	ldr	r3, [pc, #8]	; (cb00 <registerSocketCallback+0x10>)
    caf6:	6019      	str	r1, [r3, #0]
}
    caf8:	4770      	bx	lr
    cafa:	46c0      	nop			; (mov r8, r8)
    cafc:	20005cd0 	.word	0x20005cd0
    cb00:	20005cd8 	.word	0x20005cd8

0000cb04 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    cb04:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb06:	46d6      	mov	lr, sl
    cb08:	4647      	mov	r7, r8
    cb0a:	b580      	push	{r7, lr}
    cb0c:	b089      	sub	sp, #36	; 0x24
    cb0e:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    cb10:	2802      	cmp	r0, #2
    cb12:	d000      	beq.n	cb16 <socket+0x12>
    cb14:	e09b      	b.n	cc4e <socket+0x14a>
	{
		if(u8Type == SOCK_STREAM)
    cb16:	2901      	cmp	r1, #1
    cb18:	d00a      	beq.n	cb30 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    cb1a:	2902      	cmp	r1, #2
    cb1c:	d100      	bne.n	cb20 <socket+0x1c>
    cb1e:	e06f      	b.n	cc00 <socket+0xfc>
	SOCKET					sock = -1;
    cb20:	2501      	movs	r5, #1
    cb22:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    cb24:	0028      	movs	r0, r5
    cb26:	b009      	add	sp, #36	; 0x24
    cb28:	bc0c      	pop	{r2, r3}
    cb2a:	4690      	mov	r8, r2
    cb2c:	469a      	mov	sl, r3
    cb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    cb30:	4c48      	ldr	r4, [pc, #288]	; (cc54 <socket+0x150>)
    cb32:	7827      	ldrb	r7, [r4, #0]
    cb34:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    cb36:	7826      	ldrb	r6, [r4, #0]
    cb38:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    cb3a:	7820      	ldrb	r0, [r4, #0]
    cb3c:	3001      	adds	r0, #1
    cb3e:	3106      	adds	r1, #6
    cb40:	4b45      	ldr	r3, [pc, #276]	; (cc58 <socket+0x154>)
    cb42:	4798      	blx	r3
    cb44:	b2c9      	uxtb	r1, r1
    cb46:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    cb48:	0132      	lsls	r2, r6, #4
    cb4a:	4b44      	ldr	r3, [pc, #272]	; (cc5c <socket+0x158>)
    cb4c:	189b      	adds	r3, r3, r2
    cb4e:	7a9b      	ldrb	r3, [r3, #10]
    cb50:	2506      	movs	r5, #6
    cb52:	2b00      	cmp	r3, #0
    cb54:	d018      	beq.n	cb88 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    cb56:	4e3f      	ldr	r6, [pc, #252]	; (cc54 <socket+0x150>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    cb58:	4b3f      	ldr	r3, [pc, #252]	; (cc58 <socket+0x154>)
    cb5a:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    cb5c:	4b3f      	ldr	r3, [pc, #252]	; (cc5c <socket+0x158>)
    cb5e:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    cb60:	7837      	ldrb	r7, [r6, #0]
    cb62:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    cb64:	7834      	ldrb	r4, [r6, #0]
    cb66:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    cb68:	7830      	ldrb	r0, [r6, #0]
    cb6a:	3001      	adds	r0, #1
    cb6c:	2107      	movs	r1, #7
    cb6e:	47d0      	blx	sl
    cb70:	b2c9      	uxtb	r1, r1
    cb72:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    cb74:	0123      	lsls	r3, r4, #4
    cb76:	4443      	add	r3, r8
    cb78:	7a9b      	ldrb	r3, [r3, #10]
    cb7a:	2b00      	cmp	r3, #0
    cb7c:	d007      	beq.n	cb8e <socket+0x8a>
    cb7e:	3d01      	subs	r5, #1
    cb80:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    cb82:	2d00      	cmp	r5, #0
    cb84:	d1ec      	bne.n	cb60 <socket+0x5c>
    cb86:	e7cb      	b.n	cb20 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    cb88:	4b34      	ldr	r3, [pc, #208]	; (cc5c <socket+0x158>)
    cb8a:	18d4      	adds	r4, r2, r3
    cb8c:	e002      	b.n	cb94 <socket+0x90>
    cb8e:	0124      	lsls	r4, r4, #4
    cb90:	4b32      	ldr	r3, [pc, #200]	; (cc5c <socket+0x158>)
    cb92:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    cb94:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    cb96:	2d00      	cmp	r5, #0
    cb98:	dbc4      	blt.n	cb24 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    cb9a:	2210      	movs	r2, #16
    cb9c:	2100      	movs	r1, #0
    cb9e:	0020      	movs	r0, r4
    cba0:	4b2f      	ldr	r3, [pc, #188]	; (cc60 <socket+0x15c>)
    cba2:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    cba4:	2301      	movs	r3, #1
    cba6:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    cba8:	4a2e      	ldr	r2, [pc, #184]	; (cc64 <socket+0x160>)
    cbaa:	8813      	ldrh	r3, [r2, #0]
    cbac:	3301      	adds	r3, #1
    cbae:	b29b      	uxth	r3, r3
    cbb0:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    cbb2:	8813      	ldrh	r3, [r2, #0]
    cbb4:	b29b      	uxth	r3, r3
    cbb6:	2b00      	cmp	r3, #0
    cbb8:	d103      	bne.n	cbc2 <socket+0xbe>
				++gu16SessionID;
    cbba:	8813      	ldrh	r3, [r2, #0]
    cbbc:	3301      	adds	r3, #1
    cbbe:	b29b      	uxth	r3, r3
    cbc0:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    cbc2:	4e28      	ldr	r6, [pc, #160]	; (cc64 <socket+0x160>)
    cbc4:	8833      	ldrh	r3, [r6, #0]
    cbc6:	b29b      	uxth	r3, r3
    cbc8:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    cbca:	4827      	ldr	r0, [pc, #156]	; (cc68 <socket+0x164>)
    cbcc:	4f27      	ldr	r7, [pc, #156]	; (cc6c <socket+0x168>)
    cbce:	47b8      	blx	r7
    cbd0:	8832      	ldrh	r2, [r6, #0]
    cbd2:	b292      	uxth	r2, r2
    cbd4:	0029      	movs	r1, r5
    cbd6:	4826      	ldr	r0, [pc, #152]	; (cc70 <socket+0x16c>)
    cbd8:	47b8      	blx	r7
    cbda:	4826      	ldr	r0, [pc, #152]	; (cc74 <socket+0x170>)
    cbdc:	47b8      	blx	r7
			if(u8Flags & SOCKET_FLAGS_SSL)
    cbde:	9b05      	ldr	r3, [sp, #20]
    cbe0:	07db      	lsls	r3, r3, #31
    cbe2:	d59f      	bpl.n	cb24 <socket+0x20>
				strSSLCreate.sslSock = sock;
    cbe4:	aa07      	add	r2, sp, #28
    cbe6:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    cbe8:	2321      	movs	r3, #33	; 0x21
    cbea:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    cbec:	2300      	movs	r3, #0
    cbee:	9302      	str	r3, [sp, #8]
    cbf0:	9301      	str	r3, [sp, #4]
    cbf2:	9300      	str	r3, [sp, #0]
    cbf4:	3304      	adds	r3, #4
    cbf6:	2150      	movs	r1, #80	; 0x50
    cbf8:	2002      	movs	r0, #2
    cbfa:	4c1f      	ldr	r4, [pc, #124]	; (cc78 <socket+0x174>)
    cbfc:	47a0      	blx	r4
    cbfe:	e791      	b.n	cb24 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    cc00:	4b1e      	ldr	r3, [pc, #120]	; (cc7c <socket+0x178>)
    cc02:	781d      	ldrb	r5, [r3, #0]
    cc04:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    cc06:	781c      	ldrb	r4, [r3, #0]
    cc08:	0124      	lsls	r4, r4, #4
    cc0a:	4a1d      	ldr	r2, [pc, #116]	; (cc80 <socket+0x17c>)
    cc0c:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    cc0e:	7819      	ldrb	r1, [r3, #0]
    cc10:	3101      	adds	r1, #1
    cc12:	2203      	movs	r2, #3
    cc14:	400a      	ands	r2, r1
    cc16:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    cc18:	7aa3      	ldrb	r3, [r4, #10]
    cc1a:	2b00      	cmp	r3, #0
    cc1c:	d014      	beq.n	cc48 <socket+0x144>
    cc1e:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    cc20:	4916      	ldr	r1, [pc, #88]	; (cc7c <socket+0x178>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    cc22:	4f17      	ldr	r7, [pc, #92]	; (cc80 <socket+0x17c>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    cc24:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    cc26:	780d      	ldrb	r5, [r1, #0]
    cc28:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    cc2a:	780c      	ldrb	r4, [r1, #0]
    cc2c:	0124      	lsls	r4, r4, #4
    cc2e:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    cc30:	780b      	ldrb	r3, [r1, #0]
    cc32:	3301      	adds	r3, #1
    cc34:	4003      	ands	r3, r0
    cc36:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    cc38:	7aa3      	ldrb	r3, [r4, #10]
    cc3a:	2b00      	cmp	r3, #0
    cc3c:	d004      	beq.n	cc48 <socket+0x144>
    cc3e:	3a01      	subs	r2, #1
    cc40:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    cc42:	2a00      	cmp	r2, #0
    cc44:	d1ef      	bne.n	cc26 <socket+0x122>
    cc46:	e76b      	b.n	cb20 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    cc48:	3507      	adds	r5, #7
    cc4a:	b26d      	sxtb	r5, r5
					break;
    cc4c:	e7a3      	b.n	cb96 <socket+0x92>
	SOCKET					sock = -1;
    cc4e:	2501      	movs	r5, #1
    cc50:	426d      	negs	r5, r5
    cc52:	e767      	b.n	cb24 <socket+0x20>
    cc54:	20004134 	.word	0x20004134
    cc58:	00015af5 	.word	0x00015af5
    cc5c:	20005c20 	.word	0x20005c20
    cc60:	0000a0d5 	.word	0x0000a0d5
    cc64:	20004132 	.word	0x20004132
    cc68:	0001a8b0 	.word	0x0001a8b0
    cc6c:	00008bdd 	.word	0x00008bdd
    cc70:	0001b37c 	.word	0x0001b37c
    cc74:	0001a59c 	.word	0x0001a59c
    cc78:	0000a1e9 	.word	0x0000a1e9
    cc7c:	20004135 	.word	0x20004135
    cc80:	20005c90 	.word	0x20005c90

0000cc84 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    cc84:	b570      	push	{r4, r5, r6, lr}
    cc86:	b088      	sub	sp, #32
    cc88:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    cc8a:	db30      	blt.n	ccee <connect+0x6a>
    cc8c:	2900      	cmp	r1, #0
    cc8e:	d031      	beq.n	ccf4 <connect+0x70>
    cc90:	0100      	lsls	r0, r0, #4
    cc92:	4b1d      	ldr	r3, [pc, #116]	; (cd08 <connect+0x84>)
    cc94:	181b      	adds	r3, r3, r0
    cc96:	7a9b      	ldrb	r3, [r3, #10]
    cc98:	2b01      	cmp	r3, #1
    cc9a:	d12e      	bne.n	ccfa <connect+0x76>
    cc9c:	2a00      	cmp	r2, #0
    cc9e:	d02f      	beq.n	cd00 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    cca0:	4b19      	ldr	r3, [pc, #100]	; (cd08 <connect+0x84>)
    cca2:	181b      	adds	r3, r3, r0
    cca4:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    cca6:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    cca8:	07db      	lsls	r3, r3, #31
    ccaa:	d505      	bpl.n	ccb8 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    ccac:	4b16      	ldr	r3, [pc, #88]	; (cd08 <connect+0x84>)
    ccae:	181b      	adds	r3, r3, r0
    ccb0:	7ada      	ldrb	r2, [r3, #11]
    ccb2:	ab05      	add	r3, sp, #20
    ccb4:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    ccb6:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    ccb8:	ad05      	add	r5, sp, #20
    ccba:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    ccbc:	2208      	movs	r2, #8
    ccbe:	0028      	movs	r0, r5
    ccc0:	4b12      	ldr	r3, [pc, #72]	; (cd0c <connect+0x88>)
    ccc2:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    ccc4:	0124      	lsls	r4, r4, #4
    ccc6:	4b10      	ldr	r3, [pc, #64]	; (cd08 <connect+0x84>)
    ccc8:	191c      	adds	r4, r3, r4
    ccca:	88e3      	ldrh	r3, [r4, #6]
    cccc:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    ccce:	2300      	movs	r3, #0
    ccd0:	9302      	str	r3, [sp, #8]
    ccd2:	9301      	str	r3, [sp, #4]
    ccd4:	9300      	str	r3, [sp, #0]
    ccd6:	330c      	adds	r3, #12
    ccd8:	002a      	movs	r2, r5
    ccda:	0031      	movs	r1, r6
    ccdc:	2002      	movs	r0, #2
    ccde:	4c0c      	ldr	r4, [pc, #48]	; (cd10 <connect+0x8c>)
    cce0:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    cce2:	2800      	cmp	r0, #0
    cce4:	d001      	beq.n	ccea <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    cce6:	2009      	movs	r0, #9
    cce8:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    ccea:	b008      	add	sp, #32
    ccec:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    ccee:	2006      	movs	r0, #6
    ccf0:	4240      	negs	r0, r0
    ccf2:	e7fa      	b.n	ccea <connect+0x66>
    ccf4:	2006      	movs	r0, #6
    ccf6:	4240      	negs	r0, r0
    ccf8:	e7f7      	b.n	ccea <connect+0x66>
    ccfa:	2006      	movs	r0, #6
    ccfc:	4240      	negs	r0, r0
    ccfe:	e7f4      	b.n	ccea <connect+0x66>
    cd00:	2006      	movs	r0, #6
    cd02:	4240      	negs	r0, r0
    cd04:	e7f1      	b.n	ccea <connect+0x66>
    cd06:	46c0      	nop			; (mov r8, r8)
    cd08:	20005c20 	.word	0x20005c20
    cd0c:	0000a0c1 	.word	0x0000a0c1
    cd10:	0000a1e9 	.word	0x0000a1e9

0000cd14 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    cd14:	b530      	push	{r4, r5, lr}
    cd16:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    cd18:	2800      	cmp	r0, #0
    cd1a:	db36      	blt.n	cd8a <send+0x76>
    cd1c:	2900      	cmp	r1, #0
    cd1e:	d037      	beq.n	cd90 <send+0x7c>
    cd20:	23af      	movs	r3, #175	; 0xaf
    cd22:	00db      	lsls	r3, r3, #3
    cd24:	429a      	cmp	r2, r3
    cd26:	d836      	bhi.n	cd96 <send+0x82>
    cd28:	0104      	lsls	r4, r0, #4
    cd2a:	4b1e      	ldr	r3, [pc, #120]	; (cda4 <send+0x90>)
    cd2c:	191b      	adds	r3, r3, r4
    cd2e:	7a9b      	ldrb	r3, [r3, #10]
    cd30:	2b01      	cmp	r3, #1
    cd32:	d133      	bne.n	cd9c <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    cd34:	ab04      	add	r3, sp, #16
    cd36:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    cd38:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    cd3a:	0025      	movs	r5, r4
    cd3c:	4c19      	ldr	r4, [pc, #100]	; (cda4 <send+0x90>)
    cd3e:	1964      	adds	r4, r4, r5
    cd40:	88e4      	ldrh	r4, [r4, #6]
    cd42:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    cd44:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    cd46:	2806      	cmp	r0, #6
    cd48:	dd00      	ble.n	cd4c <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    cd4a:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    cd4c:	0104      	lsls	r4, r0, #4
    cd4e:	4b15      	ldr	r3, [pc, #84]	; (cda4 <send+0x90>)
    cd50:	191b      	adds	r3, r3, r4
    cd52:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    cd54:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    cd56:	07e4      	lsls	r4, r4, #31
    cd58:	d505      	bpl.n	cd66 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    cd5a:	0100      	lsls	r0, r0, #4
    cd5c:	4b11      	ldr	r3, [pc, #68]	; (cda4 <send+0x90>)
    cd5e:	1818      	adds	r0, r3, r0
    cd60:	8905      	ldrh	r5, [r0, #8]
    cd62:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    cd64:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    cd66:	2080      	movs	r0, #128	; 0x80
    cd68:	4318      	orrs	r0, r3
    cd6a:	9502      	str	r5, [sp, #8]
    cd6c:	9201      	str	r2, [sp, #4]
    cd6e:	9100      	str	r1, [sp, #0]
    cd70:	2310      	movs	r3, #16
    cd72:	aa04      	add	r2, sp, #16
    cd74:	0001      	movs	r1, r0
    cd76:	2002      	movs	r0, #2
    cd78:	4c0b      	ldr	r4, [pc, #44]	; (cda8 <send+0x94>)
    cd7a:	47a0      	blx	r4
    cd7c:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    cd7e:	2800      	cmp	r0, #0
    cd80:	d000      	beq.n	cd84 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    cd82:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    cd84:	0018      	movs	r0, r3
    cd86:	b009      	add	sp, #36	; 0x24
    cd88:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    cd8a:	2306      	movs	r3, #6
    cd8c:	425b      	negs	r3, r3
    cd8e:	e7f9      	b.n	cd84 <send+0x70>
    cd90:	2306      	movs	r3, #6
    cd92:	425b      	negs	r3, r3
    cd94:	e7f6      	b.n	cd84 <send+0x70>
    cd96:	2306      	movs	r3, #6
    cd98:	425b      	negs	r3, r3
    cd9a:	e7f3      	b.n	cd84 <send+0x70>
    cd9c:	2306      	movs	r3, #6
    cd9e:	425b      	negs	r3, r3
    cda0:	e7f0      	b.n	cd84 <send+0x70>
    cda2:	46c0      	nop			; (mov r8, r8)
    cda4:	20005c20 	.word	0x20005c20
    cda8:	0000a1e9 	.word	0x0000a1e9

0000cdac <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    cdac:	b530      	push	{r4, r5, lr}
    cdae:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    cdb0:	2800      	cmp	r0, #0
    cdb2:	db34      	blt.n	ce1e <recv+0x72>
    cdb4:	2900      	cmp	r1, #0
    cdb6:	d035      	beq.n	ce24 <recv+0x78>
    cdb8:	2a00      	cmp	r2, #0
    cdba:	d036      	beq.n	ce2a <recv+0x7e>
    cdbc:	0105      	lsls	r5, r0, #4
    cdbe:	4c1e      	ldr	r4, [pc, #120]	; (ce38 <recv+0x8c>)
    cdc0:	1964      	adds	r4, r4, r5
    cdc2:	7aa4      	ldrb	r4, [r4, #10]
    cdc4:	2c01      	cmp	r4, #1
    cdc6:	d133      	bne.n	ce30 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    cdc8:	4c1b      	ldr	r4, [pc, #108]	; (ce38 <recv+0x8c>)
    cdca:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    cdcc:	1964      	adds	r4, r4, r5
    cdce:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    cdd0:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    cdd2:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    cdd4:	2900      	cmp	r1, #0
    cdd6:	d11d      	bne.n	ce14 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    cdd8:	2101      	movs	r1, #1
    cdda:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    cddc:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    cdde:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    cde0:	07d2      	lsls	r2, r2, #31
    cde2:	d500      	bpl.n	cde6 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    cde4:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    cde6:	2b00      	cmp	r3, #0
    cde8:	d117      	bne.n	ce1a <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    cdea:	3b01      	subs	r3, #1
    cdec:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    cdee:	aa04      	add	r2, sp, #16
    cdf0:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    cdf2:	0100      	lsls	r0, r0, #4
    cdf4:	4b10      	ldr	r3, [pc, #64]	; (ce38 <recv+0x8c>)
    cdf6:	1818      	adds	r0, r3, r0
    cdf8:	88c3      	ldrh	r3, [r0, #6]
    cdfa:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    cdfc:	2300      	movs	r3, #0
    cdfe:	9302      	str	r3, [sp, #8]
    ce00:	9301      	str	r3, [sp, #4]
    ce02:	9300      	str	r3, [sp, #0]
    ce04:	3308      	adds	r3, #8
    ce06:	2002      	movs	r0, #2
    ce08:	4c0c      	ldr	r4, [pc, #48]	; (ce3c <recv+0x90>)
    ce0a:	47a0      	blx	r4
    ce0c:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    ce0e:	2800      	cmp	r0, #0
    ce10:	d000      	beq.n	ce14 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    ce12:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    ce14:	0010      	movs	r0, r2
    ce16:	b007      	add	sp, #28
    ce18:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    ce1a:	9304      	str	r3, [sp, #16]
    ce1c:	e7e7      	b.n	cdee <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    ce1e:	2206      	movs	r2, #6
    ce20:	4252      	negs	r2, r2
    ce22:	e7f7      	b.n	ce14 <recv+0x68>
    ce24:	2206      	movs	r2, #6
    ce26:	4252      	negs	r2, r2
    ce28:	e7f4      	b.n	ce14 <recv+0x68>
    ce2a:	2206      	movs	r2, #6
    ce2c:	4252      	negs	r2, r2
    ce2e:	e7f1      	b.n	ce14 <recv+0x68>
    ce30:	2206      	movs	r2, #6
    ce32:	4252      	negs	r2, r2
    ce34:	e7ee      	b.n	ce14 <recv+0x68>
    ce36:	46c0      	nop			; (mov r8, r8)
    ce38:	20005c20 	.word	0x20005c20
    ce3c:	0000a1e9 	.word	0x0000a1e9

0000ce40 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    ce40:	b530      	push	{r4, r5, lr}
    ce42:	b087      	sub	sp, #28
    ce44:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    ce46:	481d      	ldr	r0, [pc, #116]	; (cebc <close+0x7c>)
    ce48:	4d1d      	ldr	r5, [pc, #116]	; (cec0 <close+0x80>)
    ce4a:	47a8      	blx	r5
    ce4c:	0021      	movs	r1, r4
    ce4e:	481d      	ldr	r0, [pc, #116]	; (cec4 <close+0x84>)
    ce50:	47a8      	blx	r5
    ce52:	481d      	ldr	r0, [pc, #116]	; (cec8 <close+0x88>)
    ce54:	47a8      	blx	r5
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    ce56:	2c00      	cmp	r4, #0
    ce58:	db2a      	blt.n	ceb0 <close+0x70>
    ce5a:	0122      	lsls	r2, r4, #4
    ce5c:	4b1b      	ldr	r3, [pc, #108]	; (cecc <close+0x8c>)
    ce5e:	189b      	adds	r3, r3, r2
    ce60:	7a9b      	ldrb	r3, [r3, #10]
    ce62:	2b01      	cmp	r3, #1
    ce64:	d127      	bne.n	ceb6 <close+0x76>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    ce66:	a905      	add	r1, sp, #20
    ce68:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    ce6a:	4b18      	ldr	r3, [pc, #96]	; (cecc <close+0x8c>)
    ce6c:	189b      	adds	r3, r3, r2
    ce6e:	88da      	ldrh	r2, [r3, #6]
    ce70:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    ce72:	2200      	movs	r2, #0
    ce74:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    ce76:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    ce78:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    ce7a:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    ce7c:	07db      	lsls	r3, r3, #31
    ce7e:	d500      	bpl.n	ce82 <close+0x42>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    ce80:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    ce82:	2300      	movs	r3, #0
    ce84:	9302      	str	r3, [sp, #8]
    ce86:	9301      	str	r3, [sp, #4]
    ce88:	9300      	str	r3, [sp, #0]
    ce8a:	3304      	adds	r3, #4
    ce8c:	aa05      	add	r2, sp, #20
    ce8e:	2002      	movs	r0, #2
    ce90:	4d0f      	ldr	r5, [pc, #60]	; (ced0 <close+0x90>)
    ce92:	47a8      	blx	r5
    ce94:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    ce96:	d001      	beq.n	ce9c <close+0x5c>
		{
			s8Ret = SOCK_ERR_INVALID;
    ce98:	2509      	movs	r5, #9
    ce9a:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    ce9c:	0124      	lsls	r4, r4, #4
    ce9e:	480b      	ldr	r0, [pc, #44]	; (cecc <close+0x8c>)
    cea0:	1820      	adds	r0, r4, r0
    cea2:	2210      	movs	r2, #16
    cea4:	2100      	movs	r1, #0
    cea6:	4b0b      	ldr	r3, [pc, #44]	; (ced4 <close+0x94>)
    cea8:	4798      	blx	r3
	}
	return s8Ret;
}
    ceaa:	0028      	movs	r0, r5
    ceac:	b007      	add	sp, #28
    ceae:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    ceb0:	2506      	movs	r5, #6
    ceb2:	426d      	negs	r5, r5
    ceb4:	e7f9      	b.n	ceaa <close+0x6a>
    ceb6:	2506      	movs	r5, #6
    ceb8:	426d      	negs	r5, r5
    ceba:	e7f6      	b.n	ceaa <close+0x6a>
    cebc:	0001a8b0 	.word	0x0001a8b0
    cec0:	00008bdd 	.word	0x00008bdd
    cec4:	0001b364 	.word	0x0001b364
    cec8:	0001a59c 	.word	0x0001a59c
    cecc:	20005c20 	.word	0x20005c20
    ced0:	0000a1e9 	.word	0x0000a1e9
    ced4:	0000a0d5 	.word	0x0000a0d5

0000ced8 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    ced8:	b570      	push	{r4, r5, r6, lr}
    ceda:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    cedc:	2300      	movs	r3, #0
    cede:	9301      	str	r3, [sp, #4]
    cee0:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    cee2:	2100      	movs	r1, #0
    cee4:	7802      	ldrb	r2, [r0, #0]
    cee6:	1c44      	adds	r4, r0, #1
    cee8:	3005      	adds	r0, #5
    ceea:	000b      	movs	r3, r1
    ceec:	e009      	b.n	cf02 <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    ceee:	009d      	lsls	r5, r3, #2
    cef0:	195b      	adds	r3, r3, r5
    cef2:	005b      	lsls	r3, r3, #1
    cef4:	189b      	adds	r3, r3, r2
    cef6:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    cef8:	0022      	movs	r2, r4
    cefa:	3401      	adds	r4, #1
			if(j > 4)
    cefc:	42a0      	cmp	r0, r4
    cefe:	d00a      	beq.n	cf16 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    cf00:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    cf02:	2a2e      	cmp	r2, #46	; 0x2e
    cf04:	d00a      	beq.n	cf1c <nmi_inet_addr+0x44>
    cf06:	2a00      	cmp	r2, #0
    cf08:	d00c      	beq.n	cf24 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    cf0a:	3a30      	subs	r2, #48	; 0x30
    cf0c:	b2d2      	uxtb	r2, r2
    cf0e:	2a09      	cmp	r2, #9
    cf10:	d9ed      	bls.n	ceee <nmi_inet_addr+0x16>
				return 0;
    cf12:	2000      	movs	r0, #0
    cf14:	e000      	b.n	cf18 <nmi_inet_addr+0x40>
				return 0;
    cf16:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    cf18:	b002      	add	sp, #8
    cf1a:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    cf1c:	466a      	mov	r2, sp
    cf1e:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    cf20:	0020      	movs	r0, r4
    cf22:	e002      	b.n	cf2a <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    cf24:	466a      	mov	r2, sp
    cf26:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    cf28:	0020      	movs	r0, r4
    cf2a:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    cf2c:	2e04      	cmp	r6, #4
    cf2e:	d1d9      	bne.n	cee4 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    cf30:	2204      	movs	r2, #4
    cf32:	4669      	mov	r1, sp
    cf34:	a801      	add	r0, sp, #4
    cf36:	4b02      	ldr	r3, [pc, #8]	; (cf40 <nmi_inet_addr+0x68>)
    cf38:	4798      	blx	r3
	return u32IP;
    cf3a:	9801      	ldr	r0, [sp, #4]
    cf3c:	e7ec      	b.n	cf18 <nmi_inet_addr+0x40>
    cf3e:	46c0      	nop			; (mov r8, r8)
    cf40:	0000a0c1 	.word	0x0000a0c1

0000cf44 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    cf44:	b510      	push	{r4, lr}
    cf46:	b084      	sub	sp, #16
    cf48:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    cf4a:	4b0b      	ldr	r3, [pc, #44]	; (cf78 <gethostbyname+0x34>)
    cf4c:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    cf4e:	b2c3      	uxtb	r3, r0
    cf50:	2b40      	cmp	r3, #64	; 0x40
    cf52:	d80d      	bhi.n	cf70 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    cf54:	23ff      	movs	r3, #255	; 0xff
    cf56:	4003      	ands	r3, r0
    cf58:	3301      	adds	r3, #1
    cf5a:	2200      	movs	r2, #0
    cf5c:	9202      	str	r2, [sp, #8]
    cf5e:	9201      	str	r2, [sp, #4]
    cf60:	9200      	str	r2, [sp, #0]
    cf62:	0022      	movs	r2, r4
    cf64:	214a      	movs	r1, #74	; 0x4a
    cf66:	2002      	movs	r0, #2
    cf68:	4c04      	ldr	r4, [pc, #16]	; (cf7c <gethostbyname+0x38>)
    cf6a:	47a0      	blx	r4
	}
	return s8Err;
}
    cf6c:	b004      	add	sp, #16
    cf6e:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    cf70:	2006      	movs	r0, #6
    cf72:	4240      	negs	r0, r0
    cf74:	e7fa      	b.n	cf6c <gethostbyname+0x28>
    cf76:	46c0      	nop			; (mov r8, r8)
    cf78:	0000a0e5 	.word	0x0000a0e5
    cf7c:	0000a1e9 	.word	0x0000a1e9

0000cf80 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    cf80:	b570      	push	{r4, r5, r6, lr}
    cf82:	b082      	sub	sp, #8
    cf84:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    cf86:	4b2a      	ldr	r3, [pc, #168]	; (d030 <spi_flash_enable+0xb0>)
    cf88:	4798      	blx	r3
    cf8a:	0500      	lsls	r0, r0, #20
    cf8c:	0d00      	lsrs	r0, r0, #20
    cf8e:	4b29      	ldr	r3, [pc, #164]	; (d034 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    cf90:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    cf92:	4298      	cmp	r0, r3
    cf94:	d802      	bhi.n	cf9c <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    cf96:	0028      	movs	r0, r5
    cf98:	b002      	add	sp, #8
    cf9a:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    cf9c:	a901      	add	r1, sp, #4
    cf9e:	4826      	ldr	r0, [pc, #152]	; (d038 <spi_flash_enable+0xb8>)
    cfa0:	4b26      	ldr	r3, [pc, #152]	; (d03c <spi_flash_enable+0xbc>)
    cfa2:	4798      	blx	r3
    cfa4:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    cfa6:	d1f6      	bne.n	cf96 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    cfa8:	4b25      	ldr	r3, [pc, #148]	; (d040 <spi_flash_enable+0xc0>)
    cfaa:	9a01      	ldr	r2, [sp, #4]
    cfac:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    cfae:	4925      	ldr	r1, [pc, #148]	; (d044 <spi_flash_enable+0xc4>)
    cfb0:	4319      	orrs	r1, r3
    cfb2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    cfb4:	4820      	ldr	r0, [pc, #128]	; (d038 <spi_flash_enable+0xb8>)
    cfb6:	4b24      	ldr	r3, [pc, #144]	; (d048 <spi_flash_enable+0xc8>)
    cfb8:	4798      	blx	r3
		if(enable) {
    cfba:	2c00      	cmp	r4, #0
    cfbc:	d020      	beq.n	d000 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    cfbe:	2100      	movs	r1, #0
    cfc0:	4822      	ldr	r0, [pc, #136]	; (d04c <spi_flash_enable+0xcc>)
    cfc2:	4c21      	ldr	r4, [pc, #132]	; (d048 <spi_flash_enable+0xc8>)
    cfc4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    cfc6:	21ab      	movs	r1, #171	; 0xab
    cfc8:	4821      	ldr	r0, [pc, #132]	; (d050 <spi_flash_enable+0xd0>)
    cfca:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    cfcc:	2101      	movs	r1, #1
    cfce:	4821      	ldr	r0, [pc, #132]	; (d054 <spi_flash_enable+0xd4>)
    cfd0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    cfd2:	2100      	movs	r1, #0
    cfd4:	4820      	ldr	r0, [pc, #128]	; (d058 <spi_flash_enable+0xd8>)
    cfd6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    cfd8:	2181      	movs	r1, #129	; 0x81
    cfda:	4820      	ldr	r0, [pc, #128]	; (d05c <spi_flash_enable+0xdc>)
    cfdc:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    cfde:	4e20      	ldr	r6, [pc, #128]	; (d060 <spi_flash_enable+0xe0>)
    cfe0:	4c20      	ldr	r4, [pc, #128]	; (d064 <spi_flash_enable+0xe4>)
    cfe2:	0030      	movs	r0, r6
    cfe4:	47a0      	blx	r4
    cfe6:	2801      	cmp	r0, #1
    cfe8:	d1fb      	bne.n	cfe2 <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    cfea:	4b15      	ldr	r3, [pc, #84]	; (d040 <spi_flash_enable+0xc0>)
    cfec:	9a01      	ldr	r2, [sp, #4]
    cfee:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    cff0:	2180      	movs	r1, #128	; 0x80
    cff2:	0249      	lsls	r1, r1, #9
    cff4:	4319      	orrs	r1, r3
    cff6:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    cff8:	480f      	ldr	r0, [pc, #60]	; (d038 <spi_flash_enable+0xb8>)
    cffa:	4b13      	ldr	r3, [pc, #76]	; (d048 <spi_flash_enable+0xc8>)
    cffc:	4798      	blx	r3
    cffe:	e7ca      	b.n	cf96 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    d000:	2100      	movs	r1, #0
    d002:	4812      	ldr	r0, [pc, #72]	; (d04c <spi_flash_enable+0xcc>)
    d004:	4c10      	ldr	r4, [pc, #64]	; (d048 <spi_flash_enable+0xc8>)
    d006:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    d008:	21b9      	movs	r1, #185	; 0xb9
    d00a:	4811      	ldr	r0, [pc, #68]	; (d050 <spi_flash_enable+0xd0>)
    d00c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    d00e:	2101      	movs	r1, #1
    d010:	4810      	ldr	r0, [pc, #64]	; (d054 <spi_flash_enable+0xd4>)
    d012:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    d014:	2100      	movs	r1, #0
    d016:	4810      	ldr	r0, [pc, #64]	; (d058 <spi_flash_enable+0xd8>)
    d018:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    d01a:	2181      	movs	r1, #129	; 0x81
    d01c:	480f      	ldr	r0, [pc, #60]	; (d05c <spi_flash_enable+0xdc>)
    d01e:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    d020:	4e0f      	ldr	r6, [pc, #60]	; (d060 <spi_flash_enable+0xe0>)
    d022:	4c10      	ldr	r4, [pc, #64]	; (d064 <spi_flash_enable+0xe4>)
    d024:	0030      	movs	r0, r6
    d026:	47a0      	blx	r4
    d028:	2801      	cmp	r0, #1
    d02a:	d1fb      	bne.n	d024 <spi_flash_enable+0xa4>
    d02c:	e7dd      	b.n	cfea <spi_flash_enable+0x6a>
    d02e:	46c0      	nop			; (mov r8, r8)
    d030:	0000b059 	.word	0x0000b059
    d034:	0000039f 	.word	0x0000039f
    d038:	00001410 	.word	0x00001410
    d03c:	0000b491 	.word	0x0000b491
    d040:	f8888fff 	.word	0xf8888fff
    d044:	01111000 	.word	0x01111000
    d048:	0000b49d 	.word	0x0000b49d
    d04c:	00010208 	.word	0x00010208
    d050:	0001020c 	.word	0x0001020c
    d054:	00010214 	.word	0x00010214
    d058:	0001021c 	.word	0x0001021c
    d05c:	00010204 	.word	0x00010204
    d060:	00010218 	.word	0x00010218
    d064:	0000b485 	.word	0x0000b485

0000d068 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    d068:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    d06a:	2301      	movs	r3, #1
    d06c:	2800      	cmp	r0, #0
    d06e:	d001      	beq.n	d074 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    d070:	0018      	movs	r0, r3
    d072:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    d074:	4b01      	ldr	r3, [pc, #4]	; (d07c <mem_test_unit_ready+0x14>)
    d076:	4798      	blx	r3
    d078:	0003      	movs	r3, r0
    d07a:	e7f9      	b.n	d070 <mem_test_unit_ready+0x8>
    d07c:	0000949d 	.word	0x0000949d

0000d080 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    d080:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    d082:	2301      	movs	r3, #1
    d084:	2800      	cmp	r0, #0
    d086:	d001      	beq.n	d08c <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    d088:	0018      	movs	r0, r3
    d08a:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    d08c:	0008      	movs	r0, r1
    d08e:	4b02      	ldr	r3, [pc, #8]	; (d098 <mem_read_capacity+0x18>)
    d090:	4798      	blx	r3
    d092:	0003      	movs	r3, r0
    d094:	e7f8      	b.n	d088 <mem_read_capacity+0x8>
    d096:	46c0      	nop			; (mov r8, r8)
    d098:	000094cd 	.word	0x000094cd

0000d09c <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    d09c:	4243      	negs	r3, r0
    d09e:	4158      	adcs	r0, r3
    d0a0:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    d0a2:	4770      	bx	lr

0000d0a4 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    d0a4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    d0a6:	2301      	movs	r3, #1
    d0a8:	2800      	cmp	r0, #0
    d0aa:	d001      	beq.n	d0b0 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    d0ac:	0018      	movs	r0, r3
    d0ae:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    d0b0:	4b01      	ldr	r3, [pc, #4]	; (d0b8 <mem_wr_protect+0x14>)
    d0b2:	4798      	blx	r3
    d0b4:	0003      	movs	r3, r0
    d0b6:	e7f9      	b.n	d0ac <mem_wr_protect+0x8>
    d0b8:	000094dd 	.word	0x000094dd

0000d0bc <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    d0bc:	b510      	push	{r4, lr}
    d0be:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    d0c0:	2301      	movs	r3, #1
    d0c2:	2800      	cmp	r0, #0
    d0c4:	d001      	beq.n	d0ca <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    d0c6:	0018      	movs	r0, r3
    d0c8:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    d0ca:	0011      	movs	r1, r2
    d0cc:	0020      	movs	r0, r4
    d0ce:	4b02      	ldr	r3, [pc, #8]	; (d0d8 <memory_2_ram+0x1c>)
    d0d0:	4798      	blx	r3
    d0d2:	0003      	movs	r3, r0
    d0d4:	e7f7      	b.n	d0c6 <memory_2_ram+0xa>
    d0d6:	46c0      	nop			; (mov r8, r8)
    d0d8:	00009531 	.word	0x00009531

0000d0dc <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    d0dc:	b510      	push	{r4, lr}
    d0de:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    d0e0:	2301      	movs	r3, #1
    d0e2:	2800      	cmp	r0, #0
    d0e4:	d001      	beq.n	d0ea <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    d0e6:	0018      	movs	r0, r3
    d0e8:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    d0ea:	0011      	movs	r1, r2
    d0ec:	0020      	movs	r0, r4
    d0ee:	4b02      	ldr	r3, [pc, #8]	; (d0f8 <ram_2_memory+0x1c>)
    d0f0:	4798      	blx	r3
    d0f2:	0003      	movs	r3, r0
    d0f4:	e7f7      	b.n	d0e6 <ram_2_memory+0xa>
    d0f6:	46c0      	nop			; (mov r8, r8)
    d0f8:	00009589 	.word	0x00009589

0000d0fc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    d0fc:	4b0c      	ldr	r3, [pc, #48]	; (d130 <cpu_irq_enter_critical+0x34>)
    d0fe:	681b      	ldr	r3, [r3, #0]
    d100:	2b00      	cmp	r3, #0
    d102:	d106      	bne.n	d112 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d104:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    d108:	2b00      	cmp	r3, #0
    d10a:	d007      	beq.n	d11c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    d10c:	2200      	movs	r2, #0
    d10e:	4b09      	ldr	r3, [pc, #36]	; (d134 <cpu_irq_enter_critical+0x38>)
    d110:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    d112:	4a07      	ldr	r2, [pc, #28]	; (d130 <cpu_irq_enter_critical+0x34>)
    d114:	6813      	ldr	r3, [r2, #0]
    d116:	3301      	adds	r3, #1
    d118:	6013      	str	r3, [r2, #0]
}
    d11a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    d11c:	b672      	cpsid	i
    d11e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    d122:	2200      	movs	r2, #0
    d124:	4b04      	ldr	r3, [pc, #16]	; (d138 <cpu_irq_enter_critical+0x3c>)
    d126:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    d128:	3201      	adds	r2, #1
    d12a:	4b02      	ldr	r3, [pc, #8]	; (d134 <cpu_irq_enter_critical+0x38>)
    d12c:	701a      	strb	r2, [r3, #0]
    d12e:	e7f0      	b.n	d112 <cpu_irq_enter_critical+0x16>
    d130:	20004138 	.word	0x20004138
    d134:	2000413c 	.word	0x2000413c
    d138:	20000226 	.word	0x20000226

0000d13c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    d13c:	4b08      	ldr	r3, [pc, #32]	; (d160 <cpu_irq_leave_critical+0x24>)
    d13e:	681a      	ldr	r2, [r3, #0]
    d140:	3a01      	subs	r2, #1
    d142:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    d144:	681b      	ldr	r3, [r3, #0]
    d146:	2b00      	cmp	r3, #0
    d148:	d109      	bne.n	d15e <cpu_irq_leave_critical+0x22>
    d14a:	4b06      	ldr	r3, [pc, #24]	; (d164 <cpu_irq_leave_critical+0x28>)
    d14c:	781b      	ldrb	r3, [r3, #0]
    d14e:	2b00      	cmp	r3, #0
    d150:	d005      	beq.n	d15e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    d152:	2201      	movs	r2, #1
    d154:	4b04      	ldr	r3, [pc, #16]	; (d168 <cpu_irq_leave_critical+0x2c>)
    d156:	701a      	strb	r2, [r3, #0]
    d158:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d15c:	b662      	cpsie	i
	}
}
    d15e:	4770      	bx	lr
    d160:	20004138 	.word	0x20004138
    d164:	2000413c 	.word	0x2000413c
    d168:	20000226 	.word	0x20000226

0000d16c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    d16c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d16e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    d170:	ac01      	add	r4, sp, #4
    d172:	2501      	movs	r5, #1
    d174:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    d176:	2700      	movs	r7, #0
    d178:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    d17a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    d17c:	0021      	movs	r1, r4
    d17e:	2017      	movs	r0, #23
    d180:	4e06      	ldr	r6, [pc, #24]	; (d19c <system_board_init+0x30>)
    d182:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    d184:	2280      	movs	r2, #128	; 0x80
    d186:	0412      	lsls	r2, r2, #16
    d188:	4b05      	ldr	r3, [pc, #20]	; (d1a0 <system_board_init+0x34>)
    d18a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    d18c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    d18e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    d190:	0021      	movs	r1, r4
    d192:	2037      	movs	r0, #55	; 0x37
    d194:	47b0      	blx	r6
}
    d196:	b003      	add	sp, #12
    d198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d19a:	46c0      	nop			; (mov r8, r8)
    d19c:	0000d375 	.word	0x0000d375
    d1a0:	41004400 	.word	0x41004400

0000d1a4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    d1a4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    d1a6:	2a00      	cmp	r2, #0
    d1a8:	d001      	beq.n	d1ae <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    d1aa:	0018      	movs	r0, r3
    d1ac:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    d1ae:	008b      	lsls	r3, r1, #2
    d1b0:	4a06      	ldr	r2, [pc, #24]	; (d1cc <extint_register_callback+0x28>)
    d1b2:	589b      	ldr	r3, [r3, r2]
    d1b4:	2b00      	cmp	r3, #0
    d1b6:	d003      	beq.n	d1c0 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    d1b8:	4283      	cmp	r3, r0
    d1ba:	d005      	beq.n	d1c8 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    d1bc:	231d      	movs	r3, #29
    d1be:	e7f4      	b.n	d1aa <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    d1c0:	0089      	lsls	r1, r1, #2
    d1c2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    d1c4:	2300      	movs	r3, #0
    d1c6:	e7f0      	b.n	d1aa <extint_register_callback+0x6>
		return STATUS_OK;
    d1c8:	2300      	movs	r3, #0
    d1ca:	e7ee      	b.n	d1aa <extint_register_callback+0x6>
    d1cc:	20005ce0 	.word	0x20005ce0

0000d1d0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    d1d0:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    d1d2:	2900      	cmp	r1, #0
    d1d4:	d001      	beq.n	d1da <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    d1d6:	0018      	movs	r0, r3
    d1d8:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    d1da:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    d1dc:	281f      	cmp	r0, #31
    d1de:	d800      	bhi.n	d1e2 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    d1e0:	4a02      	ldr	r2, [pc, #8]	; (d1ec <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    d1e2:	2301      	movs	r3, #1
    d1e4:	4083      	lsls	r3, r0
    d1e6:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    d1e8:	2300      	movs	r3, #0
    d1ea:	e7f4      	b.n	d1d6 <extint_chan_enable_callback+0x6>
    d1ec:	40001800 	.word	0x40001800

0000d1f0 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    d1f0:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    d1f2:	2900      	cmp	r1, #0
    d1f4:	d001      	beq.n	d1fa <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    d1f6:	0018      	movs	r0, r3
    d1f8:	4770      	bx	lr
		return NULL;
    d1fa:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    d1fc:	281f      	cmp	r0, #31
    d1fe:	d800      	bhi.n	d202 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    d200:	4a02      	ldr	r2, [pc, #8]	; (d20c <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    d202:	2301      	movs	r3, #1
    d204:	4083      	lsls	r3, r0
    d206:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    d208:	2300      	movs	r3, #0
    d20a:	e7f4      	b.n	d1f6 <extint_chan_disable_callback+0x6>
    d20c:	40001800 	.word	0x40001800

0000d210 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    d210:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    d212:	2200      	movs	r2, #0
    d214:	4b10      	ldr	r3, [pc, #64]	; (d258 <EIC_Handler+0x48>)
    d216:	701a      	strb	r2, [r3, #0]
    d218:	2300      	movs	r3, #0
    d21a:	4910      	ldr	r1, [pc, #64]	; (d25c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    d21c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    d21e:	4e10      	ldr	r6, [pc, #64]	; (d260 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    d220:	4c0d      	ldr	r4, [pc, #52]	; (d258 <EIC_Handler+0x48>)
    d222:	e00a      	b.n	d23a <EIC_Handler+0x2a>
		return eics[eic_index];
    d224:	490d      	ldr	r1, [pc, #52]	; (d25c <EIC_Handler+0x4c>)
    d226:	e008      	b.n	d23a <EIC_Handler+0x2a>
    d228:	7823      	ldrb	r3, [r4, #0]
    d22a:	3301      	adds	r3, #1
    d22c:	b2db      	uxtb	r3, r3
    d22e:	7023      	strb	r3, [r4, #0]
    d230:	2b0f      	cmp	r3, #15
    d232:	d810      	bhi.n	d256 <EIC_Handler+0x46>
		return NULL;
    d234:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    d236:	2b1f      	cmp	r3, #31
    d238:	d9f4      	bls.n	d224 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    d23a:	0028      	movs	r0, r5
    d23c:	4018      	ands	r0, r3
    d23e:	2201      	movs	r2, #1
    d240:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    d242:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    d244:	4210      	tst	r0, r2
    d246:	d0ef      	beq.n	d228 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    d248:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    d24a:	009b      	lsls	r3, r3, #2
    d24c:	599b      	ldr	r3, [r3, r6]
    d24e:	2b00      	cmp	r3, #0
    d250:	d0ea      	beq.n	d228 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    d252:	4798      	blx	r3
    d254:	e7e8      	b.n	d228 <EIC_Handler+0x18>
			}
		}
	}
}
    d256:	bd70      	pop	{r4, r5, r6, pc}
    d258:	20005cdc 	.word	0x20005cdc
    d25c:	40001800 	.word	0x40001800
    d260:	20005ce0 	.word	0x20005ce0

0000d264 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    d264:	4a04      	ldr	r2, [pc, #16]	; (d278 <_extint_enable+0x14>)
    d266:	7813      	ldrb	r3, [r2, #0]
    d268:	2102      	movs	r1, #2
    d26a:	430b      	orrs	r3, r1
    d26c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    d26e:	7853      	ldrb	r3, [r2, #1]
    d270:	b25b      	sxtb	r3, r3
    d272:	2b00      	cmp	r3, #0
    d274:	dbfb      	blt.n	d26e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    d276:	4770      	bx	lr
    d278:	40001800 	.word	0x40001800

0000d27c <_system_extint_init>:
{
    d27c:	b500      	push	{lr}
    d27e:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    d280:	4a12      	ldr	r2, [pc, #72]	; (d2cc <_system_extint_init+0x50>)
    d282:	6993      	ldr	r3, [r2, #24]
    d284:	2140      	movs	r1, #64	; 0x40
    d286:	430b      	orrs	r3, r1
    d288:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    d28a:	a901      	add	r1, sp, #4
    d28c:	2300      	movs	r3, #0
    d28e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    d290:	2005      	movs	r0, #5
    d292:	4b0f      	ldr	r3, [pc, #60]	; (d2d0 <_system_extint_init+0x54>)
    d294:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    d296:	2005      	movs	r0, #5
    d298:	4b0e      	ldr	r3, [pc, #56]	; (d2d4 <_system_extint_init+0x58>)
    d29a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    d29c:	4a0e      	ldr	r2, [pc, #56]	; (d2d8 <_system_extint_init+0x5c>)
    d29e:	7813      	ldrb	r3, [r2, #0]
    d2a0:	2101      	movs	r1, #1
    d2a2:	430b      	orrs	r3, r1
    d2a4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    d2a6:	7853      	ldrb	r3, [r2, #1]
    d2a8:	b25b      	sxtb	r3, r3
    d2aa:	2b00      	cmp	r3, #0
    d2ac:	dbfb      	blt.n	d2a6 <_system_extint_init+0x2a>
    d2ae:	4b0b      	ldr	r3, [pc, #44]	; (d2dc <_system_extint_init+0x60>)
    d2b0:	0019      	movs	r1, r3
    d2b2:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    d2b4:	2200      	movs	r2, #0
    d2b6:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    d2b8:	4299      	cmp	r1, r3
    d2ba:	d1fc      	bne.n	d2b6 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d2bc:	2210      	movs	r2, #16
    d2be:	4b08      	ldr	r3, [pc, #32]	; (d2e0 <_system_extint_init+0x64>)
    d2c0:	601a      	str	r2, [r3, #0]
	_extint_enable();
    d2c2:	4b08      	ldr	r3, [pc, #32]	; (d2e4 <_system_extint_init+0x68>)
    d2c4:	4798      	blx	r3
}
    d2c6:	b003      	add	sp, #12
    d2c8:	bd00      	pop	{pc}
    d2ca:	46c0      	nop			; (mov r8, r8)
    d2cc:	40000400 	.word	0x40000400
    d2d0:	0000eb81 	.word	0x0000eb81
    d2d4:	0000eaf5 	.word	0x0000eaf5
    d2d8:	40001800 	.word	0x40001800
    d2dc:	20005ce0 	.word	0x20005ce0
    d2e0:	e000e100 	.word	0xe000e100
    d2e4:	0000d265 	.word	0x0000d265

0000d2e8 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    d2e8:	2300      	movs	r3, #0
    d2ea:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    d2ec:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    d2ee:	2201      	movs	r2, #1
    d2f0:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    d2f2:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    d2f4:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    d2f6:	3302      	adds	r3, #2
    d2f8:	72c3      	strb	r3, [r0, #11]
}
    d2fa:	4770      	bx	lr

0000d2fc <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    d2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2fe:	b083      	sub	sp, #12
    d300:	0005      	movs	r5, r0
    d302:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    d304:	a901      	add	r1, sp, #4
    d306:	2300      	movs	r3, #0
    d308:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    d30a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    d30c:	7923      	ldrb	r3, [r4, #4]
    d30e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    d310:	7a23      	ldrb	r3, [r4, #8]
    d312:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    d314:	7820      	ldrb	r0, [r4, #0]
    d316:	4b15      	ldr	r3, [pc, #84]	; (d36c <extint_chan_set_config+0x70>)
    d318:	4798      	blx	r3
		return NULL;
    d31a:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    d31c:	2d1f      	cmp	r5, #31
    d31e:	d800      	bhi.n	d322 <extint_chan_set_config+0x26>
		return eics[eic_index];
    d320:	4813      	ldr	r0, [pc, #76]	; (d370 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    d322:	2207      	movs	r2, #7
    d324:	402a      	ands	r2, r5
    d326:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    d328:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    d32a:	7aa3      	ldrb	r3, [r4, #10]
    d32c:	2b00      	cmp	r3, #0
    d32e:	d001      	beq.n	d334 <extint_chan_set_config+0x38>
    d330:	2308      	movs	r3, #8
    d332:	431f      	orrs	r7, r3
    d334:	08eb      	lsrs	r3, r5, #3
    d336:	009b      	lsls	r3, r3, #2
    d338:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    d33a:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    d33c:	260f      	movs	r6, #15
    d33e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    d340:	43b1      	bics	r1, r6
			(new_config << config_pos);
    d342:	4097      	lsls	r7, r2
    d344:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    d346:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    d348:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    d34a:	7a63      	ldrb	r3, [r4, #9]
    d34c:	2b00      	cmp	r3, #0
    d34e:	d106      	bne.n	d35e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    d350:	6943      	ldr	r3, [r0, #20]
    d352:	2201      	movs	r2, #1
    d354:	40aa      	lsls	r2, r5
    d356:	4393      	bics	r3, r2
    d358:	6143      	str	r3, [r0, #20]
	}
}
    d35a:	b003      	add	sp, #12
    d35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    d35e:	6942      	ldr	r2, [r0, #20]
    d360:	2301      	movs	r3, #1
    d362:	40ab      	lsls	r3, r5
    d364:	4313      	orrs	r3, r2
    d366:	6143      	str	r3, [r0, #20]
    d368:	e7f7      	b.n	d35a <extint_chan_set_config+0x5e>
    d36a:	46c0      	nop			; (mov r8, r8)
    d36c:	0000eca9 	.word	0x0000eca9
    d370:	40001800 	.word	0x40001800

0000d374 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    d374:	b500      	push	{lr}
    d376:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    d378:	ab01      	add	r3, sp, #4
    d37a:	2280      	movs	r2, #128	; 0x80
    d37c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    d37e:	780a      	ldrb	r2, [r1, #0]
    d380:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    d382:	784a      	ldrb	r2, [r1, #1]
    d384:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    d386:	788a      	ldrb	r2, [r1, #2]
    d388:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    d38a:	0019      	movs	r1, r3
    d38c:	4b01      	ldr	r3, [pc, #4]	; (d394 <port_pin_set_config+0x20>)
    d38e:	4798      	blx	r3
}
    d390:	b003      	add	sp, #12
    d392:	bd00      	pop	{pc}
    d394:	0000eca9 	.word	0x0000eca9

0000d398 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d398:	6801      	ldr	r1, [r0, #0]
    d39a:	2208      	movs	r2, #8
    d39c:	4b05      	ldr	r3, [pc, #20]	; (d3b4 <rtc_calendar_enable+0x1c>)
    d39e:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    d3a0:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    d3a2:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    d3a4:	b25b      	sxtb	r3, r3
    d3a6:	2b00      	cmp	r3, #0
    d3a8:	dbfb      	blt.n	d3a2 <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    d3aa:	880b      	ldrh	r3, [r1, #0]
    d3ac:	2202      	movs	r2, #2
    d3ae:	4313      	orrs	r3, r2
    d3b0:	800b      	strh	r3, [r1, #0]
}
    d3b2:	4770      	bx	lr
    d3b4:	e000e100 	.word	0xe000e100

0000d3b8 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    d3b8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d3ba:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d3bc:	2408      	movs	r4, #8
    d3be:	2380      	movs	r3, #128	; 0x80
    d3c0:	4907      	ldr	r1, [pc, #28]	; (d3e0 <rtc_calendar_disable+0x28>)
    d3c2:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
    d3c4:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    d3c6:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    d3c8:	b25b      	sxtb	r3, r3
    d3ca:	2b00      	cmp	r3, #0
    d3cc:	dbfb      	blt.n	d3c6 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    d3ce:	23c1      	movs	r3, #193	; 0xc1
    d3d0:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    d3d2:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    d3d4:	8813      	ldrh	r3, [r2, #0]
    d3d6:	2102      	movs	r1, #2
    d3d8:	438b      	bics	r3, r1
    d3da:	8013      	strh	r3, [r2, #0]
}
    d3dc:	bd10      	pop	{r4, pc}
    d3de:	46c0      	nop			; (mov r8, r8)
    d3e0:	e000e100 	.word	0xe000e100

0000d3e4 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    d3e4:	b570      	push	{r4, r5, r6, lr}
    d3e6:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d3e8:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    d3ea:	4b07      	ldr	r3, [pc, #28]	; (d408 <rtc_calendar_reset+0x24>)
    d3ec:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    d3ee:	2300      	movs	r3, #0
    d3f0:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    d3f2:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
    d3f4:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    d3f6:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
    d3f8:	b25b      	sxtb	r3, r3
    d3fa:	2b00      	cmp	r3, #0
    d3fc:	dbfb      	blt.n	d3f6 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    d3fe:	882b      	ldrh	r3, [r5, #0]
    d400:	2201      	movs	r2, #1
    d402:	4313      	orrs	r3, r2
    d404:	802b      	strh	r3, [r5, #0]
}
    d406:	bd70      	pop	{r4, r5, r6, pc}
    d408:	0000d3b9 	.word	0x0000d3b9

0000d40c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    d40c:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    d40e:	88cb      	ldrh	r3, [r1, #6]
    d410:	88c2      	ldrh	r2, [r0, #6]
    d412:	1a9a      	subs	r2, r3, r2
    d414:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    d416:	794b      	ldrb	r3, [r1, #5]
    d418:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    d41a:	790c      	ldrb	r4, [r1, #4]
    d41c:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    d41e:	4323      	orrs	r3, r4
    d420:	788c      	ldrb	r4, [r1, #2]
    d422:	0324      	lsls	r4, r4, #12
    d424:	4323      	orrs	r3, r4
    d426:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    d428:	7902      	ldrb	r2, [r0, #4]
    d42a:	2a00      	cmp	r2, #0
    d42c:	d105      	bne.n	d43a <rtc_calendar_time_to_register_value+0x2e>
    d42e:	78ca      	ldrb	r2, [r1, #3]
    d430:	2a00      	cmp	r2, #0
    d432:	d002      	beq.n	d43a <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    d434:	2280      	movs	r2, #128	; 0x80
    d436:	0252      	lsls	r2, r2, #9
    d438:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    d43a:	7848      	ldrb	r0, [r1, #1]
    d43c:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    d43e:	780a      	ldrb	r2, [r1, #0]
    d440:	4310      	orrs	r0, r2
    d442:	4318      	orrs	r0, r3

	return register_value;
}
    d444:	bd10      	pop	{r4, pc}

0000d446 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    d446:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    d448:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    d44a:	88c4      	ldrh	r4, [r0, #6]
    d44c:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    d44e:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    d450:	018b      	lsls	r3, r1, #6
    d452:	0f1b      	lsrs	r3, r3, #28
    d454:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    d456:	028b      	lsls	r3, r1, #10
    d458:	0edb      	lsrs	r3, r3, #27
    d45a:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    d45c:	7903      	ldrb	r3, [r0, #4]
    d45e:	2b00      	cmp	r3, #0
    d460:	d10c      	bne.n	d47c <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    d462:	040b      	lsls	r3, r1, #16
    d464:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    d466:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    d468:	03cb      	lsls	r3, r1, #15
    d46a:	0fdb      	lsrs	r3, r3, #31
    d46c:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    d46e:	0988      	lsrs	r0, r1, #6
    d470:	233f      	movs	r3, #63	; 0x3f
    d472:	4018      	ands	r0, r3
    d474:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    d476:	4019      	ands	r1, r3
    d478:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    d47a:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    d47c:	03cb      	lsls	r3, r1, #15
    d47e:	0edb      	lsrs	r3, r3, #27
    d480:	7093      	strb	r3, [r2, #2]
    d482:	e7f4      	b.n	d46e <rtc_calendar_register_value_to_time+0x28>

0000d484 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    d484:	b510      	push	{r4, lr}
    d486:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d488:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    d48a:	7941      	ldrb	r1, [r0, #5]
    d48c:	2900      	cmp	r1, #0
    d48e:	d006      	beq.n	d49e <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    d490:	8859      	ldrh	r1, [r3, #2]
    d492:	0449      	lsls	r1, r1, #17
    d494:	d50b      	bpl.n	d4ae <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    d496:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    d498:	4b0a      	ldr	r3, [pc, #40]	; (d4c4 <rtc_calendar_get_time+0x40>)
    d49a:	4798      	blx	r3
}
    d49c:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    d49e:	490a      	ldr	r1, [pc, #40]	; (d4c8 <rtc_calendar_get_time+0x44>)
    d4a0:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    d4a2:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    d4a4:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    d4a6:	b249      	sxtb	r1, r1
    d4a8:	2900      	cmp	r1, #0
    d4aa:	dbfb      	blt.n	d4a4 <rtc_calendar_get_time+0x20>
    d4ac:	e7f3      	b.n	d496 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    d4ae:	8859      	ldrh	r1, [r3, #2]
    d4b0:	24c0      	movs	r4, #192	; 0xc0
    d4b2:	0224      	lsls	r4, r4, #8
    d4b4:	4321      	orrs	r1, r4
    d4b6:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    d4b8:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    d4ba:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    d4bc:	b249      	sxtb	r1, r1
    d4be:	2900      	cmp	r1, #0
    d4c0:	dbfb      	blt.n	d4ba <rtc_calendar_get_time+0x36>
    d4c2:	e7e8      	b.n	d496 <rtc_calendar_get_time+0x12>
    d4c4:	0000d447 	.word	0x0000d447
    d4c8:	ffff8000 	.word	0xffff8000

0000d4cc <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    d4cc:	b570      	push	{r4, r5, r6, lr}
    d4ce:	000d      	movs	r5, r1
    d4d0:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    d4d2:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    d4d4:	2a01      	cmp	r2, #1
    d4d6:	d901      	bls.n	d4dc <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    d4d8:	0018      	movs	r0, r3
    d4da:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    d4dc:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    d4de:	4b06      	ldr	r3, [pc, #24]	; (d4f8 <rtc_calendar_set_alarm+0x2c>)
    d4e0:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    d4e2:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    d4e4:	b25b      	sxtb	r3, r3
    d4e6:	2b00      	cmp	r3, #0
    d4e8:	dbfb      	blt.n	d4e2 <rtc_calendar_set_alarm+0x16>
    d4ea:	00e4      	lsls	r4, r4, #3
    d4ec:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    d4ee:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    d4f0:	7a2b      	ldrb	r3, [r5, #8]
    d4f2:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    d4f4:	2300      	movs	r3, #0
    d4f6:	e7ef      	b.n	d4d8 <rtc_calendar_set_alarm+0xc>
    d4f8:	0000d40d 	.word	0x0000d40d

0000d4fc <rtc_calendar_init>:
{
    d4fc:	b530      	push	{r4, r5, lr}
    d4fe:	b083      	sub	sp, #12
    d500:	0005      	movs	r5, r0
    d502:	0014      	movs	r4, r2
	module->hw = hw;
    d504:	6001      	str	r1, [r0, #0]
    d506:	4a1c      	ldr	r2, [pc, #112]	; (d578 <rtc_calendar_init+0x7c>)
    d508:	6993      	ldr	r3, [r2, #24]
    d50a:	2120      	movs	r1, #32
    d50c:	430b      	orrs	r3, r1
    d50e:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    d510:	a901      	add	r1, sp, #4
    d512:	2302      	movs	r3, #2
    d514:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    d516:	2004      	movs	r0, #4
    d518:	4b18      	ldr	r3, [pc, #96]	; (d57c <rtc_calendar_init+0x80>)
    d51a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    d51c:	2004      	movs	r0, #4
    d51e:	4b18      	ldr	r3, [pc, #96]	; (d580 <rtc_calendar_init+0x84>)
    d520:	4798      	blx	r3
	rtc_calendar_reset(module);
    d522:	0028      	movs	r0, r5
    d524:	4b17      	ldr	r3, [pc, #92]	; (d584 <rtc_calendar_init+0x88>)
    d526:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    d528:	7923      	ldrb	r3, [r4, #4]
    d52a:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    d52c:	78e3      	ldrb	r3, [r4, #3]
    d52e:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    d530:	88e3      	ldrh	r3, [r4, #6]
    d532:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    d534:	4b14      	ldr	r3, [pc, #80]	; (d588 <rtc_calendar_init+0x8c>)
    d536:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    d538:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    d53a:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    d53c:	7921      	ldrb	r1, [r4, #4]
    d53e:	2900      	cmp	r1, #0
    d540:	d017      	beq.n	d572 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    d542:	2108      	movs	r1, #8
    d544:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    d546:	78a1      	ldrb	r1, [r4, #2]
    d548:	2900      	cmp	r1, #0
    d54a:	d001      	beq.n	d550 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    d54c:	2180      	movs	r1, #128	; 0x80
    d54e:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    d550:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    d552:	78e3      	ldrb	r3, [r4, #3]
    d554:	2b00      	cmp	r3, #0
    d556:	d004      	beq.n	d562 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    d558:	8853      	ldrh	r3, [r2, #2]
    d55a:	2180      	movs	r1, #128	; 0x80
    d55c:	01c9      	lsls	r1, r1, #7
    d55e:	430b      	orrs	r3, r1
    d560:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    d562:	0021      	movs	r1, r4
    d564:	3108      	adds	r1, #8
    d566:	2200      	movs	r2, #0
    d568:	0028      	movs	r0, r5
    d56a:	4b08      	ldr	r3, [pc, #32]	; (d58c <rtc_calendar_init+0x90>)
    d56c:	4798      	blx	r3
}
    d56e:	b003      	add	sp, #12
    d570:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    d572:	2148      	movs	r1, #72	; 0x48
    d574:	430b      	orrs	r3, r1
    d576:	e7e6      	b.n	d546 <rtc_calendar_init+0x4a>
    d578:	40000400 	.word	0x40000400
    d57c:	0000eb81 	.word	0x0000eb81
    d580:	0000eaf5 	.word	0x0000eaf5
    d584:	0000d3e5 	.word	0x0000d3e5
    d588:	20005d20 	.word	0x20005d20
    d58c:	0000d4cd 	.word	0x0000d4cd

0000d590 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    d590:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    d592:	4b0f      	ldr	r3, [pc, #60]	; (d5d0 <RTC_Handler+0x40>)
    d594:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    d596:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    d598:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    d59a:	8a13      	ldrh	r3, [r2, #16]
    d59c:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    d59e:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    d5a0:	79e3      	ldrb	r3, [r4, #7]
    d5a2:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    d5a4:	b258      	sxtb	r0, r3
    d5a6:	2800      	cmp	r0, #0
    d5a8:	db06      	blt.n	d5b8 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    d5aa:	07db      	lsls	r3, r3, #31
    d5ac:	d503      	bpl.n	d5b6 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    d5ae:	07cb      	lsls	r3, r1, #31
    d5b0:	d40a      	bmi.n	d5c8 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    d5b2:	2301      	movs	r3, #1
    d5b4:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    d5b6:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    d5b8:	078b      	lsls	r3, r1, #30
    d5ba:	d402      	bmi.n	d5c2 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    d5bc:	2380      	movs	r3, #128	; 0x80
    d5be:	7223      	strb	r3, [r4, #8]
    d5c0:	e7f9      	b.n	d5b6 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    d5c2:	68d3      	ldr	r3, [r2, #12]
    d5c4:	4798      	blx	r3
    d5c6:	e7f9      	b.n	d5bc <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    d5c8:	6893      	ldr	r3, [r2, #8]
    d5ca:	4798      	blx	r3
    d5cc:	e7f1      	b.n	d5b2 <RTC_Handler+0x22>
    d5ce:	46c0      	nop			; (mov r8, r8)
    d5d0:	20005d20 	.word	0x20005d20

0000d5d4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    d5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5d6:	46de      	mov	lr, fp
    d5d8:	4657      	mov	r7, sl
    d5da:	464e      	mov	r6, r9
    d5dc:	4645      	mov	r5, r8
    d5de:	b5e0      	push	{r5, r6, r7, lr}
    d5e0:	b087      	sub	sp, #28
    d5e2:	4680      	mov	r8, r0
    d5e4:	9104      	str	r1, [sp, #16]
    d5e6:	0016      	movs	r6, r2
    d5e8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    d5ea:	2200      	movs	r2, #0
    d5ec:	2300      	movs	r3, #0
    d5ee:	2100      	movs	r1, #0
    d5f0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    d5f2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    d5f4:	2001      	movs	r0, #1
    d5f6:	0021      	movs	r1, r4
    d5f8:	9600      	str	r6, [sp, #0]
    d5fa:	9701      	str	r7, [sp, #4]
    d5fc:	465c      	mov	r4, fp
    d5fe:	9403      	str	r4, [sp, #12]
    d600:	4644      	mov	r4, r8
    d602:	9405      	str	r4, [sp, #20]
    d604:	e013      	b.n	d62e <long_division+0x5a>
    d606:	2420      	movs	r4, #32
    d608:	1a64      	subs	r4, r4, r1
    d60a:	0005      	movs	r5, r0
    d60c:	40e5      	lsrs	r5, r4
    d60e:	46a8      	mov	r8, r5
    d610:	e014      	b.n	d63c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    d612:	9c00      	ldr	r4, [sp, #0]
    d614:	9d01      	ldr	r5, [sp, #4]
    d616:	1b12      	subs	r2, r2, r4
    d618:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    d61a:	465c      	mov	r4, fp
    d61c:	464d      	mov	r5, r9
    d61e:	432c      	orrs	r4, r5
    d620:	46a3      	mov	fp, r4
    d622:	9c03      	ldr	r4, [sp, #12]
    d624:	4645      	mov	r5, r8
    d626:	432c      	orrs	r4, r5
    d628:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    d62a:	3901      	subs	r1, #1
    d62c:	d325      	bcc.n	d67a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    d62e:	2420      	movs	r4, #32
    d630:	4264      	negs	r4, r4
    d632:	190c      	adds	r4, r1, r4
    d634:	d4e7      	bmi.n	d606 <long_division+0x32>
    d636:	0005      	movs	r5, r0
    d638:	40a5      	lsls	r5, r4
    d63a:	46a8      	mov	r8, r5
    d63c:	0004      	movs	r4, r0
    d63e:	408c      	lsls	r4, r1
    d640:	46a1      	mov	r9, r4
		r = r << 1;
    d642:	1892      	adds	r2, r2, r2
    d644:	415b      	adcs	r3, r3
    d646:	0014      	movs	r4, r2
    d648:	001d      	movs	r5, r3
		if (n & bit_shift) {
    d64a:	9e05      	ldr	r6, [sp, #20]
    d64c:	464f      	mov	r7, r9
    d64e:	403e      	ands	r6, r7
    d650:	46b4      	mov	ip, r6
    d652:	9e04      	ldr	r6, [sp, #16]
    d654:	4647      	mov	r7, r8
    d656:	403e      	ands	r6, r7
    d658:	46b2      	mov	sl, r6
    d65a:	4666      	mov	r6, ip
    d65c:	4657      	mov	r7, sl
    d65e:	433e      	orrs	r6, r7
    d660:	d003      	beq.n	d66a <long_division+0x96>
			r |= 0x01;
    d662:	0006      	movs	r6, r0
    d664:	4326      	orrs	r6, r4
    d666:	0032      	movs	r2, r6
    d668:	002b      	movs	r3, r5
		if (r >= d) {
    d66a:	9c00      	ldr	r4, [sp, #0]
    d66c:	9d01      	ldr	r5, [sp, #4]
    d66e:	429d      	cmp	r5, r3
    d670:	d8db      	bhi.n	d62a <long_division+0x56>
    d672:	d1ce      	bne.n	d612 <long_division+0x3e>
    d674:	4294      	cmp	r4, r2
    d676:	d8d8      	bhi.n	d62a <long_division+0x56>
    d678:	e7cb      	b.n	d612 <long_division+0x3e>
    d67a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    d67c:	4658      	mov	r0, fp
    d67e:	0019      	movs	r1, r3
    d680:	b007      	add	sp, #28
    d682:	bc3c      	pop	{r2, r3, r4, r5}
    d684:	4690      	mov	r8, r2
    d686:	4699      	mov	r9, r3
    d688:	46a2      	mov	sl, r4
    d68a:	46ab      	mov	fp, r5
    d68c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d68e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    d68e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    d690:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d692:	2340      	movs	r3, #64	; 0x40
    d694:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    d696:	4281      	cmp	r1, r0
    d698:	d202      	bcs.n	d6a0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    d69a:	0018      	movs	r0, r3
    d69c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    d69e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    d6a0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    d6a2:	1c63      	adds	r3, r4, #1
    d6a4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    d6a6:	4288      	cmp	r0, r1
    d6a8:	d9f9      	bls.n	d69e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d6aa:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    d6ac:	2cff      	cmp	r4, #255	; 0xff
    d6ae:	d8f4      	bhi.n	d69a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    d6b0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    d6b2:	2300      	movs	r3, #0
    d6b4:	e7f1      	b.n	d69a <_sercom_get_sync_baud_val+0xc>
	...

0000d6b8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    d6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6ba:	b083      	sub	sp, #12
    d6bc:	000f      	movs	r7, r1
    d6be:	0016      	movs	r6, r2
    d6c0:	aa08      	add	r2, sp, #32
    d6c2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    d6c4:	0004      	movs	r4, r0
    d6c6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d6c8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    d6ca:	42bc      	cmp	r4, r7
    d6cc:	d902      	bls.n	d6d4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    d6ce:	0010      	movs	r0, r2
    d6d0:	b003      	add	sp, #12
    d6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    d6d4:	2b00      	cmp	r3, #0
    d6d6:	d114      	bne.n	d702 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    d6d8:	0002      	movs	r2, r0
    d6da:	0008      	movs	r0, r1
    d6dc:	2100      	movs	r1, #0
    d6de:	4c19      	ldr	r4, [pc, #100]	; (d744 <_sercom_get_async_baud_val+0x8c>)
    d6e0:	47a0      	blx	r4
    d6e2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    d6e4:	003a      	movs	r2, r7
    d6e6:	2300      	movs	r3, #0
    d6e8:	2000      	movs	r0, #0
    d6ea:	4c17      	ldr	r4, [pc, #92]	; (d748 <_sercom_get_async_baud_val+0x90>)
    d6ec:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    d6ee:	2200      	movs	r2, #0
    d6f0:	2301      	movs	r3, #1
    d6f2:	1a12      	subs	r2, r2, r0
    d6f4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    d6f6:	0c12      	lsrs	r2, r2, #16
    d6f8:	041b      	lsls	r3, r3, #16
    d6fa:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    d6fc:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    d6fe:	2200      	movs	r2, #0
    d700:	e7e5      	b.n	d6ce <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    d702:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    d704:	2b01      	cmp	r3, #1
    d706:	d1f9      	bne.n	d6fc <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    d708:	000a      	movs	r2, r1
    d70a:	2300      	movs	r3, #0
    d70c:	2100      	movs	r1, #0
    d70e:	4c0d      	ldr	r4, [pc, #52]	; (d744 <_sercom_get_async_baud_val+0x8c>)
    d710:	47a0      	blx	r4
    d712:	0002      	movs	r2, r0
    d714:	000b      	movs	r3, r1
    d716:	9200      	str	r2, [sp, #0]
    d718:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    d71a:	0038      	movs	r0, r7
    d71c:	2100      	movs	r1, #0
    d71e:	4c0a      	ldr	r4, [pc, #40]	; (d748 <_sercom_get_async_baud_val+0x90>)
    d720:	47a0      	blx	r4
    d722:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    d724:	2380      	movs	r3, #128	; 0x80
    d726:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d728:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    d72a:	4298      	cmp	r0, r3
    d72c:	d8cf      	bhi.n	d6ce <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    d72e:	0f79      	lsrs	r1, r7, #29
    d730:	00f8      	lsls	r0, r7, #3
    d732:	9a00      	ldr	r2, [sp, #0]
    d734:	9b01      	ldr	r3, [sp, #4]
    d736:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    d738:	00ea      	lsls	r2, r5, #3
    d73a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    d73c:	b2d2      	uxtb	r2, r2
    d73e:	0352      	lsls	r2, r2, #13
    d740:	432a      	orrs	r2, r5
    d742:	e7db      	b.n	d6fc <_sercom_get_async_baud_val+0x44>
    d744:	00015bc5 	.word	0x00015bc5
    d748:	0000d5d5 	.word	0x0000d5d5

0000d74c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    d74c:	b510      	push	{r4, lr}
    d74e:	b082      	sub	sp, #8
    d750:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    d752:	4b0e      	ldr	r3, [pc, #56]	; (d78c <sercom_set_gclk_generator+0x40>)
    d754:	781b      	ldrb	r3, [r3, #0]
    d756:	2b00      	cmp	r3, #0
    d758:	d007      	beq.n	d76a <sercom_set_gclk_generator+0x1e>
    d75a:	2900      	cmp	r1, #0
    d75c:	d105      	bne.n	d76a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    d75e:	4b0b      	ldr	r3, [pc, #44]	; (d78c <sercom_set_gclk_generator+0x40>)
    d760:	785b      	ldrb	r3, [r3, #1]
    d762:	4283      	cmp	r3, r0
    d764:	d010      	beq.n	d788 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    d766:	201d      	movs	r0, #29
    d768:	e00c      	b.n	d784 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    d76a:	a901      	add	r1, sp, #4
    d76c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    d76e:	2013      	movs	r0, #19
    d770:	4b07      	ldr	r3, [pc, #28]	; (d790 <sercom_set_gclk_generator+0x44>)
    d772:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    d774:	2013      	movs	r0, #19
    d776:	4b07      	ldr	r3, [pc, #28]	; (d794 <sercom_set_gclk_generator+0x48>)
    d778:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    d77a:	4b04      	ldr	r3, [pc, #16]	; (d78c <sercom_set_gclk_generator+0x40>)
    d77c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    d77e:	2201      	movs	r2, #1
    d780:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    d782:	2000      	movs	r0, #0
}
    d784:	b002      	add	sp, #8
    d786:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    d788:	2000      	movs	r0, #0
    d78a:	e7fb      	b.n	d784 <sercom_set_gclk_generator+0x38>
    d78c:	20004140 	.word	0x20004140
    d790:	0000eb81 	.word	0x0000eb81
    d794:	0000eaf5 	.word	0x0000eaf5

0000d798 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    d798:	4b40      	ldr	r3, [pc, #256]	; (d89c <_sercom_get_default_pad+0x104>)
    d79a:	4298      	cmp	r0, r3
    d79c:	d031      	beq.n	d802 <_sercom_get_default_pad+0x6a>
    d79e:	d90a      	bls.n	d7b6 <_sercom_get_default_pad+0x1e>
    d7a0:	4b3f      	ldr	r3, [pc, #252]	; (d8a0 <_sercom_get_default_pad+0x108>)
    d7a2:	4298      	cmp	r0, r3
    d7a4:	d04d      	beq.n	d842 <_sercom_get_default_pad+0xaa>
    d7a6:	4b3f      	ldr	r3, [pc, #252]	; (d8a4 <_sercom_get_default_pad+0x10c>)
    d7a8:	4298      	cmp	r0, r3
    d7aa:	d05a      	beq.n	d862 <_sercom_get_default_pad+0xca>
    d7ac:	4b3e      	ldr	r3, [pc, #248]	; (d8a8 <_sercom_get_default_pad+0x110>)
    d7ae:	4298      	cmp	r0, r3
    d7b0:	d037      	beq.n	d822 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    d7b2:	2000      	movs	r0, #0
}
    d7b4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    d7b6:	4b3d      	ldr	r3, [pc, #244]	; (d8ac <_sercom_get_default_pad+0x114>)
    d7b8:	4298      	cmp	r0, r3
    d7ba:	d00c      	beq.n	d7d6 <_sercom_get_default_pad+0x3e>
    d7bc:	4b3c      	ldr	r3, [pc, #240]	; (d8b0 <_sercom_get_default_pad+0x118>)
    d7be:	4298      	cmp	r0, r3
    d7c0:	d1f7      	bne.n	d7b2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d7c2:	2901      	cmp	r1, #1
    d7c4:	d017      	beq.n	d7f6 <_sercom_get_default_pad+0x5e>
    d7c6:	2900      	cmp	r1, #0
    d7c8:	d05d      	beq.n	d886 <_sercom_get_default_pad+0xee>
    d7ca:	2902      	cmp	r1, #2
    d7cc:	d015      	beq.n	d7fa <_sercom_get_default_pad+0x62>
    d7ce:	2903      	cmp	r1, #3
    d7d0:	d015      	beq.n	d7fe <_sercom_get_default_pad+0x66>
	return 0;
    d7d2:	2000      	movs	r0, #0
    d7d4:	e7ee      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d7d6:	2901      	cmp	r1, #1
    d7d8:	d007      	beq.n	d7ea <_sercom_get_default_pad+0x52>
    d7da:	2900      	cmp	r1, #0
    d7dc:	d051      	beq.n	d882 <_sercom_get_default_pad+0xea>
    d7de:	2902      	cmp	r1, #2
    d7e0:	d005      	beq.n	d7ee <_sercom_get_default_pad+0x56>
    d7e2:	2903      	cmp	r1, #3
    d7e4:	d005      	beq.n	d7f2 <_sercom_get_default_pad+0x5a>
	return 0;
    d7e6:	2000      	movs	r0, #0
    d7e8:	e7e4      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d7ea:	4832      	ldr	r0, [pc, #200]	; (d8b4 <_sercom_get_default_pad+0x11c>)
    d7ec:	e7e2      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d7ee:	4832      	ldr	r0, [pc, #200]	; (d8b8 <_sercom_get_default_pad+0x120>)
    d7f0:	e7e0      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d7f2:	4832      	ldr	r0, [pc, #200]	; (d8bc <_sercom_get_default_pad+0x124>)
    d7f4:	e7de      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d7f6:	4832      	ldr	r0, [pc, #200]	; (d8c0 <_sercom_get_default_pad+0x128>)
    d7f8:	e7dc      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d7fa:	4832      	ldr	r0, [pc, #200]	; (d8c4 <_sercom_get_default_pad+0x12c>)
    d7fc:	e7da      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d7fe:	4832      	ldr	r0, [pc, #200]	; (d8c8 <_sercom_get_default_pad+0x130>)
    d800:	e7d8      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d802:	2901      	cmp	r1, #1
    d804:	d007      	beq.n	d816 <_sercom_get_default_pad+0x7e>
    d806:	2900      	cmp	r1, #0
    d808:	d03f      	beq.n	d88a <_sercom_get_default_pad+0xf2>
    d80a:	2902      	cmp	r1, #2
    d80c:	d005      	beq.n	d81a <_sercom_get_default_pad+0x82>
    d80e:	2903      	cmp	r1, #3
    d810:	d005      	beq.n	d81e <_sercom_get_default_pad+0x86>
	return 0;
    d812:	2000      	movs	r0, #0
    d814:	e7ce      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d816:	482d      	ldr	r0, [pc, #180]	; (d8cc <_sercom_get_default_pad+0x134>)
    d818:	e7cc      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d81a:	482d      	ldr	r0, [pc, #180]	; (d8d0 <_sercom_get_default_pad+0x138>)
    d81c:	e7ca      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d81e:	482d      	ldr	r0, [pc, #180]	; (d8d4 <_sercom_get_default_pad+0x13c>)
    d820:	e7c8      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d822:	2901      	cmp	r1, #1
    d824:	d007      	beq.n	d836 <_sercom_get_default_pad+0x9e>
    d826:	2900      	cmp	r1, #0
    d828:	d031      	beq.n	d88e <_sercom_get_default_pad+0xf6>
    d82a:	2902      	cmp	r1, #2
    d82c:	d005      	beq.n	d83a <_sercom_get_default_pad+0xa2>
    d82e:	2903      	cmp	r1, #3
    d830:	d005      	beq.n	d83e <_sercom_get_default_pad+0xa6>
	return 0;
    d832:	2000      	movs	r0, #0
    d834:	e7be      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d836:	4828      	ldr	r0, [pc, #160]	; (d8d8 <_sercom_get_default_pad+0x140>)
    d838:	e7bc      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d83a:	4828      	ldr	r0, [pc, #160]	; (d8dc <_sercom_get_default_pad+0x144>)
    d83c:	e7ba      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d83e:	4828      	ldr	r0, [pc, #160]	; (d8e0 <_sercom_get_default_pad+0x148>)
    d840:	e7b8      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d842:	2901      	cmp	r1, #1
    d844:	d007      	beq.n	d856 <_sercom_get_default_pad+0xbe>
    d846:	2900      	cmp	r1, #0
    d848:	d023      	beq.n	d892 <_sercom_get_default_pad+0xfa>
    d84a:	2902      	cmp	r1, #2
    d84c:	d005      	beq.n	d85a <_sercom_get_default_pad+0xc2>
    d84e:	2903      	cmp	r1, #3
    d850:	d005      	beq.n	d85e <_sercom_get_default_pad+0xc6>
	return 0;
    d852:	2000      	movs	r0, #0
    d854:	e7ae      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d856:	4823      	ldr	r0, [pc, #140]	; (d8e4 <_sercom_get_default_pad+0x14c>)
    d858:	e7ac      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d85a:	4823      	ldr	r0, [pc, #140]	; (d8e8 <_sercom_get_default_pad+0x150>)
    d85c:	e7aa      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d85e:	4823      	ldr	r0, [pc, #140]	; (d8ec <_sercom_get_default_pad+0x154>)
    d860:	e7a8      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d862:	2901      	cmp	r1, #1
    d864:	d007      	beq.n	d876 <_sercom_get_default_pad+0xde>
    d866:	2900      	cmp	r1, #0
    d868:	d015      	beq.n	d896 <_sercom_get_default_pad+0xfe>
    d86a:	2902      	cmp	r1, #2
    d86c:	d005      	beq.n	d87a <_sercom_get_default_pad+0xe2>
    d86e:	2903      	cmp	r1, #3
    d870:	d005      	beq.n	d87e <_sercom_get_default_pad+0xe6>
	return 0;
    d872:	2000      	movs	r0, #0
    d874:	e79e      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d876:	481e      	ldr	r0, [pc, #120]	; (d8f0 <_sercom_get_default_pad+0x158>)
    d878:	e79c      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d87a:	481e      	ldr	r0, [pc, #120]	; (d8f4 <_sercom_get_default_pad+0x15c>)
    d87c:	e79a      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d87e:	481e      	ldr	r0, [pc, #120]	; (d8f8 <_sercom_get_default_pad+0x160>)
    d880:	e798      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d882:	481e      	ldr	r0, [pc, #120]	; (d8fc <_sercom_get_default_pad+0x164>)
    d884:	e796      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d886:	2003      	movs	r0, #3
    d888:	e794      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d88a:	481d      	ldr	r0, [pc, #116]	; (d900 <_sercom_get_default_pad+0x168>)
    d88c:	e792      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d88e:	481d      	ldr	r0, [pc, #116]	; (d904 <_sercom_get_default_pad+0x16c>)
    d890:	e790      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d892:	481d      	ldr	r0, [pc, #116]	; (d908 <_sercom_get_default_pad+0x170>)
    d894:	e78e      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d896:	481d      	ldr	r0, [pc, #116]	; (d90c <_sercom_get_default_pad+0x174>)
    d898:	e78c      	b.n	d7b4 <_sercom_get_default_pad+0x1c>
    d89a:	46c0      	nop			; (mov r8, r8)
    d89c:	42001000 	.word	0x42001000
    d8a0:	42001800 	.word	0x42001800
    d8a4:	42001c00 	.word	0x42001c00
    d8a8:	42001400 	.word	0x42001400
    d8ac:	42000800 	.word	0x42000800
    d8b0:	42000c00 	.word	0x42000c00
    d8b4:	00050003 	.word	0x00050003
    d8b8:	00060003 	.word	0x00060003
    d8bc:	00070003 	.word	0x00070003
    d8c0:	00010003 	.word	0x00010003
    d8c4:	001e0003 	.word	0x001e0003
    d8c8:	001f0003 	.word	0x001f0003
    d8cc:	00090003 	.word	0x00090003
    d8d0:	000a0003 	.word	0x000a0003
    d8d4:	000b0003 	.word	0x000b0003
    d8d8:	00110003 	.word	0x00110003
    d8dc:	00120003 	.word	0x00120003
    d8e0:	00130003 	.word	0x00130003
    d8e4:	000d0003 	.word	0x000d0003
    d8e8:	000e0003 	.word	0x000e0003
    d8ec:	000f0003 	.word	0x000f0003
    d8f0:	00170003 	.word	0x00170003
    d8f4:	00180003 	.word	0x00180003
    d8f8:	00190003 	.word	0x00190003
    d8fc:	00040003 	.word	0x00040003
    d900:	00080003 	.word	0x00080003
    d904:	00100003 	.word	0x00100003
    d908:	000c0003 	.word	0x000c0003
    d90c:	00160003 	.word	0x00160003

0000d910 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    d910:	b530      	push	{r4, r5, lr}
    d912:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    d914:	4b0b      	ldr	r3, [pc, #44]	; (d944 <_sercom_get_sercom_inst_index+0x34>)
    d916:	466a      	mov	r2, sp
    d918:	cb32      	ldmia	r3!, {r1, r4, r5}
    d91a:	c232      	stmia	r2!, {r1, r4, r5}
    d91c:	cb32      	ldmia	r3!, {r1, r4, r5}
    d91e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    d920:	9b00      	ldr	r3, [sp, #0]
    d922:	4283      	cmp	r3, r0
    d924:	d00b      	beq.n	d93e <_sercom_get_sercom_inst_index+0x2e>
    d926:	2301      	movs	r3, #1
    d928:	009a      	lsls	r2, r3, #2
    d92a:	4669      	mov	r1, sp
    d92c:	5852      	ldr	r2, [r2, r1]
    d92e:	4282      	cmp	r2, r0
    d930:	d006      	beq.n	d940 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    d932:	3301      	adds	r3, #1
    d934:	2b06      	cmp	r3, #6
    d936:	d1f7      	bne.n	d928 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    d938:	2000      	movs	r0, #0
}
    d93a:	b007      	add	sp, #28
    d93c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    d93e:	2300      	movs	r3, #0
			return i;
    d940:	b2d8      	uxtb	r0, r3
    d942:	e7fa      	b.n	d93a <_sercom_get_sercom_inst_index+0x2a>
    d944:	0001b398 	.word	0x0001b398

0000d948 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    d948:	4770      	bx	lr
	...

0000d94c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    d94c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    d94e:	4b0a      	ldr	r3, [pc, #40]	; (d978 <_sercom_set_handler+0x2c>)
    d950:	781b      	ldrb	r3, [r3, #0]
    d952:	2b00      	cmp	r3, #0
    d954:	d10c      	bne.n	d970 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    d956:	4f09      	ldr	r7, [pc, #36]	; (d97c <_sercom_set_handler+0x30>)
    d958:	4e09      	ldr	r6, [pc, #36]	; (d980 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    d95a:	4d0a      	ldr	r5, [pc, #40]	; (d984 <_sercom_set_handler+0x38>)
    d95c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    d95e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    d960:	195a      	adds	r2, r3, r5
    d962:	6014      	str	r4, [r2, #0]
    d964:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    d966:	2b18      	cmp	r3, #24
    d968:	d1f9      	bne.n	d95e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    d96a:	2201      	movs	r2, #1
    d96c:	4b02      	ldr	r3, [pc, #8]	; (d978 <_sercom_set_handler+0x2c>)
    d96e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    d970:	0080      	lsls	r0, r0, #2
    d972:	4b02      	ldr	r3, [pc, #8]	; (d97c <_sercom_set_handler+0x30>)
    d974:	50c1      	str	r1, [r0, r3]
}
    d976:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d978:	20004142 	.word	0x20004142
    d97c:	20004144 	.word	0x20004144
    d980:	0000d949 	.word	0x0000d949
    d984:	20005d24 	.word	0x20005d24

0000d988 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    d988:	b500      	push	{lr}
    d98a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    d98c:	2309      	movs	r3, #9
    d98e:	466a      	mov	r2, sp
    d990:	7013      	strb	r3, [r2, #0]
    d992:	3301      	adds	r3, #1
    d994:	7053      	strb	r3, [r2, #1]
    d996:	3301      	adds	r3, #1
    d998:	7093      	strb	r3, [r2, #2]
    d99a:	3301      	adds	r3, #1
    d99c:	70d3      	strb	r3, [r2, #3]
    d99e:	3301      	adds	r3, #1
    d9a0:	7113      	strb	r3, [r2, #4]
    d9a2:	3301      	adds	r3, #1
    d9a4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    d9a6:	4b03      	ldr	r3, [pc, #12]	; (d9b4 <_sercom_get_interrupt_vector+0x2c>)
    d9a8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    d9aa:	466b      	mov	r3, sp
    d9ac:	5618      	ldrsb	r0, [r3, r0]
}
    d9ae:	b003      	add	sp, #12
    d9b0:	bd00      	pop	{pc}
    d9b2:	46c0      	nop			; (mov r8, r8)
    d9b4:	0000d911 	.word	0x0000d911

0000d9b8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    d9b8:	b510      	push	{r4, lr}
    d9ba:	4b02      	ldr	r3, [pc, #8]	; (d9c4 <SERCOM0_Handler+0xc>)
    d9bc:	681b      	ldr	r3, [r3, #0]
    d9be:	2000      	movs	r0, #0
    d9c0:	4798      	blx	r3
    d9c2:	bd10      	pop	{r4, pc}
    d9c4:	20004144 	.word	0x20004144

0000d9c8 <SERCOM1_Handler>:
    d9c8:	b510      	push	{r4, lr}
    d9ca:	4b02      	ldr	r3, [pc, #8]	; (d9d4 <SERCOM1_Handler+0xc>)
    d9cc:	685b      	ldr	r3, [r3, #4]
    d9ce:	2001      	movs	r0, #1
    d9d0:	4798      	blx	r3
    d9d2:	bd10      	pop	{r4, pc}
    d9d4:	20004144 	.word	0x20004144

0000d9d8 <SERCOM2_Handler>:
    d9d8:	b510      	push	{r4, lr}
    d9da:	4b02      	ldr	r3, [pc, #8]	; (d9e4 <SERCOM2_Handler+0xc>)
    d9dc:	689b      	ldr	r3, [r3, #8]
    d9de:	2002      	movs	r0, #2
    d9e0:	4798      	blx	r3
    d9e2:	bd10      	pop	{r4, pc}
    d9e4:	20004144 	.word	0x20004144

0000d9e8 <SERCOM3_Handler>:
    d9e8:	b510      	push	{r4, lr}
    d9ea:	4b02      	ldr	r3, [pc, #8]	; (d9f4 <SERCOM3_Handler+0xc>)
    d9ec:	68db      	ldr	r3, [r3, #12]
    d9ee:	2003      	movs	r0, #3
    d9f0:	4798      	blx	r3
    d9f2:	bd10      	pop	{r4, pc}
    d9f4:	20004144 	.word	0x20004144

0000d9f8 <SERCOM4_Handler>:
    d9f8:	b510      	push	{r4, lr}
    d9fa:	4b02      	ldr	r3, [pc, #8]	; (da04 <SERCOM4_Handler+0xc>)
    d9fc:	691b      	ldr	r3, [r3, #16]
    d9fe:	2004      	movs	r0, #4
    da00:	4798      	blx	r3
    da02:	bd10      	pop	{r4, pc}
    da04:	20004144 	.word	0x20004144

0000da08 <SERCOM5_Handler>:
    da08:	b510      	push	{r4, lr}
    da0a:	4b02      	ldr	r3, [pc, #8]	; (da14 <SERCOM5_Handler+0xc>)
    da0c:	695b      	ldr	r3, [r3, #20]
    da0e:	2005      	movs	r0, #5
    da10:	4798      	blx	r3
    da12:	bd10      	pop	{r4, pc}
    da14:	20004144 	.word	0x20004144

0000da18 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    da18:	b570      	push	{r4, r5, r6, lr}
    da1a:	b082      	sub	sp, #8
    da1c:	0006      	movs	r6, r0
    da1e:	000d      	movs	r5, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    da20:	2200      	movs	r2, #0
    da22:	466b      	mov	r3, sp
    da24:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    da26:	6804      	ldr	r4, [r0, #0]
	return (spi_module->SYNCBUSY.reg);
    da28:	69e3      	ldr	r3, [r4, #28]
	while (spi_is_syncing(module)) {
    da2a:	2b00      	cmp	r3, #0
    da2c:	d1fc      	bne.n	da28 <spi_set_baudrate+0x10>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    da2e:	338f      	adds	r3, #143	; 0x8f
    da30:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    da32:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    da34:	6823      	ldr	r3, [r4, #0]
    da36:	2202      	movs	r2, #2
    da38:	4393      	bics	r3, r2
    da3a:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    da3c:	6830      	ldr	r0, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    da3e:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    da40:	2b00      	cmp	r3, #0
    da42:	d1fc      	bne.n	da3e <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    da44:	4b12      	ldr	r3, [pc, #72]	; (da90 <spi_set_baudrate+0x78>)
    da46:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    da48:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    da4a:	b2c0      	uxtb	r0, r0
    da4c:	4b11      	ldr	r3, [pc, #68]	; (da94 <spi_set_baudrate+0x7c>)
    da4e:	4798      	blx	r3
    da50:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    da52:	466b      	mov	r3, sp
    da54:	1d9a      	adds	r2, r3, #6
    da56:	0028      	movs	r0, r5
    da58:	4b0f      	ldr	r3, [pc, #60]	; (da98 <spi_set_baudrate+0x80>)
    da5a:	4798      	blx	r3
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    da5c:	2800      	cmp	r0, #0
    da5e:	d002      	beq.n	da66 <spi_set_baudrate+0x4e>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    da60:	2017      	movs	r0, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    da62:	b002      	add	sp, #8
    da64:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    da66:	466b      	mov	r3, sp
    da68:	3306      	adds	r3, #6
    da6a:	781b      	ldrb	r3, [r3, #0]
    da6c:	7323      	strb	r3, [r4, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    da6e:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    da70:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    da72:	2a00      	cmp	r2, #0
    da74:	d1fc      	bne.n	da70 <spi_set_baudrate+0x58>
    da76:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    da78:	2a00      	cmp	r2, #0
    da7a:	d1fc      	bne.n	da76 <spi_set_baudrate+0x5e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    da7c:	681a      	ldr	r2, [r3, #0]
    da7e:	2102      	movs	r1, #2
    da80:	430a      	orrs	r2, r1
    da82:	601a      	str	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    da84:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    da86:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    da88:	2b00      	cmp	r3, #0
    da8a:	d1fc      	bne.n	da86 <spi_set_baudrate+0x6e>
    da8c:	e7e9      	b.n	da62 <spi_set_baudrate+0x4a>
    da8e:	46c0      	nop			; (mov r8, r8)
    da90:	0000d911 	.word	0x0000d911
    da94:	0000eb9d 	.word	0x0000eb9d
    da98:	0000d68f 	.word	0x0000d68f

0000da9c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    da9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    da9e:	46d6      	mov	lr, sl
    daa0:	464f      	mov	r7, r9
    daa2:	b580      	push	{r7, lr}
    daa4:	b08b      	sub	sp, #44	; 0x2c
    daa6:	4681      	mov	r9, r0
    daa8:	000f      	movs	r7, r1
    daaa:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    daac:	0003      	movs	r3, r0
    daae:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    dab0:	680b      	ldr	r3, [r1, #0]
    dab2:	079b      	lsls	r3, r3, #30
    dab4:	d409      	bmi.n	daca <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    dab6:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    dab8:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    daba:	07db      	lsls	r3, r3, #31
    dabc:	d400      	bmi.n	dac0 <spi_init+0x24>
    dabe:	e098      	b.n	dbf2 <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    dac0:	b00b      	add	sp, #44	; 0x2c
    dac2:	bc0c      	pop	{r2, r3}
    dac4:	4691      	mov	r9, r2
    dac6:	469a      	mov	sl, r3
    dac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    daca:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dacc:	9305      	str	r3, [sp, #20]
    dace:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    dad0:	9306      	str	r3, [sp, #24]
    dad2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    dad4:	9307      	str	r3, [sp, #28]
    dad6:	6b53      	ldr	r3, [r2, #52]	; 0x34
    dad8:	9308      	str	r3, [sp, #32]
    dada:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    dadc:	ab05      	add	r3, sp, #20
    dade:	9301      	str	r3, [sp, #4]
    dae0:	e00a      	b.n	daf8 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    dae2:	0038      	movs	r0, r7
    dae4:	4b93      	ldr	r3, [pc, #588]	; (dd34 <spi_init+0x298>)
    dae6:	4798      	blx	r3
    dae8:	e00c      	b.n	db04 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    daea:	230f      	movs	r3, #15
    daec:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    daee:	4281      	cmp	r1, r0
    daf0:	d12d      	bne.n	db4e <spi_init+0xb2>
    daf2:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    daf4:	2e04      	cmp	r6, #4
    daf6:	d02f      	beq.n	db58 <spi_init+0xbc>
    daf8:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    dafa:	00b3      	lsls	r3, r6, #2
    dafc:	9a01      	ldr	r2, [sp, #4]
    dafe:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    db00:	2800      	cmp	r0, #0
    db02:	d0ee      	beq.n	dae2 <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    db04:	1c43      	adds	r3, r0, #1
    db06:	d0f4      	beq.n	daf2 <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    db08:	0401      	lsls	r1, r0, #16
    db0a:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    db0c:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    db0e:	b2c3      	uxtb	r3, r0
    db10:	469c      	mov	ip, r3
		return NULL;
    db12:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    db14:	0602      	lsls	r2, r0, #24
    db16:	d405      	bmi.n	db24 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    db18:	4663      	mov	r3, ip
    db1a:	095b      	lsrs	r3, r3, #5
    db1c:	01db      	lsls	r3, r3, #7
    db1e:	4a86      	ldr	r2, [pc, #536]	; (dd38 <spi_init+0x29c>)
    db20:	4692      	mov	sl, r2
    db22:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    db24:	221f      	movs	r2, #31
    db26:	4660      	mov	r0, ip
    db28:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    db2a:	1898      	adds	r0, r3, r2
    db2c:	3040      	adds	r0, #64	; 0x40
    db2e:	7800      	ldrb	r0, [r0, #0]
    db30:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    db32:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    db34:	4655      	mov	r5, sl
    db36:	07ed      	lsls	r5, r5, #31
    db38:	d5d9      	bpl.n	daee <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    db3a:	0852      	lsrs	r2, r2, #1
    db3c:	189b      	adds	r3, r3, r2
    db3e:	3330      	adds	r3, #48	; 0x30
    db40:	7818      	ldrb	r0, [r3, #0]
    db42:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    db44:	4663      	mov	r3, ip
    db46:	07db      	lsls	r3, r3, #31
    db48:	d5cf      	bpl.n	daea <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    db4a:	0900      	lsrs	r0, r0, #4
    db4c:	e7cf      	b.n	daee <spi_init+0x52>
			module->hw = NULL;
    db4e:	2300      	movs	r3, #0
    db50:	464a      	mov	r2, r9
    db52:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    db54:	201c      	movs	r0, #28
    db56:	e7b3      	b.n	dac0 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    db58:	2013      	movs	r0, #19
    db5a:	4b78      	ldr	r3, [pc, #480]	; (dd3c <spi_init+0x2a0>)
    db5c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    db5e:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    db60:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    db62:	2a01      	cmp	r2, #1
    db64:	d027      	beq.n	dbb6 <spi_init+0x11a>
	ctrla |= config->mux_setting;
    db66:	6863      	ldr	r3, [r4, #4]
    db68:	68a2      	ldr	r2, [r4, #8]
    db6a:	4313      	orrs	r3, r2
    db6c:	68e2      	ldr	r2, [r4, #12]
    db6e:	4313      	orrs	r3, r2
    db70:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    db72:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    db74:	7c61      	ldrb	r1, [r4, #17]
    db76:	2900      	cmp	r1, #0
    db78:	d001      	beq.n	db7e <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    db7a:	2180      	movs	r1, #128	; 0x80
    db7c:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    db7e:	7ca1      	ldrb	r1, [r4, #18]
    db80:	2900      	cmp	r1, #0
    db82:	d002      	beq.n	db8a <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    db84:	2180      	movs	r1, #128	; 0x80
    db86:	0289      	lsls	r1, r1, #10
    db88:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    db8a:	7ce1      	ldrb	r1, [r4, #19]
    db8c:	2900      	cmp	r1, #0
    db8e:	d002      	beq.n	db96 <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    db90:	2180      	movs	r1, #128	; 0x80
    db92:	0089      	lsls	r1, r1, #2
    db94:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    db96:	7d21      	ldrb	r1, [r4, #20]
    db98:	2900      	cmp	r1, #0
    db9a:	d002      	beq.n	dba2 <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    db9c:	2180      	movs	r1, #128	; 0x80
    db9e:	0189      	lsls	r1, r1, #6
    dba0:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    dba2:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    dba4:	2002      	movs	r0, #2
    dba6:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    dba8:	428b      	cmp	r3, r1
    dbaa:	d018      	beq.n	dbde <spi_init+0x142>
	module->hw = NULL;
    dbac:	2300      	movs	r3, #0
    dbae:	464a      	mov	r2, r9
    dbb0:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    dbb2:	201c      	movs	r0, #28
    dbb4:	e784      	b.n	dac0 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    dbb6:	aa04      	add	r2, sp, #16
    dbb8:	0001      	movs	r1, r0
    dbba:	69a0      	ldr	r0, [r4, #24]
    dbbc:	4b60      	ldr	r3, [pc, #384]	; (dd40 <spi_init+0x2a4>)
    dbbe:	4798      	blx	r3
    dbc0:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    dbc2:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    dbc4:	2b00      	cmp	r3, #0
    dbc6:	d000      	beq.n	dbca <spi_init+0x12e>
    dbc8:	e77a      	b.n	dac0 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    dbca:	7b3b      	ldrb	r3, [r7, #12]
    dbcc:	b2db      	uxtb	r3, r3
    dbce:	aa04      	add	r2, sp, #16
    dbd0:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    dbd2:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    dbd4:	429a      	cmp	r2, r3
    dbd6:	d000      	beq.n	dbda <spi_init+0x13e>
    dbd8:	e772      	b.n	dac0 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    dbda:	350c      	adds	r5, #12
    dbdc:	e7c3      	b.n	db66 <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
    dbde:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    dbe0:	4293      	cmp	r3, r2
    dbe2:	d1e3      	bne.n	dbac <spi_init+0x110>
		module->mode           = config->mode;
    dbe4:	7823      	ldrb	r3, [r4, #0]
    dbe6:	464a      	mov	r2, r9
    dbe8:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
    dbea:	7c23      	ldrb	r3, [r4, #16]
    dbec:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    dbee:	2000      	movs	r0, #0
    dbf0:	e766      	b.n	dac0 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    dbf2:	0008      	movs	r0, r1
    dbf4:	4b53      	ldr	r3, [pc, #332]	; (dd44 <spi_init+0x2a8>)
    dbf6:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    dbf8:	4a53      	ldr	r2, [pc, #332]	; (dd48 <spi_init+0x2ac>)
    dbfa:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    dbfc:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    dbfe:	2301      	movs	r3, #1
    dc00:	40ab      	lsls	r3, r5
    dc02:	430b      	orrs	r3, r1
    dc04:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    dc06:	a909      	add	r1, sp, #36	; 0x24
    dc08:	2624      	movs	r6, #36	; 0x24
    dc0a:	5da3      	ldrb	r3, [r4, r6]
    dc0c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    dc0e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    dc10:	b2c5      	uxtb	r5, r0
    dc12:	0028      	movs	r0, r5
    dc14:	4b4d      	ldr	r3, [pc, #308]	; (dd4c <spi_init+0x2b0>)
    dc16:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    dc18:	0028      	movs	r0, r5
    dc1a:	4b4d      	ldr	r3, [pc, #308]	; (dd50 <spi_init+0x2b4>)
    dc1c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    dc1e:	5da0      	ldrb	r0, [r4, r6]
    dc20:	2100      	movs	r1, #0
    dc22:	4b4c      	ldr	r3, [pc, #304]	; (dd54 <spi_init+0x2b8>)
    dc24:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    dc26:	7823      	ldrb	r3, [r4, #0]
    dc28:	2b01      	cmp	r3, #1
    dc2a:	d019      	beq.n	dc60 <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    dc2c:	464b      	mov	r3, r9
    dc2e:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    dc30:	ab04      	add	r3, sp, #16
    dc32:	2280      	movs	r2, #128	; 0x80
    dc34:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    dc36:	2200      	movs	r2, #0
    dc38:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    dc3a:	2101      	movs	r1, #1
    dc3c:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    dc3e:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    dc40:	7823      	ldrb	r3, [r4, #0]
    dc42:	2b00      	cmp	r3, #0
    dc44:	d101      	bne.n	dc4a <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    dc46:	ab04      	add	r3, sp, #16
    dc48:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    dc4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dc4c:	9305      	str	r3, [sp, #20]
    dc4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    dc50:	9306      	str	r3, [sp, #24]
    dc52:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dc54:	9307      	str	r3, [sp, #28]
    dc56:	6b63      	ldr	r3, [r4, #52]	; 0x34
    dc58:	9308      	str	r3, [sp, #32]
    dc5a:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    dc5c:	ad05      	add	r5, sp, #20
    dc5e:	e011      	b.n	dc84 <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    dc60:	683b      	ldr	r3, [r7, #0]
    dc62:	220c      	movs	r2, #12
    dc64:	4313      	orrs	r3, r2
    dc66:	603b      	str	r3, [r7, #0]
    dc68:	e7e0      	b.n	dc2c <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    dc6a:	0030      	movs	r0, r6
    dc6c:	4b31      	ldr	r3, [pc, #196]	; (dd34 <spi_init+0x298>)
    dc6e:	4798      	blx	r3
    dc70:	e00d      	b.n	dc8e <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    dc72:	a904      	add	r1, sp, #16
    dc74:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    dc76:	0c00      	lsrs	r0, r0, #16
    dc78:	b2c0      	uxtb	r0, r0
    dc7a:	4b37      	ldr	r3, [pc, #220]	; (dd58 <spi_init+0x2bc>)
    dc7c:	4798      	blx	r3
    dc7e:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    dc80:	2f04      	cmp	r7, #4
    dc82:	d007      	beq.n	dc94 <spi_init+0x1f8>
    dc84:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    dc86:	00bb      	lsls	r3, r7, #2
    dc88:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    dc8a:	2800      	cmp	r0, #0
    dc8c:	d0ed      	beq.n	dc6a <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
    dc8e:	1c43      	adds	r3, r0, #1
    dc90:	d1ef      	bne.n	dc72 <spi_init+0x1d6>
    dc92:	e7f4      	b.n	dc7e <spi_init+0x1e2>
	module->mode             = config->mode;
    dc94:	7823      	ldrb	r3, [r4, #0]
    dc96:	464a      	mov	r2, r9
    dc98:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    dc9a:	7c23      	ldrb	r3, [r4, #16]
    dc9c:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    dc9e:	7ca3      	ldrb	r3, [r4, #18]
    dca0:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    dca2:	7d23      	ldrb	r3, [r4, #20]
    dca4:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    dca6:	2200      	movs	r2, #0
    dca8:	ab02      	add	r3, sp, #8
    dcaa:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    dcac:	7823      	ldrb	r3, [r4, #0]
    dcae:	2b01      	cmp	r3, #1
    dcb0:	d028      	beq.n	dd04 <spi_init+0x268>
	ctrla |= config->transfer_mode;
    dcb2:	6863      	ldr	r3, [r4, #4]
    dcb4:	68a2      	ldr	r2, [r4, #8]
    dcb6:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    dcb8:	68e2      	ldr	r2, [r4, #12]
    dcba:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    dcbc:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    dcbe:	7c62      	ldrb	r2, [r4, #17]
    dcc0:	2a00      	cmp	r2, #0
    dcc2:	d103      	bne.n	dccc <spi_init+0x230>
    dcc4:	4a25      	ldr	r2, [pc, #148]	; (dd5c <spi_init+0x2c0>)
    dcc6:	7892      	ldrb	r2, [r2, #2]
    dcc8:	0792      	lsls	r2, r2, #30
    dcca:	d501      	bpl.n	dcd0 <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    dccc:	2280      	movs	r2, #128	; 0x80
    dcce:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    dcd0:	7ca2      	ldrb	r2, [r4, #18]
    dcd2:	2a00      	cmp	r2, #0
    dcd4:	d002      	beq.n	dcdc <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    dcd6:	2280      	movs	r2, #128	; 0x80
    dcd8:	0292      	lsls	r2, r2, #10
    dcda:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    dcdc:	7ce2      	ldrb	r2, [r4, #19]
    dcde:	2a00      	cmp	r2, #0
    dce0:	d002      	beq.n	dce8 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    dce2:	2280      	movs	r2, #128	; 0x80
    dce4:	0092      	lsls	r2, r2, #2
    dce6:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    dce8:	7d22      	ldrb	r2, [r4, #20]
    dcea:	2a00      	cmp	r2, #0
    dcec:	d002      	beq.n	dcf4 <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    dcee:	2280      	movs	r2, #128	; 0x80
    dcf0:	0192      	lsls	r2, r2, #6
    dcf2:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    dcf4:	6832      	ldr	r2, [r6, #0]
    dcf6:	4313      	orrs	r3, r2
    dcf8:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    dcfa:	6873      	ldr	r3, [r6, #4]
    dcfc:	430b      	orrs	r3, r1
    dcfe:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
    dd00:	2000      	movs	r0, #0
    dd02:	e6dd      	b.n	dac0 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    dd04:	464b      	mov	r3, r9
    dd06:	6818      	ldr	r0, [r3, #0]
    dd08:	4b0e      	ldr	r3, [pc, #56]	; (dd44 <spi_init+0x2a8>)
    dd0a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    dd0c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    dd0e:	b2c0      	uxtb	r0, r0
    dd10:	4b0a      	ldr	r3, [pc, #40]	; (dd3c <spi_init+0x2a0>)
    dd12:	4798      	blx	r3
    dd14:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    dd16:	ab02      	add	r3, sp, #8
    dd18:	1d9a      	adds	r2, r3, #6
    dd1a:	69a0      	ldr	r0, [r4, #24]
    dd1c:	4b08      	ldr	r3, [pc, #32]	; (dd40 <spi_init+0x2a4>)
    dd1e:	4798      	blx	r3
    dd20:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    dd22:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    dd24:	2b00      	cmp	r3, #0
    dd26:	d000      	beq.n	dd2a <spi_init+0x28e>
    dd28:	e6ca      	b.n	dac0 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    dd2a:	ab02      	add	r3, sp, #8
    dd2c:	3306      	adds	r3, #6
    dd2e:	781b      	ldrb	r3, [r3, #0]
    dd30:	7333      	strb	r3, [r6, #12]
    dd32:	e7be      	b.n	dcb2 <spi_init+0x216>
    dd34:	0000d799 	.word	0x0000d799
    dd38:	41004400 	.word	0x41004400
    dd3c:	0000eb9d 	.word	0x0000eb9d
    dd40:	0000d68f 	.word	0x0000d68f
    dd44:	0000d911 	.word	0x0000d911
    dd48:	40000400 	.word	0x40000400
    dd4c:	0000eb81 	.word	0x0000eb81
    dd50:	0000eaf5 	.word	0x0000eaf5
    dd54:	0000d74d 	.word	0x0000d74d
    dd58:	0000eca9 	.word	0x0000eca9
    dd5c:	41002000 	.word	0x41002000

0000dd60 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    dd60:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd62:	46d6      	mov	lr, sl
    dd64:	464f      	mov	r7, r9
    dd66:	b580      	push	{r7, lr}
    dd68:	b083      	sub	sp, #12
    dd6a:	468c      	mov	ip, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    dd6c:	2617      	movs	r6, #23
	if (length == 0) {
    dd6e:	2a00      	cmp	r2, #0
    dd70:	d105      	bne.n	dd7e <spi_read_buffer_wait+0x1e>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    dd72:	0030      	movs	r0, r6
    dd74:	b003      	add	sp, #12
    dd76:	bc0c      	pop	{r2, r3}
    dd78:	4691      	mov	r9, r2
    dd7a:	469a      	mov	sl, r3
    dd7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    dd7e:	79c1      	ldrb	r1, [r0, #7]
    dd80:	2900      	cmp	r1, #0
    dd82:	d140      	bne.n	de06 <spi_read_buffer_wait+0xa6>
		return STATUS_ERR_DENIED;
    dd84:	3605      	adds	r6, #5
    dd86:	e7f4      	b.n	dd72 <spi_read_buffer_wait+0x12>
	SercomSpi *const spi_module = &(module->hw->SPI);
    dd88:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    dd8a:	7e21      	ldrb	r1, [r4, #24]
			while (!spi_is_ready_to_write(module)) {
    dd8c:	4239      	tst	r1, r7
    dd8e:	d0fc      	beq.n	dd8a <spi_read_buffer_wait+0x2a>
    dd90:	7e21      	ldrb	r1, [r4, #24]
	if (!spi_is_ready_to_write(module)) {
    dd92:	4239      	tst	r1, r7
    dd94:	d019      	beq.n	ddca <spi_read_buffer_wait+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    dd96:	4649      	mov	r1, r9
    dd98:	62a1      	str	r1, [r4, #40]	; 0x28
    dd9a:	e016      	b.n	ddca <spi_read_buffer_wait+0x6a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    dd9c:	7981      	ldrb	r1, [r0, #6]
    dd9e:	2901      	cmp	r1, #1
    dda0:	d023      	beq.n	ddea <spi_read_buffer_wait+0x8a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    dda2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    dda4:	b2f6      	uxtb	r6, r6
		if (retval != STATUS_OK) {
    dda6:	9901      	ldr	r1, [sp, #4]
    dda8:	2900      	cmp	r1, #0
    ddaa:	d137      	bne.n	de1c <spi_read_buffer_wait+0xbc>
		rx_data[rx_pos++] = received_data;
    ddac:	1c69      	adds	r1, r5, #1
    ddae:	b289      	uxth	r1, r1
    ddb0:	4664      	mov	r4, ip
    ddb2:	5566      	strb	r6, [r4, r5]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ddb4:	7984      	ldrb	r4, [r0, #6]
    ddb6:	2c01      	cmp	r4, #1
    ddb8:	d01b      	beq.n	ddf2 <spi_read_buffer_wait+0x92>
		rx_data[rx_pos++] = received_data;
    ddba:	000d      	movs	r5, r1
	while (length--) {
    ddbc:	3a01      	subs	r2, #1
    ddbe:	b292      	uxth	r2, r2
    ddc0:	4552      	cmp	r2, sl
    ddc2:	d01c      	beq.n	ddfe <spi_read_buffer_wait+0x9e>
		if (module->mode == SPI_MODE_MASTER) {
    ddc4:	7941      	ldrb	r1, [r0, #5]
    ddc6:	2901      	cmp	r1, #1
    ddc8:	d0de      	beq.n	dd88 <spi_read_buffer_wait+0x28>
	SercomSpi *const spi_module = &(module->hw->SPI);
    ddca:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ddcc:	7e21      	ldrb	r1, [r4, #24]
		while (!spi_is_ready_to_read(module)) {
    ddce:	4219      	tst	r1, r3
    ddd0:	d0fc      	beq.n	ddcc <spi_read_buffer_wait+0x6c>
    ddd2:	7e21      	ldrb	r1, [r4, #24]
	if (!spi_is_ready_to_read(module)) {
    ddd4:	4219      	tst	r1, r3
    ddd6:	d014      	beq.n	de02 <spi_read_buffer_wait+0xa2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ddd8:	8b61      	ldrh	r1, [r4, #26]
	enum status_code retval = STATUS_OK;
    ddda:	2600      	movs	r6, #0
    dddc:	9601      	str	r6, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ddde:	4219      	tst	r1, r3
    dde0:	d0dc      	beq.n	dd9c <spi_read_buffer_wait+0x3c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dde2:	8363      	strh	r3, [r4, #26]
		retval = STATUS_ERR_OVERFLOW;
    dde4:	211e      	movs	r1, #30
    dde6:	9101      	str	r1, [sp, #4]
    dde8:	e7d8      	b.n	dd9c <spi_read_buffer_wait+0x3c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    ddea:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    ddec:	05e4      	lsls	r4, r4, #23
    ddee:	0de6      	lsrs	r6, r4, #23
    ddf0:	e7d9      	b.n	dda6 <spi_read_buffer_wait+0x46>
			rx_data[rx_pos++] = (received_data >> 8);
    ddf2:	3502      	adds	r5, #2
    ddf4:	b2ad      	uxth	r5, r5
    ddf6:	0a34      	lsrs	r4, r6, #8
    ddf8:	4666      	mov	r6, ip
    ddfa:	5474      	strb	r4, [r6, r1]
    ddfc:	e7de      	b.n	ddbc <spi_read_buffer_wait+0x5c>
    ddfe:	9e01      	ldr	r6, [sp, #4]
    de00:	e7b7      	b.n	dd72 <spi_read_buffer_wait+0x12>
		return STATUS_ERR_IO;
    de02:	2610      	movs	r6, #16
    de04:	e7b5      	b.n	dd72 <spi_read_buffer_wait+0x12>
	while (length--) {
    de06:	3a01      	subs	r2, #1
    de08:	b292      	uxth	r2, r2
    de0a:	2500      	movs	r5, #0
			while (!spi_is_ready_to_write(module)) {
    de0c:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    de0e:	05db      	lsls	r3, r3, #23
    de10:	0ddb      	lsrs	r3, r3, #23
    de12:	4699      	mov	r9, r3
		while (!spi_is_ready_to_read(module)) {
    de14:	2304      	movs	r3, #4
	while (length--) {
    de16:	4902      	ldr	r1, [pc, #8]	; (de20 <spi_read_buffer_wait+0xc0>)
    de18:	468a      	mov	sl, r1
    de1a:	e7d3      	b.n	ddc4 <spi_read_buffer_wait+0x64>
    de1c:	9e01      	ldr	r6, [sp, #4]
    de1e:	e7a8      	b.n	dd72 <spi_read_buffer_wait+0x12>
    de20:	0000ffff 	.word	0x0000ffff

0000de24 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    de24:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    de26:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    de28:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    de2a:	2c01      	cmp	r4, #1
    de2c:	d001      	beq.n	de32 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    de2e:	0018      	movs	r0, r3
    de30:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    de32:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    de34:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    de36:	2c00      	cmp	r4, #0
    de38:	d1f9      	bne.n	de2e <spi_select_slave+0xa>
		if (select) {
    de3a:	2a00      	cmp	r2, #0
    de3c:	d058      	beq.n	def0 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    de3e:	784b      	ldrb	r3, [r1, #1]
    de40:	2b00      	cmp	r3, #0
    de42:	d044      	beq.n	dece <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    de44:	6803      	ldr	r3, [r0, #0]
    de46:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    de48:	07db      	lsls	r3, r3, #31
    de4a:	d410      	bmi.n	de6e <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    de4c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    de4e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    de50:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    de52:	2900      	cmp	r1, #0
    de54:	d104      	bne.n	de60 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    de56:	0953      	lsrs	r3, r2, #5
    de58:	01db      	lsls	r3, r3, #7
    de5a:	492e      	ldr	r1, [pc, #184]	; (df14 <spi_select_slave+0xf0>)
    de5c:	468c      	mov	ip, r1
    de5e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    de60:	211f      	movs	r1, #31
    de62:	4011      	ands	r1, r2
    de64:	2201      	movs	r2, #1
    de66:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    de68:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    de6a:	2305      	movs	r3, #5
    de6c:	e7df      	b.n	de2e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    de6e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    de70:	09d4      	lsrs	r4, r2, #7
		return NULL;
    de72:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    de74:	2c00      	cmp	r4, #0
    de76:	d104      	bne.n	de82 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    de78:	0953      	lsrs	r3, r2, #5
    de7a:	01db      	lsls	r3, r3, #7
    de7c:	4c25      	ldr	r4, [pc, #148]	; (df14 <spi_select_slave+0xf0>)
    de7e:	46a4      	mov	ip, r4
    de80:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    de82:	241f      	movs	r4, #31
    de84:	4014      	ands	r4, r2
    de86:	2201      	movs	r2, #1
    de88:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    de8a:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    de8c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    de8e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    de90:	07d2      	lsls	r2, r2, #31
    de92:	d501      	bpl.n	de98 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    de94:	788a      	ldrb	r2, [r1, #2]
    de96:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    de98:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    de9a:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    de9c:	2a00      	cmp	r2, #0
    de9e:	d1c6      	bne.n	de2e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    dea0:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    dea2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    dea4:	7e13      	ldrb	r3, [r2, #24]
    dea6:	420b      	tst	r3, r1
    dea8:	d0fc      	beq.n	dea4 <spi_select_slave+0x80>
    deaa:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    deac:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    deae:	0749      	lsls	r1, r1, #29
    deb0:	d5bd      	bpl.n	de2e <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    deb2:	8b53      	ldrh	r3, [r2, #26]
    deb4:	075b      	lsls	r3, r3, #29
    deb6:	d501      	bpl.n	debc <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    deb8:	2304      	movs	r3, #4
    deba:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    debc:	7983      	ldrb	r3, [r0, #6]
    debe:	2b01      	cmp	r3, #1
    dec0:	d002      	beq.n	dec8 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    dec2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dec4:	2300      	movs	r3, #0
    dec6:	e7b2      	b.n	de2e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    dec8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    deca:	2300      	movs	r3, #0
    decc:	e7af      	b.n	de2e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    dece:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    ded0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    ded2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    ded4:	2900      	cmp	r1, #0
    ded6:	d104      	bne.n	dee2 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    ded8:	0953      	lsrs	r3, r2, #5
    deda:	01db      	lsls	r3, r3, #7
    dedc:	490d      	ldr	r1, [pc, #52]	; (df14 <spi_select_slave+0xf0>)
    dede:	468c      	mov	ip, r1
    dee0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    dee2:	211f      	movs	r1, #31
    dee4:	4011      	ands	r1, r2
    dee6:	2201      	movs	r2, #1
    dee8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    deea:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    deec:	2300      	movs	r3, #0
    deee:	e79e      	b.n	de2e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    def0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    def2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    def4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    def6:	2900      	cmp	r1, #0
    def8:	d104      	bne.n	df04 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    defa:	0953      	lsrs	r3, r2, #5
    defc:	01db      	lsls	r3, r3, #7
    defe:	4905      	ldr	r1, [pc, #20]	; (df14 <spi_select_slave+0xf0>)
    df00:	468c      	mov	ip, r1
    df02:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    df04:	211f      	movs	r1, #31
    df06:	4011      	ands	r1, r2
    df08:	2201      	movs	r2, #1
    df0a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    df0c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    df0e:	2300      	movs	r3, #0
    df10:	e78d      	b.n	de2e <spi_select_slave+0xa>
    df12:	46c0      	nop			; (mov r8, r8)
    df14:	41004400 	.word	0x41004400

0000df18 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    df18:	b5f0      	push	{r4, r5, r6, r7, lr}
    df1a:	46de      	mov	lr, fp
    df1c:	4657      	mov	r7, sl
    df1e:	464e      	mov	r6, r9
    df20:	4645      	mov	r5, r8
    df22:	b5e0      	push	{r5, r6, r7, lr}
    df24:	b083      	sub	sp, #12
    df26:	468a      	mov	sl, r1
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    df28:	2317      	movs	r3, #23
	if (length == 0) {
    df2a:	2a00      	cmp	r2, #0
    df2c:	d14b      	bne.n	dfc6 <spi_write_buffer_wait+0xae>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    df2e:	0018      	movs	r0, r3
    df30:	b003      	add	sp, #12
    df32:	bc3c      	pop	{r2, r3, r4, r5}
    df34:	4690      	mov	r8, r2
    df36:	4699      	mov	r9, r3
    df38:	46a2      	mov	sl, r4
    df3a:	46ab      	mov	fp, r5
    df3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    df3e:	3702      	adds	r7, #2
    df40:	b2bf      	uxth	r7, r7
    df42:	4641      	mov	r1, r8
    df44:	4653      	mov	r3, sl
    df46:	5c59      	ldrb	r1, [r3, r1]
    df48:	0209      	lsls	r1, r1, #8
    df4a:	465b      	mov	r3, fp
    df4c:	430b      	orrs	r3, r1
    df4e:	e018      	b.n	df82 <spi_write_buffer_wait+0x6a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    df50:	7983      	ldrb	r3, [r0, #6]
    df52:	2b01      	cmp	r3, #1
    df54:	d02a      	beq.n	dfac <spi_write_buffer_wait+0x94>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    df56:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    df58:	3e01      	subs	r6, #1
    df5a:	b2b6      	uxth	r6, r6
    df5c:	4566      	cmp	r6, ip
    df5e:	d027      	beq.n	dfb0 <spi_write_buffer_wait+0x98>
	SercomSpi *const spi_module = &(module->hw->SPI);
    df60:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    df62:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    df64:	4223      	tst	r3, r4
    df66:	d0fc      	beq.n	df62 <spi_write_buffer_wait+0x4a>
		uint16_t data_to_send = tx_data[tx_pos++];
    df68:	1c7b      	adds	r3, r7, #1
    df6a:	b29b      	uxth	r3, r3
    df6c:	4698      	mov	r8, r3
    df6e:	4653      	mov	r3, sl
    df70:	5ddb      	ldrb	r3, [r3, r7]
    df72:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    df74:	7981      	ldrb	r1, [r0, #6]
    df76:	2901      	cmp	r1, #1
    df78:	d0e1      	beq.n	df3e <spi_write_buffer_wait+0x26>
		uint16_t data_to_send = tx_data[tx_pos++];
    df7a:	4669      	mov	r1, sp
    df7c:	80cb      	strh	r3, [r1, #6]
    df7e:	88cb      	ldrh	r3, [r1, #6]
    df80:	4647      	mov	r7, r8
    df82:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    df84:	4221      	tst	r1, r4
    df86:	d002      	beq.n	df8e <spi_write_buffer_wait+0x76>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    df88:	05db      	lsls	r3, r3, #23
    df8a:	0ddb      	lsrs	r3, r3, #23
    df8c:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    df8e:	79c3      	ldrb	r3, [r0, #7]
    df90:	2b00      	cmp	r3, #0
    df92:	d0e1      	beq.n	df58 <spi_write_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
    df94:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    df96:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    df98:	422b      	tst	r3, r5
    df9a:	d0fc      	beq.n	df96 <spi_write_buffer_wait+0x7e>
    df9c:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    df9e:	422b      	tst	r3, r5
    dfa0:	d0da      	beq.n	df58 <spi_write_buffer_wait+0x40>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    dfa2:	8b53      	ldrh	r3, [r2, #26]
    dfa4:	422b      	tst	r3, r5
    dfa6:	d0d3      	beq.n	df50 <spi_write_buffer_wait+0x38>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dfa8:	8355      	strh	r5, [r2, #26]
    dfaa:	e7d1      	b.n	df50 <spi_write_buffer_wait+0x38>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    dfac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dfae:	e7d3      	b.n	df58 <spi_write_buffer_wait+0x40>
	if (module->mode == SPI_MODE_MASTER) {
    dfb0:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    dfb2:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    dfb4:	2a01      	cmp	r2, #1
    dfb6:	d1ba      	bne.n	df2e <spi_write_buffer_wait+0x16>
	SercomSpi *const spi_module = &(module->hw->SPI);
    dfb8:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    dfba:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    dfbc:	7e0b      	ldrb	r3, [r1, #24]
    dfbe:	4213      	tst	r3, r2
    dfc0:	d0fc      	beq.n	dfbc <spi_write_buffer_wait+0xa4>
	return STATUS_OK;
    dfc2:	2300      	movs	r3, #0
    dfc4:	e7b3      	b.n	df2e <spi_write_buffer_wait+0x16>
	while (length--) {
    dfc6:	3a01      	subs	r2, #1
    dfc8:	b296      	uxth	r6, r2
    dfca:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    dfcc:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    dfce:	2504      	movs	r5, #4
	while (length--) {
    dfd0:	4b01      	ldr	r3, [pc, #4]	; (dfd8 <spi_write_buffer_wait+0xc0>)
    dfd2:	469c      	mov	ip, r3
    dfd4:	e7c4      	b.n	df60 <spi_write_buffer_wait+0x48>
    dfd6:	46c0      	nop			; (mov r8, r8)
    dfd8:	0000ffff 	.word	0x0000ffff

0000dfdc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    dfdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfde:	46de      	mov	lr, fp
    dfe0:	4657      	mov	r7, sl
    dfe2:	464e      	mov	r6, r9
    dfe4:	4645      	mov	r5, r8
    dfe6:	b5e0      	push	{r5, r6, r7, lr}
    dfe8:	b091      	sub	sp, #68	; 0x44
    dfea:	0005      	movs	r5, r0
    dfec:	000c      	movs	r4, r1
    dfee:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    dff0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    dff2:	0008      	movs	r0, r1
    dff4:	4bbc      	ldr	r3, [pc, #752]	; (e2e8 <usart_init+0x30c>)
    dff6:	4798      	blx	r3
    dff8:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    dffa:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    dffc:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    dffe:	07db      	lsls	r3, r3, #31
    e000:	d506      	bpl.n	e010 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    e002:	b011      	add	sp, #68	; 0x44
    e004:	bc3c      	pop	{r2, r3, r4, r5}
    e006:	4690      	mov	r8, r2
    e008:	4699      	mov	r9, r3
    e00a:	46a2      	mov	sl, r4
    e00c:	46ab      	mov	fp, r5
    e00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    e010:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    e012:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    e014:	079b      	lsls	r3, r3, #30
    e016:	d4f4      	bmi.n	e002 <usart_init+0x26>
    e018:	49b4      	ldr	r1, [pc, #720]	; (e2ec <usart_init+0x310>)
    e01a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    e01c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    e01e:	2301      	movs	r3, #1
    e020:	40bb      	lsls	r3, r7
    e022:	4303      	orrs	r3, r0
    e024:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    e026:	a90f      	add	r1, sp, #60	; 0x3c
    e028:	272d      	movs	r7, #45	; 0x2d
    e02a:	5df3      	ldrb	r3, [r6, r7]
    e02c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    e02e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    e030:	b2d3      	uxtb	r3, r2
    e032:	9302      	str	r3, [sp, #8]
    e034:	0018      	movs	r0, r3
    e036:	4bae      	ldr	r3, [pc, #696]	; (e2f0 <usart_init+0x314>)
    e038:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    e03a:	9802      	ldr	r0, [sp, #8]
    e03c:	4bad      	ldr	r3, [pc, #692]	; (e2f4 <usart_init+0x318>)
    e03e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    e040:	5df0      	ldrb	r0, [r6, r7]
    e042:	2100      	movs	r1, #0
    e044:	4bac      	ldr	r3, [pc, #688]	; (e2f8 <usart_init+0x31c>)
    e046:	4798      	blx	r3
	module->character_size = config->character_size;
    e048:	7af3      	ldrb	r3, [r6, #11]
    e04a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    e04c:	2324      	movs	r3, #36	; 0x24
    e04e:	5cf3      	ldrb	r3, [r6, r3]
    e050:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    e052:	2325      	movs	r3, #37	; 0x25
    e054:	5cf3      	ldrb	r3, [r6, r3]
    e056:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    e058:	7ef3      	ldrb	r3, [r6, #27]
    e05a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    e05c:	7f33      	ldrb	r3, [r6, #28]
    e05e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    e060:	682b      	ldr	r3, [r5, #0]
    e062:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    e064:	0018      	movs	r0, r3
    e066:	4ba0      	ldr	r3, [pc, #640]	; (e2e8 <usart_init+0x30c>)
    e068:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    e06a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    e06c:	2200      	movs	r2, #0
    e06e:	230e      	movs	r3, #14
    e070:	a906      	add	r1, sp, #24
    e072:	468c      	mov	ip, r1
    e074:	4463      	add	r3, ip
    e076:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    e078:	8a32      	ldrh	r2, [r6, #16]
    e07a:	9202      	str	r2, [sp, #8]
    e07c:	2380      	movs	r3, #128	; 0x80
    e07e:	01db      	lsls	r3, r3, #7
    e080:	429a      	cmp	r2, r3
    e082:	d100      	bne.n	e086 <usart_init+0xaa>
    e084:	e09e      	b.n	e1c4 <usart_init+0x1e8>
    e086:	d90f      	bls.n	e0a8 <usart_init+0xcc>
    e088:	23c0      	movs	r3, #192	; 0xc0
    e08a:	01db      	lsls	r3, r3, #7
    e08c:	9a02      	ldr	r2, [sp, #8]
    e08e:	429a      	cmp	r2, r3
    e090:	d100      	bne.n	e094 <usart_init+0xb8>
    e092:	e092      	b.n	e1ba <usart_init+0x1de>
    e094:	2380      	movs	r3, #128	; 0x80
    e096:	021b      	lsls	r3, r3, #8
    e098:	429a      	cmp	r2, r3
    e09a:	d000      	beq.n	e09e <usart_init+0xc2>
    e09c:	e11f      	b.n	e2de <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    e09e:	2303      	movs	r3, #3
    e0a0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    e0a2:	2300      	movs	r3, #0
    e0a4:	9307      	str	r3, [sp, #28]
    e0a6:	e008      	b.n	e0ba <usart_init+0xde>
	switch (config->sample_rate) {
    e0a8:	2380      	movs	r3, #128	; 0x80
    e0aa:	019b      	lsls	r3, r3, #6
    e0ac:	429a      	cmp	r2, r3
    e0ae:	d000      	beq.n	e0b2 <usart_init+0xd6>
    e0b0:	e115      	b.n	e2de <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    e0b2:	2310      	movs	r3, #16
    e0b4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    e0b6:	3b0f      	subs	r3, #15
    e0b8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    e0ba:	6833      	ldr	r3, [r6, #0]
    e0bc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    e0be:	68f3      	ldr	r3, [r6, #12]
    e0c0:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    e0c2:	6973      	ldr	r3, [r6, #20]
    e0c4:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    e0c6:	7e33      	ldrb	r3, [r6, #24]
    e0c8:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    e0ca:	2326      	movs	r3, #38	; 0x26
    e0cc:	5cf3      	ldrb	r3, [r6, r3]
    e0ce:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    e0d0:	6873      	ldr	r3, [r6, #4]
    e0d2:	4699      	mov	r9, r3
	switch (transfer_mode)
    e0d4:	2b00      	cmp	r3, #0
    e0d6:	d100      	bne.n	e0da <usart_init+0xfe>
    e0d8:	e0a0      	b.n	e21c <usart_init+0x240>
    e0da:	2380      	movs	r3, #128	; 0x80
    e0dc:	055b      	lsls	r3, r3, #21
    e0de:	4599      	cmp	r9, r3
    e0e0:	d100      	bne.n	e0e4 <usart_init+0x108>
    e0e2:	e084      	b.n	e1ee <usart_init+0x212>
	if(config->encoding_format_enable) {
    e0e4:	7e73      	ldrb	r3, [r6, #25]
    e0e6:	2b00      	cmp	r3, #0
    e0e8:	d002      	beq.n	e0f0 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    e0ea:	7eb3      	ldrb	r3, [r6, #26]
    e0ec:	4642      	mov	r2, r8
    e0ee:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    e0f0:	682a      	ldr	r2, [r5, #0]
    e0f2:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    e0f4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    e0f6:	2b00      	cmp	r3, #0
    e0f8:	d1fc      	bne.n	e0f4 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    e0fa:	330e      	adds	r3, #14
    e0fc:	aa06      	add	r2, sp, #24
    e0fe:	4694      	mov	ip, r2
    e100:	4463      	add	r3, ip
    e102:	881b      	ldrh	r3, [r3, #0]
    e104:	4642      	mov	r2, r8
    e106:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    e108:	9b05      	ldr	r3, [sp, #20]
    e10a:	9a03      	ldr	r2, [sp, #12]
    e10c:	4313      	orrs	r3, r2
    e10e:	9a04      	ldr	r2, [sp, #16]
    e110:	4313      	orrs	r3, r2
    e112:	464a      	mov	r2, r9
    e114:	4313      	orrs	r3, r2
    e116:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    e118:	465b      	mov	r3, fp
    e11a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    e11c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    e11e:	4653      	mov	r3, sl
    e120:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    e122:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    e124:	2327      	movs	r3, #39	; 0x27
    e126:	5cf3      	ldrb	r3, [r6, r3]
    e128:	2b00      	cmp	r3, #0
    e12a:	d101      	bne.n	e130 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    e12c:	3304      	adds	r3, #4
    e12e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    e130:	7e73      	ldrb	r3, [r6, #25]
    e132:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    e134:	7f32      	ldrb	r2, [r6, #28]
    e136:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    e138:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    e13a:	7f72      	ldrb	r2, [r6, #29]
    e13c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    e13e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    e140:	2224      	movs	r2, #36	; 0x24
    e142:	5cb2      	ldrb	r2, [r6, r2]
    e144:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    e146:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    e148:	2225      	movs	r2, #37	; 0x25
    e14a:	5cb2      	ldrb	r2, [r6, r2]
    e14c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    e14e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    e150:	7ab1      	ldrb	r1, [r6, #10]
    e152:	7af2      	ldrb	r2, [r6, #11]
    e154:	4311      	orrs	r1, r2
    e156:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    e158:	8933      	ldrh	r3, [r6, #8]
    e15a:	2bff      	cmp	r3, #255	; 0xff
    e15c:	d100      	bne.n	e160 <usart_init+0x184>
    e15e:	e081      	b.n	e264 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    e160:	2280      	movs	r2, #128	; 0x80
    e162:	0452      	lsls	r2, r2, #17
    e164:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    e166:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    e168:	232c      	movs	r3, #44	; 0x2c
    e16a:	5cf3      	ldrb	r3, [r6, r3]
    e16c:	2b00      	cmp	r3, #0
    e16e:	d103      	bne.n	e178 <usart_init+0x19c>
    e170:	4b62      	ldr	r3, [pc, #392]	; (e2fc <usart_init+0x320>)
    e172:	789b      	ldrb	r3, [r3, #2]
    e174:	079b      	lsls	r3, r3, #30
    e176:	d501      	bpl.n	e17c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    e178:	2380      	movs	r3, #128	; 0x80
    e17a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    e17c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    e17e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    e180:	2b00      	cmp	r3, #0
    e182:	d1fc      	bne.n	e17e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    e184:	4643      	mov	r3, r8
    e186:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    e188:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    e18a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    e18c:	2b00      	cmp	r3, #0
    e18e:	d1fc      	bne.n	e18a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    e190:	4643      	mov	r3, r8
    e192:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    e194:	ab0e      	add	r3, sp, #56	; 0x38
    e196:	2280      	movs	r2, #128	; 0x80
    e198:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    e19a:	2200      	movs	r2, #0
    e19c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    e19e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    e1a0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    e1a2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    e1a4:	930a      	str	r3, [sp, #40]	; 0x28
    e1a6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    e1a8:	930b      	str	r3, [sp, #44]	; 0x2c
    e1aa:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    e1ac:	930c      	str	r3, [sp, #48]	; 0x30
    e1ae:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    e1b0:	9302      	str	r3, [sp, #8]
    e1b2:	930d      	str	r3, [sp, #52]	; 0x34
    e1b4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    e1b6:	ae0a      	add	r6, sp, #40	; 0x28
    e1b8:	e063      	b.n	e282 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    e1ba:	2308      	movs	r3, #8
    e1bc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    e1be:	3b07      	subs	r3, #7
    e1c0:	9307      	str	r3, [sp, #28]
    e1c2:	e77a      	b.n	e0ba <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    e1c4:	6833      	ldr	r3, [r6, #0]
    e1c6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    e1c8:	68f3      	ldr	r3, [r6, #12]
    e1ca:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    e1cc:	6973      	ldr	r3, [r6, #20]
    e1ce:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    e1d0:	7e33      	ldrb	r3, [r6, #24]
    e1d2:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    e1d4:	2326      	movs	r3, #38	; 0x26
    e1d6:	5cf3      	ldrb	r3, [r6, r3]
    e1d8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    e1da:	6873      	ldr	r3, [r6, #4]
    e1dc:	4699      	mov	r9, r3
	switch (transfer_mode)
    e1de:	2b00      	cmp	r3, #0
    e1e0:	d018      	beq.n	e214 <usart_init+0x238>
    e1e2:	2380      	movs	r3, #128	; 0x80
    e1e4:	055b      	lsls	r3, r3, #21
    e1e6:	4599      	cmp	r9, r3
    e1e8:	d001      	beq.n	e1ee <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    e1ea:	2000      	movs	r0, #0
    e1ec:	e025      	b.n	e23a <usart_init+0x25e>
			if (!config->use_external_clock) {
    e1ee:	2327      	movs	r3, #39	; 0x27
    e1f0:	5cf3      	ldrb	r3, [r6, r3]
    e1f2:	2b00      	cmp	r3, #0
    e1f4:	d000      	beq.n	e1f8 <usart_init+0x21c>
    e1f6:	e775      	b.n	e0e4 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    e1f8:	6a33      	ldr	r3, [r6, #32]
    e1fa:	001f      	movs	r7, r3
    e1fc:	b2c0      	uxtb	r0, r0
    e1fe:	4b40      	ldr	r3, [pc, #256]	; (e300 <usart_init+0x324>)
    e200:	4798      	blx	r3
    e202:	0001      	movs	r1, r0
    e204:	220e      	movs	r2, #14
    e206:	ab06      	add	r3, sp, #24
    e208:	469c      	mov	ip, r3
    e20a:	4462      	add	r2, ip
    e20c:	0038      	movs	r0, r7
    e20e:	4b3d      	ldr	r3, [pc, #244]	; (e304 <usart_init+0x328>)
    e210:	4798      	blx	r3
    e212:	e012      	b.n	e23a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    e214:	2308      	movs	r3, #8
    e216:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    e218:	2300      	movs	r3, #0
    e21a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    e21c:	2327      	movs	r3, #39	; 0x27
    e21e:	5cf3      	ldrb	r3, [r6, r3]
    e220:	2b00      	cmp	r3, #0
    e222:	d00e      	beq.n	e242 <usart_init+0x266>
				status_code =
    e224:	9b06      	ldr	r3, [sp, #24]
    e226:	9300      	str	r3, [sp, #0]
    e228:	9b07      	ldr	r3, [sp, #28]
    e22a:	220e      	movs	r2, #14
    e22c:	a906      	add	r1, sp, #24
    e22e:	468c      	mov	ip, r1
    e230:	4462      	add	r2, ip
    e232:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    e234:	6a30      	ldr	r0, [r6, #32]
    e236:	4f34      	ldr	r7, [pc, #208]	; (e308 <usart_init+0x32c>)
    e238:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    e23a:	2800      	cmp	r0, #0
    e23c:	d000      	beq.n	e240 <usart_init+0x264>
    e23e:	e6e0      	b.n	e002 <usart_init+0x26>
    e240:	e750      	b.n	e0e4 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    e242:	6a33      	ldr	r3, [r6, #32]
    e244:	001f      	movs	r7, r3
    e246:	b2c0      	uxtb	r0, r0
    e248:	4b2d      	ldr	r3, [pc, #180]	; (e300 <usart_init+0x324>)
    e24a:	4798      	blx	r3
    e24c:	0001      	movs	r1, r0
				status_code =
    e24e:	9b06      	ldr	r3, [sp, #24]
    e250:	9300      	str	r3, [sp, #0]
    e252:	9b07      	ldr	r3, [sp, #28]
    e254:	220e      	movs	r2, #14
    e256:	a806      	add	r0, sp, #24
    e258:	4684      	mov	ip, r0
    e25a:	4462      	add	r2, ip
    e25c:	0038      	movs	r0, r7
    e25e:	4f2a      	ldr	r7, [pc, #168]	; (e308 <usart_init+0x32c>)
    e260:	47b8      	blx	r7
    e262:	e7ea      	b.n	e23a <usart_init+0x25e>
		if(config->lin_slave_enable) {
    e264:	7ef3      	ldrb	r3, [r6, #27]
    e266:	2b00      	cmp	r3, #0
    e268:	d100      	bne.n	e26c <usart_init+0x290>
    e26a:	e77d      	b.n	e168 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    e26c:	2380      	movs	r3, #128	; 0x80
    e26e:	04db      	lsls	r3, r3, #19
    e270:	431f      	orrs	r7, r3
    e272:	e779      	b.n	e168 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    e274:	0020      	movs	r0, r4
    e276:	4b25      	ldr	r3, [pc, #148]	; (e30c <usart_init+0x330>)
    e278:	4798      	blx	r3
    e27a:	e007      	b.n	e28c <usart_init+0x2b0>
    e27c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    e27e:	2f04      	cmp	r7, #4
    e280:	d00d      	beq.n	e29e <usart_init+0x2c2>
    e282:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    e284:	00bb      	lsls	r3, r7, #2
    e286:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    e288:	2800      	cmp	r0, #0
    e28a:	d0f3      	beq.n	e274 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    e28c:	1c43      	adds	r3, r0, #1
    e28e:	d0f5      	beq.n	e27c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    e290:	a90e      	add	r1, sp, #56	; 0x38
    e292:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    e294:	0c00      	lsrs	r0, r0, #16
    e296:	b2c0      	uxtb	r0, r0
    e298:	4b1d      	ldr	r3, [pc, #116]	; (e310 <usart_init+0x334>)
    e29a:	4798      	blx	r3
    e29c:	e7ee      	b.n	e27c <usart_init+0x2a0>
		module->callback[i]            = NULL;
    e29e:	2300      	movs	r3, #0
    e2a0:	60eb      	str	r3, [r5, #12]
    e2a2:	612b      	str	r3, [r5, #16]
    e2a4:	616b      	str	r3, [r5, #20]
    e2a6:	61ab      	str	r3, [r5, #24]
    e2a8:	61eb      	str	r3, [r5, #28]
    e2aa:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    e2ac:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    e2ae:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    e2b0:	2200      	movs	r2, #0
    e2b2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    e2b4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    e2b6:	3330      	adds	r3, #48	; 0x30
    e2b8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    e2ba:	3301      	adds	r3, #1
    e2bc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    e2be:	3301      	adds	r3, #1
    e2c0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    e2c2:	3301      	adds	r3, #1
    e2c4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    e2c6:	6828      	ldr	r0, [r5, #0]
    e2c8:	4b07      	ldr	r3, [pc, #28]	; (e2e8 <usart_init+0x30c>)
    e2ca:	4798      	blx	r3
    e2cc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    e2ce:	4911      	ldr	r1, [pc, #68]	; (e314 <usart_init+0x338>)
    e2d0:	4b11      	ldr	r3, [pc, #68]	; (e318 <usart_init+0x33c>)
    e2d2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    e2d4:	00a4      	lsls	r4, r4, #2
    e2d6:	4b11      	ldr	r3, [pc, #68]	; (e31c <usart_init+0x340>)
    e2d8:	50e5      	str	r5, [r4, r3]
	return status_code;
    e2da:	2000      	movs	r0, #0
    e2dc:	e691      	b.n	e002 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    e2de:	2310      	movs	r3, #16
    e2e0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    e2e2:	2300      	movs	r3, #0
    e2e4:	9307      	str	r3, [sp, #28]
    e2e6:	e6e8      	b.n	e0ba <usart_init+0xde>
    e2e8:	0000d911 	.word	0x0000d911
    e2ec:	40000400 	.word	0x40000400
    e2f0:	0000eb81 	.word	0x0000eb81
    e2f4:	0000eaf5 	.word	0x0000eaf5
    e2f8:	0000d74d 	.word	0x0000d74d
    e2fc:	41002000 	.word	0x41002000
    e300:	0000eb9d 	.word	0x0000eb9d
    e304:	0000d68f 	.word	0x0000d68f
    e308:	0000d6b9 	.word	0x0000d6b9
    e30c:	0000d799 	.word	0x0000d799
    e310:	0000eca9 	.word	0x0000eca9
    e314:	0000e421 	.word	0x0000e421
    e318:	0000d94d 	.word	0x0000d94d
    e31c:	20005d24 	.word	0x20005d24

0000e320 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    e320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e322:	0006      	movs	r6, r0
    e324:	000c      	movs	r4, r1
    e326:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    e328:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    e32a:	4b0a      	ldr	r3, [pc, #40]	; (e354 <_usart_write_buffer+0x34>)
    e32c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    e32e:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    e330:	b29b      	uxth	r3, r3
    e332:	2b00      	cmp	r3, #0
    e334:	d003      	beq.n	e33e <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    e336:	4b08      	ldr	r3, [pc, #32]	; (e358 <_usart_write_buffer+0x38>)
    e338:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    e33a:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    e33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    e33e:	85f5      	strh	r5, [r6, #46]	; 0x2e
    e340:	4b05      	ldr	r3, [pc, #20]	; (e358 <_usart_write_buffer+0x38>)
    e342:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    e344:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    e346:	2205      	movs	r2, #5
    e348:	2333      	movs	r3, #51	; 0x33
    e34a:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    e34c:	3b32      	subs	r3, #50	; 0x32
    e34e:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    e350:	2000      	movs	r0, #0
    e352:	e7f3      	b.n	e33c <_usart_write_buffer+0x1c>
    e354:	0000d0fd 	.word	0x0000d0fd
    e358:	0000d13d 	.word	0x0000d13d

0000e35c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    e35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e35e:	0004      	movs	r4, r0
    e360:	000d      	movs	r5, r1
    e362:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    e364:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    e366:	4b0f      	ldr	r3, [pc, #60]	; (e3a4 <_usart_read_buffer+0x48>)
    e368:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    e36a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    e36c:	b29b      	uxth	r3, r3
    e36e:	2b00      	cmp	r3, #0
    e370:	d003      	beq.n	e37a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    e372:	4b0d      	ldr	r3, [pc, #52]	; (e3a8 <_usart_read_buffer+0x4c>)
    e374:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    e376:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    e378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    e37a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    e37c:	4b0a      	ldr	r3, [pc, #40]	; (e3a8 <_usart_read_buffer+0x4c>)
    e37e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    e380:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    e382:	2205      	movs	r2, #5
    e384:	2332      	movs	r3, #50	; 0x32
    e386:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    e388:	3b2e      	subs	r3, #46	; 0x2e
    e38a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    e38c:	7a23      	ldrb	r3, [r4, #8]
    e38e:	2b00      	cmp	r3, #0
    e390:	d001      	beq.n	e396 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    e392:	2320      	movs	r3, #32
    e394:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    e396:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    e398:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    e39a:	2b00      	cmp	r3, #0
    e39c:	d0ec      	beq.n	e378 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    e39e:	2308      	movs	r3, #8
    e3a0:	75bb      	strb	r3, [r7, #22]
    e3a2:	e7e9      	b.n	e378 <_usart_read_buffer+0x1c>
    e3a4:	0000d0fd 	.word	0x0000d0fd
    e3a8:	0000d13d 	.word	0x0000d13d

0000e3ac <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    e3ac:	1c93      	adds	r3, r2, #2
    e3ae:	009b      	lsls	r3, r3, #2
    e3b0:	18c3      	adds	r3, r0, r3
    e3b2:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    e3b4:	2130      	movs	r1, #48	; 0x30
    e3b6:	2301      	movs	r3, #1
    e3b8:	4093      	lsls	r3, r2
    e3ba:	001a      	movs	r2, r3
    e3bc:	5c43      	ldrb	r3, [r0, r1]
    e3be:	4313      	orrs	r3, r2
    e3c0:	5443      	strb	r3, [r0, r1]
}
    e3c2:	4770      	bx	lr

0000e3c4 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    e3c4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    e3c6:	2317      	movs	r3, #23
	if (length == 0) {
    e3c8:	2a00      	cmp	r2, #0
    e3ca:	d101      	bne.n	e3d0 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    e3cc:	0018      	movs	r0, r3
    e3ce:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    e3d0:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    e3d2:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    e3d4:	2c00      	cmp	r4, #0
    e3d6:	d0f9      	beq.n	e3cc <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    e3d8:	4b01      	ldr	r3, [pc, #4]	; (e3e0 <usart_write_buffer_job+0x1c>)
    e3da:	4798      	blx	r3
    e3dc:	0003      	movs	r3, r0
    e3de:	e7f5      	b.n	e3cc <usart_write_buffer_job+0x8>
    e3e0:	0000e321 	.word	0x0000e321

0000e3e4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    e3e4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    e3e6:	2317      	movs	r3, #23
	if (length == 0) {
    e3e8:	2a00      	cmp	r2, #0
    e3ea:	d101      	bne.n	e3f0 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    e3ec:	0018      	movs	r0, r3
    e3ee:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    e3f0:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    e3f2:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    e3f4:	2c00      	cmp	r4, #0
    e3f6:	d0f9      	beq.n	e3ec <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    e3f8:	4b01      	ldr	r3, [pc, #4]	; (e400 <usart_read_buffer_job+0x1c>)
    e3fa:	4798      	blx	r3
    e3fc:	0003      	movs	r3, r0
    e3fe:	e7f5      	b.n	e3ec <usart_read_buffer_job+0x8>
    e400:	0000e35d 	.word	0x0000e35d

0000e404 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    e404:	2900      	cmp	r1, #0
    e406:	d003      	beq.n	e410 <usart_get_job_status+0xc>
    e408:	2901      	cmp	r1, #1
    e40a:	d005      	beq.n	e418 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    e40c:	2017      	movs	r0, #23
    e40e:	e002      	b.n	e416 <usart_get_job_status+0x12>
			status_code = module->rx_status;
    e410:	2332      	movs	r3, #50	; 0x32
    e412:	5cc0      	ldrb	r0, [r0, r3]
    e414:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    e416:	4770      	bx	lr
			status_code = module->tx_status;
    e418:	2333      	movs	r3, #51	; 0x33
    e41a:	5cc0      	ldrb	r0, [r0, r3]
    e41c:	b2c0      	uxtb	r0, r0
			break;
    e41e:	e7fa      	b.n	e416 <usart_get_job_status+0x12>

0000e420 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    e420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    e422:	0080      	lsls	r0, r0, #2
    e424:	4b62      	ldr	r3, [pc, #392]	; (e5b0 <_usart_interrupt_handler+0x190>)
    e426:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    e428:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    e42a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    e42c:	2b00      	cmp	r3, #0
    e42e:	d1fc      	bne.n	e42a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    e430:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    e432:	7da6      	ldrb	r6, [r4, #22]
    e434:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    e436:	2330      	movs	r3, #48	; 0x30
    e438:	5ceb      	ldrb	r3, [r5, r3]
    e43a:	2231      	movs	r2, #49	; 0x31
    e43c:	5caf      	ldrb	r7, [r5, r2]
    e43e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    e440:	07f3      	lsls	r3, r6, #31
    e442:	d522      	bpl.n	e48a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    e444:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    e446:	b29b      	uxth	r3, r3
    e448:	2b00      	cmp	r3, #0
    e44a:	d01c      	beq.n	e486 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    e44c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    e44e:	7813      	ldrb	r3, [r2, #0]
    e450:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    e452:	1c51      	adds	r1, r2, #1
    e454:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    e456:	7969      	ldrb	r1, [r5, #5]
    e458:	2901      	cmp	r1, #1
    e45a:	d00e      	beq.n	e47a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    e45c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    e45e:	05db      	lsls	r3, r3, #23
    e460:	0ddb      	lsrs	r3, r3, #23
    e462:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    e464:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    e466:	3b01      	subs	r3, #1
    e468:	b29b      	uxth	r3, r3
    e46a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    e46c:	2b00      	cmp	r3, #0
    e46e:	d10c      	bne.n	e48a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    e470:	3301      	adds	r3, #1
    e472:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    e474:	3301      	adds	r3, #1
    e476:	75a3      	strb	r3, [r4, #22]
    e478:	e007      	b.n	e48a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    e47a:	7851      	ldrb	r1, [r2, #1]
    e47c:	0209      	lsls	r1, r1, #8
    e47e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    e480:	3202      	adds	r2, #2
    e482:	62aa      	str	r2, [r5, #40]	; 0x28
    e484:	e7eb      	b.n	e45e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    e486:	2301      	movs	r3, #1
    e488:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    e48a:	07b3      	lsls	r3, r6, #30
    e48c:	d506      	bpl.n	e49c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    e48e:	2302      	movs	r3, #2
    e490:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    e492:	2200      	movs	r2, #0
    e494:	3331      	adds	r3, #49	; 0x31
    e496:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    e498:	07fb      	lsls	r3, r7, #31
    e49a:	d41a      	bmi.n	e4d2 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    e49c:	0773      	lsls	r3, r6, #29
    e49e:	d565      	bpl.n	e56c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    e4a0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    e4a2:	b29b      	uxth	r3, r3
    e4a4:	2b00      	cmp	r3, #0
    e4a6:	d05f      	beq.n	e568 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    e4a8:	8b63      	ldrh	r3, [r4, #26]
    e4aa:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    e4ac:	071a      	lsls	r2, r3, #28
    e4ae:	d414      	bmi.n	e4da <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    e4b0:	223f      	movs	r2, #63	; 0x3f
    e4b2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    e4b4:	2b00      	cmp	r3, #0
    e4b6:	d034      	beq.n	e522 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    e4b8:	079a      	lsls	r2, r3, #30
    e4ba:	d511      	bpl.n	e4e0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    e4bc:	221a      	movs	r2, #26
    e4be:	2332      	movs	r3, #50	; 0x32
    e4c0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    e4c2:	3b30      	subs	r3, #48	; 0x30
    e4c4:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    e4c6:	077b      	lsls	r3, r7, #29
    e4c8:	d550      	bpl.n	e56c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    e4ca:	0028      	movs	r0, r5
    e4cc:	696b      	ldr	r3, [r5, #20]
    e4ce:	4798      	blx	r3
    e4d0:	e04c      	b.n	e56c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    e4d2:	0028      	movs	r0, r5
    e4d4:	68eb      	ldr	r3, [r5, #12]
    e4d6:	4798      	blx	r3
    e4d8:	e7e0      	b.n	e49c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    e4da:	2237      	movs	r2, #55	; 0x37
    e4dc:	4013      	ands	r3, r2
    e4de:	e7e9      	b.n	e4b4 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    e4e0:	075a      	lsls	r2, r3, #29
    e4e2:	d505      	bpl.n	e4f0 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    e4e4:	221e      	movs	r2, #30
    e4e6:	2332      	movs	r3, #50	; 0x32
    e4e8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    e4ea:	3b2e      	subs	r3, #46	; 0x2e
    e4ec:	8363      	strh	r3, [r4, #26]
    e4ee:	e7ea      	b.n	e4c6 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    e4f0:	07da      	lsls	r2, r3, #31
    e4f2:	d505      	bpl.n	e500 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    e4f4:	2213      	movs	r2, #19
    e4f6:	2332      	movs	r3, #50	; 0x32
    e4f8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    e4fa:	3b31      	subs	r3, #49	; 0x31
    e4fc:	8363      	strh	r3, [r4, #26]
    e4fe:	e7e2      	b.n	e4c6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    e500:	06da      	lsls	r2, r3, #27
    e502:	d505      	bpl.n	e510 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    e504:	2242      	movs	r2, #66	; 0x42
    e506:	2332      	movs	r3, #50	; 0x32
    e508:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    e50a:	3b22      	subs	r3, #34	; 0x22
    e50c:	8363      	strh	r3, [r4, #26]
    e50e:	e7da      	b.n	e4c6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    e510:	2220      	movs	r2, #32
    e512:	421a      	tst	r2, r3
    e514:	d0d7      	beq.n	e4c6 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    e516:	3221      	adds	r2, #33	; 0x21
    e518:	2332      	movs	r3, #50	; 0x32
    e51a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    e51c:	3b12      	subs	r3, #18
    e51e:	8363      	strh	r3, [r4, #26]
    e520:	e7d1      	b.n	e4c6 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    e522:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    e524:	05db      	lsls	r3, r3, #23
    e526:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    e528:	b2da      	uxtb	r2, r3
    e52a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e52c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    e52e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e530:	1c51      	adds	r1, r2, #1
    e532:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    e534:	7969      	ldrb	r1, [r5, #5]
    e536:	2901      	cmp	r1, #1
    e538:	d010      	beq.n	e55c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    e53a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    e53c:	3b01      	subs	r3, #1
    e53e:	b29b      	uxth	r3, r3
    e540:	85ab      	strh	r3, [r5, #44]	; 0x2c
    e542:	2b00      	cmp	r3, #0
    e544:	d112      	bne.n	e56c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    e546:	3304      	adds	r3, #4
    e548:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    e54a:	2200      	movs	r2, #0
    e54c:	332e      	adds	r3, #46	; 0x2e
    e54e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    e550:	07bb      	lsls	r3, r7, #30
    e552:	d50b      	bpl.n	e56c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    e554:	0028      	movs	r0, r5
    e556:	692b      	ldr	r3, [r5, #16]
    e558:	4798      	blx	r3
    e55a:	e007      	b.n	e56c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    e55c:	0a1b      	lsrs	r3, r3, #8
    e55e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    e560:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e562:	3301      	adds	r3, #1
    e564:	626b      	str	r3, [r5, #36]	; 0x24
    e566:	e7e8      	b.n	e53a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    e568:	2304      	movs	r3, #4
    e56a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    e56c:	06f3      	lsls	r3, r6, #27
    e56e:	d504      	bpl.n	e57a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    e570:	2310      	movs	r3, #16
    e572:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    e574:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    e576:	06fb      	lsls	r3, r7, #27
    e578:	d40e      	bmi.n	e598 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    e57a:	06b3      	lsls	r3, r6, #26
    e57c:	d504      	bpl.n	e588 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    e57e:	2320      	movs	r3, #32
    e580:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    e582:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    e584:	073b      	lsls	r3, r7, #28
    e586:	d40b      	bmi.n	e5a0 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    e588:	0733      	lsls	r3, r6, #28
    e58a:	d504      	bpl.n	e596 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    e58c:	2308      	movs	r3, #8
    e58e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    e590:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    e592:	06bb      	lsls	r3, r7, #26
    e594:	d408      	bmi.n	e5a8 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    e596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    e598:	0028      	movs	r0, r5
    e59a:	69eb      	ldr	r3, [r5, #28]
    e59c:	4798      	blx	r3
    e59e:	e7ec      	b.n	e57a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    e5a0:	0028      	movs	r0, r5
    e5a2:	69ab      	ldr	r3, [r5, #24]
    e5a4:	4798      	blx	r3
    e5a6:	e7ef      	b.n	e588 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    e5a8:	6a2b      	ldr	r3, [r5, #32]
    e5aa:	0028      	movs	r0, r5
    e5ac:	4798      	blx	r3
}
    e5ae:	e7f2      	b.n	e596 <_usart_interrupt_handler+0x176>
    e5b0:	20005d24 	.word	0x20005d24

0000e5b4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    e5b4:	b510      	push	{r4, lr}
	switch (clock_source) {
    e5b6:	2808      	cmp	r0, #8
    e5b8:	d803      	bhi.n	e5c2 <system_clock_source_get_hz+0xe>
    e5ba:	0080      	lsls	r0, r0, #2
    e5bc:	4b1c      	ldr	r3, [pc, #112]	; (e630 <system_clock_source_get_hz+0x7c>)
    e5be:	581b      	ldr	r3, [r3, r0]
    e5c0:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    e5c2:	2000      	movs	r0, #0
    e5c4:	e032      	b.n	e62c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    e5c6:	4b1b      	ldr	r3, [pc, #108]	; (e634 <system_clock_source_get_hz+0x80>)
    e5c8:	6918      	ldr	r0, [r3, #16]
    e5ca:	e02f      	b.n	e62c <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    e5cc:	4b1a      	ldr	r3, [pc, #104]	; (e638 <system_clock_source_get_hz+0x84>)
    e5ce:	6a1b      	ldr	r3, [r3, #32]
    e5d0:	059b      	lsls	r3, r3, #22
    e5d2:	0f9b      	lsrs	r3, r3, #30
    e5d4:	4819      	ldr	r0, [pc, #100]	; (e63c <system_clock_source_get_hz+0x88>)
    e5d6:	40d8      	lsrs	r0, r3
    e5d8:	e028      	b.n	e62c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    e5da:	4b16      	ldr	r3, [pc, #88]	; (e634 <system_clock_source_get_hz+0x80>)
    e5dc:	6958      	ldr	r0, [r3, #20]
    e5de:	e025      	b.n	e62c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    e5e0:	4b14      	ldr	r3, [pc, #80]	; (e634 <system_clock_source_get_hz+0x80>)
    e5e2:	681b      	ldr	r3, [r3, #0]
			return 0;
    e5e4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    e5e6:	079b      	lsls	r3, r3, #30
    e5e8:	d520      	bpl.n	e62c <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    e5ea:	4913      	ldr	r1, [pc, #76]	; (e638 <system_clock_source_get_hz+0x84>)
    e5ec:	2210      	movs	r2, #16
    e5ee:	68cb      	ldr	r3, [r1, #12]
    e5f0:	421a      	tst	r2, r3
    e5f2:	d0fc      	beq.n	e5ee <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    e5f4:	4b0f      	ldr	r3, [pc, #60]	; (e634 <system_clock_source_get_hz+0x80>)
    e5f6:	681a      	ldr	r2, [r3, #0]
    e5f8:	2324      	movs	r3, #36	; 0x24
    e5fa:	4013      	ands	r3, r2
    e5fc:	2b04      	cmp	r3, #4
    e5fe:	d001      	beq.n	e604 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    e600:	480f      	ldr	r0, [pc, #60]	; (e640 <system_clock_source_get_hz+0x8c>)
    e602:	e013      	b.n	e62c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    e604:	2000      	movs	r0, #0
    e606:	4b0f      	ldr	r3, [pc, #60]	; (e644 <system_clock_source_get_hz+0x90>)
    e608:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    e60a:	4b0a      	ldr	r3, [pc, #40]	; (e634 <system_clock_source_get_hz+0x80>)
    e60c:	689b      	ldr	r3, [r3, #8]
    e60e:	041b      	lsls	r3, r3, #16
    e610:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    e612:	4358      	muls	r0, r3
    e614:	e00a      	b.n	e62c <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    e616:	2350      	movs	r3, #80	; 0x50
    e618:	4a07      	ldr	r2, [pc, #28]	; (e638 <system_clock_source_get_hz+0x84>)
    e61a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    e61c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    e61e:	075b      	lsls	r3, r3, #29
    e620:	d504      	bpl.n	e62c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    e622:	4b04      	ldr	r3, [pc, #16]	; (e634 <system_clock_source_get_hz+0x80>)
    e624:	68d8      	ldr	r0, [r3, #12]
    e626:	e001      	b.n	e62c <system_clock_source_get_hz+0x78>
		return 32768UL;
    e628:	2080      	movs	r0, #128	; 0x80
    e62a:	0200      	lsls	r0, r0, #8
	}
}
    e62c:	bd10      	pop	{r4, pc}
    e62e:	46c0      	nop			; (mov r8, r8)
    e630:	0001b3b0 	.word	0x0001b3b0
    e634:	2000415c 	.word	0x2000415c
    e638:	40000800 	.word	0x40000800
    e63c:	007a1200 	.word	0x007a1200
    e640:	02dc6c00 	.word	0x02dc6c00
    e644:	0000eb9d 	.word	0x0000eb9d

0000e648 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    e648:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    e64a:	490c      	ldr	r1, [pc, #48]	; (e67c <system_clock_source_osc8m_set_config+0x34>)
    e64c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    e64e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    e650:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    e652:	7840      	ldrb	r0, [r0, #1]
    e654:	2201      	movs	r2, #1
    e656:	4010      	ands	r0, r2
    e658:	0180      	lsls	r0, r0, #6
    e65a:	2640      	movs	r6, #64	; 0x40
    e65c:	43b3      	bics	r3, r6
    e65e:	4303      	orrs	r3, r0
    e660:	402a      	ands	r2, r5
    e662:	01d2      	lsls	r2, r2, #7
    e664:	2080      	movs	r0, #128	; 0x80
    e666:	4383      	bics	r3, r0
    e668:	4313      	orrs	r3, r2
    e66a:	2203      	movs	r2, #3
    e66c:	4022      	ands	r2, r4
    e66e:	0212      	lsls	r2, r2, #8
    e670:	4803      	ldr	r0, [pc, #12]	; (e680 <system_clock_source_osc8m_set_config+0x38>)
    e672:	4003      	ands	r3, r0
    e674:	4313      	orrs	r3, r2
    e676:	620b      	str	r3, [r1, #32]
}
    e678:	bd70      	pop	{r4, r5, r6, pc}
    e67a:	46c0      	nop			; (mov r8, r8)
    e67c:	40000800 	.word	0x40000800
    e680:	fffffcff 	.word	0xfffffcff

0000e684 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    e684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e686:	0005      	movs	r5, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    e688:	68c4      	ldr	r4, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    e68a:	7d03      	ldrb	r3, [r0, #20]
    e68c:	2b01      	cmp	r3, #1
    e68e:	d03b      	beq.n	e708 <system_clock_source_dpll_set_config+0x84>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    e690:	68ab      	ldr	r3, [r5, #8]
    e692:	0118      	lsls	r0, r3, #4
    e694:	0021      	movs	r1, r4
    e696:	4b20      	ldr	r3, [pc, #128]	; (e718 <system_clock_source_dpll_set_config+0x94>)
    e698:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    e69a:	220f      	movs	r2, #15
    e69c:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    e69e:	0903      	lsrs	r3, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    e6a0:	782e      	ldrb	r6, [r5, #0]
    e6a2:	01f6      	lsls	r6, r6, #7
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    e6a4:	7869      	ldrb	r1, [r5, #1]
    e6a6:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    e6a8:	430e      	orrs	r6, r1
    e6aa:	b2f6      	uxtb	r6, r6
	SYSCTRL->DPLLCTRLA.reg =
    e6ac:	491b      	ldr	r1, [pc, #108]	; (e71c <system_clock_source_dpll_set_config+0x98>)
    e6ae:	2744      	movs	r7, #68	; 0x44
    e6b0:	55ce      	strb	r6, [r1, r7]

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    e6b2:	0416      	lsls	r6, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    e6b4:	3b01      	subs	r3, #1
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    e6b6:	051b      	lsls	r3, r3, #20
    e6b8:	0d1b      	lsrs	r3, r3, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    e6ba:	4333      	orrs	r3, r6
	SYSCTRL->DPLLRATIO.reg =
    e6bc:	648b      	str	r3, [r1, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    e6be:	78ab      	ldrb	r3, [r5, #2]
    e6c0:	031b      	lsls	r3, r3, #12
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    e6c2:	78ee      	ldrb	r6, [r5, #3]
    e6c4:	00f6      	lsls	r6, r6, #3
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    e6c6:	4333      	orrs	r3, r6
    e6c8:	792e      	ldrb	r6, [r5, #4]
    e6ca:	00b6      	lsls	r6, r6, #2
    e6cc:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    e6ce:	7caf      	ldrb	r7, [r5, #18]
    e6d0:	2603      	movs	r6, #3
    e6d2:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    e6d4:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    e6d6:	8a2e      	ldrh	r6, [r5, #16]
    e6d8:	0436      	lsls	r6, r6, #16
    e6da:	4f11      	ldr	r7, [pc, #68]	; (e720 <system_clock_source_dpll_set_config+0x9c>)
    e6dc:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    e6de:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    e6e0:	7cee      	ldrb	r6, [r5, #19]
    e6e2:	0236      	lsls	r6, r6, #8
    e6e4:	27e0      	movs	r7, #224	; 0xe0
    e6e6:	00ff      	lsls	r7, r7, #3
    e6e8:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    e6ea:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    e6ec:	7d2e      	ldrb	r6, [r5, #20]
    e6ee:	0136      	lsls	r6, r6, #4
    e6f0:	2530      	movs	r5, #48	; 0x30
    e6f2:	4035      	ands	r5, r6
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    e6f4:	432b      	orrs	r3, r5
	SYSCTRL->DPLLCTRLB.reg =
    e6f6:	64cb      	str	r3, [r1, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    e6f8:	230f      	movs	r3, #15
    e6fa:	4398      	bics	r0, r3
    e6fc:	1880      	adds	r0, r0, r2
    e6fe:	4344      	muls	r4, r0
    e700:	0924      	lsrs	r4, r4, #4
	_system_clock_inst.dpll.frequency =
    e702:	4b08      	ldr	r3, [pc, #32]	; (e724 <system_clock_source_dpll_set_config+0xa0>)
    e704:	60dc      	str	r4, [r3, #12]
}
    e706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    e708:	8a01      	ldrh	r1, [r0, #16]
    e70a:	3101      	adds	r1, #1
    e70c:	0049      	lsls	r1, r1, #1
    e70e:	0020      	movs	r0, r4
    e710:	4b01      	ldr	r3, [pc, #4]	; (e718 <system_clock_source_dpll_set_config+0x94>)
    e712:	4798      	blx	r3
    e714:	0004      	movs	r4, r0
    e716:	e7bb      	b.n	e690 <system_clock_source_dpll_set_config+0xc>
    e718:	00015815 	.word	0x00015815
    e71c:	40000800 	.word	0x40000800
    e720:	07ff0000 	.word	0x07ff0000
    e724:	2000415c 	.word	0x2000415c

0000e728 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    e728:	2808      	cmp	r0, #8
    e72a:	d803      	bhi.n	e734 <system_clock_source_enable+0xc>
    e72c:	0080      	lsls	r0, r0, #2
    e72e:	4b25      	ldr	r3, [pc, #148]	; (e7c4 <system_clock_source_enable+0x9c>)
    e730:	581b      	ldr	r3, [r3, r0]
    e732:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    e734:	2017      	movs	r0, #23
    e736:	e044      	b.n	e7c2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    e738:	4a23      	ldr	r2, [pc, #140]	; (e7c8 <system_clock_source_enable+0xa0>)
    e73a:	6a13      	ldr	r3, [r2, #32]
    e73c:	2102      	movs	r1, #2
    e73e:	430b      	orrs	r3, r1
    e740:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    e742:	2000      	movs	r0, #0
    e744:	e03d      	b.n	e7c2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    e746:	4a20      	ldr	r2, [pc, #128]	; (e7c8 <system_clock_source_enable+0xa0>)
    e748:	6993      	ldr	r3, [r2, #24]
    e74a:	2102      	movs	r1, #2
    e74c:	430b      	orrs	r3, r1
    e74e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    e750:	2000      	movs	r0, #0
		break;
    e752:	e036      	b.n	e7c2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    e754:	4a1c      	ldr	r2, [pc, #112]	; (e7c8 <system_clock_source_enable+0xa0>)
    e756:	8a13      	ldrh	r3, [r2, #16]
    e758:	2102      	movs	r1, #2
    e75a:	430b      	orrs	r3, r1
    e75c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    e75e:	2000      	movs	r0, #0
		break;
    e760:	e02f      	b.n	e7c2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    e762:	4a19      	ldr	r2, [pc, #100]	; (e7c8 <system_clock_source_enable+0xa0>)
    e764:	8a93      	ldrh	r3, [r2, #20]
    e766:	2102      	movs	r1, #2
    e768:	430b      	orrs	r3, r1
    e76a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    e76c:	2000      	movs	r0, #0
		break;
    e76e:	e028      	b.n	e7c2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    e770:	4916      	ldr	r1, [pc, #88]	; (e7cc <system_clock_source_enable+0xa4>)
    e772:	680b      	ldr	r3, [r1, #0]
    e774:	2202      	movs	r2, #2
    e776:	4313      	orrs	r3, r2
    e778:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    e77a:	4b13      	ldr	r3, [pc, #76]	; (e7c8 <system_clock_source_enable+0xa0>)
    e77c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    e77e:	0019      	movs	r1, r3
    e780:	320e      	adds	r2, #14
    e782:	68cb      	ldr	r3, [r1, #12]
    e784:	421a      	tst	r2, r3
    e786:	d0fc      	beq.n	e782 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    e788:	4a10      	ldr	r2, [pc, #64]	; (e7cc <system_clock_source_enable+0xa4>)
    e78a:	6891      	ldr	r1, [r2, #8]
    e78c:	4b0e      	ldr	r3, [pc, #56]	; (e7c8 <system_clock_source_enable+0xa0>)
    e78e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    e790:	6852      	ldr	r2, [r2, #4]
    e792:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    e794:	2200      	movs	r2, #0
    e796:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    e798:	0019      	movs	r1, r3
    e79a:	3210      	adds	r2, #16
    e79c:	68cb      	ldr	r3, [r1, #12]
    e79e:	421a      	tst	r2, r3
    e7a0:	d0fc      	beq.n	e79c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    e7a2:	4b0a      	ldr	r3, [pc, #40]	; (e7cc <system_clock_source_enable+0xa4>)
    e7a4:	681b      	ldr	r3, [r3, #0]
    e7a6:	b29b      	uxth	r3, r3
    e7a8:	4a07      	ldr	r2, [pc, #28]	; (e7c8 <system_clock_source_enable+0xa0>)
    e7aa:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    e7ac:	2000      	movs	r0, #0
    e7ae:	e008      	b.n	e7c2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    e7b0:	4905      	ldr	r1, [pc, #20]	; (e7c8 <system_clock_source_enable+0xa0>)
    e7b2:	2244      	movs	r2, #68	; 0x44
    e7b4:	5c8b      	ldrb	r3, [r1, r2]
    e7b6:	2002      	movs	r0, #2
    e7b8:	4303      	orrs	r3, r0
    e7ba:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    e7bc:	2000      	movs	r0, #0
		break;
    e7be:	e000      	b.n	e7c2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    e7c0:	2000      	movs	r0, #0
}
    e7c2:	4770      	bx	lr
    e7c4:	0001b3d4 	.word	0x0001b3d4
    e7c8:	40000800 	.word	0x40000800
    e7cc:	2000415c 	.word	0x2000415c

0000e7d0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    e7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7d2:	46de      	mov	lr, fp
    e7d4:	4657      	mov	r7, sl
    e7d6:	464e      	mov	r6, r9
    e7d8:	4645      	mov	r5, r8
    e7da:	b5e0      	push	{r5, r6, r7, lr}
    e7dc:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    e7de:	22c2      	movs	r2, #194	; 0xc2
    e7e0:	00d2      	lsls	r2, r2, #3
    e7e2:	4b4c      	ldr	r3, [pc, #304]	; (e914 <system_clock_init+0x144>)
    e7e4:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    e7e6:	4a4c      	ldr	r2, [pc, #304]	; (e918 <system_clock_init+0x148>)
    e7e8:	6853      	ldr	r3, [r2, #4]
    e7ea:	211e      	movs	r1, #30
    e7ec:	438b      	bics	r3, r1
    e7ee:	3918      	subs	r1, #24
    e7f0:	430b      	orrs	r3, r1
    e7f2:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    e7f4:	2203      	movs	r2, #3
    e7f6:	ab01      	add	r3, sp, #4
    e7f8:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    e7fa:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    e7fc:	4d47      	ldr	r5, [pc, #284]	; (e91c <system_clock_init+0x14c>)
    e7fe:	b2e0      	uxtb	r0, r4
    e800:	a901      	add	r1, sp, #4
    e802:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    e804:	3401      	adds	r4, #1
    e806:	2c25      	cmp	r4, #37	; 0x25
    e808:	d1f9      	bne.n	e7fe <system_clock_init+0x2e>
	config->run_in_standby  = false;
    e80a:	a80b      	add	r0, sp, #44	; 0x2c
    e80c:	2500      	movs	r5, #0
    e80e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    e810:	2601      	movs	r6, #1
    e812:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    e814:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    e816:	4b42      	ldr	r3, [pc, #264]	; (e920 <system_clock_init+0x150>)
    e818:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    e81a:	2006      	movs	r0, #6
    e81c:	4b41      	ldr	r3, [pc, #260]	; (e924 <system_clock_init+0x154>)
    e81e:	4699      	mov	r9, r3
    e820:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    e822:	4b41      	ldr	r3, [pc, #260]	; (e928 <system_clock_init+0x158>)
    e824:	4798      	blx	r3
	config->high_when_disabled = false;
    e826:	ac01      	add	r4, sp, #4
    e828:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    e82a:	2306      	movs	r3, #6
    e82c:	469a      	mov	sl, r3
    e82e:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    e830:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    e832:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    e834:	2308      	movs	r3, #8
    e836:	6063      	str	r3, [r4, #4]
    e838:	0021      	movs	r1, r4
    e83a:	2001      	movs	r0, #1
    e83c:	4b3b      	ldr	r3, [pc, #236]	; (e92c <system_clock_init+0x15c>)
    e83e:	4698      	mov	r8, r3
    e840:	4798      	blx	r3
    e842:	2001      	movs	r0, #1
    e844:	4f3a      	ldr	r7, [pc, #232]	; (e930 <system_clock_init+0x160>)
    e846:	47b8      	blx	r7
	config->division_factor    = 1;
    e848:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    e84a:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    e84c:	7265      	strb	r5, [r4, #9]
    e84e:	2303      	movs	r3, #3
    e850:	469b      	mov	fp, r3
    e852:	7023      	strb	r3, [r4, #0]
    e854:	7226      	strb	r6, [r4, #8]
    e856:	0021      	movs	r1, r4
    e858:	2002      	movs	r0, #2
    e85a:	47c0      	blx	r8
    e85c:	2002      	movs	r0, #2
    e85e:	47b8      	blx	r7
	config->high_when_disabled = false;
    e860:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    e862:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    e864:	7265      	strb	r5, [r4, #9]
    e866:	465b      	mov	r3, fp
    e868:	7023      	strb	r3, [r4, #0]
    e86a:	2320      	movs	r3, #32
    e86c:	6063      	str	r3, [r4, #4]
    e86e:	0021      	movs	r1, r4
    e870:	2004      	movs	r0, #4
    e872:	47c0      	blx	r8
    e874:	2004      	movs	r0, #4
    e876:	47b8      	blx	r7
	config->division_factor    = 1;
    e878:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    e87a:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    e87c:	4653      	mov	r3, sl
    e87e:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    e880:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    e882:	7265      	strb	r5, [r4, #9]
    e884:	0021      	movs	r1, r4
    e886:	2005      	movs	r0, #5
    e888:	47c0      	blx	r8
    e88a:	2005      	movs	r0, #5
    e88c:	47b8      	blx	r7
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
    e88e:	a90a      	add	r1, sp, #40	; 0x28
    e890:	700e      	strb	r6, [r1, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
    e892:	2001      	movs	r0, #1
    e894:	4b21      	ldr	r3, [pc, #132]	; (e91c <system_clock_init+0x14c>)
    e896:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
    e898:	2001      	movs	r0, #1
    e89a:	4b26      	ldr	r3, [pc, #152]	; (e934 <system_clock_init+0x164>)
    e89c:	4798      	blx	r3
	config->run_in_standby      = false;
    e89e:	a804      	add	r0, sp, #16
    e8a0:	7045      	strb	r5, [r0, #1]
	config->lock_bypass         = false;
    e8a2:	7085      	strb	r5, [r0, #2]
	config->wake_up_fast        = false;
    e8a4:	70c5      	strb	r5, [r0, #3]
	config->low_power_enable    = false;
    e8a6:	7105      	strb	r5, [r0, #4]
	config->output_frequency    = 48000000;
    e8a8:	4b23      	ldr	r3, [pc, #140]	; (e938 <system_clock_init+0x168>)
    e8aa:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
    e8ac:	8206      	strh	r6, [r0, #16]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    e8ae:	74c5      	strb	r5, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    e8b0:	7485      	strb	r5, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    e8b2:	7005      	strb	r5, [r0, #0]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    e8b4:	2302      	movs	r3, #2
    e8b6:	7503      	strb	r3, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    e8b8:	4b20      	ldr	r3, [pc, #128]	; (e93c <system_clock_init+0x16c>)
    e8ba:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    e8bc:	4b20      	ldr	r3, [pc, #128]	; (e940 <system_clock_init+0x170>)
    e8be:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    e8c0:	2008      	movs	r0, #8
    e8c2:	47c8      	blx	r9
		return ((SYSCTRL->DPLLSTATUS.reg &
    e8c4:	4813      	ldr	r0, [pc, #76]	; (e914 <system_clock_init+0x144>)
    e8c6:	2150      	movs	r1, #80	; 0x50
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    e8c8:	2203      	movs	r2, #3
		return ((SYSCTRL->DPLLSTATUS.reg &
    e8ca:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    e8cc:	4013      	ands	r3, r2
    e8ce:	2b03      	cmp	r3, #3
    e8d0:	d1fb      	bne.n	e8ca <system_clock_init+0xfa>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    e8d2:	4910      	ldr	r1, [pc, #64]	; (e914 <system_clock_init+0x144>)
    e8d4:	2244      	movs	r2, #68	; 0x44
    e8d6:	5c88      	ldrb	r0, [r1, r2]
    e8d8:	3b83      	subs	r3, #131	; 0x83
    e8da:	4303      	orrs	r3, r0
    e8dc:	548b      	strb	r3, [r1, r2]
	PM->CPUSEL.reg = (uint32_t)divider;
    e8de:	4a19      	ldr	r2, [pc, #100]	; (e944 <system_clock_init+0x174>)
    e8e0:	2300      	movs	r3, #0
    e8e2:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    e8e4:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    e8e6:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    e8e8:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    e8ea:	a901      	add	r1, sp, #4
    e8ec:	2201      	movs	r2, #1
    e8ee:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    e8f0:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    e8f2:	720b      	strb	r3, [r1, #8]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    e8f4:	3308      	adds	r3, #8
    e8f6:	700b      	strb	r3, [r1, #0]
    e8f8:	724a      	strb	r2, [r1, #9]
    e8fa:	2000      	movs	r0, #0
    e8fc:	4b0b      	ldr	r3, [pc, #44]	; (e92c <system_clock_init+0x15c>)
    e8fe:	4798      	blx	r3
    e900:	2000      	movs	r0, #0
    e902:	4b0b      	ldr	r3, [pc, #44]	; (e930 <system_clock_init+0x160>)
    e904:	4798      	blx	r3
#endif
}
    e906:	b00d      	add	sp, #52	; 0x34
    e908:	bc3c      	pop	{r2, r3, r4, r5}
    e90a:	4690      	mov	r8, r2
    e90c:	4699      	mov	r9, r3
    e90e:	46a2      	mov	sl, r4
    e910:	46ab      	mov	fp, r5
    e912:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e914:	40000800 	.word	0x40000800
    e918:	41004000 	.word	0x41004000
    e91c:	0000eb81 	.word	0x0000eb81
    e920:	0000e649 	.word	0x0000e649
    e924:	0000e729 	.word	0x0000e729
    e928:	0000e949 	.word	0x0000e949
    e92c:	0000e96d 	.word	0x0000e96d
    e930:	0000ea25 	.word	0x0000ea25
    e934:	0000eaf5 	.word	0x0000eaf5
    e938:	02dc6c00 	.word	0x02dc6c00
    e93c:	000f4240 	.word	0x000f4240
    e940:	0000e685 	.word	0x0000e685
    e944:	40000400 	.word	0x40000400

0000e948 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    e948:	4a06      	ldr	r2, [pc, #24]	; (e964 <system_gclk_init+0x1c>)
    e94a:	6993      	ldr	r3, [r2, #24]
    e94c:	2108      	movs	r1, #8
    e94e:	430b      	orrs	r3, r1
    e950:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    e952:	2201      	movs	r2, #1
    e954:	4b04      	ldr	r3, [pc, #16]	; (e968 <system_gclk_init+0x20>)
    e956:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    e958:	0019      	movs	r1, r3
    e95a:	780b      	ldrb	r3, [r1, #0]
    e95c:	4213      	tst	r3, r2
    e95e:	d1fc      	bne.n	e95a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    e960:	4770      	bx	lr
    e962:	46c0      	nop			; (mov r8, r8)
    e964:	40000400 	.word	0x40000400
    e968:	40000c00 	.word	0x40000c00

0000e96c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    e96c:	b570      	push	{r4, r5, r6, lr}
    e96e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    e970:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    e972:	780d      	ldrb	r5, [r1, #0]
    e974:	022d      	lsls	r5, r5, #8
    e976:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    e978:	784b      	ldrb	r3, [r1, #1]
    e97a:	2b00      	cmp	r3, #0
    e97c:	d002      	beq.n	e984 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    e97e:	2380      	movs	r3, #128	; 0x80
    e980:	02db      	lsls	r3, r3, #11
    e982:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    e984:	7a4b      	ldrb	r3, [r1, #9]
    e986:	2b00      	cmp	r3, #0
    e988:	d002      	beq.n	e990 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    e98a:	2380      	movs	r3, #128	; 0x80
    e98c:	031b      	lsls	r3, r3, #12
    e98e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    e990:	6848      	ldr	r0, [r1, #4]
    e992:	2801      	cmp	r0, #1
    e994:	d910      	bls.n	e9b8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    e996:	1e43      	subs	r3, r0, #1
    e998:	4218      	tst	r0, r3
    e99a:	d134      	bne.n	ea06 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    e99c:	2802      	cmp	r0, #2
    e99e:	d930      	bls.n	ea02 <system_gclk_gen_set_config+0x96>
    e9a0:	2302      	movs	r3, #2
    e9a2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    e9a4:	3201      	adds	r2, #1
						mask <<= 1) {
    e9a6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    e9a8:	4298      	cmp	r0, r3
    e9aa:	d8fb      	bhi.n	e9a4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    e9ac:	0212      	lsls	r2, r2, #8
    e9ae:	4332      	orrs	r2, r6
    e9b0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    e9b2:	2380      	movs	r3, #128	; 0x80
    e9b4:	035b      	lsls	r3, r3, #13
    e9b6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    e9b8:	7a0b      	ldrb	r3, [r1, #8]
    e9ba:	2b00      	cmp	r3, #0
    e9bc:	d002      	beq.n	e9c4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    e9be:	2380      	movs	r3, #128	; 0x80
    e9c0:	039b      	lsls	r3, r3, #14
    e9c2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    e9c4:	4a13      	ldr	r2, [pc, #76]	; (ea14 <system_gclk_gen_set_config+0xa8>)
    e9c6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    e9c8:	b25b      	sxtb	r3, r3
    e9ca:	2b00      	cmp	r3, #0
    e9cc:	dbfb      	blt.n	e9c6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    e9ce:	4b12      	ldr	r3, [pc, #72]	; (ea18 <system_gclk_gen_set_config+0xac>)
    e9d0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    e9d2:	4b12      	ldr	r3, [pc, #72]	; (ea1c <system_gclk_gen_set_config+0xb0>)
    e9d4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    e9d6:	4a0f      	ldr	r2, [pc, #60]	; (ea14 <system_gclk_gen_set_config+0xa8>)
    e9d8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    e9da:	b25b      	sxtb	r3, r3
    e9dc:	2b00      	cmp	r3, #0
    e9de:	dbfb      	blt.n	e9d8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    e9e0:	4b0c      	ldr	r3, [pc, #48]	; (ea14 <system_gclk_gen_set_config+0xa8>)
    e9e2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    e9e4:	001a      	movs	r2, r3
    e9e6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    e9e8:	b25b      	sxtb	r3, r3
    e9ea:	2b00      	cmp	r3, #0
    e9ec:	dbfb      	blt.n	e9e6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    e9ee:	4a09      	ldr	r2, [pc, #36]	; (ea14 <system_gclk_gen_set_config+0xa8>)
    e9f0:	6853      	ldr	r3, [r2, #4]
    e9f2:	2180      	movs	r1, #128	; 0x80
    e9f4:	0249      	lsls	r1, r1, #9
    e9f6:	400b      	ands	r3, r1
    e9f8:	431d      	orrs	r5, r3
    e9fa:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    e9fc:	4b08      	ldr	r3, [pc, #32]	; (ea20 <system_gclk_gen_set_config+0xb4>)
    e9fe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    ea00:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    ea02:	2200      	movs	r2, #0
    ea04:	e7d2      	b.n	e9ac <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    ea06:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    ea08:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    ea0a:	2380      	movs	r3, #128	; 0x80
    ea0c:	029b      	lsls	r3, r3, #10
    ea0e:	431d      	orrs	r5, r3
    ea10:	e7d2      	b.n	e9b8 <system_gclk_gen_set_config+0x4c>
    ea12:	46c0      	nop			; (mov r8, r8)
    ea14:	40000c00 	.word	0x40000c00
    ea18:	0000d0fd 	.word	0x0000d0fd
    ea1c:	40000c08 	.word	0x40000c08
    ea20:	0000d13d 	.word	0x0000d13d

0000ea24 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    ea24:	b510      	push	{r4, lr}
    ea26:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ea28:	4a0b      	ldr	r2, [pc, #44]	; (ea58 <system_gclk_gen_enable+0x34>)
    ea2a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    ea2c:	b25b      	sxtb	r3, r3
    ea2e:	2b00      	cmp	r3, #0
    ea30:	dbfb      	blt.n	ea2a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    ea32:	4b0a      	ldr	r3, [pc, #40]	; (ea5c <system_gclk_gen_enable+0x38>)
    ea34:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ea36:	4b0a      	ldr	r3, [pc, #40]	; (ea60 <system_gclk_gen_enable+0x3c>)
    ea38:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ea3a:	4a07      	ldr	r2, [pc, #28]	; (ea58 <system_gclk_gen_enable+0x34>)
    ea3c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    ea3e:	b25b      	sxtb	r3, r3
    ea40:	2b00      	cmp	r3, #0
    ea42:	dbfb      	blt.n	ea3c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    ea44:	4a04      	ldr	r2, [pc, #16]	; (ea58 <system_gclk_gen_enable+0x34>)
    ea46:	6851      	ldr	r1, [r2, #4]
    ea48:	2380      	movs	r3, #128	; 0x80
    ea4a:	025b      	lsls	r3, r3, #9
    ea4c:	430b      	orrs	r3, r1
    ea4e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    ea50:	4b04      	ldr	r3, [pc, #16]	; (ea64 <system_gclk_gen_enable+0x40>)
    ea52:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    ea54:	bd10      	pop	{r4, pc}
    ea56:	46c0      	nop			; (mov r8, r8)
    ea58:	40000c00 	.word	0x40000c00
    ea5c:	0000d0fd 	.word	0x0000d0fd
    ea60:	40000c04 	.word	0x40000c04
    ea64:	0000d13d 	.word	0x0000d13d

0000ea68 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    ea68:	b570      	push	{r4, r5, r6, lr}
    ea6a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ea6c:	4a1a      	ldr	r2, [pc, #104]	; (ead8 <system_gclk_gen_get_hz+0x70>)
    ea6e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    ea70:	b25b      	sxtb	r3, r3
    ea72:	2b00      	cmp	r3, #0
    ea74:	dbfb      	blt.n	ea6e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    ea76:	4b19      	ldr	r3, [pc, #100]	; (eadc <system_gclk_gen_get_hz+0x74>)
    ea78:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ea7a:	4b19      	ldr	r3, [pc, #100]	; (eae0 <system_gclk_gen_get_hz+0x78>)
    ea7c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ea7e:	4a16      	ldr	r2, [pc, #88]	; (ead8 <system_gclk_gen_get_hz+0x70>)
    ea80:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    ea82:	b25b      	sxtb	r3, r3
    ea84:	2b00      	cmp	r3, #0
    ea86:	dbfb      	blt.n	ea80 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    ea88:	4e13      	ldr	r6, [pc, #76]	; (ead8 <system_gclk_gen_get_hz+0x70>)
    ea8a:	6870      	ldr	r0, [r6, #4]
    ea8c:	04c0      	lsls	r0, r0, #19
    ea8e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    ea90:	4b14      	ldr	r3, [pc, #80]	; (eae4 <system_gclk_gen_get_hz+0x7c>)
    ea92:	4798      	blx	r3
    ea94:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ea96:	4b12      	ldr	r3, [pc, #72]	; (eae0 <system_gclk_gen_get_hz+0x78>)
    ea98:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    ea9a:	6876      	ldr	r6, [r6, #4]
    ea9c:	02f6      	lsls	r6, r6, #11
    ea9e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    eaa0:	4b11      	ldr	r3, [pc, #68]	; (eae8 <system_gclk_gen_get_hz+0x80>)
    eaa2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    eaa4:	4a0c      	ldr	r2, [pc, #48]	; (ead8 <system_gclk_gen_get_hz+0x70>)
    eaa6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    eaa8:	b25b      	sxtb	r3, r3
    eaaa:	2b00      	cmp	r3, #0
    eaac:	dbfb      	blt.n	eaa6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    eaae:	4b0a      	ldr	r3, [pc, #40]	; (ead8 <system_gclk_gen_get_hz+0x70>)
    eab0:	689c      	ldr	r4, [r3, #8]
    eab2:	0224      	lsls	r4, r4, #8
    eab4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    eab6:	4b0d      	ldr	r3, [pc, #52]	; (eaec <system_gclk_gen_get_hz+0x84>)
    eab8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    eaba:	2e00      	cmp	r6, #0
    eabc:	d107      	bne.n	eace <system_gclk_gen_get_hz+0x66>
    eabe:	2c01      	cmp	r4, #1
    eac0:	d907      	bls.n	ead2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    eac2:	0021      	movs	r1, r4
    eac4:	0028      	movs	r0, r5
    eac6:	4b0a      	ldr	r3, [pc, #40]	; (eaf0 <system_gclk_gen_get_hz+0x88>)
    eac8:	4798      	blx	r3
    eaca:	0005      	movs	r5, r0
    eacc:	e001      	b.n	ead2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    eace:	3401      	adds	r4, #1
    ead0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    ead2:	0028      	movs	r0, r5
    ead4:	bd70      	pop	{r4, r5, r6, pc}
    ead6:	46c0      	nop			; (mov r8, r8)
    ead8:	40000c00 	.word	0x40000c00
    eadc:	0000d0fd 	.word	0x0000d0fd
    eae0:	40000c04 	.word	0x40000c04
    eae4:	0000e5b5 	.word	0x0000e5b5
    eae8:	40000c08 	.word	0x40000c08
    eaec:	0000d13d 	.word	0x0000d13d
    eaf0:	00015815 	.word	0x00015815

0000eaf4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    eaf4:	b510      	push	{r4, lr}
    eaf6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    eaf8:	4b06      	ldr	r3, [pc, #24]	; (eb14 <system_gclk_chan_enable+0x20>)
    eafa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    eafc:	4b06      	ldr	r3, [pc, #24]	; (eb18 <system_gclk_chan_enable+0x24>)
    eafe:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    eb00:	4a06      	ldr	r2, [pc, #24]	; (eb1c <system_gclk_chan_enable+0x28>)
    eb02:	8853      	ldrh	r3, [r2, #2]
    eb04:	2180      	movs	r1, #128	; 0x80
    eb06:	01c9      	lsls	r1, r1, #7
    eb08:	430b      	orrs	r3, r1
    eb0a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    eb0c:	4b04      	ldr	r3, [pc, #16]	; (eb20 <system_gclk_chan_enable+0x2c>)
    eb0e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    eb10:	bd10      	pop	{r4, pc}
    eb12:	46c0      	nop			; (mov r8, r8)
    eb14:	0000d0fd 	.word	0x0000d0fd
    eb18:	40000c02 	.word	0x40000c02
    eb1c:	40000c00 	.word	0x40000c00
    eb20:	0000d13d 	.word	0x0000d13d

0000eb24 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    eb24:	b510      	push	{r4, lr}
    eb26:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    eb28:	4b0f      	ldr	r3, [pc, #60]	; (eb68 <system_gclk_chan_disable+0x44>)
    eb2a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    eb2c:	4b0f      	ldr	r3, [pc, #60]	; (eb6c <system_gclk_chan_disable+0x48>)
    eb2e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    eb30:	4a0f      	ldr	r2, [pc, #60]	; (eb70 <system_gclk_chan_disable+0x4c>)
    eb32:	8853      	ldrh	r3, [r2, #2]
    eb34:	051b      	lsls	r3, r3, #20
    eb36:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    eb38:	8853      	ldrh	r3, [r2, #2]
    eb3a:	490e      	ldr	r1, [pc, #56]	; (eb74 <system_gclk_chan_disable+0x50>)
    eb3c:	400b      	ands	r3, r1
    eb3e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    eb40:	8853      	ldrh	r3, [r2, #2]
    eb42:	490d      	ldr	r1, [pc, #52]	; (eb78 <system_gclk_chan_disable+0x54>)
    eb44:	400b      	ands	r3, r1
    eb46:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    eb48:	0011      	movs	r1, r2
    eb4a:	2280      	movs	r2, #128	; 0x80
    eb4c:	01d2      	lsls	r2, r2, #7
    eb4e:	884b      	ldrh	r3, [r1, #2]
    eb50:	4213      	tst	r3, r2
    eb52:	d1fc      	bne.n	eb4e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    eb54:	4906      	ldr	r1, [pc, #24]	; (eb70 <system_gclk_chan_disable+0x4c>)
    eb56:	884a      	ldrh	r2, [r1, #2]
    eb58:	0203      	lsls	r3, r0, #8
    eb5a:	4806      	ldr	r0, [pc, #24]	; (eb74 <system_gclk_chan_disable+0x50>)
    eb5c:	4002      	ands	r2, r0
    eb5e:	4313      	orrs	r3, r2
    eb60:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    eb62:	4b06      	ldr	r3, [pc, #24]	; (eb7c <system_gclk_chan_disable+0x58>)
    eb64:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    eb66:	bd10      	pop	{r4, pc}
    eb68:	0000d0fd 	.word	0x0000d0fd
    eb6c:	40000c02 	.word	0x40000c02
    eb70:	40000c00 	.word	0x40000c00
    eb74:	fffff0ff 	.word	0xfffff0ff
    eb78:	ffffbfff 	.word	0xffffbfff
    eb7c:	0000d13d 	.word	0x0000d13d

0000eb80 <system_gclk_chan_set_config>:
{
    eb80:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    eb82:	780c      	ldrb	r4, [r1, #0]
    eb84:	0224      	lsls	r4, r4, #8
    eb86:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    eb88:	4b02      	ldr	r3, [pc, #8]	; (eb94 <system_gclk_chan_set_config+0x14>)
    eb8a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    eb8c:	b2a4      	uxth	r4, r4
    eb8e:	4b02      	ldr	r3, [pc, #8]	; (eb98 <system_gclk_chan_set_config+0x18>)
    eb90:	805c      	strh	r4, [r3, #2]
}
    eb92:	bd10      	pop	{r4, pc}
    eb94:	0000eb25 	.word	0x0000eb25
    eb98:	40000c00 	.word	0x40000c00

0000eb9c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    eb9c:	b510      	push	{r4, lr}
    eb9e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    eba0:	4b06      	ldr	r3, [pc, #24]	; (ebbc <system_gclk_chan_get_hz+0x20>)
    eba2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    eba4:	4b06      	ldr	r3, [pc, #24]	; (ebc0 <system_gclk_chan_get_hz+0x24>)
    eba6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    eba8:	4b06      	ldr	r3, [pc, #24]	; (ebc4 <system_gclk_chan_get_hz+0x28>)
    ebaa:	885c      	ldrh	r4, [r3, #2]
    ebac:	0524      	lsls	r4, r4, #20
    ebae:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    ebb0:	4b05      	ldr	r3, [pc, #20]	; (ebc8 <system_gclk_chan_get_hz+0x2c>)
    ebb2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    ebb4:	0020      	movs	r0, r4
    ebb6:	4b05      	ldr	r3, [pc, #20]	; (ebcc <system_gclk_chan_get_hz+0x30>)
    ebb8:	4798      	blx	r3
}
    ebba:	bd10      	pop	{r4, pc}
    ebbc:	0000d0fd 	.word	0x0000d0fd
    ebc0:	40000c02 	.word	0x40000c02
    ebc4:	40000c00 	.word	0x40000c00
    ebc8:	0000d13d 	.word	0x0000d13d
    ebcc:	0000ea69 	.word	0x0000ea69

0000ebd0 <system_interrupt_clear_pending>:
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    ebd0:	2800      	cmp	r0, #0
    ebd2:	db08      	blt.n	ebe6 <system_interrupt_clear_pending+0x16>
		NVIC->ICPR[0] = (1 << vector);
    ebd4:	2301      	movs	r3, #1
    ebd6:	4083      	lsls	r3, r0
    ebd8:	22c0      	movs	r2, #192	; 0xc0
    ebda:	0052      	lsls	r2, r2, #1
    ebdc:	4906      	ldr	r1, [pc, #24]	; (ebf8 <system_interrupt_clear_pending+0x28>)
    ebde:	508b      	str	r3, [r1, r2]
	enum status_code status = STATUS_OK;
    ebe0:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    ebe2:	0018      	movs	r0, r3
    ebe4:	4770      	bx	lr
		status = STATUS_ERR_INVALID_ARG;
    ebe6:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    ebe8:	1c42      	adds	r2, r0, #1
    ebea:	d1fa      	bne.n	ebe2 <system_interrupt_clear_pending+0x12>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
    ebec:	2280      	movs	r2, #128	; 0x80
    ebee:	0492      	lsls	r2, r2, #18
    ebf0:	4b02      	ldr	r3, [pc, #8]	; (ebfc <system_interrupt_clear_pending+0x2c>)
    ebf2:	605a      	str	r2, [r3, #4]
	enum status_code status = STATUS_OK;
    ebf4:	2300      	movs	r3, #0
    ebf6:	e7f4      	b.n	ebe2 <system_interrupt_clear_pending+0x12>
    ebf8:	e000e100 	.word	0xe000e100
    ebfc:	e000ed00 	.word	0xe000ed00

0000ec00 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    ec00:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    ec02:	78d3      	ldrb	r3, [r2, #3]
    ec04:	2b00      	cmp	r3, #0
    ec06:	d135      	bne.n	ec74 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    ec08:	7813      	ldrb	r3, [r2, #0]
    ec0a:	2b80      	cmp	r3, #128	; 0x80
    ec0c:	d029      	beq.n	ec62 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    ec0e:	061b      	lsls	r3, r3, #24
    ec10:	2480      	movs	r4, #128	; 0x80
    ec12:	0264      	lsls	r4, r4, #9
    ec14:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    ec16:	7854      	ldrb	r4, [r2, #1]
    ec18:	2502      	movs	r5, #2
    ec1a:	43ac      	bics	r4, r5
    ec1c:	d106      	bne.n	ec2c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    ec1e:	7894      	ldrb	r4, [r2, #2]
    ec20:	2c00      	cmp	r4, #0
    ec22:	d120      	bne.n	ec66 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    ec24:	2480      	movs	r4, #128	; 0x80
    ec26:	02a4      	lsls	r4, r4, #10
    ec28:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    ec2a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    ec2c:	7854      	ldrb	r4, [r2, #1]
    ec2e:	3c01      	subs	r4, #1
    ec30:	2c01      	cmp	r4, #1
    ec32:	d91c      	bls.n	ec6e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    ec34:	040d      	lsls	r5, r1, #16
    ec36:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    ec38:	24a0      	movs	r4, #160	; 0xa0
    ec3a:	05e4      	lsls	r4, r4, #23
    ec3c:	432c      	orrs	r4, r5
    ec3e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    ec40:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    ec42:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    ec44:	24d0      	movs	r4, #208	; 0xd0
    ec46:	0624      	lsls	r4, r4, #24
    ec48:	432c      	orrs	r4, r5
    ec4a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    ec4c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    ec4e:	78d4      	ldrb	r4, [r2, #3]
    ec50:	2c00      	cmp	r4, #0
    ec52:	d122      	bne.n	ec9a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    ec54:	035b      	lsls	r3, r3, #13
    ec56:	d51c      	bpl.n	ec92 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    ec58:	7893      	ldrb	r3, [r2, #2]
    ec5a:	2b01      	cmp	r3, #1
    ec5c:	d01e      	beq.n	ec9c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    ec5e:	6141      	str	r1, [r0, #20]
    ec60:	e017      	b.n	ec92 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    ec62:	2300      	movs	r3, #0
    ec64:	e7d7      	b.n	ec16 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    ec66:	24c0      	movs	r4, #192	; 0xc0
    ec68:	02e4      	lsls	r4, r4, #11
    ec6a:	4323      	orrs	r3, r4
    ec6c:	e7dd      	b.n	ec2a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    ec6e:	4c0d      	ldr	r4, [pc, #52]	; (eca4 <_system_pinmux_config+0xa4>)
    ec70:	4023      	ands	r3, r4
    ec72:	e7df      	b.n	ec34 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    ec74:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    ec76:	040c      	lsls	r4, r1, #16
    ec78:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    ec7a:	23a0      	movs	r3, #160	; 0xa0
    ec7c:	05db      	lsls	r3, r3, #23
    ec7e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    ec80:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    ec82:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    ec84:	23d0      	movs	r3, #208	; 0xd0
    ec86:	061b      	lsls	r3, r3, #24
    ec88:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    ec8a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    ec8c:	78d3      	ldrb	r3, [r2, #3]
    ec8e:	2b00      	cmp	r3, #0
    ec90:	d103      	bne.n	ec9a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    ec92:	7853      	ldrb	r3, [r2, #1]
    ec94:	3b01      	subs	r3, #1
    ec96:	2b01      	cmp	r3, #1
    ec98:	d902      	bls.n	eca0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    ec9a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    ec9c:	6181      	str	r1, [r0, #24]
    ec9e:	e7f8      	b.n	ec92 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    eca0:	6081      	str	r1, [r0, #8]
}
    eca2:	e7fa      	b.n	ec9a <_system_pinmux_config+0x9a>
    eca4:	fffbffff 	.word	0xfffbffff

0000eca8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    eca8:	b510      	push	{r4, lr}
    ecaa:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    ecac:	09c1      	lsrs	r1, r0, #7
		return NULL;
    ecae:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    ecb0:	2900      	cmp	r1, #0
    ecb2:	d104      	bne.n	ecbe <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    ecb4:	0943      	lsrs	r3, r0, #5
    ecb6:	01db      	lsls	r3, r3, #7
    ecb8:	4905      	ldr	r1, [pc, #20]	; (ecd0 <system_pinmux_pin_set_config+0x28>)
    ecba:	468c      	mov	ip, r1
    ecbc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    ecbe:	241f      	movs	r4, #31
    ecc0:	4020      	ands	r0, r4
    ecc2:	2101      	movs	r1, #1
    ecc4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    ecc6:	0018      	movs	r0, r3
    ecc8:	4b02      	ldr	r3, [pc, #8]	; (ecd4 <system_pinmux_pin_set_config+0x2c>)
    ecca:	4798      	blx	r3
}
    eccc:	bd10      	pop	{r4, pc}
    ecce:	46c0      	nop			; (mov r8, r8)
    ecd0:	41004400 	.word	0x41004400
    ecd4:	0000ec01 	.word	0x0000ec01

0000ecd8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    ecd8:	4770      	bx	lr
	...

0000ecdc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    ecdc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    ecde:	4b05      	ldr	r3, [pc, #20]	; (ecf4 <system_init+0x18>)
    ece0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    ece2:	4b05      	ldr	r3, [pc, #20]	; (ecf8 <system_init+0x1c>)
    ece4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    ece6:	4b05      	ldr	r3, [pc, #20]	; (ecfc <system_init+0x20>)
    ece8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    ecea:	4b05      	ldr	r3, [pc, #20]	; (ed00 <system_init+0x24>)
    ecec:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    ecee:	4b05      	ldr	r3, [pc, #20]	; (ed04 <system_init+0x28>)
    ecf0:	4798      	blx	r3
}
    ecf2:	bd10      	pop	{r4, pc}
    ecf4:	0000e7d1 	.word	0x0000e7d1
    ecf8:	0000d16d 	.word	0x0000d16d
    ecfc:	0000ecd9 	.word	0x0000ecd9
    ed00:	0000d27d 	.word	0x0000d27d
    ed04:	0000ecd9 	.word	0x0000ecd9

0000ed08 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    ed08:	4b09      	ldr	r3, [pc, #36]	; (ed30 <_tcc_get_inst_index+0x28>)
    ed0a:	4298      	cmp	r0, r3
    ed0c:	d00c      	beq.n	ed28 <_tcc_get_inst_index+0x20>
    ed0e:	4b09      	ldr	r3, [pc, #36]	; (ed34 <_tcc_get_inst_index+0x2c>)
    ed10:	4298      	cmp	r0, r3
    ed12:	d007      	beq.n	ed24 <_tcc_get_inst_index+0x1c>
    ed14:	4a08      	ldr	r2, [pc, #32]	; (ed38 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    ed16:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    ed18:	4290      	cmp	r0, r2
    ed1a:	d001      	beq.n	ed20 <_tcc_get_inst_index+0x18>
}
    ed1c:	0018      	movs	r0, r3
    ed1e:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    ed20:	3302      	adds	r3, #2
    ed22:	e002      	b.n	ed2a <_tcc_get_inst_index+0x22>
    ed24:	2301      	movs	r3, #1
    ed26:	e000      	b.n	ed2a <_tcc_get_inst_index+0x22>
    ed28:	2300      	movs	r3, #0
			return i;
    ed2a:	b2db      	uxtb	r3, r3
    ed2c:	e7f6      	b.n	ed1c <_tcc_get_inst_index+0x14>
    ed2e:	46c0      	nop			; (mov r8, r8)
    ed30:	42002000 	.word	0x42002000
    ed34:	42002400 	.word	0x42002400
    ed38:	42002800 	.word	0x42002800

0000ed3c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    ed3c:	b510      	push	{r4, lr}
    ed3e:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    ed40:	0008      	movs	r0, r1
    ed42:	4b4f      	ldr	r3, [pc, #316]	; (ee80 <tcc_get_config_defaults+0x144>)
    ed44:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    ed46:	2300      	movs	r3, #0
    ed48:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    ed4a:	0080      	lsls	r0, r0, #2
    ed4c:	4a4d      	ldr	r2, [pc, #308]	; (ee84 <tcc_get_config_defaults+0x148>)
    ed4e:	5882      	ldr	r2, [r0, r2]
    ed50:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    ed52:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    ed54:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    ed56:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    ed58:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    ed5a:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    ed5c:	61e3      	str	r3, [r4, #28]
    ed5e:	6223      	str	r3, [r4, #32]
    ed60:	6263      	str	r3, [r4, #36]	; 0x24
    ed62:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    ed64:	7523      	strb	r3, [r4, #20]
    ed66:	7563      	strb	r3, [r4, #21]
    ed68:	75a3      	strb	r3, [r4, #22]
    ed6a:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    ed6c:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    ed6e:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    ed70:	7423      	strb	r3, [r4, #16]
    ed72:	7463      	strb	r3, [r4, #17]
    ed74:	74a3      	strb	r3, [r4, #18]
    ed76:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    ed78:	222c      	movs	r2, #44	; 0x2c
    ed7a:	54a3      	strb	r3, [r4, r2]
    ed7c:	3201      	adds	r2, #1
    ed7e:	54a3      	strb	r3, [r4, r2]
    ed80:	3201      	adds	r2, #1
    ed82:	54a3      	strb	r3, [r4, r2]
    ed84:	3201      	adds	r2, #1
    ed86:	54a3      	strb	r3, [r4, r2]
    ed88:	3201      	adds	r2, #1
    ed8a:	54a3      	strb	r3, [r4, r2]
    ed8c:	3201      	adds	r2, #1
    ed8e:	54a3      	strb	r3, [r4, r2]
    ed90:	3201      	adds	r2, #1
    ed92:	54a3      	strb	r3, [r4, r2]
    ed94:	3201      	adds	r2, #1
    ed96:	54a3      	strb	r3, [r4, r2]
    ed98:	3201      	adds	r2, #1
    ed9a:	54a3      	strb	r3, [r4, r2]
    ed9c:	3201      	adds	r2, #1
    ed9e:	54a3      	strb	r3, [r4, r2]
    eda0:	3201      	adds	r2, #1
    eda2:	54a3      	strb	r3, [r4, r2]
    eda4:	3201      	adds	r2, #1
    eda6:	54a3      	strb	r3, [r4, r2]
    eda8:	3201      	adds	r2, #1
    edaa:	54a3      	strb	r3, [r4, r2]
    edac:	3201      	adds	r2, #1
    edae:	54a3      	strb	r3, [r4, r2]
    edb0:	3201      	adds	r2, #1
    edb2:	54a3      	strb	r3, [r4, r2]
    edb4:	3201      	adds	r2, #1
    edb6:	54a3      	strb	r3, [r4, r2]
    edb8:	3201      	adds	r2, #1
    edba:	54a3      	strb	r3, [r4, r2]
    edbc:	3201      	adds	r2, #1
    edbe:	54a3      	strb	r3, [r4, r2]
    edc0:	3201      	adds	r2, #1
    edc2:	54a3      	strb	r3, [r4, r2]
    edc4:	3201      	adds	r2, #1
    edc6:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    edc8:	3201      	adds	r2, #1
    edca:	54a3      	strb	r3, [r4, r2]
    edcc:	3201      	adds	r2, #1
    edce:	54a3      	strb	r3, [r4, r2]
    edd0:	3201      	adds	r2, #1
    edd2:	54a3      	strb	r3, [r4, r2]
    edd4:	3201      	adds	r2, #1
    edd6:	54a3      	strb	r3, [r4, r2]
    edd8:	3201      	adds	r2, #1
    edda:	54a3      	strb	r3, [r4, r2]
    eddc:	3201      	adds	r2, #1
    edde:	54a3      	strb	r3, [r4, r2]
    ede0:	3201      	adds	r2, #1
    ede2:	54a3      	strb	r3, [r4, r2]
    ede4:	3201      	adds	r2, #1
    ede6:	54a3      	strb	r3, [r4, r2]
    ede8:	3201      	adds	r2, #1
    edea:	54a3      	strb	r3, [r4, r2]
    edec:	3201      	adds	r2, #1
    edee:	54a3      	strb	r3, [r4, r2]
    edf0:	3201      	adds	r2, #1
    edf2:	54a3      	strb	r3, [r4, r2]
    edf4:	3201      	adds	r2, #1
    edf6:	54a3      	strb	r3, [r4, r2]
    edf8:	3201      	adds	r2, #1
    edfa:	54a3      	strb	r3, [r4, r2]
    edfc:	3201      	adds	r2, #1
    edfe:	54a3      	strb	r3, [r4, r2]
    ee00:	3201      	adds	r2, #1
    ee02:	54a3      	strb	r3, [r4, r2]
    ee04:	3201      	adds	r2, #1
    ee06:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    ee08:	3201      	adds	r2, #1
    ee0a:	54a3      	strb	r3, [r4, r2]
    ee0c:	3201      	adds	r2, #1
    ee0e:	54a3      	strb	r3, [r4, r2]
    ee10:	3201      	adds	r2, #1
    ee12:	54a3      	strb	r3, [r4, r2]
    ee14:	3201      	adds	r2, #1
    ee16:	54a3      	strb	r3, [r4, r2]
    ee18:	3201      	adds	r2, #1
    ee1a:	54a3      	strb	r3, [r4, r2]
    ee1c:	3201      	adds	r2, #1
    ee1e:	54a3      	strb	r3, [r4, r2]
    ee20:	3201      	adds	r2, #1
    ee22:	54a3      	strb	r3, [r4, r2]
    ee24:	3201      	adds	r2, #1
    ee26:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    ee28:	3241      	adds	r2, #65	; 0x41
    ee2a:	54a3      	strb	r3, [r4, r2]
    ee2c:	65a3      	str	r3, [r4, #88]	; 0x58
    ee2e:	67a3      	str	r3, [r4, #120]	; 0x78
    ee30:	3201      	adds	r2, #1
    ee32:	54a3      	strb	r3, [r4, r2]
    ee34:	65e3      	str	r3, [r4, #92]	; 0x5c
    ee36:	67e3      	str	r3, [r4, #124]	; 0x7c
    ee38:	3201      	adds	r2, #1
    ee3a:	54a3      	strb	r3, [r4, r2]
    ee3c:	6623      	str	r3, [r4, #96]	; 0x60
    ee3e:	3a1a      	subs	r2, #26
    ee40:	50a3      	str	r3, [r4, r2]
    ee42:	321b      	adds	r2, #27
    ee44:	54a3      	strb	r3, [r4, r2]
    ee46:	6663      	str	r3, [r4, #100]	; 0x64
    ee48:	3a17      	subs	r2, #23
    ee4a:	50a3      	str	r3, [r4, r2]
    ee4c:	3218      	adds	r2, #24
    ee4e:	54a3      	strb	r3, [r4, r2]
    ee50:	66a3      	str	r3, [r4, #104]	; 0x68
    ee52:	3a14      	subs	r2, #20
    ee54:	50a3      	str	r3, [r4, r2]
    ee56:	3215      	adds	r2, #21
    ee58:	54a3      	strb	r3, [r4, r2]
    ee5a:	66e3      	str	r3, [r4, #108]	; 0x6c
    ee5c:	3a11      	subs	r2, #17
    ee5e:	50a3      	str	r3, [r4, r2]
    ee60:	3212      	adds	r2, #18
    ee62:	54a3      	strb	r3, [r4, r2]
    ee64:	6723      	str	r3, [r4, #112]	; 0x70
    ee66:	3a0e      	subs	r2, #14
    ee68:	50a3      	str	r3, [r4, r2]
    ee6a:	320f      	adds	r2, #15
    ee6c:	54a3      	strb	r3, [r4, r2]
    ee6e:	6763      	str	r3, [r4, #116]	; 0x74
    ee70:	3a0b      	subs	r2, #11
    ee72:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    ee74:	2101      	movs	r1, #1
    ee76:	320c      	adds	r2, #12
    ee78:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    ee7a:	3201      	adds	r2, #1
    ee7c:	54a3      	strb	r3, [r4, r2]
}
    ee7e:	bd10      	pop	{r4, pc}
    ee80:	0000ed09 	.word	0x0000ed09
    ee84:	0001b40c 	.word	0x0001b40c

0000ee88 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    ee88:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee8a:	46de      	mov	lr, fp
    ee8c:	4657      	mov	r7, sl
    ee8e:	464e      	mov	r6, r9
    ee90:	4645      	mov	r5, r8
    ee92:	b5e0      	push	{r5, r6, r7, lr}
    ee94:	b091      	sub	sp, #68	; 0x44
    ee96:	9001      	str	r0, [sp, #4]
    ee98:	000c      	movs	r4, r1
    ee9a:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    ee9c:	0008      	movs	r0, r1
    ee9e:	4bc3      	ldr	r3, [pc, #780]	; (f1ac <tcc_init+0x324>)
    eea0:	4798      	blx	r3
    eea2:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    eea4:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    eea6:	48c2      	ldr	r0, [pc, #776]	; (f1b0 <tcc_init+0x328>)
    eea8:	6a02      	ldr	r2, [r0, #32]
    eeaa:	009e      	lsls	r6, r3, #2
    eeac:	4fc1      	ldr	r7, [pc, #772]	; (f1b4 <tcc_init+0x32c>)
    eeae:	59f7      	ldr	r7, [r6, r7]
    eeb0:	433a      	orrs	r2, r7
    eeb2:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    eeb4:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    eeb6:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    eeb8:	0792      	lsls	r2, r2, #30
    eeba:	d506      	bpl.n	eeca <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    eebc:	b011      	add	sp, #68	; 0x44
    eebe:	bc3c      	pop	{r2, r3, r4, r5}
    eec0:	4690      	mov	r8, r2
    eec2:	4699      	mov	r9, r3
    eec4:	46a2      	mov	sl, r4
    eec6:	46ab      	mov	fp, r5
    eec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    eeca:	6822      	ldr	r2, [r4, #0]
    eecc:	2701      	movs	r7, #1
    eece:	4017      	ands	r7, r2
    eed0:	d1f4      	bne.n	eebc <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    eed2:	48b9      	ldr	r0, [pc, #740]	; (f1b8 <tcc_init+0x330>)
    eed4:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    eed6:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    eed8:	682e      	ldr	r6, [r5, #0]
    eeda:	42b2      	cmp	r2, r6
    eedc:	d3ee      	bcc.n	eebc <tcc_init+0x34>
		|| (config->counter.period > count_max)
    eede:	686e      	ldr	r6, [r5, #4]
    eee0:	42b2      	cmp	r2, r6
    eee2:	d3eb      	bcc.n	eebc <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    eee4:	69e8      	ldr	r0, [r5, #28]
    eee6:	4282      	cmp	r2, r0
    eee8:	d200      	bcs.n	eeec <tcc_init+0x64>
    eeea:	e1b9      	b.n	f260 <tcc_init+0x3d8>
    eeec:	6a28      	ldr	r0, [r5, #32]
    eeee:	4282      	cmp	r2, r0
    eef0:	d200      	bcs.n	eef4 <tcc_init+0x6c>
    eef2:	e1b7      	b.n	f264 <tcc_init+0x3dc>
    eef4:	6a68      	ldr	r0, [r5, #36]	; 0x24
    eef6:	4282      	cmp	r2, r0
    eef8:	d200      	bcs.n	eefc <tcc_init+0x74>
    eefa:	e1b5      	b.n	f268 <tcc_init+0x3e0>
    eefc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    eefe:	4282      	cmp	r2, r0
    ef00:	d200      	bcs.n	ef04 <tcc_init+0x7c>
    ef02:	e1b3      	b.n	f26c <tcc_init+0x3e4>
    ef04:	2298      	movs	r2, #152	; 0x98
    ef06:	4694      	mov	ip, r2
    ef08:	44ac      	add	ip, r5
    ef0a:	4662      	mov	r2, ip
    ef0c:	9208      	str	r2, [sp, #32]
    ef0e:	2000      	movs	r0, #0
    ef10:	e003      	b.n	ef1a <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    ef12:	3001      	adds	r0, #1
    ef14:	3201      	adds	r2, #1
    ef16:	2808      	cmp	r0, #8
    ef18:	d008      	beq.n	ef2c <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    ef1a:	7816      	ldrb	r6, [r2, #0]
    ef1c:	2e00      	cmp	r6, #0
    ef1e:	d0f8      	beq.n	ef12 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    ef20:	4ea6      	ldr	r6, [pc, #664]	; (f1bc <tcc_init+0x334>)
    ef22:	5c76      	ldrb	r6, [r6, r1]
    ef24:	4286      	cmp	r6, r0
    ef26:	dcf4      	bgt.n	ef12 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    ef28:	2017      	movs	r0, #23
    ef2a:	e7c7      	b.n	eebc <tcc_init+0x34>
    ef2c:	2200      	movs	r2, #0
    ef2e:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    ef30:	2080      	movs	r0, #128	; 0x80
    ef32:	0440      	lsls	r0, r0, #17
    ef34:	4684      	mov	ip, r0
    ef36:	e002      	b.n	ef3e <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    ef38:	3201      	adds	r2, #1
    ef3a:	2a04      	cmp	r2, #4
    ef3c:	d00e      	beq.n	ef5c <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    ef3e:	18a8      	adds	r0, r5, r2
    ef40:	7c00      	ldrb	r0, [r0, #16]
    ef42:	2801      	cmp	r0, #1
    ef44:	d1f8      	bne.n	ef38 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    ef46:	489e      	ldr	r0, [pc, #632]	; (f1c0 <tcc_init+0x338>)
    ef48:	5c40      	ldrb	r0, [r0, r1]
    ef4a:	4290      	cmp	r0, r2
    ef4c:	da00      	bge.n	ef50 <tcc_init+0xc8>
    ef4e:	e18f      	b.n	f270 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    ef50:	4660      	mov	r0, ip
    ef52:	4090      	lsls	r0, r2
    ef54:	9e02      	ldr	r6, [sp, #8]
    ef56:	4306      	orrs	r6, r0
    ef58:	9602      	str	r6, [sp, #8]
    ef5a:	e7ed      	b.n	ef38 <tcc_init+0xb0>
	if (config->run_in_standby) {
    ef5c:	329d      	adds	r2, #157	; 0x9d
    ef5e:	5caa      	ldrb	r2, [r5, r2]
    ef60:	2a00      	cmp	r2, #0
    ef62:	d004      	beq.n	ef6e <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    ef64:	2280      	movs	r2, #128	; 0x80
    ef66:	0112      	lsls	r2, r2, #4
    ef68:	9902      	ldr	r1, [sp, #8]
    ef6a:	4311      	orrs	r1, r2
    ef6c:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    ef6e:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    ef70:	1e51      	subs	r1, r2, #1
    ef72:	418a      	sbcs	r2, r1
    ef74:	0092      	lsls	r2, r2, #2
    ef76:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    ef78:	7a6a      	ldrb	r2, [r5, #9]
    ef7a:	2a01      	cmp	r2, #1
    ef7c:	d022      	beq.n	efc4 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    ef7e:	4a90      	ldr	r2, [pc, #576]	; (f1c0 <tcc_init+0x338>)
    ef80:	5cd2      	ldrb	r2, [r2, r3]
    ef82:	0011      	movs	r1, r2
    ef84:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    ef86:	2235      	movs	r2, #53	; 0x35
    ef88:	5caa      	ldrb	r2, [r5, r2]
    ef8a:	428a      	cmp	r2, r1
    ef8c:	d300      	bcc.n	ef90 <tcc_init+0x108>
    ef8e:	e179      	b.n	f284 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    ef90:	212c      	movs	r1, #44	; 0x2c
    ef92:	5c69      	ldrb	r1, [r5, r1]
    ef94:	290f      	cmp	r1, #15
    ef96:	d900      	bls.n	ef9a <tcc_init+0x112>
    ef98:	e174      	b.n	f284 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    ef9a:	7b28      	ldrb	r0, [r5, #12]
    ef9c:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    ef9e:	7ae8      	ldrb	r0, [r5, #11]
    efa0:	900b      	str	r0, [sp, #44]	; 0x2c
    efa2:	202d      	movs	r0, #45	; 0x2d
    efa4:	4682      	mov	sl, r0
    efa6:	44aa      	add	sl, r5
    efa8:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    efaa:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    efac:	ae0e      	add	r6, sp, #56	; 0x38
    efae:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    efb0:	26c0      	movs	r6, #192	; 0xc0
    efb2:	0136      	lsls	r6, r6, #4
    efb4:	46b1      	mov	r9, r6
    efb6:	4684      	mov	ip, r0
    efb8:	46a0      	mov	r8, r4
    efba:	0028      	movs	r0, r5
    efbc:	4655      	mov	r5, sl
    efbe:	9309      	str	r3, [sp, #36]	; 0x24
    efc0:	4682      	mov	sl, r0
    efc2:	e035      	b.n	f030 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    efc4:	9906      	ldr	r1, [sp, #24]
    efc6:	4311      	orrs	r1, r2
    efc8:	9106      	str	r1, [sp, #24]
    efca:	e7d8      	b.n	ef7e <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    efcc:	0292      	lsls	r2, r2, #10
    efce:	464f      	mov	r7, r9
    efd0:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    efd2:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    efd4:	7919      	ldrb	r1, [r3, #4]
    efd6:	468b      	mov	fp, r1
    efd8:	2103      	movs	r1, #3
    efda:	465f      	mov	r7, fp
    efdc:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    efde:	430a      	orrs	r2, r1
    efe0:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    efe2:	795a      	ldrb	r2, [r3, #5]
    efe4:	0152      	lsls	r2, r2, #5
    efe6:	2160      	movs	r1, #96	; 0x60
    efe8:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    efea:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    efec:	7999      	ldrb	r1, [r3, #6]
    efee:	0209      	lsls	r1, r1, #8
    eff0:	26c0      	movs	r6, #192	; 0xc0
    eff2:	00b6      	lsls	r6, r6, #2
    eff4:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    eff6:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    eff8:	79da      	ldrb	r2, [r3, #7]
    effa:	0312      	lsls	r2, r2, #12
    effc:	21e0      	movs	r1, #224	; 0xe0
    effe:	01c9      	lsls	r1, r1, #7
    f000:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    f002:	4316      	orrs	r6, r2
    f004:	4334      	orrs	r4, r6
    f006:	9a03      	ldr	r2, [sp, #12]
    f008:	4314      	orrs	r4, r2
    f00a:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    f00c:	4662      	mov	r2, ip
    f00e:	9907      	ldr	r1, [sp, #28]
    f010:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    f012:	2a04      	cmp	r2, #4
    f014:	d02a      	beq.n	f06c <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    f016:	7c9a      	ldrb	r2, [r3, #18]
    f018:	9905      	ldr	r1, [sp, #20]
    f01a:	4291      	cmp	r1, r2
    f01c:	d800      	bhi.n	f020 <tcc_init+0x198>
    f01e:	e131      	b.n	f284 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    f020:	7a59      	ldrb	r1, [r3, #9]
    f022:	350a      	adds	r5, #10
    f024:	2304      	movs	r3, #4
    f026:	469b      	mov	fp, r3
    f028:	44dc      	add	ip, fp
    f02a:	290f      	cmp	r1, #15
    f02c:	d900      	bls.n	f030 <tcc_init+0x1a8>
    f02e:	e129      	b.n	f284 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    f030:	0609      	lsls	r1, r1, #24
    f032:	23f0      	movs	r3, #240	; 0xf0
    f034:	051b      	lsls	r3, r3, #20
    f036:	4019      	ands	r1, r3
    f038:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    f03a:	782e      	ldrb	r6, [r5, #0]
    f03c:	0436      	lsls	r6, r6, #16
    f03e:	20ff      	movs	r0, #255	; 0xff
    f040:	0400      	lsls	r0, r0, #16
    f042:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    f044:	7868      	ldrb	r0, [r5, #1]
    f046:	2480      	movs	r4, #128	; 0x80
    f048:	2800      	cmp	r0, #0
    f04a:	d100      	bne.n	f04e <tcc_init+0x1c6>
    f04c:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    f04e:	7898      	ldrb	r0, [r3, #2]
    f050:	2708      	movs	r7, #8
    f052:	9703      	str	r7, [sp, #12]
    f054:	2800      	cmp	r0, #0
    f056:	d101      	bne.n	f05c <tcc_init+0x1d4>
    f058:	9804      	ldr	r0, [sp, #16]
    f05a:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    f05c:	78d8      	ldrb	r0, [r3, #3]
    f05e:	4683      	mov	fp, r0
    f060:	2010      	movs	r0, #16
    f062:	465f      	mov	r7, fp
    f064:	2f00      	cmp	r7, #0
    f066:	d1b1      	bne.n	efcc <tcc_init+0x144>
    f068:	9804      	ldr	r0, [sp, #16]
    f06a:	e7af      	b.n	efcc <tcc_init+0x144>
    f06c:	4644      	mov	r4, r8
    f06e:	4655      	mov	r5, sl
    f070:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    f072:	4a52      	ldr	r2, [pc, #328]	; (f1bc <tcc_init+0x334>)
    f074:	5cd2      	ldrb	r2, [r2, r3]
    f076:	4691      	mov	r9, r2
    f078:	4651      	mov	r1, sl
    f07a:	3150      	adds	r1, #80	; 0x50
    f07c:	4650      	mov	r0, sl
    f07e:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    f080:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    f082:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    f084:	2601      	movs	r6, #1
    f086:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    f088:	2602      	movs	r6, #2
    f08a:	36ff      	adds	r6, #255	; 0xff
    f08c:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    f08e:	2680      	movs	r6, #128	; 0x80
    f090:	0276      	lsls	r6, r6, #9
    f092:	46b0      	mov	r8, r6
    f094:	46a4      	mov	ip, r4
    f096:	001c      	movs	r4, r3
    f098:	464b      	mov	r3, r9
    f09a:	e00f      	b.n	f0bc <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    f09c:	7806      	ldrb	r6, [r0, #0]
    f09e:	2e00      	cmp	r6, #0
    f0a0:	d007      	beq.n	f0b2 <tcc_init+0x22a>
			if (i >= ow_num) {
    f0a2:	4293      	cmp	r3, r2
    f0a4:	d800      	bhi.n	f0a8 <tcc_init+0x220>
    f0a6:	e0e7      	b.n	f278 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    f0a8:	2e02      	cmp	r6, #2
    f0aa:	d014      	beq.n	f0d6 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    f0ac:	4656      	mov	r6, sl
    f0ae:	4096      	lsls	r6, r2
    f0b0:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    f0b2:	3201      	adds	r2, #1
    f0b4:	3101      	adds	r1, #1
    f0b6:	3002      	adds	r0, #2
    f0b8:	2a08      	cmp	r2, #8
    f0ba:	d010      	beq.n	f0de <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    f0bc:	780e      	ldrb	r6, [r1, #0]
    f0be:	2e00      	cmp	r6, #0
    f0c0:	d0ec      	beq.n	f09c <tcc_init+0x214>
			if (i >= ow_num) {
    f0c2:	4293      	cmp	r3, r2
    f0c4:	d800      	bhi.n	f0c8 <tcc_init+0x240>
    f0c6:	e0d5      	b.n	f274 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    f0c8:	4646      	mov	r6, r8
    f0ca:	4096      	lsls	r6, r2
    f0cc:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    f0ce:	7806      	ldrb	r6, [r0, #0]
    f0d0:	2e00      	cmp	r6, #0
    f0d2:	d1e9      	bne.n	f0a8 <tcc_init+0x220>
    f0d4:	e7ed      	b.n	f0b2 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    f0d6:	465e      	mov	r6, fp
    f0d8:	4096      	lsls	r6, r2
    f0da:	4337      	orrs	r7, r6
    f0dc:	e7e9      	b.n	f0b2 <tcc_init+0x22a>
    f0de:	4699      	mov	r9, r3
    f0e0:	0023      	movs	r3, r4
    f0e2:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    f0e4:	7e6a      	ldrb	r2, [r5, #25]
    f0e6:	0112      	lsls	r2, r2, #4
    f0e8:	2130      	movs	r1, #48	; 0x30
    f0ea:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    f0ec:	7e28      	ldrb	r0, [r5, #24]
    f0ee:	2207      	movs	r2, #7
    f0f0:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    f0f2:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    f0f4:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    f0f6:	2080      	movs	r0, #128	; 0x80
    f0f8:	0240      	lsls	r0, r0, #9
    f0fa:	000e      	movs	r6, r1
    f0fc:	e002      	b.n	f104 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    f0fe:	3201      	adds	r2, #1
    f100:	2a04      	cmp	r2, #4
    f102:	d00b      	beq.n	f11c <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    f104:	18a9      	adds	r1, r5, r2
    f106:	7d09      	ldrb	r1, [r1, #20]
    f108:	2900      	cmp	r1, #0
    f10a:	d0f8      	beq.n	f0fe <tcc_init+0x276>
			if (n >= cc_num) {
    f10c:	9905      	ldr	r1, [sp, #20]
    f10e:	4291      	cmp	r1, r2
    f110:	dc00      	bgt.n	f114 <tcc_init+0x28c>
    f112:	e0b3      	b.n	f27c <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    f114:	0001      	movs	r1, r0
    f116:	4091      	lsls	r1, r2
    f118:	430e      	orrs	r6, r1
    f11a:	e7f0      	b.n	f0fe <tcc_init+0x276>
    f11c:	46b2      	mov	sl, r6
    f11e:	9801      	ldr	r0, [sp, #4]
    f120:	0002      	movs	r2, r0
    f122:	3204      	adds	r2, #4
    f124:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    f126:	2100      	movs	r1, #0
    f128:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    f12a:	4282      	cmp	r2, r0
    f12c:	d1fc      	bne.n	f128 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    f12e:	2200      	movs	r2, #0
    f130:	9801      	ldr	r0, [sp, #4]
    f132:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    f134:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    f136:	0099      	lsls	r1, r3, #2
    f138:	4a22      	ldr	r2, [pc, #136]	; (f1c4 <tcc_init+0x33c>)
    f13a:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    f13c:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    f13e:	22a0      	movs	r2, #160	; 0xa0
    f140:	5ca9      	ldrb	r1, [r5, r2]
    f142:	3a64      	subs	r2, #100	; 0x64
    f144:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    f146:	a90d      	add	r1, sp, #52	; 0x34
    f148:	7aaa      	ldrb	r2, [r5, #10]
    f14a:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    f14c:	4a1e      	ldr	r2, [pc, #120]	; (f1c8 <tcc_init+0x340>)
    f14e:	5cd6      	ldrb	r6, [r2, r3]
    f150:	0030      	movs	r0, r6
    f152:	4b1e      	ldr	r3, [pc, #120]	; (f1cc <tcc_init+0x344>)
    f154:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    f156:	0030      	movs	r0, r6
    f158:	4b1d      	ldr	r3, [pc, #116]	; (f1d0 <tcc_init+0x348>)
    f15a:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    f15c:	464b      	mov	r3, r9
    f15e:	2b00      	cmp	r3, #0
    f160:	dd3c      	ble.n	f1dc <tcc_init+0x354>
    f162:	002e      	movs	r6, r5
    f164:	3658      	adds	r6, #88	; 0x58
    f166:	3398      	adds	r3, #152	; 0x98
    f168:	4698      	mov	r8, r3
    f16a:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    f16c:	2301      	movs	r3, #1
    f16e:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    f170:	46ab      	mov	fp, r5
    f172:	4645      	mov	r5, r8
    f174:	46a0      	mov	r8, r4
    f176:	9c08      	ldr	r4, [sp, #32]
    f178:	e003      	b.n	f182 <tcc_init+0x2fa>
    f17a:	3401      	adds	r4, #1
    f17c:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    f17e:	42ac      	cmp	r4, r5
    f180:	d02a      	beq.n	f1d8 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    f182:	7823      	ldrb	r3, [r4, #0]
    f184:	2b00      	cmp	r3, #0
    f186:	d0f8      	beq.n	f17a <tcc_init+0x2f2>
    f188:	ab0c      	add	r3, sp, #48	; 0x30
    f18a:	464a      	mov	r2, r9
    f18c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    f18e:	2300      	movs	r3, #0
    f190:	aa0c      	add	r2, sp, #48	; 0x30
    f192:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    f194:	0013      	movs	r3, r2
    f196:	2220      	movs	r2, #32
    f198:	18b2      	adds	r2, r6, r2
    f19a:	7812      	ldrb	r2, [r2, #0]
    f19c:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    f19e:	464a      	mov	r2, r9
    f1a0:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    f1a2:	7830      	ldrb	r0, [r6, #0]
    f1a4:	0019      	movs	r1, r3
    f1a6:	4b0b      	ldr	r3, [pc, #44]	; (f1d4 <tcc_init+0x34c>)
    f1a8:	4798      	blx	r3
    f1aa:	e7e6      	b.n	f17a <tcc_init+0x2f2>
    f1ac:	0000ed09 	.word	0x0000ed09
    f1b0:	40000400 	.word	0x40000400
    f1b4:	0001b3f8 	.word	0x0001b3f8
    f1b8:	0001b40c 	.word	0x0001b40c
    f1bc:	0001b418 	.word	0x0001b418
    f1c0:	0001b404 	.word	0x0001b404
    f1c4:	20005d3c 	.word	0x20005d3c
    f1c8:	0001b408 	.word	0x0001b408
    f1cc:	0000eb81 	.word	0x0000eb81
    f1d0:	0000eaf5 	.word	0x0000eaf5
    f1d4:	0000eca9 	.word	0x0000eca9
    f1d8:	4644      	mov	r4, r8
    f1da:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    f1dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f1de:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    f1e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f1e2:	0212      	lsls	r2, r2, #8
    f1e4:	4313      	orrs	r3, r2
    f1e6:	9a02      	ldr	r2, [sp, #8]
    f1e8:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    f1ea:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    f1ec:	2204      	movs	r2, #4
    f1ee:	68a3      	ldr	r3, [r4, #8]
    f1f0:	421a      	tst	r2, r3
    f1f2:	d1fc      	bne.n	f1ee <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    f1f4:	23ff      	movs	r3, #255	; 0xff
    f1f6:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    f1f8:	2204      	movs	r2, #4
    f1fa:	68a3      	ldr	r3, [r4, #8]
    f1fc:	421a      	tst	r2, r3
    f1fe:	d1fc      	bne.n	f1fa <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    f200:	466b      	mov	r3, sp
    f202:	7e1b      	ldrb	r3, [r3, #24]
    f204:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    f206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f208:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    f20a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f20c:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    f20e:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    f210:	4a1d      	ldr	r2, [pc, #116]	; (f288 <tcc_init+0x400>)
    f212:	68a3      	ldr	r3, [r4, #8]
    f214:	4213      	tst	r3, r2
    f216:	d1fc      	bne.n	f212 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    f218:	4653      	mov	r3, sl
    f21a:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    f21c:	2210      	movs	r2, #16
    f21e:	68a3      	ldr	r3, [r4, #8]
    f220:	421a      	tst	r2, r3
    f222:	d1fc      	bne.n	f21e <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    f224:	682b      	ldr	r3, [r5, #0]
    f226:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    f228:	4a18      	ldr	r2, [pc, #96]	; (f28c <tcc_init+0x404>)
    f22a:	68a3      	ldr	r3, [r4, #8]
    f22c:	4213      	tst	r3, r2
    f22e:	d1fc      	bne.n	f22a <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    f230:	686b      	ldr	r3, [r5, #4]
    f232:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    f234:	9805      	ldr	r0, [sp, #20]
    f236:	2800      	cmp	r0, #0
    f238:	dd22      	ble.n	f280 <tcc_init+0x3f8>
    f23a:	351c      	adds	r5, #28
    f23c:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    f23e:	4e14      	ldr	r6, [pc, #80]	; (f290 <tcc_init+0x408>)
    f240:	0032      	movs	r2, r6
    f242:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    f244:	68a3      	ldr	r3, [r4, #8]
    f246:	421a      	tst	r2, r3
    f248:	d1fc      	bne.n	f244 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    f24a:	cd04      	ldmia	r5!, {r2}
    f24c:	000b      	movs	r3, r1
    f24e:	3310      	adds	r3, #16
    f250:	009b      	lsls	r3, r3, #2
    f252:	18e3      	adds	r3, r4, r3
    f254:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    f256:	3101      	adds	r1, #1
    f258:	4288      	cmp	r0, r1
    f25a:	dcf1      	bgt.n	f240 <tcc_init+0x3b8>
	return STATUS_OK;
    f25c:	2000      	movs	r0, #0
    f25e:	e62d      	b.n	eebc <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    f260:	2017      	movs	r0, #23
    f262:	e62b      	b.n	eebc <tcc_init+0x34>
    f264:	2017      	movs	r0, #23
    f266:	e629      	b.n	eebc <tcc_init+0x34>
    f268:	2017      	movs	r0, #23
    f26a:	e627      	b.n	eebc <tcc_init+0x34>
    f26c:	2017      	movs	r0, #23
    f26e:	e625      	b.n	eebc <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    f270:	2017      	movs	r0, #23
    f272:	e623      	b.n	eebc <tcc_init+0x34>
			if (i >= ow_num) {
    f274:	2017      	movs	r0, #23
    f276:	e621      	b.n	eebc <tcc_init+0x34>
			if (i >= ow_num) {
    f278:	2017      	movs	r0, #23
    f27a:	e61f      	b.n	eebc <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    f27c:	2017      	movs	r0, #23
    f27e:	e61d      	b.n	eebc <tcc_init+0x34>
	return STATUS_OK;
    f280:	2000      	movs	r0, #0
    f282:	e61b      	b.n	eebc <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    f284:	2017      	movs	r0, #23
    f286:	e619      	b.n	eebc <tcc_init+0x34>
    f288:	00020040 	.word	0x00020040
    f28c:	00040080 	.word	0x00040080
    f290:	00080100 	.word	0x00080100

0000f294 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    f294:	0092      	lsls	r2, r2, #2
    f296:	1883      	adds	r3, r0, r2
    f298:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    f29a:	4b03      	ldr	r3, [pc, #12]	; (f2a8 <tcc_register_callback+0x14>)
    f29c:	58d3      	ldr	r3, [r2, r3]
    f29e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    f2a0:	4313      	orrs	r3, r2
    f2a2:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    f2a4:	2000      	movs	r0, #0
    f2a6:	4770      	bx	lr
    f2a8:	0001b41c 	.word	0x0001b41c

0000f2ac <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    f2ac:	b570      	push	{r4, r5, r6, lr}
    f2ae:	0004      	movs	r4, r0
    f2b0:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    f2b2:	6800      	ldr	r0, [r0, #0]
    f2b4:	4b09      	ldr	r3, [pc, #36]	; (f2dc <tcc_enable_callback+0x30>)
    f2b6:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    f2b8:	4b09      	ldr	r3, [pc, #36]	; (f2e0 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f2ba:	5c1b      	ldrb	r3, [r3, r0]
    f2bc:	221f      	movs	r2, #31
    f2be:	401a      	ands	r2, r3
    f2c0:	2301      	movs	r3, #1
    f2c2:	4093      	lsls	r3, r2
    f2c4:	4a07      	ldr	r2, [pc, #28]	; (f2e4 <tcc_enable_callback+0x38>)
    f2c6:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    f2c8:	00ad      	lsls	r5, r5, #2
    f2ca:	4b07      	ldr	r3, [pc, #28]	; (f2e8 <tcc_enable_callback+0x3c>)
    f2cc:	58ea      	ldr	r2, [r5, r3]
    f2ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f2d0:	4313      	orrs	r3, r2
    f2d2:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    f2d4:	6823      	ldr	r3, [r4, #0]
    f2d6:	629a      	str	r2, [r3, #40]	; 0x28
}
    f2d8:	bd70      	pop	{r4, r5, r6, pc}
    f2da:	46c0      	nop			; (mov r8, r8)
    f2dc:	0000ed09 	.word	0x0000ed09
    f2e0:	0001b44c 	.word	0x0001b44c
    f2e4:	e000e100 	.word	0xe000e100
    f2e8:	0001b41c 	.word	0x0001b41c

0000f2ec <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    f2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2ee:	46c6      	mov	lr, r8
    f2f0:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    f2f2:	0080      	lsls	r0, r0, #2
    f2f4:	4b0e      	ldr	r3, [pc, #56]	; (f330 <_tcc_interrupt_handler+0x44>)
    f2f6:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    f2f8:	683b      	ldr	r3, [r7, #0]
    f2fa:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    f2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f2fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f300:	4013      	ands	r3, r2
    f302:	401e      	ands	r6, r3
    f304:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    f306:	4b0b      	ldr	r3, [pc, #44]	; (f334 <_tcc_interrupt_handler+0x48>)
    f308:	4698      	mov	r8, r3
    f30a:	e002      	b.n	f312 <_tcc_interrupt_handler+0x26>
    f30c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    f30e:	2c30      	cmp	r4, #48	; 0x30
    f310:	d00a      	beq.n	f328 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    f312:	4643      	mov	r3, r8
    f314:	58e5      	ldr	r5, [r4, r3]
    f316:	4235      	tst	r5, r6
    f318:	d0f8      	beq.n	f30c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    f31a:	193b      	adds	r3, r7, r4
    f31c:	685b      	ldr	r3, [r3, #4]
    f31e:	0038      	movs	r0, r7
    f320:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    f322:	683b      	ldr	r3, [r7, #0]
    f324:	62dd      	str	r5, [r3, #44]	; 0x2c
    f326:	e7f1      	b.n	f30c <_tcc_interrupt_handler+0x20>
		}
	}
}
    f328:	bc04      	pop	{r2}
    f32a:	4690      	mov	r8, r2
    f32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f32e:	46c0      	nop			; (mov r8, r8)
    f330:	20005d3c 	.word	0x20005d3c
    f334:	0001b41c 	.word	0x0001b41c

0000f338 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    f338:	b510      	push	{r4, lr}
    f33a:	2000      	movs	r0, #0
    f33c:	4b01      	ldr	r3, [pc, #4]	; (f344 <TCC0_Handler+0xc>)
    f33e:	4798      	blx	r3
    f340:	bd10      	pop	{r4, pc}
    f342:	46c0      	nop			; (mov r8, r8)
    f344:	0000f2ed 	.word	0x0000f2ed

0000f348 <TCC1_Handler>:
    f348:	b510      	push	{r4, lr}
    f34a:	2001      	movs	r0, #1
    f34c:	4b01      	ldr	r3, [pc, #4]	; (f354 <TCC1_Handler+0xc>)
    f34e:	4798      	blx	r3
    f350:	bd10      	pop	{r4, pc}
    f352:	46c0      	nop			; (mov r8, r8)
    f354:	0000f2ed 	.word	0x0000f2ed

0000f358 <TCC2_Handler>:
    f358:	b510      	push	{r4, lr}
    f35a:	2002      	movs	r0, #2
    f35c:	4b01      	ldr	r3, [pc, #4]	; (f364 <TCC2_Handler+0xc>)
    f35e:	4798      	blx	r3
    f360:	bd10      	pop	{r4, pc}
    f362:	46c0      	nop			; (mov r8, r8)
    f364:	0000f2ed 	.word	0x0000f2ed

0000f368 <Dummy_Handler>:
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
  __asm volatile (
    f368:	2004      	movs	r0, #4
    f36a:	4671      	mov	r1, lr
    f36c:	4208      	tst	r0, r1
    f36e:	d002      	beq.n	f376 <_MSP>
    f370:	f3ef 8009 	mrs	r0, PSP
    f374:	e001      	b.n	f37a <_HALT>

0000f376 <_MSP>:
    f376:	f3ef 8008 	mrs	r0, MSP

0000f37a <_HALT>:
    f37a:	6941      	ldr	r1, [r0, #20]
    f37c:	e074      	b.n	f468 <HardFault_HandlerC>
    f37e:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
    f380:	4770      	bx	lr
	...

0000f384 <Reset_Handler>:
{
    f384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    f386:	4a2a      	ldr	r2, [pc, #168]	; (f430 <Reset_Handler+0xac>)
    f388:	4b2a      	ldr	r3, [pc, #168]	; (f434 <Reset_Handler+0xb0>)
    f38a:	429a      	cmp	r2, r3
    f38c:	d011      	beq.n	f3b2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    f38e:	001a      	movs	r2, r3
    f390:	4b29      	ldr	r3, [pc, #164]	; (f438 <Reset_Handler+0xb4>)
    f392:	429a      	cmp	r2, r3
    f394:	d20d      	bcs.n	f3b2 <Reset_Handler+0x2e>
    f396:	4a29      	ldr	r2, [pc, #164]	; (f43c <Reset_Handler+0xb8>)
    f398:	3303      	adds	r3, #3
    f39a:	1a9b      	subs	r3, r3, r2
    f39c:	089b      	lsrs	r3, r3, #2
    f39e:	3301      	adds	r3, #1
    f3a0:	009b      	lsls	r3, r3, #2
    f3a2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    f3a4:	4823      	ldr	r0, [pc, #140]	; (f434 <Reset_Handler+0xb0>)
    f3a6:	4922      	ldr	r1, [pc, #136]	; (f430 <Reset_Handler+0xac>)
    f3a8:	588c      	ldr	r4, [r1, r2]
    f3aa:	5084      	str	r4, [r0, r2]
    f3ac:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    f3ae:	429a      	cmp	r2, r3
    f3b0:	d1fa      	bne.n	f3a8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    f3b2:	4a23      	ldr	r2, [pc, #140]	; (f440 <Reset_Handler+0xbc>)
    f3b4:	4b23      	ldr	r3, [pc, #140]	; (f444 <Reset_Handler+0xc0>)
    f3b6:	429a      	cmp	r2, r3
    f3b8:	d20a      	bcs.n	f3d0 <Reset_Handler+0x4c>
    f3ba:	43d3      	mvns	r3, r2
    f3bc:	4921      	ldr	r1, [pc, #132]	; (f444 <Reset_Handler+0xc0>)
    f3be:	185b      	adds	r3, r3, r1
    f3c0:	2103      	movs	r1, #3
    f3c2:	438b      	bics	r3, r1
    f3c4:	3304      	adds	r3, #4
    f3c6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    f3c8:	2100      	movs	r1, #0
    f3ca:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    f3cc:	4293      	cmp	r3, r2
    f3ce:	d1fc      	bne.n	f3ca <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    f3d0:	4a1d      	ldr	r2, [pc, #116]	; (f448 <Reset_Handler+0xc4>)
    f3d2:	21ff      	movs	r1, #255	; 0xff
    f3d4:	4b1d      	ldr	r3, [pc, #116]	; (f44c <Reset_Handler+0xc8>)
    f3d6:	438b      	bics	r3, r1
    f3d8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    f3da:	39fd      	subs	r1, #253	; 0xfd
    f3dc:	2390      	movs	r3, #144	; 0x90
    f3de:	005b      	lsls	r3, r3, #1
    f3e0:	4a1b      	ldr	r2, [pc, #108]	; (f450 <Reset_Handler+0xcc>)
    f3e2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    f3e4:	4a1b      	ldr	r2, [pc, #108]	; (f454 <Reset_Handler+0xd0>)
    f3e6:	78d3      	ldrb	r3, [r2, #3]
    f3e8:	2503      	movs	r5, #3
    f3ea:	43ab      	bics	r3, r5
    f3ec:	2402      	movs	r4, #2
    f3ee:	4323      	orrs	r3, r4
    f3f0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    f3f2:	78d3      	ldrb	r3, [r2, #3]
    f3f4:	270c      	movs	r7, #12
    f3f6:	43bb      	bics	r3, r7
    f3f8:	2608      	movs	r6, #8
    f3fa:	4333      	orrs	r3, r6
    f3fc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    f3fe:	4b16      	ldr	r3, [pc, #88]	; (f458 <Reset_Handler+0xd4>)
    f400:	7b98      	ldrb	r0, [r3, #14]
    f402:	2230      	movs	r2, #48	; 0x30
    f404:	4390      	bics	r0, r2
    f406:	2220      	movs	r2, #32
    f408:	4310      	orrs	r0, r2
    f40a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    f40c:	7b99      	ldrb	r1, [r3, #14]
    f40e:	43b9      	bics	r1, r7
    f410:	4331      	orrs	r1, r6
    f412:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    f414:	7b9a      	ldrb	r2, [r3, #14]
    f416:	43aa      	bics	r2, r5
    f418:	4322      	orrs	r2, r4
    f41a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    f41c:	4a0f      	ldr	r2, [pc, #60]	; (f45c <Reset_Handler+0xd8>)
    f41e:	6853      	ldr	r3, [r2, #4]
    f420:	2180      	movs	r1, #128	; 0x80
    f422:	430b      	orrs	r3, r1
    f424:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    f426:	4b0e      	ldr	r3, [pc, #56]	; (f460 <Reset_Handler+0xdc>)
    f428:	4798      	blx	r3
        main();
    f42a:	4b0e      	ldr	r3, [pc, #56]	; (f464 <Reset_Handler+0xe0>)
    f42c:	4798      	blx	r3
    f42e:	e7fe      	b.n	f42e <Reset_Handler+0xaa>
    f430:	0001c0b0 	.word	0x0001c0b0
    f434:	20000000 	.word	0x20000000
    f438:	200003f8 	.word	0x200003f8
    f43c:	20000004 	.word	0x20000004
    f440:	200003f8 	.word	0x200003f8
    f444:	20005e04 	.word	0x20005e04
    f448:	e000ed00 	.word	0xe000ed00
    f44c:	00000000 	.word	0x00000000
    f450:	41007000 	.word	0x41007000
    f454:	41005000 	.word	0x41005000
    f458:	41004800 	.word	0x41004800
    f45c:	41004000 	.word	0x41004000
    f460:	00012add 	.word	0x00012add
    f464:	000128d1 	.word	0x000128d1

0000f468 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
    f468:	b08e      	sub	sp, #56	; 0x38
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
    f46a:	6803      	ldr	r3, [r0, #0]
    f46c:	930d      	str	r3, [sp, #52]	; 0x34
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
    f46e:	6843      	ldr	r3, [r0, #4]
    f470:	930c      	str	r3, [sp, #48]	; 0x30
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
    f472:	6883      	ldr	r3, [r0, #8]
    f474:	930b      	str	r3, [sp, #44]	; 0x2c
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
    f476:	68c3      	ldr	r3, [r0, #12]
    f478:	930a      	str	r3, [sp, #40]	; 0x28
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
    f47a:	6903      	ldr	r3, [r0, #16]
    f47c:	9309      	str	r3, [sp, #36]	; 0x24
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
    f47e:	6943      	ldr	r3, [r0, #20]
    f480:	9308      	str	r3, [sp, #32]
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
    f482:	6983      	ldr	r3, [r0, #24]
    f484:	9307      	str	r3, [sp, #28]
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
    f486:	69c3      	ldr	r3, [r0, #28]
    f488:	9306      	str	r3, [sp, #24]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
    f48a:	4b0a      	ldr	r3, [pc, #40]	; (f4b4 <HardFault_HandlerC+0x4c>)
    f48c:	681b      	ldr	r3, [r3, #0]
    f48e:	9305      	str	r3, [sp, #20]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
    f490:	4b09      	ldr	r3, [pc, #36]	; (f4b8 <HardFault_HandlerC+0x50>)
    f492:	681b      	ldr	r3, [r3, #0]
    f494:	9304      	str	r3, [sp, #16]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
    f496:	4b09      	ldr	r3, [pc, #36]	; (f4bc <HardFault_HandlerC+0x54>)
    f498:	681b      	ldr	r3, [r3, #0]
    f49a:	9303      	str	r3, [sp, #12]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
    f49c:	4b08      	ldr	r3, [pc, #32]	; (f4c0 <HardFault_HandlerC+0x58>)
    f49e:	681b      	ldr	r3, [r3, #0]
    f4a0:	9302      	str	r3, [sp, #8]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
    f4a2:	4b08      	ldr	r3, [pc, #32]	; (f4c4 <HardFault_HandlerC+0x5c>)
    f4a4:	681b      	ldr	r3, [r3, #0]
    f4a6:	9300      	str	r3, [sp, #0]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
    f4a8:	4b07      	ldr	r3, [pc, #28]	; (f4c8 <HardFault_HandlerC+0x60>)
    f4aa:	681b      	ldr	r3, [r3, #0]
    f4ac:	9301      	str	r3, [sp, #4]
	
	__asm("BKPT #0\n") ; // Break into the debugger
    f4ae:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
    f4b0:	b00e      	add	sp, #56	; 0x38
    f4b2:	4770      	bx	lr
    f4b4:	e000ed28 	.word	0xe000ed28
    f4b8:	e000ed2c 	.word	0xe000ed2c
    f4bc:	e000ed30 	.word	0xe000ed30
    f4c0:	e000ed3c 	.word	0xe000ed3c
    f4c4:	e000ed34 	.word	0xe000ed34
    f4c8:	e000ed38 	.word	0xe000ed38

0000f4cc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    f4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4ce:	46c6      	mov	lr, r8
    f4d0:	b500      	push	{lr}
    f4d2:	000c      	movs	r4, r1
    f4d4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    f4d6:	2800      	cmp	r0, #0
    f4d8:	d10f      	bne.n	f4fa <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    f4da:	2a00      	cmp	r2, #0
    f4dc:	dd11      	ble.n	f502 <_read+0x36>
    f4de:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    f4e0:	4e09      	ldr	r6, [pc, #36]	; (f508 <_read+0x3c>)
    f4e2:	4d0a      	ldr	r5, [pc, #40]	; (f50c <_read+0x40>)
    f4e4:	6830      	ldr	r0, [r6, #0]
    f4e6:	0021      	movs	r1, r4
    f4e8:	682b      	ldr	r3, [r5, #0]
    f4ea:	4798      	blx	r3
		ptr++;
    f4ec:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    f4ee:	42bc      	cmp	r4, r7
    f4f0:	d1f8      	bne.n	f4e4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    f4f2:	4640      	mov	r0, r8
    f4f4:	bc04      	pop	{r2}
    f4f6:	4690      	mov	r8, r2
    f4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    f4fa:	2301      	movs	r3, #1
    f4fc:	425b      	negs	r3, r3
    f4fe:	4698      	mov	r8, r3
    f500:	e7f7      	b.n	f4f2 <_read+0x26>
	for (; len > 0; --len) {
    f502:	4680      	mov	r8, r0
    f504:	e7f5      	b.n	f4f2 <_read+0x26>
    f506:	46c0      	nop			; (mov r8, r8)
    f508:	20005d50 	.word	0x20005d50
    f50c:	20005d48 	.word	0x20005d48

0000f510 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    f510:	b5f0      	push	{r4, r5, r6, r7, lr}
    f512:	46c6      	mov	lr, r8
    f514:	b500      	push	{lr}
    f516:	000e      	movs	r6, r1
    f518:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    f51a:	3801      	subs	r0, #1
    f51c:	2802      	cmp	r0, #2
    f51e:	d810      	bhi.n	f542 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    f520:	2a00      	cmp	r2, #0
    f522:	d011      	beq.n	f548 <_write+0x38>
    f524:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    f526:	4b0c      	ldr	r3, [pc, #48]	; (f558 <_write+0x48>)
    f528:	4698      	mov	r8, r3
    f52a:	4f0c      	ldr	r7, [pc, #48]	; (f55c <_write+0x4c>)
    f52c:	4643      	mov	r3, r8
    f52e:	6818      	ldr	r0, [r3, #0]
    f530:	5d31      	ldrb	r1, [r6, r4]
    f532:	683b      	ldr	r3, [r7, #0]
    f534:	4798      	blx	r3
    f536:	2800      	cmp	r0, #0
    f538:	db08      	blt.n	f54c <_write+0x3c>
			return -1;
		}
		++nChars;
    f53a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    f53c:	42a5      	cmp	r5, r4
    f53e:	d1f5      	bne.n	f52c <_write+0x1c>
    f540:	e006      	b.n	f550 <_write+0x40>
		return -1;
    f542:	2401      	movs	r4, #1
    f544:	4264      	negs	r4, r4
    f546:	e003      	b.n	f550 <_write+0x40>
	for (; len != 0; --len) {
    f548:	0014      	movs	r4, r2
    f54a:	e001      	b.n	f550 <_write+0x40>
			return -1;
    f54c:	2401      	movs	r4, #1
    f54e:	4264      	negs	r4, r4
	}
	return nChars;
}
    f550:	0020      	movs	r0, r4
    f552:	bc04      	pop	{r2}
    f554:	4690      	mov	r8, r2
    f556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f558:	20005d50 	.word	0x20005d50
    f55c:	20005d4c 	.word	0x20005d4c

0000f560 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    f560:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    f562:	4a06      	ldr	r2, [pc, #24]	; (f57c <_sbrk+0x1c>)
    f564:	6812      	ldr	r2, [r2, #0]
    f566:	2a00      	cmp	r2, #0
    f568:	d004      	beq.n	f574 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    f56a:	4a04      	ldr	r2, [pc, #16]	; (f57c <_sbrk+0x1c>)
    f56c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    f56e:	18c3      	adds	r3, r0, r3
    f570:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    f572:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    f574:	4902      	ldr	r1, [pc, #8]	; (f580 <_sbrk+0x20>)
    f576:	4a01      	ldr	r2, [pc, #4]	; (f57c <_sbrk+0x1c>)
    f578:	6011      	str	r1, [r2, #0]
    f57a:	e7f6      	b.n	f56a <_sbrk+0xa>
    f57c:	20004174 	.word	0x20004174
    f580:	20007e08 	.word	0x20007e08

0000f584 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    f584:	2001      	movs	r0, #1
    f586:	4240      	negs	r0, r0
    f588:	4770      	bx	lr

0000f58a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    f58a:	2380      	movs	r3, #128	; 0x80
    f58c:	019b      	lsls	r3, r3, #6
    f58e:	604b      	str	r3, [r1, #4]

	return 0;
}
    f590:	2000      	movs	r0, #0
    f592:	4770      	bx	lr

0000f594 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    f594:	2001      	movs	r0, #1
    f596:	4770      	bx	lr

0000f598 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    f598:	2000      	movs	r0, #0
    f59a:	4770      	bx	lr

0000f59c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    f59c:	b530      	push	{r4, r5, lr}
    f59e:	b087      	sub	sp, #28
    f5a0:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    f5a2:	aa01      	add	r2, sp, #4
    f5a4:	23a0      	movs	r3, #160	; 0xa0
    f5a6:	011b      	lsls	r3, r3, #4
    f5a8:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    f5aa:	2300      	movs	r3, #0
    f5ac:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    f5ae:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    f5b0:	21fa      	movs	r1, #250	; 0xfa
    f5b2:	00c9      	lsls	r1, r1, #3
    f5b4:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    f5b6:	2101      	movs	r1, #1
    f5b8:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    f5ba:	2004      	movs	r0, #4
    f5bc:	7210      	strb	r0, [r2, #8]
    f5be:	7253      	strb	r3, [r2, #9]
    f5c0:	7293      	strb	r3, [r2, #10]
    f5c2:	72d3      	strb	r3, [r2, #11]
    f5c4:	7311      	strb	r1, [r2, #12]
    f5c6:	7351      	strb	r1, [r2, #13]
    f5c8:	4b14      	ldr	r3, [pc, #80]	; (f61c <disk_initialize+0x80>)
    f5ca:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    f5cc:	2306      	movs	r3, #6
    f5ce:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    f5d0:	4d13      	ldr	r5, [pc, #76]	; (f620 <disk_initialize+0x84>)
    f5d2:	4914      	ldr	r1, [pc, #80]	; (f624 <disk_initialize+0x88>)
    f5d4:	0028      	movs	r0, r5
    f5d6:	4b14      	ldr	r3, [pc, #80]	; (f628 <disk_initialize+0x8c>)
    f5d8:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    f5da:	0028      	movs	r0, r5
    f5dc:	4b13      	ldr	r3, [pc, #76]	; (f62c <disk_initialize+0x90>)
    f5de:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    f5e0:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    f5e2:	2c01      	cmp	r4, #1
    f5e4:	d901      	bls.n	f5ea <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    f5e6:	b007      	add	sp, #28
    f5e8:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    f5ea:	0020      	movs	r0, r4
    f5ec:	4b10      	ldr	r3, [pc, #64]	; (f630 <disk_initialize+0x94>)
    f5ee:	4798      	blx	r3
    f5f0:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    f5f2:	2803      	cmp	r0, #3
    f5f4:	d106      	bne.n	f604 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    f5f6:	0020      	movs	r0, r4
    f5f8:	4b0d      	ldr	r3, [pc, #52]	; (f630 <disk_initialize+0x94>)
    f5fa:	4798      	blx	r3
    f5fc:	0003      	movs	r3, r0
		return STA_NOINIT;
    f5fe:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    f600:	2b03      	cmp	r3, #3
    f602:	d0f0      	beq.n	f5e6 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    f604:	2b00      	cmp	r3, #0
    f606:	d106      	bne.n	f616 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    f608:	0020      	movs	r0, r4
    f60a:	4b0a      	ldr	r3, [pc, #40]	; (f634 <disk_initialize+0x98>)
    f60c:	4798      	blx	r3
	return 0;
    f60e:	1e43      	subs	r3, r0, #1
    f610:	4198      	sbcs	r0, r3
    f612:	0080      	lsls	r0, r0, #2
    f614:	e7e7      	b.n	f5e6 <disk_initialize+0x4a>
		return STA_NOINIT;
    f616:	2001      	movs	r0, #1
    f618:	e7e5      	b.n	f5e6 <disk_initialize+0x4a>
    f61a:	46c0      	nop			; (mov r8, r8)
    f61c:	000007de 	.word	0x000007de
    f620:	20005d54 	.word	0x20005d54
    f624:	40001400 	.word	0x40001400
    f628:	0000d4fd 	.word	0x0000d4fd
    f62c:	0000d399 	.word	0x0000d399
    f630:	0000d069 	.word	0x0000d069
    f634:	0000d0a5 	.word	0x0000d0a5

0000f638 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    f638:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    f63a:	4b05      	ldr	r3, [pc, #20]	; (f650 <disk_status+0x18>)
    f63c:	4798      	blx	r3
    f63e:	1e03      	subs	r3, r0, #0
    f640:	d004      	beq.n	f64c <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    f642:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    f644:	2b02      	cmp	r3, #2
    f646:	d000      	beq.n	f64a <disk_status+0x12>
	default:
		return STA_NOINIT;
    f648:	3802      	subs	r0, #2
	}
}
    f64a:	bd10      	pop	{r4, pc}
		return 0;
    f64c:	2000      	movs	r0, #0
    f64e:	e7fc      	b.n	f64a <disk_status+0x12>
    f650:	0000d069 	.word	0x0000d069

0000f654 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    f654:	b5f0      	push	{r4, r5, r6, r7, lr}
    f656:	46de      	mov	lr, fp
    f658:	464f      	mov	r7, r9
    f65a:	4646      	mov	r6, r8
    f65c:	b5c0      	push	{r6, r7, lr}
    f65e:	b084      	sub	sp, #16
    f660:	9001      	str	r0, [sp, #4]
    f662:	000d      	movs	r5, r1
    f664:	0014      	movs	r4, r2
    f666:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    f668:	4b18      	ldr	r3, [pc, #96]	; (f6cc <disk_read+0x78>)
    f66a:	4798      	blx	r3
    f66c:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    f66e:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    f670:	2e00      	cmp	r6, #0
    f672:	d105      	bne.n	f680 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    f674:	b004      	add	sp, #16
    f676:	bc1c      	pop	{r2, r3, r4}
    f678:	4690      	mov	r8, r2
    f67a:	4699      	mov	r9, r3
    f67c:	46a3      	mov	fp, r4
    f67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    f680:	a903      	add	r1, sp, #12
    f682:	9801      	ldr	r0, [sp, #4]
    f684:	4b12      	ldr	r3, [pc, #72]	; (f6d0 <disk_read+0x7c>)
    f686:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    f688:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    f68a:	0032      	movs	r2, r6
    f68c:	437a      	muls	r2, r7
    f68e:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    f690:	9b03      	ldr	r3, [sp, #12]
    f692:	3301      	adds	r3, #1
    f694:	4373      	muls	r3, r6
		return RES_PARERR;
    f696:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    f698:	429a      	cmp	r2, r3
    f69a:	d8eb      	bhi.n	f674 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    f69c:	2f00      	cmp	r7, #0
    f69e:	d011      	beq.n	f6c4 <disk_read+0x70>
    f6a0:	0273      	lsls	r3, r6, #9
    f6a2:	4698      	mov	r8, r3
    f6a4:	1c7b      	adds	r3, r7, #1
    f6a6:	469b      	mov	fp, r3
    f6a8:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    f6aa:	4e0a      	ldr	r6, [pc, #40]	; (f6d4 <disk_read+0x80>)
    f6ac:	002a      	movs	r2, r5
    f6ae:	0021      	movs	r1, r4
    f6b0:	9801      	ldr	r0, [sp, #4]
    f6b2:	47b0      	blx	r6
    f6b4:	2800      	cmp	r0, #0
    f6b6:	d107      	bne.n	f6c8 <disk_read+0x74>
    f6b8:	3701      	adds	r7, #1
    f6ba:	444c      	add	r4, r9
    f6bc:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    f6be:	455f      	cmp	r7, fp
    f6c0:	d1f4      	bne.n	f6ac <disk_read+0x58>
    f6c2:	e7d7      	b.n	f674 <disk_read+0x20>
	return RES_OK;
    f6c4:	2000      	movs	r0, #0
    f6c6:	e7d5      	b.n	f674 <disk_read+0x20>
			return RES_ERROR;
    f6c8:	2001      	movs	r0, #1
    f6ca:	e7d3      	b.n	f674 <disk_read+0x20>
    f6cc:	0000d09d 	.word	0x0000d09d
    f6d0:	0000d081 	.word	0x0000d081
    f6d4:	0000d0bd 	.word	0x0000d0bd

0000f6d8 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    f6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6da:	46de      	mov	lr, fp
    f6dc:	464f      	mov	r7, r9
    f6de:	4646      	mov	r6, r8
    f6e0:	b5c0      	push	{r6, r7, lr}
    f6e2:	b084      	sub	sp, #16
    f6e4:	9001      	str	r0, [sp, #4]
    f6e6:	000d      	movs	r5, r1
    f6e8:	0014      	movs	r4, r2
    f6ea:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    f6ec:	4b18      	ldr	r3, [pc, #96]	; (f750 <disk_write+0x78>)
    f6ee:	4798      	blx	r3
    f6f0:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    f6f2:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    f6f4:	2e00      	cmp	r6, #0
    f6f6:	d105      	bne.n	f704 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    f6f8:	b004      	add	sp, #16
    f6fa:	bc1c      	pop	{r2, r3, r4}
    f6fc:	4690      	mov	r8, r2
    f6fe:	4699      	mov	r9, r3
    f700:	46a3      	mov	fp, r4
    f702:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    f704:	a903      	add	r1, sp, #12
    f706:	9801      	ldr	r0, [sp, #4]
    f708:	4b12      	ldr	r3, [pc, #72]	; (f754 <disk_write+0x7c>)
    f70a:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    f70c:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    f70e:	0032      	movs	r2, r6
    f710:	437a      	muls	r2, r7
    f712:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    f714:	9b03      	ldr	r3, [sp, #12]
    f716:	3301      	adds	r3, #1
    f718:	4373      	muls	r3, r6
		return RES_PARERR;
    f71a:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    f71c:	429a      	cmp	r2, r3
    f71e:	d8eb      	bhi.n	f6f8 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    f720:	2f00      	cmp	r7, #0
    f722:	d011      	beq.n	f748 <disk_write+0x70>
    f724:	0273      	lsls	r3, r6, #9
    f726:	4698      	mov	r8, r3
    f728:	1c7b      	adds	r3, r7, #1
    f72a:	469b      	mov	fp, r3
    f72c:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    f72e:	4e0a      	ldr	r6, [pc, #40]	; (f758 <disk_write+0x80>)
    f730:	002a      	movs	r2, r5
    f732:	0021      	movs	r1, r4
    f734:	9801      	ldr	r0, [sp, #4]
    f736:	47b0      	blx	r6
    f738:	2800      	cmp	r0, #0
    f73a:	d107      	bne.n	f74c <disk_write+0x74>
    f73c:	3701      	adds	r7, #1
    f73e:	444c      	add	r4, r9
    f740:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    f742:	455f      	cmp	r7, fp
    f744:	d1f4      	bne.n	f730 <disk_write+0x58>
    f746:	e7d7      	b.n	f6f8 <disk_write+0x20>
	return RES_OK;
    f748:	2000      	movs	r0, #0
    f74a:	e7d5      	b.n	f6f8 <disk_write+0x20>
			return RES_ERROR;
    f74c:	2001      	movs	r0, #1
    f74e:	e7d3      	b.n	f6f8 <disk_write+0x20>
    f750:	0000d09d 	.word	0x0000d09d
    f754:	0000d081 	.word	0x0000d081
    f758:	0000d0dd 	.word	0x0000d0dd

0000f75c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    f75c:	b510      	push	{r4, lr}
    f75e:	b082      	sub	sp, #8
    f760:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    f762:	2901      	cmp	r1, #1
    f764:	d00b      	beq.n	f77e <disk_ioctl+0x22>
    f766:	2900      	cmp	r1, #0
    f768:	d020      	beq.n	f7ac <disk_ioctl+0x50>
    f76a:	2902      	cmp	r1, #2
    f76c:	d00f      	beq.n	f78e <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    f76e:	2004      	movs	r0, #4
	switch (ctrl) {
    f770:	2903      	cmp	r1, #3
    f772:	d102      	bne.n	f77a <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    f774:	2301      	movs	r3, #1
    f776:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    f778:	2000      	movs	r0, #0
	}

	return res;
}
    f77a:	b002      	add	sp, #8
    f77c:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    f77e:	a901      	add	r1, sp, #4
    f780:	4b0e      	ldr	r3, [pc, #56]	; (f7bc <disk_ioctl+0x60>)
    f782:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    f784:	9b01      	ldr	r3, [sp, #4]
    f786:	3301      	adds	r3, #1
    f788:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    f78a:	2000      	movs	r0, #0
	break;
    f78c:	e7f5      	b.n	f77a <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    f78e:	4b0c      	ldr	r3, [pc, #48]	; (f7c0 <disk_ioctl+0x64>)
    f790:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    f792:	1e43      	subs	r3, r0, #1
    f794:	b2db      	uxtb	r3, r3
    f796:	2b01      	cmp	r3, #1
    f798:	d904      	bls.n	f7a4 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    f79a:	1f03      	subs	r3, r0, #4
    f79c:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    f79e:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    f7a0:	4213      	tst	r3, r2
    f7a2:	d1ea      	bne.n	f77a <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    f7a4:	2300      	movs	r3, #0
    f7a6:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    f7a8:	2000      	movs	r0, #0
	break;
    f7aa:	e7e6      	b.n	f77a <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    f7ac:	4b05      	ldr	r3, [pc, #20]	; (f7c4 <disk_ioctl+0x68>)
    f7ae:	4798      	blx	r3
    f7b0:	2800      	cmp	r0, #0
    f7b2:	d001      	beq.n	f7b8 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    f7b4:	2003      	movs	r0, #3
    f7b6:	e7e0      	b.n	f77a <disk_ioctl+0x1e>
			res = RES_OK;
    f7b8:	2000      	movs	r0, #0
    f7ba:	e7de      	b.n	f77a <disk_ioctl+0x1e>
    f7bc:	0000d081 	.word	0x0000d081
    f7c0:	0000d09d 	.word	0x0000d09d
    f7c4:	0000d069 	.word	0x0000d069

0000f7c8 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    f7c8:	b500      	push	{lr}
    f7ca:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    f7cc:	4669      	mov	r1, sp
    f7ce:	480f      	ldr	r0, [pc, #60]	; (f80c <get_fattime+0x44>)
    f7d0:	4b0f      	ldr	r3, [pc, #60]	; (f810 <get_fattime+0x48>)
    f7d2:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    f7d4:	466b      	mov	r3, sp
    f7d6:	7958      	ldrb	r0, [r3, #5]
    f7d8:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    f7da:	791b      	ldrb	r3, [r3, #4]
    f7dc:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    f7de:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    f7e0:	466b      	mov	r3, sp
    f7e2:	789b      	ldrb	r3, [r3, #2]
    f7e4:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    f7e6:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    f7e8:	466b      	mov	r3, sp
    f7ea:	785b      	ldrb	r3, [r3, #1]
    f7ec:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    f7ee:	4318      	orrs	r0, r3
    f7f0:	466b      	mov	r3, sp
    f7f2:	781b      	ldrb	r3, [r3, #0]
    f7f4:	085b      	lsrs	r3, r3, #1
    f7f6:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    f7f8:	466b      	mov	r3, sp
    f7fa:	88db      	ldrh	r3, [r3, #6]
    f7fc:	4a05      	ldr	r2, [pc, #20]	; (f814 <get_fattime+0x4c>)
    f7fe:	4694      	mov	ip, r2
    f800:	4463      	add	r3, ip
    f802:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    f804:	4318      	orrs	r0, r3

	return ul_time;
}
    f806:	b003      	add	sp, #12
    f808:	bd00      	pop	{pc}
    f80a:	46c0      	nop			; (mov r8, r8)
    f80c:	20005d54 	.word	0x20005d54
    f810:	0000d485 	.word	0x0000d485
    f814:	fffff844 	.word	0xfffff844

0000f818 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    f818:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    f81a:	2a00      	cmp	r2, #0
    f81c:	d005      	beq.n	f82a <mem_cpy+0x12>
    f81e:	2300      	movs	r3, #0
		*d++ = *s++;
    f820:	5ccc      	ldrb	r4, [r1, r3]
    f822:	54c4      	strb	r4, [r0, r3]
    f824:	3301      	adds	r3, #1
	while (cnt--)
    f826:	4293      	cmp	r3, r2
    f828:	d1fa      	bne.n	f820 <mem_cpy+0x8>
}
    f82a:	bd10      	pop	{r4, pc}

0000f82c <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    f82c:	2a00      	cmp	r2, #0
    f82e:	d005      	beq.n	f83c <mem_set+0x10>
    f830:	0003      	movs	r3, r0
    f832:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    f834:	7019      	strb	r1, [r3, #0]
    f836:	3301      	adds	r3, #1
	while (cnt--)
    f838:	4293      	cmp	r3, r2
    f83a:	d1fb      	bne.n	f834 <mem_set+0x8>
}
    f83c:	4770      	bx	lr

0000f83e <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    f83e:	0002      	movs	r2, r0
	clst -= 2;
    f840:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    f842:	6983      	ldr	r3, [r0, #24]
    f844:	3b02      	subs	r3, #2
    f846:	2000      	movs	r0, #0
    f848:	4299      	cmp	r1, r3
    f84a:	d203      	bcs.n	f854 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    f84c:	7890      	ldrb	r0, [r2, #2]
    f84e:	4341      	muls	r1, r0
    f850:	6a90      	ldr	r0, [r2, #40]	; 0x28
    f852:	1808      	adds	r0, r1, r0
}
    f854:	4770      	bx	lr

0000f856 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    f856:	0002      	movs	r2, r0
    f858:	0001      	movs	r1, r0
    f85a:	310b      	adds	r1, #11
	BYTE sum = 0;
    f85c:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    f85e:	0843      	lsrs	r3, r0, #1
    f860:	01c0      	lsls	r0, r0, #7
    f862:	4303      	orrs	r3, r0
    f864:	7810      	ldrb	r0, [r2, #0]
    f866:	1818      	adds	r0, r3, r0
    f868:	b2c0      	uxtb	r0, r0
    f86a:	3201      	adds	r2, #1
    f86c:	428a      	cmp	r2, r1
    f86e:	d1f6      	bne.n	f85e <sum_sfn+0x8>
	return sum;
}
    f870:	4770      	bx	lr
	...

0000f874 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    f874:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    f876:	2800      	cmp	r0, #0
    f878:	d010      	beq.n	f89c <validate+0x28>
    f87a:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    f87c:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    f87e:	2a00      	cmp	r2, #0
    f880:	d101      	bne.n	f886 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    f882:	0018      	movs	r0, r3
    f884:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    f886:	88c2      	ldrh	r2, [r0, #6]
    f888:	428a      	cmp	r2, r1
    f88a:	d1fa      	bne.n	f882 <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    f88c:	7840      	ldrb	r0, [r0, #1]
    f88e:	4b04      	ldr	r3, [pc, #16]	; (f8a0 <validate+0x2c>)
    f890:	4798      	blx	r3
		return FR_NOT_READY;
    f892:	2303      	movs	r3, #3
	return FR_OK;
    f894:	07c0      	lsls	r0, r0, #31
    f896:	17c0      	asrs	r0, r0, #31
    f898:	4003      	ands	r3, r0
    f89a:	e7f2      	b.n	f882 <validate+0xe>
		return FR_INVALID_OBJECT;
    f89c:	2309      	movs	r3, #9
    f89e:	e7f0      	b.n	f882 <validate+0xe>
    f8a0:	0000f639 	.word	0x0000f639

0000f8a4 <check_fs>:
{
    f8a4:	b570      	push	{r4, r5, r6, lr}
    f8a6:	0004      	movs	r4, r0
    f8a8:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    f8aa:	0001      	movs	r1, r0
    f8ac:	3130      	adds	r1, #48	; 0x30
    f8ae:	7840      	ldrb	r0, [r0, #1]
    f8b0:	2301      	movs	r3, #1
    f8b2:	4d1f      	ldr	r5, [pc, #124]	; (f930 <check_fs+0x8c>)
    f8b4:	47a8      	blx	r5
		return 3;
    f8b6:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    f8b8:	2800      	cmp	r0, #0
    f8ba:	d001      	beq.n	f8c0 <check_fs+0x1c>
}
    f8bc:	0018      	movs	r0, r3
    f8be:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    f8c0:	4b1c      	ldr	r3, [pc, #112]	; (f934 <check_fs+0x90>)
    f8c2:	5ce3      	ldrb	r3, [r4, r3]
    f8c4:	021b      	lsls	r3, r3, #8
    f8c6:	4a1c      	ldr	r2, [pc, #112]	; (f938 <check_fs+0x94>)
    f8c8:	5ca2      	ldrb	r2, [r4, r2]
    f8ca:	431a      	orrs	r2, r3
    f8cc:	491b      	ldr	r1, [pc, #108]	; (f93c <check_fs+0x98>)
    f8ce:	b212      	sxth	r2, r2
		return 2;
    f8d0:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    f8d2:	428a      	cmp	r2, r1
    f8d4:	d1f2      	bne.n	f8bc <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    f8d6:	3367      	adds	r3, #103	; 0x67
    f8d8:	5ce3      	ldrb	r3, [r4, r3]
    f8da:	061b      	lsls	r3, r3, #24
    f8dc:	2268      	movs	r2, #104	; 0x68
    f8de:	5ca2      	ldrb	r2, [r4, r2]
    f8e0:	0412      	lsls	r2, r2, #16
    f8e2:	4313      	orrs	r3, r2
    f8e4:	2266      	movs	r2, #102	; 0x66
    f8e6:	5ca2      	ldrb	r2, [r4, r2]
    f8e8:	4313      	orrs	r3, r2
    f8ea:	2267      	movs	r2, #103	; 0x67
    f8ec:	5ca2      	ldrb	r2, [r4, r2]
    f8ee:	0212      	lsls	r2, r2, #8
    f8f0:	4313      	orrs	r3, r2
    f8f2:	021b      	lsls	r3, r3, #8
    f8f4:	0a1b      	lsrs	r3, r3, #8
    f8f6:	4a12      	ldr	r2, [pc, #72]	; (f940 <check_fs+0x9c>)
    f8f8:	4293      	cmp	r3, r2
    f8fa:	d016      	beq.n	f92a <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    f8fc:	2385      	movs	r3, #133	; 0x85
    f8fe:	5ce3      	ldrb	r3, [r4, r3]
    f900:	061b      	lsls	r3, r3, #24
    f902:	2284      	movs	r2, #132	; 0x84
    f904:	5ca2      	ldrb	r2, [r4, r2]
    f906:	0412      	lsls	r2, r2, #16
    f908:	4313      	orrs	r3, r2
    f90a:	2282      	movs	r2, #130	; 0x82
    f90c:	5ca2      	ldrb	r2, [r4, r2]
    f90e:	4313      	orrs	r3, r2
    f910:	2283      	movs	r2, #131	; 0x83
    f912:	5ca2      	ldrb	r2, [r4, r2]
    f914:	0212      	lsls	r2, r2, #8
    f916:	4313      	orrs	r3, r2
    f918:	021b      	lsls	r3, r3, #8
    f91a:	0a1b      	lsrs	r3, r3, #8
    f91c:	4a09      	ldr	r2, [pc, #36]	; (f944 <check_fs+0xa0>)
    f91e:	4694      	mov	ip, r2
    f920:	4463      	add	r3, ip
    f922:	1e58      	subs	r0, r3, #1
    f924:	4183      	sbcs	r3, r0
		return 3;
    f926:	b2db      	uxtb	r3, r3
    f928:	e7c8      	b.n	f8bc <check_fs+0x18>
		return 0;
    f92a:	2300      	movs	r3, #0
    f92c:	e7c6      	b.n	f8bc <check_fs+0x18>
    f92e:	46c0      	nop			; (mov r8, r8)
    f930:	0000f655 	.word	0x0000f655
    f934:	0000022f 	.word	0x0000022f
    f938:	0000022e 	.word	0x0000022e
    f93c:	ffffaa55 	.word	0xffffaa55
    f940:	00544146 	.word	0x00544146
    f944:	ffabbeba 	.word	0xffabbeba

0000f948 <chk_mounted>:
{
    f948:	b5f0      	push	{r4, r5, r6, r7, lr}
    f94a:	46d6      	mov	lr, sl
    f94c:	464f      	mov	r7, r9
    f94e:	4646      	mov	r6, r8
    f950:	b5c0      	push	{r6, r7, lr}
    f952:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    f954:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    f956:	781c      	ldrb	r4, [r3, #0]
    f958:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    f95a:	2c09      	cmp	r4, #9
    f95c:	d80e      	bhi.n	f97c <chk_mounted+0x34>
    f95e:	785a      	ldrb	r2, [r3, #1]
    f960:	2a3a      	cmp	r2, #58	; 0x3a
    f962:	d001      	beq.n	f968 <chk_mounted+0x20>
    f964:	2400      	movs	r4, #0
    f966:	e00a      	b.n	f97e <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    f968:	3302      	adds	r3, #2
    f96a:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    f96c:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    f96e:	2c07      	cmp	r4, #7
    f970:	d905      	bls.n	f97e <chk_mounted+0x36>
}
    f972:	bc1c      	pop	{r2, r3, r4}
    f974:	4690      	mov	r8, r2
    f976:	4699      	mov	r9, r3
    f978:	46a2      	mov	sl, r4
    f97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f97c:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    f97e:	00a3      	lsls	r3, r4, #2
    f980:	4ac5      	ldr	r2, [pc, #788]	; (fc98 <chk_mounted+0x350>)
    f982:	589e      	ldr	r6, [r3, r2]
    f984:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    f986:	2e00      	cmp	r6, #0
    f988:	d100      	bne.n	f98c <chk_mounted+0x44>
    f98a:	e0e8      	b.n	fb5e <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    f98c:	7833      	ldrb	r3, [r6, #0]
    f98e:	2b00      	cmp	r3, #0
    f990:	d00d      	beq.n	f9ae <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    f992:	7870      	ldrb	r0, [r6, #1]
    f994:	4bc1      	ldr	r3, [pc, #772]	; (fc9c <chk_mounted+0x354>)
    f996:	4798      	blx	r3
    f998:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    f99a:	07c2      	lsls	r2, r0, #31
    f99c:	d407      	bmi.n	f9ae <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    f99e:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    f9a0:	2d00      	cmp	r5, #0
    f9a2:	d0e6      	beq.n	f972 <chk_mounted+0x2a>
    f9a4:	075b      	lsls	r3, r3, #29
    f9a6:	d400      	bmi.n	f9aa <chk_mounted+0x62>
    f9a8:	e0db      	b.n	fb62 <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    f9aa:	300a      	adds	r0, #10
    f9ac:	e7e1      	b.n	f972 <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    f9ae:	2300      	movs	r3, #0
    f9b0:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    f9b2:	b2e0      	uxtb	r0, r4
    f9b4:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    f9b6:	4bba      	ldr	r3, [pc, #744]	; (fca0 <chk_mounted+0x358>)
    f9b8:	4798      	blx	r3
    f9ba:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    f9bc:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    f9be:	07da      	lsls	r2, r3, #31
    f9c0:	d4d7      	bmi.n	f972 <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    f9c2:	2d00      	cmp	r5, #0
    f9c4:	d002      	beq.n	f9cc <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    f9c6:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    f9c8:	075b      	lsls	r3, r3, #29
    f9ca:	d4d2      	bmi.n	f972 <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    f9cc:	2100      	movs	r1, #0
    f9ce:	0030      	movs	r0, r6
    f9d0:	4bb4      	ldr	r3, [pc, #720]	; (fca4 <chk_mounted+0x35c>)
    f9d2:	4798      	blx	r3
    f9d4:	0003      	movs	r3, r0
    f9d6:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    f9d8:	2801      	cmp	r0, #1
    f9da:	d100      	bne.n	f9de <chk_mounted+0x96>
    f9dc:	e09a      	b.n	fb14 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    f9de:	2b03      	cmp	r3, #3
    f9e0:	d100      	bne.n	f9e4 <chk_mounted+0x9c>
    f9e2:	e0c0      	b.n	fb66 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    f9e4:	200d      	movs	r0, #13
    f9e6:	2b00      	cmp	r3, #0
    f9e8:	d1c3      	bne.n	f972 <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    f9ea:	333c      	adds	r3, #60	; 0x3c
    f9ec:	5cf2      	ldrb	r2, [r6, r3]
    f9ee:	0212      	lsls	r2, r2, #8
    f9f0:	3b01      	subs	r3, #1
    f9f2:	5cf3      	ldrb	r3, [r6, r3]
    f9f4:	4313      	orrs	r3, r2
    f9f6:	2280      	movs	r2, #128	; 0x80
    f9f8:	0092      	lsls	r2, r2, #2
    f9fa:	b21b      	sxth	r3, r3
    f9fc:	4293      	cmp	r3, r2
    f9fe:	d1b8      	bne.n	f972 <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    fa00:	2347      	movs	r3, #71	; 0x47
    fa02:	5cf3      	ldrb	r3, [r6, r3]
    fa04:	021b      	lsls	r3, r3, #8
    fa06:	3abb      	subs	r2, #187	; 0xbb
    fa08:	3aff      	subs	r2, #255	; 0xff
    fa0a:	5cb5      	ldrb	r5, [r6, r2]
    fa0c:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    fa0e:	d10d      	bne.n	fa2c <chk_mounted+0xe4>
    fa10:	2357      	movs	r3, #87	; 0x57
    fa12:	5cf5      	ldrb	r5, [r6, r3]
    fa14:	062d      	lsls	r5, r5, #24
    fa16:	3b01      	subs	r3, #1
    fa18:	5cf3      	ldrb	r3, [r6, r3]
    fa1a:	041b      	lsls	r3, r3, #16
    fa1c:	431d      	orrs	r5, r3
    fa1e:	2354      	movs	r3, #84	; 0x54
    fa20:	5cf3      	ldrb	r3, [r6, r3]
    fa22:	431d      	orrs	r5, r3
    fa24:	2355      	movs	r3, #85	; 0x55
    fa26:	5cf3      	ldrb	r3, [r6, r3]
    fa28:	021b      	lsls	r3, r3, #8
    fa2a:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    fa2c:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    fa2e:	2340      	movs	r3, #64	; 0x40
    fa30:	5cf2      	ldrb	r2, [r6, r3]
    fa32:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    fa34:	1e53      	subs	r3, r2, #1
    fa36:	200d      	movs	r0, #13
    fa38:	2b01      	cmp	r3, #1
    fa3a:	d89a      	bhi.n	f972 <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    fa3c:	233d      	movs	r3, #61	; 0x3d
    fa3e:	5cf1      	ldrb	r1, [r6, r3]
    fa40:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    fa42:	2900      	cmp	r1, #0
    fa44:	d095      	beq.n	f972 <chk_mounted+0x2a>
    fa46:	1e4b      	subs	r3, r1, #1
    fa48:	4219      	tst	r1, r3
    fa4a:	d192      	bne.n	f972 <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    fa4c:	2342      	movs	r3, #66	; 0x42
    fa4e:	5cf3      	ldrb	r3, [r6, r3]
    fa50:	021b      	lsls	r3, r3, #8
    fa52:	3034      	adds	r0, #52	; 0x34
    fa54:	5c30      	ldrb	r0, [r6, r0]
    fa56:	4318      	orrs	r0, r3
    fa58:	4680      	mov	r8, r0
    fa5a:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    fa5c:	200d      	movs	r0, #13
    fa5e:	4643      	mov	r3, r8
    fa60:	071b      	lsls	r3, r3, #28
    fa62:	d000      	beq.n	fa66 <chk_mounted+0x11e>
    fa64:	e785      	b.n	f972 <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    fa66:	2344      	movs	r3, #68	; 0x44
    fa68:	5cf3      	ldrb	r3, [r6, r3]
    fa6a:	021b      	lsls	r3, r3, #8
    fa6c:	3036      	adds	r0, #54	; 0x36
    fa6e:	5c30      	ldrb	r0, [r6, r0]
    fa70:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    fa72:	d10d      	bne.n	fa90 <chk_mounted+0x148>
    fa74:	3353      	adds	r3, #83	; 0x53
    fa76:	5cf3      	ldrb	r3, [r6, r3]
    fa78:	061b      	lsls	r3, r3, #24
    fa7a:	2052      	movs	r0, #82	; 0x52
    fa7c:	5c30      	ldrb	r0, [r6, r0]
    fa7e:	0400      	lsls	r0, r0, #16
    fa80:	4303      	orrs	r3, r0
    fa82:	2050      	movs	r0, #80	; 0x50
    fa84:	5c30      	ldrb	r0, [r6, r0]
    fa86:	4303      	orrs	r3, r0
    fa88:	2051      	movs	r0, #81	; 0x51
    fa8a:	5c30      	ldrb	r0, [r6, r0]
    fa8c:	0200      	lsls	r0, r0, #8
    fa8e:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    fa90:	203f      	movs	r0, #63	; 0x3f
    fa92:	5c30      	ldrb	r0, [r6, r0]
    fa94:	0200      	lsls	r0, r0, #8
    fa96:	273e      	movs	r7, #62	; 0x3e
    fa98:	5df7      	ldrb	r7, [r6, r7]
    fa9a:	4307      	orrs	r7, r0
    fa9c:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    fa9e:	200d      	movs	r0, #13
    faa0:	2f00      	cmp	r7, #0
    faa2:	d100      	bne.n	faa6 <chk_mounted+0x15e>
    faa4:	e765      	b.n	f972 <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    faa6:	436a      	muls	r2, r5
    faa8:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    faaa:	4642      	mov	r2, r8
    faac:	0917      	lsrs	r7, r2, #4
    faae:	4457      	add	r7, sl
    fab0:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    fab2:	42bb      	cmp	r3, r7
    fab4:	d200      	bcs.n	fab8 <chk_mounted+0x170>
    fab6:	e75c      	b.n	f972 <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    fab8:	1bd8      	subs	r0, r3, r7
    faba:	4b7b      	ldr	r3, [pc, #492]	; (fca8 <chk_mounted+0x360>)
    fabc:	4798      	blx	r3
    fabe:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    fac0:	200d      	movs	r0, #13
    fac2:	2b00      	cmp	r3, #0
    fac4:	d100      	bne.n	fac8 <chk_mounted+0x180>
    fac6:	e754      	b.n	f972 <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    fac8:	4a78      	ldr	r2, [pc, #480]	; (fcac <chk_mounted+0x364>)
	fmt = FS_FAT12;
    faca:	429a      	cmp	r2, r3
    facc:	4192      	sbcs	r2, r2
    face:	4252      	negs	r2, r2
    fad0:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    fad2:	4977      	ldr	r1, [pc, #476]	; (fcb0 <chk_mounted+0x368>)
    fad4:	428b      	cmp	r3, r1
    fad6:	d848      	bhi.n	fb6a <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    fad8:	3302      	adds	r3, #2
    fada:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    fadc:	19e7      	adds	r7, r4, r7
    fade:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    fae0:	4454      	add	r4, sl
    fae2:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    fae4:	200d      	movs	r0, #13
    fae6:	4641      	mov	r1, r8
    fae8:	2900      	cmp	r1, #0
    faea:	d100      	bne.n	faee <chk_mounted+0x1a6>
    faec:	e741      	b.n	f972 <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    faee:	444c      	add	r4, r9
    faf0:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    faf2:	2a02      	cmp	r2, #2
    faf4:	d12c      	bne.n	fb50 <chk_mounted+0x208>
    faf6:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    faf8:	496e      	ldr	r1, [pc, #440]	; (fcb4 <chk_mounted+0x36c>)
    fafa:	468c      	mov	ip, r1
    fafc:	4463      	add	r3, ip
    fafe:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    fb00:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    fb02:	429d      	cmp	r5, r3
    fb04:	d200      	bcs.n	fb08 <chk_mounted+0x1c0>
    fb06:	e734      	b.n	f972 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    fb08:	2301      	movs	r3, #1
    fb0a:	425b      	negs	r3, r3
    fb0c:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    fb0e:	2300      	movs	r3, #0
    fb10:	60f3      	str	r3, [r6, #12]
    fb12:	e0b6      	b.n	fc82 <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    fb14:	33f2      	adds	r3, #242	; 0xf2
    fb16:	33ff      	adds	r3, #255	; 0xff
    fb18:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    fb1a:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    fb1c:	2b00      	cmp	r3, #0
    fb1e:	d100      	bne.n	fb22 <chk_mounted+0x1da>
    fb20:	e727      	b.n	f972 <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    fb22:	23fa      	movs	r3, #250	; 0xfa
    fb24:	33ff      	adds	r3, #255	; 0xff
    fb26:	5cf4      	ldrb	r4, [r6, r3]
    fb28:	0624      	lsls	r4, r4, #24
    fb2a:	3b01      	subs	r3, #1
    fb2c:	5cf3      	ldrb	r3, [r6, r3]
    fb2e:	041b      	lsls	r3, r3, #16
    fb30:	431c      	orrs	r4, r3
    fb32:	23fb      	movs	r3, #251	; 0xfb
    fb34:	005b      	lsls	r3, r3, #1
    fb36:	5cf3      	ldrb	r3, [r6, r3]
    fb38:	431c      	orrs	r4, r3
    fb3a:	23f8      	movs	r3, #248	; 0xf8
    fb3c:	33ff      	adds	r3, #255	; 0xff
    fb3e:	5cf2      	ldrb	r2, [r6, r3]
    fb40:	0212      	lsls	r2, r2, #8
    fb42:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    fb44:	0021      	movs	r1, r4
    fb46:	0030      	movs	r0, r6
    fb48:	4b56      	ldr	r3, [pc, #344]	; (fca4 <chk_mounted+0x35c>)
    fb4a:	4798      	blx	r3
    fb4c:	0003      	movs	r3, r0
    fb4e:	e746      	b.n	f9de <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    fb50:	2103      	movs	r1, #3
    fb52:	4359      	muls	r1, r3
    fb54:	0849      	lsrs	r1, r1, #1
    fb56:	2001      	movs	r0, #1
    fb58:	4003      	ands	r3, r0
    fb5a:	18cb      	adds	r3, r1, r3
    fb5c:	e7cc      	b.n	faf8 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    fb5e:	200c      	movs	r0, #12
    fb60:	e707      	b.n	f972 <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    fb62:	2000      	movs	r0, #0
    fb64:	e705      	b.n	f972 <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    fb66:	2001      	movs	r0, #1
    fb68:	e703      	b.n	f972 <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    fb6a:	3302      	adds	r3, #2
    fb6c:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    fb6e:	19e7      	adds	r7, r4, r7
    fb70:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    fb72:	4652      	mov	r2, sl
    fb74:	18a2      	adds	r2, r4, r2
    fb76:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    fb78:	200d      	movs	r0, #13
    fb7a:	4642      	mov	r2, r8
    fb7c:	2a00      	cmp	r2, #0
    fb7e:	d000      	beq.n	fb82 <chk_mounted+0x23a>
    fb80:	e6f7      	b.n	f972 <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    fb82:	225f      	movs	r2, #95	; 0x5f
    fb84:	5cb2      	ldrb	r2, [r6, r2]
    fb86:	0612      	lsls	r2, r2, #24
    fb88:	215e      	movs	r1, #94	; 0x5e
    fb8a:	5c71      	ldrb	r1, [r6, r1]
    fb8c:	0409      	lsls	r1, r1, #16
    fb8e:	430a      	orrs	r2, r1
    fb90:	215c      	movs	r1, #92	; 0x5c
    fb92:	5c71      	ldrb	r1, [r6, r1]
    fb94:	430a      	orrs	r2, r1
    fb96:	215d      	movs	r1, #93	; 0x5d
    fb98:	5c71      	ldrb	r1, [r6, r1]
    fb9a:	0209      	lsls	r1, r1, #8
    fb9c:	430a      	orrs	r2, r1
    fb9e:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    fba0:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    fba2:	4a44      	ldr	r2, [pc, #272]	; (fcb4 <chk_mounted+0x36c>)
    fba4:	4694      	mov	ip, r2
    fba6:	4463      	add	r3, ip
    fba8:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    fbaa:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    fbac:	429d      	cmp	r5, r3
    fbae:	d200      	bcs.n	fbb2 <chk_mounted+0x26a>
    fbb0:	e6df      	b.n	f972 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    fbb2:	2301      	movs	r3, #1
    fbb4:	425b      	negs	r3, r3
    fbb6:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    fbb8:	2300      	movs	r3, #0
    fbba:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    fbbc:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    fbbe:	3361      	adds	r3, #97	; 0x61
    fbc0:	5cf3      	ldrb	r3, [r6, r3]
    fbc2:	021b      	lsls	r3, r3, #8
    fbc4:	2260      	movs	r2, #96	; 0x60
    fbc6:	5cb2      	ldrb	r2, [r6, r2]
    fbc8:	431a      	orrs	r2, r3
    fbca:	1912      	adds	r2, r2, r4
    fbcc:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    fbce:	0031      	movs	r1, r6
    fbd0:	3130      	adds	r1, #48	; 0x30
    fbd2:	7870      	ldrb	r0, [r6, #1]
    fbd4:	2301      	movs	r3, #1
    fbd6:	4c38      	ldr	r4, [pc, #224]	; (fcb8 <chk_mounted+0x370>)
    fbd8:	47a0      	blx	r4
    fbda:	2203      	movs	r2, #3
    fbdc:	2800      	cmp	r0, #0
    fbde:	d150      	bne.n	fc82 <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    fbe0:	4b36      	ldr	r3, [pc, #216]	; (fcbc <chk_mounted+0x374>)
    fbe2:	5cf2      	ldrb	r2, [r6, r3]
    fbe4:	0212      	lsls	r2, r2, #8
    fbe6:	4b36      	ldr	r3, [pc, #216]	; (fcc0 <chk_mounted+0x378>)
    fbe8:	5cf3      	ldrb	r3, [r6, r3]
    fbea:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    fbec:	4935      	ldr	r1, [pc, #212]	; (fcc4 <chk_mounted+0x37c>)
    fbee:	b21b      	sxth	r3, r3
    fbf0:	2203      	movs	r2, #3
    fbf2:	428b      	cmp	r3, r1
    fbf4:	d145      	bne.n	fc82 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    fbf6:	2333      	movs	r3, #51	; 0x33
    fbf8:	5cf3      	ldrb	r3, [r6, r3]
    fbfa:	061b      	lsls	r3, r3, #24
    fbfc:	322f      	adds	r2, #47	; 0x2f
    fbfe:	5cb2      	ldrb	r2, [r6, r2]
    fc00:	0412      	lsls	r2, r2, #16
    fc02:	4313      	orrs	r3, r2
    fc04:	2230      	movs	r2, #48	; 0x30
    fc06:	5cb2      	ldrb	r2, [r6, r2]
    fc08:	4313      	orrs	r3, r2
    fc0a:	2231      	movs	r2, #49	; 0x31
    fc0c:	5cb2      	ldrb	r2, [r6, r2]
    fc0e:	0212      	lsls	r2, r2, #8
    fc10:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    fc12:	492d      	ldr	r1, [pc, #180]	; (fcc8 <chk_mounted+0x380>)
    fc14:	2203      	movs	r2, #3
    fc16:	428b      	cmp	r3, r1
    fc18:	d133      	bne.n	fc82 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    fc1a:	4b2c      	ldr	r3, [pc, #176]	; (fccc <chk_mounted+0x384>)
    fc1c:	5cf3      	ldrb	r3, [r6, r3]
    fc1e:	061b      	lsls	r3, r3, #24
    fc20:	4a2b      	ldr	r2, [pc, #172]	; (fcd0 <chk_mounted+0x388>)
    fc22:	5cb2      	ldrb	r2, [r6, r2]
    fc24:	0412      	lsls	r2, r2, #16
    fc26:	4313      	orrs	r3, r2
    fc28:	2285      	movs	r2, #133	; 0x85
    fc2a:	0092      	lsls	r2, r2, #2
    fc2c:	5cb2      	ldrb	r2, [r6, r2]
    fc2e:	4313      	orrs	r3, r2
    fc30:	4a28      	ldr	r2, [pc, #160]	; (fcd4 <chk_mounted+0x38c>)
    fc32:	5cb2      	ldrb	r2, [r6, r2]
    fc34:	0212      	lsls	r2, r2, #8
    fc36:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    fc38:	4927      	ldr	r1, [pc, #156]	; (fcd8 <chk_mounted+0x390>)
    fc3a:	2203      	movs	r2, #3
    fc3c:	428b      	cmp	r3, r1
    fc3e:	d120      	bne.n	fc82 <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    fc40:	4b26      	ldr	r3, [pc, #152]	; (fcdc <chk_mounted+0x394>)
    fc42:	5cf3      	ldrb	r3, [r6, r3]
    fc44:	061b      	lsls	r3, r3, #24
    fc46:	4a26      	ldr	r2, [pc, #152]	; (fce0 <chk_mounted+0x398>)
    fc48:	5cb2      	ldrb	r2, [r6, r2]
    fc4a:	0412      	lsls	r2, r2, #16
    fc4c:	4313      	orrs	r3, r2
    fc4e:	2287      	movs	r2, #135	; 0x87
    fc50:	0092      	lsls	r2, r2, #2
    fc52:	5cb2      	ldrb	r2, [r6, r2]
    fc54:	4313      	orrs	r3, r2
    fc56:	4a23      	ldr	r2, [pc, #140]	; (fce4 <chk_mounted+0x39c>)
    fc58:	5cb2      	ldrb	r2, [r6, r2]
    fc5a:	0212      	lsls	r2, r2, #8
    fc5c:	4313      	orrs	r3, r2
    fc5e:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    fc60:	4b21      	ldr	r3, [pc, #132]	; (fce8 <chk_mounted+0x3a0>)
    fc62:	5cf3      	ldrb	r3, [r6, r3]
    fc64:	061b      	lsls	r3, r3, #24
    fc66:	4a21      	ldr	r2, [pc, #132]	; (fcec <chk_mounted+0x3a4>)
    fc68:	5cb2      	ldrb	r2, [r6, r2]
    fc6a:	0412      	lsls	r2, r2, #16
    fc6c:	4313      	orrs	r3, r2
    fc6e:	2286      	movs	r2, #134	; 0x86
    fc70:	0092      	lsls	r2, r2, #2
    fc72:	5cb2      	ldrb	r2, [r6, r2]
    fc74:	4313      	orrs	r3, r2
    fc76:	4a1e      	ldr	r2, [pc, #120]	; (fcf0 <chk_mounted+0x3a8>)
    fc78:	5cb2      	ldrb	r2, [r6, r2]
    fc7a:	0212      	lsls	r2, r2, #8
    fc7c:	4313      	orrs	r3, r2
    fc7e:	6133      	str	r3, [r6, #16]
    fc80:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    fc82:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    fc84:	4a1b      	ldr	r2, [pc, #108]	; (fcf4 <chk_mounted+0x3ac>)
    fc86:	8813      	ldrh	r3, [r2, #0]
    fc88:	3301      	adds	r3, #1
    fc8a:	b29b      	uxth	r3, r3
    fc8c:	8013      	strh	r3, [r2, #0]
    fc8e:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    fc90:	2000      	movs	r0, #0
    fc92:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    fc94:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    fc96:	e66c      	b.n	f972 <chk_mounted+0x2a>
    fc98:	20004178 	.word	0x20004178
    fc9c:	0000f639 	.word	0x0000f639
    fca0:	0000f59d 	.word	0x0000f59d
    fca4:	0000f8a5 	.word	0x0000f8a5
    fca8:	00015815 	.word	0x00015815
    fcac:	00000ff5 	.word	0x00000ff5
    fcb0:	0000fff5 	.word	0x0000fff5
    fcb4:	000001ff 	.word	0x000001ff
    fcb8:	0000f655 	.word	0x0000f655
    fcbc:	0000022f 	.word	0x0000022f
    fcc0:	0000022e 	.word	0x0000022e
    fcc4:	ffffaa55 	.word	0xffffaa55
    fcc8:	41615252 	.word	0x41615252
    fccc:	00000217 	.word	0x00000217
    fcd0:	00000216 	.word	0x00000216
    fcd4:	00000215 	.word	0x00000215
    fcd8:	61417272 	.word	0x61417272
    fcdc:	0000021f 	.word	0x0000021f
    fce0:	0000021e 	.word	0x0000021e
    fce4:	0000021d 	.word	0x0000021d
    fce8:	0000021b 	.word	0x0000021b
    fcec:	0000021a 	.word	0x0000021a
    fcf0:	00000219 	.word	0x00000219
    fcf4:	20004198 	.word	0x20004198

0000fcf8 <move_window>:
{
    fcf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    fcfa:	46ce      	mov	lr, r9
    fcfc:	b500      	push	{lr}
    fcfe:	b082      	sub	sp, #8
    fd00:	0004      	movs	r4, r0
    fd02:	000f      	movs	r7, r1
	wsect = fs->winsect;
    fd04:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    fd06:	428d      	cmp	r5, r1
    fd08:	d03f      	beq.n	fd8a <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    fd0a:	7903      	ldrb	r3, [r0, #4]
    fd0c:	2b00      	cmp	r3, #0
    fd0e:	d107      	bne.n	fd20 <move_window+0x28>
	return FR_OK;
    fd10:	2300      	movs	r3, #0
		if (sector) {
    fd12:	2f00      	cmp	r7, #0
    fd14:	d12c      	bne.n	fd70 <move_window+0x78>
}
    fd16:	0018      	movs	r0, r3
    fd18:	b002      	add	sp, #8
    fd1a:	bc04      	pop	{r2}
    fd1c:	4691      	mov	r9, r2
    fd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    fd20:	2330      	movs	r3, #48	; 0x30
    fd22:	469c      	mov	ip, r3
    fd24:	4484      	add	ip, r0
    fd26:	4663      	mov	r3, ip
    fd28:	4661      	mov	r1, ip
    fd2a:	9301      	str	r3, [sp, #4]
    fd2c:	7840      	ldrb	r0, [r0, #1]
    fd2e:	2301      	movs	r3, #1
    fd30:	002a      	movs	r2, r5
    fd32:	4e17      	ldr	r6, [pc, #92]	; (fd90 <move_window+0x98>)
    fd34:	47b0      	blx	r6
				return FR_DISK_ERR;
    fd36:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    fd38:	2800      	cmp	r0, #0
    fd3a:	d1ec      	bne.n	fd16 <move_window+0x1e>
			fs->wflag = 0;
    fd3c:	2300      	movs	r3, #0
    fd3e:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    fd40:	6a23      	ldr	r3, [r4, #32]
    fd42:	69e2      	ldr	r2, [r4, #28]
    fd44:	4694      	mov	ip, r2
    fd46:	4463      	add	r3, ip
    fd48:	429d      	cmp	r5, r3
    fd4a:	d2e1      	bcs.n	fd10 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    fd4c:	78e6      	ldrb	r6, [r4, #3]
    fd4e:	2e01      	cmp	r6, #1
    fd50:	d9de      	bls.n	fd10 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    fd52:	4b0f      	ldr	r3, [pc, #60]	; (fd90 <move_window+0x98>)
    fd54:	4699      	mov	r9, r3
					wsect += fs->fsize;
    fd56:	69e3      	ldr	r3, [r4, #28]
    fd58:	469c      	mov	ip, r3
    fd5a:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    fd5c:	7860      	ldrb	r0, [r4, #1]
    fd5e:	2301      	movs	r3, #1
    fd60:	002a      	movs	r2, r5
    fd62:	9901      	ldr	r1, [sp, #4]
    fd64:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    fd66:	3e01      	subs	r6, #1
    fd68:	b2f6      	uxtb	r6, r6
    fd6a:	2e01      	cmp	r6, #1
    fd6c:	d1f3      	bne.n	fd56 <move_window+0x5e>
    fd6e:	e7cf      	b.n	fd10 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    fd70:	0021      	movs	r1, r4
    fd72:	3130      	adds	r1, #48	; 0x30
    fd74:	7860      	ldrb	r0, [r4, #1]
    fd76:	3301      	adds	r3, #1
    fd78:	003a      	movs	r2, r7
    fd7a:	4d06      	ldr	r5, [pc, #24]	; (fd94 <move_window+0x9c>)
    fd7c:	47a8      	blx	r5
				return FR_DISK_ERR;
    fd7e:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    fd80:	2800      	cmp	r0, #0
    fd82:	d1c8      	bne.n	fd16 <move_window+0x1e>
			fs->winsect = sector;
    fd84:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    fd86:	2300      	movs	r3, #0
    fd88:	e7c5      	b.n	fd16 <move_window+0x1e>
    fd8a:	2300      	movs	r3, #0
    fd8c:	e7c3      	b.n	fd16 <move_window+0x1e>
    fd8e:	46c0      	nop			; (mov r8, r8)
    fd90:	0000f6d9 	.word	0x0000f6d9
    fd94:	0000f655 	.word	0x0000f655

0000fd98 <get_fat>:
{
    fd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd9a:	0005      	movs	r5, r0
    fd9c:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    fd9e:	2901      	cmp	r1, #1
    fda0:	d974      	bls.n	fe8c <get_fat+0xf4>
		return 1;
    fda2:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    fda4:	69ab      	ldr	r3, [r5, #24]
    fda6:	4299      	cmp	r1, r3
    fda8:	d271      	bcs.n	fe8e <get_fat+0xf6>
	switch (fs->fs_type) {
    fdaa:	782b      	ldrb	r3, [r5, #0]
    fdac:	2b02      	cmp	r3, #2
    fdae:	d034      	beq.n	fe1a <get_fat+0x82>
    fdb0:	2b03      	cmp	r3, #3
    fdb2:	d049      	beq.n	fe48 <get_fat+0xb0>
    fdb4:	2b01      	cmp	r3, #1
    fdb6:	d002      	beq.n	fdbe <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    fdb8:	2001      	movs	r0, #1
    fdba:	4240      	negs	r0, r0
    fdbc:	e067      	b.n	fe8e <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    fdbe:	084e      	lsrs	r6, r1, #1
    fdc0:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    fdc2:	0a71      	lsrs	r1, r6, #9
    fdc4:	6a2b      	ldr	r3, [r5, #32]
    fdc6:	469c      	mov	ip, r3
    fdc8:	4461      	add	r1, ip
    fdca:	0028      	movs	r0, r5
    fdcc:	4b30      	ldr	r3, [pc, #192]	; (fe90 <get_fat+0xf8>)
    fdce:	4798      	blx	r3
    fdd0:	2800      	cmp	r0, #0
    fdd2:	d002      	beq.n	fdda <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    fdd4:	2001      	movs	r0, #1
    fdd6:	4240      	negs	r0, r0
    fdd8:	e059      	b.n	fe8e <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    fdda:	05f3      	lsls	r3, r6, #23
    fddc:	0ddb      	lsrs	r3, r3, #23
    fdde:	18eb      	adds	r3, r5, r3
    fde0:	3330      	adds	r3, #48	; 0x30
    fde2:	781f      	ldrb	r7, [r3, #0]
    fde4:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    fde6:	0a71      	lsrs	r1, r6, #9
    fde8:	6a2b      	ldr	r3, [r5, #32]
    fdea:	469c      	mov	ip, r3
    fdec:	4461      	add	r1, ip
    fdee:	0028      	movs	r0, r5
    fdf0:	4b27      	ldr	r3, [pc, #156]	; (fe90 <get_fat+0xf8>)
    fdf2:	4798      	blx	r3
    fdf4:	2800      	cmp	r0, #0
    fdf6:	d002      	beq.n	fdfe <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    fdf8:	2001      	movs	r0, #1
    fdfa:	4240      	negs	r0, r0
    fdfc:	e047      	b.n	fe8e <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    fdfe:	05f6      	lsls	r6, r6, #23
    fe00:	0df6      	lsrs	r6, r6, #23
    fe02:	19ad      	adds	r5, r5, r6
    fe04:	3530      	adds	r5, #48	; 0x30
    fe06:	7828      	ldrb	r0, [r5, #0]
    fe08:	0200      	lsls	r0, r0, #8
    fe0a:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    fe0c:	07e3      	lsls	r3, r4, #31
    fe0e:	d501      	bpl.n	fe14 <get_fat+0x7c>
    fe10:	0900      	lsrs	r0, r0, #4
    fe12:	e03c      	b.n	fe8e <get_fat+0xf6>
    fe14:	0500      	lsls	r0, r0, #20
    fe16:	0d00      	lsrs	r0, r0, #20
    fe18:	e039      	b.n	fe8e <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    fe1a:	0a09      	lsrs	r1, r1, #8
    fe1c:	6a2b      	ldr	r3, [r5, #32]
    fe1e:	469c      	mov	ip, r3
    fe20:	4461      	add	r1, ip
    fe22:	0028      	movs	r0, r5
    fe24:	4b1a      	ldr	r3, [pc, #104]	; (fe90 <get_fat+0xf8>)
    fe26:	4798      	blx	r3
    fe28:	2800      	cmp	r0, #0
    fe2a:	d002      	beq.n	fe32 <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    fe2c:	2001      	movs	r0, #1
    fe2e:	4240      	negs	r0, r0
    fe30:	e02d      	b.n	fe8e <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    fe32:	0064      	lsls	r4, r4, #1
    fe34:	23ff      	movs	r3, #255	; 0xff
    fe36:	005b      	lsls	r3, r3, #1
    fe38:	401c      	ands	r4, r3
		return LD_WORD(p);
    fe3a:	192d      	adds	r5, r5, r4
    fe3c:	3530      	adds	r5, #48	; 0x30
    fe3e:	786b      	ldrb	r3, [r5, #1]
    fe40:	021b      	lsls	r3, r3, #8
    fe42:	7828      	ldrb	r0, [r5, #0]
    fe44:	4318      	orrs	r0, r3
    fe46:	e022      	b.n	fe8e <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    fe48:	09c9      	lsrs	r1, r1, #7
    fe4a:	6a2b      	ldr	r3, [r5, #32]
    fe4c:	469c      	mov	ip, r3
    fe4e:	4461      	add	r1, ip
    fe50:	0028      	movs	r0, r5
    fe52:	4b0f      	ldr	r3, [pc, #60]	; (fe90 <get_fat+0xf8>)
    fe54:	4798      	blx	r3
    fe56:	2800      	cmp	r0, #0
    fe58:	d002      	beq.n	fe60 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    fe5a:	2001      	movs	r0, #1
    fe5c:	4240      	negs	r0, r0
    fe5e:	e016      	b.n	fe8e <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    fe60:	00a4      	lsls	r4, r4, #2
    fe62:	23fe      	movs	r3, #254	; 0xfe
    fe64:	005b      	lsls	r3, r3, #1
    fe66:	401c      	ands	r4, r3
    fe68:	0023      	movs	r3, r4
    fe6a:	3330      	adds	r3, #48	; 0x30
    fe6c:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    fe6e:	78d8      	ldrb	r0, [r3, #3]
    fe70:	0600      	lsls	r0, r0, #24
    fe72:	789a      	ldrb	r2, [r3, #2]
    fe74:	0412      	lsls	r2, r2, #16
    fe76:	4310      	orrs	r0, r2
    fe78:	192c      	adds	r4, r5, r4
    fe7a:	3430      	adds	r4, #48	; 0x30
    fe7c:	7822      	ldrb	r2, [r4, #0]
    fe7e:	4310      	orrs	r0, r2
    fe80:	785b      	ldrb	r3, [r3, #1]
    fe82:	021b      	lsls	r3, r3, #8
    fe84:	4318      	orrs	r0, r3
    fe86:	0100      	lsls	r0, r0, #4
    fe88:	0900      	lsrs	r0, r0, #4
    fe8a:	e000      	b.n	fe8e <get_fat+0xf6>
		return 1;
    fe8c:	2001      	movs	r0, #1
}
    fe8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe90:	0000fcf9 	.word	0x0000fcf9

0000fe94 <dir_sdi>:
{
    fe94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe96:	0004      	movs	r4, r0
    fe98:	000d      	movs	r5, r1
	dj->index = idx;
    fe9a:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    fe9c:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    fe9e:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    fea0:	2901      	cmp	r1, #1
    fea2:	d003      	beq.n	feac <dir_sdi+0x18>
    fea4:	6823      	ldr	r3, [r4, #0]
    fea6:	699a      	ldr	r2, [r3, #24]
    fea8:	4291      	cmp	r1, r2
    feaa:	d300      	bcc.n	feae <dir_sdi+0x1a>
}
    feac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    feae:	2900      	cmp	r1, #0
    feb0:	d119      	bne.n	fee6 <dir_sdi+0x52>
    feb2:	781a      	ldrb	r2, [r3, #0]
    feb4:	2a03      	cmp	r2, #3
    feb6:	d013      	beq.n	fee0 <dir_sdi+0x4c>
		dj->clust = clst;
    feb8:	2200      	movs	r2, #0
    feba:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    febc:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    febe:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    fec0:	42aa      	cmp	r2, r5
    fec2:	d9f3      	bls.n	feac <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    fec4:	092a      	lsrs	r2, r5, #4
    fec6:	b292      	uxth	r2, r2
    fec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    feca:	189b      	adds	r3, r3, r2
    fecc:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    fece:	6823      	ldr	r3, [r4, #0]
    fed0:	3330      	adds	r3, #48	; 0x30
    fed2:	220f      	movs	r2, #15
    fed4:	4015      	ands	r5, r2
    fed6:	016d      	lsls	r5, r5, #5
    fed8:	195d      	adds	r5, r3, r5
    feda:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    fedc:	2000      	movs	r0, #0
    fede:	e7e5      	b.n	feac <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    fee0:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    fee2:	2900      	cmp	r1, #0
    fee4:	d0e8      	beq.n	feb8 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    fee6:	789e      	ldrb	r6, [r3, #2]
    fee8:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    feea:	42b5      	cmp	r5, r6
    feec:	d313      	bcc.n	ff16 <dir_sdi+0x82>
    feee:	1bad      	subs	r5, r5, r6
    fef0:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    fef2:	4f10      	ldr	r7, [pc, #64]	; (ff34 <dir_sdi+0xa0>)
    fef4:	e000      	b.n	fef8 <dir_sdi+0x64>
    fef6:	001d      	movs	r5, r3
    fef8:	6820      	ldr	r0, [r4, #0]
    fefa:	47b8      	blx	r7
    fefc:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    fefe:	1c43      	adds	r3, r0, #1
    ff00:	d012      	beq.n	ff28 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    ff02:	2801      	cmp	r0, #1
    ff04:	d912      	bls.n	ff2c <dir_sdi+0x98>
    ff06:	6823      	ldr	r3, [r4, #0]
    ff08:	699b      	ldr	r3, [r3, #24]
    ff0a:	4298      	cmp	r0, r3
    ff0c:	d210      	bcs.n	ff30 <dir_sdi+0x9c>
    ff0e:	1bab      	subs	r3, r5, r6
    ff10:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    ff12:	42b5      	cmp	r5, r6
    ff14:	d2ef      	bcs.n	fef6 <dir_sdi+0x62>
		dj->clust = clst;
    ff16:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    ff18:	6820      	ldr	r0, [r4, #0]
    ff1a:	4b07      	ldr	r3, [pc, #28]	; (ff38 <dir_sdi+0xa4>)
    ff1c:	4798      	blx	r3
    ff1e:	092b      	lsrs	r3, r5, #4
    ff20:	b29b      	uxth	r3, r3
    ff22:	1818      	adds	r0, r3, r0
    ff24:	6120      	str	r0, [r4, #16]
    ff26:	e7d2      	b.n	fece <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    ff28:	2001      	movs	r0, #1
    ff2a:	e7bf      	b.n	feac <dir_sdi+0x18>
				return FR_INT_ERR;
    ff2c:	2002      	movs	r0, #2
    ff2e:	e7bd      	b.n	feac <dir_sdi+0x18>
    ff30:	2002      	movs	r0, #2
    ff32:	e7bb      	b.n	feac <dir_sdi+0x18>
    ff34:	0000fd99 	.word	0x0000fd99
    ff38:	0000f83f 	.word	0x0000f83f

0000ff3c <put_fat>:
{
    ff3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff3e:	46c6      	mov	lr, r8
    ff40:	b500      	push	{lr}
    ff42:	0007      	movs	r7, r0
    ff44:	000c      	movs	r4, r1
    ff46:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    ff48:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    ff4a:	2901      	cmp	r1, #1
    ff4c:	d902      	bls.n	ff54 <put_fat+0x18>
    ff4e:	6983      	ldr	r3, [r0, #24]
    ff50:	4299      	cmp	r1, r3
    ff52:	d303      	bcc.n	ff5c <put_fat+0x20>
}
    ff54:	0028      	movs	r0, r5
    ff56:	bc04      	pop	{r2}
    ff58:	4690      	mov	r8, r2
    ff5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    ff5c:	7803      	ldrb	r3, [r0, #0]
    ff5e:	2b02      	cmp	r3, #2
    ff60:	d053      	beq.n	1000a <put_fat+0xce>
    ff62:	2b03      	cmp	r3, #3
    ff64:	d063      	beq.n	1002e <put_fat+0xf2>
			res = FR_INT_ERR;
    ff66:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    ff68:	2b01      	cmp	r3, #1
    ff6a:	d002      	beq.n	ff72 <put_fat+0x36>
		fs->wflag = 1;
    ff6c:	2301      	movs	r3, #1
    ff6e:	713b      	strb	r3, [r7, #4]
    ff70:	e7f0      	b.n	ff54 <put_fat+0x18>
			bc = clst; bc += bc / 2;
    ff72:	084b      	lsrs	r3, r1, #1
    ff74:	4698      	mov	r8, r3
    ff76:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    ff78:	4643      	mov	r3, r8
    ff7a:	0a59      	lsrs	r1, r3, #9
    ff7c:	6a03      	ldr	r3, [r0, #32]
    ff7e:	469c      	mov	ip, r3
    ff80:	4461      	add	r1, ip
    ff82:	4b3b      	ldr	r3, [pc, #236]	; (10070 <put_fat+0x134>)
    ff84:	4798      	blx	r3
    ff86:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    ff88:	d1f0      	bne.n	ff6c <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    ff8a:	4643      	mov	r3, r8
    ff8c:	05db      	lsls	r3, r3, #23
    ff8e:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    ff90:	07e2      	lsls	r2, r4, #31
    ff92:	d51f      	bpl.n	ffd4 <put_fat+0x98>
    ff94:	18fb      	adds	r3, r7, r3
    ff96:	3330      	adds	r3, #48	; 0x30
    ff98:	7819      	ldrb	r1, [r3, #0]
    ff9a:	220f      	movs	r2, #15
    ff9c:	400a      	ands	r2, r1
    ff9e:	0131      	lsls	r1, r6, #4
    ffa0:	20ff      	movs	r0, #255	; 0xff
    ffa2:	0100      	lsls	r0, r0, #4
    ffa4:	4001      	ands	r1, r0
    ffa6:	430a      	orrs	r2, r1
    ffa8:	701a      	strb	r2, [r3, #0]
			bc++;
    ffaa:	4644      	mov	r4, r8
    ffac:	3401      	adds	r4, #1
			fs->wflag = 1;
    ffae:	2301      	movs	r3, #1
    ffb0:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    ffb2:	0a61      	lsrs	r1, r4, #9
    ffb4:	6a3b      	ldr	r3, [r7, #32]
    ffb6:	469c      	mov	ip, r3
    ffb8:	4461      	add	r1, ip
    ffba:	0038      	movs	r0, r7
    ffbc:	4b2c      	ldr	r3, [pc, #176]	; (10070 <put_fat+0x134>)
    ffbe:	4798      	blx	r3
			if (res != FR_OK) break;
    ffc0:	2800      	cmp	r0, #0
    ffc2:	d151      	bne.n	10068 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    ffc4:	05e4      	lsls	r4, r4, #23
    ffc6:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    ffc8:	0936      	lsrs	r6, r6, #4
    ffca:	b2f6      	uxtb	r6, r6
    ffcc:	193c      	adds	r4, r7, r4
    ffce:	3430      	adds	r4, #48	; 0x30
    ffd0:	7026      	strb	r6, [r4, #0]
			break;
    ffd2:	e7cb      	b.n	ff6c <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    ffd4:	18fb      	adds	r3, r7, r3
    ffd6:	3330      	adds	r3, #48	; 0x30
    ffd8:	701e      	strb	r6, [r3, #0]
			bc++;
    ffda:	4644      	mov	r4, r8
    ffdc:	3401      	adds	r4, #1
			fs->wflag = 1;
    ffde:	2301      	movs	r3, #1
    ffe0:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    ffe2:	0a61      	lsrs	r1, r4, #9
    ffe4:	6a3b      	ldr	r3, [r7, #32]
    ffe6:	469c      	mov	ip, r3
    ffe8:	4461      	add	r1, ip
    ffea:	0038      	movs	r0, r7
    ffec:	4b20      	ldr	r3, [pc, #128]	; (10070 <put_fat+0x134>)
    ffee:	4798      	blx	r3
			if (res != FR_OK) break;
    fff0:	2800      	cmp	r0, #0
    fff2:	d13b      	bne.n	1006c <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    fff4:	05e4      	lsls	r4, r4, #23
    fff6:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    fff8:	193b      	adds	r3, r7, r4
    fffa:	3330      	adds	r3, #48	; 0x30
    fffc:	781b      	ldrb	r3, [r3, #0]
    fffe:	220f      	movs	r2, #15
   10000:	4393      	bics	r3, r2
   10002:	0536      	lsls	r6, r6, #20
   10004:	0f36      	lsrs	r6, r6, #28
   10006:	431e      	orrs	r6, r3
   10008:	e7e0      	b.n	ffcc <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   1000a:	0a09      	lsrs	r1, r1, #8
   1000c:	6a03      	ldr	r3, [r0, #32]
   1000e:	469c      	mov	ip, r3
   10010:	4461      	add	r1, ip
   10012:	4b17      	ldr	r3, [pc, #92]	; (10070 <put_fat+0x134>)
   10014:	4798      	blx	r3
   10016:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   10018:	d1a8      	bne.n	ff6c <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
   1001a:	0063      	lsls	r3, r4, #1
   1001c:	24ff      	movs	r4, #255	; 0xff
   1001e:	0064      	lsls	r4, r4, #1
   10020:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
   10022:	18fb      	adds	r3, r7, r3
   10024:	3330      	adds	r3, #48	; 0x30
   10026:	701e      	strb	r6, [r3, #0]
   10028:	0a36      	lsrs	r6, r6, #8
   1002a:	705e      	strb	r6, [r3, #1]
			break;
   1002c:	e79e      	b.n	ff6c <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   1002e:	09c9      	lsrs	r1, r1, #7
   10030:	6a03      	ldr	r3, [r0, #32]
   10032:	469c      	mov	ip, r3
   10034:	4461      	add	r1, ip
   10036:	4b0e      	ldr	r3, [pc, #56]	; (10070 <put_fat+0x134>)
   10038:	4798      	blx	r3
   1003a:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   1003c:	d196      	bne.n	ff6c <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
   1003e:	00a4      	lsls	r4, r4, #2
   10040:	23fe      	movs	r3, #254	; 0xfe
   10042:	005b      	lsls	r3, r3, #1
   10044:	401c      	ands	r4, r3
   10046:	0022      	movs	r2, r4
   10048:	3230      	adds	r2, #48	; 0x30
   1004a:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
   1004c:	78d3      	ldrb	r3, [r2, #3]
   1004e:	193c      	adds	r4, r7, r4
   10050:	3430      	adds	r4, #48	; 0x30
   10052:	091b      	lsrs	r3, r3, #4
   10054:	071b      	lsls	r3, r3, #28
   10056:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
   10058:	7026      	strb	r6, [r4, #0]
   1005a:	0a33      	lsrs	r3, r6, #8
   1005c:	7053      	strb	r3, [r2, #1]
   1005e:	0c33      	lsrs	r3, r6, #16
   10060:	7093      	strb	r3, [r2, #2]
   10062:	0e36      	lsrs	r6, r6, #24
   10064:	70d6      	strb	r6, [r2, #3]
			break;
   10066:	e781      	b.n	ff6c <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   10068:	0005      	movs	r5, r0
   1006a:	e77f      	b.n	ff6c <put_fat+0x30>
   1006c:	0005      	movs	r5, r0
   1006e:	e77d      	b.n	ff6c <put_fat+0x30>
   10070:	0000fcf9 	.word	0x0000fcf9

00010074 <create_chain>:
{
   10074:	b5f0      	push	{r4, r5, r6, r7, lr}
   10076:	46c6      	mov	lr, r8
   10078:	b500      	push	{lr}
   1007a:	0005      	movs	r5, r0
   1007c:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
   1007e:	2900      	cmp	r1, #0
   10080:	d107      	bne.n	10092 <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
   10082:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   10084:	2e00      	cmp	r6, #0
   10086:	d00d      	beq.n	100a4 <create_chain+0x30>
   10088:	6983      	ldr	r3, [r0, #24]
   1008a:	429e      	cmp	r6, r3
   1008c:	d30b      	bcc.n	100a6 <create_chain+0x32>
   1008e:	2601      	movs	r6, #1
   10090:	e009      	b.n	100a6 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
   10092:	4b26      	ldr	r3, [pc, #152]	; (1012c <create_chain+0xb8>)
   10094:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
   10096:	2801      	cmp	r0, #1
   10098:	d93d      	bls.n	10116 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   1009a:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
   1009c:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   1009e:	4298      	cmp	r0, r3
   100a0:	d201      	bcs.n	100a6 <create_chain+0x32>
   100a2:	e03d      	b.n	10120 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
   100a4:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
   100a6:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   100a8:	4f20      	ldr	r7, [pc, #128]	; (1012c <create_chain+0xb8>)
   100aa:	e00a      	b.n	100c2 <create_chain+0x4e>
   100ac:	0021      	movs	r1, r4
   100ae:	0028      	movs	r0, r5
   100b0:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
   100b2:	2800      	cmp	r0, #0
   100b4:	d00d      	beq.n	100d2 <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   100b6:	1c43      	adds	r3, r0, #1
   100b8:	d032      	beq.n	10120 <create_chain+0xac>
   100ba:	2801      	cmp	r0, #1
   100bc:	d030      	beq.n	10120 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   100be:	42b4      	cmp	r4, r6
   100c0:	d02d      	beq.n	1011e <create_chain+0xaa>
		ncl++;							/* Next cluster */
   100c2:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   100c4:	69ab      	ldr	r3, [r5, #24]
   100c6:	429c      	cmp	r4, r3
   100c8:	d3f0      	bcc.n	100ac <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
   100ca:	2e01      	cmp	r6, #1
   100cc:	d925      	bls.n	1011a <create_chain+0xa6>
			ncl = 2;
   100ce:	2402      	movs	r4, #2
   100d0:	e7ec      	b.n	100ac <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   100d2:	4a17      	ldr	r2, [pc, #92]	; (10130 <create_chain+0xbc>)
   100d4:	0021      	movs	r1, r4
   100d6:	0028      	movs	r0, r5
   100d8:	4b16      	ldr	r3, [pc, #88]	; (10134 <create_chain+0xc0>)
   100da:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
   100dc:	2800      	cmp	r0, #0
   100de:	d113      	bne.n	10108 <create_chain+0x94>
   100e0:	4643      	mov	r3, r8
   100e2:	2b00      	cmp	r3, #0
   100e4:	d109      	bne.n	100fa <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
   100e6:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   100e8:	692b      	ldr	r3, [r5, #16]
   100ea:	1c5a      	adds	r2, r3, #1
   100ec:	d01b      	beq.n	10126 <create_chain+0xb2>
			fs->free_clust--;
   100ee:	3b01      	subs	r3, #1
   100f0:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
   100f2:	2301      	movs	r3, #1
   100f4:	716b      	strb	r3, [r5, #5]
   100f6:	0020      	movs	r0, r4
   100f8:	e012      	b.n	10120 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   100fa:	0022      	movs	r2, r4
   100fc:	4641      	mov	r1, r8
   100fe:	0028      	movs	r0, r5
   10100:	4b0c      	ldr	r3, [pc, #48]	; (10134 <create_chain+0xc0>)
   10102:	4798      	blx	r3
	if (res == FR_OK) {
   10104:	2800      	cmp	r0, #0
   10106:	d0ee      	beq.n	100e6 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   10108:	3801      	subs	r0, #1
   1010a:	4242      	negs	r2, r0
   1010c:	4142      	adcs	r2, r0
   1010e:	4250      	negs	r0, r2
   10110:	2301      	movs	r3, #1
   10112:	4318      	orrs	r0, r3
   10114:	e004      	b.n	10120 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
   10116:	2001      	movs	r0, #1
   10118:	e002      	b.n	10120 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
   1011a:	2000      	movs	r0, #0
   1011c:	e000      	b.n	10120 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   1011e:	2000      	movs	r0, #0
}
   10120:	bc04      	pop	{r2}
   10122:	4690      	mov	r8, r2
   10124:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10126:	0020      	movs	r0, r4
   10128:	e7fa      	b.n	10120 <create_chain+0xac>
   1012a:	46c0      	nop			; (mov r8, r8)
   1012c:	0000fd99 	.word	0x0000fd99
   10130:	0fffffff 	.word	0x0fffffff
   10134:	0000ff3d 	.word	0x0000ff3d

00010138 <remove_chain>:
{
   10138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1013a:	46ce      	mov	lr, r9
   1013c:	4647      	mov	r7, r8
   1013e:	b580      	push	{r7, lr}
   10140:	0004      	movs	r4, r0
   10142:	000d      	movs	r5, r1
		res = FR_INT_ERR;
   10144:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   10146:	2901      	cmp	r1, #1
   10148:	d902      	bls.n	10150 <remove_chain+0x18>
   1014a:	69a3      	ldr	r3, [r4, #24]
   1014c:	4299      	cmp	r1, r3
   1014e:	d303      	bcc.n	10158 <remove_chain+0x20>
}
   10150:	bc0c      	pop	{r2, r3}
   10152:	4690      	mov	r8, r2
   10154:	4699      	mov	r9, r3
   10156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
   10158:	4f13      	ldr	r7, [pc, #76]	; (101a8 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   1015a:	4b14      	ldr	r3, [pc, #80]	; (101ac <remove_chain+0x74>)
   1015c:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
   1015e:	2301      	movs	r3, #1
   10160:	4699      	mov	r9, r3
   10162:	e003      	b.n	1016c <remove_chain+0x34>
   10164:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
   10166:	69a3      	ldr	r3, [r4, #24]
   10168:	42b3      	cmp	r3, r6
   1016a:	d9f1      	bls.n	10150 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   1016c:	0029      	movs	r1, r5
   1016e:	0020      	movs	r0, r4
   10170:	47b8      	blx	r7
   10172:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
   10174:	d011      	beq.n	1019a <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   10176:	2801      	cmp	r0, #1
   10178:	d011      	beq.n	1019e <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   1017a:	1c43      	adds	r3, r0, #1
   1017c:	d011      	beq.n	101a2 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   1017e:	2200      	movs	r2, #0
   10180:	0029      	movs	r1, r5
   10182:	0020      	movs	r0, r4
   10184:	47c0      	blx	r8
			if (res != FR_OK) break;
   10186:	2800      	cmp	r0, #0
   10188:	d1e2      	bne.n	10150 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   1018a:	6923      	ldr	r3, [r4, #16]
   1018c:	1c5a      	adds	r2, r3, #1
   1018e:	d0e9      	beq.n	10164 <remove_chain+0x2c>
				fs->free_clust++;
   10190:	3301      	adds	r3, #1
   10192:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
   10194:	464b      	mov	r3, r9
   10196:	7163      	strb	r3, [r4, #5]
   10198:	e7e4      	b.n	10164 <remove_chain+0x2c>
   1019a:	2000      	movs	r0, #0
   1019c:	e7d8      	b.n	10150 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   1019e:	2002      	movs	r0, #2
   101a0:	e7d6      	b.n	10150 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   101a2:	2001      	movs	r0, #1
   101a4:	e7d4      	b.n	10150 <remove_chain+0x18>
   101a6:	46c0      	nop			; (mov r8, r8)
   101a8:	0000fd99 	.word	0x0000fd99
   101ac:	0000ff3d 	.word	0x0000ff3d

000101b0 <dir_next>:
{
   101b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   101b2:	46d6      	mov	lr, sl
   101b4:	4647      	mov	r7, r8
   101b6:	b580      	push	{r7, lr}
   101b8:	0006      	movs	r6, r0
   101ba:	000d      	movs	r5, r1
	i = dj->index + 1;
   101bc:	88c4      	ldrh	r4, [r0, #6]
   101be:	3401      	adds	r4, #1
   101c0:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
   101c2:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   101c4:	2c00      	cmp	r4, #0
   101c6:	d103      	bne.n	101d0 <dir_next+0x20>
}
   101c8:	bc0c      	pop	{r2, r3}
   101ca:	4690      	mov	r8, r2
   101cc:	469a      	mov	sl, r3
   101ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   101d0:	6933      	ldr	r3, [r6, #16]
   101d2:	2b00      	cmp	r3, #0
   101d4:	d0f8      	beq.n	101c8 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   101d6:	270f      	movs	r7, #15
   101d8:	4027      	ands	r7, r4
   101da:	d10f      	bne.n	101fc <dir_next+0x4c>
		dj->sect++;					/* Next sector */
   101dc:	3301      	adds	r3, #1
   101de:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
   101e0:	68f1      	ldr	r1, [r6, #12]
   101e2:	2900      	cmp	r1, #0
   101e4:	d104      	bne.n	101f0 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   101e6:	6833      	ldr	r3, [r6, #0]
   101e8:	891b      	ldrh	r3, [r3, #8]
   101ea:	42a3      	cmp	r3, r4
   101ec:	d9ec      	bls.n	101c8 <dir_next+0x18>
   101ee:	e005      	b.n	101fc <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   101f0:	6830      	ldr	r0, [r6, #0]
   101f2:	7883      	ldrb	r3, [r0, #2]
   101f4:	3b01      	subs	r3, #1
   101f6:	0922      	lsrs	r2, r4, #4
   101f8:	421a      	tst	r2, r3
   101fa:	d007      	beq.n	1020c <dir_next+0x5c>
	dj->index = i;
   101fc:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   101fe:	6833      	ldr	r3, [r6, #0]
   10200:	3330      	adds	r3, #48	; 0x30
   10202:	017f      	lsls	r7, r7, #5
   10204:	19df      	adds	r7, r3, r7
   10206:	6177      	str	r7, [r6, #20]
	return FR_OK;
   10208:	2000      	movs	r0, #0
   1020a:	e7dd      	b.n	101c8 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   1020c:	4b2c      	ldr	r3, [pc, #176]	; (102c0 <dir_next+0x110>)
   1020e:	4798      	blx	r3
   10210:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
   10212:	2002      	movs	r0, #2
   10214:	4643      	mov	r3, r8
   10216:	2b01      	cmp	r3, #1
   10218:	d9d6      	bls.n	101c8 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   1021a:	3301      	adds	r3, #1
   1021c:	d04b      	beq.n	102b6 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   1021e:	6833      	ldr	r3, [r6, #0]
   10220:	699a      	ldr	r2, [r3, #24]
   10222:	4590      	cmp	r8, r2
   10224:	d33f      	bcc.n	102a6 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   10226:	3002      	adds	r0, #2
   10228:	2d00      	cmp	r5, #0
   1022a:	d0cd      	beq.n	101c8 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   1022c:	68f1      	ldr	r1, [r6, #12]
   1022e:	0018      	movs	r0, r3
   10230:	4b24      	ldr	r3, [pc, #144]	; (102c4 <dir_next+0x114>)
   10232:	4798      	blx	r3
   10234:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   10236:	2007      	movs	r0, #7
   10238:	4643      	mov	r3, r8
   1023a:	2b00      	cmp	r3, #0
   1023c:	d0c4      	beq.n	101c8 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
   1023e:	3805      	subs	r0, #5
   10240:	2b01      	cmp	r3, #1
   10242:	d0c1      	beq.n	101c8 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   10244:	3801      	subs	r0, #1
   10246:	3301      	adds	r3, #1
   10248:	d0be      	beq.n	101c8 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   1024a:	2100      	movs	r1, #0
   1024c:	6830      	ldr	r0, [r6, #0]
   1024e:	4b1e      	ldr	r3, [pc, #120]	; (102c8 <dir_next+0x118>)
   10250:	4798      	blx	r3
   10252:	0003      	movs	r3, r0
   10254:	2001      	movs	r0, #1
   10256:	2b00      	cmp	r3, #0
   10258:	d1b6      	bne.n	101c8 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   1025a:	6830      	ldr	r0, [r6, #0]
   1025c:	3030      	adds	r0, #48	; 0x30
   1025e:	2280      	movs	r2, #128	; 0x80
   10260:	0092      	lsls	r2, r2, #2
   10262:	2100      	movs	r1, #0
   10264:	4b19      	ldr	r3, [pc, #100]	; (102cc <dir_next+0x11c>)
   10266:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   10268:	6835      	ldr	r5, [r6, #0]
   1026a:	4641      	mov	r1, r8
   1026c:	0028      	movs	r0, r5
   1026e:	4b18      	ldr	r3, [pc, #96]	; (102d0 <dir_next+0x120>)
   10270:	4798      	blx	r3
   10272:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   10274:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
   10276:	2301      	movs	r3, #1
   10278:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   1027a:	6833      	ldr	r3, [r6, #0]
   1027c:	789a      	ldrb	r2, [r3, #2]
   1027e:	42aa      	cmp	r2, r5
   10280:	d90e      	bls.n	102a0 <dir_next+0xf0>
						dj->fs->wflag = 1;
   10282:	4652      	mov	r2, sl
   10284:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   10286:	2100      	movs	r1, #0
   10288:	6830      	ldr	r0, [r6, #0]
   1028a:	4b0f      	ldr	r3, [pc, #60]	; (102c8 <dir_next+0x118>)
   1028c:	4798      	blx	r3
   1028e:	2800      	cmp	r0, #0
   10290:	d113      	bne.n	102ba <dir_next+0x10a>
						dj->fs->winsect++;
   10292:	6832      	ldr	r2, [r6, #0]
   10294:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   10296:	3301      	adds	r3, #1
   10298:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   1029a:	3501      	adds	r5, #1
   1029c:	b2ed      	uxtb	r5, r5
   1029e:	e7ec      	b.n	1027a <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
   102a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   102a2:	1b52      	subs	r2, r2, r5
   102a4:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
   102a6:	4643      	mov	r3, r8
   102a8:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
   102aa:	4641      	mov	r1, r8
   102ac:	6830      	ldr	r0, [r6, #0]
   102ae:	4b08      	ldr	r3, [pc, #32]	; (102d0 <dir_next+0x120>)
   102b0:	4798      	blx	r3
   102b2:	6130      	str	r0, [r6, #16]
   102b4:	e7a2      	b.n	101fc <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   102b6:	2001      	movs	r0, #1
   102b8:	e786      	b.n	101c8 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   102ba:	2001      	movs	r0, #1
   102bc:	e784      	b.n	101c8 <dir_next+0x18>
   102be:	46c0      	nop			; (mov r8, r8)
   102c0:	0000fd99 	.word	0x0000fd99
   102c4:	00010075 	.word	0x00010075
   102c8:	0000fcf9 	.word	0x0000fcf9
   102cc:	0000f82d 	.word	0x0000f82d
   102d0:	0000f83f 	.word	0x0000f83f

000102d4 <dir_find>:
{
   102d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   102d6:	46de      	mov	lr, fp
   102d8:	4657      	mov	r7, sl
   102da:	464e      	mov	r6, r9
   102dc:	4645      	mov	r5, r8
   102de:	b5e0      	push	{r5, r6, r7, lr}
   102e0:	b083      	sub	sp, #12
   102e2:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   102e4:	2100      	movs	r1, #0
   102e6:	4b5a      	ldr	r3, [pc, #360]	; (10450 <dir_find+0x17c>)
   102e8:	4798      	blx	r3
   102ea:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
   102ec:	d000      	beq.n	102f0 <dir_find+0x1c>
   102ee:	e09e      	b.n	1042e <dir_find+0x15a>
   102f0:	23ff      	movs	r3, #255	; 0xff
   102f2:	4699      	mov	r9, r3
   102f4:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
   102f6:	4b57      	ldr	r3, [pc, #348]	; (10454 <dir_find+0x180>)
   102f8:	469b      	mov	fp, r3
   102fa:	e01b      	b.n	10334 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
   102fc:	2b0f      	cmp	r3, #15
   102fe:	d030      	beq.n	10362 <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   10300:	4653      	mov	r3, sl
   10302:	2b00      	cmp	r3, #0
   10304:	d105      	bne.n	10312 <dir_find+0x3e>
   10306:	0020      	movs	r0, r4
   10308:	4b53      	ldr	r3, [pc, #332]	; (10458 <dir_find+0x184>)
   1030a:	4798      	blx	r3
   1030c:	4581      	cmp	r9, r0
   1030e:	d100      	bne.n	10312 <dir_find+0x3e>
   10310:	e08d      	b.n	1042e <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   10312:	2301      	movs	r3, #1
   10314:	425b      	negs	r3, r3
   10316:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   10318:	69a8      	ldr	r0, [r5, #24]
   1031a:	7ac3      	ldrb	r3, [r0, #11]
   1031c:	07db      	lsls	r3, r3, #31
   1031e:	d400      	bmi.n	10322 <dir_find+0x4e>
   10320:	e07d      	b.n	1041e <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   10322:	23ff      	movs	r3, #255	; 0xff
   10324:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
   10326:	2100      	movs	r1, #0
   10328:	0028      	movs	r0, r5
   1032a:	4b4c      	ldr	r3, [pc, #304]	; (1045c <dir_find+0x188>)
   1032c:	4798      	blx	r3
   1032e:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
   10330:	d000      	beq.n	10334 <dir_find+0x60>
   10332:	e07c      	b.n	1042e <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
   10334:	6929      	ldr	r1, [r5, #16]
   10336:	6828      	ldr	r0, [r5, #0]
   10338:	47d8      	blx	fp
   1033a:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
   1033c:	d177      	bne.n	1042e <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   1033e:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
   10340:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   10342:	2e00      	cmp	r6, #0
   10344:	d100      	bne.n	10348 <dir_find+0x74>
   10346:	e080      	b.n	1044a <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
   10348:	7ae2      	ldrb	r2, [r4, #11]
   1034a:	233f      	movs	r3, #63	; 0x3f
   1034c:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   1034e:	2ee5      	cmp	r6, #229	; 0xe5
   10350:	d100      	bne.n	10354 <dir_find+0x80>
   10352:	e077      	b.n	10444 <dir_find+0x170>
   10354:	0712      	lsls	r2, r2, #28
   10356:	d5d1      	bpl.n	102fc <dir_find+0x28>
   10358:	2b0f      	cmp	r3, #15
   1035a:	d002      	beq.n	10362 <dir_find+0x8e>
			ord = 0xFF;
   1035c:	23ff      	movs	r3, #255	; 0xff
   1035e:	469a      	mov	sl, r3
   10360:	e7e1      	b.n	10326 <dir_find+0x52>
				if (dj->lfn) {
   10362:	69ef      	ldr	r7, [r5, #28]
   10364:	2f00      	cmp	r7, #0
   10366:	d0de      	beq.n	10326 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   10368:	0673      	lsls	r3, r6, #25
   1036a:	d518      	bpl.n	1039e <dir_find+0xca>
						sum = dir[LDIR_Chksum];
   1036c:	7b63      	ldrb	r3, [r4, #13]
   1036e:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
   10370:	2340      	movs	r3, #64	; 0x40
   10372:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
   10374:	88eb      	ldrh	r3, [r5, #6]
   10376:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   10378:	7b63      	ldrb	r3, [r4, #13]
   1037a:	9300      	str	r3, [sp, #0]
   1037c:	22ff      	movs	r2, #255	; 0xff
   1037e:	4692      	mov	sl, r2
   10380:	454b      	cmp	r3, r9
   10382:	d1d0      	bne.n	10326 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   10384:	7823      	ldrb	r3, [r4, #0]
   10386:	3abf      	subs	r2, #191	; 0xbf
   10388:	4393      	bics	r3, r2
   1038a:	3b01      	subs	r3, #1
   1038c:	005a      	lsls	r2, r3, #1
   1038e:	18d2      	adds	r2, r2, r3
   10390:	0092      	lsls	r2, r2, #2
   10392:	4692      	mov	sl, r2
   10394:	449a      	add	sl, r3
	s = 0; wc = 1;
   10396:	2201      	movs	r2, #1
   10398:	2300      	movs	r3, #0
   1039a:	4699      	mov	r9, r3
   1039c:	e01d      	b.n	103da <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1039e:	45b2      	cmp	sl, r6
   103a0:	d0ea      	beq.n	10378 <dir_find+0xa4>
   103a2:	23ff      	movs	r3, #255	; 0xff
   103a4:	469a      	mov	sl, r3
   103a6:	e7be      	b.n	10326 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   103a8:	4b2d      	ldr	r3, [pc, #180]	; (10460 <dir_find+0x18c>)
   103aa:	4798      	blx	r3
   103ac:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   103ae:	4653      	mov	r3, sl
   103b0:	2bfe      	cmp	r3, #254	; 0xfe
   103b2:	d81f      	bhi.n	103f4 <dir_find+0x120>
   103b4:	2301      	movs	r3, #1
   103b6:	4453      	add	r3, sl
   103b8:	4698      	mov	r8, r3
   103ba:	4653      	mov	r3, sl
   103bc:	005b      	lsls	r3, r3, #1
   103be:	5bd8      	ldrh	r0, [r3, r7]
   103c0:	4b27      	ldr	r3, [pc, #156]	; (10460 <dir_find+0x18c>)
   103c2:	4798      	blx	r3
   103c4:	0002      	movs	r2, r0
   103c6:	9b01      	ldr	r3, [sp, #4]
   103c8:	4283      	cmp	r3, r0
   103ca:	d113      	bne.n	103f4 <dir_find+0x120>
   103cc:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   103ce:	2301      	movs	r3, #1
   103d0:	469c      	mov	ip, r3
   103d2:	44e1      	add	r9, ip
   103d4:	464b      	mov	r3, r9
   103d6:	2b0d      	cmp	r3, #13
   103d8:	d011      	beq.n	103fe <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   103da:	4b22      	ldr	r3, [pc, #136]	; (10464 <dir_find+0x190>)
   103dc:	4649      	mov	r1, r9
   103de:	5cc9      	ldrb	r1, [r1, r3]
   103e0:	1863      	adds	r3, r4, r1
   103e2:	785b      	ldrb	r3, [r3, #1]
   103e4:	021b      	lsls	r3, r3, #8
   103e6:	5c60      	ldrb	r0, [r4, r1]
   103e8:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
   103ea:	2a00      	cmp	r2, #0
   103ec:	d1dc      	bne.n	103a8 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
   103ee:	4b1e      	ldr	r3, [pc, #120]	; (10468 <dir_find+0x194>)
   103f0:	4298      	cmp	r0, r3
   103f2:	d0ec      	beq.n	103ce <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   103f4:	9b00      	ldr	r3, [sp, #0]
   103f6:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   103f8:	23ff      	movs	r3, #255	; 0xff
   103fa:	469a      	mov	sl, r3
   103fc:	e793      	b.n	10326 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   103fe:	7823      	ldrb	r3, [r4, #0]
   10400:	065b      	lsls	r3, r3, #25
   10402:	d506      	bpl.n	10412 <dir_find+0x13e>
   10404:	2a00      	cmp	r2, #0
   10406:	d004      	beq.n	10412 <dir_find+0x13e>
   10408:	4653      	mov	r3, sl
   1040a:	005b      	lsls	r3, r3, #1
   1040c:	5bdb      	ldrh	r3, [r3, r7]
   1040e:	2b00      	cmp	r3, #0
   10410:	d1f0      	bne.n	103f4 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   10412:	3e01      	subs	r6, #1
   10414:	b2f3      	uxtb	r3, r6
   10416:	469a      	mov	sl, r3
   10418:	9b00      	ldr	r3, [sp, #0]
   1041a:	4699      	mov	r9, r3
   1041c:	e783      	b.n	10326 <dir_find+0x52>
   1041e:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   10420:	5ce1      	ldrb	r1, [r4, r3]
   10422:	5cc2      	ldrb	r2, [r0, r3]
   10424:	4291      	cmp	r1, r2
   10426:	d10a      	bne.n	1043e <dir_find+0x16a>
   10428:	3301      	adds	r3, #1
   1042a:	2b0b      	cmp	r3, #11
   1042c:	d1f8      	bne.n	10420 <dir_find+0x14c>
}
   1042e:	0038      	movs	r0, r7
   10430:	b003      	add	sp, #12
   10432:	bc3c      	pop	{r2, r3, r4, r5}
   10434:	4690      	mov	r8, r2
   10436:	4699      	mov	r9, r3
   10438:	46a2      	mov	sl, r4
   1043a:	46ab      	mov	fp, r5
   1043c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   1043e:	23ff      	movs	r3, #255	; 0xff
   10440:	469a      	mov	sl, r3
   10442:	e770      	b.n	10326 <dir_find+0x52>
			ord = 0xFF;
   10444:	23ff      	movs	r3, #255	; 0xff
   10446:	469a      	mov	sl, r3
   10448:	e76d      	b.n	10326 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   1044a:	2704      	movs	r7, #4
   1044c:	e7ef      	b.n	1042e <dir_find+0x15a>
   1044e:	46c0      	nop			; (mov r8, r8)
   10450:	0000fe95 	.word	0x0000fe95
   10454:	0000fcf9 	.word	0x0000fcf9
   10458:	0000f857 	.word	0x0000f857
   1045c:	000101b1 	.word	0x000101b1
   10460:	000112e5 	.word	0x000112e5
   10464:	0001b450 	.word	0x0001b450
   10468:	0000ffff 	.word	0x0000ffff

0001046c <dir_register>:
{
   1046c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1046e:	46de      	mov	lr, fp
   10470:	4657      	mov	r7, sl
   10472:	464e      	mov	r6, r9
   10474:	4645      	mov	r5, r8
   10476:	b5e0      	push	{r5, r6, r7, lr}
   10478:	b089      	sub	sp, #36	; 0x24
   1047a:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
   1047c:	6987      	ldr	r7, [r0, #24]
   1047e:	69c3      	ldr	r3, [r0, #28]
   10480:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
   10482:	ad05      	add	r5, sp, #20
   10484:	220c      	movs	r2, #12
   10486:	0039      	movs	r1, r7
   10488:	0028      	movs	r0, r5
   1048a:	4ba7      	ldr	r3, [pc, #668]	; (10728 <dir_register+0x2bc>)
   1048c:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   1048e:	7aeb      	ldrb	r3, [r5, #11]
   10490:	07db      	lsls	r3, r3, #31
   10492:	d400      	bmi.n	10496 <dir_register+0x2a>
   10494:	e070      	b.n	10578 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   10496:	2300      	movs	r3, #0
   10498:	72fb      	strb	r3, [r7, #11]
   1049a:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
   1049c:	220b      	movs	r2, #11
   1049e:	a905      	add	r1, sp, #20
   104a0:	0038      	movs	r0, r7
   104a2:	4ba1      	ldr	r3, [pc, #644]	; (10728 <dir_register+0x2bc>)
   104a4:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   104a6:	2301      	movs	r3, #1
		ns[i--] = c;
   104a8:	ad03      	add	r5, sp, #12
   104aa:	001e      	movs	r6, r3
   104ac:	46a0      	mov	r8, r4
   104ae:	e049      	b.n	10544 <dir_register+0xd8>
   104b0:	3801      	subs	r0, #1
   104b2:	1829      	adds	r1, r5, r0
   104b4:	704a      	strb	r2, [r1, #1]
		seq /= 16;
   104b6:	091b      	lsrs	r3, r3, #4
   104b8:	b29b      	uxth	r3, r3
	} while (seq);
   104ba:	2b00      	cmp	r3, #0
   104bc:	d007      	beq.n	104ce <dir_register+0x62>
		c = (seq % 16) + '0';
   104be:	0021      	movs	r1, r4
   104c0:	4019      	ands	r1, r3
   104c2:	000a      	movs	r2, r1
   104c4:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
   104c6:	2a39      	cmp	r2, #57	; 0x39
   104c8:	d9f2      	bls.n	104b0 <dir_register+0x44>
   104ca:	3207      	adds	r2, #7
   104cc:	e7f0      	b.n	104b0 <dir_register+0x44>
	ns[i] = '~';
   104ce:	337e      	adds	r3, #126	; 0x7e
   104d0:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
   104d2:	2800      	cmp	r0, #0
   104d4:	d00a      	beq.n	104ec <dir_register+0x80>
   104d6:	783b      	ldrb	r3, [r7, #0]
   104d8:	2b20      	cmp	r3, #32
   104da:	d009      	beq.n	104f0 <dir_register+0x84>
   104dc:	2300      	movs	r3, #0
   104de:	3301      	adds	r3, #1
   104e0:	4298      	cmp	r0, r3
   104e2:	d007      	beq.n	104f4 <dir_register+0x88>
   104e4:	5cfa      	ldrb	r2, [r7, r3]
   104e6:	2a20      	cmp	r2, #32
   104e8:	d1f9      	bne.n	104de <dir_register+0x72>
   104ea:	e009      	b.n	10500 <dir_register+0x94>
   104ec:	0003      	movs	r3, r0
   104ee:	e007      	b.n	10500 <dir_register+0x94>
   104f0:	2300      	movs	r3, #0
   104f2:	e005      	b.n	10500 <dir_register+0x94>
   104f4:	0003      	movs	r3, r0
   104f6:	e003      	b.n	10500 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   104f8:	54fa      	strb	r2, [r7, r3]
   104fa:	3301      	adds	r3, #1
	} while (j < 8);
   104fc:	2b07      	cmp	r3, #7
   104fe:	d805      	bhi.n	1050c <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   10500:	2220      	movs	r2, #32
   10502:	2807      	cmp	r0, #7
   10504:	d8f8      	bhi.n	104f8 <dir_register+0x8c>
   10506:	5c2a      	ldrb	r2, [r5, r0]
   10508:	3001      	adds	r0, #1
   1050a:	e7f5      	b.n	104f8 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   1050c:	4640      	mov	r0, r8
   1050e:	4b87      	ldr	r3, [pc, #540]	; (1072c <dir_register+0x2c0>)
   10510:	4798      	blx	r3
			if (res != FR_OK) break;
   10512:	2800      	cmp	r0, #0
   10514:	d11c      	bne.n	10550 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
   10516:	3601      	adds	r6, #1
   10518:	b2b6      	uxth	r6, r6
   1051a:	2e64      	cmp	r6, #100	; 0x64
   1051c:	d015      	beq.n	1054a <dir_register+0xde>
	mem_cpy(dst, src, 11);
   1051e:	220b      	movs	r2, #11
   10520:	a905      	add	r1, sp, #20
   10522:	0038      	movs	r0, r7
   10524:	4b80      	ldr	r3, [pc, #512]	; (10728 <dir_register+0x2bc>)
   10526:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   10528:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   1052a:	2e05      	cmp	r6, #5
   1052c:	d90a      	bls.n	10544 <dir_register+0xd8>
   1052e:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   10530:	085a      	lsrs	r2, r3, #1
   10532:	03db      	lsls	r3, r3, #15
   10534:	4313      	orrs	r3, r2
   10536:	880a      	ldrh	r2, [r1, #0]
   10538:	189b      	adds	r3, r3, r2
   1053a:	b29b      	uxth	r3, r3
   1053c:	3102      	adds	r1, #2
   1053e:	880a      	ldrh	r2, [r1, #0]
   10540:	2a00      	cmp	r2, #0
   10542:	d1f5      	bne.n	10530 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
   10544:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
   10546:	240f      	movs	r4, #15
   10548:	e7b9      	b.n	104be <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   1054a:	2307      	movs	r3, #7
   1054c:	4698      	mov	r8, r3
   1054e:	e006      	b.n	1055e <dir_register+0xf2>
   10550:	4644      	mov	r4, r8
   10552:	4680      	mov	r8, r0
   10554:	2e64      	cmp	r6, #100	; 0x64
   10556:	d100      	bne.n	1055a <dir_register+0xee>
   10558:	e0a5      	b.n	106a6 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   1055a:	2804      	cmp	r0, #4
   1055c:	d007      	beq.n	1056e <dir_register+0x102>
}
   1055e:	4640      	mov	r0, r8
   10560:	b009      	add	sp, #36	; 0x24
   10562:	bc3c      	pop	{r2, r3, r4, r5}
   10564:	4690      	mov	r8, r2
   10566:	4699      	mov	r9, r3
   10568:	46a2      	mov	sl, r4
   1056a:	46ab      	mov	fp, r5
   1056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
   1056e:	ab05      	add	r3, sp, #20
   10570:	7adb      	ldrb	r3, [r3, #11]
   10572:	72fb      	strb	r3, [r7, #11]
   10574:	4653      	mov	r3, sl
   10576:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   10578:	ab05      	add	r3, sp, #20
   1057a:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
   1057c:	2201      	movs	r2, #1
   1057e:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   10580:	079b      	lsls	r3, r3, #30
   10582:	d511      	bpl.n	105a8 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
   10584:	4653      	mov	r3, sl
   10586:	881b      	ldrh	r3, [r3, #0]
   10588:	2b00      	cmp	r3, #0
   1058a:	d01b      	beq.n	105c4 <dir_register+0x158>
   1058c:	2000      	movs	r0, #0
   1058e:	4652      	mov	r2, sl
   10590:	3001      	adds	r0, #1
   10592:	b280      	uxth	r0, r0
   10594:	0043      	lsls	r3, r0, #1
   10596:	5a9b      	ldrh	r3, [r3, r2]
   10598:	2b00      	cmp	r3, #0
   1059a:	d1f9      	bne.n	10590 <dir_register+0x124>
		ne = (ne + 25) / 13;
   1059c:	3019      	adds	r0, #25
   1059e:	210d      	movs	r1, #13
   105a0:	4b63      	ldr	r3, [pc, #396]	; (10730 <dir_register+0x2c4>)
   105a2:	4798      	blx	r3
   105a4:	b283      	uxth	r3, r0
   105a6:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
   105a8:	2100      	movs	r1, #0
   105aa:	0020      	movs	r0, r4
   105ac:	4b61      	ldr	r3, [pc, #388]	; (10734 <dir_register+0x2c8>)
   105ae:	4798      	blx	r3
   105b0:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
   105b2:	2800      	cmp	r0, #0
   105b4:	d1d3      	bne.n	1055e <dir_register+0xf2>
   105b6:	4682      	mov	sl, r0
   105b8:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
   105ba:	4f5f      	ldr	r7, [pc, #380]	; (10738 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
   105bc:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   105be:	4b5f      	ldr	r3, [pc, #380]	; (1073c <dir_register+0x2d0>)
   105c0:	4699      	mov	r9, r3
   105c2:	e00b      	b.n	105dc <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
   105c4:	2000      	movs	r0, #0
   105c6:	e7e9      	b.n	1059c <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   105c8:	1c6b      	adds	r3, r5, #1
   105ca:	b29b      	uxth	r3, r3
   105cc:	459b      	cmp	fp, r3
   105ce:	d06d      	beq.n	106ac <dir_register+0x240>
   105d0:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   105d2:	2101      	movs	r1, #1
   105d4:	0020      	movs	r0, r4
   105d6:	47c8      	blx	r9
	} while (res == FR_OK);
   105d8:	2800      	cmp	r0, #0
   105da:	d112      	bne.n	10602 <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
   105dc:	6921      	ldr	r1, [r4, #16]
   105de:	6820      	ldr	r0, [r4, #0]
   105e0:	47b8      	blx	r7
		if (res != FR_OK) break;
   105e2:	2800      	cmp	r0, #0
   105e4:	d000      	beq.n	105e8 <dir_register+0x17c>
   105e6:	e098      	b.n	1071a <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
   105e8:	6963      	ldr	r3, [r4, #20]
   105ea:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   105ec:	2be5      	cmp	r3, #229	; 0xe5
   105ee:	d001      	beq.n	105f4 <dir_register+0x188>
   105f0:	2b00      	cmp	r3, #0
   105f2:	d104      	bne.n	105fe <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   105f4:	2d00      	cmp	r5, #0
   105f6:	d1e7      	bne.n	105c8 <dir_register+0x15c>
   105f8:	88e3      	ldrh	r3, [r4, #6]
   105fa:	469a      	mov	sl, r3
   105fc:	e7e4      	b.n	105c8 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
   105fe:	0035      	movs	r5, r6
   10600:	e7e7      	b.n	105d2 <dir_register+0x166>
   10602:	4680      	mov	r8, r0
   10604:	e7ab      	b.n	1055e <dir_register+0xf2>
		res = dir_sdi(dj, is);
   10606:	4651      	mov	r1, sl
   10608:	0020      	movs	r0, r4
   1060a:	4b4a      	ldr	r3, [pc, #296]	; (10734 <dir_register+0x2c8>)
   1060c:	4798      	blx	r3
   1060e:	4680      	mov	r8, r0
		if (res == FR_OK) {
   10610:	2800      	cmp	r0, #0
   10612:	d1a4      	bne.n	1055e <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   10614:	69a0      	ldr	r0, [r4, #24]
   10616:	4b4a      	ldr	r3, [pc, #296]	; (10740 <dir_register+0x2d4>)
   10618:	4798      	blx	r3
   1061a:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   1061c:	46a8      	mov	r8, r5
   1061e:	e01f      	b.n	10660 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   10620:	0022      	movs	r2, r4
   10622:	e067      	b.n	106f4 <dir_register+0x288>
   10624:	465e      	mov	r6, fp
   10626:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   10628:	4946      	ldr	r1, [pc, #280]	; (10744 <dir_register+0x2d8>)
   1062a:	428b      	cmp	r3, r1
   1062c:	d003      	beq.n	10636 <dir_register+0x1ca>
   1062e:	0052      	lsls	r2, r2, #1
   10630:	5b93      	ldrh	r3, [r2, r6]
   10632:	2b00      	cmp	r3, #0
   10634:	d103      	bne.n	1063e <dir_register+0x1d2>
   10636:	2340      	movs	r3, #64	; 0x40
   10638:	464a      	mov	r2, r9
   1063a:	431a      	orrs	r2, r3
   1063c:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   1063e:	464b      	mov	r3, r9
   10640:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
   10642:	2301      	movs	r3, #1
   10644:	6822      	ldr	r2, [r4, #0]
   10646:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
   10648:	2100      	movs	r1, #0
   1064a:	0020      	movs	r0, r4
   1064c:	4b3b      	ldr	r3, [pc, #236]	; (1073c <dir_register+0x2d0>)
   1064e:	4798      	blx	r3
			} while (res == FR_OK && --ne);
   10650:	2800      	cmp	r0, #0
   10652:	d166      	bne.n	10722 <dir_register+0x2b6>
   10654:	4645      	mov	r5, r8
   10656:	3d01      	subs	r5, #1
   10658:	b2ab      	uxth	r3, r5
   1065a:	4698      	mov	r8, r3
   1065c:	2b00      	cmp	r3, #0
   1065e:	d027      	beq.n	106b0 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
   10660:	6921      	ldr	r1, [r4, #16]
   10662:	6820      	ldr	r0, [r4, #0]
   10664:	4b34      	ldr	r3, [pc, #208]	; (10738 <dir_register+0x2cc>)
   10666:	4798      	blx	r3
				if (res != FR_OK) break;
   10668:	2800      	cmp	r0, #0
   1066a:	d158      	bne.n	1071e <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   1066c:	69e6      	ldr	r6, [r4, #28]
   1066e:	6960      	ldr	r0, [r4, #20]
   10670:	4643      	mov	r3, r8
   10672:	466a      	mov	r2, sp
   10674:	70d3      	strb	r3, [r2, #3]
   10676:	78d3      	ldrb	r3, [r2, #3]
   10678:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
   1067a:	7913      	ldrb	r3, [r2, #4]
   1067c:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   1067e:	230f      	movs	r3, #15
   10680:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
   10682:	2300      	movs	r3, #0
   10684:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   10686:	7683      	strb	r3, [r0, #26]
   10688:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   1068a:	464b      	mov	r3, r9
   1068c:	3b01      	subs	r3, #1
   1068e:	005a      	lsls	r2, r3, #1
   10690:	18d2      	adds	r2, r2, r3
   10692:	0092      	lsls	r2, r2, #2
   10694:	18d2      	adds	r2, r2, r3
   10696:	492c      	ldr	r1, [pc, #176]	; (10748 <dir_register+0x2dc>)
   10698:	000d      	movs	r5, r1
   1069a:	350d      	adds	r5, #13
	s = wc = 0;
   1069c:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   1069e:	4f29      	ldr	r7, [pc, #164]	; (10744 <dir_register+0x2d8>)
   106a0:	46b3      	mov	fp, r6
   106a2:	46a4      	mov	ip, r4
   106a4:	e029      	b.n	106fa <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   106a6:	2307      	movs	r3, #7
   106a8:	4698      	mov	r8, r3
   106aa:	e758      	b.n	1055e <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   106ac:	2b01      	cmp	r3, #1
   106ae:	d8aa      	bhi.n	10606 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
   106b0:	6921      	ldr	r1, [r4, #16]
   106b2:	6820      	ldr	r0, [r4, #0]
   106b4:	4b20      	ldr	r3, [pc, #128]	; (10738 <dir_register+0x2cc>)
   106b6:	4798      	blx	r3
   106b8:	4680      	mov	r8, r0
		if (res == FR_OK) {
   106ba:	2800      	cmp	r0, #0
   106bc:	d000      	beq.n	106c0 <dir_register+0x254>
   106be:	e74e      	b.n	1055e <dir_register+0xf2>
			dir = dj->dir;
   106c0:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   106c2:	2220      	movs	r2, #32
   106c4:	2100      	movs	r1, #0
   106c6:	0028      	movs	r0, r5
   106c8:	4b20      	ldr	r3, [pc, #128]	; (1074c <dir_register+0x2e0>)
   106ca:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   106cc:	220b      	movs	r2, #11
   106ce:	69a1      	ldr	r1, [r4, #24]
   106d0:	0028      	movs	r0, r5
   106d2:	4b15      	ldr	r3, [pc, #84]	; (10728 <dir_register+0x2bc>)
   106d4:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   106d6:	69a3      	ldr	r3, [r4, #24]
   106d8:	7ada      	ldrb	r2, [r3, #11]
   106da:	2318      	movs	r3, #24
   106dc:	4013      	ands	r3, r2
   106de:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
   106e0:	6823      	ldr	r3, [r4, #0]
   106e2:	2201      	movs	r2, #1
   106e4:	711a      	strb	r2, [r3, #4]
   106e6:	e73a      	b.n	1055e <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   106e8:	780c      	ldrb	r4, [r1, #0]
   106ea:	26ff      	movs	r6, #255	; 0xff
   106ec:	5506      	strb	r6, [r0, r4]
   106ee:	1904      	adds	r4, r0, r4
   106f0:	26ff      	movs	r6, #255	; 0xff
   106f2:	7066      	strb	r6, [r4, #1]
   106f4:	3101      	adds	r1, #1
	} while (++s < 13);
   106f6:	42a9      	cmp	r1, r5
   106f8:	d094      	beq.n	10624 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   106fa:	42bb      	cmp	r3, r7
   106fc:	d0f4      	beq.n	106e8 <dir_register+0x27c>
   106fe:	1c54      	adds	r4, r2, #1
   10700:	0052      	lsls	r2, r2, #1
   10702:	465b      	mov	r3, fp
   10704:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   10706:	780a      	ldrb	r2, [r1, #0]
   10708:	5483      	strb	r3, [r0, r2]
   1070a:	1882      	adds	r2, r0, r2
   1070c:	0a1e      	lsrs	r6, r3, #8
   1070e:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   10710:	2b00      	cmp	r3, #0
   10712:	d185      	bne.n	10620 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   10714:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   10716:	003b      	movs	r3, r7
   10718:	e7ec      	b.n	106f4 <dir_register+0x288>
   1071a:	4680      	mov	r8, r0
   1071c:	e71f      	b.n	1055e <dir_register+0xf2>
   1071e:	4680      	mov	r8, r0
   10720:	e71d      	b.n	1055e <dir_register+0xf2>
   10722:	4680      	mov	r8, r0
   10724:	e71b      	b.n	1055e <dir_register+0xf2>
   10726:	46c0      	nop			; (mov r8, r8)
   10728:	0000f819 	.word	0x0000f819
   1072c:	000102d5 	.word	0x000102d5
   10730:	00015929 	.word	0x00015929
   10734:	0000fe95 	.word	0x0000fe95
   10738:	0000fcf9 	.word	0x0000fcf9
   1073c:	000101b1 	.word	0x000101b1
   10740:	0000f857 	.word	0x0000f857
   10744:	0000ffff 	.word	0x0000ffff
   10748:	0001b450 	.word	0x0001b450
   1074c:	0000f82d 	.word	0x0000f82d

00010750 <dir_read>:
{
   10750:	b5f0      	push	{r4, r5, r6, r7, lr}
   10752:	46de      	mov	lr, fp
   10754:	4657      	mov	r7, sl
   10756:	464e      	mov	r6, r9
   10758:	4645      	mov	r5, r8
   1075a:	b5e0      	push	{r5, r6, r7, lr}
   1075c:	b083      	sub	sp, #12
   1075e:	0005      	movs	r5, r0
	BYTE a, ord = 0xFF, sum = 0xFF;
   10760:	23ff      	movs	r3, #255	; 0xff
   10762:	4699      	mov	r9, r3
   10764:	26ff      	movs	r6, #255	; 0xff
	res = FR_NO_FILE;
   10766:	2404      	movs	r4, #4
		res = move_window(dj->fs, dj->sect);
   10768:	4f44      	ldr	r7, [pc, #272]	; (1087c <dir_read+0x12c>)
		res = dir_next(dj, 0);				/* Next entry */
   1076a:	4b45      	ldr	r3, [pc, #276]	; (10880 <dir_read+0x130>)
   1076c:	4698      	mov	r8, r3
	while (dj->sect) {
   1076e:	e05b      	b.n	10828 <dir_read+0xd8>
			if (a == AM_LFN) {			/* An LFN entry is found */
   10770:	2a0f      	cmp	r2, #15
   10772:	d147      	bne.n	10804 <dir_read+0xb4>
				if (c & LLE) {			/* Is it start of LFN sequence? */
   10774:	065a      	lsls	r2, r3, #25
   10776:	d51a      	bpl.n	107ae <dir_read+0x5e>
					sum = dir[LDIR_Chksum];
   10778:	7b42      	ldrb	r2, [r0, #13]
   1077a:	4691      	mov	r9, r2
					c &= ~LLE; ord = c;
   1077c:	2240      	movs	r2, #64	; 0x40
   1077e:	4393      	bics	r3, r2
					dj->lfn_idx = dj->index;
   10780:	88ea      	ldrh	r2, [r5, #6]
   10782:	842a      	strh	r2, [r5, #32]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   10784:	7b42      	ldrb	r2, [r0, #13]
   10786:	4694      	mov	ip, r2
   10788:	26ff      	movs	r6, #255	; 0xff
   1078a:	454a      	cmp	r2, r9
   1078c:	d147      	bne.n	1081e <dir_read+0xce>
   1078e:	69ea      	ldr	r2, [r5, #28]
   10790:	4691      	mov	r9, r2
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   10792:	7802      	ldrb	r2, [r0, #0]
   10794:	243f      	movs	r4, #63	; 0x3f
   10796:	4022      	ands	r2, r4
   10798:	3a01      	subs	r2, #1
   1079a:	0054      	lsls	r4, r2, #1
   1079c:	18a4      	adds	r4, r4, r2
   1079e:	00a4      	lsls	r4, r4, #2
   107a0:	18a2      	adds	r2, r4, r2
   107a2:	9201      	str	r2, [sp, #4]
	s = 0; wc = 1;
   107a4:	3efe      	subs	r6, #254	; 0xfe
   107a6:	2100      	movs	r1, #0
			if (uc != 0xFFFF) return 0;		/* Check filler */
   107a8:	4a36      	ldr	r2, [pc, #216]	; (10884 <dir_read+0x134>)
   107aa:	4692      	mov	sl, r2
   107ac:	e008      	b.n	107c0 <dir_read+0x70>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   107ae:	429e      	cmp	r6, r3
   107b0:	d0e8      	beq.n	10784 <dir_read+0x34>
   107b2:	26ff      	movs	r6, #255	; 0xff
   107b4:	e033      	b.n	1081e <dir_read+0xce>
			if (uc != 0xFFFF) return 0;		/* Check filler */
   107b6:	4552      	cmp	r2, sl
   107b8:	d151      	bne.n	1085e <dir_read+0x10e>
	} while (++s < 13);						/* Read all character in the entry */
   107ba:	3101      	adds	r1, #1
   107bc:	290d      	cmp	r1, #13
   107be:	d013      	beq.n	107e8 <dir_read+0x98>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   107c0:	4a31      	ldr	r2, [pc, #196]	; (10888 <dir_read+0x138>)
   107c2:	5c8a      	ldrb	r2, [r1, r2]
   107c4:	1884      	adds	r4, r0, r2
   107c6:	7864      	ldrb	r4, [r4, #1]
   107c8:	0224      	lsls	r4, r4, #8
   107ca:	5c82      	ldrb	r2, [r0, r2]
   107cc:	4322      	orrs	r2, r4
		if (wc) {	/* Last char has not been processed */
   107ce:	2e00      	cmp	r6, #0
   107d0:	d0f1      	beq.n	107b6 <dir_read+0x66>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   107d2:	9c01      	ldr	r4, [sp, #4]
   107d4:	2cfe      	cmp	r4, #254	; 0xfe
   107d6:	d842      	bhi.n	1085e <dir_read+0x10e>
			lfnbuf[i++] = wc = uc;			/* Store it */
   107d8:	0066      	lsls	r6, r4, #1
   107da:	464c      	mov	r4, r9
   107dc:	5332      	strh	r2, [r6, r4]
   107de:	0016      	movs	r6, r2
   107e0:	9c01      	ldr	r4, [sp, #4]
   107e2:	3401      	adds	r4, #1
   107e4:	9401      	str	r4, [sp, #4]
   107e6:	e7e8      	b.n	107ba <dir_read+0x6a>
	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
   107e8:	7802      	ldrb	r2, [r0, #0]
   107ea:	0652      	lsls	r2, r2, #25
   107ec:	d506      	bpl.n	107fc <dir_read+0xac>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
   107ee:	9a01      	ldr	r2, [sp, #4]
   107f0:	2afe      	cmp	r2, #254	; 0xfe
   107f2:	d834      	bhi.n	1085e <dir_read+0x10e>
		lfnbuf[i] = 0;
   107f4:	0054      	lsls	r4, r2, #1
   107f6:	2200      	movs	r2, #0
   107f8:	4649      	mov	r1, r9
   107fa:	5262      	strh	r2, [r4, r1]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   107fc:	3b01      	subs	r3, #1
   107fe:	b2de      	uxtb	r6, r3
   10800:	46e1      	mov	r9, ip
   10802:	e00c      	b.n	1081e <dir_read+0xce>
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
   10804:	2e00      	cmp	r6, #0
   10806:	d103      	bne.n	10810 <dir_read+0xc0>
   10808:	4b20      	ldr	r3, [pc, #128]	; (1088c <dir_read+0x13c>)
   1080a:	4798      	blx	r3
   1080c:	4581      	cmp	r9, r0
   1080e:	d02c      	beq.n	1086a <dir_read+0x11a>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
   10810:	2301      	movs	r3, #1
   10812:	425b      	negs	r3, r3
   10814:	842b      	strh	r3, [r5, #32]
   10816:	e028      	b.n	1086a <dir_read+0x11a>
			ord = 0xFF;
   10818:	26ff      	movs	r6, #255	; 0xff
   1081a:	e000      	b.n	1081e <dir_read+0xce>
   1081c:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dj, 0);				/* Next entry */
   1081e:	2100      	movs	r1, #0
   10820:	0028      	movs	r0, r5
   10822:	47c0      	blx	r8
   10824:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
   10826:	d11e      	bne.n	10866 <dir_read+0x116>
	while (dj->sect) {
   10828:	6929      	ldr	r1, [r5, #16]
   1082a:	2900      	cmp	r1, #0
   1082c:	d014      	beq.n	10858 <dir_read+0x108>
		res = move_window(dj->fs, dj->sect);
   1082e:	6828      	ldr	r0, [r5, #0]
   10830:	47b8      	blx	r7
   10832:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
   10834:	d117      	bne.n	10866 <dir_read+0x116>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   10836:	6968      	ldr	r0, [r5, #20]
		c = dir[DIR_Name];
   10838:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   1083a:	2b00      	cmp	r3, #0
   1083c:	d012      	beq.n	10864 <dir_read+0x114>
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   1083e:	2be5      	cmp	r3, #229	; 0xe5
   10840:	d0ea      	beq.n	10818 <dir_read+0xc8>
   10842:	2b2e      	cmp	r3, #46	; 0x2e
   10844:	d0ea      	beq.n	1081c <dir_read+0xcc>
		a = dir[DIR_Attr] & AM_MASK;
   10846:	7ac1      	ldrb	r1, [r0, #11]
   10848:	223f      	movs	r2, #63	; 0x3f
   1084a:	400a      	ands	r2, r1
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   1084c:	0709      	lsls	r1, r1, #28
   1084e:	d58f      	bpl.n	10770 <dir_read+0x20>
   10850:	2a0f      	cmp	r2, #15
   10852:	d08f      	beq.n	10774 <dir_read+0x24>
			ord = 0xFF;
   10854:	26ff      	movs	r6, #255	; 0xff
   10856:	e7e2      	b.n	1081e <dir_read+0xce>
	if (res != FR_OK) dj->sect = 0;
   10858:	2c00      	cmp	r4, #0
   1085a:	d006      	beq.n	1086a <dir_read+0x11a>
   1085c:	e003      	b.n	10866 <dir_read+0x116>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1085e:	46e1      	mov	r9, ip
   10860:	26ff      	movs	r6, #255	; 0xff
   10862:	e7dc      	b.n	1081e <dir_read+0xce>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   10864:	2404      	movs	r4, #4
	if (res != FR_OK) dj->sect = 0;
   10866:	2300      	movs	r3, #0
   10868:	612b      	str	r3, [r5, #16]
}
   1086a:	0020      	movs	r0, r4
   1086c:	b003      	add	sp, #12
   1086e:	bc3c      	pop	{r2, r3, r4, r5}
   10870:	4690      	mov	r8, r2
   10872:	4699      	mov	r9, r3
   10874:	46a2      	mov	sl, r4
   10876:	46ab      	mov	fp, r5
   10878:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1087a:	46c0      	nop			; (mov r8, r8)
   1087c:	0000fcf9 	.word	0x0000fcf9
   10880:	000101b1 	.word	0x000101b1
   10884:	0000ffff 	.word	0x0000ffff
   10888:	0001b450 	.word	0x0001b450
   1088c:	0000f857 	.word	0x0000f857

00010890 <dir_remove>:
{
   10890:	b5f0      	push	{r4, r5, r6, r7, lr}
   10892:	46c6      	mov	lr, r8
   10894:	b500      	push	{lr}
   10896:	0004      	movs	r4, r0
	i = dj->index;	/* SFN index */
   10898:	88c5      	ldrh	r5, [r0, #6]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
   1089a:	8c01      	ldrh	r1, [r0, #32]
   1089c:	4b12      	ldr	r3, [pc, #72]	; (108e8 <dir_remove+0x58>)
   1089e:	4299      	cmp	r1, r3
   108a0:	d020      	beq.n	108e4 <dir_remove+0x54>
   108a2:	0020      	movs	r0, r4
   108a4:	4b11      	ldr	r3, [pc, #68]	; (108ec <dir_remove+0x5c>)
   108a6:	4798      	blx	r3
	if (res == FR_OK) {
   108a8:	2800      	cmp	r0, #0
   108aa:	d118      	bne.n	108de <dir_remove+0x4e>
			res = move_window(dj->fs, dj->sect);
   108ac:	4e10      	ldr	r6, [pc, #64]	; (108f0 <dir_remove+0x60>)
			*dj->dir = DDE;			/* Mark the entry "deleted" */
   108ae:	27e5      	movs	r7, #229	; 0xe5
			res = dir_next(dj, 0);		/* Next entry */
   108b0:	4b10      	ldr	r3, [pc, #64]	; (108f4 <dir_remove+0x64>)
   108b2:	4698      	mov	r8, r3
			res = move_window(dj->fs, dj->sect);
   108b4:	6921      	ldr	r1, [r4, #16]
   108b6:	6820      	ldr	r0, [r4, #0]
   108b8:	47b0      	blx	r6
			if (res != FR_OK) break;
   108ba:	2800      	cmp	r0, #0
   108bc:	d10c      	bne.n	108d8 <dir_remove+0x48>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
   108be:	6963      	ldr	r3, [r4, #20]
   108c0:	701f      	strb	r7, [r3, #0]
			dj->fs->wflag = 1;
   108c2:	2301      	movs	r3, #1
   108c4:	6822      	ldr	r2, [r4, #0]
   108c6:	7113      	strb	r3, [r2, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
   108c8:	88e3      	ldrh	r3, [r4, #6]
   108ca:	42ab      	cmp	r3, r5
   108cc:	d207      	bcs.n	108de <dir_remove+0x4e>
			res = dir_next(dj, 0);		/* Next entry */
   108ce:	2100      	movs	r1, #0
   108d0:	0020      	movs	r0, r4
   108d2:	47c0      	blx	r8
		} while (res == FR_OK);
   108d4:	2800      	cmp	r0, #0
   108d6:	d0ed      	beq.n	108b4 <dir_remove+0x24>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
   108d8:	2804      	cmp	r0, #4
   108da:	d100      	bne.n	108de <dir_remove+0x4e>
   108dc:	3802      	subs	r0, #2
}
   108de:	bc04      	pop	{r2}
   108e0:	4690      	mov	r8, r2
   108e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
   108e4:	0029      	movs	r1, r5
   108e6:	e7dc      	b.n	108a2 <dir_remove+0x12>
   108e8:	0000ffff 	.word	0x0000ffff
   108ec:	0000fe95 	.word	0x0000fe95
   108f0:	0000fcf9 	.word	0x0000fcf9
   108f4:	000101b1 	.word	0x000101b1

000108f8 <sync>:
{
   108f8:	b570      	push	{r4, r5, r6, lr}
   108fa:	0004      	movs	r4, r0
	res = move_window(fs, 0);
   108fc:	2100      	movs	r1, #0
   108fe:	4b2c      	ldr	r3, [pc, #176]	; (109b0 <sync+0xb8>)
   10900:	4798      	blx	r3
	if (res == FR_OK) {
   10902:	2800      	cmp	r0, #0
   10904:	d10a      	bne.n	1091c <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   10906:	7823      	ldrb	r3, [r4, #0]
   10908:	2b03      	cmp	r3, #3
   1090a:	d008      	beq.n	1091e <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   1090c:	7860      	ldrb	r0, [r4, #1]
   1090e:	2200      	movs	r2, #0
   10910:	2100      	movs	r1, #0
   10912:	4b28      	ldr	r3, [pc, #160]	; (109b4 <sync+0xbc>)
   10914:	4798      	blx	r3
   10916:	1e43      	subs	r3, r0, #1
   10918:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
   1091a:	b2c0      	uxtb	r0, r0
}
   1091c:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   1091e:	7963      	ldrb	r3, [r4, #5]
   10920:	2b00      	cmp	r3, #0
   10922:	d0f3      	beq.n	1090c <sync+0x14>
			fs->winsect = 0;
   10924:	2600      	movs	r6, #0
   10926:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
   10928:	0025      	movs	r5, r4
   1092a:	3530      	adds	r5, #48	; 0x30
   1092c:	2280      	movs	r2, #128	; 0x80
   1092e:	0092      	lsls	r2, r2, #2
   10930:	2100      	movs	r1, #0
   10932:	0028      	movs	r0, r5
   10934:	4b20      	ldr	r3, [pc, #128]	; (109b8 <sync+0xc0>)
   10936:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   10938:	2255      	movs	r2, #85	; 0x55
   1093a:	4b20      	ldr	r3, [pc, #128]	; (109bc <sync+0xc4>)
   1093c:	54e2      	strb	r2, [r4, r3]
   1093e:	3255      	adds	r2, #85	; 0x55
   10940:	4b1f      	ldr	r3, [pc, #124]	; (109c0 <sync+0xc8>)
   10942:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   10944:	3bde      	subs	r3, #222	; 0xde
   10946:	3bff      	subs	r3, #255	; 0xff
   10948:	3a7a      	subs	r2, #122	; 0x7a
   1094a:	54a3      	strb	r3, [r4, r2]
   1094c:	3201      	adds	r2, #1
   1094e:	54a3      	strb	r3, [r4, r2]
   10950:	330f      	adds	r3, #15
   10952:	3201      	adds	r2, #1
   10954:	54a3      	strb	r3, [r4, r2]
   10956:	320f      	adds	r2, #15
   10958:	2133      	movs	r1, #51	; 0x33
   1095a:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   1095c:	313f      	adds	r1, #63	; 0x3f
   1095e:	2085      	movs	r0, #133	; 0x85
   10960:	0080      	lsls	r0, r0, #2
   10962:	5421      	strb	r1, [r4, r0]
   10964:	4817      	ldr	r0, [pc, #92]	; (109c4 <sync+0xcc>)
   10966:	5421      	strb	r1, [r4, r0]
   10968:	4917      	ldr	r1, [pc, #92]	; (109c8 <sync+0xd0>)
   1096a:	5462      	strb	r2, [r4, r1]
   1096c:	4a17      	ldr	r2, [pc, #92]	; (109cc <sync+0xd4>)
   1096e:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   10970:	6923      	ldr	r3, [r4, #16]
   10972:	3201      	adds	r2, #1
   10974:	54a3      	strb	r3, [r4, r2]
   10976:	0a19      	lsrs	r1, r3, #8
   10978:	4a15      	ldr	r2, [pc, #84]	; (109d0 <sync+0xd8>)
   1097a:	54a1      	strb	r1, [r4, r2]
   1097c:	0c19      	lsrs	r1, r3, #16
   1097e:	4a15      	ldr	r2, [pc, #84]	; (109d4 <sync+0xdc>)
   10980:	54a1      	strb	r1, [r4, r2]
   10982:	0e1b      	lsrs	r3, r3, #24
   10984:	4a14      	ldr	r2, [pc, #80]	; (109d8 <sync+0xe0>)
   10986:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   10988:	68e3      	ldr	r3, [r4, #12]
   1098a:	3201      	adds	r2, #1
   1098c:	54a3      	strb	r3, [r4, r2]
   1098e:	0a19      	lsrs	r1, r3, #8
   10990:	4a12      	ldr	r2, [pc, #72]	; (109dc <sync+0xe4>)
   10992:	54a1      	strb	r1, [r4, r2]
   10994:	0c19      	lsrs	r1, r3, #16
   10996:	4a12      	ldr	r2, [pc, #72]	; (109e0 <sync+0xe8>)
   10998:	54a1      	strb	r1, [r4, r2]
   1099a:	0e1b      	lsrs	r3, r3, #24
   1099c:	4a11      	ldr	r2, [pc, #68]	; (109e4 <sync+0xec>)
   1099e:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   109a0:	7860      	ldrb	r0, [r4, #1]
   109a2:	2301      	movs	r3, #1
   109a4:	6962      	ldr	r2, [r4, #20]
   109a6:	0029      	movs	r1, r5
   109a8:	4d0f      	ldr	r5, [pc, #60]	; (109e8 <sync+0xf0>)
   109aa:	47a8      	blx	r5
			fs->fsi_flag = 0;
   109ac:	7166      	strb	r6, [r4, #5]
   109ae:	e7ad      	b.n	1090c <sync+0x14>
   109b0:	0000fcf9 	.word	0x0000fcf9
   109b4:	0000f75d 	.word	0x0000f75d
   109b8:	0000f82d 	.word	0x0000f82d
   109bc:	0000022e 	.word	0x0000022e
   109c0:	0000022f 	.word	0x0000022f
   109c4:	00000215 	.word	0x00000215
   109c8:	00000216 	.word	0x00000216
   109cc:	00000217 	.word	0x00000217
   109d0:	00000219 	.word	0x00000219
   109d4:	0000021a 	.word	0x0000021a
   109d8:	0000021b 	.word	0x0000021b
   109dc:	0000021d 	.word	0x0000021d
   109e0:	0000021e 	.word	0x0000021e
   109e4:	0000021f 	.word	0x0000021f
   109e8:	0000f6d9 	.word	0x0000f6d9

000109ec <follow_path>:
{
   109ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   109ee:	46de      	mov	lr, fp
   109f0:	4657      	mov	r7, sl
   109f2:	464e      	mov	r6, r9
   109f4:	4645      	mov	r5, r8
   109f6:	b5e0      	push	{r5, r6, r7, lr}
   109f8:	b083      	sub	sp, #12
   109fa:	4682      	mov	sl, r0
   109fc:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   109fe:	780b      	ldrb	r3, [r1, #0]
   10a00:	2b2f      	cmp	r3, #47	; 0x2f
   10a02:	d00f      	beq.n	10a24 <follow_path+0x38>
   10a04:	2b5c      	cmp	r3, #92	; 0x5c
   10a06:	d00d      	beq.n	10a24 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
   10a08:	2300      	movs	r3, #0
   10a0a:	4652      	mov	r2, sl
   10a0c:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   10a0e:	782b      	ldrb	r3, [r5, #0]
   10a10:	4657      	mov	r7, sl
   10a12:	2b1f      	cmp	r3, #31
   10a14:	d809      	bhi.n	10a2a <follow_path+0x3e>
		res = dir_sdi(dj, 0);
   10a16:	2100      	movs	r1, #0
   10a18:	4650      	mov	r0, sl
   10a1a:	4bb2      	ldr	r3, [pc, #712]	; (10ce4 <follow_path+0x2f8>)
   10a1c:	4798      	blx	r3
		dj->dir = 0;
   10a1e:	2300      	movs	r3, #0
   10a20:	617b      	str	r3, [r7, #20]
   10a22:	e13a      	b.n	10c9a <follow_path+0x2ae>
		path++;
   10a24:	3501      	adds	r5, #1
   10a26:	e7ef      	b.n	10a08 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   10a28:	3501      	adds	r5, #1
   10a2a:	7828      	ldrb	r0, [r5, #0]
   10a2c:	282f      	cmp	r0, #47	; 0x2f
   10a2e:	d0fb      	beq.n	10a28 <follow_path+0x3c>
   10a30:	285c      	cmp	r0, #92	; 0x5c
   10a32:	d0f9      	beq.n	10a28 <follow_path+0x3c>
	lfn = dj->lfn;
   10a34:	69fb      	ldr	r3, [r7, #28]
   10a36:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
   10a38:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   10a3a:	281f      	cmp	r0, #31
   10a3c:	d800      	bhi.n	10a40 <follow_path+0x54>
   10a3e:	e13b      	b.n	10cb8 <follow_path+0x2cc>
   10a40:	282f      	cmp	r0, #47	; 0x2f
   10a42:	d100      	bne.n	10a46 <follow_path+0x5a>
   10a44:	e13b      	b.n	10cbe <follow_path+0x2d2>
   10a46:	285c      	cmp	r0, #92	; 0x5c
   10a48:	d100      	bne.n	10a4c <follow_path+0x60>
   10a4a:	e13b      	b.n	10cc4 <follow_path+0x2d8>
   10a4c:	1c6e      	adds	r6, r5, #1
   10a4e:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   10a50:	2380      	movs	r3, #128	; 0x80
   10a52:	005b      	lsls	r3, r3, #1
   10a54:	4698      	mov	r8, r3
   10a56:	46bb      	mov	fp, r7
   10a58:	002b      	movs	r3, r5
   10a5a:	0025      	movs	r5, r4
   10a5c:	0034      	movs	r4, r6
   10a5e:	4656      	mov	r6, sl
   10a60:	4699      	mov	r9, r3
   10a62:	e011      	b.n	10a88 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   10a64:	2b00      	cmp	r3, #0
   10a66:	d135      	bne.n	10ad4 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
   10a68:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
   10a6a:	1c6b      	adds	r3, r5, #1
   10a6c:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   10a6e:	281f      	cmp	r0, #31
   10a70:	d91e      	bls.n	10ab0 <follow_path+0xc4>
   10a72:	282f      	cmp	r0, #47	; 0x2f
   10a74:	d100      	bne.n	10a78 <follow_path+0x8c>
   10a76:	e128      	b.n	10cca <follow_path+0x2de>
   10a78:	285c      	cmp	r0, #92	; 0x5c
   10a7a:	d100      	bne.n	10a7e <follow_path+0x92>
   10a7c:	e142      	b.n	10d04 <follow_path+0x318>
   10a7e:	3602      	adds	r6, #2
   10a80:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   10a82:	4543      	cmp	r3, r8
   10a84:	d026      	beq.n	10ad4 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
   10a86:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   10a88:	2101      	movs	r1, #1
   10a8a:	4b97      	ldr	r3, [pc, #604]	; (10ce8 <follow_path+0x2fc>)
   10a8c:	4798      	blx	r3
   10a8e:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   10a90:	d020      	beq.n	10ad4 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   10a92:	287f      	cmp	r0, #127	; 0x7f
   10a94:	d8e8      	bhi.n	10a68 <follow_path+0x7c>
	while (*str && *str != chr) str++;
   10a96:	2822      	cmp	r0, #34	; 0x22
   10a98:	d100      	bne.n	10a9c <follow_path+0xb0>
   10a9a:	e0fd      	b.n	10c98 <follow_path+0x2ac>
   10a9c:	232a      	movs	r3, #42	; 0x2a
   10a9e:	4a93      	ldr	r2, [pc, #588]	; (10cec <follow_path+0x300>)
   10aa0:	b29f      	uxth	r7, r3
   10aa2:	428f      	cmp	r7, r1
   10aa4:	d0de      	beq.n	10a64 <follow_path+0x78>
   10aa6:	3201      	adds	r2, #1
   10aa8:	7813      	ldrb	r3, [r2, #0]
   10aaa:	2b00      	cmp	r3, #0
   10aac:	d1f8      	bne.n	10aa0 <follow_path+0xb4>
   10aae:	e7db      	b.n	10a68 <follow_path+0x7c>
   10ab0:	002c      	movs	r4, r5
   10ab2:	465f      	mov	r7, fp
   10ab4:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   10ab6:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   10ab8:	2604      	movs	r6, #4
   10aba:	e10b      	b.n	10cd4 <follow_path+0x2e8>
		di--;
   10abc:	3c01      	subs	r4, #1
   10abe:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
   10ac0:	2c00      	cmp	r4, #0
   10ac2:	d100      	bne.n	10ac6 <follow_path+0xda>
   10ac4:	e0e8      	b.n	10c98 <follow_path+0x2ac>
		w = lfn[di-1];
   10ac6:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   10ac8:	2a20      	cmp	r2, #32
   10aca:	d0f7      	beq.n	10abc <follow_path+0xd0>
   10acc:	2a2e      	cmp	r2, #46	; 0x2e
   10ace:	d0f5      	beq.n	10abc <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   10ad0:	2c00      	cmp	r4, #0
   10ad2:	d101      	bne.n	10ad8 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   10ad4:	2006      	movs	r0, #6
	return res;
   10ad6:	e0e0      	b.n	10c9a <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
   10ad8:	0063      	lsls	r3, r4, #1
   10ada:	4698      	mov	r8, r3
   10adc:	2300      	movs	r3, #0
   10ade:	4652      	mov	r2, sl
   10ae0:	4641      	mov	r1, r8
   10ae2:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
   10ae4:	220b      	movs	r2, #11
   10ae6:	2120      	movs	r1, #32
   10ae8:	69b8      	ldr	r0, [r7, #24]
   10aea:	4b81      	ldr	r3, [pc, #516]	; (10cf0 <follow_path+0x304>)
   10aec:	4798      	blx	r3
   10aee:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   10af0:	2300      	movs	r3, #0
   10af2:	e001      	b.n	10af8 <follow_path+0x10c>
   10af4:	3301      	adds	r3, #1
   10af6:	3202      	adds	r2, #2
   10af8:	8811      	ldrh	r1, [r2, #0]
   10afa:	2920      	cmp	r1, #32
   10afc:	d0fa      	beq.n	10af4 <follow_path+0x108>
   10afe:	292e      	cmp	r1, #46	; 0x2e
   10b00:	d0f8      	beq.n	10af4 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
   10b02:	2b00      	cmp	r3, #0
   10b04:	d001      	beq.n	10b0a <follow_path+0x11e>
   10b06:	2203      	movs	r2, #3
   10b08:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   10b0a:	4652      	mov	r2, sl
   10b0c:	4442      	add	r2, r8
   10b0e:	3a02      	subs	r2, #2
   10b10:	8812      	ldrh	r2, [r2, #0]
   10b12:	2a2e      	cmp	r2, #46	; 0x2e
   10b14:	d009      	beq.n	10b2a <follow_path+0x13e>
   10b16:	4642      	mov	r2, r8
   10b18:	3a04      	subs	r2, #4
   10b1a:	4452      	add	r2, sl
   10b1c:	3c01      	subs	r4, #1
   10b1e:	2c00      	cmp	r4, #0
   10b20:	d003      	beq.n	10b2a <follow_path+0x13e>
   10b22:	3a02      	subs	r2, #2
   10b24:	8851      	ldrh	r1, [r2, #2]
   10b26:	292e      	cmp	r1, #46	; 0x2e
   10b28:	d1f8      	bne.n	10b1c <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
   10b2a:	2208      	movs	r2, #8
   10b2c:	9201      	str	r2, [sp, #4]
   10b2e:	2200      	movs	r2, #0
   10b30:	4693      	mov	fp, r2
   10b32:	4691      	mov	r9, r2
   10b34:	46a0      	mov	r8, r4
   10b36:	e006      	b.n	10b46 <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   10b38:	4544      	cmp	r4, r8
   10b3a:	d100      	bne.n	10b3e <follow_path+0x152>
   10b3c:	e0e6      	b.n	10d0c <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
   10b3e:	2303      	movs	r3, #3
   10b40:	431e      	orrs	r6, r3
   10b42:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
   10b44:	0023      	movs	r3, r4
   10b46:	1c5c      	adds	r4, r3, #1
   10b48:	005b      	lsls	r3, r3, #1
   10b4a:	4652      	mov	r2, sl
   10b4c:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
   10b4e:	2800      	cmp	r0, #0
   10b50:	d02c      	beq.n	10bac <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   10b52:	2820      	cmp	r0, #32
   10b54:	d0f3      	beq.n	10b3e <follow_path+0x152>
   10b56:	282e      	cmp	r0, #46	; 0x2e
   10b58:	d0ee      	beq.n	10b38 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
   10b5a:	9b01      	ldr	r3, [sp, #4]
   10b5c:	459b      	cmp	fp, r3
   10b5e:	d219      	bcs.n	10b94 <follow_path+0x1a8>
   10b60:	4544      	cmp	r4, r8
   10b62:	d100      	bne.n	10b66 <follow_path+0x17a>
   10b64:	e0d2      	b.n	10d0c <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
   10b66:	287f      	cmp	r0, #127	; 0x7f
   10b68:	d85e      	bhi.n	10c28 <follow_path+0x23c>
	while (*str && *str != chr) str++;
   10b6a:	282b      	cmp	r0, #43	; 0x2b
   10b6c:	d06e      	beq.n	10c4c <follow_path+0x260>
   10b6e:	232c      	movs	r3, #44	; 0x2c
   10b70:	4a60      	ldr	r2, [pc, #384]	; (10cf4 <follow_path+0x308>)
   10b72:	b299      	uxth	r1, r3
   10b74:	4281      	cmp	r1, r0
   10b76:	d067      	beq.n	10c48 <follow_path+0x25c>
   10b78:	3201      	adds	r2, #1
   10b7a:	7813      	ldrb	r3, [r2, #0]
   10b7c:	2b00      	cmp	r3, #0
   10b7e:	d1f8      	bne.n	10b72 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
   10b80:	0003      	movs	r3, r0
   10b82:	3b41      	subs	r3, #65	; 0x41
   10b84:	b29b      	uxth	r3, r3
   10b86:	2b19      	cmp	r3, #25
   10b88:	d86c      	bhi.n	10c64 <follow_path+0x278>
					b |= 2;
   10b8a:	2302      	movs	r3, #2
   10b8c:	464a      	mov	r2, r9
   10b8e:	431a      	orrs	r2, r3
   10b90:	4691      	mov	r9, r2
   10b92:	e05f      	b.n	10c54 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
   10b94:	9b01      	ldr	r3, [sp, #4]
   10b96:	2b0b      	cmp	r3, #11
   10b98:	d03b      	beq.n	10c12 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   10b9a:	4544      	cmp	r4, r8
   10b9c:	d100      	bne.n	10ba0 <follow_path+0x1b4>
   10b9e:	e0b9      	b.n	10d14 <follow_path+0x328>
   10ba0:	2303      	movs	r3, #3
   10ba2:	431e      	orrs	r6, r3
   10ba4:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
   10ba6:	4544      	cmp	r4, r8
   10ba8:	d800      	bhi.n	10bac <follow_path+0x1c0>
   10baa:	e0b3      	b.n	10d14 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   10bac:	69bb      	ldr	r3, [r7, #24]
   10bae:	781a      	ldrb	r2, [r3, #0]
   10bb0:	2ae5      	cmp	r2, #229	; 0xe5
   10bb2:	d036      	beq.n	10c22 <follow_path+0x236>
	if (ni == 8) b <<= 2;
   10bb4:	9b01      	ldr	r3, [sp, #4]
   10bb6:	2b08      	cmp	r3, #8
   10bb8:	d060      	beq.n	10c7c <follow_path+0x290>
   10bba:	230c      	movs	r3, #12
   10bbc:	464a      	mov	r2, r9
   10bbe:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   10bc0:	2b0c      	cmp	r3, #12
   10bc2:	d060      	beq.n	10c86 <follow_path+0x29a>
   10bc4:	43d2      	mvns	r2, r2
   10bc6:	0792      	lsls	r2, r2, #30
   10bc8:	d05d      	beq.n	10c86 <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   10bca:	07b2      	lsls	r2, r6, #30
   10bcc:	d406      	bmi.n	10bdc <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   10bce:	2203      	movs	r2, #3
   10bd0:	4649      	mov	r1, r9
   10bd2:	400a      	ands	r2, r1
   10bd4:	2a01      	cmp	r2, #1
   10bd6:	d059      	beq.n	10c8c <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   10bd8:	2b04      	cmp	r3, #4
   10bda:	d05a      	beq.n	10c92 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
   10bdc:	69bb      	ldr	r3, [r7, #24]
   10bde:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
   10be0:	0038      	movs	r0, r7
   10be2:	4b45      	ldr	r3, [pc, #276]	; (10cf8 <follow_path+0x30c>)
   10be4:	4798      	blx	r3
			ns = *(dj->fn+NS);
   10be6:	69bb      	ldr	r3, [r7, #24]
   10be8:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
   10bea:	2800      	cmp	r0, #0
   10bec:	d15c      	bne.n	10ca8 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   10bee:	075b      	lsls	r3, r3, #29
   10bf0:	d453      	bmi.n	10c9a <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   10bf2:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   10bf4:	7ad3      	ldrb	r3, [r2, #11]
   10bf6:	06db      	lsls	r3, r3, #27
   10bf8:	d55c      	bpl.n	10cb4 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
   10bfa:	7d51      	ldrb	r1, [r2, #21]
   10bfc:	0209      	lsls	r1, r1, #8
   10bfe:	7d13      	ldrb	r3, [r2, #20]
   10c00:	430b      	orrs	r3, r1
   10c02:	041b      	lsls	r3, r3, #16
   10c04:	7ed1      	ldrb	r1, [r2, #27]
   10c06:	0209      	lsls	r1, r1, #8
   10c08:	7e92      	ldrb	r2, [r2, #26]
   10c0a:	430a      	orrs	r2, r1
   10c0c:	4313      	orrs	r3, r2
   10c0e:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
   10c10:	e70b      	b.n	10a2a <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
   10c12:	2303      	movs	r3, #3
   10c14:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   10c16:	69bb      	ldr	r3, [r7, #24]
   10c18:	781a      	ldrb	r2, [r3, #0]
   10c1a:	2ae5      	cmp	r2, #229	; 0xe5
   10c1c:	d1cd      	bne.n	10bba <follow_path+0x1ce>
   10c1e:	220b      	movs	r2, #11
   10c20:	9201      	str	r2, [sp, #4]
   10c22:	2205      	movs	r2, #5
   10c24:	701a      	strb	r2, [r3, #0]
   10c26:	e7c5      	b.n	10bb4 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   10c28:	2100      	movs	r1, #0
   10c2a:	4b2f      	ldr	r3, [pc, #188]	; (10ce8 <follow_path+0x2fc>)
   10c2c:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   10c2e:	2800      	cmp	r0, #0
   10c30:	d100      	bne.n	10c34 <follow_path+0x248>
   10c32:	e079      	b.n	10d28 <follow_path+0x33c>
   10c34:	4b31      	ldr	r3, [pc, #196]	; (10cfc <follow_path+0x310>)
   10c36:	469c      	mov	ip, r3
   10c38:	4460      	add	r0, ip
   10c3a:	3880      	subs	r0, #128	; 0x80
   10c3c:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
   10c3e:	2302      	movs	r3, #2
   10c40:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   10c42:	2800      	cmp	r0, #0
   10c44:	d002      	beq.n	10c4c <follow_path+0x260>
   10c46:	e790      	b.n	10b6a <follow_path+0x17e>
   10c48:	2b00      	cmp	r3, #0
   10c4a:	d099      	beq.n	10b80 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   10c4c:	2303      	movs	r3, #3
   10c4e:	431e      	orrs	r6, r3
   10c50:	b2f6      	uxtb	r6, r6
   10c52:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
   10c54:	69bb      	ldr	r3, [r7, #24]
   10c56:	465a      	mov	r2, fp
   10c58:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
   10c5a:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
   10c5c:	2201      	movs	r2, #1
   10c5e:	4694      	mov	ip, r2
   10c60:	44e3      	add	fp, ip
   10c62:	e770      	b.n	10b46 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
   10c64:	0003      	movs	r3, r0
   10c66:	3b61      	subs	r3, #97	; 0x61
   10c68:	b29b      	uxth	r3, r3
   10c6a:	2b19      	cmp	r3, #25
   10c6c:	d8f2      	bhi.n	10c54 <follow_path+0x268>
						b |= 1; w -= 0x20;
   10c6e:	2301      	movs	r3, #1
   10c70:	464a      	mov	r2, r9
   10c72:	431a      	orrs	r2, r3
   10c74:	4691      	mov	r9, r2
   10c76:	3820      	subs	r0, #32
   10c78:	b280      	uxth	r0, r0
   10c7a:	e7eb      	b.n	10c54 <follow_path+0x268>
	if (ni == 8) b <<= 2;
   10c7c:	464b      	mov	r3, r9
   10c7e:	009b      	lsls	r3, r3, #2
   10c80:	b2db      	uxtb	r3, r3
   10c82:	4699      	mov	r9, r3
   10c84:	e799      	b.n	10bba <follow_path+0x1ce>
		cf |= NS_LFN;
   10c86:	2202      	movs	r2, #2
   10c88:	4316      	orrs	r6, r2
   10c8a:	e79e      	b.n	10bca <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   10c8c:	320f      	adds	r2, #15
   10c8e:	4316      	orrs	r6, r2
   10c90:	e7a2      	b.n	10bd8 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   10c92:	3304      	adds	r3, #4
   10c94:	431e      	orrs	r6, r3
   10c96:	e7a1      	b.n	10bdc <follow_path+0x1f0>
   10c98:	2006      	movs	r0, #6
}
   10c9a:	b003      	add	sp, #12
   10c9c:	bc3c      	pop	{r2, r3, r4, r5}
   10c9e:	4690      	mov	r8, r2
   10ca0:	4699      	mov	r9, r3
   10ca2:	46a2      	mov	sl, r4
   10ca4:	46ab      	mov	fp, r5
   10ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   10ca8:	2804      	cmp	r0, #4
   10caa:	d1f6      	bne.n	10c9a <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   10cac:	075b      	lsls	r3, r3, #29
   10cae:	d4f4      	bmi.n	10c9a <follow_path+0x2ae>
   10cb0:	3001      	adds	r0, #1
   10cb2:	e7f2      	b.n	10c9a <follow_path+0x2ae>
				res = FR_NO_PATH; break;
   10cb4:	2005      	movs	r0, #5
   10cb6:	e7f0      	b.n	10c9a <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
   10cb8:	2301      	movs	r3, #1
	si = di = 0;
   10cba:	2400      	movs	r4, #0
   10cbc:	e6fb      	b.n	10ab6 <follow_path+0xca>
		w = p[si++];					/* Get a character */
   10cbe:	2301      	movs	r3, #1
	si = di = 0;
   10cc0:	2400      	movs	r4, #0
   10cc2:	e005      	b.n	10cd0 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
   10cc4:	2301      	movs	r3, #1
	si = di = 0;
   10cc6:	2400      	movs	r4, #0
   10cc8:	e002      	b.n	10cd0 <follow_path+0x2e4>
   10cca:	002c      	movs	r4, r5
   10ccc:	465f      	mov	r7, fp
   10cce:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   10cd0:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   10cd2:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
   10cd4:	2c00      	cmp	r4, #0
   10cd6:	d0df      	beq.n	10c98 <follow_path+0x2ac>
   10cd8:	4b09      	ldr	r3, [pc, #36]	; (10d00 <follow_path+0x314>)
   10cda:	18e3      	adds	r3, r4, r3
   10cdc:	005b      	lsls	r3, r3, #1
   10cde:	4453      	add	r3, sl
   10ce0:	e6f1      	b.n	10ac6 <follow_path+0xda>
   10ce2:	46c0      	nop			; (mov r8, r8)
   10ce4:	0000fe95 	.word	0x0000fe95
   10ce8:	0001129d 	.word	0x0001129d
   10cec:	0001b4e1 	.word	0x0001b4e1
   10cf0:	0000f82d 	.word	0x0000f82d
   10cf4:	0001b4ed 	.word	0x0001b4ed
   10cf8:	000102d5 	.word	0x000102d5
   10cfc:	0001b460 	.word	0x0001b460
   10d00:	7fffffff 	.word	0x7fffffff
   10d04:	002c      	movs	r4, r5
   10d06:	465f      	mov	r7, fp
   10d08:	464d      	mov	r5, r9
   10d0a:	e7e1      	b.n	10cd0 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
   10d0c:	9b01      	ldr	r3, [sp, #4]
   10d0e:	2b0b      	cmp	r3, #11
   10d10:	d100      	bne.n	10d14 <follow_path+0x328>
   10d12:	e77e      	b.n	10c12 <follow_path+0x226>
			b <<= 2; continue;
   10d14:	464b      	mov	r3, r9
   10d16:	009b      	lsls	r3, r3, #2
   10d18:	b2db      	uxtb	r3, r3
   10d1a:	4699      	mov	r9, r3
   10d1c:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
   10d1e:	220b      	movs	r2, #11
   10d20:	9201      	str	r2, [sp, #4]
   10d22:	3a03      	subs	r2, #3
   10d24:	4693      	mov	fp, r2
   10d26:	e70e      	b.n	10b46 <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
   10d28:	2302      	movs	r3, #2
   10d2a:	431e      	orrs	r6, r3
   10d2c:	e78e      	b.n	10c4c <follow_path+0x260>
   10d2e:	46c0      	nop			; (mov r8, r8)

00010d30 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
   10d30:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   10d32:	2807      	cmp	r0, #7
   10d34:	d901      	bls.n	10d3a <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
   10d36:	0018      	movs	r0, r3
   10d38:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
   10d3a:	0083      	lsls	r3, r0, #2
   10d3c:	4a07      	ldr	r2, [pc, #28]	; (10d5c <f_mount+0x2c>)
   10d3e:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
   10d40:	2b00      	cmp	r3, #0
   10d42:	d001      	beq.n	10d48 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
   10d44:	2200      	movs	r2, #0
   10d46:	701a      	strb	r2, [r3, #0]
	if (fs) {
   10d48:	2900      	cmp	r1, #0
   10d4a:	d001      	beq.n	10d50 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
   10d4c:	2300      	movs	r3, #0
   10d4e:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
   10d50:	0080      	lsls	r0, r0, #2
   10d52:	4b02      	ldr	r3, [pc, #8]	; (10d5c <f_mount+0x2c>)
   10d54:	50c1      	str	r1, [r0, r3]
	return FR_OK;
   10d56:	2300      	movs	r3, #0
   10d58:	e7ed      	b.n	10d36 <f_mount+0x6>
   10d5a:	46c0      	nop			; (mov r8, r8)
   10d5c:	20004178 	.word	0x20004178

00010d60 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   10d60:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d62:	46c6      	mov	lr, r8
   10d64:	b500      	push	{lr}
   10d66:	4c59      	ldr	r4, [pc, #356]	; (10ecc <f_open+0x16c>)
   10d68:	44a5      	add	sp, r4
   10d6a:	0005      	movs	r5, r0
   10d6c:	9101      	str	r1, [sp, #4]
   10d6e:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   10d70:	2300      	movs	r3, #0
   10d72:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   10d74:	261f      	movs	r6, #31
   10d76:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   10d78:	221e      	movs	r2, #30
   10d7a:	403a      	ands	r2, r7
   10d7c:	a985      	add	r1, sp, #532	; 0x214
   10d7e:	a801      	add	r0, sp, #4
   10d80:	4b53      	ldr	r3, [pc, #332]	; (10ed0 <f_open+0x170>)
   10d82:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   10d84:	ab82      	add	r3, sp, #520	; 0x208
   10d86:	938b      	str	r3, [sp, #556]	; 0x22c
   10d88:	ab02      	add	r3, sp, #8
   10d8a:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
   10d8c:	2800      	cmp	r0, #0
   10d8e:	d006      	beq.n	10d9e <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
   10d90:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   10d92:	231c      	movs	r3, #28
   10d94:	423b      	tst	r3, r7
   10d96:	d145      	bne.n	10e24 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   10d98:	2800      	cmp	r0, #0
   10d9a:	d13d      	bne.n	10e18 <f_open+0xb8>
   10d9c:	e00c      	b.n	10db8 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
   10d9e:	9901      	ldr	r1, [sp, #4]
   10da0:	a885      	add	r0, sp, #532	; 0x214
   10da2:	4b4c      	ldr	r3, [pc, #304]	; (10ed4 <f_open+0x174>)
   10da4:	4798      	blx	r3
	dir = dj.dir;
   10da6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   10da8:	2800      	cmp	r0, #0
   10daa:	d1f2      	bne.n	10d92 <f_open+0x32>
		if (!dir)	/* Current dir itself */
   10dac:	2c00      	cmp	r4, #0
   10dae:	d100      	bne.n	10db2 <f_open+0x52>
   10db0:	e086      	b.n	10ec0 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   10db2:	231c      	movs	r3, #28
   10db4:	423b      	tst	r3, r7
   10db6:	d146      	bne.n	10e46 <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   10db8:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
   10dba:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   10dbc:	06da      	lsls	r2, r3, #27
   10dbe:	d42b      	bmi.n	10e18 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   10dc0:	07ba      	lsls	r2, r7, #30
   10dc2:	d502      	bpl.n	10dca <f_open+0x6a>
					res = FR_DENIED;
   10dc4:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   10dc6:	07db      	lsls	r3, r3, #31
   10dc8:	d426      	bmi.n	10e18 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   10dca:	073b      	lsls	r3, r7, #28
   10dcc:	d501      	bpl.n	10dd2 <f_open+0x72>
			mode |= FA__WRITTEN;
   10dce:	2320      	movs	r3, #32
   10dd0:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   10dd2:	9b85      	ldr	r3, [sp, #532]	; 0x214
   10dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10dd6:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
   10dd8:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
   10dda:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   10ddc:	7d62      	ldrb	r2, [r4, #21]
   10dde:	0212      	lsls	r2, r2, #8
   10de0:	7d23      	ldrb	r3, [r4, #20]
   10de2:	4313      	orrs	r3, r2
   10de4:	041b      	lsls	r3, r3, #16
   10de6:	7ee1      	ldrb	r1, [r4, #27]
   10de8:	0209      	lsls	r1, r1, #8
   10dea:	7ea2      	ldrb	r2, [r4, #26]
   10dec:	430a      	orrs	r2, r1
   10dee:	4313      	orrs	r3, r2
   10df0:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   10df2:	7fe3      	ldrb	r3, [r4, #31]
   10df4:	061b      	lsls	r3, r3, #24
   10df6:	7fa2      	ldrb	r2, [r4, #30]
   10df8:	0412      	lsls	r2, r2, #16
   10dfa:	4313      	orrs	r3, r2
   10dfc:	7f22      	ldrb	r2, [r4, #28]
   10dfe:	4313      	orrs	r3, r2
   10e00:	7f62      	ldrb	r2, [r4, #29]
   10e02:	0212      	lsls	r2, r2, #8
   10e04:	4313      	orrs	r3, r2
   10e06:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
   10e08:	2300      	movs	r3, #0
   10e0a:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
   10e0c:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   10e0e:	9b85      	ldr	r3, [sp, #532]	; 0x214
   10e10:	602b      	str	r3, [r5, #0]
   10e12:	88db      	ldrh	r3, [r3, #6]
   10e14:	80ab      	strh	r3, [r5, #4]
   10e16:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
   10e18:	238e      	movs	r3, #142	; 0x8e
   10e1a:	009b      	lsls	r3, r3, #2
   10e1c:	449d      	add	sp, r3
   10e1e:	bc04      	pop	{r2}
   10e20:	4690      	mov	r8, r2
   10e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   10e24:	2804      	cmp	r0, #4
   10e26:	d005      	beq.n	10e34 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   10e28:	2308      	movs	r3, #8
   10e2a:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   10e2c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   10e2e:	2800      	cmp	r0, #0
   10e30:	d0d3      	beq.n	10dda <f_open+0x7a>
   10e32:	e7f1      	b.n	10e18 <f_open+0xb8>
				res = dir_register(&dj);
   10e34:	a885      	add	r0, sp, #532	; 0x214
   10e36:	4b28      	ldr	r3, [pc, #160]	; (10ed8 <f_open+0x178>)
   10e38:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   10e3a:	2308      	movs	r3, #8
   10e3c:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   10e3e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   10e40:	2800      	cmp	r0, #0
   10e42:	d008      	beq.n	10e56 <f_open+0xf6>
   10e44:	e7e8      	b.n	10e18 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   10e46:	7ae3      	ldrb	r3, [r4, #11]
   10e48:	2211      	movs	r2, #17
				res = FR_DENIED;
   10e4a:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   10e4c:	421a      	tst	r2, r3
   10e4e:	d1e3      	bne.n	10e18 <f_open+0xb8>
					res = FR_EXIST;
   10e50:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   10e52:	077b      	lsls	r3, r7, #29
   10e54:	d4e0      	bmi.n	10e18 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   10e56:	0733      	lsls	r3, r6, #28
   10e58:	d5bb      	bpl.n	10dd2 <f_open+0x72>
			dw = get_fattime();					/* Created time */
   10e5a:	4b20      	ldr	r3, [pc, #128]	; (10edc <f_open+0x17c>)
   10e5c:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
   10e5e:	73a0      	strb	r0, [r4, #14]
   10e60:	0a03      	lsrs	r3, r0, #8
   10e62:	73e3      	strb	r3, [r4, #15]
   10e64:	0c03      	lsrs	r3, r0, #16
   10e66:	7423      	strb	r3, [r4, #16]
   10e68:	0e00      	lsrs	r0, r0, #24
   10e6a:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   10e6c:	2300      	movs	r3, #0
   10e6e:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   10e70:	7723      	strb	r3, [r4, #28]
   10e72:	7763      	strb	r3, [r4, #29]
   10e74:	77a3      	strb	r3, [r4, #30]
   10e76:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
   10e78:	7d62      	ldrb	r2, [r4, #21]
   10e7a:	0212      	lsls	r2, r2, #8
   10e7c:	7d27      	ldrb	r7, [r4, #20]
   10e7e:	4317      	orrs	r7, r2
   10e80:	043f      	lsls	r7, r7, #16
   10e82:	7ee1      	ldrb	r1, [r4, #27]
   10e84:	0209      	lsls	r1, r1, #8
   10e86:	7ea2      	ldrb	r2, [r4, #26]
   10e88:	430a      	orrs	r2, r1
   10e8a:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
   10e8c:	76a3      	strb	r3, [r4, #26]
   10e8e:	76e3      	strb	r3, [r4, #27]
   10e90:	7523      	strb	r3, [r4, #20]
   10e92:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
   10e94:	9885      	ldr	r0, [sp, #532]	; 0x214
   10e96:	3301      	adds	r3, #1
   10e98:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   10e9a:	2f00      	cmp	r7, #0
   10e9c:	d097      	beq.n	10dce <f_open+0x6e>
				dw = dj.fs->winsect;
   10e9e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   10ea0:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
   10ea2:	0039      	movs	r1, r7
   10ea4:	4b0e      	ldr	r3, [pc, #56]	; (10ee0 <f_open+0x180>)
   10ea6:	4798      	blx	r3
				if (res == FR_OK) {
   10ea8:	2800      	cmp	r0, #0
   10eaa:	d1b5      	bne.n	10e18 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   10eac:	9885      	ldr	r0, [sp, #532]	; 0x214
   10eae:	3f01      	subs	r7, #1
   10eb0:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
   10eb2:	4641      	mov	r1, r8
   10eb4:	4b0b      	ldr	r3, [pc, #44]	; (10ee4 <f_open+0x184>)
   10eb6:	4798      	blx	r3
	if (res == FR_OK) {
   10eb8:	2800      	cmp	r0, #0
   10eba:	d100      	bne.n	10ebe <f_open+0x15e>
   10ebc:	e787      	b.n	10dce <f_open+0x6e>
   10ebe:	e7ab      	b.n	10e18 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   10ec0:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
   10ec2:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   10ec4:	423b      	tst	r3, r7
   10ec6:	d0b2      	beq.n	10e2e <f_open+0xce>
			res = FR_INVALID_NAME;
   10ec8:	2006      	movs	r0, #6
   10eca:	e7ad      	b.n	10e28 <f_open+0xc8>
   10ecc:	fffffdc8 	.word	0xfffffdc8
   10ed0:	0000f949 	.word	0x0000f949
   10ed4:	000109ed 	.word	0x000109ed
   10ed8:	0001046d 	.word	0x0001046d
   10edc:	0000f7c9 	.word	0x0000f7c9
   10ee0:	00010139 	.word	0x00010139
   10ee4:	0000fcf9 	.word	0x0000fcf9

00010ee8 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   10ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10eea:	46de      	mov	lr, fp
   10eec:	4657      	mov	r7, sl
   10eee:	464e      	mov	r6, r9
   10ef0:	4645      	mov	r5, r8
   10ef2:	b5e0      	push	{r5, r6, r7, lr}
   10ef4:	b083      	sub	sp, #12
   10ef6:	0004      	movs	r4, r0
   10ef8:	000d      	movs	r5, r1
   10efa:	0016      	movs	r6, r2
   10efc:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   10efe:	2300      	movs	r3, #0
   10f00:	464a      	mov	r2, r9
   10f02:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   10f04:	8881      	ldrh	r1, [r0, #4]
   10f06:	6800      	ldr	r0, [r0, #0]
   10f08:	4b7f      	ldr	r3, [pc, #508]	; (11108 <f_write+0x220>)
   10f0a:	4798      	blx	r3
   10f0c:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   10f0e:	2800      	cmp	r0, #0
   10f10:	d000      	beq.n	10f14 <f_write+0x2c>
   10f12:	e0f1      	b.n	110f8 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   10f14:	79a3      	ldrb	r3, [r4, #6]
   10f16:	b25a      	sxtb	r2, r3
   10f18:	2a00      	cmp	r2, #0
   10f1a:	da00      	bge.n	10f1e <f_write+0x36>
   10f1c:	e0ea      	b.n	110f4 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   10f1e:	079b      	lsls	r3, r3, #30
   10f20:	d402      	bmi.n	10f28 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
   10f22:	2307      	movs	r3, #7
   10f24:	9300      	str	r3, [sp, #0]
   10f26:	e0e7      	b.n	110f8 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   10f28:	68e3      	ldr	r3, [r4, #12]
   10f2a:	199a      	adds	r2, r3, r6
   10f2c:	4293      	cmp	r3, r2
   10f2e:	d810      	bhi.n	10f52 <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
   10f30:	2e00      	cmp	r6, #0
   10f32:	d00e      	beq.n	10f52 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   10f34:	002f      	movs	r7, r5
   10f36:	e07b      	b.n	11030 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   10f38:	2100      	movs	r1, #0
   10f3a:	4b74      	ldr	r3, [pc, #464]	; (1110c <f_write+0x224>)
   10f3c:	4798      	blx	r3
   10f3e:	0003      	movs	r3, r0
   10f40:	6120      	str	r0, [r4, #16]
   10f42:	e003      	b.n	10f4c <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   10f44:	6961      	ldr	r1, [r4, #20]
   10f46:	4b71      	ldr	r3, [pc, #452]	; (1110c <f_write+0x224>)
   10f48:	4798      	blx	r3
   10f4a:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   10f4c:	2b00      	cmp	r3, #0
   10f4e:	d000      	beq.n	10f52 <f_write+0x6a>
   10f50:	e080      	b.n	11054 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   10f52:	68a3      	ldr	r3, [r4, #8]
   10f54:	68e2      	ldr	r2, [r4, #12]
   10f56:	4293      	cmp	r3, r2
   10f58:	d900      	bls.n	10f5c <f_write+0x74>
   10f5a:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   10f5c:	79a3      	ldrb	r3, [r4, #6]
   10f5e:	2220      	movs	r2, #32
   10f60:	4313      	orrs	r3, r2
   10f62:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
   10f64:	e0c8      	b.n	110f8 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   10f66:	79a2      	ldrb	r2, [r4, #6]
   10f68:	3b81      	subs	r3, #129	; 0x81
   10f6a:	4313      	orrs	r3, r2
   10f6c:	71a3      	strb	r3, [r4, #6]
   10f6e:	2302      	movs	r3, #2
   10f70:	9300      	str	r3, [sp, #0]
   10f72:	e0c1      	b.n	110f8 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   10f74:	79a2      	ldrb	r2, [r4, #6]
   10f76:	3b7f      	subs	r3, #127	; 0x7f
   10f78:	4313      	orrs	r3, r2
   10f7a:	71a3      	strb	r3, [r4, #6]
   10f7c:	2301      	movs	r3, #1
   10f7e:	9300      	str	r3, [sp, #0]
   10f80:	e0ba      	b.n	110f8 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   10f82:	2100      	movs	r1, #0
   10f84:	4b62      	ldr	r3, [pc, #392]	; (11110 <f_write+0x228>)
   10f86:	4798      	blx	r3
   10f88:	2800      	cmp	r0, #0
   10f8a:	d06d      	beq.n	11068 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
   10f8c:	79a2      	ldrb	r2, [r4, #6]
   10f8e:	2380      	movs	r3, #128	; 0x80
   10f90:	425b      	negs	r3, r3
   10f92:	4313      	orrs	r3, r2
   10f94:	71a3      	strb	r3, [r4, #6]
   10f96:	2301      	movs	r3, #1
   10f98:	9300      	str	r3, [sp, #0]
   10f9a:	e0ad      	b.n	110f8 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   10f9c:	79a2      	ldrb	r2, [r4, #6]
   10f9e:	2380      	movs	r3, #128	; 0x80
   10fa0:	425b      	negs	r3, r3
   10fa2:	4313      	orrs	r3, r2
   10fa4:	71a3      	strb	r3, [r4, #6]
   10fa6:	2302      	movs	r3, #2
   10fa8:	9300      	str	r3, [sp, #0]
   10faa:	e0a5      	b.n	110f8 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
   10fac:	79a2      	ldrb	r2, [r4, #6]
   10fae:	2380      	movs	r3, #128	; 0x80
   10fb0:	425b      	negs	r3, r3
   10fb2:	4313      	orrs	r3, r2
   10fb4:	71a3      	strb	r3, [r4, #6]
   10fb6:	2301      	movs	r3, #1
   10fb8:	9300      	str	r3, [sp, #0]
   10fba:	e09d      	b.n	110f8 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   10fbc:	0240      	lsls	r0, r0, #9
   10fbe:	1839      	adds	r1, r7, r0
   10fc0:	3330      	adds	r3, #48	; 0x30
   10fc2:	0018      	movs	r0, r3
   10fc4:	2280      	movs	r2, #128	; 0x80
   10fc6:	0092      	lsls	r2, r2, #2
   10fc8:	4b52      	ldr	r3, [pc, #328]	; (11114 <f_write+0x22c>)
   10fca:	4798      	blx	r3
					fp->fs->wflag = 0;
   10fcc:	2300      	movs	r3, #0
   10fce:	6822      	ldr	r2, [r4, #0]
   10fd0:	7113      	strb	r3, [r2, #4]
   10fd2:	e072      	b.n	110ba <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   10fd4:	68a3      	ldr	r3, [r4, #8]
   10fd6:	68e2      	ldr	r2, [r4, #12]
   10fd8:	4293      	cmp	r3, r2
   10fda:	d271      	bcs.n	110c0 <f_write+0x1d8>
			fp->dsect = sect;
   10fdc:	4643      	mov	r3, r8
   10fde:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   10fe0:	68a3      	ldr	r3, [r4, #8]
   10fe2:	05dd      	lsls	r5, r3, #23
   10fe4:	0ded      	lsrs	r5, r5, #23
   10fe6:	2380      	movs	r3, #128	; 0x80
   10fe8:	009b      	lsls	r3, r3, #2
   10fea:	1b5d      	subs	r5, r3, r5
   10fec:	42b5      	cmp	r5, r6
   10fee:	d900      	bls.n	10ff2 <f_write+0x10a>
   10ff0:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   10ff2:	69a1      	ldr	r1, [r4, #24]
   10ff4:	6820      	ldr	r0, [r4, #0]
   10ff6:	4b46      	ldr	r3, [pc, #280]	; (11110 <f_write+0x228>)
   10ff8:	4798      	blx	r3
   10ffa:	2800      	cmp	r0, #0
   10ffc:	d172      	bne.n	110e4 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   10ffe:	68a3      	ldr	r3, [r4, #8]
   11000:	05d8      	lsls	r0, r3, #23
   11002:	0dc0      	lsrs	r0, r0, #23
   11004:	3030      	adds	r0, #48	; 0x30
   11006:	6823      	ldr	r3, [r4, #0]
   11008:	469c      	mov	ip, r3
   1100a:	4460      	add	r0, ip
   1100c:	002a      	movs	r2, r5
   1100e:	0039      	movs	r1, r7
   11010:	4b40      	ldr	r3, [pc, #256]	; (11114 <f_write+0x22c>)
   11012:	4798      	blx	r3
		fp->fs->wflag = 1;
   11014:	2301      	movs	r3, #1
   11016:	6822      	ldr	r2, [r4, #0]
   11018:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   1101a:	197f      	adds	r7, r7, r5
   1101c:	68a3      	ldr	r3, [r4, #8]
   1101e:	195b      	adds	r3, r3, r5
   11020:	60a3      	str	r3, [r4, #8]
   11022:	464b      	mov	r3, r9
   11024:	681b      	ldr	r3, [r3, #0]
   11026:	195b      	adds	r3, r3, r5
   11028:	464a      	mov	r2, r9
   1102a:	6013      	str	r3, [r2, #0]
   1102c:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
   1102e:	d090      	beq.n	10f52 <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   11030:	68a3      	ldr	r3, [r4, #8]
   11032:	05da      	lsls	r2, r3, #23
   11034:	d1d4      	bne.n	10fe0 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   11036:	6820      	ldr	r0, [r4, #0]
   11038:	7882      	ldrb	r2, [r0, #2]
   1103a:	3a01      	subs	r2, #1
   1103c:	0a5d      	lsrs	r5, r3, #9
   1103e:	4015      	ands	r5, r2
   11040:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
   11042:	2d00      	cmp	r5, #0
   11044:	d10b      	bne.n	1105e <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
   11046:	2b00      	cmp	r3, #0
   11048:	d000      	beq.n	1104c <f_write+0x164>
   1104a:	e77b      	b.n	10f44 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
   1104c:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
   1104e:	2b00      	cmp	r3, #0
   11050:	d100      	bne.n	11054 <f_write+0x16c>
   11052:	e771      	b.n	10f38 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   11054:	2b01      	cmp	r3, #1
   11056:	d086      	beq.n	10f66 <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   11058:	1c5a      	adds	r2, r3, #1
   1105a:	d08b      	beq.n	10f74 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
   1105c:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   1105e:	6820      	ldr	r0, [r4, #0]
   11060:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   11062:	69a2      	ldr	r2, [r4, #24]
   11064:	4293      	cmp	r3, r2
   11066:	d08c      	beq.n	10f82 <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   11068:	6823      	ldr	r3, [r4, #0]
   1106a:	469a      	mov	sl, r3
   1106c:	6961      	ldr	r1, [r4, #20]
   1106e:	0018      	movs	r0, r3
   11070:	4b29      	ldr	r3, [pc, #164]	; (11118 <f_write+0x230>)
   11072:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   11074:	2800      	cmp	r0, #0
   11076:	d091      	beq.n	10f9c <f_write+0xb4>
			sect += csect;
   11078:	4680      	mov	r8, r0
   1107a:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   1107c:	0a73      	lsrs	r3, r6, #9
   1107e:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
   11080:	d0a8      	beq.n	10fd4 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   11082:	4653      	mov	r3, sl
   11084:	789b      	ldrb	r3, [r3, #2]
   11086:	465a      	mov	r2, fp
   11088:	18aa      	adds	r2, r5, r2
   1108a:	429a      	cmp	r2, r3
   1108c:	d901      	bls.n	11092 <f_write+0x1aa>
					cc = fp->fs->csize - csect;
   1108e:	1b5b      	subs	r3, r3, r5
   11090:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   11092:	465b      	mov	r3, fp
   11094:	466a      	mov	r2, sp
   11096:	71d3      	strb	r3, [r2, #7]
   11098:	79d3      	ldrb	r3, [r2, #7]
   1109a:	4652      	mov	r2, sl
   1109c:	7850      	ldrb	r0, [r2, #1]
   1109e:	4642      	mov	r2, r8
   110a0:	0039      	movs	r1, r7
   110a2:	4d1e      	ldr	r5, [pc, #120]	; (1111c <f_write+0x234>)
   110a4:	47a8      	blx	r5
   110a6:	2800      	cmp	r0, #0
   110a8:	d000      	beq.n	110ac <f_write+0x1c4>
   110aa:	e77f      	b.n	10fac <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   110ac:	6823      	ldr	r3, [r4, #0]
   110ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   110b0:	4641      	mov	r1, r8
   110b2:	1a50      	subs	r0, r2, r1
   110b4:	4583      	cmp	fp, r0
   110b6:	d900      	bls.n	110ba <f_write+0x1d2>
   110b8:	e780      	b.n	10fbc <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   110ba:	465b      	mov	r3, fp
   110bc:	025d      	lsls	r5, r3, #9
				continue;
   110be:	e7ac      	b.n	1101a <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   110c0:	2100      	movs	r1, #0
   110c2:	4650      	mov	r0, sl
   110c4:	4b12      	ldr	r3, [pc, #72]	; (11110 <f_write+0x228>)
   110c6:	4798      	blx	r3
   110c8:	2800      	cmp	r0, #0
   110ca:	d103      	bne.n	110d4 <f_write+0x1ec>
				fp->fs->winsect = sect;
   110cc:	6823      	ldr	r3, [r4, #0]
   110ce:	4642      	mov	r2, r8
   110d0:	62da      	str	r2, [r3, #44]	; 0x2c
   110d2:	e783      	b.n	10fdc <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   110d4:	79a2      	ldrb	r2, [r4, #6]
   110d6:	2380      	movs	r3, #128	; 0x80
   110d8:	425b      	negs	r3, r3
   110da:	4313      	orrs	r3, r2
   110dc:	71a3      	strb	r3, [r4, #6]
   110de:	2301      	movs	r3, #1
   110e0:	9300      	str	r3, [sp, #0]
   110e2:	e009      	b.n	110f8 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
   110e4:	79a2      	ldrb	r2, [r4, #6]
   110e6:	2380      	movs	r3, #128	; 0x80
   110e8:	425b      	negs	r3, r3
   110ea:	4313      	orrs	r3, r2
   110ec:	71a3      	strb	r3, [r4, #6]
   110ee:	2301      	movs	r3, #1
   110f0:	9300      	str	r3, [sp, #0]
   110f2:	e001      	b.n	110f8 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   110f4:	2302      	movs	r3, #2
   110f6:	9300      	str	r3, [sp, #0]
}
   110f8:	9800      	ldr	r0, [sp, #0]
   110fa:	b003      	add	sp, #12
   110fc:	bc3c      	pop	{r2, r3, r4, r5}
   110fe:	4690      	mov	r8, r2
   11100:	4699      	mov	r9, r3
   11102:	46a2      	mov	sl, r4
   11104:	46ab      	mov	fp, r5
   11106:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11108:	0000f875 	.word	0x0000f875
   1110c:	00010075 	.word	0x00010075
   11110:	0000fcf9 	.word	0x0000fcf9
   11114:	0000f819 	.word	0x0000f819
   11118:	0000f83f 	.word	0x0000f83f
   1111c:	0000f6d9 	.word	0x0000f6d9

00011120 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   11120:	b570      	push	{r4, r5, r6, lr}
   11122:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   11124:	8881      	ldrh	r1, [r0, #4]
   11126:	6800      	ldr	r0, [r0, #0]
   11128:	4b1c      	ldr	r3, [pc, #112]	; (1119c <f_sync+0x7c>)
   1112a:	4798      	blx	r3
	if (res == FR_OK) {
   1112c:	2800      	cmp	r0, #0
   1112e:	d102      	bne.n	11136 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   11130:	79a3      	ldrb	r3, [r4, #6]
   11132:	069b      	lsls	r3, r3, #26
   11134:	d400      	bmi.n	11138 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
   11136:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
   11138:	69e1      	ldr	r1, [r4, #28]
   1113a:	6820      	ldr	r0, [r4, #0]
   1113c:	4b18      	ldr	r3, [pc, #96]	; (111a0 <f_sync+0x80>)
   1113e:	4798      	blx	r3
			if (res == FR_OK) {
   11140:	2800      	cmp	r0, #0
   11142:	d1f8      	bne.n	11136 <f_sync+0x16>
				dir = fp->dir_ptr;
   11144:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   11146:	7aeb      	ldrb	r3, [r5, #11]
   11148:	2220      	movs	r2, #32
   1114a:	4313      	orrs	r3, r2
   1114c:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   1114e:	7b23      	ldrb	r3, [r4, #12]
   11150:	772b      	strb	r3, [r5, #28]
   11152:	89a3      	ldrh	r3, [r4, #12]
   11154:	0a1b      	lsrs	r3, r3, #8
   11156:	776b      	strb	r3, [r5, #29]
   11158:	89e3      	ldrh	r3, [r4, #14]
   1115a:	77ab      	strb	r3, [r5, #30]
   1115c:	7be3      	ldrb	r3, [r4, #15]
   1115e:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   11160:	7c23      	ldrb	r3, [r4, #16]
   11162:	76ab      	strb	r3, [r5, #26]
   11164:	8a23      	ldrh	r3, [r4, #16]
   11166:	0a1b      	lsrs	r3, r3, #8
   11168:	76eb      	strb	r3, [r5, #27]
   1116a:	8a63      	ldrh	r3, [r4, #18]
   1116c:	752b      	strb	r3, [r5, #20]
   1116e:	8a63      	ldrh	r3, [r4, #18]
   11170:	0a1b      	lsrs	r3, r3, #8
   11172:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
   11174:	4b0b      	ldr	r3, [pc, #44]	; (111a4 <f_sync+0x84>)
   11176:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
   11178:	75a8      	strb	r0, [r5, #22]
   1117a:	0a03      	lsrs	r3, r0, #8
   1117c:	75eb      	strb	r3, [r5, #23]
   1117e:	0c03      	lsrs	r3, r0, #16
   11180:	762b      	strb	r3, [r5, #24]
   11182:	0e00      	lsrs	r0, r0, #24
   11184:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
   11186:	79a3      	ldrb	r3, [r4, #6]
   11188:	2220      	movs	r2, #32
   1118a:	4393      	bics	r3, r2
   1118c:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
   1118e:	2301      	movs	r3, #1
   11190:	6822      	ldr	r2, [r4, #0]
   11192:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
   11194:	6820      	ldr	r0, [r4, #0]
   11196:	4b04      	ldr	r3, [pc, #16]	; (111a8 <f_sync+0x88>)
   11198:	4798      	blx	r3
   1119a:	e7cc      	b.n	11136 <f_sync+0x16>
   1119c:	0000f875 	.word	0x0000f875
   111a0:	0000fcf9 	.word	0x0000fcf9
   111a4:	0000f7c9 	.word	0x0000f7c9
   111a8:	000108f9 	.word	0x000108f9

000111ac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   111ac:	b510      	push	{r4, lr}
   111ae:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   111b0:	4b03      	ldr	r3, [pc, #12]	; (111c0 <f_close+0x14>)
   111b2:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   111b4:	2800      	cmp	r0, #0
   111b6:	d101      	bne.n	111bc <f_close+0x10>
   111b8:	2300      	movs	r3, #0
   111ba:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
   111bc:	bd10      	pop	{r4, pc}
   111be:	46c0      	nop			; (mov r8, r8)
   111c0:	00011121 	.word	0x00011121

000111c4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
   111c4:	b510      	push	{r4, lr}
   111c6:	4c2c      	ldr	r4, [pc, #176]	; (11278 <f_unlink+0xb4>)
   111c8:	44a5      	add	sp, r4
   111ca:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
   111cc:	2201      	movs	r2, #1
   111ce:	a98f      	add	r1, sp, #572	; 0x23c
   111d0:	a801      	add	r0, sp, #4
   111d2:	4b2a      	ldr	r3, [pc, #168]	; (1127c <f_unlink+0xb8>)
   111d4:	4798      	blx	r3
	if (res == FR_OK) {
   111d6:	2800      	cmp	r0, #0
   111d8:	d003      	beq.n	111e2 <f_unlink+0x1e>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
   111da:	2398      	movs	r3, #152	; 0x98
   111dc:	009b      	lsls	r3, r3, #2
   111de:	449d      	add	sp, r3
   111e0:	bd10      	pop	{r4, pc}
		INIT_BUF(dj);
   111e2:	ab83      	add	r3, sp, #524	; 0x20c
   111e4:	9395      	str	r3, [sp, #596]	; 0x254
   111e6:	ab03      	add	r3, sp, #12
   111e8:	9396      	str	r3, [sp, #600]	; 0x258
		res = follow_path(&dj, path);		/* Follow the file path */
   111ea:	9901      	ldr	r1, [sp, #4]
   111ec:	a88f      	add	r0, sp, #572	; 0x23c
   111ee:	4b24      	ldr	r3, [pc, #144]	; (11280 <f_unlink+0xbc>)
   111f0:	4798      	blx	r3
		if (res == FR_OK) {					/* The object is accessible */
   111f2:	2800      	cmp	r0, #0
   111f4:	d1f1      	bne.n	111da <f_unlink+0x16>
			dir = dj.dir;
   111f6:	9b94      	ldr	r3, [sp, #592]	; 0x250
			if (!dir) {
   111f8:	2b00      	cmp	r3, #0
   111fa:	d039      	beq.n	11270 <f_unlink+0xac>
				if (dir[DIR_Attr] & AM_RDO)
   111fc:	7ada      	ldrb	r2, [r3, #11]
					res = FR_DENIED;		/* Cannot remove R/O object */
   111fe:	3007      	adds	r0, #7
				if (dir[DIR_Attr] & AM_RDO)
   11200:	07d2      	lsls	r2, r2, #31
   11202:	d4ea      	bmi.n	111da <f_unlink+0x16>
			dclst = LD_CLUST(dir);
   11204:	7d5a      	ldrb	r2, [r3, #21]
   11206:	0212      	lsls	r2, r2, #8
   11208:	7d1c      	ldrb	r4, [r3, #20]
   1120a:	4314      	orrs	r4, r2
   1120c:	0424      	lsls	r4, r4, #16
   1120e:	7ed9      	ldrb	r1, [r3, #27]
   11210:	0209      	lsls	r1, r1, #8
   11212:	7e9a      	ldrb	r2, [r3, #26]
   11214:	430a      	orrs	r2, r1
   11216:	4314      	orrs	r4, r2
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
   11218:	7adb      	ldrb	r3, [r3, #11]
   1121a:	06db      	lsls	r3, r3, #27
   1121c:	d40a      	bmi.n	11234 <f_unlink+0x70>
				res = dir_remove(&dj);		/* Remove the directory entry */
   1121e:	a88f      	add	r0, sp, #572	; 0x23c
   11220:	4b18      	ldr	r3, [pc, #96]	; (11284 <f_unlink+0xc0>)
   11222:	4798      	blx	r3
				if (res == FR_OK) {
   11224:	2800      	cmp	r0, #0
   11226:	d1d8      	bne.n	111da <f_unlink+0x16>
					if (dclst)				/* Remove the cluster chain if exist */
   11228:	2c00      	cmp	r4, #0
   1122a:	d11a      	bne.n	11262 <f_unlink+0x9e>
					if (res == FR_OK) res = sync(dj.fs);
   1122c:	988f      	ldr	r0, [sp, #572]	; 0x23c
   1122e:	4b16      	ldr	r3, [pc, #88]	; (11288 <f_unlink+0xc4>)
   11230:	4798      	blx	r3
   11232:	e7d2      	b.n	111da <f_unlink+0x16>
					res = FR_INT_ERR;
   11234:	2002      	movs	r0, #2
				if (dclst < 2) {
   11236:	2c01      	cmp	r4, #1
   11238:	d9cf      	bls.n	111da <f_unlink+0x16>
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
   1123a:	2224      	movs	r2, #36	; 0x24
   1123c:	a98f      	add	r1, sp, #572	; 0x23c
   1123e:	a886      	add	r0, sp, #536	; 0x218
   11240:	4b12      	ldr	r3, [pc, #72]	; (1128c <f_unlink+0xc8>)
   11242:	4798      	blx	r3
					sdj.sclust = dclst;
   11244:	9488      	str	r4, [sp, #544]	; 0x220
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
   11246:	2102      	movs	r1, #2
   11248:	a886      	add	r0, sp, #536	; 0x218
   1124a:	4b11      	ldr	r3, [pc, #68]	; (11290 <f_unlink+0xcc>)
   1124c:	4798      	blx	r3
					if (res == FR_OK) {
   1124e:	2800      	cmp	r0, #0
   11250:	d1c3      	bne.n	111da <f_unlink+0x16>
						res = dir_read(&sdj);
   11252:	a886      	add	r0, sp, #536	; 0x218
   11254:	4b0f      	ldr	r3, [pc, #60]	; (11294 <f_unlink+0xd0>)
   11256:	4798      	blx	r3
						if (res == FR_OK			/* Not empty dir */
   11258:	2800      	cmp	r0, #0
   1125a:	d00b      	beq.n	11274 <f_unlink+0xb0>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
   1125c:	2804      	cmp	r0, #4
   1125e:	d0de      	beq.n	1121e <f_unlink+0x5a>
   11260:	e7bb      	b.n	111da <f_unlink+0x16>
						res = remove_chain(dj.fs, dclst);
   11262:	0021      	movs	r1, r4
   11264:	988f      	ldr	r0, [sp, #572]	; 0x23c
   11266:	4b0c      	ldr	r3, [pc, #48]	; (11298 <f_unlink+0xd4>)
   11268:	4798      	blx	r3
					if (res == FR_OK) res = sync(dj.fs);
   1126a:	2800      	cmp	r0, #0
   1126c:	d1b5      	bne.n	111da <f_unlink+0x16>
   1126e:	e7dd      	b.n	1122c <f_unlink+0x68>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
   11270:	2006      	movs	r0, #6
   11272:	e7b2      	b.n	111da <f_unlink+0x16>
						) res = FR_DENIED;
   11274:	2007      	movs	r0, #7
	LEAVE_FF(dj.fs, res);
   11276:	e7b0      	b.n	111da <f_unlink+0x16>
   11278:	fffffda0 	.word	0xfffffda0
   1127c:	0000f949 	.word	0x0000f949
   11280:	000109ed 	.word	0x000109ed
   11284:	00010891 	.word	0x00010891
   11288:	000108f9 	.word	0x000108f9
   1128c:	0000f819 	.word	0x0000f819
   11290:	0000fe95 	.word	0x0000fe95
   11294:	00010751 	.word	0x00010751
   11298:	00010139 	.word	0x00010139

0001129c <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
   1129c:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
   1129e:	287f      	cmp	r0, #127	; 0x7f
   112a0:	d911      	bls.n	112c6 <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   112a2:	2900      	cmp	r1, #0
   112a4:	d111      	bne.n	112ca <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
   112a6:	28c7      	cmp	r0, #199	; 0xc7
   112a8:	d017      	beq.n	112da <ff_convert+0x3e>
   112aa:	4a0d      	ldr	r2, [pc, #52]	; (112e0 <ff_convert+0x44>)
   112ac:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
   112ae:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
   112b0:	8811      	ldrh	r1, [r2, #0]
   112b2:	4281      	cmp	r1, r0
   112b4:	d004      	beq.n	112c0 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
   112b6:	3301      	adds	r3, #1
   112b8:	b29b      	uxth	r3, r3
   112ba:	3202      	adds	r2, #2
   112bc:	2b80      	cmp	r3, #128	; 0x80
   112be:	d1f7      	bne.n	112b0 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
   112c0:	3380      	adds	r3, #128	; 0x80
   112c2:	20ff      	movs	r0, #255	; 0xff
   112c4:	4003      	ands	r3, r0
		}
	}

	return c;
}
   112c6:	0018      	movs	r0, r3
   112c8:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   112ca:	2300      	movs	r3, #0
   112cc:	28ff      	cmp	r0, #255	; 0xff
   112ce:	d8fa      	bhi.n	112c6 <ff_convert+0x2a>
   112d0:	3880      	subs	r0, #128	; 0x80
   112d2:	0040      	lsls	r0, r0, #1
   112d4:	4b02      	ldr	r3, [pc, #8]	; (112e0 <ff_convert+0x44>)
   112d6:	5ac3      	ldrh	r3, [r0, r3]
   112d8:	e7f5      	b.n	112c6 <ff_convert+0x2a>
				if (src == Tbl[c]) break;
   112da:	2300      	movs	r3, #0
   112dc:	e7f0      	b.n	112c0 <ff_convert+0x24>
   112de:	46c0      	nop			; (mov r8, r8)
   112e0:	0001b4f4 	.word	0x0001b4f4

000112e4 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   112e4:	2861      	cmp	r0, #97	; 0x61
   112e6:	d014      	beq.n	11312 <ff_wtoupper+0x2e>
   112e8:	4b0b      	ldr	r3, [pc, #44]	; (11318 <ff_wtoupper+0x34>)
   112ea:	3304      	adds	r3, #4
   112ec:	2101      	movs	r1, #1
   112ee:	2262      	movs	r2, #98	; 0x62
   112f0:	4290      	cmp	r0, r2
   112f2:	d007      	beq.n	11304 <ff_wtoupper+0x20>
   112f4:	3101      	adds	r1, #1
   112f6:	3302      	adds	r3, #2
   112f8:	1e9a      	subs	r2, r3, #2
   112fa:	8812      	ldrh	r2, [r2, #0]
   112fc:	2a00      	cmp	r2, #0
   112fe:	d1f7      	bne.n	112f0 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   11300:	0003      	movs	r3, r0
   11302:	e004      	b.n	1130e <ff_wtoupper+0x2a>
   11304:	1e03      	subs	r3, r0, #0
   11306:	d002      	beq.n	1130e <ff_wtoupper+0x2a>
   11308:	0049      	lsls	r1, r1, #1
   1130a:	4b04      	ldr	r3, [pc, #16]	; (1131c <ff_wtoupper+0x38>)
   1130c:	5acb      	ldrh	r3, [r1, r3]
}
   1130e:	0018      	movs	r0, r3
   11310:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   11312:	2100      	movs	r1, #0
   11314:	e7f8      	b.n	11308 <ff_wtoupper+0x24>
   11316:	46c0      	nop			; (mov r8, r8)
   11318:	0001b5f4 	.word	0x0001b5f4
   1131c:	0001b7d4 	.word	0x0001b7d4

00011320 <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   11320:	b5f0      	push	{r4, r5, r6, r7, lr}
   11322:	46de      	mov	lr, fp
   11324:	4657      	mov	r7, sl
   11326:	464e      	mov	r6, r9
   11328:	4645      	mov	r5, r8
   1132a:	b5e0      	push	{r5, r6, r7, lr}
   1132c:	b083      	sub	sp, #12
   1132e:	0007      	movs	r7, r0
   11330:	4688      	mov	r8, r1
   11332:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
   11334:	2400      	movs	r4, #0
   11336:	2900      	cmp	r1, #0
   11338:	dd18      	ble.n	1136c <sendPacket+0x4c>
   1133a:	4b15      	ldr	r3, [pc, #84]	; (11390 <sendPacket+0x70>)
   1133c:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   1133e:	4b15      	ldr	r3, [pc, #84]	; (11394 <sendPacket+0x74>)
   11340:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
   11342:	9801      	ldr	r0, [sp, #4]
   11344:	47d0      	blx	sl
   11346:	2800      	cmp	r0, #0
   11348:	d110      	bne.n	1136c <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   1134a:	6d3e      	ldr	r6, [r7, #80]	; 0x50
   1134c:	68f3      	ldr	r3, [r6, #12]
   1134e:	4699      	mov	r9, r3
   11350:	693b      	ldr	r3, [r7, #16]
   11352:	191d      	adds	r5, r3, r4
   11354:	9801      	ldr	r0, [sp, #4]
   11356:	47d8      	blx	fp
   11358:	0003      	movs	r3, r0
   1135a:	4642      	mov	r2, r8
   1135c:	0029      	movs	r1, r5
   1135e:	0030      	movs	r0, r6
   11360:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
   11362:	2800      	cmp	r0, #0
   11364:	db02      	blt.n	1136c <sendPacket+0x4c>
            break;
        sent += rc;
   11366:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
   11368:	45a0      	cmp	r8, r4
   1136a:	dcea      	bgt.n	11342 <sendPacket+0x22>
    }
    if (sent == length)
   1136c:	45a0      	cmp	r8, r4
   1136e:	d10c      	bne.n	1138a <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   11370:	69b9      	ldr	r1, [r7, #24]
   11372:	0038      	movs	r0, r7
   11374:	3054      	adds	r0, #84	; 0x54
   11376:	4b08      	ldr	r3, [pc, #32]	; (11398 <sendPacket+0x78>)
   11378:	4798      	blx	r3
        rc = SUCCESS;
   1137a:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
   1137c:	b003      	add	sp, #12
   1137e:	bc3c      	pop	{r2, r3, r4, r5}
   11380:	4690      	mov	r8, r2
   11382:	4699      	mov	r9, r3
   11384:	46a2      	mov	sl, r4
   11386:	46ab      	mov	fp, r5
   11388:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
   1138a:	2001      	movs	r0, #1
   1138c:	4240      	negs	r0, r0
    return rc;
   1138e:	e7f5      	b.n	1137c <sendPacket+0x5c>
   11390:	00011c8d 	.word	0x00011c8d
   11394:	00011cc5 	.word	0x00011cc5
   11398:	00011cb5 	.word	0x00011cb5

0001139c <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   1139c:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
   1139e:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
   113a0:	2100      	movs	r1, #0
   113a2:	6241      	str	r1, [r0, #36]	; 0x24
   113a4:	62c1      	str	r1, [r0, #44]	; 0x2c
   113a6:	6341      	str	r1, [r0, #52]	; 0x34
   113a8:	63c1      	str	r1, [r0, #60]	; 0x3c
   113aa:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
   113ac:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
   113ae:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
   113b0:	9b02      	ldr	r3, [sp, #8]
   113b2:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
   113b4:	9b03      	ldr	r3, [sp, #12]
   113b6:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
   113b8:	9b04      	ldr	r3, [sp, #16]
   113ba:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
   113bc:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
   113be:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
   113c0:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
   113c2:	2301      	movs	r3, #1
   113c4:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
   113c6:	3054      	adds	r0, #84	; 0x54
   113c8:	4b01      	ldr	r3, [pc, #4]	; (113d0 <MQTTClientInit+0x34>)
   113ca:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   113cc:	bd10      	pop	{r4, pc}
   113ce:	46c0      	nop			; (mov r8, r8)
   113d0:	00011cdd 	.word	0x00011cdd

000113d4 <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   113d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   113d6:	46de      	mov	lr, fp
   113d8:	4657      	mov	r7, sl
   113da:	464e      	mov	r6, r9
   113dc:	4645      	mov	r5, r8
   113de:	b5e0      	push	{r5, r6, r7, lr}
   113e0:	b085      	sub	sp, #20
   113e2:	4682      	mov	sl, r0
   113e4:	000f      	movs	r7, r1
   113e6:	4691      	mov	r9, r2
   113e8:	0004      	movs	r4, r0
   113ea:	3424      	adds	r4, #36	; 0x24
   113ec:	234c      	movs	r3, #76	; 0x4c
   113ee:	4453      	add	r3, sl
   113f0:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
   113f2:	2301      	movs	r3, #1
   113f4:	425b      	negs	r3, r3
   113f6:	9301      	str	r3, [sp, #4]
   113f8:	e056      	b.n	114a8 <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   113fa:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
   113fc:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
   113fe:	687a      	ldr	r2, [r7, #4]
   11400:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
   11402:	780a      	ldrb	r2, [r1, #0]
   11404:	2a00      	cmp	r2, #0
   11406:	d04a      	beq.n	1149e <deliverMessage+0xca>
   11408:	42b3      	cmp	r3, r6
   1140a:	d24a      	bcs.n	114a2 <deliverMessage+0xce>
   1140c:	3101      	adds	r1, #1
   1140e:	1e70      	subs	r0, r6, #1
   11410:	e008      	b.n	11424 <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
   11412:	2a2f      	cmp	r2, #47	; 0x2f
   11414:	d10f      	bne.n	11436 <deliverMessage+0x62>
        curn++;
   11416:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   11418:	780a      	ldrb	r2, [r1, #0]
   1141a:	2a00      	cmp	r2, #0
   1141c:	d03f      	beq.n	1149e <deliverMessage+0xca>
   1141e:	429e      	cmp	r6, r3
   11420:	d93f      	bls.n	114a2 <deliverMessage+0xce>
   11422:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
   11424:	781d      	ldrb	r5, [r3, #0]
   11426:	2d2f      	cmp	r5, #47	; 0x2f
   11428:	d0f3      	beq.n	11412 <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   1142a:	2a2b      	cmp	r2, #43	; 0x2b
   1142c:	d008      	beq.n	11440 <deliverMessage+0x6c>
   1142e:	2a23      	cmp	r2, #35	; 0x23
   11430:	d013      	beq.n	1145a <deliverMessage+0x86>
   11432:	4295      	cmp	r5, r2
   11434:	d0ef      	beq.n	11416 <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
   11436:	429e      	cmp	r6, r3
   11438:	d133      	bne.n	114a2 <deliverMessage+0xce>
   1143a:	2a00      	cmp	r2, #0
   1143c:	d03d      	beq.n	114ba <deliverMessage+0xe6>
   1143e:	e030      	b.n	114a2 <deliverMessage+0xce>
            char* nextpos = curn + 1;
   11440:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   11442:	42ae      	cmp	r6, r5
   11444:	d927      	bls.n	11496 <deliverMessage+0xc2>
   11446:	785a      	ldrb	r2, [r3, #1]
   11448:	2a2f      	cmp	r2, #47	; 0x2f
   1144a:	d01f      	beq.n	1148c <deliverMessage+0xb8>
                nextpos = ++curn + 1;
   1144c:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   1144e:	4283      	cmp	r3, r0
   11450:	d0e1      	beq.n	11416 <deliverMessage+0x42>
   11452:	785a      	ldrb	r2, [r3, #1]
   11454:	2a2f      	cmp	r2, #47	; 0x2f
   11456:	d1f9      	bne.n	1144c <deliverMessage+0x78>
   11458:	e7dd      	b.n	11416 <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
   1145a:	1e73      	subs	r3, r6, #1
   1145c:	e7db      	b.n	11416 <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   1145e:	9b01      	ldr	r3, [sp, #4]
   11460:	3301      	adds	r3, #1
   11462:	d007      	beq.n	11474 <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
   11464:	9801      	ldr	r0, [sp, #4]
   11466:	b005      	add	sp, #20
   11468:	bc3c      	pop	{r2, r3, r4, r5}
   1146a:	4690      	mov	r8, r2
   1146c:	4699      	mov	r9, r3
   1146e:	46a2      	mov	sl, r4
   11470:	46ab      	mov	fp, r5
   11472:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   11474:	4653      	mov	r3, sl
   11476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11478:	2b00      	cmp	r3, #0
   1147a:	d0f3      	beq.n	11464 <deliverMessage+0x90>
    md->topicName = aTopicName;
   1147c:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   1147e:	464a      	mov	r2, r9
   11480:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
   11482:	a802      	add	r0, sp, #8
   11484:	4798      	blx	r3
        rc = SUCCESS;
   11486:	2300      	movs	r3, #0
   11488:	9301      	str	r3, [sp, #4]
    return rc;
   1148a:	e7eb      	b.n	11464 <deliverMessage+0x90>
    while (*curf && curn < curn_end)
   1148c:	780a      	ldrb	r2, [r1, #0]
   1148e:	2a00      	cmp	r2, #0
   11490:	d007      	beq.n	114a2 <deliverMessage+0xce>
        curn++;
   11492:	002b      	movs	r3, r5
   11494:	e7c5      	b.n	11422 <deliverMessage+0x4e>
   11496:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   11498:	780a      	ldrb	r2, [r1, #0]
   1149a:	2a00      	cmp	r2, #0
   1149c:	d101      	bne.n	114a2 <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
   1149e:	429e      	cmp	r6, r3
   114a0:	d00b      	beq.n	114ba <deliverMessage+0xe6>
   114a2:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   114a4:	4544      	cmp	r4, r8
   114a6:	d0da      	beq.n	1145e <deliverMessage+0x8a>
   114a8:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   114aa:	6821      	ldr	r1, [r4, #0]
   114ac:	2900      	cmp	r1, #0
   114ae:	d0f8      	beq.n	114a2 <deliverMessage+0xce>
   114b0:	0038      	movs	r0, r7
   114b2:	4b08      	ldr	r3, [pc, #32]	; (114d4 <deliverMessage+0x100>)
   114b4:	4798      	blx	r3
   114b6:	2800      	cmp	r0, #0
   114b8:	d09f      	beq.n	113fa <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
   114ba:	465b      	mov	r3, fp
   114bc:	685b      	ldr	r3, [r3, #4]
   114be:	2b00      	cmp	r3, #0
   114c0:	d0ef      	beq.n	114a2 <deliverMessage+0xce>
    md->topicName = aTopicName;
   114c2:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   114c4:	464a      	mov	r2, r9
   114c6:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
   114c8:	a802      	add	r0, sp, #8
   114ca:	4798      	blx	r3
                rc = SUCCESS;
   114cc:	2300      	movs	r3, #0
   114ce:	9301      	str	r3, [sp, #4]
   114d0:	e7e7      	b.n	114a2 <deliverMessage+0xce>
   114d2:	46c0      	nop			; (mov r8, r8)
   114d4:	000125b1 	.word	0x000125b1

000114d8 <keepalive>:


int keepalive(MQTTClient* c)
{
   114d8:	b510      	push	{r4, lr}
   114da:	b082      	sub	sp, #8
   114dc:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
   114de:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
   114e0:	69a3      	ldr	r3, [r4, #24]
   114e2:	2b00      	cmp	r3, #0
   114e4:	d101      	bne.n	114ea <keepalive+0x12>
        }
    }

exit:
    return rc;
}
   114e6:	b002      	add	sp, #8
   114e8:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
   114ea:	0020      	movs	r0, r4
   114ec:	3054      	adds	r0, #84	; 0x54
   114ee:	4b14      	ldr	r3, [pc, #80]	; (11540 <keepalive+0x68>)
   114f0:	4798      	blx	r3
   114f2:	2800      	cmp	r0, #0
   114f4:	d01d      	beq.n	11532 <keepalive+0x5a>
        if (!c->ping_outstanding)
   114f6:	7f23      	ldrb	r3, [r4, #28]
   114f8:	2b00      	cmp	r3, #0
   114fa:	d11d      	bne.n	11538 <keepalive+0x60>
            TimerInit(&timer);
   114fc:	4668      	mov	r0, sp
   114fe:	4b11      	ldr	r3, [pc, #68]	; (11544 <keepalive+0x6c>)
   11500:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   11502:	21fa      	movs	r1, #250	; 0xfa
   11504:	0089      	lsls	r1, r1, #2
   11506:	4668      	mov	r0, sp
   11508:	4b0f      	ldr	r3, [pc, #60]	; (11548 <keepalive+0x70>)
   1150a:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   1150c:	68a1      	ldr	r1, [r4, #8]
   1150e:	6920      	ldr	r0, [r4, #16]
   11510:	4b0e      	ldr	r3, [pc, #56]	; (1154c <keepalive+0x74>)
   11512:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   11514:	2800      	cmp	r0, #0
   11516:	dd09      	ble.n	1152c <keepalive+0x54>
   11518:	466a      	mov	r2, sp
   1151a:	0001      	movs	r1, r0
   1151c:	0020      	movs	r0, r4
   1151e:	4b0c      	ldr	r3, [pc, #48]	; (11550 <keepalive+0x78>)
   11520:	4798      	blx	r3
   11522:	2800      	cmp	r0, #0
   11524:	d1df      	bne.n	114e6 <keepalive+0xe>
                c->ping_outstanding = 1;
   11526:	2301      	movs	r3, #1
   11528:	7723      	strb	r3, [r4, #28]
   1152a:	e7dc      	b.n	114e6 <keepalive+0xe>
    int rc = FAILURE;
   1152c:	2001      	movs	r0, #1
   1152e:	4240      	negs	r0, r0
   11530:	e7d9      	b.n	114e6 <keepalive+0xe>
   11532:	2001      	movs	r0, #1
   11534:	4240      	negs	r0, r0
   11536:	e7d6      	b.n	114e6 <keepalive+0xe>
   11538:	2001      	movs	r0, #1
   1153a:	4240      	negs	r0, r0
    return rc;
   1153c:	e7d3      	b.n	114e6 <keepalive+0xe>
   1153e:	46c0      	nop			; (mov r8, r8)
   11540:	00011c8d 	.word	0x00011c8d
   11544:	00011cdd 	.word	0x00011cdd
   11548:	00011ca1 	.word	0x00011ca1
   1154c:	00012299 	.word	0x00012299
   11550:	00011321 	.word	0x00011321

00011554 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   11554:	b5f0      	push	{r4, r5, r6, r7, lr}
   11556:	46de      	mov	lr, fp
   11558:	464f      	mov	r7, r9
   1155a:	4646      	mov	r6, r8
   1155c:	b5c0      	push	{r6, r7, lr}
   1155e:	b090      	sub	sp, #64	; 0x40
   11560:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   11562:	6d05      	ldr	r5, [r0, #80]	; 0x50
   11564:	68ae      	ldr	r6, [r5, #8]
   11566:	6947      	ldr	r7, [r0, #20]
   11568:	9107      	str	r1, [sp, #28]
   1156a:	0008      	movs	r0, r1
   1156c:	4b65      	ldr	r3, [pc, #404]	; (11704 <cycle+0x1b0>)
   1156e:	4798      	blx	r3
   11570:	0003      	movs	r3, r0
   11572:	2201      	movs	r2, #1
   11574:	0039      	movs	r1, r7
   11576:	0028      	movs	r0, r5
   11578:	47b0      	blx	r6
   1157a:	0005      	movs	r5, r0
   1157c:	2801      	cmp	r0, #1
   1157e:	d000      	beq.n	11582 <cycle+0x2e>
   11580:	e0bd      	b.n	116fe <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   11582:	9807      	ldr	r0, [sp, #28]
   11584:	4b5f      	ldr	r3, [pc, #380]	; (11704 <cycle+0x1b0>)
   11586:	4798      	blx	r3
   11588:	9006      	str	r0, [sp, #24]
   1158a:	2604      	movs	r6, #4
    *value = 0;
   1158c:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
   1158e:	237f      	movs	r3, #127	; 0x7f
   11590:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   11592:	6d20      	ldr	r0, [r4, #80]	; 0x50
   11594:	6883      	ldr	r3, [r0, #8]
   11596:	4698      	mov	r8, r3
   11598:	9b06      	ldr	r3, [sp, #24]
   1159a:	2201      	movs	r2, #1
   1159c:	a90c      	add	r1, sp, #48	; 0x30
   1159e:	47c0      	blx	r8
        if (rc != 1)
   115a0:	2801      	cmp	r0, #1
   115a2:	d10e      	bne.n	115c2 <cycle+0x6e>
        *value += (i & 127) * multiplier;
   115a4:	ab02      	add	r3, sp, #8
   115a6:	2228      	movs	r2, #40	; 0x28
   115a8:	189b      	adds	r3, r3, r2
   115aa:	781b      	ldrb	r3, [r3, #0]
   115ac:	465a      	mov	r2, fp
   115ae:	401a      	ands	r2, r3
   115b0:	436a      	muls	r2, r5
   115b2:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
   115b4:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
   115b6:	b25b      	sxtb	r3, r3
   115b8:	2b00      	cmp	r3, #0
   115ba:	da02      	bge.n	115c2 <cycle+0x6e>
   115bc:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   115be:	2e00      	cmp	r6, #0
   115c0:	d1e7      	bne.n	11592 <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   115c2:	6963      	ldr	r3, [r4, #20]
   115c4:	1c58      	adds	r0, r3, #1
   115c6:	0039      	movs	r1, r7
   115c8:	4b4f      	ldr	r3, [pc, #316]	; (11708 <cycle+0x1b4>)
   115ca:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   115cc:	2f00      	cmp	r7, #0
   115ce:	dd10      	ble.n	115f2 <cycle+0x9e>
   115d0:	6d26      	ldr	r6, [r4, #80]	; 0x50
   115d2:	68b3      	ldr	r3, [r6, #8]
   115d4:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   115d6:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   115d8:	6963      	ldr	r3, [r4, #20]
   115da:	181d      	adds	r5, r3, r0
   115dc:	9807      	ldr	r0, [sp, #28]
   115de:	4b49      	ldr	r3, [pc, #292]	; (11704 <cycle+0x1b0>)
   115e0:	4798      	blx	r3
   115e2:	0003      	movs	r3, r0
   115e4:	003a      	movs	r2, r7
   115e6:	0029      	movs	r1, r5
   115e8:	0030      	movs	r0, r6
   115ea:	47c8      	blx	r9
   115ec:	42b8      	cmp	r0, r7
   115ee:	d000      	beq.n	115f2 <cycle+0x9e>
   115f0:	e085      	b.n	116fe <cycle+0x1aa>
    header.byte = c->readbuf[0];
   115f2:	6963      	ldr	r3, [r4, #20]
   115f4:	781d      	ldrb	r5, [r3, #0]
   115f6:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
   115f8:	2d05      	cmp	r5, #5
   115fa:	d051      	beq.n	116a0 <cycle+0x14c>
   115fc:	2d0d      	cmp	r5, #13
   115fe:	d06e      	beq.n	116de <cycle+0x18a>
        rc = SUCCESS;
   11600:	2600      	movs	r6, #0
    switch (packet_type)
   11602:	2d03      	cmp	r5, #3
   11604:	d16e      	bne.n	116e4 <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   11606:	68e2      	ldr	r2, [r4, #12]
   11608:	9204      	str	r2, [sp, #16]
   1160a:	9303      	str	r3, [sp, #12]
   1160c:	ab0f      	add	r3, sp, #60	; 0x3c
   1160e:	9302      	str	r3, [sp, #8]
   11610:	ab0e      	add	r3, sp, #56	; 0x38
   11612:	9301      	str	r3, [sp, #4]
   11614:	ab09      	add	r3, sp, #36	; 0x24
   11616:	9300      	str	r3, [sp, #0]
   11618:	ab0d      	add	r3, sp, #52	; 0x34
   1161a:	2229      	movs	r2, #41	; 0x29
   1161c:	a902      	add	r1, sp, #8
   1161e:	468c      	mov	ip, r1
   11620:	4462      	add	r2, ip
   11622:	a908      	add	r1, sp, #32
   11624:	202a      	movs	r0, #42	; 0x2a
   11626:	4460      	add	r0, ip
   11628:	4e38      	ldr	r6, [pc, #224]	; (1170c <cycle+0x1b8>)
   1162a:	47b0      	blx	r6
        rc = SUCCESS;
   1162c:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1162e:	2801      	cmp	r0, #1
   11630:	d15b      	bne.n	116ea <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
   11632:	ae0c      	add	r6, sp, #48	; 0x30
   11634:	ab02      	add	r3, sp, #8
   11636:	7e1b      	ldrb	r3, [r3, #24]
   11638:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
   1163a:	0032      	movs	r2, r6
   1163c:	a909      	add	r1, sp, #36	; 0x24
   1163e:	0020      	movs	r0, r4
   11640:	4b33      	ldr	r3, [pc, #204]	; (11710 <cycle+0x1bc>)
   11642:	4798      	blx	r3
            if (msg.qos != QOS0)
   11644:	7833      	ldrb	r3, [r6, #0]
   11646:	2b00      	cmp	r3, #0
   11648:	d028      	beq.n	1169c <cycle+0x148>
            {
                if (msg.qos == QOS1)
   1164a:	2b01      	cmp	r3, #1
   1164c:	d004      	beq.n	11658 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
   1164e:	2b02      	cmp	r3, #2
   11650:	d016      	beq.n	11680 <cycle+0x12c>
   11652:	2601      	movs	r6, #1
   11654:	4276      	negs	r6, r6
   11656:	e048      	b.n	116ea <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   11658:	ab0c      	add	r3, sp, #48	; 0x30
   1165a:	889b      	ldrh	r3, [r3, #4]
   1165c:	9300      	str	r3, [sp, #0]
   1165e:	2300      	movs	r3, #0
   11660:	2204      	movs	r2, #4
   11662:	68a1      	ldr	r1, [r4, #8]
   11664:	6920      	ldr	r0, [r4, #16]
   11666:	4e2b      	ldr	r6, [pc, #172]	; (11714 <cycle+0x1c0>)
   11668:	47b0      	blx	r6
   1166a:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
   1166c:	2900      	cmp	r1, #0
   1166e:	dd12      	ble.n	11696 <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
   11670:	9a07      	ldr	r2, [sp, #28]
   11672:	0020      	movs	r0, r4
   11674:	4b28      	ldr	r3, [pc, #160]	; (11718 <cycle+0x1c4>)
   11676:	4798      	blx	r3
   11678:	0006      	movs	r6, r0
                if (rc == FAILURE)
   1167a:	1c43      	adds	r3, r0, #1
   1167c:	d132      	bne.n	116e4 <cycle+0x190>
   1167e:	e034      	b.n	116ea <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   11680:	ab0c      	add	r3, sp, #48	; 0x30
   11682:	889b      	ldrh	r3, [r3, #4]
   11684:	9300      	str	r3, [sp, #0]
   11686:	2300      	movs	r3, #0
   11688:	2205      	movs	r2, #5
   1168a:	68a1      	ldr	r1, [r4, #8]
   1168c:	6920      	ldr	r0, [r4, #16]
   1168e:	4e21      	ldr	r6, [pc, #132]	; (11714 <cycle+0x1c0>)
   11690:	47b0      	blx	r6
   11692:	0001      	movs	r1, r0
   11694:	e7ea      	b.n	1166c <cycle+0x118>
   11696:	2601      	movs	r6, #1
   11698:	4276      	negs	r6, r6
   1169a:	e026      	b.n	116ea <cycle+0x196>
        rc = SUCCESS;
   1169c:	2600      	movs	r6, #0
   1169e:	e021      	b.n	116e4 <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   116a0:	68e2      	ldr	r2, [r4, #12]
   116a2:	9200      	str	r2, [sp, #0]
   116a4:	aa0c      	add	r2, sp, #48	; 0x30
   116a6:	a908      	add	r1, sp, #32
   116a8:	a809      	add	r0, sp, #36	; 0x24
   116aa:	4e1c      	ldr	r6, [pc, #112]	; (1171c <cycle+0x1c8>)
   116ac:	47b0      	blx	r6
   116ae:	2801      	cmp	r0, #1
   116b0:	d002      	beq.n	116b8 <cycle+0x164>
   116b2:	2601      	movs	r6, #1
   116b4:	4276      	negs	r6, r6
   116b6:	e01b      	b.n	116f0 <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   116b8:	ab0c      	add	r3, sp, #48	; 0x30
   116ba:	881b      	ldrh	r3, [r3, #0]
   116bc:	9300      	str	r3, [sp, #0]
   116be:	2300      	movs	r3, #0
   116c0:	2206      	movs	r2, #6
   116c2:	68a1      	ldr	r1, [r4, #8]
   116c4:	6920      	ldr	r0, [r4, #16]
   116c6:	4e13      	ldr	r6, [pc, #76]	; (11714 <cycle+0x1c0>)
   116c8:	47b0      	blx	r6
   116ca:	2800      	cmp	r0, #0
   116cc:	ddf1      	ble.n	116b2 <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   116ce:	9a07      	ldr	r2, [sp, #28]
   116d0:	0001      	movs	r1, r0
   116d2:	0020      	movs	r0, r4
   116d4:	4b10      	ldr	r3, [pc, #64]	; (11718 <cycle+0x1c4>)
   116d6:	4798      	blx	r3
   116d8:	1e06      	subs	r6, r0, #0
   116da:	d1ea      	bne.n	116b2 <cycle+0x15e>
   116dc:	e002      	b.n	116e4 <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   116de:	2300      	movs	r3, #0
   116e0:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
   116e2:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
   116e4:	0020      	movs	r0, r4
   116e6:	4b0e      	ldr	r3, [pc, #56]	; (11720 <cycle+0x1cc>)
   116e8:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
   116ea:	2e00      	cmp	r6, #0
   116ec:	d100      	bne.n	116f0 <cycle+0x19c>
   116ee:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
   116f0:	0030      	movs	r0, r6
   116f2:	b010      	add	sp, #64	; 0x40
   116f4:	bc1c      	pop	{r2, r3, r4}
   116f6:	4690      	mov	r8, r2
   116f8:	4699      	mov	r9, r3
   116fa:	46a3      	mov	fp, r4
   116fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   116fe:	4d09      	ldr	r5, [pc, #36]	; (11724 <cycle+0x1d0>)
        rc = SUCCESS;
   11700:	2600      	movs	r6, #0
   11702:	e7ef      	b.n	116e4 <cycle+0x190>
   11704:	00011cc5 	.word	0x00011cc5
   11708:	000123b1 	.word	0x000123b1
   1170c:	000122a9 	.word	0x000122a9
   11710:	000113d5 	.word	0x000113d5
   11714:	000126e5 	.word	0x000126e5
   11718:	00011321 	.word	0x00011321
   1171c:	00012341 	.word	0x00012341
   11720:	000114d9 	.word	0x000114d9
   11724:	0000ffff 	.word	0x0000ffff

00011728 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   11728:	b570      	push	{r4, r5, r6, lr}
   1172a:	b082      	sub	sp, #8
   1172c:	0005      	movs	r5, r0
   1172e:	000c      	movs	r4, r1
    int rc = SUCCESS;
    Timer timer;

    TimerInit(&timer);
   11730:	4668      	mov	r0, sp
   11732:	4b0a      	ldr	r3, [pc, #40]	; (1175c <MQTTYield+0x34>)
   11734:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   11736:	0021      	movs	r1, r4
   11738:	4668      	mov	r0, sp
   1173a:	4b09      	ldr	r3, [pc, #36]	; (11760 <MQTTYield+0x38>)
   1173c:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   1173e:	4c09      	ldr	r4, [pc, #36]	; (11764 <MQTTYield+0x3c>)
        {
            rc = FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
   11740:	4e09      	ldr	r6, [pc, #36]	; (11768 <MQTTYield+0x40>)
        if (cycle(c, &timer) == FAILURE)
   11742:	4669      	mov	r1, sp
   11744:	0028      	movs	r0, r5
   11746:	47a0      	blx	r4
   11748:	1c43      	adds	r3, r0, #1
   1174a:	d004      	beq.n	11756 <MQTTYield+0x2e>
	} while (!TimerIsExpired(&timer));
   1174c:	4668      	mov	r0, sp
   1174e:	47b0      	blx	r6
   11750:	2800      	cmp	r0, #0
   11752:	d0f6      	beq.n	11742 <MQTTYield+0x1a>
    int rc = SUCCESS;
   11754:	2000      	movs	r0, #0
        
    return rc;
}
   11756:	b002      	add	sp, #8
   11758:	bd70      	pop	{r4, r5, r6, pc}
   1175a:	46c0      	nop			; (mov r8, r8)
   1175c:	00011cdd 	.word	0x00011cdd
   11760:	00011ca1 	.word	0x00011ca1
   11764:	00011555 	.word	0x00011555
   11768:	00011c8d 	.word	0x00011c8d

0001176c <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   1176c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1176e:	b083      	sub	sp, #12
   11770:	9001      	str	r0, [sp, #4]
   11772:	000e      	movs	r6, r1
   11774:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
   11776:	2401      	movs	r4, #1
   11778:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
   1177a:	4f08      	ldr	r7, [pc, #32]	; (1179c <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   1177c:	4d08      	ldr	r5, [pc, #32]	; (117a0 <waitfor+0x34>)
        if (TimerIsExpired(timer))
   1177e:	9800      	ldr	r0, [sp, #0]
   11780:	47b8      	blx	r7
   11782:	2800      	cmp	r0, #0
   11784:	d106      	bne.n	11794 <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
   11786:	9900      	ldr	r1, [sp, #0]
   11788:	9801      	ldr	r0, [sp, #4]
   1178a:	47a8      	blx	r5
   1178c:	0004      	movs	r4, r0
   1178e:	42b0      	cmp	r0, r6
   11790:	d1f5      	bne.n	1177e <waitfor+0x12>
   11792:	0034      	movs	r4, r6
    
    return rc;
}
   11794:	0020      	movs	r0, r4
   11796:	b003      	add	sp, #12
   11798:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1179a:	46c0      	nop			; (mov r8, r8)
   1179c:	00011c8d 	.word	0x00011c8d
   117a0:	00011555 	.word	0x00011555

000117a4 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   117a4:	b530      	push	{r4, r5, lr}
   117a6:	b09b      	sub	sp, #108	; 0x6c
   117a8:	0004      	movs	r4, r0
   117aa:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   117ac:	2258      	movs	r2, #88	; 0x58
   117ae:	4928      	ldr	r1, [pc, #160]	; (11850 <MQTTConnect+0xac>)
   117b0:	a802      	add	r0, sp, #8
   117b2:	4b28      	ldr	r3, [pc, #160]	; (11854 <MQTTConnect+0xb0>)
   117b4:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   117b6:	6a23      	ldr	r3, [r4, #32]
   117b8:	2b00      	cmp	r3, #0
   117ba:	d13f      	bne.n	1183c <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
   117bc:	a818      	add	r0, sp, #96	; 0x60
   117be:	4b26      	ldr	r3, [pc, #152]	; (11858 <MQTTConnect+0xb4>)
   117c0:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   117c2:	6861      	ldr	r1, [r4, #4]
   117c4:	a818      	add	r0, sp, #96	; 0x60
   117c6:	4b25      	ldr	r3, [pc, #148]	; (1185c <MQTTConnect+0xb8>)
   117c8:	4798      	blx	r3

    if (options == 0)
   117ca:	2d00      	cmp	r5, #0
   117cc:	d015      	beq.n	117fa <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
   117ce:	8b29      	ldrh	r1, [r5, #24]
   117d0:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   117d2:	0020      	movs	r0, r4
   117d4:	3054      	adds	r0, #84	; 0x54
   117d6:	4b22      	ldr	r3, [pc, #136]	; (11860 <MQTTConnect+0xbc>)
   117d8:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   117da:	002a      	movs	r2, r5
   117dc:	68a1      	ldr	r1, [r4, #8]
   117de:	6920      	ldr	r0, [r4, #16]
   117e0:	4b20      	ldr	r3, [pc, #128]	; (11864 <MQTTConnect+0xc0>)
   117e2:	4798      	blx	r3
   117e4:	2800      	cmp	r0, #0
   117e6:	dd2c      	ble.n	11842 <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   117e8:	aa18      	add	r2, sp, #96	; 0x60
   117ea:	0001      	movs	r1, r0
   117ec:	0020      	movs	r0, r4
   117ee:	4b1e      	ldr	r3, [pc, #120]	; (11868 <MQTTConnect+0xc4>)
   117f0:	4798      	blx	r3
   117f2:	2800      	cmp	r0, #0
   117f4:	d003      	beq.n	117fe <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
   117f6:	b01b      	add	sp, #108	; 0x6c
   117f8:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
   117fa:	ad02      	add	r5, sp, #8
   117fc:	e7e7      	b.n	117ce <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   117fe:	aa18      	add	r2, sp, #96	; 0x60
   11800:	2102      	movs	r1, #2
   11802:	0020      	movs	r0, r4
   11804:	4b19      	ldr	r3, [pc, #100]	; (1186c <MQTTConnect+0xc8>)
   11806:	4798      	blx	r3
   11808:	2802      	cmp	r0, #2
   1180a:	d11d      	bne.n	11848 <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
   1180c:	466b      	mov	r3, sp
   1180e:	1d99      	adds	r1, r3, #6
   11810:	23ff      	movs	r3, #255	; 0xff
   11812:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
   11814:	466b      	mov	r3, sp
   11816:	1dd8      	adds	r0, r3, #7
   11818:	2300      	movs	r3, #0
   1181a:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   1181c:	68e3      	ldr	r3, [r4, #12]
   1181e:	6962      	ldr	r2, [r4, #20]
   11820:	4d13      	ldr	r5, [pc, #76]	; (11870 <MQTTConnect+0xcc>)
   11822:	47a8      	blx	r5
   11824:	2801      	cmp	r0, #1
   11826:	d002      	beq.n	1182e <MQTTConnect+0x8a>
            rc = FAILURE;
   11828:	2001      	movs	r0, #1
   1182a:	4240      	negs	r0, r0
   1182c:	e7e3      	b.n	117f6 <MQTTConnect+0x52>
            rc = connack_rc;
   1182e:	466b      	mov	r3, sp
   11830:	7998      	ldrb	r0, [r3, #6]
    if (rc == SUCCESS)
   11832:	2800      	cmp	r0, #0
   11834:	d1df      	bne.n	117f6 <MQTTConnect+0x52>
        c->isconnected = 1;
   11836:	2301      	movs	r3, #1
   11838:	6223      	str	r3, [r4, #32]
    return rc;
   1183a:	e7dc      	b.n	117f6 <MQTTConnect+0x52>
    int rc = FAILURE;
   1183c:	2001      	movs	r0, #1
   1183e:	4240      	negs	r0, r0
   11840:	e7d9      	b.n	117f6 <MQTTConnect+0x52>
   11842:	2001      	movs	r0, #1
   11844:	4240      	negs	r0, r0
   11846:	e7d6      	b.n	117f6 <MQTTConnect+0x52>
        rc = FAILURE;
   11848:	2001      	movs	r0, #1
   1184a:	4240      	negs	r0, r0
   1184c:	e7d3      	b.n	117f6 <MQTTConnect+0x52>
   1184e:	46c0      	nop			; (mov r8, r8)
   11850:	0001b9b4 	.word	0x0001b9b4
   11854:	00012b4d 	.word	0x00012b4d
   11858:	00011cdd 	.word	0x00011cdd
   1185c:	00011ca1 	.word	0x00011ca1
   11860:	00011cb5 	.word	0x00011cb5
   11864:	000120b5 	.word	0x000120b5
   11868:	00011321 	.word	0x00011321
   1186c:	0001176d 	.word	0x0001176d
   11870:	000121fd 	.word	0x000121fd

00011874 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   11874:	b5f0      	push	{r4, r5, r6, r7, lr}
   11876:	b091      	sub	sp, #68	; 0x44
   11878:	0004      	movs	r4, r0
   1187a:	000f      	movs	r7, r1
   1187c:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
   1187e:	2300      	movs	r3, #0
   11880:	930c      	str	r3, [sp, #48]	; 0x30
   11882:	930d      	str	r3, [sp, #52]	; 0x34
	int Qoss = (int) qos;
   11884:	920a      	str	r2, [sp, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
   11886:	910b      	str	r1, [sp, #44]	; 0x2c
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   11888:	6a03      	ldr	r3, [r0, #32]
   1188a:	2b00      	cmp	r3, #0
   1188c:	d05c      	beq.n	11948 <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
   1188e:	a80e      	add	r0, sp, #56	; 0x38
   11890:	4b32      	ldr	r3, [pc, #200]	; (1195c <MQTTSubscribe+0xe8>)
   11892:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   11894:	6861      	ldr	r1, [r4, #4]
   11896:	a80e      	add	r0, sp, #56	; 0x38
   11898:	4b31      	ldr	r3, [pc, #196]	; (11960 <MQTTSubscribe+0xec>)
   1189a:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   1189c:	6920      	ldr	r0, [r4, #16]
   1189e:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   118a0:	6823      	ldr	r3, [r4, #0]
   118a2:	4a30      	ldr	r2, [pc, #192]	; (11964 <MQTTSubscribe+0xf0>)
   118a4:	4293      	cmp	r3, r2
   118a6:	d017      	beq.n	118d8 <MQTTSubscribe+0x64>
   118a8:	3301      	adds	r3, #1
   118aa:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   118ac:	b29b      	uxth	r3, r3
   118ae:	aa0a      	add	r2, sp, #40	; 0x28
   118b0:	9202      	str	r2, [sp, #8]
   118b2:	aa0b      	add	r2, sp, #44	; 0x2c
   118b4:	9201      	str	r2, [sp, #4]
   118b6:	2201      	movs	r2, #1
   118b8:	9200      	str	r2, [sp, #0]
   118ba:	2200      	movs	r2, #0
   118bc:	4e2a      	ldr	r6, [pc, #168]	; (11968 <MQTTSubscribe+0xf4>)
   118be:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   118c0:	2800      	cmp	r0, #0
   118c2:	dd44      	ble.n	1194e <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   118c4:	aa0e      	add	r2, sp, #56	; 0x38
   118c6:	0001      	movs	r1, r0
   118c8:	0020      	movs	r0, r4
   118ca:	4b28      	ldr	r3, [pc, #160]	; (1196c <MQTTSubscribe+0xf8>)
   118cc:	4798      	blx	r3
   118ce:	1e06      	subs	r6, r0, #0
   118d0:	d004      	beq.n	118dc <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   118d2:	0030      	movs	r0, r6
   118d4:	b011      	add	sp, #68	; 0x44
   118d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   118d8:	2301      	movs	r3, #1
   118da:	e7e6      	b.n	118aa <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   118dc:	aa0e      	add	r2, sp, #56	; 0x38
   118de:	2109      	movs	r1, #9
   118e0:	0020      	movs	r0, r4
   118e2:	4b23      	ldr	r3, [pc, #140]	; (11970 <MQTTSubscribe+0xfc>)
   118e4:	4798      	blx	r3
   118e6:	2809      	cmp	r0, #9
   118e8:	d134      	bne.n	11954 <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
   118ea:	2300      	movs	r3, #0
   118ec:	9308      	str	r3, [sp, #32]
   118ee:	3b01      	subs	r3, #1
   118f0:	9309      	str	r3, [sp, #36]	; 0x24
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   118f2:	68e3      	ldr	r3, [r4, #12]
   118f4:	9301      	str	r3, [sp, #4]
   118f6:	6963      	ldr	r3, [r4, #20]
   118f8:	9300      	str	r3, [sp, #0]
   118fa:	ab09      	add	r3, sp, #36	; 0x24
   118fc:	aa08      	add	r2, sp, #32
   118fe:	2101      	movs	r1, #1
   11900:	300d      	adds	r0, #13
   11902:	ad02      	add	r5, sp, #8
   11904:	46ac      	mov	ip, r5
   11906:	4460      	add	r0, ip
   11908:	4d1a      	ldr	r5, [pc, #104]	; (11974 <MQTTSubscribe+0x100>)
   1190a:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1190c:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   1190e:	2801      	cmp	r0, #1
   11910:	d00e      	beq.n	11930 <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
   11912:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11914:	2b00      	cmp	r3, #0
   11916:	d010      	beq.n	1193a <MQTTSubscribe+0xc6>
   11918:	0022      	movs	r2, r4
   1191a:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1191c:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
   1191e:	6810      	ldr	r0, [r2, #0]
   11920:	2800      	cmp	r0, #0
   11922:	d00b      	beq.n	1193c <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   11924:	3301      	adds	r3, #1
   11926:	3208      	adds	r2, #8
   11928:	2b05      	cmp	r3, #5
   1192a:	d1f8      	bne.n	1191e <MQTTSubscribe+0xaa>
   1192c:	000e      	movs	r6, r1
   1192e:	e7d0      	b.n	118d2 <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   11930:	9909      	ldr	r1, [sp, #36]	; 0x24
        if (rc != 0x80)
   11932:	2980      	cmp	r1, #128	; 0x80
   11934:	d1ed      	bne.n	11912 <MQTTSubscribe+0x9e>
   11936:	000e      	movs	r6, r1
   11938:	e7cb      	b.n	118d2 <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
   1193a:	0033      	movs	r3, r6
   1193c:	00db      	lsls	r3, r3, #3
   1193e:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
   11940:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
   11942:	9b05      	ldr	r3, [sp, #20]
   11944:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
   11946:	e7c4      	b.n	118d2 <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
   11948:	2601      	movs	r6, #1
   1194a:	4276      	negs	r6, r6
   1194c:	e7c1      	b.n	118d2 <MQTTSubscribe+0x5e>
   1194e:	2601      	movs	r6, #1
   11950:	4276      	negs	r6, r6
   11952:	e7be      	b.n	118d2 <MQTTSubscribe+0x5e>
        rc = FAILURE;
   11954:	2601      	movs	r6, #1
   11956:	4276      	negs	r6, r6
    return rc;
   11958:	e7bb      	b.n	118d2 <MQTTSubscribe+0x5e>
   1195a:	46c0      	nop			; (mov r8, r8)
   1195c:	00011cdd 	.word	0x00011cdd
   11960:	00011ca1 	.word	0x00011ca1
   11964:	0000ffff 	.word	0x0000ffff
   11968:	0001277d 	.word	0x0001277d
   1196c:	00011321 	.word	0x00011321
   11970:	0001176d 	.word	0x0001176d
   11974:	00012831 	.word	0x00012831

00011978 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   11978:	b5f0      	push	{r4, r5, r6, r7, lr}
   1197a:	b08f      	sub	sp, #60	; 0x3c
   1197c:	0005      	movs	r5, r0
   1197e:	0014      	movs	r4, r2
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   11980:	2300      	movs	r3, #0
   11982:	930a      	str	r3, [sp, #40]	; 0x28
   11984:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicName;
   11986:	9109      	str	r1, [sp, #36]	; 0x24
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   11988:	6a03      	ldr	r3, [r0, #32]
   1198a:	2b00      	cmp	r3, #0
   1198c:	d062      	beq.n	11a54 <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
   1198e:	a80c      	add	r0, sp, #48	; 0x30
   11990:	4b36      	ldr	r3, [pc, #216]	; (11a6c <MQTTPublish+0xf4>)
   11992:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   11994:	6869      	ldr	r1, [r5, #4]
   11996:	a80c      	add	r0, sp, #48	; 0x30
   11998:	4b35      	ldr	r3, [pc, #212]	; (11a70 <MQTTPublish+0xf8>)
   1199a:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   1199c:	7823      	ldrb	r3, [r4, #0]
   1199e:	3b01      	subs	r3, #1
   119a0:	2b01      	cmp	r3, #1
   119a2:	d921      	bls.n	119e8 <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   119a4:	7823      	ldrb	r3, [r4, #0]
   119a6:	68e2      	ldr	r2, [r4, #12]
   119a8:	9206      	str	r2, [sp, #24]
   119aa:	68a2      	ldr	r2, [r4, #8]
   119ac:	9205      	str	r2, [sp, #20]
   119ae:	aa09      	add	r2, sp, #36	; 0x24
   119b0:	a902      	add	r1, sp, #8
   119b2:	cac1      	ldmia	r2!, {r0, r6, r7}
   119b4:	c1c1      	stmia	r1!, {r0, r6, r7}
   119b6:	88a2      	ldrh	r2, [r4, #4]
   119b8:	9201      	str	r2, [sp, #4]
   119ba:	7862      	ldrb	r2, [r4, #1]
   119bc:	9200      	str	r2, [sp, #0]
   119be:	2200      	movs	r2, #0
   119c0:	68a9      	ldr	r1, [r5, #8]
   119c2:	6928      	ldr	r0, [r5, #16]
   119c4:	4e2b      	ldr	r6, [pc, #172]	; (11a74 <MQTTPublish+0xfc>)
   119c6:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
   119c8:	2800      	cmp	r0, #0
   119ca:	dd46      	ble.n	11a5a <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   119cc:	aa0c      	add	r2, sp, #48	; 0x30
   119ce:	0001      	movs	r1, r0
   119d0:	0028      	movs	r0, r5
   119d2:	4b29      	ldr	r3, [pc, #164]	; (11a78 <MQTTPublish+0x100>)
   119d4:	4798      	blx	r3
   119d6:	2800      	cmp	r0, #0
   119d8:	d104      	bne.n	119e4 <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   119da:	7823      	ldrb	r3, [r4, #0]
   119dc:	2b01      	cmp	r3, #1
   119de:	d00d      	beq.n	119fc <MQTTPublish+0x84>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
   119e0:	2b02      	cmp	r3, #2
   119e2:	d021      	beq.n	11a28 <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   119e4:	b00f      	add	sp, #60	; 0x3c
   119e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   119e8:	682b      	ldr	r3, [r5, #0]
   119ea:	4a24      	ldr	r2, [pc, #144]	; (11a7c <MQTTPublish+0x104>)
   119ec:	4293      	cmp	r3, r2
   119ee:	d003      	beq.n	119f8 <MQTTPublish+0x80>
   119f0:	3301      	adds	r3, #1
   119f2:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
   119f4:	80a3      	strh	r3, [r4, #4]
   119f6:	e7d5      	b.n	119a4 <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   119f8:	2301      	movs	r3, #1
   119fa:	e7fa      	b.n	119f2 <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   119fc:	aa0c      	add	r2, sp, #48	; 0x30
   119fe:	2104      	movs	r1, #4
   11a00:	0028      	movs	r0, r5
   11a02:	4b1f      	ldr	r3, [pc, #124]	; (11a80 <MQTTPublish+0x108>)
   11a04:	4798      	blx	r3
   11a06:	2804      	cmp	r0, #4
   11a08:	d12a      	bne.n	11a60 <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   11a0a:	696b      	ldr	r3, [r5, #20]
   11a0c:	68ea      	ldr	r2, [r5, #12]
   11a0e:	9200      	str	r2, [sp, #0]
   11a10:	2222      	movs	r2, #34	; 0x22
   11a12:	446a      	add	r2, sp
   11a14:	a908      	add	r1, sp, #32
   11a16:	301d      	adds	r0, #29
   11a18:	4468      	add	r0, sp
   11a1a:	4c1a      	ldr	r4, [pc, #104]	; (11a84 <MQTTPublish+0x10c>)
   11a1c:	47a0      	blx	r4
   11a1e:	3801      	subs	r0, #1
   11a20:	1e43      	subs	r3, r0, #1
   11a22:	4198      	sbcs	r0, r3
   11a24:	4240      	negs	r0, r0
   11a26:	e7dd      	b.n	119e4 <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   11a28:	aa0c      	add	r2, sp, #48	; 0x30
   11a2a:	2107      	movs	r1, #7
   11a2c:	0028      	movs	r0, r5
   11a2e:	4b14      	ldr	r3, [pc, #80]	; (11a80 <MQTTPublish+0x108>)
   11a30:	4798      	blx	r3
   11a32:	2807      	cmp	r0, #7
   11a34:	d117      	bne.n	11a66 <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   11a36:	696b      	ldr	r3, [r5, #20]
   11a38:	68ea      	ldr	r2, [r5, #12]
   11a3a:	9200      	str	r2, [sp, #0]
   11a3c:	2222      	movs	r2, #34	; 0x22
   11a3e:	446a      	add	r2, sp
   11a40:	a908      	add	r1, sp, #32
   11a42:	301a      	adds	r0, #26
   11a44:	4468      	add	r0, sp
   11a46:	4c0f      	ldr	r4, [pc, #60]	; (11a84 <MQTTPublish+0x10c>)
   11a48:	47a0      	blx	r4
   11a4a:	3801      	subs	r0, #1
   11a4c:	1e43      	subs	r3, r0, #1
   11a4e:	4198      	sbcs	r0, r3
   11a50:	4240      	negs	r0, r0
   11a52:	e7c7      	b.n	119e4 <MQTTPublish+0x6c>
    int rc = FAILURE;
   11a54:	2001      	movs	r0, #1
   11a56:	4240      	negs	r0, r0
   11a58:	e7c4      	b.n	119e4 <MQTTPublish+0x6c>
   11a5a:	2001      	movs	r0, #1
   11a5c:	4240      	negs	r0, r0
   11a5e:	e7c1      	b.n	119e4 <MQTTPublish+0x6c>
            rc = FAILURE;
   11a60:	2001      	movs	r0, #1
   11a62:	4240      	negs	r0, r0
   11a64:	e7be      	b.n	119e4 <MQTTPublish+0x6c>
            rc = FAILURE;
   11a66:	2001      	movs	r0, #1
   11a68:	4240      	negs	r0, r0
    return rc;
   11a6a:	e7bb      	b.n	119e4 <MQTTPublish+0x6c>
   11a6c:	00011cdd 	.word	0x00011cdd
   11a70:	00011ca1 	.word	0x00011ca1
   11a74:	0001261d 	.word	0x0001261d
   11a78:	00011321 	.word	0x00011321
   11a7c:	0000ffff 	.word	0x0000ffff
   11a80:	0001176d 	.word	0x0001176d
   11a84:	00012341 	.word	0x00012341

00011a88 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   11a88:	b510      	push	{r4, lr}
   11a8a:	b082      	sub	sp, #8
   11a8c:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   11a8e:	4668      	mov	r0, sp
   11a90:	4b0b      	ldr	r3, [pc, #44]	; (11ac0 <MQTTDisconnect+0x38>)
   11a92:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   11a94:	6861      	ldr	r1, [r4, #4]
   11a96:	4668      	mov	r0, sp
   11a98:	4b0a      	ldr	r3, [pc, #40]	; (11ac4 <MQTTDisconnect+0x3c>)
   11a9a:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   11a9c:	68a1      	ldr	r1, [r4, #8]
   11a9e:	6920      	ldr	r0, [r4, #16]
   11aa0:	4b09      	ldr	r3, [pc, #36]	; (11ac8 <MQTTDisconnect+0x40>)
   11aa2:	4798      	blx	r3
    if (len > 0)
   11aa4:	2800      	cmp	r0, #0
   11aa6:	dd08      	ble.n	11aba <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   11aa8:	466a      	mov	r2, sp
   11aaa:	0001      	movs	r1, r0
   11aac:	0020      	movs	r0, r4
   11aae:	4b07      	ldr	r3, [pc, #28]	; (11acc <MQTTDisconnect+0x44>)
   11ab0:	4798      	blx	r3
        
    c->isconnected = 0;
   11ab2:	2300      	movs	r3, #0
   11ab4:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   11ab6:	b002      	add	sp, #8
   11ab8:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
   11aba:	2001      	movs	r0, #1
   11abc:	4240      	negs	r0, r0
   11abe:	e7f8      	b.n	11ab2 <MQTTDisconnect+0x2a>
   11ac0:	00011cdd 	.word	0x00011cdd
   11ac4:	00011ca1 	.word	0x00011ca1
   11ac8:	00012289 	.word	0x00012289
   11acc:	00011321 	.word	0x00011321

00011ad0 <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
   11ad0:	b510      	push	{r4, lr}
   11ad2:	0004      	movs	r4, r0
	close(n->socket);
   11ad4:	2000      	movs	r0, #0
   11ad6:	5620      	ldrsb	r0, [r4, r0]
   11ad8:	4b04      	ldr	r3, [pc, #16]	; (11aec <WINC1500_disconnect+0x1c>)
   11ada:	4798      	blx	r3
	n->socket=-1;
   11adc:	2301      	movs	r3, #1
   11ade:	425b      	negs	r3, r3
   11ae0:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
   11ae2:	2200      	movs	r2, #0
   11ae4:	4b02      	ldr	r3, [pc, #8]	; (11af0 <WINC1500_disconnect+0x20>)
   11ae6:	701a      	strb	r2, [r3, #0]
}
   11ae8:	bd10      	pop	{r4, pc}
   11aea:	46c0      	nop			; (mov r8, r8)
   11aec:	0000ce41 	.word	0x0000ce41
   11af0:	2000419a 	.word	0x2000419a

00011af4 <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   11af4:	b570      	push	{r4, r5, r6, lr}
   11af6:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
   11af8:	2200      	movs	r2, #0
   11afa:	4b0d      	ldr	r3, [pc, #52]	; (11b30 <WINC1500_write+0x3c>)
   11afc:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   11afe:	b2b2      	uxth	r2, r6
   11b00:	7800      	ldrb	r0, [r0, #0]
   11b02:	b240      	sxtb	r0, r0
   11b04:	2300      	movs	r3, #0
   11b06:	4c0b      	ldr	r4, [pc, #44]	; (11b34 <WINC1500_write+0x40>)
   11b08:	47a0      	blx	r4
   11b0a:	2800      	cmp	r0, #0
   11b0c:	d10c      	bne.n	11b28 <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
   11b0e:	4b08      	ldr	r3, [pc, #32]	; (11b30 <WINC1500_write+0x3c>)
   11b10:	781b      	ldrb	r3, [r3, #0]
   11b12:	2b00      	cmp	r3, #0
   11b14:	d106      	bne.n	11b24 <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
   11b16:	4d08      	ldr	r5, [pc, #32]	; (11b38 <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
   11b18:	4c05      	ldr	r4, [pc, #20]	; (11b30 <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
   11b1a:	2000      	movs	r0, #0
   11b1c:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
   11b1e:	7823      	ldrb	r3, [r4, #0]
   11b20:	2b00      	cmp	r3, #0
   11b22:	d0fa      	beq.n	11b1a <WINC1500_write+0x26>
}
   11b24:	0030      	movs	r0, r6
   11b26:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
   11b28:	2601      	movs	r6, #1
   11b2a:	4276      	negs	r6, r6
   11b2c:	e7fa      	b.n	11b24 <WINC1500_write+0x30>
   11b2e:	46c0      	nop			; (mov r8, r8)
   11b30:	2000419d 	.word	0x2000419d
   11b34:	0000cd15 	.word	0x0000cd15
   11b38:	0000ad2d 	.word	0x0000ad2d

00011b3c <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   11b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b3e:	b083      	sub	sp, #12
   11b40:	9101      	str	r1, [sp, #4]
   11b42:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
   11b44:	2b00      	cmp	r3, #0
   11b46:	d100      	bne.n	11b4a <WINC1500_read+0xe>
   11b48:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   11b4a:	4a22      	ldr	r2, [pc, #136]	; (11bd4 <WINC1500_read+0x98>)
   11b4c:	6812      	ldr	r2, [r2, #0]
   11b4e:	2a00      	cmp	r2, #0
   11b50:	d013      	beq.n	11b7a <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
   11b52:	4b20      	ldr	r3, [pc, #128]	; (11bd4 <WINC1500_read+0x98>)
   11b54:	681d      	ldr	r5, [r3, #0]
   11b56:	42a5      	cmp	r5, r4
   11b58:	db39      	blt.n	11bce <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   11b5a:	4e1f      	ldr	r6, [pc, #124]	; (11bd8 <WINC1500_read+0x9c>)
   11b5c:	6837      	ldr	r7, [r6, #0]
   11b5e:	491f      	ldr	r1, [pc, #124]	; (11bdc <WINC1500_read+0xa0>)
   11b60:	19c9      	adds	r1, r1, r7
   11b62:	0022      	movs	r2, r4
   11b64:	9801      	ldr	r0, [sp, #4]
   11b66:	4b1e      	ldr	r3, [pc, #120]	; (11be0 <WINC1500_read+0xa4>)
   11b68:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   11b6a:	1b2d      	subs	r5, r5, r4
   11b6c:	4b19      	ldr	r3, [pc, #100]	; (11bd4 <WINC1500_read+0x98>)
   11b6e:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   11b70:	193f      	adds	r7, r7, r4
   11b72:	6037      	str	r7, [r6, #0]
  return len;
   11b74:	0020      	movs	r0, r4
}
   11b76:	b003      	add	sp, #12
   11b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
   11b7a:	2100      	movs	r1, #0
   11b7c:	4a19      	ldr	r2, [pc, #100]	; (11be4 <WINC1500_read+0xa8>)
   11b7e:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   11b80:	7800      	ldrb	r0, [r0, #0]
   11b82:	b240      	sxtb	r0, r0
   11b84:	2280      	movs	r2, #128	; 0x80
   11b86:	0052      	lsls	r2, r2, #1
   11b88:	4914      	ldr	r1, [pc, #80]	; (11bdc <WINC1500_read+0xa0>)
   11b8a:	4d17      	ldr	r5, [pc, #92]	; (11be8 <WINC1500_read+0xac>)
   11b8c:	47a8      	blx	r5
   11b8e:	2800      	cmp	r0, #0
   11b90:	d11a      	bne.n	11bc8 <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
   11b92:	4b14      	ldr	r3, [pc, #80]	; (11be4 <WINC1500_read+0xa8>)
   11b94:	781b      	ldrb	r3, [r3, #0]
   11b96:	2b00      	cmp	r3, #0
   11b98:	d106      	bne.n	11ba8 <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
   11b9a:	4f14      	ldr	r7, [pc, #80]	; (11bec <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
   11b9c:	4d11      	ldr	r5, [pc, #68]	; (11be4 <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
   11b9e:	2000      	movs	r0, #0
   11ba0:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
   11ba2:	782b      	ldrb	r3, [r5, #0]
   11ba4:	2b00      	cmp	r3, #0
   11ba6:	d0fa      	beq.n	11b9e <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   11ba8:	4b11      	ldr	r3, [pc, #68]	; (11bf0 <WINC1500_read+0xb4>)
   11baa:	6818      	ldr	r0, [r3, #0]
   11bac:	2800      	cmp	r0, #0
   11bae:	dd05      	ble.n	11bbc <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   11bb0:	4b08      	ldr	r3, [pc, #32]	; (11bd4 <WINC1500_read+0x98>)
   11bb2:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   11bb4:	2200      	movs	r2, #0
   11bb6:	4b08      	ldr	r3, [pc, #32]	; (11bd8 <WINC1500_read+0x9c>)
   11bb8:	601a      	str	r2, [r3, #0]
   11bba:	e7ca      	b.n	11b52 <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
   11bbc:	2300      	movs	r3, #0
   11bbe:	4a05      	ldr	r2, [pc, #20]	; (11bd4 <WINC1500_read+0x98>)
   11bc0:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
   11bc2:	4a05      	ldr	r2, [pc, #20]	; (11bd8 <WINC1500_read+0x9c>)
   11bc4:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   11bc6:	e7d6      	b.n	11b76 <WINC1500_read+0x3a>
		  return -1;
   11bc8:	2001      	movs	r0, #1
   11bca:	4240      	negs	r0, r0
   11bcc:	e7d3      	b.n	11b76 <WINC1500_read+0x3a>
	  return -1;
   11bce:	2001      	movs	r0, #1
   11bd0:	4240      	negs	r0, r0
   11bd2:	e7d0      	b.n	11b76 <WINC1500_read+0x3a>
   11bd4:	200042ac 	.word	0x200042ac
   11bd8:	200042b0 	.word	0x200042b0
   11bdc:	200041a0 	.word	0x200041a0
   11be0:	00012b4d 	.word	0x00012b4d
   11be4:	2000419c 	.word	0x2000419c
   11be8:	0000cdad 	.word	0x0000cdad
   11bec:	0000ad2d 	.word	0x0000ad2d
   11bf0:	200042a4 	.word	0x200042a4

00011bf4 <dnsResolveCallback>:
{
   11bf4:	b510      	push	{r4, lr}
   11bf6:	0002      	movs	r2, r0
   11bf8:	000c      	movs	r4, r1
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   11bfa:	4b08      	ldr	r3, [pc, #32]	; (11c1c <dnsResolveCallback+0x28>)
   11bfc:	781b      	ldrb	r3, [r3, #0]
   11bfe:	2b00      	cmp	r3, #0
   11c00:	d10b      	bne.n	11c1a <dnsResolveCallback+0x26>
   11c02:	4b07      	ldr	r3, [pc, #28]	; (11c20 <dnsResolveCallback+0x2c>)
   11c04:	6818      	ldr	r0, [r3, #0]
   11c06:	0011      	movs	r1, r2
   11c08:	4b06      	ldr	r3, [pc, #24]	; (11c24 <dnsResolveCallback+0x30>)
   11c0a:	4798      	blx	r3
   11c0c:	2800      	cmp	r0, #0
   11c0e:	d104      	bne.n	11c1a <dnsResolveCallback+0x26>
		gi32MQTTBrokerIp = hostIp;
   11c10:	4b05      	ldr	r3, [pc, #20]	; (11c28 <dnsResolveCallback+0x34>)
   11c12:	601c      	str	r4, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   11c14:	2201      	movs	r2, #1
   11c16:	4b01      	ldr	r3, [pc, #4]	; (11c1c <dnsResolveCallback+0x28>)
   11c18:	701a      	strb	r2, [r3, #0]
}
   11c1a:	bd10      	pop	{r4, pc}
   11c1c:	2000419b 	.word	0x2000419b
   11c20:	200042a8 	.word	0x200042a8
   11c24:	000137bb 	.word	0x000137bb
   11c28:	200042a0 	.word	0x200042a0

00011c2c <tcpClientSocketEventHandler>:
{
   11c2c:	b530      	push	{r4, r5, lr}
   11c2e:	4b12      	ldr	r3, [pc, #72]	; (11c78 <tcpClientSocketEventHandler+0x4c>)
   11c30:	24a8      	movs	r4, #168	; 0xa8
   11c32:	00a4      	lsls	r4, r4, #2
   11c34:	191d      	adds	r5, r3, r4
   11c36:	e002      	b.n	11c3e <tcpClientSocketEventHandler+0x12>
   11c38:	3360      	adds	r3, #96	; 0x60
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   11c3a:	42ab      	cmp	r3, r5
   11c3c:	d00b      	beq.n	11c56 <tcpClientSocketEventHandler+0x2a>
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   11c3e:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
   11c40:	2c00      	cmp	r4, #0
   11c42:	d0f9      	beq.n	11c38 <tcpClientSocketEventHandler+0xc>
			if(mqttInstance->network.socket == sock)
   11c44:	6a24      	ldr	r4, [r4, #32]
   11c46:	4284      	cmp	r4, r0
   11c48:	d1f6      	bne.n	11c38 <tcpClientSocketEventHandler+0xc>
		switch (u8Msg) {
   11c4a:	2906      	cmp	r1, #6
   11c4c:	d00c      	beq.n	11c68 <tcpClientSocketEventHandler+0x3c>
   11c4e:	2907      	cmp	r1, #7
   11c50:	d006      	beq.n	11c60 <tcpClientSocketEventHandler+0x34>
   11c52:	2905      	cmp	r1, #5
   11c54:	d000      	beq.n	11c58 <tcpClientSocketEventHandler+0x2c>
}
   11c56:	bd30      	pop	{r4, r5, pc}
				gbMQTTBrokerConnected=true;
   11c58:	2201      	movs	r2, #1
   11c5a:	4b08      	ldr	r3, [pc, #32]	; (11c7c <tcpClientSocketEventHandler+0x50>)
   11c5c:	701a      	strb	r2, [r3, #0]
			break;
   11c5e:	e7fa      	b.n	11c56 <tcpClientSocketEventHandler+0x2a>
				gbMQTTBrokerSendDone=true;
   11c60:	2201      	movs	r2, #1
   11c62:	4b07      	ldr	r3, [pc, #28]	; (11c80 <tcpClientSocketEventHandler+0x54>)
   11c64:	701a      	strb	r2, [r3, #0]
			break;
   11c66:	e7f6      	b.n	11c56 <tcpClientSocketEventHandler+0x2a>
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   11c68:	2304      	movs	r3, #4
   11c6a:	5ed2      	ldrsh	r2, [r2, r3]
   11c6c:	4b05      	ldr	r3, [pc, #20]	; (11c84 <tcpClientSocketEventHandler+0x58>)
   11c6e:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   11c70:	2201      	movs	r2, #1
   11c72:	4b05      	ldr	r3, [pc, #20]	; (11c88 <tcpClientSocketEventHandler+0x5c>)
   11c74:	701a      	strb	r2, [r3, #0]
}
   11c76:	e7ee      	b.n	11c56 <tcpClientSocketEventHandler+0x2a>
   11c78:	200042b4 	.word	0x200042b4
   11c7c:	2000419a 	.word	0x2000419a
   11c80:	2000419d 	.word	0x2000419d
   11c84:	200042a4 	.word	0x200042a4
   11c88:	2000419c 	.word	0x2000419c

00011c8c <TimerIsExpired>:
char TimerIsExpired(Timer* timer) {
   11c8c:	b510      	push	{r4, lr}
	long left = timer->end_time - xTaskGetTickCount();
   11c8e:	6844      	ldr	r4, [r0, #4]
   11c90:	4b02      	ldr	r3, [pc, #8]	; (11c9c <TimerIsExpired+0x10>)
   11c92:	4798      	blx	r3
   11c94:	1a20      	subs	r0, r4, r0
	return (left < 0);
   11c96:	0fc0      	lsrs	r0, r0, #31
}
   11c98:	bd10      	pop	{r4, pc}
   11c9a:	46c0      	nop			; (mov r8, r8)
   11c9c:	00007a05 	.word	0x00007a05

00011ca0 <TimerCountdownMS>:
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
   11ca0:	b570      	push	{r4, r5, r6, lr}
   11ca2:	0004      	movs	r4, r0
   11ca4:	000d      	movs	r5, r1
	timer->end_time = xTaskGetTickCount() + timeout;
   11ca6:	4b02      	ldr	r3, [pc, #8]	; (11cb0 <TimerCountdownMS+0x10>)
   11ca8:	4798      	blx	r3
   11caa:	1940      	adds	r0, r0, r5
   11cac:	6060      	str	r0, [r4, #4]
}
   11cae:	bd70      	pop	{r4, r5, r6, pc}
   11cb0:	00007a05 	.word	0x00007a05

00011cb4 <TimerCountdown>:
void TimerCountdown(Timer* timer, unsigned int timeout) {
   11cb4:	b510      	push	{r4, lr}
   11cb6:	0004      	movs	r4, r0
	timer->end_time = xTaskGetTickCount(); + (timeout * 1000);
   11cb8:	4b01      	ldr	r3, [pc, #4]	; (11cc0 <TimerCountdown+0xc>)
   11cba:	4798      	blx	r3
   11cbc:	6060      	str	r0, [r4, #4]
}
   11cbe:	bd10      	pop	{r4, pc}
   11cc0:	00007a05 	.word	0x00007a05

00011cc4 <TimerLeftMS>:
int TimerLeftMS(Timer* timer) {
   11cc4:	b510      	push	{r4, lr}
	long left = timer->end_time - xTaskGetTickCount();
   11cc6:	6844      	ldr	r4, [r0, #4]
   11cc8:	4b03      	ldr	r3, [pc, #12]	; (11cd8 <TimerLeftMS+0x14>)
   11cca:	4798      	blx	r3
   11ccc:	1a20      	subs	r0, r4, r0
	return (left < 0) ? 0 : left;
   11cce:	43c3      	mvns	r3, r0
   11cd0:	17db      	asrs	r3, r3, #31
   11cd2:	4018      	ands	r0, r3
}
   11cd4:	bd10      	pop	{r4, pc}
   11cd6:	46c0      	nop			; (mov r8, r8)
   11cd8:	00007a05 	.word	0x00007a05

00011cdc <TimerInit>:
	timer->end_time = 0;
   11cdc:	2300      	movs	r3, #0
   11cde:	6043      	str	r3, [r0, #4]
}
   11ce0:	4770      	bx	lr
	...

00011ce4 <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
   11ce4:	2301      	movs	r3, #1
   11ce6:	425b      	negs	r3, r3
   11ce8:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
   11cea:	4b03      	ldr	r3, [pc, #12]	; (11cf8 <NetworkInit+0x14>)
   11cec:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
   11cee:	4b03      	ldr	r3, [pc, #12]	; (11cfc <NetworkInit+0x18>)
   11cf0:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
   11cf2:	4b03      	ldr	r3, [pc, #12]	; (11d00 <NetworkInit+0x1c>)
   11cf4:	6103      	str	r3, [r0, #16]
}
   11cf6:	4770      	bx	lr
   11cf8:	00011b3d 	.word	0x00011b3d
   11cfc:	00011af5 	.word	0x00011af5
   11d00:	00011ad1 	.word	0x00011ad1

00011d04 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   11d04:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d06:	b087      	sub	sp, #28
   11d08:	0006      	movs	r6, r0
   11d0a:	0015      	movs	r5, r2
   11d0c:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   11d0e:	4c25      	ldr	r4, [pc, #148]	; (11da4 <ConnectNetwork+0xa0>)
   11d10:	2300      	movs	r3, #0
   11d12:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
   11d14:	4b24      	ldr	r3, [pc, #144]	; (11da8 <ConnectNetwork+0xa4>)
   11d16:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
   11d18:	0008      	movs	r0, r1
   11d1a:	4b24      	ldr	r3, [pc, #144]	; (11dac <ConnectNetwork+0xa8>)
   11d1c:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   11d1e:	7823      	ldrb	r3, [r4, #0]
   11d20:	2b00      	cmp	r3, #0
   11d22:	d106      	bne.n	11d32 <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
   11d24:	4f22      	ldr	r7, [pc, #136]	; (11db0 <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
   11d26:	4c1f      	ldr	r4, [pc, #124]	; (11da4 <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
   11d28:	2000      	movs	r0, #0
   11d2a:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
   11d2c:	7823      	ldrb	r3, [r4, #0]
   11d2e:	2b00      	cmp	r3, #0
   11d30:	d0fa      	beq.n	11d28 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   11d32:	4b20      	ldr	r3, [pc, #128]	; (11db4 <ConnectNetwork+0xb0>)
   11d34:	681a      	ldr	r2, [r3, #0]
   11d36:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   11d38:	2302      	movs	r3, #2
   11d3a:	a902      	add	r1, sp, #8
   11d3c:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
   11d3e:	022b      	lsls	r3, r5, #8
   11d40:	491d      	ldr	r1, [pc, #116]	; (11db8 <ConnectNetwork+0xb4>)
   11d42:	400b      	ands	r3, r1
   11d44:	b2ad      	uxth	r5, r5
   11d46:	0a2d      	lsrs	r5, r5, #8
   11d48:	431d      	orrs	r5, r3
   11d4a:	ab02      	add	r3, sp, #8
   11d4c:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   11d4e:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
   11d50:	6833      	ldr	r3, [r6, #0]
   11d52:	2b00      	cmp	r3, #0
   11d54:	db16      	blt.n	11d84 <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   11d56:	6830      	ldr	r0, [r6, #0]
   11d58:	1c43      	adds	r3, r0, #1
   11d5a:	d01b      	beq.n	11d94 <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   11d5c:	b240      	sxtb	r0, r0
   11d5e:	2210      	movs	r2, #16
   11d60:	a902      	add	r1, sp, #8
   11d62:	4b16      	ldr	r3, [pc, #88]	; (11dbc <ConnectNetwork+0xb8>)
   11d64:	4798      	blx	r3
   11d66:	2800      	cmp	r0, #0
   11d68:	d119      	bne.n	11d9e <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
   11d6a:	2200      	movs	r2, #0
   11d6c:	4b14      	ldr	r3, [pc, #80]	; (11dc0 <ConnectNetwork+0xbc>)
   11d6e:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
   11d70:	4d0f      	ldr	r5, [pc, #60]	; (11db0 <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
   11d72:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
   11d74:	2000      	movs	r0, #0
   11d76:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
   11d78:	7823      	ldrb	r3, [r4, #0]
   11d7a:	2b00      	cmp	r3, #0
   11d7c:	d0fa      	beq.n	11d74 <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   11d7e:	2000      	movs	r0, #0
   11d80:	b007      	add	sp, #28
   11d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   11d84:	466b      	mov	r3, sp
   11d86:	791a      	ldrb	r2, [r3, #4]
   11d88:	2101      	movs	r1, #1
   11d8a:	2002      	movs	r0, #2
   11d8c:	4b0d      	ldr	r3, [pc, #52]	; (11dc4 <ConnectNetwork+0xc0>)
   11d8e:	4798      	blx	r3
   11d90:	6030      	str	r0, [r6, #0]
   11d92:	e7e0      	b.n	11d56 <ConnectNetwork+0x52>
   close(n->socket);
   11d94:	4b0c      	ldr	r3, [pc, #48]	; (11dc8 <ConnectNetwork+0xc4>)
   11d96:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   11d98:	2009      	movs	r0, #9
   11d9a:	4240      	negs	r0, r0
   11d9c:	e7f0      	b.n	11d80 <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
   11d9e:	2009      	movs	r0, #9
   11da0:	4240      	negs	r0, r0
   11da2:	e7ed      	b.n	11d80 <ConnectNetwork+0x7c>
   11da4:	2000419b 	.word	0x2000419b
   11da8:	200042a8 	.word	0x200042a8
   11dac:	0000cf45 	.word	0x0000cf45
   11db0:	0000ad2d 	.word	0x0000ad2d
   11db4:	200042a0 	.word	0x200042a0
   11db8:	00ffff00 	.word	0x00ffff00
   11dbc:	0000cc85 	.word	0x0000cc85
   11dc0:	2000419a 	.word	0x2000419a
   11dc4:	0000cb05 	.word	0x0000cb05
   11dc8:	0000ce41 	.word	0x0000ce41

00011dcc <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   11dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11dce:	b085      	sub	sp, #20
   11dd0:	0006      	movs	r6, r0
   11dd2:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   11dd4:	2800      	cmp	r0, #0
   11dd6:	d03d      	beq.n	11e54 <mqtt_init+0x88>
   11dd8:	2900      	cmp	r1, #0
   11dda:	d03e      	beq.n	11e5a <mqtt_init+0x8e>
   11ddc:	690b      	ldr	r3, [r1, #16]
   11dde:	2b00      	cmp	r3, #0
   11de0:	d03e      	beq.n	11e60 <mqtt_init+0x94>
   11de2:	688b      	ldr	r3, [r1, #8]
   11de4:	2b00      	cmp	r3, #0
   11de6:	d03e      	beq.n	11e66 <mqtt_init+0x9a>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
   11de8:	888b      	ldrh	r3, [r1, #4]
   11dea:	27fa      	movs	r7, #250	; 0xfa
   11dec:	00bf      	lsls	r7, r7, #2
   11dee:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
   11df0:	0004      	movs	r4, r0
   11df2:	3420      	adds	r4, #32
   11df4:	0020      	movs	r0, r4
   11df6:	4b1f      	ldr	r3, [pc, #124]	; (11e74 <mqtt_init+0xa8>)
   11df8:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   11dfa:	1d30      	adds	r0, r6, #4
   11dfc:	2218      	movs	r2, #24
   11dfe:	0029      	movs	r1, r5
   11e00:	4b1d      	ldr	r3, [pc, #116]	; (11e78 <mqtt_init+0xac>)
   11e02:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   11e04:	4b1d      	ldr	r3, [pc, #116]	; (11e7c <mqtt_init+0xb0>)
   11e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   11e08:	2b00      	cmp	r3, #0
   11e0a:	d01a      	beq.n	11e42 <mqtt_init+0x76>
   11e0c:	4b1b      	ldr	r3, [pc, #108]	; (11e7c <mqtt_init+0xb0>)
   11e0e:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   11e10:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   11e12:	6819      	ldr	r1, [r3, #0]
   11e14:	2900      	cmp	r1, #0
   11e16:	d015      	beq.n	11e44 <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   11e18:	3201      	adds	r2, #1
   11e1a:	3360      	adds	r3, #96	; 0x60
   11e1c:	2a07      	cmp	r2, #7
   11e1e:	d1f8      	bne.n	11e12 <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
   11e20:	69f0      	ldr	r0, [r6, #28]
   11e22:	2800      	cmp	r0, #0
   11e24:	d022      	beq.n	11e6c <mqtt_init+0xa0>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   11e26:	692b      	ldr	r3, [r5, #16]
   11e28:	68ea      	ldr	r2, [r5, #12]
   11e2a:	9202      	str	r2, [sp, #8]
   11e2c:	68aa      	ldr	r2, [r5, #8]
   11e2e:	9201      	str	r2, [sp, #4]
   11e30:	696a      	ldr	r2, [r5, #20]
   11e32:	9200      	str	r2, [sp, #0]
   11e34:	003a      	movs	r2, r7
   11e36:	0021      	movs	r1, r4
   11e38:	4c11      	ldr	r4, [pc, #68]	; (11e80 <mqtt_init+0xb4>)
   11e3a:	47a0      	blx	r4
		return SUCCESS;
   11e3c:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   11e3e:	b005      	add	sp, #20
   11e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   11e42:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
   11e44:	480d      	ldr	r0, [pc, #52]	; (11e7c <mqtt_init+0xb0>)
   11e46:	0053      	lsls	r3, r2, #1
   11e48:	1899      	adds	r1, r3, r2
   11e4a:	0149      	lsls	r1, r1, #5
   11e4c:	1841      	adds	r1, r0, r1
   11e4e:	65ce      	str	r6, [r1, #92]	; 0x5c
			module->client = &(mqttClientPool[cIdx].client);
   11e50:	61f1      	str	r1, [r6, #28]
   11e52:	e7e5      	b.n	11e20 <mqtt_init+0x54>
		return FAILURE;
   11e54:	2001      	movs	r0, #1
   11e56:	4240      	negs	r0, r0
   11e58:	e7f1      	b.n	11e3e <mqtt_init+0x72>
   11e5a:	2001      	movs	r0, #1
   11e5c:	4240      	negs	r0, r0
   11e5e:	e7ee      	b.n	11e3e <mqtt_init+0x72>
   11e60:	2001      	movs	r0, #1
   11e62:	4240      	negs	r0, r0
   11e64:	e7eb      	b.n	11e3e <mqtt_init+0x72>
   11e66:	2001      	movs	r0, #1
   11e68:	4240      	negs	r0, r0
   11e6a:	e7e8      	b.n	11e3e <mqtt_init+0x72>
		return FAILURE;
   11e6c:	2001      	movs	r0, #1
   11e6e:	4240      	negs	r0, r0
   11e70:	e7e5      	b.n	11e3e <mqtt_init+0x72>
   11e72:	46c0      	nop			; (mov r8, r8)
   11e74:	00011ce5 	.word	0x00011ce5
   11e78:	00012b4d 	.word	0x00012b4d
   11e7c:	200042b4 	.word	0x200042b4
   11e80:	0001139d 	.word	0x0001139d

00011e84 <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
   11e84:	4b05      	ldr	r3, [pc, #20]	; (11e9c <mqtt_get_config_defaults+0x18>)
   11e86:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   11e88:	2300      	movs	r3, #0
   11e8a:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
   11e8c:	223c      	movs	r2, #60	; 0x3c
   11e8e:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   11e90:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
   11e92:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
   11e94:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
   11e96:	6143      	str	r3, [r0, #20]
}
   11e98:	4770      	bx	lr
   11e9a:	46c0      	nop			; (mov r8, r8)
   11e9c:	0000075b 	.word	0x0000075b

00011ea0 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
   11ea0:	2800      	cmp	r0, #0
   11ea2:	d002      	beq.n	11eaa <mqtt_register_callback+0xa>
	{
		module->callback = callback;
   11ea4:	6001      	str	r1, [r0, #0]
		return SUCCESS;
   11ea6:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   11ea8:	4770      	bx	lr
		return FAILURE;
   11eaa:	2001      	movs	r0, #1
   11eac:	4240      	negs	r0, r0
   11eae:	e7fb      	b.n	11ea8 <mqtt_register_callback+0x8>

00011eb0 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   11eb0:	b510      	push	{r4, lr}
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   11eb2:	4b01      	ldr	r3, [pc, #4]	; (11eb8 <mqtt_socket_event_handler+0x8>)
   11eb4:	4798      	blx	r3
}
   11eb6:	bd10      	pop	{r4, pc}
   11eb8:	00011c2d 	.word	0x00011c2d

00011ebc <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   11ebc:	b510      	push	{r4, lr}
	dnsResolveCallback(domain_name, server_ip);
   11ebe:	4b01      	ldr	r3, [pc, #4]	; (11ec4 <mqtt_socket_resolve_handler+0x8>)
   11ec0:	4798      	blx	r3
}
   11ec2:	bd10      	pop	{r4, pc}
   11ec4:	00011bf5 	.word	0x00011bf5

00011ec8 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   11ec8:	b530      	push	{r4, r5, lr}
   11eca:	b083      	sub	sp, #12
   11ecc:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   11ece:	7983      	ldrb	r3, [r0, #6]
   11ed0:	8882      	ldrh	r2, [r0, #4]
   11ed2:	3020      	adds	r0, #32
   11ed4:	4d06      	ldr	r5, [pc, #24]	; (11ef0 <mqtt_connect+0x28>)
   11ed6:	47a8      	blx	r5
   11ed8:	9001      	str	r0, [sp, #4]
	if(module->callback)
   11eda:	6823      	ldr	r3, [r4, #0]
   11edc:	2b00      	cmp	r3, #0
   11ede:	d003      	beq.n	11ee8 <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   11ee0:	aa01      	add	r2, sp, #4
   11ee2:	2100      	movs	r1, #0
   11ee4:	0020      	movs	r0, r4
   11ee6:	4798      	blx	r3
	return connResult.sock_connected.result;
}
   11ee8:	9801      	ldr	r0, [sp, #4]
   11eea:	b003      	add	sp, #12
   11eec:	bd30      	pop	{r4, r5, pc}
   11eee:	46c0      	nop			; (mov r8, r8)
   11ef0:	00011d05 	.word	0x00011d05

00011ef4 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   11ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ef6:	46de      	mov	lr, fp
   11ef8:	4657      	mov	r7, sl
   11efa:	464e      	mov	r6, r9
   11efc:	b5c0      	push	{r6, r7, lr}
   11efe:	b098      	sub	sp, #96	; 0x60
   11f00:	0005      	movs	r5, r0
   11f02:	4689      	mov	r9, r1
   11f04:	4693      	mov	fp, r2
   11f06:	469a      	mov	sl, r3
   11f08:	ab24      	add	r3, sp, #144	; 0x90
   11f0a:	781f      	ldrb	r7, [r3, #0]
   11f0c:	ab25      	add	r3, sp, #148	; 0x94
   11f0e:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   11f10:	ac01      	add	r4, sp, #4
   11f12:	2258      	movs	r2, #88	; 0x58
   11f14:	491a      	ldr	r1, [pc, #104]	; (11f80 <mqtt_connect_broker+0x8c>)
   11f16:	0020      	movs	r0, r4
   11f18:	4b1a      	ldr	r3, [pc, #104]	; (11f84 <mqtt_connect_broker+0x90>)
   11f1a:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
   11f1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   11f1e:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
   11f20:	465b      	mov	r3, fp
   11f22:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   11f24:	4653      	mov	r3, sl
   11f26:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
   11f28:	464b      	mov	r3, r9
   11f2a:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   11f2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   11f2e:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   11f30:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11f32:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
   11f34:	233c      	movs	r3, #60	; 0x3c
   11f36:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
   11f38:	3301      	adds	r3, #1
   11f3a:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
   11f3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   11f3e:	2b00      	cmp	r3, #0
   11f40:	d005      	beq.n	11f4e <mqtt_connect_broker+0x5a>
   11f42:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11f44:	2b00      	cmp	r3, #0
   11f46:	d002      	beq.n	11f4e <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
   11f48:	2201      	movs	r2, #1
   11f4a:	ab01      	add	r3, sp, #4
   11f4c:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   11f4e:	a901      	add	r1, sp, #4
   11f50:	69e8      	ldr	r0, [r5, #28]
   11f52:	4b0d      	ldr	r3, [pc, #52]	; (11f88 <mqtt_connect_broker+0x94>)
   11f54:	4798      	blx	r3
   11f56:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
   11f58:	ab17      	add	r3, sp, #92	; 0x5c
   11f5a:	7018      	strb	r0, [r3, #0]
	if(module->callback)
   11f5c:	682b      	ldr	r3, [r5, #0]
   11f5e:	2b00      	cmp	r3, #0
   11f60:	d003      	beq.n	11f6a <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   11f62:	aa17      	add	r2, sp, #92	; 0x5c
   11f64:	2101      	movs	r1, #1
   11f66:	0028      	movs	r0, r5
   11f68:	4798      	blx	r3
	
	module->isConnected = true;
   11f6a:	2201      	movs	r2, #1
   11f6c:	2334      	movs	r3, #52	; 0x34
   11f6e:	54ea      	strb	r2, [r5, r3]
	return rc;
}
   11f70:	0020      	movs	r0, r4
   11f72:	b018      	add	sp, #96	; 0x60
   11f74:	bc1c      	pop	{r2, r3, r4}
   11f76:	4691      	mov	r9, r2
   11f78:	469a      	mov	sl, r3
   11f7a:	46a3      	mov	fp, r4
   11f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11f7e:	46c0      	nop			; (mov r8, r8)
   11f80:	0001ba0c 	.word	0x0001ba0c
   11f84:	00012b4d 	.word	0x00012b4d
   11f88:	000117a5 	.word	0x000117a5

00011f8c <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   11f8c:	b530      	push	{r4, r5, lr}
   11f8e:	b083      	sub	sp, #12
   11f90:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   11f92:	69c0      	ldr	r0, [r0, #28]
   11f94:	4b08      	ldr	r3, [pc, #32]	; (11fb8 <mqtt_disconnect+0x2c>)
   11f96:	4798      	blx	r3
   11f98:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
   11f9a:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
   11f9c:	6823      	ldr	r3, [r4, #0]
   11f9e:	2b00      	cmp	r3, #0
   11fa0:	d003      	beq.n	11faa <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   11fa2:	aa01      	add	r2, sp, #4
   11fa4:	2105      	movs	r1, #5
   11fa6:	0020      	movs	r0, r4
   11fa8:	4798      	blx	r3
	
	module->isConnected = false;
   11faa:	2200      	movs	r2, #0
   11fac:	2334      	movs	r3, #52	; 0x34
   11fae:	54e2      	strb	r2, [r4, r3]
	return rc;
}
   11fb0:	0028      	movs	r0, r5
   11fb2:	b003      	add	sp, #12
   11fb4:	bd30      	pop	{r4, r5, pc}
   11fb6:	46c0      	nop			; (mov r8, r8)
   11fb8:	00011a89 	.word	0x00011a89

00011fbc <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   11fbc:	b570      	push	{r4, r5, r6, lr}
   11fbe:	b084      	sub	sp, #16
   11fc0:	0004      	movs	r4, r0
   11fc2:	a808      	add	r0, sp, #32
   11fc4:	7805      	ldrb	r5, [r0, #0]
   11fc6:	a809      	add	r0, sp, #36	; 0x24
   11fc8:	7800      	ldrb	r0, [r0, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   11fca:	466e      	mov	r6, sp
   11fcc:	7035      	strb	r5, [r6, #0]
	mqttMsg.payload = (char *)msg;
   11fce:	9202      	str	r2, [sp, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   11fd0:	9303      	str	r3, [sp, #12]
	mqttMsg.retained = retain;
   11fd2:	7070      	strb	r0, [r6, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   11fd4:	466a      	mov	r2, sp
   11fd6:	69e0      	ldr	r0, [r4, #28]
   11fd8:	4b06      	ldr	r3, [pc, #24]	; (11ff4 <mqtt_publish+0x38>)
   11fda:	4798      	blx	r3
   11fdc:	0005      	movs	r5, r0
	
	if(module->callback)
   11fde:	6823      	ldr	r3, [r4, #0]
   11fe0:	2b00      	cmp	r3, #0
   11fe2:	d003      	beq.n	11fec <mqtt_publish+0x30>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   11fe4:	2200      	movs	r2, #0
   11fe6:	2102      	movs	r1, #2
   11fe8:	0020      	movs	r0, r4
   11fea:	4798      	blx	r3
	
	return rc;
}
   11fec:	0028      	movs	r0, r5
   11fee:	b004      	add	sp, #16
   11ff0:	bd70      	pop	{r4, r5, r6, pc}
   11ff2:	46c0      	nop			; (mov r8, r8)
   11ff4:	00011979 	.word	0x00011979

00011ff8 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   11ff8:	b570      	push	{r4, r5, r6, lr}
   11ffa:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   11ffc:	69c0      	ldr	r0, [r0, #28]
   11ffe:	4d06      	ldr	r5, [pc, #24]	; (12018 <mqtt_subscribe+0x20>)
   12000:	47a8      	blx	r5
   12002:	0005      	movs	r5, r0
	
	if(module->callback)
   12004:	6823      	ldr	r3, [r4, #0]
   12006:	2b00      	cmp	r3, #0
   12008:	d003      	beq.n	12012 <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   1200a:	2200      	movs	r2, #0
   1200c:	2103      	movs	r1, #3
   1200e:	0020      	movs	r0, r4
   12010:	4798      	blx	r3
	
	return rc;
}
   12012:	0028      	movs	r0, r5
   12014:	bd70      	pop	{r4, r5, r6, pc}
   12016:	46c0      	nop			; (mov r8, r8)
   12018:	00011875 	.word	0x00011875

0001201c <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   1201c:	b510      	push	{r4, lr}
	return MQTTYield(module->client, timeout_ms);
   1201e:	69c0      	ldr	r0, [r0, #28]
   12020:	4b01      	ldr	r3, [pc, #4]	; (12028 <mqtt_yield+0xc>)
   12022:	4798      	blx	r3
   12024:	bd10      	pop	{r4, pc}
   12026:	46c0      	nop			; (mov r8, r8)
   12028:	00011729 	.word	0x00011729

0001202c <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   1202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1202e:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   12030:	7a03      	ldrb	r3, [r0, #8]
   12032:	2b03      	cmp	r3, #3
   12034:	d024      	beq.n	12080 <MQTTSerialize_connectLength+0x54>
	int len = 0;
   12036:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
   12038:	2b04      	cmp	r3, #4
   1203a:	d01f      	beq.n	1207c <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
   1203c:	68e0      	ldr	r0, [r4, #12]
   1203e:	6921      	ldr	r1, [r4, #16]
   12040:	6962      	ldr	r2, [r4, #20]
   12042:	4b1b      	ldr	r3, [pc, #108]	; (120b0 <MQTTSerialize_connectLength+0x84>)
   12044:	4798      	blx	r3
   12046:	1c85      	adds	r5, r0, #2
   12048:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
   1204a:	7ee3      	ldrb	r3, [r4, #27]
   1204c:	2b00      	cmp	r3, #0
   1204e:	d119      	bne.n	12084 <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
   12050:	6c23      	ldr	r3, [r4, #64]	; 0x40
   12052:	2b00      	cmp	r3, #0
   12054:	d024      	beq.n	120a0 <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
   12056:	6c20      	ldr	r0, [r4, #64]	; 0x40
   12058:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1205a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1205c:	4b14      	ldr	r3, [pc, #80]	; (120b0 <MQTTSerialize_connectLength+0x84>)
   1205e:	4798      	blx	r3
   12060:	3002      	adds	r0, #2
   12062:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
   12064:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   12066:	2b00      	cmp	r3, #0
   12068:	d01e      	beq.n	120a8 <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
   1206a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1206c:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1206e:	6d62      	ldr	r2, [r4, #84]	; 0x54
   12070:	4b0f      	ldr	r3, [pc, #60]	; (120b0 <MQTTSerialize_connectLength+0x84>)
   12072:	4798      	blx	r3
   12074:	3002      	adds	r0, #2
   12076:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
   12078:	0028      	movs	r0, r5
   1207a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
   1207c:	360a      	adds	r6, #10
   1207e:	e7dd      	b.n	1203c <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
   12080:	260c      	movs	r6, #12
   12082:	e7db      	b.n	1203c <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   12084:	6a60      	ldr	r0, [r4, #36]	; 0x24
   12086:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   12088:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1208a:	4f09      	ldr	r7, [pc, #36]	; (120b0 <MQTTSerialize_connectLength+0x84>)
   1208c:	47b8      	blx	r7
   1208e:	0006      	movs	r6, r0
   12090:	6b20      	ldr	r0, [r4, #48]	; 0x30
   12092:	6b61      	ldr	r1, [r4, #52]	; 0x34
   12094:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   12096:	47b8      	blx	r7
   12098:	1836      	adds	r6, r6, r0
   1209a:	3604      	adds	r6, #4
   1209c:	19ad      	adds	r5, r5, r6
   1209e:	e7d7      	b.n	12050 <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
   120a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   120a2:	2b00      	cmp	r3, #0
   120a4:	d1d7      	bne.n	12056 <MQTTSerialize_connectLength+0x2a>
   120a6:	e7dd      	b.n	12064 <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
   120a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   120aa:	2b00      	cmp	r3, #0
   120ac:	d1dd      	bne.n	1206a <MQTTSerialize_connectLength+0x3e>
   120ae:	e7e3      	b.n	12078 <MQTTSerialize_connectLength+0x4c>
   120b0:	00012595 	.word	0x00012595

000120b4 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   120b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   120b6:	b083      	sub	sp, #12
   120b8:	0006      	movs	r6, r0
   120ba:	000f      	movs	r7, r1
   120bc:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
   120be:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   120c0:	0010      	movs	r0, r2
   120c2:	4b45      	ldr	r3, [pc, #276]	; (121d8 <MQTTSerialize_connect+0x124>)
   120c4:	4798      	blx	r3
   120c6:	0004      	movs	r4, r0
   120c8:	4b44      	ldr	r3, [pc, #272]	; (121dc <MQTTSerialize_connect+0x128>)
   120ca:	4798      	blx	r3
   120cc:	42b8      	cmp	r0, r7
   120ce:	dd00      	ble.n	120d2 <MQTTSerialize_connect+0x1e>
   120d0:	e07f      	b.n	121d2 <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
   120d2:	2110      	movs	r1, #16
   120d4:	a801      	add	r0, sp, #4
   120d6:	4b42      	ldr	r3, [pc, #264]	; (121e0 <MQTTSerialize_connect+0x12c>)
   120d8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   120da:	0021      	movs	r1, r4
   120dc:	9801      	ldr	r0, [sp, #4]
   120de:	4b41      	ldr	r3, [pc, #260]	; (121e4 <MQTTSerialize_connect+0x130>)
   120e0:	4798      	blx	r3
   120e2:	9b01      	ldr	r3, [sp, #4]
   120e4:	469c      	mov	ip, r3
   120e6:	4460      	add	r0, ip
   120e8:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
   120ea:	7a2b      	ldrb	r3, [r5, #8]
   120ec:	2b04      	cmp	r3, #4
   120ee:	d045      	beq.n	1217c <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   120f0:	493d      	ldr	r1, [pc, #244]	; (121e8 <MQTTSerialize_connect+0x134>)
   120f2:	a801      	add	r0, sp, #4
   120f4:	4b3d      	ldr	r3, [pc, #244]	; (121ec <MQTTSerialize_connect+0x138>)
   120f6:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   120f8:	2103      	movs	r1, #3
   120fa:	a801      	add	r0, sp, #4
   120fc:	4b38      	ldr	r3, [pc, #224]	; (121e0 <MQTTSerialize_connect+0x12c>)
   120fe:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
   12100:	7ea9      	ldrb	r1, [r5, #26]
   12102:	2301      	movs	r3, #1
   12104:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
   12106:	7eea      	ldrb	r2, [r5, #27]
   12108:	1e50      	subs	r0, r2, #1
   1210a:	4182      	sbcs	r2, r0
   1210c:	b2d2      	uxtb	r2, r2
   1210e:	4013      	ands	r3, r2
   12110:	009b      	lsls	r3, r3, #2
   12112:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
   12114:	4319      	orrs	r1, r3
   12116:	2b00      	cmp	r3, #0
   12118:	d00b      	beq.n	12132 <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
   1211a:	233d      	movs	r3, #61	; 0x3d
   1211c:	5cea      	ldrb	r2, [r5, r3]
   1211e:	3b3a      	subs	r3, #58	; 0x3a
   12120:	4013      	ands	r3, r2
   12122:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
   12124:	223c      	movs	r2, #60	; 0x3c
   12126:	5ca8      	ldrb	r0, [r5, r2]
   12128:	3a3b      	subs	r2, #59	; 0x3b
   1212a:	4002      	ands	r2, r0
   1212c:	0152      	lsls	r2, r2, #5
   1212e:	4319      	orrs	r1, r3
   12130:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
   12132:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   12134:	2b00      	cmp	r3, #0
   12136:	d02a      	beq.n	1218e <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
   12138:	2380      	movs	r3, #128	; 0x80
   1213a:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
   1213c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   1213e:	2b00      	cmp	r3, #0
   12140:	d029      	beq.n	12196 <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
   12142:	2340      	movs	r3, #64	; 0x40
   12144:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
   12146:	b2cc      	uxtb	r4, r1
   12148:	0021      	movs	r1, r4
   1214a:	a801      	add	r0, sp, #4
   1214c:	4b24      	ldr	r3, [pc, #144]	; (121e0 <MQTTSerialize_connect+0x12c>)
   1214e:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   12150:	8b29      	ldrh	r1, [r5, #24]
   12152:	a801      	add	r0, sp, #4
   12154:	4b26      	ldr	r3, [pc, #152]	; (121f0 <MQTTSerialize_connect+0x13c>)
   12156:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   12158:	68e9      	ldr	r1, [r5, #12]
   1215a:	692a      	ldr	r2, [r5, #16]
   1215c:	696b      	ldr	r3, [r5, #20]
   1215e:	a801      	add	r0, sp, #4
   12160:	4f24      	ldr	r7, [pc, #144]	; (121f4 <MQTTSerialize_connect+0x140>)
   12162:	47b8      	blx	r7
	if (options->willFlag)
   12164:	7eeb      	ldrb	r3, [r5, #27]
   12166:	2b00      	cmp	r3, #0
   12168:	d119      	bne.n	1219e <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
   1216a:	b263      	sxtb	r3, r4
   1216c:	2b00      	cmp	r3, #0
   1216e:	db22      	blt.n	121b6 <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
   12170:	0663      	lsls	r3, r4, #25
   12172:	d427      	bmi.n	121c4 <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
   12174:	9b01      	ldr	r3, [sp, #4]
   12176:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
   12178:	b003      	add	sp, #12
   1217a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
   1217c:	491e      	ldr	r1, [pc, #120]	; (121f8 <MQTTSerialize_connect+0x144>)
   1217e:	a801      	add	r0, sp, #4
   12180:	4b1a      	ldr	r3, [pc, #104]	; (121ec <MQTTSerialize_connect+0x138>)
   12182:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   12184:	2104      	movs	r1, #4
   12186:	a801      	add	r0, sp, #4
   12188:	4b15      	ldr	r3, [pc, #84]	; (121e0 <MQTTSerialize_connect+0x12c>)
   1218a:	4798      	blx	r3
   1218c:	e7b8      	b.n	12100 <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
   1218e:	6cab      	ldr	r3, [r5, #72]	; 0x48
   12190:	2b00      	cmp	r3, #0
   12192:	d1d1      	bne.n	12138 <MQTTSerialize_connect+0x84>
   12194:	e7d2      	b.n	1213c <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
   12196:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   12198:	2b00      	cmp	r3, #0
   1219a:	d1d2      	bne.n	12142 <MQTTSerialize_connect+0x8e>
   1219c:	e7d3      	b.n	12146 <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
   1219e:	6a69      	ldr	r1, [r5, #36]	; 0x24
   121a0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   121a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   121a4:	a801      	add	r0, sp, #4
   121a6:	4f13      	ldr	r7, [pc, #76]	; (121f4 <MQTTSerialize_connect+0x140>)
   121a8:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
   121aa:	6b29      	ldr	r1, [r5, #48]	; 0x30
   121ac:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   121ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   121b0:	a801      	add	r0, sp, #4
   121b2:	47b8      	blx	r7
   121b4:	e7d9      	b.n	1216a <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
   121b6:	6c29      	ldr	r1, [r5, #64]	; 0x40
   121b8:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   121ba:	6cab      	ldr	r3, [r5, #72]	; 0x48
   121bc:	a801      	add	r0, sp, #4
   121be:	4f0d      	ldr	r7, [pc, #52]	; (121f4 <MQTTSerialize_connect+0x140>)
   121c0:	47b8      	blx	r7
   121c2:	e7d5      	b.n	12170 <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
   121c4:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   121c6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   121c8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   121ca:	a801      	add	r0, sp, #4
   121cc:	4c09      	ldr	r4, [pc, #36]	; (121f4 <MQTTSerialize_connect+0x140>)
   121ce:	47a0      	blx	r4
   121d0:	e7d0      	b.n	12174 <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   121d2:	2002      	movs	r0, #2
   121d4:	4240      	negs	r0, r0
	return rc;
   121d6:	e7cf      	b.n	12178 <MQTTSerialize_connect+0xc4>
   121d8:	0001202d 	.word	0x0001202d
   121dc:	00012439 	.word	0x00012439
   121e0:	0001249b 	.word	0x0001249b
   121e4:	000123b1 	.word	0x000123b1
   121e8:	0001ba6c 	.word	0x0001ba6c
   121ec:	000124d1 	.word	0x000124d1
   121f0:	000124a7 	.word	0x000124a7
   121f4:	00012509 	.word	0x00012509
   121f8:	0001ba64 	.word	0x0001ba64

000121fc <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   121fc:	b570      	push	{r4, r5, r6, lr}
   121fe:	b082      	sub	sp, #8
   12200:	0005      	movs	r5, r0
   12202:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   12204:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   12206:	a801      	add	r0, sp, #4
   12208:	4b0e      	ldr	r3, [pc, #56]	; (12244 <MQTTDeserialize_connack+0x48>)
   1220a:	4798      	blx	r3
	if (header.bits.type != CONNACK)
   1220c:	23f0      	movs	r3, #240	; 0xf0
   1220e:	4003      	ands	r3, r0
	int rc = 0;
   12210:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
   12212:	2b20      	cmp	r3, #32
   12214:	d001      	beq.n	1221a <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   12216:	b002      	add	sp, #8
   12218:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1221a:	4669      	mov	r1, sp
   1221c:	9801      	ldr	r0, [sp, #4]
   1221e:	4b0a      	ldr	r3, [pc, #40]	; (12248 <MQTTDeserialize_connack+0x4c>)
   12220:	4798      	blx	r3
   12222:	9b01      	ldr	r3, [sp, #4]
   12224:	181b      	adds	r3, r3, r0
   12226:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
   12228:	9b00      	ldr	r3, [sp, #0]
   1222a:	2b01      	cmp	r3, #1
   1222c:	ddf3      	ble.n	12216 <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
   1222e:	a801      	add	r0, sp, #4
   12230:	4e04      	ldr	r6, [pc, #16]	; (12244 <MQTTDeserialize_connack+0x48>)
   12232:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
   12234:	0600      	lsls	r0, r0, #24
   12236:	0fc0      	lsrs	r0, r0, #31
   12238:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
   1223a:	a801      	add	r0, sp, #4
   1223c:	47b0      	blx	r6
   1223e:	7020      	strb	r0, [r4, #0]
	rc = 1;
   12240:	2001      	movs	r0, #1
   12242:	e7e8      	b.n	12216 <MQTTDeserialize_connack+0x1a>
   12244:	0001248f 	.word	0x0001248f
   12248:	00012461 	.word	0x00012461

0001224c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   1224c:	b510      	push	{r4, lr}
   1224e:	b082      	sub	sp, #8
   12250:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
   12252:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
   12254:	2901      	cmp	r1, #1
   12256:	dd0f      	ble.n	12278 <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
   12258:	210f      	movs	r1, #15
   1225a:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   1225c:	0109      	lsls	r1, r1, #4
   1225e:	a801      	add	r0, sp, #4
   12260:	4b07      	ldr	r3, [pc, #28]	; (12280 <MQTTSerialize_zero+0x34>)
   12262:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   12264:	2100      	movs	r1, #0
   12266:	9801      	ldr	r0, [sp, #4]
   12268:	4b06      	ldr	r3, [pc, #24]	; (12284 <MQTTSerialize_zero+0x38>)
   1226a:	4798      	blx	r3
   1226c:	9b01      	ldr	r3, [sp, #4]
   1226e:	469c      	mov	ip, r3
   12270:	4460      	add	r0, ip
	rc = ptr - buf;
   12272:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   12274:	b002      	add	sp, #8
   12276:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   12278:	2002      	movs	r0, #2
   1227a:	4240      	negs	r0, r0
	return rc;
   1227c:	e7fa      	b.n	12274 <MQTTSerialize_zero+0x28>
   1227e:	46c0      	nop			; (mov r8, r8)
   12280:	0001249b 	.word	0x0001249b
   12284:	000123b1 	.word	0x000123b1

00012288 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   12288:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   1228a:	220e      	movs	r2, #14
   1228c:	4b01      	ldr	r3, [pc, #4]	; (12294 <MQTTSerialize_disconnect+0xc>)
   1228e:	4798      	blx	r3
}
   12290:	bd10      	pop	{r4, pc}
   12292:	46c0      	nop			; (mov r8, r8)
   12294:	0001224d 	.word	0x0001224d

00012298 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   12298:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   1229a:	220c      	movs	r2, #12
   1229c:	4b01      	ldr	r3, [pc, #4]	; (122a4 <MQTTSerialize_pingreq+0xc>)
   1229e:	4798      	blx	r3
}
   122a0:	bd10      	pop	{r4, pc}
   122a2:	46c0      	nop			; (mov r8, r8)
   122a4:	0001224d 	.word	0x0001224d

000122a8 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   122a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   122aa:	b085      	sub	sp, #20
   122ac:	0005      	movs	r5, r0
   122ae:	000e      	movs	r6, r1
   122b0:	0014      	movs	r4, r2
   122b2:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   122b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   122b6:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
   122b8:	2300      	movs	r3, #0
   122ba:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   122bc:	a803      	add	r0, sp, #12
   122be:	4b1c      	ldr	r3, [pc, #112]	; (12330 <MQTTDeserialize_publish+0x88>)
   122c0:	4798      	blx	r3
   122c2:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
   122c4:	22f0      	movs	r2, #240	; 0xf0
   122c6:	4010      	ands	r0, r2
	int rc = 0;
   122c8:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
   122ca:	2830      	cmp	r0, #48	; 0x30
   122cc:	d002      	beq.n	122d4 <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   122ce:	0038      	movs	r0, r7
   122d0:	b005      	add	sp, #20
   122d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
   122d4:	071a      	lsls	r2, r3, #28
   122d6:	0fd2      	lsrs	r2, r2, #31
   122d8:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
   122da:	075a      	lsls	r2, r3, #29
   122dc:	0f92      	lsrs	r2, r2, #30
   122de:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
   122e0:	07db      	lsls	r3, r3, #31
   122e2:	0fdb      	lsrs	r3, r3, #31
   122e4:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   122e6:	a902      	add	r1, sp, #8
   122e8:	9803      	ldr	r0, [sp, #12]
   122ea:	4b12      	ldr	r3, [pc, #72]	; (12334 <MQTTDeserialize_publish+0x8c>)
   122ec:	4798      	blx	r3
   122ee:	0007      	movs	r7, r0
   122f0:	9b03      	ldr	r3, [sp, #12]
   122f2:	181c      	adds	r4, r3, r0
   122f4:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
   122f6:	9b02      	ldr	r3, [sp, #8]
   122f8:	469c      	mov	ip, r3
   122fa:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   122fc:	0022      	movs	r2, r4
   122fe:	a903      	add	r1, sp, #12
   12300:	980a      	ldr	r0, [sp, #40]	; 0x28
   12302:	4b0d      	ldr	r3, [pc, #52]	; (12338 <MQTTDeserialize_publish+0x90>)
   12304:	4798      	blx	r3
   12306:	2800      	cmp	r0, #0
   12308:	d0e1      	beq.n	122ce <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   1230a:	9b03      	ldr	r3, [sp, #12]
   1230c:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   1230e:	d4de      	bmi.n	122ce <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
   12310:	6833      	ldr	r3, [r6, #0]
   12312:	2b00      	cmp	r3, #0
   12314:	dd04      	ble.n	12320 <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
   12316:	a803      	add	r0, sp, #12
   12318:	4b08      	ldr	r3, [pc, #32]	; (1233c <MQTTDeserialize_publish+0x94>)
   1231a:	4798      	blx	r3
   1231c:	9b01      	ldr	r3, [sp, #4]
   1231e:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
   12320:	9b03      	ldr	r3, [sp, #12]
   12322:	1ae4      	subs	r4, r4, r3
   12324:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12326:	6014      	str	r4, [r2, #0]
	*payload = curdata;
   12328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1232a:	6013      	str	r3, [r2, #0]
	rc = 1;
   1232c:	2701      	movs	r7, #1
   1232e:	e7ce      	b.n	122ce <MQTTDeserialize_publish+0x26>
   12330:	0001248f 	.word	0x0001248f
   12334:	00012461 	.word	0x00012461
   12338:	00012555 	.word	0x00012555
   1233c:	0001247d 	.word	0x0001247d

00012340 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   12340:	b570      	push	{r4, r5, r6, lr}
   12342:	b082      	sub	sp, #8
   12344:	0005      	movs	r5, r0
   12346:	000e      	movs	r6, r1
   12348:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   1234a:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1234c:	a801      	add	r0, sp, #4
   1234e:	4b0c      	ldr	r3, [pc, #48]	; (12380 <MQTTDeserialize_ack+0x40>)
   12350:	4798      	blx	r3
	*dup = header.bits.dup;
   12352:	0703      	lsls	r3, r0, #28
   12354:	0fdb      	lsrs	r3, r3, #31
   12356:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
   12358:	0600      	lsls	r0, r0, #24
   1235a:	0f00      	lsrs	r0, r0, #28
   1235c:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1235e:	4669      	mov	r1, sp
   12360:	9801      	ldr	r0, [sp, #4]
   12362:	4b08      	ldr	r3, [pc, #32]	; (12384 <MQTTDeserialize_ack+0x44>)
   12364:	4798      	blx	r3
   12366:	9b01      	ldr	r3, [sp, #4]
   12368:	181b      	adds	r3, r3, r0
   1236a:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
   1236c:	9b00      	ldr	r3, [sp, #0]
   1236e:	2b01      	cmp	r3, #1
   12370:	dd04      	ble.n	1237c <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
   12372:	a801      	add	r0, sp, #4
   12374:	4b04      	ldr	r3, [pc, #16]	; (12388 <MQTTDeserialize_ack+0x48>)
   12376:	4798      	blx	r3
   12378:	8020      	strh	r0, [r4, #0]

	rc = 1;
   1237a:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   1237c:	b002      	add	sp, #8
   1237e:	bd70      	pop	{r4, r5, r6, pc}
   12380:	0001248f 	.word	0x0001248f
   12384:	00012461 	.word	0x00012461
   12388:	0001247d 	.word	0x0001247d

0001238c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   1238c:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
   1238e:	2900      	cmp	r1, #0
   12390:	dd0a      	ble.n	123a8 <bufchar+0x1c>
   12392:	4b06      	ldr	r3, [pc, #24]	; (123ac <bufchar+0x20>)
   12394:	681b      	ldr	r3, [r3, #0]
   12396:	185d      	adds	r5, r3, r1
   12398:	002c      	movs	r4, r5
		*c = *bufptr++;
   1239a:	781a      	ldrb	r2, [r3, #0]
   1239c:	7002      	strb	r2, [r0, #0]
   1239e:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
   123a0:	42a3      	cmp	r3, r4
   123a2:	d1fa      	bne.n	1239a <bufchar+0xe>
   123a4:	4b01      	ldr	r3, [pc, #4]	; (123ac <bufchar+0x20>)
   123a6:	601d      	str	r5, [r3, #0]
	return count;
}
   123a8:	0008      	movs	r0, r1
   123aa:	bd30      	pop	{r4, r5, pc}
   123ac:	20004554 	.word	0x20004554

000123b0 <MQTTPacket_encode>:
{
   123b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   123b2:	b083      	sub	sp, #12
   123b4:	2500      	movs	r5, #0
		char d = length % 128;
   123b6:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
   123b8:	2780      	movs	r7, #128	; 0x80
   123ba:	427f      	negs	r7, r7
   123bc:	9501      	str	r5, [sp, #4]
		char d = length % 128;
   123be:	17ca      	asrs	r2, r1, #31
   123c0:	0e54      	lsrs	r4, r2, #25
   123c2:	190b      	adds	r3, r1, r4
   123c4:	4033      	ands	r3, r6
   123c6:	1b1b      	subs	r3, r3, r4
   123c8:	b2db      	uxtb	r3, r3
		length /= 128;
   123ca:	4032      	ands	r2, r6
   123cc:	1851      	adds	r1, r2, r1
   123ce:	11c9      	asrs	r1, r1, #7
		if (length > 0)
   123d0:	2900      	cmp	r1, #0
   123d2:	dd03      	ble.n	123dc <MQTTPacket_encode+0x2c>
			d |= 0x80;
   123d4:	433b      	orrs	r3, r7
		buf[rc++] = d;
   123d6:	5543      	strb	r3, [r0, r5]
   123d8:	3501      	adds	r5, #1
   123da:	e7ef      	b.n	123bc <MQTTPacket_encode+0xc>
   123dc:	5543      	strb	r3, [r0, r5]
   123de:	9801      	ldr	r0, [sp, #4]
   123e0:	3001      	adds	r0, #1
}
   123e2:	b003      	add	sp, #12
   123e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000123e6 <MQTTPacket_decode>:
{
   123e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   123e8:	46ce      	mov	lr, r9
   123ea:	4647      	mov	r7, r8
   123ec:	b580      	push	{r7, lr}
   123ee:	b083      	sub	sp, #12
   123f0:	4680      	mov	r8, r0
   123f2:	000f      	movs	r7, r1
	*value = 0;
   123f4:	2300      	movs	r3, #0
   123f6:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   123f8:	2401      	movs	r4, #1
	int multiplier = 1;
   123fa:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
   123fc:	466b      	mov	r3, sp
   123fe:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
   12400:	237f      	movs	r3, #127	; 0x7f
   12402:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
   12404:	2101      	movs	r1, #1
   12406:	0028      	movs	r0, r5
   12408:	47c0      	blx	r8
		if (rc != 1)
   1240a:	2801      	cmp	r0, #1
   1240c:	d10e      	bne.n	1242c <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
   1240e:	782b      	ldrb	r3, [r5, #0]
   12410:	464a      	mov	r2, r9
   12412:	401a      	ands	r2, r3
   12414:	4372      	muls	r2, r6
   12416:	6839      	ldr	r1, [r7, #0]
   12418:	468c      	mov	ip, r1
   1241a:	4462      	add	r2, ip
   1241c:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
   1241e:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
   12420:	b25b      	sxtb	r3, r3
   12422:	2b00      	cmp	r3, #0
   12424:	da02      	bge.n	1242c <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   12426:	3401      	adds	r4, #1
   12428:	2c05      	cmp	r4, #5
   1242a:	d1eb      	bne.n	12404 <MQTTPacket_decode+0x1e>
}
   1242c:	0020      	movs	r0, r4
   1242e:	b003      	add	sp, #12
   12430:	bc0c      	pop	{r2, r3}
   12432:	4690      	mov	r8, r2
   12434:	4699      	mov	r9, r3
   12436:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012438 <MQTTPacket_len>:
{
   12438:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
   1243a:	1c42      	adds	r2, r0, #1
		rem_len += 1;
   1243c:	3002      	adds	r0, #2
	if (rem_len < 128)
   1243e:	2a7f      	cmp	r2, #127	; 0x7f
   12440:	dd07      	ble.n	12452 <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
   12442:	4905      	ldr	r1, [pc, #20]	; (12458 <MQTTPacket_len+0x20>)
		rem_len += 2;
   12444:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
   12446:	428a      	cmp	r2, r1
   12448:	dd03      	ble.n	12452 <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
   1244a:	4904      	ldr	r1, [pc, #16]	; (1245c <MQTTPacket_len+0x24>)
		rem_len += 4;
   1244c:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
   1244e:	428a      	cmp	r2, r1
   12450:	dd00      	ble.n	12454 <MQTTPacket_len+0x1c>
}
   12452:	4770      	bx	lr
		rem_len += 3;
   12454:	1d18      	adds	r0, r3, #4
   12456:	e7fc      	b.n	12452 <MQTTPacket_len+0x1a>
   12458:	00003fff 	.word	0x00003fff
   1245c:	001ffffe 	.word	0x001ffffe

00012460 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   12460:	b510      	push	{r4, lr}
	bufptr = buf;
   12462:	4b03      	ldr	r3, [pc, #12]	; (12470 <MQTTPacket_decodeBuf+0x10>)
   12464:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   12466:	4803      	ldr	r0, [pc, #12]	; (12474 <MQTTPacket_decodeBuf+0x14>)
   12468:	4b03      	ldr	r3, [pc, #12]	; (12478 <MQTTPacket_decodeBuf+0x18>)
   1246a:	4798      	blx	r3
}
   1246c:	bd10      	pop	{r4, pc}
   1246e:	46c0      	nop			; (mov r8, r8)
   12470:	20004554 	.word	0x20004554
   12474:	0001238d 	.word	0x0001238d
   12478:	000123e7 	.word	0x000123e7

0001247c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   1247c:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
   1247e:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
   12480:	7813      	ldrb	r3, [r2, #0]
   12482:	021b      	lsls	r3, r3, #8
   12484:	7850      	ldrb	r0, [r2, #1]
   12486:	1818      	adds	r0, r3, r0
	*pptr += 2;
   12488:	3202      	adds	r2, #2
   1248a:	600a      	str	r2, [r1, #0]
	return len;
}
   1248c:	4770      	bx	lr

0001248e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   1248e:	0002      	movs	r2, r0
	char c = **pptr;
   12490:	6803      	ldr	r3, [r0, #0]
   12492:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
   12494:	3301      	adds	r3, #1
   12496:	6013      	str	r3, [r2, #0]
	return c;
}
   12498:	4770      	bx	lr

0001249a <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
   1249a:	6803      	ldr	r3, [r0, #0]
   1249c:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
   1249e:	6803      	ldr	r3, [r0, #0]
   124a0:	3301      	adds	r3, #1
   124a2:	6003      	str	r3, [r0, #0]
}
   124a4:	4770      	bx	lr

000124a6 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   124a6:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
   124a8:	17ca      	asrs	r2, r1, #31
   124aa:	23ff      	movs	r3, #255	; 0xff
   124ac:	001c      	movs	r4, r3
   124ae:	4014      	ands	r4, r2
   124b0:	1864      	adds	r4, r4, r1
   124b2:	1224      	asrs	r4, r4, #8
   124b4:	6805      	ldr	r5, [r0, #0]
   124b6:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
   124b8:	6804      	ldr	r4, [r0, #0]
   124ba:	1c65      	adds	r5, r4, #1
   124bc:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
   124be:	0e12      	lsrs	r2, r2, #24
   124c0:	1889      	adds	r1, r1, r2
   124c2:	400b      	ands	r3, r1
   124c4:	1a9b      	subs	r3, r3, r2
   124c6:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
   124c8:	6803      	ldr	r3, [r0, #0]
   124ca:	3301      	adds	r3, #1
   124cc:	6003      	str	r3, [r0, #0]
}
   124ce:	bd30      	pop	{r4, r5, pc}

000124d0 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   124d0:	b570      	push	{r4, r5, r6, lr}
   124d2:	0004      	movs	r4, r0
   124d4:	000e      	movs	r6, r1
	int len = strlen(string);
   124d6:	0008      	movs	r0, r1
   124d8:	4b08      	ldr	r3, [pc, #32]	; (124fc <writeCString+0x2c>)
   124da:	4798      	blx	r3
   124dc:	0005      	movs	r5, r0
	writeInt(pptr, len);
   124de:	0001      	movs	r1, r0
   124e0:	0020      	movs	r0, r4
   124e2:	4b07      	ldr	r3, [pc, #28]	; (12500 <writeCString+0x30>)
   124e4:	4798      	blx	r3
	memcpy(*pptr, string, len);
   124e6:	002a      	movs	r2, r5
   124e8:	0031      	movs	r1, r6
   124ea:	6820      	ldr	r0, [r4, #0]
   124ec:	4b05      	ldr	r3, [pc, #20]	; (12504 <writeCString+0x34>)
   124ee:	4798      	blx	r3
	*pptr += len;
   124f0:	6823      	ldr	r3, [r4, #0]
   124f2:	469c      	mov	ip, r3
   124f4:	4465      	add	r5, ip
   124f6:	6025      	str	r5, [r4, #0]
}
   124f8:	bd70      	pop	{r4, r5, r6, pc}
   124fa:	46c0      	nop			; (mov r8, r8)
   124fc:	0001381b 	.word	0x0001381b
   12500:	000124a7 	.word	0x000124a7
   12504:	00012b4d 	.word	0x00012b4d

00012508 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   12508:	b530      	push	{r4, r5, lr}
   1250a:	b085      	sub	sp, #20
   1250c:	0005      	movs	r5, r0
   1250e:	9101      	str	r1, [sp, #4]
   12510:	9303      	str	r3, [sp, #12]
   12512:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
   12514:	dc06      	bgt.n	12524 <writeMQTTString+0x1c>
   12516:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
   12518:	2900      	cmp	r1, #0
   1251a:	d010      	beq.n	1253e <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
   1251c:	4b0a      	ldr	r3, [pc, #40]	; (12548 <writeMQTTString+0x40>)
   1251e:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
   12520:	b005      	add	sp, #20
   12522:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
   12524:	0011      	movs	r1, r2
   12526:	4b09      	ldr	r3, [pc, #36]	; (1254c <writeMQTTString+0x44>)
   12528:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   1252a:	0022      	movs	r2, r4
   1252c:	9903      	ldr	r1, [sp, #12]
   1252e:	6828      	ldr	r0, [r5, #0]
   12530:	4b07      	ldr	r3, [pc, #28]	; (12550 <writeMQTTString+0x48>)
   12532:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   12534:	682b      	ldr	r3, [r5, #0]
   12536:	469c      	mov	ip, r3
   12538:	4464      	add	r4, ip
   1253a:	602c      	str	r4, [r5, #0]
   1253c:	e7f0      	b.n	12520 <writeMQTTString+0x18>
		writeInt(pptr, 0);
   1253e:	2100      	movs	r1, #0
   12540:	4b02      	ldr	r3, [pc, #8]	; (1254c <writeMQTTString+0x44>)
   12542:	4798      	blx	r3
}
   12544:	e7ec      	b.n	12520 <writeMQTTString+0x18>
   12546:	46c0      	nop			; (mov r8, r8)
   12548:	000124d1 	.word	0x000124d1
   1254c:	000124a7 	.word	0x000124a7
   12550:	00012b4d 	.word	0x00012b4d

00012554 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   12554:	b570      	push	{r4, r5, r6, lr}
   12556:	0005      	movs	r5, r0
   12558:	000c      	movs	r4, r1
   1255a:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   1255c:	680b      	ldr	r3, [r1, #0]
   1255e:	1ad3      	subs	r3, r2, r3
   12560:	2b01      	cmp	r3, #1
   12562:	dd12      	ble.n	1258a <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   12564:	0008      	movs	r0, r1
   12566:	4b0a      	ldr	r3, [pc, #40]	; (12590 <readMQTTLenString+0x3c>)
   12568:	4798      	blx	r3
   1256a:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   1256c:	6822      	ldr	r2, [r4, #0]
   1256e:	1811      	adds	r1, r2, r0
	int rc = 0;
   12570:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   12572:	428e      	cmp	r6, r1
   12574:	d305      	bcc.n	12582 <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   12576:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
   12578:	6823      	ldr	r3, [r4, #0]
   1257a:	469c      	mov	ip, r3
   1257c:	4460      	add	r0, ip
   1257e:	6020      	str	r0, [r4, #0]
			rc = 1;
   12580:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
   12582:	2200      	movs	r2, #0
   12584:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
   12586:	0018      	movs	r0, r3
   12588:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
   1258a:	2300      	movs	r3, #0
   1258c:	e7f9      	b.n	12582 <readMQTTLenString+0x2e>
   1258e:	46c0      	nop			; (mov r8, r8)
   12590:	0001247d 	.word	0x0001247d

00012594 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   12594:	b500      	push	{lr}
   12596:	b085      	sub	sp, #20
   12598:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
   1259a:	2800      	cmp	r0, #0
   1259c:	d003      	beq.n	125a6 <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
   1259e:	4b03      	ldr	r3, [pc, #12]	; (125ac <MQTTstrlen+0x18>)
   125a0:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
   125a2:	b005      	add	sp, #20
   125a4:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
   125a6:	9802      	ldr	r0, [sp, #8]
	return rc;
   125a8:	e7fb      	b.n	125a2 <MQTTstrlen+0xe>
   125aa:	46c0      	nop			; (mov r8, r8)
   125ac:	0001381b 	.word	0x0001381b

000125b0 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   125b0:	b570      	push	{r4, r5, r6, lr}
   125b2:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
   125b4:	6806      	ldr	r6, [r0, #0]
   125b6:	2e00      	cmp	r6, #0
   125b8:	d00b      	beq.n	125d2 <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
   125ba:	0030      	movs	r0, r6
   125bc:	4b0b      	ldr	r3, [pc, #44]	; (125ec <MQTTPacket_equals+0x3c>)
   125be:	4798      	blx	r3
   125c0:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
   125c2:	0028      	movs	r0, r5
   125c4:	4b09      	ldr	r3, [pc, #36]	; (125ec <MQTTPacket_equals+0x3c>)
   125c6:	4798      	blx	r3
   125c8:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   125ca:	4284      	cmp	r4, r0
   125cc:	d004      	beq.n	125d8 <MQTTPacket_equals+0x28>
}
   125ce:	0018      	movs	r0, r3
   125d0:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
   125d2:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
   125d4:	6844      	ldr	r4, [r0, #4]
   125d6:	e7f4      	b.n	125c2 <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   125d8:	0022      	movs	r2, r4
   125da:	0029      	movs	r1, r5
   125dc:	0030      	movs	r0, r6
   125de:	4b04      	ldr	r3, [pc, #16]	; (125f0 <MQTTPacket_equals+0x40>)
   125e0:	4798      	blx	r3
   125e2:	4243      	negs	r3, r0
   125e4:	4143      	adcs	r3, r0
   125e6:	b2db      	uxtb	r3, r3
   125e8:	e7f1      	b.n	125ce <MQTTPacket_equals+0x1e>
   125ea:	46c0      	nop			; (mov r8, r8)
   125ec:	0001381b 	.word	0x0001381b
   125f0:	00013829 	.word	0x00013829

000125f4 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   125f4:	b510      	push	{r4, lr}
   125f6:	b084      	sub	sp, #16
   125f8:	0004      	movs	r4, r0
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   125fa:	0008      	movs	r0, r1
   125fc:	0011      	movs	r1, r2
   125fe:	001a      	movs	r2, r3
   12600:	4b05      	ldr	r3, [pc, #20]	; (12618 <MQTTSerialize_publishLength+0x24>)
   12602:	4798      	blx	r3
   12604:	3002      	adds	r0, #2
   12606:	9b06      	ldr	r3, [sp, #24]
   12608:	469c      	mov	ip, r3
   1260a:	4460      	add	r0, ip
	if (qos > 0)
   1260c:	2c00      	cmp	r4, #0
   1260e:	dd00      	ble.n	12612 <MQTTSerialize_publishLength+0x1e>
		len += 2; /* packetid */
   12610:	3002      	adds	r0, #2
	return len;
}
   12612:	b004      	add	sp, #16
   12614:	bd10      	pop	{r4, pc}
   12616:	46c0      	nop			; (mov r8, r8)
   12618:	00012595 	.word	0x00012595

0001261c <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   1261c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1261e:	46de      	mov	lr, fp
   12620:	4657      	mov	r7, sl
   12622:	464e      	mov	r6, r9
   12624:	b5c0      	push	{r6, r7, lr}
   12626:	b084      	sub	sp, #16
   12628:	0007      	movs	r7, r0
   1262a:	468b      	mov	fp, r1
   1262c:	4692      	mov	sl, r2
   1262e:	001e      	movs	r6, r3
   12630:	ab0c      	add	r3, sp, #48	; 0x30
   12632:	781b      	ldrb	r3, [r3, #0]
   12634:	4699      	mov	r9, r3
   12636:	ab0d      	add	r3, sp, #52	; 0x34
   12638:	881c      	ldrh	r4, [r3, #0]
	unsigned char *ptr = buf;
   1263a:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   1263c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1263e:	9300      	str	r3, [sp, #0]
   12640:	990e      	ldr	r1, [sp, #56]	; 0x38
   12642:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12644:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12646:	0030      	movs	r0, r6
   12648:	4d1f      	ldr	r5, [pc, #124]	; (126c8 <MQTTSerialize_publish+0xac>)
   1264a:	47a8      	blx	r5
   1264c:	0005      	movs	r5, r0
   1264e:	4b1f      	ldr	r3, [pc, #124]	; (126cc <MQTTSerialize_publish+0xb0>)
   12650:	4798      	blx	r3
   12652:	4558      	cmp	r0, fp
   12654:	dc34      	bgt.n	126c0 <MQTTSerialize_publish+0xa4>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
   12656:	2201      	movs	r2, #1
   12658:	4653      	mov	r3, sl
   1265a:	4013      	ands	r3, r2
   1265c:	00db      	lsls	r3, r3, #3
	header.bits.qos = qos;
   1265e:	2103      	movs	r1, #3
   12660:	4031      	ands	r1, r6
   12662:	0048      	lsls	r0, r1, #1
   12664:	2130      	movs	r1, #48	; 0x30
   12666:	4319      	orrs	r1, r3
   12668:	4301      	orrs	r1, r0
	header.bits.retain = retained;
   1266a:	464b      	mov	r3, r9
   1266c:	4013      	ands	r3, r2
   1266e:	4391      	bics	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   12670:	4319      	orrs	r1, r3
   12672:	a803      	add	r0, sp, #12
   12674:	4b16      	ldr	r3, [pc, #88]	; (126d0 <MQTTSerialize_publish+0xb4>)
   12676:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   12678:	0029      	movs	r1, r5
   1267a:	9803      	ldr	r0, [sp, #12]
   1267c:	4b15      	ldr	r3, [pc, #84]	; (126d4 <MQTTSerialize_publish+0xb8>)
   1267e:	4798      	blx	r3
   12680:	9b03      	ldr	r3, [sp, #12]
   12682:	469c      	mov	ip, r3
   12684:	4460      	add	r0, ip
   12686:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
   12688:	990e      	ldr	r1, [sp, #56]	; 0x38
   1268a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1268c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1268e:	a803      	add	r0, sp, #12
   12690:	4d11      	ldr	r5, [pc, #68]	; (126d8 <MQTTSerialize_publish+0xbc>)
   12692:	47a8      	blx	r5

	if (qos > 0)
   12694:	2e00      	cmp	r6, #0
   12696:	dd03      	ble.n	126a0 <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
   12698:	0021      	movs	r1, r4
   1269a:	a803      	add	r0, sp, #12
   1269c:	4b0f      	ldr	r3, [pc, #60]	; (126dc <MQTTSerialize_publish+0xc0>)
   1269e:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   126a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   126a2:	9911      	ldr	r1, [sp, #68]	; 0x44
   126a4:	9803      	ldr	r0, [sp, #12]
   126a6:	4b0e      	ldr	r3, [pc, #56]	; (126e0 <MQTTSerialize_publish+0xc4>)
   126a8:	4798      	blx	r3
	ptr += payloadlen;
   126aa:	9b03      	ldr	r3, [sp, #12]
   126ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
   126ae:	4694      	mov	ip, r2
   126b0:	4463      	add	r3, ip

	rc = ptr - buf;
   126b2:	1bd8      	subs	r0, r3, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   126b4:	b004      	add	sp, #16
   126b6:	bc1c      	pop	{r2, r3, r4}
   126b8:	4691      	mov	r9, r2
   126ba:	469a      	mov	sl, r3
   126bc:	46a3      	mov	fp, r4
   126be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   126c0:	2002      	movs	r0, #2
   126c2:	4240      	negs	r0, r0
	return rc;
   126c4:	e7f6      	b.n	126b4 <MQTTSerialize_publish+0x98>
   126c6:	46c0      	nop			; (mov r8, r8)
   126c8:	000125f5 	.word	0x000125f5
   126cc:	00012439 	.word	0x00012439
   126d0:	0001249b 	.word	0x0001249b
   126d4:	000123b1 	.word	0x000123b1
   126d8:	00012509 	.word	0x00012509
   126dc:	000124a7 	.word	0x000124a7
   126e0:	00012b4d 	.word	0x00012b4d

000126e4 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   126e4:	b530      	push	{r4, r5, lr}
   126e6:	b083      	sub	sp, #12
   126e8:	0004      	movs	r4, r0
   126ea:	a806      	add	r0, sp, #24
   126ec:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
   126ee:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
   126f0:	2903      	cmp	r1, #3
   126f2:	dd1e      	ble.n	12732 <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
   126f4:	210f      	movs	r1, #15
   126f6:	4011      	ands	r1, r2
	header.bits.dup = dup;
   126f8:	2001      	movs	r0, #1
   126fa:	4003      	ands	r3, r0
   126fc:	00db      	lsls	r3, r3, #3
   126fe:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   12700:	3a06      	subs	r2, #6
   12702:	4250      	negs	r0, r2
   12704:	4142      	adcs	r2, r0
   12706:	0052      	lsls	r2, r2, #1
   12708:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
   1270a:	4311      	orrs	r1, r2
   1270c:	a801      	add	r0, sp, #4
   1270e:	4b0a      	ldr	r3, [pc, #40]	; (12738 <MQTTSerialize_ack+0x54>)
   12710:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   12712:	2102      	movs	r1, #2
   12714:	9801      	ldr	r0, [sp, #4]
   12716:	4b09      	ldr	r3, [pc, #36]	; (1273c <MQTTSerialize_ack+0x58>)
   12718:	4798      	blx	r3
   1271a:	9b01      	ldr	r3, [sp, #4]
   1271c:	469c      	mov	ip, r3
   1271e:	4460      	add	r0, ip
   12720:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
   12722:	0029      	movs	r1, r5
   12724:	a801      	add	r0, sp, #4
   12726:	4b06      	ldr	r3, [pc, #24]	; (12740 <MQTTSerialize_ack+0x5c>)
   12728:	4798      	blx	r3
	rc = ptr - buf;
   1272a:	9b01      	ldr	r3, [sp, #4]
   1272c:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   1272e:	b003      	add	sp, #12
   12730:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   12732:	2002      	movs	r0, #2
   12734:	4240      	negs	r0, r0
	return rc;
   12736:	e7fa      	b.n	1272e <MQTTSerialize_ack+0x4a>
   12738:	0001249b 	.word	0x0001249b
   1273c:	000123b1 	.word	0x000123b1
   12740:	000124a7 	.word	0x000124a7

00012744 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   12744:	b5f0      	push	{r4, r5, r6, r7, lr}
   12746:	46c6      	mov	lr, r8
   12748:	b500      	push	{lr}
   1274a:	1e07      	subs	r7, r0, #0
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
   1274c:	dd12      	ble.n	12774 <MQTTSerialize_subscribeLength+0x30>
   1274e:	000c      	movs	r4, r1
   12750:	2602      	movs	r6, #2
   12752:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   12754:	4b08      	ldr	r3, [pc, #32]	; (12778 <MQTTSerialize_subscribeLength+0x34>)
   12756:	4698      	mov	r8, r3
   12758:	6820      	ldr	r0, [r4, #0]
   1275a:	6861      	ldr	r1, [r4, #4]
   1275c:	68a2      	ldr	r2, [r4, #8]
   1275e:	47c0      	blx	r8
   12760:	3003      	adds	r0, #3
   12762:	1836      	adds	r6, r6, r0
	for (i = 0; i < count; ++i)
   12764:	3501      	adds	r5, #1
   12766:	340c      	adds	r4, #12
   12768:	42af      	cmp	r7, r5
   1276a:	d1f5      	bne.n	12758 <MQTTSerialize_subscribeLength+0x14>
	return len;
}
   1276c:	0030      	movs	r0, r6
   1276e:	bc04      	pop	{r2}
   12770:	4690      	mov	r8, r2
   12772:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int len = 2; /* packetid */
   12774:	2602      	movs	r6, #2
	return len;
   12776:	e7f9      	b.n	1276c <MQTTSerialize_subscribeLength+0x28>
   12778:	00012595 	.word	0x00012595

0001277c <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   1277c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1277e:	46d6      	mov	lr, sl
   12780:	464f      	mov	r7, r9
   12782:	4646      	mov	r6, r8
   12784:	b5c0      	push	{r6, r7, lr}
   12786:	b084      	sub	sp, #16
   12788:	4682      	mov	sl, r0
   1278a:	000e      	movs	r6, r1
   1278c:	0015      	movs	r5, r2
   1278e:	9301      	str	r3, [sp, #4]
   12790:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	unsigned char *ptr = buf;
   12792:	9003      	str	r0, [sp, #12]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   12794:	990d      	ldr	r1, [sp, #52]	; 0x34
   12796:	0038      	movs	r0, r7
   12798:	4b1f      	ldr	r3, [pc, #124]	; (12818 <MQTTSerialize_subscribe+0x9c>)
   1279a:	4798      	blx	r3
   1279c:	0004      	movs	r4, r0
   1279e:	4b1f      	ldr	r3, [pc, #124]	; (1281c <MQTTSerialize_subscribe+0xa0>)
   127a0:	4798      	blx	r3
   127a2:	42b0      	cmp	r0, r6
   127a4:	dc34      	bgt.n	12810 <MQTTSerialize_subscribe+0x94>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
   127a6:	2101      	movs	r1, #1
   127a8:	4029      	ands	r1, r5
   127aa:	00ca      	lsls	r2, r1, #3
	header.bits.qos = 1;
   127ac:	2180      	movs	r1, #128	; 0x80
   127ae:	4311      	orrs	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   127b0:	2302      	movs	r3, #2
   127b2:	4319      	orrs	r1, r3
   127b4:	a803      	add	r0, sp, #12
   127b6:	4b1a      	ldr	r3, [pc, #104]	; (12820 <MQTTSerialize_subscribe+0xa4>)
   127b8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   127ba:	0021      	movs	r1, r4
   127bc:	9803      	ldr	r0, [sp, #12]
   127be:	4b19      	ldr	r3, [pc, #100]	; (12824 <MQTTSerialize_subscribe+0xa8>)
   127c0:	4798      	blx	r3
   127c2:	9a03      	ldr	r2, [sp, #12]
   127c4:	4694      	mov	ip, r2
   127c6:	4460      	add	r0, ip
   127c8:	9003      	str	r0, [sp, #12]

	writeInt(&ptr, packetid);
   127ca:	9901      	ldr	r1, [sp, #4]
   127cc:	a803      	add	r0, sp, #12
   127ce:	4b16      	ldr	r3, [pc, #88]	; (12828 <MQTTSerialize_subscribe+0xac>)
   127d0:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   127d2:	2f00      	cmp	r7, #0
   127d4:	dd13      	ble.n	127fe <MQTTSerialize_subscribe+0x82>
   127d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   127d8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   127da:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
   127dc:	4b13      	ldr	r3, [pc, #76]	; (1282c <MQTTSerialize_subscribe+0xb0>)
   127de:	4699      	mov	r9, r3
		writeChar(&ptr, requestedQoSs[i]);
   127e0:	4b0f      	ldr	r3, [pc, #60]	; (12820 <MQTTSerialize_subscribe+0xa4>)
   127e2:	4698      	mov	r8, r3
		writeMQTTString(&ptr, topicFilters[i]);
   127e4:	6821      	ldr	r1, [r4, #0]
   127e6:	6862      	ldr	r2, [r4, #4]
   127e8:	68a3      	ldr	r3, [r4, #8]
   127ea:	a803      	add	r0, sp, #12
   127ec:	47c8      	blx	r9
		writeChar(&ptr, requestedQoSs[i]);
   127ee:	ce02      	ldmia	r6!, {r1}
   127f0:	b2c9      	uxtb	r1, r1
   127f2:	a803      	add	r0, sp, #12
   127f4:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
   127f6:	3501      	adds	r5, #1
   127f8:	340c      	adds	r4, #12
   127fa:	42af      	cmp	r7, r5
   127fc:	d1f2      	bne.n	127e4 <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
   127fe:	9b03      	ldr	r3, [sp, #12]
   12800:	4652      	mov	r2, sl
   12802:	1a98      	subs	r0, r3, r2
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   12804:	b004      	add	sp, #16
   12806:	bc1c      	pop	{r2, r3, r4}
   12808:	4690      	mov	r8, r2
   1280a:	4699      	mov	r9, r3
   1280c:	46a2      	mov	sl, r4
   1280e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   12810:	2002      	movs	r0, #2
   12812:	4240      	negs	r0, r0
	return rc;
   12814:	e7f6      	b.n	12804 <MQTTSerialize_subscribe+0x88>
   12816:	46c0      	nop			; (mov r8, r8)
   12818:	00012745 	.word	0x00012745
   1281c:	00012439 	.word	0x00012439
   12820:	0001249b 	.word	0x0001249b
   12824:	000123b1 	.word	0x000123b1
   12828:	000124a7 	.word	0x000124a7
   1282c:	00012509 	.word	0x00012509

00012830 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   12830:	b5f0      	push	{r4, r5, r6, r7, lr}
   12832:	46ce      	mov	lr, r9
   12834:	4647      	mov	r7, r8
   12836:	b580      	push	{r7, lr}
   12838:	b083      	sub	sp, #12
   1283a:	0004      	movs	r4, r0
   1283c:	000e      	movs	r6, r1
   1283e:	0015      	movs	r5, r2
   12840:	001f      	movs	r7, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   12842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12844:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   12846:	a801      	add	r0, sp, #4
   12848:	4b1e      	ldr	r3, [pc, #120]	; (128c4 <MQTTDeserialize_suback+0x94>)
   1284a:	4798      	blx	r3
	if (header.bits.type != SUBACK)
   1284c:	23f0      	movs	r3, #240	; 0xf0
   1284e:	4003      	ands	r3, r0
	int rc = 0;
   12850:	2000      	movs	r0, #0
	if (header.bits.type != SUBACK)
   12852:	2b90      	cmp	r3, #144	; 0x90
   12854:	d004      	beq.n	12860 <MQTTDeserialize_suback+0x30>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   12856:	b003      	add	sp, #12
   12858:	bc0c      	pop	{r2, r3}
   1285a:	4690      	mov	r8, r2
   1285c:	4699      	mov	r9, r3
   1285e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   12860:	4669      	mov	r1, sp
   12862:	9801      	ldr	r0, [sp, #4]
   12864:	4b18      	ldr	r3, [pc, #96]	; (128c8 <MQTTDeserialize_suback+0x98>)
   12866:	4798      	blx	r3
   12868:	9b01      	ldr	r3, [sp, #4]
   1286a:	181b      	adds	r3, r3, r0
   1286c:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;
   1286e:	9a00      	ldr	r2, [sp, #0]
	if (enddata - curdata < 2)
   12870:	2a01      	cmp	r2, #1
   12872:	ddf0      	ble.n	12856 <MQTTDeserialize_suback+0x26>
	enddata = curdata + mylen;
   12874:	4698      	mov	r8, r3
   12876:	4490      	add	r8, r2
	*packetid = readInt(&curdata);
   12878:	a801      	add	r0, sp, #4
   1287a:	4b14      	ldr	r3, [pc, #80]	; (128cc <MQTTDeserialize_suback+0x9c>)
   1287c:	4798      	blx	r3
   1287e:	8020      	strh	r0, [r4, #0]
	*count = 0;
   12880:	2300      	movs	r3, #0
   12882:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
   12884:	9b01      	ldr	r3, [sp, #4]
   12886:	4598      	cmp	r8, r3
   12888:	d916      	bls.n	128b8 <MQTTDeserialize_suback+0x88>
		if (*count > maxcount)
   1288a:	2e00      	cmp	r6, #0
   1288c:	db16      	blt.n	128bc <MQTTDeserialize_suback+0x8c>
   1288e:	2300      	movs	r3, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
   12890:	4a0c      	ldr	r2, [pc, #48]	; (128c4 <MQTTDeserialize_suback+0x94>)
   12892:	4691      	mov	r9, r2
   12894:	1c5a      	adds	r2, r3, #1
   12896:	602a      	str	r2, [r5, #0]
   12898:	009b      	lsls	r3, r3, #2
   1289a:	18fc      	adds	r4, r7, r3
   1289c:	a801      	add	r0, sp, #4
   1289e:	47c8      	blx	r9
   128a0:	6020      	str	r0, [r4, #0]
	while (curdata < enddata)
   128a2:	9b01      	ldr	r3, [sp, #4]
   128a4:	4598      	cmp	r8, r3
   128a6:	d905      	bls.n	128b4 <MQTTDeserialize_suback+0x84>
		if (*count > maxcount)
   128a8:	682b      	ldr	r3, [r5, #0]
   128aa:	42b3      	cmp	r3, r6
   128ac:	ddf2      	ble.n	12894 <MQTTDeserialize_suback+0x64>
			rc = -1;
   128ae:	2001      	movs	r0, #1
   128b0:	4240      	negs	r0, r0
	return rc;
   128b2:	e7d0      	b.n	12856 <MQTTDeserialize_suback+0x26>
	rc = 1;
   128b4:	2001      	movs	r0, #1
   128b6:	e7ce      	b.n	12856 <MQTTDeserialize_suback+0x26>
   128b8:	2001      	movs	r0, #1
   128ba:	e7cc      	b.n	12856 <MQTTDeserialize_suback+0x26>
			rc = -1;
   128bc:	2001      	movs	r0, #1
   128be:	4240      	negs	r0, r0
   128c0:	e7c9      	b.n	12856 <MQTTDeserialize_suback+0x26>
   128c2:	46c0      	nop			; (mov r8, r8)
   128c4:	0001248f 	.word	0x0001248f
   128c8:	00012461 	.word	0x00012461
   128cc:	0001247d 	.word	0x0001247d

000128d0 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
   128d0:	b510      	push	{r4, lr}
	/* Initialize the board. */
	system_init();
   128d2:	4b05      	ldr	r3, [pc, #20]	; (128e8 <main+0x18>)
   128d4:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
   128d6:	4b05      	ldr	r3, [pc, #20]	; (128ec <main+0x1c>)
   128d8:	4798      	blx	r3

	//Initialize trace capabilities
	 vTraceEnable(TRC_START);
   128da:	2001      	movs	r0, #1
   128dc:	4b04      	ldr	r3, [pc, #16]	; (128f0 <main+0x20>)
   128de:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   128e0:	4b04      	ldr	r3, [pc, #16]	; (128f4 <main+0x24>)
   128e2:	4798      	blx	r3

	return 0; //Will not get here
}
   128e4:	2000      	movs	r0, #0
   128e6:	bd10      	pop	{r4, pc}
   128e8:	0000ecdd 	.word	0x0000ecdd
   128ec:	000089c5 	.word	0x000089c5
   128f0:	000050e9 	.word	0x000050e9
   128f4:	00007985 	.word	0x00007985

000128f8 <vApplicationDaemonTaskStartupHook>:
*					here will be called before other tasks are initialized.
* @param[in]        None
* @return           None
*****************************************************************************/
void vApplicationDaemonTaskStartupHook(void)
{
   128f8:	b530      	push	{r4, r5, lr}
   128fa:	b083      	sub	sp, #12
	 int result;
	 
	SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   128fc:	4845      	ldr	r0, [pc, #276]	; (12a14 <vApplicationDaemonTaskStartupHook+0x11c>)
   128fe:	4c46      	ldr	r4, [pc, #280]	; (12a18 <vApplicationDaemonTaskStartupHook+0x120>)
   12900:	47a0      	blx	r4

	/* Initialize HW that needs FreeRTOS Initialization */
	SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   12902:	4846      	ldr	r0, [pc, #280]	; (12a1c <vApplicationDaemonTaskStartupHook+0x124>)
   12904:	47a0      	blx	r4
	if (I2cInitializeDriver() != STATUS_OK)
   12906:	4b46      	ldr	r3, [pc, #280]	; (12a20 <vApplicationDaemonTaskStartupHook+0x128>)
   12908:	4798      	blx	r3
   1290a:	2800      	cmp	r0, #0
   1290c:	d100      	bne.n	12910 <vApplicationDaemonTaskStartupHook+0x18>
   1290e:	e075      	b.n	129fc <vApplicationDaemonTaskStartupHook+0x104>
	{
		SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   12910:	4844      	ldr	r0, [pc, #272]	; (12a24 <vApplicationDaemonTaskStartupHook+0x12c>)
   12912:	4b41      	ldr	r3, [pc, #260]	; (12a18 <vApplicationDaemonTaskStartupHook+0x120>)
   12914:	4798      	blx	r3
	} else {
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
	}
	
	/* To let the sensor power-on properly before communicating */
	vTaskDelay(2000);
   12916:	20fa      	movs	r0, #250	; 0xfa
   12918:	00c0      	lsls	r0, r0, #3
   1291a:	4b43      	ldr	r3, [pc, #268]	; (12a28 <vApplicationDaemonTaskStartupHook+0x130>)
   1291c:	4798      	blx	r3
	
	/* Initialize the BME680 Sensor
     * Interface preference is updated as a parameter
     * For I2C : BME68X_I2C_INTF
     */
    result = bme68x_interface_init(&bme, BME68X_I2C_INTF);
   1291e:	4d43      	ldr	r5, [pc, #268]	; (12a2c <vApplicationDaemonTaskStartupHook+0x134>)
   12920:	2101      	movs	r1, #1
   12922:	0028      	movs	r0, r5
   12924:	4b42      	ldr	r3, [pc, #264]	; (12a30 <vApplicationDaemonTaskStartupHook+0x138>)
   12926:	4798      	blx	r3
   12928:	0004      	movs	r4, r0
	result |= bme68x_init(&bme);
   1292a:	0028      	movs	r0, r5
   1292c:	4b41      	ldr	r3, [pc, #260]	; (12a34 <vApplicationDaemonTaskStartupHook+0x13c>)
   1292e:	4798      	blx	r3
   12930:	4304      	orrs	r4, r0
   12932:	b264      	sxtb	r4, r4
	result |= bme68x_default_config(&bme);
   12934:	0028      	movs	r0, r5
   12936:	4b40      	ldr	r3, [pc, #256]	; (12a38 <vApplicationDaemonTaskStartupHook+0x140>)
   12938:	4798      	blx	r3

	if (result != BME68X_OK) {
   1293a:	4320      	orrs	r0, r4
   1293c:	b240      	sxtb	r0, r0
   1293e:	2800      	cmp	r0, #0
   12940:	d060      	beq.n	12a04 <vApplicationDaemonTaskStartupHook+0x10c>
		SerialConsoleWriteString("BME680 Initial failed!\r\n");
   12942:	483e      	ldr	r0, [pc, #248]	; (12a3c <vApplicationDaemonTaskStartupHook+0x144>)
   12944:	4b34      	ldr	r3, [pc, #208]	; (12a18 <vApplicationDaemonTaskStartupHook+0x120>)
   12946:	4798      	blx	r3
	} else{
		SerialConsoleWriteString("BME680 Initialed Success!\r\n");
	}
	
	/* Configure SPI for LSM6DSO */
	configure_spi_master();
   12948:	4b3d      	ldr	r3, [pc, #244]	; (12a40 <vApplicationDaemonTaskStartupHook+0x148>)
   1294a:	4798      	blx	r3
	dev_ctx = GetImuStruct();
   1294c:	4b3d      	ldr	r3, [pc, #244]	; (12a44 <vApplicationDaemonTaskStartupHook+0x14c>)
   1294e:	4798      	blx	r3
   12950:	4b3d      	ldr	r3, [pc, #244]	; (12a48 <vApplicationDaemonTaskStartupHook+0x150>)
   12952:	6018      	str	r0, [r3, #0]
		
	/* Passing device specific handle. */
	dev_ctx->handle = &spi_master_instance;
   12954:	4b3d      	ldr	r3, [pc, #244]	; (12a4c <vApplicationDaemonTaskStartupHook+0x154>)
   12956:	6083      	str	r3, [r0, #8]

	/* Initialize the IMU LSM6DSO Sensor */
	if(InitImu() == 0)
   12958:	4b3d      	ldr	r3, [pc, #244]	; (12a50 <vApplicationDaemonTaskStartupHook+0x158>)
   1295a:	4798      	blx	r3
   1295c:	2800      	cmp	r0, #0
   1295e:	d055      	beq.n	12a0c <vApplicationDaemonTaskStartupHook+0x114>
	{
		SerialConsoleWriteString("IMU initialized!\r\n");
	} else {
		SerialConsoleWriteString("Could not initialize IMU\r\n");
   12960:	483c      	ldr	r0, [pc, #240]	; (12a54 <vApplicationDaemonTaskStartupHook+0x15c>)
   12962:	4b2d      	ldr	r3, [pc, #180]	; (12a18 <vApplicationDaemonTaskStartupHook+0x120>)
   12964:	4798      	blx	r3
	}
	
	FS3000_begin();
   12966:	4b3c      	ldr	r3, [pc, #240]	; (12a58 <vApplicationDaemonTaskStartupHook+0x160>)
   12968:	4798      	blx	r3
* @param[in]        None
* @return           None
*****************************************************************************/
static void StartTasks(void)
{
	snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   1296a:	4b3c      	ldr	r3, [pc, #240]	; (12a5c <vApplicationDaemonTaskStartupHook+0x164>)
   1296c:	4798      	blx	r3
   1296e:	0003      	movs	r3, r0
   12970:	4c3b      	ldr	r4, [pc, #236]	; (12a60 <vApplicationDaemonTaskStartupHook+0x168>)
   12972:	4a3c      	ldr	r2, [pc, #240]	; (12a64 <vApplicationDaemonTaskStartupHook+0x16c>)
   12974:	2140      	movs	r1, #64	; 0x40
   12976:	0020      	movs	r0, r4
   12978:	4d3b      	ldr	r5, [pc, #236]	; (12a68 <vApplicationDaemonTaskStartupHook+0x170>)
   1297a:	47a8      	blx	r5
	SerialConsoleWriteString(bufferPrint);
   1297c:	0020      	movs	r0, r4
   1297e:	4b26      	ldr	r3, [pc, #152]	; (12a18 <vApplicationDaemonTaskStartupHook+0x120>)
   12980:	4798      	blx	r3

	//Initialize Tasks here
	if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   12982:	4b3a      	ldr	r3, [pc, #232]	; (12a6c <vApplicationDaemonTaskStartupHook+0x174>)
   12984:	9301      	str	r3, [sp, #4]
   12986:	2304      	movs	r3, #4
   12988:	9300      	str	r3, [sp, #0]
   1298a:	2300      	movs	r3, #0
   1298c:	22c8      	movs	r2, #200	; 0xc8
   1298e:	0052      	lsls	r2, r2, #1
   12990:	4937      	ldr	r1, [pc, #220]	; (12a70 <vApplicationDaemonTaskStartupHook+0x178>)
   12992:	4838      	ldr	r0, [pc, #224]	; (12a74 <vApplicationDaemonTaskStartupHook+0x17c>)
   12994:	4c38      	ldr	r4, [pc, #224]	; (12a78 <vApplicationDaemonTaskStartupHook+0x180>)
   12996:	47a0      	blx	r4
   12998:	2801      	cmp	r0, #1
   1299a:	d002      	beq.n	129a2 <vApplicationDaemonTaskStartupHook+0xaa>
		SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   1299c:	4837      	ldr	r0, [pc, #220]	; (12a7c <vApplicationDaemonTaskStartupHook+0x184>)
   1299e:	4b1e      	ldr	r3, [pc, #120]	; (12a18 <vApplicationDaemonTaskStartupHook+0x120>)
   129a0:	4798      	blx	r3
	}

	snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   129a2:	4b2e      	ldr	r3, [pc, #184]	; (12a5c <vApplicationDaemonTaskStartupHook+0x164>)
   129a4:	4798      	blx	r3
   129a6:	0003      	movs	r3, r0
   129a8:	4c2d      	ldr	r4, [pc, #180]	; (12a60 <vApplicationDaemonTaskStartupHook+0x168>)
   129aa:	4a35      	ldr	r2, [pc, #212]	; (12a80 <vApplicationDaemonTaskStartupHook+0x188>)
   129ac:	2140      	movs	r1, #64	; 0x40
   129ae:	0020      	movs	r0, r4
   129b0:	4d2d      	ldr	r5, [pc, #180]	; (12a68 <vApplicationDaemonTaskStartupHook+0x170>)
   129b2:	47a8      	blx	r5
	SerialConsoleWriteString(bufferPrint);
   129b4:	0020      	movs	r0, r4
   129b6:	4b18      	ldr	r3, [pc, #96]	; (12a18 <vApplicationDaemonTaskStartupHook+0x120>)
   129b8:	4798      	blx	r3

	if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   129ba:	4b32      	ldr	r3, [pc, #200]	; (12a84 <vApplicationDaemonTaskStartupHook+0x18c>)
   129bc:	9301      	str	r3, [sp, #4]
   129be:	2303      	movs	r3, #3
   129c0:	9300      	str	r3, [sp, #0]
   129c2:	2300      	movs	r3, #0
   129c4:	22fa      	movs	r2, #250	; 0xfa
   129c6:	0092      	lsls	r2, r2, #2
   129c8:	492f      	ldr	r1, [pc, #188]	; (12a88 <vApplicationDaemonTaskStartupHook+0x190>)
   129ca:	4830      	ldr	r0, [pc, #192]	; (12a8c <vApplicationDaemonTaskStartupHook+0x194>)
   129cc:	4c2a      	ldr	r4, [pc, #168]	; (12a78 <vApplicationDaemonTaskStartupHook+0x180>)
   129ce:	47a0      	blx	r4
   129d0:	2801      	cmp	r0, #1
   129d2:	d002      	beq.n	129da <vApplicationDaemonTaskStartupHook+0xe2>
		SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   129d4:	482e      	ldr	r0, [pc, #184]	; (12a90 <vApplicationDaemonTaskStartupHook+0x198>)
   129d6:	4b10      	ldr	r3, [pc, #64]	; (12a18 <vApplicationDaemonTaskStartupHook+0x120>)
   129d8:	4798      	blx	r3
	}

	snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   129da:	4b20      	ldr	r3, [pc, #128]	; (12a5c <vApplicationDaemonTaskStartupHook+0x164>)
   129dc:	4798      	blx	r3
   129de:	0003      	movs	r3, r0
   129e0:	4c1f      	ldr	r4, [pc, #124]	; (12a60 <vApplicationDaemonTaskStartupHook+0x168>)
   129e2:	4a2c      	ldr	r2, [pc, #176]	; (12a94 <vApplicationDaemonTaskStartupHook+0x19c>)
   129e4:	2140      	movs	r1, #64	; 0x40
   129e6:	0020      	movs	r0, r4
   129e8:	4d1f      	ldr	r5, [pc, #124]	; (12a68 <vApplicationDaemonTaskStartupHook+0x170>)
   129ea:	47a8      	blx	r5
	SerialConsoleWriteString(bufferPrint);
   129ec:	0020      	movs	r0, r4
   129ee:	4b0a      	ldr	r3, [pc, #40]	; (12a18 <vApplicationDaemonTaskStartupHook+0x120>)
   129f0:	4798      	blx	r3
	vTaskSuspend(daemonTaskHandle);
   129f2:	2000      	movs	r0, #0
   129f4:	4b28      	ldr	r3, [pc, #160]	; (12a98 <vApplicationDaemonTaskStartupHook+0x1a0>)
   129f6:	4798      	blx	r3
}
   129f8:	b003      	add	sp, #12
   129fa:	bd30      	pop	{r4, r5, pc}
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   129fc:	4827      	ldr	r0, [pc, #156]	; (12a9c <vApplicationDaemonTaskStartupHook+0x1a4>)
   129fe:	4b06      	ldr	r3, [pc, #24]	; (12a18 <vApplicationDaemonTaskStartupHook+0x120>)
   12a00:	4798      	blx	r3
   12a02:	e788      	b.n	12916 <vApplicationDaemonTaskStartupHook+0x1e>
		SerialConsoleWriteString("BME680 Initialed Success!\r\n");
   12a04:	4826      	ldr	r0, [pc, #152]	; (12aa0 <vApplicationDaemonTaskStartupHook+0x1a8>)
   12a06:	4b04      	ldr	r3, [pc, #16]	; (12a18 <vApplicationDaemonTaskStartupHook+0x120>)
   12a08:	4798      	blx	r3
   12a0a:	e79d      	b.n	12948 <vApplicationDaemonTaskStartupHook+0x50>
		SerialConsoleWriteString("IMU initialized!\r\n");
   12a0c:	4825      	ldr	r0, [pc, #148]	; (12aa4 <vApplicationDaemonTaskStartupHook+0x1ac>)
   12a0e:	4b02      	ldr	r3, [pc, #8]	; (12a18 <vApplicationDaemonTaskStartupHook+0x120>)
   12a10:	4798      	blx	r3
   12a12:	e7a8      	b.n	12966 <vApplicationDaemonTaskStartupHook+0x6e>
   12a14:	0001ba74 	.word	0x0001ba74
   12a18:	00008aed 	.word	0x00008aed
   12a1c:	0001ba98 	.word	0x0001ba98
   12a20:	00002d5d 	.word	0x00002d5d
   12a24:	0001bab0 	.word	0x0001bab0
   12a28:	00007cc9 	.word	0x00007cc9
   12a2c:	20005d70 	.word	0x20005d70
   12a30:	000027e5 	.word	0x000027e5
   12a34:	00001d01 	.word	0x00001d01
   12a38:	000027a5 	.word	0x000027a5
   12a3c:	0001baf0 	.word	0x0001baf0
   12a40:	00004919 	.word	0x00004919
   12a44:	00003689 	.word	0x00003689
   12a48:	20005d68 	.word	0x20005d68
   12a4c:	20004748 	.word	0x20004748
   12a50:	00003691 	.word	0x00003691
   12a54:	0001bb3c 	.word	0x0001bb3c
   12a58:	00000131 	.word	0x00000131
   12a5c:	000063f1 	.word	0x000063f1
   12a60:	20005dc0 	.word	0x20005dc0
   12a64:	0001bb58 	.word	0x0001bb58
   12a68:	000136bd 	.word	0x000136bd
   12a6c:	20004558 	.word	0x20004558
   12a70:	0001bb7c 	.word	0x0001bb7c
   12a74:	00002a0d 	.word	0x00002a0d
   12a78:	000076e1 	.word	0x000076e1
   12a7c:	0001bb88 	.word	0x0001bb88
   12a80:	0001bbb4 	.word	0x0001bbb4
   12a84:	2000455c 	.word	0x2000455c
   12a88:	0001bbd4 	.word	0x0001bbd4
   12a8c:	00000ca9 	.word	0x00000ca9
   12a90:	0001bbe0 	.word	0x0001bbe0
   12a94:	0001bc0c 	.word	0x0001bc0c
   12a98:	00007e69 	.word	0x00007e69
   12a9c:	0001bad4 	.word	0x0001bad4
   12aa0:	0001bb0c 	.word	0x0001bb0c
   12aa4:	0001bb28 	.word	0x0001bb28

00012aa8 <vApplicationMallocFailedHook>:
	//stdio_serial_init(GetUsartModule(), EDBG_CDC_MODULE, &usart_conf);
	//usart_enable(&cdc_uart_module);
}

void vApplicationMallocFailedHook(void)
{
   12aa8:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   12aaa:	4802      	ldr	r0, [pc, #8]	; (12ab4 <vApplicationMallocFailedHook+0xc>)
   12aac:	4b02      	ldr	r3, [pc, #8]	; (12ab8 <vApplicationMallocFailedHook+0x10>)
   12aae:	4798      	blx	r3
   12ab0:	e7fe      	b.n	12ab0 <vApplicationMallocFailedHook+0x8>
   12ab2:	46c0      	nop			; (mov r8, r8)
   12ab4:	0001bc2c 	.word	0x0001bc2c
   12ab8:	00008aed 	.word	0x00008aed

00012abc <vApplicationStackOverflowHook>:
while(1);
}

void vApplicationStackOverflowHook(void)
{
   12abc:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   12abe:	4802      	ldr	r0, [pc, #8]	; (12ac8 <vApplicationStackOverflowHook+0xc>)
   12ac0:	4b02      	ldr	r3, [pc, #8]	; (12acc <vApplicationStackOverflowHook+0x10>)
   12ac2:	4798      	blx	r3
   12ac4:	e7fe      	b.n	12ac4 <vApplicationStackOverflowHook+0x8>
   12ac6:	46c0      	nop			; (mov r8, r8)
   12ac8:	0001bc58 	.word	0x0001bc58
   12acc:	00008aed 	.word	0x00008aed

00012ad0 <atoi>:
   12ad0:	b510      	push	{r4, lr}
   12ad2:	220a      	movs	r2, #10
   12ad4:	2100      	movs	r1, #0
   12ad6:	f000 ff7d 	bl	139d4 <strtol>
   12ada:	bd10      	pop	{r4, pc}

00012adc <__libc_init_array>:
   12adc:	b570      	push	{r4, r5, r6, lr}
   12ade:	2600      	movs	r6, #0
   12ae0:	4d0c      	ldr	r5, [pc, #48]	; (12b14 <__libc_init_array+0x38>)
   12ae2:	4c0d      	ldr	r4, [pc, #52]	; (12b18 <__libc_init_array+0x3c>)
   12ae4:	1b64      	subs	r4, r4, r5
   12ae6:	10a4      	asrs	r4, r4, #2
   12ae8:	42a6      	cmp	r6, r4
   12aea:	d109      	bne.n	12b00 <__libc_init_array+0x24>
   12aec:	2600      	movs	r6, #0
   12aee:	f009 facb 	bl	1c088 <_init>
   12af2:	4d0a      	ldr	r5, [pc, #40]	; (12b1c <__libc_init_array+0x40>)
   12af4:	4c0a      	ldr	r4, [pc, #40]	; (12b20 <__libc_init_array+0x44>)
   12af6:	1b64      	subs	r4, r4, r5
   12af8:	10a4      	asrs	r4, r4, #2
   12afa:	42a6      	cmp	r6, r4
   12afc:	d105      	bne.n	12b0a <__libc_init_array+0x2e>
   12afe:	bd70      	pop	{r4, r5, r6, pc}
   12b00:	00b3      	lsls	r3, r6, #2
   12b02:	58eb      	ldr	r3, [r5, r3]
   12b04:	4798      	blx	r3
   12b06:	3601      	adds	r6, #1
   12b08:	e7ee      	b.n	12ae8 <__libc_init_array+0xc>
   12b0a:	00b3      	lsls	r3, r6, #2
   12b0c:	58eb      	ldr	r3, [r5, r3]
   12b0e:	4798      	blx	r3
   12b10:	3601      	adds	r6, #1
   12b12:	e7f2      	b.n	12afa <__libc_init_array+0x1e>
   12b14:	0001c094 	.word	0x0001c094
   12b18:	0001c094 	.word	0x0001c094
   12b1c:	0001c094 	.word	0x0001c094
   12b20:	0001c098 	.word	0x0001c098

00012b24 <malloc>:
   12b24:	b510      	push	{r4, lr}
   12b26:	4b03      	ldr	r3, [pc, #12]	; (12b34 <malloc+0x10>)
   12b28:	0001      	movs	r1, r0
   12b2a:	6818      	ldr	r0, [r3, #0]
   12b2c:	f000 f87c 	bl	12c28 <_malloc_r>
   12b30:	bd10      	pop	{r4, pc}
   12b32:	46c0      	nop			; (mov r8, r8)
   12b34:	20000228 	.word	0x20000228

00012b38 <free>:
   12b38:	b510      	push	{r4, lr}
   12b3a:	4b03      	ldr	r3, [pc, #12]	; (12b48 <free+0x10>)
   12b3c:	0001      	movs	r1, r0
   12b3e:	6818      	ldr	r0, [r3, #0]
   12b40:	f000 f828 	bl	12b94 <_free_r>
   12b44:	bd10      	pop	{r4, pc}
   12b46:	46c0      	nop			; (mov r8, r8)
   12b48:	20000228 	.word	0x20000228

00012b4c <memcpy>:
   12b4c:	2300      	movs	r3, #0
   12b4e:	b510      	push	{r4, lr}
   12b50:	429a      	cmp	r2, r3
   12b52:	d100      	bne.n	12b56 <memcpy+0xa>
   12b54:	bd10      	pop	{r4, pc}
   12b56:	5ccc      	ldrb	r4, [r1, r3]
   12b58:	54c4      	strb	r4, [r0, r3]
   12b5a:	3301      	adds	r3, #1
   12b5c:	e7f8      	b.n	12b50 <memcpy+0x4>

00012b5e <memmove>:
   12b5e:	b510      	push	{r4, lr}
   12b60:	4288      	cmp	r0, r1
   12b62:	d902      	bls.n	12b6a <memmove+0xc>
   12b64:	188b      	adds	r3, r1, r2
   12b66:	4298      	cmp	r0, r3
   12b68:	d308      	bcc.n	12b7c <memmove+0x1e>
   12b6a:	2300      	movs	r3, #0
   12b6c:	429a      	cmp	r2, r3
   12b6e:	d007      	beq.n	12b80 <memmove+0x22>
   12b70:	5ccc      	ldrb	r4, [r1, r3]
   12b72:	54c4      	strb	r4, [r0, r3]
   12b74:	3301      	adds	r3, #1
   12b76:	e7f9      	b.n	12b6c <memmove+0xe>
   12b78:	5c8b      	ldrb	r3, [r1, r2]
   12b7a:	5483      	strb	r3, [r0, r2]
   12b7c:	3a01      	subs	r2, #1
   12b7e:	d2fb      	bcs.n	12b78 <memmove+0x1a>
   12b80:	bd10      	pop	{r4, pc}

00012b82 <memset>:
   12b82:	0003      	movs	r3, r0
   12b84:	1882      	adds	r2, r0, r2
   12b86:	4293      	cmp	r3, r2
   12b88:	d100      	bne.n	12b8c <memset+0xa>
   12b8a:	4770      	bx	lr
   12b8c:	7019      	strb	r1, [r3, #0]
   12b8e:	3301      	adds	r3, #1
   12b90:	e7f9      	b.n	12b86 <memset+0x4>
	...

00012b94 <_free_r>:
   12b94:	b570      	push	{r4, r5, r6, lr}
   12b96:	0005      	movs	r5, r0
   12b98:	2900      	cmp	r1, #0
   12b9a:	d010      	beq.n	12bbe <_free_r+0x2a>
   12b9c:	1f0c      	subs	r4, r1, #4
   12b9e:	6823      	ldr	r3, [r4, #0]
   12ba0:	2b00      	cmp	r3, #0
   12ba2:	da00      	bge.n	12ba6 <_free_r+0x12>
   12ba4:	18e4      	adds	r4, r4, r3
   12ba6:	0028      	movs	r0, r5
   12ba8:	f002 f8cb 	bl	14d42 <__malloc_lock>
   12bac:	4a1d      	ldr	r2, [pc, #116]	; (12c24 <_free_r+0x90>)
   12bae:	6813      	ldr	r3, [r2, #0]
   12bb0:	2b00      	cmp	r3, #0
   12bb2:	d105      	bne.n	12bc0 <_free_r+0x2c>
   12bb4:	6063      	str	r3, [r4, #4]
   12bb6:	6014      	str	r4, [r2, #0]
   12bb8:	0028      	movs	r0, r5
   12bba:	f002 f8c3 	bl	14d44 <__malloc_unlock>
   12bbe:	bd70      	pop	{r4, r5, r6, pc}
   12bc0:	42a3      	cmp	r3, r4
   12bc2:	d909      	bls.n	12bd8 <_free_r+0x44>
   12bc4:	6821      	ldr	r1, [r4, #0]
   12bc6:	1860      	adds	r0, r4, r1
   12bc8:	4283      	cmp	r3, r0
   12bca:	d1f3      	bne.n	12bb4 <_free_r+0x20>
   12bcc:	6818      	ldr	r0, [r3, #0]
   12bce:	685b      	ldr	r3, [r3, #4]
   12bd0:	1841      	adds	r1, r0, r1
   12bd2:	6021      	str	r1, [r4, #0]
   12bd4:	e7ee      	b.n	12bb4 <_free_r+0x20>
   12bd6:	0013      	movs	r3, r2
   12bd8:	685a      	ldr	r2, [r3, #4]
   12bda:	2a00      	cmp	r2, #0
   12bdc:	d001      	beq.n	12be2 <_free_r+0x4e>
   12bde:	42a2      	cmp	r2, r4
   12be0:	d9f9      	bls.n	12bd6 <_free_r+0x42>
   12be2:	6819      	ldr	r1, [r3, #0]
   12be4:	1858      	adds	r0, r3, r1
   12be6:	42a0      	cmp	r0, r4
   12be8:	d10b      	bne.n	12c02 <_free_r+0x6e>
   12bea:	6820      	ldr	r0, [r4, #0]
   12bec:	1809      	adds	r1, r1, r0
   12bee:	1858      	adds	r0, r3, r1
   12bf0:	6019      	str	r1, [r3, #0]
   12bf2:	4282      	cmp	r2, r0
   12bf4:	d1e0      	bne.n	12bb8 <_free_r+0x24>
   12bf6:	6810      	ldr	r0, [r2, #0]
   12bf8:	6852      	ldr	r2, [r2, #4]
   12bfa:	1841      	adds	r1, r0, r1
   12bfc:	6019      	str	r1, [r3, #0]
   12bfe:	605a      	str	r2, [r3, #4]
   12c00:	e7da      	b.n	12bb8 <_free_r+0x24>
   12c02:	42a0      	cmp	r0, r4
   12c04:	d902      	bls.n	12c0c <_free_r+0x78>
   12c06:	230c      	movs	r3, #12
   12c08:	602b      	str	r3, [r5, #0]
   12c0a:	e7d5      	b.n	12bb8 <_free_r+0x24>
   12c0c:	6821      	ldr	r1, [r4, #0]
   12c0e:	1860      	adds	r0, r4, r1
   12c10:	4282      	cmp	r2, r0
   12c12:	d103      	bne.n	12c1c <_free_r+0x88>
   12c14:	6810      	ldr	r0, [r2, #0]
   12c16:	6852      	ldr	r2, [r2, #4]
   12c18:	1841      	adds	r1, r0, r1
   12c1a:	6021      	str	r1, [r4, #0]
   12c1c:	6062      	str	r2, [r4, #4]
   12c1e:	605c      	str	r4, [r3, #4]
   12c20:	e7ca      	b.n	12bb8 <_free_r+0x24>
   12c22:	46c0      	nop			; (mov r8, r8)
   12c24:	20004560 	.word	0x20004560

00012c28 <_malloc_r>:
   12c28:	2303      	movs	r3, #3
   12c2a:	b570      	push	{r4, r5, r6, lr}
   12c2c:	1ccd      	adds	r5, r1, #3
   12c2e:	439d      	bics	r5, r3
   12c30:	3508      	adds	r5, #8
   12c32:	0006      	movs	r6, r0
   12c34:	2d0c      	cmp	r5, #12
   12c36:	d21e      	bcs.n	12c76 <_malloc_r+0x4e>
   12c38:	250c      	movs	r5, #12
   12c3a:	42a9      	cmp	r1, r5
   12c3c:	d81d      	bhi.n	12c7a <_malloc_r+0x52>
   12c3e:	0030      	movs	r0, r6
   12c40:	f002 f87f 	bl	14d42 <__malloc_lock>
   12c44:	4a25      	ldr	r2, [pc, #148]	; (12cdc <_malloc_r+0xb4>)
   12c46:	6814      	ldr	r4, [r2, #0]
   12c48:	0021      	movs	r1, r4
   12c4a:	2900      	cmp	r1, #0
   12c4c:	d119      	bne.n	12c82 <_malloc_r+0x5a>
   12c4e:	4c24      	ldr	r4, [pc, #144]	; (12ce0 <_malloc_r+0xb8>)
   12c50:	6823      	ldr	r3, [r4, #0]
   12c52:	2b00      	cmp	r3, #0
   12c54:	d103      	bne.n	12c5e <_malloc_r+0x36>
   12c56:	0030      	movs	r0, r6
   12c58:	f000 fd1e 	bl	13698 <_sbrk_r>
   12c5c:	6020      	str	r0, [r4, #0]
   12c5e:	0029      	movs	r1, r5
   12c60:	0030      	movs	r0, r6
   12c62:	f000 fd19 	bl	13698 <_sbrk_r>
   12c66:	1c43      	adds	r3, r0, #1
   12c68:	d12c      	bne.n	12cc4 <_malloc_r+0x9c>
   12c6a:	230c      	movs	r3, #12
   12c6c:	0030      	movs	r0, r6
   12c6e:	6033      	str	r3, [r6, #0]
   12c70:	f002 f868 	bl	14d44 <__malloc_unlock>
   12c74:	e003      	b.n	12c7e <_malloc_r+0x56>
   12c76:	2d00      	cmp	r5, #0
   12c78:	dadf      	bge.n	12c3a <_malloc_r+0x12>
   12c7a:	230c      	movs	r3, #12
   12c7c:	6033      	str	r3, [r6, #0]
   12c7e:	2000      	movs	r0, #0
   12c80:	bd70      	pop	{r4, r5, r6, pc}
   12c82:	680b      	ldr	r3, [r1, #0]
   12c84:	1b5b      	subs	r3, r3, r5
   12c86:	d41a      	bmi.n	12cbe <_malloc_r+0x96>
   12c88:	2b0b      	cmp	r3, #11
   12c8a:	d903      	bls.n	12c94 <_malloc_r+0x6c>
   12c8c:	600b      	str	r3, [r1, #0]
   12c8e:	18cc      	adds	r4, r1, r3
   12c90:	6025      	str	r5, [r4, #0]
   12c92:	e003      	b.n	12c9c <_malloc_r+0x74>
   12c94:	428c      	cmp	r4, r1
   12c96:	d10e      	bne.n	12cb6 <_malloc_r+0x8e>
   12c98:	6863      	ldr	r3, [r4, #4]
   12c9a:	6013      	str	r3, [r2, #0]
   12c9c:	0030      	movs	r0, r6
   12c9e:	f002 f851 	bl	14d44 <__malloc_unlock>
   12ca2:	0020      	movs	r0, r4
   12ca4:	2207      	movs	r2, #7
   12ca6:	300b      	adds	r0, #11
   12ca8:	1d23      	adds	r3, r4, #4
   12caa:	4390      	bics	r0, r2
   12cac:	1ac3      	subs	r3, r0, r3
   12cae:	d0e7      	beq.n	12c80 <_malloc_r+0x58>
   12cb0:	425a      	negs	r2, r3
   12cb2:	50e2      	str	r2, [r4, r3]
   12cb4:	e7e4      	b.n	12c80 <_malloc_r+0x58>
   12cb6:	684b      	ldr	r3, [r1, #4]
   12cb8:	6063      	str	r3, [r4, #4]
   12cba:	000c      	movs	r4, r1
   12cbc:	e7ee      	b.n	12c9c <_malloc_r+0x74>
   12cbe:	000c      	movs	r4, r1
   12cc0:	6849      	ldr	r1, [r1, #4]
   12cc2:	e7c2      	b.n	12c4a <_malloc_r+0x22>
   12cc4:	2303      	movs	r3, #3
   12cc6:	1cc4      	adds	r4, r0, #3
   12cc8:	439c      	bics	r4, r3
   12cca:	42a0      	cmp	r0, r4
   12ccc:	d0e0      	beq.n	12c90 <_malloc_r+0x68>
   12cce:	1a21      	subs	r1, r4, r0
   12cd0:	0030      	movs	r0, r6
   12cd2:	f000 fce1 	bl	13698 <_sbrk_r>
   12cd6:	1c43      	adds	r3, r0, #1
   12cd8:	d1da      	bne.n	12c90 <_malloc_r+0x68>
   12cda:	e7c6      	b.n	12c6a <_malloc_r+0x42>
   12cdc:	20004560 	.word	0x20004560
   12ce0:	20004564 	.word	0x20004564

00012ce4 <__cvt>:
   12ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ce6:	b08b      	sub	sp, #44	; 0x2c
   12ce8:	0014      	movs	r4, r2
   12cea:	1e1d      	subs	r5, r3, #0
   12cec:	9912      	ldr	r1, [sp, #72]	; 0x48
   12cee:	da53      	bge.n	12d98 <__cvt+0xb4>
   12cf0:	2480      	movs	r4, #128	; 0x80
   12cf2:	0624      	lsls	r4, r4, #24
   12cf4:	191b      	adds	r3, r3, r4
   12cf6:	001d      	movs	r5, r3
   12cf8:	0014      	movs	r4, r2
   12cfa:	232d      	movs	r3, #45	; 0x2d
   12cfc:	700b      	strb	r3, [r1, #0]
   12cfe:	2320      	movs	r3, #32
   12d00:	9e14      	ldr	r6, [sp, #80]	; 0x50
   12d02:	2203      	movs	r2, #3
   12d04:	439e      	bics	r6, r3
   12d06:	2e46      	cmp	r6, #70	; 0x46
   12d08:	d007      	beq.n	12d1a <__cvt+0x36>
   12d0a:	0033      	movs	r3, r6
   12d0c:	3b45      	subs	r3, #69	; 0x45
   12d0e:	4259      	negs	r1, r3
   12d10:	414b      	adcs	r3, r1
   12d12:	9910      	ldr	r1, [sp, #64]	; 0x40
   12d14:	3a01      	subs	r2, #1
   12d16:	18cb      	adds	r3, r1, r3
   12d18:	9310      	str	r3, [sp, #64]	; 0x40
   12d1a:	ab09      	add	r3, sp, #36	; 0x24
   12d1c:	9304      	str	r3, [sp, #16]
   12d1e:	ab08      	add	r3, sp, #32
   12d20:	9303      	str	r3, [sp, #12]
   12d22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12d24:	9200      	str	r2, [sp, #0]
   12d26:	9302      	str	r3, [sp, #8]
   12d28:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12d2a:	0022      	movs	r2, r4
   12d2c:	9301      	str	r3, [sp, #4]
   12d2e:	002b      	movs	r3, r5
   12d30:	f000 ffec 	bl	13d0c <_dtoa_r>
   12d34:	0007      	movs	r7, r0
   12d36:	2e47      	cmp	r6, #71	; 0x47
   12d38:	d102      	bne.n	12d40 <__cvt+0x5c>
   12d3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12d3c:	07db      	lsls	r3, r3, #31
   12d3e:	d524      	bpl.n	12d8a <__cvt+0xa6>
   12d40:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12d42:	18fb      	adds	r3, r7, r3
   12d44:	9307      	str	r3, [sp, #28]
   12d46:	2e46      	cmp	r6, #70	; 0x46
   12d48:	d114      	bne.n	12d74 <__cvt+0x90>
   12d4a:	783b      	ldrb	r3, [r7, #0]
   12d4c:	2b30      	cmp	r3, #48	; 0x30
   12d4e:	d10c      	bne.n	12d6a <__cvt+0x86>
   12d50:	2200      	movs	r2, #0
   12d52:	2300      	movs	r3, #0
   12d54:	0020      	movs	r0, r4
   12d56:	0029      	movs	r1, r5
   12d58:	f002 fee2 	bl	15b20 <__aeabi_dcmpeq>
   12d5c:	2800      	cmp	r0, #0
   12d5e:	d104      	bne.n	12d6a <__cvt+0x86>
   12d60:	2301      	movs	r3, #1
   12d62:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12d64:	1a9b      	subs	r3, r3, r2
   12d66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12d68:	6013      	str	r3, [r2, #0]
   12d6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12d6c:	9a07      	ldr	r2, [sp, #28]
   12d6e:	681b      	ldr	r3, [r3, #0]
   12d70:	18d3      	adds	r3, r2, r3
   12d72:	9307      	str	r3, [sp, #28]
   12d74:	2200      	movs	r2, #0
   12d76:	2300      	movs	r3, #0
   12d78:	0020      	movs	r0, r4
   12d7a:	0029      	movs	r1, r5
   12d7c:	f002 fed0 	bl	15b20 <__aeabi_dcmpeq>
   12d80:	2230      	movs	r2, #48	; 0x30
   12d82:	2800      	cmp	r0, #0
   12d84:	d00d      	beq.n	12da2 <__cvt+0xbe>
   12d86:	9b07      	ldr	r3, [sp, #28]
   12d88:	9309      	str	r3, [sp, #36]	; 0x24
   12d8a:	0038      	movs	r0, r7
   12d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12d8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   12d90:	1bdb      	subs	r3, r3, r7
   12d92:	6013      	str	r3, [r2, #0]
   12d94:	b00b      	add	sp, #44	; 0x2c
   12d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d98:	2300      	movs	r3, #0
   12d9a:	e7af      	b.n	12cfc <__cvt+0x18>
   12d9c:	1c59      	adds	r1, r3, #1
   12d9e:	9109      	str	r1, [sp, #36]	; 0x24
   12da0:	701a      	strb	r2, [r3, #0]
   12da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12da4:	9907      	ldr	r1, [sp, #28]
   12da6:	4299      	cmp	r1, r3
   12da8:	d8f8      	bhi.n	12d9c <__cvt+0xb8>
   12daa:	e7ee      	b.n	12d8a <__cvt+0xa6>

00012dac <__exponent>:
   12dac:	b5f0      	push	{r4, r5, r6, r7, lr}
   12dae:	232b      	movs	r3, #43	; 0x2b
   12db0:	b085      	sub	sp, #20
   12db2:	0007      	movs	r7, r0
   12db4:	000c      	movs	r4, r1
   12db6:	7002      	strb	r2, [r0, #0]
   12db8:	1c86      	adds	r6, r0, #2
   12dba:	2900      	cmp	r1, #0
   12dbc:	da01      	bge.n	12dc2 <__exponent+0x16>
   12dbe:	232d      	movs	r3, #45	; 0x2d
   12dc0:	424c      	negs	r4, r1
   12dc2:	707b      	strb	r3, [r7, #1]
   12dc4:	2c09      	cmp	r4, #9
   12dc6:	dd23      	ble.n	12e10 <__exponent+0x64>
   12dc8:	ab02      	add	r3, sp, #8
   12dca:	1ddd      	adds	r5, r3, #7
   12dcc:	1e6b      	subs	r3, r5, #1
   12dce:	0020      	movs	r0, r4
   12dd0:	210a      	movs	r1, #10
   12dd2:	9301      	str	r3, [sp, #4]
   12dd4:	f002 fe8e 	bl	15af4 <__aeabi_idivmod>
   12dd8:	1e6b      	subs	r3, r5, #1
   12dda:	3130      	adds	r1, #48	; 0x30
   12ddc:	7019      	strb	r1, [r3, #0]
   12dde:	0020      	movs	r0, r4
   12de0:	210a      	movs	r1, #10
   12de2:	f002 fda1 	bl	15928 <__divsi3>
   12de6:	0004      	movs	r4, r0
   12de8:	2809      	cmp	r0, #9
   12dea:	dc0a      	bgt.n	12e02 <__exponent+0x56>
   12dec:	3d02      	subs	r5, #2
   12dee:	3430      	adds	r4, #48	; 0x30
   12df0:	702c      	strb	r4, [r5, #0]
   12df2:	ab02      	add	r3, sp, #8
   12df4:	3307      	adds	r3, #7
   12df6:	0030      	movs	r0, r6
   12df8:	42ab      	cmp	r3, r5
   12dfa:	d804      	bhi.n	12e06 <__exponent+0x5a>
   12dfc:	1bc0      	subs	r0, r0, r7
   12dfe:	b005      	add	sp, #20
   12e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e02:	9d01      	ldr	r5, [sp, #4]
   12e04:	e7e2      	b.n	12dcc <__exponent+0x20>
   12e06:	782b      	ldrb	r3, [r5, #0]
   12e08:	3501      	adds	r5, #1
   12e0a:	7033      	strb	r3, [r6, #0]
   12e0c:	3601      	adds	r6, #1
   12e0e:	e7f0      	b.n	12df2 <__exponent+0x46>
   12e10:	2330      	movs	r3, #48	; 0x30
   12e12:	18e4      	adds	r4, r4, r3
   12e14:	7033      	strb	r3, [r6, #0]
   12e16:	1cb0      	adds	r0, r6, #2
   12e18:	7074      	strb	r4, [r6, #1]
   12e1a:	e7ef      	b.n	12dfc <__exponent+0x50>

00012e1c <_printf_float>:
   12e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e1e:	b095      	sub	sp, #84	; 0x54
   12e20:	000c      	movs	r4, r1
   12e22:	920a      	str	r2, [sp, #40]	; 0x28
   12e24:	930b      	str	r3, [sp, #44]	; 0x2c
   12e26:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   12e28:	9009      	str	r0, [sp, #36]	; 0x24
   12e2a:	f001 fef5 	bl	14c18 <_localeconv_r>
   12e2e:	6803      	ldr	r3, [r0, #0]
   12e30:	0018      	movs	r0, r3
   12e32:	930d      	str	r3, [sp, #52]	; 0x34
   12e34:	f000 fcf1 	bl	1381a <strlen>
   12e38:	2300      	movs	r3, #0
   12e3a:	9312      	str	r3, [sp, #72]	; 0x48
   12e3c:	6823      	ldr	r3, [r4, #0]
   12e3e:	900e      	str	r0, [sp, #56]	; 0x38
   12e40:	930c      	str	r3, [sp, #48]	; 0x30
   12e42:	990c      	ldr	r1, [sp, #48]	; 0x30
   12e44:	7e27      	ldrb	r7, [r4, #24]
   12e46:	682b      	ldr	r3, [r5, #0]
   12e48:	2207      	movs	r2, #7
   12e4a:	05c9      	lsls	r1, r1, #23
   12e4c:	d547      	bpl.n	12ede <_printf_float+0xc2>
   12e4e:	189b      	adds	r3, r3, r2
   12e50:	4393      	bics	r3, r2
   12e52:	001a      	movs	r2, r3
   12e54:	3208      	adds	r2, #8
   12e56:	602a      	str	r2, [r5, #0]
   12e58:	681a      	ldr	r2, [r3, #0]
   12e5a:	685b      	ldr	r3, [r3, #4]
   12e5c:	64a2      	str	r2, [r4, #72]	; 0x48
   12e5e:	64e3      	str	r3, [r4, #76]	; 0x4c
   12e60:	2201      	movs	r2, #1
   12e62:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
   12e64:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   12e66:	006b      	lsls	r3, r5, #1
   12e68:	085b      	lsrs	r3, r3, #1
   12e6a:	930f      	str	r3, [sp, #60]	; 0x3c
   12e6c:	4252      	negs	r2, r2
   12e6e:	4ba7      	ldr	r3, [pc, #668]	; (1310c <_printf_float+0x2f0>)
   12e70:	0030      	movs	r0, r6
   12e72:	990f      	ldr	r1, [sp, #60]	; 0x3c
   12e74:	f005 fa2a 	bl	182cc <__aeabi_dcmpun>
   12e78:	2800      	cmp	r0, #0
   12e7a:	d000      	beq.n	12e7e <_printf_float+0x62>
   12e7c:	e206      	b.n	1328c <_printf_float+0x470>
   12e7e:	2201      	movs	r2, #1
   12e80:	4ba2      	ldr	r3, [pc, #648]	; (1310c <_printf_float+0x2f0>)
   12e82:	4252      	negs	r2, r2
   12e84:	0030      	movs	r0, r6
   12e86:	990f      	ldr	r1, [sp, #60]	; 0x3c
   12e88:	f002 fe5a 	bl	15b40 <__aeabi_dcmple>
   12e8c:	2800      	cmp	r0, #0
   12e8e:	d000      	beq.n	12e92 <_printf_float+0x76>
   12e90:	e1fc      	b.n	1328c <_printf_float+0x470>
   12e92:	2200      	movs	r2, #0
   12e94:	2300      	movs	r3, #0
   12e96:	0030      	movs	r0, r6
   12e98:	0029      	movs	r1, r5
   12e9a:	f002 fe47 	bl	15b2c <__aeabi_dcmplt>
   12e9e:	2800      	cmp	r0, #0
   12ea0:	d003      	beq.n	12eaa <_printf_float+0x8e>
   12ea2:	0023      	movs	r3, r4
   12ea4:	222d      	movs	r2, #45	; 0x2d
   12ea6:	3343      	adds	r3, #67	; 0x43
   12ea8:	701a      	strb	r2, [r3, #0]
   12eaa:	4d99      	ldr	r5, [pc, #612]	; (13110 <_printf_float+0x2f4>)
   12eac:	2f47      	cmp	r7, #71	; 0x47
   12eae:	d800      	bhi.n	12eb2 <_printf_float+0x96>
   12eb0:	4d98      	ldr	r5, [pc, #608]	; (13114 <_printf_float+0x2f8>)
   12eb2:	2303      	movs	r3, #3
   12eb4:	2600      	movs	r6, #0
   12eb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12eb8:	6123      	str	r3, [r4, #16]
   12eba:	3301      	adds	r3, #1
   12ebc:	439a      	bics	r2, r3
   12ebe:	6022      	str	r2, [r4, #0]
   12ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12ec2:	aa13      	add	r2, sp, #76	; 0x4c
   12ec4:	9300      	str	r3, [sp, #0]
   12ec6:	0021      	movs	r1, r4
   12ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12eca:	9809      	ldr	r0, [sp, #36]	; 0x24
   12ecc:	f000 f9f2 	bl	132b4 <_printf_common>
   12ed0:	1c43      	adds	r3, r0, #1
   12ed2:	d000      	beq.n	12ed6 <_printf_float+0xba>
   12ed4:	e09c      	b.n	13010 <_printf_float+0x1f4>
   12ed6:	2001      	movs	r0, #1
   12ed8:	4240      	negs	r0, r0
   12eda:	b015      	add	sp, #84	; 0x54
   12edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ede:	3307      	adds	r3, #7
   12ee0:	e7b6      	b.n	12e50 <_printf_float+0x34>
   12ee2:	2380      	movs	r3, #128	; 0x80
   12ee4:	6862      	ldr	r2, [r4, #4]
   12ee6:	00db      	lsls	r3, r3, #3
   12ee8:	1c51      	adds	r1, r2, #1
   12eea:	d145      	bne.n	12f78 <_printf_float+0x15c>
   12eec:	3207      	adds	r2, #7
   12eee:	6062      	str	r2, [r4, #4]
   12ef0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12ef2:	2100      	movs	r1, #0
   12ef4:	4313      	orrs	r3, r2
   12ef6:	aa12      	add	r2, sp, #72	; 0x48
   12ef8:	9205      	str	r2, [sp, #20]
   12efa:	aa11      	add	r2, sp, #68	; 0x44
   12efc:	9203      	str	r2, [sp, #12]
   12efe:	2223      	movs	r2, #35	; 0x23
   12f00:	6023      	str	r3, [r4, #0]
   12f02:	9106      	str	r1, [sp, #24]
   12f04:	9301      	str	r3, [sp, #4]
   12f06:	a908      	add	r1, sp, #32
   12f08:	6863      	ldr	r3, [r4, #4]
   12f0a:	1852      	adds	r2, r2, r1
   12f0c:	9202      	str	r2, [sp, #8]
   12f0e:	9300      	str	r3, [sp, #0]
   12f10:	0032      	movs	r2, r6
   12f12:	002b      	movs	r3, r5
   12f14:	9704      	str	r7, [sp, #16]
   12f16:	9809      	ldr	r0, [sp, #36]	; 0x24
   12f18:	f7ff fee4 	bl	12ce4 <__cvt>
   12f1c:	2320      	movs	r3, #32
   12f1e:	003a      	movs	r2, r7
   12f20:	0005      	movs	r5, r0
   12f22:	439a      	bics	r2, r3
   12f24:	2a47      	cmp	r2, #71	; 0x47
   12f26:	d107      	bne.n	12f38 <_printf_float+0x11c>
   12f28:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12f2a:	1cda      	adds	r2, r3, #3
   12f2c:	db02      	blt.n	12f34 <_printf_float+0x118>
   12f2e:	6862      	ldr	r2, [r4, #4]
   12f30:	4293      	cmp	r3, r2
   12f32:	dd5b      	ble.n	12fec <_printf_float+0x1d0>
   12f34:	3f02      	subs	r7, #2
   12f36:	b2ff      	uxtb	r7, r7
   12f38:	9911      	ldr	r1, [sp, #68]	; 0x44
   12f3a:	2f65      	cmp	r7, #101	; 0x65
   12f3c:	d83b      	bhi.n	12fb6 <_printf_float+0x19a>
   12f3e:	0020      	movs	r0, r4
   12f40:	3901      	subs	r1, #1
   12f42:	003a      	movs	r2, r7
   12f44:	3050      	adds	r0, #80	; 0x50
   12f46:	9111      	str	r1, [sp, #68]	; 0x44
   12f48:	f7ff ff30 	bl	12dac <__exponent>
   12f4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12f4e:	0006      	movs	r6, r0
   12f50:	1883      	adds	r3, r0, r2
   12f52:	6123      	str	r3, [r4, #16]
   12f54:	2a01      	cmp	r2, #1
   12f56:	dc02      	bgt.n	12f5e <_printf_float+0x142>
   12f58:	6822      	ldr	r2, [r4, #0]
   12f5a:	07d2      	lsls	r2, r2, #31
   12f5c:	d501      	bpl.n	12f62 <_printf_float+0x146>
   12f5e:	3301      	adds	r3, #1
   12f60:	6123      	str	r3, [r4, #16]
   12f62:	2323      	movs	r3, #35	; 0x23
   12f64:	aa08      	add	r2, sp, #32
   12f66:	189b      	adds	r3, r3, r2
   12f68:	781b      	ldrb	r3, [r3, #0]
   12f6a:	2b00      	cmp	r3, #0
   12f6c:	d0a8      	beq.n	12ec0 <_printf_float+0xa4>
   12f6e:	0023      	movs	r3, r4
   12f70:	222d      	movs	r2, #45	; 0x2d
   12f72:	3343      	adds	r3, #67	; 0x43
   12f74:	701a      	strb	r2, [r3, #0]
   12f76:	e7a3      	b.n	12ec0 <_printf_float+0xa4>
   12f78:	2f67      	cmp	r7, #103	; 0x67
   12f7a:	d001      	beq.n	12f80 <_printf_float+0x164>
   12f7c:	2f47      	cmp	r7, #71	; 0x47
   12f7e:	d1b7      	bne.n	12ef0 <_printf_float+0xd4>
   12f80:	2a00      	cmp	r2, #0
   12f82:	d016      	beq.n	12fb2 <_printf_float+0x196>
   12f84:	990c      	ldr	r1, [sp, #48]	; 0x30
   12f86:	a808      	add	r0, sp, #32
   12f88:	430b      	orrs	r3, r1
   12f8a:	2100      	movs	r1, #0
   12f8c:	9106      	str	r1, [sp, #24]
   12f8e:	a912      	add	r1, sp, #72	; 0x48
   12f90:	9105      	str	r1, [sp, #20]
   12f92:	a911      	add	r1, sp, #68	; 0x44
   12f94:	9103      	str	r1, [sp, #12]
   12f96:	2123      	movs	r1, #35	; 0x23
   12f98:	1809      	adds	r1, r1, r0
   12f9a:	6023      	str	r3, [r4, #0]
   12f9c:	9301      	str	r3, [sp, #4]
   12f9e:	9200      	str	r2, [sp, #0]
   12fa0:	002b      	movs	r3, r5
   12fa2:	9704      	str	r7, [sp, #16]
   12fa4:	9102      	str	r1, [sp, #8]
   12fa6:	0032      	movs	r2, r6
   12fa8:	9809      	ldr	r0, [sp, #36]	; 0x24
   12faa:	f7ff fe9b 	bl	12ce4 <__cvt>
   12fae:	0005      	movs	r5, r0
   12fb0:	e7ba      	b.n	12f28 <_printf_float+0x10c>
   12fb2:	2201      	movs	r2, #1
   12fb4:	e79b      	b.n	12eee <_printf_float+0xd2>
   12fb6:	2f66      	cmp	r7, #102	; 0x66
   12fb8:	d119      	bne.n	12fee <_printf_float+0x1d2>
   12fba:	6863      	ldr	r3, [r4, #4]
   12fbc:	2900      	cmp	r1, #0
   12fbe:	dd0c      	ble.n	12fda <_printf_float+0x1be>
   12fc0:	6121      	str	r1, [r4, #16]
   12fc2:	2b00      	cmp	r3, #0
   12fc4:	d102      	bne.n	12fcc <_printf_float+0x1b0>
   12fc6:	6822      	ldr	r2, [r4, #0]
   12fc8:	07d2      	lsls	r2, r2, #31
   12fca:	d502      	bpl.n	12fd2 <_printf_float+0x1b6>
   12fcc:	3301      	adds	r3, #1
   12fce:	185b      	adds	r3, r3, r1
   12fd0:	6123      	str	r3, [r4, #16]
   12fd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12fd4:	2600      	movs	r6, #0
   12fd6:	65a3      	str	r3, [r4, #88]	; 0x58
   12fd8:	e7c3      	b.n	12f62 <_printf_float+0x146>
   12fda:	2b00      	cmp	r3, #0
   12fdc:	d103      	bne.n	12fe6 <_printf_float+0x1ca>
   12fde:	2201      	movs	r2, #1
   12fe0:	6821      	ldr	r1, [r4, #0]
   12fe2:	4211      	tst	r1, r2
   12fe4:	d000      	beq.n	12fe8 <_printf_float+0x1cc>
   12fe6:	1c9a      	adds	r2, r3, #2
   12fe8:	6122      	str	r2, [r4, #16]
   12fea:	e7f2      	b.n	12fd2 <_printf_float+0x1b6>
   12fec:	2767      	movs	r7, #103	; 0x67
   12fee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12ff0:	9812      	ldr	r0, [sp, #72]	; 0x48
   12ff2:	4283      	cmp	r3, r0
   12ff4:	db05      	blt.n	13002 <_printf_float+0x1e6>
   12ff6:	6822      	ldr	r2, [r4, #0]
   12ff8:	6123      	str	r3, [r4, #16]
   12ffa:	07d2      	lsls	r2, r2, #31
   12ffc:	d5e9      	bpl.n	12fd2 <_printf_float+0x1b6>
   12ffe:	3301      	adds	r3, #1
   13000:	e7e6      	b.n	12fd0 <_printf_float+0x1b4>
   13002:	2201      	movs	r2, #1
   13004:	2b00      	cmp	r3, #0
   13006:	dc01      	bgt.n	1300c <_printf_float+0x1f0>
   13008:	1892      	adds	r2, r2, r2
   1300a:	1ad2      	subs	r2, r2, r3
   1300c:	1812      	adds	r2, r2, r0
   1300e:	e7eb      	b.n	12fe8 <_printf_float+0x1cc>
   13010:	6822      	ldr	r2, [r4, #0]
   13012:	0553      	lsls	r3, r2, #21
   13014:	d408      	bmi.n	13028 <_printf_float+0x20c>
   13016:	6923      	ldr	r3, [r4, #16]
   13018:	002a      	movs	r2, r5
   1301a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1301c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1301e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   13020:	47a8      	blx	r5
   13022:	1c43      	adds	r3, r0, #1
   13024:	d129      	bne.n	1307a <_printf_float+0x25e>
   13026:	e756      	b.n	12ed6 <_printf_float+0xba>
   13028:	2f65      	cmp	r7, #101	; 0x65
   1302a:	d800      	bhi.n	1302e <_printf_float+0x212>
   1302c:	e0dc      	b.n	131e8 <_printf_float+0x3cc>
   1302e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   13030:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   13032:	2200      	movs	r2, #0
   13034:	2300      	movs	r3, #0
   13036:	f002 fd73 	bl	15b20 <__aeabi_dcmpeq>
   1303a:	2800      	cmp	r0, #0
   1303c:	d035      	beq.n	130aa <_printf_float+0x28e>
   1303e:	2301      	movs	r3, #1
   13040:	4a35      	ldr	r2, [pc, #212]	; (13118 <_printf_float+0x2fc>)
   13042:	990a      	ldr	r1, [sp, #40]	; 0x28
   13044:	9809      	ldr	r0, [sp, #36]	; 0x24
   13046:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   13048:	47a8      	blx	r5
   1304a:	1c43      	adds	r3, r0, #1
   1304c:	d100      	bne.n	13050 <_printf_float+0x234>
   1304e:	e742      	b.n	12ed6 <_printf_float+0xba>
   13050:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13052:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13054:	4293      	cmp	r3, r2
   13056:	db02      	blt.n	1305e <_printf_float+0x242>
   13058:	6823      	ldr	r3, [r4, #0]
   1305a:	07db      	lsls	r3, r3, #31
   1305c:	d50d      	bpl.n	1307a <_printf_float+0x25e>
   1305e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   13060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13062:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13064:	990a      	ldr	r1, [sp, #40]	; 0x28
   13066:	9809      	ldr	r0, [sp, #36]	; 0x24
   13068:	47a8      	blx	r5
   1306a:	2500      	movs	r5, #0
   1306c:	1c43      	adds	r3, r0, #1
   1306e:	d100      	bne.n	13072 <_printf_float+0x256>
   13070:	e731      	b.n	12ed6 <_printf_float+0xba>
   13072:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13074:	3b01      	subs	r3, #1
   13076:	429d      	cmp	r5, r3
   13078:	db0b      	blt.n	13092 <_printf_float+0x276>
   1307a:	6823      	ldr	r3, [r4, #0]
   1307c:	2500      	movs	r5, #0
   1307e:	079b      	lsls	r3, r3, #30
   13080:	d500      	bpl.n	13084 <_printf_float+0x268>
   13082:	e0fd      	b.n	13280 <_printf_float+0x464>
   13084:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13086:	68e0      	ldr	r0, [r4, #12]
   13088:	4298      	cmp	r0, r3
   1308a:	db00      	blt.n	1308e <_printf_float+0x272>
   1308c:	e725      	b.n	12eda <_printf_float+0xbe>
   1308e:	0018      	movs	r0, r3
   13090:	e723      	b.n	12eda <_printf_float+0xbe>
   13092:	0022      	movs	r2, r4
   13094:	2301      	movs	r3, #1
   13096:	321a      	adds	r2, #26
   13098:	990a      	ldr	r1, [sp, #40]	; 0x28
   1309a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1309c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1309e:	47b0      	blx	r6
   130a0:	1c43      	adds	r3, r0, #1
   130a2:	d100      	bne.n	130a6 <_printf_float+0x28a>
   130a4:	e717      	b.n	12ed6 <_printf_float+0xba>
   130a6:	3501      	adds	r5, #1
   130a8:	e7e3      	b.n	13072 <_printf_float+0x256>
   130aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   130ac:	2b00      	cmp	r3, #0
   130ae:	dc35      	bgt.n	1311c <_printf_float+0x300>
   130b0:	2301      	movs	r3, #1
   130b2:	4a19      	ldr	r2, [pc, #100]	; (13118 <_printf_float+0x2fc>)
   130b4:	990a      	ldr	r1, [sp, #40]	; 0x28
   130b6:	9809      	ldr	r0, [sp, #36]	; 0x24
   130b8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   130ba:	47b0      	blx	r6
   130bc:	1c43      	adds	r3, r0, #1
   130be:	d100      	bne.n	130c2 <_printf_float+0x2a6>
   130c0:	e709      	b.n	12ed6 <_printf_float+0xba>
   130c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   130c4:	2b00      	cmp	r3, #0
   130c6:	d105      	bne.n	130d4 <_printf_float+0x2b8>
   130c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   130ca:	2b00      	cmp	r3, #0
   130cc:	d102      	bne.n	130d4 <_printf_float+0x2b8>
   130ce:	6823      	ldr	r3, [r4, #0]
   130d0:	07db      	lsls	r3, r3, #31
   130d2:	d5d2      	bpl.n	1307a <_printf_float+0x25e>
   130d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   130d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   130d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   130da:	990a      	ldr	r1, [sp, #40]	; 0x28
   130dc:	9809      	ldr	r0, [sp, #36]	; 0x24
   130de:	47b0      	blx	r6
   130e0:	2600      	movs	r6, #0
   130e2:	1c43      	adds	r3, r0, #1
   130e4:	d100      	bne.n	130e8 <_printf_float+0x2cc>
   130e6:	e6f6      	b.n	12ed6 <_printf_float+0xba>
   130e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   130ea:	425b      	negs	r3, r3
   130ec:	429e      	cmp	r6, r3
   130ee:	db01      	blt.n	130f4 <_printf_float+0x2d8>
   130f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   130f2:	e791      	b.n	13018 <_printf_float+0x1fc>
   130f4:	0022      	movs	r2, r4
   130f6:	2301      	movs	r3, #1
   130f8:	321a      	adds	r2, #26
   130fa:	990a      	ldr	r1, [sp, #40]	; 0x28
   130fc:	9809      	ldr	r0, [sp, #36]	; 0x24
   130fe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   13100:	47b8      	blx	r7
   13102:	1c43      	adds	r3, r0, #1
   13104:	d100      	bne.n	13108 <_printf_float+0x2ec>
   13106:	e6e6      	b.n	12ed6 <_printf_float+0xba>
   13108:	3601      	adds	r6, #1
   1310a:	e7ed      	b.n	130e8 <_printf_float+0x2cc>
   1310c:	7fefffff 	.word	0x7fefffff
   13110:	0001bc88 	.word	0x0001bc88
   13114:	0001bc84 	.word	0x0001bc84
   13118:	0001bc94 	.word	0x0001bc94
   1311c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1311e:	9e12      	ldr	r6, [sp, #72]	; 0x48
   13120:	429e      	cmp	r6, r3
   13122:	dd00      	ble.n	13126 <_printf_float+0x30a>
   13124:	001e      	movs	r6, r3
   13126:	2e00      	cmp	r6, #0
   13128:	dc35      	bgt.n	13196 <_printf_float+0x37a>
   1312a:	2300      	movs	r3, #0
   1312c:	930c      	str	r3, [sp, #48]	; 0x30
   1312e:	43f3      	mvns	r3, r6
   13130:	17db      	asrs	r3, r3, #31
   13132:	930f      	str	r3, [sp, #60]	; 0x3c
   13134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13136:	6da7      	ldr	r7, [r4, #88]	; 0x58
   13138:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1313a:	4033      	ands	r3, r6
   1313c:	1afb      	subs	r3, r7, r3
   1313e:	429a      	cmp	r2, r3
   13140:	db32      	blt.n	131a8 <_printf_float+0x38c>
   13142:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13144:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13146:	4293      	cmp	r3, r2
   13148:	db3c      	blt.n	131c4 <_printf_float+0x3a8>
   1314a:	6823      	ldr	r3, [r4, #0]
   1314c:	07db      	lsls	r3, r3, #31
   1314e:	d439      	bmi.n	131c4 <_printf_float+0x3a8>
   13150:	9e12      	ldr	r6, [sp, #72]	; 0x48
   13152:	9a11      	ldr	r2, [sp, #68]	; 0x44
   13154:	1bf3      	subs	r3, r6, r7
   13156:	1ab6      	subs	r6, r6, r2
   13158:	429e      	cmp	r6, r3
   1315a:	dd00      	ble.n	1315e <_printf_float+0x342>
   1315c:	001e      	movs	r6, r3
   1315e:	2e00      	cmp	r6, #0
   13160:	dc39      	bgt.n	131d6 <_printf_float+0x3ba>
   13162:	43f7      	mvns	r7, r6
   13164:	2500      	movs	r5, #0
   13166:	17fb      	asrs	r3, r7, #31
   13168:	930c      	str	r3, [sp, #48]	; 0x30
   1316a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1316c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1316e:	990c      	ldr	r1, [sp, #48]	; 0x30
   13170:	1a9b      	subs	r3, r3, r2
   13172:	0032      	movs	r2, r6
   13174:	400a      	ands	r2, r1
   13176:	1a9b      	subs	r3, r3, r2
   13178:	429d      	cmp	r5, r3
   1317a:	db00      	blt.n	1317e <_printf_float+0x362>
   1317c:	e77d      	b.n	1307a <_printf_float+0x25e>
   1317e:	0022      	movs	r2, r4
   13180:	2301      	movs	r3, #1
   13182:	321a      	adds	r2, #26
   13184:	990a      	ldr	r1, [sp, #40]	; 0x28
   13186:	9809      	ldr	r0, [sp, #36]	; 0x24
   13188:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1318a:	47b8      	blx	r7
   1318c:	1c43      	adds	r3, r0, #1
   1318e:	d100      	bne.n	13192 <_printf_float+0x376>
   13190:	e6a1      	b.n	12ed6 <_printf_float+0xba>
   13192:	3501      	adds	r5, #1
   13194:	e7e9      	b.n	1316a <_printf_float+0x34e>
   13196:	0033      	movs	r3, r6
   13198:	002a      	movs	r2, r5
   1319a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1319c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1319e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   131a0:	47b8      	blx	r7
   131a2:	1c43      	adds	r3, r0, #1
   131a4:	d1c1      	bne.n	1312a <_printf_float+0x30e>
   131a6:	e696      	b.n	12ed6 <_printf_float+0xba>
   131a8:	0022      	movs	r2, r4
   131aa:	2301      	movs	r3, #1
   131ac:	321a      	adds	r2, #26
   131ae:	990a      	ldr	r1, [sp, #40]	; 0x28
   131b0:	9809      	ldr	r0, [sp, #36]	; 0x24
   131b2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   131b4:	47b8      	blx	r7
   131b6:	1c43      	adds	r3, r0, #1
   131b8:	d100      	bne.n	131bc <_printf_float+0x3a0>
   131ba:	e68c      	b.n	12ed6 <_printf_float+0xba>
   131bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   131be:	3301      	adds	r3, #1
   131c0:	930c      	str	r3, [sp, #48]	; 0x30
   131c2:	e7b7      	b.n	13134 <_printf_float+0x318>
   131c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   131c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   131c8:	990a      	ldr	r1, [sp, #40]	; 0x28
   131ca:	9809      	ldr	r0, [sp, #36]	; 0x24
   131cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   131ce:	47b0      	blx	r6
   131d0:	1c43      	adds	r3, r0, #1
   131d2:	d1bd      	bne.n	13150 <_printf_float+0x334>
   131d4:	e67f      	b.n	12ed6 <_printf_float+0xba>
   131d6:	19ea      	adds	r2, r5, r7
   131d8:	0033      	movs	r3, r6
   131da:	990a      	ldr	r1, [sp, #40]	; 0x28
   131dc:	9809      	ldr	r0, [sp, #36]	; 0x24
   131de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   131e0:	47a8      	blx	r5
   131e2:	1c43      	adds	r3, r0, #1
   131e4:	d1bd      	bne.n	13162 <_printf_float+0x346>
   131e6:	e676      	b.n	12ed6 <_printf_float+0xba>
   131e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   131ea:	2b01      	cmp	r3, #1
   131ec:	dc02      	bgt.n	131f4 <_printf_float+0x3d8>
   131ee:	2301      	movs	r3, #1
   131f0:	421a      	tst	r2, r3
   131f2:	d038      	beq.n	13266 <_printf_float+0x44a>
   131f4:	2301      	movs	r3, #1
   131f6:	002a      	movs	r2, r5
   131f8:	990a      	ldr	r1, [sp, #40]	; 0x28
   131fa:	9809      	ldr	r0, [sp, #36]	; 0x24
   131fc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   131fe:	47b8      	blx	r7
   13200:	1c43      	adds	r3, r0, #1
   13202:	d100      	bne.n	13206 <_printf_float+0x3ea>
   13204:	e667      	b.n	12ed6 <_printf_float+0xba>
   13206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1320a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1320c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1320e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   13210:	47b8      	blx	r7
   13212:	1c43      	adds	r3, r0, #1
   13214:	d100      	bne.n	13218 <_printf_float+0x3fc>
   13216:	e65e      	b.n	12ed6 <_printf_float+0xba>
   13218:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1321a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1321c:	2200      	movs	r2, #0
   1321e:	2300      	movs	r3, #0
   13220:	f002 fc7e 	bl	15b20 <__aeabi_dcmpeq>
   13224:	2800      	cmp	r0, #0
   13226:	d008      	beq.n	1323a <_printf_float+0x41e>
   13228:	2500      	movs	r5, #0
   1322a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1322c:	3b01      	subs	r3, #1
   1322e:	429d      	cmp	r5, r3
   13230:	db0d      	blt.n	1324e <_printf_float+0x432>
   13232:	0022      	movs	r2, r4
   13234:	0033      	movs	r3, r6
   13236:	3250      	adds	r2, #80	; 0x50
   13238:	e6ef      	b.n	1301a <_printf_float+0x1fe>
   1323a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1323c:	1c6a      	adds	r2, r5, #1
   1323e:	3b01      	subs	r3, #1
   13240:	990a      	ldr	r1, [sp, #40]	; 0x28
   13242:	9809      	ldr	r0, [sp, #36]	; 0x24
   13244:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   13246:	47a8      	blx	r5
   13248:	1c43      	adds	r3, r0, #1
   1324a:	d1f2      	bne.n	13232 <_printf_float+0x416>
   1324c:	e643      	b.n	12ed6 <_printf_float+0xba>
   1324e:	0022      	movs	r2, r4
   13250:	2301      	movs	r3, #1
   13252:	321a      	adds	r2, #26
   13254:	990a      	ldr	r1, [sp, #40]	; 0x28
   13256:	9809      	ldr	r0, [sp, #36]	; 0x24
   13258:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1325a:	47b8      	blx	r7
   1325c:	1c43      	adds	r3, r0, #1
   1325e:	d100      	bne.n	13262 <_printf_float+0x446>
   13260:	e639      	b.n	12ed6 <_printf_float+0xba>
   13262:	3501      	adds	r5, #1
   13264:	e7e1      	b.n	1322a <_printf_float+0x40e>
   13266:	002a      	movs	r2, r5
   13268:	e7ea      	b.n	13240 <_printf_float+0x424>
   1326a:	0022      	movs	r2, r4
   1326c:	2301      	movs	r3, #1
   1326e:	3219      	adds	r2, #25
   13270:	990a      	ldr	r1, [sp, #40]	; 0x28
   13272:	9809      	ldr	r0, [sp, #36]	; 0x24
   13274:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   13276:	47b0      	blx	r6
   13278:	1c43      	adds	r3, r0, #1
   1327a:	d100      	bne.n	1327e <_printf_float+0x462>
   1327c:	e62b      	b.n	12ed6 <_printf_float+0xba>
   1327e:	3501      	adds	r5, #1
   13280:	68e3      	ldr	r3, [r4, #12]
   13282:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13284:	1a9b      	subs	r3, r3, r2
   13286:	429d      	cmp	r5, r3
   13288:	dbef      	blt.n	1326a <_printf_float+0x44e>
   1328a:	e6fb      	b.n	13084 <_printf_float+0x268>
   1328c:	0032      	movs	r2, r6
   1328e:	002b      	movs	r3, r5
   13290:	0030      	movs	r0, r6
   13292:	0029      	movs	r1, r5
   13294:	f005 f81a 	bl	182cc <__aeabi_dcmpun>
   13298:	2800      	cmp	r0, #0
   1329a:	d100      	bne.n	1329e <_printf_float+0x482>
   1329c:	e621      	b.n	12ee2 <_printf_float+0xc6>
   1329e:	4d03      	ldr	r5, [pc, #12]	; (132ac <_printf_float+0x490>)
   132a0:	2f47      	cmp	r7, #71	; 0x47
   132a2:	d900      	bls.n	132a6 <_printf_float+0x48a>
   132a4:	e605      	b.n	12eb2 <_printf_float+0x96>
   132a6:	4d02      	ldr	r5, [pc, #8]	; (132b0 <_printf_float+0x494>)
   132a8:	e603      	b.n	12eb2 <_printf_float+0x96>
   132aa:	46c0      	nop			; (mov r8, r8)
   132ac:	0001bc90 	.word	0x0001bc90
   132b0:	0001bc8c 	.word	0x0001bc8c

000132b4 <_printf_common>:
   132b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   132b6:	0015      	movs	r5, r2
   132b8:	9301      	str	r3, [sp, #4]
   132ba:	688a      	ldr	r2, [r1, #8]
   132bc:	690b      	ldr	r3, [r1, #16]
   132be:	9000      	str	r0, [sp, #0]
   132c0:	000c      	movs	r4, r1
   132c2:	4293      	cmp	r3, r2
   132c4:	da00      	bge.n	132c8 <_printf_common+0x14>
   132c6:	0013      	movs	r3, r2
   132c8:	0022      	movs	r2, r4
   132ca:	602b      	str	r3, [r5, #0]
   132cc:	3243      	adds	r2, #67	; 0x43
   132ce:	7812      	ldrb	r2, [r2, #0]
   132d0:	2a00      	cmp	r2, #0
   132d2:	d001      	beq.n	132d8 <_printf_common+0x24>
   132d4:	3301      	adds	r3, #1
   132d6:	602b      	str	r3, [r5, #0]
   132d8:	6823      	ldr	r3, [r4, #0]
   132da:	069b      	lsls	r3, r3, #26
   132dc:	d502      	bpl.n	132e4 <_printf_common+0x30>
   132de:	682b      	ldr	r3, [r5, #0]
   132e0:	3302      	adds	r3, #2
   132e2:	602b      	str	r3, [r5, #0]
   132e4:	2706      	movs	r7, #6
   132e6:	6823      	ldr	r3, [r4, #0]
   132e8:	401f      	ands	r7, r3
   132ea:	d027      	beq.n	1333c <_printf_common+0x88>
   132ec:	0023      	movs	r3, r4
   132ee:	3343      	adds	r3, #67	; 0x43
   132f0:	781b      	ldrb	r3, [r3, #0]
   132f2:	1e5a      	subs	r2, r3, #1
   132f4:	4193      	sbcs	r3, r2
   132f6:	6822      	ldr	r2, [r4, #0]
   132f8:	0692      	lsls	r2, r2, #26
   132fa:	d430      	bmi.n	1335e <_printf_common+0xaa>
   132fc:	0022      	movs	r2, r4
   132fe:	9901      	ldr	r1, [sp, #4]
   13300:	3243      	adds	r2, #67	; 0x43
   13302:	9800      	ldr	r0, [sp, #0]
   13304:	9e08      	ldr	r6, [sp, #32]
   13306:	47b0      	blx	r6
   13308:	1c43      	adds	r3, r0, #1
   1330a:	d025      	beq.n	13358 <_printf_common+0xa4>
   1330c:	2306      	movs	r3, #6
   1330e:	6820      	ldr	r0, [r4, #0]
   13310:	682a      	ldr	r2, [r5, #0]
   13312:	68e1      	ldr	r1, [r4, #12]
   13314:	4003      	ands	r3, r0
   13316:	2500      	movs	r5, #0
   13318:	2b04      	cmp	r3, #4
   1331a:	d103      	bne.n	13324 <_printf_common+0x70>
   1331c:	1a8d      	subs	r5, r1, r2
   1331e:	43eb      	mvns	r3, r5
   13320:	17db      	asrs	r3, r3, #31
   13322:	401d      	ands	r5, r3
   13324:	68a3      	ldr	r3, [r4, #8]
   13326:	6922      	ldr	r2, [r4, #16]
   13328:	4293      	cmp	r3, r2
   1332a:	dd01      	ble.n	13330 <_printf_common+0x7c>
   1332c:	1a9b      	subs	r3, r3, r2
   1332e:	18ed      	adds	r5, r5, r3
   13330:	2700      	movs	r7, #0
   13332:	42bd      	cmp	r5, r7
   13334:	d120      	bne.n	13378 <_printf_common+0xc4>
   13336:	2000      	movs	r0, #0
   13338:	e010      	b.n	1335c <_printf_common+0xa8>
   1333a:	3701      	adds	r7, #1
   1333c:	68e3      	ldr	r3, [r4, #12]
   1333e:	682a      	ldr	r2, [r5, #0]
   13340:	1a9b      	subs	r3, r3, r2
   13342:	429f      	cmp	r7, r3
   13344:	dad2      	bge.n	132ec <_printf_common+0x38>
   13346:	0022      	movs	r2, r4
   13348:	2301      	movs	r3, #1
   1334a:	3219      	adds	r2, #25
   1334c:	9901      	ldr	r1, [sp, #4]
   1334e:	9800      	ldr	r0, [sp, #0]
   13350:	9e08      	ldr	r6, [sp, #32]
   13352:	47b0      	blx	r6
   13354:	1c43      	adds	r3, r0, #1
   13356:	d1f0      	bne.n	1333a <_printf_common+0x86>
   13358:	2001      	movs	r0, #1
   1335a:	4240      	negs	r0, r0
   1335c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1335e:	2030      	movs	r0, #48	; 0x30
   13360:	18e1      	adds	r1, r4, r3
   13362:	3143      	adds	r1, #67	; 0x43
   13364:	7008      	strb	r0, [r1, #0]
   13366:	0021      	movs	r1, r4
   13368:	1c5a      	adds	r2, r3, #1
   1336a:	3145      	adds	r1, #69	; 0x45
   1336c:	7809      	ldrb	r1, [r1, #0]
   1336e:	18a2      	adds	r2, r4, r2
   13370:	3243      	adds	r2, #67	; 0x43
   13372:	3302      	adds	r3, #2
   13374:	7011      	strb	r1, [r2, #0]
   13376:	e7c1      	b.n	132fc <_printf_common+0x48>
   13378:	0022      	movs	r2, r4
   1337a:	2301      	movs	r3, #1
   1337c:	321a      	adds	r2, #26
   1337e:	9901      	ldr	r1, [sp, #4]
   13380:	9800      	ldr	r0, [sp, #0]
   13382:	9e08      	ldr	r6, [sp, #32]
   13384:	47b0      	blx	r6
   13386:	1c43      	adds	r3, r0, #1
   13388:	d0e6      	beq.n	13358 <_printf_common+0xa4>
   1338a:	3701      	adds	r7, #1
   1338c:	e7d1      	b.n	13332 <_printf_common+0x7e>
	...

00013390 <_printf_i>:
   13390:	b5f0      	push	{r4, r5, r6, r7, lr}
   13392:	b08b      	sub	sp, #44	; 0x2c
   13394:	9206      	str	r2, [sp, #24]
   13396:	000a      	movs	r2, r1
   13398:	3243      	adds	r2, #67	; 0x43
   1339a:	9307      	str	r3, [sp, #28]
   1339c:	9005      	str	r0, [sp, #20]
   1339e:	9204      	str	r2, [sp, #16]
   133a0:	7e0a      	ldrb	r2, [r1, #24]
   133a2:	000c      	movs	r4, r1
   133a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   133a6:	2a6e      	cmp	r2, #110	; 0x6e
   133a8:	d100      	bne.n	133ac <_printf_i+0x1c>
   133aa:	e08f      	b.n	134cc <_printf_i+0x13c>
   133ac:	d817      	bhi.n	133de <_printf_i+0x4e>
   133ae:	2a63      	cmp	r2, #99	; 0x63
   133b0:	d02c      	beq.n	1340c <_printf_i+0x7c>
   133b2:	d808      	bhi.n	133c6 <_printf_i+0x36>
   133b4:	2a00      	cmp	r2, #0
   133b6:	d100      	bne.n	133ba <_printf_i+0x2a>
   133b8:	e099      	b.n	134ee <_printf_i+0x15e>
   133ba:	2a58      	cmp	r2, #88	; 0x58
   133bc:	d054      	beq.n	13468 <_printf_i+0xd8>
   133be:	0026      	movs	r6, r4
   133c0:	3642      	adds	r6, #66	; 0x42
   133c2:	7032      	strb	r2, [r6, #0]
   133c4:	e029      	b.n	1341a <_printf_i+0x8a>
   133c6:	2a64      	cmp	r2, #100	; 0x64
   133c8:	d001      	beq.n	133ce <_printf_i+0x3e>
   133ca:	2a69      	cmp	r2, #105	; 0x69
   133cc:	d1f7      	bne.n	133be <_printf_i+0x2e>
   133ce:	6821      	ldr	r1, [r4, #0]
   133d0:	681a      	ldr	r2, [r3, #0]
   133d2:	0608      	lsls	r0, r1, #24
   133d4:	d523      	bpl.n	1341e <_printf_i+0x8e>
   133d6:	1d11      	adds	r1, r2, #4
   133d8:	6019      	str	r1, [r3, #0]
   133da:	6815      	ldr	r5, [r2, #0]
   133dc:	e025      	b.n	1342a <_printf_i+0x9a>
   133de:	2a73      	cmp	r2, #115	; 0x73
   133e0:	d100      	bne.n	133e4 <_printf_i+0x54>
   133e2:	e088      	b.n	134f6 <_printf_i+0x166>
   133e4:	d808      	bhi.n	133f8 <_printf_i+0x68>
   133e6:	2a6f      	cmp	r2, #111	; 0x6f
   133e8:	d029      	beq.n	1343e <_printf_i+0xae>
   133ea:	2a70      	cmp	r2, #112	; 0x70
   133ec:	d1e7      	bne.n	133be <_printf_i+0x2e>
   133ee:	2220      	movs	r2, #32
   133f0:	6809      	ldr	r1, [r1, #0]
   133f2:	430a      	orrs	r2, r1
   133f4:	6022      	str	r2, [r4, #0]
   133f6:	e003      	b.n	13400 <_printf_i+0x70>
   133f8:	2a75      	cmp	r2, #117	; 0x75
   133fa:	d020      	beq.n	1343e <_printf_i+0xae>
   133fc:	2a78      	cmp	r2, #120	; 0x78
   133fe:	d1de      	bne.n	133be <_printf_i+0x2e>
   13400:	0022      	movs	r2, r4
   13402:	2178      	movs	r1, #120	; 0x78
   13404:	3245      	adds	r2, #69	; 0x45
   13406:	7011      	strb	r1, [r2, #0]
   13408:	4a6c      	ldr	r2, [pc, #432]	; (135bc <_printf_i+0x22c>)
   1340a:	e030      	b.n	1346e <_printf_i+0xde>
   1340c:	000e      	movs	r6, r1
   1340e:	681a      	ldr	r2, [r3, #0]
   13410:	3642      	adds	r6, #66	; 0x42
   13412:	1d11      	adds	r1, r2, #4
   13414:	6019      	str	r1, [r3, #0]
   13416:	6813      	ldr	r3, [r2, #0]
   13418:	7033      	strb	r3, [r6, #0]
   1341a:	2301      	movs	r3, #1
   1341c:	e079      	b.n	13512 <_printf_i+0x182>
   1341e:	0649      	lsls	r1, r1, #25
   13420:	d5d9      	bpl.n	133d6 <_printf_i+0x46>
   13422:	1d11      	adds	r1, r2, #4
   13424:	6019      	str	r1, [r3, #0]
   13426:	2300      	movs	r3, #0
   13428:	5ed5      	ldrsh	r5, [r2, r3]
   1342a:	2d00      	cmp	r5, #0
   1342c:	da03      	bge.n	13436 <_printf_i+0xa6>
   1342e:	232d      	movs	r3, #45	; 0x2d
   13430:	9a04      	ldr	r2, [sp, #16]
   13432:	426d      	negs	r5, r5
   13434:	7013      	strb	r3, [r2, #0]
   13436:	4b62      	ldr	r3, [pc, #392]	; (135c0 <_printf_i+0x230>)
   13438:	270a      	movs	r7, #10
   1343a:	9303      	str	r3, [sp, #12]
   1343c:	e02f      	b.n	1349e <_printf_i+0x10e>
   1343e:	6820      	ldr	r0, [r4, #0]
   13440:	6819      	ldr	r1, [r3, #0]
   13442:	0605      	lsls	r5, r0, #24
   13444:	d503      	bpl.n	1344e <_printf_i+0xbe>
   13446:	1d08      	adds	r0, r1, #4
   13448:	6018      	str	r0, [r3, #0]
   1344a:	680d      	ldr	r5, [r1, #0]
   1344c:	e005      	b.n	1345a <_printf_i+0xca>
   1344e:	0640      	lsls	r0, r0, #25
   13450:	d5f9      	bpl.n	13446 <_printf_i+0xb6>
   13452:	680d      	ldr	r5, [r1, #0]
   13454:	1d08      	adds	r0, r1, #4
   13456:	6018      	str	r0, [r3, #0]
   13458:	b2ad      	uxth	r5, r5
   1345a:	4b59      	ldr	r3, [pc, #356]	; (135c0 <_printf_i+0x230>)
   1345c:	2708      	movs	r7, #8
   1345e:	9303      	str	r3, [sp, #12]
   13460:	2a6f      	cmp	r2, #111	; 0x6f
   13462:	d018      	beq.n	13496 <_printf_i+0x106>
   13464:	270a      	movs	r7, #10
   13466:	e016      	b.n	13496 <_printf_i+0x106>
   13468:	3145      	adds	r1, #69	; 0x45
   1346a:	700a      	strb	r2, [r1, #0]
   1346c:	4a54      	ldr	r2, [pc, #336]	; (135c0 <_printf_i+0x230>)
   1346e:	9203      	str	r2, [sp, #12]
   13470:	681a      	ldr	r2, [r3, #0]
   13472:	6821      	ldr	r1, [r4, #0]
   13474:	1d10      	adds	r0, r2, #4
   13476:	6018      	str	r0, [r3, #0]
   13478:	6815      	ldr	r5, [r2, #0]
   1347a:	0608      	lsls	r0, r1, #24
   1347c:	d522      	bpl.n	134c4 <_printf_i+0x134>
   1347e:	07cb      	lsls	r3, r1, #31
   13480:	d502      	bpl.n	13488 <_printf_i+0xf8>
   13482:	2320      	movs	r3, #32
   13484:	4319      	orrs	r1, r3
   13486:	6021      	str	r1, [r4, #0]
   13488:	2710      	movs	r7, #16
   1348a:	2d00      	cmp	r5, #0
   1348c:	d103      	bne.n	13496 <_printf_i+0x106>
   1348e:	2320      	movs	r3, #32
   13490:	6822      	ldr	r2, [r4, #0]
   13492:	439a      	bics	r2, r3
   13494:	6022      	str	r2, [r4, #0]
   13496:	0023      	movs	r3, r4
   13498:	2200      	movs	r2, #0
   1349a:	3343      	adds	r3, #67	; 0x43
   1349c:	701a      	strb	r2, [r3, #0]
   1349e:	6863      	ldr	r3, [r4, #4]
   134a0:	60a3      	str	r3, [r4, #8]
   134a2:	2b00      	cmp	r3, #0
   134a4:	db5c      	blt.n	13560 <_printf_i+0x1d0>
   134a6:	2204      	movs	r2, #4
   134a8:	6821      	ldr	r1, [r4, #0]
   134aa:	4391      	bics	r1, r2
   134ac:	6021      	str	r1, [r4, #0]
   134ae:	2d00      	cmp	r5, #0
   134b0:	d158      	bne.n	13564 <_printf_i+0x1d4>
   134b2:	9e04      	ldr	r6, [sp, #16]
   134b4:	2b00      	cmp	r3, #0
   134b6:	d064      	beq.n	13582 <_printf_i+0x1f2>
   134b8:	0026      	movs	r6, r4
   134ba:	9b03      	ldr	r3, [sp, #12]
   134bc:	3642      	adds	r6, #66	; 0x42
   134be:	781b      	ldrb	r3, [r3, #0]
   134c0:	7033      	strb	r3, [r6, #0]
   134c2:	e05e      	b.n	13582 <_printf_i+0x1f2>
   134c4:	0648      	lsls	r0, r1, #25
   134c6:	d5da      	bpl.n	1347e <_printf_i+0xee>
   134c8:	b2ad      	uxth	r5, r5
   134ca:	e7d8      	b.n	1347e <_printf_i+0xee>
   134cc:	6809      	ldr	r1, [r1, #0]
   134ce:	681a      	ldr	r2, [r3, #0]
   134d0:	0608      	lsls	r0, r1, #24
   134d2:	d505      	bpl.n	134e0 <_printf_i+0x150>
   134d4:	1d11      	adds	r1, r2, #4
   134d6:	6019      	str	r1, [r3, #0]
   134d8:	6813      	ldr	r3, [r2, #0]
   134da:	6962      	ldr	r2, [r4, #20]
   134dc:	601a      	str	r2, [r3, #0]
   134de:	e006      	b.n	134ee <_printf_i+0x15e>
   134e0:	0649      	lsls	r1, r1, #25
   134e2:	d5f7      	bpl.n	134d4 <_printf_i+0x144>
   134e4:	1d11      	adds	r1, r2, #4
   134e6:	6019      	str	r1, [r3, #0]
   134e8:	6813      	ldr	r3, [r2, #0]
   134ea:	8aa2      	ldrh	r2, [r4, #20]
   134ec:	801a      	strh	r2, [r3, #0]
   134ee:	2300      	movs	r3, #0
   134f0:	9e04      	ldr	r6, [sp, #16]
   134f2:	6123      	str	r3, [r4, #16]
   134f4:	e054      	b.n	135a0 <_printf_i+0x210>
   134f6:	681a      	ldr	r2, [r3, #0]
   134f8:	1d11      	adds	r1, r2, #4
   134fa:	6019      	str	r1, [r3, #0]
   134fc:	6816      	ldr	r6, [r2, #0]
   134fe:	2100      	movs	r1, #0
   13500:	6862      	ldr	r2, [r4, #4]
   13502:	0030      	movs	r0, r6
   13504:	f001 fc12 	bl	14d2c <memchr>
   13508:	2800      	cmp	r0, #0
   1350a:	d001      	beq.n	13510 <_printf_i+0x180>
   1350c:	1b80      	subs	r0, r0, r6
   1350e:	6060      	str	r0, [r4, #4]
   13510:	6863      	ldr	r3, [r4, #4]
   13512:	6123      	str	r3, [r4, #16]
   13514:	2300      	movs	r3, #0
   13516:	9a04      	ldr	r2, [sp, #16]
   13518:	7013      	strb	r3, [r2, #0]
   1351a:	e041      	b.n	135a0 <_printf_i+0x210>
   1351c:	6923      	ldr	r3, [r4, #16]
   1351e:	0032      	movs	r2, r6
   13520:	9906      	ldr	r1, [sp, #24]
   13522:	9805      	ldr	r0, [sp, #20]
   13524:	9d07      	ldr	r5, [sp, #28]
   13526:	47a8      	blx	r5
   13528:	1c43      	adds	r3, r0, #1
   1352a:	d043      	beq.n	135b4 <_printf_i+0x224>
   1352c:	6823      	ldr	r3, [r4, #0]
   1352e:	2500      	movs	r5, #0
   13530:	079b      	lsls	r3, r3, #30
   13532:	d40f      	bmi.n	13554 <_printf_i+0x1c4>
   13534:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13536:	68e0      	ldr	r0, [r4, #12]
   13538:	4298      	cmp	r0, r3
   1353a:	da3d      	bge.n	135b8 <_printf_i+0x228>
   1353c:	0018      	movs	r0, r3
   1353e:	e03b      	b.n	135b8 <_printf_i+0x228>
   13540:	0022      	movs	r2, r4
   13542:	2301      	movs	r3, #1
   13544:	3219      	adds	r2, #25
   13546:	9906      	ldr	r1, [sp, #24]
   13548:	9805      	ldr	r0, [sp, #20]
   1354a:	9e07      	ldr	r6, [sp, #28]
   1354c:	47b0      	blx	r6
   1354e:	1c43      	adds	r3, r0, #1
   13550:	d030      	beq.n	135b4 <_printf_i+0x224>
   13552:	3501      	adds	r5, #1
   13554:	68e3      	ldr	r3, [r4, #12]
   13556:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13558:	1a9b      	subs	r3, r3, r2
   1355a:	429d      	cmp	r5, r3
   1355c:	dbf0      	blt.n	13540 <_printf_i+0x1b0>
   1355e:	e7e9      	b.n	13534 <_printf_i+0x1a4>
   13560:	2d00      	cmp	r5, #0
   13562:	d0a9      	beq.n	134b8 <_printf_i+0x128>
   13564:	9e04      	ldr	r6, [sp, #16]
   13566:	0028      	movs	r0, r5
   13568:	0039      	movs	r1, r7
   1356a:	f002 f9d9 	bl	15920 <__aeabi_uidivmod>
   1356e:	9b03      	ldr	r3, [sp, #12]
   13570:	3e01      	subs	r6, #1
   13572:	5c5b      	ldrb	r3, [r3, r1]
   13574:	0028      	movs	r0, r5
   13576:	7033      	strb	r3, [r6, #0]
   13578:	0039      	movs	r1, r7
   1357a:	f002 f94b 	bl	15814 <__udivsi3>
   1357e:	1e05      	subs	r5, r0, #0
   13580:	d1f1      	bne.n	13566 <_printf_i+0x1d6>
   13582:	2f08      	cmp	r7, #8
   13584:	d109      	bne.n	1359a <_printf_i+0x20a>
   13586:	6823      	ldr	r3, [r4, #0]
   13588:	07db      	lsls	r3, r3, #31
   1358a:	d506      	bpl.n	1359a <_printf_i+0x20a>
   1358c:	6863      	ldr	r3, [r4, #4]
   1358e:	6922      	ldr	r2, [r4, #16]
   13590:	4293      	cmp	r3, r2
   13592:	dc02      	bgt.n	1359a <_printf_i+0x20a>
   13594:	2330      	movs	r3, #48	; 0x30
   13596:	3e01      	subs	r6, #1
   13598:	7033      	strb	r3, [r6, #0]
   1359a:	9b04      	ldr	r3, [sp, #16]
   1359c:	1b9b      	subs	r3, r3, r6
   1359e:	6123      	str	r3, [r4, #16]
   135a0:	9b07      	ldr	r3, [sp, #28]
   135a2:	aa09      	add	r2, sp, #36	; 0x24
   135a4:	9300      	str	r3, [sp, #0]
   135a6:	0021      	movs	r1, r4
   135a8:	9b06      	ldr	r3, [sp, #24]
   135aa:	9805      	ldr	r0, [sp, #20]
   135ac:	f7ff fe82 	bl	132b4 <_printf_common>
   135b0:	1c43      	adds	r3, r0, #1
   135b2:	d1b3      	bne.n	1351c <_printf_i+0x18c>
   135b4:	2001      	movs	r0, #1
   135b6:	4240      	negs	r0, r0
   135b8:	b00b      	add	sp, #44	; 0x2c
   135ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   135bc:	0001bca7 	.word	0x0001bca7
   135c0:	0001bc96 	.word	0x0001bc96

000135c4 <_puts_r>:
   135c4:	b570      	push	{r4, r5, r6, lr}
   135c6:	0005      	movs	r5, r0
   135c8:	000e      	movs	r6, r1
   135ca:	2800      	cmp	r0, #0
   135cc:	d004      	beq.n	135d8 <_puts_r+0x14>
   135ce:	6983      	ldr	r3, [r0, #24]
   135d0:	2b00      	cmp	r3, #0
   135d2:	d101      	bne.n	135d8 <_puts_r+0x14>
   135d4:	f001 fa7a 	bl	14acc <__sinit>
   135d8:	69ab      	ldr	r3, [r5, #24]
   135da:	68ac      	ldr	r4, [r5, #8]
   135dc:	2b00      	cmp	r3, #0
   135de:	d102      	bne.n	135e6 <_puts_r+0x22>
   135e0:	0028      	movs	r0, r5
   135e2:	f001 fa73 	bl	14acc <__sinit>
   135e6:	4b24      	ldr	r3, [pc, #144]	; (13678 <_puts_r+0xb4>)
   135e8:	429c      	cmp	r4, r3
   135ea:	d10f      	bne.n	1360c <_puts_r+0x48>
   135ec:	686c      	ldr	r4, [r5, #4]
   135ee:	89a3      	ldrh	r3, [r4, #12]
   135f0:	071b      	lsls	r3, r3, #28
   135f2:	d502      	bpl.n	135fa <_puts_r+0x36>
   135f4:	6923      	ldr	r3, [r4, #16]
   135f6:	2b00      	cmp	r3, #0
   135f8:	d120      	bne.n	1363c <_puts_r+0x78>
   135fa:	0021      	movs	r1, r4
   135fc:	0028      	movs	r0, r5
   135fe:	f000 fa8b 	bl	13b18 <__swsetup_r>
   13602:	2800      	cmp	r0, #0
   13604:	d01a      	beq.n	1363c <_puts_r+0x78>
   13606:	2001      	movs	r0, #1
   13608:	4240      	negs	r0, r0
   1360a:	bd70      	pop	{r4, r5, r6, pc}
   1360c:	4b1b      	ldr	r3, [pc, #108]	; (1367c <_puts_r+0xb8>)
   1360e:	429c      	cmp	r4, r3
   13610:	d101      	bne.n	13616 <_puts_r+0x52>
   13612:	68ac      	ldr	r4, [r5, #8]
   13614:	e7eb      	b.n	135ee <_puts_r+0x2a>
   13616:	4b1a      	ldr	r3, [pc, #104]	; (13680 <_puts_r+0xbc>)
   13618:	429c      	cmp	r4, r3
   1361a:	d1e8      	bne.n	135ee <_puts_r+0x2a>
   1361c:	68ec      	ldr	r4, [r5, #12]
   1361e:	e7e6      	b.n	135ee <_puts_r+0x2a>
   13620:	3b01      	subs	r3, #1
   13622:	3601      	adds	r6, #1
   13624:	60a3      	str	r3, [r4, #8]
   13626:	2b00      	cmp	r3, #0
   13628:	da04      	bge.n	13634 <_puts_r+0x70>
   1362a:	69a2      	ldr	r2, [r4, #24]
   1362c:	4293      	cmp	r3, r2
   1362e:	db16      	blt.n	1365e <_puts_r+0x9a>
   13630:	290a      	cmp	r1, #10
   13632:	d014      	beq.n	1365e <_puts_r+0x9a>
   13634:	6823      	ldr	r3, [r4, #0]
   13636:	1c5a      	adds	r2, r3, #1
   13638:	6022      	str	r2, [r4, #0]
   1363a:	7019      	strb	r1, [r3, #0]
   1363c:	7831      	ldrb	r1, [r6, #0]
   1363e:	68a3      	ldr	r3, [r4, #8]
   13640:	2900      	cmp	r1, #0
   13642:	d1ed      	bne.n	13620 <_puts_r+0x5c>
   13644:	3b01      	subs	r3, #1
   13646:	60a3      	str	r3, [r4, #8]
   13648:	2b00      	cmp	r3, #0
   1364a:	da0f      	bge.n	1366c <_puts_r+0xa8>
   1364c:	0022      	movs	r2, r4
   1364e:	310a      	adds	r1, #10
   13650:	0028      	movs	r0, r5
   13652:	f000 fa0b 	bl	13a6c <__swbuf_r>
   13656:	1c43      	adds	r3, r0, #1
   13658:	d0d5      	beq.n	13606 <_puts_r+0x42>
   1365a:	200a      	movs	r0, #10
   1365c:	e7d5      	b.n	1360a <_puts_r+0x46>
   1365e:	0022      	movs	r2, r4
   13660:	0028      	movs	r0, r5
   13662:	f000 fa03 	bl	13a6c <__swbuf_r>
   13666:	1c43      	adds	r3, r0, #1
   13668:	d1e8      	bne.n	1363c <_puts_r+0x78>
   1366a:	e7cc      	b.n	13606 <_puts_r+0x42>
   1366c:	200a      	movs	r0, #10
   1366e:	6823      	ldr	r3, [r4, #0]
   13670:	1c5a      	adds	r2, r3, #1
   13672:	6022      	str	r2, [r4, #0]
   13674:	7018      	strb	r0, [r3, #0]
   13676:	e7c8      	b.n	1360a <_puts_r+0x46>
   13678:	0001bce8 	.word	0x0001bce8
   1367c:	0001bd08 	.word	0x0001bd08
   13680:	0001bcc8 	.word	0x0001bcc8

00013684 <puts>:
   13684:	b510      	push	{r4, lr}
   13686:	4b03      	ldr	r3, [pc, #12]	; (13694 <puts+0x10>)
   13688:	0001      	movs	r1, r0
   1368a:	6818      	ldr	r0, [r3, #0]
   1368c:	f7ff ff9a 	bl	135c4 <_puts_r>
   13690:	bd10      	pop	{r4, pc}
   13692:	46c0      	nop			; (mov r8, r8)
   13694:	20000228 	.word	0x20000228

00013698 <_sbrk_r>:
   13698:	2300      	movs	r3, #0
   1369a:	b570      	push	{r4, r5, r6, lr}
   1369c:	4c06      	ldr	r4, [pc, #24]	; (136b8 <_sbrk_r+0x20>)
   1369e:	0005      	movs	r5, r0
   136a0:	0008      	movs	r0, r1
   136a2:	6023      	str	r3, [r4, #0]
   136a4:	f7fb ff5c 	bl	f560 <_sbrk>
   136a8:	1c43      	adds	r3, r0, #1
   136aa:	d103      	bne.n	136b4 <_sbrk_r+0x1c>
   136ac:	6823      	ldr	r3, [r4, #0]
   136ae:	2b00      	cmp	r3, #0
   136b0:	d000      	beq.n	136b4 <_sbrk_r+0x1c>
   136b2:	602b      	str	r3, [r5, #0]
   136b4:	bd70      	pop	{r4, r5, r6, pc}
   136b6:	46c0      	nop			; (mov r8, r8)
   136b8:	20005e00 	.word	0x20005e00

000136bc <sniprintf>:
   136bc:	b40c      	push	{r2, r3}
   136be:	b530      	push	{r4, r5, lr}
   136c0:	4b16      	ldr	r3, [pc, #88]	; (1371c <sniprintf+0x60>)
   136c2:	b09d      	sub	sp, #116	; 0x74
   136c4:	1e0c      	subs	r4, r1, #0
   136c6:	681d      	ldr	r5, [r3, #0]
   136c8:	da08      	bge.n	136dc <sniprintf+0x20>
   136ca:	238b      	movs	r3, #139	; 0x8b
   136cc:	2001      	movs	r0, #1
   136ce:	602b      	str	r3, [r5, #0]
   136d0:	4240      	negs	r0, r0
   136d2:	b01d      	add	sp, #116	; 0x74
   136d4:	bc30      	pop	{r4, r5}
   136d6:	bc08      	pop	{r3}
   136d8:	b002      	add	sp, #8
   136da:	4718      	bx	r3
   136dc:	2382      	movs	r3, #130	; 0x82
   136de:	a902      	add	r1, sp, #8
   136e0:	009b      	lsls	r3, r3, #2
   136e2:	818b      	strh	r3, [r1, #12]
   136e4:	2300      	movs	r3, #0
   136e6:	9002      	str	r0, [sp, #8]
   136e8:	6108      	str	r0, [r1, #16]
   136ea:	429c      	cmp	r4, r3
   136ec:	d000      	beq.n	136f0 <sniprintf+0x34>
   136ee:	1e63      	subs	r3, r4, #1
   136f0:	608b      	str	r3, [r1, #8]
   136f2:	614b      	str	r3, [r1, #20]
   136f4:	2301      	movs	r3, #1
   136f6:	425b      	negs	r3, r3
   136f8:	81cb      	strh	r3, [r1, #14]
   136fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
   136fc:	ab21      	add	r3, sp, #132	; 0x84
   136fe:	0028      	movs	r0, r5
   13700:	9301      	str	r3, [sp, #4]
   13702:	f001 fe73 	bl	153ec <_svfiprintf_r>
   13706:	1c43      	adds	r3, r0, #1
   13708:	da01      	bge.n	1370e <sniprintf+0x52>
   1370a:	238b      	movs	r3, #139	; 0x8b
   1370c:	602b      	str	r3, [r5, #0]
   1370e:	2c00      	cmp	r4, #0
   13710:	d0df      	beq.n	136d2 <sniprintf+0x16>
   13712:	2300      	movs	r3, #0
   13714:	9a02      	ldr	r2, [sp, #8]
   13716:	7013      	strb	r3, [r2, #0]
   13718:	e7db      	b.n	136d2 <sniprintf+0x16>
   1371a:	46c0      	nop			; (mov r8, r8)
   1371c:	20000228 	.word	0x20000228

00013720 <siprintf>:
   13720:	b40e      	push	{r1, r2, r3}
   13722:	b510      	push	{r4, lr}
   13724:	b09d      	sub	sp, #116	; 0x74
   13726:	a902      	add	r1, sp, #8
   13728:	9002      	str	r0, [sp, #8]
   1372a:	6108      	str	r0, [r1, #16]
   1372c:	480b      	ldr	r0, [pc, #44]	; (1375c <siprintf+0x3c>)
   1372e:	2482      	movs	r4, #130	; 0x82
   13730:	6088      	str	r0, [r1, #8]
   13732:	6148      	str	r0, [r1, #20]
   13734:	2001      	movs	r0, #1
   13736:	4240      	negs	r0, r0
   13738:	ab1f      	add	r3, sp, #124	; 0x7c
   1373a:	81c8      	strh	r0, [r1, #14]
   1373c:	4808      	ldr	r0, [pc, #32]	; (13760 <siprintf+0x40>)
   1373e:	cb04      	ldmia	r3!, {r2}
   13740:	00a4      	lsls	r4, r4, #2
   13742:	6800      	ldr	r0, [r0, #0]
   13744:	9301      	str	r3, [sp, #4]
   13746:	818c      	strh	r4, [r1, #12]
   13748:	f001 fe50 	bl	153ec <_svfiprintf_r>
   1374c:	2300      	movs	r3, #0
   1374e:	9a02      	ldr	r2, [sp, #8]
   13750:	7013      	strb	r3, [r2, #0]
   13752:	b01d      	add	sp, #116	; 0x74
   13754:	bc10      	pop	{r4}
   13756:	bc08      	pop	{r3}
   13758:	b003      	add	sp, #12
   1375a:	4718      	bx	r3
   1375c:	7fffffff 	.word	0x7fffffff
   13760:	20000228 	.word	0x20000228

00013764 <strcasecmp>:
   13764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13766:	0007      	movs	r7, r0
   13768:	000e      	movs	r6, r1
   1376a:	783c      	ldrb	r4, [r7, #0]
   1376c:	f001 fa46 	bl	14bfc <__locale_ctype_ptr>
   13770:	2203      	movs	r2, #3
   13772:	1900      	adds	r0, r0, r4
   13774:	7843      	ldrb	r3, [r0, #1]
   13776:	4013      	ands	r3, r2
   13778:	2b01      	cmp	r3, #1
   1377a:	d100      	bne.n	1377e <strcasecmp+0x1a>
   1377c:	3420      	adds	r4, #32
   1377e:	7835      	ldrb	r5, [r6, #0]
   13780:	f001 fa3c 	bl	14bfc <__locale_ctype_ptr>
   13784:	2203      	movs	r2, #3
   13786:	1940      	adds	r0, r0, r5
   13788:	7843      	ldrb	r3, [r0, #1]
   1378a:	4013      	ands	r3, r2
   1378c:	2b01      	cmp	r3, #1
   1378e:	d100      	bne.n	13792 <strcasecmp+0x2e>
   13790:	3520      	adds	r5, #32
   13792:	1b60      	subs	r0, r4, r5
   13794:	d103      	bne.n	1379e <strcasecmp+0x3a>
   13796:	3701      	adds	r7, #1
   13798:	3601      	adds	r6, #1
   1379a:	2d00      	cmp	r5, #0
   1379c:	d1e5      	bne.n	1376a <strcasecmp+0x6>
   1379e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000137a0 <strcat>:
   137a0:	0002      	movs	r2, r0
   137a2:	b510      	push	{r4, lr}
   137a4:	7813      	ldrb	r3, [r2, #0]
   137a6:	2b00      	cmp	r3, #0
   137a8:	d105      	bne.n	137b6 <strcat+0x16>
   137aa:	5ccc      	ldrb	r4, [r1, r3]
   137ac:	54d4      	strb	r4, [r2, r3]
   137ae:	3301      	adds	r3, #1
   137b0:	2c00      	cmp	r4, #0
   137b2:	d1fa      	bne.n	137aa <strcat+0xa>
   137b4:	bd10      	pop	{r4, pc}
   137b6:	3201      	adds	r2, #1
   137b8:	e7f4      	b.n	137a4 <strcat+0x4>

000137ba <strcmp>:
   137ba:	7802      	ldrb	r2, [r0, #0]
   137bc:	780b      	ldrb	r3, [r1, #0]
   137be:	2a00      	cmp	r2, #0
   137c0:	d003      	beq.n	137ca <strcmp+0x10>
   137c2:	3001      	adds	r0, #1
   137c4:	3101      	adds	r1, #1
   137c6:	429a      	cmp	r2, r3
   137c8:	d0f7      	beq.n	137ba <strcmp>
   137ca:	1ad0      	subs	r0, r2, r3
   137cc:	4770      	bx	lr

000137ce <strcpy>:
   137ce:	1c03      	adds	r3, r0, #0
   137d0:	780a      	ldrb	r2, [r1, #0]
   137d2:	3101      	adds	r1, #1
   137d4:	701a      	strb	r2, [r3, #0]
   137d6:	3301      	adds	r3, #1
   137d8:	2a00      	cmp	r2, #0
   137da:	d1f9      	bne.n	137d0 <strcpy+0x2>
   137dc:	4770      	bx	lr
	...

000137e0 <strdup>:
   137e0:	b510      	push	{r4, lr}
   137e2:	4b03      	ldr	r3, [pc, #12]	; (137f0 <strdup+0x10>)
   137e4:	0001      	movs	r1, r0
   137e6:	6818      	ldr	r0, [r3, #0]
   137e8:	f000 f804 	bl	137f4 <_strdup_r>
   137ec:	bd10      	pop	{r4, pc}
   137ee:	46c0      	nop			; (mov r8, r8)
   137f0:	20000228 	.word	0x20000228

000137f4 <_strdup_r>:
   137f4:	b570      	push	{r4, r5, r6, lr}
   137f6:	0005      	movs	r5, r0
   137f8:	0008      	movs	r0, r1
   137fa:	000e      	movs	r6, r1
   137fc:	f000 f80d 	bl	1381a <strlen>
   13800:	1c44      	adds	r4, r0, #1
   13802:	0021      	movs	r1, r4
   13804:	0028      	movs	r0, r5
   13806:	f7ff fa0f 	bl	12c28 <_malloc_r>
   1380a:	1e05      	subs	r5, r0, #0
   1380c:	d003      	beq.n	13816 <_strdup_r+0x22>
   1380e:	0022      	movs	r2, r4
   13810:	0031      	movs	r1, r6
   13812:	f7ff f99b 	bl	12b4c <memcpy>
   13816:	0028      	movs	r0, r5
   13818:	bd70      	pop	{r4, r5, r6, pc}

0001381a <strlen>:
   1381a:	2300      	movs	r3, #0
   1381c:	5cc2      	ldrb	r2, [r0, r3]
   1381e:	3301      	adds	r3, #1
   13820:	2a00      	cmp	r2, #0
   13822:	d1fb      	bne.n	1381c <strlen+0x2>
   13824:	1e58      	subs	r0, r3, #1
   13826:	4770      	bx	lr

00013828 <strncmp>:
   13828:	2300      	movs	r3, #0
   1382a:	b530      	push	{r4, r5, lr}
   1382c:	429a      	cmp	r2, r3
   1382e:	d00a      	beq.n	13846 <strncmp+0x1e>
   13830:	3a01      	subs	r2, #1
   13832:	5cc4      	ldrb	r4, [r0, r3]
   13834:	5ccd      	ldrb	r5, [r1, r3]
   13836:	42ac      	cmp	r4, r5
   13838:	d104      	bne.n	13844 <strncmp+0x1c>
   1383a:	429a      	cmp	r2, r3
   1383c:	d002      	beq.n	13844 <strncmp+0x1c>
   1383e:	3301      	adds	r3, #1
   13840:	2c00      	cmp	r4, #0
   13842:	d1f6      	bne.n	13832 <strncmp+0xa>
   13844:	1b63      	subs	r3, r4, r5
   13846:	0018      	movs	r0, r3
   13848:	bd30      	pop	{r4, r5, pc}

0001384a <strncpy>:
   1384a:	b570      	push	{r4, r5, r6, lr}
   1384c:	0004      	movs	r4, r0
   1384e:	2a00      	cmp	r2, #0
   13850:	d100      	bne.n	13854 <strncpy+0xa>
   13852:	bd70      	pop	{r4, r5, r6, pc}
   13854:	780d      	ldrb	r5, [r1, #0]
   13856:	1e56      	subs	r6, r2, #1
   13858:	1c63      	adds	r3, r4, #1
   1385a:	7025      	strb	r5, [r4, #0]
   1385c:	3101      	adds	r1, #1
   1385e:	2d00      	cmp	r5, #0
   13860:	d105      	bne.n	1386e <strncpy+0x24>
   13862:	18a4      	adds	r4, r4, r2
   13864:	429c      	cmp	r4, r3
   13866:	d0f4      	beq.n	13852 <strncpy+0x8>
   13868:	701d      	strb	r5, [r3, #0]
   1386a:	3301      	adds	r3, #1
   1386c:	e7fa      	b.n	13864 <strncpy+0x1a>
   1386e:	001c      	movs	r4, r3
   13870:	0032      	movs	r2, r6
   13872:	e7ec      	b.n	1384e <strncpy+0x4>

00013874 <strrchr>:
   13874:	b570      	push	{r4, r5, r6, lr}
   13876:	000d      	movs	r5, r1
   13878:	2400      	movs	r4, #0
   1387a:	2900      	cmp	r1, #0
   1387c:	d105      	bne.n	1388a <strrchr+0x16>
   1387e:	f001 ff05 	bl	1568c <strchr>
   13882:	0004      	movs	r4, r0
   13884:	e006      	b.n	13894 <strrchr+0x20>
   13886:	001c      	movs	r4, r3
   13888:	1c58      	adds	r0, r3, #1
   1388a:	0029      	movs	r1, r5
   1388c:	f001 fefe 	bl	1568c <strchr>
   13890:	1e03      	subs	r3, r0, #0
   13892:	d1f8      	bne.n	13886 <strrchr+0x12>
   13894:	0020      	movs	r0, r4
   13896:	bd70      	pop	{r4, r5, r6, pc}

00013898 <strstr>:
   13898:	b510      	push	{r4, lr}
   1389a:	0002      	movs	r2, r0
   1389c:	7800      	ldrb	r0, [r0, #0]
   1389e:	2800      	cmp	r0, #0
   138a0:	d104      	bne.n	138ac <strstr+0x14>
   138a2:	7809      	ldrb	r1, [r1, #0]
   138a4:	2900      	cmp	r1, #0
   138a6:	d00d      	beq.n	138c4 <strstr+0x2c>
   138a8:	bd10      	pop	{r4, pc}
   138aa:	3201      	adds	r2, #1
   138ac:	7810      	ldrb	r0, [r2, #0]
   138ae:	2800      	cmp	r0, #0
   138b0:	d0fa      	beq.n	138a8 <strstr+0x10>
   138b2:	2300      	movs	r3, #0
   138b4:	5cc8      	ldrb	r0, [r1, r3]
   138b6:	2800      	cmp	r0, #0
   138b8:	d004      	beq.n	138c4 <strstr+0x2c>
   138ba:	5cd4      	ldrb	r4, [r2, r3]
   138bc:	4284      	cmp	r4, r0
   138be:	d1f4      	bne.n	138aa <strstr+0x12>
   138c0:	3301      	adds	r3, #1
   138c2:	e7f7      	b.n	138b4 <strstr+0x1c>
   138c4:	0010      	movs	r0, r2
   138c6:	e7ef      	b.n	138a8 <strstr+0x10>

000138c8 <_strtol_l.isra.0>:
   138c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   138ca:	001f      	movs	r7, r3
   138cc:	000e      	movs	r6, r1
   138ce:	b087      	sub	sp, #28
   138d0:	9005      	str	r0, [sp, #20]
   138d2:	9103      	str	r1, [sp, #12]
   138d4:	9202      	str	r2, [sp, #8]
   138d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   138d8:	7834      	ldrb	r4, [r6, #0]
   138da:	f001 f98c 	bl	14bf6 <__locale_ctype_ptr_l>
   138de:	2208      	movs	r2, #8
   138e0:	1900      	adds	r0, r0, r4
   138e2:	7843      	ldrb	r3, [r0, #1]
   138e4:	1c75      	adds	r5, r6, #1
   138e6:	4013      	ands	r3, r2
   138e8:	d10c      	bne.n	13904 <_strtol_l.isra.0+0x3c>
   138ea:	2c2d      	cmp	r4, #45	; 0x2d
   138ec:	d10c      	bne.n	13908 <_strtol_l.isra.0+0x40>
   138ee:	3301      	adds	r3, #1
   138f0:	782c      	ldrb	r4, [r5, #0]
   138f2:	9301      	str	r3, [sp, #4]
   138f4:	1cb5      	adds	r5, r6, #2
   138f6:	2f00      	cmp	r7, #0
   138f8:	d00c      	beq.n	13914 <_strtol_l.isra.0+0x4c>
   138fa:	2f10      	cmp	r7, #16
   138fc:	d114      	bne.n	13928 <_strtol_l.isra.0+0x60>
   138fe:	2c30      	cmp	r4, #48	; 0x30
   13900:	d00a      	beq.n	13918 <_strtol_l.isra.0+0x50>
   13902:	e011      	b.n	13928 <_strtol_l.isra.0+0x60>
   13904:	002e      	movs	r6, r5
   13906:	e7e6      	b.n	138d6 <_strtol_l.isra.0+0xe>
   13908:	9301      	str	r3, [sp, #4]
   1390a:	2c2b      	cmp	r4, #43	; 0x2b
   1390c:	d1f3      	bne.n	138f6 <_strtol_l.isra.0+0x2e>
   1390e:	782c      	ldrb	r4, [r5, #0]
   13910:	1cb5      	adds	r5, r6, #2
   13912:	e7f0      	b.n	138f6 <_strtol_l.isra.0+0x2e>
   13914:	2c30      	cmp	r4, #48	; 0x30
   13916:	d12f      	bne.n	13978 <_strtol_l.isra.0+0xb0>
   13918:	2220      	movs	r2, #32
   1391a:	782b      	ldrb	r3, [r5, #0]
   1391c:	4393      	bics	r3, r2
   1391e:	2b58      	cmp	r3, #88	; 0x58
   13920:	d151      	bne.n	139c6 <_strtol_l.isra.0+0xfe>
   13922:	2710      	movs	r7, #16
   13924:	786c      	ldrb	r4, [r5, #1]
   13926:	3502      	adds	r5, #2
   13928:	9b01      	ldr	r3, [sp, #4]
   1392a:	4a29      	ldr	r2, [pc, #164]	; (139d0 <_strtol_l.isra.0+0x108>)
   1392c:	0039      	movs	r1, r7
   1392e:	189e      	adds	r6, r3, r2
   13930:	0030      	movs	r0, r6
   13932:	f001 fff5 	bl	15920 <__aeabi_uidivmod>
   13936:	0030      	movs	r0, r6
   13938:	9104      	str	r1, [sp, #16]
   1393a:	0039      	movs	r1, r7
   1393c:	f001 ff6a 	bl	15814 <__udivsi3>
   13940:	2101      	movs	r1, #1
   13942:	2300      	movs	r3, #0
   13944:	4249      	negs	r1, r1
   13946:	0002      	movs	r2, r0
   13948:	468c      	mov	ip, r1
   1394a:	0018      	movs	r0, r3
   1394c:	0021      	movs	r1, r4
   1394e:	3930      	subs	r1, #48	; 0x30
   13950:	2909      	cmp	r1, #9
   13952:	d813      	bhi.n	1397c <_strtol_l.isra.0+0xb4>
   13954:	000c      	movs	r4, r1
   13956:	42a7      	cmp	r7, r4
   13958:	dd1c      	ble.n	13994 <_strtol_l.isra.0+0xcc>
   1395a:	1c59      	adds	r1, r3, #1
   1395c:	d009      	beq.n	13972 <_strtol_l.isra.0+0xaa>
   1395e:	4663      	mov	r3, ip
   13960:	4282      	cmp	r2, r0
   13962:	d306      	bcc.n	13972 <_strtol_l.isra.0+0xaa>
   13964:	d102      	bne.n	1396c <_strtol_l.isra.0+0xa4>
   13966:	9904      	ldr	r1, [sp, #16]
   13968:	42a1      	cmp	r1, r4
   1396a:	db02      	blt.n	13972 <_strtol_l.isra.0+0xaa>
   1396c:	2301      	movs	r3, #1
   1396e:	4378      	muls	r0, r7
   13970:	1820      	adds	r0, r4, r0
   13972:	782c      	ldrb	r4, [r5, #0]
   13974:	3501      	adds	r5, #1
   13976:	e7e9      	b.n	1394c <_strtol_l.isra.0+0x84>
   13978:	270a      	movs	r7, #10
   1397a:	e7d5      	b.n	13928 <_strtol_l.isra.0+0x60>
   1397c:	0021      	movs	r1, r4
   1397e:	3941      	subs	r1, #65	; 0x41
   13980:	2919      	cmp	r1, #25
   13982:	d801      	bhi.n	13988 <_strtol_l.isra.0+0xc0>
   13984:	3c37      	subs	r4, #55	; 0x37
   13986:	e7e6      	b.n	13956 <_strtol_l.isra.0+0x8e>
   13988:	0021      	movs	r1, r4
   1398a:	3961      	subs	r1, #97	; 0x61
   1398c:	2919      	cmp	r1, #25
   1398e:	d801      	bhi.n	13994 <_strtol_l.isra.0+0xcc>
   13990:	3c57      	subs	r4, #87	; 0x57
   13992:	e7e0      	b.n	13956 <_strtol_l.isra.0+0x8e>
   13994:	1c5a      	adds	r2, r3, #1
   13996:	d108      	bne.n	139aa <_strtol_l.isra.0+0xe2>
   13998:	9a05      	ldr	r2, [sp, #20]
   1399a:	3323      	adds	r3, #35	; 0x23
   1399c:	6013      	str	r3, [r2, #0]
   1399e:	9b02      	ldr	r3, [sp, #8]
   139a0:	0030      	movs	r0, r6
   139a2:	2b00      	cmp	r3, #0
   139a4:	d10b      	bne.n	139be <_strtol_l.isra.0+0xf6>
   139a6:	b007      	add	sp, #28
   139a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   139aa:	9a01      	ldr	r2, [sp, #4]
   139ac:	2a00      	cmp	r2, #0
   139ae:	d000      	beq.n	139b2 <_strtol_l.isra.0+0xea>
   139b0:	4240      	negs	r0, r0
   139b2:	9a02      	ldr	r2, [sp, #8]
   139b4:	2a00      	cmp	r2, #0
   139b6:	d0f6      	beq.n	139a6 <_strtol_l.isra.0+0xde>
   139b8:	9a03      	ldr	r2, [sp, #12]
   139ba:	2b00      	cmp	r3, #0
   139bc:	d000      	beq.n	139c0 <_strtol_l.isra.0+0xf8>
   139be:	1e6a      	subs	r2, r5, #1
   139c0:	9b02      	ldr	r3, [sp, #8]
   139c2:	601a      	str	r2, [r3, #0]
   139c4:	e7ef      	b.n	139a6 <_strtol_l.isra.0+0xde>
   139c6:	2430      	movs	r4, #48	; 0x30
   139c8:	2f00      	cmp	r7, #0
   139ca:	d1ad      	bne.n	13928 <_strtol_l.isra.0+0x60>
   139cc:	3708      	adds	r7, #8
   139ce:	e7ab      	b.n	13928 <_strtol_l.isra.0+0x60>
   139d0:	7fffffff 	.word	0x7fffffff

000139d4 <strtol>:
   139d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   139d6:	0013      	movs	r3, r2
   139d8:	4a06      	ldr	r2, [pc, #24]	; (139f4 <strtol+0x20>)
   139da:	0005      	movs	r5, r0
   139dc:	6810      	ldr	r0, [r2, #0]
   139de:	6a04      	ldr	r4, [r0, #32]
   139e0:	2c00      	cmp	r4, #0
   139e2:	d100      	bne.n	139e6 <strtol+0x12>
   139e4:	4c04      	ldr	r4, [pc, #16]	; (139f8 <strtol+0x24>)
   139e6:	000a      	movs	r2, r1
   139e8:	9400      	str	r4, [sp, #0]
   139ea:	0029      	movs	r1, r5
   139ec:	f7ff ff6c 	bl	138c8 <_strtol_l.isra.0>
   139f0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   139f2:	46c0      	nop			; (mov r8, r8)
   139f4:	20000228 	.word	0x20000228
   139f8:	2000028c 	.word	0x2000028c

000139fc <_vsniprintf_r>:
   139fc:	b530      	push	{r4, r5, lr}
   139fe:	0014      	movs	r4, r2
   13a00:	b09b      	sub	sp, #108	; 0x6c
   13a02:	0005      	movs	r5, r0
   13a04:	001a      	movs	r2, r3
   13a06:	2c00      	cmp	r4, #0
   13a08:	da05      	bge.n	13a16 <_vsniprintf_r+0x1a>
   13a0a:	238b      	movs	r3, #139	; 0x8b
   13a0c:	6003      	str	r3, [r0, #0]
   13a0e:	2001      	movs	r0, #1
   13a10:	4240      	negs	r0, r0
   13a12:	b01b      	add	sp, #108	; 0x6c
   13a14:	bd30      	pop	{r4, r5, pc}
   13a16:	2382      	movs	r3, #130	; 0x82
   13a18:	4668      	mov	r0, sp
   13a1a:	009b      	lsls	r3, r3, #2
   13a1c:	8183      	strh	r3, [r0, #12]
   13a1e:	2300      	movs	r3, #0
   13a20:	9100      	str	r1, [sp, #0]
   13a22:	9104      	str	r1, [sp, #16]
   13a24:	429c      	cmp	r4, r3
   13a26:	d000      	beq.n	13a2a <_vsniprintf_r+0x2e>
   13a28:	1e63      	subs	r3, r4, #1
   13a2a:	9302      	str	r3, [sp, #8]
   13a2c:	9305      	str	r3, [sp, #20]
   13a2e:	2301      	movs	r3, #1
   13a30:	4669      	mov	r1, sp
   13a32:	425b      	negs	r3, r3
   13a34:	81cb      	strh	r3, [r1, #14]
   13a36:	0028      	movs	r0, r5
   13a38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13a3a:	f001 fcd7 	bl	153ec <_svfiprintf_r>
   13a3e:	1c43      	adds	r3, r0, #1
   13a40:	da01      	bge.n	13a46 <_vsniprintf_r+0x4a>
   13a42:	238b      	movs	r3, #139	; 0x8b
   13a44:	602b      	str	r3, [r5, #0]
   13a46:	2c00      	cmp	r4, #0
   13a48:	d0e3      	beq.n	13a12 <_vsniprintf_r+0x16>
   13a4a:	2300      	movs	r3, #0
   13a4c:	9a00      	ldr	r2, [sp, #0]
   13a4e:	7013      	strb	r3, [r2, #0]
   13a50:	e7df      	b.n	13a12 <_vsniprintf_r+0x16>
	...

00013a54 <vsniprintf>:
   13a54:	b507      	push	{r0, r1, r2, lr}
   13a56:	9300      	str	r3, [sp, #0]
   13a58:	0013      	movs	r3, r2
   13a5a:	000a      	movs	r2, r1
   13a5c:	0001      	movs	r1, r0
   13a5e:	4802      	ldr	r0, [pc, #8]	; (13a68 <vsniprintf+0x14>)
   13a60:	6800      	ldr	r0, [r0, #0]
   13a62:	f7ff ffcb 	bl	139fc <_vsniprintf_r>
   13a66:	bd0e      	pop	{r1, r2, r3, pc}
   13a68:	20000228 	.word	0x20000228

00013a6c <__swbuf_r>:
   13a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a6e:	0005      	movs	r5, r0
   13a70:	000e      	movs	r6, r1
   13a72:	0014      	movs	r4, r2
   13a74:	2800      	cmp	r0, #0
   13a76:	d004      	beq.n	13a82 <__swbuf_r+0x16>
   13a78:	6983      	ldr	r3, [r0, #24]
   13a7a:	2b00      	cmp	r3, #0
   13a7c:	d101      	bne.n	13a82 <__swbuf_r+0x16>
   13a7e:	f001 f825 	bl	14acc <__sinit>
   13a82:	4b22      	ldr	r3, [pc, #136]	; (13b0c <__swbuf_r+0xa0>)
   13a84:	429c      	cmp	r4, r3
   13a86:	d12d      	bne.n	13ae4 <__swbuf_r+0x78>
   13a88:	686c      	ldr	r4, [r5, #4]
   13a8a:	69a3      	ldr	r3, [r4, #24]
   13a8c:	60a3      	str	r3, [r4, #8]
   13a8e:	89a3      	ldrh	r3, [r4, #12]
   13a90:	071b      	lsls	r3, r3, #28
   13a92:	d531      	bpl.n	13af8 <__swbuf_r+0x8c>
   13a94:	6923      	ldr	r3, [r4, #16]
   13a96:	2b00      	cmp	r3, #0
   13a98:	d02e      	beq.n	13af8 <__swbuf_r+0x8c>
   13a9a:	6823      	ldr	r3, [r4, #0]
   13a9c:	6922      	ldr	r2, [r4, #16]
   13a9e:	b2f7      	uxtb	r7, r6
   13aa0:	1a98      	subs	r0, r3, r2
   13aa2:	6963      	ldr	r3, [r4, #20]
   13aa4:	b2f6      	uxtb	r6, r6
   13aa6:	4298      	cmp	r0, r3
   13aa8:	db05      	blt.n	13ab6 <__swbuf_r+0x4a>
   13aaa:	0021      	movs	r1, r4
   13aac:	0028      	movs	r0, r5
   13aae:	f000 ff9f 	bl	149f0 <_fflush_r>
   13ab2:	2800      	cmp	r0, #0
   13ab4:	d126      	bne.n	13b04 <__swbuf_r+0x98>
   13ab6:	68a3      	ldr	r3, [r4, #8]
   13ab8:	3001      	adds	r0, #1
   13aba:	3b01      	subs	r3, #1
   13abc:	60a3      	str	r3, [r4, #8]
   13abe:	6823      	ldr	r3, [r4, #0]
   13ac0:	1c5a      	adds	r2, r3, #1
   13ac2:	6022      	str	r2, [r4, #0]
   13ac4:	701f      	strb	r7, [r3, #0]
   13ac6:	6963      	ldr	r3, [r4, #20]
   13ac8:	4298      	cmp	r0, r3
   13aca:	d004      	beq.n	13ad6 <__swbuf_r+0x6a>
   13acc:	89a3      	ldrh	r3, [r4, #12]
   13ace:	07db      	lsls	r3, r3, #31
   13ad0:	d51a      	bpl.n	13b08 <__swbuf_r+0x9c>
   13ad2:	2e0a      	cmp	r6, #10
   13ad4:	d118      	bne.n	13b08 <__swbuf_r+0x9c>
   13ad6:	0021      	movs	r1, r4
   13ad8:	0028      	movs	r0, r5
   13ada:	f000 ff89 	bl	149f0 <_fflush_r>
   13ade:	2800      	cmp	r0, #0
   13ae0:	d012      	beq.n	13b08 <__swbuf_r+0x9c>
   13ae2:	e00f      	b.n	13b04 <__swbuf_r+0x98>
   13ae4:	4b0a      	ldr	r3, [pc, #40]	; (13b10 <__swbuf_r+0xa4>)
   13ae6:	429c      	cmp	r4, r3
   13ae8:	d101      	bne.n	13aee <__swbuf_r+0x82>
   13aea:	68ac      	ldr	r4, [r5, #8]
   13aec:	e7cd      	b.n	13a8a <__swbuf_r+0x1e>
   13aee:	4b09      	ldr	r3, [pc, #36]	; (13b14 <__swbuf_r+0xa8>)
   13af0:	429c      	cmp	r4, r3
   13af2:	d1ca      	bne.n	13a8a <__swbuf_r+0x1e>
   13af4:	68ec      	ldr	r4, [r5, #12]
   13af6:	e7c8      	b.n	13a8a <__swbuf_r+0x1e>
   13af8:	0021      	movs	r1, r4
   13afa:	0028      	movs	r0, r5
   13afc:	f000 f80c 	bl	13b18 <__swsetup_r>
   13b00:	2800      	cmp	r0, #0
   13b02:	d0ca      	beq.n	13a9a <__swbuf_r+0x2e>
   13b04:	2601      	movs	r6, #1
   13b06:	4276      	negs	r6, r6
   13b08:	0030      	movs	r0, r6
   13b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13b0c:	0001bce8 	.word	0x0001bce8
   13b10:	0001bd08 	.word	0x0001bd08
   13b14:	0001bcc8 	.word	0x0001bcc8

00013b18 <__swsetup_r>:
   13b18:	4b36      	ldr	r3, [pc, #216]	; (13bf4 <__swsetup_r+0xdc>)
   13b1a:	b570      	push	{r4, r5, r6, lr}
   13b1c:	681d      	ldr	r5, [r3, #0]
   13b1e:	0006      	movs	r6, r0
   13b20:	000c      	movs	r4, r1
   13b22:	2d00      	cmp	r5, #0
   13b24:	d005      	beq.n	13b32 <__swsetup_r+0x1a>
   13b26:	69ab      	ldr	r3, [r5, #24]
   13b28:	2b00      	cmp	r3, #0
   13b2a:	d102      	bne.n	13b32 <__swsetup_r+0x1a>
   13b2c:	0028      	movs	r0, r5
   13b2e:	f000 ffcd 	bl	14acc <__sinit>
   13b32:	4b31      	ldr	r3, [pc, #196]	; (13bf8 <__swsetup_r+0xe0>)
   13b34:	429c      	cmp	r4, r3
   13b36:	d10f      	bne.n	13b58 <__swsetup_r+0x40>
   13b38:	686c      	ldr	r4, [r5, #4]
   13b3a:	230c      	movs	r3, #12
   13b3c:	5ee2      	ldrsh	r2, [r4, r3]
   13b3e:	b293      	uxth	r3, r2
   13b40:	0719      	lsls	r1, r3, #28
   13b42:	d42d      	bmi.n	13ba0 <__swsetup_r+0x88>
   13b44:	06d9      	lsls	r1, r3, #27
   13b46:	d411      	bmi.n	13b6c <__swsetup_r+0x54>
   13b48:	2309      	movs	r3, #9
   13b4a:	2001      	movs	r0, #1
   13b4c:	6033      	str	r3, [r6, #0]
   13b4e:	3337      	adds	r3, #55	; 0x37
   13b50:	4313      	orrs	r3, r2
   13b52:	81a3      	strh	r3, [r4, #12]
   13b54:	4240      	negs	r0, r0
   13b56:	bd70      	pop	{r4, r5, r6, pc}
   13b58:	4b28      	ldr	r3, [pc, #160]	; (13bfc <__swsetup_r+0xe4>)
   13b5a:	429c      	cmp	r4, r3
   13b5c:	d101      	bne.n	13b62 <__swsetup_r+0x4a>
   13b5e:	68ac      	ldr	r4, [r5, #8]
   13b60:	e7eb      	b.n	13b3a <__swsetup_r+0x22>
   13b62:	4b27      	ldr	r3, [pc, #156]	; (13c00 <__swsetup_r+0xe8>)
   13b64:	429c      	cmp	r4, r3
   13b66:	d1e8      	bne.n	13b3a <__swsetup_r+0x22>
   13b68:	68ec      	ldr	r4, [r5, #12]
   13b6a:	e7e6      	b.n	13b3a <__swsetup_r+0x22>
   13b6c:	075b      	lsls	r3, r3, #29
   13b6e:	d513      	bpl.n	13b98 <__swsetup_r+0x80>
   13b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13b72:	2900      	cmp	r1, #0
   13b74:	d008      	beq.n	13b88 <__swsetup_r+0x70>
   13b76:	0023      	movs	r3, r4
   13b78:	3344      	adds	r3, #68	; 0x44
   13b7a:	4299      	cmp	r1, r3
   13b7c:	d002      	beq.n	13b84 <__swsetup_r+0x6c>
   13b7e:	0030      	movs	r0, r6
   13b80:	f7ff f808 	bl	12b94 <_free_r>
   13b84:	2300      	movs	r3, #0
   13b86:	6363      	str	r3, [r4, #52]	; 0x34
   13b88:	2224      	movs	r2, #36	; 0x24
   13b8a:	89a3      	ldrh	r3, [r4, #12]
   13b8c:	4393      	bics	r3, r2
   13b8e:	81a3      	strh	r3, [r4, #12]
   13b90:	2300      	movs	r3, #0
   13b92:	6063      	str	r3, [r4, #4]
   13b94:	6923      	ldr	r3, [r4, #16]
   13b96:	6023      	str	r3, [r4, #0]
   13b98:	2308      	movs	r3, #8
   13b9a:	89a2      	ldrh	r2, [r4, #12]
   13b9c:	4313      	orrs	r3, r2
   13b9e:	81a3      	strh	r3, [r4, #12]
   13ba0:	6923      	ldr	r3, [r4, #16]
   13ba2:	2b00      	cmp	r3, #0
   13ba4:	d10b      	bne.n	13bbe <__swsetup_r+0xa6>
   13ba6:	21a0      	movs	r1, #160	; 0xa0
   13ba8:	2280      	movs	r2, #128	; 0x80
   13baa:	89a3      	ldrh	r3, [r4, #12]
   13bac:	0089      	lsls	r1, r1, #2
   13bae:	0092      	lsls	r2, r2, #2
   13bb0:	400b      	ands	r3, r1
   13bb2:	4293      	cmp	r3, r2
   13bb4:	d003      	beq.n	13bbe <__swsetup_r+0xa6>
   13bb6:	0021      	movs	r1, r4
   13bb8:	0030      	movs	r0, r6
   13bba:	f001 f861 	bl	14c80 <__smakebuf_r>
   13bbe:	2301      	movs	r3, #1
   13bc0:	89a2      	ldrh	r2, [r4, #12]
   13bc2:	4013      	ands	r3, r2
   13bc4:	d011      	beq.n	13bea <__swsetup_r+0xd2>
   13bc6:	2300      	movs	r3, #0
   13bc8:	60a3      	str	r3, [r4, #8]
   13bca:	6963      	ldr	r3, [r4, #20]
   13bcc:	425b      	negs	r3, r3
   13bce:	61a3      	str	r3, [r4, #24]
   13bd0:	2000      	movs	r0, #0
   13bd2:	6923      	ldr	r3, [r4, #16]
   13bd4:	4283      	cmp	r3, r0
   13bd6:	d1be      	bne.n	13b56 <__swsetup_r+0x3e>
   13bd8:	230c      	movs	r3, #12
   13bda:	5ee2      	ldrsh	r2, [r4, r3]
   13bdc:	0613      	lsls	r3, r2, #24
   13bde:	d5ba      	bpl.n	13b56 <__swsetup_r+0x3e>
   13be0:	2340      	movs	r3, #64	; 0x40
   13be2:	4313      	orrs	r3, r2
   13be4:	81a3      	strh	r3, [r4, #12]
   13be6:	3801      	subs	r0, #1
   13be8:	e7b5      	b.n	13b56 <__swsetup_r+0x3e>
   13bea:	0792      	lsls	r2, r2, #30
   13bec:	d400      	bmi.n	13bf0 <__swsetup_r+0xd8>
   13bee:	6963      	ldr	r3, [r4, #20]
   13bf0:	60a3      	str	r3, [r4, #8]
   13bf2:	e7ed      	b.n	13bd0 <__swsetup_r+0xb8>
   13bf4:	20000228 	.word	0x20000228
   13bf8:	0001bce8 	.word	0x0001bce8
   13bfc:	0001bd08 	.word	0x0001bd08
   13c00:	0001bcc8 	.word	0x0001bcc8

00013c04 <quorem>:
   13c04:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c06:	6903      	ldr	r3, [r0, #16]
   13c08:	690c      	ldr	r4, [r1, #16]
   13c0a:	b089      	sub	sp, #36	; 0x24
   13c0c:	0007      	movs	r7, r0
   13c0e:	9105      	str	r1, [sp, #20]
   13c10:	2600      	movs	r6, #0
   13c12:	429c      	cmp	r4, r3
   13c14:	dc6d      	bgt.n	13cf2 <quorem+0xee>
   13c16:	000b      	movs	r3, r1
   13c18:	3c01      	subs	r4, #1
   13c1a:	3314      	adds	r3, #20
   13c1c:	00a5      	lsls	r5, r4, #2
   13c1e:	9303      	str	r3, [sp, #12]
   13c20:	195b      	adds	r3, r3, r5
   13c22:	9304      	str	r3, [sp, #16]
   13c24:	0003      	movs	r3, r0
   13c26:	3314      	adds	r3, #20
   13c28:	9302      	str	r3, [sp, #8]
   13c2a:	195d      	adds	r5, r3, r5
   13c2c:	9b04      	ldr	r3, [sp, #16]
   13c2e:	6828      	ldr	r0, [r5, #0]
   13c30:	681b      	ldr	r3, [r3, #0]
   13c32:	1c59      	adds	r1, r3, #1
   13c34:	9301      	str	r3, [sp, #4]
   13c36:	f001 fded 	bl	15814 <__udivsi3>
   13c3a:	9001      	str	r0, [sp, #4]
   13c3c:	42b0      	cmp	r0, r6
   13c3e:	d02d      	beq.n	13c9c <quorem+0x98>
   13c40:	9b03      	ldr	r3, [sp, #12]
   13c42:	9802      	ldr	r0, [sp, #8]
   13c44:	469c      	mov	ip, r3
   13c46:	9606      	str	r6, [sp, #24]
   13c48:	4662      	mov	r2, ip
   13c4a:	ca08      	ldmia	r2!, {r3}
   13c4c:	4694      	mov	ip, r2
   13c4e:	9a01      	ldr	r2, [sp, #4]
   13c50:	b299      	uxth	r1, r3
   13c52:	4351      	muls	r1, r2
   13c54:	0c1b      	lsrs	r3, r3, #16
   13c56:	4353      	muls	r3, r2
   13c58:	1989      	adds	r1, r1, r6
   13c5a:	0c0a      	lsrs	r2, r1, #16
   13c5c:	189b      	adds	r3, r3, r2
   13c5e:	9307      	str	r3, [sp, #28]
   13c60:	8802      	ldrh	r2, [r0, #0]
   13c62:	0c1e      	lsrs	r6, r3, #16
   13c64:	9b06      	ldr	r3, [sp, #24]
   13c66:	b289      	uxth	r1, r1
   13c68:	18d2      	adds	r2, r2, r3
   13c6a:	6803      	ldr	r3, [r0, #0]
   13c6c:	1a52      	subs	r2, r2, r1
   13c6e:	0c19      	lsrs	r1, r3, #16
   13c70:	466b      	mov	r3, sp
   13c72:	8b9b      	ldrh	r3, [r3, #28]
   13c74:	1acb      	subs	r3, r1, r3
   13c76:	1411      	asrs	r1, r2, #16
   13c78:	185b      	adds	r3, r3, r1
   13c7a:	1419      	asrs	r1, r3, #16
   13c7c:	b292      	uxth	r2, r2
   13c7e:	041b      	lsls	r3, r3, #16
   13c80:	431a      	orrs	r2, r3
   13c82:	9b04      	ldr	r3, [sp, #16]
   13c84:	9106      	str	r1, [sp, #24]
   13c86:	c004      	stmia	r0!, {r2}
   13c88:	4563      	cmp	r3, ip
   13c8a:	d2dd      	bcs.n	13c48 <quorem+0x44>
   13c8c:	682b      	ldr	r3, [r5, #0]
   13c8e:	2b00      	cmp	r3, #0
   13c90:	d104      	bne.n	13c9c <quorem+0x98>
   13c92:	9b02      	ldr	r3, [sp, #8]
   13c94:	3d04      	subs	r5, #4
   13c96:	42ab      	cmp	r3, r5
   13c98:	d32e      	bcc.n	13cf8 <quorem+0xf4>
   13c9a:	613c      	str	r4, [r7, #16]
   13c9c:	9905      	ldr	r1, [sp, #20]
   13c9e:	0038      	movs	r0, r7
   13ca0:	f001 fa63 	bl	1516a <__mcmp>
   13ca4:	2800      	cmp	r0, #0
   13ca6:	db23      	blt.n	13cf0 <quorem+0xec>
   13ca8:	2500      	movs	r5, #0
   13caa:	9b01      	ldr	r3, [sp, #4]
   13cac:	9802      	ldr	r0, [sp, #8]
   13cae:	3301      	adds	r3, #1
   13cb0:	9903      	ldr	r1, [sp, #12]
   13cb2:	9301      	str	r3, [sp, #4]
   13cb4:	c908      	ldmia	r1!, {r3}
   13cb6:	8802      	ldrh	r2, [r0, #0]
   13cb8:	1955      	adds	r5, r2, r5
   13cba:	b29a      	uxth	r2, r3
   13cbc:	1aaa      	subs	r2, r5, r2
   13cbe:	6805      	ldr	r5, [r0, #0]
   13cc0:	0c1b      	lsrs	r3, r3, #16
   13cc2:	0c2d      	lsrs	r5, r5, #16
   13cc4:	1aeb      	subs	r3, r5, r3
   13cc6:	1415      	asrs	r5, r2, #16
   13cc8:	195b      	adds	r3, r3, r5
   13cca:	141d      	asrs	r5, r3, #16
   13ccc:	b292      	uxth	r2, r2
   13cce:	041b      	lsls	r3, r3, #16
   13cd0:	4313      	orrs	r3, r2
   13cd2:	c008      	stmia	r0!, {r3}
   13cd4:	9b04      	ldr	r3, [sp, #16]
   13cd6:	428b      	cmp	r3, r1
   13cd8:	d2ec      	bcs.n	13cb4 <quorem+0xb0>
   13cda:	9a02      	ldr	r2, [sp, #8]
   13cdc:	00a3      	lsls	r3, r4, #2
   13cde:	18d3      	adds	r3, r2, r3
   13ce0:	681a      	ldr	r2, [r3, #0]
   13ce2:	2a00      	cmp	r2, #0
   13ce4:	d104      	bne.n	13cf0 <quorem+0xec>
   13ce6:	9a02      	ldr	r2, [sp, #8]
   13ce8:	3b04      	subs	r3, #4
   13cea:	429a      	cmp	r2, r3
   13cec:	d309      	bcc.n	13d02 <quorem+0xfe>
   13cee:	613c      	str	r4, [r7, #16]
   13cf0:	9e01      	ldr	r6, [sp, #4]
   13cf2:	0030      	movs	r0, r6
   13cf4:	b009      	add	sp, #36	; 0x24
   13cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13cf8:	682b      	ldr	r3, [r5, #0]
   13cfa:	2b00      	cmp	r3, #0
   13cfc:	d1cd      	bne.n	13c9a <quorem+0x96>
   13cfe:	3c01      	subs	r4, #1
   13d00:	e7c7      	b.n	13c92 <quorem+0x8e>
   13d02:	681a      	ldr	r2, [r3, #0]
   13d04:	2a00      	cmp	r2, #0
   13d06:	d1f2      	bne.n	13cee <quorem+0xea>
   13d08:	3c01      	subs	r4, #1
   13d0a:	e7ec      	b.n	13ce6 <quorem+0xe2>

00013d0c <_dtoa_r>:
   13d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d0e:	0016      	movs	r6, r2
   13d10:	001f      	movs	r7, r3
   13d12:	6a44      	ldr	r4, [r0, #36]	; 0x24
   13d14:	b09d      	sub	sp, #116	; 0x74
   13d16:	9004      	str	r0, [sp, #16]
   13d18:	9d25      	ldr	r5, [sp, #148]	; 0x94
   13d1a:	9606      	str	r6, [sp, #24]
   13d1c:	9707      	str	r7, [sp, #28]
   13d1e:	2c00      	cmp	r4, #0
   13d20:	d108      	bne.n	13d34 <_dtoa_r+0x28>
   13d22:	2010      	movs	r0, #16
   13d24:	f7fe fefe 	bl	12b24 <malloc>
   13d28:	9b04      	ldr	r3, [sp, #16]
   13d2a:	6258      	str	r0, [r3, #36]	; 0x24
   13d2c:	6044      	str	r4, [r0, #4]
   13d2e:	6084      	str	r4, [r0, #8]
   13d30:	6004      	str	r4, [r0, #0]
   13d32:	60c4      	str	r4, [r0, #12]
   13d34:	9b04      	ldr	r3, [sp, #16]
   13d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13d38:	6819      	ldr	r1, [r3, #0]
   13d3a:	2900      	cmp	r1, #0
   13d3c:	d00b      	beq.n	13d56 <_dtoa_r+0x4a>
   13d3e:	685a      	ldr	r2, [r3, #4]
   13d40:	2301      	movs	r3, #1
   13d42:	4093      	lsls	r3, r2
   13d44:	604a      	str	r2, [r1, #4]
   13d46:	608b      	str	r3, [r1, #8]
   13d48:	9804      	ldr	r0, [sp, #16]
   13d4a:	f001 f834 	bl	14db6 <_Bfree>
   13d4e:	2200      	movs	r2, #0
   13d50:	9b04      	ldr	r3, [sp, #16]
   13d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13d54:	601a      	str	r2, [r3, #0]
   13d56:	9b07      	ldr	r3, [sp, #28]
   13d58:	2b00      	cmp	r3, #0
   13d5a:	da1f      	bge.n	13d9c <_dtoa_r+0x90>
   13d5c:	2301      	movs	r3, #1
   13d5e:	602b      	str	r3, [r5, #0]
   13d60:	007b      	lsls	r3, r7, #1
   13d62:	085b      	lsrs	r3, r3, #1
   13d64:	9307      	str	r3, [sp, #28]
   13d66:	9c07      	ldr	r4, [sp, #28]
   13d68:	4bb7      	ldr	r3, [pc, #732]	; (14048 <_dtoa_r+0x33c>)
   13d6a:	0022      	movs	r2, r4
   13d6c:	9319      	str	r3, [sp, #100]	; 0x64
   13d6e:	401a      	ands	r2, r3
   13d70:	429a      	cmp	r2, r3
   13d72:	d116      	bne.n	13da2 <_dtoa_r+0x96>
   13d74:	4bb5      	ldr	r3, [pc, #724]	; (1404c <_dtoa_r+0x340>)
   13d76:	9a24      	ldr	r2, [sp, #144]	; 0x90
   13d78:	6013      	str	r3, [r2, #0]
   13d7a:	9b06      	ldr	r3, [sp, #24]
   13d7c:	2b00      	cmp	r3, #0
   13d7e:	d103      	bne.n	13d88 <_dtoa_r+0x7c>
   13d80:	0324      	lsls	r4, r4, #12
   13d82:	d101      	bne.n	13d88 <_dtoa_r+0x7c>
   13d84:	f000 fd91 	bl	148aa <_dtoa_r+0xb9e>
   13d88:	4bb1      	ldr	r3, [pc, #708]	; (14050 <_dtoa_r+0x344>)
   13d8a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13d8c:	930a      	str	r3, [sp, #40]	; 0x28
   13d8e:	4bb1      	ldr	r3, [pc, #708]	; (14054 <_dtoa_r+0x348>)
   13d90:	2a00      	cmp	r2, #0
   13d92:	d001      	beq.n	13d98 <_dtoa_r+0x8c>
   13d94:	f000 fd8f 	bl	148b6 <_dtoa_r+0xbaa>
   13d98:	f000 fd8f 	bl	148ba <_dtoa_r+0xbae>
   13d9c:	2300      	movs	r3, #0
   13d9e:	602b      	str	r3, [r5, #0]
   13da0:	e7e1      	b.n	13d66 <_dtoa_r+0x5a>
   13da2:	9e06      	ldr	r6, [sp, #24]
   13da4:	9f07      	ldr	r7, [sp, #28]
   13da6:	2200      	movs	r2, #0
   13da8:	2300      	movs	r3, #0
   13daa:	0030      	movs	r0, r6
   13dac:	0039      	movs	r1, r7
   13dae:	f001 feb7 	bl	15b20 <__aeabi_dcmpeq>
   13db2:	1e05      	subs	r5, r0, #0
   13db4:	d00e      	beq.n	13dd4 <_dtoa_r+0xc8>
   13db6:	2301      	movs	r3, #1
   13db8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   13dba:	6013      	str	r3, [r2, #0]
   13dbc:	4ba6      	ldr	r3, [pc, #664]	; (14058 <_dtoa_r+0x34c>)
   13dbe:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13dc0:	930a      	str	r3, [sp, #40]	; 0x28
   13dc2:	2a00      	cmp	r2, #0
   13dc4:	d101      	bne.n	13dca <_dtoa_r+0xbe>
   13dc6:	f000 fd78 	bl	148ba <_dtoa_r+0xbae>
   13dca:	4aa4      	ldr	r2, [pc, #656]	; (1405c <_dtoa_r+0x350>)
   13dcc:	9926      	ldr	r1, [sp, #152]	; 0x98
   13dce:	600a      	str	r2, [r1, #0]
   13dd0:	f000 fd73 	bl	148ba <_dtoa_r+0xbae>
   13dd4:	ab1a      	add	r3, sp, #104	; 0x68
   13dd6:	9301      	str	r3, [sp, #4]
   13dd8:	ab1b      	add	r3, sp, #108	; 0x6c
   13dda:	9300      	str	r3, [sp, #0]
   13ddc:	0032      	movs	r2, r6
   13dde:	003b      	movs	r3, r7
   13de0:	9804      	ldr	r0, [sp, #16]
   13de2:	f001 fa3f 	bl	15264 <__d2b>
   13de6:	0063      	lsls	r3, r4, #1
   13de8:	9005      	str	r0, [sp, #20]
   13dea:	0d5b      	lsrs	r3, r3, #21
   13dec:	d100      	bne.n	13df0 <_dtoa_r+0xe4>
   13dee:	e07f      	b.n	13ef0 <_dtoa_r+0x1e4>
   13df0:	033a      	lsls	r2, r7, #12
   13df2:	4c9b      	ldr	r4, [pc, #620]	; (14060 <_dtoa_r+0x354>)
   13df4:	0b12      	lsrs	r2, r2, #12
   13df6:	4314      	orrs	r4, r2
   13df8:	0021      	movs	r1, r4
   13dfa:	4a9a      	ldr	r2, [pc, #616]	; (14064 <_dtoa_r+0x358>)
   13dfc:	0030      	movs	r0, r6
   13dfe:	9518      	str	r5, [sp, #96]	; 0x60
   13e00:	189e      	adds	r6, r3, r2
   13e02:	2200      	movs	r2, #0
   13e04:	4b98      	ldr	r3, [pc, #608]	; (14068 <_dtoa_r+0x35c>)
   13e06:	f003 ff4b 	bl	17ca0 <__aeabi_dsub>
   13e0a:	4a98      	ldr	r2, [pc, #608]	; (1406c <_dtoa_r+0x360>)
   13e0c:	4b98      	ldr	r3, [pc, #608]	; (14070 <_dtoa_r+0x364>)
   13e0e:	f003 fcc7 	bl	177a0 <__aeabi_dmul>
   13e12:	4a98      	ldr	r2, [pc, #608]	; (14074 <_dtoa_r+0x368>)
   13e14:	4b98      	ldr	r3, [pc, #608]	; (14078 <_dtoa_r+0x36c>)
   13e16:	f002 fd7f 	bl	16918 <__aeabi_dadd>
   13e1a:	0004      	movs	r4, r0
   13e1c:	0030      	movs	r0, r6
   13e1e:	000d      	movs	r5, r1
   13e20:	f004 faa8 	bl	18374 <__aeabi_i2d>
   13e24:	4a95      	ldr	r2, [pc, #596]	; (1407c <_dtoa_r+0x370>)
   13e26:	4b96      	ldr	r3, [pc, #600]	; (14080 <_dtoa_r+0x374>)
   13e28:	f003 fcba 	bl	177a0 <__aeabi_dmul>
   13e2c:	0002      	movs	r2, r0
   13e2e:	000b      	movs	r3, r1
   13e30:	0020      	movs	r0, r4
   13e32:	0029      	movs	r1, r5
   13e34:	f002 fd70 	bl	16918 <__aeabi_dadd>
   13e38:	0004      	movs	r4, r0
   13e3a:	000d      	movs	r5, r1
   13e3c:	f004 fa66 	bl	1830c <__aeabi_d2iz>
   13e40:	2200      	movs	r2, #0
   13e42:	9003      	str	r0, [sp, #12]
   13e44:	2300      	movs	r3, #0
   13e46:	0020      	movs	r0, r4
   13e48:	0029      	movs	r1, r5
   13e4a:	f001 fe6f 	bl	15b2c <__aeabi_dcmplt>
   13e4e:	2800      	cmp	r0, #0
   13e50:	d00e      	beq.n	13e70 <_dtoa_r+0x164>
   13e52:	9803      	ldr	r0, [sp, #12]
   13e54:	f004 fa8e 	bl	18374 <__aeabi_i2d>
   13e58:	000b      	movs	r3, r1
   13e5a:	0002      	movs	r2, r0
   13e5c:	0029      	movs	r1, r5
   13e5e:	0020      	movs	r0, r4
   13e60:	f001 fe5e 	bl	15b20 <__aeabi_dcmpeq>
   13e64:	0003      	movs	r3, r0
   13e66:	4258      	negs	r0, r3
   13e68:	4158      	adcs	r0, r3
   13e6a:	9b03      	ldr	r3, [sp, #12]
   13e6c:	1a1b      	subs	r3, r3, r0
   13e6e:	9303      	str	r3, [sp, #12]
   13e70:	2301      	movs	r3, #1
   13e72:	9316      	str	r3, [sp, #88]	; 0x58
   13e74:	9b03      	ldr	r3, [sp, #12]
   13e76:	2b16      	cmp	r3, #22
   13e78:	d80f      	bhi.n	13e9a <_dtoa_r+0x18e>
   13e7a:	4982      	ldr	r1, [pc, #520]	; (14084 <_dtoa_r+0x378>)
   13e7c:	00db      	lsls	r3, r3, #3
   13e7e:	18c9      	adds	r1, r1, r3
   13e80:	6808      	ldr	r0, [r1, #0]
   13e82:	6849      	ldr	r1, [r1, #4]
   13e84:	9a06      	ldr	r2, [sp, #24]
   13e86:	9b07      	ldr	r3, [sp, #28]
   13e88:	f001 fe64 	bl	15b54 <__aeabi_dcmpgt>
   13e8c:	2800      	cmp	r0, #0
   13e8e:	d04b      	beq.n	13f28 <_dtoa_r+0x21c>
   13e90:	9b03      	ldr	r3, [sp, #12]
   13e92:	3b01      	subs	r3, #1
   13e94:	9303      	str	r3, [sp, #12]
   13e96:	2300      	movs	r3, #0
   13e98:	9316      	str	r3, [sp, #88]	; 0x58
   13e9a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13e9c:	1b9e      	subs	r6, r3, r6
   13e9e:	2300      	movs	r3, #0
   13ea0:	930b      	str	r3, [sp, #44]	; 0x2c
   13ea2:	0033      	movs	r3, r6
   13ea4:	3b01      	subs	r3, #1
   13ea6:	930c      	str	r3, [sp, #48]	; 0x30
   13ea8:	d504      	bpl.n	13eb4 <_dtoa_r+0x1a8>
   13eaa:	2301      	movs	r3, #1
   13eac:	1b9b      	subs	r3, r3, r6
   13eae:	930b      	str	r3, [sp, #44]	; 0x2c
   13eb0:	2300      	movs	r3, #0
   13eb2:	930c      	str	r3, [sp, #48]	; 0x30
   13eb4:	9b03      	ldr	r3, [sp, #12]
   13eb6:	2b00      	cmp	r3, #0
   13eb8:	db38      	blt.n	13f2c <_dtoa_r+0x220>
   13eba:	9a03      	ldr	r2, [sp, #12]
   13ebc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13ebe:	4694      	mov	ip, r2
   13ec0:	4463      	add	r3, ip
   13ec2:	930c      	str	r3, [sp, #48]	; 0x30
   13ec4:	2300      	movs	r3, #0
   13ec6:	920f      	str	r2, [sp, #60]	; 0x3c
   13ec8:	9308      	str	r3, [sp, #32]
   13eca:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13ecc:	2501      	movs	r5, #1
   13ece:	2b09      	cmp	r3, #9
   13ed0:	d900      	bls.n	13ed4 <_dtoa_r+0x1c8>
   13ed2:	e091      	b.n	13ff8 <_dtoa_r+0x2ec>
   13ed4:	2b05      	cmp	r3, #5
   13ed6:	dd02      	ble.n	13ede <_dtoa_r+0x1d2>
   13ed8:	2500      	movs	r5, #0
   13eda:	3b04      	subs	r3, #4
   13edc:	9322      	str	r3, [sp, #136]	; 0x88
   13ede:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13ee0:	1e98      	subs	r0, r3, #2
   13ee2:	2803      	cmp	r0, #3
   13ee4:	d900      	bls.n	13ee8 <_dtoa_r+0x1dc>
   13ee6:	e091      	b.n	1400c <_dtoa_r+0x300>
   13ee8:	f001 fc8a 	bl	15800 <__gnu_thumb1_case_uqi>
   13eec:	76298482 	.word	0x76298482
   13ef0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13ef2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13ef4:	189e      	adds	r6, r3, r2
   13ef6:	4b64      	ldr	r3, [pc, #400]	; (14088 <_dtoa_r+0x37c>)
   13ef8:	18f2      	adds	r2, r6, r3
   13efa:	2a20      	cmp	r2, #32
   13efc:	dd0f      	ble.n	13f1e <_dtoa_r+0x212>
   13efe:	4b63      	ldr	r3, [pc, #396]	; (1408c <_dtoa_r+0x380>)
   13f00:	9806      	ldr	r0, [sp, #24]
   13f02:	18f3      	adds	r3, r6, r3
   13f04:	40d8      	lsrs	r0, r3
   13f06:	2340      	movs	r3, #64	; 0x40
   13f08:	1a9b      	subs	r3, r3, r2
   13f0a:	409c      	lsls	r4, r3
   13f0c:	4320      	orrs	r0, r4
   13f0e:	f004 fa73 	bl	183f8 <__aeabi_ui2d>
   13f12:	2301      	movs	r3, #1
   13f14:	4c5e      	ldr	r4, [pc, #376]	; (14090 <_dtoa_r+0x384>)
   13f16:	3e01      	subs	r6, #1
   13f18:	1909      	adds	r1, r1, r4
   13f1a:	9318      	str	r3, [sp, #96]	; 0x60
   13f1c:	e771      	b.n	13e02 <_dtoa_r+0xf6>
   13f1e:	2320      	movs	r3, #32
   13f20:	9806      	ldr	r0, [sp, #24]
   13f22:	1a9b      	subs	r3, r3, r2
   13f24:	4098      	lsls	r0, r3
   13f26:	e7f2      	b.n	13f0e <_dtoa_r+0x202>
   13f28:	9016      	str	r0, [sp, #88]	; 0x58
   13f2a:	e7b6      	b.n	13e9a <_dtoa_r+0x18e>
   13f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13f2e:	9a03      	ldr	r2, [sp, #12]
   13f30:	1a9b      	subs	r3, r3, r2
   13f32:	930b      	str	r3, [sp, #44]	; 0x2c
   13f34:	4253      	negs	r3, r2
   13f36:	9308      	str	r3, [sp, #32]
   13f38:	2300      	movs	r3, #0
   13f3a:	930f      	str	r3, [sp, #60]	; 0x3c
   13f3c:	e7c5      	b.n	13eca <_dtoa_r+0x1be>
   13f3e:	2301      	movs	r3, #1
   13f40:	930e      	str	r3, [sp, #56]	; 0x38
   13f42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13f44:	2b00      	cmp	r3, #0
   13f46:	dd65      	ble.n	14014 <_dtoa_r+0x308>
   13f48:	001f      	movs	r7, r3
   13f4a:	930d      	str	r3, [sp, #52]	; 0x34
   13f4c:	9a04      	ldr	r2, [sp, #16]
   13f4e:	6a54      	ldr	r4, [r2, #36]	; 0x24
   13f50:	2200      	movs	r2, #0
   13f52:	6062      	str	r2, [r4, #4]
   13f54:	3204      	adds	r2, #4
   13f56:	0011      	movs	r1, r2
   13f58:	3114      	adds	r1, #20
   13f5a:	4299      	cmp	r1, r3
   13f5c:	d95f      	bls.n	1401e <_dtoa_r+0x312>
   13f5e:	6861      	ldr	r1, [r4, #4]
   13f60:	9804      	ldr	r0, [sp, #16]
   13f62:	f000 fef0 	bl	14d46 <_Balloc>
   13f66:	9b04      	ldr	r3, [sp, #16]
   13f68:	6020      	str	r0, [r4, #0]
   13f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13f6c:	681b      	ldr	r3, [r3, #0]
   13f6e:	930a      	str	r3, [sp, #40]	; 0x28
   13f70:	2f0e      	cmp	r7, #14
   13f72:	d900      	bls.n	13f76 <_dtoa_r+0x26a>
   13f74:	e105      	b.n	14182 <_dtoa_r+0x476>
   13f76:	2d00      	cmp	r5, #0
   13f78:	d100      	bne.n	13f7c <_dtoa_r+0x270>
   13f7a:	e102      	b.n	14182 <_dtoa_r+0x476>
   13f7c:	9b06      	ldr	r3, [sp, #24]
   13f7e:	9c07      	ldr	r4, [sp, #28]
   13f80:	9314      	str	r3, [sp, #80]	; 0x50
   13f82:	9415      	str	r4, [sp, #84]	; 0x54
   13f84:	9b03      	ldr	r3, [sp, #12]
   13f86:	2b00      	cmp	r3, #0
   13f88:	dc00      	bgt.n	13f8c <_dtoa_r+0x280>
   13f8a:	e085      	b.n	14098 <_dtoa_r+0x38c>
   13f8c:	001a      	movs	r2, r3
   13f8e:	210f      	movs	r1, #15
   13f90:	4b3c      	ldr	r3, [pc, #240]	; (14084 <_dtoa_r+0x378>)
   13f92:	400a      	ands	r2, r1
   13f94:	00d2      	lsls	r2, r2, #3
   13f96:	189b      	adds	r3, r3, r2
   13f98:	685c      	ldr	r4, [r3, #4]
   13f9a:	681b      	ldr	r3, [r3, #0]
   13f9c:	9310      	str	r3, [sp, #64]	; 0x40
   13f9e:	9411      	str	r4, [sp, #68]	; 0x44
   13fa0:	9b03      	ldr	r3, [sp, #12]
   13fa2:	2402      	movs	r4, #2
   13fa4:	111d      	asrs	r5, r3, #4
   13fa6:	06eb      	lsls	r3, r5, #27
   13fa8:	d50a      	bpl.n	13fc0 <_dtoa_r+0x2b4>
   13faa:	4b3a      	ldr	r3, [pc, #232]	; (14094 <_dtoa_r+0x388>)
   13fac:	400d      	ands	r5, r1
   13fae:	6a1a      	ldr	r2, [r3, #32]
   13fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13fb2:	9814      	ldr	r0, [sp, #80]	; 0x50
   13fb4:	9915      	ldr	r1, [sp, #84]	; 0x54
   13fb6:	f002 ffbf 	bl	16f38 <__aeabi_ddiv>
   13fba:	9006      	str	r0, [sp, #24]
   13fbc:	9107      	str	r1, [sp, #28]
   13fbe:	3401      	adds	r4, #1
   13fc0:	4e34      	ldr	r6, [pc, #208]	; (14094 <_dtoa_r+0x388>)
   13fc2:	2d00      	cmp	r5, #0
   13fc4:	d130      	bne.n	14028 <_dtoa_r+0x31c>
   13fc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13fca:	9806      	ldr	r0, [sp, #24]
   13fcc:	9907      	ldr	r1, [sp, #28]
   13fce:	f002 ffb3 	bl	16f38 <__aeabi_ddiv>
   13fd2:	9006      	str	r0, [sp, #24]
   13fd4:	9107      	str	r1, [sp, #28]
   13fd6:	e07a      	b.n	140ce <_dtoa_r+0x3c2>
   13fd8:	2301      	movs	r3, #1
   13fda:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   13fdc:	930e      	str	r3, [sp, #56]	; 0x38
   13fde:	4694      	mov	ip, r2
   13fe0:	9b03      	ldr	r3, [sp, #12]
   13fe2:	4463      	add	r3, ip
   13fe4:	1c5f      	adds	r7, r3, #1
   13fe6:	930d      	str	r3, [sp, #52]	; 0x34
   13fe8:	1e3b      	subs	r3, r7, #0
   13fea:	dcaf      	bgt.n	13f4c <_dtoa_r+0x240>
   13fec:	2301      	movs	r3, #1
   13fee:	e7ad      	b.n	13f4c <_dtoa_r+0x240>
   13ff0:	2300      	movs	r3, #0
   13ff2:	e7a5      	b.n	13f40 <_dtoa_r+0x234>
   13ff4:	2300      	movs	r3, #0
   13ff6:	e7f0      	b.n	13fda <_dtoa_r+0x2ce>
   13ff8:	2300      	movs	r3, #0
   13ffa:	950e      	str	r5, [sp, #56]	; 0x38
   13ffc:	9322      	str	r3, [sp, #136]	; 0x88
   13ffe:	3b01      	subs	r3, #1
   14000:	2200      	movs	r2, #0
   14002:	930d      	str	r3, [sp, #52]	; 0x34
   14004:	001f      	movs	r7, r3
   14006:	3313      	adds	r3, #19
   14008:	9223      	str	r2, [sp, #140]	; 0x8c
   1400a:	e79f      	b.n	13f4c <_dtoa_r+0x240>
   1400c:	2301      	movs	r3, #1
   1400e:	930e      	str	r3, [sp, #56]	; 0x38
   14010:	3b02      	subs	r3, #2
   14012:	e7f5      	b.n	14000 <_dtoa_r+0x2f4>
   14014:	2301      	movs	r3, #1
   14016:	930d      	str	r3, [sp, #52]	; 0x34
   14018:	001f      	movs	r7, r3
   1401a:	001a      	movs	r2, r3
   1401c:	e7f4      	b.n	14008 <_dtoa_r+0x2fc>
   1401e:	6861      	ldr	r1, [r4, #4]
   14020:	0052      	lsls	r2, r2, #1
   14022:	3101      	adds	r1, #1
   14024:	6061      	str	r1, [r4, #4]
   14026:	e796      	b.n	13f56 <_dtoa_r+0x24a>
   14028:	2301      	movs	r3, #1
   1402a:	421d      	tst	r5, r3
   1402c:	d008      	beq.n	14040 <_dtoa_r+0x334>
   1402e:	9810      	ldr	r0, [sp, #64]	; 0x40
   14030:	9911      	ldr	r1, [sp, #68]	; 0x44
   14032:	18e4      	adds	r4, r4, r3
   14034:	6832      	ldr	r2, [r6, #0]
   14036:	6873      	ldr	r3, [r6, #4]
   14038:	f003 fbb2 	bl	177a0 <__aeabi_dmul>
   1403c:	9010      	str	r0, [sp, #64]	; 0x40
   1403e:	9111      	str	r1, [sp, #68]	; 0x44
   14040:	106d      	asrs	r5, r5, #1
   14042:	3608      	adds	r6, #8
   14044:	e7bd      	b.n	13fc2 <_dtoa_r+0x2b6>
   14046:	46c0      	nop			; (mov r8, r8)
   14048:	7ff00000 	.word	0x7ff00000
   1404c:	0000270f 	.word	0x0000270f
   14050:	0001bcc1 	.word	0x0001bcc1
   14054:	0001bcc4 	.word	0x0001bcc4
   14058:	0001bc94 	.word	0x0001bc94
   1405c:	0001bc95 	.word	0x0001bc95
   14060:	3ff00000 	.word	0x3ff00000
   14064:	fffffc01 	.word	0xfffffc01
   14068:	3ff80000 	.word	0x3ff80000
   1406c:	636f4361 	.word	0x636f4361
   14070:	3fd287a7 	.word	0x3fd287a7
   14074:	8b60c8b3 	.word	0x8b60c8b3
   14078:	3fc68a28 	.word	0x3fc68a28
   1407c:	509f79fb 	.word	0x509f79fb
   14080:	3fd34413 	.word	0x3fd34413
   14084:	0001bd60 	.word	0x0001bd60
   14088:	00000432 	.word	0x00000432
   1408c:	00000412 	.word	0x00000412
   14090:	fe100000 	.word	0xfe100000
   14094:	0001bd38 	.word	0x0001bd38
   14098:	9b03      	ldr	r3, [sp, #12]
   1409a:	2402      	movs	r4, #2
   1409c:	2b00      	cmp	r3, #0
   1409e:	d016      	beq.n	140ce <_dtoa_r+0x3c2>
   140a0:	9814      	ldr	r0, [sp, #80]	; 0x50
   140a2:	9915      	ldr	r1, [sp, #84]	; 0x54
   140a4:	425d      	negs	r5, r3
   140a6:	230f      	movs	r3, #15
   140a8:	4aca      	ldr	r2, [pc, #808]	; (143d4 <_dtoa_r+0x6c8>)
   140aa:	402b      	ands	r3, r5
   140ac:	00db      	lsls	r3, r3, #3
   140ae:	18d3      	adds	r3, r2, r3
   140b0:	681a      	ldr	r2, [r3, #0]
   140b2:	685b      	ldr	r3, [r3, #4]
   140b4:	f003 fb74 	bl	177a0 <__aeabi_dmul>
   140b8:	2300      	movs	r3, #0
   140ba:	9006      	str	r0, [sp, #24]
   140bc:	9107      	str	r1, [sp, #28]
   140be:	4ec6      	ldr	r6, [pc, #792]	; (143d8 <_dtoa_r+0x6cc>)
   140c0:	112d      	asrs	r5, r5, #4
   140c2:	2d00      	cmp	r5, #0
   140c4:	d000      	beq.n	140c8 <_dtoa_r+0x3bc>
   140c6:	e08c      	b.n	141e2 <_dtoa_r+0x4d6>
   140c8:	2b00      	cmp	r3, #0
   140ca:	d000      	beq.n	140ce <_dtoa_r+0x3c2>
   140cc:	e781      	b.n	13fd2 <_dtoa_r+0x2c6>
   140ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
   140d0:	2b00      	cmp	r3, #0
   140d2:	d100      	bne.n	140d6 <_dtoa_r+0x3ca>
   140d4:	e091      	b.n	141fa <_dtoa_r+0x4ee>
   140d6:	9a06      	ldr	r2, [sp, #24]
   140d8:	9b07      	ldr	r3, [sp, #28]
   140da:	9210      	str	r2, [sp, #64]	; 0x40
   140dc:	9311      	str	r3, [sp, #68]	; 0x44
   140de:	9810      	ldr	r0, [sp, #64]	; 0x40
   140e0:	9911      	ldr	r1, [sp, #68]	; 0x44
   140e2:	2200      	movs	r2, #0
   140e4:	4bbd      	ldr	r3, [pc, #756]	; (143dc <_dtoa_r+0x6d0>)
   140e6:	f001 fd21 	bl	15b2c <__aeabi_dcmplt>
   140ea:	2800      	cmp	r0, #0
   140ec:	d100      	bne.n	140f0 <_dtoa_r+0x3e4>
   140ee:	e084      	b.n	141fa <_dtoa_r+0x4ee>
   140f0:	2f00      	cmp	r7, #0
   140f2:	d100      	bne.n	140f6 <_dtoa_r+0x3ea>
   140f4:	e081      	b.n	141fa <_dtoa_r+0x4ee>
   140f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   140f8:	2b00      	cmp	r3, #0
   140fa:	dd3e      	ble.n	1417a <_dtoa_r+0x46e>
   140fc:	9810      	ldr	r0, [sp, #64]	; 0x40
   140fe:	9911      	ldr	r1, [sp, #68]	; 0x44
   14100:	9b03      	ldr	r3, [sp, #12]
   14102:	2200      	movs	r2, #0
   14104:	1e5e      	subs	r6, r3, #1
   14106:	4bb6      	ldr	r3, [pc, #728]	; (143e0 <_dtoa_r+0x6d4>)
   14108:	f003 fb4a 	bl	177a0 <__aeabi_dmul>
   1410c:	9006      	str	r0, [sp, #24]
   1410e:	9107      	str	r1, [sp, #28]
   14110:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14112:	3401      	adds	r4, #1
   14114:	0020      	movs	r0, r4
   14116:	f004 f92d 	bl	18374 <__aeabi_i2d>
   1411a:	9a06      	ldr	r2, [sp, #24]
   1411c:	9b07      	ldr	r3, [sp, #28]
   1411e:	f003 fb3f 	bl	177a0 <__aeabi_dmul>
   14122:	2200      	movs	r2, #0
   14124:	4baf      	ldr	r3, [pc, #700]	; (143e4 <_dtoa_r+0x6d8>)
   14126:	f002 fbf7 	bl	16918 <__aeabi_dadd>
   1412a:	9012      	str	r0, [sp, #72]	; 0x48
   1412c:	9113      	str	r1, [sp, #76]	; 0x4c
   1412e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14130:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   14132:	4aad      	ldr	r2, [pc, #692]	; (143e8 <_dtoa_r+0x6dc>)
   14134:	9310      	str	r3, [sp, #64]	; 0x40
   14136:	9411      	str	r4, [sp, #68]	; 0x44
   14138:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1413a:	189c      	adds	r4, r3, r2
   1413c:	9411      	str	r4, [sp, #68]	; 0x44
   1413e:	2d00      	cmp	r5, #0
   14140:	d15e      	bne.n	14200 <_dtoa_r+0x4f4>
   14142:	9806      	ldr	r0, [sp, #24]
   14144:	9907      	ldr	r1, [sp, #28]
   14146:	2200      	movs	r2, #0
   14148:	4ba8      	ldr	r3, [pc, #672]	; (143ec <_dtoa_r+0x6e0>)
   1414a:	f003 fda9 	bl	17ca0 <__aeabi_dsub>
   1414e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14150:	0023      	movs	r3, r4
   14152:	9006      	str	r0, [sp, #24]
   14154:	9107      	str	r1, [sp, #28]
   14156:	f001 fcfd 	bl	15b54 <__aeabi_dcmpgt>
   1415a:	2800      	cmp	r0, #0
   1415c:	d000      	beq.n	14160 <_dtoa_r+0x454>
   1415e:	e301      	b.n	14764 <_dtoa_r+0xa58>
   14160:	48a3      	ldr	r0, [pc, #652]	; (143f0 <_dtoa_r+0x6e4>)
   14162:	9913      	ldr	r1, [sp, #76]	; 0x4c
   14164:	4684      	mov	ip, r0
   14166:	4461      	add	r1, ip
   14168:	000b      	movs	r3, r1
   1416a:	9806      	ldr	r0, [sp, #24]
   1416c:	9907      	ldr	r1, [sp, #28]
   1416e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14170:	f001 fcdc 	bl	15b2c <__aeabi_dcmplt>
   14174:	2800      	cmp	r0, #0
   14176:	d000      	beq.n	1417a <_dtoa_r+0x46e>
   14178:	e2e8      	b.n	1474c <_dtoa_r+0xa40>
   1417a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1417c:	9c15      	ldr	r4, [sp, #84]	; 0x54
   1417e:	9306      	str	r3, [sp, #24]
   14180:	9407      	str	r4, [sp, #28]
   14182:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14184:	2b00      	cmp	r3, #0
   14186:	da00      	bge.n	1418a <_dtoa_r+0x47e>
   14188:	e157      	b.n	1443a <_dtoa_r+0x72e>
   1418a:	9a03      	ldr	r2, [sp, #12]
   1418c:	2a0e      	cmp	r2, #14
   1418e:	dd00      	ble.n	14192 <_dtoa_r+0x486>
   14190:	e153      	b.n	1443a <_dtoa_r+0x72e>
   14192:	4b90      	ldr	r3, [pc, #576]	; (143d4 <_dtoa_r+0x6c8>)
   14194:	00d2      	lsls	r2, r2, #3
   14196:	189b      	adds	r3, r3, r2
   14198:	685c      	ldr	r4, [r3, #4]
   1419a:	681b      	ldr	r3, [r3, #0]
   1419c:	9308      	str	r3, [sp, #32]
   1419e:	9409      	str	r4, [sp, #36]	; 0x24
   141a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   141a2:	2b00      	cmp	r3, #0
   141a4:	db00      	blt.n	141a8 <_dtoa_r+0x49c>
   141a6:	e0ce      	b.n	14346 <_dtoa_r+0x63a>
   141a8:	2f00      	cmp	r7, #0
   141aa:	dd00      	ble.n	141ae <_dtoa_r+0x4a2>
   141ac:	e0cb      	b.n	14346 <_dtoa_r+0x63a>
   141ae:	d000      	beq.n	141b2 <_dtoa_r+0x4a6>
   141b0:	e2cf      	b.n	14752 <_dtoa_r+0xa46>
   141b2:	9808      	ldr	r0, [sp, #32]
   141b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   141b6:	2200      	movs	r2, #0
   141b8:	4b8c      	ldr	r3, [pc, #560]	; (143ec <_dtoa_r+0x6e0>)
   141ba:	f003 faf1 	bl	177a0 <__aeabi_dmul>
   141be:	9a06      	ldr	r2, [sp, #24]
   141c0:	9b07      	ldr	r3, [sp, #28]
   141c2:	f001 fcd1 	bl	15b68 <__aeabi_dcmpge>
   141c6:	003e      	movs	r6, r7
   141c8:	9708      	str	r7, [sp, #32]
   141ca:	2800      	cmp	r0, #0
   141cc:	d000      	beq.n	141d0 <_dtoa_r+0x4c4>
   141ce:	e2a4      	b.n	1471a <_dtoa_r+0xa0e>
   141d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   141d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   141d4:	1c5d      	adds	r5, r3, #1
   141d6:	2331      	movs	r3, #49	; 0x31
   141d8:	7013      	strb	r3, [r2, #0]
   141da:	9b03      	ldr	r3, [sp, #12]
   141dc:	3301      	adds	r3, #1
   141de:	9303      	str	r3, [sp, #12]
   141e0:	e29f      	b.n	14722 <_dtoa_r+0xa16>
   141e2:	2201      	movs	r2, #1
   141e4:	4215      	tst	r5, r2
   141e6:	d005      	beq.n	141f4 <_dtoa_r+0x4e8>
   141e8:	18a4      	adds	r4, r4, r2
   141ea:	6832      	ldr	r2, [r6, #0]
   141ec:	6873      	ldr	r3, [r6, #4]
   141ee:	f003 fad7 	bl	177a0 <__aeabi_dmul>
   141f2:	2301      	movs	r3, #1
   141f4:	106d      	asrs	r5, r5, #1
   141f6:	3608      	adds	r6, #8
   141f8:	e763      	b.n	140c2 <_dtoa_r+0x3b6>
   141fa:	9e03      	ldr	r6, [sp, #12]
   141fc:	003d      	movs	r5, r7
   141fe:	e789      	b.n	14114 <_dtoa_r+0x408>
   14200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14202:	1e69      	subs	r1, r5, #1
   14204:	1952      	adds	r2, r2, r5
   14206:	9217      	str	r2, [sp, #92]	; 0x5c
   14208:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1420a:	4b72      	ldr	r3, [pc, #456]	; (143d4 <_dtoa_r+0x6c8>)
   1420c:	00c9      	lsls	r1, r1, #3
   1420e:	2a00      	cmp	r2, #0
   14210:	d04a      	beq.n	142a8 <_dtoa_r+0x59c>
   14212:	185b      	adds	r3, r3, r1
   14214:	681a      	ldr	r2, [r3, #0]
   14216:	685b      	ldr	r3, [r3, #4]
   14218:	2000      	movs	r0, #0
   1421a:	4976      	ldr	r1, [pc, #472]	; (143f4 <_dtoa_r+0x6e8>)
   1421c:	f002 fe8c 	bl	16f38 <__aeabi_ddiv>
   14220:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14222:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14224:	f003 fd3c 	bl	17ca0 <__aeabi_dsub>
   14228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1422a:	9010      	str	r0, [sp, #64]	; 0x40
   1422c:	9111      	str	r1, [sp, #68]	; 0x44
   1422e:	9312      	str	r3, [sp, #72]	; 0x48
   14230:	9806      	ldr	r0, [sp, #24]
   14232:	9907      	ldr	r1, [sp, #28]
   14234:	f004 f86a 	bl	1830c <__aeabi_d2iz>
   14238:	0004      	movs	r4, r0
   1423a:	f004 f89b 	bl	18374 <__aeabi_i2d>
   1423e:	0002      	movs	r2, r0
   14240:	000b      	movs	r3, r1
   14242:	9806      	ldr	r0, [sp, #24]
   14244:	9907      	ldr	r1, [sp, #28]
   14246:	f003 fd2b 	bl	17ca0 <__aeabi_dsub>
   1424a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1424c:	3430      	adds	r4, #48	; 0x30
   1424e:	1c5d      	adds	r5, r3, #1
   14250:	701c      	strb	r4, [r3, #0]
   14252:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14254:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14256:	9006      	str	r0, [sp, #24]
   14258:	9107      	str	r1, [sp, #28]
   1425a:	f001 fc67 	bl	15b2c <__aeabi_dcmplt>
   1425e:	2800      	cmp	r0, #0
   14260:	d165      	bne.n	1432e <_dtoa_r+0x622>
   14262:	9a06      	ldr	r2, [sp, #24]
   14264:	9b07      	ldr	r3, [sp, #28]
   14266:	2000      	movs	r0, #0
   14268:	495c      	ldr	r1, [pc, #368]	; (143dc <_dtoa_r+0x6d0>)
   1426a:	f003 fd19 	bl	17ca0 <__aeabi_dsub>
   1426e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14270:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14272:	f001 fc5b 	bl	15b2c <__aeabi_dcmplt>
   14276:	2800      	cmp	r0, #0
   14278:	d000      	beq.n	1427c <_dtoa_r+0x570>
   1427a:	e0be      	b.n	143fa <_dtoa_r+0x6ee>
   1427c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1427e:	429d      	cmp	r5, r3
   14280:	d100      	bne.n	14284 <_dtoa_r+0x578>
   14282:	e77a      	b.n	1417a <_dtoa_r+0x46e>
   14284:	9810      	ldr	r0, [sp, #64]	; 0x40
   14286:	9911      	ldr	r1, [sp, #68]	; 0x44
   14288:	2200      	movs	r2, #0
   1428a:	4b55      	ldr	r3, [pc, #340]	; (143e0 <_dtoa_r+0x6d4>)
   1428c:	f003 fa88 	bl	177a0 <__aeabi_dmul>
   14290:	2200      	movs	r2, #0
   14292:	9010      	str	r0, [sp, #64]	; 0x40
   14294:	9111      	str	r1, [sp, #68]	; 0x44
   14296:	9806      	ldr	r0, [sp, #24]
   14298:	9907      	ldr	r1, [sp, #28]
   1429a:	4b51      	ldr	r3, [pc, #324]	; (143e0 <_dtoa_r+0x6d4>)
   1429c:	f003 fa80 	bl	177a0 <__aeabi_dmul>
   142a0:	9512      	str	r5, [sp, #72]	; 0x48
   142a2:	9006      	str	r0, [sp, #24]
   142a4:	9107      	str	r1, [sp, #28]
   142a6:	e7c3      	b.n	14230 <_dtoa_r+0x524>
   142a8:	1859      	adds	r1, r3, r1
   142aa:	6808      	ldr	r0, [r1, #0]
   142ac:	6849      	ldr	r1, [r1, #4]
   142ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
   142b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   142b2:	f003 fa75 	bl	177a0 <__aeabi_dmul>
   142b6:	9010      	str	r0, [sp, #64]	; 0x40
   142b8:	9111      	str	r1, [sp, #68]	; 0x44
   142ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   142bc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   142be:	9806      	ldr	r0, [sp, #24]
   142c0:	9907      	ldr	r1, [sp, #28]
   142c2:	f004 f823 	bl	1830c <__aeabi_d2iz>
   142c6:	9012      	str	r0, [sp, #72]	; 0x48
   142c8:	f004 f854 	bl	18374 <__aeabi_i2d>
   142cc:	0002      	movs	r2, r0
   142ce:	000b      	movs	r3, r1
   142d0:	9806      	ldr	r0, [sp, #24]
   142d2:	9907      	ldr	r1, [sp, #28]
   142d4:	f003 fce4 	bl	17ca0 <__aeabi_dsub>
   142d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   142da:	9006      	str	r0, [sp, #24]
   142dc:	9107      	str	r1, [sp, #28]
   142de:	3330      	adds	r3, #48	; 0x30
   142e0:	7023      	strb	r3, [r4, #0]
   142e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   142e4:	3401      	adds	r4, #1
   142e6:	2200      	movs	r2, #0
   142e8:	42a3      	cmp	r3, r4
   142ea:	d124      	bne.n	14336 <_dtoa_r+0x62a>
   142ec:	4b41      	ldr	r3, [pc, #260]	; (143f4 <_dtoa_r+0x6e8>)
   142ee:	9810      	ldr	r0, [sp, #64]	; 0x40
   142f0:	9911      	ldr	r1, [sp, #68]	; 0x44
   142f2:	f002 fb11 	bl	16918 <__aeabi_dadd>
   142f6:	0002      	movs	r2, r0
   142f8:	000b      	movs	r3, r1
   142fa:	9806      	ldr	r0, [sp, #24]
   142fc:	9907      	ldr	r1, [sp, #28]
   142fe:	f001 fc29 	bl	15b54 <__aeabi_dcmpgt>
   14302:	2800      	cmp	r0, #0
   14304:	d000      	beq.n	14308 <_dtoa_r+0x5fc>
   14306:	e078      	b.n	143fa <_dtoa_r+0x6ee>
   14308:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1430a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1430c:	2000      	movs	r0, #0
   1430e:	4939      	ldr	r1, [pc, #228]	; (143f4 <_dtoa_r+0x6e8>)
   14310:	f003 fcc6 	bl	17ca0 <__aeabi_dsub>
   14314:	0002      	movs	r2, r0
   14316:	000b      	movs	r3, r1
   14318:	9806      	ldr	r0, [sp, #24]
   1431a:	9907      	ldr	r1, [sp, #28]
   1431c:	f001 fc06 	bl	15b2c <__aeabi_dcmplt>
   14320:	2800      	cmp	r0, #0
   14322:	d100      	bne.n	14326 <_dtoa_r+0x61a>
   14324:	e729      	b.n	1417a <_dtoa_r+0x46e>
   14326:	1e6b      	subs	r3, r5, #1
   14328:	781a      	ldrb	r2, [r3, #0]
   1432a:	2a30      	cmp	r2, #48	; 0x30
   1432c:	d001      	beq.n	14332 <_dtoa_r+0x626>
   1432e:	9603      	str	r6, [sp, #12]
   14330:	e03f      	b.n	143b2 <_dtoa_r+0x6a6>
   14332:	001d      	movs	r5, r3
   14334:	e7f7      	b.n	14326 <_dtoa_r+0x61a>
   14336:	9806      	ldr	r0, [sp, #24]
   14338:	9907      	ldr	r1, [sp, #28]
   1433a:	4b29      	ldr	r3, [pc, #164]	; (143e0 <_dtoa_r+0x6d4>)
   1433c:	f003 fa30 	bl	177a0 <__aeabi_dmul>
   14340:	9006      	str	r0, [sp, #24]
   14342:	9107      	str	r1, [sp, #28]
   14344:	e7bb      	b.n	142be <_dtoa_r+0x5b2>
   14346:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   14348:	9a08      	ldr	r2, [sp, #32]
   1434a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1434c:	9806      	ldr	r0, [sp, #24]
   1434e:	9907      	ldr	r1, [sp, #28]
   14350:	f002 fdf2 	bl	16f38 <__aeabi_ddiv>
   14354:	f003 ffda 	bl	1830c <__aeabi_d2iz>
   14358:	0004      	movs	r4, r0
   1435a:	f004 f80b 	bl	18374 <__aeabi_i2d>
   1435e:	9a08      	ldr	r2, [sp, #32]
   14360:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14362:	f003 fa1d 	bl	177a0 <__aeabi_dmul>
   14366:	000b      	movs	r3, r1
   14368:	0002      	movs	r2, r0
   1436a:	9806      	ldr	r0, [sp, #24]
   1436c:	9907      	ldr	r1, [sp, #28]
   1436e:	f003 fc97 	bl	17ca0 <__aeabi_dsub>
   14372:	0023      	movs	r3, r4
   14374:	3330      	adds	r3, #48	; 0x30
   14376:	7033      	strb	r3, [r6, #0]
   14378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1437a:	1c75      	adds	r5, r6, #1
   1437c:	1aeb      	subs	r3, r5, r3
   1437e:	429f      	cmp	r7, r3
   14380:	d14c      	bne.n	1441c <_dtoa_r+0x710>
   14382:	0002      	movs	r2, r0
   14384:	000b      	movs	r3, r1
   14386:	f002 fac7 	bl	16918 <__aeabi_dadd>
   1438a:	0006      	movs	r6, r0
   1438c:	000f      	movs	r7, r1
   1438e:	0002      	movs	r2, r0
   14390:	000b      	movs	r3, r1
   14392:	9808      	ldr	r0, [sp, #32]
   14394:	9909      	ldr	r1, [sp, #36]	; 0x24
   14396:	f001 fbc9 	bl	15b2c <__aeabi_dcmplt>
   1439a:	2800      	cmp	r0, #0
   1439c:	d12c      	bne.n	143f8 <_dtoa_r+0x6ec>
   1439e:	9808      	ldr	r0, [sp, #32]
   143a0:	9909      	ldr	r1, [sp, #36]	; 0x24
   143a2:	0032      	movs	r2, r6
   143a4:	003b      	movs	r3, r7
   143a6:	f001 fbbb 	bl	15b20 <__aeabi_dcmpeq>
   143aa:	2800      	cmp	r0, #0
   143ac:	d001      	beq.n	143b2 <_dtoa_r+0x6a6>
   143ae:	07e3      	lsls	r3, r4, #31
   143b0:	d422      	bmi.n	143f8 <_dtoa_r+0x6ec>
   143b2:	9905      	ldr	r1, [sp, #20]
   143b4:	9804      	ldr	r0, [sp, #16]
   143b6:	f000 fcfe 	bl	14db6 <_Bfree>
   143ba:	2300      	movs	r3, #0
   143bc:	702b      	strb	r3, [r5, #0]
   143be:	9b03      	ldr	r3, [sp, #12]
   143c0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   143c2:	3301      	adds	r3, #1
   143c4:	6013      	str	r3, [r2, #0]
   143c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   143c8:	2b00      	cmp	r3, #0
   143ca:	d100      	bne.n	143ce <_dtoa_r+0x6c2>
   143cc:	e275      	b.n	148ba <_dtoa_r+0xbae>
   143ce:	601d      	str	r5, [r3, #0]
   143d0:	e273      	b.n	148ba <_dtoa_r+0xbae>
   143d2:	46c0      	nop			; (mov r8, r8)
   143d4:	0001bd60 	.word	0x0001bd60
   143d8:	0001bd38 	.word	0x0001bd38
   143dc:	3ff00000 	.word	0x3ff00000
   143e0:	40240000 	.word	0x40240000
   143e4:	401c0000 	.word	0x401c0000
   143e8:	fcc00000 	.word	0xfcc00000
   143ec:	40140000 	.word	0x40140000
   143f0:	7cc00000 	.word	0x7cc00000
   143f4:	3fe00000 	.word	0x3fe00000
   143f8:	9e03      	ldr	r6, [sp, #12]
   143fa:	1e6b      	subs	r3, r5, #1
   143fc:	781a      	ldrb	r2, [r3, #0]
   143fe:	2a39      	cmp	r2, #57	; 0x39
   14400:	d106      	bne.n	14410 <_dtoa_r+0x704>
   14402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14404:	429a      	cmp	r2, r3
   14406:	d107      	bne.n	14418 <_dtoa_r+0x70c>
   14408:	2330      	movs	r3, #48	; 0x30
   1440a:	7013      	strb	r3, [r2, #0]
   1440c:	0013      	movs	r3, r2
   1440e:	3601      	adds	r6, #1
   14410:	781a      	ldrb	r2, [r3, #0]
   14412:	3201      	adds	r2, #1
   14414:	701a      	strb	r2, [r3, #0]
   14416:	e78a      	b.n	1432e <_dtoa_r+0x622>
   14418:	001d      	movs	r5, r3
   1441a:	e7ee      	b.n	143fa <_dtoa_r+0x6ee>
   1441c:	2200      	movs	r2, #0
   1441e:	4bcf      	ldr	r3, [pc, #828]	; (1475c <_dtoa_r+0xa50>)
   14420:	f003 f9be 	bl	177a0 <__aeabi_dmul>
   14424:	2200      	movs	r2, #0
   14426:	2300      	movs	r3, #0
   14428:	9006      	str	r0, [sp, #24]
   1442a:	9107      	str	r1, [sp, #28]
   1442c:	002e      	movs	r6, r5
   1442e:	f001 fb77 	bl	15b20 <__aeabi_dcmpeq>
   14432:	2800      	cmp	r0, #0
   14434:	d100      	bne.n	14438 <_dtoa_r+0x72c>
   14436:	e787      	b.n	14348 <_dtoa_r+0x63c>
   14438:	e7bb      	b.n	143b2 <_dtoa_r+0x6a6>
   1443a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1443c:	2a00      	cmp	r2, #0
   1443e:	d100      	bne.n	14442 <_dtoa_r+0x736>
   14440:	e087      	b.n	14552 <_dtoa_r+0x846>
   14442:	9a22      	ldr	r2, [sp, #136]	; 0x88
   14444:	2a01      	cmp	r2, #1
   14446:	dc6e      	bgt.n	14526 <_dtoa_r+0x81a>
   14448:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1444a:	2a00      	cmp	r2, #0
   1444c:	d067      	beq.n	1451e <_dtoa_r+0x812>
   1444e:	4ac4      	ldr	r2, [pc, #784]	; (14760 <_dtoa_r+0xa54>)
   14450:	189b      	adds	r3, r3, r2
   14452:	9d08      	ldr	r5, [sp, #32]
   14454:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   14456:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14458:	2101      	movs	r1, #1
   1445a:	18d2      	adds	r2, r2, r3
   1445c:	920b      	str	r2, [sp, #44]	; 0x2c
   1445e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14460:	9804      	ldr	r0, [sp, #16]
   14462:	18d3      	adds	r3, r2, r3
   14464:	930c      	str	r3, [sp, #48]	; 0x30
   14466:	f000 fd44 	bl	14ef2 <__i2b>
   1446a:	0006      	movs	r6, r0
   1446c:	2c00      	cmp	r4, #0
   1446e:	dd0e      	ble.n	1448e <_dtoa_r+0x782>
   14470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14472:	2b00      	cmp	r3, #0
   14474:	dd0b      	ble.n	1448e <_dtoa_r+0x782>
   14476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14478:	0023      	movs	r3, r4
   1447a:	4294      	cmp	r4, r2
   1447c:	dd00      	ble.n	14480 <_dtoa_r+0x774>
   1447e:	0013      	movs	r3, r2
   14480:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14482:	1ae4      	subs	r4, r4, r3
   14484:	1ad2      	subs	r2, r2, r3
   14486:	920b      	str	r2, [sp, #44]	; 0x2c
   14488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1448a:	1ad3      	subs	r3, r2, r3
   1448c:	930c      	str	r3, [sp, #48]	; 0x30
   1448e:	9b08      	ldr	r3, [sp, #32]
   14490:	2b00      	cmp	r3, #0
   14492:	d01e      	beq.n	144d2 <_dtoa_r+0x7c6>
   14494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14496:	2b00      	cmp	r3, #0
   14498:	d05f      	beq.n	1455a <_dtoa_r+0x84e>
   1449a:	2d00      	cmp	r5, #0
   1449c:	dd11      	ble.n	144c2 <_dtoa_r+0x7b6>
   1449e:	0031      	movs	r1, r6
   144a0:	002a      	movs	r2, r5
   144a2:	9804      	ldr	r0, [sp, #16]
   144a4:	f000 fdbe 	bl	15024 <__pow5mult>
   144a8:	9a05      	ldr	r2, [sp, #20]
   144aa:	0001      	movs	r1, r0
   144ac:	0006      	movs	r6, r0
   144ae:	9804      	ldr	r0, [sp, #16]
   144b0:	f000 fd28 	bl	14f04 <__multiply>
   144b4:	9905      	ldr	r1, [sp, #20]
   144b6:	9010      	str	r0, [sp, #64]	; 0x40
   144b8:	9804      	ldr	r0, [sp, #16]
   144ba:	f000 fc7c 	bl	14db6 <_Bfree>
   144be:	9b10      	ldr	r3, [sp, #64]	; 0x40
   144c0:	9305      	str	r3, [sp, #20]
   144c2:	9b08      	ldr	r3, [sp, #32]
   144c4:	1b5a      	subs	r2, r3, r5
   144c6:	d004      	beq.n	144d2 <_dtoa_r+0x7c6>
   144c8:	9905      	ldr	r1, [sp, #20]
   144ca:	9804      	ldr	r0, [sp, #16]
   144cc:	f000 fdaa 	bl	15024 <__pow5mult>
   144d0:	9005      	str	r0, [sp, #20]
   144d2:	2101      	movs	r1, #1
   144d4:	9804      	ldr	r0, [sp, #16]
   144d6:	f000 fd0c 	bl	14ef2 <__i2b>
   144da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   144dc:	9008      	str	r0, [sp, #32]
   144de:	2b00      	cmp	r3, #0
   144e0:	dd3d      	ble.n	1455e <_dtoa_r+0x852>
   144e2:	001a      	movs	r2, r3
   144e4:	0001      	movs	r1, r0
   144e6:	9804      	ldr	r0, [sp, #16]
   144e8:	f000 fd9c 	bl	15024 <__pow5mult>
   144ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
   144ee:	9008      	str	r0, [sp, #32]
   144f0:	2500      	movs	r5, #0
   144f2:	2b01      	cmp	r3, #1
   144f4:	dc3b      	bgt.n	1456e <_dtoa_r+0x862>
   144f6:	2500      	movs	r5, #0
   144f8:	9b06      	ldr	r3, [sp, #24]
   144fa:	42ab      	cmp	r3, r5
   144fc:	d133      	bne.n	14566 <_dtoa_r+0x85a>
   144fe:	9b07      	ldr	r3, [sp, #28]
   14500:	031b      	lsls	r3, r3, #12
   14502:	42ab      	cmp	r3, r5
   14504:	d12f      	bne.n	14566 <_dtoa_r+0x85a>
   14506:	9b19      	ldr	r3, [sp, #100]	; 0x64
   14508:	9a07      	ldr	r2, [sp, #28]
   1450a:	4213      	tst	r3, r2
   1450c:	d02b      	beq.n	14566 <_dtoa_r+0x85a>
   1450e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14510:	3501      	adds	r5, #1
   14512:	3301      	adds	r3, #1
   14514:	930b      	str	r3, [sp, #44]	; 0x2c
   14516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14518:	3301      	adds	r3, #1
   1451a:	930c      	str	r3, [sp, #48]	; 0x30
   1451c:	e023      	b.n	14566 <_dtoa_r+0x85a>
   1451e:	2336      	movs	r3, #54	; 0x36
   14520:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   14522:	1a9b      	subs	r3, r3, r2
   14524:	e795      	b.n	14452 <_dtoa_r+0x746>
   14526:	9b08      	ldr	r3, [sp, #32]
   14528:	1e7d      	subs	r5, r7, #1
   1452a:	42ab      	cmp	r3, r5
   1452c:	db06      	blt.n	1453c <_dtoa_r+0x830>
   1452e:	1b5d      	subs	r5, r3, r5
   14530:	2f00      	cmp	r7, #0
   14532:	da0b      	bge.n	1454c <_dtoa_r+0x840>
   14534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14536:	1bdc      	subs	r4, r3, r7
   14538:	2300      	movs	r3, #0
   1453a:	e78c      	b.n	14456 <_dtoa_r+0x74a>
   1453c:	9b08      	ldr	r3, [sp, #32]
   1453e:	9508      	str	r5, [sp, #32]
   14540:	1aea      	subs	r2, r5, r3
   14542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14544:	2500      	movs	r5, #0
   14546:	189b      	adds	r3, r3, r2
   14548:	930f      	str	r3, [sp, #60]	; 0x3c
   1454a:	e7f1      	b.n	14530 <_dtoa_r+0x824>
   1454c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1454e:	003b      	movs	r3, r7
   14550:	e781      	b.n	14456 <_dtoa_r+0x74a>
   14552:	9d08      	ldr	r5, [sp, #32]
   14554:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   14556:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   14558:	e788      	b.n	1446c <_dtoa_r+0x760>
   1455a:	9a08      	ldr	r2, [sp, #32]
   1455c:	e7b4      	b.n	144c8 <_dtoa_r+0x7bc>
   1455e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14560:	2500      	movs	r5, #0
   14562:	2b01      	cmp	r3, #1
   14564:	ddc7      	ble.n	144f6 <_dtoa_r+0x7ea>
   14566:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14568:	2001      	movs	r0, #1
   1456a:	2b00      	cmp	r3, #0
   1456c:	d00b      	beq.n	14586 <_dtoa_r+0x87a>
   1456e:	9b08      	ldr	r3, [sp, #32]
   14570:	9a08      	ldr	r2, [sp, #32]
   14572:	691b      	ldr	r3, [r3, #16]
   14574:	930f      	str	r3, [sp, #60]	; 0x3c
   14576:	3303      	adds	r3, #3
   14578:	009b      	lsls	r3, r3, #2
   1457a:	18d3      	adds	r3, r2, r3
   1457c:	6858      	ldr	r0, [r3, #4]
   1457e:	f000 fc6f 	bl	14e60 <__hi0bits>
   14582:	2320      	movs	r3, #32
   14584:	1a18      	subs	r0, r3, r0
   14586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14588:	18c0      	adds	r0, r0, r3
   1458a:	231f      	movs	r3, #31
   1458c:	4018      	ands	r0, r3
   1458e:	d100      	bne.n	14592 <_dtoa_r+0x886>
   14590:	e0ab      	b.n	146ea <_dtoa_r+0x9de>
   14592:	3301      	adds	r3, #1
   14594:	1a1b      	subs	r3, r3, r0
   14596:	2b04      	cmp	r3, #4
   14598:	dc00      	bgt.n	1459c <_dtoa_r+0x890>
   1459a:	e09b      	b.n	146d4 <_dtoa_r+0x9c8>
   1459c:	231c      	movs	r3, #28
   1459e:	1a18      	subs	r0, r3, r0
   145a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   145a2:	1824      	adds	r4, r4, r0
   145a4:	181b      	adds	r3, r3, r0
   145a6:	930b      	str	r3, [sp, #44]	; 0x2c
   145a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   145aa:	181b      	adds	r3, r3, r0
   145ac:	930c      	str	r3, [sp, #48]	; 0x30
   145ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   145b0:	2b00      	cmp	r3, #0
   145b2:	dd05      	ble.n	145c0 <_dtoa_r+0x8b4>
   145b4:	001a      	movs	r2, r3
   145b6:	9905      	ldr	r1, [sp, #20]
   145b8:	9804      	ldr	r0, [sp, #16]
   145ba:	f000 fd85 	bl	150c8 <__lshift>
   145be:	9005      	str	r0, [sp, #20]
   145c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   145c2:	2b00      	cmp	r3, #0
   145c4:	dd05      	ble.n	145d2 <_dtoa_r+0x8c6>
   145c6:	001a      	movs	r2, r3
   145c8:	9908      	ldr	r1, [sp, #32]
   145ca:	9804      	ldr	r0, [sp, #16]
   145cc:	f000 fd7c 	bl	150c8 <__lshift>
   145d0:	9008      	str	r0, [sp, #32]
   145d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   145d4:	2b00      	cmp	r3, #0
   145d6:	d100      	bne.n	145da <_dtoa_r+0x8ce>
   145d8:	e089      	b.n	146ee <_dtoa_r+0x9e2>
   145da:	9908      	ldr	r1, [sp, #32]
   145dc:	9805      	ldr	r0, [sp, #20]
   145de:	f000 fdc4 	bl	1516a <__mcmp>
   145e2:	2800      	cmp	r0, #0
   145e4:	db00      	blt.n	145e8 <_dtoa_r+0x8dc>
   145e6:	e082      	b.n	146ee <_dtoa_r+0x9e2>
   145e8:	9b03      	ldr	r3, [sp, #12]
   145ea:	220a      	movs	r2, #10
   145ec:	3b01      	subs	r3, #1
   145ee:	9303      	str	r3, [sp, #12]
   145f0:	9905      	ldr	r1, [sp, #20]
   145f2:	2300      	movs	r3, #0
   145f4:	9804      	ldr	r0, [sp, #16]
   145f6:	f000 fbf7 	bl	14de8 <__multadd>
   145fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   145fc:	9005      	str	r0, [sp, #20]
   145fe:	2b00      	cmp	r3, #0
   14600:	d100      	bne.n	14604 <_dtoa_r+0x8f8>
   14602:	e15d      	b.n	148c0 <_dtoa_r+0xbb4>
   14604:	2300      	movs	r3, #0
   14606:	0031      	movs	r1, r6
   14608:	220a      	movs	r2, #10
   1460a:	9804      	ldr	r0, [sp, #16]
   1460c:	f000 fbec 	bl	14de8 <__multadd>
   14610:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14612:	0006      	movs	r6, r0
   14614:	2b00      	cmp	r3, #0
   14616:	dc02      	bgt.n	1461e <_dtoa_r+0x912>
   14618:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1461a:	2b02      	cmp	r3, #2
   1461c:	dc6d      	bgt.n	146fa <_dtoa_r+0x9ee>
   1461e:	2c00      	cmp	r4, #0
   14620:	dd05      	ble.n	1462e <_dtoa_r+0x922>
   14622:	0031      	movs	r1, r6
   14624:	0022      	movs	r2, r4
   14626:	9804      	ldr	r0, [sp, #16]
   14628:	f000 fd4e 	bl	150c8 <__lshift>
   1462c:	0006      	movs	r6, r0
   1462e:	0030      	movs	r0, r6
   14630:	2d00      	cmp	r5, #0
   14632:	d011      	beq.n	14658 <_dtoa_r+0x94c>
   14634:	6871      	ldr	r1, [r6, #4]
   14636:	9804      	ldr	r0, [sp, #16]
   14638:	f000 fb85 	bl	14d46 <_Balloc>
   1463c:	0031      	movs	r1, r6
   1463e:	0004      	movs	r4, r0
   14640:	6933      	ldr	r3, [r6, #16]
   14642:	310c      	adds	r1, #12
   14644:	1c9a      	adds	r2, r3, #2
   14646:	0092      	lsls	r2, r2, #2
   14648:	300c      	adds	r0, #12
   1464a:	f7fe fa7f 	bl	12b4c <memcpy>
   1464e:	2201      	movs	r2, #1
   14650:	0021      	movs	r1, r4
   14652:	9804      	ldr	r0, [sp, #16]
   14654:	f000 fd38 	bl	150c8 <__lshift>
   14658:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1465a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1465c:	3f01      	subs	r7, #1
   1465e:	930b      	str	r3, [sp, #44]	; 0x2c
   14660:	19db      	adds	r3, r3, r7
   14662:	0037      	movs	r7, r6
   14664:	0006      	movs	r6, r0
   14666:	930f      	str	r3, [sp, #60]	; 0x3c
   14668:	9908      	ldr	r1, [sp, #32]
   1466a:	9805      	ldr	r0, [sp, #20]
   1466c:	f7ff faca 	bl	13c04 <quorem>
   14670:	0039      	movs	r1, r7
   14672:	900d      	str	r0, [sp, #52]	; 0x34
   14674:	0004      	movs	r4, r0
   14676:	9805      	ldr	r0, [sp, #20]
   14678:	f000 fd77 	bl	1516a <__mcmp>
   1467c:	0032      	movs	r2, r6
   1467e:	900e      	str	r0, [sp, #56]	; 0x38
   14680:	9908      	ldr	r1, [sp, #32]
   14682:	9804      	ldr	r0, [sp, #16]
   14684:	f000 fd8a 	bl	1519c <__mdiff>
   14688:	2301      	movs	r3, #1
   1468a:	930c      	str	r3, [sp, #48]	; 0x30
   1468c:	68c3      	ldr	r3, [r0, #12]
   1468e:	3430      	adds	r4, #48	; 0x30
   14690:	0005      	movs	r5, r0
   14692:	2b00      	cmp	r3, #0
   14694:	d104      	bne.n	146a0 <_dtoa_r+0x994>
   14696:	0001      	movs	r1, r0
   14698:	9805      	ldr	r0, [sp, #20]
   1469a:	f000 fd66 	bl	1516a <__mcmp>
   1469e:	900c      	str	r0, [sp, #48]	; 0x30
   146a0:	0029      	movs	r1, r5
   146a2:	9804      	ldr	r0, [sp, #16]
   146a4:	f000 fb87 	bl	14db6 <_Bfree>
   146a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   146aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
   146ac:	4313      	orrs	r3, r2
   146ae:	d000      	beq.n	146b2 <_dtoa_r+0x9a6>
   146b0:	e089      	b.n	147c6 <_dtoa_r+0xaba>
   146b2:	9a06      	ldr	r2, [sp, #24]
   146b4:	3301      	adds	r3, #1
   146b6:	4213      	tst	r3, r2
   146b8:	d000      	beq.n	146bc <_dtoa_r+0x9b0>
   146ba:	e084      	b.n	147c6 <_dtoa_r+0xaba>
   146bc:	2c39      	cmp	r4, #57	; 0x39
   146be:	d100      	bne.n	146c2 <_dtoa_r+0x9b6>
   146c0:	e0a3      	b.n	1480a <_dtoa_r+0xafe>
   146c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   146c4:	2b00      	cmp	r3, #0
   146c6:	dd01      	ble.n	146cc <_dtoa_r+0x9c0>
   146c8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   146ca:	3431      	adds	r4, #49	; 0x31
   146cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   146ce:	1c5d      	adds	r5, r3, #1
   146d0:	701c      	strb	r4, [r3, #0]
   146d2:	e027      	b.n	14724 <_dtoa_r+0xa18>
   146d4:	2b04      	cmp	r3, #4
   146d6:	d100      	bne.n	146da <_dtoa_r+0x9ce>
   146d8:	e769      	b.n	145ae <_dtoa_r+0x8a2>
   146da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   146dc:	331c      	adds	r3, #28
   146de:	18d2      	adds	r2, r2, r3
   146e0:	920b      	str	r2, [sp, #44]	; 0x2c
   146e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   146e4:	18e4      	adds	r4, r4, r3
   146e6:	18d3      	adds	r3, r2, r3
   146e8:	e760      	b.n	145ac <_dtoa_r+0x8a0>
   146ea:	0003      	movs	r3, r0
   146ec:	e7f5      	b.n	146da <_dtoa_r+0x9ce>
   146ee:	2f00      	cmp	r7, #0
   146f0:	dc3c      	bgt.n	1476c <_dtoa_r+0xa60>
   146f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   146f4:	2b02      	cmp	r3, #2
   146f6:	dd39      	ble.n	1476c <_dtoa_r+0xa60>
   146f8:	970d      	str	r7, [sp, #52]	; 0x34
   146fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   146fc:	2b00      	cmp	r3, #0
   146fe:	d10c      	bne.n	1471a <_dtoa_r+0xa0e>
   14700:	9908      	ldr	r1, [sp, #32]
   14702:	2205      	movs	r2, #5
   14704:	9804      	ldr	r0, [sp, #16]
   14706:	f000 fb6f 	bl	14de8 <__multadd>
   1470a:	9008      	str	r0, [sp, #32]
   1470c:	0001      	movs	r1, r0
   1470e:	9805      	ldr	r0, [sp, #20]
   14710:	f000 fd2b 	bl	1516a <__mcmp>
   14714:	2800      	cmp	r0, #0
   14716:	dd00      	ble.n	1471a <_dtoa_r+0xa0e>
   14718:	e55a      	b.n	141d0 <_dtoa_r+0x4c4>
   1471a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1471c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1471e:	43db      	mvns	r3, r3
   14720:	9303      	str	r3, [sp, #12]
   14722:	2700      	movs	r7, #0
   14724:	9908      	ldr	r1, [sp, #32]
   14726:	9804      	ldr	r0, [sp, #16]
   14728:	f000 fb45 	bl	14db6 <_Bfree>
   1472c:	2e00      	cmp	r6, #0
   1472e:	d100      	bne.n	14732 <_dtoa_r+0xa26>
   14730:	e63f      	b.n	143b2 <_dtoa_r+0x6a6>
   14732:	2f00      	cmp	r7, #0
   14734:	d005      	beq.n	14742 <_dtoa_r+0xa36>
   14736:	42b7      	cmp	r7, r6
   14738:	d003      	beq.n	14742 <_dtoa_r+0xa36>
   1473a:	0039      	movs	r1, r7
   1473c:	9804      	ldr	r0, [sp, #16]
   1473e:	f000 fb3a 	bl	14db6 <_Bfree>
   14742:	0031      	movs	r1, r6
   14744:	9804      	ldr	r0, [sp, #16]
   14746:	f000 fb36 	bl	14db6 <_Bfree>
   1474a:	e632      	b.n	143b2 <_dtoa_r+0x6a6>
   1474c:	9508      	str	r5, [sp, #32]
   1474e:	002e      	movs	r6, r5
   14750:	e7e3      	b.n	1471a <_dtoa_r+0xa0e>
   14752:	2300      	movs	r3, #0
   14754:	9308      	str	r3, [sp, #32]
   14756:	001e      	movs	r6, r3
   14758:	e7df      	b.n	1471a <_dtoa_r+0xa0e>
   1475a:	46c0      	nop			; (mov r8, r8)
   1475c:	40240000 	.word	0x40240000
   14760:	00000433 	.word	0x00000433
   14764:	9603      	str	r6, [sp, #12]
   14766:	9508      	str	r5, [sp, #32]
   14768:	002e      	movs	r6, r5
   1476a:	e531      	b.n	141d0 <_dtoa_r+0x4c4>
   1476c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1476e:	970d      	str	r7, [sp, #52]	; 0x34
   14770:	2b00      	cmp	r3, #0
   14772:	d000      	beq.n	14776 <_dtoa_r+0xa6a>
   14774:	e753      	b.n	1461e <_dtoa_r+0x912>
   14776:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14778:	9908      	ldr	r1, [sp, #32]
   1477a:	9805      	ldr	r0, [sp, #20]
   1477c:	f7ff fa42 	bl	13c04 <quorem>
   14780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14782:	3030      	adds	r0, #48	; 0x30
   14784:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14786:	7028      	strb	r0, [r5, #0]
   14788:	3501      	adds	r5, #1
   1478a:	0004      	movs	r4, r0
   1478c:	1aeb      	subs	r3, r5, r3
   1478e:	429a      	cmp	r2, r3
   14790:	dc78      	bgt.n	14884 <_dtoa_r+0xb78>
   14792:	1e15      	subs	r5, r2, #0
   14794:	dc00      	bgt.n	14798 <_dtoa_r+0xa8c>
   14796:	2501      	movs	r5, #1
   14798:	2700      	movs	r7, #0
   1479a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1479c:	195d      	adds	r5, r3, r5
   1479e:	9905      	ldr	r1, [sp, #20]
   147a0:	2201      	movs	r2, #1
   147a2:	9804      	ldr	r0, [sp, #16]
   147a4:	f000 fc90 	bl	150c8 <__lshift>
   147a8:	9908      	ldr	r1, [sp, #32]
   147aa:	9005      	str	r0, [sp, #20]
   147ac:	f000 fcdd 	bl	1516a <__mcmp>
   147b0:	2800      	cmp	r0, #0
   147b2:	dc2f      	bgt.n	14814 <_dtoa_r+0xb08>
   147b4:	d101      	bne.n	147ba <_dtoa_r+0xaae>
   147b6:	07e3      	lsls	r3, r4, #31
   147b8:	d42c      	bmi.n	14814 <_dtoa_r+0xb08>
   147ba:	1e6b      	subs	r3, r5, #1
   147bc:	781a      	ldrb	r2, [r3, #0]
   147be:	2a30      	cmp	r2, #48	; 0x30
   147c0:	d1b0      	bne.n	14724 <_dtoa_r+0xa18>
   147c2:	001d      	movs	r5, r3
   147c4:	e7f9      	b.n	147ba <_dtoa_r+0xaae>
   147c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   147c8:	2b00      	cmp	r3, #0
   147ca:	db07      	blt.n	147dc <_dtoa_r+0xad0>
   147cc:	001d      	movs	r5, r3
   147ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
   147d0:	431d      	orrs	r5, r3
   147d2:	d126      	bne.n	14822 <_dtoa_r+0xb16>
   147d4:	2301      	movs	r3, #1
   147d6:	9a06      	ldr	r2, [sp, #24]
   147d8:	4213      	tst	r3, r2
   147da:	d122      	bne.n	14822 <_dtoa_r+0xb16>
   147dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   147de:	2b00      	cmp	r3, #0
   147e0:	dc00      	bgt.n	147e4 <_dtoa_r+0xad8>
   147e2:	e773      	b.n	146cc <_dtoa_r+0x9c0>
   147e4:	9905      	ldr	r1, [sp, #20]
   147e6:	2201      	movs	r2, #1
   147e8:	9804      	ldr	r0, [sp, #16]
   147ea:	f000 fc6d 	bl	150c8 <__lshift>
   147ee:	9908      	ldr	r1, [sp, #32]
   147f0:	9005      	str	r0, [sp, #20]
   147f2:	f000 fcba 	bl	1516a <__mcmp>
   147f6:	2800      	cmp	r0, #0
   147f8:	dc04      	bgt.n	14804 <_dtoa_r+0xaf8>
   147fa:	d000      	beq.n	147fe <_dtoa_r+0xaf2>
   147fc:	e766      	b.n	146cc <_dtoa_r+0x9c0>
   147fe:	07e3      	lsls	r3, r4, #31
   14800:	d400      	bmi.n	14804 <_dtoa_r+0xaf8>
   14802:	e763      	b.n	146cc <_dtoa_r+0x9c0>
   14804:	2c39      	cmp	r4, #57	; 0x39
   14806:	d000      	beq.n	1480a <_dtoa_r+0xafe>
   14808:	e75e      	b.n	146c8 <_dtoa_r+0x9bc>
   1480a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1480c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1480e:	1c5d      	adds	r5, r3, #1
   14810:	2339      	movs	r3, #57	; 0x39
   14812:	7013      	strb	r3, [r2, #0]
   14814:	1e6b      	subs	r3, r5, #1
   14816:	781a      	ldrb	r2, [r3, #0]
   14818:	2a39      	cmp	r2, #57	; 0x39
   1481a:	d03b      	beq.n	14894 <_dtoa_r+0xb88>
   1481c:	3201      	adds	r2, #1
   1481e:	701a      	strb	r2, [r3, #0]
   14820:	e780      	b.n	14724 <_dtoa_r+0xa18>
   14822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14824:	3301      	adds	r3, #1
   14826:	930d      	str	r3, [sp, #52]	; 0x34
   14828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1482a:	2b00      	cmp	r3, #0
   1482c:	dd05      	ble.n	1483a <_dtoa_r+0xb2e>
   1482e:	2c39      	cmp	r4, #57	; 0x39
   14830:	d0eb      	beq.n	1480a <_dtoa_r+0xafe>
   14832:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14834:	3401      	adds	r4, #1
   14836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14838:	e74a      	b.n	146d0 <_dtoa_r+0x9c4>
   1483a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1483c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1483e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14840:	701c      	strb	r4, [r3, #0]
   14842:	4293      	cmp	r3, r2
   14844:	d0ab      	beq.n	1479e <_dtoa_r+0xa92>
   14846:	2300      	movs	r3, #0
   14848:	220a      	movs	r2, #10
   1484a:	9905      	ldr	r1, [sp, #20]
   1484c:	9804      	ldr	r0, [sp, #16]
   1484e:	f000 facb 	bl	14de8 <__multadd>
   14852:	2300      	movs	r3, #0
   14854:	9005      	str	r0, [sp, #20]
   14856:	220a      	movs	r2, #10
   14858:	0039      	movs	r1, r7
   1485a:	9804      	ldr	r0, [sp, #16]
   1485c:	42b7      	cmp	r7, r6
   1485e:	d106      	bne.n	1486e <_dtoa_r+0xb62>
   14860:	f000 fac2 	bl	14de8 <__multadd>
   14864:	0007      	movs	r7, r0
   14866:	0006      	movs	r6, r0
   14868:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1486a:	930b      	str	r3, [sp, #44]	; 0x2c
   1486c:	e6fc      	b.n	14668 <_dtoa_r+0x95c>
   1486e:	f000 fabb 	bl	14de8 <__multadd>
   14872:	0031      	movs	r1, r6
   14874:	0007      	movs	r7, r0
   14876:	2300      	movs	r3, #0
   14878:	220a      	movs	r2, #10
   1487a:	9804      	ldr	r0, [sp, #16]
   1487c:	f000 fab4 	bl	14de8 <__multadd>
   14880:	0006      	movs	r6, r0
   14882:	e7f1      	b.n	14868 <_dtoa_r+0xb5c>
   14884:	2300      	movs	r3, #0
   14886:	220a      	movs	r2, #10
   14888:	9905      	ldr	r1, [sp, #20]
   1488a:	9804      	ldr	r0, [sp, #16]
   1488c:	f000 faac 	bl	14de8 <__multadd>
   14890:	9005      	str	r0, [sp, #20]
   14892:	e771      	b.n	14778 <_dtoa_r+0xa6c>
   14894:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14896:	429a      	cmp	r2, r3
   14898:	d105      	bne.n	148a6 <_dtoa_r+0xb9a>
   1489a:	9b03      	ldr	r3, [sp, #12]
   1489c:	3301      	adds	r3, #1
   1489e:	9303      	str	r3, [sp, #12]
   148a0:	2331      	movs	r3, #49	; 0x31
   148a2:	7013      	strb	r3, [r2, #0]
   148a4:	e73e      	b.n	14724 <_dtoa_r+0xa18>
   148a6:	001d      	movs	r5, r3
   148a8:	e7b4      	b.n	14814 <_dtoa_r+0xb08>
   148aa:	4b0a      	ldr	r3, [pc, #40]	; (148d4 <_dtoa_r+0xbc8>)
   148ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
   148ae:	930a      	str	r3, [sp, #40]	; 0x28
   148b0:	4b09      	ldr	r3, [pc, #36]	; (148d8 <_dtoa_r+0xbcc>)
   148b2:	2a00      	cmp	r2, #0
   148b4:	d001      	beq.n	148ba <_dtoa_r+0xbae>
   148b6:	9a26      	ldr	r2, [sp, #152]	; 0x98
   148b8:	6013      	str	r3, [r2, #0]
   148ba:	980a      	ldr	r0, [sp, #40]	; 0x28
   148bc:	b01d      	add	sp, #116	; 0x74
   148be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   148c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   148c2:	2b00      	cmp	r3, #0
   148c4:	dd00      	ble.n	148c8 <_dtoa_r+0xbbc>
   148c6:	e756      	b.n	14776 <_dtoa_r+0xa6a>
   148c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   148ca:	2b02      	cmp	r3, #2
   148cc:	dc00      	bgt.n	148d0 <_dtoa_r+0xbc4>
   148ce:	e752      	b.n	14776 <_dtoa_r+0xa6a>
   148d0:	e713      	b.n	146fa <_dtoa_r+0x9ee>
   148d2:	46c0      	nop			; (mov r8, r8)
   148d4:	0001bcb8 	.word	0x0001bcb8
   148d8:	0001bcc0 	.word	0x0001bcc0

000148dc <__sflush_r>:
   148dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   148de:	898a      	ldrh	r2, [r1, #12]
   148e0:	0005      	movs	r5, r0
   148e2:	000c      	movs	r4, r1
   148e4:	0713      	lsls	r3, r2, #28
   148e6:	d460      	bmi.n	149aa <__sflush_r+0xce>
   148e8:	684b      	ldr	r3, [r1, #4]
   148ea:	2b00      	cmp	r3, #0
   148ec:	dc04      	bgt.n	148f8 <__sflush_r+0x1c>
   148ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   148f0:	2b00      	cmp	r3, #0
   148f2:	dc01      	bgt.n	148f8 <__sflush_r+0x1c>
   148f4:	2000      	movs	r0, #0
   148f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   148f8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   148fa:	2f00      	cmp	r7, #0
   148fc:	d0fa      	beq.n	148f4 <__sflush_r+0x18>
   148fe:	2300      	movs	r3, #0
   14900:	682e      	ldr	r6, [r5, #0]
   14902:	602b      	str	r3, [r5, #0]
   14904:	2380      	movs	r3, #128	; 0x80
   14906:	015b      	lsls	r3, r3, #5
   14908:	401a      	ands	r2, r3
   1490a:	d034      	beq.n	14976 <__sflush_r+0x9a>
   1490c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1490e:	89a3      	ldrh	r3, [r4, #12]
   14910:	075b      	lsls	r3, r3, #29
   14912:	d506      	bpl.n	14922 <__sflush_r+0x46>
   14914:	6863      	ldr	r3, [r4, #4]
   14916:	1ac0      	subs	r0, r0, r3
   14918:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1491a:	2b00      	cmp	r3, #0
   1491c:	d001      	beq.n	14922 <__sflush_r+0x46>
   1491e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   14920:	1ac0      	subs	r0, r0, r3
   14922:	0002      	movs	r2, r0
   14924:	6a21      	ldr	r1, [r4, #32]
   14926:	2300      	movs	r3, #0
   14928:	0028      	movs	r0, r5
   1492a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1492c:	47b8      	blx	r7
   1492e:	89a1      	ldrh	r1, [r4, #12]
   14930:	1c43      	adds	r3, r0, #1
   14932:	d106      	bne.n	14942 <__sflush_r+0x66>
   14934:	682b      	ldr	r3, [r5, #0]
   14936:	2b1d      	cmp	r3, #29
   14938:	d831      	bhi.n	1499e <__sflush_r+0xc2>
   1493a:	4a2c      	ldr	r2, [pc, #176]	; (149ec <__sflush_r+0x110>)
   1493c:	40da      	lsrs	r2, r3
   1493e:	07d3      	lsls	r3, r2, #31
   14940:	d52d      	bpl.n	1499e <__sflush_r+0xc2>
   14942:	2300      	movs	r3, #0
   14944:	6063      	str	r3, [r4, #4]
   14946:	6923      	ldr	r3, [r4, #16]
   14948:	6023      	str	r3, [r4, #0]
   1494a:	04cb      	lsls	r3, r1, #19
   1494c:	d505      	bpl.n	1495a <__sflush_r+0x7e>
   1494e:	1c43      	adds	r3, r0, #1
   14950:	d102      	bne.n	14958 <__sflush_r+0x7c>
   14952:	682b      	ldr	r3, [r5, #0]
   14954:	2b00      	cmp	r3, #0
   14956:	d100      	bne.n	1495a <__sflush_r+0x7e>
   14958:	6560      	str	r0, [r4, #84]	; 0x54
   1495a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1495c:	602e      	str	r6, [r5, #0]
   1495e:	2900      	cmp	r1, #0
   14960:	d0c8      	beq.n	148f4 <__sflush_r+0x18>
   14962:	0023      	movs	r3, r4
   14964:	3344      	adds	r3, #68	; 0x44
   14966:	4299      	cmp	r1, r3
   14968:	d002      	beq.n	14970 <__sflush_r+0x94>
   1496a:	0028      	movs	r0, r5
   1496c:	f7fe f912 	bl	12b94 <_free_r>
   14970:	2000      	movs	r0, #0
   14972:	6360      	str	r0, [r4, #52]	; 0x34
   14974:	e7bf      	b.n	148f6 <__sflush_r+0x1a>
   14976:	2301      	movs	r3, #1
   14978:	6a21      	ldr	r1, [r4, #32]
   1497a:	0028      	movs	r0, r5
   1497c:	47b8      	blx	r7
   1497e:	1c43      	adds	r3, r0, #1
   14980:	d1c5      	bne.n	1490e <__sflush_r+0x32>
   14982:	682b      	ldr	r3, [r5, #0]
   14984:	2b00      	cmp	r3, #0
   14986:	d0c2      	beq.n	1490e <__sflush_r+0x32>
   14988:	2b1d      	cmp	r3, #29
   1498a:	d001      	beq.n	14990 <__sflush_r+0xb4>
   1498c:	2b16      	cmp	r3, #22
   1498e:	d101      	bne.n	14994 <__sflush_r+0xb8>
   14990:	602e      	str	r6, [r5, #0]
   14992:	e7af      	b.n	148f4 <__sflush_r+0x18>
   14994:	2340      	movs	r3, #64	; 0x40
   14996:	89a2      	ldrh	r2, [r4, #12]
   14998:	4313      	orrs	r3, r2
   1499a:	81a3      	strh	r3, [r4, #12]
   1499c:	e7ab      	b.n	148f6 <__sflush_r+0x1a>
   1499e:	2340      	movs	r3, #64	; 0x40
   149a0:	430b      	orrs	r3, r1
   149a2:	2001      	movs	r0, #1
   149a4:	81a3      	strh	r3, [r4, #12]
   149a6:	4240      	negs	r0, r0
   149a8:	e7a5      	b.n	148f6 <__sflush_r+0x1a>
   149aa:	690f      	ldr	r7, [r1, #16]
   149ac:	2f00      	cmp	r7, #0
   149ae:	d0a1      	beq.n	148f4 <__sflush_r+0x18>
   149b0:	680b      	ldr	r3, [r1, #0]
   149b2:	600f      	str	r7, [r1, #0]
   149b4:	1bdb      	subs	r3, r3, r7
   149b6:	9301      	str	r3, [sp, #4]
   149b8:	2300      	movs	r3, #0
   149ba:	0792      	lsls	r2, r2, #30
   149bc:	d100      	bne.n	149c0 <__sflush_r+0xe4>
   149be:	694b      	ldr	r3, [r1, #20]
   149c0:	60a3      	str	r3, [r4, #8]
   149c2:	9b01      	ldr	r3, [sp, #4]
   149c4:	2b00      	cmp	r3, #0
   149c6:	dc00      	bgt.n	149ca <__sflush_r+0xee>
   149c8:	e794      	b.n	148f4 <__sflush_r+0x18>
   149ca:	9b01      	ldr	r3, [sp, #4]
   149cc:	003a      	movs	r2, r7
   149ce:	6a21      	ldr	r1, [r4, #32]
   149d0:	0028      	movs	r0, r5
   149d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   149d4:	47b0      	blx	r6
   149d6:	2800      	cmp	r0, #0
   149d8:	dc03      	bgt.n	149e2 <__sflush_r+0x106>
   149da:	2340      	movs	r3, #64	; 0x40
   149dc:	89a2      	ldrh	r2, [r4, #12]
   149de:	4313      	orrs	r3, r2
   149e0:	e7df      	b.n	149a2 <__sflush_r+0xc6>
   149e2:	9b01      	ldr	r3, [sp, #4]
   149e4:	183f      	adds	r7, r7, r0
   149e6:	1a1b      	subs	r3, r3, r0
   149e8:	9301      	str	r3, [sp, #4]
   149ea:	e7ea      	b.n	149c2 <__sflush_r+0xe6>
   149ec:	20400001 	.word	0x20400001

000149f0 <_fflush_r>:
   149f0:	690b      	ldr	r3, [r1, #16]
   149f2:	b570      	push	{r4, r5, r6, lr}
   149f4:	0005      	movs	r5, r0
   149f6:	000c      	movs	r4, r1
   149f8:	2b00      	cmp	r3, #0
   149fa:	d101      	bne.n	14a00 <_fflush_r+0x10>
   149fc:	2000      	movs	r0, #0
   149fe:	bd70      	pop	{r4, r5, r6, pc}
   14a00:	2800      	cmp	r0, #0
   14a02:	d004      	beq.n	14a0e <_fflush_r+0x1e>
   14a04:	6983      	ldr	r3, [r0, #24]
   14a06:	2b00      	cmp	r3, #0
   14a08:	d101      	bne.n	14a0e <_fflush_r+0x1e>
   14a0a:	f000 f85f 	bl	14acc <__sinit>
   14a0e:	4b0b      	ldr	r3, [pc, #44]	; (14a3c <_fflush_r+0x4c>)
   14a10:	429c      	cmp	r4, r3
   14a12:	d109      	bne.n	14a28 <_fflush_r+0x38>
   14a14:	686c      	ldr	r4, [r5, #4]
   14a16:	220c      	movs	r2, #12
   14a18:	5ea3      	ldrsh	r3, [r4, r2]
   14a1a:	2b00      	cmp	r3, #0
   14a1c:	d0ee      	beq.n	149fc <_fflush_r+0xc>
   14a1e:	0021      	movs	r1, r4
   14a20:	0028      	movs	r0, r5
   14a22:	f7ff ff5b 	bl	148dc <__sflush_r>
   14a26:	e7ea      	b.n	149fe <_fflush_r+0xe>
   14a28:	4b05      	ldr	r3, [pc, #20]	; (14a40 <_fflush_r+0x50>)
   14a2a:	429c      	cmp	r4, r3
   14a2c:	d101      	bne.n	14a32 <_fflush_r+0x42>
   14a2e:	68ac      	ldr	r4, [r5, #8]
   14a30:	e7f1      	b.n	14a16 <_fflush_r+0x26>
   14a32:	4b04      	ldr	r3, [pc, #16]	; (14a44 <_fflush_r+0x54>)
   14a34:	429c      	cmp	r4, r3
   14a36:	d1ee      	bne.n	14a16 <_fflush_r+0x26>
   14a38:	68ec      	ldr	r4, [r5, #12]
   14a3a:	e7ec      	b.n	14a16 <_fflush_r+0x26>
   14a3c:	0001bce8 	.word	0x0001bce8
   14a40:	0001bd08 	.word	0x0001bd08
   14a44:	0001bcc8 	.word	0x0001bcc8

00014a48 <_cleanup_r>:
   14a48:	b510      	push	{r4, lr}
   14a4a:	4902      	ldr	r1, [pc, #8]	; (14a54 <_cleanup_r+0xc>)
   14a4c:	f000 f8b2 	bl	14bb4 <_fwalk_reent>
   14a50:	bd10      	pop	{r4, pc}
   14a52:	46c0      	nop			; (mov r8, r8)
   14a54:	000149f1 	.word	0x000149f1

00014a58 <std.isra.0>:
   14a58:	2300      	movs	r3, #0
   14a5a:	b510      	push	{r4, lr}
   14a5c:	0004      	movs	r4, r0
   14a5e:	6003      	str	r3, [r0, #0]
   14a60:	6043      	str	r3, [r0, #4]
   14a62:	6083      	str	r3, [r0, #8]
   14a64:	8181      	strh	r1, [r0, #12]
   14a66:	6643      	str	r3, [r0, #100]	; 0x64
   14a68:	81c2      	strh	r2, [r0, #14]
   14a6a:	6103      	str	r3, [r0, #16]
   14a6c:	6143      	str	r3, [r0, #20]
   14a6e:	6183      	str	r3, [r0, #24]
   14a70:	0019      	movs	r1, r3
   14a72:	2208      	movs	r2, #8
   14a74:	305c      	adds	r0, #92	; 0x5c
   14a76:	f7fe f884 	bl	12b82 <memset>
   14a7a:	4b05      	ldr	r3, [pc, #20]	; (14a90 <std.isra.0+0x38>)
   14a7c:	6224      	str	r4, [r4, #32]
   14a7e:	6263      	str	r3, [r4, #36]	; 0x24
   14a80:	4b04      	ldr	r3, [pc, #16]	; (14a94 <std.isra.0+0x3c>)
   14a82:	62a3      	str	r3, [r4, #40]	; 0x28
   14a84:	4b04      	ldr	r3, [pc, #16]	; (14a98 <std.isra.0+0x40>)
   14a86:	62e3      	str	r3, [r4, #44]	; 0x2c
   14a88:	4b04      	ldr	r3, [pc, #16]	; (14a9c <std.isra.0+0x44>)
   14a8a:	6323      	str	r3, [r4, #48]	; 0x30
   14a8c:	bd10      	pop	{r4, pc}
   14a8e:	46c0      	nop			; (mov r8, r8)
   14a90:	000155f5 	.word	0x000155f5
   14a94:	0001561d 	.word	0x0001561d
   14a98:	00015655 	.word	0x00015655
   14a9c:	00015681 	.word	0x00015681

00014aa0 <__sfmoreglue>:
   14aa0:	b570      	push	{r4, r5, r6, lr}
   14aa2:	2568      	movs	r5, #104	; 0x68
   14aa4:	1e4a      	subs	r2, r1, #1
   14aa6:	4355      	muls	r5, r2
   14aa8:	000e      	movs	r6, r1
   14aaa:	0029      	movs	r1, r5
   14aac:	3174      	adds	r1, #116	; 0x74
   14aae:	f7fe f8bb 	bl	12c28 <_malloc_r>
   14ab2:	1e04      	subs	r4, r0, #0
   14ab4:	d008      	beq.n	14ac8 <__sfmoreglue+0x28>
   14ab6:	2100      	movs	r1, #0
   14ab8:	002a      	movs	r2, r5
   14aba:	6001      	str	r1, [r0, #0]
   14abc:	6046      	str	r6, [r0, #4]
   14abe:	300c      	adds	r0, #12
   14ac0:	60a0      	str	r0, [r4, #8]
   14ac2:	3268      	adds	r2, #104	; 0x68
   14ac4:	f7fe f85d 	bl	12b82 <memset>
   14ac8:	0020      	movs	r0, r4
   14aca:	bd70      	pop	{r4, r5, r6, pc}

00014acc <__sinit>:
   14acc:	6983      	ldr	r3, [r0, #24]
   14ace:	b513      	push	{r0, r1, r4, lr}
   14ad0:	0004      	movs	r4, r0
   14ad2:	2b00      	cmp	r3, #0
   14ad4:	d128      	bne.n	14b28 <__sinit+0x5c>
   14ad6:	6483      	str	r3, [r0, #72]	; 0x48
   14ad8:	64c3      	str	r3, [r0, #76]	; 0x4c
   14ada:	6503      	str	r3, [r0, #80]	; 0x50
   14adc:	4b13      	ldr	r3, [pc, #76]	; (14b2c <__sinit+0x60>)
   14ade:	4a14      	ldr	r2, [pc, #80]	; (14b30 <__sinit+0x64>)
   14ae0:	681b      	ldr	r3, [r3, #0]
   14ae2:	6282      	str	r2, [r0, #40]	; 0x28
   14ae4:	9301      	str	r3, [sp, #4]
   14ae6:	4298      	cmp	r0, r3
   14ae8:	d101      	bne.n	14aee <__sinit+0x22>
   14aea:	2301      	movs	r3, #1
   14aec:	6183      	str	r3, [r0, #24]
   14aee:	0020      	movs	r0, r4
   14af0:	f000 f820 	bl	14b34 <__sfp>
   14af4:	6060      	str	r0, [r4, #4]
   14af6:	0020      	movs	r0, r4
   14af8:	f000 f81c 	bl	14b34 <__sfp>
   14afc:	60a0      	str	r0, [r4, #8]
   14afe:	0020      	movs	r0, r4
   14b00:	f000 f818 	bl	14b34 <__sfp>
   14b04:	2200      	movs	r2, #0
   14b06:	60e0      	str	r0, [r4, #12]
   14b08:	2104      	movs	r1, #4
   14b0a:	6860      	ldr	r0, [r4, #4]
   14b0c:	f7ff ffa4 	bl	14a58 <std.isra.0>
   14b10:	2201      	movs	r2, #1
   14b12:	2109      	movs	r1, #9
   14b14:	68a0      	ldr	r0, [r4, #8]
   14b16:	f7ff ff9f 	bl	14a58 <std.isra.0>
   14b1a:	2202      	movs	r2, #2
   14b1c:	2112      	movs	r1, #18
   14b1e:	68e0      	ldr	r0, [r4, #12]
   14b20:	f7ff ff9a 	bl	14a58 <std.isra.0>
   14b24:	2301      	movs	r3, #1
   14b26:	61a3      	str	r3, [r4, #24]
   14b28:	bd13      	pop	{r0, r1, r4, pc}
   14b2a:	46c0      	nop			; (mov r8, r8)
   14b2c:	0001bc80 	.word	0x0001bc80
   14b30:	00014a49 	.word	0x00014a49

00014b34 <__sfp>:
   14b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14b36:	4b1e      	ldr	r3, [pc, #120]	; (14bb0 <__sfp+0x7c>)
   14b38:	0007      	movs	r7, r0
   14b3a:	681e      	ldr	r6, [r3, #0]
   14b3c:	69b3      	ldr	r3, [r6, #24]
   14b3e:	2b00      	cmp	r3, #0
   14b40:	d102      	bne.n	14b48 <__sfp+0x14>
   14b42:	0030      	movs	r0, r6
   14b44:	f7ff ffc2 	bl	14acc <__sinit>
   14b48:	3648      	adds	r6, #72	; 0x48
   14b4a:	68b4      	ldr	r4, [r6, #8]
   14b4c:	6873      	ldr	r3, [r6, #4]
   14b4e:	3b01      	subs	r3, #1
   14b50:	d504      	bpl.n	14b5c <__sfp+0x28>
   14b52:	6833      	ldr	r3, [r6, #0]
   14b54:	2b00      	cmp	r3, #0
   14b56:	d007      	beq.n	14b68 <__sfp+0x34>
   14b58:	6836      	ldr	r6, [r6, #0]
   14b5a:	e7f6      	b.n	14b4a <__sfp+0x16>
   14b5c:	220c      	movs	r2, #12
   14b5e:	5ea5      	ldrsh	r5, [r4, r2]
   14b60:	2d00      	cmp	r5, #0
   14b62:	d00d      	beq.n	14b80 <__sfp+0x4c>
   14b64:	3468      	adds	r4, #104	; 0x68
   14b66:	e7f2      	b.n	14b4e <__sfp+0x1a>
   14b68:	2104      	movs	r1, #4
   14b6a:	0038      	movs	r0, r7
   14b6c:	f7ff ff98 	bl	14aa0 <__sfmoreglue>
   14b70:	6030      	str	r0, [r6, #0]
   14b72:	2800      	cmp	r0, #0
   14b74:	d1f0      	bne.n	14b58 <__sfp+0x24>
   14b76:	230c      	movs	r3, #12
   14b78:	0004      	movs	r4, r0
   14b7a:	603b      	str	r3, [r7, #0]
   14b7c:	0020      	movs	r0, r4
   14b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14b80:	2301      	movs	r3, #1
   14b82:	0020      	movs	r0, r4
   14b84:	425b      	negs	r3, r3
   14b86:	81e3      	strh	r3, [r4, #14]
   14b88:	3302      	adds	r3, #2
   14b8a:	81a3      	strh	r3, [r4, #12]
   14b8c:	6665      	str	r5, [r4, #100]	; 0x64
   14b8e:	6025      	str	r5, [r4, #0]
   14b90:	60a5      	str	r5, [r4, #8]
   14b92:	6065      	str	r5, [r4, #4]
   14b94:	6125      	str	r5, [r4, #16]
   14b96:	6165      	str	r5, [r4, #20]
   14b98:	61a5      	str	r5, [r4, #24]
   14b9a:	2208      	movs	r2, #8
   14b9c:	0029      	movs	r1, r5
   14b9e:	305c      	adds	r0, #92	; 0x5c
   14ba0:	f7fd ffef 	bl	12b82 <memset>
   14ba4:	6365      	str	r5, [r4, #52]	; 0x34
   14ba6:	63a5      	str	r5, [r4, #56]	; 0x38
   14ba8:	64a5      	str	r5, [r4, #72]	; 0x48
   14baa:	64e5      	str	r5, [r4, #76]	; 0x4c
   14bac:	e7e6      	b.n	14b7c <__sfp+0x48>
   14bae:	46c0      	nop			; (mov r8, r8)
   14bb0:	0001bc80 	.word	0x0001bc80

00014bb4 <_fwalk_reent>:
   14bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14bb6:	0004      	movs	r4, r0
   14bb8:	0007      	movs	r7, r0
   14bba:	2600      	movs	r6, #0
   14bbc:	9101      	str	r1, [sp, #4]
   14bbe:	3448      	adds	r4, #72	; 0x48
   14bc0:	2c00      	cmp	r4, #0
   14bc2:	d101      	bne.n	14bc8 <_fwalk_reent+0x14>
   14bc4:	0030      	movs	r0, r6
   14bc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   14bc8:	6863      	ldr	r3, [r4, #4]
   14bca:	68a5      	ldr	r5, [r4, #8]
   14bcc:	9300      	str	r3, [sp, #0]
   14bce:	9b00      	ldr	r3, [sp, #0]
   14bd0:	3b01      	subs	r3, #1
   14bd2:	9300      	str	r3, [sp, #0]
   14bd4:	d501      	bpl.n	14bda <_fwalk_reent+0x26>
   14bd6:	6824      	ldr	r4, [r4, #0]
   14bd8:	e7f2      	b.n	14bc0 <_fwalk_reent+0xc>
   14bda:	89ab      	ldrh	r3, [r5, #12]
   14bdc:	2b01      	cmp	r3, #1
   14bde:	d908      	bls.n	14bf2 <_fwalk_reent+0x3e>
   14be0:	220e      	movs	r2, #14
   14be2:	5eab      	ldrsh	r3, [r5, r2]
   14be4:	3301      	adds	r3, #1
   14be6:	d004      	beq.n	14bf2 <_fwalk_reent+0x3e>
   14be8:	0029      	movs	r1, r5
   14bea:	0038      	movs	r0, r7
   14bec:	9b01      	ldr	r3, [sp, #4]
   14bee:	4798      	blx	r3
   14bf0:	4306      	orrs	r6, r0
   14bf2:	3568      	adds	r5, #104	; 0x68
   14bf4:	e7eb      	b.n	14bce <_fwalk_reent+0x1a>

00014bf6 <__locale_ctype_ptr_l>:
   14bf6:	30ec      	adds	r0, #236	; 0xec
   14bf8:	6800      	ldr	r0, [r0, #0]
   14bfa:	4770      	bx	lr

00014bfc <__locale_ctype_ptr>:
   14bfc:	4b04      	ldr	r3, [pc, #16]	; (14c10 <__locale_ctype_ptr+0x14>)
   14bfe:	681b      	ldr	r3, [r3, #0]
   14c00:	6a1b      	ldr	r3, [r3, #32]
   14c02:	2b00      	cmp	r3, #0
   14c04:	d100      	bne.n	14c08 <__locale_ctype_ptr+0xc>
   14c06:	4b03      	ldr	r3, [pc, #12]	; (14c14 <__locale_ctype_ptr+0x18>)
   14c08:	33ec      	adds	r3, #236	; 0xec
   14c0a:	6818      	ldr	r0, [r3, #0]
   14c0c:	4770      	bx	lr
   14c0e:	46c0      	nop			; (mov r8, r8)
   14c10:	20000228 	.word	0x20000228
   14c14:	2000028c 	.word	0x2000028c

00014c18 <_localeconv_r>:
   14c18:	4b03      	ldr	r3, [pc, #12]	; (14c28 <_localeconv_r+0x10>)
   14c1a:	681b      	ldr	r3, [r3, #0]
   14c1c:	6a18      	ldr	r0, [r3, #32]
   14c1e:	2800      	cmp	r0, #0
   14c20:	d100      	bne.n	14c24 <_localeconv_r+0xc>
   14c22:	4802      	ldr	r0, [pc, #8]	; (14c2c <_localeconv_r+0x14>)
   14c24:	30f0      	adds	r0, #240	; 0xf0
   14c26:	4770      	bx	lr
   14c28:	20000228 	.word	0x20000228
   14c2c:	2000028c 	.word	0x2000028c

00014c30 <__swhatbuf_r>:
   14c30:	b570      	push	{r4, r5, r6, lr}
   14c32:	000e      	movs	r6, r1
   14c34:	001d      	movs	r5, r3
   14c36:	230e      	movs	r3, #14
   14c38:	5ec9      	ldrsh	r1, [r1, r3]
   14c3a:	b090      	sub	sp, #64	; 0x40
   14c3c:	0014      	movs	r4, r2
   14c3e:	2900      	cmp	r1, #0
   14c40:	da07      	bge.n	14c52 <__swhatbuf_r+0x22>
   14c42:	2300      	movs	r3, #0
   14c44:	602b      	str	r3, [r5, #0]
   14c46:	89b3      	ldrh	r3, [r6, #12]
   14c48:	061b      	lsls	r3, r3, #24
   14c4a:	d411      	bmi.n	14c70 <__swhatbuf_r+0x40>
   14c4c:	2380      	movs	r3, #128	; 0x80
   14c4e:	00db      	lsls	r3, r3, #3
   14c50:	e00f      	b.n	14c72 <__swhatbuf_r+0x42>
   14c52:	aa01      	add	r2, sp, #4
   14c54:	f000 fd5a 	bl	1570c <_fstat_r>
   14c58:	2800      	cmp	r0, #0
   14c5a:	dbf2      	blt.n	14c42 <__swhatbuf_r+0x12>
   14c5c:	22f0      	movs	r2, #240	; 0xf0
   14c5e:	9b02      	ldr	r3, [sp, #8]
   14c60:	0212      	lsls	r2, r2, #8
   14c62:	4013      	ands	r3, r2
   14c64:	4a05      	ldr	r2, [pc, #20]	; (14c7c <__swhatbuf_r+0x4c>)
   14c66:	189b      	adds	r3, r3, r2
   14c68:	425a      	negs	r2, r3
   14c6a:	4153      	adcs	r3, r2
   14c6c:	602b      	str	r3, [r5, #0]
   14c6e:	e7ed      	b.n	14c4c <__swhatbuf_r+0x1c>
   14c70:	2340      	movs	r3, #64	; 0x40
   14c72:	2000      	movs	r0, #0
   14c74:	6023      	str	r3, [r4, #0]
   14c76:	b010      	add	sp, #64	; 0x40
   14c78:	bd70      	pop	{r4, r5, r6, pc}
   14c7a:	46c0      	nop			; (mov r8, r8)
   14c7c:	ffffe000 	.word	0xffffe000

00014c80 <__smakebuf_r>:
   14c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14c82:	2602      	movs	r6, #2
   14c84:	898b      	ldrh	r3, [r1, #12]
   14c86:	0005      	movs	r5, r0
   14c88:	000c      	movs	r4, r1
   14c8a:	4233      	tst	r3, r6
   14c8c:	d006      	beq.n	14c9c <__smakebuf_r+0x1c>
   14c8e:	0023      	movs	r3, r4
   14c90:	3347      	adds	r3, #71	; 0x47
   14c92:	6023      	str	r3, [r4, #0]
   14c94:	6123      	str	r3, [r4, #16]
   14c96:	2301      	movs	r3, #1
   14c98:	6163      	str	r3, [r4, #20]
   14c9a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   14c9c:	ab01      	add	r3, sp, #4
   14c9e:	466a      	mov	r2, sp
   14ca0:	f7ff ffc6 	bl	14c30 <__swhatbuf_r>
   14ca4:	9900      	ldr	r1, [sp, #0]
   14ca6:	0007      	movs	r7, r0
   14ca8:	0028      	movs	r0, r5
   14caa:	f7fd ffbd 	bl	12c28 <_malloc_r>
   14cae:	2800      	cmp	r0, #0
   14cb0:	d108      	bne.n	14cc4 <__smakebuf_r+0x44>
   14cb2:	220c      	movs	r2, #12
   14cb4:	5ea3      	ldrsh	r3, [r4, r2]
   14cb6:	059a      	lsls	r2, r3, #22
   14cb8:	d4ef      	bmi.n	14c9a <__smakebuf_r+0x1a>
   14cba:	2203      	movs	r2, #3
   14cbc:	4393      	bics	r3, r2
   14cbe:	431e      	orrs	r6, r3
   14cc0:	81a6      	strh	r6, [r4, #12]
   14cc2:	e7e4      	b.n	14c8e <__smakebuf_r+0xe>
   14cc4:	4b0f      	ldr	r3, [pc, #60]	; (14d04 <__smakebuf_r+0x84>)
   14cc6:	62ab      	str	r3, [r5, #40]	; 0x28
   14cc8:	2380      	movs	r3, #128	; 0x80
   14cca:	89a2      	ldrh	r2, [r4, #12]
   14ccc:	6020      	str	r0, [r4, #0]
   14cce:	4313      	orrs	r3, r2
   14cd0:	81a3      	strh	r3, [r4, #12]
   14cd2:	9b00      	ldr	r3, [sp, #0]
   14cd4:	6120      	str	r0, [r4, #16]
   14cd6:	6163      	str	r3, [r4, #20]
   14cd8:	9b01      	ldr	r3, [sp, #4]
   14cda:	2b00      	cmp	r3, #0
   14cdc:	d00d      	beq.n	14cfa <__smakebuf_r+0x7a>
   14cde:	230e      	movs	r3, #14
   14ce0:	5ee1      	ldrsh	r1, [r4, r3]
   14ce2:	0028      	movs	r0, r5
   14ce4:	f000 fd24 	bl	15730 <_isatty_r>
   14ce8:	2800      	cmp	r0, #0
   14cea:	d006      	beq.n	14cfa <__smakebuf_r+0x7a>
   14cec:	2203      	movs	r2, #3
   14cee:	89a3      	ldrh	r3, [r4, #12]
   14cf0:	4393      	bics	r3, r2
   14cf2:	001a      	movs	r2, r3
   14cf4:	2301      	movs	r3, #1
   14cf6:	4313      	orrs	r3, r2
   14cf8:	81a3      	strh	r3, [r4, #12]
   14cfa:	89a0      	ldrh	r0, [r4, #12]
   14cfc:	4338      	orrs	r0, r7
   14cfe:	81a0      	strh	r0, [r4, #12]
   14d00:	e7cb      	b.n	14c9a <__smakebuf_r+0x1a>
   14d02:	46c0      	nop			; (mov r8, r8)
   14d04:	00014a49 	.word	0x00014a49

00014d08 <__ascii_mbtowc>:
   14d08:	b082      	sub	sp, #8
   14d0a:	2900      	cmp	r1, #0
   14d0c:	d100      	bne.n	14d10 <__ascii_mbtowc+0x8>
   14d0e:	a901      	add	r1, sp, #4
   14d10:	1e10      	subs	r0, r2, #0
   14d12:	d006      	beq.n	14d22 <__ascii_mbtowc+0x1a>
   14d14:	2b00      	cmp	r3, #0
   14d16:	d006      	beq.n	14d26 <__ascii_mbtowc+0x1e>
   14d18:	7813      	ldrb	r3, [r2, #0]
   14d1a:	600b      	str	r3, [r1, #0]
   14d1c:	7810      	ldrb	r0, [r2, #0]
   14d1e:	1e43      	subs	r3, r0, #1
   14d20:	4198      	sbcs	r0, r3
   14d22:	b002      	add	sp, #8
   14d24:	4770      	bx	lr
   14d26:	2002      	movs	r0, #2
   14d28:	4240      	negs	r0, r0
   14d2a:	e7fa      	b.n	14d22 <__ascii_mbtowc+0x1a>

00014d2c <memchr>:
   14d2c:	b2c9      	uxtb	r1, r1
   14d2e:	1882      	adds	r2, r0, r2
   14d30:	4290      	cmp	r0, r2
   14d32:	d101      	bne.n	14d38 <memchr+0xc>
   14d34:	2000      	movs	r0, #0
   14d36:	4770      	bx	lr
   14d38:	7803      	ldrb	r3, [r0, #0]
   14d3a:	428b      	cmp	r3, r1
   14d3c:	d0fb      	beq.n	14d36 <memchr+0xa>
   14d3e:	3001      	adds	r0, #1
   14d40:	e7f6      	b.n	14d30 <memchr+0x4>

00014d42 <__malloc_lock>:
   14d42:	4770      	bx	lr

00014d44 <__malloc_unlock>:
   14d44:	4770      	bx	lr

00014d46 <_Balloc>:
   14d46:	b570      	push	{r4, r5, r6, lr}
   14d48:	6a46      	ldr	r6, [r0, #36]	; 0x24
   14d4a:	0004      	movs	r4, r0
   14d4c:	000d      	movs	r5, r1
   14d4e:	2e00      	cmp	r6, #0
   14d50:	d107      	bne.n	14d62 <_Balloc+0x1c>
   14d52:	2010      	movs	r0, #16
   14d54:	f7fd fee6 	bl	12b24 <malloc>
   14d58:	6260      	str	r0, [r4, #36]	; 0x24
   14d5a:	6046      	str	r6, [r0, #4]
   14d5c:	6086      	str	r6, [r0, #8]
   14d5e:	6006      	str	r6, [r0, #0]
   14d60:	60c6      	str	r6, [r0, #12]
   14d62:	6a66      	ldr	r6, [r4, #36]	; 0x24
   14d64:	68f3      	ldr	r3, [r6, #12]
   14d66:	2b00      	cmp	r3, #0
   14d68:	d013      	beq.n	14d92 <_Balloc+0x4c>
   14d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14d6c:	00aa      	lsls	r2, r5, #2
   14d6e:	68db      	ldr	r3, [r3, #12]
   14d70:	189b      	adds	r3, r3, r2
   14d72:	6818      	ldr	r0, [r3, #0]
   14d74:	2800      	cmp	r0, #0
   14d76:	d118      	bne.n	14daa <_Balloc+0x64>
   14d78:	2101      	movs	r1, #1
   14d7a:	000e      	movs	r6, r1
   14d7c:	40ae      	lsls	r6, r5
   14d7e:	1d72      	adds	r2, r6, #5
   14d80:	0092      	lsls	r2, r2, #2
   14d82:	0020      	movs	r0, r4
   14d84:	f000 fac2 	bl	1530c <_calloc_r>
   14d88:	2800      	cmp	r0, #0
   14d8a:	d00c      	beq.n	14da6 <_Balloc+0x60>
   14d8c:	6045      	str	r5, [r0, #4]
   14d8e:	6086      	str	r6, [r0, #8]
   14d90:	e00d      	b.n	14dae <_Balloc+0x68>
   14d92:	2221      	movs	r2, #33	; 0x21
   14d94:	2104      	movs	r1, #4
   14d96:	0020      	movs	r0, r4
   14d98:	f000 fab8 	bl	1530c <_calloc_r>
   14d9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14d9e:	60f0      	str	r0, [r6, #12]
   14da0:	68db      	ldr	r3, [r3, #12]
   14da2:	2b00      	cmp	r3, #0
   14da4:	d1e1      	bne.n	14d6a <_Balloc+0x24>
   14da6:	2000      	movs	r0, #0
   14da8:	bd70      	pop	{r4, r5, r6, pc}
   14daa:	6802      	ldr	r2, [r0, #0]
   14dac:	601a      	str	r2, [r3, #0]
   14dae:	2300      	movs	r3, #0
   14db0:	6103      	str	r3, [r0, #16]
   14db2:	60c3      	str	r3, [r0, #12]
   14db4:	e7f8      	b.n	14da8 <_Balloc+0x62>

00014db6 <_Bfree>:
   14db6:	b570      	push	{r4, r5, r6, lr}
   14db8:	6a44      	ldr	r4, [r0, #36]	; 0x24
   14dba:	0006      	movs	r6, r0
   14dbc:	000d      	movs	r5, r1
   14dbe:	2c00      	cmp	r4, #0
   14dc0:	d107      	bne.n	14dd2 <_Bfree+0x1c>
   14dc2:	2010      	movs	r0, #16
   14dc4:	f7fd feae 	bl	12b24 <malloc>
   14dc8:	6270      	str	r0, [r6, #36]	; 0x24
   14dca:	6044      	str	r4, [r0, #4]
   14dcc:	6084      	str	r4, [r0, #8]
   14dce:	6004      	str	r4, [r0, #0]
   14dd0:	60c4      	str	r4, [r0, #12]
   14dd2:	2d00      	cmp	r5, #0
   14dd4:	d007      	beq.n	14de6 <_Bfree+0x30>
   14dd6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   14dd8:	686a      	ldr	r2, [r5, #4]
   14dda:	68db      	ldr	r3, [r3, #12]
   14ddc:	0092      	lsls	r2, r2, #2
   14dde:	189b      	adds	r3, r3, r2
   14de0:	681a      	ldr	r2, [r3, #0]
   14de2:	602a      	str	r2, [r5, #0]
   14de4:	601d      	str	r5, [r3, #0]
   14de6:	bd70      	pop	{r4, r5, r6, pc}

00014de8 <__multadd>:
   14de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14dea:	001e      	movs	r6, r3
   14dec:	2314      	movs	r3, #20
   14dee:	469c      	mov	ip, r3
   14df0:	0007      	movs	r7, r0
   14df2:	000c      	movs	r4, r1
   14df4:	2000      	movs	r0, #0
   14df6:	690d      	ldr	r5, [r1, #16]
   14df8:	448c      	add	ip, r1
   14dfa:	4663      	mov	r3, ip
   14dfc:	8819      	ldrh	r1, [r3, #0]
   14dfe:	681b      	ldr	r3, [r3, #0]
   14e00:	4351      	muls	r1, r2
   14e02:	0c1b      	lsrs	r3, r3, #16
   14e04:	4353      	muls	r3, r2
   14e06:	1989      	adds	r1, r1, r6
   14e08:	0c0e      	lsrs	r6, r1, #16
   14e0a:	199b      	adds	r3, r3, r6
   14e0c:	b289      	uxth	r1, r1
   14e0e:	0c1e      	lsrs	r6, r3, #16
   14e10:	041b      	lsls	r3, r3, #16
   14e12:	185b      	adds	r3, r3, r1
   14e14:	4661      	mov	r1, ip
   14e16:	3001      	adds	r0, #1
   14e18:	c108      	stmia	r1!, {r3}
   14e1a:	468c      	mov	ip, r1
   14e1c:	4285      	cmp	r5, r0
   14e1e:	dcec      	bgt.n	14dfa <__multadd+0x12>
   14e20:	2e00      	cmp	r6, #0
   14e22:	d01b      	beq.n	14e5c <__multadd+0x74>
   14e24:	68a3      	ldr	r3, [r4, #8]
   14e26:	429d      	cmp	r5, r3
   14e28:	db12      	blt.n	14e50 <__multadd+0x68>
   14e2a:	6863      	ldr	r3, [r4, #4]
   14e2c:	0038      	movs	r0, r7
   14e2e:	1c59      	adds	r1, r3, #1
   14e30:	f7ff ff89 	bl	14d46 <_Balloc>
   14e34:	0021      	movs	r1, r4
   14e36:	6923      	ldr	r3, [r4, #16]
   14e38:	9001      	str	r0, [sp, #4]
   14e3a:	1c9a      	adds	r2, r3, #2
   14e3c:	0092      	lsls	r2, r2, #2
   14e3e:	310c      	adds	r1, #12
   14e40:	300c      	adds	r0, #12
   14e42:	f7fd fe83 	bl	12b4c <memcpy>
   14e46:	0021      	movs	r1, r4
   14e48:	0038      	movs	r0, r7
   14e4a:	f7ff ffb4 	bl	14db6 <_Bfree>
   14e4e:	9c01      	ldr	r4, [sp, #4]
   14e50:	1d2b      	adds	r3, r5, #4
   14e52:	009b      	lsls	r3, r3, #2
   14e54:	18e3      	adds	r3, r4, r3
   14e56:	3501      	adds	r5, #1
   14e58:	605e      	str	r6, [r3, #4]
   14e5a:	6125      	str	r5, [r4, #16]
   14e5c:	0020      	movs	r0, r4
   14e5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00014e60 <__hi0bits>:
   14e60:	0003      	movs	r3, r0
   14e62:	0c02      	lsrs	r2, r0, #16
   14e64:	2000      	movs	r0, #0
   14e66:	4282      	cmp	r2, r0
   14e68:	d101      	bne.n	14e6e <__hi0bits+0xe>
   14e6a:	041b      	lsls	r3, r3, #16
   14e6c:	3010      	adds	r0, #16
   14e6e:	0e1a      	lsrs	r2, r3, #24
   14e70:	d101      	bne.n	14e76 <__hi0bits+0x16>
   14e72:	3008      	adds	r0, #8
   14e74:	021b      	lsls	r3, r3, #8
   14e76:	0f1a      	lsrs	r2, r3, #28
   14e78:	d101      	bne.n	14e7e <__hi0bits+0x1e>
   14e7a:	3004      	adds	r0, #4
   14e7c:	011b      	lsls	r3, r3, #4
   14e7e:	0f9a      	lsrs	r2, r3, #30
   14e80:	d101      	bne.n	14e86 <__hi0bits+0x26>
   14e82:	3002      	adds	r0, #2
   14e84:	009b      	lsls	r3, r3, #2
   14e86:	2b00      	cmp	r3, #0
   14e88:	db03      	blt.n	14e92 <__hi0bits+0x32>
   14e8a:	3001      	adds	r0, #1
   14e8c:	005b      	lsls	r3, r3, #1
   14e8e:	d400      	bmi.n	14e92 <__hi0bits+0x32>
   14e90:	2020      	movs	r0, #32
   14e92:	4770      	bx	lr

00014e94 <__lo0bits>:
   14e94:	2207      	movs	r2, #7
   14e96:	6803      	ldr	r3, [r0, #0]
   14e98:	b510      	push	{r4, lr}
   14e9a:	0001      	movs	r1, r0
   14e9c:	401a      	ands	r2, r3
   14e9e:	d00d      	beq.n	14ebc <__lo0bits+0x28>
   14ea0:	2401      	movs	r4, #1
   14ea2:	2000      	movs	r0, #0
   14ea4:	4223      	tst	r3, r4
   14ea6:	d105      	bne.n	14eb4 <__lo0bits+0x20>
   14ea8:	3002      	adds	r0, #2
   14eaa:	4203      	tst	r3, r0
   14eac:	d003      	beq.n	14eb6 <__lo0bits+0x22>
   14eae:	40e3      	lsrs	r3, r4
   14eb0:	0020      	movs	r0, r4
   14eb2:	600b      	str	r3, [r1, #0]
   14eb4:	bd10      	pop	{r4, pc}
   14eb6:	089b      	lsrs	r3, r3, #2
   14eb8:	600b      	str	r3, [r1, #0]
   14eba:	e7fb      	b.n	14eb4 <__lo0bits+0x20>
   14ebc:	b29c      	uxth	r4, r3
   14ebe:	0010      	movs	r0, r2
   14ec0:	2c00      	cmp	r4, #0
   14ec2:	d101      	bne.n	14ec8 <__lo0bits+0x34>
   14ec4:	2010      	movs	r0, #16
   14ec6:	0c1b      	lsrs	r3, r3, #16
   14ec8:	b2da      	uxtb	r2, r3
   14eca:	2a00      	cmp	r2, #0
   14ecc:	d101      	bne.n	14ed2 <__lo0bits+0x3e>
   14ece:	3008      	adds	r0, #8
   14ed0:	0a1b      	lsrs	r3, r3, #8
   14ed2:	071a      	lsls	r2, r3, #28
   14ed4:	d101      	bne.n	14eda <__lo0bits+0x46>
   14ed6:	3004      	adds	r0, #4
   14ed8:	091b      	lsrs	r3, r3, #4
   14eda:	079a      	lsls	r2, r3, #30
   14edc:	d101      	bne.n	14ee2 <__lo0bits+0x4e>
   14ede:	3002      	adds	r0, #2
   14ee0:	089b      	lsrs	r3, r3, #2
   14ee2:	07da      	lsls	r2, r3, #31
   14ee4:	d4e8      	bmi.n	14eb8 <__lo0bits+0x24>
   14ee6:	085b      	lsrs	r3, r3, #1
   14ee8:	d001      	beq.n	14eee <__lo0bits+0x5a>
   14eea:	3001      	adds	r0, #1
   14eec:	e7e4      	b.n	14eb8 <__lo0bits+0x24>
   14eee:	2020      	movs	r0, #32
   14ef0:	e7e0      	b.n	14eb4 <__lo0bits+0x20>

00014ef2 <__i2b>:
   14ef2:	b510      	push	{r4, lr}
   14ef4:	000c      	movs	r4, r1
   14ef6:	2101      	movs	r1, #1
   14ef8:	f7ff ff25 	bl	14d46 <_Balloc>
   14efc:	2301      	movs	r3, #1
   14efe:	6144      	str	r4, [r0, #20]
   14f00:	6103      	str	r3, [r0, #16]
   14f02:	bd10      	pop	{r4, pc}

00014f04 <__multiply>:
   14f04:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f06:	690b      	ldr	r3, [r1, #16]
   14f08:	0015      	movs	r5, r2
   14f0a:	6912      	ldr	r2, [r2, #16]
   14f0c:	b089      	sub	sp, #36	; 0x24
   14f0e:	000c      	movs	r4, r1
   14f10:	4293      	cmp	r3, r2
   14f12:	da01      	bge.n	14f18 <__multiply+0x14>
   14f14:	002c      	movs	r4, r5
   14f16:	000d      	movs	r5, r1
   14f18:	6927      	ldr	r7, [r4, #16]
   14f1a:	692e      	ldr	r6, [r5, #16]
   14f1c:	68a2      	ldr	r2, [r4, #8]
   14f1e:	19bb      	adds	r3, r7, r6
   14f20:	6861      	ldr	r1, [r4, #4]
   14f22:	9301      	str	r3, [sp, #4]
   14f24:	4293      	cmp	r3, r2
   14f26:	dd00      	ble.n	14f2a <__multiply+0x26>
   14f28:	3101      	adds	r1, #1
   14f2a:	f7ff ff0c 	bl	14d46 <_Balloc>
   14f2e:	0003      	movs	r3, r0
   14f30:	3314      	adds	r3, #20
   14f32:	9300      	str	r3, [sp, #0]
   14f34:	9a00      	ldr	r2, [sp, #0]
   14f36:	19bb      	adds	r3, r7, r6
   14f38:	4694      	mov	ip, r2
   14f3a:	009b      	lsls	r3, r3, #2
   14f3c:	449c      	add	ip, r3
   14f3e:	0013      	movs	r3, r2
   14f40:	2200      	movs	r2, #0
   14f42:	9004      	str	r0, [sp, #16]
   14f44:	4563      	cmp	r3, ip
   14f46:	d31c      	bcc.n	14f82 <__multiply+0x7e>
   14f48:	002a      	movs	r2, r5
   14f4a:	3414      	adds	r4, #20
   14f4c:	00bf      	lsls	r7, r7, #2
   14f4e:	19e3      	adds	r3, r4, r7
   14f50:	3214      	adds	r2, #20
   14f52:	00b6      	lsls	r6, r6, #2
   14f54:	9305      	str	r3, [sp, #20]
   14f56:	1993      	adds	r3, r2, r6
   14f58:	9402      	str	r4, [sp, #8]
   14f5a:	9306      	str	r3, [sp, #24]
   14f5c:	9b06      	ldr	r3, [sp, #24]
   14f5e:	429a      	cmp	r2, r3
   14f60:	d311      	bcc.n	14f86 <__multiply+0x82>
   14f62:	9b01      	ldr	r3, [sp, #4]
   14f64:	2b00      	cmp	r3, #0
   14f66:	dd06      	ble.n	14f76 <__multiply+0x72>
   14f68:	2304      	movs	r3, #4
   14f6a:	425b      	negs	r3, r3
   14f6c:	449c      	add	ip, r3
   14f6e:	4663      	mov	r3, ip
   14f70:	681b      	ldr	r3, [r3, #0]
   14f72:	2b00      	cmp	r3, #0
   14f74:	d051      	beq.n	1501a <__multiply+0x116>
   14f76:	9b04      	ldr	r3, [sp, #16]
   14f78:	9a01      	ldr	r2, [sp, #4]
   14f7a:	0018      	movs	r0, r3
   14f7c:	611a      	str	r2, [r3, #16]
   14f7e:	b009      	add	sp, #36	; 0x24
   14f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14f82:	c304      	stmia	r3!, {r2}
   14f84:	e7de      	b.n	14f44 <__multiply+0x40>
   14f86:	8814      	ldrh	r4, [r2, #0]
   14f88:	2c00      	cmp	r4, #0
   14f8a:	d01e      	beq.n	14fca <__multiply+0xc6>
   14f8c:	2600      	movs	r6, #0
   14f8e:	9d00      	ldr	r5, [sp, #0]
   14f90:	9f02      	ldr	r7, [sp, #8]
   14f92:	cf01      	ldmia	r7!, {r0}
   14f94:	9507      	str	r5, [sp, #28]
   14f96:	cd08      	ldmia	r5!, {r3}
   14f98:	9303      	str	r3, [sp, #12]
   14f9a:	b283      	uxth	r3, r0
   14f9c:	4363      	muls	r3, r4
   14f9e:	0019      	movs	r1, r3
   14fa0:	466b      	mov	r3, sp
   14fa2:	0c00      	lsrs	r0, r0, #16
   14fa4:	899b      	ldrh	r3, [r3, #12]
   14fa6:	4360      	muls	r0, r4
   14fa8:	18cb      	adds	r3, r1, r3
   14faa:	9903      	ldr	r1, [sp, #12]
   14fac:	199b      	adds	r3, r3, r6
   14fae:	0c09      	lsrs	r1, r1, #16
   14fb0:	1841      	adds	r1, r0, r1
   14fb2:	0c18      	lsrs	r0, r3, #16
   14fb4:	1809      	adds	r1, r1, r0
   14fb6:	0c0e      	lsrs	r6, r1, #16
   14fb8:	b29b      	uxth	r3, r3
   14fba:	0409      	lsls	r1, r1, #16
   14fbc:	430b      	orrs	r3, r1
   14fbe:	9907      	ldr	r1, [sp, #28]
   14fc0:	600b      	str	r3, [r1, #0]
   14fc2:	9b05      	ldr	r3, [sp, #20]
   14fc4:	42bb      	cmp	r3, r7
   14fc6:	d8e4      	bhi.n	14f92 <__multiply+0x8e>
   14fc8:	602e      	str	r6, [r5, #0]
   14fca:	6813      	ldr	r3, [r2, #0]
   14fcc:	0c1b      	lsrs	r3, r3, #16
   14fce:	9303      	str	r3, [sp, #12]
   14fd0:	d01e      	beq.n	15010 <__multiply+0x10c>
   14fd2:	2600      	movs	r6, #0
   14fd4:	9b00      	ldr	r3, [sp, #0]
   14fd6:	9c02      	ldr	r4, [sp, #8]
   14fd8:	681b      	ldr	r3, [r3, #0]
   14fda:	9800      	ldr	r0, [sp, #0]
   14fdc:	0007      	movs	r7, r0
   14fde:	8821      	ldrh	r1, [r4, #0]
   14fe0:	9d03      	ldr	r5, [sp, #12]
   14fe2:	b29b      	uxth	r3, r3
   14fe4:	4369      	muls	r1, r5
   14fe6:	c820      	ldmia	r0!, {r5}
   14fe8:	0c2d      	lsrs	r5, r5, #16
   14fea:	1949      	adds	r1, r1, r5
   14fec:	198e      	adds	r6, r1, r6
   14fee:	0431      	lsls	r1, r6, #16
   14ff0:	430b      	orrs	r3, r1
   14ff2:	603b      	str	r3, [r7, #0]
   14ff4:	cc08      	ldmia	r4!, {r3}
   14ff6:	9903      	ldr	r1, [sp, #12]
   14ff8:	0c1b      	lsrs	r3, r3, #16
   14ffa:	434b      	muls	r3, r1
   14ffc:	6879      	ldr	r1, [r7, #4]
   14ffe:	0c36      	lsrs	r6, r6, #16
   15000:	b289      	uxth	r1, r1
   15002:	185b      	adds	r3, r3, r1
   15004:	9905      	ldr	r1, [sp, #20]
   15006:	199b      	adds	r3, r3, r6
   15008:	0c1e      	lsrs	r6, r3, #16
   1500a:	42a1      	cmp	r1, r4
   1500c:	d8e6      	bhi.n	14fdc <__multiply+0xd8>
   1500e:	6003      	str	r3, [r0, #0]
   15010:	9b00      	ldr	r3, [sp, #0]
   15012:	3204      	adds	r2, #4
   15014:	3304      	adds	r3, #4
   15016:	9300      	str	r3, [sp, #0]
   15018:	e7a0      	b.n	14f5c <__multiply+0x58>
   1501a:	9b01      	ldr	r3, [sp, #4]
   1501c:	3b01      	subs	r3, #1
   1501e:	9301      	str	r3, [sp, #4]
   15020:	e79f      	b.n	14f62 <__multiply+0x5e>
	...

00015024 <__pow5mult>:
   15024:	2303      	movs	r3, #3
   15026:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15028:	4013      	ands	r3, r2
   1502a:	0005      	movs	r5, r0
   1502c:	000e      	movs	r6, r1
   1502e:	0014      	movs	r4, r2
   15030:	2b00      	cmp	r3, #0
   15032:	d008      	beq.n	15046 <__pow5mult+0x22>
   15034:	4922      	ldr	r1, [pc, #136]	; (150c0 <__pow5mult+0x9c>)
   15036:	3b01      	subs	r3, #1
   15038:	009a      	lsls	r2, r3, #2
   1503a:	5852      	ldr	r2, [r2, r1]
   1503c:	2300      	movs	r3, #0
   1503e:	0031      	movs	r1, r6
   15040:	f7ff fed2 	bl	14de8 <__multadd>
   15044:	0006      	movs	r6, r0
   15046:	10a3      	asrs	r3, r4, #2
   15048:	9301      	str	r3, [sp, #4]
   1504a:	d036      	beq.n	150ba <__pow5mult+0x96>
   1504c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1504e:	2c00      	cmp	r4, #0
   15050:	d107      	bne.n	15062 <__pow5mult+0x3e>
   15052:	2010      	movs	r0, #16
   15054:	f7fd fd66 	bl	12b24 <malloc>
   15058:	6268      	str	r0, [r5, #36]	; 0x24
   1505a:	6044      	str	r4, [r0, #4]
   1505c:	6084      	str	r4, [r0, #8]
   1505e:	6004      	str	r4, [r0, #0]
   15060:	60c4      	str	r4, [r0, #12]
   15062:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   15064:	68bc      	ldr	r4, [r7, #8]
   15066:	2c00      	cmp	r4, #0
   15068:	d107      	bne.n	1507a <__pow5mult+0x56>
   1506a:	4916      	ldr	r1, [pc, #88]	; (150c4 <__pow5mult+0xa0>)
   1506c:	0028      	movs	r0, r5
   1506e:	f7ff ff40 	bl	14ef2 <__i2b>
   15072:	2300      	movs	r3, #0
   15074:	0004      	movs	r4, r0
   15076:	60b8      	str	r0, [r7, #8]
   15078:	6003      	str	r3, [r0, #0]
   1507a:	2201      	movs	r2, #1
   1507c:	9b01      	ldr	r3, [sp, #4]
   1507e:	4213      	tst	r3, r2
   15080:	d00a      	beq.n	15098 <__pow5mult+0x74>
   15082:	0031      	movs	r1, r6
   15084:	0022      	movs	r2, r4
   15086:	0028      	movs	r0, r5
   15088:	f7ff ff3c 	bl	14f04 <__multiply>
   1508c:	0007      	movs	r7, r0
   1508e:	0031      	movs	r1, r6
   15090:	0028      	movs	r0, r5
   15092:	f7ff fe90 	bl	14db6 <_Bfree>
   15096:	003e      	movs	r6, r7
   15098:	9b01      	ldr	r3, [sp, #4]
   1509a:	105b      	asrs	r3, r3, #1
   1509c:	9301      	str	r3, [sp, #4]
   1509e:	d00c      	beq.n	150ba <__pow5mult+0x96>
   150a0:	6820      	ldr	r0, [r4, #0]
   150a2:	2800      	cmp	r0, #0
   150a4:	d107      	bne.n	150b6 <__pow5mult+0x92>
   150a6:	0022      	movs	r2, r4
   150a8:	0021      	movs	r1, r4
   150aa:	0028      	movs	r0, r5
   150ac:	f7ff ff2a 	bl	14f04 <__multiply>
   150b0:	2300      	movs	r3, #0
   150b2:	6020      	str	r0, [r4, #0]
   150b4:	6003      	str	r3, [r0, #0]
   150b6:	0004      	movs	r4, r0
   150b8:	e7df      	b.n	1507a <__pow5mult+0x56>
   150ba:	0030      	movs	r0, r6
   150bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   150be:	46c0      	nop			; (mov r8, r8)
   150c0:	0001be28 	.word	0x0001be28
   150c4:	00000271 	.word	0x00000271

000150c8 <__lshift>:
   150c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   150ca:	000d      	movs	r5, r1
   150cc:	0017      	movs	r7, r2
   150ce:	692b      	ldr	r3, [r5, #16]
   150d0:	1154      	asrs	r4, r2, #5
   150d2:	b085      	sub	sp, #20
   150d4:	18e3      	adds	r3, r4, r3
   150d6:	9302      	str	r3, [sp, #8]
   150d8:	3301      	adds	r3, #1
   150da:	9301      	str	r3, [sp, #4]
   150dc:	6849      	ldr	r1, [r1, #4]
   150de:	68ab      	ldr	r3, [r5, #8]
   150e0:	9003      	str	r0, [sp, #12]
   150e2:	9a01      	ldr	r2, [sp, #4]
   150e4:	4293      	cmp	r3, r2
   150e6:	db34      	blt.n	15152 <__lshift+0x8a>
   150e8:	9803      	ldr	r0, [sp, #12]
   150ea:	f7ff fe2c 	bl	14d46 <_Balloc>
   150ee:	2300      	movs	r3, #0
   150f0:	0002      	movs	r2, r0
   150f2:	0006      	movs	r6, r0
   150f4:	0019      	movs	r1, r3
   150f6:	3214      	adds	r2, #20
   150f8:	42a3      	cmp	r3, r4
   150fa:	db2d      	blt.n	15158 <__lshift+0x90>
   150fc:	43e3      	mvns	r3, r4
   150fe:	17db      	asrs	r3, r3, #31
   15100:	401c      	ands	r4, r3
   15102:	002b      	movs	r3, r5
   15104:	211f      	movs	r1, #31
   15106:	00a4      	lsls	r4, r4, #2
   15108:	1914      	adds	r4, r2, r4
   1510a:	692a      	ldr	r2, [r5, #16]
   1510c:	3314      	adds	r3, #20
   1510e:	0092      	lsls	r2, r2, #2
   15110:	189a      	adds	r2, r3, r2
   15112:	400f      	ands	r7, r1
   15114:	d024      	beq.n	15160 <__lshift+0x98>
   15116:	3101      	adds	r1, #1
   15118:	1bc9      	subs	r1, r1, r7
   1511a:	468c      	mov	ip, r1
   1511c:	2100      	movs	r1, #0
   1511e:	6818      	ldr	r0, [r3, #0]
   15120:	40b8      	lsls	r0, r7
   15122:	4301      	orrs	r1, r0
   15124:	4660      	mov	r0, ip
   15126:	6021      	str	r1, [r4, #0]
   15128:	cb02      	ldmia	r3!, {r1}
   1512a:	3404      	adds	r4, #4
   1512c:	40c1      	lsrs	r1, r0
   1512e:	429a      	cmp	r2, r3
   15130:	d8f5      	bhi.n	1511e <__lshift+0x56>
   15132:	6021      	str	r1, [r4, #0]
   15134:	2900      	cmp	r1, #0
   15136:	d002      	beq.n	1513e <__lshift+0x76>
   15138:	9b02      	ldr	r3, [sp, #8]
   1513a:	3302      	adds	r3, #2
   1513c:	9301      	str	r3, [sp, #4]
   1513e:	9b01      	ldr	r3, [sp, #4]
   15140:	9803      	ldr	r0, [sp, #12]
   15142:	3b01      	subs	r3, #1
   15144:	6133      	str	r3, [r6, #16]
   15146:	0029      	movs	r1, r5
   15148:	f7ff fe35 	bl	14db6 <_Bfree>
   1514c:	0030      	movs	r0, r6
   1514e:	b005      	add	sp, #20
   15150:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15152:	3101      	adds	r1, #1
   15154:	005b      	lsls	r3, r3, #1
   15156:	e7c4      	b.n	150e2 <__lshift+0x1a>
   15158:	0098      	lsls	r0, r3, #2
   1515a:	5011      	str	r1, [r2, r0]
   1515c:	3301      	adds	r3, #1
   1515e:	e7cb      	b.n	150f8 <__lshift+0x30>
   15160:	cb02      	ldmia	r3!, {r1}
   15162:	c402      	stmia	r4!, {r1}
   15164:	429a      	cmp	r2, r3
   15166:	d8fb      	bhi.n	15160 <__lshift+0x98>
   15168:	e7e9      	b.n	1513e <__lshift+0x76>

0001516a <__mcmp>:
   1516a:	690a      	ldr	r2, [r1, #16]
   1516c:	6903      	ldr	r3, [r0, #16]
   1516e:	b530      	push	{r4, r5, lr}
   15170:	1a9b      	subs	r3, r3, r2
   15172:	d10e      	bne.n	15192 <__mcmp+0x28>
   15174:	0092      	lsls	r2, r2, #2
   15176:	3014      	adds	r0, #20
   15178:	3114      	adds	r1, #20
   1517a:	1884      	adds	r4, r0, r2
   1517c:	1889      	adds	r1, r1, r2
   1517e:	3c04      	subs	r4, #4
   15180:	3904      	subs	r1, #4
   15182:	6822      	ldr	r2, [r4, #0]
   15184:	680d      	ldr	r5, [r1, #0]
   15186:	42aa      	cmp	r2, r5
   15188:	d005      	beq.n	15196 <__mcmp+0x2c>
   1518a:	42aa      	cmp	r2, r5
   1518c:	4192      	sbcs	r2, r2
   1518e:	2301      	movs	r3, #1
   15190:	4313      	orrs	r3, r2
   15192:	0018      	movs	r0, r3
   15194:	bd30      	pop	{r4, r5, pc}
   15196:	42a0      	cmp	r0, r4
   15198:	d3f1      	bcc.n	1517e <__mcmp+0x14>
   1519a:	e7fa      	b.n	15192 <__mcmp+0x28>

0001519c <__mdiff>:
   1519c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1519e:	000d      	movs	r5, r1
   151a0:	b085      	sub	sp, #20
   151a2:	0007      	movs	r7, r0
   151a4:	0011      	movs	r1, r2
   151a6:	0028      	movs	r0, r5
   151a8:	0014      	movs	r4, r2
   151aa:	f7ff ffde 	bl	1516a <__mcmp>
   151ae:	1e06      	subs	r6, r0, #0
   151b0:	d108      	bne.n	151c4 <__mdiff+0x28>
   151b2:	0001      	movs	r1, r0
   151b4:	0038      	movs	r0, r7
   151b6:	f7ff fdc6 	bl	14d46 <_Balloc>
   151ba:	2301      	movs	r3, #1
   151bc:	6146      	str	r6, [r0, #20]
   151be:	6103      	str	r3, [r0, #16]
   151c0:	b005      	add	sp, #20
   151c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   151c4:	2301      	movs	r3, #1
   151c6:	9301      	str	r3, [sp, #4]
   151c8:	2800      	cmp	r0, #0
   151ca:	db04      	blt.n	151d6 <__mdiff+0x3a>
   151cc:	0023      	movs	r3, r4
   151ce:	002c      	movs	r4, r5
   151d0:	001d      	movs	r5, r3
   151d2:	2300      	movs	r3, #0
   151d4:	9301      	str	r3, [sp, #4]
   151d6:	6861      	ldr	r1, [r4, #4]
   151d8:	0038      	movs	r0, r7
   151da:	f7ff fdb4 	bl	14d46 <_Balloc>
   151de:	002f      	movs	r7, r5
   151e0:	2200      	movs	r2, #0
   151e2:	9b01      	ldr	r3, [sp, #4]
   151e4:	6926      	ldr	r6, [r4, #16]
   151e6:	60c3      	str	r3, [r0, #12]
   151e8:	3414      	adds	r4, #20
   151ea:	00b3      	lsls	r3, r6, #2
   151ec:	18e3      	adds	r3, r4, r3
   151ee:	9302      	str	r3, [sp, #8]
   151f0:	692b      	ldr	r3, [r5, #16]
   151f2:	3714      	adds	r7, #20
   151f4:	009b      	lsls	r3, r3, #2
   151f6:	18fb      	adds	r3, r7, r3
   151f8:	9303      	str	r3, [sp, #12]
   151fa:	0003      	movs	r3, r0
   151fc:	4694      	mov	ip, r2
   151fe:	3314      	adds	r3, #20
   15200:	cc20      	ldmia	r4!, {r5}
   15202:	cf04      	ldmia	r7!, {r2}
   15204:	9201      	str	r2, [sp, #4]
   15206:	b2aa      	uxth	r2, r5
   15208:	4494      	add	ip, r2
   1520a:	466a      	mov	r2, sp
   1520c:	4661      	mov	r1, ip
   1520e:	8892      	ldrh	r2, [r2, #4]
   15210:	0c2d      	lsrs	r5, r5, #16
   15212:	1a8a      	subs	r2, r1, r2
   15214:	9901      	ldr	r1, [sp, #4]
   15216:	0c09      	lsrs	r1, r1, #16
   15218:	1a69      	subs	r1, r5, r1
   1521a:	1415      	asrs	r5, r2, #16
   1521c:	1949      	adds	r1, r1, r5
   1521e:	140d      	asrs	r5, r1, #16
   15220:	b292      	uxth	r2, r2
   15222:	0409      	lsls	r1, r1, #16
   15224:	430a      	orrs	r2, r1
   15226:	601a      	str	r2, [r3, #0]
   15228:	9a03      	ldr	r2, [sp, #12]
   1522a:	46ac      	mov	ip, r5
   1522c:	3304      	adds	r3, #4
   1522e:	42ba      	cmp	r2, r7
   15230:	d8e6      	bhi.n	15200 <__mdiff+0x64>
   15232:	9902      	ldr	r1, [sp, #8]
   15234:	001a      	movs	r2, r3
   15236:	428c      	cmp	r4, r1
   15238:	d305      	bcc.n	15246 <__mdiff+0xaa>
   1523a:	3a04      	subs	r2, #4
   1523c:	6813      	ldr	r3, [r2, #0]
   1523e:	2b00      	cmp	r3, #0
   15240:	d00e      	beq.n	15260 <__mdiff+0xc4>
   15242:	6106      	str	r6, [r0, #16]
   15244:	e7bc      	b.n	151c0 <__mdiff+0x24>
   15246:	cc04      	ldmia	r4!, {r2}
   15248:	b291      	uxth	r1, r2
   1524a:	4461      	add	r1, ip
   1524c:	140d      	asrs	r5, r1, #16
   1524e:	0c12      	lsrs	r2, r2, #16
   15250:	1952      	adds	r2, r2, r5
   15252:	1415      	asrs	r5, r2, #16
   15254:	b289      	uxth	r1, r1
   15256:	0412      	lsls	r2, r2, #16
   15258:	430a      	orrs	r2, r1
   1525a:	46ac      	mov	ip, r5
   1525c:	c304      	stmia	r3!, {r2}
   1525e:	e7e8      	b.n	15232 <__mdiff+0x96>
   15260:	3e01      	subs	r6, #1
   15262:	e7ea      	b.n	1523a <__mdiff+0x9e>

00015264 <__d2b>:
   15264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15266:	001d      	movs	r5, r3
   15268:	2101      	movs	r1, #1
   1526a:	9f08      	ldr	r7, [sp, #32]
   1526c:	0014      	movs	r4, r2
   1526e:	f7ff fd6a 	bl	14d46 <_Balloc>
   15272:	032b      	lsls	r3, r5, #12
   15274:	006d      	lsls	r5, r5, #1
   15276:	0006      	movs	r6, r0
   15278:	0b1b      	lsrs	r3, r3, #12
   1527a:	0d6d      	lsrs	r5, r5, #21
   1527c:	d124      	bne.n	152c8 <__d2b+0x64>
   1527e:	9301      	str	r3, [sp, #4]
   15280:	2c00      	cmp	r4, #0
   15282:	d027      	beq.n	152d4 <__d2b+0x70>
   15284:	4668      	mov	r0, sp
   15286:	9400      	str	r4, [sp, #0]
   15288:	f7ff fe04 	bl	14e94 <__lo0bits>
   1528c:	9c00      	ldr	r4, [sp, #0]
   1528e:	2800      	cmp	r0, #0
   15290:	d01e      	beq.n	152d0 <__d2b+0x6c>
   15292:	9b01      	ldr	r3, [sp, #4]
   15294:	2120      	movs	r1, #32
   15296:	001a      	movs	r2, r3
   15298:	1a09      	subs	r1, r1, r0
   1529a:	408a      	lsls	r2, r1
   1529c:	40c3      	lsrs	r3, r0
   1529e:	4322      	orrs	r2, r4
   152a0:	6172      	str	r2, [r6, #20]
   152a2:	9301      	str	r3, [sp, #4]
   152a4:	9c01      	ldr	r4, [sp, #4]
   152a6:	61b4      	str	r4, [r6, #24]
   152a8:	1e63      	subs	r3, r4, #1
   152aa:	419c      	sbcs	r4, r3
   152ac:	3401      	adds	r4, #1
   152ae:	6134      	str	r4, [r6, #16]
   152b0:	2d00      	cmp	r5, #0
   152b2:	d018      	beq.n	152e6 <__d2b+0x82>
   152b4:	4b12      	ldr	r3, [pc, #72]	; (15300 <__d2b+0x9c>)
   152b6:	18ed      	adds	r5, r5, r3
   152b8:	2335      	movs	r3, #53	; 0x35
   152ba:	182d      	adds	r5, r5, r0
   152bc:	603d      	str	r5, [r7, #0]
   152be:	1a18      	subs	r0, r3, r0
   152c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   152c2:	6018      	str	r0, [r3, #0]
   152c4:	0030      	movs	r0, r6
   152c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   152c8:	2280      	movs	r2, #128	; 0x80
   152ca:	0352      	lsls	r2, r2, #13
   152cc:	4313      	orrs	r3, r2
   152ce:	e7d6      	b.n	1527e <__d2b+0x1a>
   152d0:	6174      	str	r4, [r6, #20]
   152d2:	e7e7      	b.n	152a4 <__d2b+0x40>
   152d4:	a801      	add	r0, sp, #4
   152d6:	f7ff fddd 	bl	14e94 <__lo0bits>
   152da:	2401      	movs	r4, #1
   152dc:	9b01      	ldr	r3, [sp, #4]
   152de:	6134      	str	r4, [r6, #16]
   152e0:	6173      	str	r3, [r6, #20]
   152e2:	3020      	adds	r0, #32
   152e4:	e7e4      	b.n	152b0 <__d2b+0x4c>
   152e6:	4b07      	ldr	r3, [pc, #28]	; (15304 <__d2b+0xa0>)
   152e8:	18c0      	adds	r0, r0, r3
   152ea:	4b07      	ldr	r3, [pc, #28]	; (15308 <__d2b+0xa4>)
   152ec:	6038      	str	r0, [r7, #0]
   152ee:	18e3      	adds	r3, r4, r3
   152f0:	009b      	lsls	r3, r3, #2
   152f2:	18f3      	adds	r3, r6, r3
   152f4:	6958      	ldr	r0, [r3, #20]
   152f6:	f7ff fdb3 	bl	14e60 <__hi0bits>
   152fa:	0164      	lsls	r4, r4, #5
   152fc:	1a20      	subs	r0, r4, r0
   152fe:	e7df      	b.n	152c0 <__d2b+0x5c>
   15300:	fffffbcd 	.word	0xfffffbcd
   15304:	fffffbce 	.word	0xfffffbce
   15308:	3fffffff 	.word	0x3fffffff

0001530c <_calloc_r>:
   1530c:	434a      	muls	r2, r1
   1530e:	b570      	push	{r4, r5, r6, lr}
   15310:	0011      	movs	r1, r2
   15312:	0014      	movs	r4, r2
   15314:	f7fd fc88 	bl	12c28 <_malloc_r>
   15318:	1e05      	subs	r5, r0, #0
   1531a:	d003      	beq.n	15324 <_calloc_r+0x18>
   1531c:	0022      	movs	r2, r4
   1531e:	2100      	movs	r1, #0
   15320:	f7fd fc2f 	bl	12b82 <memset>
   15324:	0028      	movs	r0, r5
   15326:	bd70      	pop	{r4, r5, r6, pc}

00015328 <__ssputs_r>:
   15328:	b5f0      	push	{r4, r5, r6, r7, lr}
   1532a:	688e      	ldr	r6, [r1, #8]
   1532c:	b085      	sub	sp, #20
   1532e:	0007      	movs	r7, r0
   15330:	000c      	movs	r4, r1
   15332:	9203      	str	r2, [sp, #12]
   15334:	9301      	str	r3, [sp, #4]
   15336:	429e      	cmp	r6, r3
   15338:	d839      	bhi.n	153ae <__ssputs_r+0x86>
   1533a:	2390      	movs	r3, #144	; 0x90
   1533c:	898a      	ldrh	r2, [r1, #12]
   1533e:	00db      	lsls	r3, r3, #3
   15340:	421a      	tst	r2, r3
   15342:	d034      	beq.n	153ae <__ssputs_r+0x86>
   15344:	2503      	movs	r5, #3
   15346:	6909      	ldr	r1, [r1, #16]
   15348:	6823      	ldr	r3, [r4, #0]
   1534a:	1a5b      	subs	r3, r3, r1
   1534c:	9302      	str	r3, [sp, #8]
   1534e:	6963      	ldr	r3, [r4, #20]
   15350:	9802      	ldr	r0, [sp, #8]
   15352:	435d      	muls	r5, r3
   15354:	0feb      	lsrs	r3, r5, #31
   15356:	195d      	adds	r5, r3, r5
   15358:	9b01      	ldr	r3, [sp, #4]
   1535a:	106d      	asrs	r5, r5, #1
   1535c:	3301      	adds	r3, #1
   1535e:	181b      	adds	r3, r3, r0
   15360:	42ab      	cmp	r3, r5
   15362:	d900      	bls.n	15366 <__ssputs_r+0x3e>
   15364:	001d      	movs	r5, r3
   15366:	0553      	lsls	r3, r2, #21
   15368:	d532      	bpl.n	153d0 <__ssputs_r+0xa8>
   1536a:	0029      	movs	r1, r5
   1536c:	0038      	movs	r0, r7
   1536e:	f7fd fc5b 	bl	12c28 <_malloc_r>
   15372:	1e06      	subs	r6, r0, #0
   15374:	d109      	bne.n	1538a <__ssputs_r+0x62>
   15376:	230c      	movs	r3, #12
   15378:	603b      	str	r3, [r7, #0]
   1537a:	2340      	movs	r3, #64	; 0x40
   1537c:	2001      	movs	r0, #1
   1537e:	89a2      	ldrh	r2, [r4, #12]
   15380:	4240      	negs	r0, r0
   15382:	4313      	orrs	r3, r2
   15384:	81a3      	strh	r3, [r4, #12]
   15386:	b005      	add	sp, #20
   15388:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1538a:	9a02      	ldr	r2, [sp, #8]
   1538c:	6921      	ldr	r1, [r4, #16]
   1538e:	f7fd fbdd 	bl	12b4c <memcpy>
   15392:	89a3      	ldrh	r3, [r4, #12]
   15394:	4a14      	ldr	r2, [pc, #80]	; (153e8 <__ssputs_r+0xc0>)
   15396:	401a      	ands	r2, r3
   15398:	2380      	movs	r3, #128	; 0x80
   1539a:	4313      	orrs	r3, r2
   1539c:	81a3      	strh	r3, [r4, #12]
   1539e:	9b02      	ldr	r3, [sp, #8]
   153a0:	6126      	str	r6, [r4, #16]
   153a2:	18f6      	adds	r6, r6, r3
   153a4:	6026      	str	r6, [r4, #0]
   153a6:	6165      	str	r5, [r4, #20]
   153a8:	9e01      	ldr	r6, [sp, #4]
   153aa:	1aed      	subs	r5, r5, r3
   153ac:	60a5      	str	r5, [r4, #8]
   153ae:	9b01      	ldr	r3, [sp, #4]
   153b0:	42b3      	cmp	r3, r6
   153b2:	d200      	bcs.n	153b6 <__ssputs_r+0x8e>
   153b4:	001e      	movs	r6, r3
   153b6:	0032      	movs	r2, r6
   153b8:	9903      	ldr	r1, [sp, #12]
   153ba:	6820      	ldr	r0, [r4, #0]
   153bc:	f7fd fbcf 	bl	12b5e <memmove>
   153c0:	68a3      	ldr	r3, [r4, #8]
   153c2:	2000      	movs	r0, #0
   153c4:	1b9b      	subs	r3, r3, r6
   153c6:	60a3      	str	r3, [r4, #8]
   153c8:	6823      	ldr	r3, [r4, #0]
   153ca:	199e      	adds	r6, r3, r6
   153cc:	6026      	str	r6, [r4, #0]
   153ce:	e7da      	b.n	15386 <__ssputs_r+0x5e>
   153d0:	002a      	movs	r2, r5
   153d2:	0038      	movs	r0, r7
   153d4:	f000 f9d2 	bl	1577c <_realloc_r>
   153d8:	1e06      	subs	r6, r0, #0
   153da:	d1e0      	bne.n	1539e <__ssputs_r+0x76>
   153dc:	6921      	ldr	r1, [r4, #16]
   153de:	0038      	movs	r0, r7
   153e0:	f7fd fbd8 	bl	12b94 <_free_r>
   153e4:	e7c7      	b.n	15376 <__ssputs_r+0x4e>
   153e6:	46c0      	nop			; (mov r8, r8)
   153e8:	fffffb7f 	.word	0xfffffb7f

000153ec <_svfiprintf_r>:
   153ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   153ee:	b09f      	sub	sp, #124	; 0x7c
   153f0:	9002      	str	r0, [sp, #8]
   153f2:	9305      	str	r3, [sp, #20]
   153f4:	898b      	ldrh	r3, [r1, #12]
   153f6:	000f      	movs	r7, r1
   153f8:	0016      	movs	r6, r2
   153fa:	061b      	lsls	r3, r3, #24
   153fc:	d511      	bpl.n	15422 <_svfiprintf_r+0x36>
   153fe:	690b      	ldr	r3, [r1, #16]
   15400:	2b00      	cmp	r3, #0
   15402:	d10e      	bne.n	15422 <_svfiprintf_r+0x36>
   15404:	2140      	movs	r1, #64	; 0x40
   15406:	f7fd fc0f 	bl	12c28 <_malloc_r>
   1540a:	6038      	str	r0, [r7, #0]
   1540c:	6138      	str	r0, [r7, #16]
   1540e:	2800      	cmp	r0, #0
   15410:	d105      	bne.n	1541e <_svfiprintf_r+0x32>
   15412:	230c      	movs	r3, #12
   15414:	9a02      	ldr	r2, [sp, #8]
   15416:	3801      	subs	r0, #1
   15418:	6013      	str	r3, [r2, #0]
   1541a:	b01f      	add	sp, #124	; 0x7c
   1541c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1541e:	2340      	movs	r3, #64	; 0x40
   15420:	617b      	str	r3, [r7, #20]
   15422:	2300      	movs	r3, #0
   15424:	ad06      	add	r5, sp, #24
   15426:	616b      	str	r3, [r5, #20]
   15428:	3320      	adds	r3, #32
   1542a:	766b      	strb	r3, [r5, #25]
   1542c:	3310      	adds	r3, #16
   1542e:	76ab      	strb	r3, [r5, #26]
   15430:	0034      	movs	r4, r6
   15432:	7823      	ldrb	r3, [r4, #0]
   15434:	2b00      	cmp	r3, #0
   15436:	d147      	bne.n	154c8 <_svfiprintf_r+0xdc>
   15438:	1ba3      	subs	r3, r4, r6
   1543a:	9304      	str	r3, [sp, #16]
   1543c:	d00d      	beq.n	1545a <_svfiprintf_r+0x6e>
   1543e:	1ba3      	subs	r3, r4, r6
   15440:	0032      	movs	r2, r6
   15442:	0039      	movs	r1, r7
   15444:	9802      	ldr	r0, [sp, #8]
   15446:	f7ff ff6f 	bl	15328 <__ssputs_r>
   1544a:	1c43      	adds	r3, r0, #1
   1544c:	d100      	bne.n	15450 <_svfiprintf_r+0x64>
   1544e:	e0b5      	b.n	155bc <_svfiprintf_r+0x1d0>
   15450:	696a      	ldr	r2, [r5, #20]
   15452:	9b04      	ldr	r3, [sp, #16]
   15454:	4694      	mov	ip, r2
   15456:	4463      	add	r3, ip
   15458:	616b      	str	r3, [r5, #20]
   1545a:	7823      	ldrb	r3, [r4, #0]
   1545c:	2b00      	cmp	r3, #0
   1545e:	d100      	bne.n	15462 <_svfiprintf_r+0x76>
   15460:	e0ac      	b.n	155bc <_svfiprintf_r+0x1d0>
   15462:	2201      	movs	r2, #1
   15464:	2300      	movs	r3, #0
   15466:	4252      	negs	r2, r2
   15468:	606a      	str	r2, [r5, #4]
   1546a:	a902      	add	r1, sp, #8
   1546c:	3254      	adds	r2, #84	; 0x54
   1546e:	1852      	adds	r2, r2, r1
   15470:	3401      	adds	r4, #1
   15472:	602b      	str	r3, [r5, #0]
   15474:	60eb      	str	r3, [r5, #12]
   15476:	60ab      	str	r3, [r5, #8]
   15478:	7013      	strb	r3, [r2, #0]
   1547a:	65ab      	str	r3, [r5, #88]	; 0x58
   1547c:	4e58      	ldr	r6, [pc, #352]	; (155e0 <_svfiprintf_r+0x1f4>)
   1547e:	2205      	movs	r2, #5
   15480:	7821      	ldrb	r1, [r4, #0]
   15482:	0030      	movs	r0, r6
   15484:	f7ff fc52 	bl	14d2c <memchr>
   15488:	1c62      	adds	r2, r4, #1
   1548a:	2800      	cmp	r0, #0
   1548c:	d120      	bne.n	154d0 <_svfiprintf_r+0xe4>
   1548e:	6829      	ldr	r1, [r5, #0]
   15490:	06cb      	lsls	r3, r1, #27
   15492:	d504      	bpl.n	1549e <_svfiprintf_r+0xb2>
   15494:	2353      	movs	r3, #83	; 0x53
   15496:	ae02      	add	r6, sp, #8
   15498:	3020      	adds	r0, #32
   1549a:	199b      	adds	r3, r3, r6
   1549c:	7018      	strb	r0, [r3, #0]
   1549e:	070b      	lsls	r3, r1, #28
   154a0:	d504      	bpl.n	154ac <_svfiprintf_r+0xc0>
   154a2:	2353      	movs	r3, #83	; 0x53
   154a4:	202b      	movs	r0, #43	; 0x2b
   154a6:	ae02      	add	r6, sp, #8
   154a8:	199b      	adds	r3, r3, r6
   154aa:	7018      	strb	r0, [r3, #0]
   154ac:	7823      	ldrb	r3, [r4, #0]
   154ae:	2b2a      	cmp	r3, #42	; 0x2a
   154b0:	d016      	beq.n	154e0 <_svfiprintf_r+0xf4>
   154b2:	2000      	movs	r0, #0
   154b4:	210a      	movs	r1, #10
   154b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   154b8:	7822      	ldrb	r2, [r4, #0]
   154ba:	3a30      	subs	r2, #48	; 0x30
   154bc:	2a09      	cmp	r2, #9
   154be:	d955      	bls.n	1556c <_svfiprintf_r+0x180>
   154c0:	2800      	cmp	r0, #0
   154c2:	d015      	beq.n	154f0 <_svfiprintf_r+0x104>
   154c4:	9309      	str	r3, [sp, #36]	; 0x24
   154c6:	e013      	b.n	154f0 <_svfiprintf_r+0x104>
   154c8:	2b25      	cmp	r3, #37	; 0x25
   154ca:	d0b5      	beq.n	15438 <_svfiprintf_r+0x4c>
   154cc:	3401      	adds	r4, #1
   154ce:	e7b0      	b.n	15432 <_svfiprintf_r+0x46>
   154d0:	2301      	movs	r3, #1
   154d2:	1b80      	subs	r0, r0, r6
   154d4:	4083      	lsls	r3, r0
   154d6:	6829      	ldr	r1, [r5, #0]
   154d8:	0014      	movs	r4, r2
   154da:	430b      	orrs	r3, r1
   154dc:	602b      	str	r3, [r5, #0]
   154de:	e7cd      	b.n	1547c <_svfiprintf_r+0x90>
   154e0:	9b05      	ldr	r3, [sp, #20]
   154e2:	1d18      	adds	r0, r3, #4
   154e4:	681b      	ldr	r3, [r3, #0]
   154e6:	9005      	str	r0, [sp, #20]
   154e8:	2b00      	cmp	r3, #0
   154ea:	db39      	blt.n	15560 <_svfiprintf_r+0x174>
   154ec:	9309      	str	r3, [sp, #36]	; 0x24
   154ee:	0014      	movs	r4, r2
   154f0:	7823      	ldrb	r3, [r4, #0]
   154f2:	2b2e      	cmp	r3, #46	; 0x2e
   154f4:	d10b      	bne.n	1550e <_svfiprintf_r+0x122>
   154f6:	7863      	ldrb	r3, [r4, #1]
   154f8:	1c62      	adds	r2, r4, #1
   154fa:	2b2a      	cmp	r3, #42	; 0x2a
   154fc:	d13e      	bne.n	1557c <_svfiprintf_r+0x190>
   154fe:	9b05      	ldr	r3, [sp, #20]
   15500:	3402      	adds	r4, #2
   15502:	1d1a      	adds	r2, r3, #4
   15504:	681b      	ldr	r3, [r3, #0]
   15506:	9205      	str	r2, [sp, #20]
   15508:	2b00      	cmp	r3, #0
   1550a:	db34      	blt.n	15576 <_svfiprintf_r+0x18a>
   1550c:	9307      	str	r3, [sp, #28]
   1550e:	4e35      	ldr	r6, [pc, #212]	; (155e4 <_svfiprintf_r+0x1f8>)
   15510:	7821      	ldrb	r1, [r4, #0]
   15512:	2203      	movs	r2, #3
   15514:	0030      	movs	r0, r6
   15516:	f7ff fc09 	bl	14d2c <memchr>
   1551a:	2800      	cmp	r0, #0
   1551c:	d006      	beq.n	1552c <_svfiprintf_r+0x140>
   1551e:	2340      	movs	r3, #64	; 0x40
   15520:	1b80      	subs	r0, r0, r6
   15522:	4083      	lsls	r3, r0
   15524:	682a      	ldr	r2, [r5, #0]
   15526:	3401      	adds	r4, #1
   15528:	4313      	orrs	r3, r2
   1552a:	602b      	str	r3, [r5, #0]
   1552c:	7821      	ldrb	r1, [r4, #0]
   1552e:	2206      	movs	r2, #6
   15530:	482d      	ldr	r0, [pc, #180]	; (155e8 <_svfiprintf_r+0x1fc>)
   15532:	1c66      	adds	r6, r4, #1
   15534:	7629      	strb	r1, [r5, #24]
   15536:	f7ff fbf9 	bl	14d2c <memchr>
   1553a:	2800      	cmp	r0, #0
   1553c:	d046      	beq.n	155cc <_svfiprintf_r+0x1e0>
   1553e:	4b2b      	ldr	r3, [pc, #172]	; (155ec <_svfiprintf_r+0x200>)
   15540:	2b00      	cmp	r3, #0
   15542:	d12f      	bne.n	155a4 <_svfiprintf_r+0x1b8>
   15544:	6829      	ldr	r1, [r5, #0]
   15546:	9b05      	ldr	r3, [sp, #20]
   15548:	2207      	movs	r2, #7
   1554a:	05c9      	lsls	r1, r1, #23
   1554c:	d528      	bpl.n	155a0 <_svfiprintf_r+0x1b4>
   1554e:	189b      	adds	r3, r3, r2
   15550:	4393      	bics	r3, r2
   15552:	3308      	adds	r3, #8
   15554:	9305      	str	r3, [sp, #20]
   15556:	696b      	ldr	r3, [r5, #20]
   15558:	9a03      	ldr	r2, [sp, #12]
   1555a:	189b      	adds	r3, r3, r2
   1555c:	616b      	str	r3, [r5, #20]
   1555e:	e767      	b.n	15430 <_svfiprintf_r+0x44>
   15560:	425b      	negs	r3, r3
   15562:	60eb      	str	r3, [r5, #12]
   15564:	2302      	movs	r3, #2
   15566:	430b      	orrs	r3, r1
   15568:	602b      	str	r3, [r5, #0]
   1556a:	e7c0      	b.n	154ee <_svfiprintf_r+0x102>
   1556c:	434b      	muls	r3, r1
   1556e:	3401      	adds	r4, #1
   15570:	189b      	adds	r3, r3, r2
   15572:	2001      	movs	r0, #1
   15574:	e7a0      	b.n	154b8 <_svfiprintf_r+0xcc>
   15576:	2301      	movs	r3, #1
   15578:	425b      	negs	r3, r3
   1557a:	e7c7      	b.n	1550c <_svfiprintf_r+0x120>
   1557c:	2300      	movs	r3, #0
   1557e:	0014      	movs	r4, r2
   15580:	200a      	movs	r0, #10
   15582:	001a      	movs	r2, r3
   15584:	606b      	str	r3, [r5, #4]
   15586:	7821      	ldrb	r1, [r4, #0]
   15588:	3930      	subs	r1, #48	; 0x30
   1558a:	2909      	cmp	r1, #9
   1558c:	d903      	bls.n	15596 <_svfiprintf_r+0x1aa>
   1558e:	2b00      	cmp	r3, #0
   15590:	d0bd      	beq.n	1550e <_svfiprintf_r+0x122>
   15592:	9207      	str	r2, [sp, #28]
   15594:	e7bb      	b.n	1550e <_svfiprintf_r+0x122>
   15596:	4342      	muls	r2, r0
   15598:	3401      	adds	r4, #1
   1559a:	1852      	adds	r2, r2, r1
   1559c:	2301      	movs	r3, #1
   1559e:	e7f2      	b.n	15586 <_svfiprintf_r+0x19a>
   155a0:	3307      	adds	r3, #7
   155a2:	e7d5      	b.n	15550 <_svfiprintf_r+0x164>
   155a4:	ab05      	add	r3, sp, #20
   155a6:	9300      	str	r3, [sp, #0]
   155a8:	003a      	movs	r2, r7
   155aa:	4b11      	ldr	r3, [pc, #68]	; (155f0 <_svfiprintf_r+0x204>)
   155ac:	0029      	movs	r1, r5
   155ae:	9802      	ldr	r0, [sp, #8]
   155b0:	f7fd fc34 	bl	12e1c <_printf_float>
   155b4:	9003      	str	r0, [sp, #12]
   155b6:	9b03      	ldr	r3, [sp, #12]
   155b8:	3301      	adds	r3, #1
   155ba:	d1cc      	bne.n	15556 <_svfiprintf_r+0x16a>
   155bc:	89bb      	ldrh	r3, [r7, #12]
   155be:	980b      	ldr	r0, [sp, #44]	; 0x2c
   155c0:	065b      	lsls	r3, r3, #25
   155c2:	d400      	bmi.n	155c6 <_svfiprintf_r+0x1da>
   155c4:	e729      	b.n	1541a <_svfiprintf_r+0x2e>
   155c6:	2001      	movs	r0, #1
   155c8:	4240      	negs	r0, r0
   155ca:	e726      	b.n	1541a <_svfiprintf_r+0x2e>
   155cc:	ab05      	add	r3, sp, #20
   155ce:	9300      	str	r3, [sp, #0]
   155d0:	003a      	movs	r2, r7
   155d2:	4b07      	ldr	r3, [pc, #28]	; (155f0 <_svfiprintf_r+0x204>)
   155d4:	0029      	movs	r1, r5
   155d6:	9802      	ldr	r0, [sp, #8]
   155d8:	f7fd feda 	bl	13390 <_printf_i>
   155dc:	e7ea      	b.n	155b4 <_svfiprintf_r+0x1c8>
   155de:	46c0      	nop			; (mov r8, r8)
   155e0:	0001be34 	.word	0x0001be34
   155e4:	0001be3a 	.word	0x0001be3a
   155e8:	0001be3e 	.word	0x0001be3e
   155ec:	00012e1d 	.word	0x00012e1d
   155f0:	00015329 	.word	0x00015329

000155f4 <__sread>:
   155f4:	b570      	push	{r4, r5, r6, lr}
   155f6:	000c      	movs	r4, r1
   155f8:	250e      	movs	r5, #14
   155fa:	5f49      	ldrsh	r1, [r1, r5]
   155fc:	f000 f8e4 	bl	157c8 <_read_r>
   15600:	2800      	cmp	r0, #0
   15602:	db03      	blt.n	1560c <__sread+0x18>
   15604:	6d63      	ldr	r3, [r4, #84]	; 0x54
   15606:	181b      	adds	r3, r3, r0
   15608:	6563      	str	r3, [r4, #84]	; 0x54
   1560a:	bd70      	pop	{r4, r5, r6, pc}
   1560c:	89a3      	ldrh	r3, [r4, #12]
   1560e:	4a02      	ldr	r2, [pc, #8]	; (15618 <__sread+0x24>)
   15610:	4013      	ands	r3, r2
   15612:	81a3      	strh	r3, [r4, #12]
   15614:	e7f9      	b.n	1560a <__sread+0x16>
   15616:	46c0      	nop			; (mov r8, r8)
   15618:	ffffefff 	.word	0xffffefff

0001561c <__swrite>:
   1561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1561e:	001f      	movs	r7, r3
   15620:	898b      	ldrh	r3, [r1, #12]
   15622:	0005      	movs	r5, r0
   15624:	000c      	movs	r4, r1
   15626:	0016      	movs	r6, r2
   15628:	05db      	lsls	r3, r3, #23
   1562a:	d505      	bpl.n	15638 <__swrite+0x1c>
   1562c:	230e      	movs	r3, #14
   1562e:	5ec9      	ldrsh	r1, [r1, r3]
   15630:	2200      	movs	r2, #0
   15632:	2302      	movs	r3, #2
   15634:	f000 f88e 	bl	15754 <_lseek_r>
   15638:	89a3      	ldrh	r3, [r4, #12]
   1563a:	4a05      	ldr	r2, [pc, #20]	; (15650 <__swrite+0x34>)
   1563c:	0028      	movs	r0, r5
   1563e:	4013      	ands	r3, r2
   15640:	81a3      	strh	r3, [r4, #12]
   15642:	0032      	movs	r2, r6
   15644:	230e      	movs	r3, #14
   15646:	5ee1      	ldrsh	r1, [r4, r3]
   15648:	003b      	movs	r3, r7
   1564a:	f000 f839 	bl	156c0 <_write_r>
   1564e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15650:	ffffefff 	.word	0xffffefff

00015654 <__sseek>:
   15654:	b570      	push	{r4, r5, r6, lr}
   15656:	000c      	movs	r4, r1
   15658:	250e      	movs	r5, #14
   1565a:	5f49      	ldrsh	r1, [r1, r5]
   1565c:	f000 f87a 	bl	15754 <_lseek_r>
   15660:	89a3      	ldrh	r3, [r4, #12]
   15662:	1c42      	adds	r2, r0, #1
   15664:	d103      	bne.n	1566e <__sseek+0x1a>
   15666:	4a05      	ldr	r2, [pc, #20]	; (1567c <__sseek+0x28>)
   15668:	4013      	ands	r3, r2
   1566a:	81a3      	strh	r3, [r4, #12]
   1566c:	bd70      	pop	{r4, r5, r6, pc}
   1566e:	2280      	movs	r2, #128	; 0x80
   15670:	0152      	lsls	r2, r2, #5
   15672:	4313      	orrs	r3, r2
   15674:	81a3      	strh	r3, [r4, #12]
   15676:	6560      	str	r0, [r4, #84]	; 0x54
   15678:	e7f8      	b.n	1566c <__sseek+0x18>
   1567a:	46c0      	nop			; (mov r8, r8)
   1567c:	ffffefff 	.word	0xffffefff

00015680 <__sclose>:
   15680:	b510      	push	{r4, lr}
   15682:	230e      	movs	r3, #14
   15684:	5ec9      	ldrsh	r1, [r1, r3]
   15686:	f000 f82f 	bl	156e8 <_close_r>
   1568a:	bd10      	pop	{r4, pc}

0001568c <strchr>:
   1568c:	b2c9      	uxtb	r1, r1
   1568e:	7803      	ldrb	r3, [r0, #0]
   15690:	2b00      	cmp	r3, #0
   15692:	d004      	beq.n	1569e <strchr+0x12>
   15694:	4299      	cmp	r1, r3
   15696:	d100      	bne.n	1569a <strchr+0xe>
   15698:	4770      	bx	lr
   1569a:	3001      	adds	r0, #1
   1569c:	e7f7      	b.n	1568e <strchr+0x2>
   1569e:	424b      	negs	r3, r1
   156a0:	4159      	adcs	r1, r3
   156a2:	4249      	negs	r1, r1
   156a4:	4008      	ands	r0, r1
   156a6:	e7f7      	b.n	15698 <strchr+0xc>

000156a8 <__ascii_wctomb>:
   156a8:	1e0b      	subs	r3, r1, #0
   156aa:	d004      	beq.n	156b6 <__ascii_wctomb+0xe>
   156ac:	2aff      	cmp	r2, #255	; 0xff
   156ae:	d904      	bls.n	156ba <__ascii_wctomb+0x12>
   156b0:	238a      	movs	r3, #138	; 0x8a
   156b2:	6003      	str	r3, [r0, #0]
   156b4:	3b8b      	subs	r3, #139	; 0x8b
   156b6:	0018      	movs	r0, r3
   156b8:	4770      	bx	lr
   156ba:	700a      	strb	r2, [r1, #0]
   156bc:	2301      	movs	r3, #1
   156be:	e7fa      	b.n	156b6 <__ascii_wctomb+0xe>

000156c0 <_write_r>:
   156c0:	b570      	push	{r4, r5, r6, lr}
   156c2:	0005      	movs	r5, r0
   156c4:	0008      	movs	r0, r1
   156c6:	0011      	movs	r1, r2
   156c8:	2200      	movs	r2, #0
   156ca:	4c06      	ldr	r4, [pc, #24]	; (156e4 <_write_r+0x24>)
   156cc:	6022      	str	r2, [r4, #0]
   156ce:	001a      	movs	r2, r3
   156d0:	f7f9 ff1e 	bl	f510 <_write>
   156d4:	1c43      	adds	r3, r0, #1
   156d6:	d103      	bne.n	156e0 <_write_r+0x20>
   156d8:	6823      	ldr	r3, [r4, #0]
   156da:	2b00      	cmp	r3, #0
   156dc:	d000      	beq.n	156e0 <_write_r+0x20>
   156de:	602b      	str	r3, [r5, #0]
   156e0:	bd70      	pop	{r4, r5, r6, pc}
   156e2:	46c0      	nop			; (mov r8, r8)
   156e4:	20005e00 	.word	0x20005e00

000156e8 <_close_r>:
   156e8:	2300      	movs	r3, #0
   156ea:	b570      	push	{r4, r5, r6, lr}
   156ec:	4c06      	ldr	r4, [pc, #24]	; (15708 <_close_r+0x20>)
   156ee:	0005      	movs	r5, r0
   156f0:	0008      	movs	r0, r1
   156f2:	6023      	str	r3, [r4, #0]
   156f4:	f7f9 ff46 	bl	f584 <_close>
   156f8:	1c43      	adds	r3, r0, #1
   156fa:	d103      	bne.n	15704 <_close_r+0x1c>
   156fc:	6823      	ldr	r3, [r4, #0]
   156fe:	2b00      	cmp	r3, #0
   15700:	d000      	beq.n	15704 <_close_r+0x1c>
   15702:	602b      	str	r3, [r5, #0]
   15704:	bd70      	pop	{r4, r5, r6, pc}
   15706:	46c0      	nop			; (mov r8, r8)
   15708:	20005e00 	.word	0x20005e00

0001570c <_fstat_r>:
   1570c:	2300      	movs	r3, #0
   1570e:	b570      	push	{r4, r5, r6, lr}
   15710:	4c06      	ldr	r4, [pc, #24]	; (1572c <_fstat_r+0x20>)
   15712:	0005      	movs	r5, r0
   15714:	0008      	movs	r0, r1
   15716:	0011      	movs	r1, r2
   15718:	6023      	str	r3, [r4, #0]
   1571a:	f7f9 ff36 	bl	f58a <_fstat>
   1571e:	1c43      	adds	r3, r0, #1
   15720:	d103      	bne.n	1572a <_fstat_r+0x1e>
   15722:	6823      	ldr	r3, [r4, #0]
   15724:	2b00      	cmp	r3, #0
   15726:	d000      	beq.n	1572a <_fstat_r+0x1e>
   15728:	602b      	str	r3, [r5, #0]
   1572a:	bd70      	pop	{r4, r5, r6, pc}
   1572c:	20005e00 	.word	0x20005e00

00015730 <_isatty_r>:
   15730:	2300      	movs	r3, #0
   15732:	b570      	push	{r4, r5, r6, lr}
   15734:	4c06      	ldr	r4, [pc, #24]	; (15750 <_isatty_r+0x20>)
   15736:	0005      	movs	r5, r0
   15738:	0008      	movs	r0, r1
   1573a:	6023      	str	r3, [r4, #0]
   1573c:	f7f9 ff2a 	bl	f594 <_isatty>
   15740:	1c43      	adds	r3, r0, #1
   15742:	d103      	bne.n	1574c <_isatty_r+0x1c>
   15744:	6823      	ldr	r3, [r4, #0]
   15746:	2b00      	cmp	r3, #0
   15748:	d000      	beq.n	1574c <_isatty_r+0x1c>
   1574a:	602b      	str	r3, [r5, #0]
   1574c:	bd70      	pop	{r4, r5, r6, pc}
   1574e:	46c0      	nop			; (mov r8, r8)
   15750:	20005e00 	.word	0x20005e00

00015754 <_lseek_r>:
   15754:	b570      	push	{r4, r5, r6, lr}
   15756:	0005      	movs	r5, r0
   15758:	0008      	movs	r0, r1
   1575a:	0011      	movs	r1, r2
   1575c:	2200      	movs	r2, #0
   1575e:	4c06      	ldr	r4, [pc, #24]	; (15778 <_lseek_r+0x24>)
   15760:	6022      	str	r2, [r4, #0]
   15762:	001a      	movs	r2, r3
   15764:	f7f9 ff18 	bl	f598 <_lseek>
   15768:	1c43      	adds	r3, r0, #1
   1576a:	d103      	bne.n	15774 <_lseek_r+0x20>
   1576c:	6823      	ldr	r3, [r4, #0]
   1576e:	2b00      	cmp	r3, #0
   15770:	d000      	beq.n	15774 <_lseek_r+0x20>
   15772:	602b      	str	r3, [r5, #0]
   15774:	bd70      	pop	{r4, r5, r6, pc}
   15776:	46c0      	nop			; (mov r8, r8)
   15778:	20005e00 	.word	0x20005e00

0001577c <_realloc_r>:
   1577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1577e:	0007      	movs	r7, r0
   15780:	000d      	movs	r5, r1
   15782:	0016      	movs	r6, r2
   15784:	2900      	cmp	r1, #0
   15786:	d105      	bne.n	15794 <_realloc_r+0x18>
   15788:	0011      	movs	r1, r2
   1578a:	f7fd fa4d 	bl	12c28 <_malloc_r>
   1578e:	0004      	movs	r4, r0
   15790:	0020      	movs	r0, r4
   15792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15794:	2a00      	cmp	r2, #0
   15796:	d103      	bne.n	157a0 <_realloc_r+0x24>
   15798:	f7fd f9fc 	bl	12b94 <_free_r>
   1579c:	0034      	movs	r4, r6
   1579e:	e7f7      	b.n	15790 <_realloc_r+0x14>
   157a0:	f000 f826 	bl	157f0 <_malloc_usable_size_r>
   157a4:	002c      	movs	r4, r5
   157a6:	4286      	cmp	r6, r0
   157a8:	d9f2      	bls.n	15790 <_realloc_r+0x14>
   157aa:	0031      	movs	r1, r6
   157ac:	0038      	movs	r0, r7
   157ae:	f7fd fa3b 	bl	12c28 <_malloc_r>
   157b2:	1e04      	subs	r4, r0, #0
   157b4:	d0ec      	beq.n	15790 <_realloc_r+0x14>
   157b6:	0029      	movs	r1, r5
   157b8:	0032      	movs	r2, r6
   157ba:	f7fd f9c7 	bl	12b4c <memcpy>
   157be:	0029      	movs	r1, r5
   157c0:	0038      	movs	r0, r7
   157c2:	f7fd f9e7 	bl	12b94 <_free_r>
   157c6:	e7e3      	b.n	15790 <_realloc_r+0x14>

000157c8 <_read_r>:
   157c8:	b570      	push	{r4, r5, r6, lr}
   157ca:	0005      	movs	r5, r0
   157cc:	0008      	movs	r0, r1
   157ce:	0011      	movs	r1, r2
   157d0:	2200      	movs	r2, #0
   157d2:	4c06      	ldr	r4, [pc, #24]	; (157ec <_read_r+0x24>)
   157d4:	6022      	str	r2, [r4, #0]
   157d6:	001a      	movs	r2, r3
   157d8:	f7f9 fe78 	bl	f4cc <_read>
   157dc:	1c43      	adds	r3, r0, #1
   157de:	d103      	bne.n	157e8 <_read_r+0x20>
   157e0:	6823      	ldr	r3, [r4, #0]
   157e2:	2b00      	cmp	r3, #0
   157e4:	d000      	beq.n	157e8 <_read_r+0x20>
   157e6:	602b      	str	r3, [r5, #0]
   157e8:	bd70      	pop	{r4, r5, r6, pc}
   157ea:	46c0      	nop			; (mov r8, r8)
   157ec:	20005e00 	.word	0x20005e00

000157f0 <_malloc_usable_size_r>:
   157f0:	1f0b      	subs	r3, r1, #4
   157f2:	681b      	ldr	r3, [r3, #0]
   157f4:	1f18      	subs	r0, r3, #4
   157f6:	2b00      	cmp	r3, #0
   157f8:	da01      	bge.n	157fe <_malloc_usable_size_r+0xe>
   157fa:	580b      	ldr	r3, [r1, r0]
   157fc:	18c0      	adds	r0, r0, r3
   157fe:	4770      	bx	lr

00015800 <__gnu_thumb1_case_uqi>:
   15800:	b402      	push	{r1}
   15802:	4671      	mov	r1, lr
   15804:	0849      	lsrs	r1, r1, #1
   15806:	0049      	lsls	r1, r1, #1
   15808:	5c09      	ldrb	r1, [r1, r0]
   1580a:	0049      	lsls	r1, r1, #1
   1580c:	448e      	add	lr, r1
   1580e:	bc02      	pop	{r1}
   15810:	4770      	bx	lr
   15812:	46c0      	nop			; (mov r8, r8)

00015814 <__udivsi3>:
   15814:	2200      	movs	r2, #0
   15816:	0843      	lsrs	r3, r0, #1
   15818:	428b      	cmp	r3, r1
   1581a:	d374      	bcc.n	15906 <__udivsi3+0xf2>
   1581c:	0903      	lsrs	r3, r0, #4
   1581e:	428b      	cmp	r3, r1
   15820:	d35f      	bcc.n	158e2 <__udivsi3+0xce>
   15822:	0a03      	lsrs	r3, r0, #8
   15824:	428b      	cmp	r3, r1
   15826:	d344      	bcc.n	158b2 <__udivsi3+0x9e>
   15828:	0b03      	lsrs	r3, r0, #12
   1582a:	428b      	cmp	r3, r1
   1582c:	d328      	bcc.n	15880 <__udivsi3+0x6c>
   1582e:	0c03      	lsrs	r3, r0, #16
   15830:	428b      	cmp	r3, r1
   15832:	d30d      	bcc.n	15850 <__udivsi3+0x3c>
   15834:	22ff      	movs	r2, #255	; 0xff
   15836:	0209      	lsls	r1, r1, #8
   15838:	ba12      	rev	r2, r2
   1583a:	0c03      	lsrs	r3, r0, #16
   1583c:	428b      	cmp	r3, r1
   1583e:	d302      	bcc.n	15846 <__udivsi3+0x32>
   15840:	1212      	asrs	r2, r2, #8
   15842:	0209      	lsls	r1, r1, #8
   15844:	d065      	beq.n	15912 <__udivsi3+0xfe>
   15846:	0b03      	lsrs	r3, r0, #12
   15848:	428b      	cmp	r3, r1
   1584a:	d319      	bcc.n	15880 <__udivsi3+0x6c>
   1584c:	e000      	b.n	15850 <__udivsi3+0x3c>
   1584e:	0a09      	lsrs	r1, r1, #8
   15850:	0bc3      	lsrs	r3, r0, #15
   15852:	428b      	cmp	r3, r1
   15854:	d301      	bcc.n	1585a <__udivsi3+0x46>
   15856:	03cb      	lsls	r3, r1, #15
   15858:	1ac0      	subs	r0, r0, r3
   1585a:	4152      	adcs	r2, r2
   1585c:	0b83      	lsrs	r3, r0, #14
   1585e:	428b      	cmp	r3, r1
   15860:	d301      	bcc.n	15866 <__udivsi3+0x52>
   15862:	038b      	lsls	r3, r1, #14
   15864:	1ac0      	subs	r0, r0, r3
   15866:	4152      	adcs	r2, r2
   15868:	0b43      	lsrs	r3, r0, #13
   1586a:	428b      	cmp	r3, r1
   1586c:	d301      	bcc.n	15872 <__udivsi3+0x5e>
   1586e:	034b      	lsls	r3, r1, #13
   15870:	1ac0      	subs	r0, r0, r3
   15872:	4152      	adcs	r2, r2
   15874:	0b03      	lsrs	r3, r0, #12
   15876:	428b      	cmp	r3, r1
   15878:	d301      	bcc.n	1587e <__udivsi3+0x6a>
   1587a:	030b      	lsls	r3, r1, #12
   1587c:	1ac0      	subs	r0, r0, r3
   1587e:	4152      	adcs	r2, r2
   15880:	0ac3      	lsrs	r3, r0, #11
   15882:	428b      	cmp	r3, r1
   15884:	d301      	bcc.n	1588a <__udivsi3+0x76>
   15886:	02cb      	lsls	r3, r1, #11
   15888:	1ac0      	subs	r0, r0, r3
   1588a:	4152      	adcs	r2, r2
   1588c:	0a83      	lsrs	r3, r0, #10
   1588e:	428b      	cmp	r3, r1
   15890:	d301      	bcc.n	15896 <__udivsi3+0x82>
   15892:	028b      	lsls	r3, r1, #10
   15894:	1ac0      	subs	r0, r0, r3
   15896:	4152      	adcs	r2, r2
   15898:	0a43      	lsrs	r3, r0, #9
   1589a:	428b      	cmp	r3, r1
   1589c:	d301      	bcc.n	158a2 <__udivsi3+0x8e>
   1589e:	024b      	lsls	r3, r1, #9
   158a0:	1ac0      	subs	r0, r0, r3
   158a2:	4152      	adcs	r2, r2
   158a4:	0a03      	lsrs	r3, r0, #8
   158a6:	428b      	cmp	r3, r1
   158a8:	d301      	bcc.n	158ae <__udivsi3+0x9a>
   158aa:	020b      	lsls	r3, r1, #8
   158ac:	1ac0      	subs	r0, r0, r3
   158ae:	4152      	adcs	r2, r2
   158b0:	d2cd      	bcs.n	1584e <__udivsi3+0x3a>
   158b2:	09c3      	lsrs	r3, r0, #7
   158b4:	428b      	cmp	r3, r1
   158b6:	d301      	bcc.n	158bc <__udivsi3+0xa8>
   158b8:	01cb      	lsls	r3, r1, #7
   158ba:	1ac0      	subs	r0, r0, r3
   158bc:	4152      	adcs	r2, r2
   158be:	0983      	lsrs	r3, r0, #6
   158c0:	428b      	cmp	r3, r1
   158c2:	d301      	bcc.n	158c8 <__udivsi3+0xb4>
   158c4:	018b      	lsls	r3, r1, #6
   158c6:	1ac0      	subs	r0, r0, r3
   158c8:	4152      	adcs	r2, r2
   158ca:	0943      	lsrs	r3, r0, #5
   158cc:	428b      	cmp	r3, r1
   158ce:	d301      	bcc.n	158d4 <__udivsi3+0xc0>
   158d0:	014b      	lsls	r3, r1, #5
   158d2:	1ac0      	subs	r0, r0, r3
   158d4:	4152      	adcs	r2, r2
   158d6:	0903      	lsrs	r3, r0, #4
   158d8:	428b      	cmp	r3, r1
   158da:	d301      	bcc.n	158e0 <__udivsi3+0xcc>
   158dc:	010b      	lsls	r3, r1, #4
   158de:	1ac0      	subs	r0, r0, r3
   158e0:	4152      	adcs	r2, r2
   158e2:	08c3      	lsrs	r3, r0, #3
   158e4:	428b      	cmp	r3, r1
   158e6:	d301      	bcc.n	158ec <__udivsi3+0xd8>
   158e8:	00cb      	lsls	r3, r1, #3
   158ea:	1ac0      	subs	r0, r0, r3
   158ec:	4152      	adcs	r2, r2
   158ee:	0883      	lsrs	r3, r0, #2
   158f0:	428b      	cmp	r3, r1
   158f2:	d301      	bcc.n	158f8 <__udivsi3+0xe4>
   158f4:	008b      	lsls	r3, r1, #2
   158f6:	1ac0      	subs	r0, r0, r3
   158f8:	4152      	adcs	r2, r2
   158fa:	0843      	lsrs	r3, r0, #1
   158fc:	428b      	cmp	r3, r1
   158fe:	d301      	bcc.n	15904 <__udivsi3+0xf0>
   15900:	004b      	lsls	r3, r1, #1
   15902:	1ac0      	subs	r0, r0, r3
   15904:	4152      	adcs	r2, r2
   15906:	1a41      	subs	r1, r0, r1
   15908:	d200      	bcs.n	1590c <__udivsi3+0xf8>
   1590a:	4601      	mov	r1, r0
   1590c:	4152      	adcs	r2, r2
   1590e:	4610      	mov	r0, r2
   15910:	4770      	bx	lr
   15912:	e7ff      	b.n	15914 <__udivsi3+0x100>
   15914:	b501      	push	{r0, lr}
   15916:	2000      	movs	r0, #0
   15918:	f000 f8f0 	bl	15afc <__aeabi_idiv0>
   1591c:	bd02      	pop	{r1, pc}
   1591e:	46c0      	nop			; (mov r8, r8)

00015920 <__aeabi_uidivmod>:
   15920:	2900      	cmp	r1, #0
   15922:	d0f7      	beq.n	15914 <__udivsi3+0x100>
   15924:	e776      	b.n	15814 <__udivsi3>
   15926:	4770      	bx	lr

00015928 <__divsi3>:
   15928:	4603      	mov	r3, r0
   1592a:	430b      	orrs	r3, r1
   1592c:	d47f      	bmi.n	15a2e <__divsi3+0x106>
   1592e:	2200      	movs	r2, #0
   15930:	0843      	lsrs	r3, r0, #1
   15932:	428b      	cmp	r3, r1
   15934:	d374      	bcc.n	15a20 <__divsi3+0xf8>
   15936:	0903      	lsrs	r3, r0, #4
   15938:	428b      	cmp	r3, r1
   1593a:	d35f      	bcc.n	159fc <__divsi3+0xd4>
   1593c:	0a03      	lsrs	r3, r0, #8
   1593e:	428b      	cmp	r3, r1
   15940:	d344      	bcc.n	159cc <__divsi3+0xa4>
   15942:	0b03      	lsrs	r3, r0, #12
   15944:	428b      	cmp	r3, r1
   15946:	d328      	bcc.n	1599a <__divsi3+0x72>
   15948:	0c03      	lsrs	r3, r0, #16
   1594a:	428b      	cmp	r3, r1
   1594c:	d30d      	bcc.n	1596a <__divsi3+0x42>
   1594e:	22ff      	movs	r2, #255	; 0xff
   15950:	0209      	lsls	r1, r1, #8
   15952:	ba12      	rev	r2, r2
   15954:	0c03      	lsrs	r3, r0, #16
   15956:	428b      	cmp	r3, r1
   15958:	d302      	bcc.n	15960 <__divsi3+0x38>
   1595a:	1212      	asrs	r2, r2, #8
   1595c:	0209      	lsls	r1, r1, #8
   1595e:	d065      	beq.n	15a2c <__divsi3+0x104>
   15960:	0b03      	lsrs	r3, r0, #12
   15962:	428b      	cmp	r3, r1
   15964:	d319      	bcc.n	1599a <__divsi3+0x72>
   15966:	e000      	b.n	1596a <__divsi3+0x42>
   15968:	0a09      	lsrs	r1, r1, #8
   1596a:	0bc3      	lsrs	r3, r0, #15
   1596c:	428b      	cmp	r3, r1
   1596e:	d301      	bcc.n	15974 <__divsi3+0x4c>
   15970:	03cb      	lsls	r3, r1, #15
   15972:	1ac0      	subs	r0, r0, r3
   15974:	4152      	adcs	r2, r2
   15976:	0b83      	lsrs	r3, r0, #14
   15978:	428b      	cmp	r3, r1
   1597a:	d301      	bcc.n	15980 <__divsi3+0x58>
   1597c:	038b      	lsls	r3, r1, #14
   1597e:	1ac0      	subs	r0, r0, r3
   15980:	4152      	adcs	r2, r2
   15982:	0b43      	lsrs	r3, r0, #13
   15984:	428b      	cmp	r3, r1
   15986:	d301      	bcc.n	1598c <__divsi3+0x64>
   15988:	034b      	lsls	r3, r1, #13
   1598a:	1ac0      	subs	r0, r0, r3
   1598c:	4152      	adcs	r2, r2
   1598e:	0b03      	lsrs	r3, r0, #12
   15990:	428b      	cmp	r3, r1
   15992:	d301      	bcc.n	15998 <__divsi3+0x70>
   15994:	030b      	lsls	r3, r1, #12
   15996:	1ac0      	subs	r0, r0, r3
   15998:	4152      	adcs	r2, r2
   1599a:	0ac3      	lsrs	r3, r0, #11
   1599c:	428b      	cmp	r3, r1
   1599e:	d301      	bcc.n	159a4 <__divsi3+0x7c>
   159a0:	02cb      	lsls	r3, r1, #11
   159a2:	1ac0      	subs	r0, r0, r3
   159a4:	4152      	adcs	r2, r2
   159a6:	0a83      	lsrs	r3, r0, #10
   159a8:	428b      	cmp	r3, r1
   159aa:	d301      	bcc.n	159b0 <__divsi3+0x88>
   159ac:	028b      	lsls	r3, r1, #10
   159ae:	1ac0      	subs	r0, r0, r3
   159b0:	4152      	adcs	r2, r2
   159b2:	0a43      	lsrs	r3, r0, #9
   159b4:	428b      	cmp	r3, r1
   159b6:	d301      	bcc.n	159bc <__divsi3+0x94>
   159b8:	024b      	lsls	r3, r1, #9
   159ba:	1ac0      	subs	r0, r0, r3
   159bc:	4152      	adcs	r2, r2
   159be:	0a03      	lsrs	r3, r0, #8
   159c0:	428b      	cmp	r3, r1
   159c2:	d301      	bcc.n	159c8 <__divsi3+0xa0>
   159c4:	020b      	lsls	r3, r1, #8
   159c6:	1ac0      	subs	r0, r0, r3
   159c8:	4152      	adcs	r2, r2
   159ca:	d2cd      	bcs.n	15968 <__divsi3+0x40>
   159cc:	09c3      	lsrs	r3, r0, #7
   159ce:	428b      	cmp	r3, r1
   159d0:	d301      	bcc.n	159d6 <__divsi3+0xae>
   159d2:	01cb      	lsls	r3, r1, #7
   159d4:	1ac0      	subs	r0, r0, r3
   159d6:	4152      	adcs	r2, r2
   159d8:	0983      	lsrs	r3, r0, #6
   159da:	428b      	cmp	r3, r1
   159dc:	d301      	bcc.n	159e2 <__divsi3+0xba>
   159de:	018b      	lsls	r3, r1, #6
   159e0:	1ac0      	subs	r0, r0, r3
   159e2:	4152      	adcs	r2, r2
   159e4:	0943      	lsrs	r3, r0, #5
   159e6:	428b      	cmp	r3, r1
   159e8:	d301      	bcc.n	159ee <__divsi3+0xc6>
   159ea:	014b      	lsls	r3, r1, #5
   159ec:	1ac0      	subs	r0, r0, r3
   159ee:	4152      	adcs	r2, r2
   159f0:	0903      	lsrs	r3, r0, #4
   159f2:	428b      	cmp	r3, r1
   159f4:	d301      	bcc.n	159fa <__divsi3+0xd2>
   159f6:	010b      	lsls	r3, r1, #4
   159f8:	1ac0      	subs	r0, r0, r3
   159fa:	4152      	adcs	r2, r2
   159fc:	08c3      	lsrs	r3, r0, #3
   159fe:	428b      	cmp	r3, r1
   15a00:	d301      	bcc.n	15a06 <__divsi3+0xde>
   15a02:	00cb      	lsls	r3, r1, #3
   15a04:	1ac0      	subs	r0, r0, r3
   15a06:	4152      	adcs	r2, r2
   15a08:	0883      	lsrs	r3, r0, #2
   15a0a:	428b      	cmp	r3, r1
   15a0c:	d301      	bcc.n	15a12 <__divsi3+0xea>
   15a0e:	008b      	lsls	r3, r1, #2
   15a10:	1ac0      	subs	r0, r0, r3
   15a12:	4152      	adcs	r2, r2
   15a14:	0843      	lsrs	r3, r0, #1
   15a16:	428b      	cmp	r3, r1
   15a18:	d301      	bcc.n	15a1e <__divsi3+0xf6>
   15a1a:	004b      	lsls	r3, r1, #1
   15a1c:	1ac0      	subs	r0, r0, r3
   15a1e:	4152      	adcs	r2, r2
   15a20:	1a41      	subs	r1, r0, r1
   15a22:	d200      	bcs.n	15a26 <__divsi3+0xfe>
   15a24:	4601      	mov	r1, r0
   15a26:	4152      	adcs	r2, r2
   15a28:	4610      	mov	r0, r2
   15a2a:	4770      	bx	lr
   15a2c:	e05d      	b.n	15aea <__divsi3+0x1c2>
   15a2e:	0fca      	lsrs	r2, r1, #31
   15a30:	d000      	beq.n	15a34 <__divsi3+0x10c>
   15a32:	4249      	negs	r1, r1
   15a34:	1003      	asrs	r3, r0, #32
   15a36:	d300      	bcc.n	15a3a <__divsi3+0x112>
   15a38:	4240      	negs	r0, r0
   15a3a:	4053      	eors	r3, r2
   15a3c:	2200      	movs	r2, #0
   15a3e:	469c      	mov	ip, r3
   15a40:	0903      	lsrs	r3, r0, #4
   15a42:	428b      	cmp	r3, r1
   15a44:	d32d      	bcc.n	15aa2 <__divsi3+0x17a>
   15a46:	0a03      	lsrs	r3, r0, #8
   15a48:	428b      	cmp	r3, r1
   15a4a:	d312      	bcc.n	15a72 <__divsi3+0x14a>
   15a4c:	22fc      	movs	r2, #252	; 0xfc
   15a4e:	0189      	lsls	r1, r1, #6
   15a50:	ba12      	rev	r2, r2
   15a52:	0a03      	lsrs	r3, r0, #8
   15a54:	428b      	cmp	r3, r1
   15a56:	d30c      	bcc.n	15a72 <__divsi3+0x14a>
   15a58:	0189      	lsls	r1, r1, #6
   15a5a:	1192      	asrs	r2, r2, #6
   15a5c:	428b      	cmp	r3, r1
   15a5e:	d308      	bcc.n	15a72 <__divsi3+0x14a>
   15a60:	0189      	lsls	r1, r1, #6
   15a62:	1192      	asrs	r2, r2, #6
   15a64:	428b      	cmp	r3, r1
   15a66:	d304      	bcc.n	15a72 <__divsi3+0x14a>
   15a68:	0189      	lsls	r1, r1, #6
   15a6a:	d03a      	beq.n	15ae2 <__divsi3+0x1ba>
   15a6c:	1192      	asrs	r2, r2, #6
   15a6e:	e000      	b.n	15a72 <__divsi3+0x14a>
   15a70:	0989      	lsrs	r1, r1, #6
   15a72:	09c3      	lsrs	r3, r0, #7
   15a74:	428b      	cmp	r3, r1
   15a76:	d301      	bcc.n	15a7c <__divsi3+0x154>
   15a78:	01cb      	lsls	r3, r1, #7
   15a7a:	1ac0      	subs	r0, r0, r3
   15a7c:	4152      	adcs	r2, r2
   15a7e:	0983      	lsrs	r3, r0, #6
   15a80:	428b      	cmp	r3, r1
   15a82:	d301      	bcc.n	15a88 <__divsi3+0x160>
   15a84:	018b      	lsls	r3, r1, #6
   15a86:	1ac0      	subs	r0, r0, r3
   15a88:	4152      	adcs	r2, r2
   15a8a:	0943      	lsrs	r3, r0, #5
   15a8c:	428b      	cmp	r3, r1
   15a8e:	d301      	bcc.n	15a94 <__divsi3+0x16c>
   15a90:	014b      	lsls	r3, r1, #5
   15a92:	1ac0      	subs	r0, r0, r3
   15a94:	4152      	adcs	r2, r2
   15a96:	0903      	lsrs	r3, r0, #4
   15a98:	428b      	cmp	r3, r1
   15a9a:	d301      	bcc.n	15aa0 <__divsi3+0x178>
   15a9c:	010b      	lsls	r3, r1, #4
   15a9e:	1ac0      	subs	r0, r0, r3
   15aa0:	4152      	adcs	r2, r2
   15aa2:	08c3      	lsrs	r3, r0, #3
   15aa4:	428b      	cmp	r3, r1
   15aa6:	d301      	bcc.n	15aac <__divsi3+0x184>
   15aa8:	00cb      	lsls	r3, r1, #3
   15aaa:	1ac0      	subs	r0, r0, r3
   15aac:	4152      	adcs	r2, r2
   15aae:	0883      	lsrs	r3, r0, #2
   15ab0:	428b      	cmp	r3, r1
   15ab2:	d301      	bcc.n	15ab8 <__divsi3+0x190>
   15ab4:	008b      	lsls	r3, r1, #2
   15ab6:	1ac0      	subs	r0, r0, r3
   15ab8:	4152      	adcs	r2, r2
   15aba:	d2d9      	bcs.n	15a70 <__divsi3+0x148>
   15abc:	0843      	lsrs	r3, r0, #1
   15abe:	428b      	cmp	r3, r1
   15ac0:	d301      	bcc.n	15ac6 <__divsi3+0x19e>
   15ac2:	004b      	lsls	r3, r1, #1
   15ac4:	1ac0      	subs	r0, r0, r3
   15ac6:	4152      	adcs	r2, r2
   15ac8:	1a41      	subs	r1, r0, r1
   15aca:	d200      	bcs.n	15ace <__divsi3+0x1a6>
   15acc:	4601      	mov	r1, r0
   15ace:	4663      	mov	r3, ip
   15ad0:	4152      	adcs	r2, r2
   15ad2:	105b      	asrs	r3, r3, #1
   15ad4:	4610      	mov	r0, r2
   15ad6:	d301      	bcc.n	15adc <__divsi3+0x1b4>
   15ad8:	4240      	negs	r0, r0
   15ada:	2b00      	cmp	r3, #0
   15adc:	d500      	bpl.n	15ae0 <__divsi3+0x1b8>
   15ade:	4249      	negs	r1, r1
   15ae0:	4770      	bx	lr
   15ae2:	4663      	mov	r3, ip
   15ae4:	105b      	asrs	r3, r3, #1
   15ae6:	d300      	bcc.n	15aea <__divsi3+0x1c2>
   15ae8:	4240      	negs	r0, r0
   15aea:	b501      	push	{r0, lr}
   15aec:	2000      	movs	r0, #0
   15aee:	f000 f805 	bl	15afc <__aeabi_idiv0>
   15af2:	bd02      	pop	{r1, pc}

00015af4 <__aeabi_idivmod>:
   15af4:	2900      	cmp	r1, #0
   15af6:	d0f8      	beq.n	15aea <__divsi3+0x1c2>
   15af8:	e716      	b.n	15928 <__divsi3>
   15afa:	4770      	bx	lr

00015afc <__aeabi_idiv0>:
   15afc:	4770      	bx	lr
   15afe:	46c0      	nop			; (mov r8, r8)

00015b00 <__aeabi_cdrcmple>:
   15b00:	4684      	mov	ip, r0
   15b02:	1c10      	adds	r0, r2, #0
   15b04:	4662      	mov	r2, ip
   15b06:	468c      	mov	ip, r1
   15b08:	1c19      	adds	r1, r3, #0
   15b0a:	4663      	mov	r3, ip
   15b0c:	e000      	b.n	15b10 <__aeabi_cdcmpeq>
   15b0e:	46c0      	nop			; (mov r8, r8)

00015b10 <__aeabi_cdcmpeq>:
   15b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   15b12:	f001 fde3 	bl	176dc <__ledf2>
   15b16:	2800      	cmp	r0, #0
   15b18:	d401      	bmi.n	15b1e <__aeabi_cdcmpeq+0xe>
   15b1a:	2100      	movs	r1, #0
   15b1c:	42c8      	cmn	r0, r1
   15b1e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00015b20 <__aeabi_dcmpeq>:
   15b20:	b510      	push	{r4, lr}
   15b22:	f001 fd3d 	bl	175a0 <__eqdf2>
   15b26:	4240      	negs	r0, r0
   15b28:	3001      	adds	r0, #1
   15b2a:	bd10      	pop	{r4, pc}

00015b2c <__aeabi_dcmplt>:
   15b2c:	b510      	push	{r4, lr}
   15b2e:	f001 fdd5 	bl	176dc <__ledf2>
   15b32:	2800      	cmp	r0, #0
   15b34:	db01      	blt.n	15b3a <__aeabi_dcmplt+0xe>
   15b36:	2000      	movs	r0, #0
   15b38:	bd10      	pop	{r4, pc}
   15b3a:	2001      	movs	r0, #1
   15b3c:	bd10      	pop	{r4, pc}
   15b3e:	46c0      	nop			; (mov r8, r8)

00015b40 <__aeabi_dcmple>:
   15b40:	b510      	push	{r4, lr}
   15b42:	f001 fdcb 	bl	176dc <__ledf2>
   15b46:	2800      	cmp	r0, #0
   15b48:	dd01      	ble.n	15b4e <__aeabi_dcmple+0xe>
   15b4a:	2000      	movs	r0, #0
   15b4c:	bd10      	pop	{r4, pc}
   15b4e:	2001      	movs	r0, #1
   15b50:	bd10      	pop	{r4, pc}
   15b52:	46c0      	nop			; (mov r8, r8)

00015b54 <__aeabi_dcmpgt>:
   15b54:	b510      	push	{r4, lr}
   15b56:	f001 fd5d 	bl	17614 <__gedf2>
   15b5a:	2800      	cmp	r0, #0
   15b5c:	dc01      	bgt.n	15b62 <__aeabi_dcmpgt+0xe>
   15b5e:	2000      	movs	r0, #0
   15b60:	bd10      	pop	{r4, pc}
   15b62:	2001      	movs	r0, #1
   15b64:	bd10      	pop	{r4, pc}
   15b66:	46c0      	nop			; (mov r8, r8)

00015b68 <__aeabi_dcmpge>:
   15b68:	b510      	push	{r4, lr}
   15b6a:	f001 fd53 	bl	17614 <__gedf2>
   15b6e:	2800      	cmp	r0, #0
   15b70:	da01      	bge.n	15b76 <__aeabi_dcmpge+0xe>
   15b72:	2000      	movs	r0, #0
   15b74:	bd10      	pop	{r4, pc}
   15b76:	2001      	movs	r0, #1
   15b78:	bd10      	pop	{r4, pc}
   15b7a:	46c0      	nop			; (mov r8, r8)

00015b7c <__aeabi_ldivmod>:
   15b7c:	2b00      	cmp	r3, #0
   15b7e:	d115      	bne.n	15bac <__aeabi_ldivmod+0x30>
   15b80:	2a00      	cmp	r2, #0
   15b82:	d113      	bne.n	15bac <__aeabi_ldivmod+0x30>
   15b84:	2900      	cmp	r1, #0
   15b86:	db06      	blt.n	15b96 <__aeabi_ldivmod+0x1a>
   15b88:	dc01      	bgt.n	15b8e <__aeabi_ldivmod+0x12>
   15b8a:	2800      	cmp	r0, #0
   15b8c:	d006      	beq.n	15b9c <__aeabi_ldivmod+0x20>
   15b8e:	2000      	movs	r0, #0
   15b90:	43c0      	mvns	r0, r0
   15b92:	0841      	lsrs	r1, r0, #1
   15b94:	e002      	b.n	15b9c <__aeabi_ldivmod+0x20>
   15b96:	2180      	movs	r1, #128	; 0x80
   15b98:	0609      	lsls	r1, r1, #24
   15b9a:	2000      	movs	r0, #0
   15b9c:	b407      	push	{r0, r1, r2}
   15b9e:	4802      	ldr	r0, [pc, #8]	; (15ba8 <__aeabi_ldivmod+0x2c>)
   15ba0:	a101      	add	r1, pc, #4	; (adr r1, 15ba8 <__aeabi_ldivmod+0x2c>)
   15ba2:	1840      	adds	r0, r0, r1
   15ba4:	9002      	str	r0, [sp, #8]
   15ba6:	bd03      	pop	{r0, r1, pc}
   15ba8:	ffffff55 	.word	0xffffff55
   15bac:	b403      	push	{r0, r1}
   15bae:	4668      	mov	r0, sp
   15bb0:	b501      	push	{r0, lr}
   15bb2:	9802      	ldr	r0, [sp, #8]
   15bb4:	f000 f848 	bl	15c48 <__gnu_ldivmod_helper>
   15bb8:	9b01      	ldr	r3, [sp, #4]
   15bba:	469e      	mov	lr, r3
   15bbc:	b002      	add	sp, #8
   15bbe:	bc0c      	pop	{r2, r3}
   15bc0:	4770      	bx	lr
   15bc2:	46c0      	nop			; (mov r8, r8)

00015bc4 <__aeabi_lmul>:
   15bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   15bc6:	46ce      	mov	lr, r9
   15bc8:	4647      	mov	r7, r8
   15bca:	0415      	lsls	r5, r2, #16
   15bcc:	0c2d      	lsrs	r5, r5, #16
   15bce:	002e      	movs	r6, r5
   15bd0:	b580      	push	{r7, lr}
   15bd2:	0407      	lsls	r7, r0, #16
   15bd4:	0c14      	lsrs	r4, r2, #16
   15bd6:	0c3f      	lsrs	r7, r7, #16
   15bd8:	4699      	mov	r9, r3
   15bda:	0c03      	lsrs	r3, r0, #16
   15bdc:	437e      	muls	r6, r7
   15bde:	435d      	muls	r5, r3
   15be0:	4367      	muls	r7, r4
   15be2:	4363      	muls	r3, r4
   15be4:	197f      	adds	r7, r7, r5
   15be6:	0c34      	lsrs	r4, r6, #16
   15be8:	19e4      	adds	r4, r4, r7
   15bea:	469c      	mov	ip, r3
   15bec:	42a5      	cmp	r5, r4
   15bee:	d903      	bls.n	15bf8 <__aeabi_lmul+0x34>
   15bf0:	2380      	movs	r3, #128	; 0x80
   15bf2:	025b      	lsls	r3, r3, #9
   15bf4:	4698      	mov	r8, r3
   15bf6:	44c4      	add	ip, r8
   15bf8:	464b      	mov	r3, r9
   15bfa:	4351      	muls	r1, r2
   15bfc:	4343      	muls	r3, r0
   15bfe:	0436      	lsls	r6, r6, #16
   15c00:	0c36      	lsrs	r6, r6, #16
   15c02:	0c25      	lsrs	r5, r4, #16
   15c04:	0424      	lsls	r4, r4, #16
   15c06:	4465      	add	r5, ip
   15c08:	19a4      	adds	r4, r4, r6
   15c0a:	1859      	adds	r1, r3, r1
   15c0c:	1949      	adds	r1, r1, r5
   15c0e:	0020      	movs	r0, r4
   15c10:	bc0c      	pop	{r2, r3}
   15c12:	4690      	mov	r8, r2
   15c14:	4699      	mov	r9, r3
   15c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

00015c18 <__aeabi_f2uiz>:
   15c18:	219e      	movs	r1, #158	; 0x9e
   15c1a:	b510      	push	{r4, lr}
   15c1c:	05c9      	lsls	r1, r1, #23
   15c1e:	1c04      	adds	r4, r0, #0
   15c20:	f002 fca4 	bl	1856c <__aeabi_fcmpge>
   15c24:	2800      	cmp	r0, #0
   15c26:	d103      	bne.n	15c30 <__aeabi_f2uiz+0x18>
   15c28:	1c20      	adds	r0, r4, #0
   15c2a:	f000 fdbf 	bl	167ac <__aeabi_f2iz>
   15c2e:	bd10      	pop	{r4, pc}
   15c30:	219e      	movs	r1, #158	; 0x9e
   15c32:	1c20      	adds	r0, r4, #0
   15c34:	05c9      	lsls	r1, r1, #23
   15c36:	f000 fc1d 	bl	16474 <__aeabi_fsub>
   15c3a:	f000 fdb7 	bl	167ac <__aeabi_f2iz>
   15c3e:	2380      	movs	r3, #128	; 0x80
   15c40:	061b      	lsls	r3, r3, #24
   15c42:	469c      	mov	ip, r3
   15c44:	4460      	add	r0, ip
   15c46:	e7f2      	b.n	15c2e <__aeabi_f2uiz+0x16>

00015c48 <__gnu_ldivmod_helper>:
   15c48:	b5f0      	push	{r4, r5, r6, r7, lr}
   15c4a:	b083      	sub	sp, #12
   15c4c:	0016      	movs	r6, r2
   15c4e:	001f      	movs	r7, r3
   15c50:	9000      	str	r0, [sp, #0]
   15c52:	9101      	str	r1, [sp, #4]
   15c54:	f002 fcb2 	bl	185bc <__divdi3>
   15c58:	0004      	movs	r4, r0
   15c5a:	000d      	movs	r5, r1
   15c5c:	0002      	movs	r2, r0
   15c5e:	000b      	movs	r3, r1
   15c60:	0030      	movs	r0, r6
   15c62:	0039      	movs	r1, r7
   15c64:	f7ff ffae 	bl	15bc4 <__aeabi_lmul>
   15c68:	9a00      	ldr	r2, [sp, #0]
   15c6a:	9b01      	ldr	r3, [sp, #4]
   15c6c:	1a12      	subs	r2, r2, r0
   15c6e:	418b      	sbcs	r3, r1
   15c70:	9908      	ldr	r1, [sp, #32]
   15c72:	0020      	movs	r0, r4
   15c74:	600a      	str	r2, [r1, #0]
   15c76:	604b      	str	r3, [r1, #4]
   15c78:	0029      	movs	r1, r5
   15c7a:	b003      	add	sp, #12
   15c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15c7e:	46c0      	nop			; (mov r8, r8)

00015c80 <__aeabi_fadd>:
   15c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   15c82:	46c6      	mov	lr, r8
   15c84:	024e      	lsls	r6, r1, #9
   15c86:	0247      	lsls	r7, r0, #9
   15c88:	0a76      	lsrs	r6, r6, #9
   15c8a:	0a7b      	lsrs	r3, r7, #9
   15c8c:	0044      	lsls	r4, r0, #1
   15c8e:	0fc5      	lsrs	r5, r0, #31
   15c90:	00f7      	lsls	r7, r6, #3
   15c92:	0048      	lsls	r0, r1, #1
   15c94:	4698      	mov	r8, r3
   15c96:	b500      	push	{lr}
   15c98:	0e24      	lsrs	r4, r4, #24
   15c9a:	002a      	movs	r2, r5
   15c9c:	00db      	lsls	r3, r3, #3
   15c9e:	0e00      	lsrs	r0, r0, #24
   15ca0:	0fc9      	lsrs	r1, r1, #31
   15ca2:	46bc      	mov	ip, r7
   15ca4:	428d      	cmp	r5, r1
   15ca6:	d067      	beq.n	15d78 <__aeabi_fadd+0xf8>
   15ca8:	1a22      	subs	r2, r4, r0
   15caa:	2a00      	cmp	r2, #0
   15cac:	dc00      	bgt.n	15cb0 <__aeabi_fadd+0x30>
   15cae:	e0a5      	b.n	15dfc <__aeabi_fadd+0x17c>
   15cb0:	2800      	cmp	r0, #0
   15cb2:	d13a      	bne.n	15d2a <__aeabi_fadd+0xaa>
   15cb4:	2f00      	cmp	r7, #0
   15cb6:	d100      	bne.n	15cba <__aeabi_fadd+0x3a>
   15cb8:	e093      	b.n	15de2 <__aeabi_fadd+0x162>
   15cba:	1e51      	subs	r1, r2, #1
   15cbc:	2900      	cmp	r1, #0
   15cbe:	d000      	beq.n	15cc2 <__aeabi_fadd+0x42>
   15cc0:	e0bc      	b.n	15e3c <__aeabi_fadd+0x1bc>
   15cc2:	2401      	movs	r4, #1
   15cc4:	1bdb      	subs	r3, r3, r7
   15cc6:	015a      	lsls	r2, r3, #5
   15cc8:	d546      	bpl.n	15d58 <__aeabi_fadd+0xd8>
   15cca:	019b      	lsls	r3, r3, #6
   15ccc:	099e      	lsrs	r6, r3, #6
   15cce:	0030      	movs	r0, r6
   15cd0:	f002 fc56 	bl	18580 <__clzsi2>
   15cd4:	3805      	subs	r0, #5
   15cd6:	4086      	lsls	r6, r0
   15cd8:	4284      	cmp	r4, r0
   15cda:	dd00      	ble.n	15cde <__aeabi_fadd+0x5e>
   15cdc:	e09d      	b.n	15e1a <__aeabi_fadd+0x19a>
   15cde:	1b04      	subs	r4, r0, r4
   15ce0:	0032      	movs	r2, r6
   15ce2:	2020      	movs	r0, #32
   15ce4:	3401      	adds	r4, #1
   15ce6:	40e2      	lsrs	r2, r4
   15ce8:	1b04      	subs	r4, r0, r4
   15cea:	40a6      	lsls	r6, r4
   15cec:	0033      	movs	r3, r6
   15cee:	1e5e      	subs	r6, r3, #1
   15cf0:	41b3      	sbcs	r3, r6
   15cf2:	2400      	movs	r4, #0
   15cf4:	4313      	orrs	r3, r2
   15cf6:	075a      	lsls	r2, r3, #29
   15cf8:	d004      	beq.n	15d04 <__aeabi_fadd+0x84>
   15cfa:	220f      	movs	r2, #15
   15cfc:	401a      	ands	r2, r3
   15cfe:	2a04      	cmp	r2, #4
   15d00:	d000      	beq.n	15d04 <__aeabi_fadd+0x84>
   15d02:	3304      	adds	r3, #4
   15d04:	015a      	lsls	r2, r3, #5
   15d06:	d529      	bpl.n	15d5c <__aeabi_fadd+0xdc>
   15d08:	3401      	adds	r4, #1
   15d0a:	2cff      	cmp	r4, #255	; 0xff
   15d0c:	d100      	bne.n	15d10 <__aeabi_fadd+0x90>
   15d0e:	e081      	b.n	15e14 <__aeabi_fadd+0x194>
   15d10:	002a      	movs	r2, r5
   15d12:	019b      	lsls	r3, r3, #6
   15d14:	0a5b      	lsrs	r3, r3, #9
   15d16:	b2e4      	uxtb	r4, r4
   15d18:	025b      	lsls	r3, r3, #9
   15d1a:	05e4      	lsls	r4, r4, #23
   15d1c:	0a58      	lsrs	r0, r3, #9
   15d1e:	07d2      	lsls	r2, r2, #31
   15d20:	4320      	orrs	r0, r4
   15d22:	4310      	orrs	r0, r2
   15d24:	bc04      	pop	{r2}
   15d26:	4690      	mov	r8, r2
   15d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15d2a:	2cff      	cmp	r4, #255	; 0xff
   15d2c:	d0e3      	beq.n	15cf6 <__aeabi_fadd+0x76>
   15d2e:	2180      	movs	r1, #128	; 0x80
   15d30:	0038      	movs	r0, r7
   15d32:	04c9      	lsls	r1, r1, #19
   15d34:	4308      	orrs	r0, r1
   15d36:	4684      	mov	ip, r0
   15d38:	2a1b      	cmp	r2, #27
   15d3a:	dd00      	ble.n	15d3e <__aeabi_fadd+0xbe>
   15d3c:	e082      	b.n	15e44 <__aeabi_fadd+0x1c4>
   15d3e:	2020      	movs	r0, #32
   15d40:	4661      	mov	r1, ip
   15d42:	40d1      	lsrs	r1, r2
   15d44:	1a82      	subs	r2, r0, r2
   15d46:	4660      	mov	r0, ip
   15d48:	4090      	lsls	r0, r2
   15d4a:	0002      	movs	r2, r0
   15d4c:	1e50      	subs	r0, r2, #1
   15d4e:	4182      	sbcs	r2, r0
   15d50:	430a      	orrs	r2, r1
   15d52:	1a9b      	subs	r3, r3, r2
   15d54:	015a      	lsls	r2, r3, #5
   15d56:	d4b8      	bmi.n	15cca <__aeabi_fadd+0x4a>
   15d58:	075a      	lsls	r2, r3, #29
   15d5a:	d1ce      	bne.n	15cfa <__aeabi_fadd+0x7a>
   15d5c:	08de      	lsrs	r6, r3, #3
   15d5e:	002a      	movs	r2, r5
   15d60:	2cff      	cmp	r4, #255	; 0xff
   15d62:	d13a      	bne.n	15dda <__aeabi_fadd+0x15a>
   15d64:	2e00      	cmp	r6, #0
   15d66:	d100      	bne.n	15d6a <__aeabi_fadd+0xea>
   15d68:	e0ae      	b.n	15ec8 <__aeabi_fadd+0x248>
   15d6a:	2380      	movs	r3, #128	; 0x80
   15d6c:	03db      	lsls	r3, r3, #15
   15d6e:	4333      	orrs	r3, r6
   15d70:	025b      	lsls	r3, r3, #9
   15d72:	0a5b      	lsrs	r3, r3, #9
   15d74:	24ff      	movs	r4, #255	; 0xff
   15d76:	e7cf      	b.n	15d18 <__aeabi_fadd+0x98>
   15d78:	1a21      	subs	r1, r4, r0
   15d7a:	2900      	cmp	r1, #0
   15d7c:	dd52      	ble.n	15e24 <__aeabi_fadd+0x1a4>
   15d7e:	2800      	cmp	r0, #0
   15d80:	d031      	beq.n	15de6 <__aeabi_fadd+0x166>
   15d82:	2cff      	cmp	r4, #255	; 0xff
   15d84:	d0b7      	beq.n	15cf6 <__aeabi_fadd+0x76>
   15d86:	2080      	movs	r0, #128	; 0x80
   15d88:	003e      	movs	r6, r7
   15d8a:	04c0      	lsls	r0, r0, #19
   15d8c:	4306      	orrs	r6, r0
   15d8e:	46b4      	mov	ip, r6
   15d90:	291b      	cmp	r1, #27
   15d92:	dd00      	ble.n	15d96 <__aeabi_fadd+0x116>
   15d94:	e0aa      	b.n	15eec <__aeabi_fadd+0x26c>
   15d96:	2620      	movs	r6, #32
   15d98:	4660      	mov	r0, ip
   15d9a:	40c8      	lsrs	r0, r1
   15d9c:	1a71      	subs	r1, r6, r1
   15d9e:	4666      	mov	r6, ip
   15da0:	408e      	lsls	r6, r1
   15da2:	0031      	movs	r1, r6
   15da4:	1e4e      	subs	r6, r1, #1
   15da6:	41b1      	sbcs	r1, r6
   15da8:	4301      	orrs	r1, r0
   15daa:	185b      	adds	r3, r3, r1
   15dac:	0159      	lsls	r1, r3, #5
   15dae:	d5d3      	bpl.n	15d58 <__aeabi_fadd+0xd8>
   15db0:	3401      	adds	r4, #1
   15db2:	2cff      	cmp	r4, #255	; 0xff
   15db4:	d100      	bne.n	15db8 <__aeabi_fadd+0x138>
   15db6:	e087      	b.n	15ec8 <__aeabi_fadd+0x248>
   15db8:	2201      	movs	r2, #1
   15dba:	4978      	ldr	r1, [pc, #480]	; (15f9c <__aeabi_fadd+0x31c>)
   15dbc:	401a      	ands	r2, r3
   15dbe:	085b      	lsrs	r3, r3, #1
   15dc0:	400b      	ands	r3, r1
   15dc2:	4313      	orrs	r3, r2
   15dc4:	e797      	b.n	15cf6 <__aeabi_fadd+0x76>
   15dc6:	2c00      	cmp	r4, #0
   15dc8:	d000      	beq.n	15dcc <__aeabi_fadd+0x14c>
   15dca:	e0a7      	b.n	15f1c <__aeabi_fadd+0x29c>
   15dcc:	2b00      	cmp	r3, #0
   15dce:	d000      	beq.n	15dd2 <__aeabi_fadd+0x152>
   15dd0:	e0b6      	b.n	15f40 <__aeabi_fadd+0x2c0>
   15dd2:	1e3b      	subs	r3, r7, #0
   15dd4:	d162      	bne.n	15e9c <__aeabi_fadd+0x21c>
   15dd6:	2600      	movs	r6, #0
   15dd8:	2200      	movs	r2, #0
   15dda:	0273      	lsls	r3, r6, #9
   15ddc:	0a5b      	lsrs	r3, r3, #9
   15dde:	b2e4      	uxtb	r4, r4
   15de0:	e79a      	b.n	15d18 <__aeabi_fadd+0x98>
   15de2:	0014      	movs	r4, r2
   15de4:	e787      	b.n	15cf6 <__aeabi_fadd+0x76>
   15de6:	2f00      	cmp	r7, #0
   15de8:	d04d      	beq.n	15e86 <__aeabi_fadd+0x206>
   15dea:	1e48      	subs	r0, r1, #1
   15dec:	2800      	cmp	r0, #0
   15dee:	d157      	bne.n	15ea0 <__aeabi_fadd+0x220>
   15df0:	4463      	add	r3, ip
   15df2:	2401      	movs	r4, #1
   15df4:	015a      	lsls	r2, r3, #5
   15df6:	d5af      	bpl.n	15d58 <__aeabi_fadd+0xd8>
   15df8:	2402      	movs	r4, #2
   15dfa:	e7dd      	b.n	15db8 <__aeabi_fadd+0x138>
   15dfc:	2a00      	cmp	r2, #0
   15dfe:	d124      	bne.n	15e4a <__aeabi_fadd+0x1ca>
   15e00:	1c62      	adds	r2, r4, #1
   15e02:	b2d2      	uxtb	r2, r2
   15e04:	2a01      	cmp	r2, #1
   15e06:	ddde      	ble.n	15dc6 <__aeabi_fadd+0x146>
   15e08:	1bde      	subs	r6, r3, r7
   15e0a:	0172      	lsls	r2, r6, #5
   15e0c:	d535      	bpl.n	15e7a <__aeabi_fadd+0x1fa>
   15e0e:	1afe      	subs	r6, r7, r3
   15e10:	000d      	movs	r5, r1
   15e12:	e75c      	b.n	15cce <__aeabi_fadd+0x4e>
   15e14:	002a      	movs	r2, r5
   15e16:	2300      	movs	r3, #0
   15e18:	e77e      	b.n	15d18 <__aeabi_fadd+0x98>
   15e1a:	0033      	movs	r3, r6
   15e1c:	4a60      	ldr	r2, [pc, #384]	; (15fa0 <__aeabi_fadd+0x320>)
   15e1e:	1a24      	subs	r4, r4, r0
   15e20:	4013      	ands	r3, r2
   15e22:	e768      	b.n	15cf6 <__aeabi_fadd+0x76>
   15e24:	2900      	cmp	r1, #0
   15e26:	d163      	bne.n	15ef0 <__aeabi_fadd+0x270>
   15e28:	1c61      	adds	r1, r4, #1
   15e2a:	b2c8      	uxtb	r0, r1
   15e2c:	2801      	cmp	r0, #1
   15e2e:	dd4e      	ble.n	15ece <__aeabi_fadd+0x24e>
   15e30:	29ff      	cmp	r1, #255	; 0xff
   15e32:	d049      	beq.n	15ec8 <__aeabi_fadd+0x248>
   15e34:	4463      	add	r3, ip
   15e36:	085b      	lsrs	r3, r3, #1
   15e38:	000c      	movs	r4, r1
   15e3a:	e75c      	b.n	15cf6 <__aeabi_fadd+0x76>
   15e3c:	2aff      	cmp	r2, #255	; 0xff
   15e3e:	d041      	beq.n	15ec4 <__aeabi_fadd+0x244>
   15e40:	000a      	movs	r2, r1
   15e42:	e779      	b.n	15d38 <__aeabi_fadd+0xb8>
   15e44:	2201      	movs	r2, #1
   15e46:	1a9b      	subs	r3, r3, r2
   15e48:	e784      	b.n	15d54 <__aeabi_fadd+0xd4>
   15e4a:	2c00      	cmp	r4, #0
   15e4c:	d01d      	beq.n	15e8a <__aeabi_fadd+0x20a>
   15e4e:	28ff      	cmp	r0, #255	; 0xff
   15e50:	d022      	beq.n	15e98 <__aeabi_fadd+0x218>
   15e52:	2480      	movs	r4, #128	; 0x80
   15e54:	04e4      	lsls	r4, r4, #19
   15e56:	4252      	negs	r2, r2
   15e58:	4323      	orrs	r3, r4
   15e5a:	2a1b      	cmp	r2, #27
   15e5c:	dd00      	ble.n	15e60 <__aeabi_fadd+0x1e0>
   15e5e:	e08a      	b.n	15f76 <__aeabi_fadd+0x2f6>
   15e60:	001c      	movs	r4, r3
   15e62:	2520      	movs	r5, #32
   15e64:	40d4      	lsrs	r4, r2
   15e66:	1aaa      	subs	r2, r5, r2
   15e68:	4093      	lsls	r3, r2
   15e6a:	1e5a      	subs	r2, r3, #1
   15e6c:	4193      	sbcs	r3, r2
   15e6e:	4323      	orrs	r3, r4
   15e70:	4662      	mov	r2, ip
   15e72:	0004      	movs	r4, r0
   15e74:	1ad3      	subs	r3, r2, r3
   15e76:	000d      	movs	r5, r1
   15e78:	e725      	b.n	15cc6 <__aeabi_fadd+0x46>
   15e7a:	2e00      	cmp	r6, #0
   15e7c:	d000      	beq.n	15e80 <__aeabi_fadd+0x200>
   15e7e:	e726      	b.n	15cce <__aeabi_fadd+0x4e>
   15e80:	2200      	movs	r2, #0
   15e82:	2400      	movs	r4, #0
   15e84:	e7a9      	b.n	15dda <__aeabi_fadd+0x15a>
   15e86:	000c      	movs	r4, r1
   15e88:	e735      	b.n	15cf6 <__aeabi_fadd+0x76>
   15e8a:	2b00      	cmp	r3, #0
   15e8c:	d04d      	beq.n	15f2a <__aeabi_fadd+0x2aa>
   15e8e:	43d2      	mvns	r2, r2
   15e90:	2a00      	cmp	r2, #0
   15e92:	d0ed      	beq.n	15e70 <__aeabi_fadd+0x1f0>
   15e94:	28ff      	cmp	r0, #255	; 0xff
   15e96:	d1e0      	bne.n	15e5a <__aeabi_fadd+0x1da>
   15e98:	4663      	mov	r3, ip
   15e9a:	24ff      	movs	r4, #255	; 0xff
   15e9c:	000d      	movs	r5, r1
   15e9e:	e72a      	b.n	15cf6 <__aeabi_fadd+0x76>
   15ea0:	29ff      	cmp	r1, #255	; 0xff
   15ea2:	d00f      	beq.n	15ec4 <__aeabi_fadd+0x244>
   15ea4:	0001      	movs	r1, r0
   15ea6:	e773      	b.n	15d90 <__aeabi_fadd+0x110>
   15ea8:	2b00      	cmp	r3, #0
   15eaa:	d061      	beq.n	15f70 <__aeabi_fadd+0x2f0>
   15eac:	24ff      	movs	r4, #255	; 0xff
   15eae:	2f00      	cmp	r7, #0
   15eb0:	d100      	bne.n	15eb4 <__aeabi_fadd+0x234>
   15eb2:	e720      	b.n	15cf6 <__aeabi_fadd+0x76>
   15eb4:	2280      	movs	r2, #128	; 0x80
   15eb6:	4641      	mov	r1, r8
   15eb8:	03d2      	lsls	r2, r2, #15
   15eba:	4211      	tst	r1, r2
   15ebc:	d002      	beq.n	15ec4 <__aeabi_fadd+0x244>
   15ebe:	4216      	tst	r6, r2
   15ec0:	d100      	bne.n	15ec4 <__aeabi_fadd+0x244>
   15ec2:	003b      	movs	r3, r7
   15ec4:	24ff      	movs	r4, #255	; 0xff
   15ec6:	e716      	b.n	15cf6 <__aeabi_fadd+0x76>
   15ec8:	24ff      	movs	r4, #255	; 0xff
   15eca:	2300      	movs	r3, #0
   15ecc:	e724      	b.n	15d18 <__aeabi_fadd+0x98>
   15ece:	2c00      	cmp	r4, #0
   15ed0:	d1ea      	bne.n	15ea8 <__aeabi_fadd+0x228>
   15ed2:	2b00      	cmp	r3, #0
   15ed4:	d058      	beq.n	15f88 <__aeabi_fadd+0x308>
   15ed6:	2f00      	cmp	r7, #0
   15ed8:	d100      	bne.n	15edc <__aeabi_fadd+0x25c>
   15eda:	e70c      	b.n	15cf6 <__aeabi_fadd+0x76>
   15edc:	4463      	add	r3, ip
   15ede:	015a      	lsls	r2, r3, #5
   15ee0:	d400      	bmi.n	15ee4 <__aeabi_fadd+0x264>
   15ee2:	e739      	b.n	15d58 <__aeabi_fadd+0xd8>
   15ee4:	4a2e      	ldr	r2, [pc, #184]	; (15fa0 <__aeabi_fadd+0x320>)
   15ee6:	000c      	movs	r4, r1
   15ee8:	4013      	ands	r3, r2
   15eea:	e704      	b.n	15cf6 <__aeabi_fadd+0x76>
   15eec:	2101      	movs	r1, #1
   15eee:	e75c      	b.n	15daa <__aeabi_fadd+0x12a>
   15ef0:	2c00      	cmp	r4, #0
   15ef2:	d11e      	bne.n	15f32 <__aeabi_fadd+0x2b2>
   15ef4:	2b00      	cmp	r3, #0
   15ef6:	d040      	beq.n	15f7a <__aeabi_fadd+0x2fa>
   15ef8:	43c9      	mvns	r1, r1
   15efa:	2900      	cmp	r1, #0
   15efc:	d00b      	beq.n	15f16 <__aeabi_fadd+0x296>
   15efe:	28ff      	cmp	r0, #255	; 0xff
   15f00:	d036      	beq.n	15f70 <__aeabi_fadd+0x2f0>
   15f02:	291b      	cmp	r1, #27
   15f04:	dc47      	bgt.n	15f96 <__aeabi_fadd+0x316>
   15f06:	001c      	movs	r4, r3
   15f08:	2620      	movs	r6, #32
   15f0a:	40cc      	lsrs	r4, r1
   15f0c:	1a71      	subs	r1, r6, r1
   15f0e:	408b      	lsls	r3, r1
   15f10:	1e59      	subs	r1, r3, #1
   15f12:	418b      	sbcs	r3, r1
   15f14:	4323      	orrs	r3, r4
   15f16:	4463      	add	r3, ip
   15f18:	0004      	movs	r4, r0
   15f1a:	e747      	b.n	15dac <__aeabi_fadd+0x12c>
   15f1c:	2b00      	cmp	r3, #0
   15f1e:	d118      	bne.n	15f52 <__aeabi_fadd+0x2d2>
   15f20:	1e3b      	subs	r3, r7, #0
   15f22:	d02d      	beq.n	15f80 <__aeabi_fadd+0x300>
   15f24:	000d      	movs	r5, r1
   15f26:	24ff      	movs	r4, #255	; 0xff
   15f28:	e6e5      	b.n	15cf6 <__aeabi_fadd+0x76>
   15f2a:	003b      	movs	r3, r7
   15f2c:	0004      	movs	r4, r0
   15f2e:	000d      	movs	r5, r1
   15f30:	e6e1      	b.n	15cf6 <__aeabi_fadd+0x76>
   15f32:	28ff      	cmp	r0, #255	; 0xff
   15f34:	d01c      	beq.n	15f70 <__aeabi_fadd+0x2f0>
   15f36:	2480      	movs	r4, #128	; 0x80
   15f38:	04e4      	lsls	r4, r4, #19
   15f3a:	4249      	negs	r1, r1
   15f3c:	4323      	orrs	r3, r4
   15f3e:	e7e0      	b.n	15f02 <__aeabi_fadd+0x282>
   15f40:	2f00      	cmp	r7, #0
   15f42:	d100      	bne.n	15f46 <__aeabi_fadd+0x2c6>
   15f44:	e6d7      	b.n	15cf6 <__aeabi_fadd+0x76>
   15f46:	1bde      	subs	r6, r3, r7
   15f48:	0172      	lsls	r2, r6, #5
   15f4a:	d51f      	bpl.n	15f8c <__aeabi_fadd+0x30c>
   15f4c:	1afb      	subs	r3, r7, r3
   15f4e:	000d      	movs	r5, r1
   15f50:	e6d1      	b.n	15cf6 <__aeabi_fadd+0x76>
   15f52:	24ff      	movs	r4, #255	; 0xff
   15f54:	2f00      	cmp	r7, #0
   15f56:	d100      	bne.n	15f5a <__aeabi_fadd+0x2da>
   15f58:	e6cd      	b.n	15cf6 <__aeabi_fadd+0x76>
   15f5a:	2280      	movs	r2, #128	; 0x80
   15f5c:	4640      	mov	r0, r8
   15f5e:	03d2      	lsls	r2, r2, #15
   15f60:	4210      	tst	r0, r2
   15f62:	d0af      	beq.n	15ec4 <__aeabi_fadd+0x244>
   15f64:	4216      	tst	r6, r2
   15f66:	d1ad      	bne.n	15ec4 <__aeabi_fadd+0x244>
   15f68:	003b      	movs	r3, r7
   15f6a:	000d      	movs	r5, r1
   15f6c:	24ff      	movs	r4, #255	; 0xff
   15f6e:	e6c2      	b.n	15cf6 <__aeabi_fadd+0x76>
   15f70:	4663      	mov	r3, ip
   15f72:	24ff      	movs	r4, #255	; 0xff
   15f74:	e6bf      	b.n	15cf6 <__aeabi_fadd+0x76>
   15f76:	2301      	movs	r3, #1
   15f78:	e77a      	b.n	15e70 <__aeabi_fadd+0x1f0>
   15f7a:	003b      	movs	r3, r7
   15f7c:	0004      	movs	r4, r0
   15f7e:	e6ba      	b.n	15cf6 <__aeabi_fadd+0x76>
   15f80:	2680      	movs	r6, #128	; 0x80
   15f82:	2200      	movs	r2, #0
   15f84:	03f6      	lsls	r6, r6, #15
   15f86:	e6f0      	b.n	15d6a <__aeabi_fadd+0xea>
   15f88:	003b      	movs	r3, r7
   15f8a:	e6b4      	b.n	15cf6 <__aeabi_fadd+0x76>
   15f8c:	1e33      	subs	r3, r6, #0
   15f8e:	d000      	beq.n	15f92 <__aeabi_fadd+0x312>
   15f90:	e6e2      	b.n	15d58 <__aeabi_fadd+0xd8>
   15f92:	2200      	movs	r2, #0
   15f94:	e721      	b.n	15dda <__aeabi_fadd+0x15a>
   15f96:	2301      	movs	r3, #1
   15f98:	e7bd      	b.n	15f16 <__aeabi_fadd+0x296>
   15f9a:	46c0      	nop			; (mov r8, r8)
   15f9c:	7dffffff 	.word	0x7dffffff
   15fa0:	fbffffff 	.word	0xfbffffff

00015fa4 <__aeabi_fdiv>:
   15fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   15fa6:	4657      	mov	r7, sl
   15fa8:	464e      	mov	r6, r9
   15faa:	46de      	mov	lr, fp
   15fac:	4645      	mov	r5, r8
   15fae:	b5e0      	push	{r5, r6, r7, lr}
   15fb0:	0244      	lsls	r4, r0, #9
   15fb2:	0043      	lsls	r3, r0, #1
   15fb4:	0fc6      	lsrs	r6, r0, #31
   15fb6:	b083      	sub	sp, #12
   15fb8:	1c0f      	adds	r7, r1, #0
   15fba:	0a64      	lsrs	r4, r4, #9
   15fbc:	0e1b      	lsrs	r3, r3, #24
   15fbe:	46b2      	mov	sl, r6
   15fc0:	d053      	beq.n	1606a <__aeabi_fdiv+0xc6>
   15fc2:	2bff      	cmp	r3, #255	; 0xff
   15fc4:	d027      	beq.n	16016 <__aeabi_fdiv+0x72>
   15fc6:	2280      	movs	r2, #128	; 0x80
   15fc8:	00e4      	lsls	r4, r4, #3
   15fca:	04d2      	lsls	r2, r2, #19
   15fcc:	4314      	orrs	r4, r2
   15fce:	227f      	movs	r2, #127	; 0x7f
   15fd0:	4252      	negs	r2, r2
   15fd2:	4690      	mov	r8, r2
   15fd4:	4498      	add	r8, r3
   15fd6:	2300      	movs	r3, #0
   15fd8:	4699      	mov	r9, r3
   15fda:	469b      	mov	fp, r3
   15fdc:	027d      	lsls	r5, r7, #9
   15fde:	0078      	lsls	r0, r7, #1
   15fe0:	0ffb      	lsrs	r3, r7, #31
   15fe2:	0a6d      	lsrs	r5, r5, #9
   15fe4:	0e00      	lsrs	r0, r0, #24
   15fe6:	9300      	str	r3, [sp, #0]
   15fe8:	d024      	beq.n	16034 <__aeabi_fdiv+0x90>
   15fea:	28ff      	cmp	r0, #255	; 0xff
   15fec:	d046      	beq.n	1607c <__aeabi_fdiv+0xd8>
   15fee:	2380      	movs	r3, #128	; 0x80
   15ff0:	2100      	movs	r1, #0
   15ff2:	00ed      	lsls	r5, r5, #3
   15ff4:	04db      	lsls	r3, r3, #19
   15ff6:	431d      	orrs	r5, r3
   15ff8:	387f      	subs	r0, #127	; 0x7f
   15ffa:	4647      	mov	r7, r8
   15ffc:	1a38      	subs	r0, r7, r0
   15ffe:	464f      	mov	r7, r9
   16000:	430f      	orrs	r7, r1
   16002:	00bf      	lsls	r7, r7, #2
   16004:	46b9      	mov	r9, r7
   16006:	0033      	movs	r3, r6
   16008:	9a00      	ldr	r2, [sp, #0]
   1600a:	4f87      	ldr	r7, [pc, #540]	; (16228 <__aeabi_fdiv+0x284>)
   1600c:	4053      	eors	r3, r2
   1600e:	464a      	mov	r2, r9
   16010:	58ba      	ldr	r2, [r7, r2]
   16012:	9301      	str	r3, [sp, #4]
   16014:	4697      	mov	pc, r2
   16016:	2c00      	cmp	r4, #0
   16018:	d14e      	bne.n	160b8 <__aeabi_fdiv+0x114>
   1601a:	2308      	movs	r3, #8
   1601c:	4699      	mov	r9, r3
   1601e:	33f7      	adds	r3, #247	; 0xf7
   16020:	4698      	mov	r8, r3
   16022:	3bfd      	subs	r3, #253	; 0xfd
   16024:	469b      	mov	fp, r3
   16026:	027d      	lsls	r5, r7, #9
   16028:	0078      	lsls	r0, r7, #1
   1602a:	0ffb      	lsrs	r3, r7, #31
   1602c:	0a6d      	lsrs	r5, r5, #9
   1602e:	0e00      	lsrs	r0, r0, #24
   16030:	9300      	str	r3, [sp, #0]
   16032:	d1da      	bne.n	15fea <__aeabi_fdiv+0x46>
   16034:	2d00      	cmp	r5, #0
   16036:	d126      	bne.n	16086 <__aeabi_fdiv+0xe2>
   16038:	2000      	movs	r0, #0
   1603a:	2101      	movs	r1, #1
   1603c:	0033      	movs	r3, r6
   1603e:	9a00      	ldr	r2, [sp, #0]
   16040:	4f7a      	ldr	r7, [pc, #488]	; (1622c <__aeabi_fdiv+0x288>)
   16042:	4053      	eors	r3, r2
   16044:	4642      	mov	r2, r8
   16046:	1a10      	subs	r0, r2, r0
   16048:	464a      	mov	r2, r9
   1604a:	430a      	orrs	r2, r1
   1604c:	0092      	lsls	r2, r2, #2
   1604e:	58ba      	ldr	r2, [r7, r2]
   16050:	001d      	movs	r5, r3
   16052:	4697      	mov	pc, r2
   16054:	9b00      	ldr	r3, [sp, #0]
   16056:	002c      	movs	r4, r5
   16058:	469a      	mov	sl, r3
   1605a:	468b      	mov	fp, r1
   1605c:	465b      	mov	r3, fp
   1605e:	2b02      	cmp	r3, #2
   16060:	d131      	bne.n	160c6 <__aeabi_fdiv+0x122>
   16062:	4653      	mov	r3, sl
   16064:	21ff      	movs	r1, #255	; 0xff
   16066:	2400      	movs	r4, #0
   16068:	e038      	b.n	160dc <__aeabi_fdiv+0x138>
   1606a:	2c00      	cmp	r4, #0
   1606c:	d117      	bne.n	1609e <__aeabi_fdiv+0xfa>
   1606e:	2304      	movs	r3, #4
   16070:	4699      	mov	r9, r3
   16072:	2300      	movs	r3, #0
   16074:	4698      	mov	r8, r3
   16076:	3301      	adds	r3, #1
   16078:	469b      	mov	fp, r3
   1607a:	e7af      	b.n	15fdc <__aeabi_fdiv+0x38>
   1607c:	20ff      	movs	r0, #255	; 0xff
   1607e:	2d00      	cmp	r5, #0
   16080:	d10b      	bne.n	1609a <__aeabi_fdiv+0xf6>
   16082:	2102      	movs	r1, #2
   16084:	e7da      	b.n	1603c <__aeabi_fdiv+0x98>
   16086:	0028      	movs	r0, r5
   16088:	f002 fa7a 	bl	18580 <__clzsi2>
   1608c:	1f43      	subs	r3, r0, #5
   1608e:	409d      	lsls	r5, r3
   16090:	2376      	movs	r3, #118	; 0x76
   16092:	425b      	negs	r3, r3
   16094:	1a18      	subs	r0, r3, r0
   16096:	2100      	movs	r1, #0
   16098:	e7af      	b.n	15ffa <__aeabi_fdiv+0x56>
   1609a:	2103      	movs	r1, #3
   1609c:	e7ad      	b.n	15ffa <__aeabi_fdiv+0x56>
   1609e:	0020      	movs	r0, r4
   160a0:	f002 fa6e 	bl	18580 <__clzsi2>
   160a4:	1f43      	subs	r3, r0, #5
   160a6:	409c      	lsls	r4, r3
   160a8:	2376      	movs	r3, #118	; 0x76
   160aa:	425b      	negs	r3, r3
   160ac:	1a1b      	subs	r3, r3, r0
   160ae:	4698      	mov	r8, r3
   160b0:	2300      	movs	r3, #0
   160b2:	4699      	mov	r9, r3
   160b4:	469b      	mov	fp, r3
   160b6:	e791      	b.n	15fdc <__aeabi_fdiv+0x38>
   160b8:	230c      	movs	r3, #12
   160ba:	4699      	mov	r9, r3
   160bc:	33f3      	adds	r3, #243	; 0xf3
   160be:	4698      	mov	r8, r3
   160c0:	3bfc      	subs	r3, #252	; 0xfc
   160c2:	469b      	mov	fp, r3
   160c4:	e78a      	b.n	15fdc <__aeabi_fdiv+0x38>
   160c6:	2b03      	cmp	r3, #3
   160c8:	d100      	bne.n	160cc <__aeabi_fdiv+0x128>
   160ca:	e0a5      	b.n	16218 <__aeabi_fdiv+0x274>
   160cc:	4655      	mov	r5, sl
   160ce:	2b01      	cmp	r3, #1
   160d0:	d000      	beq.n	160d4 <__aeabi_fdiv+0x130>
   160d2:	e081      	b.n	161d8 <__aeabi_fdiv+0x234>
   160d4:	2301      	movs	r3, #1
   160d6:	2100      	movs	r1, #0
   160d8:	2400      	movs	r4, #0
   160da:	402b      	ands	r3, r5
   160dc:	0264      	lsls	r4, r4, #9
   160de:	05c9      	lsls	r1, r1, #23
   160e0:	0a60      	lsrs	r0, r4, #9
   160e2:	07db      	lsls	r3, r3, #31
   160e4:	4308      	orrs	r0, r1
   160e6:	4318      	orrs	r0, r3
   160e8:	b003      	add	sp, #12
   160ea:	bc3c      	pop	{r2, r3, r4, r5}
   160ec:	4690      	mov	r8, r2
   160ee:	4699      	mov	r9, r3
   160f0:	46a2      	mov	sl, r4
   160f2:	46ab      	mov	fp, r5
   160f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   160f6:	2480      	movs	r4, #128	; 0x80
   160f8:	2300      	movs	r3, #0
   160fa:	03e4      	lsls	r4, r4, #15
   160fc:	21ff      	movs	r1, #255	; 0xff
   160fe:	e7ed      	b.n	160dc <__aeabi_fdiv+0x138>
   16100:	21ff      	movs	r1, #255	; 0xff
   16102:	2400      	movs	r4, #0
   16104:	e7ea      	b.n	160dc <__aeabi_fdiv+0x138>
   16106:	2301      	movs	r3, #1
   16108:	1a59      	subs	r1, r3, r1
   1610a:	291b      	cmp	r1, #27
   1610c:	dd66      	ble.n	161dc <__aeabi_fdiv+0x238>
   1610e:	9a01      	ldr	r2, [sp, #4]
   16110:	4013      	ands	r3, r2
   16112:	2100      	movs	r1, #0
   16114:	2400      	movs	r4, #0
   16116:	e7e1      	b.n	160dc <__aeabi_fdiv+0x138>
   16118:	2380      	movs	r3, #128	; 0x80
   1611a:	03db      	lsls	r3, r3, #15
   1611c:	421c      	tst	r4, r3
   1611e:	d038      	beq.n	16192 <__aeabi_fdiv+0x1ee>
   16120:	421d      	tst	r5, r3
   16122:	d051      	beq.n	161c8 <__aeabi_fdiv+0x224>
   16124:	431c      	orrs	r4, r3
   16126:	0264      	lsls	r4, r4, #9
   16128:	0a64      	lsrs	r4, r4, #9
   1612a:	0033      	movs	r3, r6
   1612c:	21ff      	movs	r1, #255	; 0xff
   1612e:	e7d5      	b.n	160dc <__aeabi_fdiv+0x138>
   16130:	0163      	lsls	r3, r4, #5
   16132:	016c      	lsls	r4, r5, #5
   16134:	42a3      	cmp	r3, r4
   16136:	d23b      	bcs.n	161b0 <__aeabi_fdiv+0x20c>
   16138:	261b      	movs	r6, #27
   1613a:	2100      	movs	r1, #0
   1613c:	3801      	subs	r0, #1
   1613e:	2501      	movs	r5, #1
   16140:	001f      	movs	r7, r3
   16142:	0049      	lsls	r1, r1, #1
   16144:	005b      	lsls	r3, r3, #1
   16146:	2f00      	cmp	r7, #0
   16148:	db01      	blt.n	1614e <__aeabi_fdiv+0x1aa>
   1614a:	429c      	cmp	r4, r3
   1614c:	d801      	bhi.n	16152 <__aeabi_fdiv+0x1ae>
   1614e:	1b1b      	subs	r3, r3, r4
   16150:	4329      	orrs	r1, r5
   16152:	3e01      	subs	r6, #1
   16154:	2e00      	cmp	r6, #0
   16156:	d1f3      	bne.n	16140 <__aeabi_fdiv+0x19c>
   16158:	001c      	movs	r4, r3
   1615a:	1e63      	subs	r3, r4, #1
   1615c:	419c      	sbcs	r4, r3
   1615e:	430c      	orrs	r4, r1
   16160:	0001      	movs	r1, r0
   16162:	317f      	adds	r1, #127	; 0x7f
   16164:	2900      	cmp	r1, #0
   16166:	ddce      	ble.n	16106 <__aeabi_fdiv+0x162>
   16168:	0763      	lsls	r3, r4, #29
   1616a:	d004      	beq.n	16176 <__aeabi_fdiv+0x1d2>
   1616c:	230f      	movs	r3, #15
   1616e:	4023      	ands	r3, r4
   16170:	2b04      	cmp	r3, #4
   16172:	d000      	beq.n	16176 <__aeabi_fdiv+0x1d2>
   16174:	3404      	adds	r4, #4
   16176:	0123      	lsls	r3, r4, #4
   16178:	d503      	bpl.n	16182 <__aeabi_fdiv+0x1de>
   1617a:	0001      	movs	r1, r0
   1617c:	4b2c      	ldr	r3, [pc, #176]	; (16230 <__aeabi_fdiv+0x28c>)
   1617e:	3180      	adds	r1, #128	; 0x80
   16180:	401c      	ands	r4, r3
   16182:	29fe      	cmp	r1, #254	; 0xfe
   16184:	dd0d      	ble.n	161a2 <__aeabi_fdiv+0x1fe>
   16186:	2301      	movs	r3, #1
   16188:	9a01      	ldr	r2, [sp, #4]
   1618a:	21ff      	movs	r1, #255	; 0xff
   1618c:	4013      	ands	r3, r2
   1618e:	2400      	movs	r4, #0
   16190:	e7a4      	b.n	160dc <__aeabi_fdiv+0x138>
   16192:	2380      	movs	r3, #128	; 0x80
   16194:	03db      	lsls	r3, r3, #15
   16196:	431c      	orrs	r4, r3
   16198:	0264      	lsls	r4, r4, #9
   1619a:	0a64      	lsrs	r4, r4, #9
   1619c:	0033      	movs	r3, r6
   1619e:	21ff      	movs	r1, #255	; 0xff
   161a0:	e79c      	b.n	160dc <__aeabi_fdiv+0x138>
   161a2:	2301      	movs	r3, #1
   161a4:	9a01      	ldr	r2, [sp, #4]
   161a6:	01a4      	lsls	r4, r4, #6
   161a8:	0a64      	lsrs	r4, r4, #9
   161aa:	b2c9      	uxtb	r1, r1
   161ac:	4013      	ands	r3, r2
   161ae:	e795      	b.n	160dc <__aeabi_fdiv+0x138>
   161b0:	1b1b      	subs	r3, r3, r4
   161b2:	261a      	movs	r6, #26
   161b4:	2101      	movs	r1, #1
   161b6:	e7c2      	b.n	1613e <__aeabi_fdiv+0x19a>
   161b8:	9b00      	ldr	r3, [sp, #0]
   161ba:	468b      	mov	fp, r1
   161bc:	469a      	mov	sl, r3
   161be:	2400      	movs	r4, #0
   161c0:	e74c      	b.n	1605c <__aeabi_fdiv+0xb8>
   161c2:	0263      	lsls	r3, r4, #9
   161c4:	d5e5      	bpl.n	16192 <__aeabi_fdiv+0x1ee>
   161c6:	2500      	movs	r5, #0
   161c8:	2480      	movs	r4, #128	; 0x80
   161ca:	03e4      	lsls	r4, r4, #15
   161cc:	432c      	orrs	r4, r5
   161ce:	0264      	lsls	r4, r4, #9
   161d0:	0a64      	lsrs	r4, r4, #9
   161d2:	9b00      	ldr	r3, [sp, #0]
   161d4:	21ff      	movs	r1, #255	; 0xff
   161d6:	e781      	b.n	160dc <__aeabi_fdiv+0x138>
   161d8:	9501      	str	r5, [sp, #4]
   161da:	e7c1      	b.n	16160 <__aeabi_fdiv+0x1bc>
   161dc:	0023      	movs	r3, r4
   161de:	2020      	movs	r0, #32
   161e0:	40cb      	lsrs	r3, r1
   161e2:	1a41      	subs	r1, r0, r1
   161e4:	408c      	lsls	r4, r1
   161e6:	1e61      	subs	r1, r4, #1
   161e8:	418c      	sbcs	r4, r1
   161ea:	431c      	orrs	r4, r3
   161ec:	0763      	lsls	r3, r4, #29
   161ee:	d004      	beq.n	161fa <__aeabi_fdiv+0x256>
   161f0:	230f      	movs	r3, #15
   161f2:	4023      	ands	r3, r4
   161f4:	2b04      	cmp	r3, #4
   161f6:	d000      	beq.n	161fa <__aeabi_fdiv+0x256>
   161f8:	3404      	adds	r4, #4
   161fa:	0163      	lsls	r3, r4, #5
   161fc:	d505      	bpl.n	1620a <__aeabi_fdiv+0x266>
   161fe:	2301      	movs	r3, #1
   16200:	9a01      	ldr	r2, [sp, #4]
   16202:	2101      	movs	r1, #1
   16204:	4013      	ands	r3, r2
   16206:	2400      	movs	r4, #0
   16208:	e768      	b.n	160dc <__aeabi_fdiv+0x138>
   1620a:	2301      	movs	r3, #1
   1620c:	9a01      	ldr	r2, [sp, #4]
   1620e:	01a4      	lsls	r4, r4, #6
   16210:	0a64      	lsrs	r4, r4, #9
   16212:	4013      	ands	r3, r2
   16214:	2100      	movs	r1, #0
   16216:	e761      	b.n	160dc <__aeabi_fdiv+0x138>
   16218:	2380      	movs	r3, #128	; 0x80
   1621a:	03db      	lsls	r3, r3, #15
   1621c:	431c      	orrs	r4, r3
   1621e:	0264      	lsls	r4, r4, #9
   16220:	0a64      	lsrs	r4, r4, #9
   16222:	4653      	mov	r3, sl
   16224:	21ff      	movs	r1, #255	; 0xff
   16226:	e759      	b.n	160dc <__aeabi_fdiv+0x138>
   16228:	0001bf48 	.word	0x0001bf48
   1622c:	0001bf88 	.word	0x0001bf88
   16230:	f7ffffff 	.word	0xf7ffffff

00016234 <__aeabi_fmul>:
   16234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16236:	4657      	mov	r7, sl
   16238:	464e      	mov	r6, r9
   1623a:	4645      	mov	r5, r8
   1623c:	46de      	mov	lr, fp
   1623e:	b5e0      	push	{r5, r6, r7, lr}
   16240:	0247      	lsls	r7, r0, #9
   16242:	0046      	lsls	r6, r0, #1
   16244:	4688      	mov	r8, r1
   16246:	0a7f      	lsrs	r7, r7, #9
   16248:	0e36      	lsrs	r6, r6, #24
   1624a:	0fc4      	lsrs	r4, r0, #31
   1624c:	2e00      	cmp	r6, #0
   1624e:	d047      	beq.n	162e0 <__aeabi_fmul+0xac>
   16250:	2eff      	cmp	r6, #255	; 0xff
   16252:	d024      	beq.n	1629e <__aeabi_fmul+0x6a>
   16254:	00fb      	lsls	r3, r7, #3
   16256:	2780      	movs	r7, #128	; 0x80
   16258:	04ff      	lsls	r7, r7, #19
   1625a:	431f      	orrs	r7, r3
   1625c:	2300      	movs	r3, #0
   1625e:	4699      	mov	r9, r3
   16260:	469a      	mov	sl, r3
   16262:	3e7f      	subs	r6, #127	; 0x7f
   16264:	4643      	mov	r3, r8
   16266:	025d      	lsls	r5, r3, #9
   16268:	0058      	lsls	r0, r3, #1
   1626a:	0fdb      	lsrs	r3, r3, #31
   1626c:	0a6d      	lsrs	r5, r5, #9
   1626e:	0e00      	lsrs	r0, r0, #24
   16270:	4698      	mov	r8, r3
   16272:	d043      	beq.n	162fc <__aeabi_fmul+0xc8>
   16274:	28ff      	cmp	r0, #255	; 0xff
   16276:	d03b      	beq.n	162f0 <__aeabi_fmul+0xbc>
   16278:	00eb      	lsls	r3, r5, #3
   1627a:	2580      	movs	r5, #128	; 0x80
   1627c:	2200      	movs	r2, #0
   1627e:	04ed      	lsls	r5, r5, #19
   16280:	431d      	orrs	r5, r3
   16282:	387f      	subs	r0, #127	; 0x7f
   16284:	1836      	adds	r6, r6, r0
   16286:	1c73      	adds	r3, r6, #1
   16288:	4641      	mov	r1, r8
   1628a:	469b      	mov	fp, r3
   1628c:	464b      	mov	r3, r9
   1628e:	4061      	eors	r1, r4
   16290:	4313      	orrs	r3, r2
   16292:	2b0f      	cmp	r3, #15
   16294:	d864      	bhi.n	16360 <__aeabi_fmul+0x12c>
   16296:	4875      	ldr	r0, [pc, #468]	; (1646c <__aeabi_fmul+0x238>)
   16298:	009b      	lsls	r3, r3, #2
   1629a:	58c3      	ldr	r3, [r0, r3]
   1629c:	469f      	mov	pc, r3
   1629e:	2f00      	cmp	r7, #0
   162a0:	d142      	bne.n	16328 <__aeabi_fmul+0xf4>
   162a2:	2308      	movs	r3, #8
   162a4:	4699      	mov	r9, r3
   162a6:	3b06      	subs	r3, #6
   162a8:	26ff      	movs	r6, #255	; 0xff
   162aa:	469a      	mov	sl, r3
   162ac:	e7da      	b.n	16264 <__aeabi_fmul+0x30>
   162ae:	4641      	mov	r1, r8
   162b0:	2a02      	cmp	r2, #2
   162b2:	d028      	beq.n	16306 <__aeabi_fmul+0xd2>
   162b4:	2a03      	cmp	r2, #3
   162b6:	d100      	bne.n	162ba <__aeabi_fmul+0x86>
   162b8:	e0ce      	b.n	16458 <__aeabi_fmul+0x224>
   162ba:	2a01      	cmp	r2, #1
   162bc:	d000      	beq.n	162c0 <__aeabi_fmul+0x8c>
   162be:	e0ac      	b.n	1641a <__aeabi_fmul+0x1e6>
   162c0:	4011      	ands	r1, r2
   162c2:	2000      	movs	r0, #0
   162c4:	2200      	movs	r2, #0
   162c6:	b2cc      	uxtb	r4, r1
   162c8:	0240      	lsls	r0, r0, #9
   162ca:	05d2      	lsls	r2, r2, #23
   162cc:	0a40      	lsrs	r0, r0, #9
   162ce:	07e4      	lsls	r4, r4, #31
   162d0:	4310      	orrs	r0, r2
   162d2:	4320      	orrs	r0, r4
   162d4:	bc3c      	pop	{r2, r3, r4, r5}
   162d6:	4690      	mov	r8, r2
   162d8:	4699      	mov	r9, r3
   162da:	46a2      	mov	sl, r4
   162dc:	46ab      	mov	fp, r5
   162de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   162e0:	2f00      	cmp	r7, #0
   162e2:	d115      	bne.n	16310 <__aeabi_fmul+0xdc>
   162e4:	2304      	movs	r3, #4
   162e6:	4699      	mov	r9, r3
   162e8:	3b03      	subs	r3, #3
   162ea:	2600      	movs	r6, #0
   162ec:	469a      	mov	sl, r3
   162ee:	e7b9      	b.n	16264 <__aeabi_fmul+0x30>
   162f0:	20ff      	movs	r0, #255	; 0xff
   162f2:	2202      	movs	r2, #2
   162f4:	2d00      	cmp	r5, #0
   162f6:	d0c5      	beq.n	16284 <__aeabi_fmul+0x50>
   162f8:	2203      	movs	r2, #3
   162fa:	e7c3      	b.n	16284 <__aeabi_fmul+0x50>
   162fc:	2d00      	cmp	r5, #0
   162fe:	d119      	bne.n	16334 <__aeabi_fmul+0x100>
   16300:	2000      	movs	r0, #0
   16302:	2201      	movs	r2, #1
   16304:	e7be      	b.n	16284 <__aeabi_fmul+0x50>
   16306:	2401      	movs	r4, #1
   16308:	22ff      	movs	r2, #255	; 0xff
   1630a:	400c      	ands	r4, r1
   1630c:	2000      	movs	r0, #0
   1630e:	e7db      	b.n	162c8 <__aeabi_fmul+0x94>
   16310:	0038      	movs	r0, r7
   16312:	f002 f935 	bl	18580 <__clzsi2>
   16316:	2676      	movs	r6, #118	; 0x76
   16318:	1f43      	subs	r3, r0, #5
   1631a:	409f      	lsls	r7, r3
   1631c:	2300      	movs	r3, #0
   1631e:	4276      	negs	r6, r6
   16320:	1a36      	subs	r6, r6, r0
   16322:	4699      	mov	r9, r3
   16324:	469a      	mov	sl, r3
   16326:	e79d      	b.n	16264 <__aeabi_fmul+0x30>
   16328:	230c      	movs	r3, #12
   1632a:	4699      	mov	r9, r3
   1632c:	3b09      	subs	r3, #9
   1632e:	26ff      	movs	r6, #255	; 0xff
   16330:	469a      	mov	sl, r3
   16332:	e797      	b.n	16264 <__aeabi_fmul+0x30>
   16334:	0028      	movs	r0, r5
   16336:	f002 f923 	bl	18580 <__clzsi2>
   1633a:	1f43      	subs	r3, r0, #5
   1633c:	409d      	lsls	r5, r3
   1633e:	2376      	movs	r3, #118	; 0x76
   16340:	425b      	negs	r3, r3
   16342:	1a18      	subs	r0, r3, r0
   16344:	2200      	movs	r2, #0
   16346:	e79d      	b.n	16284 <__aeabi_fmul+0x50>
   16348:	2080      	movs	r0, #128	; 0x80
   1634a:	2400      	movs	r4, #0
   1634c:	03c0      	lsls	r0, r0, #15
   1634e:	22ff      	movs	r2, #255	; 0xff
   16350:	e7ba      	b.n	162c8 <__aeabi_fmul+0x94>
   16352:	003d      	movs	r5, r7
   16354:	4652      	mov	r2, sl
   16356:	e7ab      	b.n	162b0 <__aeabi_fmul+0x7c>
   16358:	003d      	movs	r5, r7
   1635a:	0021      	movs	r1, r4
   1635c:	4652      	mov	r2, sl
   1635e:	e7a7      	b.n	162b0 <__aeabi_fmul+0x7c>
   16360:	0c3b      	lsrs	r3, r7, #16
   16362:	469c      	mov	ip, r3
   16364:	042a      	lsls	r2, r5, #16
   16366:	0c12      	lsrs	r2, r2, #16
   16368:	0c2b      	lsrs	r3, r5, #16
   1636a:	0014      	movs	r4, r2
   1636c:	4660      	mov	r0, ip
   1636e:	4665      	mov	r5, ip
   16370:	043f      	lsls	r7, r7, #16
   16372:	0c3f      	lsrs	r7, r7, #16
   16374:	437c      	muls	r4, r7
   16376:	4342      	muls	r2, r0
   16378:	435d      	muls	r5, r3
   1637a:	437b      	muls	r3, r7
   1637c:	0c27      	lsrs	r7, r4, #16
   1637e:	189b      	adds	r3, r3, r2
   16380:	18ff      	adds	r7, r7, r3
   16382:	42ba      	cmp	r2, r7
   16384:	d903      	bls.n	1638e <__aeabi_fmul+0x15a>
   16386:	2380      	movs	r3, #128	; 0x80
   16388:	025b      	lsls	r3, r3, #9
   1638a:	469c      	mov	ip, r3
   1638c:	4465      	add	r5, ip
   1638e:	0424      	lsls	r4, r4, #16
   16390:	043a      	lsls	r2, r7, #16
   16392:	0c24      	lsrs	r4, r4, #16
   16394:	1912      	adds	r2, r2, r4
   16396:	0193      	lsls	r3, r2, #6
   16398:	1e5c      	subs	r4, r3, #1
   1639a:	41a3      	sbcs	r3, r4
   1639c:	0c3f      	lsrs	r7, r7, #16
   1639e:	0e92      	lsrs	r2, r2, #26
   163a0:	197d      	adds	r5, r7, r5
   163a2:	431a      	orrs	r2, r3
   163a4:	01ad      	lsls	r5, r5, #6
   163a6:	4315      	orrs	r5, r2
   163a8:	012b      	lsls	r3, r5, #4
   163aa:	d504      	bpl.n	163b6 <__aeabi_fmul+0x182>
   163ac:	2301      	movs	r3, #1
   163ae:	465e      	mov	r6, fp
   163b0:	086a      	lsrs	r2, r5, #1
   163b2:	401d      	ands	r5, r3
   163b4:	4315      	orrs	r5, r2
   163b6:	0032      	movs	r2, r6
   163b8:	327f      	adds	r2, #127	; 0x7f
   163ba:	2a00      	cmp	r2, #0
   163bc:	dd25      	ble.n	1640a <__aeabi_fmul+0x1d6>
   163be:	076b      	lsls	r3, r5, #29
   163c0:	d004      	beq.n	163cc <__aeabi_fmul+0x198>
   163c2:	230f      	movs	r3, #15
   163c4:	402b      	ands	r3, r5
   163c6:	2b04      	cmp	r3, #4
   163c8:	d000      	beq.n	163cc <__aeabi_fmul+0x198>
   163ca:	3504      	adds	r5, #4
   163cc:	012b      	lsls	r3, r5, #4
   163ce:	d503      	bpl.n	163d8 <__aeabi_fmul+0x1a4>
   163d0:	0032      	movs	r2, r6
   163d2:	4b27      	ldr	r3, [pc, #156]	; (16470 <__aeabi_fmul+0x23c>)
   163d4:	3280      	adds	r2, #128	; 0x80
   163d6:	401d      	ands	r5, r3
   163d8:	2afe      	cmp	r2, #254	; 0xfe
   163da:	dc94      	bgt.n	16306 <__aeabi_fmul+0xd2>
   163dc:	2401      	movs	r4, #1
   163de:	01a8      	lsls	r0, r5, #6
   163e0:	0a40      	lsrs	r0, r0, #9
   163e2:	b2d2      	uxtb	r2, r2
   163e4:	400c      	ands	r4, r1
   163e6:	e76f      	b.n	162c8 <__aeabi_fmul+0x94>
   163e8:	2080      	movs	r0, #128	; 0x80
   163ea:	03c0      	lsls	r0, r0, #15
   163ec:	4207      	tst	r7, r0
   163ee:	d007      	beq.n	16400 <__aeabi_fmul+0x1cc>
   163f0:	4205      	tst	r5, r0
   163f2:	d105      	bne.n	16400 <__aeabi_fmul+0x1cc>
   163f4:	4328      	orrs	r0, r5
   163f6:	0240      	lsls	r0, r0, #9
   163f8:	0a40      	lsrs	r0, r0, #9
   163fa:	4644      	mov	r4, r8
   163fc:	22ff      	movs	r2, #255	; 0xff
   163fe:	e763      	b.n	162c8 <__aeabi_fmul+0x94>
   16400:	4338      	orrs	r0, r7
   16402:	0240      	lsls	r0, r0, #9
   16404:	0a40      	lsrs	r0, r0, #9
   16406:	22ff      	movs	r2, #255	; 0xff
   16408:	e75e      	b.n	162c8 <__aeabi_fmul+0x94>
   1640a:	2401      	movs	r4, #1
   1640c:	1aa3      	subs	r3, r4, r2
   1640e:	2b1b      	cmp	r3, #27
   16410:	dd05      	ble.n	1641e <__aeabi_fmul+0x1ea>
   16412:	400c      	ands	r4, r1
   16414:	2200      	movs	r2, #0
   16416:	2000      	movs	r0, #0
   16418:	e756      	b.n	162c8 <__aeabi_fmul+0x94>
   1641a:	465e      	mov	r6, fp
   1641c:	e7cb      	b.n	163b6 <__aeabi_fmul+0x182>
   1641e:	002a      	movs	r2, r5
   16420:	2020      	movs	r0, #32
   16422:	40da      	lsrs	r2, r3
   16424:	1ac3      	subs	r3, r0, r3
   16426:	409d      	lsls	r5, r3
   16428:	002b      	movs	r3, r5
   1642a:	1e5d      	subs	r5, r3, #1
   1642c:	41ab      	sbcs	r3, r5
   1642e:	4313      	orrs	r3, r2
   16430:	075a      	lsls	r2, r3, #29
   16432:	d004      	beq.n	1643e <__aeabi_fmul+0x20a>
   16434:	220f      	movs	r2, #15
   16436:	401a      	ands	r2, r3
   16438:	2a04      	cmp	r2, #4
   1643a:	d000      	beq.n	1643e <__aeabi_fmul+0x20a>
   1643c:	3304      	adds	r3, #4
   1643e:	015a      	lsls	r2, r3, #5
   16440:	d504      	bpl.n	1644c <__aeabi_fmul+0x218>
   16442:	2401      	movs	r4, #1
   16444:	2201      	movs	r2, #1
   16446:	400c      	ands	r4, r1
   16448:	2000      	movs	r0, #0
   1644a:	e73d      	b.n	162c8 <__aeabi_fmul+0x94>
   1644c:	2401      	movs	r4, #1
   1644e:	019b      	lsls	r3, r3, #6
   16450:	0a58      	lsrs	r0, r3, #9
   16452:	400c      	ands	r4, r1
   16454:	2200      	movs	r2, #0
   16456:	e737      	b.n	162c8 <__aeabi_fmul+0x94>
   16458:	2080      	movs	r0, #128	; 0x80
   1645a:	2401      	movs	r4, #1
   1645c:	03c0      	lsls	r0, r0, #15
   1645e:	4328      	orrs	r0, r5
   16460:	0240      	lsls	r0, r0, #9
   16462:	0a40      	lsrs	r0, r0, #9
   16464:	400c      	ands	r4, r1
   16466:	22ff      	movs	r2, #255	; 0xff
   16468:	e72e      	b.n	162c8 <__aeabi_fmul+0x94>
   1646a:	46c0      	nop			; (mov r8, r8)
   1646c:	0001bfc8 	.word	0x0001bfc8
   16470:	f7ffffff 	.word	0xf7ffffff

00016474 <__aeabi_fsub>:
   16474:	b5f0      	push	{r4, r5, r6, r7, lr}
   16476:	464f      	mov	r7, r9
   16478:	46d6      	mov	lr, sl
   1647a:	4646      	mov	r6, r8
   1647c:	0044      	lsls	r4, r0, #1
   1647e:	b5c0      	push	{r6, r7, lr}
   16480:	0fc2      	lsrs	r2, r0, #31
   16482:	0247      	lsls	r7, r0, #9
   16484:	0248      	lsls	r0, r1, #9
   16486:	0a40      	lsrs	r0, r0, #9
   16488:	4684      	mov	ip, r0
   1648a:	4666      	mov	r6, ip
   1648c:	0a7b      	lsrs	r3, r7, #9
   1648e:	0048      	lsls	r0, r1, #1
   16490:	0fc9      	lsrs	r1, r1, #31
   16492:	469a      	mov	sl, r3
   16494:	0e24      	lsrs	r4, r4, #24
   16496:	0015      	movs	r5, r2
   16498:	00db      	lsls	r3, r3, #3
   1649a:	0e00      	lsrs	r0, r0, #24
   1649c:	4689      	mov	r9, r1
   1649e:	00f6      	lsls	r6, r6, #3
   164a0:	28ff      	cmp	r0, #255	; 0xff
   164a2:	d100      	bne.n	164a6 <__aeabi_fsub+0x32>
   164a4:	e08f      	b.n	165c6 <__aeabi_fsub+0x152>
   164a6:	2101      	movs	r1, #1
   164a8:	464f      	mov	r7, r9
   164aa:	404f      	eors	r7, r1
   164ac:	0039      	movs	r1, r7
   164ae:	4291      	cmp	r1, r2
   164b0:	d066      	beq.n	16580 <__aeabi_fsub+0x10c>
   164b2:	1a22      	subs	r2, r4, r0
   164b4:	2a00      	cmp	r2, #0
   164b6:	dc00      	bgt.n	164ba <__aeabi_fsub+0x46>
   164b8:	e09d      	b.n	165f6 <__aeabi_fsub+0x182>
   164ba:	2800      	cmp	r0, #0
   164bc:	d13d      	bne.n	1653a <__aeabi_fsub+0xc6>
   164be:	2e00      	cmp	r6, #0
   164c0:	d100      	bne.n	164c4 <__aeabi_fsub+0x50>
   164c2:	e08b      	b.n	165dc <__aeabi_fsub+0x168>
   164c4:	1e51      	subs	r1, r2, #1
   164c6:	2900      	cmp	r1, #0
   164c8:	d000      	beq.n	164cc <__aeabi_fsub+0x58>
   164ca:	e0b5      	b.n	16638 <__aeabi_fsub+0x1c4>
   164cc:	2401      	movs	r4, #1
   164ce:	1b9b      	subs	r3, r3, r6
   164d0:	015a      	lsls	r2, r3, #5
   164d2:	d544      	bpl.n	1655e <__aeabi_fsub+0xea>
   164d4:	019b      	lsls	r3, r3, #6
   164d6:	099f      	lsrs	r7, r3, #6
   164d8:	0038      	movs	r0, r7
   164da:	f002 f851 	bl	18580 <__clzsi2>
   164de:	3805      	subs	r0, #5
   164e0:	4087      	lsls	r7, r0
   164e2:	4284      	cmp	r4, r0
   164e4:	dd00      	ble.n	164e8 <__aeabi_fsub+0x74>
   164e6:	e096      	b.n	16616 <__aeabi_fsub+0x1a2>
   164e8:	1b04      	subs	r4, r0, r4
   164ea:	003a      	movs	r2, r7
   164ec:	2020      	movs	r0, #32
   164ee:	3401      	adds	r4, #1
   164f0:	40e2      	lsrs	r2, r4
   164f2:	1b04      	subs	r4, r0, r4
   164f4:	40a7      	lsls	r7, r4
   164f6:	003b      	movs	r3, r7
   164f8:	1e5f      	subs	r7, r3, #1
   164fa:	41bb      	sbcs	r3, r7
   164fc:	2400      	movs	r4, #0
   164fe:	4313      	orrs	r3, r2
   16500:	075a      	lsls	r2, r3, #29
   16502:	d004      	beq.n	1650e <__aeabi_fsub+0x9a>
   16504:	220f      	movs	r2, #15
   16506:	401a      	ands	r2, r3
   16508:	2a04      	cmp	r2, #4
   1650a:	d000      	beq.n	1650e <__aeabi_fsub+0x9a>
   1650c:	3304      	adds	r3, #4
   1650e:	015a      	lsls	r2, r3, #5
   16510:	d527      	bpl.n	16562 <__aeabi_fsub+0xee>
   16512:	3401      	adds	r4, #1
   16514:	2cff      	cmp	r4, #255	; 0xff
   16516:	d100      	bne.n	1651a <__aeabi_fsub+0xa6>
   16518:	e079      	b.n	1660e <__aeabi_fsub+0x19a>
   1651a:	2201      	movs	r2, #1
   1651c:	019b      	lsls	r3, r3, #6
   1651e:	0a5b      	lsrs	r3, r3, #9
   16520:	b2e4      	uxtb	r4, r4
   16522:	402a      	ands	r2, r5
   16524:	025b      	lsls	r3, r3, #9
   16526:	05e4      	lsls	r4, r4, #23
   16528:	0a58      	lsrs	r0, r3, #9
   1652a:	07d2      	lsls	r2, r2, #31
   1652c:	4320      	orrs	r0, r4
   1652e:	4310      	orrs	r0, r2
   16530:	bc1c      	pop	{r2, r3, r4}
   16532:	4690      	mov	r8, r2
   16534:	4699      	mov	r9, r3
   16536:	46a2      	mov	sl, r4
   16538:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1653a:	2cff      	cmp	r4, #255	; 0xff
   1653c:	d0e0      	beq.n	16500 <__aeabi_fsub+0x8c>
   1653e:	2180      	movs	r1, #128	; 0x80
   16540:	04c9      	lsls	r1, r1, #19
   16542:	430e      	orrs	r6, r1
   16544:	2a1b      	cmp	r2, #27
   16546:	dc7b      	bgt.n	16640 <__aeabi_fsub+0x1cc>
   16548:	0031      	movs	r1, r6
   1654a:	2020      	movs	r0, #32
   1654c:	40d1      	lsrs	r1, r2
   1654e:	1a82      	subs	r2, r0, r2
   16550:	4096      	lsls	r6, r2
   16552:	1e72      	subs	r2, r6, #1
   16554:	4196      	sbcs	r6, r2
   16556:	430e      	orrs	r6, r1
   16558:	1b9b      	subs	r3, r3, r6
   1655a:	015a      	lsls	r2, r3, #5
   1655c:	d4ba      	bmi.n	164d4 <__aeabi_fsub+0x60>
   1655e:	075a      	lsls	r2, r3, #29
   16560:	d1d0      	bne.n	16504 <__aeabi_fsub+0x90>
   16562:	2201      	movs	r2, #1
   16564:	08df      	lsrs	r7, r3, #3
   16566:	402a      	ands	r2, r5
   16568:	2cff      	cmp	r4, #255	; 0xff
   1656a:	d133      	bne.n	165d4 <__aeabi_fsub+0x160>
   1656c:	2f00      	cmp	r7, #0
   1656e:	d100      	bne.n	16572 <__aeabi_fsub+0xfe>
   16570:	e0a8      	b.n	166c4 <__aeabi_fsub+0x250>
   16572:	2380      	movs	r3, #128	; 0x80
   16574:	03db      	lsls	r3, r3, #15
   16576:	433b      	orrs	r3, r7
   16578:	025b      	lsls	r3, r3, #9
   1657a:	0a5b      	lsrs	r3, r3, #9
   1657c:	24ff      	movs	r4, #255	; 0xff
   1657e:	e7d1      	b.n	16524 <__aeabi_fsub+0xb0>
   16580:	1a21      	subs	r1, r4, r0
   16582:	2900      	cmp	r1, #0
   16584:	dd4c      	ble.n	16620 <__aeabi_fsub+0x1ac>
   16586:	2800      	cmp	r0, #0
   16588:	d02a      	beq.n	165e0 <__aeabi_fsub+0x16c>
   1658a:	2cff      	cmp	r4, #255	; 0xff
   1658c:	d0b8      	beq.n	16500 <__aeabi_fsub+0x8c>
   1658e:	2080      	movs	r0, #128	; 0x80
   16590:	04c0      	lsls	r0, r0, #19
   16592:	4306      	orrs	r6, r0
   16594:	291b      	cmp	r1, #27
   16596:	dd00      	ble.n	1659a <__aeabi_fsub+0x126>
   16598:	e0af      	b.n	166fa <__aeabi_fsub+0x286>
   1659a:	0030      	movs	r0, r6
   1659c:	2720      	movs	r7, #32
   1659e:	40c8      	lsrs	r0, r1
   165a0:	1a79      	subs	r1, r7, r1
   165a2:	408e      	lsls	r6, r1
   165a4:	1e71      	subs	r1, r6, #1
   165a6:	418e      	sbcs	r6, r1
   165a8:	4306      	orrs	r6, r0
   165aa:	199b      	adds	r3, r3, r6
   165ac:	0159      	lsls	r1, r3, #5
   165ae:	d5d6      	bpl.n	1655e <__aeabi_fsub+0xea>
   165b0:	3401      	adds	r4, #1
   165b2:	2cff      	cmp	r4, #255	; 0xff
   165b4:	d100      	bne.n	165b8 <__aeabi_fsub+0x144>
   165b6:	e085      	b.n	166c4 <__aeabi_fsub+0x250>
   165b8:	2201      	movs	r2, #1
   165ba:	497a      	ldr	r1, [pc, #488]	; (167a4 <__aeabi_fsub+0x330>)
   165bc:	401a      	ands	r2, r3
   165be:	085b      	lsrs	r3, r3, #1
   165c0:	400b      	ands	r3, r1
   165c2:	4313      	orrs	r3, r2
   165c4:	e79c      	b.n	16500 <__aeabi_fsub+0x8c>
   165c6:	2e00      	cmp	r6, #0
   165c8:	d000      	beq.n	165cc <__aeabi_fsub+0x158>
   165ca:	e770      	b.n	164ae <__aeabi_fsub+0x3a>
   165cc:	e76b      	b.n	164a6 <__aeabi_fsub+0x32>
   165ce:	1e3b      	subs	r3, r7, #0
   165d0:	d1c5      	bne.n	1655e <__aeabi_fsub+0xea>
   165d2:	2200      	movs	r2, #0
   165d4:	027b      	lsls	r3, r7, #9
   165d6:	0a5b      	lsrs	r3, r3, #9
   165d8:	b2e4      	uxtb	r4, r4
   165da:	e7a3      	b.n	16524 <__aeabi_fsub+0xb0>
   165dc:	0014      	movs	r4, r2
   165de:	e78f      	b.n	16500 <__aeabi_fsub+0x8c>
   165e0:	2e00      	cmp	r6, #0
   165e2:	d04d      	beq.n	16680 <__aeabi_fsub+0x20c>
   165e4:	1e48      	subs	r0, r1, #1
   165e6:	2800      	cmp	r0, #0
   165e8:	d157      	bne.n	1669a <__aeabi_fsub+0x226>
   165ea:	199b      	adds	r3, r3, r6
   165ec:	2401      	movs	r4, #1
   165ee:	015a      	lsls	r2, r3, #5
   165f0:	d5b5      	bpl.n	1655e <__aeabi_fsub+0xea>
   165f2:	2402      	movs	r4, #2
   165f4:	e7e0      	b.n	165b8 <__aeabi_fsub+0x144>
   165f6:	2a00      	cmp	r2, #0
   165f8:	d125      	bne.n	16646 <__aeabi_fsub+0x1d2>
   165fa:	1c62      	adds	r2, r4, #1
   165fc:	b2d2      	uxtb	r2, r2
   165fe:	2a01      	cmp	r2, #1
   16600:	dd72      	ble.n	166e8 <__aeabi_fsub+0x274>
   16602:	1b9f      	subs	r7, r3, r6
   16604:	017a      	lsls	r2, r7, #5
   16606:	d535      	bpl.n	16674 <__aeabi_fsub+0x200>
   16608:	1af7      	subs	r7, r6, r3
   1660a:	000d      	movs	r5, r1
   1660c:	e764      	b.n	164d8 <__aeabi_fsub+0x64>
   1660e:	2201      	movs	r2, #1
   16610:	2300      	movs	r3, #0
   16612:	402a      	ands	r2, r5
   16614:	e786      	b.n	16524 <__aeabi_fsub+0xb0>
   16616:	003b      	movs	r3, r7
   16618:	4a63      	ldr	r2, [pc, #396]	; (167a8 <__aeabi_fsub+0x334>)
   1661a:	1a24      	subs	r4, r4, r0
   1661c:	4013      	ands	r3, r2
   1661e:	e76f      	b.n	16500 <__aeabi_fsub+0x8c>
   16620:	2900      	cmp	r1, #0
   16622:	d16c      	bne.n	166fe <__aeabi_fsub+0x28a>
   16624:	1c61      	adds	r1, r4, #1
   16626:	b2c8      	uxtb	r0, r1
   16628:	2801      	cmp	r0, #1
   1662a:	dd4e      	ble.n	166ca <__aeabi_fsub+0x256>
   1662c:	29ff      	cmp	r1, #255	; 0xff
   1662e:	d049      	beq.n	166c4 <__aeabi_fsub+0x250>
   16630:	199b      	adds	r3, r3, r6
   16632:	085b      	lsrs	r3, r3, #1
   16634:	000c      	movs	r4, r1
   16636:	e763      	b.n	16500 <__aeabi_fsub+0x8c>
   16638:	2aff      	cmp	r2, #255	; 0xff
   1663a:	d041      	beq.n	166c0 <__aeabi_fsub+0x24c>
   1663c:	000a      	movs	r2, r1
   1663e:	e781      	b.n	16544 <__aeabi_fsub+0xd0>
   16640:	2601      	movs	r6, #1
   16642:	1b9b      	subs	r3, r3, r6
   16644:	e789      	b.n	1655a <__aeabi_fsub+0xe6>
   16646:	2c00      	cmp	r4, #0
   16648:	d01c      	beq.n	16684 <__aeabi_fsub+0x210>
   1664a:	28ff      	cmp	r0, #255	; 0xff
   1664c:	d021      	beq.n	16692 <__aeabi_fsub+0x21e>
   1664e:	2480      	movs	r4, #128	; 0x80
   16650:	04e4      	lsls	r4, r4, #19
   16652:	4252      	negs	r2, r2
   16654:	4323      	orrs	r3, r4
   16656:	2a1b      	cmp	r2, #27
   16658:	dd00      	ble.n	1665c <__aeabi_fsub+0x1e8>
   1665a:	e096      	b.n	1678a <__aeabi_fsub+0x316>
   1665c:	001c      	movs	r4, r3
   1665e:	2520      	movs	r5, #32
   16660:	40d4      	lsrs	r4, r2
   16662:	1aaa      	subs	r2, r5, r2
   16664:	4093      	lsls	r3, r2
   16666:	1e5a      	subs	r2, r3, #1
   16668:	4193      	sbcs	r3, r2
   1666a:	4323      	orrs	r3, r4
   1666c:	1af3      	subs	r3, r6, r3
   1666e:	0004      	movs	r4, r0
   16670:	000d      	movs	r5, r1
   16672:	e72d      	b.n	164d0 <__aeabi_fsub+0x5c>
   16674:	2f00      	cmp	r7, #0
   16676:	d000      	beq.n	1667a <__aeabi_fsub+0x206>
   16678:	e72e      	b.n	164d8 <__aeabi_fsub+0x64>
   1667a:	2200      	movs	r2, #0
   1667c:	2400      	movs	r4, #0
   1667e:	e7a9      	b.n	165d4 <__aeabi_fsub+0x160>
   16680:	000c      	movs	r4, r1
   16682:	e73d      	b.n	16500 <__aeabi_fsub+0x8c>
   16684:	2b00      	cmp	r3, #0
   16686:	d058      	beq.n	1673a <__aeabi_fsub+0x2c6>
   16688:	43d2      	mvns	r2, r2
   1668a:	2a00      	cmp	r2, #0
   1668c:	d0ee      	beq.n	1666c <__aeabi_fsub+0x1f8>
   1668e:	28ff      	cmp	r0, #255	; 0xff
   16690:	d1e1      	bne.n	16656 <__aeabi_fsub+0x1e2>
   16692:	0033      	movs	r3, r6
   16694:	24ff      	movs	r4, #255	; 0xff
   16696:	000d      	movs	r5, r1
   16698:	e732      	b.n	16500 <__aeabi_fsub+0x8c>
   1669a:	29ff      	cmp	r1, #255	; 0xff
   1669c:	d010      	beq.n	166c0 <__aeabi_fsub+0x24c>
   1669e:	0001      	movs	r1, r0
   166a0:	e778      	b.n	16594 <__aeabi_fsub+0x120>
   166a2:	2b00      	cmp	r3, #0
   166a4:	d06e      	beq.n	16784 <__aeabi_fsub+0x310>
   166a6:	24ff      	movs	r4, #255	; 0xff
   166a8:	2e00      	cmp	r6, #0
   166aa:	d100      	bne.n	166ae <__aeabi_fsub+0x23a>
   166ac:	e728      	b.n	16500 <__aeabi_fsub+0x8c>
   166ae:	2280      	movs	r2, #128	; 0x80
   166b0:	4651      	mov	r1, sl
   166b2:	03d2      	lsls	r2, r2, #15
   166b4:	4211      	tst	r1, r2
   166b6:	d003      	beq.n	166c0 <__aeabi_fsub+0x24c>
   166b8:	4661      	mov	r1, ip
   166ba:	4211      	tst	r1, r2
   166bc:	d100      	bne.n	166c0 <__aeabi_fsub+0x24c>
   166be:	0033      	movs	r3, r6
   166c0:	24ff      	movs	r4, #255	; 0xff
   166c2:	e71d      	b.n	16500 <__aeabi_fsub+0x8c>
   166c4:	24ff      	movs	r4, #255	; 0xff
   166c6:	2300      	movs	r3, #0
   166c8:	e72c      	b.n	16524 <__aeabi_fsub+0xb0>
   166ca:	2c00      	cmp	r4, #0
   166cc:	d1e9      	bne.n	166a2 <__aeabi_fsub+0x22e>
   166ce:	2b00      	cmp	r3, #0
   166d0:	d063      	beq.n	1679a <__aeabi_fsub+0x326>
   166d2:	2e00      	cmp	r6, #0
   166d4:	d100      	bne.n	166d8 <__aeabi_fsub+0x264>
   166d6:	e713      	b.n	16500 <__aeabi_fsub+0x8c>
   166d8:	199b      	adds	r3, r3, r6
   166da:	015a      	lsls	r2, r3, #5
   166dc:	d400      	bmi.n	166e0 <__aeabi_fsub+0x26c>
   166de:	e73e      	b.n	1655e <__aeabi_fsub+0xea>
   166e0:	4a31      	ldr	r2, [pc, #196]	; (167a8 <__aeabi_fsub+0x334>)
   166e2:	000c      	movs	r4, r1
   166e4:	4013      	ands	r3, r2
   166e6:	e70b      	b.n	16500 <__aeabi_fsub+0x8c>
   166e8:	2c00      	cmp	r4, #0
   166ea:	d11e      	bne.n	1672a <__aeabi_fsub+0x2b6>
   166ec:	2b00      	cmp	r3, #0
   166ee:	d12f      	bne.n	16750 <__aeabi_fsub+0x2dc>
   166f0:	2e00      	cmp	r6, #0
   166f2:	d04f      	beq.n	16794 <__aeabi_fsub+0x320>
   166f4:	0033      	movs	r3, r6
   166f6:	000d      	movs	r5, r1
   166f8:	e702      	b.n	16500 <__aeabi_fsub+0x8c>
   166fa:	2601      	movs	r6, #1
   166fc:	e755      	b.n	165aa <__aeabi_fsub+0x136>
   166fe:	2c00      	cmp	r4, #0
   16700:	d11f      	bne.n	16742 <__aeabi_fsub+0x2ce>
   16702:	2b00      	cmp	r3, #0
   16704:	d043      	beq.n	1678e <__aeabi_fsub+0x31a>
   16706:	43c9      	mvns	r1, r1
   16708:	2900      	cmp	r1, #0
   1670a:	d00b      	beq.n	16724 <__aeabi_fsub+0x2b0>
   1670c:	28ff      	cmp	r0, #255	; 0xff
   1670e:	d039      	beq.n	16784 <__aeabi_fsub+0x310>
   16710:	291b      	cmp	r1, #27
   16712:	dc44      	bgt.n	1679e <__aeabi_fsub+0x32a>
   16714:	001c      	movs	r4, r3
   16716:	2720      	movs	r7, #32
   16718:	40cc      	lsrs	r4, r1
   1671a:	1a79      	subs	r1, r7, r1
   1671c:	408b      	lsls	r3, r1
   1671e:	1e59      	subs	r1, r3, #1
   16720:	418b      	sbcs	r3, r1
   16722:	4323      	orrs	r3, r4
   16724:	199b      	adds	r3, r3, r6
   16726:	0004      	movs	r4, r0
   16728:	e740      	b.n	165ac <__aeabi_fsub+0x138>
   1672a:	2b00      	cmp	r3, #0
   1672c:	d11a      	bne.n	16764 <__aeabi_fsub+0x2f0>
   1672e:	2e00      	cmp	r6, #0
   16730:	d124      	bne.n	1677c <__aeabi_fsub+0x308>
   16732:	2780      	movs	r7, #128	; 0x80
   16734:	2200      	movs	r2, #0
   16736:	03ff      	lsls	r7, r7, #15
   16738:	e71b      	b.n	16572 <__aeabi_fsub+0xfe>
   1673a:	0033      	movs	r3, r6
   1673c:	0004      	movs	r4, r0
   1673e:	000d      	movs	r5, r1
   16740:	e6de      	b.n	16500 <__aeabi_fsub+0x8c>
   16742:	28ff      	cmp	r0, #255	; 0xff
   16744:	d01e      	beq.n	16784 <__aeabi_fsub+0x310>
   16746:	2480      	movs	r4, #128	; 0x80
   16748:	04e4      	lsls	r4, r4, #19
   1674a:	4249      	negs	r1, r1
   1674c:	4323      	orrs	r3, r4
   1674e:	e7df      	b.n	16710 <__aeabi_fsub+0x29c>
   16750:	2e00      	cmp	r6, #0
   16752:	d100      	bne.n	16756 <__aeabi_fsub+0x2e2>
   16754:	e6d4      	b.n	16500 <__aeabi_fsub+0x8c>
   16756:	1b9f      	subs	r7, r3, r6
   16758:	017a      	lsls	r2, r7, #5
   1675a:	d400      	bmi.n	1675e <__aeabi_fsub+0x2ea>
   1675c:	e737      	b.n	165ce <__aeabi_fsub+0x15a>
   1675e:	1af3      	subs	r3, r6, r3
   16760:	000d      	movs	r5, r1
   16762:	e6cd      	b.n	16500 <__aeabi_fsub+0x8c>
   16764:	24ff      	movs	r4, #255	; 0xff
   16766:	2e00      	cmp	r6, #0
   16768:	d100      	bne.n	1676c <__aeabi_fsub+0x2f8>
   1676a:	e6c9      	b.n	16500 <__aeabi_fsub+0x8c>
   1676c:	2280      	movs	r2, #128	; 0x80
   1676e:	4650      	mov	r0, sl
   16770:	03d2      	lsls	r2, r2, #15
   16772:	4210      	tst	r0, r2
   16774:	d0a4      	beq.n	166c0 <__aeabi_fsub+0x24c>
   16776:	4660      	mov	r0, ip
   16778:	4210      	tst	r0, r2
   1677a:	d1a1      	bne.n	166c0 <__aeabi_fsub+0x24c>
   1677c:	0033      	movs	r3, r6
   1677e:	000d      	movs	r5, r1
   16780:	24ff      	movs	r4, #255	; 0xff
   16782:	e6bd      	b.n	16500 <__aeabi_fsub+0x8c>
   16784:	0033      	movs	r3, r6
   16786:	24ff      	movs	r4, #255	; 0xff
   16788:	e6ba      	b.n	16500 <__aeabi_fsub+0x8c>
   1678a:	2301      	movs	r3, #1
   1678c:	e76e      	b.n	1666c <__aeabi_fsub+0x1f8>
   1678e:	0033      	movs	r3, r6
   16790:	0004      	movs	r4, r0
   16792:	e6b5      	b.n	16500 <__aeabi_fsub+0x8c>
   16794:	2700      	movs	r7, #0
   16796:	2200      	movs	r2, #0
   16798:	e71c      	b.n	165d4 <__aeabi_fsub+0x160>
   1679a:	0033      	movs	r3, r6
   1679c:	e6b0      	b.n	16500 <__aeabi_fsub+0x8c>
   1679e:	2301      	movs	r3, #1
   167a0:	e7c0      	b.n	16724 <__aeabi_fsub+0x2b0>
   167a2:	46c0      	nop			; (mov r8, r8)
   167a4:	7dffffff 	.word	0x7dffffff
   167a8:	fbffffff 	.word	0xfbffffff

000167ac <__aeabi_f2iz>:
   167ac:	0241      	lsls	r1, r0, #9
   167ae:	0043      	lsls	r3, r0, #1
   167b0:	0fc2      	lsrs	r2, r0, #31
   167b2:	0a49      	lsrs	r1, r1, #9
   167b4:	0e1b      	lsrs	r3, r3, #24
   167b6:	2000      	movs	r0, #0
   167b8:	2b7e      	cmp	r3, #126	; 0x7e
   167ba:	dd0d      	ble.n	167d8 <__aeabi_f2iz+0x2c>
   167bc:	2b9d      	cmp	r3, #157	; 0x9d
   167be:	dc0c      	bgt.n	167da <__aeabi_f2iz+0x2e>
   167c0:	2080      	movs	r0, #128	; 0x80
   167c2:	0400      	lsls	r0, r0, #16
   167c4:	4301      	orrs	r1, r0
   167c6:	2b95      	cmp	r3, #149	; 0x95
   167c8:	dc0a      	bgt.n	167e0 <__aeabi_f2iz+0x34>
   167ca:	2096      	movs	r0, #150	; 0x96
   167cc:	1ac3      	subs	r3, r0, r3
   167ce:	40d9      	lsrs	r1, r3
   167d0:	4248      	negs	r0, r1
   167d2:	2a00      	cmp	r2, #0
   167d4:	d100      	bne.n	167d8 <__aeabi_f2iz+0x2c>
   167d6:	0008      	movs	r0, r1
   167d8:	4770      	bx	lr
   167da:	4b03      	ldr	r3, [pc, #12]	; (167e8 <__aeabi_f2iz+0x3c>)
   167dc:	18d0      	adds	r0, r2, r3
   167de:	e7fb      	b.n	167d8 <__aeabi_f2iz+0x2c>
   167e0:	3b96      	subs	r3, #150	; 0x96
   167e2:	4099      	lsls	r1, r3
   167e4:	e7f4      	b.n	167d0 <__aeabi_f2iz+0x24>
   167e6:	46c0      	nop			; (mov r8, r8)
   167e8:	7fffffff 	.word	0x7fffffff

000167ec <__aeabi_i2f>:
   167ec:	b570      	push	{r4, r5, r6, lr}
   167ee:	2800      	cmp	r0, #0
   167f0:	d030      	beq.n	16854 <__aeabi_i2f+0x68>
   167f2:	17c3      	asrs	r3, r0, #31
   167f4:	18c4      	adds	r4, r0, r3
   167f6:	405c      	eors	r4, r3
   167f8:	0fc5      	lsrs	r5, r0, #31
   167fa:	0020      	movs	r0, r4
   167fc:	f001 fec0 	bl	18580 <__clzsi2>
   16800:	239e      	movs	r3, #158	; 0x9e
   16802:	1a1b      	subs	r3, r3, r0
   16804:	2b96      	cmp	r3, #150	; 0x96
   16806:	dc0d      	bgt.n	16824 <__aeabi_i2f+0x38>
   16808:	2296      	movs	r2, #150	; 0x96
   1680a:	1ad2      	subs	r2, r2, r3
   1680c:	4094      	lsls	r4, r2
   1680e:	002a      	movs	r2, r5
   16810:	0264      	lsls	r4, r4, #9
   16812:	0a64      	lsrs	r4, r4, #9
   16814:	b2db      	uxtb	r3, r3
   16816:	0264      	lsls	r4, r4, #9
   16818:	05db      	lsls	r3, r3, #23
   1681a:	0a60      	lsrs	r0, r4, #9
   1681c:	07d2      	lsls	r2, r2, #31
   1681e:	4318      	orrs	r0, r3
   16820:	4310      	orrs	r0, r2
   16822:	bd70      	pop	{r4, r5, r6, pc}
   16824:	2b99      	cmp	r3, #153	; 0x99
   16826:	dc19      	bgt.n	1685c <__aeabi_i2f+0x70>
   16828:	2299      	movs	r2, #153	; 0x99
   1682a:	1ad2      	subs	r2, r2, r3
   1682c:	2a00      	cmp	r2, #0
   1682e:	dd29      	ble.n	16884 <__aeabi_i2f+0x98>
   16830:	4094      	lsls	r4, r2
   16832:	0022      	movs	r2, r4
   16834:	4c14      	ldr	r4, [pc, #80]	; (16888 <__aeabi_i2f+0x9c>)
   16836:	4014      	ands	r4, r2
   16838:	0751      	lsls	r1, r2, #29
   1683a:	d004      	beq.n	16846 <__aeabi_i2f+0x5a>
   1683c:	210f      	movs	r1, #15
   1683e:	400a      	ands	r2, r1
   16840:	2a04      	cmp	r2, #4
   16842:	d000      	beq.n	16846 <__aeabi_i2f+0x5a>
   16844:	3404      	adds	r4, #4
   16846:	0162      	lsls	r2, r4, #5
   16848:	d413      	bmi.n	16872 <__aeabi_i2f+0x86>
   1684a:	01a4      	lsls	r4, r4, #6
   1684c:	0a64      	lsrs	r4, r4, #9
   1684e:	b2db      	uxtb	r3, r3
   16850:	002a      	movs	r2, r5
   16852:	e7e0      	b.n	16816 <__aeabi_i2f+0x2a>
   16854:	2200      	movs	r2, #0
   16856:	2300      	movs	r3, #0
   16858:	2400      	movs	r4, #0
   1685a:	e7dc      	b.n	16816 <__aeabi_i2f+0x2a>
   1685c:	2205      	movs	r2, #5
   1685e:	0021      	movs	r1, r4
   16860:	1a12      	subs	r2, r2, r0
   16862:	40d1      	lsrs	r1, r2
   16864:	22b9      	movs	r2, #185	; 0xb9
   16866:	1ad2      	subs	r2, r2, r3
   16868:	4094      	lsls	r4, r2
   1686a:	1e62      	subs	r2, r4, #1
   1686c:	4194      	sbcs	r4, r2
   1686e:	430c      	orrs	r4, r1
   16870:	e7da      	b.n	16828 <__aeabi_i2f+0x3c>
   16872:	4b05      	ldr	r3, [pc, #20]	; (16888 <__aeabi_i2f+0x9c>)
   16874:	002a      	movs	r2, r5
   16876:	401c      	ands	r4, r3
   16878:	239f      	movs	r3, #159	; 0x9f
   1687a:	01a4      	lsls	r4, r4, #6
   1687c:	1a1b      	subs	r3, r3, r0
   1687e:	0a64      	lsrs	r4, r4, #9
   16880:	b2db      	uxtb	r3, r3
   16882:	e7c8      	b.n	16816 <__aeabi_i2f+0x2a>
   16884:	0022      	movs	r2, r4
   16886:	e7d5      	b.n	16834 <__aeabi_i2f+0x48>
   16888:	fbffffff 	.word	0xfbffffff

0001688c <__aeabi_ui2f>:
   1688c:	b510      	push	{r4, lr}
   1688e:	1e04      	subs	r4, r0, #0
   16890:	d027      	beq.n	168e2 <__aeabi_ui2f+0x56>
   16892:	f001 fe75 	bl	18580 <__clzsi2>
   16896:	239e      	movs	r3, #158	; 0x9e
   16898:	1a1b      	subs	r3, r3, r0
   1689a:	2b96      	cmp	r3, #150	; 0x96
   1689c:	dc0a      	bgt.n	168b4 <__aeabi_ui2f+0x28>
   1689e:	2296      	movs	r2, #150	; 0x96
   168a0:	1ad2      	subs	r2, r2, r3
   168a2:	4094      	lsls	r4, r2
   168a4:	0264      	lsls	r4, r4, #9
   168a6:	0a64      	lsrs	r4, r4, #9
   168a8:	b2db      	uxtb	r3, r3
   168aa:	0264      	lsls	r4, r4, #9
   168ac:	05db      	lsls	r3, r3, #23
   168ae:	0a60      	lsrs	r0, r4, #9
   168b0:	4318      	orrs	r0, r3
   168b2:	bd10      	pop	{r4, pc}
   168b4:	2b99      	cmp	r3, #153	; 0x99
   168b6:	dc17      	bgt.n	168e8 <__aeabi_ui2f+0x5c>
   168b8:	2299      	movs	r2, #153	; 0x99
   168ba:	1ad2      	subs	r2, r2, r3
   168bc:	2a00      	cmp	r2, #0
   168be:	dd27      	ble.n	16910 <__aeabi_ui2f+0x84>
   168c0:	4094      	lsls	r4, r2
   168c2:	0022      	movs	r2, r4
   168c4:	4c13      	ldr	r4, [pc, #76]	; (16914 <__aeabi_ui2f+0x88>)
   168c6:	4014      	ands	r4, r2
   168c8:	0751      	lsls	r1, r2, #29
   168ca:	d004      	beq.n	168d6 <__aeabi_ui2f+0x4a>
   168cc:	210f      	movs	r1, #15
   168ce:	400a      	ands	r2, r1
   168d0:	2a04      	cmp	r2, #4
   168d2:	d000      	beq.n	168d6 <__aeabi_ui2f+0x4a>
   168d4:	3404      	adds	r4, #4
   168d6:	0162      	lsls	r2, r4, #5
   168d8:	d412      	bmi.n	16900 <__aeabi_ui2f+0x74>
   168da:	01a4      	lsls	r4, r4, #6
   168dc:	0a64      	lsrs	r4, r4, #9
   168de:	b2db      	uxtb	r3, r3
   168e0:	e7e3      	b.n	168aa <__aeabi_ui2f+0x1e>
   168e2:	2300      	movs	r3, #0
   168e4:	2400      	movs	r4, #0
   168e6:	e7e0      	b.n	168aa <__aeabi_ui2f+0x1e>
   168e8:	22b9      	movs	r2, #185	; 0xb9
   168ea:	0021      	movs	r1, r4
   168ec:	1ad2      	subs	r2, r2, r3
   168ee:	4091      	lsls	r1, r2
   168f0:	000a      	movs	r2, r1
   168f2:	1e51      	subs	r1, r2, #1
   168f4:	418a      	sbcs	r2, r1
   168f6:	2105      	movs	r1, #5
   168f8:	1a09      	subs	r1, r1, r0
   168fa:	40cc      	lsrs	r4, r1
   168fc:	4314      	orrs	r4, r2
   168fe:	e7db      	b.n	168b8 <__aeabi_ui2f+0x2c>
   16900:	4b04      	ldr	r3, [pc, #16]	; (16914 <__aeabi_ui2f+0x88>)
   16902:	401c      	ands	r4, r3
   16904:	239f      	movs	r3, #159	; 0x9f
   16906:	01a4      	lsls	r4, r4, #6
   16908:	1a1b      	subs	r3, r3, r0
   1690a:	0a64      	lsrs	r4, r4, #9
   1690c:	b2db      	uxtb	r3, r3
   1690e:	e7cc      	b.n	168aa <__aeabi_ui2f+0x1e>
   16910:	0022      	movs	r2, r4
   16912:	e7d7      	b.n	168c4 <__aeabi_ui2f+0x38>
   16914:	fbffffff 	.word	0xfbffffff

00016918 <__aeabi_dadd>:
   16918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1691a:	4645      	mov	r5, r8
   1691c:	46de      	mov	lr, fp
   1691e:	4657      	mov	r7, sl
   16920:	464e      	mov	r6, r9
   16922:	030c      	lsls	r4, r1, #12
   16924:	b5e0      	push	{r5, r6, r7, lr}
   16926:	004e      	lsls	r6, r1, #1
   16928:	0fc9      	lsrs	r1, r1, #31
   1692a:	4688      	mov	r8, r1
   1692c:	000d      	movs	r5, r1
   1692e:	0a61      	lsrs	r1, r4, #9
   16930:	0f44      	lsrs	r4, r0, #29
   16932:	430c      	orrs	r4, r1
   16934:	00c7      	lsls	r7, r0, #3
   16936:	0319      	lsls	r1, r3, #12
   16938:	0058      	lsls	r0, r3, #1
   1693a:	0fdb      	lsrs	r3, r3, #31
   1693c:	469b      	mov	fp, r3
   1693e:	0a4b      	lsrs	r3, r1, #9
   16940:	0f51      	lsrs	r1, r2, #29
   16942:	430b      	orrs	r3, r1
   16944:	0d76      	lsrs	r6, r6, #21
   16946:	0d40      	lsrs	r0, r0, #21
   16948:	0019      	movs	r1, r3
   1694a:	00d2      	lsls	r2, r2, #3
   1694c:	45d8      	cmp	r8, fp
   1694e:	d100      	bne.n	16952 <__aeabi_dadd+0x3a>
   16950:	e0ae      	b.n	16ab0 <__aeabi_dadd+0x198>
   16952:	1a35      	subs	r5, r6, r0
   16954:	2d00      	cmp	r5, #0
   16956:	dc00      	bgt.n	1695a <__aeabi_dadd+0x42>
   16958:	e0f6      	b.n	16b48 <__aeabi_dadd+0x230>
   1695a:	2800      	cmp	r0, #0
   1695c:	d10f      	bne.n	1697e <__aeabi_dadd+0x66>
   1695e:	4313      	orrs	r3, r2
   16960:	d100      	bne.n	16964 <__aeabi_dadd+0x4c>
   16962:	e0db      	b.n	16b1c <__aeabi_dadd+0x204>
   16964:	1e6b      	subs	r3, r5, #1
   16966:	2b00      	cmp	r3, #0
   16968:	d000      	beq.n	1696c <__aeabi_dadd+0x54>
   1696a:	e137      	b.n	16bdc <__aeabi_dadd+0x2c4>
   1696c:	1aba      	subs	r2, r7, r2
   1696e:	4297      	cmp	r7, r2
   16970:	41bf      	sbcs	r7, r7
   16972:	1a64      	subs	r4, r4, r1
   16974:	427f      	negs	r7, r7
   16976:	1be4      	subs	r4, r4, r7
   16978:	2601      	movs	r6, #1
   1697a:	0017      	movs	r7, r2
   1697c:	e024      	b.n	169c8 <__aeabi_dadd+0xb0>
   1697e:	4bc6      	ldr	r3, [pc, #792]	; (16c98 <__aeabi_dadd+0x380>)
   16980:	429e      	cmp	r6, r3
   16982:	d04d      	beq.n	16a20 <__aeabi_dadd+0x108>
   16984:	2380      	movs	r3, #128	; 0x80
   16986:	041b      	lsls	r3, r3, #16
   16988:	4319      	orrs	r1, r3
   1698a:	2d38      	cmp	r5, #56	; 0x38
   1698c:	dd00      	ble.n	16990 <__aeabi_dadd+0x78>
   1698e:	e107      	b.n	16ba0 <__aeabi_dadd+0x288>
   16990:	2d1f      	cmp	r5, #31
   16992:	dd00      	ble.n	16996 <__aeabi_dadd+0x7e>
   16994:	e138      	b.n	16c08 <__aeabi_dadd+0x2f0>
   16996:	2020      	movs	r0, #32
   16998:	1b43      	subs	r3, r0, r5
   1699a:	469a      	mov	sl, r3
   1699c:	000b      	movs	r3, r1
   1699e:	4650      	mov	r0, sl
   169a0:	4083      	lsls	r3, r0
   169a2:	4699      	mov	r9, r3
   169a4:	0013      	movs	r3, r2
   169a6:	4648      	mov	r0, r9
   169a8:	40eb      	lsrs	r3, r5
   169aa:	4318      	orrs	r0, r3
   169ac:	0003      	movs	r3, r0
   169ae:	4650      	mov	r0, sl
   169b0:	4082      	lsls	r2, r0
   169b2:	1e50      	subs	r0, r2, #1
   169b4:	4182      	sbcs	r2, r0
   169b6:	40e9      	lsrs	r1, r5
   169b8:	431a      	orrs	r2, r3
   169ba:	1aba      	subs	r2, r7, r2
   169bc:	1a61      	subs	r1, r4, r1
   169be:	4297      	cmp	r7, r2
   169c0:	41a4      	sbcs	r4, r4
   169c2:	0017      	movs	r7, r2
   169c4:	4264      	negs	r4, r4
   169c6:	1b0c      	subs	r4, r1, r4
   169c8:	0223      	lsls	r3, r4, #8
   169ca:	d562      	bpl.n	16a92 <__aeabi_dadd+0x17a>
   169cc:	0264      	lsls	r4, r4, #9
   169ce:	0a65      	lsrs	r5, r4, #9
   169d0:	2d00      	cmp	r5, #0
   169d2:	d100      	bne.n	169d6 <__aeabi_dadd+0xbe>
   169d4:	e0df      	b.n	16b96 <__aeabi_dadd+0x27e>
   169d6:	0028      	movs	r0, r5
   169d8:	f001 fdd2 	bl	18580 <__clzsi2>
   169dc:	0003      	movs	r3, r0
   169de:	3b08      	subs	r3, #8
   169e0:	2b1f      	cmp	r3, #31
   169e2:	dd00      	ble.n	169e6 <__aeabi_dadd+0xce>
   169e4:	e0d2      	b.n	16b8c <__aeabi_dadd+0x274>
   169e6:	2220      	movs	r2, #32
   169e8:	003c      	movs	r4, r7
   169ea:	1ad2      	subs	r2, r2, r3
   169ec:	409d      	lsls	r5, r3
   169ee:	40d4      	lsrs	r4, r2
   169f0:	409f      	lsls	r7, r3
   169f2:	4325      	orrs	r5, r4
   169f4:	429e      	cmp	r6, r3
   169f6:	dd00      	ble.n	169fa <__aeabi_dadd+0xe2>
   169f8:	e0c4      	b.n	16b84 <__aeabi_dadd+0x26c>
   169fa:	1b9e      	subs	r6, r3, r6
   169fc:	1c73      	adds	r3, r6, #1
   169fe:	2b1f      	cmp	r3, #31
   16a00:	dd00      	ble.n	16a04 <__aeabi_dadd+0xec>
   16a02:	e0f1      	b.n	16be8 <__aeabi_dadd+0x2d0>
   16a04:	2220      	movs	r2, #32
   16a06:	0038      	movs	r0, r7
   16a08:	0029      	movs	r1, r5
   16a0a:	1ad2      	subs	r2, r2, r3
   16a0c:	40d8      	lsrs	r0, r3
   16a0e:	4091      	lsls	r1, r2
   16a10:	4097      	lsls	r7, r2
   16a12:	002c      	movs	r4, r5
   16a14:	4301      	orrs	r1, r0
   16a16:	1e78      	subs	r0, r7, #1
   16a18:	4187      	sbcs	r7, r0
   16a1a:	40dc      	lsrs	r4, r3
   16a1c:	2600      	movs	r6, #0
   16a1e:	430f      	orrs	r7, r1
   16a20:	077b      	lsls	r3, r7, #29
   16a22:	d009      	beq.n	16a38 <__aeabi_dadd+0x120>
   16a24:	230f      	movs	r3, #15
   16a26:	403b      	ands	r3, r7
   16a28:	2b04      	cmp	r3, #4
   16a2a:	d005      	beq.n	16a38 <__aeabi_dadd+0x120>
   16a2c:	1d3b      	adds	r3, r7, #4
   16a2e:	42bb      	cmp	r3, r7
   16a30:	41bf      	sbcs	r7, r7
   16a32:	427f      	negs	r7, r7
   16a34:	19e4      	adds	r4, r4, r7
   16a36:	001f      	movs	r7, r3
   16a38:	0223      	lsls	r3, r4, #8
   16a3a:	d52c      	bpl.n	16a96 <__aeabi_dadd+0x17e>
   16a3c:	4b96      	ldr	r3, [pc, #600]	; (16c98 <__aeabi_dadd+0x380>)
   16a3e:	3601      	adds	r6, #1
   16a40:	429e      	cmp	r6, r3
   16a42:	d100      	bne.n	16a46 <__aeabi_dadd+0x12e>
   16a44:	e09a      	b.n	16b7c <__aeabi_dadd+0x264>
   16a46:	4645      	mov	r5, r8
   16a48:	4b94      	ldr	r3, [pc, #592]	; (16c9c <__aeabi_dadd+0x384>)
   16a4a:	08ff      	lsrs	r7, r7, #3
   16a4c:	401c      	ands	r4, r3
   16a4e:	0760      	lsls	r0, r4, #29
   16a50:	0576      	lsls	r6, r6, #21
   16a52:	0264      	lsls	r4, r4, #9
   16a54:	4307      	orrs	r7, r0
   16a56:	0b24      	lsrs	r4, r4, #12
   16a58:	0d76      	lsrs	r6, r6, #21
   16a5a:	2100      	movs	r1, #0
   16a5c:	0324      	lsls	r4, r4, #12
   16a5e:	0b23      	lsrs	r3, r4, #12
   16a60:	0d0c      	lsrs	r4, r1, #20
   16a62:	4a8f      	ldr	r2, [pc, #572]	; (16ca0 <__aeabi_dadd+0x388>)
   16a64:	0524      	lsls	r4, r4, #20
   16a66:	431c      	orrs	r4, r3
   16a68:	4014      	ands	r4, r2
   16a6a:	0533      	lsls	r3, r6, #20
   16a6c:	4323      	orrs	r3, r4
   16a6e:	005b      	lsls	r3, r3, #1
   16a70:	07ed      	lsls	r5, r5, #31
   16a72:	085b      	lsrs	r3, r3, #1
   16a74:	432b      	orrs	r3, r5
   16a76:	0038      	movs	r0, r7
   16a78:	0019      	movs	r1, r3
   16a7a:	bc3c      	pop	{r2, r3, r4, r5}
   16a7c:	4690      	mov	r8, r2
   16a7e:	4699      	mov	r9, r3
   16a80:	46a2      	mov	sl, r4
   16a82:	46ab      	mov	fp, r5
   16a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16a86:	4664      	mov	r4, ip
   16a88:	4304      	orrs	r4, r0
   16a8a:	d100      	bne.n	16a8e <__aeabi_dadd+0x176>
   16a8c:	e211      	b.n	16eb2 <__aeabi_dadd+0x59a>
   16a8e:	0004      	movs	r4, r0
   16a90:	4667      	mov	r7, ip
   16a92:	077b      	lsls	r3, r7, #29
   16a94:	d1c6      	bne.n	16a24 <__aeabi_dadd+0x10c>
   16a96:	4645      	mov	r5, r8
   16a98:	0760      	lsls	r0, r4, #29
   16a9a:	08ff      	lsrs	r7, r7, #3
   16a9c:	4307      	orrs	r7, r0
   16a9e:	08e4      	lsrs	r4, r4, #3
   16aa0:	4b7d      	ldr	r3, [pc, #500]	; (16c98 <__aeabi_dadd+0x380>)
   16aa2:	429e      	cmp	r6, r3
   16aa4:	d030      	beq.n	16b08 <__aeabi_dadd+0x1f0>
   16aa6:	0324      	lsls	r4, r4, #12
   16aa8:	0576      	lsls	r6, r6, #21
   16aaa:	0b24      	lsrs	r4, r4, #12
   16aac:	0d76      	lsrs	r6, r6, #21
   16aae:	e7d4      	b.n	16a5a <__aeabi_dadd+0x142>
   16ab0:	1a33      	subs	r3, r6, r0
   16ab2:	469a      	mov	sl, r3
   16ab4:	2b00      	cmp	r3, #0
   16ab6:	dd78      	ble.n	16baa <__aeabi_dadd+0x292>
   16ab8:	2800      	cmp	r0, #0
   16aba:	d031      	beq.n	16b20 <__aeabi_dadd+0x208>
   16abc:	4876      	ldr	r0, [pc, #472]	; (16c98 <__aeabi_dadd+0x380>)
   16abe:	4286      	cmp	r6, r0
   16ac0:	d0ae      	beq.n	16a20 <__aeabi_dadd+0x108>
   16ac2:	2080      	movs	r0, #128	; 0x80
   16ac4:	0400      	lsls	r0, r0, #16
   16ac6:	4301      	orrs	r1, r0
   16ac8:	4653      	mov	r3, sl
   16aca:	2b38      	cmp	r3, #56	; 0x38
   16acc:	dc00      	bgt.n	16ad0 <__aeabi_dadd+0x1b8>
   16ace:	e0e9      	b.n	16ca4 <__aeabi_dadd+0x38c>
   16ad0:	430a      	orrs	r2, r1
   16ad2:	1e51      	subs	r1, r2, #1
   16ad4:	418a      	sbcs	r2, r1
   16ad6:	2100      	movs	r1, #0
   16ad8:	19d2      	adds	r2, r2, r7
   16ada:	42ba      	cmp	r2, r7
   16adc:	41bf      	sbcs	r7, r7
   16ade:	1909      	adds	r1, r1, r4
   16ae0:	427c      	negs	r4, r7
   16ae2:	0017      	movs	r7, r2
   16ae4:	190c      	adds	r4, r1, r4
   16ae6:	0223      	lsls	r3, r4, #8
   16ae8:	d5d3      	bpl.n	16a92 <__aeabi_dadd+0x17a>
   16aea:	4b6b      	ldr	r3, [pc, #428]	; (16c98 <__aeabi_dadd+0x380>)
   16aec:	3601      	adds	r6, #1
   16aee:	429e      	cmp	r6, r3
   16af0:	d100      	bne.n	16af4 <__aeabi_dadd+0x1dc>
   16af2:	e13a      	b.n	16d6a <__aeabi_dadd+0x452>
   16af4:	2001      	movs	r0, #1
   16af6:	4b69      	ldr	r3, [pc, #420]	; (16c9c <__aeabi_dadd+0x384>)
   16af8:	401c      	ands	r4, r3
   16afa:	087b      	lsrs	r3, r7, #1
   16afc:	4007      	ands	r7, r0
   16afe:	431f      	orrs	r7, r3
   16b00:	07e0      	lsls	r0, r4, #31
   16b02:	4307      	orrs	r7, r0
   16b04:	0864      	lsrs	r4, r4, #1
   16b06:	e78b      	b.n	16a20 <__aeabi_dadd+0x108>
   16b08:	0023      	movs	r3, r4
   16b0a:	433b      	orrs	r3, r7
   16b0c:	d100      	bne.n	16b10 <__aeabi_dadd+0x1f8>
   16b0e:	e1cb      	b.n	16ea8 <__aeabi_dadd+0x590>
   16b10:	2280      	movs	r2, #128	; 0x80
   16b12:	0312      	lsls	r2, r2, #12
   16b14:	4314      	orrs	r4, r2
   16b16:	0324      	lsls	r4, r4, #12
   16b18:	0b24      	lsrs	r4, r4, #12
   16b1a:	e79e      	b.n	16a5a <__aeabi_dadd+0x142>
   16b1c:	002e      	movs	r6, r5
   16b1e:	e77f      	b.n	16a20 <__aeabi_dadd+0x108>
   16b20:	0008      	movs	r0, r1
   16b22:	4310      	orrs	r0, r2
   16b24:	d100      	bne.n	16b28 <__aeabi_dadd+0x210>
   16b26:	e0b4      	b.n	16c92 <__aeabi_dadd+0x37a>
   16b28:	1e58      	subs	r0, r3, #1
   16b2a:	2800      	cmp	r0, #0
   16b2c:	d000      	beq.n	16b30 <__aeabi_dadd+0x218>
   16b2e:	e0de      	b.n	16cee <__aeabi_dadd+0x3d6>
   16b30:	18ba      	adds	r2, r7, r2
   16b32:	42ba      	cmp	r2, r7
   16b34:	419b      	sbcs	r3, r3
   16b36:	1864      	adds	r4, r4, r1
   16b38:	425b      	negs	r3, r3
   16b3a:	18e4      	adds	r4, r4, r3
   16b3c:	0017      	movs	r7, r2
   16b3e:	2601      	movs	r6, #1
   16b40:	0223      	lsls	r3, r4, #8
   16b42:	d5a6      	bpl.n	16a92 <__aeabi_dadd+0x17a>
   16b44:	2602      	movs	r6, #2
   16b46:	e7d5      	b.n	16af4 <__aeabi_dadd+0x1dc>
   16b48:	2d00      	cmp	r5, #0
   16b4a:	d16e      	bne.n	16c2a <__aeabi_dadd+0x312>
   16b4c:	1c70      	adds	r0, r6, #1
   16b4e:	0540      	lsls	r0, r0, #21
   16b50:	0d40      	lsrs	r0, r0, #21
   16b52:	2801      	cmp	r0, #1
   16b54:	dc00      	bgt.n	16b58 <__aeabi_dadd+0x240>
   16b56:	e0f9      	b.n	16d4c <__aeabi_dadd+0x434>
   16b58:	1ab8      	subs	r0, r7, r2
   16b5a:	4684      	mov	ip, r0
   16b5c:	4287      	cmp	r7, r0
   16b5e:	4180      	sbcs	r0, r0
   16b60:	1ae5      	subs	r5, r4, r3
   16b62:	4240      	negs	r0, r0
   16b64:	1a2d      	subs	r5, r5, r0
   16b66:	0228      	lsls	r0, r5, #8
   16b68:	d400      	bmi.n	16b6c <__aeabi_dadd+0x254>
   16b6a:	e089      	b.n	16c80 <__aeabi_dadd+0x368>
   16b6c:	1bd7      	subs	r7, r2, r7
   16b6e:	42ba      	cmp	r2, r7
   16b70:	4192      	sbcs	r2, r2
   16b72:	1b1c      	subs	r4, r3, r4
   16b74:	4252      	negs	r2, r2
   16b76:	1aa5      	subs	r5, r4, r2
   16b78:	46d8      	mov	r8, fp
   16b7a:	e729      	b.n	169d0 <__aeabi_dadd+0xb8>
   16b7c:	4645      	mov	r5, r8
   16b7e:	2400      	movs	r4, #0
   16b80:	2700      	movs	r7, #0
   16b82:	e76a      	b.n	16a5a <__aeabi_dadd+0x142>
   16b84:	4c45      	ldr	r4, [pc, #276]	; (16c9c <__aeabi_dadd+0x384>)
   16b86:	1af6      	subs	r6, r6, r3
   16b88:	402c      	ands	r4, r5
   16b8a:	e749      	b.n	16a20 <__aeabi_dadd+0x108>
   16b8c:	003d      	movs	r5, r7
   16b8e:	3828      	subs	r0, #40	; 0x28
   16b90:	4085      	lsls	r5, r0
   16b92:	2700      	movs	r7, #0
   16b94:	e72e      	b.n	169f4 <__aeabi_dadd+0xdc>
   16b96:	0038      	movs	r0, r7
   16b98:	f001 fcf2 	bl	18580 <__clzsi2>
   16b9c:	3020      	adds	r0, #32
   16b9e:	e71d      	b.n	169dc <__aeabi_dadd+0xc4>
   16ba0:	430a      	orrs	r2, r1
   16ba2:	1e51      	subs	r1, r2, #1
   16ba4:	418a      	sbcs	r2, r1
   16ba6:	2100      	movs	r1, #0
   16ba8:	e707      	b.n	169ba <__aeabi_dadd+0xa2>
   16baa:	2b00      	cmp	r3, #0
   16bac:	d000      	beq.n	16bb0 <__aeabi_dadd+0x298>
   16bae:	e0f3      	b.n	16d98 <__aeabi_dadd+0x480>
   16bb0:	1c70      	adds	r0, r6, #1
   16bb2:	0543      	lsls	r3, r0, #21
   16bb4:	0d5b      	lsrs	r3, r3, #21
   16bb6:	2b01      	cmp	r3, #1
   16bb8:	dc00      	bgt.n	16bbc <__aeabi_dadd+0x2a4>
   16bba:	e0ad      	b.n	16d18 <__aeabi_dadd+0x400>
   16bbc:	4b36      	ldr	r3, [pc, #216]	; (16c98 <__aeabi_dadd+0x380>)
   16bbe:	4298      	cmp	r0, r3
   16bc0:	d100      	bne.n	16bc4 <__aeabi_dadd+0x2ac>
   16bc2:	e0d1      	b.n	16d68 <__aeabi_dadd+0x450>
   16bc4:	18ba      	adds	r2, r7, r2
   16bc6:	42ba      	cmp	r2, r7
   16bc8:	41bf      	sbcs	r7, r7
   16bca:	1864      	adds	r4, r4, r1
   16bcc:	427f      	negs	r7, r7
   16bce:	19e4      	adds	r4, r4, r7
   16bd0:	07e7      	lsls	r7, r4, #31
   16bd2:	0852      	lsrs	r2, r2, #1
   16bd4:	4317      	orrs	r7, r2
   16bd6:	0864      	lsrs	r4, r4, #1
   16bd8:	0006      	movs	r6, r0
   16bda:	e721      	b.n	16a20 <__aeabi_dadd+0x108>
   16bdc:	482e      	ldr	r0, [pc, #184]	; (16c98 <__aeabi_dadd+0x380>)
   16bde:	4285      	cmp	r5, r0
   16be0:	d100      	bne.n	16be4 <__aeabi_dadd+0x2cc>
   16be2:	e093      	b.n	16d0c <__aeabi_dadd+0x3f4>
   16be4:	001d      	movs	r5, r3
   16be6:	e6d0      	b.n	1698a <__aeabi_dadd+0x72>
   16be8:	0029      	movs	r1, r5
   16bea:	3e1f      	subs	r6, #31
   16bec:	40f1      	lsrs	r1, r6
   16bee:	2b20      	cmp	r3, #32
   16bf0:	d100      	bne.n	16bf4 <__aeabi_dadd+0x2dc>
   16bf2:	e08d      	b.n	16d10 <__aeabi_dadd+0x3f8>
   16bf4:	2240      	movs	r2, #64	; 0x40
   16bf6:	1ad3      	subs	r3, r2, r3
   16bf8:	409d      	lsls	r5, r3
   16bfa:	432f      	orrs	r7, r5
   16bfc:	1e7d      	subs	r5, r7, #1
   16bfe:	41af      	sbcs	r7, r5
   16c00:	2400      	movs	r4, #0
   16c02:	430f      	orrs	r7, r1
   16c04:	2600      	movs	r6, #0
   16c06:	e744      	b.n	16a92 <__aeabi_dadd+0x17a>
   16c08:	002b      	movs	r3, r5
   16c0a:	0008      	movs	r0, r1
   16c0c:	3b20      	subs	r3, #32
   16c0e:	40d8      	lsrs	r0, r3
   16c10:	0003      	movs	r3, r0
   16c12:	2d20      	cmp	r5, #32
   16c14:	d100      	bne.n	16c18 <__aeabi_dadd+0x300>
   16c16:	e07d      	b.n	16d14 <__aeabi_dadd+0x3fc>
   16c18:	2040      	movs	r0, #64	; 0x40
   16c1a:	1b45      	subs	r5, r0, r5
   16c1c:	40a9      	lsls	r1, r5
   16c1e:	430a      	orrs	r2, r1
   16c20:	1e51      	subs	r1, r2, #1
   16c22:	418a      	sbcs	r2, r1
   16c24:	2100      	movs	r1, #0
   16c26:	431a      	orrs	r2, r3
   16c28:	e6c7      	b.n	169ba <__aeabi_dadd+0xa2>
   16c2a:	2e00      	cmp	r6, #0
   16c2c:	d050      	beq.n	16cd0 <__aeabi_dadd+0x3b8>
   16c2e:	4e1a      	ldr	r6, [pc, #104]	; (16c98 <__aeabi_dadd+0x380>)
   16c30:	42b0      	cmp	r0, r6
   16c32:	d057      	beq.n	16ce4 <__aeabi_dadd+0x3cc>
   16c34:	2680      	movs	r6, #128	; 0x80
   16c36:	426b      	negs	r3, r5
   16c38:	4699      	mov	r9, r3
   16c3a:	0436      	lsls	r6, r6, #16
   16c3c:	4334      	orrs	r4, r6
   16c3e:	464b      	mov	r3, r9
   16c40:	2b38      	cmp	r3, #56	; 0x38
   16c42:	dd00      	ble.n	16c46 <__aeabi_dadd+0x32e>
   16c44:	e0d6      	b.n	16df4 <__aeabi_dadd+0x4dc>
   16c46:	2b1f      	cmp	r3, #31
   16c48:	dd00      	ble.n	16c4c <__aeabi_dadd+0x334>
   16c4a:	e135      	b.n	16eb8 <__aeabi_dadd+0x5a0>
   16c4c:	2620      	movs	r6, #32
   16c4e:	1af5      	subs	r5, r6, r3
   16c50:	0026      	movs	r6, r4
   16c52:	40ae      	lsls	r6, r5
   16c54:	46b2      	mov	sl, r6
   16c56:	003e      	movs	r6, r7
   16c58:	40de      	lsrs	r6, r3
   16c5a:	46ac      	mov	ip, r5
   16c5c:	0035      	movs	r5, r6
   16c5e:	4656      	mov	r6, sl
   16c60:	432e      	orrs	r6, r5
   16c62:	4665      	mov	r5, ip
   16c64:	40af      	lsls	r7, r5
   16c66:	1e7d      	subs	r5, r7, #1
   16c68:	41af      	sbcs	r7, r5
   16c6a:	40dc      	lsrs	r4, r3
   16c6c:	4337      	orrs	r7, r6
   16c6e:	1bd7      	subs	r7, r2, r7
   16c70:	42ba      	cmp	r2, r7
   16c72:	4192      	sbcs	r2, r2
   16c74:	1b0c      	subs	r4, r1, r4
   16c76:	4252      	negs	r2, r2
   16c78:	1aa4      	subs	r4, r4, r2
   16c7a:	0006      	movs	r6, r0
   16c7c:	46d8      	mov	r8, fp
   16c7e:	e6a3      	b.n	169c8 <__aeabi_dadd+0xb0>
   16c80:	4664      	mov	r4, ip
   16c82:	4667      	mov	r7, ip
   16c84:	432c      	orrs	r4, r5
   16c86:	d000      	beq.n	16c8a <__aeabi_dadd+0x372>
   16c88:	e6a2      	b.n	169d0 <__aeabi_dadd+0xb8>
   16c8a:	2500      	movs	r5, #0
   16c8c:	2600      	movs	r6, #0
   16c8e:	2700      	movs	r7, #0
   16c90:	e706      	b.n	16aa0 <__aeabi_dadd+0x188>
   16c92:	001e      	movs	r6, r3
   16c94:	e6c4      	b.n	16a20 <__aeabi_dadd+0x108>
   16c96:	46c0      	nop			; (mov r8, r8)
   16c98:	000007ff 	.word	0x000007ff
   16c9c:	ff7fffff 	.word	0xff7fffff
   16ca0:	800fffff 	.word	0x800fffff
   16ca4:	2b1f      	cmp	r3, #31
   16ca6:	dc63      	bgt.n	16d70 <__aeabi_dadd+0x458>
   16ca8:	2020      	movs	r0, #32
   16caa:	1ac3      	subs	r3, r0, r3
   16cac:	0008      	movs	r0, r1
   16cae:	4098      	lsls	r0, r3
   16cb0:	469c      	mov	ip, r3
   16cb2:	4683      	mov	fp, r0
   16cb4:	4653      	mov	r3, sl
   16cb6:	0010      	movs	r0, r2
   16cb8:	40d8      	lsrs	r0, r3
   16cba:	0003      	movs	r3, r0
   16cbc:	4658      	mov	r0, fp
   16cbe:	4318      	orrs	r0, r3
   16cc0:	4663      	mov	r3, ip
   16cc2:	409a      	lsls	r2, r3
   16cc4:	1e53      	subs	r3, r2, #1
   16cc6:	419a      	sbcs	r2, r3
   16cc8:	4653      	mov	r3, sl
   16cca:	4302      	orrs	r2, r0
   16ccc:	40d9      	lsrs	r1, r3
   16cce:	e703      	b.n	16ad8 <__aeabi_dadd+0x1c0>
   16cd0:	0026      	movs	r6, r4
   16cd2:	433e      	orrs	r6, r7
   16cd4:	d006      	beq.n	16ce4 <__aeabi_dadd+0x3cc>
   16cd6:	43eb      	mvns	r3, r5
   16cd8:	4699      	mov	r9, r3
   16cda:	2b00      	cmp	r3, #0
   16cdc:	d0c7      	beq.n	16c6e <__aeabi_dadd+0x356>
   16cde:	4e94      	ldr	r6, [pc, #592]	; (16f30 <__aeabi_dadd+0x618>)
   16ce0:	42b0      	cmp	r0, r6
   16ce2:	d1ac      	bne.n	16c3e <__aeabi_dadd+0x326>
   16ce4:	000c      	movs	r4, r1
   16ce6:	0017      	movs	r7, r2
   16ce8:	0006      	movs	r6, r0
   16cea:	46d8      	mov	r8, fp
   16cec:	e698      	b.n	16a20 <__aeabi_dadd+0x108>
   16cee:	4b90      	ldr	r3, [pc, #576]	; (16f30 <__aeabi_dadd+0x618>)
   16cf0:	459a      	cmp	sl, r3
   16cf2:	d00b      	beq.n	16d0c <__aeabi_dadd+0x3f4>
   16cf4:	4682      	mov	sl, r0
   16cf6:	e6e7      	b.n	16ac8 <__aeabi_dadd+0x1b0>
   16cf8:	2800      	cmp	r0, #0
   16cfa:	d000      	beq.n	16cfe <__aeabi_dadd+0x3e6>
   16cfc:	e09e      	b.n	16e3c <__aeabi_dadd+0x524>
   16cfe:	0018      	movs	r0, r3
   16d00:	4310      	orrs	r0, r2
   16d02:	d100      	bne.n	16d06 <__aeabi_dadd+0x3ee>
   16d04:	e0e9      	b.n	16eda <__aeabi_dadd+0x5c2>
   16d06:	001c      	movs	r4, r3
   16d08:	0017      	movs	r7, r2
   16d0a:	46d8      	mov	r8, fp
   16d0c:	4e88      	ldr	r6, [pc, #544]	; (16f30 <__aeabi_dadd+0x618>)
   16d0e:	e687      	b.n	16a20 <__aeabi_dadd+0x108>
   16d10:	2500      	movs	r5, #0
   16d12:	e772      	b.n	16bfa <__aeabi_dadd+0x2e2>
   16d14:	2100      	movs	r1, #0
   16d16:	e782      	b.n	16c1e <__aeabi_dadd+0x306>
   16d18:	0023      	movs	r3, r4
   16d1a:	433b      	orrs	r3, r7
   16d1c:	2e00      	cmp	r6, #0
   16d1e:	d000      	beq.n	16d22 <__aeabi_dadd+0x40a>
   16d20:	e0ab      	b.n	16e7a <__aeabi_dadd+0x562>
   16d22:	2b00      	cmp	r3, #0
   16d24:	d100      	bne.n	16d28 <__aeabi_dadd+0x410>
   16d26:	e0e7      	b.n	16ef8 <__aeabi_dadd+0x5e0>
   16d28:	000b      	movs	r3, r1
   16d2a:	4313      	orrs	r3, r2
   16d2c:	d100      	bne.n	16d30 <__aeabi_dadd+0x418>
   16d2e:	e677      	b.n	16a20 <__aeabi_dadd+0x108>
   16d30:	18ba      	adds	r2, r7, r2
   16d32:	42ba      	cmp	r2, r7
   16d34:	41bf      	sbcs	r7, r7
   16d36:	1864      	adds	r4, r4, r1
   16d38:	427f      	negs	r7, r7
   16d3a:	19e4      	adds	r4, r4, r7
   16d3c:	0223      	lsls	r3, r4, #8
   16d3e:	d400      	bmi.n	16d42 <__aeabi_dadd+0x42a>
   16d40:	e0f2      	b.n	16f28 <__aeabi_dadd+0x610>
   16d42:	4b7c      	ldr	r3, [pc, #496]	; (16f34 <__aeabi_dadd+0x61c>)
   16d44:	0017      	movs	r7, r2
   16d46:	401c      	ands	r4, r3
   16d48:	0006      	movs	r6, r0
   16d4a:	e669      	b.n	16a20 <__aeabi_dadd+0x108>
   16d4c:	0020      	movs	r0, r4
   16d4e:	4338      	orrs	r0, r7
   16d50:	2e00      	cmp	r6, #0
   16d52:	d1d1      	bne.n	16cf8 <__aeabi_dadd+0x3e0>
   16d54:	2800      	cmp	r0, #0
   16d56:	d15b      	bne.n	16e10 <__aeabi_dadd+0x4f8>
   16d58:	001c      	movs	r4, r3
   16d5a:	4314      	orrs	r4, r2
   16d5c:	d100      	bne.n	16d60 <__aeabi_dadd+0x448>
   16d5e:	e0a8      	b.n	16eb2 <__aeabi_dadd+0x59a>
   16d60:	001c      	movs	r4, r3
   16d62:	0017      	movs	r7, r2
   16d64:	46d8      	mov	r8, fp
   16d66:	e65b      	b.n	16a20 <__aeabi_dadd+0x108>
   16d68:	0006      	movs	r6, r0
   16d6a:	2400      	movs	r4, #0
   16d6c:	2700      	movs	r7, #0
   16d6e:	e697      	b.n	16aa0 <__aeabi_dadd+0x188>
   16d70:	4650      	mov	r0, sl
   16d72:	000b      	movs	r3, r1
   16d74:	3820      	subs	r0, #32
   16d76:	40c3      	lsrs	r3, r0
   16d78:	4699      	mov	r9, r3
   16d7a:	4653      	mov	r3, sl
   16d7c:	2b20      	cmp	r3, #32
   16d7e:	d100      	bne.n	16d82 <__aeabi_dadd+0x46a>
   16d80:	e095      	b.n	16eae <__aeabi_dadd+0x596>
   16d82:	2340      	movs	r3, #64	; 0x40
   16d84:	4650      	mov	r0, sl
   16d86:	1a1b      	subs	r3, r3, r0
   16d88:	4099      	lsls	r1, r3
   16d8a:	430a      	orrs	r2, r1
   16d8c:	1e51      	subs	r1, r2, #1
   16d8e:	418a      	sbcs	r2, r1
   16d90:	464b      	mov	r3, r9
   16d92:	2100      	movs	r1, #0
   16d94:	431a      	orrs	r2, r3
   16d96:	e69f      	b.n	16ad8 <__aeabi_dadd+0x1c0>
   16d98:	2e00      	cmp	r6, #0
   16d9a:	d130      	bne.n	16dfe <__aeabi_dadd+0x4e6>
   16d9c:	0026      	movs	r6, r4
   16d9e:	433e      	orrs	r6, r7
   16da0:	d067      	beq.n	16e72 <__aeabi_dadd+0x55a>
   16da2:	43db      	mvns	r3, r3
   16da4:	469a      	mov	sl, r3
   16da6:	2b00      	cmp	r3, #0
   16da8:	d01c      	beq.n	16de4 <__aeabi_dadd+0x4cc>
   16daa:	4e61      	ldr	r6, [pc, #388]	; (16f30 <__aeabi_dadd+0x618>)
   16dac:	42b0      	cmp	r0, r6
   16dae:	d060      	beq.n	16e72 <__aeabi_dadd+0x55a>
   16db0:	4653      	mov	r3, sl
   16db2:	2b38      	cmp	r3, #56	; 0x38
   16db4:	dd00      	ble.n	16db8 <__aeabi_dadd+0x4a0>
   16db6:	e096      	b.n	16ee6 <__aeabi_dadd+0x5ce>
   16db8:	2b1f      	cmp	r3, #31
   16dba:	dd00      	ble.n	16dbe <__aeabi_dadd+0x4a6>
   16dbc:	e09f      	b.n	16efe <__aeabi_dadd+0x5e6>
   16dbe:	2620      	movs	r6, #32
   16dc0:	1af3      	subs	r3, r6, r3
   16dc2:	0026      	movs	r6, r4
   16dc4:	409e      	lsls	r6, r3
   16dc6:	469c      	mov	ip, r3
   16dc8:	46b3      	mov	fp, r6
   16dca:	4653      	mov	r3, sl
   16dcc:	003e      	movs	r6, r7
   16dce:	40de      	lsrs	r6, r3
   16dd0:	0033      	movs	r3, r6
   16dd2:	465e      	mov	r6, fp
   16dd4:	431e      	orrs	r6, r3
   16dd6:	4663      	mov	r3, ip
   16dd8:	409f      	lsls	r7, r3
   16dda:	1e7b      	subs	r3, r7, #1
   16ddc:	419f      	sbcs	r7, r3
   16dde:	4653      	mov	r3, sl
   16de0:	40dc      	lsrs	r4, r3
   16de2:	4337      	orrs	r7, r6
   16de4:	18bf      	adds	r7, r7, r2
   16de6:	4297      	cmp	r7, r2
   16de8:	4192      	sbcs	r2, r2
   16dea:	1864      	adds	r4, r4, r1
   16dec:	4252      	negs	r2, r2
   16dee:	18a4      	adds	r4, r4, r2
   16df0:	0006      	movs	r6, r0
   16df2:	e678      	b.n	16ae6 <__aeabi_dadd+0x1ce>
   16df4:	4327      	orrs	r7, r4
   16df6:	1e7c      	subs	r4, r7, #1
   16df8:	41a7      	sbcs	r7, r4
   16dfa:	2400      	movs	r4, #0
   16dfc:	e737      	b.n	16c6e <__aeabi_dadd+0x356>
   16dfe:	4e4c      	ldr	r6, [pc, #304]	; (16f30 <__aeabi_dadd+0x618>)
   16e00:	42b0      	cmp	r0, r6
   16e02:	d036      	beq.n	16e72 <__aeabi_dadd+0x55a>
   16e04:	2680      	movs	r6, #128	; 0x80
   16e06:	425b      	negs	r3, r3
   16e08:	0436      	lsls	r6, r6, #16
   16e0a:	469a      	mov	sl, r3
   16e0c:	4334      	orrs	r4, r6
   16e0e:	e7cf      	b.n	16db0 <__aeabi_dadd+0x498>
   16e10:	0018      	movs	r0, r3
   16e12:	4310      	orrs	r0, r2
   16e14:	d100      	bne.n	16e18 <__aeabi_dadd+0x500>
   16e16:	e603      	b.n	16a20 <__aeabi_dadd+0x108>
   16e18:	1ab8      	subs	r0, r7, r2
   16e1a:	4684      	mov	ip, r0
   16e1c:	4567      	cmp	r7, ip
   16e1e:	41ad      	sbcs	r5, r5
   16e20:	1ae0      	subs	r0, r4, r3
   16e22:	426d      	negs	r5, r5
   16e24:	1b40      	subs	r0, r0, r5
   16e26:	0205      	lsls	r5, r0, #8
   16e28:	d400      	bmi.n	16e2c <__aeabi_dadd+0x514>
   16e2a:	e62c      	b.n	16a86 <__aeabi_dadd+0x16e>
   16e2c:	1bd7      	subs	r7, r2, r7
   16e2e:	42ba      	cmp	r2, r7
   16e30:	4192      	sbcs	r2, r2
   16e32:	1b1c      	subs	r4, r3, r4
   16e34:	4252      	negs	r2, r2
   16e36:	1aa4      	subs	r4, r4, r2
   16e38:	46d8      	mov	r8, fp
   16e3a:	e5f1      	b.n	16a20 <__aeabi_dadd+0x108>
   16e3c:	0018      	movs	r0, r3
   16e3e:	4310      	orrs	r0, r2
   16e40:	d100      	bne.n	16e44 <__aeabi_dadd+0x52c>
   16e42:	e763      	b.n	16d0c <__aeabi_dadd+0x3f4>
   16e44:	08f8      	lsrs	r0, r7, #3
   16e46:	0767      	lsls	r7, r4, #29
   16e48:	4307      	orrs	r7, r0
   16e4a:	2080      	movs	r0, #128	; 0x80
   16e4c:	08e4      	lsrs	r4, r4, #3
   16e4e:	0300      	lsls	r0, r0, #12
   16e50:	4204      	tst	r4, r0
   16e52:	d008      	beq.n	16e66 <__aeabi_dadd+0x54e>
   16e54:	08dd      	lsrs	r5, r3, #3
   16e56:	4205      	tst	r5, r0
   16e58:	d105      	bne.n	16e66 <__aeabi_dadd+0x54e>
   16e5a:	08d2      	lsrs	r2, r2, #3
   16e5c:	0759      	lsls	r1, r3, #29
   16e5e:	4311      	orrs	r1, r2
   16e60:	000f      	movs	r7, r1
   16e62:	002c      	movs	r4, r5
   16e64:	46d8      	mov	r8, fp
   16e66:	0f7b      	lsrs	r3, r7, #29
   16e68:	00e4      	lsls	r4, r4, #3
   16e6a:	431c      	orrs	r4, r3
   16e6c:	00ff      	lsls	r7, r7, #3
   16e6e:	4e30      	ldr	r6, [pc, #192]	; (16f30 <__aeabi_dadd+0x618>)
   16e70:	e5d6      	b.n	16a20 <__aeabi_dadd+0x108>
   16e72:	000c      	movs	r4, r1
   16e74:	0017      	movs	r7, r2
   16e76:	0006      	movs	r6, r0
   16e78:	e5d2      	b.n	16a20 <__aeabi_dadd+0x108>
   16e7a:	2b00      	cmp	r3, #0
   16e7c:	d038      	beq.n	16ef0 <__aeabi_dadd+0x5d8>
   16e7e:	000b      	movs	r3, r1
   16e80:	4313      	orrs	r3, r2
   16e82:	d100      	bne.n	16e86 <__aeabi_dadd+0x56e>
   16e84:	e742      	b.n	16d0c <__aeabi_dadd+0x3f4>
   16e86:	08f8      	lsrs	r0, r7, #3
   16e88:	0767      	lsls	r7, r4, #29
   16e8a:	4307      	orrs	r7, r0
   16e8c:	2080      	movs	r0, #128	; 0x80
   16e8e:	08e4      	lsrs	r4, r4, #3
   16e90:	0300      	lsls	r0, r0, #12
   16e92:	4204      	tst	r4, r0
   16e94:	d0e7      	beq.n	16e66 <__aeabi_dadd+0x54e>
   16e96:	08cb      	lsrs	r3, r1, #3
   16e98:	4203      	tst	r3, r0
   16e9a:	d1e4      	bne.n	16e66 <__aeabi_dadd+0x54e>
   16e9c:	08d2      	lsrs	r2, r2, #3
   16e9e:	0749      	lsls	r1, r1, #29
   16ea0:	4311      	orrs	r1, r2
   16ea2:	000f      	movs	r7, r1
   16ea4:	001c      	movs	r4, r3
   16ea6:	e7de      	b.n	16e66 <__aeabi_dadd+0x54e>
   16ea8:	2700      	movs	r7, #0
   16eaa:	2400      	movs	r4, #0
   16eac:	e5d5      	b.n	16a5a <__aeabi_dadd+0x142>
   16eae:	2100      	movs	r1, #0
   16eb0:	e76b      	b.n	16d8a <__aeabi_dadd+0x472>
   16eb2:	2500      	movs	r5, #0
   16eb4:	2700      	movs	r7, #0
   16eb6:	e5f3      	b.n	16aa0 <__aeabi_dadd+0x188>
   16eb8:	464e      	mov	r6, r9
   16eba:	0025      	movs	r5, r4
   16ebc:	3e20      	subs	r6, #32
   16ebe:	40f5      	lsrs	r5, r6
   16ec0:	464b      	mov	r3, r9
   16ec2:	002e      	movs	r6, r5
   16ec4:	2b20      	cmp	r3, #32
   16ec6:	d02d      	beq.n	16f24 <__aeabi_dadd+0x60c>
   16ec8:	2540      	movs	r5, #64	; 0x40
   16eca:	1aed      	subs	r5, r5, r3
   16ecc:	40ac      	lsls	r4, r5
   16ece:	4327      	orrs	r7, r4
   16ed0:	1e7c      	subs	r4, r7, #1
   16ed2:	41a7      	sbcs	r7, r4
   16ed4:	2400      	movs	r4, #0
   16ed6:	4337      	orrs	r7, r6
   16ed8:	e6c9      	b.n	16c6e <__aeabi_dadd+0x356>
   16eda:	2480      	movs	r4, #128	; 0x80
   16edc:	2500      	movs	r5, #0
   16ede:	0324      	lsls	r4, r4, #12
   16ee0:	4e13      	ldr	r6, [pc, #76]	; (16f30 <__aeabi_dadd+0x618>)
   16ee2:	2700      	movs	r7, #0
   16ee4:	e5dc      	b.n	16aa0 <__aeabi_dadd+0x188>
   16ee6:	4327      	orrs	r7, r4
   16ee8:	1e7c      	subs	r4, r7, #1
   16eea:	41a7      	sbcs	r7, r4
   16eec:	2400      	movs	r4, #0
   16eee:	e779      	b.n	16de4 <__aeabi_dadd+0x4cc>
   16ef0:	000c      	movs	r4, r1
   16ef2:	0017      	movs	r7, r2
   16ef4:	4e0e      	ldr	r6, [pc, #56]	; (16f30 <__aeabi_dadd+0x618>)
   16ef6:	e593      	b.n	16a20 <__aeabi_dadd+0x108>
   16ef8:	000c      	movs	r4, r1
   16efa:	0017      	movs	r7, r2
   16efc:	e590      	b.n	16a20 <__aeabi_dadd+0x108>
   16efe:	4656      	mov	r6, sl
   16f00:	0023      	movs	r3, r4
   16f02:	3e20      	subs	r6, #32
   16f04:	40f3      	lsrs	r3, r6
   16f06:	4699      	mov	r9, r3
   16f08:	4653      	mov	r3, sl
   16f0a:	2b20      	cmp	r3, #32
   16f0c:	d00e      	beq.n	16f2c <__aeabi_dadd+0x614>
   16f0e:	2340      	movs	r3, #64	; 0x40
   16f10:	4656      	mov	r6, sl
   16f12:	1b9b      	subs	r3, r3, r6
   16f14:	409c      	lsls	r4, r3
   16f16:	4327      	orrs	r7, r4
   16f18:	1e7c      	subs	r4, r7, #1
   16f1a:	41a7      	sbcs	r7, r4
   16f1c:	464b      	mov	r3, r9
   16f1e:	2400      	movs	r4, #0
   16f20:	431f      	orrs	r7, r3
   16f22:	e75f      	b.n	16de4 <__aeabi_dadd+0x4cc>
   16f24:	2400      	movs	r4, #0
   16f26:	e7d2      	b.n	16ece <__aeabi_dadd+0x5b6>
   16f28:	0017      	movs	r7, r2
   16f2a:	e5b2      	b.n	16a92 <__aeabi_dadd+0x17a>
   16f2c:	2400      	movs	r4, #0
   16f2e:	e7f2      	b.n	16f16 <__aeabi_dadd+0x5fe>
   16f30:	000007ff 	.word	0x000007ff
   16f34:	ff7fffff 	.word	0xff7fffff

00016f38 <__aeabi_ddiv>:
   16f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f3a:	4657      	mov	r7, sl
   16f3c:	4645      	mov	r5, r8
   16f3e:	46de      	mov	lr, fp
   16f40:	464e      	mov	r6, r9
   16f42:	b5e0      	push	{r5, r6, r7, lr}
   16f44:	004c      	lsls	r4, r1, #1
   16f46:	030e      	lsls	r6, r1, #12
   16f48:	b087      	sub	sp, #28
   16f4a:	4683      	mov	fp, r0
   16f4c:	4692      	mov	sl, r2
   16f4e:	001d      	movs	r5, r3
   16f50:	4680      	mov	r8, r0
   16f52:	0b36      	lsrs	r6, r6, #12
   16f54:	0d64      	lsrs	r4, r4, #21
   16f56:	0fcf      	lsrs	r7, r1, #31
   16f58:	2c00      	cmp	r4, #0
   16f5a:	d04f      	beq.n	16ffc <__aeabi_ddiv+0xc4>
   16f5c:	4b6f      	ldr	r3, [pc, #444]	; (1711c <__aeabi_ddiv+0x1e4>)
   16f5e:	429c      	cmp	r4, r3
   16f60:	d035      	beq.n	16fce <__aeabi_ddiv+0x96>
   16f62:	2380      	movs	r3, #128	; 0x80
   16f64:	0f42      	lsrs	r2, r0, #29
   16f66:	041b      	lsls	r3, r3, #16
   16f68:	00f6      	lsls	r6, r6, #3
   16f6a:	4313      	orrs	r3, r2
   16f6c:	4333      	orrs	r3, r6
   16f6e:	4699      	mov	r9, r3
   16f70:	00c3      	lsls	r3, r0, #3
   16f72:	4698      	mov	r8, r3
   16f74:	4b6a      	ldr	r3, [pc, #424]	; (17120 <__aeabi_ddiv+0x1e8>)
   16f76:	2600      	movs	r6, #0
   16f78:	469c      	mov	ip, r3
   16f7a:	2300      	movs	r3, #0
   16f7c:	4464      	add	r4, ip
   16f7e:	9303      	str	r3, [sp, #12]
   16f80:	032b      	lsls	r3, r5, #12
   16f82:	0b1b      	lsrs	r3, r3, #12
   16f84:	469b      	mov	fp, r3
   16f86:	006b      	lsls	r3, r5, #1
   16f88:	0fed      	lsrs	r5, r5, #31
   16f8a:	4650      	mov	r0, sl
   16f8c:	0d5b      	lsrs	r3, r3, #21
   16f8e:	9501      	str	r5, [sp, #4]
   16f90:	d05e      	beq.n	17050 <__aeabi_ddiv+0x118>
   16f92:	4a62      	ldr	r2, [pc, #392]	; (1711c <__aeabi_ddiv+0x1e4>)
   16f94:	4293      	cmp	r3, r2
   16f96:	d053      	beq.n	17040 <__aeabi_ddiv+0x108>
   16f98:	465a      	mov	r2, fp
   16f9a:	00d1      	lsls	r1, r2, #3
   16f9c:	2280      	movs	r2, #128	; 0x80
   16f9e:	0f40      	lsrs	r0, r0, #29
   16fa0:	0412      	lsls	r2, r2, #16
   16fa2:	4302      	orrs	r2, r0
   16fa4:	430a      	orrs	r2, r1
   16fa6:	4693      	mov	fp, r2
   16fa8:	4652      	mov	r2, sl
   16faa:	00d1      	lsls	r1, r2, #3
   16fac:	4a5c      	ldr	r2, [pc, #368]	; (17120 <__aeabi_ddiv+0x1e8>)
   16fae:	4694      	mov	ip, r2
   16fb0:	2200      	movs	r2, #0
   16fb2:	4463      	add	r3, ip
   16fb4:	0038      	movs	r0, r7
   16fb6:	4068      	eors	r0, r5
   16fb8:	4684      	mov	ip, r0
   16fba:	9002      	str	r0, [sp, #8]
   16fbc:	1ae4      	subs	r4, r4, r3
   16fbe:	4316      	orrs	r6, r2
   16fc0:	2e0f      	cmp	r6, #15
   16fc2:	d900      	bls.n	16fc6 <__aeabi_ddiv+0x8e>
   16fc4:	e0b4      	b.n	17130 <__aeabi_ddiv+0x1f8>
   16fc6:	4b57      	ldr	r3, [pc, #348]	; (17124 <__aeabi_ddiv+0x1ec>)
   16fc8:	00b6      	lsls	r6, r6, #2
   16fca:	599b      	ldr	r3, [r3, r6]
   16fcc:	469f      	mov	pc, r3
   16fce:	0003      	movs	r3, r0
   16fd0:	4333      	orrs	r3, r6
   16fd2:	4699      	mov	r9, r3
   16fd4:	d16c      	bne.n	170b0 <__aeabi_ddiv+0x178>
   16fd6:	2300      	movs	r3, #0
   16fd8:	4698      	mov	r8, r3
   16fda:	3302      	adds	r3, #2
   16fdc:	2608      	movs	r6, #8
   16fde:	9303      	str	r3, [sp, #12]
   16fe0:	e7ce      	b.n	16f80 <__aeabi_ddiv+0x48>
   16fe2:	46cb      	mov	fp, r9
   16fe4:	4641      	mov	r1, r8
   16fe6:	9a03      	ldr	r2, [sp, #12]
   16fe8:	9701      	str	r7, [sp, #4]
   16fea:	2a02      	cmp	r2, #2
   16fec:	d165      	bne.n	170ba <__aeabi_ddiv+0x182>
   16fee:	9b01      	ldr	r3, [sp, #4]
   16ff0:	4c4a      	ldr	r4, [pc, #296]	; (1711c <__aeabi_ddiv+0x1e4>)
   16ff2:	469c      	mov	ip, r3
   16ff4:	2300      	movs	r3, #0
   16ff6:	2200      	movs	r2, #0
   16ff8:	4698      	mov	r8, r3
   16ffa:	e06b      	b.n	170d4 <__aeabi_ddiv+0x19c>
   16ffc:	0003      	movs	r3, r0
   16ffe:	4333      	orrs	r3, r6
   17000:	4699      	mov	r9, r3
   17002:	d04e      	beq.n	170a2 <__aeabi_ddiv+0x16a>
   17004:	2e00      	cmp	r6, #0
   17006:	d100      	bne.n	1700a <__aeabi_ddiv+0xd2>
   17008:	e1bc      	b.n	17384 <__aeabi_ddiv+0x44c>
   1700a:	0030      	movs	r0, r6
   1700c:	f001 fab8 	bl	18580 <__clzsi2>
   17010:	0003      	movs	r3, r0
   17012:	3b0b      	subs	r3, #11
   17014:	2b1c      	cmp	r3, #28
   17016:	dd00      	ble.n	1701a <__aeabi_ddiv+0xe2>
   17018:	e1ac      	b.n	17374 <__aeabi_ddiv+0x43c>
   1701a:	221d      	movs	r2, #29
   1701c:	1ad3      	subs	r3, r2, r3
   1701e:	465a      	mov	r2, fp
   17020:	0001      	movs	r1, r0
   17022:	40da      	lsrs	r2, r3
   17024:	3908      	subs	r1, #8
   17026:	408e      	lsls	r6, r1
   17028:	0013      	movs	r3, r2
   1702a:	4333      	orrs	r3, r6
   1702c:	4699      	mov	r9, r3
   1702e:	465b      	mov	r3, fp
   17030:	408b      	lsls	r3, r1
   17032:	4698      	mov	r8, r3
   17034:	2300      	movs	r3, #0
   17036:	4c3c      	ldr	r4, [pc, #240]	; (17128 <__aeabi_ddiv+0x1f0>)
   17038:	2600      	movs	r6, #0
   1703a:	1a24      	subs	r4, r4, r0
   1703c:	9303      	str	r3, [sp, #12]
   1703e:	e79f      	b.n	16f80 <__aeabi_ddiv+0x48>
   17040:	4651      	mov	r1, sl
   17042:	465a      	mov	r2, fp
   17044:	4311      	orrs	r1, r2
   17046:	d129      	bne.n	1709c <__aeabi_ddiv+0x164>
   17048:	2200      	movs	r2, #0
   1704a:	4693      	mov	fp, r2
   1704c:	3202      	adds	r2, #2
   1704e:	e7b1      	b.n	16fb4 <__aeabi_ddiv+0x7c>
   17050:	4659      	mov	r1, fp
   17052:	4301      	orrs	r1, r0
   17054:	d01e      	beq.n	17094 <__aeabi_ddiv+0x15c>
   17056:	465b      	mov	r3, fp
   17058:	2b00      	cmp	r3, #0
   1705a:	d100      	bne.n	1705e <__aeabi_ddiv+0x126>
   1705c:	e19e      	b.n	1739c <__aeabi_ddiv+0x464>
   1705e:	4658      	mov	r0, fp
   17060:	f001 fa8e 	bl	18580 <__clzsi2>
   17064:	0003      	movs	r3, r0
   17066:	3b0b      	subs	r3, #11
   17068:	2b1c      	cmp	r3, #28
   1706a:	dd00      	ble.n	1706e <__aeabi_ddiv+0x136>
   1706c:	e18f      	b.n	1738e <__aeabi_ddiv+0x456>
   1706e:	0002      	movs	r2, r0
   17070:	4659      	mov	r1, fp
   17072:	3a08      	subs	r2, #8
   17074:	4091      	lsls	r1, r2
   17076:	468b      	mov	fp, r1
   17078:	211d      	movs	r1, #29
   1707a:	1acb      	subs	r3, r1, r3
   1707c:	4651      	mov	r1, sl
   1707e:	40d9      	lsrs	r1, r3
   17080:	000b      	movs	r3, r1
   17082:	4659      	mov	r1, fp
   17084:	430b      	orrs	r3, r1
   17086:	4651      	mov	r1, sl
   17088:	469b      	mov	fp, r3
   1708a:	4091      	lsls	r1, r2
   1708c:	4b26      	ldr	r3, [pc, #152]	; (17128 <__aeabi_ddiv+0x1f0>)
   1708e:	2200      	movs	r2, #0
   17090:	1a1b      	subs	r3, r3, r0
   17092:	e78f      	b.n	16fb4 <__aeabi_ddiv+0x7c>
   17094:	2300      	movs	r3, #0
   17096:	2201      	movs	r2, #1
   17098:	469b      	mov	fp, r3
   1709a:	e78b      	b.n	16fb4 <__aeabi_ddiv+0x7c>
   1709c:	4651      	mov	r1, sl
   1709e:	2203      	movs	r2, #3
   170a0:	e788      	b.n	16fb4 <__aeabi_ddiv+0x7c>
   170a2:	2300      	movs	r3, #0
   170a4:	4698      	mov	r8, r3
   170a6:	3301      	adds	r3, #1
   170a8:	2604      	movs	r6, #4
   170aa:	2400      	movs	r4, #0
   170ac:	9303      	str	r3, [sp, #12]
   170ae:	e767      	b.n	16f80 <__aeabi_ddiv+0x48>
   170b0:	2303      	movs	r3, #3
   170b2:	46b1      	mov	r9, r6
   170b4:	9303      	str	r3, [sp, #12]
   170b6:	260c      	movs	r6, #12
   170b8:	e762      	b.n	16f80 <__aeabi_ddiv+0x48>
   170ba:	2a03      	cmp	r2, #3
   170bc:	d100      	bne.n	170c0 <__aeabi_ddiv+0x188>
   170be:	e25c      	b.n	1757a <__aeabi_ddiv+0x642>
   170c0:	9b01      	ldr	r3, [sp, #4]
   170c2:	2a01      	cmp	r2, #1
   170c4:	d000      	beq.n	170c8 <__aeabi_ddiv+0x190>
   170c6:	e1e4      	b.n	17492 <__aeabi_ddiv+0x55a>
   170c8:	4013      	ands	r3, r2
   170ca:	469c      	mov	ip, r3
   170cc:	2300      	movs	r3, #0
   170ce:	2400      	movs	r4, #0
   170d0:	2200      	movs	r2, #0
   170d2:	4698      	mov	r8, r3
   170d4:	2100      	movs	r1, #0
   170d6:	0312      	lsls	r2, r2, #12
   170d8:	0b13      	lsrs	r3, r2, #12
   170da:	0d0a      	lsrs	r2, r1, #20
   170dc:	0512      	lsls	r2, r2, #20
   170de:	431a      	orrs	r2, r3
   170e0:	0523      	lsls	r3, r4, #20
   170e2:	4c12      	ldr	r4, [pc, #72]	; (1712c <__aeabi_ddiv+0x1f4>)
   170e4:	4640      	mov	r0, r8
   170e6:	4022      	ands	r2, r4
   170e8:	4313      	orrs	r3, r2
   170ea:	4662      	mov	r2, ip
   170ec:	005b      	lsls	r3, r3, #1
   170ee:	07d2      	lsls	r2, r2, #31
   170f0:	085b      	lsrs	r3, r3, #1
   170f2:	4313      	orrs	r3, r2
   170f4:	0019      	movs	r1, r3
   170f6:	b007      	add	sp, #28
   170f8:	bc3c      	pop	{r2, r3, r4, r5}
   170fa:	4690      	mov	r8, r2
   170fc:	4699      	mov	r9, r3
   170fe:	46a2      	mov	sl, r4
   17100:	46ab      	mov	fp, r5
   17102:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17104:	2300      	movs	r3, #0
   17106:	2280      	movs	r2, #128	; 0x80
   17108:	469c      	mov	ip, r3
   1710a:	0312      	lsls	r2, r2, #12
   1710c:	4698      	mov	r8, r3
   1710e:	4c03      	ldr	r4, [pc, #12]	; (1711c <__aeabi_ddiv+0x1e4>)
   17110:	e7e0      	b.n	170d4 <__aeabi_ddiv+0x19c>
   17112:	2300      	movs	r3, #0
   17114:	4c01      	ldr	r4, [pc, #4]	; (1711c <__aeabi_ddiv+0x1e4>)
   17116:	2200      	movs	r2, #0
   17118:	4698      	mov	r8, r3
   1711a:	e7db      	b.n	170d4 <__aeabi_ddiv+0x19c>
   1711c:	000007ff 	.word	0x000007ff
   17120:	fffffc01 	.word	0xfffffc01
   17124:	0001c008 	.word	0x0001c008
   17128:	fffffc0d 	.word	0xfffffc0d
   1712c:	800fffff 	.word	0x800fffff
   17130:	45d9      	cmp	r9, fp
   17132:	d900      	bls.n	17136 <__aeabi_ddiv+0x1fe>
   17134:	e139      	b.n	173aa <__aeabi_ddiv+0x472>
   17136:	d100      	bne.n	1713a <__aeabi_ddiv+0x202>
   17138:	e134      	b.n	173a4 <__aeabi_ddiv+0x46c>
   1713a:	2300      	movs	r3, #0
   1713c:	4646      	mov	r6, r8
   1713e:	464d      	mov	r5, r9
   17140:	469a      	mov	sl, r3
   17142:	3c01      	subs	r4, #1
   17144:	465b      	mov	r3, fp
   17146:	0e0a      	lsrs	r2, r1, #24
   17148:	021b      	lsls	r3, r3, #8
   1714a:	431a      	orrs	r2, r3
   1714c:	020b      	lsls	r3, r1, #8
   1714e:	0c17      	lsrs	r7, r2, #16
   17150:	9303      	str	r3, [sp, #12]
   17152:	0413      	lsls	r3, r2, #16
   17154:	0c1b      	lsrs	r3, r3, #16
   17156:	0039      	movs	r1, r7
   17158:	0028      	movs	r0, r5
   1715a:	4690      	mov	r8, r2
   1715c:	9301      	str	r3, [sp, #4]
   1715e:	f7fe fb59 	bl	15814 <__udivsi3>
   17162:	0002      	movs	r2, r0
   17164:	9b01      	ldr	r3, [sp, #4]
   17166:	4683      	mov	fp, r0
   17168:	435a      	muls	r2, r3
   1716a:	0028      	movs	r0, r5
   1716c:	0039      	movs	r1, r7
   1716e:	4691      	mov	r9, r2
   17170:	f7fe fbd6 	bl	15920 <__aeabi_uidivmod>
   17174:	0c35      	lsrs	r5, r6, #16
   17176:	0409      	lsls	r1, r1, #16
   17178:	430d      	orrs	r5, r1
   1717a:	45a9      	cmp	r9, r5
   1717c:	d90d      	bls.n	1719a <__aeabi_ddiv+0x262>
   1717e:	465b      	mov	r3, fp
   17180:	4445      	add	r5, r8
   17182:	3b01      	subs	r3, #1
   17184:	45a8      	cmp	r8, r5
   17186:	d900      	bls.n	1718a <__aeabi_ddiv+0x252>
   17188:	e13a      	b.n	17400 <__aeabi_ddiv+0x4c8>
   1718a:	45a9      	cmp	r9, r5
   1718c:	d800      	bhi.n	17190 <__aeabi_ddiv+0x258>
   1718e:	e137      	b.n	17400 <__aeabi_ddiv+0x4c8>
   17190:	2302      	movs	r3, #2
   17192:	425b      	negs	r3, r3
   17194:	469c      	mov	ip, r3
   17196:	4445      	add	r5, r8
   17198:	44e3      	add	fp, ip
   1719a:	464b      	mov	r3, r9
   1719c:	1aeb      	subs	r3, r5, r3
   1719e:	0039      	movs	r1, r7
   171a0:	0018      	movs	r0, r3
   171a2:	9304      	str	r3, [sp, #16]
   171a4:	f7fe fb36 	bl	15814 <__udivsi3>
   171a8:	9b01      	ldr	r3, [sp, #4]
   171aa:	0005      	movs	r5, r0
   171ac:	4343      	muls	r3, r0
   171ae:	0039      	movs	r1, r7
   171b0:	9804      	ldr	r0, [sp, #16]
   171b2:	4699      	mov	r9, r3
   171b4:	f7fe fbb4 	bl	15920 <__aeabi_uidivmod>
   171b8:	0433      	lsls	r3, r6, #16
   171ba:	0409      	lsls	r1, r1, #16
   171bc:	0c1b      	lsrs	r3, r3, #16
   171be:	430b      	orrs	r3, r1
   171c0:	4599      	cmp	r9, r3
   171c2:	d909      	bls.n	171d8 <__aeabi_ddiv+0x2a0>
   171c4:	4443      	add	r3, r8
   171c6:	1e6a      	subs	r2, r5, #1
   171c8:	4598      	cmp	r8, r3
   171ca:	d900      	bls.n	171ce <__aeabi_ddiv+0x296>
   171cc:	e11a      	b.n	17404 <__aeabi_ddiv+0x4cc>
   171ce:	4599      	cmp	r9, r3
   171d0:	d800      	bhi.n	171d4 <__aeabi_ddiv+0x29c>
   171d2:	e117      	b.n	17404 <__aeabi_ddiv+0x4cc>
   171d4:	3d02      	subs	r5, #2
   171d6:	4443      	add	r3, r8
   171d8:	464a      	mov	r2, r9
   171da:	1a9b      	subs	r3, r3, r2
   171dc:	465a      	mov	r2, fp
   171de:	0412      	lsls	r2, r2, #16
   171e0:	432a      	orrs	r2, r5
   171e2:	9903      	ldr	r1, [sp, #12]
   171e4:	4693      	mov	fp, r2
   171e6:	0c10      	lsrs	r0, r2, #16
   171e8:	0c0a      	lsrs	r2, r1, #16
   171ea:	4691      	mov	r9, r2
   171ec:	0409      	lsls	r1, r1, #16
   171ee:	465a      	mov	r2, fp
   171f0:	0c09      	lsrs	r1, r1, #16
   171f2:	464e      	mov	r6, r9
   171f4:	000d      	movs	r5, r1
   171f6:	0412      	lsls	r2, r2, #16
   171f8:	0c12      	lsrs	r2, r2, #16
   171fa:	4345      	muls	r5, r0
   171fc:	9105      	str	r1, [sp, #20]
   171fe:	4351      	muls	r1, r2
   17200:	4372      	muls	r2, r6
   17202:	4370      	muls	r0, r6
   17204:	1952      	adds	r2, r2, r5
   17206:	0c0e      	lsrs	r6, r1, #16
   17208:	18b2      	adds	r2, r6, r2
   1720a:	4295      	cmp	r5, r2
   1720c:	d903      	bls.n	17216 <__aeabi_ddiv+0x2de>
   1720e:	2580      	movs	r5, #128	; 0x80
   17210:	026d      	lsls	r5, r5, #9
   17212:	46ac      	mov	ip, r5
   17214:	4460      	add	r0, ip
   17216:	0c15      	lsrs	r5, r2, #16
   17218:	0409      	lsls	r1, r1, #16
   1721a:	0412      	lsls	r2, r2, #16
   1721c:	0c09      	lsrs	r1, r1, #16
   1721e:	1828      	adds	r0, r5, r0
   17220:	1852      	adds	r2, r2, r1
   17222:	4283      	cmp	r3, r0
   17224:	d200      	bcs.n	17228 <__aeabi_ddiv+0x2f0>
   17226:	e0ce      	b.n	173c6 <__aeabi_ddiv+0x48e>
   17228:	d100      	bne.n	1722c <__aeabi_ddiv+0x2f4>
   1722a:	e0c8      	b.n	173be <__aeabi_ddiv+0x486>
   1722c:	1a1d      	subs	r5, r3, r0
   1722e:	4653      	mov	r3, sl
   17230:	1a9e      	subs	r6, r3, r2
   17232:	45b2      	cmp	sl, r6
   17234:	4192      	sbcs	r2, r2
   17236:	4252      	negs	r2, r2
   17238:	1aab      	subs	r3, r5, r2
   1723a:	469a      	mov	sl, r3
   1723c:	4598      	cmp	r8, r3
   1723e:	d100      	bne.n	17242 <__aeabi_ddiv+0x30a>
   17240:	e117      	b.n	17472 <__aeabi_ddiv+0x53a>
   17242:	0039      	movs	r1, r7
   17244:	0018      	movs	r0, r3
   17246:	f7fe fae5 	bl	15814 <__udivsi3>
   1724a:	9b01      	ldr	r3, [sp, #4]
   1724c:	0005      	movs	r5, r0
   1724e:	4343      	muls	r3, r0
   17250:	0039      	movs	r1, r7
   17252:	4650      	mov	r0, sl
   17254:	9304      	str	r3, [sp, #16]
   17256:	f7fe fb63 	bl	15920 <__aeabi_uidivmod>
   1725a:	9804      	ldr	r0, [sp, #16]
   1725c:	040b      	lsls	r3, r1, #16
   1725e:	0c31      	lsrs	r1, r6, #16
   17260:	4319      	orrs	r1, r3
   17262:	4288      	cmp	r0, r1
   17264:	d909      	bls.n	1727a <__aeabi_ddiv+0x342>
   17266:	4441      	add	r1, r8
   17268:	1e6b      	subs	r3, r5, #1
   1726a:	4588      	cmp	r8, r1
   1726c:	d900      	bls.n	17270 <__aeabi_ddiv+0x338>
   1726e:	e107      	b.n	17480 <__aeabi_ddiv+0x548>
   17270:	4288      	cmp	r0, r1
   17272:	d800      	bhi.n	17276 <__aeabi_ddiv+0x33e>
   17274:	e104      	b.n	17480 <__aeabi_ddiv+0x548>
   17276:	3d02      	subs	r5, #2
   17278:	4441      	add	r1, r8
   1727a:	9b04      	ldr	r3, [sp, #16]
   1727c:	1acb      	subs	r3, r1, r3
   1727e:	0018      	movs	r0, r3
   17280:	0039      	movs	r1, r7
   17282:	9304      	str	r3, [sp, #16]
   17284:	f7fe fac6 	bl	15814 <__udivsi3>
   17288:	9b01      	ldr	r3, [sp, #4]
   1728a:	4682      	mov	sl, r0
   1728c:	4343      	muls	r3, r0
   1728e:	0039      	movs	r1, r7
   17290:	9804      	ldr	r0, [sp, #16]
   17292:	9301      	str	r3, [sp, #4]
   17294:	f7fe fb44 	bl	15920 <__aeabi_uidivmod>
   17298:	9801      	ldr	r0, [sp, #4]
   1729a:	040b      	lsls	r3, r1, #16
   1729c:	0431      	lsls	r1, r6, #16
   1729e:	0c09      	lsrs	r1, r1, #16
   172a0:	4319      	orrs	r1, r3
   172a2:	4288      	cmp	r0, r1
   172a4:	d90d      	bls.n	172c2 <__aeabi_ddiv+0x38a>
   172a6:	4653      	mov	r3, sl
   172a8:	4441      	add	r1, r8
   172aa:	3b01      	subs	r3, #1
   172ac:	4588      	cmp	r8, r1
   172ae:	d900      	bls.n	172b2 <__aeabi_ddiv+0x37a>
   172b0:	e0e8      	b.n	17484 <__aeabi_ddiv+0x54c>
   172b2:	4288      	cmp	r0, r1
   172b4:	d800      	bhi.n	172b8 <__aeabi_ddiv+0x380>
   172b6:	e0e5      	b.n	17484 <__aeabi_ddiv+0x54c>
   172b8:	2302      	movs	r3, #2
   172ba:	425b      	negs	r3, r3
   172bc:	469c      	mov	ip, r3
   172be:	4441      	add	r1, r8
   172c0:	44e2      	add	sl, ip
   172c2:	9b01      	ldr	r3, [sp, #4]
   172c4:	042d      	lsls	r5, r5, #16
   172c6:	1ace      	subs	r6, r1, r3
   172c8:	4651      	mov	r1, sl
   172ca:	4329      	orrs	r1, r5
   172cc:	9d05      	ldr	r5, [sp, #20]
   172ce:	464f      	mov	r7, r9
   172d0:	002a      	movs	r2, r5
   172d2:	040b      	lsls	r3, r1, #16
   172d4:	0c08      	lsrs	r0, r1, #16
   172d6:	0c1b      	lsrs	r3, r3, #16
   172d8:	435a      	muls	r2, r3
   172da:	4345      	muls	r5, r0
   172dc:	437b      	muls	r3, r7
   172de:	4378      	muls	r0, r7
   172e0:	195b      	adds	r3, r3, r5
   172e2:	0c17      	lsrs	r7, r2, #16
   172e4:	18fb      	adds	r3, r7, r3
   172e6:	429d      	cmp	r5, r3
   172e8:	d903      	bls.n	172f2 <__aeabi_ddiv+0x3ba>
   172ea:	2580      	movs	r5, #128	; 0x80
   172ec:	026d      	lsls	r5, r5, #9
   172ee:	46ac      	mov	ip, r5
   172f0:	4460      	add	r0, ip
   172f2:	0c1d      	lsrs	r5, r3, #16
   172f4:	0412      	lsls	r2, r2, #16
   172f6:	041b      	lsls	r3, r3, #16
   172f8:	0c12      	lsrs	r2, r2, #16
   172fa:	1828      	adds	r0, r5, r0
   172fc:	189b      	adds	r3, r3, r2
   172fe:	4286      	cmp	r6, r0
   17300:	d200      	bcs.n	17304 <__aeabi_ddiv+0x3cc>
   17302:	e093      	b.n	1742c <__aeabi_ddiv+0x4f4>
   17304:	d100      	bne.n	17308 <__aeabi_ddiv+0x3d0>
   17306:	e08e      	b.n	17426 <__aeabi_ddiv+0x4ee>
   17308:	2301      	movs	r3, #1
   1730a:	4319      	orrs	r1, r3
   1730c:	4ba0      	ldr	r3, [pc, #640]	; (17590 <__aeabi_ddiv+0x658>)
   1730e:	18e3      	adds	r3, r4, r3
   17310:	2b00      	cmp	r3, #0
   17312:	dc00      	bgt.n	17316 <__aeabi_ddiv+0x3de>
   17314:	e099      	b.n	1744a <__aeabi_ddiv+0x512>
   17316:	074a      	lsls	r2, r1, #29
   17318:	d000      	beq.n	1731c <__aeabi_ddiv+0x3e4>
   1731a:	e09e      	b.n	1745a <__aeabi_ddiv+0x522>
   1731c:	465a      	mov	r2, fp
   1731e:	01d2      	lsls	r2, r2, #7
   17320:	d506      	bpl.n	17330 <__aeabi_ddiv+0x3f8>
   17322:	465a      	mov	r2, fp
   17324:	4b9b      	ldr	r3, [pc, #620]	; (17594 <__aeabi_ddiv+0x65c>)
   17326:	401a      	ands	r2, r3
   17328:	2380      	movs	r3, #128	; 0x80
   1732a:	4693      	mov	fp, r2
   1732c:	00db      	lsls	r3, r3, #3
   1732e:	18e3      	adds	r3, r4, r3
   17330:	4a99      	ldr	r2, [pc, #612]	; (17598 <__aeabi_ddiv+0x660>)
   17332:	4293      	cmp	r3, r2
   17334:	dd68      	ble.n	17408 <__aeabi_ddiv+0x4d0>
   17336:	2301      	movs	r3, #1
   17338:	9a02      	ldr	r2, [sp, #8]
   1733a:	4c98      	ldr	r4, [pc, #608]	; (1759c <__aeabi_ddiv+0x664>)
   1733c:	401a      	ands	r2, r3
   1733e:	2300      	movs	r3, #0
   17340:	4694      	mov	ip, r2
   17342:	4698      	mov	r8, r3
   17344:	2200      	movs	r2, #0
   17346:	e6c5      	b.n	170d4 <__aeabi_ddiv+0x19c>
   17348:	2280      	movs	r2, #128	; 0x80
   1734a:	464b      	mov	r3, r9
   1734c:	0312      	lsls	r2, r2, #12
   1734e:	4213      	tst	r3, r2
   17350:	d00a      	beq.n	17368 <__aeabi_ddiv+0x430>
   17352:	465b      	mov	r3, fp
   17354:	4213      	tst	r3, r2
   17356:	d106      	bne.n	17366 <__aeabi_ddiv+0x42e>
   17358:	431a      	orrs	r2, r3
   1735a:	0312      	lsls	r2, r2, #12
   1735c:	0b12      	lsrs	r2, r2, #12
   1735e:	46ac      	mov	ip, r5
   17360:	4688      	mov	r8, r1
   17362:	4c8e      	ldr	r4, [pc, #568]	; (1759c <__aeabi_ddiv+0x664>)
   17364:	e6b6      	b.n	170d4 <__aeabi_ddiv+0x19c>
   17366:	464b      	mov	r3, r9
   17368:	431a      	orrs	r2, r3
   1736a:	0312      	lsls	r2, r2, #12
   1736c:	0b12      	lsrs	r2, r2, #12
   1736e:	46bc      	mov	ip, r7
   17370:	4c8a      	ldr	r4, [pc, #552]	; (1759c <__aeabi_ddiv+0x664>)
   17372:	e6af      	b.n	170d4 <__aeabi_ddiv+0x19c>
   17374:	0003      	movs	r3, r0
   17376:	465a      	mov	r2, fp
   17378:	3b28      	subs	r3, #40	; 0x28
   1737a:	409a      	lsls	r2, r3
   1737c:	2300      	movs	r3, #0
   1737e:	4691      	mov	r9, r2
   17380:	4698      	mov	r8, r3
   17382:	e657      	b.n	17034 <__aeabi_ddiv+0xfc>
   17384:	4658      	mov	r0, fp
   17386:	f001 f8fb 	bl	18580 <__clzsi2>
   1738a:	3020      	adds	r0, #32
   1738c:	e640      	b.n	17010 <__aeabi_ddiv+0xd8>
   1738e:	0003      	movs	r3, r0
   17390:	4652      	mov	r2, sl
   17392:	3b28      	subs	r3, #40	; 0x28
   17394:	409a      	lsls	r2, r3
   17396:	2100      	movs	r1, #0
   17398:	4693      	mov	fp, r2
   1739a:	e677      	b.n	1708c <__aeabi_ddiv+0x154>
   1739c:	f001 f8f0 	bl	18580 <__clzsi2>
   173a0:	3020      	adds	r0, #32
   173a2:	e65f      	b.n	17064 <__aeabi_ddiv+0x12c>
   173a4:	4588      	cmp	r8, r1
   173a6:	d200      	bcs.n	173aa <__aeabi_ddiv+0x472>
   173a8:	e6c7      	b.n	1713a <__aeabi_ddiv+0x202>
   173aa:	464b      	mov	r3, r9
   173ac:	07de      	lsls	r6, r3, #31
   173ae:	085d      	lsrs	r5, r3, #1
   173b0:	4643      	mov	r3, r8
   173b2:	085b      	lsrs	r3, r3, #1
   173b4:	431e      	orrs	r6, r3
   173b6:	4643      	mov	r3, r8
   173b8:	07db      	lsls	r3, r3, #31
   173ba:	469a      	mov	sl, r3
   173bc:	e6c2      	b.n	17144 <__aeabi_ddiv+0x20c>
   173be:	2500      	movs	r5, #0
   173c0:	4592      	cmp	sl, r2
   173c2:	d300      	bcc.n	173c6 <__aeabi_ddiv+0x48e>
   173c4:	e733      	b.n	1722e <__aeabi_ddiv+0x2f6>
   173c6:	9e03      	ldr	r6, [sp, #12]
   173c8:	4659      	mov	r1, fp
   173ca:	46b4      	mov	ip, r6
   173cc:	44e2      	add	sl, ip
   173ce:	45b2      	cmp	sl, r6
   173d0:	41ad      	sbcs	r5, r5
   173d2:	426d      	negs	r5, r5
   173d4:	4445      	add	r5, r8
   173d6:	18eb      	adds	r3, r5, r3
   173d8:	3901      	subs	r1, #1
   173da:	4598      	cmp	r8, r3
   173dc:	d207      	bcs.n	173ee <__aeabi_ddiv+0x4b6>
   173de:	4298      	cmp	r0, r3
   173e0:	d900      	bls.n	173e4 <__aeabi_ddiv+0x4ac>
   173e2:	e07f      	b.n	174e4 <__aeabi_ddiv+0x5ac>
   173e4:	d100      	bne.n	173e8 <__aeabi_ddiv+0x4b0>
   173e6:	e0bc      	b.n	17562 <__aeabi_ddiv+0x62a>
   173e8:	1a1d      	subs	r5, r3, r0
   173ea:	468b      	mov	fp, r1
   173ec:	e71f      	b.n	1722e <__aeabi_ddiv+0x2f6>
   173ee:	4598      	cmp	r8, r3
   173f0:	d1fa      	bne.n	173e8 <__aeabi_ddiv+0x4b0>
   173f2:	9d03      	ldr	r5, [sp, #12]
   173f4:	4555      	cmp	r5, sl
   173f6:	d9f2      	bls.n	173de <__aeabi_ddiv+0x4a6>
   173f8:	4643      	mov	r3, r8
   173fa:	468b      	mov	fp, r1
   173fc:	1a1d      	subs	r5, r3, r0
   173fe:	e716      	b.n	1722e <__aeabi_ddiv+0x2f6>
   17400:	469b      	mov	fp, r3
   17402:	e6ca      	b.n	1719a <__aeabi_ddiv+0x262>
   17404:	0015      	movs	r5, r2
   17406:	e6e7      	b.n	171d8 <__aeabi_ddiv+0x2a0>
   17408:	465a      	mov	r2, fp
   1740a:	08c9      	lsrs	r1, r1, #3
   1740c:	0752      	lsls	r2, r2, #29
   1740e:	430a      	orrs	r2, r1
   17410:	055b      	lsls	r3, r3, #21
   17412:	4690      	mov	r8, r2
   17414:	0d5c      	lsrs	r4, r3, #21
   17416:	465a      	mov	r2, fp
   17418:	2301      	movs	r3, #1
   1741a:	9902      	ldr	r1, [sp, #8]
   1741c:	0252      	lsls	r2, r2, #9
   1741e:	4019      	ands	r1, r3
   17420:	0b12      	lsrs	r2, r2, #12
   17422:	468c      	mov	ip, r1
   17424:	e656      	b.n	170d4 <__aeabi_ddiv+0x19c>
   17426:	2b00      	cmp	r3, #0
   17428:	d100      	bne.n	1742c <__aeabi_ddiv+0x4f4>
   1742a:	e76f      	b.n	1730c <__aeabi_ddiv+0x3d4>
   1742c:	4446      	add	r6, r8
   1742e:	1e4a      	subs	r2, r1, #1
   17430:	45b0      	cmp	r8, r6
   17432:	d929      	bls.n	17488 <__aeabi_ddiv+0x550>
   17434:	0011      	movs	r1, r2
   17436:	4286      	cmp	r6, r0
   17438:	d000      	beq.n	1743c <__aeabi_ddiv+0x504>
   1743a:	e765      	b.n	17308 <__aeabi_ddiv+0x3d0>
   1743c:	9a03      	ldr	r2, [sp, #12]
   1743e:	4293      	cmp	r3, r2
   17440:	d000      	beq.n	17444 <__aeabi_ddiv+0x50c>
   17442:	e761      	b.n	17308 <__aeabi_ddiv+0x3d0>
   17444:	e762      	b.n	1730c <__aeabi_ddiv+0x3d4>
   17446:	2101      	movs	r1, #1
   17448:	4249      	negs	r1, r1
   1744a:	2001      	movs	r0, #1
   1744c:	1ac2      	subs	r2, r0, r3
   1744e:	2a38      	cmp	r2, #56	; 0x38
   17450:	dd21      	ble.n	17496 <__aeabi_ddiv+0x55e>
   17452:	9b02      	ldr	r3, [sp, #8]
   17454:	4003      	ands	r3, r0
   17456:	469c      	mov	ip, r3
   17458:	e638      	b.n	170cc <__aeabi_ddiv+0x194>
   1745a:	220f      	movs	r2, #15
   1745c:	400a      	ands	r2, r1
   1745e:	2a04      	cmp	r2, #4
   17460:	d100      	bne.n	17464 <__aeabi_ddiv+0x52c>
   17462:	e75b      	b.n	1731c <__aeabi_ddiv+0x3e4>
   17464:	000a      	movs	r2, r1
   17466:	1d11      	adds	r1, r2, #4
   17468:	4291      	cmp	r1, r2
   1746a:	4192      	sbcs	r2, r2
   1746c:	4252      	negs	r2, r2
   1746e:	4493      	add	fp, r2
   17470:	e754      	b.n	1731c <__aeabi_ddiv+0x3e4>
   17472:	4b47      	ldr	r3, [pc, #284]	; (17590 <__aeabi_ddiv+0x658>)
   17474:	18e3      	adds	r3, r4, r3
   17476:	2b00      	cmp	r3, #0
   17478:	dde5      	ble.n	17446 <__aeabi_ddiv+0x50e>
   1747a:	2201      	movs	r2, #1
   1747c:	4252      	negs	r2, r2
   1747e:	e7f2      	b.n	17466 <__aeabi_ddiv+0x52e>
   17480:	001d      	movs	r5, r3
   17482:	e6fa      	b.n	1727a <__aeabi_ddiv+0x342>
   17484:	469a      	mov	sl, r3
   17486:	e71c      	b.n	172c2 <__aeabi_ddiv+0x38a>
   17488:	42b0      	cmp	r0, r6
   1748a:	d839      	bhi.n	17500 <__aeabi_ddiv+0x5c8>
   1748c:	d06e      	beq.n	1756c <__aeabi_ddiv+0x634>
   1748e:	0011      	movs	r1, r2
   17490:	e73a      	b.n	17308 <__aeabi_ddiv+0x3d0>
   17492:	9302      	str	r3, [sp, #8]
   17494:	e73a      	b.n	1730c <__aeabi_ddiv+0x3d4>
   17496:	2a1f      	cmp	r2, #31
   17498:	dc3c      	bgt.n	17514 <__aeabi_ddiv+0x5dc>
   1749a:	2320      	movs	r3, #32
   1749c:	1a9b      	subs	r3, r3, r2
   1749e:	000c      	movs	r4, r1
   174a0:	4658      	mov	r0, fp
   174a2:	4099      	lsls	r1, r3
   174a4:	4098      	lsls	r0, r3
   174a6:	1e4b      	subs	r3, r1, #1
   174a8:	4199      	sbcs	r1, r3
   174aa:	465b      	mov	r3, fp
   174ac:	40d4      	lsrs	r4, r2
   174ae:	40d3      	lsrs	r3, r2
   174b0:	4320      	orrs	r0, r4
   174b2:	4308      	orrs	r0, r1
   174b4:	001a      	movs	r2, r3
   174b6:	0743      	lsls	r3, r0, #29
   174b8:	d009      	beq.n	174ce <__aeabi_ddiv+0x596>
   174ba:	230f      	movs	r3, #15
   174bc:	4003      	ands	r3, r0
   174be:	2b04      	cmp	r3, #4
   174c0:	d005      	beq.n	174ce <__aeabi_ddiv+0x596>
   174c2:	0001      	movs	r1, r0
   174c4:	1d08      	adds	r0, r1, #4
   174c6:	4288      	cmp	r0, r1
   174c8:	419b      	sbcs	r3, r3
   174ca:	425b      	negs	r3, r3
   174cc:	18d2      	adds	r2, r2, r3
   174ce:	0213      	lsls	r3, r2, #8
   174d0:	d53a      	bpl.n	17548 <__aeabi_ddiv+0x610>
   174d2:	2301      	movs	r3, #1
   174d4:	9a02      	ldr	r2, [sp, #8]
   174d6:	2401      	movs	r4, #1
   174d8:	401a      	ands	r2, r3
   174da:	2300      	movs	r3, #0
   174dc:	4694      	mov	ip, r2
   174de:	4698      	mov	r8, r3
   174e0:	2200      	movs	r2, #0
   174e2:	e5f7      	b.n	170d4 <__aeabi_ddiv+0x19c>
   174e4:	2102      	movs	r1, #2
   174e6:	4249      	negs	r1, r1
   174e8:	468c      	mov	ip, r1
   174ea:	9d03      	ldr	r5, [sp, #12]
   174ec:	44e3      	add	fp, ip
   174ee:	46ac      	mov	ip, r5
   174f0:	44e2      	add	sl, ip
   174f2:	45aa      	cmp	sl, r5
   174f4:	41ad      	sbcs	r5, r5
   174f6:	426d      	negs	r5, r5
   174f8:	4445      	add	r5, r8
   174fa:	18ed      	adds	r5, r5, r3
   174fc:	1a2d      	subs	r5, r5, r0
   174fe:	e696      	b.n	1722e <__aeabi_ddiv+0x2f6>
   17500:	1e8a      	subs	r2, r1, #2
   17502:	9903      	ldr	r1, [sp, #12]
   17504:	004d      	lsls	r5, r1, #1
   17506:	428d      	cmp	r5, r1
   17508:	4189      	sbcs	r1, r1
   1750a:	4249      	negs	r1, r1
   1750c:	4441      	add	r1, r8
   1750e:	1876      	adds	r6, r6, r1
   17510:	9503      	str	r5, [sp, #12]
   17512:	e78f      	b.n	17434 <__aeabi_ddiv+0x4fc>
   17514:	201f      	movs	r0, #31
   17516:	4240      	negs	r0, r0
   17518:	1ac3      	subs	r3, r0, r3
   1751a:	4658      	mov	r0, fp
   1751c:	40d8      	lsrs	r0, r3
   1751e:	0003      	movs	r3, r0
   17520:	2a20      	cmp	r2, #32
   17522:	d028      	beq.n	17576 <__aeabi_ddiv+0x63e>
   17524:	2040      	movs	r0, #64	; 0x40
   17526:	465d      	mov	r5, fp
   17528:	1a82      	subs	r2, r0, r2
   1752a:	4095      	lsls	r5, r2
   1752c:	4329      	orrs	r1, r5
   1752e:	1e4a      	subs	r2, r1, #1
   17530:	4191      	sbcs	r1, r2
   17532:	4319      	orrs	r1, r3
   17534:	2307      	movs	r3, #7
   17536:	2200      	movs	r2, #0
   17538:	400b      	ands	r3, r1
   1753a:	d009      	beq.n	17550 <__aeabi_ddiv+0x618>
   1753c:	230f      	movs	r3, #15
   1753e:	2200      	movs	r2, #0
   17540:	400b      	ands	r3, r1
   17542:	0008      	movs	r0, r1
   17544:	2b04      	cmp	r3, #4
   17546:	d1bd      	bne.n	174c4 <__aeabi_ddiv+0x58c>
   17548:	0001      	movs	r1, r0
   1754a:	0753      	lsls	r3, r2, #29
   1754c:	0252      	lsls	r2, r2, #9
   1754e:	0b12      	lsrs	r2, r2, #12
   17550:	08c9      	lsrs	r1, r1, #3
   17552:	4319      	orrs	r1, r3
   17554:	2301      	movs	r3, #1
   17556:	4688      	mov	r8, r1
   17558:	9902      	ldr	r1, [sp, #8]
   1755a:	2400      	movs	r4, #0
   1755c:	4019      	ands	r1, r3
   1755e:	468c      	mov	ip, r1
   17560:	e5b8      	b.n	170d4 <__aeabi_ddiv+0x19c>
   17562:	4552      	cmp	r2, sl
   17564:	d8be      	bhi.n	174e4 <__aeabi_ddiv+0x5ac>
   17566:	468b      	mov	fp, r1
   17568:	2500      	movs	r5, #0
   1756a:	e660      	b.n	1722e <__aeabi_ddiv+0x2f6>
   1756c:	9d03      	ldr	r5, [sp, #12]
   1756e:	429d      	cmp	r5, r3
   17570:	d3c6      	bcc.n	17500 <__aeabi_ddiv+0x5c8>
   17572:	0011      	movs	r1, r2
   17574:	e762      	b.n	1743c <__aeabi_ddiv+0x504>
   17576:	2500      	movs	r5, #0
   17578:	e7d8      	b.n	1752c <__aeabi_ddiv+0x5f4>
   1757a:	2280      	movs	r2, #128	; 0x80
   1757c:	465b      	mov	r3, fp
   1757e:	0312      	lsls	r2, r2, #12
   17580:	431a      	orrs	r2, r3
   17582:	9b01      	ldr	r3, [sp, #4]
   17584:	0312      	lsls	r2, r2, #12
   17586:	0b12      	lsrs	r2, r2, #12
   17588:	469c      	mov	ip, r3
   1758a:	4688      	mov	r8, r1
   1758c:	4c03      	ldr	r4, [pc, #12]	; (1759c <__aeabi_ddiv+0x664>)
   1758e:	e5a1      	b.n	170d4 <__aeabi_ddiv+0x19c>
   17590:	000003ff 	.word	0x000003ff
   17594:	feffffff 	.word	0xfeffffff
   17598:	000007fe 	.word	0x000007fe
   1759c:	000007ff 	.word	0x000007ff

000175a0 <__eqdf2>:
   175a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   175a2:	464f      	mov	r7, r9
   175a4:	4646      	mov	r6, r8
   175a6:	46d6      	mov	lr, sl
   175a8:	005c      	lsls	r4, r3, #1
   175aa:	b5c0      	push	{r6, r7, lr}
   175ac:	031f      	lsls	r7, r3, #12
   175ae:	0fdb      	lsrs	r3, r3, #31
   175b0:	469a      	mov	sl, r3
   175b2:	4b17      	ldr	r3, [pc, #92]	; (17610 <__eqdf2+0x70>)
   175b4:	030e      	lsls	r6, r1, #12
   175b6:	004d      	lsls	r5, r1, #1
   175b8:	4684      	mov	ip, r0
   175ba:	4680      	mov	r8, r0
   175bc:	0b36      	lsrs	r6, r6, #12
   175be:	0d6d      	lsrs	r5, r5, #21
   175c0:	0fc9      	lsrs	r1, r1, #31
   175c2:	4691      	mov	r9, r2
   175c4:	0b3f      	lsrs	r7, r7, #12
   175c6:	0d64      	lsrs	r4, r4, #21
   175c8:	2001      	movs	r0, #1
   175ca:	429d      	cmp	r5, r3
   175cc:	d008      	beq.n	175e0 <__eqdf2+0x40>
   175ce:	429c      	cmp	r4, r3
   175d0:	d001      	beq.n	175d6 <__eqdf2+0x36>
   175d2:	42a5      	cmp	r5, r4
   175d4:	d00b      	beq.n	175ee <__eqdf2+0x4e>
   175d6:	bc1c      	pop	{r2, r3, r4}
   175d8:	4690      	mov	r8, r2
   175da:	4699      	mov	r9, r3
   175dc:	46a2      	mov	sl, r4
   175de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   175e0:	4663      	mov	r3, ip
   175e2:	4333      	orrs	r3, r6
   175e4:	d1f7      	bne.n	175d6 <__eqdf2+0x36>
   175e6:	42ac      	cmp	r4, r5
   175e8:	d1f5      	bne.n	175d6 <__eqdf2+0x36>
   175ea:	433a      	orrs	r2, r7
   175ec:	d1f3      	bne.n	175d6 <__eqdf2+0x36>
   175ee:	2001      	movs	r0, #1
   175f0:	42be      	cmp	r6, r7
   175f2:	d1f0      	bne.n	175d6 <__eqdf2+0x36>
   175f4:	45c8      	cmp	r8, r9
   175f6:	d1ee      	bne.n	175d6 <__eqdf2+0x36>
   175f8:	4551      	cmp	r1, sl
   175fa:	d007      	beq.n	1760c <__eqdf2+0x6c>
   175fc:	2d00      	cmp	r5, #0
   175fe:	d1ea      	bne.n	175d6 <__eqdf2+0x36>
   17600:	4663      	mov	r3, ip
   17602:	431e      	orrs	r6, r3
   17604:	0030      	movs	r0, r6
   17606:	1e46      	subs	r6, r0, #1
   17608:	41b0      	sbcs	r0, r6
   1760a:	e7e4      	b.n	175d6 <__eqdf2+0x36>
   1760c:	2000      	movs	r0, #0
   1760e:	e7e2      	b.n	175d6 <__eqdf2+0x36>
   17610:	000007ff 	.word	0x000007ff

00017614 <__gedf2>:
   17614:	b5f0      	push	{r4, r5, r6, r7, lr}
   17616:	4645      	mov	r5, r8
   17618:	46de      	mov	lr, fp
   1761a:	4657      	mov	r7, sl
   1761c:	464e      	mov	r6, r9
   1761e:	b5e0      	push	{r5, r6, r7, lr}
   17620:	031f      	lsls	r7, r3, #12
   17622:	0b3d      	lsrs	r5, r7, #12
   17624:	4f2c      	ldr	r7, [pc, #176]	; (176d8 <__gedf2+0xc4>)
   17626:	030e      	lsls	r6, r1, #12
   17628:	004c      	lsls	r4, r1, #1
   1762a:	46ab      	mov	fp, r5
   1762c:	005d      	lsls	r5, r3, #1
   1762e:	4684      	mov	ip, r0
   17630:	0b36      	lsrs	r6, r6, #12
   17632:	0d64      	lsrs	r4, r4, #21
   17634:	0fc9      	lsrs	r1, r1, #31
   17636:	4690      	mov	r8, r2
   17638:	0d6d      	lsrs	r5, r5, #21
   1763a:	0fdb      	lsrs	r3, r3, #31
   1763c:	42bc      	cmp	r4, r7
   1763e:	d02a      	beq.n	17696 <__gedf2+0x82>
   17640:	4f25      	ldr	r7, [pc, #148]	; (176d8 <__gedf2+0xc4>)
   17642:	42bd      	cmp	r5, r7
   17644:	d02d      	beq.n	176a2 <__gedf2+0x8e>
   17646:	2c00      	cmp	r4, #0
   17648:	d10f      	bne.n	1766a <__gedf2+0x56>
   1764a:	4330      	orrs	r0, r6
   1764c:	0007      	movs	r7, r0
   1764e:	4681      	mov	r9, r0
   17650:	4278      	negs	r0, r7
   17652:	4178      	adcs	r0, r7
   17654:	b2c0      	uxtb	r0, r0
   17656:	2d00      	cmp	r5, #0
   17658:	d117      	bne.n	1768a <__gedf2+0x76>
   1765a:	465f      	mov	r7, fp
   1765c:	433a      	orrs	r2, r7
   1765e:	d114      	bne.n	1768a <__gedf2+0x76>
   17660:	464b      	mov	r3, r9
   17662:	2000      	movs	r0, #0
   17664:	2b00      	cmp	r3, #0
   17666:	d00a      	beq.n	1767e <__gedf2+0x6a>
   17668:	e006      	b.n	17678 <__gedf2+0x64>
   1766a:	2d00      	cmp	r5, #0
   1766c:	d102      	bne.n	17674 <__gedf2+0x60>
   1766e:	4658      	mov	r0, fp
   17670:	4302      	orrs	r2, r0
   17672:	d001      	beq.n	17678 <__gedf2+0x64>
   17674:	4299      	cmp	r1, r3
   17676:	d018      	beq.n	176aa <__gedf2+0x96>
   17678:	4248      	negs	r0, r1
   1767a:	2101      	movs	r1, #1
   1767c:	4308      	orrs	r0, r1
   1767e:	bc3c      	pop	{r2, r3, r4, r5}
   17680:	4690      	mov	r8, r2
   17682:	4699      	mov	r9, r3
   17684:	46a2      	mov	sl, r4
   17686:	46ab      	mov	fp, r5
   17688:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1768a:	2800      	cmp	r0, #0
   1768c:	d0f2      	beq.n	17674 <__gedf2+0x60>
   1768e:	2001      	movs	r0, #1
   17690:	3b01      	subs	r3, #1
   17692:	4318      	orrs	r0, r3
   17694:	e7f3      	b.n	1767e <__gedf2+0x6a>
   17696:	0037      	movs	r7, r6
   17698:	4307      	orrs	r7, r0
   1769a:	d0d1      	beq.n	17640 <__gedf2+0x2c>
   1769c:	2002      	movs	r0, #2
   1769e:	4240      	negs	r0, r0
   176a0:	e7ed      	b.n	1767e <__gedf2+0x6a>
   176a2:	465f      	mov	r7, fp
   176a4:	4317      	orrs	r7, r2
   176a6:	d0ce      	beq.n	17646 <__gedf2+0x32>
   176a8:	e7f8      	b.n	1769c <__gedf2+0x88>
   176aa:	42ac      	cmp	r4, r5
   176ac:	dce4      	bgt.n	17678 <__gedf2+0x64>
   176ae:	da03      	bge.n	176b8 <__gedf2+0xa4>
   176b0:	1e48      	subs	r0, r1, #1
   176b2:	2101      	movs	r1, #1
   176b4:	4308      	orrs	r0, r1
   176b6:	e7e2      	b.n	1767e <__gedf2+0x6a>
   176b8:	455e      	cmp	r6, fp
   176ba:	d8dd      	bhi.n	17678 <__gedf2+0x64>
   176bc:	d006      	beq.n	176cc <__gedf2+0xb8>
   176be:	2000      	movs	r0, #0
   176c0:	455e      	cmp	r6, fp
   176c2:	d2dc      	bcs.n	1767e <__gedf2+0x6a>
   176c4:	2301      	movs	r3, #1
   176c6:	1e48      	subs	r0, r1, #1
   176c8:	4318      	orrs	r0, r3
   176ca:	e7d8      	b.n	1767e <__gedf2+0x6a>
   176cc:	45c4      	cmp	ip, r8
   176ce:	d8d3      	bhi.n	17678 <__gedf2+0x64>
   176d0:	2000      	movs	r0, #0
   176d2:	45c4      	cmp	ip, r8
   176d4:	d3f6      	bcc.n	176c4 <__gedf2+0xb0>
   176d6:	e7d2      	b.n	1767e <__gedf2+0x6a>
   176d8:	000007ff 	.word	0x000007ff

000176dc <__ledf2>:
   176dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   176de:	464e      	mov	r6, r9
   176e0:	4645      	mov	r5, r8
   176e2:	46de      	mov	lr, fp
   176e4:	4657      	mov	r7, sl
   176e6:	005c      	lsls	r4, r3, #1
   176e8:	b5e0      	push	{r5, r6, r7, lr}
   176ea:	031f      	lsls	r7, r3, #12
   176ec:	0fdb      	lsrs	r3, r3, #31
   176ee:	4699      	mov	r9, r3
   176f0:	4b2a      	ldr	r3, [pc, #168]	; (1779c <__ledf2+0xc0>)
   176f2:	030e      	lsls	r6, r1, #12
   176f4:	004d      	lsls	r5, r1, #1
   176f6:	0fc9      	lsrs	r1, r1, #31
   176f8:	4684      	mov	ip, r0
   176fa:	0b36      	lsrs	r6, r6, #12
   176fc:	0d6d      	lsrs	r5, r5, #21
   176fe:	468b      	mov	fp, r1
   17700:	4690      	mov	r8, r2
   17702:	0b3f      	lsrs	r7, r7, #12
   17704:	0d64      	lsrs	r4, r4, #21
   17706:	429d      	cmp	r5, r3
   17708:	d020      	beq.n	1774c <__ledf2+0x70>
   1770a:	4b24      	ldr	r3, [pc, #144]	; (1779c <__ledf2+0xc0>)
   1770c:	429c      	cmp	r4, r3
   1770e:	d022      	beq.n	17756 <__ledf2+0x7a>
   17710:	2d00      	cmp	r5, #0
   17712:	d112      	bne.n	1773a <__ledf2+0x5e>
   17714:	4330      	orrs	r0, r6
   17716:	4243      	negs	r3, r0
   17718:	4143      	adcs	r3, r0
   1771a:	b2db      	uxtb	r3, r3
   1771c:	2c00      	cmp	r4, #0
   1771e:	d01f      	beq.n	17760 <__ledf2+0x84>
   17720:	2b00      	cmp	r3, #0
   17722:	d00c      	beq.n	1773e <__ledf2+0x62>
   17724:	464b      	mov	r3, r9
   17726:	2001      	movs	r0, #1
   17728:	3b01      	subs	r3, #1
   1772a:	4303      	orrs	r3, r0
   1772c:	0018      	movs	r0, r3
   1772e:	bc3c      	pop	{r2, r3, r4, r5}
   17730:	4690      	mov	r8, r2
   17732:	4699      	mov	r9, r3
   17734:	46a2      	mov	sl, r4
   17736:	46ab      	mov	fp, r5
   17738:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1773a:	2c00      	cmp	r4, #0
   1773c:	d016      	beq.n	1776c <__ledf2+0x90>
   1773e:	45cb      	cmp	fp, r9
   17740:	d017      	beq.n	17772 <__ledf2+0x96>
   17742:	465b      	mov	r3, fp
   17744:	4259      	negs	r1, r3
   17746:	2301      	movs	r3, #1
   17748:	430b      	orrs	r3, r1
   1774a:	e7ef      	b.n	1772c <__ledf2+0x50>
   1774c:	0031      	movs	r1, r6
   1774e:	2302      	movs	r3, #2
   17750:	4301      	orrs	r1, r0
   17752:	d1eb      	bne.n	1772c <__ledf2+0x50>
   17754:	e7d9      	b.n	1770a <__ledf2+0x2e>
   17756:	0039      	movs	r1, r7
   17758:	2302      	movs	r3, #2
   1775a:	4311      	orrs	r1, r2
   1775c:	d1e6      	bne.n	1772c <__ledf2+0x50>
   1775e:	e7d7      	b.n	17710 <__ledf2+0x34>
   17760:	433a      	orrs	r2, r7
   17762:	d1dd      	bne.n	17720 <__ledf2+0x44>
   17764:	2300      	movs	r3, #0
   17766:	2800      	cmp	r0, #0
   17768:	d0e0      	beq.n	1772c <__ledf2+0x50>
   1776a:	e7ea      	b.n	17742 <__ledf2+0x66>
   1776c:	433a      	orrs	r2, r7
   1776e:	d1e6      	bne.n	1773e <__ledf2+0x62>
   17770:	e7e7      	b.n	17742 <__ledf2+0x66>
   17772:	42a5      	cmp	r5, r4
   17774:	dce5      	bgt.n	17742 <__ledf2+0x66>
   17776:	db05      	blt.n	17784 <__ledf2+0xa8>
   17778:	42be      	cmp	r6, r7
   1777a:	d8e2      	bhi.n	17742 <__ledf2+0x66>
   1777c:	d007      	beq.n	1778e <__ledf2+0xb2>
   1777e:	2300      	movs	r3, #0
   17780:	42be      	cmp	r6, r7
   17782:	d2d3      	bcs.n	1772c <__ledf2+0x50>
   17784:	4659      	mov	r1, fp
   17786:	2301      	movs	r3, #1
   17788:	3901      	subs	r1, #1
   1778a:	430b      	orrs	r3, r1
   1778c:	e7ce      	b.n	1772c <__ledf2+0x50>
   1778e:	45c4      	cmp	ip, r8
   17790:	d8d7      	bhi.n	17742 <__ledf2+0x66>
   17792:	2300      	movs	r3, #0
   17794:	45c4      	cmp	ip, r8
   17796:	d3f5      	bcc.n	17784 <__ledf2+0xa8>
   17798:	e7c8      	b.n	1772c <__ledf2+0x50>
   1779a:	46c0      	nop			; (mov r8, r8)
   1779c:	000007ff 	.word	0x000007ff

000177a0 <__aeabi_dmul>:
   177a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   177a2:	4657      	mov	r7, sl
   177a4:	4645      	mov	r5, r8
   177a6:	46de      	mov	lr, fp
   177a8:	464e      	mov	r6, r9
   177aa:	b5e0      	push	{r5, r6, r7, lr}
   177ac:	030c      	lsls	r4, r1, #12
   177ae:	4698      	mov	r8, r3
   177b0:	004e      	lsls	r6, r1, #1
   177b2:	0b23      	lsrs	r3, r4, #12
   177b4:	b087      	sub	sp, #28
   177b6:	0007      	movs	r7, r0
   177b8:	4692      	mov	sl, r2
   177ba:	469b      	mov	fp, r3
   177bc:	0d76      	lsrs	r6, r6, #21
   177be:	0fcd      	lsrs	r5, r1, #31
   177c0:	2e00      	cmp	r6, #0
   177c2:	d06b      	beq.n	1789c <__aeabi_dmul+0xfc>
   177c4:	4b6d      	ldr	r3, [pc, #436]	; (1797c <__aeabi_dmul+0x1dc>)
   177c6:	429e      	cmp	r6, r3
   177c8:	d035      	beq.n	17836 <__aeabi_dmul+0x96>
   177ca:	2480      	movs	r4, #128	; 0x80
   177cc:	465b      	mov	r3, fp
   177ce:	0f42      	lsrs	r2, r0, #29
   177d0:	0424      	lsls	r4, r4, #16
   177d2:	00db      	lsls	r3, r3, #3
   177d4:	4314      	orrs	r4, r2
   177d6:	431c      	orrs	r4, r3
   177d8:	00c3      	lsls	r3, r0, #3
   177da:	4699      	mov	r9, r3
   177dc:	4b68      	ldr	r3, [pc, #416]	; (17980 <__aeabi_dmul+0x1e0>)
   177de:	46a3      	mov	fp, r4
   177e0:	469c      	mov	ip, r3
   177e2:	2300      	movs	r3, #0
   177e4:	2700      	movs	r7, #0
   177e6:	4466      	add	r6, ip
   177e8:	9302      	str	r3, [sp, #8]
   177ea:	4643      	mov	r3, r8
   177ec:	031c      	lsls	r4, r3, #12
   177ee:	005a      	lsls	r2, r3, #1
   177f0:	0fdb      	lsrs	r3, r3, #31
   177f2:	4650      	mov	r0, sl
   177f4:	0b24      	lsrs	r4, r4, #12
   177f6:	0d52      	lsrs	r2, r2, #21
   177f8:	4698      	mov	r8, r3
   177fa:	d100      	bne.n	177fe <__aeabi_dmul+0x5e>
   177fc:	e076      	b.n	178ec <__aeabi_dmul+0x14c>
   177fe:	4b5f      	ldr	r3, [pc, #380]	; (1797c <__aeabi_dmul+0x1dc>)
   17800:	429a      	cmp	r2, r3
   17802:	d06d      	beq.n	178e0 <__aeabi_dmul+0x140>
   17804:	2380      	movs	r3, #128	; 0x80
   17806:	0f41      	lsrs	r1, r0, #29
   17808:	041b      	lsls	r3, r3, #16
   1780a:	430b      	orrs	r3, r1
   1780c:	495c      	ldr	r1, [pc, #368]	; (17980 <__aeabi_dmul+0x1e0>)
   1780e:	00e4      	lsls	r4, r4, #3
   17810:	468c      	mov	ip, r1
   17812:	431c      	orrs	r4, r3
   17814:	00c3      	lsls	r3, r0, #3
   17816:	2000      	movs	r0, #0
   17818:	4462      	add	r2, ip
   1781a:	4641      	mov	r1, r8
   1781c:	18b6      	adds	r6, r6, r2
   1781e:	4069      	eors	r1, r5
   17820:	1c72      	adds	r2, r6, #1
   17822:	9101      	str	r1, [sp, #4]
   17824:	4694      	mov	ip, r2
   17826:	4307      	orrs	r7, r0
   17828:	2f0f      	cmp	r7, #15
   1782a:	d900      	bls.n	1782e <__aeabi_dmul+0x8e>
   1782c:	e0b0      	b.n	17990 <__aeabi_dmul+0x1f0>
   1782e:	4a55      	ldr	r2, [pc, #340]	; (17984 <__aeabi_dmul+0x1e4>)
   17830:	00bf      	lsls	r7, r7, #2
   17832:	59d2      	ldr	r2, [r2, r7]
   17834:	4697      	mov	pc, r2
   17836:	465b      	mov	r3, fp
   17838:	4303      	orrs	r3, r0
   1783a:	4699      	mov	r9, r3
   1783c:	d000      	beq.n	17840 <__aeabi_dmul+0xa0>
   1783e:	e087      	b.n	17950 <__aeabi_dmul+0x1b0>
   17840:	2300      	movs	r3, #0
   17842:	469b      	mov	fp, r3
   17844:	3302      	adds	r3, #2
   17846:	2708      	movs	r7, #8
   17848:	9302      	str	r3, [sp, #8]
   1784a:	e7ce      	b.n	177ea <__aeabi_dmul+0x4a>
   1784c:	4642      	mov	r2, r8
   1784e:	9201      	str	r2, [sp, #4]
   17850:	2802      	cmp	r0, #2
   17852:	d067      	beq.n	17924 <__aeabi_dmul+0x184>
   17854:	2803      	cmp	r0, #3
   17856:	d100      	bne.n	1785a <__aeabi_dmul+0xba>
   17858:	e20e      	b.n	17c78 <__aeabi_dmul+0x4d8>
   1785a:	2801      	cmp	r0, #1
   1785c:	d000      	beq.n	17860 <__aeabi_dmul+0xc0>
   1785e:	e162      	b.n	17b26 <__aeabi_dmul+0x386>
   17860:	2300      	movs	r3, #0
   17862:	2400      	movs	r4, #0
   17864:	2200      	movs	r2, #0
   17866:	4699      	mov	r9, r3
   17868:	9901      	ldr	r1, [sp, #4]
   1786a:	4001      	ands	r1, r0
   1786c:	b2cd      	uxtb	r5, r1
   1786e:	2100      	movs	r1, #0
   17870:	0312      	lsls	r2, r2, #12
   17872:	0d0b      	lsrs	r3, r1, #20
   17874:	0b12      	lsrs	r2, r2, #12
   17876:	051b      	lsls	r3, r3, #20
   17878:	4313      	orrs	r3, r2
   1787a:	4a43      	ldr	r2, [pc, #268]	; (17988 <__aeabi_dmul+0x1e8>)
   1787c:	0524      	lsls	r4, r4, #20
   1787e:	4013      	ands	r3, r2
   17880:	431c      	orrs	r4, r3
   17882:	0064      	lsls	r4, r4, #1
   17884:	07ed      	lsls	r5, r5, #31
   17886:	0864      	lsrs	r4, r4, #1
   17888:	432c      	orrs	r4, r5
   1788a:	4648      	mov	r0, r9
   1788c:	0021      	movs	r1, r4
   1788e:	b007      	add	sp, #28
   17890:	bc3c      	pop	{r2, r3, r4, r5}
   17892:	4690      	mov	r8, r2
   17894:	4699      	mov	r9, r3
   17896:	46a2      	mov	sl, r4
   17898:	46ab      	mov	fp, r5
   1789a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1789c:	4303      	orrs	r3, r0
   1789e:	4699      	mov	r9, r3
   178a0:	d04f      	beq.n	17942 <__aeabi_dmul+0x1a2>
   178a2:	465b      	mov	r3, fp
   178a4:	2b00      	cmp	r3, #0
   178a6:	d100      	bne.n	178aa <__aeabi_dmul+0x10a>
   178a8:	e189      	b.n	17bbe <__aeabi_dmul+0x41e>
   178aa:	4658      	mov	r0, fp
   178ac:	f000 fe68 	bl	18580 <__clzsi2>
   178b0:	0003      	movs	r3, r0
   178b2:	3b0b      	subs	r3, #11
   178b4:	2b1c      	cmp	r3, #28
   178b6:	dd00      	ble.n	178ba <__aeabi_dmul+0x11a>
   178b8:	e17a      	b.n	17bb0 <__aeabi_dmul+0x410>
   178ba:	221d      	movs	r2, #29
   178bc:	1ad3      	subs	r3, r2, r3
   178be:	003a      	movs	r2, r7
   178c0:	0001      	movs	r1, r0
   178c2:	465c      	mov	r4, fp
   178c4:	40da      	lsrs	r2, r3
   178c6:	3908      	subs	r1, #8
   178c8:	408c      	lsls	r4, r1
   178ca:	0013      	movs	r3, r2
   178cc:	408f      	lsls	r7, r1
   178ce:	4323      	orrs	r3, r4
   178d0:	469b      	mov	fp, r3
   178d2:	46b9      	mov	r9, r7
   178d4:	2300      	movs	r3, #0
   178d6:	4e2d      	ldr	r6, [pc, #180]	; (1798c <__aeabi_dmul+0x1ec>)
   178d8:	2700      	movs	r7, #0
   178da:	1a36      	subs	r6, r6, r0
   178dc:	9302      	str	r3, [sp, #8]
   178de:	e784      	b.n	177ea <__aeabi_dmul+0x4a>
   178e0:	4653      	mov	r3, sl
   178e2:	4323      	orrs	r3, r4
   178e4:	d12a      	bne.n	1793c <__aeabi_dmul+0x19c>
   178e6:	2400      	movs	r4, #0
   178e8:	2002      	movs	r0, #2
   178ea:	e796      	b.n	1781a <__aeabi_dmul+0x7a>
   178ec:	4653      	mov	r3, sl
   178ee:	4323      	orrs	r3, r4
   178f0:	d020      	beq.n	17934 <__aeabi_dmul+0x194>
   178f2:	2c00      	cmp	r4, #0
   178f4:	d100      	bne.n	178f8 <__aeabi_dmul+0x158>
   178f6:	e157      	b.n	17ba8 <__aeabi_dmul+0x408>
   178f8:	0020      	movs	r0, r4
   178fa:	f000 fe41 	bl	18580 <__clzsi2>
   178fe:	0003      	movs	r3, r0
   17900:	3b0b      	subs	r3, #11
   17902:	2b1c      	cmp	r3, #28
   17904:	dd00      	ble.n	17908 <__aeabi_dmul+0x168>
   17906:	e149      	b.n	17b9c <__aeabi_dmul+0x3fc>
   17908:	211d      	movs	r1, #29
   1790a:	1acb      	subs	r3, r1, r3
   1790c:	4651      	mov	r1, sl
   1790e:	0002      	movs	r2, r0
   17910:	40d9      	lsrs	r1, r3
   17912:	4653      	mov	r3, sl
   17914:	3a08      	subs	r2, #8
   17916:	4094      	lsls	r4, r2
   17918:	4093      	lsls	r3, r2
   1791a:	430c      	orrs	r4, r1
   1791c:	4a1b      	ldr	r2, [pc, #108]	; (1798c <__aeabi_dmul+0x1ec>)
   1791e:	1a12      	subs	r2, r2, r0
   17920:	2000      	movs	r0, #0
   17922:	e77a      	b.n	1781a <__aeabi_dmul+0x7a>
   17924:	2501      	movs	r5, #1
   17926:	9b01      	ldr	r3, [sp, #4]
   17928:	4c14      	ldr	r4, [pc, #80]	; (1797c <__aeabi_dmul+0x1dc>)
   1792a:	401d      	ands	r5, r3
   1792c:	2300      	movs	r3, #0
   1792e:	2200      	movs	r2, #0
   17930:	4699      	mov	r9, r3
   17932:	e79c      	b.n	1786e <__aeabi_dmul+0xce>
   17934:	2400      	movs	r4, #0
   17936:	2200      	movs	r2, #0
   17938:	2001      	movs	r0, #1
   1793a:	e76e      	b.n	1781a <__aeabi_dmul+0x7a>
   1793c:	4653      	mov	r3, sl
   1793e:	2003      	movs	r0, #3
   17940:	e76b      	b.n	1781a <__aeabi_dmul+0x7a>
   17942:	2300      	movs	r3, #0
   17944:	469b      	mov	fp, r3
   17946:	3301      	adds	r3, #1
   17948:	2704      	movs	r7, #4
   1794a:	2600      	movs	r6, #0
   1794c:	9302      	str	r3, [sp, #8]
   1794e:	e74c      	b.n	177ea <__aeabi_dmul+0x4a>
   17950:	2303      	movs	r3, #3
   17952:	4681      	mov	r9, r0
   17954:	270c      	movs	r7, #12
   17956:	9302      	str	r3, [sp, #8]
   17958:	e747      	b.n	177ea <__aeabi_dmul+0x4a>
   1795a:	2280      	movs	r2, #128	; 0x80
   1795c:	2300      	movs	r3, #0
   1795e:	2500      	movs	r5, #0
   17960:	0312      	lsls	r2, r2, #12
   17962:	4699      	mov	r9, r3
   17964:	4c05      	ldr	r4, [pc, #20]	; (1797c <__aeabi_dmul+0x1dc>)
   17966:	e782      	b.n	1786e <__aeabi_dmul+0xce>
   17968:	465c      	mov	r4, fp
   1796a:	464b      	mov	r3, r9
   1796c:	9802      	ldr	r0, [sp, #8]
   1796e:	e76f      	b.n	17850 <__aeabi_dmul+0xb0>
   17970:	465c      	mov	r4, fp
   17972:	464b      	mov	r3, r9
   17974:	9501      	str	r5, [sp, #4]
   17976:	9802      	ldr	r0, [sp, #8]
   17978:	e76a      	b.n	17850 <__aeabi_dmul+0xb0>
   1797a:	46c0      	nop			; (mov r8, r8)
   1797c:	000007ff 	.word	0x000007ff
   17980:	fffffc01 	.word	0xfffffc01
   17984:	0001c048 	.word	0x0001c048
   17988:	800fffff 	.word	0x800fffff
   1798c:	fffffc0d 	.word	0xfffffc0d
   17990:	464a      	mov	r2, r9
   17992:	4649      	mov	r1, r9
   17994:	0c17      	lsrs	r7, r2, #16
   17996:	0c1a      	lsrs	r2, r3, #16
   17998:	041b      	lsls	r3, r3, #16
   1799a:	0c1b      	lsrs	r3, r3, #16
   1799c:	0408      	lsls	r0, r1, #16
   1799e:	0019      	movs	r1, r3
   179a0:	0c00      	lsrs	r0, r0, #16
   179a2:	4341      	muls	r1, r0
   179a4:	0015      	movs	r5, r2
   179a6:	4688      	mov	r8, r1
   179a8:	0019      	movs	r1, r3
   179aa:	437d      	muls	r5, r7
   179ac:	4379      	muls	r1, r7
   179ae:	9503      	str	r5, [sp, #12]
   179b0:	4689      	mov	r9, r1
   179b2:	0029      	movs	r1, r5
   179b4:	0015      	movs	r5, r2
   179b6:	4345      	muls	r5, r0
   179b8:	444d      	add	r5, r9
   179ba:	9502      	str	r5, [sp, #8]
   179bc:	4645      	mov	r5, r8
   179be:	0c2d      	lsrs	r5, r5, #16
   179c0:	46aa      	mov	sl, r5
   179c2:	9d02      	ldr	r5, [sp, #8]
   179c4:	4455      	add	r5, sl
   179c6:	45a9      	cmp	r9, r5
   179c8:	d906      	bls.n	179d8 <__aeabi_dmul+0x238>
   179ca:	468a      	mov	sl, r1
   179cc:	2180      	movs	r1, #128	; 0x80
   179ce:	0249      	lsls	r1, r1, #9
   179d0:	4689      	mov	r9, r1
   179d2:	44ca      	add	sl, r9
   179d4:	4651      	mov	r1, sl
   179d6:	9103      	str	r1, [sp, #12]
   179d8:	0c29      	lsrs	r1, r5, #16
   179da:	9104      	str	r1, [sp, #16]
   179dc:	4641      	mov	r1, r8
   179de:	0409      	lsls	r1, r1, #16
   179e0:	042d      	lsls	r5, r5, #16
   179e2:	0c09      	lsrs	r1, r1, #16
   179e4:	4688      	mov	r8, r1
   179e6:	0029      	movs	r1, r5
   179e8:	0c25      	lsrs	r5, r4, #16
   179ea:	0424      	lsls	r4, r4, #16
   179ec:	4441      	add	r1, r8
   179ee:	0c24      	lsrs	r4, r4, #16
   179f0:	9105      	str	r1, [sp, #20]
   179f2:	0021      	movs	r1, r4
   179f4:	4341      	muls	r1, r0
   179f6:	4688      	mov	r8, r1
   179f8:	0021      	movs	r1, r4
   179fa:	4379      	muls	r1, r7
   179fc:	468a      	mov	sl, r1
   179fe:	4368      	muls	r0, r5
   17a00:	4641      	mov	r1, r8
   17a02:	4450      	add	r0, sl
   17a04:	4681      	mov	r9, r0
   17a06:	0c08      	lsrs	r0, r1, #16
   17a08:	4448      	add	r0, r9
   17a0a:	436f      	muls	r7, r5
   17a0c:	4582      	cmp	sl, r0
   17a0e:	d903      	bls.n	17a18 <__aeabi_dmul+0x278>
   17a10:	2180      	movs	r1, #128	; 0x80
   17a12:	0249      	lsls	r1, r1, #9
   17a14:	4689      	mov	r9, r1
   17a16:	444f      	add	r7, r9
   17a18:	0c01      	lsrs	r1, r0, #16
   17a1a:	4689      	mov	r9, r1
   17a1c:	0039      	movs	r1, r7
   17a1e:	4449      	add	r1, r9
   17a20:	9102      	str	r1, [sp, #8]
   17a22:	4641      	mov	r1, r8
   17a24:	040f      	lsls	r7, r1, #16
   17a26:	9904      	ldr	r1, [sp, #16]
   17a28:	0c3f      	lsrs	r7, r7, #16
   17a2a:	4688      	mov	r8, r1
   17a2c:	0400      	lsls	r0, r0, #16
   17a2e:	19c0      	adds	r0, r0, r7
   17a30:	4480      	add	r8, r0
   17a32:	4641      	mov	r1, r8
   17a34:	9104      	str	r1, [sp, #16]
   17a36:	4659      	mov	r1, fp
   17a38:	0c0f      	lsrs	r7, r1, #16
   17a3a:	0409      	lsls	r1, r1, #16
   17a3c:	0c09      	lsrs	r1, r1, #16
   17a3e:	4688      	mov	r8, r1
   17a40:	4359      	muls	r1, r3
   17a42:	468a      	mov	sl, r1
   17a44:	0039      	movs	r1, r7
   17a46:	4351      	muls	r1, r2
   17a48:	4689      	mov	r9, r1
   17a4a:	4641      	mov	r1, r8
   17a4c:	434a      	muls	r2, r1
   17a4e:	4651      	mov	r1, sl
   17a50:	0c09      	lsrs	r1, r1, #16
   17a52:	468b      	mov	fp, r1
   17a54:	437b      	muls	r3, r7
   17a56:	18d2      	adds	r2, r2, r3
   17a58:	445a      	add	r2, fp
   17a5a:	4293      	cmp	r3, r2
   17a5c:	d903      	bls.n	17a66 <__aeabi_dmul+0x2c6>
   17a5e:	2380      	movs	r3, #128	; 0x80
   17a60:	025b      	lsls	r3, r3, #9
   17a62:	469b      	mov	fp, r3
   17a64:	44d9      	add	r9, fp
   17a66:	4651      	mov	r1, sl
   17a68:	0409      	lsls	r1, r1, #16
   17a6a:	0c09      	lsrs	r1, r1, #16
   17a6c:	468a      	mov	sl, r1
   17a6e:	4641      	mov	r1, r8
   17a70:	4361      	muls	r1, r4
   17a72:	437c      	muls	r4, r7
   17a74:	0c13      	lsrs	r3, r2, #16
   17a76:	0412      	lsls	r2, r2, #16
   17a78:	444b      	add	r3, r9
   17a7a:	4452      	add	r2, sl
   17a7c:	46a1      	mov	r9, r4
   17a7e:	468a      	mov	sl, r1
   17a80:	003c      	movs	r4, r7
   17a82:	4641      	mov	r1, r8
   17a84:	436c      	muls	r4, r5
   17a86:	434d      	muls	r5, r1
   17a88:	4651      	mov	r1, sl
   17a8a:	444d      	add	r5, r9
   17a8c:	0c0f      	lsrs	r7, r1, #16
   17a8e:	197d      	adds	r5, r7, r5
   17a90:	45a9      	cmp	r9, r5
   17a92:	d903      	bls.n	17a9c <__aeabi_dmul+0x2fc>
   17a94:	2180      	movs	r1, #128	; 0x80
   17a96:	0249      	lsls	r1, r1, #9
   17a98:	4688      	mov	r8, r1
   17a9a:	4444      	add	r4, r8
   17a9c:	9f04      	ldr	r7, [sp, #16]
   17a9e:	9903      	ldr	r1, [sp, #12]
   17aa0:	46b8      	mov	r8, r7
   17aa2:	4441      	add	r1, r8
   17aa4:	468b      	mov	fp, r1
   17aa6:	4583      	cmp	fp, r0
   17aa8:	4180      	sbcs	r0, r0
   17aaa:	4241      	negs	r1, r0
   17aac:	4688      	mov	r8, r1
   17aae:	4651      	mov	r1, sl
   17ab0:	0408      	lsls	r0, r1, #16
   17ab2:	042f      	lsls	r7, r5, #16
   17ab4:	0c00      	lsrs	r0, r0, #16
   17ab6:	183f      	adds	r7, r7, r0
   17ab8:	4658      	mov	r0, fp
   17aba:	9902      	ldr	r1, [sp, #8]
   17abc:	1810      	adds	r0, r2, r0
   17abe:	4689      	mov	r9, r1
   17ac0:	4290      	cmp	r0, r2
   17ac2:	4192      	sbcs	r2, r2
   17ac4:	444f      	add	r7, r9
   17ac6:	46ba      	mov	sl, r7
   17ac8:	4252      	negs	r2, r2
   17aca:	4699      	mov	r9, r3
   17acc:	4693      	mov	fp, r2
   17ace:	44c2      	add	sl, r8
   17ad0:	44d1      	add	r9, sl
   17ad2:	44cb      	add	fp, r9
   17ad4:	428f      	cmp	r7, r1
   17ad6:	41bf      	sbcs	r7, r7
   17ad8:	45c2      	cmp	sl, r8
   17ada:	4189      	sbcs	r1, r1
   17adc:	4599      	cmp	r9, r3
   17ade:	419b      	sbcs	r3, r3
   17ae0:	4593      	cmp	fp, r2
   17ae2:	4192      	sbcs	r2, r2
   17ae4:	427f      	negs	r7, r7
   17ae6:	4249      	negs	r1, r1
   17ae8:	0c2d      	lsrs	r5, r5, #16
   17aea:	4252      	negs	r2, r2
   17aec:	430f      	orrs	r7, r1
   17aee:	425b      	negs	r3, r3
   17af0:	4313      	orrs	r3, r2
   17af2:	197f      	adds	r7, r7, r5
   17af4:	18ff      	adds	r7, r7, r3
   17af6:	465b      	mov	r3, fp
   17af8:	193c      	adds	r4, r7, r4
   17afa:	0ddb      	lsrs	r3, r3, #23
   17afc:	9a05      	ldr	r2, [sp, #20]
   17afe:	0264      	lsls	r4, r4, #9
   17b00:	431c      	orrs	r4, r3
   17b02:	0243      	lsls	r3, r0, #9
   17b04:	4313      	orrs	r3, r2
   17b06:	1e5d      	subs	r5, r3, #1
   17b08:	41ab      	sbcs	r3, r5
   17b0a:	465a      	mov	r2, fp
   17b0c:	0dc0      	lsrs	r0, r0, #23
   17b0e:	4303      	orrs	r3, r0
   17b10:	0252      	lsls	r2, r2, #9
   17b12:	4313      	orrs	r3, r2
   17b14:	01e2      	lsls	r2, r4, #7
   17b16:	d556      	bpl.n	17bc6 <__aeabi_dmul+0x426>
   17b18:	2001      	movs	r0, #1
   17b1a:	085a      	lsrs	r2, r3, #1
   17b1c:	4003      	ands	r3, r0
   17b1e:	4313      	orrs	r3, r2
   17b20:	07e2      	lsls	r2, r4, #31
   17b22:	4313      	orrs	r3, r2
   17b24:	0864      	lsrs	r4, r4, #1
   17b26:	485a      	ldr	r0, [pc, #360]	; (17c90 <__aeabi_dmul+0x4f0>)
   17b28:	4460      	add	r0, ip
   17b2a:	2800      	cmp	r0, #0
   17b2c:	dd4d      	ble.n	17bca <__aeabi_dmul+0x42a>
   17b2e:	075a      	lsls	r2, r3, #29
   17b30:	d009      	beq.n	17b46 <__aeabi_dmul+0x3a6>
   17b32:	220f      	movs	r2, #15
   17b34:	401a      	ands	r2, r3
   17b36:	2a04      	cmp	r2, #4
   17b38:	d005      	beq.n	17b46 <__aeabi_dmul+0x3a6>
   17b3a:	1d1a      	adds	r2, r3, #4
   17b3c:	429a      	cmp	r2, r3
   17b3e:	419b      	sbcs	r3, r3
   17b40:	425b      	negs	r3, r3
   17b42:	18e4      	adds	r4, r4, r3
   17b44:	0013      	movs	r3, r2
   17b46:	01e2      	lsls	r2, r4, #7
   17b48:	d504      	bpl.n	17b54 <__aeabi_dmul+0x3b4>
   17b4a:	2080      	movs	r0, #128	; 0x80
   17b4c:	4a51      	ldr	r2, [pc, #324]	; (17c94 <__aeabi_dmul+0x4f4>)
   17b4e:	00c0      	lsls	r0, r0, #3
   17b50:	4014      	ands	r4, r2
   17b52:	4460      	add	r0, ip
   17b54:	4a50      	ldr	r2, [pc, #320]	; (17c98 <__aeabi_dmul+0x4f8>)
   17b56:	4290      	cmp	r0, r2
   17b58:	dd00      	ble.n	17b5c <__aeabi_dmul+0x3bc>
   17b5a:	e6e3      	b.n	17924 <__aeabi_dmul+0x184>
   17b5c:	2501      	movs	r5, #1
   17b5e:	08db      	lsrs	r3, r3, #3
   17b60:	0762      	lsls	r2, r4, #29
   17b62:	431a      	orrs	r2, r3
   17b64:	0264      	lsls	r4, r4, #9
   17b66:	9b01      	ldr	r3, [sp, #4]
   17b68:	4691      	mov	r9, r2
   17b6a:	0b22      	lsrs	r2, r4, #12
   17b6c:	0544      	lsls	r4, r0, #21
   17b6e:	0d64      	lsrs	r4, r4, #21
   17b70:	401d      	ands	r5, r3
   17b72:	e67c      	b.n	1786e <__aeabi_dmul+0xce>
   17b74:	2280      	movs	r2, #128	; 0x80
   17b76:	4659      	mov	r1, fp
   17b78:	0312      	lsls	r2, r2, #12
   17b7a:	4211      	tst	r1, r2
   17b7c:	d008      	beq.n	17b90 <__aeabi_dmul+0x3f0>
   17b7e:	4214      	tst	r4, r2
   17b80:	d106      	bne.n	17b90 <__aeabi_dmul+0x3f0>
   17b82:	4322      	orrs	r2, r4
   17b84:	0312      	lsls	r2, r2, #12
   17b86:	0b12      	lsrs	r2, r2, #12
   17b88:	4645      	mov	r5, r8
   17b8a:	4699      	mov	r9, r3
   17b8c:	4c43      	ldr	r4, [pc, #268]	; (17c9c <__aeabi_dmul+0x4fc>)
   17b8e:	e66e      	b.n	1786e <__aeabi_dmul+0xce>
   17b90:	465b      	mov	r3, fp
   17b92:	431a      	orrs	r2, r3
   17b94:	0312      	lsls	r2, r2, #12
   17b96:	0b12      	lsrs	r2, r2, #12
   17b98:	4c40      	ldr	r4, [pc, #256]	; (17c9c <__aeabi_dmul+0x4fc>)
   17b9a:	e668      	b.n	1786e <__aeabi_dmul+0xce>
   17b9c:	0003      	movs	r3, r0
   17b9e:	4654      	mov	r4, sl
   17ba0:	3b28      	subs	r3, #40	; 0x28
   17ba2:	409c      	lsls	r4, r3
   17ba4:	2300      	movs	r3, #0
   17ba6:	e6b9      	b.n	1791c <__aeabi_dmul+0x17c>
   17ba8:	f000 fcea 	bl	18580 <__clzsi2>
   17bac:	3020      	adds	r0, #32
   17bae:	e6a6      	b.n	178fe <__aeabi_dmul+0x15e>
   17bb0:	0003      	movs	r3, r0
   17bb2:	3b28      	subs	r3, #40	; 0x28
   17bb4:	409f      	lsls	r7, r3
   17bb6:	2300      	movs	r3, #0
   17bb8:	46bb      	mov	fp, r7
   17bba:	4699      	mov	r9, r3
   17bbc:	e68a      	b.n	178d4 <__aeabi_dmul+0x134>
   17bbe:	f000 fcdf 	bl	18580 <__clzsi2>
   17bc2:	3020      	adds	r0, #32
   17bc4:	e674      	b.n	178b0 <__aeabi_dmul+0x110>
   17bc6:	46b4      	mov	ip, r6
   17bc8:	e7ad      	b.n	17b26 <__aeabi_dmul+0x386>
   17bca:	2501      	movs	r5, #1
   17bcc:	1a2a      	subs	r2, r5, r0
   17bce:	2a38      	cmp	r2, #56	; 0x38
   17bd0:	dd06      	ble.n	17be0 <__aeabi_dmul+0x440>
   17bd2:	9b01      	ldr	r3, [sp, #4]
   17bd4:	2400      	movs	r4, #0
   17bd6:	401d      	ands	r5, r3
   17bd8:	2300      	movs	r3, #0
   17bda:	2200      	movs	r2, #0
   17bdc:	4699      	mov	r9, r3
   17bde:	e646      	b.n	1786e <__aeabi_dmul+0xce>
   17be0:	2a1f      	cmp	r2, #31
   17be2:	dc21      	bgt.n	17c28 <__aeabi_dmul+0x488>
   17be4:	2520      	movs	r5, #32
   17be6:	0020      	movs	r0, r4
   17be8:	1aad      	subs	r5, r5, r2
   17bea:	001e      	movs	r6, r3
   17bec:	40ab      	lsls	r3, r5
   17bee:	40a8      	lsls	r0, r5
   17bf0:	40d6      	lsrs	r6, r2
   17bf2:	1e5d      	subs	r5, r3, #1
   17bf4:	41ab      	sbcs	r3, r5
   17bf6:	4330      	orrs	r0, r6
   17bf8:	4318      	orrs	r0, r3
   17bfa:	40d4      	lsrs	r4, r2
   17bfc:	0743      	lsls	r3, r0, #29
   17bfe:	d009      	beq.n	17c14 <__aeabi_dmul+0x474>
   17c00:	230f      	movs	r3, #15
   17c02:	4003      	ands	r3, r0
   17c04:	2b04      	cmp	r3, #4
   17c06:	d005      	beq.n	17c14 <__aeabi_dmul+0x474>
   17c08:	0003      	movs	r3, r0
   17c0a:	1d18      	adds	r0, r3, #4
   17c0c:	4298      	cmp	r0, r3
   17c0e:	419b      	sbcs	r3, r3
   17c10:	425b      	negs	r3, r3
   17c12:	18e4      	adds	r4, r4, r3
   17c14:	0223      	lsls	r3, r4, #8
   17c16:	d521      	bpl.n	17c5c <__aeabi_dmul+0x4bc>
   17c18:	2501      	movs	r5, #1
   17c1a:	9b01      	ldr	r3, [sp, #4]
   17c1c:	2401      	movs	r4, #1
   17c1e:	401d      	ands	r5, r3
   17c20:	2300      	movs	r3, #0
   17c22:	2200      	movs	r2, #0
   17c24:	4699      	mov	r9, r3
   17c26:	e622      	b.n	1786e <__aeabi_dmul+0xce>
   17c28:	251f      	movs	r5, #31
   17c2a:	0021      	movs	r1, r4
   17c2c:	426d      	negs	r5, r5
   17c2e:	1a28      	subs	r0, r5, r0
   17c30:	40c1      	lsrs	r1, r0
   17c32:	0008      	movs	r0, r1
   17c34:	2a20      	cmp	r2, #32
   17c36:	d01d      	beq.n	17c74 <__aeabi_dmul+0x4d4>
   17c38:	355f      	adds	r5, #95	; 0x5f
   17c3a:	1aaa      	subs	r2, r5, r2
   17c3c:	4094      	lsls	r4, r2
   17c3e:	4323      	orrs	r3, r4
   17c40:	1e5c      	subs	r4, r3, #1
   17c42:	41a3      	sbcs	r3, r4
   17c44:	2507      	movs	r5, #7
   17c46:	4303      	orrs	r3, r0
   17c48:	401d      	ands	r5, r3
   17c4a:	2200      	movs	r2, #0
   17c4c:	2d00      	cmp	r5, #0
   17c4e:	d009      	beq.n	17c64 <__aeabi_dmul+0x4c4>
   17c50:	220f      	movs	r2, #15
   17c52:	2400      	movs	r4, #0
   17c54:	401a      	ands	r2, r3
   17c56:	0018      	movs	r0, r3
   17c58:	2a04      	cmp	r2, #4
   17c5a:	d1d6      	bne.n	17c0a <__aeabi_dmul+0x46a>
   17c5c:	0003      	movs	r3, r0
   17c5e:	0765      	lsls	r5, r4, #29
   17c60:	0264      	lsls	r4, r4, #9
   17c62:	0b22      	lsrs	r2, r4, #12
   17c64:	08db      	lsrs	r3, r3, #3
   17c66:	432b      	orrs	r3, r5
   17c68:	2501      	movs	r5, #1
   17c6a:	4699      	mov	r9, r3
   17c6c:	9b01      	ldr	r3, [sp, #4]
   17c6e:	2400      	movs	r4, #0
   17c70:	401d      	ands	r5, r3
   17c72:	e5fc      	b.n	1786e <__aeabi_dmul+0xce>
   17c74:	2400      	movs	r4, #0
   17c76:	e7e2      	b.n	17c3e <__aeabi_dmul+0x49e>
   17c78:	2280      	movs	r2, #128	; 0x80
   17c7a:	2501      	movs	r5, #1
   17c7c:	0312      	lsls	r2, r2, #12
   17c7e:	4322      	orrs	r2, r4
   17c80:	9901      	ldr	r1, [sp, #4]
   17c82:	0312      	lsls	r2, r2, #12
   17c84:	0b12      	lsrs	r2, r2, #12
   17c86:	400d      	ands	r5, r1
   17c88:	4699      	mov	r9, r3
   17c8a:	4c04      	ldr	r4, [pc, #16]	; (17c9c <__aeabi_dmul+0x4fc>)
   17c8c:	e5ef      	b.n	1786e <__aeabi_dmul+0xce>
   17c8e:	46c0      	nop			; (mov r8, r8)
   17c90:	000003ff 	.word	0x000003ff
   17c94:	feffffff 	.word	0xfeffffff
   17c98:	000007fe 	.word	0x000007fe
   17c9c:	000007ff 	.word	0x000007ff

00017ca0 <__aeabi_dsub>:
   17ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   17ca2:	4646      	mov	r6, r8
   17ca4:	46d6      	mov	lr, sl
   17ca6:	464f      	mov	r7, r9
   17ca8:	030c      	lsls	r4, r1, #12
   17caa:	b5c0      	push	{r6, r7, lr}
   17cac:	0fcd      	lsrs	r5, r1, #31
   17cae:	004e      	lsls	r6, r1, #1
   17cb0:	0a61      	lsrs	r1, r4, #9
   17cb2:	0f44      	lsrs	r4, r0, #29
   17cb4:	430c      	orrs	r4, r1
   17cb6:	00c1      	lsls	r1, r0, #3
   17cb8:	0058      	lsls	r0, r3, #1
   17cba:	0d40      	lsrs	r0, r0, #21
   17cbc:	4684      	mov	ip, r0
   17cbe:	468a      	mov	sl, r1
   17cc0:	000f      	movs	r7, r1
   17cc2:	0319      	lsls	r1, r3, #12
   17cc4:	0f50      	lsrs	r0, r2, #29
   17cc6:	0a49      	lsrs	r1, r1, #9
   17cc8:	4301      	orrs	r1, r0
   17cca:	48c6      	ldr	r0, [pc, #792]	; (17fe4 <__aeabi_dsub+0x344>)
   17ccc:	0d76      	lsrs	r6, r6, #21
   17cce:	46a8      	mov	r8, r5
   17cd0:	0fdb      	lsrs	r3, r3, #31
   17cd2:	00d2      	lsls	r2, r2, #3
   17cd4:	4584      	cmp	ip, r0
   17cd6:	d100      	bne.n	17cda <__aeabi_dsub+0x3a>
   17cd8:	e0d8      	b.n	17e8c <__aeabi_dsub+0x1ec>
   17cda:	2001      	movs	r0, #1
   17cdc:	4043      	eors	r3, r0
   17cde:	42ab      	cmp	r3, r5
   17ce0:	d100      	bne.n	17ce4 <__aeabi_dsub+0x44>
   17ce2:	e0a6      	b.n	17e32 <__aeabi_dsub+0x192>
   17ce4:	4660      	mov	r0, ip
   17ce6:	1a35      	subs	r5, r6, r0
   17ce8:	2d00      	cmp	r5, #0
   17cea:	dc00      	bgt.n	17cee <__aeabi_dsub+0x4e>
   17cec:	e105      	b.n	17efa <__aeabi_dsub+0x25a>
   17cee:	2800      	cmp	r0, #0
   17cf0:	d110      	bne.n	17d14 <__aeabi_dsub+0x74>
   17cf2:	000b      	movs	r3, r1
   17cf4:	4313      	orrs	r3, r2
   17cf6:	d100      	bne.n	17cfa <__aeabi_dsub+0x5a>
   17cf8:	e0d7      	b.n	17eaa <__aeabi_dsub+0x20a>
   17cfa:	1e6b      	subs	r3, r5, #1
   17cfc:	2b00      	cmp	r3, #0
   17cfe:	d000      	beq.n	17d02 <__aeabi_dsub+0x62>
   17d00:	e14b      	b.n	17f9a <__aeabi_dsub+0x2fa>
   17d02:	4653      	mov	r3, sl
   17d04:	1a9f      	subs	r7, r3, r2
   17d06:	45ba      	cmp	sl, r7
   17d08:	4180      	sbcs	r0, r0
   17d0a:	1a64      	subs	r4, r4, r1
   17d0c:	4240      	negs	r0, r0
   17d0e:	1a24      	subs	r4, r4, r0
   17d10:	2601      	movs	r6, #1
   17d12:	e01e      	b.n	17d52 <__aeabi_dsub+0xb2>
   17d14:	4bb3      	ldr	r3, [pc, #716]	; (17fe4 <__aeabi_dsub+0x344>)
   17d16:	429e      	cmp	r6, r3
   17d18:	d048      	beq.n	17dac <__aeabi_dsub+0x10c>
   17d1a:	2380      	movs	r3, #128	; 0x80
   17d1c:	041b      	lsls	r3, r3, #16
   17d1e:	4319      	orrs	r1, r3
   17d20:	2d38      	cmp	r5, #56	; 0x38
   17d22:	dd00      	ble.n	17d26 <__aeabi_dsub+0x86>
   17d24:	e119      	b.n	17f5a <__aeabi_dsub+0x2ba>
   17d26:	2d1f      	cmp	r5, #31
   17d28:	dd00      	ble.n	17d2c <__aeabi_dsub+0x8c>
   17d2a:	e14c      	b.n	17fc6 <__aeabi_dsub+0x326>
   17d2c:	2320      	movs	r3, #32
   17d2e:	000f      	movs	r7, r1
   17d30:	1b5b      	subs	r3, r3, r5
   17d32:	0010      	movs	r0, r2
   17d34:	409a      	lsls	r2, r3
   17d36:	409f      	lsls	r7, r3
   17d38:	40e8      	lsrs	r0, r5
   17d3a:	1e53      	subs	r3, r2, #1
   17d3c:	419a      	sbcs	r2, r3
   17d3e:	40e9      	lsrs	r1, r5
   17d40:	4307      	orrs	r7, r0
   17d42:	4317      	orrs	r7, r2
   17d44:	4653      	mov	r3, sl
   17d46:	1bdf      	subs	r7, r3, r7
   17d48:	1a61      	subs	r1, r4, r1
   17d4a:	45ba      	cmp	sl, r7
   17d4c:	41a4      	sbcs	r4, r4
   17d4e:	4264      	negs	r4, r4
   17d50:	1b0c      	subs	r4, r1, r4
   17d52:	0223      	lsls	r3, r4, #8
   17d54:	d400      	bmi.n	17d58 <__aeabi_dsub+0xb8>
   17d56:	e0c5      	b.n	17ee4 <__aeabi_dsub+0x244>
   17d58:	0264      	lsls	r4, r4, #9
   17d5a:	0a65      	lsrs	r5, r4, #9
   17d5c:	2d00      	cmp	r5, #0
   17d5e:	d100      	bne.n	17d62 <__aeabi_dsub+0xc2>
   17d60:	e0f6      	b.n	17f50 <__aeabi_dsub+0x2b0>
   17d62:	0028      	movs	r0, r5
   17d64:	f000 fc0c 	bl	18580 <__clzsi2>
   17d68:	0003      	movs	r3, r0
   17d6a:	3b08      	subs	r3, #8
   17d6c:	2b1f      	cmp	r3, #31
   17d6e:	dd00      	ble.n	17d72 <__aeabi_dsub+0xd2>
   17d70:	e0e9      	b.n	17f46 <__aeabi_dsub+0x2a6>
   17d72:	2220      	movs	r2, #32
   17d74:	003c      	movs	r4, r7
   17d76:	1ad2      	subs	r2, r2, r3
   17d78:	409d      	lsls	r5, r3
   17d7a:	40d4      	lsrs	r4, r2
   17d7c:	409f      	lsls	r7, r3
   17d7e:	4325      	orrs	r5, r4
   17d80:	429e      	cmp	r6, r3
   17d82:	dd00      	ble.n	17d86 <__aeabi_dsub+0xe6>
   17d84:	e0db      	b.n	17f3e <__aeabi_dsub+0x29e>
   17d86:	1b9e      	subs	r6, r3, r6
   17d88:	1c73      	adds	r3, r6, #1
   17d8a:	2b1f      	cmp	r3, #31
   17d8c:	dd00      	ble.n	17d90 <__aeabi_dsub+0xf0>
   17d8e:	e10a      	b.n	17fa6 <__aeabi_dsub+0x306>
   17d90:	2220      	movs	r2, #32
   17d92:	0038      	movs	r0, r7
   17d94:	1ad2      	subs	r2, r2, r3
   17d96:	0029      	movs	r1, r5
   17d98:	4097      	lsls	r7, r2
   17d9a:	002c      	movs	r4, r5
   17d9c:	4091      	lsls	r1, r2
   17d9e:	40d8      	lsrs	r0, r3
   17da0:	1e7a      	subs	r2, r7, #1
   17da2:	4197      	sbcs	r7, r2
   17da4:	40dc      	lsrs	r4, r3
   17da6:	2600      	movs	r6, #0
   17da8:	4301      	orrs	r1, r0
   17daa:	430f      	orrs	r7, r1
   17dac:	077b      	lsls	r3, r7, #29
   17dae:	d009      	beq.n	17dc4 <__aeabi_dsub+0x124>
   17db0:	230f      	movs	r3, #15
   17db2:	403b      	ands	r3, r7
   17db4:	2b04      	cmp	r3, #4
   17db6:	d005      	beq.n	17dc4 <__aeabi_dsub+0x124>
   17db8:	1d3b      	adds	r3, r7, #4
   17dba:	42bb      	cmp	r3, r7
   17dbc:	41bf      	sbcs	r7, r7
   17dbe:	427f      	negs	r7, r7
   17dc0:	19e4      	adds	r4, r4, r7
   17dc2:	001f      	movs	r7, r3
   17dc4:	0223      	lsls	r3, r4, #8
   17dc6:	d525      	bpl.n	17e14 <__aeabi_dsub+0x174>
   17dc8:	4b86      	ldr	r3, [pc, #536]	; (17fe4 <__aeabi_dsub+0x344>)
   17dca:	3601      	adds	r6, #1
   17dcc:	429e      	cmp	r6, r3
   17dce:	d100      	bne.n	17dd2 <__aeabi_dsub+0x132>
   17dd0:	e0af      	b.n	17f32 <__aeabi_dsub+0x292>
   17dd2:	4b85      	ldr	r3, [pc, #532]	; (17fe8 <__aeabi_dsub+0x348>)
   17dd4:	2501      	movs	r5, #1
   17dd6:	401c      	ands	r4, r3
   17dd8:	4643      	mov	r3, r8
   17dda:	0762      	lsls	r2, r4, #29
   17ddc:	08ff      	lsrs	r7, r7, #3
   17dde:	0264      	lsls	r4, r4, #9
   17de0:	0576      	lsls	r6, r6, #21
   17de2:	4317      	orrs	r7, r2
   17de4:	0b24      	lsrs	r4, r4, #12
   17de6:	0d76      	lsrs	r6, r6, #21
   17de8:	401d      	ands	r5, r3
   17dea:	2100      	movs	r1, #0
   17dec:	0324      	lsls	r4, r4, #12
   17dee:	0b23      	lsrs	r3, r4, #12
   17df0:	0d0c      	lsrs	r4, r1, #20
   17df2:	4a7e      	ldr	r2, [pc, #504]	; (17fec <__aeabi_dsub+0x34c>)
   17df4:	0524      	lsls	r4, r4, #20
   17df6:	431c      	orrs	r4, r3
   17df8:	4014      	ands	r4, r2
   17dfa:	0533      	lsls	r3, r6, #20
   17dfc:	4323      	orrs	r3, r4
   17dfe:	005b      	lsls	r3, r3, #1
   17e00:	07ed      	lsls	r5, r5, #31
   17e02:	085b      	lsrs	r3, r3, #1
   17e04:	432b      	orrs	r3, r5
   17e06:	0038      	movs	r0, r7
   17e08:	0019      	movs	r1, r3
   17e0a:	bc1c      	pop	{r2, r3, r4}
   17e0c:	4690      	mov	r8, r2
   17e0e:	4699      	mov	r9, r3
   17e10:	46a2      	mov	sl, r4
   17e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17e14:	2501      	movs	r5, #1
   17e16:	4643      	mov	r3, r8
   17e18:	0762      	lsls	r2, r4, #29
   17e1a:	08ff      	lsrs	r7, r7, #3
   17e1c:	4317      	orrs	r7, r2
   17e1e:	08e4      	lsrs	r4, r4, #3
   17e20:	401d      	ands	r5, r3
   17e22:	4b70      	ldr	r3, [pc, #448]	; (17fe4 <__aeabi_dsub+0x344>)
   17e24:	429e      	cmp	r6, r3
   17e26:	d036      	beq.n	17e96 <__aeabi_dsub+0x1f6>
   17e28:	0324      	lsls	r4, r4, #12
   17e2a:	0576      	lsls	r6, r6, #21
   17e2c:	0b24      	lsrs	r4, r4, #12
   17e2e:	0d76      	lsrs	r6, r6, #21
   17e30:	e7db      	b.n	17dea <__aeabi_dsub+0x14a>
   17e32:	4663      	mov	r3, ip
   17e34:	1af3      	subs	r3, r6, r3
   17e36:	2b00      	cmp	r3, #0
   17e38:	dc00      	bgt.n	17e3c <__aeabi_dsub+0x19c>
   17e3a:	e094      	b.n	17f66 <__aeabi_dsub+0x2c6>
   17e3c:	4660      	mov	r0, ip
   17e3e:	2800      	cmp	r0, #0
   17e40:	d035      	beq.n	17eae <__aeabi_dsub+0x20e>
   17e42:	4868      	ldr	r0, [pc, #416]	; (17fe4 <__aeabi_dsub+0x344>)
   17e44:	4286      	cmp	r6, r0
   17e46:	d0b1      	beq.n	17dac <__aeabi_dsub+0x10c>
   17e48:	2780      	movs	r7, #128	; 0x80
   17e4a:	043f      	lsls	r7, r7, #16
   17e4c:	4339      	orrs	r1, r7
   17e4e:	2b38      	cmp	r3, #56	; 0x38
   17e50:	dc00      	bgt.n	17e54 <__aeabi_dsub+0x1b4>
   17e52:	e0fd      	b.n	18050 <__aeabi_dsub+0x3b0>
   17e54:	430a      	orrs	r2, r1
   17e56:	0017      	movs	r7, r2
   17e58:	2100      	movs	r1, #0
   17e5a:	1e7a      	subs	r2, r7, #1
   17e5c:	4197      	sbcs	r7, r2
   17e5e:	4457      	add	r7, sl
   17e60:	4557      	cmp	r7, sl
   17e62:	4180      	sbcs	r0, r0
   17e64:	1909      	adds	r1, r1, r4
   17e66:	4244      	negs	r4, r0
   17e68:	190c      	adds	r4, r1, r4
   17e6a:	0223      	lsls	r3, r4, #8
   17e6c:	d53a      	bpl.n	17ee4 <__aeabi_dsub+0x244>
   17e6e:	4b5d      	ldr	r3, [pc, #372]	; (17fe4 <__aeabi_dsub+0x344>)
   17e70:	3601      	adds	r6, #1
   17e72:	429e      	cmp	r6, r3
   17e74:	d100      	bne.n	17e78 <__aeabi_dsub+0x1d8>
   17e76:	e14b      	b.n	18110 <__aeabi_dsub+0x470>
   17e78:	2201      	movs	r2, #1
   17e7a:	4b5b      	ldr	r3, [pc, #364]	; (17fe8 <__aeabi_dsub+0x348>)
   17e7c:	401c      	ands	r4, r3
   17e7e:	087b      	lsrs	r3, r7, #1
   17e80:	4017      	ands	r7, r2
   17e82:	431f      	orrs	r7, r3
   17e84:	07e2      	lsls	r2, r4, #31
   17e86:	4317      	orrs	r7, r2
   17e88:	0864      	lsrs	r4, r4, #1
   17e8a:	e78f      	b.n	17dac <__aeabi_dsub+0x10c>
   17e8c:	0008      	movs	r0, r1
   17e8e:	4310      	orrs	r0, r2
   17e90:	d000      	beq.n	17e94 <__aeabi_dsub+0x1f4>
   17e92:	e724      	b.n	17cde <__aeabi_dsub+0x3e>
   17e94:	e721      	b.n	17cda <__aeabi_dsub+0x3a>
   17e96:	0023      	movs	r3, r4
   17e98:	433b      	orrs	r3, r7
   17e9a:	d100      	bne.n	17e9e <__aeabi_dsub+0x1fe>
   17e9c:	e1b9      	b.n	18212 <__aeabi_dsub+0x572>
   17e9e:	2280      	movs	r2, #128	; 0x80
   17ea0:	0312      	lsls	r2, r2, #12
   17ea2:	4314      	orrs	r4, r2
   17ea4:	0324      	lsls	r4, r4, #12
   17ea6:	0b24      	lsrs	r4, r4, #12
   17ea8:	e79f      	b.n	17dea <__aeabi_dsub+0x14a>
   17eaa:	002e      	movs	r6, r5
   17eac:	e77e      	b.n	17dac <__aeabi_dsub+0x10c>
   17eae:	0008      	movs	r0, r1
   17eb0:	4310      	orrs	r0, r2
   17eb2:	d100      	bne.n	17eb6 <__aeabi_dsub+0x216>
   17eb4:	e0ca      	b.n	1804c <__aeabi_dsub+0x3ac>
   17eb6:	1e58      	subs	r0, r3, #1
   17eb8:	4684      	mov	ip, r0
   17eba:	2800      	cmp	r0, #0
   17ebc:	d000      	beq.n	17ec0 <__aeabi_dsub+0x220>
   17ebe:	e0e7      	b.n	18090 <__aeabi_dsub+0x3f0>
   17ec0:	4452      	add	r2, sl
   17ec2:	4552      	cmp	r2, sl
   17ec4:	4180      	sbcs	r0, r0
   17ec6:	1864      	adds	r4, r4, r1
   17ec8:	4240      	negs	r0, r0
   17eca:	1824      	adds	r4, r4, r0
   17ecc:	0017      	movs	r7, r2
   17ece:	2601      	movs	r6, #1
   17ed0:	0223      	lsls	r3, r4, #8
   17ed2:	d507      	bpl.n	17ee4 <__aeabi_dsub+0x244>
   17ed4:	2602      	movs	r6, #2
   17ed6:	e7cf      	b.n	17e78 <__aeabi_dsub+0x1d8>
   17ed8:	4664      	mov	r4, ip
   17eda:	432c      	orrs	r4, r5
   17edc:	d100      	bne.n	17ee0 <__aeabi_dsub+0x240>
   17ede:	e1b3      	b.n	18248 <__aeabi_dsub+0x5a8>
   17ee0:	002c      	movs	r4, r5
   17ee2:	4667      	mov	r7, ip
   17ee4:	077b      	lsls	r3, r7, #29
   17ee6:	d000      	beq.n	17eea <__aeabi_dsub+0x24a>
   17ee8:	e762      	b.n	17db0 <__aeabi_dsub+0x110>
   17eea:	0763      	lsls	r3, r4, #29
   17eec:	08ff      	lsrs	r7, r7, #3
   17eee:	431f      	orrs	r7, r3
   17ef0:	2501      	movs	r5, #1
   17ef2:	4643      	mov	r3, r8
   17ef4:	08e4      	lsrs	r4, r4, #3
   17ef6:	401d      	ands	r5, r3
   17ef8:	e793      	b.n	17e22 <__aeabi_dsub+0x182>
   17efa:	2d00      	cmp	r5, #0
   17efc:	d178      	bne.n	17ff0 <__aeabi_dsub+0x350>
   17efe:	1c75      	adds	r5, r6, #1
   17f00:	056d      	lsls	r5, r5, #21
   17f02:	0d6d      	lsrs	r5, r5, #21
   17f04:	2d01      	cmp	r5, #1
   17f06:	dc00      	bgt.n	17f0a <__aeabi_dsub+0x26a>
   17f08:	e0f2      	b.n	180f0 <__aeabi_dsub+0x450>
   17f0a:	4650      	mov	r0, sl
   17f0c:	1a80      	subs	r0, r0, r2
   17f0e:	4582      	cmp	sl, r0
   17f10:	41bf      	sbcs	r7, r7
   17f12:	1a65      	subs	r5, r4, r1
   17f14:	427f      	negs	r7, r7
   17f16:	1bed      	subs	r5, r5, r7
   17f18:	4684      	mov	ip, r0
   17f1a:	0228      	lsls	r0, r5, #8
   17f1c:	d400      	bmi.n	17f20 <__aeabi_dsub+0x280>
   17f1e:	e08c      	b.n	1803a <__aeabi_dsub+0x39a>
   17f20:	4650      	mov	r0, sl
   17f22:	1a17      	subs	r7, r2, r0
   17f24:	42ba      	cmp	r2, r7
   17f26:	4192      	sbcs	r2, r2
   17f28:	1b0c      	subs	r4, r1, r4
   17f2a:	4255      	negs	r5, r2
   17f2c:	1b65      	subs	r5, r4, r5
   17f2e:	4698      	mov	r8, r3
   17f30:	e714      	b.n	17d5c <__aeabi_dsub+0xbc>
   17f32:	2501      	movs	r5, #1
   17f34:	4643      	mov	r3, r8
   17f36:	2400      	movs	r4, #0
   17f38:	401d      	ands	r5, r3
   17f3a:	2700      	movs	r7, #0
   17f3c:	e755      	b.n	17dea <__aeabi_dsub+0x14a>
   17f3e:	4c2a      	ldr	r4, [pc, #168]	; (17fe8 <__aeabi_dsub+0x348>)
   17f40:	1af6      	subs	r6, r6, r3
   17f42:	402c      	ands	r4, r5
   17f44:	e732      	b.n	17dac <__aeabi_dsub+0x10c>
   17f46:	003d      	movs	r5, r7
   17f48:	3828      	subs	r0, #40	; 0x28
   17f4a:	4085      	lsls	r5, r0
   17f4c:	2700      	movs	r7, #0
   17f4e:	e717      	b.n	17d80 <__aeabi_dsub+0xe0>
   17f50:	0038      	movs	r0, r7
   17f52:	f000 fb15 	bl	18580 <__clzsi2>
   17f56:	3020      	adds	r0, #32
   17f58:	e706      	b.n	17d68 <__aeabi_dsub+0xc8>
   17f5a:	430a      	orrs	r2, r1
   17f5c:	0017      	movs	r7, r2
   17f5e:	2100      	movs	r1, #0
   17f60:	1e7a      	subs	r2, r7, #1
   17f62:	4197      	sbcs	r7, r2
   17f64:	e6ee      	b.n	17d44 <__aeabi_dsub+0xa4>
   17f66:	2b00      	cmp	r3, #0
   17f68:	d000      	beq.n	17f6c <__aeabi_dsub+0x2cc>
   17f6a:	e0e5      	b.n	18138 <__aeabi_dsub+0x498>
   17f6c:	1c73      	adds	r3, r6, #1
   17f6e:	469c      	mov	ip, r3
   17f70:	055b      	lsls	r3, r3, #21
   17f72:	0d5b      	lsrs	r3, r3, #21
   17f74:	2b01      	cmp	r3, #1
   17f76:	dc00      	bgt.n	17f7a <__aeabi_dsub+0x2da>
   17f78:	e09f      	b.n	180ba <__aeabi_dsub+0x41a>
   17f7a:	4b1a      	ldr	r3, [pc, #104]	; (17fe4 <__aeabi_dsub+0x344>)
   17f7c:	459c      	cmp	ip, r3
   17f7e:	d100      	bne.n	17f82 <__aeabi_dsub+0x2e2>
   17f80:	e0c5      	b.n	1810e <__aeabi_dsub+0x46e>
   17f82:	4452      	add	r2, sl
   17f84:	4552      	cmp	r2, sl
   17f86:	4180      	sbcs	r0, r0
   17f88:	1864      	adds	r4, r4, r1
   17f8a:	4240      	negs	r0, r0
   17f8c:	1824      	adds	r4, r4, r0
   17f8e:	07e7      	lsls	r7, r4, #31
   17f90:	0852      	lsrs	r2, r2, #1
   17f92:	4317      	orrs	r7, r2
   17f94:	0864      	lsrs	r4, r4, #1
   17f96:	4666      	mov	r6, ip
   17f98:	e708      	b.n	17dac <__aeabi_dsub+0x10c>
   17f9a:	4812      	ldr	r0, [pc, #72]	; (17fe4 <__aeabi_dsub+0x344>)
   17f9c:	4285      	cmp	r5, r0
   17f9e:	d100      	bne.n	17fa2 <__aeabi_dsub+0x302>
   17fa0:	e085      	b.n	180ae <__aeabi_dsub+0x40e>
   17fa2:	001d      	movs	r5, r3
   17fa4:	e6bc      	b.n	17d20 <__aeabi_dsub+0x80>
   17fa6:	0029      	movs	r1, r5
   17fa8:	3e1f      	subs	r6, #31
   17faa:	40f1      	lsrs	r1, r6
   17fac:	2b20      	cmp	r3, #32
   17fae:	d100      	bne.n	17fb2 <__aeabi_dsub+0x312>
   17fb0:	e07f      	b.n	180b2 <__aeabi_dsub+0x412>
   17fb2:	2240      	movs	r2, #64	; 0x40
   17fb4:	1ad3      	subs	r3, r2, r3
   17fb6:	409d      	lsls	r5, r3
   17fb8:	432f      	orrs	r7, r5
   17fba:	1e7d      	subs	r5, r7, #1
   17fbc:	41af      	sbcs	r7, r5
   17fbe:	2400      	movs	r4, #0
   17fc0:	430f      	orrs	r7, r1
   17fc2:	2600      	movs	r6, #0
   17fc4:	e78e      	b.n	17ee4 <__aeabi_dsub+0x244>
   17fc6:	002b      	movs	r3, r5
   17fc8:	000f      	movs	r7, r1
   17fca:	3b20      	subs	r3, #32
   17fcc:	40df      	lsrs	r7, r3
   17fce:	2d20      	cmp	r5, #32
   17fd0:	d071      	beq.n	180b6 <__aeabi_dsub+0x416>
   17fd2:	2340      	movs	r3, #64	; 0x40
   17fd4:	1b5d      	subs	r5, r3, r5
   17fd6:	40a9      	lsls	r1, r5
   17fd8:	430a      	orrs	r2, r1
   17fda:	1e51      	subs	r1, r2, #1
   17fdc:	418a      	sbcs	r2, r1
   17fde:	2100      	movs	r1, #0
   17fe0:	4317      	orrs	r7, r2
   17fe2:	e6af      	b.n	17d44 <__aeabi_dsub+0xa4>
   17fe4:	000007ff 	.word	0x000007ff
   17fe8:	ff7fffff 	.word	0xff7fffff
   17fec:	800fffff 	.word	0x800fffff
   17ff0:	2e00      	cmp	r6, #0
   17ff2:	d03e      	beq.n	18072 <__aeabi_dsub+0x3d2>
   17ff4:	4eb3      	ldr	r6, [pc, #716]	; (182c4 <__aeabi_dsub+0x624>)
   17ff6:	45b4      	cmp	ip, r6
   17ff8:	d045      	beq.n	18086 <__aeabi_dsub+0x3e6>
   17ffa:	2680      	movs	r6, #128	; 0x80
   17ffc:	0436      	lsls	r6, r6, #16
   17ffe:	426d      	negs	r5, r5
   18000:	4334      	orrs	r4, r6
   18002:	2d38      	cmp	r5, #56	; 0x38
   18004:	dd00      	ble.n	18008 <__aeabi_dsub+0x368>
   18006:	e0a8      	b.n	1815a <__aeabi_dsub+0x4ba>
   18008:	2d1f      	cmp	r5, #31
   1800a:	dd00      	ble.n	1800e <__aeabi_dsub+0x36e>
   1800c:	e11f      	b.n	1824e <__aeabi_dsub+0x5ae>
   1800e:	2620      	movs	r6, #32
   18010:	0027      	movs	r7, r4
   18012:	4650      	mov	r0, sl
   18014:	1b76      	subs	r6, r6, r5
   18016:	40b7      	lsls	r7, r6
   18018:	40e8      	lsrs	r0, r5
   1801a:	4307      	orrs	r7, r0
   1801c:	4650      	mov	r0, sl
   1801e:	40b0      	lsls	r0, r6
   18020:	1e46      	subs	r6, r0, #1
   18022:	41b0      	sbcs	r0, r6
   18024:	40ec      	lsrs	r4, r5
   18026:	4338      	orrs	r0, r7
   18028:	1a17      	subs	r7, r2, r0
   1802a:	42ba      	cmp	r2, r7
   1802c:	4192      	sbcs	r2, r2
   1802e:	1b0c      	subs	r4, r1, r4
   18030:	4252      	negs	r2, r2
   18032:	1aa4      	subs	r4, r4, r2
   18034:	4666      	mov	r6, ip
   18036:	4698      	mov	r8, r3
   18038:	e68b      	b.n	17d52 <__aeabi_dsub+0xb2>
   1803a:	4664      	mov	r4, ip
   1803c:	4667      	mov	r7, ip
   1803e:	432c      	orrs	r4, r5
   18040:	d000      	beq.n	18044 <__aeabi_dsub+0x3a4>
   18042:	e68b      	b.n	17d5c <__aeabi_dsub+0xbc>
   18044:	2500      	movs	r5, #0
   18046:	2600      	movs	r6, #0
   18048:	2700      	movs	r7, #0
   1804a:	e6ea      	b.n	17e22 <__aeabi_dsub+0x182>
   1804c:	001e      	movs	r6, r3
   1804e:	e6ad      	b.n	17dac <__aeabi_dsub+0x10c>
   18050:	2b1f      	cmp	r3, #31
   18052:	dc60      	bgt.n	18116 <__aeabi_dsub+0x476>
   18054:	2720      	movs	r7, #32
   18056:	1af8      	subs	r0, r7, r3
   18058:	000f      	movs	r7, r1
   1805a:	4684      	mov	ip, r0
   1805c:	4087      	lsls	r7, r0
   1805e:	0010      	movs	r0, r2
   18060:	40d8      	lsrs	r0, r3
   18062:	4307      	orrs	r7, r0
   18064:	4660      	mov	r0, ip
   18066:	4082      	lsls	r2, r0
   18068:	1e50      	subs	r0, r2, #1
   1806a:	4182      	sbcs	r2, r0
   1806c:	40d9      	lsrs	r1, r3
   1806e:	4317      	orrs	r7, r2
   18070:	e6f5      	b.n	17e5e <__aeabi_dsub+0x1be>
   18072:	0026      	movs	r6, r4
   18074:	4650      	mov	r0, sl
   18076:	4306      	orrs	r6, r0
   18078:	d005      	beq.n	18086 <__aeabi_dsub+0x3e6>
   1807a:	43ed      	mvns	r5, r5
   1807c:	2d00      	cmp	r5, #0
   1807e:	d0d3      	beq.n	18028 <__aeabi_dsub+0x388>
   18080:	4e90      	ldr	r6, [pc, #576]	; (182c4 <__aeabi_dsub+0x624>)
   18082:	45b4      	cmp	ip, r6
   18084:	d1bd      	bne.n	18002 <__aeabi_dsub+0x362>
   18086:	000c      	movs	r4, r1
   18088:	0017      	movs	r7, r2
   1808a:	4666      	mov	r6, ip
   1808c:	4698      	mov	r8, r3
   1808e:	e68d      	b.n	17dac <__aeabi_dsub+0x10c>
   18090:	488c      	ldr	r0, [pc, #560]	; (182c4 <__aeabi_dsub+0x624>)
   18092:	4283      	cmp	r3, r0
   18094:	d00b      	beq.n	180ae <__aeabi_dsub+0x40e>
   18096:	4663      	mov	r3, ip
   18098:	e6d9      	b.n	17e4e <__aeabi_dsub+0x1ae>
   1809a:	2d00      	cmp	r5, #0
   1809c:	d000      	beq.n	180a0 <__aeabi_dsub+0x400>
   1809e:	e096      	b.n	181ce <__aeabi_dsub+0x52e>
   180a0:	0008      	movs	r0, r1
   180a2:	4310      	orrs	r0, r2
   180a4:	d100      	bne.n	180a8 <__aeabi_dsub+0x408>
   180a6:	e0e2      	b.n	1826e <__aeabi_dsub+0x5ce>
   180a8:	000c      	movs	r4, r1
   180aa:	0017      	movs	r7, r2
   180ac:	4698      	mov	r8, r3
   180ae:	4e85      	ldr	r6, [pc, #532]	; (182c4 <__aeabi_dsub+0x624>)
   180b0:	e67c      	b.n	17dac <__aeabi_dsub+0x10c>
   180b2:	2500      	movs	r5, #0
   180b4:	e780      	b.n	17fb8 <__aeabi_dsub+0x318>
   180b6:	2100      	movs	r1, #0
   180b8:	e78e      	b.n	17fd8 <__aeabi_dsub+0x338>
   180ba:	0023      	movs	r3, r4
   180bc:	4650      	mov	r0, sl
   180be:	4303      	orrs	r3, r0
   180c0:	2e00      	cmp	r6, #0
   180c2:	d000      	beq.n	180c6 <__aeabi_dsub+0x426>
   180c4:	e0a8      	b.n	18218 <__aeabi_dsub+0x578>
   180c6:	2b00      	cmp	r3, #0
   180c8:	d100      	bne.n	180cc <__aeabi_dsub+0x42c>
   180ca:	e0de      	b.n	1828a <__aeabi_dsub+0x5ea>
   180cc:	000b      	movs	r3, r1
   180ce:	4313      	orrs	r3, r2
   180d0:	d100      	bne.n	180d4 <__aeabi_dsub+0x434>
   180d2:	e66b      	b.n	17dac <__aeabi_dsub+0x10c>
   180d4:	4452      	add	r2, sl
   180d6:	4552      	cmp	r2, sl
   180d8:	4180      	sbcs	r0, r0
   180da:	1864      	adds	r4, r4, r1
   180dc:	4240      	negs	r0, r0
   180de:	1824      	adds	r4, r4, r0
   180e0:	0017      	movs	r7, r2
   180e2:	0223      	lsls	r3, r4, #8
   180e4:	d400      	bmi.n	180e8 <__aeabi_dsub+0x448>
   180e6:	e6fd      	b.n	17ee4 <__aeabi_dsub+0x244>
   180e8:	4b77      	ldr	r3, [pc, #476]	; (182c8 <__aeabi_dsub+0x628>)
   180ea:	4666      	mov	r6, ip
   180ec:	401c      	ands	r4, r3
   180ee:	e65d      	b.n	17dac <__aeabi_dsub+0x10c>
   180f0:	0025      	movs	r5, r4
   180f2:	4650      	mov	r0, sl
   180f4:	4305      	orrs	r5, r0
   180f6:	2e00      	cmp	r6, #0
   180f8:	d1cf      	bne.n	1809a <__aeabi_dsub+0x3fa>
   180fa:	2d00      	cmp	r5, #0
   180fc:	d14f      	bne.n	1819e <__aeabi_dsub+0x4fe>
   180fe:	000c      	movs	r4, r1
   18100:	4314      	orrs	r4, r2
   18102:	d100      	bne.n	18106 <__aeabi_dsub+0x466>
   18104:	e0a0      	b.n	18248 <__aeabi_dsub+0x5a8>
   18106:	000c      	movs	r4, r1
   18108:	0017      	movs	r7, r2
   1810a:	4698      	mov	r8, r3
   1810c:	e64e      	b.n	17dac <__aeabi_dsub+0x10c>
   1810e:	4666      	mov	r6, ip
   18110:	2400      	movs	r4, #0
   18112:	2700      	movs	r7, #0
   18114:	e685      	b.n	17e22 <__aeabi_dsub+0x182>
   18116:	001f      	movs	r7, r3
   18118:	0008      	movs	r0, r1
   1811a:	3f20      	subs	r7, #32
   1811c:	40f8      	lsrs	r0, r7
   1811e:	0007      	movs	r7, r0
   18120:	2b20      	cmp	r3, #32
   18122:	d100      	bne.n	18126 <__aeabi_dsub+0x486>
   18124:	e08e      	b.n	18244 <__aeabi_dsub+0x5a4>
   18126:	2040      	movs	r0, #64	; 0x40
   18128:	1ac3      	subs	r3, r0, r3
   1812a:	4099      	lsls	r1, r3
   1812c:	430a      	orrs	r2, r1
   1812e:	1e51      	subs	r1, r2, #1
   18130:	418a      	sbcs	r2, r1
   18132:	2100      	movs	r1, #0
   18134:	4317      	orrs	r7, r2
   18136:	e692      	b.n	17e5e <__aeabi_dsub+0x1be>
   18138:	2e00      	cmp	r6, #0
   1813a:	d114      	bne.n	18166 <__aeabi_dsub+0x4c6>
   1813c:	0026      	movs	r6, r4
   1813e:	4650      	mov	r0, sl
   18140:	4306      	orrs	r6, r0
   18142:	d062      	beq.n	1820a <__aeabi_dsub+0x56a>
   18144:	43db      	mvns	r3, r3
   18146:	2b00      	cmp	r3, #0
   18148:	d15c      	bne.n	18204 <__aeabi_dsub+0x564>
   1814a:	1887      	adds	r7, r0, r2
   1814c:	4297      	cmp	r7, r2
   1814e:	4192      	sbcs	r2, r2
   18150:	1864      	adds	r4, r4, r1
   18152:	4252      	negs	r2, r2
   18154:	18a4      	adds	r4, r4, r2
   18156:	4666      	mov	r6, ip
   18158:	e687      	b.n	17e6a <__aeabi_dsub+0x1ca>
   1815a:	4650      	mov	r0, sl
   1815c:	4320      	orrs	r0, r4
   1815e:	1e44      	subs	r4, r0, #1
   18160:	41a0      	sbcs	r0, r4
   18162:	2400      	movs	r4, #0
   18164:	e760      	b.n	18028 <__aeabi_dsub+0x388>
   18166:	4e57      	ldr	r6, [pc, #348]	; (182c4 <__aeabi_dsub+0x624>)
   18168:	45b4      	cmp	ip, r6
   1816a:	d04e      	beq.n	1820a <__aeabi_dsub+0x56a>
   1816c:	2680      	movs	r6, #128	; 0x80
   1816e:	0436      	lsls	r6, r6, #16
   18170:	425b      	negs	r3, r3
   18172:	4334      	orrs	r4, r6
   18174:	2b38      	cmp	r3, #56	; 0x38
   18176:	dd00      	ble.n	1817a <__aeabi_dsub+0x4da>
   18178:	e07f      	b.n	1827a <__aeabi_dsub+0x5da>
   1817a:	2b1f      	cmp	r3, #31
   1817c:	dd00      	ble.n	18180 <__aeabi_dsub+0x4e0>
   1817e:	e08b      	b.n	18298 <__aeabi_dsub+0x5f8>
   18180:	2620      	movs	r6, #32
   18182:	0027      	movs	r7, r4
   18184:	4650      	mov	r0, sl
   18186:	1af6      	subs	r6, r6, r3
   18188:	40b7      	lsls	r7, r6
   1818a:	40d8      	lsrs	r0, r3
   1818c:	4307      	orrs	r7, r0
   1818e:	4650      	mov	r0, sl
   18190:	40b0      	lsls	r0, r6
   18192:	1e46      	subs	r6, r0, #1
   18194:	41b0      	sbcs	r0, r6
   18196:	4307      	orrs	r7, r0
   18198:	40dc      	lsrs	r4, r3
   1819a:	18bf      	adds	r7, r7, r2
   1819c:	e7d6      	b.n	1814c <__aeabi_dsub+0x4ac>
   1819e:	000d      	movs	r5, r1
   181a0:	4315      	orrs	r5, r2
   181a2:	d100      	bne.n	181a6 <__aeabi_dsub+0x506>
   181a4:	e602      	b.n	17dac <__aeabi_dsub+0x10c>
   181a6:	4650      	mov	r0, sl
   181a8:	1a80      	subs	r0, r0, r2
   181aa:	4582      	cmp	sl, r0
   181ac:	41bf      	sbcs	r7, r7
   181ae:	1a65      	subs	r5, r4, r1
   181b0:	427f      	negs	r7, r7
   181b2:	1bed      	subs	r5, r5, r7
   181b4:	4684      	mov	ip, r0
   181b6:	0228      	lsls	r0, r5, #8
   181b8:	d400      	bmi.n	181bc <__aeabi_dsub+0x51c>
   181ba:	e68d      	b.n	17ed8 <__aeabi_dsub+0x238>
   181bc:	4650      	mov	r0, sl
   181be:	1a17      	subs	r7, r2, r0
   181c0:	42ba      	cmp	r2, r7
   181c2:	4192      	sbcs	r2, r2
   181c4:	1b0c      	subs	r4, r1, r4
   181c6:	4252      	negs	r2, r2
   181c8:	1aa4      	subs	r4, r4, r2
   181ca:	4698      	mov	r8, r3
   181cc:	e5ee      	b.n	17dac <__aeabi_dsub+0x10c>
   181ce:	000d      	movs	r5, r1
   181d0:	4315      	orrs	r5, r2
   181d2:	d100      	bne.n	181d6 <__aeabi_dsub+0x536>
   181d4:	e76b      	b.n	180ae <__aeabi_dsub+0x40e>
   181d6:	4650      	mov	r0, sl
   181d8:	0767      	lsls	r7, r4, #29
   181da:	08c0      	lsrs	r0, r0, #3
   181dc:	4307      	orrs	r7, r0
   181de:	2080      	movs	r0, #128	; 0x80
   181e0:	08e4      	lsrs	r4, r4, #3
   181e2:	0300      	lsls	r0, r0, #12
   181e4:	4204      	tst	r4, r0
   181e6:	d007      	beq.n	181f8 <__aeabi_dsub+0x558>
   181e8:	08cd      	lsrs	r5, r1, #3
   181ea:	4205      	tst	r5, r0
   181ec:	d104      	bne.n	181f8 <__aeabi_dsub+0x558>
   181ee:	002c      	movs	r4, r5
   181f0:	4698      	mov	r8, r3
   181f2:	08d7      	lsrs	r7, r2, #3
   181f4:	0749      	lsls	r1, r1, #29
   181f6:	430f      	orrs	r7, r1
   181f8:	0f7b      	lsrs	r3, r7, #29
   181fa:	00e4      	lsls	r4, r4, #3
   181fc:	431c      	orrs	r4, r3
   181fe:	00ff      	lsls	r7, r7, #3
   18200:	4e30      	ldr	r6, [pc, #192]	; (182c4 <__aeabi_dsub+0x624>)
   18202:	e5d3      	b.n	17dac <__aeabi_dsub+0x10c>
   18204:	4e2f      	ldr	r6, [pc, #188]	; (182c4 <__aeabi_dsub+0x624>)
   18206:	45b4      	cmp	ip, r6
   18208:	d1b4      	bne.n	18174 <__aeabi_dsub+0x4d4>
   1820a:	000c      	movs	r4, r1
   1820c:	0017      	movs	r7, r2
   1820e:	4666      	mov	r6, ip
   18210:	e5cc      	b.n	17dac <__aeabi_dsub+0x10c>
   18212:	2700      	movs	r7, #0
   18214:	2400      	movs	r4, #0
   18216:	e5e8      	b.n	17dea <__aeabi_dsub+0x14a>
   18218:	2b00      	cmp	r3, #0
   1821a:	d039      	beq.n	18290 <__aeabi_dsub+0x5f0>
   1821c:	000b      	movs	r3, r1
   1821e:	4313      	orrs	r3, r2
   18220:	d100      	bne.n	18224 <__aeabi_dsub+0x584>
   18222:	e744      	b.n	180ae <__aeabi_dsub+0x40e>
   18224:	08c0      	lsrs	r0, r0, #3
   18226:	0767      	lsls	r7, r4, #29
   18228:	4307      	orrs	r7, r0
   1822a:	2080      	movs	r0, #128	; 0x80
   1822c:	08e4      	lsrs	r4, r4, #3
   1822e:	0300      	lsls	r0, r0, #12
   18230:	4204      	tst	r4, r0
   18232:	d0e1      	beq.n	181f8 <__aeabi_dsub+0x558>
   18234:	08cb      	lsrs	r3, r1, #3
   18236:	4203      	tst	r3, r0
   18238:	d1de      	bne.n	181f8 <__aeabi_dsub+0x558>
   1823a:	08d7      	lsrs	r7, r2, #3
   1823c:	0749      	lsls	r1, r1, #29
   1823e:	430f      	orrs	r7, r1
   18240:	001c      	movs	r4, r3
   18242:	e7d9      	b.n	181f8 <__aeabi_dsub+0x558>
   18244:	2100      	movs	r1, #0
   18246:	e771      	b.n	1812c <__aeabi_dsub+0x48c>
   18248:	2500      	movs	r5, #0
   1824a:	2700      	movs	r7, #0
   1824c:	e5e9      	b.n	17e22 <__aeabi_dsub+0x182>
   1824e:	002e      	movs	r6, r5
   18250:	0027      	movs	r7, r4
   18252:	3e20      	subs	r6, #32
   18254:	40f7      	lsrs	r7, r6
   18256:	2d20      	cmp	r5, #32
   18258:	d02f      	beq.n	182ba <__aeabi_dsub+0x61a>
   1825a:	2640      	movs	r6, #64	; 0x40
   1825c:	1b75      	subs	r5, r6, r5
   1825e:	40ac      	lsls	r4, r5
   18260:	4650      	mov	r0, sl
   18262:	4320      	orrs	r0, r4
   18264:	1e44      	subs	r4, r0, #1
   18266:	41a0      	sbcs	r0, r4
   18268:	2400      	movs	r4, #0
   1826a:	4338      	orrs	r0, r7
   1826c:	e6dc      	b.n	18028 <__aeabi_dsub+0x388>
   1826e:	2480      	movs	r4, #128	; 0x80
   18270:	2500      	movs	r5, #0
   18272:	0324      	lsls	r4, r4, #12
   18274:	4e13      	ldr	r6, [pc, #76]	; (182c4 <__aeabi_dsub+0x624>)
   18276:	2700      	movs	r7, #0
   18278:	e5d3      	b.n	17e22 <__aeabi_dsub+0x182>
   1827a:	4650      	mov	r0, sl
   1827c:	4320      	orrs	r0, r4
   1827e:	0007      	movs	r7, r0
   18280:	1e78      	subs	r0, r7, #1
   18282:	4187      	sbcs	r7, r0
   18284:	2400      	movs	r4, #0
   18286:	18bf      	adds	r7, r7, r2
   18288:	e760      	b.n	1814c <__aeabi_dsub+0x4ac>
   1828a:	000c      	movs	r4, r1
   1828c:	0017      	movs	r7, r2
   1828e:	e58d      	b.n	17dac <__aeabi_dsub+0x10c>
   18290:	000c      	movs	r4, r1
   18292:	0017      	movs	r7, r2
   18294:	4e0b      	ldr	r6, [pc, #44]	; (182c4 <__aeabi_dsub+0x624>)
   18296:	e589      	b.n	17dac <__aeabi_dsub+0x10c>
   18298:	001e      	movs	r6, r3
   1829a:	0027      	movs	r7, r4
   1829c:	3e20      	subs	r6, #32
   1829e:	40f7      	lsrs	r7, r6
   182a0:	2b20      	cmp	r3, #32
   182a2:	d00c      	beq.n	182be <__aeabi_dsub+0x61e>
   182a4:	2640      	movs	r6, #64	; 0x40
   182a6:	1af3      	subs	r3, r6, r3
   182a8:	409c      	lsls	r4, r3
   182aa:	4650      	mov	r0, sl
   182ac:	4320      	orrs	r0, r4
   182ae:	1e44      	subs	r4, r0, #1
   182b0:	41a0      	sbcs	r0, r4
   182b2:	4307      	orrs	r7, r0
   182b4:	2400      	movs	r4, #0
   182b6:	18bf      	adds	r7, r7, r2
   182b8:	e748      	b.n	1814c <__aeabi_dsub+0x4ac>
   182ba:	2400      	movs	r4, #0
   182bc:	e7d0      	b.n	18260 <__aeabi_dsub+0x5c0>
   182be:	2400      	movs	r4, #0
   182c0:	e7f3      	b.n	182aa <__aeabi_dsub+0x60a>
   182c2:	46c0      	nop			; (mov r8, r8)
   182c4:	000007ff 	.word	0x000007ff
   182c8:	ff7fffff 	.word	0xff7fffff

000182cc <__aeabi_dcmpun>:
   182cc:	b570      	push	{r4, r5, r6, lr}
   182ce:	4e0e      	ldr	r6, [pc, #56]	; (18308 <__aeabi_dcmpun+0x3c>)
   182d0:	030d      	lsls	r5, r1, #12
   182d2:	031c      	lsls	r4, r3, #12
   182d4:	0049      	lsls	r1, r1, #1
   182d6:	005b      	lsls	r3, r3, #1
   182d8:	0b2d      	lsrs	r5, r5, #12
   182da:	0d49      	lsrs	r1, r1, #21
   182dc:	0b24      	lsrs	r4, r4, #12
   182de:	0d5b      	lsrs	r3, r3, #21
   182e0:	42b1      	cmp	r1, r6
   182e2:	d004      	beq.n	182ee <__aeabi_dcmpun+0x22>
   182e4:	4908      	ldr	r1, [pc, #32]	; (18308 <__aeabi_dcmpun+0x3c>)
   182e6:	2000      	movs	r0, #0
   182e8:	428b      	cmp	r3, r1
   182ea:	d008      	beq.n	182fe <__aeabi_dcmpun+0x32>
   182ec:	bd70      	pop	{r4, r5, r6, pc}
   182ee:	4305      	orrs	r5, r0
   182f0:	2001      	movs	r0, #1
   182f2:	2d00      	cmp	r5, #0
   182f4:	d1fa      	bne.n	182ec <__aeabi_dcmpun+0x20>
   182f6:	4904      	ldr	r1, [pc, #16]	; (18308 <__aeabi_dcmpun+0x3c>)
   182f8:	2000      	movs	r0, #0
   182fa:	428b      	cmp	r3, r1
   182fc:	d1f6      	bne.n	182ec <__aeabi_dcmpun+0x20>
   182fe:	4314      	orrs	r4, r2
   18300:	0020      	movs	r0, r4
   18302:	1e44      	subs	r4, r0, #1
   18304:	41a0      	sbcs	r0, r4
   18306:	e7f1      	b.n	182ec <__aeabi_dcmpun+0x20>
   18308:	000007ff 	.word	0x000007ff

0001830c <__aeabi_d2iz>:
   1830c:	b530      	push	{r4, r5, lr}
   1830e:	4d13      	ldr	r5, [pc, #76]	; (1835c <__aeabi_d2iz+0x50>)
   18310:	030a      	lsls	r2, r1, #12
   18312:	004b      	lsls	r3, r1, #1
   18314:	0b12      	lsrs	r2, r2, #12
   18316:	0d5b      	lsrs	r3, r3, #21
   18318:	0fc9      	lsrs	r1, r1, #31
   1831a:	2400      	movs	r4, #0
   1831c:	42ab      	cmp	r3, r5
   1831e:	dd10      	ble.n	18342 <__aeabi_d2iz+0x36>
   18320:	4c0f      	ldr	r4, [pc, #60]	; (18360 <__aeabi_d2iz+0x54>)
   18322:	42a3      	cmp	r3, r4
   18324:	dc0f      	bgt.n	18346 <__aeabi_d2iz+0x3a>
   18326:	2480      	movs	r4, #128	; 0x80
   18328:	4d0e      	ldr	r5, [pc, #56]	; (18364 <__aeabi_d2iz+0x58>)
   1832a:	0364      	lsls	r4, r4, #13
   1832c:	4322      	orrs	r2, r4
   1832e:	1aed      	subs	r5, r5, r3
   18330:	2d1f      	cmp	r5, #31
   18332:	dd0b      	ble.n	1834c <__aeabi_d2iz+0x40>
   18334:	480c      	ldr	r0, [pc, #48]	; (18368 <__aeabi_d2iz+0x5c>)
   18336:	1ac3      	subs	r3, r0, r3
   18338:	40da      	lsrs	r2, r3
   1833a:	4254      	negs	r4, r2
   1833c:	2900      	cmp	r1, #0
   1833e:	d100      	bne.n	18342 <__aeabi_d2iz+0x36>
   18340:	0014      	movs	r4, r2
   18342:	0020      	movs	r0, r4
   18344:	bd30      	pop	{r4, r5, pc}
   18346:	4b09      	ldr	r3, [pc, #36]	; (1836c <__aeabi_d2iz+0x60>)
   18348:	18cc      	adds	r4, r1, r3
   1834a:	e7fa      	b.n	18342 <__aeabi_d2iz+0x36>
   1834c:	4c08      	ldr	r4, [pc, #32]	; (18370 <__aeabi_d2iz+0x64>)
   1834e:	40e8      	lsrs	r0, r5
   18350:	46a4      	mov	ip, r4
   18352:	4463      	add	r3, ip
   18354:	409a      	lsls	r2, r3
   18356:	4302      	orrs	r2, r0
   18358:	e7ef      	b.n	1833a <__aeabi_d2iz+0x2e>
   1835a:	46c0      	nop			; (mov r8, r8)
   1835c:	000003fe 	.word	0x000003fe
   18360:	0000041d 	.word	0x0000041d
   18364:	00000433 	.word	0x00000433
   18368:	00000413 	.word	0x00000413
   1836c:	7fffffff 	.word	0x7fffffff
   18370:	fffffbed 	.word	0xfffffbed

00018374 <__aeabi_i2d>:
   18374:	b570      	push	{r4, r5, r6, lr}
   18376:	2800      	cmp	r0, #0
   18378:	d030      	beq.n	183dc <__aeabi_i2d+0x68>
   1837a:	17c3      	asrs	r3, r0, #31
   1837c:	18c4      	adds	r4, r0, r3
   1837e:	405c      	eors	r4, r3
   18380:	0fc5      	lsrs	r5, r0, #31
   18382:	0020      	movs	r0, r4
   18384:	f000 f8fc 	bl	18580 <__clzsi2>
   18388:	4b17      	ldr	r3, [pc, #92]	; (183e8 <__aeabi_i2d+0x74>)
   1838a:	4a18      	ldr	r2, [pc, #96]	; (183ec <__aeabi_i2d+0x78>)
   1838c:	1a1b      	subs	r3, r3, r0
   1838e:	1ad2      	subs	r2, r2, r3
   18390:	2a1f      	cmp	r2, #31
   18392:	dd18      	ble.n	183c6 <__aeabi_i2d+0x52>
   18394:	4a16      	ldr	r2, [pc, #88]	; (183f0 <__aeabi_i2d+0x7c>)
   18396:	1ad2      	subs	r2, r2, r3
   18398:	4094      	lsls	r4, r2
   1839a:	2200      	movs	r2, #0
   1839c:	0324      	lsls	r4, r4, #12
   1839e:	055b      	lsls	r3, r3, #21
   183a0:	0b24      	lsrs	r4, r4, #12
   183a2:	0d5b      	lsrs	r3, r3, #21
   183a4:	2100      	movs	r1, #0
   183a6:	0010      	movs	r0, r2
   183a8:	0324      	lsls	r4, r4, #12
   183aa:	0d0a      	lsrs	r2, r1, #20
   183ac:	0b24      	lsrs	r4, r4, #12
   183ae:	0512      	lsls	r2, r2, #20
   183b0:	4322      	orrs	r2, r4
   183b2:	4c10      	ldr	r4, [pc, #64]	; (183f4 <__aeabi_i2d+0x80>)
   183b4:	051b      	lsls	r3, r3, #20
   183b6:	4022      	ands	r2, r4
   183b8:	4313      	orrs	r3, r2
   183ba:	005b      	lsls	r3, r3, #1
   183bc:	07ed      	lsls	r5, r5, #31
   183be:	085b      	lsrs	r3, r3, #1
   183c0:	432b      	orrs	r3, r5
   183c2:	0019      	movs	r1, r3
   183c4:	bd70      	pop	{r4, r5, r6, pc}
   183c6:	0021      	movs	r1, r4
   183c8:	4091      	lsls	r1, r2
   183ca:	000a      	movs	r2, r1
   183cc:	210b      	movs	r1, #11
   183ce:	1a08      	subs	r0, r1, r0
   183d0:	40c4      	lsrs	r4, r0
   183d2:	055b      	lsls	r3, r3, #21
   183d4:	0324      	lsls	r4, r4, #12
   183d6:	0b24      	lsrs	r4, r4, #12
   183d8:	0d5b      	lsrs	r3, r3, #21
   183da:	e7e3      	b.n	183a4 <__aeabi_i2d+0x30>
   183dc:	2500      	movs	r5, #0
   183de:	2300      	movs	r3, #0
   183e0:	2400      	movs	r4, #0
   183e2:	2200      	movs	r2, #0
   183e4:	e7de      	b.n	183a4 <__aeabi_i2d+0x30>
   183e6:	46c0      	nop			; (mov r8, r8)
   183e8:	0000041e 	.word	0x0000041e
   183ec:	00000433 	.word	0x00000433
   183f0:	00000413 	.word	0x00000413
   183f4:	800fffff 	.word	0x800fffff

000183f8 <__aeabi_ui2d>:
   183f8:	b510      	push	{r4, lr}
   183fa:	1e04      	subs	r4, r0, #0
   183fc:	d028      	beq.n	18450 <__aeabi_ui2d+0x58>
   183fe:	f000 f8bf 	bl	18580 <__clzsi2>
   18402:	4b15      	ldr	r3, [pc, #84]	; (18458 <__aeabi_ui2d+0x60>)
   18404:	4a15      	ldr	r2, [pc, #84]	; (1845c <__aeabi_ui2d+0x64>)
   18406:	1a1b      	subs	r3, r3, r0
   18408:	1ad2      	subs	r2, r2, r3
   1840a:	2a1f      	cmp	r2, #31
   1840c:	dd15      	ble.n	1843a <__aeabi_ui2d+0x42>
   1840e:	4a14      	ldr	r2, [pc, #80]	; (18460 <__aeabi_ui2d+0x68>)
   18410:	1ad2      	subs	r2, r2, r3
   18412:	4094      	lsls	r4, r2
   18414:	2200      	movs	r2, #0
   18416:	0324      	lsls	r4, r4, #12
   18418:	055b      	lsls	r3, r3, #21
   1841a:	0b24      	lsrs	r4, r4, #12
   1841c:	0d5b      	lsrs	r3, r3, #21
   1841e:	2100      	movs	r1, #0
   18420:	0010      	movs	r0, r2
   18422:	0324      	lsls	r4, r4, #12
   18424:	0d0a      	lsrs	r2, r1, #20
   18426:	0b24      	lsrs	r4, r4, #12
   18428:	0512      	lsls	r2, r2, #20
   1842a:	4322      	orrs	r2, r4
   1842c:	4c0d      	ldr	r4, [pc, #52]	; (18464 <__aeabi_ui2d+0x6c>)
   1842e:	051b      	lsls	r3, r3, #20
   18430:	4022      	ands	r2, r4
   18432:	4313      	orrs	r3, r2
   18434:	005b      	lsls	r3, r3, #1
   18436:	0859      	lsrs	r1, r3, #1
   18438:	bd10      	pop	{r4, pc}
   1843a:	0021      	movs	r1, r4
   1843c:	4091      	lsls	r1, r2
   1843e:	000a      	movs	r2, r1
   18440:	210b      	movs	r1, #11
   18442:	1a08      	subs	r0, r1, r0
   18444:	40c4      	lsrs	r4, r0
   18446:	055b      	lsls	r3, r3, #21
   18448:	0324      	lsls	r4, r4, #12
   1844a:	0b24      	lsrs	r4, r4, #12
   1844c:	0d5b      	lsrs	r3, r3, #21
   1844e:	e7e6      	b.n	1841e <__aeabi_ui2d+0x26>
   18450:	2300      	movs	r3, #0
   18452:	2400      	movs	r4, #0
   18454:	2200      	movs	r2, #0
   18456:	e7e2      	b.n	1841e <__aeabi_ui2d+0x26>
   18458:	0000041e 	.word	0x0000041e
   1845c:	00000433 	.word	0x00000433
   18460:	00000413 	.word	0x00000413
   18464:	800fffff 	.word	0x800fffff

00018468 <__aeabi_f2d>:
   18468:	0041      	lsls	r1, r0, #1
   1846a:	0e09      	lsrs	r1, r1, #24
   1846c:	1c4b      	adds	r3, r1, #1
   1846e:	b570      	push	{r4, r5, r6, lr}
   18470:	b2db      	uxtb	r3, r3
   18472:	0246      	lsls	r6, r0, #9
   18474:	0a75      	lsrs	r5, r6, #9
   18476:	0fc4      	lsrs	r4, r0, #31
   18478:	2b01      	cmp	r3, #1
   1847a:	dd14      	ble.n	184a6 <__aeabi_f2d+0x3e>
   1847c:	23e0      	movs	r3, #224	; 0xe0
   1847e:	009b      	lsls	r3, r3, #2
   18480:	076d      	lsls	r5, r5, #29
   18482:	0b36      	lsrs	r6, r6, #12
   18484:	18cb      	adds	r3, r1, r3
   18486:	2100      	movs	r1, #0
   18488:	0d0a      	lsrs	r2, r1, #20
   1848a:	0028      	movs	r0, r5
   1848c:	0512      	lsls	r2, r2, #20
   1848e:	4d1c      	ldr	r5, [pc, #112]	; (18500 <__aeabi_f2d+0x98>)
   18490:	4332      	orrs	r2, r6
   18492:	055b      	lsls	r3, r3, #21
   18494:	402a      	ands	r2, r5
   18496:	085b      	lsrs	r3, r3, #1
   18498:	4313      	orrs	r3, r2
   1849a:	005b      	lsls	r3, r3, #1
   1849c:	07e4      	lsls	r4, r4, #31
   1849e:	085b      	lsrs	r3, r3, #1
   184a0:	4323      	orrs	r3, r4
   184a2:	0019      	movs	r1, r3
   184a4:	bd70      	pop	{r4, r5, r6, pc}
   184a6:	2900      	cmp	r1, #0
   184a8:	d114      	bne.n	184d4 <__aeabi_f2d+0x6c>
   184aa:	2d00      	cmp	r5, #0
   184ac:	d01e      	beq.n	184ec <__aeabi_f2d+0x84>
   184ae:	0028      	movs	r0, r5
   184b0:	f000 f866 	bl	18580 <__clzsi2>
   184b4:	280a      	cmp	r0, #10
   184b6:	dc1c      	bgt.n	184f2 <__aeabi_f2d+0x8a>
   184b8:	230b      	movs	r3, #11
   184ba:	002a      	movs	r2, r5
   184bc:	1a1b      	subs	r3, r3, r0
   184be:	40da      	lsrs	r2, r3
   184c0:	0003      	movs	r3, r0
   184c2:	3315      	adds	r3, #21
   184c4:	409d      	lsls	r5, r3
   184c6:	4b0f      	ldr	r3, [pc, #60]	; (18504 <__aeabi_f2d+0x9c>)
   184c8:	0312      	lsls	r2, r2, #12
   184ca:	1a1b      	subs	r3, r3, r0
   184cc:	055b      	lsls	r3, r3, #21
   184ce:	0b16      	lsrs	r6, r2, #12
   184d0:	0d5b      	lsrs	r3, r3, #21
   184d2:	e7d8      	b.n	18486 <__aeabi_f2d+0x1e>
   184d4:	2d00      	cmp	r5, #0
   184d6:	d006      	beq.n	184e6 <__aeabi_f2d+0x7e>
   184d8:	0b32      	lsrs	r2, r6, #12
   184da:	2680      	movs	r6, #128	; 0x80
   184dc:	0336      	lsls	r6, r6, #12
   184de:	076d      	lsls	r5, r5, #29
   184e0:	4316      	orrs	r6, r2
   184e2:	4b09      	ldr	r3, [pc, #36]	; (18508 <__aeabi_f2d+0xa0>)
   184e4:	e7cf      	b.n	18486 <__aeabi_f2d+0x1e>
   184e6:	4b08      	ldr	r3, [pc, #32]	; (18508 <__aeabi_f2d+0xa0>)
   184e8:	2600      	movs	r6, #0
   184ea:	e7cc      	b.n	18486 <__aeabi_f2d+0x1e>
   184ec:	2300      	movs	r3, #0
   184ee:	2600      	movs	r6, #0
   184f0:	e7c9      	b.n	18486 <__aeabi_f2d+0x1e>
   184f2:	0003      	movs	r3, r0
   184f4:	002a      	movs	r2, r5
   184f6:	3b0b      	subs	r3, #11
   184f8:	409a      	lsls	r2, r3
   184fa:	2500      	movs	r5, #0
   184fc:	e7e3      	b.n	184c6 <__aeabi_f2d+0x5e>
   184fe:	46c0      	nop			; (mov r8, r8)
   18500:	800fffff 	.word	0x800fffff
   18504:	00000389 	.word	0x00000389
   18508:	000007ff 	.word	0x000007ff

0001850c <__aeabi_cfrcmple>:
   1850c:	4684      	mov	ip, r0
   1850e:	1c08      	adds	r0, r1, #0
   18510:	4661      	mov	r1, ip
   18512:	e7ff      	b.n	18514 <__aeabi_cfcmpeq>

00018514 <__aeabi_cfcmpeq>:
   18514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   18516:	f000 f993 	bl	18840 <__lesf2>
   1851a:	2800      	cmp	r0, #0
   1851c:	d401      	bmi.n	18522 <__aeabi_cfcmpeq+0xe>
   1851e:	2100      	movs	r1, #0
   18520:	42c8      	cmn	r0, r1
   18522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00018524 <__aeabi_fcmpeq>:
   18524:	b510      	push	{r4, lr}
   18526:	f000 f925 	bl	18774 <__eqsf2>
   1852a:	4240      	negs	r0, r0
   1852c:	3001      	adds	r0, #1
   1852e:	bd10      	pop	{r4, pc}

00018530 <__aeabi_fcmplt>:
   18530:	b510      	push	{r4, lr}
   18532:	f000 f985 	bl	18840 <__lesf2>
   18536:	2800      	cmp	r0, #0
   18538:	db01      	blt.n	1853e <__aeabi_fcmplt+0xe>
   1853a:	2000      	movs	r0, #0
   1853c:	bd10      	pop	{r4, pc}
   1853e:	2001      	movs	r0, #1
   18540:	bd10      	pop	{r4, pc}
   18542:	46c0      	nop			; (mov r8, r8)

00018544 <__aeabi_fcmple>:
   18544:	b510      	push	{r4, lr}
   18546:	f000 f97b 	bl	18840 <__lesf2>
   1854a:	2800      	cmp	r0, #0
   1854c:	dd01      	ble.n	18552 <__aeabi_fcmple+0xe>
   1854e:	2000      	movs	r0, #0
   18550:	bd10      	pop	{r4, pc}
   18552:	2001      	movs	r0, #1
   18554:	bd10      	pop	{r4, pc}
   18556:	46c0      	nop			; (mov r8, r8)

00018558 <__aeabi_fcmpgt>:
   18558:	b510      	push	{r4, lr}
   1855a:	f000 f931 	bl	187c0 <__gesf2>
   1855e:	2800      	cmp	r0, #0
   18560:	dc01      	bgt.n	18566 <__aeabi_fcmpgt+0xe>
   18562:	2000      	movs	r0, #0
   18564:	bd10      	pop	{r4, pc}
   18566:	2001      	movs	r0, #1
   18568:	bd10      	pop	{r4, pc}
   1856a:	46c0      	nop			; (mov r8, r8)

0001856c <__aeabi_fcmpge>:
   1856c:	b510      	push	{r4, lr}
   1856e:	f000 f927 	bl	187c0 <__gesf2>
   18572:	2800      	cmp	r0, #0
   18574:	da01      	bge.n	1857a <__aeabi_fcmpge+0xe>
   18576:	2000      	movs	r0, #0
   18578:	bd10      	pop	{r4, pc}
   1857a:	2001      	movs	r0, #1
   1857c:	bd10      	pop	{r4, pc}
   1857e:	46c0      	nop			; (mov r8, r8)

00018580 <__clzsi2>:
   18580:	211c      	movs	r1, #28
   18582:	2301      	movs	r3, #1
   18584:	041b      	lsls	r3, r3, #16
   18586:	4298      	cmp	r0, r3
   18588:	d301      	bcc.n	1858e <__clzsi2+0xe>
   1858a:	0c00      	lsrs	r0, r0, #16
   1858c:	3910      	subs	r1, #16
   1858e:	0a1b      	lsrs	r3, r3, #8
   18590:	4298      	cmp	r0, r3
   18592:	d301      	bcc.n	18598 <__clzsi2+0x18>
   18594:	0a00      	lsrs	r0, r0, #8
   18596:	3908      	subs	r1, #8
   18598:	091b      	lsrs	r3, r3, #4
   1859a:	4298      	cmp	r0, r3
   1859c:	d301      	bcc.n	185a2 <__clzsi2+0x22>
   1859e:	0900      	lsrs	r0, r0, #4
   185a0:	3904      	subs	r1, #4
   185a2:	a202      	add	r2, pc, #8	; (adr r2, 185ac <__clzsi2+0x2c>)
   185a4:	5c10      	ldrb	r0, [r2, r0]
   185a6:	1840      	adds	r0, r0, r1
   185a8:	4770      	bx	lr
   185aa:	46c0      	nop			; (mov r8, r8)
   185ac:	02020304 	.word	0x02020304
   185b0:	01010101 	.word	0x01010101
	...

000185bc <__divdi3>:
   185bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   185be:	464e      	mov	r6, r9
   185c0:	4657      	mov	r7, sl
   185c2:	46de      	mov	lr, fp
   185c4:	4645      	mov	r5, r8
   185c6:	b5e0      	push	{r5, r6, r7, lr}
   185c8:	0006      	movs	r6, r0
   185ca:	2000      	movs	r0, #0
   185cc:	000f      	movs	r7, r1
   185ce:	b083      	sub	sp, #12
   185d0:	0019      	movs	r1, r3
   185d2:	4681      	mov	r9, r0
   185d4:	2f00      	cmp	r7, #0
   185d6:	da00      	bge.n	185da <__divdi3+0x1e>
   185d8:	e08c      	b.n	186f4 <__divdi3+0x138>
   185da:	2900      	cmp	r1, #0
   185dc:	da00      	bge.n	185e0 <__divdi3+0x24>
   185de:	e080      	b.n	186e2 <__divdi3+0x126>
   185e0:	0034      	movs	r4, r6
   185e2:	003d      	movs	r5, r7
   185e4:	4692      	mov	sl, r2
   185e6:	4698      	mov	r8, r3
   185e8:	42bb      	cmp	r3, r7
   185ea:	d869      	bhi.n	186c0 <__divdi3+0x104>
   185ec:	d066      	beq.n	186bc <__divdi3+0x100>
   185ee:	4641      	mov	r1, r8
   185f0:	4650      	mov	r0, sl
   185f2:	f000 f967 	bl	188c4 <__clzdi2>
   185f6:	4683      	mov	fp, r0
   185f8:	0039      	movs	r1, r7
   185fa:	0030      	movs	r0, r6
   185fc:	f000 f962 	bl	188c4 <__clzdi2>
   18600:	465b      	mov	r3, fp
   18602:	1a1b      	subs	r3, r3, r0
   18604:	469c      	mov	ip, r3
   18606:	3b20      	subs	r3, #32
   18608:	469b      	mov	fp, r3
   1860a:	d500      	bpl.n	1860e <__divdi3+0x52>
   1860c:	e087      	b.n	1871e <__divdi3+0x162>
   1860e:	4651      	mov	r1, sl
   18610:	4658      	mov	r0, fp
   18612:	4081      	lsls	r1, r0
   18614:	000b      	movs	r3, r1
   18616:	4651      	mov	r1, sl
   18618:	4660      	mov	r0, ip
   1861a:	4081      	lsls	r1, r0
   1861c:	000a      	movs	r2, r1
   1861e:	42bb      	cmp	r3, r7
   18620:	d900      	bls.n	18624 <__divdi3+0x68>
   18622:	e072      	b.n	1870a <__divdi3+0x14e>
   18624:	d06e      	beq.n	18704 <__divdi3+0x148>
   18626:	0034      	movs	r4, r6
   18628:	003d      	movs	r5, r7
   1862a:	4659      	mov	r1, fp
   1862c:	1aa4      	subs	r4, r4, r2
   1862e:	419d      	sbcs	r5, r3
   18630:	2900      	cmp	r1, #0
   18632:	da00      	bge.n	18636 <__divdi3+0x7a>
   18634:	e08a      	b.n	1874c <__divdi3+0x190>
   18636:	2100      	movs	r1, #0
   18638:	2000      	movs	r0, #0
   1863a:	2601      	movs	r6, #1
   1863c:	9000      	str	r0, [sp, #0]
   1863e:	9101      	str	r1, [sp, #4]
   18640:	4659      	mov	r1, fp
   18642:	408e      	lsls	r6, r1
   18644:	9601      	str	r6, [sp, #4]
   18646:	4661      	mov	r1, ip
   18648:	2601      	movs	r6, #1
   1864a:	408e      	lsls	r6, r1
   1864c:	4661      	mov	r1, ip
   1864e:	9600      	str	r6, [sp, #0]
   18650:	2900      	cmp	r1, #0
   18652:	d061      	beq.n	18718 <__divdi3+0x15c>
   18654:	07d9      	lsls	r1, r3, #31
   18656:	0856      	lsrs	r6, r2, #1
   18658:	430e      	orrs	r6, r1
   1865a:	085f      	lsrs	r7, r3, #1
   1865c:	4661      	mov	r1, ip
   1865e:	2201      	movs	r2, #1
   18660:	2300      	movs	r3, #0
   18662:	e00c      	b.n	1867e <__divdi3+0xc2>
   18664:	42af      	cmp	r7, r5
   18666:	d101      	bne.n	1866c <__divdi3+0xb0>
   18668:	42a6      	cmp	r6, r4
   1866a:	d80a      	bhi.n	18682 <__divdi3+0xc6>
   1866c:	1ba4      	subs	r4, r4, r6
   1866e:	41bd      	sbcs	r5, r7
   18670:	1924      	adds	r4, r4, r4
   18672:	416d      	adcs	r5, r5
   18674:	3901      	subs	r1, #1
   18676:	18a4      	adds	r4, r4, r2
   18678:	415d      	adcs	r5, r3
   1867a:	2900      	cmp	r1, #0
   1867c:	d006      	beq.n	1868c <__divdi3+0xd0>
   1867e:	42af      	cmp	r7, r5
   18680:	d9f0      	bls.n	18664 <__divdi3+0xa8>
   18682:	3901      	subs	r1, #1
   18684:	1924      	adds	r4, r4, r4
   18686:	416d      	adcs	r5, r5
   18688:	2900      	cmp	r1, #0
   1868a:	d1f8      	bne.n	1867e <__divdi3+0xc2>
   1868c:	465b      	mov	r3, fp
   1868e:	9800      	ldr	r0, [sp, #0]
   18690:	9901      	ldr	r1, [sp, #4]
   18692:	1900      	adds	r0, r0, r4
   18694:	4169      	adcs	r1, r5
   18696:	2b00      	cmp	r3, #0
   18698:	db4d      	blt.n	18736 <__divdi3+0x17a>
   1869a:	002e      	movs	r6, r5
   1869c:	40de      	lsrs	r6, r3
   1869e:	4663      	mov	r3, ip
   186a0:	002c      	movs	r4, r5
   186a2:	40dc      	lsrs	r4, r3
   186a4:	465b      	mov	r3, fp
   186a6:	2b00      	cmp	r3, #0
   186a8:	db5b      	blt.n	18762 <__divdi3+0x1a6>
   186aa:	0034      	movs	r4, r6
   186ac:	409c      	lsls	r4, r3
   186ae:	0023      	movs	r3, r4
   186b0:	4664      	mov	r4, ip
   186b2:	40a6      	lsls	r6, r4
   186b4:	0032      	movs	r2, r6
   186b6:	1a80      	subs	r0, r0, r2
   186b8:	4199      	sbcs	r1, r3
   186ba:	e003      	b.n	186c4 <__divdi3+0x108>
   186bc:	42b2      	cmp	r2, r6
   186be:	d996      	bls.n	185ee <__divdi3+0x32>
   186c0:	2000      	movs	r0, #0
   186c2:	2100      	movs	r1, #0
   186c4:	464b      	mov	r3, r9
   186c6:	2b00      	cmp	r3, #0
   186c8:	d004      	beq.n	186d4 <__divdi3+0x118>
   186ca:	0003      	movs	r3, r0
   186cc:	000c      	movs	r4, r1
   186ce:	2100      	movs	r1, #0
   186d0:	4258      	negs	r0, r3
   186d2:	41a1      	sbcs	r1, r4
   186d4:	b003      	add	sp, #12
   186d6:	bc3c      	pop	{r2, r3, r4, r5}
   186d8:	4690      	mov	r8, r2
   186da:	4699      	mov	r9, r3
   186dc:	46a2      	mov	sl, r4
   186de:	46ab      	mov	fp, r5
   186e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   186e2:	4649      	mov	r1, r9
   186e4:	43c9      	mvns	r1, r1
   186e6:	0010      	movs	r0, r2
   186e8:	4689      	mov	r9, r1
   186ea:	0019      	movs	r1, r3
   186ec:	2300      	movs	r3, #0
   186ee:	4242      	negs	r2, r0
   186f0:	418b      	sbcs	r3, r1
   186f2:	e775      	b.n	185e0 <__divdi3+0x24>
   186f4:	0034      	movs	r4, r6
   186f6:	003d      	movs	r5, r7
   186f8:	3801      	subs	r0, #1
   186fa:	2700      	movs	r7, #0
   186fc:	4266      	negs	r6, r4
   186fe:	41af      	sbcs	r7, r5
   18700:	4681      	mov	r9, r0
   18702:	e76a      	b.n	185da <__divdi3+0x1e>
   18704:	42b1      	cmp	r1, r6
   18706:	d800      	bhi.n	1870a <__divdi3+0x14e>
   18708:	e78d      	b.n	18626 <__divdi3+0x6a>
   1870a:	2100      	movs	r1, #0
   1870c:	2000      	movs	r0, #0
   1870e:	9000      	str	r0, [sp, #0]
   18710:	9101      	str	r1, [sp, #4]
   18712:	4661      	mov	r1, ip
   18714:	2900      	cmp	r1, #0
   18716:	d19d      	bne.n	18654 <__divdi3+0x98>
   18718:	9800      	ldr	r0, [sp, #0]
   1871a:	9901      	ldr	r1, [sp, #4]
   1871c:	e7d2      	b.n	186c4 <__divdi3+0x108>
   1871e:	4662      	mov	r2, ip
   18720:	4640      	mov	r0, r8
   18722:	2320      	movs	r3, #32
   18724:	4651      	mov	r1, sl
   18726:	4090      	lsls	r0, r2
   18728:	1a9b      	subs	r3, r3, r2
   1872a:	40d9      	lsrs	r1, r3
   1872c:	0003      	movs	r3, r0
   1872e:	9100      	str	r1, [sp, #0]
   18730:	9900      	ldr	r1, [sp, #0]
   18732:	430b      	orrs	r3, r1
   18734:	e76f      	b.n	18616 <__divdi3+0x5a>
   18736:	4662      	mov	r2, ip
   18738:	2320      	movs	r3, #32
   1873a:	1a9b      	subs	r3, r3, r2
   1873c:	002a      	movs	r2, r5
   1873e:	409a      	lsls	r2, r3
   18740:	0026      	movs	r6, r4
   18742:	0013      	movs	r3, r2
   18744:	4662      	mov	r2, ip
   18746:	40d6      	lsrs	r6, r2
   18748:	431e      	orrs	r6, r3
   1874a:	e7a8      	b.n	1869e <__divdi3+0xe2>
   1874c:	4661      	mov	r1, ip
   1874e:	2620      	movs	r6, #32
   18750:	2701      	movs	r7, #1
   18752:	1a76      	subs	r6, r6, r1
   18754:	2000      	movs	r0, #0
   18756:	2100      	movs	r1, #0
   18758:	40f7      	lsrs	r7, r6
   1875a:	9000      	str	r0, [sp, #0]
   1875c:	9101      	str	r1, [sp, #4]
   1875e:	9701      	str	r7, [sp, #4]
   18760:	e771      	b.n	18646 <__divdi3+0x8a>
   18762:	4662      	mov	r2, ip
   18764:	2320      	movs	r3, #32
   18766:	0035      	movs	r5, r6
   18768:	4094      	lsls	r4, r2
   1876a:	1a9b      	subs	r3, r3, r2
   1876c:	40dd      	lsrs	r5, r3
   1876e:	0023      	movs	r3, r4
   18770:	432b      	orrs	r3, r5
   18772:	e79d      	b.n	186b0 <__divdi3+0xf4>

00018774 <__eqsf2>:
   18774:	b570      	push	{r4, r5, r6, lr}
   18776:	0042      	lsls	r2, r0, #1
   18778:	0245      	lsls	r5, r0, #9
   1877a:	024e      	lsls	r6, r1, #9
   1877c:	004c      	lsls	r4, r1, #1
   1877e:	0fc3      	lsrs	r3, r0, #31
   18780:	0a6d      	lsrs	r5, r5, #9
   18782:	0e12      	lsrs	r2, r2, #24
   18784:	0a76      	lsrs	r6, r6, #9
   18786:	0e24      	lsrs	r4, r4, #24
   18788:	0fc9      	lsrs	r1, r1, #31
   1878a:	2001      	movs	r0, #1
   1878c:	2aff      	cmp	r2, #255	; 0xff
   1878e:	d006      	beq.n	1879e <__eqsf2+0x2a>
   18790:	2cff      	cmp	r4, #255	; 0xff
   18792:	d003      	beq.n	1879c <__eqsf2+0x28>
   18794:	42a2      	cmp	r2, r4
   18796:	d101      	bne.n	1879c <__eqsf2+0x28>
   18798:	42b5      	cmp	r5, r6
   1879a:	d006      	beq.n	187aa <__eqsf2+0x36>
   1879c:	bd70      	pop	{r4, r5, r6, pc}
   1879e:	2d00      	cmp	r5, #0
   187a0:	d1fc      	bne.n	1879c <__eqsf2+0x28>
   187a2:	2cff      	cmp	r4, #255	; 0xff
   187a4:	d1fa      	bne.n	1879c <__eqsf2+0x28>
   187a6:	2e00      	cmp	r6, #0
   187a8:	d1f8      	bne.n	1879c <__eqsf2+0x28>
   187aa:	428b      	cmp	r3, r1
   187ac:	d006      	beq.n	187bc <__eqsf2+0x48>
   187ae:	2001      	movs	r0, #1
   187b0:	2a00      	cmp	r2, #0
   187b2:	d1f3      	bne.n	1879c <__eqsf2+0x28>
   187b4:	0028      	movs	r0, r5
   187b6:	1e45      	subs	r5, r0, #1
   187b8:	41a8      	sbcs	r0, r5
   187ba:	e7ef      	b.n	1879c <__eqsf2+0x28>
   187bc:	2000      	movs	r0, #0
   187be:	e7ed      	b.n	1879c <__eqsf2+0x28>

000187c0 <__gesf2>:
   187c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   187c2:	0042      	lsls	r2, r0, #1
   187c4:	0245      	lsls	r5, r0, #9
   187c6:	024c      	lsls	r4, r1, #9
   187c8:	0fc3      	lsrs	r3, r0, #31
   187ca:	0048      	lsls	r0, r1, #1
   187cc:	0a6d      	lsrs	r5, r5, #9
   187ce:	0e12      	lsrs	r2, r2, #24
   187d0:	0a64      	lsrs	r4, r4, #9
   187d2:	0e00      	lsrs	r0, r0, #24
   187d4:	0fc9      	lsrs	r1, r1, #31
   187d6:	2aff      	cmp	r2, #255	; 0xff
   187d8:	d01e      	beq.n	18818 <__gesf2+0x58>
   187da:	28ff      	cmp	r0, #255	; 0xff
   187dc:	d021      	beq.n	18822 <__gesf2+0x62>
   187de:	2a00      	cmp	r2, #0
   187e0:	d10a      	bne.n	187f8 <__gesf2+0x38>
   187e2:	426e      	negs	r6, r5
   187e4:	416e      	adcs	r6, r5
   187e6:	b2f6      	uxtb	r6, r6
   187e8:	2800      	cmp	r0, #0
   187ea:	d10f      	bne.n	1880c <__gesf2+0x4c>
   187ec:	2c00      	cmp	r4, #0
   187ee:	d10d      	bne.n	1880c <__gesf2+0x4c>
   187f0:	2000      	movs	r0, #0
   187f2:	2d00      	cmp	r5, #0
   187f4:	d009      	beq.n	1880a <__gesf2+0x4a>
   187f6:	e005      	b.n	18804 <__gesf2+0x44>
   187f8:	2800      	cmp	r0, #0
   187fa:	d101      	bne.n	18800 <__gesf2+0x40>
   187fc:	2c00      	cmp	r4, #0
   187fe:	d001      	beq.n	18804 <__gesf2+0x44>
   18800:	428b      	cmp	r3, r1
   18802:	d011      	beq.n	18828 <__gesf2+0x68>
   18804:	2101      	movs	r1, #1
   18806:	4258      	negs	r0, r3
   18808:	4308      	orrs	r0, r1
   1880a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1880c:	2e00      	cmp	r6, #0
   1880e:	d0f7      	beq.n	18800 <__gesf2+0x40>
   18810:	2001      	movs	r0, #1
   18812:	3901      	subs	r1, #1
   18814:	4308      	orrs	r0, r1
   18816:	e7f8      	b.n	1880a <__gesf2+0x4a>
   18818:	2d00      	cmp	r5, #0
   1881a:	d0de      	beq.n	187da <__gesf2+0x1a>
   1881c:	2002      	movs	r0, #2
   1881e:	4240      	negs	r0, r0
   18820:	e7f3      	b.n	1880a <__gesf2+0x4a>
   18822:	2c00      	cmp	r4, #0
   18824:	d0db      	beq.n	187de <__gesf2+0x1e>
   18826:	e7f9      	b.n	1881c <__gesf2+0x5c>
   18828:	4282      	cmp	r2, r0
   1882a:	dceb      	bgt.n	18804 <__gesf2+0x44>
   1882c:	db04      	blt.n	18838 <__gesf2+0x78>
   1882e:	42a5      	cmp	r5, r4
   18830:	d8e8      	bhi.n	18804 <__gesf2+0x44>
   18832:	2000      	movs	r0, #0
   18834:	42a5      	cmp	r5, r4
   18836:	d2e8      	bcs.n	1880a <__gesf2+0x4a>
   18838:	2101      	movs	r1, #1
   1883a:	1e58      	subs	r0, r3, #1
   1883c:	4308      	orrs	r0, r1
   1883e:	e7e4      	b.n	1880a <__gesf2+0x4a>

00018840 <__lesf2>:
   18840:	b5f0      	push	{r4, r5, r6, r7, lr}
   18842:	0042      	lsls	r2, r0, #1
   18844:	024d      	lsls	r5, r1, #9
   18846:	004c      	lsls	r4, r1, #1
   18848:	0246      	lsls	r6, r0, #9
   1884a:	0a76      	lsrs	r6, r6, #9
   1884c:	0e12      	lsrs	r2, r2, #24
   1884e:	0fc3      	lsrs	r3, r0, #31
   18850:	0a6d      	lsrs	r5, r5, #9
   18852:	0e24      	lsrs	r4, r4, #24
   18854:	0fc9      	lsrs	r1, r1, #31
   18856:	2aff      	cmp	r2, #255	; 0xff
   18858:	d016      	beq.n	18888 <__lesf2+0x48>
   1885a:	2cff      	cmp	r4, #255	; 0xff
   1885c:	d018      	beq.n	18890 <__lesf2+0x50>
   1885e:	2a00      	cmp	r2, #0
   18860:	d10a      	bne.n	18878 <__lesf2+0x38>
   18862:	4270      	negs	r0, r6
   18864:	4170      	adcs	r0, r6
   18866:	b2c0      	uxtb	r0, r0
   18868:	2c00      	cmp	r4, #0
   1886a:	d015      	beq.n	18898 <__lesf2+0x58>
   1886c:	2800      	cmp	r0, #0
   1886e:	d005      	beq.n	1887c <__lesf2+0x3c>
   18870:	2001      	movs	r0, #1
   18872:	3901      	subs	r1, #1
   18874:	4308      	orrs	r0, r1
   18876:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18878:	2c00      	cmp	r4, #0
   1887a:	d013      	beq.n	188a4 <__lesf2+0x64>
   1887c:	4299      	cmp	r1, r3
   1887e:	d014      	beq.n	188aa <__lesf2+0x6a>
   18880:	2001      	movs	r0, #1
   18882:	425b      	negs	r3, r3
   18884:	4318      	orrs	r0, r3
   18886:	e7f6      	b.n	18876 <__lesf2+0x36>
   18888:	2002      	movs	r0, #2
   1888a:	2e00      	cmp	r6, #0
   1888c:	d1f3      	bne.n	18876 <__lesf2+0x36>
   1888e:	e7e4      	b.n	1885a <__lesf2+0x1a>
   18890:	2002      	movs	r0, #2
   18892:	2d00      	cmp	r5, #0
   18894:	d1ef      	bne.n	18876 <__lesf2+0x36>
   18896:	e7e2      	b.n	1885e <__lesf2+0x1e>
   18898:	2d00      	cmp	r5, #0
   1889a:	d1e7      	bne.n	1886c <__lesf2+0x2c>
   1889c:	2000      	movs	r0, #0
   1889e:	2e00      	cmp	r6, #0
   188a0:	d0e9      	beq.n	18876 <__lesf2+0x36>
   188a2:	e7ed      	b.n	18880 <__lesf2+0x40>
   188a4:	2d00      	cmp	r5, #0
   188a6:	d1e9      	bne.n	1887c <__lesf2+0x3c>
   188a8:	e7ea      	b.n	18880 <__lesf2+0x40>
   188aa:	42a2      	cmp	r2, r4
   188ac:	dc06      	bgt.n	188bc <__lesf2+0x7c>
   188ae:	dbdf      	blt.n	18870 <__lesf2+0x30>
   188b0:	42ae      	cmp	r6, r5
   188b2:	d803      	bhi.n	188bc <__lesf2+0x7c>
   188b4:	2000      	movs	r0, #0
   188b6:	42ae      	cmp	r6, r5
   188b8:	d3da      	bcc.n	18870 <__lesf2+0x30>
   188ba:	e7dc      	b.n	18876 <__lesf2+0x36>
   188bc:	2001      	movs	r0, #1
   188be:	4249      	negs	r1, r1
   188c0:	4308      	orrs	r0, r1
   188c2:	e7d8      	b.n	18876 <__lesf2+0x36>

000188c4 <__clzdi2>:
   188c4:	b510      	push	{r4, lr}
   188c6:	2900      	cmp	r1, #0
   188c8:	d103      	bne.n	188d2 <__clzdi2+0xe>
   188ca:	f7ff fe59 	bl	18580 <__clzsi2>
   188ce:	3020      	adds	r0, #32
   188d0:	e002      	b.n	188d8 <__clzdi2+0x14>
   188d2:	1c08      	adds	r0, r1, #0
   188d4:	f7ff fe54 	bl	18580 <__clzsi2>
   188d8:	bd10      	pop	{r4, pc}
   188da:	46c0      	nop			; (mov r8, r8)
   188dc:	000009b8 	.word	0x000009b8
   188e0:	000009c2 	.word	0x000009c2
   188e4:	000009d2 	.word	0x000009d2
   188e8:	00000a0e 	.word	0x00000a0e
   188ec:	00000a24 	.word	0x00000a24
   188f0:	6167227b 	.word	0x6167227b
   188f4:	3a22656d 	.word	0x3a22656d
   188f8:	0000005b 	.word	0x0000005b
   188fc:	61470a0d 	.word	0x61470a0d
   18900:	6d20656d 	.word	0x6d20656d
   18904:	61737365 	.word	0x61737365
   18908:	72206567 	.word	0x72206567
   1890c:	69656365 	.word	0x69656365
   18910:	21646576 	.word	0x21646576
   18914:	00000a0d 	.word	0x00000a0d
   18918:	732a2e25 	.word	0x732a2e25
   1891c:	00000000 	.word	0x00000000
   18920:	61500a0d 	.word	0x61500a0d
   18924:	64657372 	.word	0x64657372
   18928:	6d6f4320 	.word	0x6d6f4320
   1892c:	646e616d 	.word	0x646e616d
   18930:	0000203a 	.word	0x0000203a
   18934:	002c6425 	.word	0x002c6425
   18938:	61470a0d 	.word	0x61470a0d
   1893c:	6d20656d 	.word	0x6d20656d
   18940:	61737365 	.word	0x61737365
   18944:	72206567 	.word	0x72206567
   18948:	69656365 	.word	0x69656365
   1894c:	20646576 	.word	0x20646576
   18950:	20747562 	.word	0x20747562
   18954:	20746f6e 	.word	0x20746f6e
   18958:	65646e75 	.word	0x65646e75
   1895c:	6f747372 	.word	0x6f747372
   18960:	0d21646f 	.word	0x0d21646f
   18964:	0000000a 	.word	0x0000000a
   18968:	4d490a0d 	.word	0x4d490a0d
   1896c:	6f742055 	.word	0x6f742055
   18970:	20636970 	.word	0x20636970
   18974:	65636572 	.word	0x65636572
   18978:	64657669 	.word	0x64657669
   1897c:	000a0d21 	.word	0x000a0d21
   18980:	25200a0d 	.word	0x25200a0d
   18984:	00732a2e 	.word	0x00732a2e
   18988:	28626772 	.word	0x28626772
   1898c:	00000000 	.word	0x00000000
   18990:	47520a0d 	.word	0x47520a0d
   18994:	64252042 	.word	0x64252042
   18998:	20642520 	.word	0x20642520
   1899c:	0a0d6425 	.word	0x0a0d6425
   189a0:	00000000 	.word	0x00000000
   189a4:	5454514d 	.word	0x5454514d
   189a8:	696e6920 	.word	0x696e6920
   189ac:	6c616974 	.word	0x6c616974
   189b0:	74617a69 	.word	0x74617a69
   189b4:	206e6f69 	.word	0x206e6f69
   189b8:	6c696166 	.word	0x6c696166
   189bc:	202e6465 	.word	0x202e6465
   189c0:	6f727245 	.word	0x6f727245
   189c4:	6f632072 	.word	0x6f632072
   189c8:	69206564 	.word	0x69206564
   189cc:	25282073 	.word	0x25282073
   189d0:	0a0d2964 	.word	0x0a0d2964
   189d4:	00000000 	.word	0x00000000
   189d8:	5454514d 	.word	0x5454514d
   189dc:	67657220 	.word	0x67657220
   189e0:	65747369 	.word	0x65747369
   189e4:	61632072 	.word	0x61632072
   189e8:	61626c6c 	.word	0x61626c6c
   189ec:	66206b63 	.word	0x66206b63
   189f0:	656c6961 	.word	0x656c6961
   189f4:	45202e64 	.word	0x45202e64
   189f8:	726f7272 	.word	0x726f7272
   189fc:	646f6320 	.word	0x646f6320
   18a00:	73692065 	.word	0x73692065
   18a04:	64252820 	.word	0x64252820
   18a08:	000a0d29 	.word	0x000a0d29
   18a0c:	2264227b 	.word	0x2264227b
   18a10:	74227b3a 	.word	0x74227b3a
   18a14:	22706d65 	.word	0x22706d65
   18a18:	7d64253a 	.word	0x7d64253a
   18a1c:	0000007d 	.word	0x0000007d
   18a20:	70747468 	.word	0x70747468
   18a24:	696c635f 	.word	0x696c635f
   18a28:	5f746e65 	.word	0x5f746e65
   18a2c:	6c6c6163 	.word	0x6c6c6163
   18a30:	6b636162 	.word	0x6b636162
   18a34:	5448203a 	.word	0x5448203a
   18a38:	63205054 	.word	0x63205054
   18a3c:	6e65696c 	.word	0x6e65696c
   18a40:	6f732074 	.word	0x6f732074
   18a44:	74656b63 	.word	0x74656b63
   18a48:	6e6f6320 	.word	0x6e6f6320
   18a4c:	7463656e 	.word	0x7463656e
   18a50:	0d2e6465 	.word	0x0d2e6465
   18a54:	0000000a 	.word	0x0000000a
   18a58:	70747468 	.word	0x70747468
   18a5c:	696c635f 	.word	0x696c635f
   18a60:	5f746e65 	.word	0x5f746e65
   18a64:	6c6c6163 	.word	0x6c6c6163
   18a68:	6b636162 	.word	0x6b636162
   18a6c:	6572203a 	.word	0x6572203a
   18a70:	73657571 	.word	0x73657571
   18a74:	6f632074 	.word	0x6f632074
   18a78:	656c706d 	.word	0x656c706d
   18a7c:	2e646574 	.word	0x2e646574
   18a80:	00000a0d 	.word	0x00000a0d
   18a84:	70747468 	.word	0x70747468
   18a88:	696c635f 	.word	0x696c635f
   18a8c:	5f746e65 	.word	0x5f746e65
   18a90:	6c6c6163 	.word	0x6c6c6163
   18a94:	6b636162 	.word	0x6b636162
   18a98:	6572203a 	.word	0x6572203a
   18a9c:	76696563 	.word	0x76696563
   18aa0:	72206465 	.word	0x72206465
   18aa4:	6f707365 	.word	0x6f707365
   18aa8:	2065736e 	.word	0x2065736e
   18aac:	64207525 	.word	0x64207525
   18ab0:	20617461 	.word	0x20617461
   18ab4:	657a6973 	.word	0x657a6973
   18ab8:	0d752520 	.word	0x0d752520
   18abc:	0000000a 	.word	0x0000000a
   18ac0:	70747468 	.word	0x70747468
   18ac4:	696c635f 	.word	0x696c635f
   18ac8:	5f746e65 	.word	0x5f746e65
   18acc:	6c6c6163 	.word	0x6c6c6163
   18ad0:	6b636162 	.word	0x6b636162
   18ad4:	6964203a 	.word	0x6964203a
   18ad8:	6e6f6373 	.word	0x6e6f6373
   18adc:	7463656e 	.word	0x7463656e
   18ae0:	206e6f69 	.word	0x206e6f69
   18ae4:	73616572 	.word	0x73616572
   18ae8:	253a6e6f 	.word	0x253a6e6f
   18aec:	000a0d64 	.word	0x000a0d64
   18af0:	74696e69 	.word	0x74696e69
   18af4:	6f74735f 	.word	0x6f74735f
   18af8:	65676172 	.word	0x65676172
   18afc:	6c70203a 	.word	0x6c70203a
   18b00:	65736165 	.word	0x65736165
   18b04:	756c7020 	.word	0x756c7020
   18b08:	6e612067 	.word	0x6e612067
   18b0c:	2f445320 	.word	0x2f445320
   18b10:	20434d4d 	.word	0x20434d4d
   18b14:	64726163 	.word	0x64726163
   18b18:	206e6920 	.word	0x206e6920
   18b1c:	746f6c73 	.word	0x746f6c73
   18b20:	0d2e2e2e 	.word	0x0d2e2e2e
   18b24:	0000000a 	.word	0x0000000a
   18b28:	74696e69 	.word	0x74696e69
   18b2c:	6f74735f 	.word	0x6f74735f
   18b30:	65676172 	.word	0x65676172
   18b34:	4453203a 	.word	0x4453203a
   18b38:	72614320 	.word	0x72614320
   18b3c:	6e692064 	.word	0x6e692064
   18b40:	6c617473 	.word	0x6c617473
   18b44:	6166206c 	.word	0x6166206c
   18b48:	64656c69 	.word	0x64656c69
   18b4c:	000a0d2e 	.word	0x000a0d2e
   18b50:	74696e69 	.word	0x74696e69
   18b54:	6f74735f 	.word	0x6f74735f
   18b58:	65676172 	.word	0x65676172
   18b5c:	7274203a 	.word	0x7274203a
   18b60:	6e752079 	.word	0x6e752079
   18b64:	67756c70 	.word	0x67756c70
   18b68:	646e6120 	.word	0x646e6120
   18b6c:	2d657220 	.word	0x2d657220
   18b70:	67756c70 	.word	0x67756c70
   18b74:	65687420 	.word	0x65687420
   18b78:	72616320 	.word	0x72616320
   18b7c:	0a0d2e64 	.word	0x0a0d2e64
   18b80:	00000000 	.word	0x00000000
   18b84:	74696e69 	.word	0x74696e69
   18b88:	6f74735f 	.word	0x6f74735f
   18b8c:	65676172 	.word	0x65676172
   18b90:	6f6d203a 	.word	0x6f6d203a
   18b94:	69746e75 	.word	0x69746e75
   18b98:	5320676e 	.word	0x5320676e
   18b9c:	61632044 	.word	0x61632044
   18ba0:	2e2e6472 	.word	0x2e2e6472
   18ba4:	000a0d2e 	.word	0x000a0d2e
   18ba8:	74696e69 	.word	0x74696e69
   18bac:	6f74735f 	.word	0x6f74735f
   18bb0:	65676172 	.word	0x65676172
   18bb4:	4453203a 	.word	0x4453203a
   18bb8:	72616320 	.word	0x72616320
   18bbc:	6f6d2064 	.word	0x6f6d2064
   18bc0:	20746e75 	.word	0x20746e75
   18bc4:	6c696166 	.word	0x6c696166
   18bc8:	20216465 	.word	0x20216465
   18bcc:	73657228 	.word	0x73657228
   18bd0:	29642520 	.word	0x29642520
   18bd4:	00000a0d 	.word	0x00000a0d
   18bd8:	74696e69 	.word	0x74696e69
   18bdc:	6f74735f 	.word	0x6f74735f
   18be0:	65676172 	.word	0x65676172
   18be4:	4453203a 	.word	0x4453203a
   18be8:	72616320 	.word	0x72616320
   18bec:	6f6d2064 	.word	0x6f6d2064
   18bf0:	20746e75 	.word	0x20746e75
   18bf4:	0d2e4b4f 	.word	0x0d2e4b4f
   18bf8:	0000000a 	.word	0x0000000a

00018bfc <main_mqtt_broker>:
   18bfc:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   18c0c:	0000006d 6f430a0d 63656e6e 676e6974     m.....Connecting
   18c1c:	206f7420 6b6f7242 2e2e7265 0000002e      to Broker......
   18c2c:	646e6957 6568435f 72657461 00000073     Wind_Cheaters...
   18c3c:	5454514d 72452020 20726f72 4f4e202d     MQTT  Error - NO
   18c4c:	6f432054 63656e6e 20646574 62206f74     T Connected to b
   18c5c:	656b6f72 000a0d72 5454514d 6e6f4320     roker...MQTT Con
   18c6c:	7463656e 74206465 7262206f 72656b6f     nected to broker
   18c7c:	00000a0d 6e6e6f43 20746365 6c696166     ....Connect fail
   18c8c:	206f7420 76726573 25287265 20212973      to server(%s)! 
   18c9c:	72746572 74692079 74756120 74616d6f     retry it automat
   18cac:	6c616369 0d2e796c 0000000a 475f3150     ically......P1_G
   18cbc:	5f454d41 35455345 545f3631 00000030     AME_ESE516_T0...
   18ccc:	4c5f3150 455f4445 31354553 30545f36     P1_LED_ESE516_T0
   18cdc:	00000000 495f3150 455f554d 31354553     ....P1_IMU_ESE51
   18cec:	30545f36 00000000 5454514d 6e6f4320     6_T0....MQTT Con
   18cfc:	7463656e 0a0d6465 00000000 5454514d     nected......MQTT
   18d0c:	6f726220 2072656b 6c636564 20656e69      broker decline 
   18d1c:	72756f79 63636120 21737365 72726520     your access! err
   18d2c:	6320726f 2065646f 0a0d6425 00000000     or code %d......
   18d3c:	5454514d 73696420 6e6e6f63 65746365     MQTT disconnecte
   18d4c:	000a0d64 64333025 00000000 6f736572     d...%03d....reso
   18d5c:	5f65766c 203a6263 49207325 64612050     lve_cb: %s IP ad
   18d6c:	73657264 73692073 2e642520 252e6425     dress is %d.%d.%
   18d7c:	64252e64 0a0d0a0d 00000000 72617473     d.%d........star
   18d8c:	6f645f74 6f6c6e77 203a6461 20434d4d     t_download: MMC 
   18d9c:	726f7473 20656761 20746f6e 64616572     storage not read
   18dac:	0a0d2e79 00000000 72617473 6f645f74     y.......start_do
   18dbc:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   18dcc:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   18ddc:	0000000a 72617473 6f645f74 6f6c6e77     ....start_downlo
   18dec:	203a6461 75716572 20747365 73207369     ad: request is s
   18dfc:	20746e65 65726c61 2e796461 00000a0d     ent already.....
   18e0c:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   18e1c:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   18e2c:	726c6120 79646165 000a0d2e 72617473      already....star
   18e3c:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   18e4c:	20676e69 50545448 71657220 74736575     ing HTTP request
   18e5c:	0d2e2e2e 0000000a 70747468 2f2f3a73     ........https://
   18e6c:	2e777777 61737764 656c706d 656c6966     www.dwsamplefile
   18e7c:	6f632e73 643f2f6d 64695f6c 3637313d     s.com/?dl_id=176
   18e8c:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   18e9c:	656b6361 65203a74 7974706d 74616420     acket: empty dat
   18eac:	0a0d2e61 00000000 726f7473 69665f65     a.......store_fi
   18ebc:	705f656c 656b6361 63203a74 74616572     le_packet: creat
   18ecc:	20676e69 656c6966 73255b20 000a0d5d     ing file [%s]...
   18edc:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   18eec:	66203a74 20656c69 656d616e 20736920     t: file name is 
   18efc:	61766e69 2e64696c 776f4420 616f6c6e     invalid. Downloa
   18f0c:	61632064 6c65636e 0d2e6465 0000000a     d canceled......
   18f1c:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   18f2c:	66203a74 20656c69 61657263 6e6f6974     t: file creation
   18f3c:	72726520 2021726f 3a746572 0a0d6425      error! ret:%d..
   18f4c:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   18f5c:	656b6361 66203a74 20656c69 74697277     acket: file writ
   18f6c:	72652065 2c726f72 776f6420 616f6c6e     e error, downloa
   18f7c:	61632064 6c65636e 0d2e6465 0000000a     d canceled......
   18f8c:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   18f9c:	72203a74 69656365 5b646576 5d756c25     t: received[%lu]
   18fac:	6966202c 7320656c 5b657a69 5d756c25     , file size[%lu]
   18fbc:	00000a0d 726f7473 69665f65 705f656c     ....store_file_p
   18fcc:	656b6361 66203a74 20656c69 6e776f64     acket: file down
   18fdc:	64616f6c 73206465 65636375 75667373     loaded successfu
   18fec:	2e796c6c 00000a0d 4f525245 6e492052     lly.....ERROR In
   18ffc:	61697469 697a696c 5720676e 20696669     itializing Wifi 
   1900c:	61746144 65757120 21736575 00000a0d     Data queues!....
   1901c:	35455345 2d203631 66695720 6e492069     ESE516 - Wifi In
   1902c:	43207469 0d65646f 0000000a 666e6f63     it Code.....conf
   1903c:	72756769 74685f65 635f7074 6e65696c     igure_http_clien
   1904c:	48203a74 20505454 65696c63 6920746e     t: HTTP client i
   1905c:	6974696e 7a696c61 6f697461 6166206e     nitialization fa
   1906c:	64656c69 72282021 25207365 0a0d2964     iled! (res %d)..
   1907c:	00000000 6e69616d 326d203a 69775f6d     ....main: m2m_wi
   1908c:	695f6966 2074696e 6c6c6163 72726520     fi_init call err
   1909c:	2021726f 73657228 29642520 00000a0d     or! (res %d)....
   190ac:	6e69616d 6f63203a 63656e6e 676e6974     main: connecting
   190bc:	206f7420 69466957 20504120 2e2e7325      to WiFi AP %s..
   190cc:	000a0d2e 6e6e6f43 65746365 6f742064     ....Connected to
   190dc:	54514d20 72422054 72656b6f 000a0d21      MQTT Broker!...
   190ec:	00006425 00007d5d 475f3250 5f454d41     %d..]}..P2_GAME_
   190fc:	35455345 545f3631 00000030 6d69227b     ESE516_T0...{"im
   1910c:	3a227875 202c6425 756d6922 203a2279     ux":%d, "imuy": 
   1911c:	202c6425 756d6922 203a227a 007d6425     %d, "imuz": %d}.
   1912c:	4941465b 72205d4c 25207365 000a0d64     [FAIL] res %d...
   1913c:	67616c46 78742e41 64612074 21646564     FlagA.txt added!
   1914c:	00000a0d 545f3150 45504d45 55544152     ....P1_TEMPERATU
   1915c:	455f4552 31354553 30545f36 00000000     RE_ESE516_T0....
   1916c:	5454514d 6e657320 73252064 00000a0d     MQTT send %s....
   1917c:	6c463a30 2e416761 00747874 69666977     0:FlagA.txt.wifi
   1918c:	3a62635f 4d324d20 4649575f 4f435f49     _cb: M2M_WIFI_CO
   1919c:	43454e4e 0d444554 0000000a 69666977     NNECTED.....wifi
   191ac:	3a62635f 4d324d20 4649575f 49445f49     _cb: M2M_WIFI_DI
   191bc:	4e4f4353 5443454e 0a0d4445 00000000     SCONNECTED......
   191cc:	7472306e 75304368 7972746e 00000000     n0rthC0untry....
   191dc:	6b746544 49206e69 4e20544f 6874726f     Detkin IOT North
   191ec:	00000000 69666977 3a62635f 20504920     ....wifi_cb: IP 
   191fc:	72646461 20737365 25207369 75252e75     address is %u.%u
   1920c:	2e75252e 0a0d7525 00000000 6f727245     .%u.%u......Erro
   1921c:	6f632072 63656e6e 676e6974 206f7420     r connecting to 
   1922c:	5454514d 6f724220 2172656b 00000a0d     MQTT Broker!....
   1923c:	00000190 7fffffff 7fffffff 7fffffff     ................
   1924c:	7fffffff 7fffffff 7eb851ea 7fffffff     .........Q.~....
   1925c:	7ef9db21 7fffffff 7fffffff 7fbe76c7     !..~.........v..
   1926c:	7f5c28f4 7fffffff 7eb851ea 7fffffff     .(\......Q.~....
   1927c:	7fffffff f4240000 7a120000 3d090000     ......$....z...=
   1928c:	1e848000 0f3e58ff 07938c54 03d09000     .....X>.T.......
   1929c:	01ec3810 00f46290 007a1200 003d0900     .8...b....z...=.
   192ac:	001e8480 000f4240 0007a120 0003d090     ....@B.. .......
   192bc:	0001e848 74737271 00000075 00007170     H...qrstu...pq..
   192cc:	00082008 66726941 3a776f6c 2e302520     . ..Airflow: %0.
   192dc:	6d206632 0020732f 65636341 6172656c     2f m/s .Accelera
   192ec:	6e6f6974 676d5b20 20583a5d 59096425     tion [mg]:X %d.Y
   192fc:	09642520 6425205a 00000a0d 25203a54      %d.Z %d....T: %
   1930c:	3a482064 20642520 25203a50 000a2064     d H: %d P: %d ..
   1931c:	746f6f62 616c665f 78742e67 64612074     boot_flag.txt ad
   1932c:	21646564 00000a0d 6f623a30 665f746f     ded!....0:boot_f
   1933c:	2e67616c 00747874 00736c63 3a736c63     lag.txt.cls.cls:
   1934c:	656c4320 20737261 20656874 6d726574      Clears the term
   1935c:	6c616e69 72637320 0d6e6565 0000000a     inal screen.....
   1936c:	00007766 203a7766 6e776f44 64616f6c     fw..fw: Download
   1937c:	66206120 20656c69 20646e61 66726570      a file and perf
   1938c:	206d726f 46206e61 70752057 65746164     orm an FW update
   1939c:	00000a0d 00726961 3a726961 74655220     ....air.air: Ret
   193ac:	736e7275 76206120 65756c61 6f726620     urns a value fro
   193bc:	5346206d 3030332d 69612030 6f6c6672     m FS-3000 airflo
   193cc:	65732077 726f736e 00000a0d 65736572     w sensor....rese
   193dc:	00000074 65736572 52203a74 74657365     t...reset: Reset
   193ec:	68742073 65642065 65636976 00000a0d     s the device....
   193fc:	00756d69 3a756d69 74655220 736e7275     imu.imu: Returns
   1940c:	76206120 65756c61 6f726620 6874206d      a value from th
   1941c:	4d492065 000a0d55 706d6574 00000000     e IMU...temp....
   1942c:	706d6574 6552203a 6e727574 20612073     temp: Returns a 
   1943c:	756c6176 72662065 74206d6f 74206568     value from the t
   1944c:	65706d65 75746172 73206572 6f736e65     emperature senso
   1945c:	000a0d72 65657246 534f5452 494c4320     r...FreeRTOS CLI
   1946c:	540a0d2e 20657079 706c6548 206f7420     ...Type Help to 
   1947c:	77656976 6c206120 20747369 7220666f     view a list of r
   1948c:	73696765 65726574 6f632064 6e616d6d     egistered comman
   1949c:	0d2e7364 0000000a 6c756f43 6f6e2064     ds......Could no
   194ac:	6c612074 61636f6c 73206574 70616d65     t allocate semap
   194bc:	65726f68 00000a0d 0000616f 325b6325     hore....oa..%c[2
   194cc:	003e0d4b                                K.>.

000194d0 <xAirFlow>:
   194d0:	000193a0 000193a4 0000296d 00000000     ........m)......

000194e0 <xClearScreen>:
   194e0:	00019344 00019348 00002941 00000000     D...H...A)......
   194f0:	325b6325 0000004a                       %c[2J...

000194f8 <xImuGetCommand>:
   194f8:	000193fc 00019400 000028b5 00000000     .........(......

00019508 <xOTAUCommand>:
   19508:	0001936c 00019370 00002999 00000000     l...p....)......

00019518 <xResetCommand>:
   19518:	000193d8 000193e0 00002835 00000000     ........5(......

00019528 <xTempGetCommand>:
   19528:	00019424 0001942c 0000284d 00000000     $...,...M(......
   19538:	000045ce 000045c8 000045c2 000045bc     .E...E...E...E..
   19548:	000045d4 000045dc 000045d4 000045b6     .E...E...E...E..
   19558:	000045b0 000045d4 000045aa 000045aa     .E...E...E...E..
   19568:	000045a4 0000459e 000045dc 00004646     .E...E...E..FF..
   19578:	00004640 0000463a 00004634 0000464c     @F..:F..4F..LF..
   19588:	00004654 0000464c 0000462e 00004628     TF..LF...F..(F..
   19598:	0000464c 00004622 00004622 0000461c     LF.."F.."F...F..
   195a8:	00004616 00004654 000046c0 000046ba     .F..TF...F...F..
   195b8:	000046b4 000046ae 000046c6 000046c6     .F...F...F...F..
   195c8:	000046c6 000046a8 000046a2 000046c6     .F...F...F...F..
   195d8:	0000469c 0000469c 00004696 00004690     .F...F...F...F..
   195e8:	33323130 37363534 62613938 66656463     0123456789abcdef
   195f8:	00000d31 6e617254 72656673 636e452d     1...Transfer-Enc
   19608:	6e69646f 00203a67 6e6e6f43 69746365     oding: .Connecti
   19618:	203a6e6f 00000000 50545448 0000002f     on: ....HTTP/...
   19628:	20544547 00000000 54534f50 00000020     GET ....POST ...
   19638:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   19648:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   19658:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   19668:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   19678:	74736f48 0000203a 6e6e6f43 69746365     Host: ..Connecti
   19688:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
   19698:	00000000 65636341 452d7470 646f636e     ....Accept-Encod
   196a8:	3a676e69 000a0d20 65636341 432d7470     ing: ...Accept-C
   196b8:	73726168 203a7465 2d667475 000a0d38     harset: utf-8...
   196c8:	6e617254 72656673 636e452d 6e69646f     Transfer-Encodin
   196d8:	63203a67 6b6e7568 0a0d6465 00000000     g: chunked......
   196e8:	00007525 746e6f43 2d746e65 676e654c     %u..Content-Leng
   196f8:	203a6874 00000000 656d7461 2e312f6c     th: ....atmel/1.
   19708:	00322e30 70747468 002f2f3a 70747468     0.2.http://.http
   19718:	2f2f3a73 00000000 42002000 42002400     s://..... .B.$.B
   19728:	42002800 6f636e49 63657272 6f632074     .(.BIncorrect co
   19738:	6e616d6d 61702064 656d6172 28726574     mmand parameter(
   19748:	202e2973 746e4520 22207265 706c6568     s).  Enter "help
   19758:	6f742022 65697620 20612077 7473696c     " to view a list
   19768:	20666f20 69617661 6c62616c 6f632065      of available co
   19778:	6e616d6d 0d2e7364 000a0d0a 6d6d6f43     mmands......Comm
   19788:	20646e61 20746f6e 6f636572 73696e67     and not recognis
   19798:	202e6465 746e4520 27207265 706c6568     ed.  Enter 'help
   197a8:	6f742027 65697620 20612077 7473696c     ' to view a list
   197b8:	20666f20 69617661 6c62616c 6f632065      of available co
   197c8:	6e616d6d 0d2e7364 000a0d0a 706c6568     mmands......help
   197d8:	00000000 65680a0d 0d3a706c 694c200a     ......help:.. Li
   197e8:	20737473 206c6c61 20656874 69676572     sts all the regi
   197f8:	72657473 63206465 616d6d6f 0d73646e     stered commands.
   19808:	000a0d0a                                ....

0001980c <xHelpCommand>:
   1980c:	000197d4 000197dc 00004e75 00000000     ........uN......
   1981c:	0000527c 00005274 00005278 00005294     |R..tR..xR...R..
   1982c:	00005270 00005280 00005284 00005288     pR...R...R...R..
   1983c:	0000528c 20746f4e 756f6e65 54206867     .R..Not enough T
   1984c:	204b5341 646e6168 2073656c 6e69202d     ASK handles - in
   1985c:	61657263 54206573 435f4352 4e5f4746     crease TRC_CFG_N
   1986c:	4b534154 206e6920 53637274 7370616e     TASK in trcSnaps
   1987c:	43746f68 69666e6f 00682e67 20746f4e     hotConfig.h.Not 
   1988c:	756f6e65 49206867 68205253 6c646e61     enough ISR handl
   1989c:	2d207365 636e6920 73616572 52542065     es - increase TR
   198ac:	46435f43 494e5f47 69205253 7274206e     C_CFG_NISR in tr
   198bc:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   198cc:	00000068 20746f4e 756f6e65 53206867     h...Not enough S
   198dc:	50414d45 45524f48 6e616820 73656c64     EMAPHORE handles
   198ec:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   198fc:	5f474643 4d45534e 4f485041 69204552     CFG_NSEMAPHORE i
   1990c:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   1991c:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   1992c:	4d206867 58455455 6e616820 73656c64     gh MUTEX handles
   1993c:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   1994c:	5f474643 54554d4e 69205845 7274206e     CFG_NMUTEX in tr
   1995c:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   1996c:	00000068 20746f4e 756f6e65 51206867     h...Not enough Q
   1997c:	45554555 6e616820 73656c64 69202d20     UEUE handles - i
   1998c:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   1999c:	4555514e 69204555 7274206e 616e5363     NQUEUE in trcSna
   199ac:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   199bc:	20746f4e 756f6e65 54206867 52454d49     Not enough TIMER
   199cc:	6e616820 73656c64 69202d20 6572636e      handles - incre
   199dc:	20657361 5f435254 5f474643 4d49544e     ase TRC_CFG_NTIM
   199ec:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   199fc:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   19a0c:	756f6e65 45206867 544e4556 554f5247     enough EVENTGROU
   19a1c:	61682050 656c646e 202d2073 72636e69     P handles - incr
   19a2c:	65736165 43525420 4746435f 56454e5f     ease TRC_CFG_NEV
   19a3c:	47544e45 50554f52 206e6920 53637274     ENTGROUP in trcS
   19a4c:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   19a5c:	20746f4e 756f6e65 53206867 41455254     Not enough STREA
   19a6c:	4655424d 20524546 646e6168 2073656c     MBUFFER handles 
   19a7c:	6e69202d 61657263 54206573 435f4352     - increase TRC_C
   19a8c:	4e5f4746 45525453 55424d41 52454646     FG_NSTREAMBUFFER
   19a9c:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   19aac:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   19abc:	4d206867 41535345 55424547 52454646     gh MESSAGEBUFFER
   19acc:	6e616820 73656c64 69202d20 6572636e      handles - incre
   19adc:	20657361 5f435254 5f474643 53454d4e     ase TRC_CFG_NMES
   19aec:	45474153 46465542 69205245 7274206e     SAGEBUFFER in tr
   19afc:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   19b0c:	00000068 547a7370 65636172 45746547     h...pszTraceGetE
   19b1c:	726f7272 646e6148 3a73656c 766e4920     rrorHandles: Inv
   19b2c:	64696c61 6a626f20 63746365 7373616c     alid objectclass
   19b3c:	00000021 61725476 6e456563 656c6261     !...vTraceEnable
   19b4c:	43525428 4154535f 415f5452 54494157     (TRC_START_AWAIT
   19b5c:	534f485f 6e202954 6120746f 776f6c6c     _HOST) not allow
   19b6c:	69206465 6e53206e 68737061 6d20746f     ed in Snapshot m
   19b7c:	0065646f 78656e55 74636570 61206465     ode.Unexpected a
   19b8c:	6d756772 20746e65 76206f74 63617254     rgument to vTrac
   19b9c:	616e4565 20656c62 616e7328 6f687370     eEnable (snapsho
   19bac:	6f6d2074 00296564 43415254 53415f45     t mode).TRACE_AS
   19bbc:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
   19bcc:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
   19bdc:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
   19bec:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
   19bfc:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
   19c0c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   19c1c:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
   19c2c:	696c6176 61762064 2065756c 20726f66     valid value for 
   19c3c:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
   19c4c:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
   19c5c:	206e6920 54767270 65636172 44746547      in prvTraceGetD
   19c6c:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
   19c7c:	7270203a 61725476 65476563 6a624f74     : prvTraceGetObj
   19c8c:	48746365 6c646e61 49203a65 6c61766e     ectHandle: Inval
   19c9c:	76206469 65756c61 726f6620 6a626f20     id value for obj
   19cac:	63746365 7373616c 00000000 43415254     ectclass....TRAC
   19cbc:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   19ccc:	65476563 72615074 203a6d61 61766e49     ceGetParam: Inva
   19cdc:	2064696c 756c6176 6f662065 61702072     lid value for pa
   19cec:	5f6d6172 0078616d 43415254 53415f45     ram_max.TRACE_AS
   19cfc:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   19d0c:	69725074 7469726f 6f725079 74726570     tPriorityPropert
   19d1c:	6f203a79 63656a62 616c6374 3e207373     y: objectclass >
   19d2c:	5254203d 5f454341 414c434e 53455353     = TRACE_NCLASSES
   19d3c:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   19d4c:	7270203a 61725476 65476563 69725074     : prvTraceGetPri
   19d5c:	7469726f 6f725079 74726570 49203a79     orityProperty: I
   19d6c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   19d7c:	00646920 63617254 65522065 64726f63      id.Trace Record
   19d8c:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
   19d9c:	69206f74 7865646e 74756f20 65646973     to index outside
   19dac:	65766520 6220746e 65666675 00002172      event buffer!..
   19dbc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   19dcc:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
   19ddc:	3a656d61 6d616e20 3d3d2065 4c554e20     ame: name == NUL
   19dec:	0000004c 656c6c49 206c6167 656a626f     L...Illegal obje
   19dfc:	63207463 7373616c 206e6920 54767270     ct class in prvT
   19e0c:	65636172 4f746553 63656a62 6d614e74     raceSetObjectNam
   19e1c:	00000065 656c6c49 206c6167 646e6168     e...Illegal hand
   19e2c:	2820656c 69202930 7270206e 61725476     le (0) in prvTra
   19e3c:	65536563 6a624f74 4e746365 2e656d61     ceSetObjectName.
   19e4c:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   19e5c:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
   19e6c:	53746365 65746174 626f203a 7463656a     ectState: object
   19e7c:	73616c63 3d3e2073 41525420 4e5f4543     class >= TRACE_N
   19e8c:	53414c43 00534553 43415254 53415f45     CLASSES.TRACE_AS
   19e9c:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
   19eac:	6a624f74 53746365 65746174 6e49203a     tObjectState: In
   19ebc:	696c6176 61762064 2065756c 20726f66     valid value for 
   19ecc:	00006469 43415254 53415f45 54524553     id..TRACE_ASSERT
   19edc:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
   19eec:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
   19efc:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
   19f0c:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   19f1c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   19f2c:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
   19f3c:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
   19f4c:	76206469 65756c61 726f6620 00646920     id value for id.
   19f5c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   19f6c:	61725476 65536563 73615474 736e496b     vTraceSetTaskIns
   19f7c:	636e6174 6e694665 65687369 49203a64     tanceFinished: I
   19f8c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   19f9c:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
   19fac:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   19fbc:	4b65726f 656e7265 6c61436c 65203a6c     oreKernelCall: e
   19fcc:	65646f63 203d3e20 46467830 00000000     code >= 0xFF....
   19fdc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   19fec:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   19ffc:	6c61436c 6f203a6c 63656a62 616c4374     lCall: objectCla
   1a00c:	3e207373 5254203d 5f454341 414c434e     ss >= TRACE_NCLA
   1a01c:	53455353 00000000 43415254 53415f45     SSES....TRACE_AS
   1a02c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   1a03c:	4b65726f 656e7265 6c61436c 49203a6c     oreKernelCall: I
   1a04c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   1a05c:	6a626f20 4e746365 65626d75 00000072      objectNumber...
   1a06c:	6f636552 72656472 73756220 202d2079     Recorder busy - 
   1a07c:	68676968 69727020 7469726f 53492079     high priority IS
   1a08c:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
   1a09c:	29322820 00000000 43415254 53415f45      (2)....TRACE_AS
   1a0ac:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   1a0bc:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
   1a0cc:	6d754e68 63697265 61726150 6c6e4f6d     hNumericParamOnl
   1a0dc:	49203a79 6c61766e 76206469 65756c61     y: Invalid value
   1a0ec:	726f6620 74766520 65646f63 00000000      for evtcode....
   1a0fc:	6f636552 72656472 73756220 202d2079     Recorder busy - 
   1a10c:	68676968 69727020 7469726f 53492079     high priority IS
   1a11c:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
   1a12c:	29342820 00000000 43415254 53415f45      (4)....TRACE_AS
   1a13c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   1a14c:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
   1a15c:	72615068 203a6d61 63747665 2065646f     hParam: evtcode 
   1a16c:	30203d3e 00464678 43415254 53415f45     >= 0xFF.TRACE_AS
   1a17c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   1a18c:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
   1a19c:	72615068 203a6d61 656a626f 6c437463     hParam: objectCl
   1a1ac:	20737361 54203d3e 45434152 4c434e5f     ass >= TRACE_NCL
   1a1bc:	45535341 00000053 43415254 53415f45     ASSES...TRACE_AS
   1a1cc:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   1a1dc:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
   1a1ec:	72615068 203a6d61 61766e49 2064696c     hParam: Invalid 
   1a1fc:	756c6176 6f662065 626f2072 7463656a     value for object
   1a20c:	626d754e 00007265 6f636552 72656472     Number..Recorder
   1a21c:	73756220 202d2079 68676968 69727020      busy - high pri
   1a22c:	7469726f 53492079 73752052 20676e69     ority ISR using 
   1a23c:	63737973 3f6c6c61 29332820 00000000     syscall? (3)....
   1a24c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   1a25c:	61725476 74536563 5465726f 526b7361     vTraceStoreTaskR
   1a26c:	79646165 6e49203a 696c6176 61762064     eady: Invalid va
   1a27c:	2065756c 20726f66 646e6168 0000656c     lue for handle..
   1a28c:	6f636552 72656472 73756220 202d2079     Recorder busy - 
   1a29c:	68676968 69727020 7469726f 53492079     high priority IS
   1a2ac:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
   1a2bc:	29312820 00000000 43415254 53415f45      (1)....TRACE_AS
   1a2cc:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   1a2dc:	5465726f 736b7361 63746977 49203a68     oreTaskswitch: I
   1a2ec:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   1a2fc:	73617420 61685f6b 656c646e 00000000      task_handle....
   1a30c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   1a31c:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
   1a32c:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   1a33c:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   1a34c:	53415f45 54524553 6975203a 65646e49     E_ASSERT: uiInde
   1a35c:	4f664f78 63656a62 49203a74 6c61766e     xOfObject: Inval
   1a36c:	76206469 65756c61 726f6620 6a626f20     id value for obj
   1a37c:	63746365 7373616c 00000000 43415254     ectclass....TRAC
   1a38c:	53415f45 54524553 6975203a 65646e49     E_ASSERT: uiInde
   1a39c:	4f664f78 63656a62 49203a74 6c61766e     xOfObject: Inval
   1a3ac:	76206469 65756c61 726f6620 6a626f20     id value for obj
   1a3bc:	68746365 6c646e61 00000065 43415254     ecthandle...TRAC
   1a3cc:	53415f45 54524553 6552203a 64726f63     E_ASSERT: Record
   1a3dc:	6e207265 6920746f 6974696e 7a696c61     er not initializ
   1a3ec:	202e6465 20657355 61725476 6e456563     ed. Use vTraceEn
   1a3fc:	656c6261 69202928 6574736e 00216461     able() instead!.
   1a40c:	61747328 70757472 00000029 43415254     (startup)...TRAC
   1a41c:	53415f45 54524553 5478203a 65636172     E_ASSERT: xTrace
   1a42c:	69676552 72657473 69727453 203a676e     RegisterString: 
   1a43c:	6562616c 3d3d206c 4c554e20 0000004c     label == NULL...
   1a44c:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   1a45c:	64726f63 6e207265 6920746f 6974696e     corder not initi
   1a46c:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
   1a47c:	45656361 6c62616e 20292865 73726966     aceEnable() firs
   1a48c:	00002174 454c4449 00000000 00008804     t!..IDLE........
   1a49c:	00008804 00008804 0000877c 00008846     ........|...F...
   1a4ac:	00008860 00008804 00008804 0000877c     `...........|...
   1a4bc:	00008846 20726d54 00637653              F...Tmr Svc.

0001a4c8 <mmc_trans_multipliers>:
   1a4c8:	00000000 0000000a 0000000c 0000000d     ................
   1a4d8:	0000000f 00000014 0000001a 0000001e     ................
   1a4e8:	00000023 00000028 0000002d 00000034     #...(...-...4...
   1a4f8:	00000037 0000003c 00000046 00000050     7...<...F...P...

0001a508 <sd_mmc_trans_units>:
   1a508:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0001a524 <sd_trans_multipliers>:
   1a524:	00000000 0000000a 0000000c 0000000d     ................
   1a534:	0000000f 00000014 00000019 0000001e     ................
   1a544:	00000023 00000028 0000002d 00000032     #...(...-...2...
   1a554:	00000037 0000003c 00000046 00000050     7...<...F...P...

0001a564 <__FUNCTION__.16034>:
   1a564:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   1a574:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1a584:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   1a594:	6320746c 000a646d 0000000d 0000a8e4     lt cmd..........
   1a5a4:	0000a8b4 0000a8ac 0000a8c4 0000a8bc     ................
   1a5b4:	0000a8dc 0000a8cc 0000a8d4              ............

0001a5c0 <__FUNCTION__.16902>:
   1a5c0:	5f666968 646e6573 00000000              hif_send....

0001a5cc <__FUNCTION__.16912>:
   1a5cc:	5f666968 00727369                       hif_isr.

0001a5d4 <__FUNCTION__.16921>:
   1a5d4:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0001a5e4 <__FUNCTION__.16933>:
   1a5e4:	5f666968 65636572 00657669              hif_receive.

0001a5f0 <__FUNCTION__.16949>:
   1a5f0:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   1a600:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   1a610:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   1a620:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
   1a630:	73657264 75622073 61662073 000a6c69     dress bus fail..
   1a640:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
   1a650:	6b636170 53207465 20657a69 7525203d     packet Size = %u
   1a660:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
   1a670:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
   1a680:	49464957 6c616320 6361626c 7369206b     WIFI callback is
   1a690:	746f6e20 67657220 65747369 0a646572      not registered.
   1a6a0:	00000000 6b6f6353 63207465 626c6c61     ....Scoket callb
   1a6b0:	206b6361 6e207369 7220746f 73696765     ack is not regis
   1a6c0:	65726574 00000a64 2061744f 6c6c6163     tered...Ota call
   1a6d0:	6b636162 20736920 20746f6e 69676572     back is not regi
   1a6e0:	72657473 000a6465 70797243 63206f74     stered..Crypto c
   1a6f0:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   1a700:	73696765 65726574 00000a64 6d676953     egistered...Sigm
   1a710:	61632061 61626c6c 69206b63 6f6e2073     a callback is no
   1a720:	65722074 74736967 64657265 0000000a     t registered....
   1a730:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
   1a740:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
   1a750:	61207473 64207070 276e6469 65732074     st app didn't se
   1a760:	58522074 6e6f4420 253c2065 253c3e75     t RX Done <%u><%
   1a770:	000a3e58 66696828 72572029 20676e6f     X>..(hif) Wrong 
   1a780:	657a6953 0000000a 66696828 61462029     Size....(hif) Fa
   1a790:	2065736c 65746e69 70757272 6c252074     lse interrupt %l
   1a7a0:	00000078 66696828 61462029 74206c69     x...(hif) Fail t
   1a7b0:	6552206f 69206461 7265746e 74707572     o Read interrupt
   1a7c0:	67657220 0000000a 46494828 61462029      reg....(HIF) Fa
   1a7d0:	74206c69 6168206f 656c646e 746e6920     il to handle int
   1a7e0:	75727265 25207470 72742064 67412079     errupt %d try Ag
   1a7f0:	2e6e6961 00000a2e 66696820 6365725f     ain..... hif_rec
   1a800:	65766965 6e49203a 696c6176 72612064     eive: Invalid ar
   1a810:	656d7567 000a746e 20505041 75716552     gument..APP Requ
   1a820:	65747365 69532064 6920657a 616c2073     ested Size is la
   1a830:	72656772 61687420 6874206e 65722065     rger than the re
   1a840:	65766963 75622064 72656666 7a697320     cived buffer siz
   1a850:	253c2065 253c3e75 0a3e756c 00000000     e <%u><%lu>.....
   1a860:	20505041 75716552 65747365 64412064     APP Requested Ad
   1a870:	73657264 65622073 646e6f79 65687420     dress beyond the
   1a880:	63657220 64657669 66756220 20726566      recived buffer 
   1a890:	72646461 20737365 20646e61 676e656c     address and leng
   1a8a0:	000a6874 20705247 6425203f 0000000a     th..GRp ? %d....
   1a8b0:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   1a8c0:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   1a8d0:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   1a8e0:	74207075 63206568 0a706968 00000000     up the chip.....

0001a8f0 <__FUNCTION__.16884>:
   1a8f0:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0001a8fc <__FUNCTION__.16913>:
   1a8fc:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0001a90c <__FUNCTION__.16944>:
   1a90c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   1a91c:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   1a92c:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   1a93c:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   1a94c:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
   1a95c:	7620746f 64696c61 0000000a 61766e49     ot valid....Inva
   1a96c:	2064696c 0a79654b 00000000 44495353     lid Key.....SSID
   1a97c:	4e454c20 564e4920 44494c41 0000000a      LEN INVALID....
   1a98c:	49204843 4c41564e 000a4449 61766e49     CH INVALID..Inva
   1a99c:	2064696c 20706557 2079656b 65646e69     lid Wep key inde
   1a9ac:	64252078 0000000a 61766e49 2064696c     x %d....Invalid 
   1a9bc:	20706557 2079656b 676e656c 25206874     Wep key length %
   1a9cc:	00000a64 6f636e49 63657272 53502074     d...Incorrect PS
   1a9dc:	656b204b 656c2079 6874676e 0000000a     K key length....
   1a9ec:	65646e75 656e6966 65732064 79742063     undefined sec ty
   1a9fc:	000a6570 6d726946 65726177 72657620     pe..Firmware ver
   1aa0c:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   1aa1c:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   1aa2c:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   1aa3c:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   1aa4c:	6e694d20 69726420 20726576 20726576      Min driver ver 
   1aa5c:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   1aa6c:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   1aa7c:	0000000a 343a3631 39313a35 00000000     ....16:45:19....
   1aa8c:	20636544 32203431 00333230 76697244     Dec 14 2023.Driv
   1aa9c:	62207265 746c6975 20746120 25097325     er built at %s.%
   1aaac:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   1aabc:	7277616d 65562065 6f697372 00000a6e     mawre Version...

0001aacc <__FUNCTION__.16741>:
   1aacc:	70696863 6b61775f 00000065              chip_wake...

0001aad8 <__FUNCTION__.16790>:
   1aad8:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   1aae8:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   1aaf8:	0a657a69 00000000 20737542 6f727265     ize.....Bus erro
   1ab08:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   1ab18:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   1ab28:	20656874 70696863 0000000a 76697244     the chip....Driv
   1ab38:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   1ab48:	000a786c                                lx..

0001ab4c <__FUNCTION__.16788>:
   1ab4c:	645f6d6e 695f7672 0074696e              nm_drv_init.

0001ab58 <__FUNCTION__.16795>:
   1ab58:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   1ab68:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   1ab78:	6965645f 2074696e 6c696166 0000000a     _deinit fail....
   1ab88:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   1ab98:	73616c66 69642068 6c626173 61662065     flash disable fa
   1aba8:	000a6c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   1abb8:	6c696166 696e6920 75622074 00000a73     fail init bus...
   1abc8:	6c696166 74206465 6e65206f 656c6261     failed to enable
   1abd8:	746e6920 75727265 2e737470 00000a2e      interrupts.....
   1abe8:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   1abf8:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
   1ac08:	20444920 0a786c25 00000000 0000b860      ID %lx.....`...
   1ac18:	0000b860 0000b890 0000b812 0000b836     `...........6...
   1ac28:	0000b844 0000b876 0000b876 0000b8be     D...v...v.......
   1ac38:	0000b7f6 0000b8f4 0000b8f4 0000b8f4     ................
   1ac48:	0000b8f4 0000b852 0000bae2 0000bae2     ....R...........
   1ac58:	0000bb1a 0000ba8c 0000bab2 0000bac2     ................
   1ac68:	0000bafc 0000bafc 0000bb54 0000ba68     ........T...h...
   1ac78:	0000bf28 0000bf28 0000bf28 0000bf28     (...(...(...(...
   1ac88:	0000bad2 cac4c9c3                       ........

0001ac90 <__FUNCTION__.16063>:
   1ac90:	5f697073 00646d63                       spi_cmd.

0001ac98 <__FUNCTION__.16070>:
   1ac98:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0001aca8 <__FUNCTION__.16079>:
   1aca8:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0001acb4 <__FUNCTION__.16112>:
   1acb4:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   1acc4:	00000000                                ....

0001acc8 <__FUNCTION__.16158>:
   1acc8:	5f697073 61746164 6972775f 00006574     spi_data_write..

0001acd8 <__FUNCTION__.16170>:
   1acd8:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0001ace8 <__FUNCTION__.16181>:
   1ace8:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0001acf8 <__FUNCTION__.16193>:
   1acf8:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0001ad08 <__FUNCTION__.16204>:
   1ad08:	735f6d6e 725f6970 00646165              nm_spi_read.

0001ad14 <__FUNCTION__.16225>:
   1ad14:	735f6d6e 695f6970 0074696e              nm_spi_init.

0001ad20 <crc7_syndrome_table>:
   1ad20:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   1ad30:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   1ad40:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   1ad50:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   1ad60:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   1ad70:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   1ad80:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   1ad90:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   1ada0:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   1adb0:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   1adc0:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   1add0:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   1ade0:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   1adf0:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   1ae00:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   1ae10:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   1ae20:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1ae30:	6e692064 6e726574 72206c61 20646165     d internal read 
   1ae40:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   1ae50:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   1ae60:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
   1ae70:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1ae80:	6e692064 6e726574 72206c61 20646165     d internal read 
   1ae90:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
   1aea0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1aeb0:	6e692064 6e726574 77206c61 65746972     d internal write
   1aec0:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   1aed0:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1aee0:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   1aef0:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
   1af00:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1af10:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   1af20:	29783830 0a2e2e2e 00000000 65736552     08x)........Rese
   1af30:	6e612074 65722064 20797274 25206425     t and retry %d %
   1af40:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   1af50:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
   1af60:	65746972 6f6c6220 28206b63 78383025     rite block (%08x
   1af70:	2e2e2e29 0000000a 696d6e5b 69707320     ).......[nmi spi
   1af80:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1af90:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   1afa0:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   1afb0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1afc0:	61642064 62206174 6b636f6c 69727720     d data block wri
   1afd0:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   1afe0:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1aff0:	656c6961 61642064 62206174 6b636f6c     ailed data block
   1b000:	63726320 69727720 202c6574 20737562      crc write, bus 
   1b010:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   1b020:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   1b030:	72652073 2e726f72 000a2e2e 696d6e5b     s error.....[nmi
   1b040:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1b050:	72206174 6f707365 2065736e 64616572     ta response read
   1b060:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   1b070:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1b080:	206b636f 61746164 69727720 2e2e6574     ock data write..
   1b090:	00000a2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1b0a0:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   1b0b0:	73756220 72726520 2e2e726f 00000a2e      bus error......
   1b0c0:	696d6e5b 69707320 73203a5d 62206970     [nmi spi]: spi b
   1b0d0:	65666675 69732072 7420657a 73206f6f     uffer size too s
   1b0e0:	6c6c616d 64252820 25282029 000a2964     mall (%d) (%d)..
   1b0f0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1b100:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   1b110:	20646d63 32302528 202c2978 70736572     cmd (%02x), resp
   1b120:	30252820 0a297832 00000000 696d6e5b      (%02x).....[nmi
   1b130:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1b140:	74732064 20657461 70736572 65736e6f     d state response
   1b150:	61747320 28206574 78323025 00000a29      state (%02x)...
   1b160:	696d6e5b 69707320 45203a5d 726f7272     [nmi spi]: Error
   1b170:	6164202c 72206174 20646165 70736572     , data read resp
   1b180:	65736e6f 30252820 0a297832 00000000     onse (%02x).....
   1b190:	696d6e5b 69707320 62203a5d 65666675     [nmi spi]: buffe
   1b1a0:	766f2072 75727265 6877206e 72206e65     r overrun when r
   1b1b0:	69646165 6420676e 2e617461 0000000a     eading data.....
   1b1c0:	696d6e5b 69707320 62203a5d 65666675     [nmi spi]: buffe
   1b1d0:	766f2072 75727265 6877206e 72206e65     r overrun when r
   1b1e0:	69646165 6320676e 0a2e6372 00000000     eading crc......
   1b1f0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1b200:	61642064 62206174 6b636f6c 61657220     d data block rea
   1b210:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   1b220:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1b230:	656c6961 61642064 62206174 6b636f6c     ailed data block
   1b240:	63726320 61657220 62202c64 65207375      crc read, bus e
   1b250:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   1b260:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1b270:	72206174 6f707365 2065736e 64616572     ta response read
   1b280:	7562202c 72652073 2e726f72 000a2e2e     , bus error.....
   1b290:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1b2a0:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   1b2b0:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   1b2c0:	00000a2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1b2d0:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   1b2e0:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
   1b2f0:	65736552 6e612074 65722064 20797274     Reset and retry 
   1b300:	25206425 000a786c 696d6e5b 69707320     %d %lx..[nmi spi
   1b310:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
   1b320:	65746972 67657220 30252820 2e297838     rite reg (%08x).
   1b330:	000a2e2e 65736552 6e612074 65722064     ....Reset and re
   1b340:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   1b350:	52524528 75432952 6e657272 253c2074     (ERRR)Current <%
   1b360:	000a3e64 6b636f53 206f7420 656c6564     d>..Sock to dele
   1b370:	3c206574 0a3e6425 00000000 6b636f53     te <%d>.....Sock
   1b380:	25207465 65732064 6f697373 4449206e     et %d session ID
   1b390:	25203d20 000a0d64 42000800 42000c00      = %d......B...B
   1b3a0:	42001000 42001400 42001800 42001c00     ...B...B...B...B
   1b3b0:	0000e5c6 0000e5c2 0000e5c2 0000e628     ............(...
   1b3c0:	0000e628 0000e5da 0000e5cc 0000e5e0     (...............
   1b3d0:	0000e616 0000e754 0000e734 0000e734     ....T...4...4...
   1b3e0:	0000e7c0 0000e746 0000e762 0000e738     ....F...b...8...
   1b3f0:	0000e770 0000e7b0                       p.......

0001b3f8 <_tcc_apbcmasks>:
   1b3f8:	00000100 00000200 00000400              ............

0001b404 <_tcc_cc_nums>:
   1b404:	00020204                                ....

0001b408 <_tcc_gclk_ids>:
   1b408:	001b1a1a                                ....

0001b40c <_tcc_maxs>:
   1b40c:	00ffffff 00ffffff 0000ffff              ............

0001b418 <_tcc_ow_nums>:
   1b418:	00020408                                ....

0001b41c <_tcc_intflag>:
   1b41c:	00000001 00000002 00000004 00000008     ................
   1b42c:	00001000 00002000 00004000 00008000     ..... ...@......
   1b43c:	00010000 00020000 00040000 00080000     ................

0001b44c <tcc_interrupt_vectors.12458>:
   1b44c:	0011100f                                ....

0001b450 <LfnOfs>:
   1b450:	07050301 12100e09 1c181614 0000001e     ................

0001b460 <excvt.4558>:
   1b460:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   1b470:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   1b480:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   1b490:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   1b4a0:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   1b4b0:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   1b4c0:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   1b4d0:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   1b4e0:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   1b4f0:	00005d5b                                []..

0001b4f4 <Tbl>:
   1b4f4:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   1b504:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   1b514:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   1b524:	00d600ff 00f800dc 00d800a3 019200d7     ................
   1b534:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   1b544:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   1b554:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   1b564:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   1b574:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   1b584:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   1b594:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   1b5a4:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   1b5b4:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   1b5c4:	00da00de 00d900db 00dd00fd 00b400af     ................
   1b5d4:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   1b5e4:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0001b5f4 <tbl_lower.4308>:
   1b5f4:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   1b604:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   1b614:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   1b624:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   1b634:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   1b644:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   1b654:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   1b664:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   1b674:	01050103 01090107 010d010b 0111010f     ................
   1b684:	01150113 01190117 011d011b 0121011f     ..............!.
   1b694:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   1b6a4:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   1b6b4:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   1b6c4:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   1b6d4:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   1b6e4:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   1b6f4:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   1b704:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   1b714:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   1b724:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   1b734:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   1b744:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   1b754:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   1b764:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   1b774:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   1b784:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   1b794:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   1b7a4:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   1b7b4:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   1b7c4:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0001b7d4 <tbl_upper.4309>:
   1b7d4:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   1b7e4:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   1b7f4:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   1b804:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   1b814:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   1b824:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   1b834:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   1b844:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   1b854:	01040102 01080106 010c010a 0110010e     ................
   1b864:	01140112 01180116 011c011a 0120011e     .............. .
   1b874:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   1b884:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   1b894:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   1b8a4:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   1b8b4:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   1b8c4:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   1b8d4:	03940393 03960395 03980397 039a0399     ................
   1b8e4:	039c039b 039e039d 03a0039f 03a303a1     ................
   1b8f4:	03a503a4 03a703a6 03a903a8 041003aa     ................
   1b904:	04120411 04140413 04160415 04180417     ................
   1b914:	041a0419 041c041b 041e041d 0420041f     .............. .
   1b924:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   1b934:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   1b944:	04030402 04050404 04070406 04090408     ................
   1b954:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   1b964:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   1b974:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   1b984:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   1b994:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   1b9a4:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   1b9b4:	4354514d 00000000 00000004 00000000     MQTC............
	...
   1b9cc:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   1ba0c:	4354514d 00000000 00000004 00000000     MQTC............
	...
   1ba24:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   1ba64:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   1ba74:	0a0d0a0d 2d2d2d2d 4553452d 20363135     ....-----ESE516 
   1ba84:	6e69614d 6f725020 6d617267 2d2d2d2d     Main Program----
   1ba94:	000a0d2d 0a0d0a0d 74696e49 696c6169     -.......Initiali
   1baa4:	4820657a 2e2e2e57 00000a0d 6f727245     ze HW.......Erro
   1bab4:	6e692072 61697469 697a696c 4920676e     r initializing I
   1bac4:	44204332 65766972 0a0d2172 00000000     2C Driver!......
   1bad4:	74696e49 696c6169 2064657a 20433249     Initialized I2C 
   1bae4:	76697244 0d217265 0000000a 36454d42     Driver!.....BME6
   1baf4:	49203038 6974696e 66206c61 656c6961     80 Initial faile
   1bb04:	0a0d2164 00000000 36454d42 49203038     d!......BME680 I
   1bb14:	6974696e 64656c61 63755320 73736563     nitialed Success
   1bb24:	000a0d21 20554d49 74696e69 696c6169     !...IMU initiali
   1bb34:	2164657a 00000a0d 6c756f43 6f6e2064     zed!....Could no
   1bb44:	6e692074 61697469 657a696c 554d4920     t initialize IMU
   1bb54:	00000a0d 70616548 66656220 2065726f     ....Heap before 
   1bb64:	72617473 676e6974 73617420 203a736b     starting tasks: 
   1bb74:	0a0d6425 00000000 5f494c43 4b534154     %d......CLI_TASK
   1bb84:	00000000 3a525245 494c4320 73617420     ....ERR: CLI tas
   1bb94:	6f63206b 20646c75 20746f6e 69206562     k could not be i
   1bba4:	6974696e 7a696c61 0d216465 0000000a     nitialized!.....
   1bbb4:	70616548 74666120 73207265 74726174     Heap after start
   1bbc4:	20676e69 3a494c43 0d642520 0000000a     ing CLI: %d.....
   1bbd4:	49464957 5341545f 0000004b 3a525245     WIFI_TASK...ERR:
   1bbe4:	46495720 61742049 63206b73 646c756f      WIFI task could
   1bbf4:	746f6e20 20656220 74696e69 696c6169      not be initiali
   1bc04:	2164657a 00000a0d 70616548 74666120     zed!....Heap aft
   1bc14:	73207265 74726174 20676e69 49464957     er starting WIFI
   1bc24:	6425203a 00000a0d 6f727245 6e6f2072     : %d....Error on
   1bc34:	6d656d20 2079726f 6f6c6c61 69746163      memory allocati
   1bc44:	6f206e6f 5246206e 54524545 0d21534f     on on FREERTOS!.
   1bc54:	0000000a 6f727245 6e6f2072 61747320     ....Error on sta
   1bc64:	6f206b63 66726576 20776f6c 46206e6f     ck overflow on F
   1bc74:	52454552 21534f54 00000a0d              REERTOS!....

0001bc80 <_global_impure_ptr>:
   1bc80:	2000022c 00464e49 00666e69 004e414e     ,.. INF.inf.NAN.
   1bc90:	006e616e 31300030 35343332 39383736     nan.0.0123456789
   1bca0:	44434241 30004645 34333231 38373635     ABCDEF.012345678
   1bcb0:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
   1bcc0:	4e614e00 00000000                       .NaN....

0001bcc8 <__sf_fake_stderr>:
	...

0001bce8 <__sf_fake_stdin>:
	...

0001bd08 <__sf_fake_stdout>:
	...
   1bd28:	4f500043 00584953 0000002e 00000000     C.POSIX.........

0001bd38 <__mprec_bigtens>:
   1bd38:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   1bd48:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   1bd58:	7f73bf3c 75154fdd                       <.s..O.u

0001bd60 <__mprec_tens>:
   1bd60:	00000000 3ff00000 00000000 40240000     .......?......$@
   1bd70:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   1bd80:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   1bd90:	00000000 412e8480 00000000 416312d0     .......A......cA
   1bda0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   1bdb0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   1bdc0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   1bdd0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   1bde0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   1bdf0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   1be00:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   1be10:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   1be20:	79d99db4 44ea7843                       ...yCx.D

0001be28 <p05.6047>:
   1be28:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
   1be38:	6c680020 6665004c 47464567 20200000               .hlL.efgEFG.

0001be45 <_ctype_>:
   1be45:	20202000 20202020 28282020 20282828     .         ((((( 
   1be55:	20202020 20202020 20202020 20202020                     
   1be65:	10108820 10101010 10101010 10101010      ...............
   1be75:	04040410 04040404 10040404 10101010     ................
   1be85:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1be95:	01010101 01010101 01010101 10101010     ................
   1bea5:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1beb5:	02020202 02020202 02020202 10101010     ................
   1bec5:	00000020 00000000 00000000 00000000      ...............
	...
   1bf45:	30000000 00000161 12000161 54000161     ...0a...a...a..T
   1bf55:	12000160 f6000161 12000160 54000161     `...a...`...a..T
   1bf65:	00000160 00000161 f6000161 54000160     `...a...a...`..T
   1bf75:	5c000160 5c000160 5c000160 18000160     `..\`..\`..\`...
   1bf85:	00000161 00000161 d4000161 b8000160     a...a...a...`...
   1bf95:	d4000161 f6000160 d4000160 b8000160     a...`...`...`...
   1bfa5:	00000161 00000161 f6000161 b8000160     a...a...a...`...
   1bfb5:	5c000161 5c000160 5c000160 c2000160     a..\`..\`..\`...
   1bfc5:	60000161 b0000163 b0000162 ae000162     a..`c...b...b...
   1bfd5:	52000162 52000163 48000163 ae000163     b..Rc..Rc..Hc...
   1bfe5:	52000162 48000163 52000163 ae000163     b..Rc..Hc..Rc...
   1bff5:	58000162 58000163 58000163 e8000163     b..Xc..Xc..Xc...
   1c005:	30000163 12000171 cc000171 ea000170     c..0q...q...p...
   1c015:	cc00016f 04000170 cc000171 ea000170     o...p...q...p...
   1c025:	1200016f 12000171 04000171 ea000171     o...q...q...q...
   1c035:	e200016f e200016f e200016f 4800016f     o...o...o...o..H
   1c045:	90000173 50000179 50000178 4c000178     s...y..Px..Px..L
   1c055:	68000178 68000179 5a000179 4c000179     x..hy..hy..Zy..L
   1c065:	68000178 5a000179 68000179 4c000179     x..hy..Zy..hy..L
   1c075:	70000178 70000179 70000179 74000179     x..py..py..py..t
   1c085:	f800017b                                         {..

0001c088 <_init>:
   1c088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c08a:	46c0      	nop			; (mov r8, r8)
   1c08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1c08e:	bc08      	pop	{r3}
   1c090:	469e      	mov	lr, r3
   1c092:	4770      	bx	lr

0001c094 <__init_array_start>:
   1c094:	000000dd 	.word	0x000000dd

0001c098 <_fini>:
   1c098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c09a:	46c0      	nop			; (mov r8, r8)
   1c09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1c09e:	bc08      	pop	{r3}
   1c0a0:	469e      	mov	lr, r3
   1c0a2:	4770      	bx	lr

0001c0a4 <__fini_array_start>:
   1c0a4:	000000b5 	.word	0x000000b5
